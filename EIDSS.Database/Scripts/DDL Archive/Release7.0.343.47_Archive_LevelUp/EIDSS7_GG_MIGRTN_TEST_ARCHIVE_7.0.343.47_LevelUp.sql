/*
Deployment script for EIDSS7_GG_MIGRTN_TEST_ARCHIVE

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
PRINT N'Dropping Default Constraint [dbo].[DEF_ASPNetUserPreviousPasswords_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] DROP CONSTRAINT [DEF_ASPNetUserPreviousPasswords_SourceSystemNameID];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__ASPNetUserPreviousPasswords__AudiCreateUser]...';


GO
ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] DROP CONSTRAINT [DF__ASPNetUserPreviousPasswords__AudiCreateUser];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__ASPNetUserPreviousPasswords__AuditCreateDTM]...';


GO
ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] DROP CONSTRAINT [DF__ASPNetUserPreviousPasswords__AuditCreateDTM];


GO
PRINT N'Dropping Default Constraint [dbo].[DF_ASPNetUserPreviousPasswords__rowguid]...';


GO
ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] DROP CONSTRAINT [DF_ASPNetUserPreviousPasswords__rowguid];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__ASPNetUserPreviousPasswords__AuditUpdateDTM]...';


GO
ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] DROP CONSTRAINT [DF__ASPNetUserPreviousPasswords__AuditUpdateDTM];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__ASPNetUserPreviousPasswords__AuditUpdateUser]...';


GO
ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] DROP CONSTRAINT [DF__ASPNetUserPreviousPasswords__AuditUpdateUser];


GO
PRINT N'Dropping Default Constraint [dbo].[Def_ASPNetUserPreviousPasswords_intRowStatus]...';


GO
ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] DROP CONSTRAINT [Def_ASPNetUserPreviousPasswords_intRowStatus];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__trtSystem__intRo__2706EE0D]...';


GO
ALTER TABLE [dbo].[trtSystemFunctionOperation] DROP CONSTRAINT [DF__trtSystem__intRo__2706EE0D];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__trtSystem__rowgu__27FB1246]...';


GO
ALTER TABLE [dbo].[trtSystemFunctionOperation] DROP CONSTRAINT [DF__trtSystem__rowgu__27FB1246];


GO
PRINT N'Dropping Default Constraint [dbo].[DF_trtSystemFunctionOperation_CreateDTM]...';


GO
ALTER TABLE [dbo].[trtSystemFunctionOperation] DROP CONSTRAINT [DF_trtSystemFunctionOperation_CreateDTM];


GO
PRINT N'Dropping Default Constraint [dbo].[DF_tstCheckConstraints_CreateDTM]...';


GO
ALTER TABLE [dbo].[tstCheckConstraints] DROP CONSTRAINT [DF_tstCheckConstraints_CreateDTM];


GO
PRINT N'Dropping Default Constraint [dbo].[DF_tstCheckConstraints_rowguid]...';


GO
ALTER TABLE [dbo].[tstCheckConstraints] DROP CONSTRAINT [DF_tstCheckConstraints_rowguid];


GO
PRINT N'Dropping Default Constraint [dbo].[DF_tstInvalidObjects_rowguid]...';


GO
ALTER TABLE [dbo].[tstInvalidObjects] DROP CONSTRAINT [DF_tstInvalidObjects_rowguid];


GO
PRINT N'Dropping Default Constraint [dbo].[DF_tstInvalidObjects_CreateDTM]...';


GO
ALTER TABLE [dbo].[tstInvalidObjects] DROP CONSTRAINT [DF_tstInvalidObjects_CreateDTM];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ASPNetUserPreviousPasswords_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] DROP CONSTRAINT [FK_ASPNetUserPreviousPasswords_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ASPNetUserPreviousPasswords_AspNetUsers_Id]...';


GO
ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] DROP CONSTRAINT [FK_ASPNetUserPreviousPasswords_AspNetUsers_Id];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSystemFunctionOperation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSystemFunctionOperation] DROP CONSTRAINT [FK_trtSystemFunctionOperation_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstCheckConstraints_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstCheckConstraints] DROP CONSTRAINT [FK_tstCheckConstraints_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstCheckConstraints_tstCheckTables__idfCheckTable]...';


GO
ALTER TABLE [dbo].[tstCheckConstraints] DROP CONSTRAINT [FK_tstCheckConstraints_tstCheckTables__idfCheckTable];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstInvalidObjects_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstInvalidObjects] DROP CONSTRAINT [FK_tstInvalidObjects_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AccessRule_tflSiteGroup_GrantingActorSiteGroupID]...';


GO
ALTER TABLE [dbo].[AccessRule] DROP CONSTRAINT [FK_AccessRule_tflSiteGroup_GrantingActorSiteGroupID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AccessRule_trtBaseReference]...';


GO
ALTER TABLE [dbo].[AccessRule] DROP CONSTRAINT [FK_AccessRule_trtBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AccessRule_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[AccessRule] DROP CONSTRAINT [FK_AccessRule_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AccessRule_tstSite_GrantingActorSiteID]...';


GO
ALTER TABLE [dbo].[AccessRule] DROP CONSTRAINT [FK_AccessRule_tstSite_GrantingActorSiteID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AccessRuleActor_AccessRule_AccessRuleID]...';


GO
ALTER TABLE [dbo].[AccessRuleActor] DROP CONSTRAINT [FK_AccessRuleActor_AccessRule_AccessRuleID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AccessRuleActor_tflSiteGroup_ActorSiteGroupID]...';


GO
ALTER TABLE [dbo].[AccessRuleActor] DROP CONSTRAINT [FK_AccessRuleActor_tflSiteGroup_ActorSiteGroupID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AccessRuleActor_tlbEmployeGroup_ActorEmployeeGroupID]...';


GO
ALTER TABLE [dbo].[AccessRuleActor] DROP CONSTRAINT [FK_AccessRuleActor_tlbEmployeGroup_ActorEmployeeGroupID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AccessRuleActor_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[AccessRuleActor] DROP CONSTRAINT [FK_AccessRuleActor_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AccessRuleActor_tstSite_ActorSiteID]...';


GO
ALTER TABLE [dbo].[AccessRuleActor] DROP CONSTRAINT [FK_AccessRuleActor_tstSite_ActorSiteID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AccessRuleActor_tstUserTable_ActorUserID]...';


GO
ALTER TABLE [dbo].[AccessRuleActor] DROP CONSTRAINT [FK_AccessRuleActor_tstUserTable_ActorUserID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AccessRulePermission_AccessRule_AccessRuleID]...';


GO
ALTER TABLE [dbo].[AccessRulePermission] DROP CONSTRAINT [FK_AccessRulePermission_AccessRule_AccessRuleID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AccessRulePermission_trtBaseReference_AccessPermissionID]...';


GO
ALTER TABLE [dbo].[AccessRulePermission] DROP CONSTRAINT [FK_AccessRulePermission_trtBaseReference_AccessPermissionID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AccessRulePermission_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[AccessRulePermission] DROP CONSTRAINT [FK_AccessRulePermission_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AppObjectSysFunction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[AppObjectSysFunction] DROP CONSTRAINT [FK_AppObjectSysFunction_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AppObjSysFunction_AppObj_AppObjectNameID]...';


GO
ALTER TABLE [dbo].[AppObjectSysFunction] DROP CONSTRAINT [FK_AppObjSysFunction_AppObj_AppObjectNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AppObjSysFunction_BaseReference_SysFunctionID]...';


GO
ALTER TABLE [dbo].[AppObjectSysFunction] DROP CONSTRAINT [FK_AppObjSysFunction_BaseReference_SysFunctionID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AppSessionLog_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[AppSessionLog] DROP CONSTRAINT [FK_AppSessionLog_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_SesionLog_BaseRef_AppModuleGroupID]...';


GO
ALTER TABLE [dbo].[AppSessionLog] DROP CONSTRAINT [FK_SesionLog_BaseRef_AppModuleGroupID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_SessionLog_BaseRef_ModuleConstantID]...';


GO
ALTER TABLE [dbo].[AppSessionLog] DROP CONSTRAINT [FK_SessionLog_BaseRef_ModuleConstantID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ArchiveSetting_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ArchiveSetting] DROP CONSTRAINT [FK_ArchiveSetting_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ASPNetRole_tlbEmployeeGRoup_idfemployeeGroup]...';


GO
ALTER TABLE [dbo].[AspNetRoles] DROP CONSTRAINT [FK_ASPNetRole_tlbEmployeeGRoup_idfemployeeGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[AspNetUserClaims] DROP CONSTRAINT [FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[AspNetUserLogins] DROP CONSTRAINT [FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId]...';


GO
ALTER TABLE [dbo].[AspNetUserRoles] DROP CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[AspNetUserRoles] DROP CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AspNetUsers_tstUserTable_UserID]...';


GO
ALTER TABLE [dbo].[AspNetUsers] DROP CONSTRAINT [FK_AspNetUsers_tstUserTable_UserID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AspNetUserTokens_AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[AspNetUserTokens] DROP CONSTRAINT [FK_AspNetUserTokens_AspNetUsers_UserId];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AuditEventSystemLog_AppSessionLog]...';


GO
ALTER TABLE [dbo].[AuditEventSystemLog] DROP CONSTRAINT [FK_AuditEventSystemLog_AppSessionLog];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AuditEventSystemLog_BaseRef_AuditObjectID]...';


GO
ALTER TABLE [dbo].[AuditEventSystemLog] DROP CONSTRAINT [FK_AuditEventSystemLog_BaseRef_AuditObjectID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AuditEventSystemLog_idfsModule]...';


GO
ALTER TABLE [dbo].[AuditEventSystemLog] DROP CONSTRAINT [FK_AuditEventSystemLog_idfsModule];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AuditEventSystemLog_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[AuditEventSystemLog] DROP CONSTRAINT [FK_AuditEventSystemLog_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AuditEventSystemLog_tstSite_idfSiteID]...';


GO
ALTER TABLE [dbo].[AuditEventSystemLog] DROP CONSTRAINT [FK_AuditEventSystemLog_tstSite_idfSiteID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AuditEventSystemLog_UserTable_idfAppUserID]...';


GO
ALTER TABLE [dbo].[AuditEventSystemLog] DROP CONSTRAINT [FK_AuditEventSystemLog_UserTable_idfAppUserID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AuditEventUserLog_AuditEventSystemLog_LogUID]...';


GO
ALTER TABLE [dbo].[AuditEventUserLog] DROP CONSTRAINT [FK_AuditEventUserLog_AuditEventSystemLog_LogUID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AuditEventUserLog_BaseRef_AuditEventTypeID]...';


GO
ALTER TABLE [dbo].[AuditEventUserLog] DROP CONSTRAINT [FK_AuditEventUserLog_BaseRef_AuditEventTypeID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AuditEventUserLog_BaseRef_AuditObjectTypeID]...';


GO
ALTER TABLE [dbo].[AuditEventUserLog] DROP CONSTRAINT [FK_AuditEventUserLog_BaseRef_AuditObjectTypeID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AuditEventUserLog_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[AuditEventUserLog] DROP CONSTRAINT [FK_AuditEventUserLog_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AuditEventUserLog_tstSite_idfSiteID]...';


GO
ALTER TABLE [dbo].[AuditEventUserLog] DROP CONSTRAINT [FK_AuditEventUserLog_tstSite_idfSiteID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AuditEventUserLog_UserTable_idfAppUserID]...';


GO
ALTER TABLE [dbo].[AuditEventUserLog] DROP CONSTRAINT [FK_AuditEventUserLog_UserTable_idfAppUserID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_DiagnosisGroupToGender_trtBaseReference_DiagnosisGroupID]...';


GO
ALTER TABLE [dbo].[DiagnosisGroupToGender] DROP CONSTRAINT [FK_DiagnosisGroupToGender_trtBaseReference_DiagnosisGroupID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_DiagnosisGroupToGender_trtBaseReference_GenderID]...';


GO
ALTER TABLE [dbo].[DiagnosisGroupToGender] DROP CONSTRAINT [FK_DiagnosisGroupToGender_trtBaseReference_GenderID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_DiagnosisGroupToGender_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[DiagnosisGroupToGender] DROP CONSTRAINT [FK_DiagnosisGroupToGender_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_dotNetAppenderLog_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[dotNetAppenderLog] DROP CONSTRAINT [FK_dotNetAppenderLog_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_EmployeeToInstitution_AspNetUserId]...';


GO
ALTER TABLE [dbo].[EmployeeToInstitution] DROP CONSTRAINT [FK_EmployeeToInstitution_AspNetUserId];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_EmployeeToInstitution_Office]...';


GO
ALTER TABLE [dbo].[EmployeeToInstitution] DROP CONSTRAINT [FK_EmployeeToInstitution_Office];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_EmployeeToInstitution_UserId]...';


GO
ALTER TABLE [dbo].[EmployeeToInstitution] DROP CONSTRAINT [FK_EmployeeToInstitution_UserId];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_EventSubscription_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[EventSubscription] DROP CONSTRAINT [FK_EventSubscription_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_EventSubscription_trtEventType_EventNameID]...';


GO
ALTER TABLE [dbo].[EventSubscription] DROP CONSTRAINT [FK_EventSubscription_trtEventType_EventNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_EventSubscription_tstUserTable]...';


GO
ALTER TABLE [dbo].[EventSubscription] DROP CONSTRAINT [FK_EventSubscription_tstUserTable];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDecorElement_ffFormTemplate__idfsFormTemplate_R_1373]...';


GO
ALTER TABLE [dbo].[ffDecorElement] DROP CONSTRAINT [FK_ffDecorElement_ffFormTemplate__idfsFormTemplate_R_1373];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDecorElement_ffSection__idfsSection_R_1379]...';


GO
ALTER TABLE [dbo].[ffDecorElement] DROP CONSTRAINT [FK_ffDecorElement_ffSection__idfsSection_R_1379];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDecorElement_trtBaseReference__idfsDecorElementType_R_1376]...';


GO
ALTER TABLE [dbo].[ffDecorElement] DROP CONSTRAINT [FK_ffDecorElement_trtBaseReference__idfsDecorElementType_R_1376];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDecorElement_trtBaseReference__idfsLanguage_R_1375]...';


GO
ALTER TABLE [dbo].[ffDecorElement] DROP CONSTRAINT [FK_ffDecorElement_trtBaseReference__idfsLanguage_R_1375];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDecorElement_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffDecorElement] DROP CONSTRAINT [FK_ffDecorElement_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDecorElementLine_ffDecorElement__idfDecorElement_R_1401]...';


GO
ALTER TABLE [dbo].[ffDecorElementLine] DROP CONSTRAINT [FK_ffDecorElementLine_ffDecorElement__idfDecorElement_R_1401];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDecorElementLine_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffDecorElementLine] DROP CONSTRAINT [FK_ffDecorElementLine_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDecorElementText_ffDecorElement__idfDecorElement_R_1374]...';


GO
ALTER TABLE [dbo].[ffDecorElementText] DROP CONSTRAINT [FK_ffDecorElementText_ffDecorElement__idfDecorElement_R_1374];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDecorElementText_trtBaseReference__idfsBaseReference_R_1389]...';


GO
ALTER TABLE [dbo].[ffDecorElementText] DROP CONSTRAINT [FK_ffDecorElementText_trtBaseReference__idfsBaseReference_R_1389];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDecorElementText_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffDecorElementText] DROP CONSTRAINT [FK_ffDecorElementText_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDeterminantType_gisReferenceType__idfsGISReferenceType_R_1669]...';


GO
ALTER TABLE [dbo].[ffDeterminantType] DROP CONSTRAINT [FK_ffDeterminantType_gisReferenceType__idfsGISReferenceType_R_1669];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDeterminantType_trtBaseReference__idfsFormType_R_1660]...';


GO
ALTER TABLE [dbo].[ffDeterminantType] DROP CONSTRAINT [FK_ffDeterminantType_trtBaseReference__idfsFormType_R_1660];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDeterminantType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffDeterminantType] DROP CONSTRAINT [FK_ffDeterminantType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDeterminantType_trtReferenceType__idfsReferenceType_R_950]...';


GO
ALTER TABLE [dbo].[ffDeterminantType] DROP CONSTRAINT [FK_ffDeterminantType_trtReferenceType__idfsReferenceType_R_950];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDeterminantValue_gisBaseReference__idfsGISBaseReference_R_1670]...';


GO
ALTER TABLE [dbo].[ffDeterminantValue] DROP CONSTRAINT [FK_ffDeterminantValue_gisBaseReference__idfsGISBaseReference_R_1670];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDeterminantValue_trtBaseReference__idfsBaseReference_R_949]...';


GO
ALTER TABLE [dbo].[ffDeterminantValue] DROP CONSTRAINT [FK_ffDeterminantValue_trtBaseReference__idfsBaseReference_R_949];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffDeterminantValue_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffDeterminantValue] DROP CONSTRAINT [FK_ffDeterminantValue_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_FFormControlValue_FFormTemplate]...';


GO
ALTER TABLE [dbo].[ffDeterminantValue] DROP CONSTRAINT [FK_FFormControlValue_FFormTemplate];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffFormTemplate_trtBaseReference__idfsFormTemplate_R_1385]...';


GO
ALTER TABLE [dbo].[ffFormTemplate] DROP CONSTRAINT [FK_ffFormTemplate_trtBaseReference__idfsFormTemplate_R_1385];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffFormTemplate_trtBaseReference__idfsFormType_R_1656]...';


GO
ALTER TABLE [dbo].[ffFormTemplate] DROP CONSTRAINT [FK_ffFormTemplate_trtBaseReference__idfsFormType_R_1656];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffFormTemplate_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffFormTemplate] DROP CONSTRAINT [FK_ffFormTemplate_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameter_ffParameterType__idfsParameterType_R_21]...';


GO
ALTER TABLE [dbo].[ffParameter] DROP CONSTRAINT [FK_ffParameter_ffParameterType__idfsParameterType_R_21];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameter_ffSection__idfsSection_R_1380]...';


GO
ALTER TABLE [dbo].[ffParameter] DROP CONSTRAINT [FK_ffParameter_ffSection__idfsSection_R_1380];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameter_trtBaseReference__idfsEditor_R_1387]...';


GO
ALTER TABLE [dbo].[ffParameter] DROP CONSTRAINT [FK_ffParameter_trtBaseReference__idfsEditor_R_1387];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameter_trtBaseReference__idfsFormType_R_1658]...';


GO
ALTER TABLE [dbo].[ffParameter] DROP CONSTRAINT [FK_ffParameter_trtBaseReference__idfsFormType_R_1658];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameter_trtBaseReference__idfsParameter_R_1382]...';


GO
ALTER TABLE [dbo].[ffParameter] DROP CONSTRAINT [FK_ffParameter_trtBaseReference__idfsParameter_R_1382];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameter_trtBaseReference__idfsParameterCaption_R_1383]...';


GO
ALTER TABLE [dbo].[ffParameter] DROP CONSTRAINT [FK_ffParameter_trtBaseReference__idfsParameterCaption_R_1383];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameter_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffParameter] DROP CONSTRAINT [FK_ffParameter_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterDesignOption_ffFormTemplate__idfsFormTemplate_R_1361]...';


GO
ALTER TABLE [dbo].[ffParameterDesignOption] DROP CONSTRAINT [FK_ffParameterDesignOption_ffFormTemplate__idfsFormTemplate_R_1361];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterDesignOption_ffParameter__idfsParameter_R_1360]...';


GO
ALTER TABLE [dbo].[ffParameterDesignOption] DROP CONSTRAINT [FK_ffParameterDesignOption_ffParameter__idfsParameter_R_1360];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterDesignOption_trtBaseReference__idfsLanguage_R_1381]...';


GO
ALTER TABLE [dbo].[ffParameterDesignOption] DROP CONSTRAINT [FK_ffParameterDesignOption_trtBaseReference__idfsLanguage_R_1381];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterDesignOption_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffParameterDesignOption] DROP CONSTRAINT [FK_ffParameterDesignOption_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterFixedPresetValue_ffParameterType__idfsParameterType_R_925]...';


GO
ALTER TABLE [dbo].[ffParameterFixedPresetValue] DROP CONSTRAINT [FK_ffParameterFixedPresetValue_ffParameterType__idfsParameterType_R_925];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterFixedPresetValue_trtBaseReference__idfsParameterFixedPresetValue_R_1398]...';


GO
ALTER TABLE [dbo].[ffParameterFixedPresetValue] DROP CONSTRAINT [FK_ffParameterFixedPresetValue_trtBaseReference__idfsParameterFixedPresetValue_R_1398];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterFixedPresetValue_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffParameterFixedPresetValue] DROP CONSTRAINT [FK_ffParameterFixedPresetValue_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterForAction_ffParameterForTemplate__idfsParameter_idfsFormTemplate_R]...';


GO
ALTER TABLE [dbo].[ffParameterForAction] DROP CONSTRAINT [FK_ffParameterForAction_ffParameterForTemplate__idfsParameter_idfsFormTemplate_R];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterForAction_ffRule__idfsRule_R_820]...';


GO
ALTER TABLE [dbo].[ffParameterForAction] DROP CONSTRAINT [FK_ffParameterForAction_ffRule__idfsRule_R_820];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterForAction_trtBaseReference__idfsRuleAction_R_1392]...';


GO
ALTER TABLE [dbo].[ffParameterForAction] DROP CONSTRAINT [FK_ffParameterForAction_trtBaseReference__idfsRuleAction_R_1392];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterForAction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffParameterForAction] DROP CONSTRAINT [FK_ffParameterForAction_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterForFunction_ffParameterForTemplate__idfsParameter___________________________________________________idfsFormTempla]...';


GO
ALTER TABLE [dbo].[ffParameterForFunction] DROP CONSTRAINT [FK_ffParameterForFunction_ffParameterForTemplate__idfsParameter___________________________________________________idfsFormTempla];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterForFunction_ffRule__idfsRule_R_1647]...';


GO
ALTER TABLE [dbo].[ffParameterForFunction] DROP CONSTRAINT [FK_ffParameterForFunction_ffRule__idfsRule_R_1647];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterForFunction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffParameterForFunction] DROP CONSTRAINT [FK_ffParameterForFunction_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterForTemplate_ffFormTemplate__idfsFormTemplate_R_91]...';


GO
ALTER TABLE [dbo].[ffParameterForTemplate] DROP CONSTRAINT [FK_ffParameterForTemplate_ffFormTemplate__idfsFormTemplate_R_91];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterForTemplate_ffParameter__idfsParameter_R_2]...';


GO
ALTER TABLE [dbo].[ffParameterForTemplate] DROP CONSTRAINT [FK_ffParameterForTemplate_ffParameter__idfsParameter_R_2];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterForTemplate_trtBaseReference__idfsEditMode_R_1388]...';


GO
ALTER TABLE [dbo].[ffParameterForTemplate] DROP CONSTRAINT [FK_ffParameterForTemplate_trtBaseReference__idfsEditMode_R_1388];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterForTemplate_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffParameterForTemplate] DROP CONSTRAINT [FK_ffParameterForTemplate_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterType_trtBaseReference__idfsParameterType_R_1395]...';


GO
ALTER TABLE [dbo].[ffParameterType] DROP CONSTRAINT [FK_ffParameterType_trtBaseReference__idfsParameterType_R_1395];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffParameterType] DROP CONSTRAINT [FK_ffParameterType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffParameterType_trtReferenceType__idfsReferenceType_R_927]...';


GO
ALTER TABLE [dbo].[ffParameterType] DROP CONSTRAINT [FK_ffParameterType_trtReferenceType__idfsReferenceType_R_927];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_FFRule_FFormTemplate]...';


GO
ALTER TABLE [dbo].[ffRule] DROP CONSTRAINT [FK_FFRule_FFormTemplate];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffRule_ffRuleFunction__idfsRuleFunction_R_1646]...';


GO
ALTER TABLE [dbo].[ffRule] DROP CONSTRAINT [FK_ffRule_ffRuleFunction__idfsRuleFunction_R_1646];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffRule_trtBaseReference__idfsCheckPoint_R_1390]...';


GO
ALTER TABLE [dbo].[ffRule] DROP CONSTRAINT [FK_ffRule_trtBaseReference__idfsCheckPoint_R_1390];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffRule_trtBaseReference__idfsRule_R_1394]...';


GO
ALTER TABLE [dbo].[ffRule] DROP CONSTRAINT [FK_ffRule_trtBaseReference__idfsRule_R_1394];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffRule_trtBaseReference__idfsRuleMessage_R_1391]...';


GO
ALTER TABLE [dbo].[ffRule] DROP CONSTRAINT [FK_ffRule_trtBaseReference__idfsRuleMessage_R_1391];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffRule_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffRule] DROP CONSTRAINT [FK_ffRule_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffRuleConstant_ffRule__idfsRule_R_1648]...';


GO
ALTER TABLE [dbo].[ffRuleConstant] DROP CONSTRAINT [FK_ffRuleConstant_ffRule__idfsRule_R_1648];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffRuleConstant_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffRuleConstant] DROP CONSTRAINT [FK_ffRuleConstant_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffRuleFunction_trtBaseReference__idfsRuleFunction_R_1393]...';


GO
ALTER TABLE [dbo].[ffRuleFunction] DROP CONSTRAINT [FK_ffRuleFunction_trtBaseReference__idfsRuleFunction_R_1393];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffRuleFunction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffRuleFunction] DROP CONSTRAINT [FK_ffRuleFunction_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffSection_ffSection__idfsParentSection_R_1362]...';


GO
ALTER TABLE [dbo].[ffSection] DROP CONSTRAINT [FK_ffSection_ffSection__idfsParentSection_R_1362];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffSection_trtBaseReference__idfsFormType_R_1659]...';


GO
ALTER TABLE [dbo].[ffSection] DROP CONSTRAINT [FK_ffSection_trtBaseReference__idfsFormType_R_1659];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffSection_trtBaseReference__idfsSection_R_1378]...';


GO
ALTER TABLE [dbo].[ffSection] DROP CONSTRAINT [FK_ffSection_trtBaseReference__idfsSection_R_1378];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffSection_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffSection] DROP CONSTRAINT [FK_ffSection_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffSection_trtMatrixType__idfsMatrixType]...';


GO
ALTER TABLE [dbo].[ffSection] DROP CONSTRAINT [FK_ffSection_trtMatrixType__idfsMatrixType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffSectionDesignOption_ffSectionForTemplate__idfsFormTemplate________________________________________________idfsSection_R_163]...';


GO
ALTER TABLE [dbo].[ffSectionDesignOption] DROP CONSTRAINT [FK_ffSectionDesignOption_ffSectionForTemplate__idfsFormTemplate________________________________________________idfsSection_R_163];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffSectionDesignOption_trtBaseReference__idfsLanguage_R_1377]...';


GO
ALTER TABLE [dbo].[ffSectionDesignOption] DROP CONSTRAINT [FK_ffSectionDesignOption_trtBaseReference__idfsLanguage_R_1377];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffSectionDesignOption_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffSectionDesignOption] DROP CONSTRAINT [FK_ffSectionDesignOption_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffSectionForAction_ffRule__idfsRule_R_1403]...';


GO
ALTER TABLE [dbo].[ffSectionForAction] DROP CONSTRAINT [FK_ffSectionForAction_ffRule__idfsRule_R_1403];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffSectionForAction_ffSectionForTemplate__idfsFormTemplate_____________________________________________idfsSection_R_1402]...';


GO
ALTER TABLE [dbo].[ffSectionForAction] DROP CONSTRAINT [FK_ffSectionForAction_ffSectionForTemplate__idfsFormTemplate_____________________________________________idfsSection_R_1402];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffSectionForAction_trtBaseReference__idfsRuleAction_R_1404]...';


GO
ALTER TABLE [dbo].[ffSectionForAction] DROP CONSTRAINT [FK_ffSectionForAction_trtBaseReference__idfsRuleAction_R_1404];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffSectionForAction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffSectionForAction] DROP CONSTRAINT [FK_ffSectionForAction_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffSectionForTemplate_ffFormTemplate__idfsFormTemplate_R_1400]...';


GO
ALTER TABLE [dbo].[ffSectionForTemplate] DROP CONSTRAINT [FK_ffSectionForTemplate_ffFormTemplate__idfsFormTemplate_R_1400];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffSectionForTemplate_ffSection__idfsSection_R_1399]...';


GO
ALTER TABLE [dbo].[ffSectionForTemplate] DROP CONSTRAINT [FK_ffSectionForTemplate_ffSection__idfsSection_R_1399];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ffSectionForTemplate_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffSectionForTemplate] DROP CONSTRAINT [FK_ffSectionForTemplate_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisBaseReference_gisReferenceType__idfsGISReferenceType_R_1632]...';


GO
ALTER TABLE [dbo].[gisBaseReference] DROP CONSTRAINT [FK_gisBaseReference_gisReferenceType__idfsGISReferenceType_R_1632];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisBaseReference_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisBaseReference] DROP CONSTRAINT [FK_gisBaseReference_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisCountry_gisBaseReference__idfsCountry_R_1634]...';


GO
ALTER TABLE [dbo].[gisCountry] DROP CONSTRAINT [FK_gisCountry_gisBaseReference__idfsCountry_R_1634];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisCountry_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisCountry] DROP CONSTRAINT [FK_gisCountry_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisDistrictSubdistrict_gisRayon__idfsGeoObject]...';


GO
ALTER TABLE [dbo].[gisDistrictSubdistrict] DROP CONSTRAINT [FK_gisDistrictSubdistrict_gisRayon__idfsGeoObject];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisDistrictSubdistrict_gisRayon__idfsParent]...';


GO
ALTER TABLE [dbo].[gisDistrictSubdistrict] DROP CONSTRAINT [FK_gisDistrictSubdistrict_gisRayon__idfsParent];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisDistrictSubdistrict_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisDistrictSubdistrict] DROP CONSTRAINT [FK_gisDistrictSubdistrict_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisLegendSymbol_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisLegendSymbol] DROP CONSTRAINT [FK_gisLegendSymbol_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisMainCityForRayon_gisRayon__idfsRayon]...';


GO
ALTER TABLE [dbo].[gisMainCityForRayon] DROP CONSTRAINT [FK_gisMainCityForRayon_gisRayon__idfsRayon];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisMainCityForRayon_gisSettlement__idfsMainSettlement]...';


GO
ALTER TABLE [dbo].[gisMainCityForRayon] DROP CONSTRAINT [FK_gisMainCityForRayon_gisSettlement__idfsMainSettlement];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisMetadata_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisMetadata] DROP CONSTRAINT [FK_gisMetadata_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisNewID_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisNewID] DROP CONSTRAINT [FK_gisNewID_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisOtherBaseReference_gisReferenceType__idfsGISReferenceType_R_1678]...';


GO
ALTER TABLE [dbo].[gisOtherBaseReference] DROP CONSTRAINT [FK_gisOtherBaseReference_gisReferenceType__idfsGISReferenceType_R_1678];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisOtherBaseReference_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisOtherBaseReference] DROP CONSTRAINT [FK_gisOtherBaseReference_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisOtherStringNameTranslation_gisBaseReference__idfsLanguage_R_1680]...';


GO
ALTER TABLE [dbo].[gisOtherStringNameTranslation] DROP CONSTRAINT [FK_gisOtherStringNameTranslation_gisBaseReference__idfsLanguage_R_1680];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisOtherStringNameTranslation_gisOtherBaseReference__idfsGISOtherBaseReference_R_1679]...';


GO
ALTER TABLE [dbo].[gisOtherStringNameTranslation] DROP CONSTRAINT [FK_gisOtherStringNameTranslation_gisOtherBaseReference__idfsGISOtherBaseReference_R_1679];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisOtherStringNameTranslation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisOtherStringNameTranslation] DROP CONSTRAINT [FK_gisOtherStringNameTranslation_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisRayon_gisBaseReference__idfsRayon_R_1636]...';


GO
ALTER TABLE [dbo].[gisRayon] DROP CONSTRAINT [FK_gisRayon_gisBaseReference__idfsRayon_R_1636];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisRayon_gisCountry__idfsCountry_R_233]...';


GO
ALTER TABLE [dbo].[gisRayon] DROP CONSTRAINT [FK_gisRayon_gisCountry__idfsCountry_R_233];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisRayon_gisRegion__idfsRegion_R_121]...';


GO
ALTER TABLE [dbo].[gisRayon] DROP CONSTRAINT [FK_gisRayon_gisRegion__idfsRegion_R_121];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisRayon_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisRayon] DROP CONSTRAINT [FK_gisRayon_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisReferenceType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisReferenceType] DROP CONSTRAINT [FK_gisReferenceType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisRegion_gisBaseReference__idfsRegion_R_1635]...';


GO
ALTER TABLE [dbo].[gisRegion] DROP CONSTRAINT [FK_gisRegion_gisBaseReference__idfsRegion_R_1635];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisRegion_gisCountry__idfsCountry_R_232]...';


GO
ALTER TABLE [dbo].[gisRegion] DROP CONSTRAINT [FK_gisRegion_gisCountry__idfsCountry_R_232];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisRegion_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisRegion] DROP CONSTRAINT [FK_gisRegion_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisSettlement_gisBaseReference__idfsSettlement_R_1637]...';


GO
ALTER TABLE [dbo].[gisSettlement] DROP CONSTRAINT [FK_gisSettlement_gisBaseReference__idfsSettlement_R_1637];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisSettlement_gisBaseReference__idfsSettlementType_R_1638]...';


GO
ALTER TABLE [dbo].[gisSettlement] DROP CONSTRAINT [FK_gisSettlement_gisBaseReference__idfsSettlementType_R_1638];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisSettlement_gisCountry__idfsCountry_R_7]...';


GO
ALTER TABLE [dbo].[gisSettlement] DROP CONSTRAINT [FK_gisSettlement_gisCountry__idfsCountry_R_7];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisSettlement_gisRayon__idfsRayon_R_9]...';


GO
ALTER TABLE [dbo].[gisSettlement] DROP CONSTRAINT [FK_gisSettlement_gisRayon__idfsRayon_R_9];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisSettlement_gisRegion__idfsRegion_R_8]...';


GO
ALTER TABLE [dbo].[gisSettlement] DROP CONSTRAINT [FK_gisSettlement_gisRegion__idfsRegion_R_8];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisSettlement_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisSettlement] DROP CONSTRAINT [FK_gisSettlement_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisStringNameTranslation_gisBaseReference__idfsGISBaseReference_R_1639]...';


GO
ALTER TABLE [dbo].[gisStringNameTranslation] DROP CONSTRAINT [FK_gisStringNameTranslation_gisBaseReference__idfsGISBaseReference_R_1639];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisStringNameTranslation_gisBaseReference__idfsLanguage_R_1640]...';


GO
ALTER TABLE [dbo].[gisStringNameTranslation] DROP CONSTRAINT [FK_gisStringNameTranslation_gisBaseReference__idfsLanguage_R_1640];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisStringNameTranslation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisStringNameTranslation] DROP CONSTRAINT [FK_gisStringNameTranslation_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisUserLayer_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisUserLayer] DROP CONSTRAINT [FK_gisUserLayer_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisUserLayer_tstUserTable]...';


GO
ALTER TABLE [dbo].[gisUserLayer] DROP CONSTRAINT [FK_gisUserLayer_tstUserTable];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWHOMap_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWHOMap] DROP CONSTRAINT [FK_gisWHOMap_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_idfsLocation_gisLocation]...';


GO
ALTER TABLE [dbo].[gisWHOMap] DROP CONSTRAINT [FK_idfsLocation_gisLocation];


GO
PRINT N'Dropping Foreign Key [dbo].[FK__gisWKBCou__idfsG__37E6D44C]...';


GO
ALTER TABLE [dbo].[gisWKBCountry] DROP CONSTRAINT [FK__gisWKBCou__idfsG__37E6D44C];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBCountry_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBCountry] DROP CONSTRAINT [FK_gisWKBCountry_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBDistrict_gisBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBDistrict] DROP CONSTRAINT [FK_gisWKBDistrict_gisBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBDistrict_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBDistrict] DROP CONSTRAINT [FK_gisWKBDistrict_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBDistrictReady_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBDistrictReady] DROP CONSTRAINT [FK_gisWKBDistrictReady_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBEarthRoad_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBEarthRoad] DROP CONSTRAINT [FK_gisWKBEarthRoad_gisCountry];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBEarthRoad_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBEarthRoad] DROP CONSTRAINT [FK_gisWKBEarthRoad_gisOtherBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBEarthRoad_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBEarthRoad] DROP CONSTRAINT [FK_gisWKBEarthRoad_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBForest_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBForest] DROP CONSTRAINT [FK_gisWKBForest_gisCountry];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBForest_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBForest] DROP CONSTRAINT [FK_gisWKBForest_gisOtherBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBForest_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBForest] DROP CONSTRAINT [FK_gisWKBForest_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBHighway_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBHighway] DROP CONSTRAINT [FK_gisWKBHighway_gisCountry];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBHighway_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBHighway] DROP CONSTRAINT [FK_gisWKBHighway_gisOtherBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBHighway_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBHighway] DROP CONSTRAINT [FK_gisWKBHighway_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBInlandWater_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBInlandWater] DROP CONSTRAINT [FK_gisWKBInlandWater_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBLake_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBLake] DROP CONSTRAINT [FK_gisWKBLake_gisCountry];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBLake_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBLake] DROP CONSTRAINT [FK_gisWKBLake_gisOtherBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBLake_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBLake] DROP CONSTRAINT [FK_gisWKBLake_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBLanduse_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBLanduse] DROP CONSTRAINT [FK_gisWKBLanduse_gisCountry];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBLanduse_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBLanduse] DROP CONSTRAINT [FK_gisWKBLanduse_gisOtherBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBLanduse_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBLanduse] DROP CONSTRAINT [FK_gisWKBLanduse_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBMainRiver_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBMainRiver] DROP CONSTRAINT [FK_gisWKBMainRiver_gisCountry];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBMainRiver_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBMainRiver] DROP CONSTRAINT [FK_gisWKBMainRiver_gisOtherBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBMainRiver_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBMainRiver] DROP CONSTRAINT [FK_gisWKBMainRiver_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBMajorRoad_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBMajorRoad] DROP CONSTRAINT [FK_gisWKBMajorRoad_gisCountry];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBMajorRoad_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBMajorRoad] DROP CONSTRAINT [FK_gisWKBMajorRoad_gisOtherBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBMajorRoad_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBMajorRoad] DROP CONSTRAINT [FK_gisWKBMajorRoad_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBPath_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBPath] DROP CONSTRAINT [FK_gisWKBPath_gisCountry];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBPath_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBPath] DROP CONSTRAINT [FK_gisWKBPath_gisOtherBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBPath_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBPath] DROP CONSTRAINT [FK_gisWKBPath_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRailroad_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBRailroad] DROP CONSTRAINT [FK_gisWKBRailroad_gisCountry];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRailroad_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBRailroad] DROP CONSTRAINT [FK_gisWKBRailroad_gisOtherBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRailroad_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRailroad] DROP CONSTRAINT [FK_gisWKBRailroad_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK__gisWKBRay__idfsG__35FE8BDA]...';


GO
ALTER TABLE [dbo].[gisWKBRayon] DROP CONSTRAINT [FK__gisWKBRay__idfsG__35FE8BDA];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRayon_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRayon] DROP CONSTRAINT [FK_gisWKBRayon_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRayonReady_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRayonReady] DROP CONSTRAINT [FK_gisWKBRayonReady_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK__gisWKBReg__idfsG__34164368]...';


GO
ALTER TABLE [dbo].[gisWKBRegion] DROP CONSTRAINT [FK__gisWKBReg__idfsG__34164368];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRegion_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRegion] DROP CONSTRAINT [FK_gisWKBRegion_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRegionReady_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRegionReady] DROP CONSTRAINT [FK_gisWKBRegionReady_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRiver_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBRiver] DROP CONSTRAINT [FK_gisWKBRiver_gisCountry];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRiver_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBRiver] DROP CONSTRAINT [FK_gisWKBRiver_gisOtherBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRiver_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRiver] DROP CONSTRAINT [FK_gisWKBRiver_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRiverPolygon_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBRiverPolygon] DROP CONSTRAINT [FK_gisWKBRiverPolygon_gisCountry];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRiverPolygon_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBRiverPolygon] DROP CONSTRAINT [FK_gisWKBRiverPolygon_gisOtherBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRiverPolygon_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRiverPolygon] DROP CONSTRAINT [FK_gisWKBRiverPolygon_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRuralDistrict_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBRuralDistrict] DROP CONSTRAINT [FK_gisWKBRuralDistrict_gisCountry];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRuralDistrict_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBRuralDistrict] DROP CONSTRAINT [FK_gisWKBRuralDistrict_gisOtherBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBRuralDistrict_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRuralDistrict] DROP CONSTRAINT [FK_gisWKBRuralDistrict_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBSea_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBSea] DROP CONSTRAINT [FK_gisWKBSea_gisOtherBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBSea_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBSea] DROP CONSTRAINT [FK_gisWKBSea_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK__gisWKBSet__idfsG__322DFAF6]...';


GO
ALTER TABLE [dbo].[gisWKBSettlement] DROP CONSTRAINT [FK__gisWKBSet__idfsG__322DFAF6];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBSettlement_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBSettlement] DROP CONSTRAINT [FK_gisWKBSettlement_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBSettlementReady_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBSettlementReady] DROP CONSTRAINT [FK_gisWKBSettlementReady_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBSmallRiver_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBSmallRiver] DROP CONSTRAINT [FK_gisWKBSmallRiver_gisCountry];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBSmallRiver_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBSmallRiver] DROP CONSTRAINT [FK_gisWKBSmallRiver_gisOtherBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_gisWKBSmallRiver_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBSmallRiver] DROP CONSTRAINT [FK_gisWKBSmallRiver_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[[FK_HumanActualAddlInfo_Human_UID]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] DROP CONSTRAINT [[FK_HumanActualAddlInfo_Human_UID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanActualAddlInfo_BaseRef_AgeUOM]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] DROP CONSTRAINT [FK_HumanActualAddlInfo_BaseRef_AgeUOM];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanActualAddlInfo_BaseRef_ContactPhone2NbrType]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] DROP CONSTRAINT [FK_HumanActualAddlInfo_BaseRef_ContactPhone2NbrType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanActualAddlInfo_BaseRef_ContactPhoneNbrType]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] DROP CONSTRAINT [FK_HumanActualAddlInfo_BaseRef_ContactPhoneNbrType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanActualAddlInfo_BaseRef_IsEmployed]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] DROP CONSTRAINT [FK_HumanActualAddlInfo_BaseRef_IsEmployed];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanActualAddlInfo_tlbHUmanActual_idfHumanActual]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] DROP CONSTRAINT [FK_HumanActualAddlInfo_tlbHUmanActual_idfHumanActual];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanActualAddlInfo_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] DROP CONSTRAINT [FK_HumanActualAddlInfo_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanActulaAddlIfo_BaseRef_IsSchool]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] DROP CONSTRAINT [FK_HumanActulaAddlIfo_BaseRef_IsSchool];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanActulaAddlIfo_GeoLocationShared_AtlAddressID]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] DROP CONSTRAINT [FK_HumanActulaAddlIfo_GeoLocationShared_AtlAddressID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanActulaAddlIfo_GeosharedaddressID]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] DROP CONSTRAINT [FK_HumanActulaAddlIfo_GeosharedaddressID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanAddlIfo_BaseRef_IsSchool]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] DROP CONSTRAINT [FK_HumanAddlIfo_BaseRef_IsSchool];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanAddlIfo_Geo_addressID]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] DROP CONSTRAINT [FK_HumanAddlIfo_Geo_addressID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanAddlInfo_BaseRef_ContactPhoneNbr2Type]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] DROP CONSTRAINT [FK_HumanAddlInfo_BaseRef_ContactPhoneNbr2Type];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanAddlInfo_BaseRef_ContactPhoneNbrType]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] DROP CONSTRAINT [FK_HumanAddlInfo_BaseRef_ContactPhoneNbrType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanAddlInfo_BaseRef_IsEmployed]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] DROP CONSTRAINT [FK_HumanAddlInfo_BaseRef_IsEmployed];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanAddlInfo_BaseRef_IsInSchool]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] DROP CONSTRAINT [FK_HumanAddlInfo_BaseRef_IsInSchool];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanAddlInfo_BaseRef_ReportedAgeUOM]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] DROP CONSTRAINT [FK_HumanAddlInfo_BaseRef_ReportedAgeUOM];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanAddlInfo_GeoLocation_AltAddress]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] DROP CONSTRAINT [FK_HumanAddlInfo_GeoLocation_AltAddress];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanAddlInfo_Human_idfhuman]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] DROP CONSTRAINT [FK_HumanAddlInfo_Human_idfhuman];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanAddlInfo_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] DROP CONSTRAINT [FK_HumanAddlInfo_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanDiseaseReportRelationship_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportRelationship] DROP CONSTRAINT [FK_HumanDiseaseReportRelationship_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanDiseaseReportReln_BaseRef_RelTypeID]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportRelationship] DROP CONSTRAINT [FK_HumanDiseaseReportReln_BaseRef_RelTypeID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanDiseaseReportReln_tlbHumanCase_HumanDiseaseReportID]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportRelationship] DROP CONSTRAINT [FK_HumanDiseaseReportReln_tlbHumanCase_HumanDiseaseReportID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanDiseaseReportReln_tlbHumanCase_RelatedToHumanDiseaseReportIdRoot]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportRelationship] DROP CONSTRAINT [FK_HumanDiseaseReportReln_tlbHumanCase_RelatedToHumanDiseaseReportIdRoot];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanDiseaseReportReln_tlbHumanCase_RelateToHumanDiseaseReportID]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportRelationship] DROP CONSTRAINT [FK_HumanDiseaseReportReln_tlbHumanCase_RelateToHumanDiseaseReportID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanDiseaseReportVaccination_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportVaccination] DROP CONSTRAINT [FK_HumanDiseaseReportVaccination_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[R_1417]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportVaccination] DROP CONSTRAINT [R_1417];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupConfigParm_trtBaseReference_idfsBaseReference]...';


GO
ALTER TABLE [dbo].[LkupConfigParm] DROP CONSTRAINT [FK_LkupConfigParm_trtBaseReference_idfsBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupConfigParm_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupConfigParm] DROP CONSTRAINT [FK_LkupConfigParm_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_CountryRoleToStandardRoleMap_gidCountry_CountryID]...';


GO
ALTER TABLE [dbo].[LkupCountryToStandardRoleMap] DROP CONSTRAINT [FK_CountryRoleToStandardRoleMap_gidCountry_CountryID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_CountryRoleToStandardRoleMap_trtBaseReference_StadardRoleID]...';


GO
ALTER TABLE [dbo].[LkupCountryToStandardRoleMap] DROP CONSTRAINT [FK_CountryRoleToStandardRoleMap_trtBaseReference_StadardRoleID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AppObj_EIDSSMenu_MenuID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] DROP CONSTRAINT [FK_AppObj_EIDSSMenu_MenuID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AppObj_ObjName]...';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] DROP CONSTRAINT [FK_AppObj_ObjName];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AppObj_ObjType]...';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] DROP CONSTRAINT [FK_AppObj_ObjType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AppObj_PageToolTip]...';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] DROP CONSTRAINT [FK_AppObj_PageToolTip];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupEIDSSAppObject_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] DROP CONSTRAINT [FK_LkupEIDSSAppObject_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupEIDSSMenu_BaseRef_MenuID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenu] DROP CONSTRAINT [FK_LkupEIDSSMenu_BaseRef_MenuID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupEIDSSMenu_BaseRef_ParentMenuID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenu] DROP CONSTRAINT [FK_LkupEIDSSMenu_BaseRef_ParentMenuID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupEIDSSMenu_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenu] DROP CONSTRAINT [FK_LkupEIDSSMenu_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupEIDSSMenuToEventType_BaseRef_MenuID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenuToEventType] DROP CONSTRAINT [FK_LkupEIDSSMenuToEventType_BaseRef_MenuID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupEIDSSMenuToEventType_EventType_idfsEventTypeId]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenuToEventType] DROP CONSTRAINT [FK_LkupEIDSSMenuToEventType_EventType_idfsEventTypeId];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupEIDSSMenuToEventType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenuToEventType] DROP CONSTRAINT [FK_LkupEIDSSMenuToEventType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupEIDSSMenuToSystemFunction_BaseRef_MenuID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenuToSystemFunction] DROP CONSTRAINT [FK_LkupEIDSSMenuToSystemFunction_BaseRef_MenuID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupEIDSSMenuToSystemFunction_BaseRef_SystemFunctionID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenuToSystemFunction] DROP CONSTRAINT [FK_LkupEIDSSMenuToSystemFunction_BaseRef_SystemFunctionID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupEIDSSMenuToSystemFunction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenuToSystemFunction] DROP CONSTRAINT [FK_LkupEIDSSMenuToSystemFunction_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LKUPNextKey_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LKUPNextKey] DROP CONSTRAINT [FK_LKUPNextKey_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupRoleDashboardObject_AppObject_SashboardObjectID]...';


GO
ALTER TABLE [dbo].[LkupRoleDashboardObject] DROP CONSTRAINT [FK_LkupRoleDashboardObject_AppObject_SashboardObjectID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupRoleDashboardObject_idfEmployee]...';


GO
ALTER TABLE [dbo].[LkupRoleDashboardObject] DROP CONSTRAINT [FK_LkupRoleDashboardObject_idfEmployee];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupRoleDashboardObject_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupRoleDashboardObject] DROP CONSTRAINT [FK_LkupRoleDashboardObject_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupRoleMenuAccess_idfEmployee]...';


GO
ALTER TABLE [dbo].[LkupRoleMenuAccess] DROP CONSTRAINT [FK_LkupRoleMenuAccess_idfEmployee];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupRoleMenuAccess_LkupEIDSSMenu_MenuID]...';


GO
ALTER TABLE [dbo].[LkupRoleMenuAccess] DROP CONSTRAINT [FK_LkupRoleMenuAccess_LkupEIDSSMenu_MenuID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupRoleMenuAccess_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupRoleMenuAccess] DROP CONSTRAINT [FK_LkupRoleMenuAccess_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_lkupRoleSysFunctionAccess_BaseReference_SysFunctionOperationID]...';


GO
ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] DROP CONSTRAINT [FK_lkupRoleSysFunctionAccess_BaseReference_SysFunctionOperationID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_lkupRoleSysFunctionAccess_BaseReference_SystemFunction]...';


GO
ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] DROP CONSTRAINT [FK_lkupRoleSysFunctionAccess_BaseReference_SystemFunction];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_lkupRoleSysFunctionAccess_trtBaseRef_AccessPermissionID]...';


GO
ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] DROP CONSTRAINT [FK_lkupRoleSysFunctionAccess_trtBaseRef_AccessPermissionID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupRoleSystemFunctionAccess_idfEmployee]...';


GO
ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] DROP CONSTRAINT [FK_LkupRoleSystemFunctionAccess_idfEmployee];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupRoleSystemFunctionAccess_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] DROP CONSTRAINT [FK_LkupRoleSystemFunctionAccess_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupSystemFunctionToOperation_BaseReference_idfsModule]...';


GO
ALTER TABLE [dbo].[LkupSystemFunctionToOperation] DROP CONSTRAINT [FK_LkupSystemFunctionToOperation_BaseReference_idfsModule];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupSystemFunctionToOperation_BaseReference_SysFunctionOperationID]...';


GO
ALTER TABLE [dbo].[LkupSystemFunctionToOperation] DROP CONSTRAINT [FK_LkupSystemFunctionToOperation_BaseReference_SysFunctionOperationID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupSystemFunctionToOperation_BaseReference_SystemFunction]...';


GO
ALTER TABLE [dbo].[LkupSystemFunctionToOperation] DROP CONSTRAINT [FK_LkupSystemFunctionToOperation_BaseReference_SystemFunction];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LkupSystemFunctionToOperation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupSystemFunctionToOperation] DROP CONSTRAINT [FK_LkupSystemFunctionToOperation_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_locBaseReference_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[locBaseReference] DROP CONSTRAINT [FK_locBaseReference_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_locStringNameTranslation_locBaseReference__idflBaseReference_R_1702]...';


GO
ALTER TABLE [dbo].[locStringNameTranslation] DROP CONSTRAINT [FK_locStringNameTranslation_locBaseReference__idflBaseReference_R_1702];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_locStringNameTranslation_trtBaseReference__idfsLanguage_R_1692]...';


GO
ALTER TABLE [dbo].[locStringNameTranslation] DROP CONSTRAINT [FK_locStringNameTranslation_trtBaseReference__idfsLanguage_R_1692];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_locStringNameTranslation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[locStringNameTranslation] DROP CONSTRAINT [FK_locStringNameTranslation_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LOINCEidssMapping_trtBaseReference__idfsBaseReference]...';


GO
ALTER TABLE [dbo].[LOINCEidssMapping] DROP CONSTRAINT [FK_LOINCEidssMapping_trtBaseReference__idfsBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LOINCEidssMapping_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LOINCEidssMapping] DROP CONSTRAINT [FK_LOINCEidssMapping_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_LOINCEidssMapping_trtReferenecType__idfsReferenceType]...';


GO
ALTER TABLE [dbo].[LOINCEidssMapping] DROP CONSTRAINT [FK_LOINCEidssMapping_trtReferenecType__idfsReferenceType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_MonitoringSessionToSampleType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[MonitoringSessionToSampleType] DROP CONSTRAINT [FK_MonitoringSessionToSampleType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionToSampleType_tlbMonitoringSession_MonitoringSessionID]...';


GO
ALTER TABLE [dbo].[MonitoringSessionToSampleType] DROP CONSTRAINT [FK_tlbMonitoringSessionToSampleType_tlbMonitoringSession_MonitoringSessionID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionToSampleType_trtSampleType_SampleType]...';


GO
ALTER TABLE [dbo].[MonitoringSessionToSampleType] DROP CONSTRAINT [FK_tlbMonitoringSessionToSampleType_trtSampleType_SampleType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionToSampleType_trtSpeciesType_SpeciesType]...';


GO
ALTER TABLE [dbo].[MonitoringSessionToSampleType] DROP CONSTRAINT [FK_tlbMonitoringSessionToSampleType_trtSpeciesType_SpeciesType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreakCaseContact_OutbreakCase_OutbreakCaseReportUID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseContact] DROP CONSTRAINT [FK_OutbreakCaseContact_OutbreakCase_OutbreakCaseReportUID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreakCaseContact_tlbContactedCasePerson_idfContactedCasePersonID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseContact] DROP CONSTRAINT [FK_OutbreakCaseContact_tlbContactedCasePerson_idfContactedCasePersonID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreakCaseContact_tlbHuman_idfHuman]...';


GO
ALTER TABLE [dbo].[OutbreakCaseContact] DROP CONSTRAINT [FK_OutbreakCaseContact_tlbHuman_idfHuman];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreakCaseContact_tlbObservation_ContactTracingObservationID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseContact] DROP CONSTRAINT [FK_OutbreakCaseContact_tlbObservation_ContactTracingObservationID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreakCaseContact_trtBaseReference_ContactRelationshipTypeID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseContact] DROP CONSTRAINT [FK_OutbreakCaseContact_trtBaseReference_ContactRelationshipTypeID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreakCaseContact_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseContact] DROP CONSTRAINT [FK_OutbreakCaseContact_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreakCase_tlbHUmanCase_idfHumanCaseID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseReport] DROP CONSTRAINT [FK_OutbreakCase_tlbHUmanCase_idfHumanCaseID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreakCase_tlbObservation_CaseEPIObservationID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseReport] DROP CONSTRAINT [FK_OutbreakCase_tlbObservation_CaseEPIObservationID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreakCase_tlbOutbreak_idfOutbreakID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseReport] DROP CONSTRAINT [FK_OutbreakCase_tlbOutbreak_idfOutbreakID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreakCase_tlbVetCase_idfVetCaseID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseReport] DROP CONSTRAINT [FK_OutbreakCase_tlbVetCase_idfVetCaseID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreakCaseReport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseReport] DROP CONSTRAINT [FK_OutbreakCaseReport_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreatkCase_Observation_OutbreakCaseObservationID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseReport] DROP CONSTRAINT [FK_OutbreatkCase_Observation_OutbreakCaseObservationID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_outbreakSpeciesParameter_tlbOutbreak_OutbreakID]...';


GO
ALTER TABLE [dbo].[OutbreakSpeciesParameter] DROP CONSTRAINT [FK_outbreakSpeciesParameter_tlbOutbreak_OutbreakID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreakSpeciesParameter_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[OutbreakSpeciesParameter] DROP CONSTRAINT [FK_OutbreakSpeciesParameter_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreakSpeciesParm_FormTemplate_CaseMonitoringTemplateID]...';


GO
ALTER TABLE [dbo].[OutbreakSpeciesParameter] DROP CONSTRAINT [FK_OutbreakSpeciesParm_FormTemplate_CaseMonitoringTemplateID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreakSpeciesParm_FormTemplate_CaseQuestionaireTemplateID]...';


GO
ALTER TABLE [dbo].[OutbreakSpeciesParameter] DROP CONSTRAINT [FK_OutbreakSpeciesParm_FormTemplate_CaseQuestionaireTemplateID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_OutbreakSpeciesParm_FormTemplate_ContactTracingTemplateID]...';


GO
ALTER TABLE [dbo].[OutbreakSpeciesParameter] DROP CONSTRAINT [FK_OutbreakSpeciesParm_FormTemplate_ContactTracingTemplateID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_SecurityPolicyConfig_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[SecurityPolicyConfiguration] DROP CONSTRAINT [FK_SecurityPolicyConfig_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_SiteToSiteAccess_BaseReference_AaccessPermissionID]...';


GO
ALTER TABLE [dbo].[SiteToSiteAccess] DROP CONSTRAINT [FK_SiteToSiteAccess_BaseReference_AaccessPermissionID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_SiteToSiteAccess_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[SiteToSiteAccess] DROP CONSTRAINT [FK_SiteToSiteAccess_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_SiteToSiteAccess_tstSite_GranteeSite]...';


GO
ALTER TABLE [dbo].[SiteToSiteAccess] DROP CONSTRAINT [FK_SiteToSiteAccess_tstSite_GranteeSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_SiteToSiteAccess_tstSite_GrantToSite]...';


GO
ALTER TABLE [dbo].[SiteToSiteAccess] DROP CONSTRAINT [FK_SiteToSiteAccess_tstSite_GrantToSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_SystemPreference_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[SystemPreference] DROP CONSTRAINT [FK_SystemPreference_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasAggregateFunction_trtBaseReference__idfsAggregateFunction]...';


GO
ALTER TABLE [dbo].[tasAggregateFunction] DROP CONSTRAINT [FK_tasAggregateFunction_trtBaseReference__idfsAggregateFunction];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasAggregateFunction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasAggregateFunction] DROP CONSTRAINT [FK_tasAggregateFunction_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasFieldSourceForTable_tasSearchField__idfsSearchField]...';


GO
ALTER TABLE [dbo].[tasFieldSourceForTable] DROP CONSTRAINT [FK_tasFieldSourceForTable_tasSearchField__idfsSearchField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasFieldSourceForTable_tasSearchTable__idfSearchTable]...';


GO
ALTER TABLE [dbo].[tasFieldSourceForTable] DROP CONSTRAINT [FK_tasFieldSourceForTable_tasSearchTable__idfSearchTable];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasFieldSourceForTable_tasSearchTable__idfUnionSearchTable]...';


GO
ALTER TABLE [dbo].[tasFieldSourceForTable] DROP CONSTRAINT [FK_tasFieldSourceForTable_tasSearchTable__idfUnionSearchTable];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasFieldSourceForTable_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasFieldSourceForTable] DROP CONSTRAINT [FK_tasFieldSourceForTable_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayout_tasglLayoutFolder__idfsLayoutFolder_R_1698_1]...';


GO
ALTER TABLE [dbo].[tasglLayout] DROP CONSTRAINT [FK_tasglLayout_tasglLayoutFolder__idfsLayoutFolder_R_1698_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayout_tasglQuery__idfsQuery_R_1326_1]...';


GO
ALTER TABLE [dbo].[tasglLayout] DROP CONSTRAINT [FK_tasglLayout_tasglQuery__idfsQuery_R_1326_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayout_tlbPerson__idfPerson]...';


GO
ALTER TABLE [dbo].[tasglLayout] DROP CONSTRAINT [FK_tasglLayout_tlbPerson__idfPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayout_trtBaseReference__idfsDefaultGroupDate]...';


GO
ALTER TABLE [dbo].[tasglLayout] DROP CONSTRAINT [FK_tasglLayout_trtBaseReference__idfsDefaultGroupDate];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayout_trtBaseReference__idfsDescription_R_1717_1]...';


GO
ALTER TABLE [dbo].[tasglLayout] DROP CONSTRAINT [FK_tasglLayout_trtBaseReference__idfsDescription_R_1717_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayout_trtBaseReference__idfsLayout_R_1708_1]...';


GO
ALTER TABLE [dbo].[tasglLayout] DROP CONSTRAINT [FK_tasglLayout_trtBaseReference__idfsLayout_R_1708_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayout_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglLayout] DROP CONSTRAINT [FK_tasglLayout_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayoutFolder_tasglLayoutFolder__idfsParentLayoutFolder_R_1715_1]...';


GO
ALTER TABLE [dbo].[tasglLayoutFolder] DROP CONSTRAINT [FK_tasglLayoutFolder_tasglLayoutFolder__idfsParentLayoutFolder_R_1715_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayoutFolder_tasglQuery__idfsQuery_R_1697_1]...';


GO
ALTER TABLE [dbo].[tasglLayoutFolder] DROP CONSTRAINT [FK_tasglLayoutFolder_tasglQuery__idfsQuery_R_1697_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayoutFolder_trtBaseReference__idfsLayoutFolder_R_1703_1]...';


GO
ALTER TABLE [dbo].[tasglLayoutFolder] DROP CONSTRAINT [FK_tasglLayoutFolder_trtBaseReference__idfsLayoutFolder_R_1703_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayoutFolder_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglLayoutFolder] DROP CONSTRAINT [FK_tasglLayoutFolder_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayoutSearchField_tasAggregateFunction__idfsAggregateFunction]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] DROP CONSTRAINT [FK_tasglLayoutSearchField_tasAggregateFunction__idfsAggregateFunction];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayoutSearchField_tasglLayoutSearchField__idfDateLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] DROP CONSTRAINT [FK_tasglLayoutSearchField_tasglLayoutSearchField__idfDateLayoutSearchField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayoutSearchField_tasglLayoutSearchField__idfUnitLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] DROP CONSTRAINT [FK_tasglLayoutSearchField_tasglLayoutSearchField__idfUnitLayoutSearchField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayoutSearchField_tasglQuerySearchField__idfQuerySearchField]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] DROP CONSTRAINT [FK_tasglLayoutSearchField_tasglQuerySearchField__idfQuerySearchField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayoutSearchField_tasLayout_idflLayout]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] DROP CONSTRAINT [FK_tasglLayoutSearchField_tasLayout_idflLayout];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayoutSearchField_trtBaseReference__idfsGroupDate]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] DROP CONSTRAINT [FK_tasglLayoutSearchField_trtBaseReference__idfsGroupDate];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayoutSearchField_trtBaseReference_idfsLayoutSearchFieldName]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] DROP CONSTRAINT [FK_tasglLayoutSearchField_trtBaseReference_idfsLayoutSearchFieldName];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayoutSearchField_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] DROP CONSTRAINT [FK_tasglLayoutSearchField_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayoutToMapImage_tasglLayout__idfsLayout]...';


GO
ALTER TABLE [dbo].[tasglLayoutToMapImage] DROP CONSTRAINT [FK_tasglLayoutToMapImage_tasglLayout__idfsLayout];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayoutToMapImage_tasglMapImage__idfMapImage]...';


GO
ALTER TABLE [dbo].[tasglLayoutToMapImage] DROP CONSTRAINT [FK_tasglLayoutToMapImage_tasglMapImage__idfMapImage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglLayoutToMapImage_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglLayoutToMapImage] DROP CONSTRAINT [FK_tasglLayoutToMapImage_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglMapImage_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglMapImage] DROP CONSTRAINT [FK_tasglMapImage_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQuery_trtBaseReference__idfsDescription_R_1718_1]...';


GO
ALTER TABLE [dbo].[tasglQuery] DROP CONSTRAINT [FK_tasglQuery_trtBaseReference__idfsDescription_R_1718_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQuery_trtBaseReference__idfsQueryName_R_1709_1]...';


GO
ALTER TABLE [dbo].[tasglQuery] DROP CONSTRAINT [FK_tasglQuery_trtBaseReference__idfsQueryName_R_1709_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQuery_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglQuery] DROP CONSTRAINT [FK_tasglQuery_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQueryConditionGroup_tasglQueryConditionGroup__idfParentQueryConditionGroup_R_1345_1]...';


GO
ALTER TABLE [dbo].[tasglQueryConditionGroup] DROP CONSTRAINT [FK_tasglQueryConditionGroup_tasglQueryConditionGroup__idfParentQueryConditionGroup_R_1345_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQueryConditionGroup_tasglQuerySearchObject__idfQuerySearchObject_R_1344_1]...';


GO
ALTER TABLE [dbo].[tasglQueryConditionGroup] DROP CONSTRAINT [FK_tasglQueryConditionGroup_tasglQuerySearchObject__idfQuerySearchObject_R_1344_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQueryConditionGroup_tasglQuerySearchObject__idfSubQuerySearchObject]...';


GO
ALTER TABLE [dbo].[tasglQueryConditionGroup] DROP CONSTRAINT [FK_tasglQueryConditionGroup_tasglQuerySearchObject__idfSubQuerySearchObject];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQueryConditionGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglQueryConditionGroup] DROP CONSTRAINT [FK_tasglQueryConditionGroup_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQuerySearchField_ffParameter__idfsParameter_R_1353_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchField] DROP CONSTRAINT [FK_tasglQuerySearchField_ffParameter__idfsParameter_R_1353_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQuerySearchField_tasglQuerySearchObject__idfQuerySearchObject_R_1351_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchField] DROP CONSTRAINT [FK_tasglQuerySearchField_tasglQuerySearchObject__idfQuerySearchObject_R_1351_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQuerySearchField_tasglSearchFieldList__idfsSearchField_R_1352_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchField] DROP CONSTRAINT [FK_tasglQuerySearchField_tasglSearchFieldList__idfsSearchField_R_1352_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQuerySearchField_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchField] DROP CONSTRAINT [FK_tasglQuerySearchField_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQuerySearchFieldCondition_tasglQueryConditionGroup__idfQueryConditionGroup_R_1342_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchFieldCondition] DROP CONSTRAINT [FK_tasglQuerySearchFieldCondition_tasglQueryConditionGroup__idfQueryConditionGroup_R_1342_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQuerySearchFieldCondition_tasglQuerySearchField__idfQuerySearchField_R_1343_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchFieldCondition] DROP CONSTRAINT [FK_tasglQuerySearchFieldCondition_tasglQuerySearchField__idfQuerySearchField_R_1343_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQuerySearchFieldCondition_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchFieldCondition] DROP CONSTRAINT [FK_tasglQuerySearchFieldCondition_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQuerySearchObject_tasglQuery__idfsQueryName_R_1327_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchObject] DROP CONSTRAINT [FK_tasglQuerySearchObject_tasglQuery__idfsQueryName_R_1327_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQuerySearchObject_tasglQuerySearchObject__idfParentQuerySearchObject_R_1329_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchObject] DROP CONSTRAINT [FK_tasglQuerySearchObject_tasglQuerySearchObject__idfParentQuerySearchObject_R_1329_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQuerySearchObject_tasSearchObject__idfsSearchObject_R_1328_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchObject] DROP CONSTRAINT [FK_tasglQuerySearchObject_tasSearchObject__idfsSearchObject_R_1328_1];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQuerySearchObject_trtBaseReference__idfsReportType]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchObject] DROP CONSTRAINT [FK_tasglQuerySearchObject_trtBaseReference__idfsReportType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglQuerySearchObject_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchObject] DROP CONSTRAINT [FK_tasglQuerySearchObject_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglView_tasglLayout__idfsLayout]...';


GO
ALTER TABLE [dbo].[tasglView] DROP CONSTRAINT [FK_tasglView_tasglLayout__idfsLayout];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglView_tasglViewColumn__idfChartXAxisViewColumn]...';


GO
ALTER TABLE [dbo].[tasglView] DROP CONSTRAINT [FK_tasglView_tasglViewColumn__idfChartXAxisViewColumn];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglView_tasglViewColumn__idfMapAdminUnitViewColumn]...';


GO
ALTER TABLE [dbo].[tasglView] DROP CONSTRAINT [FK_tasglView_tasglViewColumn__idfMapAdminUnitViewColumn];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglView_trtBaseReference__idfsLanguage]...';


GO
ALTER TABLE [dbo].[tasglView] DROP CONSTRAINT [FK_tasglView_trtBaseReference__idfsLanguage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglView_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglView] DROP CONSTRAINT [FK_tasglView_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglViewBand_tasglLayoutSearchField__idfLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasglViewBand] DROP CONSTRAINT [FK_tasglViewBand_tasglLayoutSearchField__idfLayoutSearchField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglViewBand_tasglView__idfView_idfsLanguage]...';


GO
ALTER TABLE [dbo].[tasglViewBand] DROP CONSTRAINT [FK_tasglViewBand_tasglView__idfView_idfsLanguage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglViewBand_tasglViewBand__idfParentViewBand]...';


GO
ALTER TABLE [dbo].[tasglViewBand] DROP CONSTRAINT [FK_tasglViewBand_tasglViewBand__idfParentViewBand];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglViewBand_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglViewBand] DROP CONSTRAINT [FK_tasglViewBand_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglViewColumn_tasAggregateFunction__idfsAggregateFunction]...';


GO
ALTER TABLE [dbo].[tasglViewColumn] DROP CONSTRAINT [FK_tasglViewColumn_tasAggregateFunction__idfsAggregateFunction];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglViewColumn_tasglLayoutSearchField__idfLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasglViewColumn] DROP CONSTRAINT [FK_tasglViewColumn_tasglLayoutSearchField__idfLayoutSearchField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglViewColumn_tasglView__idfView_idfsLanguage]...';


GO
ALTER TABLE [dbo].[tasglViewColumn] DROP CONSTRAINT [FK_tasglViewColumn_tasglView__idfView_idfsLanguage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglViewColumn_tasglViewBand__idfViewBand]...';


GO
ALTER TABLE [dbo].[tasglViewColumn] DROP CONSTRAINT [FK_tasglViewColumn_tasglViewBand__idfViewBand];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglViewColumn_tasglViewColumn__idfDenominatorViewColumn]...';


GO
ALTER TABLE [dbo].[tasglViewColumn] DROP CONSTRAINT [FK_tasglViewColumn_tasglViewColumn__idfDenominatorViewColumn];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglViewColumn_tasglViewColumn__idfSourceViewColumn]...';


GO
ALTER TABLE [dbo].[tasglViewColumn] DROP CONSTRAINT [FK_tasglViewColumn_tasglViewColumn__idfSourceViewColumn];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasglViewColumn_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglViewColumn] DROP CONSTRAINT [FK_tasglViewColumn_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayout_locBaseReference__idflDescription_R_1717]...';


GO
ALTER TABLE [dbo].[tasLayout] DROP CONSTRAINT [FK_tasLayout_locBaseReference__idflDescription_R_1717];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayout_locBaseReference__idflLayout_R_1708]...';


GO
ALTER TABLE [dbo].[tasLayout] DROP CONSTRAINT [FK_tasLayout_locBaseReference__idflLayout_R_1708];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayout_tasglLayout__idfsGlobalLayout_R_1794]...';


GO
ALTER TABLE [dbo].[tasLayout] DROP CONSTRAINT [FK_tasLayout_tasglLayout__idfsGlobalLayout_R_1794];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayout_tasLayoutFolder__idflLayoutFolder_R_1698]...';


GO
ALTER TABLE [dbo].[tasLayout] DROP CONSTRAINT [FK_tasLayout_tasLayoutFolder__idflLayoutFolder_R_1698];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayout_tasQuery__idflQuery_R_1326]...';


GO
ALTER TABLE [dbo].[tasLayout] DROP CONSTRAINT [FK_tasLayout_tasQuery__idflQuery_R_1326];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayout_tlbPerson__idfPerson]...';


GO
ALTER TABLE [dbo].[tasLayout] DROP CONSTRAINT [FK_tasLayout_tlbPerson__idfPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayout_trtBaseReference__idfsDefaultGroupDate]...';


GO
ALTER TABLE [dbo].[tasLayout] DROP CONSTRAINT [FK_tasLayout_trtBaseReference__idfsDefaultGroupDate];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayout_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasLayout] DROP CONSTRAINT [FK_tasLayout_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutFolder_locBaseReference__idflLayoutFolder_R_1703]...';


GO
ALTER TABLE [dbo].[tasLayoutFolder] DROP CONSTRAINT [FK_tasLayoutFolder_locBaseReference__idflLayoutFolder_R_1703];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutFolder_tasglLayoutFolder__idfsGlobalLayoutFolder_R_1796]...';


GO
ALTER TABLE [dbo].[tasLayoutFolder] DROP CONSTRAINT [FK_tasLayoutFolder_tasglLayoutFolder__idfsGlobalLayoutFolder_R_1796];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutFolder_tasLayoutFolder__idflParentLayoutFolder_R_1715]...';


GO
ALTER TABLE [dbo].[tasLayoutFolder] DROP CONSTRAINT [FK_tasLayoutFolder_tasLayoutFolder__idflParentLayoutFolder_R_1715];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutFolder_tasQuery__idflQuery_R_1697]...';


GO
ALTER TABLE [dbo].[tasLayoutFolder] DROP CONSTRAINT [FK_tasLayoutFolder_tasQuery__idflQuery_R_1697];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutFolder_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasLayoutFolder] DROP CONSTRAINT [FK_tasLayoutFolder_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutSearchField_locBaseReference_idflLayoutSearchFieldName]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] DROP CONSTRAINT [FK_tasLayoutSearchField_locBaseReference_idflLayoutSearchFieldName];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutSearchField_tasAggregateFunction__idfsAggregateFunction]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] DROP CONSTRAINT [FK_tasLayoutSearchField_tasAggregateFunction__idfsAggregateFunction];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutSearchField_tasLayout_idflLayout]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] DROP CONSTRAINT [FK_tasLayoutSearchField_tasLayout_idflLayout];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutSearchField_tasLayoutSearchField__idfDateLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] DROP CONSTRAINT [FK_tasLayoutSearchField_tasLayoutSearchField__idfDateLayoutSearchField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutSearchField_tasLayoutSearchField__idfUnitLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] DROP CONSTRAINT [FK_tasLayoutSearchField_tasLayoutSearchField__idfUnitLayoutSearchField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutSearchField_tasQuerySearchField__idfQuerySearchField]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] DROP CONSTRAINT [FK_tasLayoutSearchField_tasQuerySearchField__idfQuerySearchField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutSearchField_trtBaseReference__idfsGroupDate]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] DROP CONSTRAINT [FK_tasLayoutSearchField_trtBaseReference__idfsGroupDate];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutSearchField_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] DROP CONSTRAINT [FK_tasLayoutSearchField_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutToMapImage_tasLayout__idflLayout]...';


GO
ALTER TABLE [dbo].[tasLayoutToMapImage] DROP CONSTRAINT [FK_tasLayoutToMapImage_tasLayout__idflLayout];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutToMapImage_tasMapImage__idfMapImage]...';


GO
ALTER TABLE [dbo].[tasLayoutToMapImage] DROP CONSTRAINT [FK_tasLayoutToMapImage_tasMapImage__idfMapImage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasLayoutToMapImage_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasLayoutToMapImage] DROP CONSTRAINT [FK_tasLayoutToMapImage_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasMainTableForObject_tasSearchObject__idfsSearchObject]...';


GO
ALTER TABLE [dbo].[tasMainTableForObject] DROP CONSTRAINT [FK_tasMainTableForObject_tasSearchObject__idfsSearchObject];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasMainTableForObject_tasSearchTable__idfMainSearchTable]...';


GO
ALTER TABLE [dbo].[tasMainTableForObject] DROP CONSTRAINT [FK_tasMainTableForObject_tasSearchTable__idfMainSearchTable];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasMainTableForObject_tasSearchTable__idfMandatorySearchTable]...';


GO
ALTER TABLE [dbo].[tasMainTableForObject] DROP CONSTRAINT [FK_tasMainTableForObject_tasSearchTable__idfMandatorySearchTable];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasMainTableForObject_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasMainTableForObject] DROP CONSTRAINT [FK_tasMainTableForObject_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasMapImage_tasglMapImage__idfGlobalMapImage]...';


GO
ALTER TABLE [dbo].[tasMapImage] DROP CONSTRAINT [FK_tasMapImage_tasglMapImage__idfGlobalMapImage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasMapImage_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasMapImage] DROP CONSTRAINT [FK_tasMapImage_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuery_locBaseReference__idflDescription_R_1718]...';


GO
ALTER TABLE [dbo].[tasQuery] DROP CONSTRAINT [FK_tasQuery_locBaseReference__idflDescription_R_1718];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuery_locBaseReference__idflQueryName_R_1709]...';


GO
ALTER TABLE [dbo].[tasQuery] DROP CONSTRAINT [FK_tasQuery_locBaseReference__idflQueryName_R_1709];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuery_tasglQuery__idfsGlobalQuery_R_1795]...';


GO
ALTER TABLE [dbo].[tasQuery] DROP CONSTRAINT [FK_tasQuery_tasglQuery__idfsGlobalQuery_R_1795];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuery_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasQuery] DROP CONSTRAINT [FK_tasQuery_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQueryConditionGroup_tasQueryConditionGroup__idfParentQueryConditionGroup_R_1345]...';


GO
ALTER TABLE [dbo].[tasQueryConditionGroup] DROP CONSTRAINT [FK_tasQueryConditionGroup_tasQueryConditionGroup__idfParentQueryConditionGroup_R_1345];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQueryConditionGroup_tasQuerySearchObject__idfQuerySearchObject_R_1344]...';


GO
ALTER TABLE [dbo].[tasQueryConditionGroup] DROP CONSTRAINT [FK_tasQueryConditionGroup_tasQuerySearchObject__idfQuerySearchObject_R_1344];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQueryConditionGroup_tasQuerySearchObject__idfSubQuerySearchObject]...';


GO
ALTER TABLE [dbo].[tasQueryConditionGroup] DROP CONSTRAINT [FK_tasQueryConditionGroup_tasQuerySearchObject__idfSubQuerySearchObject];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQueryConditionGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasQueryConditionGroup] DROP CONSTRAINT [FK_tasQueryConditionGroup_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuerySearchField_ffParameter__idfsParameter_R_1353]...';


GO
ALTER TABLE [dbo].[tasQuerySearchField] DROP CONSTRAINT [FK_tasQuerySearchField_ffParameter__idfsParameter_R_1353];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuerySearchField_tasQuerySearchObject__idfQuerySearchObject_R_1351]...';


GO
ALTER TABLE [dbo].[tasQuerySearchField] DROP CONSTRAINT [FK_tasQuerySearchField_tasQuerySearchObject__idfQuerySearchObject_R_1351];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuerySearchField_tasSearchFieldList__idfsSearchField_R_1352]...';


GO
ALTER TABLE [dbo].[tasQuerySearchField] DROP CONSTRAINT [FK_tasQuerySearchField_tasSearchFieldList__idfsSearchField_R_1352];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuerySearchField_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasQuerySearchField] DROP CONSTRAINT [FK_tasQuerySearchField_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuerySearchFieldCondition_tasQueryConditionGroup__idfQueryConditionGroup_R_1342]...';


GO
ALTER TABLE [dbo].[tasQuerySearchFieldCondition] DROP CONSTRAINT [FK_tasQuerySearchFieldCondition_tasQueryConditionGroup__idfQueryConditionGroup_R_1342];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuerySearchFieldCondition_tasQuerySearchField__idfQuerySearchField_R_1343]...';


GO
ALTER TABLE [dbo].[tasQuerySearchFieldCondition] DROP CONSTRAINT [FK_tasQuerySearchFieldCondition_tasQuerySearchField__idfQuerySearchField_R_1343];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuerySearchFieldCondition_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasQuerySearchFieldCondition] DROP CONSTRAINT [FK_tasQuerySearchFieldCondition_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuerySearchObject_tasQuery__idflQueryName_R_1327]...';


GO
ALTER TABLE [dbo].[tasQuerySearchObject] DROP CONSTRAINT [FK_tasQuerySearchObject_tasQuery__idflQueryName_R_1327];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuerySearchObject_tasQuerySearchObject__idfParentQuerySearchObject_R_1329]...';


GO
ALTER TABLE [dbo].[tasQuerySearchObject] DROP CONSTRAINT [FK_tasQuerySearchObject_tasQuerySearchObject__idfParentQuerySearchObject_R_1329];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuerySearchObject_tasSearchObject__idfsSearchObject_R_1328]...';


GO
ALTER TABLE [dbo].[tasQuerySearchObject] DROP CONSTRAINT [FK_tasQuerySearchObject_tasSearchObject__idfsSearchObject_R_1328];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuerySearchObject_trtBaseReference__idfsReportType]...';


GO
ALTER TABLE [dbo].[tasQuerySearchObject] DROP CONSTRAINT [FK_tasQuerySearchObject_trtBaseReference__idfsReportType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasQuerySearchObject_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasQuerySearchObject] DROP CONSTRAINT [FK_tasQuerySearchObject_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchField_gisReferenceType__idfsGISReferenceType_R_1720]...';


GO
ALTER TABLE [dbo].[tasSearchField] DROP CONSTRAINT [FK_tasSearchField_gisReferenceType__idfsGISReferenceType_R_1720];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchField_tasAggregateFunction__idfsDefaultAggregateFunction]...';


GO
ALTER TABLE [dbo].[tasSearchField] DROP CONSTRAINT [FK_tasSearchField_tasAggregateFunction__idfsDefaultAggregateFunction];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchField_tasSearchObject__idfsSearchObject_R_1346]...';


GO
ALTER TABLE [dbo].[tasSearchField] DROP CONSTRAINT [FK_tasSearchField_tasSearchObject__idfsSearchObject_R_1346];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchField_trtBaseReference__idfsSearchField_R_1355]...';


GO
ALTER TABLE [dbo].[tasSearchField] DROP CONSTRAINT [FK_tasSearchField_trtBaseReference__idfsSearchField_R_1355];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchField_trtBaseReference__idfsSearchFieldType_R_1587]...';


GO
ALTER TABLE [dbo].[tasSearchField] DROP CONSTRAINT [FK_tasSearchField_trtBaseReference__idfsSearchFieldType_R_1587];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchField_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchField] DROP CONSTRAINT [FK_tasSearchField_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchFieldList_trtReferenceType__idfsReferenceType_R_1349]...';


GO
ALTER TABLE [dbo].[tasSearchField] DROP CONSTRAINT [FK_tasSearchFieldList_trtReferenceType__idfsReferenceType_R_1349];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchFieldsWithRelatedValues_tasSearchField__idfsRelatedSearchField]...';


GO
ALTER TABLE [dbo].[tasSearchFieldsWithRelatedValues] DROP CONSTRAINT [FK_tasSearchFieldsWithRelatedValues_tasSearchField__idfsRelatedSearchField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchFieldsWithRelatedValues_tasSearchField__idfsSearchField]...';


GO
ALTER TABLE [dbo].[tasSearchFieldsWithRelatedValues] DROP CONSTRAINT [FK_tasSearchFieldsWithRelatedValues_tasSearchField__idfsSearchField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchFieldsWithRelatedValues_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchFieldsWithRelatedValues] DROP CONSTRAINT [FK_tasSearchFieldsWithRelatedValues_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchFieldToFFParameter_ffParameter_idfsParameter]...';


GO
ALTER TABLE [dbo].[tasSearchFieldToFFParameter] DROP CONSTRAINT [FK_tasSearchFieldToFFParameter_ffParameter_idfsParameter];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchFieldToFFParameter_tasSearchField_idfsSearchField]...';


GO
ALTER TABLE [dbo].[tasSearchFieldToFFParameter] DROP CONSTRAINT [FK_tasSearchFieldToFFParameter_tasSearchField_idfsSearchField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchFieldToFFParameter_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchFieldToFFParameter] DROP CONSTRAINT [FK_tasSearchFieldToFFParameter_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchFieldToPersonalDataGroup_tasSearchField_idfsSearchField]...';


GO
ALTER TABLE [dbo].[tasSearchFieldToPersonalDataGroup] DROP CONSTRAINT [FK_tasSearchFieldToPersonalDataGroup_tasSearchField_idfsSearchField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchFieldToPersonalDataGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchFieldToPersonalDataGroup] DROP CONSTRAINT [FK_tasSearchFieldToPersonalDataGroup_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchFieldToPersonalDataGroup_tstPersonalDataGroup_idfPersonalDataGroup]...';


GO
ALTER TABLE [dbo].[tasSearchFieldToPersonalDataGroup] DROP CONSTRAINT [FK_tasSearchFieldToPersonalDataGroup_tstPersonalDataGroup_idfPersonalDataGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchObject_trtBaseReference__idfsFormType_R_1657]...';


GO
ALTER TABLE [dbo].[tasSearchObject] DROP CONSTRAINT [FK_tasSearchObject_trtBaseReference__idfsFormType_R_1657];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchObject_trtBaseReference__idfsSearchObject_R_1357]...';


GO
ALTER TABLE [dbo].[tasSearchObject] DROP CONSTRAINT [FK_tasSearchObject_trtBaseReference__idfsSearchObject_R_1357];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchObject_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchObject] DROP CONSTRAINT [FK_tasSearchObject_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchObjectToSearchObject_tasSearchObject__idfsParentSearchObject_R_1714]...';


GO
ALTER TABLE [dbo].[tasSearchObjectToSearchObject] DROP CONSTRAINT [FK_tasSearchObjectToSearchObject_tasSearchObject__idfsParentSearchObject_R_1714];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchObjectToSearchObject_tasSearchObject__idfsRelatedSearchObject_R_1713]...';


GO
ALTER TABLE [dbo].[tasSearchObjectToSearchObject] DROP CONSTRAINT [FK_tasSearchObjectToSearchObject_tasSearchObject__idfsRelatedSearchObject_R_1713];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchObjectToSearchObject_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchObjectToSearchObject] DROP CONSTRAINT [FK_tasSearchObjectToSearchObject_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchObjectToSystemFunction_tasSearchObject_idfsSearchObject]...';


GO
ALTER TABLE [dbo].[tasSearchObjectToSystemFunction] DROP CONSTRAINT [FK_tasSearchObjectToSystemFunction_tasSearchObject_idfsSearchObject];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchObjectToSystemFunction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchObjectToSystemFunction] DROP CONSTRAINT [FK_tasSearchObjectToSystemFunction_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchObjectToSystemFunction_trtSystemFunction_idfsSystemFunction]...';


GO
ALTER TABLE [dbo].[tasSearchObjectToSystemFunction] DROP CONSTRAINT [FK_tasSearchObjectToSystemFunction_trtSystemFunction_idfsSystemFunction];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchTable_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchTable] DROP CONSTRAINT [FK_tasSearchTable_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchTableJoinRule_tasSearchTable__idfMainSearchTable_R_1723]...';


GO
ALTER TABLE [dbo].[tasSearchTableJoinRule] DROP CONSTRAINT [FK_tasSearchTableJoinRule_tasSearchTable__idfMainSearchTable_R_1723];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchTableJoinRule_tasSearchTable__idfParentSearchTable_R_1700]...';


GO
ALTER TABLE [dbo].[tasSearchTableJoinRule] DROP CONSTRAINT [FK_tasSearchTableJoinRule_tasSearchTable__idfParentSearchTable_R_1700];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchTableJoinRule_tasSearchTable__idfSearchTable_R_1701]...';


GO
ALTER TABLE [dbo].[tasSearchTableJoinRule] DROP CONSTRAINT [FK_tasSearchTableJoinRule_tasSearchTable__idfSearchTable_R_1701];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchTableJoinRule_tasSearchTable__idfUnionSearchTable]...';


GO
ALTER TABLE [dbo].[tasSearchTableJoinRule] DROP CONSTRAINT [FK_tasSearchTableJoinRule_tasSearchTable__idfUnionSearchTable];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasSearchTableJoinRule_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchTableJoinRule] DROP CONSTRAINT [FK_tasSearchTableJoinRule_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasView_tasglView__idfGlobalView_idfsLanguage]...';


GO
ALTER TABLE [dbo].[tasView] DROP CONSTRAINT [FK_tasView_tasglView__idfGlobalView_idfsLanguage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasView_tasLayout__idflLayout]...';


GO
ALTER TABLE [dbo].[tasView] DROP CONSTRAINT [FK_tasView_tasLayout__idflLayout];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasView_tasViewColumn__idfChartXAxisViewColumn]...';


GO
ALTER TABLE [dbo].[tasView] DROP CONSTRAINT [FK_tasView_tasViewColumn__idfChartXAxisViewColumn];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasView_tasViewColumn__idfMapAdminUnitViewColumn]...';


GO
ALTER TABLE [dbo].[tasView] DROP CONSTRAINT [FK_tasView_tasViewColumn__idfMapAdminUnitViewColumn];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasView_trtBaseReference__idfsLanguage]...';


GO
ALTER TABLE [dbo].[tasView] DROP CONSTRAINT [FK_tasView_trtBaseReference__idfsLanguage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasView_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasView] DROP CONSTRAINT [FK_tasView_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasViewBand_tasLayoutSearchField__idfLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasViewBand] DROP CONSTRAINT [FK_tasViewBand_tasLayoutSearchField__idfLayoutSearchField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasViewBand_tasView__idfView_idfsLanguage]...';


GO
ALTER TABLE [dbo].[tasViewBand] DROP CONSTRAINT [FK_tasViewBand_tasView__idfView_idfsLanguage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasViewBand_tasViewBand__idfParentViewBand]...';


GO
ALTER TABLE [dbo].[tasViewBand] DROP CONSTRAINT [FK_tasViewBand_tasViewBand__idfParentViewBand];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasViewBand_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasViewBand] DROP CONSTRAINT [FK_tasViewBand_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasViewColumn_tasAggregateFunction__idfsAggregateFunction]...';


GO
ALTER TABLE [dbo].[tasViewColumn] DROP CONSTRAINT [FK_tasViewColumn_tasAggregateFunction__idfsAggregateFunction];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasViewColumn_tasLayoutSearchField__idfLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasViewColumn] DROP CONSTRAINT [FK_tasViewColumn_tasLayoutSearchField__idfLayoutSearchField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasViewColumn_tasView__idfView_idfsLanguage]...';


GO
ALTER TABLE [dbo].[tasViewColumn] DROP CONSTRAINT [FK_tasViewColumn_tasView__idfView_idfsLanguage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasViewColumn_tasViewBand__idfViewBand]...';


GO
ALTER TABLE [dbo].[tasViewColumn] DROP CONSTRAINT [FK_tasViewColumn_tasViewBand__idfViewBand];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasViewColumn_tasViewColumn__idfDenominatorViewColumn]...';


GO
ALTER TABLE [dbo].[tasViewColumn] DROP CONSTRAINT [FK_tasViewColumn_tasViewColumn__idfDenominatorViewColumn];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasViewColumn_tasViewColumn__idfSourceViewColumn]...';


GO
ALTER TABLE [dbo].[tasViewColumn] DROP CONSTRAINT [FK_tasViewColumn_tasViewColumn__idfSourceViewColumn];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tasViewColumn_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasViewColumn] DROP CONSTRAINT [FK_tasViewColumn_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauColumn_tauTable__idfTable_R_1559]...';


GO
ALTER TABLE [dbo].[tauColumn] DROP CONSTRAINT [FK_tauColumn_tauTable__idfTable_R_1559];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauColumn_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tauColumn] DROP CONSTRAINT [FK_tauColumn_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditDetailCreate_tauDataAuditEvent__idfDataAuditEvent_R_1024]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailCreate] DROP CONSTRAINT [FK_tauDataAuditDetailCreate_tauDataAuditEvent__idfDataAuditEvent_R_1024];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditDetailCreate_tauTable__idfObjectTable_R_1561]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailCreate] DROP CONSTRAINT [FK_tauDataAuditDetailCreate_tauTable__idfObjectTable_R_1561];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditDetailCreate_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailCreate] DROP CONSTRAINT [FK_tauDataAuditDetailCreate_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditDetailDelete_tauDataAuditEvent__idfDataAuditEvent_R_1558]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailDelete] DROP CONSTRAINT [FK_tauDataAuditDetailDelete_tauDataAuditEvent__idfDataAuditEvent_R_1558];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditDetailDelete_tauTable__idfObjectTable_R_1563]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailDelete] DROP CONSTRAINT [FK_tauDataAuditDetailDelete_tauTable__idfObjectTable_R_1563];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditDetailDelete_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailDelete] DROP CONSTRAINT [FK_tauDataAuditDetailDelete_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditDetailRestore_tauDataAuditEvent__idfDataAuditEvent_R_1558]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailRestore] DROP CONSTRAINT [FK_tauDataAuditDetailRestore_tauDataAuditEvent__idfDataAuditEvent_R_1558];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditDetailRestore_tauTable__idfObjectTable_R_1563]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailRestore] DROP CONSTRAINT [FK_tauDataAuditDetailRestore_tauTable__idfObjectTable_R_1563];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditDetailRestore_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailRestore] DROP CONSTRAINT [FK_tauDataAuditDetailRestore_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditDetailUpdate_tauColumn__idfColumn_R_1564]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailUpdate] DROP CONSTRAINT [FK_tauDataAuditDetailUpdate_tauColumn__idfColumn_R_1564];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditDetailUpdate_tauDataAuditEvent__idfDataAuditEvent_R_1557]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailUpdate] DROP CONSTRAINT [FK_tauDataAuditDetailUpdate_tauDataAuditEvent__idfDataAuditEvent_R_1557];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditDetailUpdate_tauTable__idfObjectTable_R_1562]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailUpdate] DROP CONSTRAINT [FK_tauDataAuditDetailUpdate_tauTable__idfObjectTable_R_1562];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditDetailUpdate_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailUpdate] DROP CONSTRAINT [FK_tauDataAuditDetailUpdate_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditEvent_tauTable__idfMainObjectTable_R_1560]...';


GO
ALTER TABLE [dbo].[tauDataAuditEvent] DROP CONSTRAINT [FK_tauDataAuditEvent_tauTable__idfMainObjectTable_R_1560];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditEvent_trtBaseReference__idfsDataAuditEventType_R_1556]...';


GO
ALTER TABLE [dbo].[tauDataAuditEvent] DROP CONSTRAINT [FK_tauDataAuditEvent_trtBaseReference__idfsDataAuditEventType_R_1556];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditEvent_trtBaseReference__idfsDataAuditObjectType_R_1555]...';


GO
ALTER TABLE [dbo].[tauDataAuditEvent] DROP CONSTRAINT [FK_tauDataAuditEvent_trtBaseReference__idfsDataAuditObjectType_R_1555];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditEvent_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tauDataAuditEvent] DROP CONSTRAINT [FK_tauDataAuditEvent_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditEvent_tstSite__idfsSite_R_1021]...';


GO
ALTER TABLE [dbo].[tauDataAuditEvent] DROP CONSTRAINT [FK_tauDataAuditEvent_tstSite__idfsSite_R_1021];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauDataAuditEvent_tstUserTable__idfUserID_R_1022]...';


GO
ALTER TABLE [dbo].[tauDataAuditEvent] DROP CONSTRAINT [FK_tauDataAuditEvent_tstUserTable__idfUserID_R_1022];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauPINAuditEvent_tstUserTable]...';


GO
ALTER TABLE [dbo].[tauPINAuditEvent] DROP CONSTRAINT [FK_tauPINAuditEvent_tstUserTable];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tauTable_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tauTable] DROP CONSTRAINT [FK_tauTable_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tdeDataExport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tdeDataExport] DROP CONSTRAINT [FK_tdeDataExport_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tdeDataExport_tstUserTable__idfUserID_R_1004]...';


GO
ALTER TABLE [dbo].[tdeDataExport] DROP CONSTRAINT [FK_tdeDataExport_tstUserTable__idfUserID_R_1004];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tdeDataExportDetail_tdeDataExport__idfDataExport_R_1001]...';


GO
ALTER TABLE [dbo].[tdeDataExportDetail] DROP CONSTRAINT [FK_tdeDataExportDetail_tdeDataExport__idfDataExport_R_1001];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tdeDataExportDetail_trtBaseReference__idfsDataExportDetailStatus_R_1582]...';


GO
ALTER TABLE [dbo].[tdeDataExportDetail] DROP CONSTRAINT [FK_tdeDataExportDetail_trtBaseReference__idfsDataExportDetailStatus_R_1582];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tdeDataExportDetail_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tdeDataExportDetail] DROP CONSTRAINT [FK_tdeDataExportDetail_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tdeDataExportDetail_trtDiagnosis__idfsDiagnosis_R_1003]...';


GO
ALTER TABLE [dbo].[tdeDataExportDetail] DROP CONSTRAINT [FK_tdeDataExportDetail_trtDiagnosis__idfsDiagnosis_R_1003];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tdeDataExportDiagnosis_tdeDataExport__idfDataExport_R_1000]...';


GO
ALTER TABLE [dbo].[tdeDataExportDiagnosis] DROP CONSTRAINT [FK_tdeDataExportDiagnosis_tdeDataExport__idfDataExport_R_1000];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tdeDataExportDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tdeDataExportDiagnosis] DROP CONSTRAINT [FK_tdeDataExportDiagnosis_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tdeDataExportDiagnosis_trtDiagnosis__idfsDiagnosis_R_999]...';


GO
ALTER TABLE [dbo].[tdeDataExportDiagnosis] DROP CONSTRAINT [FK_tdeDataExportDiagnosis_trtDiagnosis__idfsDiagnosis_R_999];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tdeDataExportFFReference_ffParameter__idfsParameter]...';


GO
ALTER TABLE [dbo].[tdeDataExportFFReference] DROP CONSTRAINT [FK_tdeDataExportFFReference_ffParameter__idfsParameter];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tdeDataExportFFReference_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tdeDataExportFFReference] DROP CONSTRAINT [FK_tdeDataExportFFReference_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tdeDataExportFFReference_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tdeDataExportFFReference] DROP CONSTRAINT [FK_tdeDataExportFFReference_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tdeDataExportProblem_tdeDataExport__idfDataExport_R_1008]...';


GO
ALTER TABLE [dbo].[tdeDataExportProblem] DROP CONSTRAINT [FK_tdeDataExportProblem_tdeDataExport__idfDataExport_R_1008];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tdeDataExportProblem_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tdeDataExportProblem] DROP CONSTRAINT [FK_tdeDataExportProblem_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflAggrCaseFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflAggrCaseFiltered] DROP CONSTRAINT [FK_tflAggrCaseFiltered_tflSiteGroup__idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflAggrCaseFiltered_tlbAggrCase__idfAggrCase]...';


GO
ALTER TABLE [dbo].[tflAggrCaseFiltered] DROP CONSTRAINT [FK_tflAggrCaseFiltered_tlbAggrCase__idfAggrCase];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflAggrCaseFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflAggrCaseFiltered] DROP CONSTRAINT [FK_tflAggrCaseFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceAggregateHeaderFiltered] DROP CONSTRAINT [FK_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_tflSiteGroup__idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_tlbBasicSyndromicSurveillanceAggregateHeader__idfAggregateHeader]...';


GO
ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceAggregateHeaderFiltered] DROP CONSTRAINT [FK_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_tlbBasicSyndromicSurveillanceAggregateHeader__idfAggregateHeader];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceAggregateHeaderFiltered] DROP CONSTRAINT [FK_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflBasicSyndromicSurveillanceFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceFiltered] DROP CONSTRAINT [FK_tflBasicSyndromicSurveillanceFiltered_tflSiteGroup__idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflBasicSyndromicSurveillanceFiltered_tlbBasicSyndromicSurveillance__idfBasicSyndromicSurveillance_R_1831]...';


GO
ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceFiltered] DROP CONSTRAINT [FK_tflBasicSyndromicSurveillanceFiltered_tlbBasicSyndromicSurveillance__idfBasicSyndromicSurveillance_R_1831];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflBasicSyndromicSurveillanceFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceFiltered] DROP CONSTRAINT [FK_tflBasicSyndromicSurveillanceFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflBatchTestFiltered_tflSiteGroup]...';


GO
ALTER TABLE [dbo].[tflBatchTestFiltered] DROP CONSTRAINT [FK_tflBatchTestFiltered_tflSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflBatchTestFiltered_tlbBatchTest]...';


GO
ALTER TABLE [dbo].[tflBatchTestFiltered] DROP CONSTRAINT [FK_tflBatchTestFiltered_tlbBatchTest];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflBatchTestFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflBatchTestFiltered] DROP CONSTRAINT [FK_tflBatchTestFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflDataAuditEventFiltered_tauDataAuditEvent__idfDataAuditEvent_R_1830]...';


GO
ALTER TABLE [dbo].[tflDataAuditEventFiltered] DROP CONSTRAINT [FK_tflDataAuditEventFiltered_tauDataAuditEvent__idfDataAuditEvent_R_1830];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflDataAuditEventFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflDataAuditEventFiltered] DROP CONSTRAINT [FK_tflDataAuditEventFiltered_tflSiteGroup__idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflDataAuditEventFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflDataAuditEventFiltered] DROP CONSTRAINT [FK_tflDataAuditEventFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflFarmFiltered_tlbFarm]...';


GO
ALTER TABLE [dbo].[tflFarmFiltered] DROP CONSTRAINT [FK_tflFarmFiltered_tlbFarm];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflFarmFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflFarmFiltered] DROP CONSTRAINT [FK_tflFarmFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflFarmFilteredGroup_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflFarmFiltered] DROP CONSTRAINT [FK_tflFarmFilteredGroup_tflSiteGroup__idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflGeoLocationFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflGeoLocationFiltered] DROP CONSTRAINT [FK_tflGeoLocationFiltered_tflSiteGroup__idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflGeoLocationFiltered_tlbGeoLocation__idfGeoLocation_R_1805]...';


GO
ALTER TABLE [dbo].[tflGeoLocationFiltered] DROP CONSTRAINT [FK_tflGeoLocationFiltered_tlbGeoLocation__idfGeoLocation_R_1805];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflGeoLocationFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflGeoLocationFiltered] DROP CONSTRAINT [FK_tflGeoLocationFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflHumanCaseFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflHumanCaseFiltered] DROP CONSTRAINT [FK_tflHumanCaseFiltered_tflSiteGroup__idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflHumanCaseFiltered_tlbHumanCase__idfHumanCase]...';


GO
ALTER TABLE [dbo].[tflHumanCaseFiltered] DROP CONSTRAINT [FK_tflHumanCaseFiltered_tlbHumanCase__idfHumanCase];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflHumanCaseFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflHumanCaseFiltered] DROP CONSTRAINT [FK_tflHumanCaseFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflHumanFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflHumanFiltered] DROP CONSTRAINT [FK_tflHumanFiltered_tflSiteGroup__idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflHumanFiltered_tlbHuman]...';


GO
ALTER TABLE [dbo].[tflHumanFiltered] DROP CONSTRAINT [FK_tflHumanFiltered_tlbHuman];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflHumanFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflHumanFiltered] DROP CONSTRAINT [FK_tflHumanFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflMonitoringSessionFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflMonitoringSessionFiltered] DROP CONSTRAINT [FK_tflMonitoringSessionFiltered_tflSiteGroup__idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflMonitoringSessionFiltered_tlbMonitoringSession__idfMonitoringSession_R_1819]...';


GO
ALTER TABLE [dbo].[tflMonitoringSessionFiltered] DROP CONSTRAINT [FK_tflMonitoringSessionFiltered_tlbMonitoringSession__idfMonitoringSession_R_1819];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflMonitoringSessionFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflMonitoringSessionFiltered] DROP CONSTRAINT [FK_tflMonitoringSessionFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflNewID_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflNewID] DROP CONSTRAINT [FK_tflNewID_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflNotificationFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflNotificationFiltered] DROP CONSTRAINT [FK_tflNotificationFiltered_tflSiteGroup__idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflNotificationFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflNotificationFiltered] DROP CONSTRAINT [FK_tflNotificationFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflNotificationFiltered_tstNotification__idfNotification_R_1825]...';


GO
ALTER TABLE [dbo].[tflNotificationFiltered] DROP CONSTRAINT [FK_tflNotificationFiltered_tstNotification__idfNotification_R_1825];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflObservationFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflObservationFiltered] DROP CONSTRAINT [FK_tflObservationFiltered_tflSiteGroup__idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflObservationFiltered_tlbObservation__idfObservation_R_1809]...';


GO
ALTER TABLE [dbo].[tflObservationFiltered] DROP CONSTRAINT [FK_tflObservationFiltered_tlbObservation__idfObservation_R_1809];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflObservationFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflObservationFiltered] DROP CONSTRAINT [FK_tflObservationFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflOutbreakFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflOutbreakFiltered] DROP CONSTRAINT [FK_tflOutbreakFiltered_tflSiteGroup__idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflOutbreakFiltered_tlbOutbreak__idfOutbreak_R_1811]...';


GO
ALTER TABLE [dbo].[tflOutbreakFiltered] DROP CONSTRAINT [FK_tflOutbreakFiltered_tlbOutbreak__idfOutbreak_R_1811];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflOutbreakFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflOutbreakFiltered] DROP CONSTRAINT [FK_tflOutbreakFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflSite_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflSite] DROP CONSTRAINT [FK_tflSite_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflSite_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tflSite] DROP CONSTRAINT [FK_tflSite_tstSite__idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflSiteGroup_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tflSiteGroup] DROP CONSTRAINT [FK_tflSiteGroup_gisLocation_idfsLocation];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflSiteGroup_gisRayon_idfsRayon]...';


GO
ALTER TABLE [dbo].[tflSiteGroup] DROP CONSTRAINT [FK_tflSiteGroup_gisRayon_idfsRayon];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflSiteGroup_trtBaseReference_idfsSiteGroupType]...';


GO
ALTER TABLE [dbo].[tflSiteGroup] DROP CONSTRAINT [FK_tflSiteGroup_trtBaseReference_idfsSiteGroupType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflSiteGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflSiteGroup] DROP CONSTRAINT [FK_tflSiteGroup_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflSiteGroup_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tflSiteGroup] DROP CONSTRAINT [FK_tflSiteGroup_tstSite_idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflSiteGroupRelation_tflSiteGroup_idfReceiverSite]...';


GO
ALTER TABLE [dbo].[tflSiteGroupRelation] DROP CONSTRAINT [FK_tflSiteGroupRelation_tflSiteGroup_idfReceiverSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflSiteGroupRelation_tflSiteGroup_idfsSenderSiteGroup]...';


GO
ALTER TABLE [dbo].[tflSiteGroupRelation] DROP CONSTRAINT [FK_tflSiteGroupRelation_tflSiteGroup_idfsSenderSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflSiteGroupRelation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflSiteGroupRelation] DROP CONSTRAINT [FK_tflSiteGroupRelation_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflSiteToSiteGroup_tflSiteGroup_idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflSiteToSiteGroup] DROP CONSTRAINT [FK_tflSiteToSiteGroup_tflSiteGroup_idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflSiteToSiteGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflSiteToSiteGroup] DROP CONSTRAINT [FK_tflSiteToSiteGroup_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflSiteToSiteGroup_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tflSiteToSiteGroup] DROP CONSTRAINT [FK_tflSiteToSiteGroup_tstSite_idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflTransferOutFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflTransferOutFiltered] DROP CONSTRAINT [FK_tflTransferOutFiltered_tflSiteGroup__idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflTransferOutFiltered_tlbTransferOUT__idfTransferOut_R_1817]...';


GO
ALTER TABLE [dbo].[tflTransferOutFiltered] DROP CONSTRAINT [FK_tflTransferOutFiltered_tlbTransferOUT__idfTransferOut_R_1817];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflTransferOutFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflTransferOutFiltered] DROP CONSTRAINT [FK_tflTransferOutFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflVectorSurveillanceSessionFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflVectorSurveillanceSessionFiltered] DROP CONSTRAINT [FK_tflVectorSurveillanceSessionFiltered_tflSiteGroup__idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflVectorSurveillanceSessionFiltered_tlbVectorSurveillanceSession__idfVectorSurveillanceSession]...';


GO
ALTER TABLE [dbo].[tflVectorSurveillanceSessionFiltered] DROP CONSTRAINT [FK_tflVectorSurveillanceSessionFiltered_tlbVectorSurveillanceSession__idfVectorSurveillanceSession];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflVectorSurveillanceSessionFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflVectorSurveillanceSessionFiltered] DROP CONSTRAINT [FK_tflVectorSurveillanceSessionFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflVetCaseFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflVetCaseFiltered] DROP CONSTRAINT [FK_tflVetCaseFiltered_tflSiteGroup__idfSiteGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflVetCaseFiltered_tlbVetCase__idfVetCase]...';


GO
ALTER TABLE [dbo].[tflVetCaseFiltered] DROP CONSTRAINT [FK_tflVetCaseFiltered_tlbVetCase__idfVetCase];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tflVetCaseFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflVetCaseFiltered] DROP CONSTRAINT [FK_tflVetCaseFiltered_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbActivityParameters_ffParameter__idfsParameter_R_222]...';


GO
ALTER TABLE [dbo].[tlbActivityParameters] DROP CONSTRAINT [FK_tlbActivityParameters_ffParameter__idfsParameter_R_222];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbActivityParameters_tlbObservation__idfObservation_R_1423]...';


GO
ALTER TABLE [dbo].[tlbActivityParameters] DROP CONSTRAINT [FK_tlbActivityParameters_tlbObservation__idfObservation_R_1423];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbActivityParameters_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbActivityParameters] DROP CONSTRAINT [FK_tlbActivityParameters_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAdministrativeReportAudit_idfsReport]...';


GO
ALTER TABLE [dbo].[tlbAdministrativeReportAudit] DROP CONSTRAINT [FK_tlbAdministrativeReportAudit_idfsReport];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAdministrativeReportAudit_RoleID]...';


GO
ALTER TABLE [dbo].[tlbAdministrativeReportAudit] DROP CONSTRAINT [FK_tlbAdministrativeReportAudit_RoleID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_gisBaseReference__idfsAdministrativeUnit_R_1666]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_gisBaseReference__idfsAdministrativeUnit_R_1666];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfDiagnosticVersion_R_1686]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfDiagnosticVersion_R_1686];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfProphylacticVersion_R_1687]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfProphylacticVersion_R_1687];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfSanitaryVersion_R_1688]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfSanitaryVersion_R_1688];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfVersion_R_1684]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfVersion_R_1684];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tlbObservation__idfCaseObservation_R_1608]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tlbObservation__idfCaseObservation_R_1608];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tlbObservation__idfDiagnosticObservation_R_1609]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tlbObservation__idfDiagnosticObservation_R_1609];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tlbObservation__idfProphylacticObservation_R_1610]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tlbObservation__idfProphylacticObservation_R_1610];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tlbObservation__idfSanitaryObservation_R_1611]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tlbObservation__idfSanitaryObservation_R_1611];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tlbOffice__idfEnteredByOffice_R_1606]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tlbOffice__idfEnteredByOffice_R_1606];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tlbOffice__idfOffice]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tlbOffice__idfOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tlbOffice__idfReceivedByOffice_R_1602]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tlbOffice__idfReceivedByOffice_R_1602];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tlbOffice__idfSentByOffice_R_1604]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tlbOffice__idfSentByOffice_R_1604];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tlbPerson__idfEnteredByPerson_R_1607]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tlbPerson__idfEnteredByPerson_R_1607];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tlbPerson__idfReceivedByPerson_R_1603]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tlbPerson__idfReceivedByPerson_R_1603];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tlbPerson__idfSentByPerson_R_1605]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tlbPerson__idfSentByPerson_R_1605];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_trtBaseReference__idfsAggrCaseType_R_1601]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_trtBaseReference__idfsAggrCaseType_R_1601];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrCase_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] DROP CONSTRAINT [FK_tlbAggrCase_tstSite__idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrDiagnosticActionMTX_tlbAggrMatrixVersionHeader__idfVersion]...';


GO
ALTER TABLE [dbo].[tlbAggrDiagnosticActionMTX] DROP CONSTRAINT [FK_tlbAggrDiagnosticActionMTX_tlbAggrMatrixVersionHeader__idfVersion];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrDiagnosticActionMTX_trtBaseReference__idfsDiagnosticAction_R_1117]...';


GO
ALTER TABLE [dbo].[tlbAggrDiagnosticActionMTX] DROP CONSTRAINT [FK_tlbAggrDiagnosticActionMTX_trtBaseReference__idfsDiagnosticAction_R_1117];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrDiagnosticActionMTX_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAggrDiagnosticActionMTX] DROP CONSTRAINT [FK_tlbAggrDiagnosticActionMTX_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrDiagnosticActionMTX_trtDiagnosis__idfsDiagnosis_R_1616]...';


GO
ALTER TABLE [dbo].[tlbAggrDiagnosticActionMTX] DROP CONSTRAINT [FK_tlbAggrDiagnosticActionMTX_trtDiagnosis__idfsDiagnosis_R_1616];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrDiagnosticActionMTX_trtSpeciesType__idfsSpeciesType_R_1116]...';


GO
ALTER TABLE [dbo].[tlbAggrDiagnosticActionMTX] DROP CONSTRAINT [FK_tlbAggrDiagnosticActionMTX_trtSpeciesType__idfsSpeciesType_R_1116];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrHumanCaseMTX_tlbAggrMatrixVersionHeader__idfVersion]...';


GO
ALTER TABLE [dbo].[tlbAggrHumanCaseMTX] DROP CONSTRAINT [FK_tlbAggrHumanCaseMTX_tlbAggrMatrixVersionHeader__idfVersion];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrHumanCaseMTX_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAggrHumanCaseMTX] DROP CONSTRAINT [FK_tlbAggrHumanCaseMTX_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrHumanCaseMTX_trtDiagnosis__idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[tlbAggrHumanCaseMTX] DROP CONSTRAINT [FK_tlbAggrHumanCaseMTX_trtDiagnosis__idfsDiagnosis];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrMatrixVersionHeader_trtBaseReference__idfsAggrMatrixType_R_1685]...';


GO
ALTER TABLE [dbo].[tlbAggrMatrixVersionHeader] DROP CONSTRAINT [FK_tlbAggrMatrixVersionHeader_trtBaseReference__idfsAggrMatrixType_R_1685];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrMatrixVersionHeader_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAggrMatrixVersionHeader] DROP CONSTRAINT [FK_tlbAggrMatrixVersionHeader_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrProphylacticActionMTX_tlbAggrMatrixVersionHeader__idfVersion]...';


GO
ALTER TABLE [dbo].[tlbAggrProphylacticActionMTX] DROP CONSTRAINT [FK_tlbAggrProphylacticActionMTX_tlbAggrMatrixVersionHeader__idfVersion];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrProphylacticActionMTX_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAggrProphylacticActionMTX] DROP CONSTRAINT [FK_tlbAggrProphylacticActionMTX_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrProphylacticActionMTX_trtDiagnosis__idfsDiagnosis_R_1615]...';


GO
ALTER TABLE [dbo].[tlbAggrProphylacticActionMTX] DROP CONSTRAINT [FK_tlbAggrProphylacticActionMTX_trtDiagnosis__idfsDiagnosis_R_1615];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrProphylacticActionMTX_trtProphilacticAction__idfsProphilacticAction_R_1614]...';


GO
ALTER TABLE [dbo].[tlbAggrProphylacticActionMTX] DROP CONSTRAINT [FK_tlbAggrProphylacticActionMTX_trtProphilacticAction__idfsProphilacticAction_R_1614];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrProphylacticActionMTX_trtSpeciesType__idfsSpeciesType_R_1119]...';


GO
ALTER TABLE [dbo].[tlbAggrProphylacticActionMTX] DROP CONSTRAINT [FK_tlbAggrProphylacticActionMTX_trtSpeciesType__idfsSpeciesType_R_1119];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrSanitaryActionMTX_tlbAggrMatrixVersionHeader__idfVersion]...';


GO
ALTER TABLE [dbo].[tlbAggrSanitaryActionMTX] DROP CONSTRAINT [FK_tlbAggrSanitaryActionMTX_tlbAggrMatrixVersionHeader__idfVersion];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrSanitaryActionMTX_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAggrSanitaryActionMTX] DROP CONSTRAINT [FK_tlbAggrSanitaryActionMTX_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrSanitaryActionMTX_trtSanitaryAction__idfsSanitaryAction]...';


GO
ALTER TABLE [dbo].[tlbAggrSanitaryActionMTX] DROP CONSTRAINT [FK_tlbAggrSanitaryActionMTX_trtSanitaryAction__idfsSanitaryAction];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrVetCaseMTX_tlbAggrMatrixVersionHeader__idfVersion]...';


GO
ALTER TABLE [dbo].[tlbAggrVetCaseMTX] DROP CONSTRAINT [FK_tlbAggrVetCaseMTX_tlbAggrMatrixVersionHeader__idfVersion];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrVetCaseMTX_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAggrVetCaseMTX] DROP CONSTRAINT [FK_tlbAggrVetCaseMTX_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrVetCaseMTX_trtDiagnosis__idfsDiagnosis_R_1617]...';


GO
ALTER TABLE [dbo].[tlbAggrVetCaseMTX] DROP CONSTRAINT [FK_tlbAggrVetCaseMTX_trtDiagnosis__idfsDiagnosis_R_1617];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAggrVetCaseMTX_trtSpeciesType__idfsSpeciesType_R_1122]...';


GO
ALTER TABLE [dbo].[tlbAggrVetCaseMTX] DROP CONSTRAINT [FK_tlbAggrVetCaseMTX_trtSpeciesType__idfsSpeciesType_R_1122];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAnimal_tlbObservation__idfObservation_R_1481]...';


GO
ALTER TABLE [dbo].[tlbAnimal] DROP CONSTRAINT [FK_tlbAnimal_tlbObservation__idfObservation_R_1481];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAnimal_tlbSpecies__idfSpecies_R_1478]...';


GO
ALTER TABLE [dbo].[tlbAnimal] DROP CONSTRAINT [FK_tlbAnimal_tlbSpecies__idfSpecies_R_1478];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAnimal_trtBaseReference__idfsAnimalAge_R_1236]...';


GO
ALTER TABLE [dbo].[tlbAnimal] DROP CONSTRAINT [FK_tlbAnimal_trtBaseReference__idfsAnimalAge_R_1236];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAnimal_trtBaseReference__idfsAnimalCondition_R_1280]...';


GO
ALTER TABLE [dbo].[tlbAnimal] DROP CONSTRAINT [FK_tlbAnimal_trtBaseReference__idfsAnimalCondition_R_1280];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAnimal_trtBaseReference__idfsAnimalGender_R_1237]...';


GO
ALTER TABLE [dbo].[tlbAnimal] DROP CONSTRAINT [FK_tlbAnimal_trtBaseReference__idfsAnimalGender_R_1237];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAnimal_trtBaseReference__idfsYNClinicalSigns_R_1409]...';


GO
ALTER TABLE [dbo].[tlbAnimal] DROP CONSTRAINT [FK_tlbAnimal_trtBaseReference__idfsYNClinicalSigns_R_1409];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAnimal_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAnimal] DROP CONSTRAINT [FK_tlbAnimal_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAntimicrobialTherapy_tlbHumanCase__idfHumanCase_R_1422]...';


GO
ALTER TABLE [dbo].[tlbAntimicrobialTherapy] DROP CONSTRAINT [FK_tlbAntimicrobialTherapy_tlbHumanCase__idfHumanCase_R_1422];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbAntimicrobialTherapy_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAntimicrobialTherapy] DROP CONSTRAINT [FK_tlbAntimicrobialTherapy_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_tlbHuman__idfHuman]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_tlbHuman__idfHuman];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_tlbOffice__idfHospital]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_tlbOffice__idfHospital];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_tlbPerson__idfEnteredBy]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_tlbPerson__idfEnteredBy];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsBasicSyndromicSurveillanceType]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsBasicSyndromicSurveillanceType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsMethodOfMeasurement]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsMethodOfMeasurement];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsOutcome]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsOutcome];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsTestResult]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsTestResult];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNAdministratedAntiviralMedication]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNAdministratedAntiviralMedication];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNCough]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNCough];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNFever]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNFever];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPatientWasHospitalized]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPatientWasHospitalized];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPatientWasInER]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPatientWasInER];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPostpartumPeriod]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPostpartumPeriod];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPregnant]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPregnant];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNSeasonalFluVaccine]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNSeasonalFluVaccine];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNShortnessOfBreath]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNShortnessOfBreath];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNTreatment]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNTreatment];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillance_tstSite__idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillanceAggregateDetail_tlbBasicSyndromicSurveillanceAggregateHeader__idfAggregateHeader]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateDetail] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateDetail_tlbBasicSyndromicSurveillanceAggregateHeader__idfAggregateHeader];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillanceAggregateDetail_tlbOffice__idfHospital]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateDetail] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateDetail_tlbOffice__idfHospital];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillanceAggregateDetail_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateDetail] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateDetail_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillanceAggregateHeader_tlbPerson__idfEnteredBy]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateHeader] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateHeader_tlbPerson__idfEnteredBy];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillanceAggregateHeader_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateHeader] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateHeader_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillanceAggregateHeader_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateHeader] DROP CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateHeader_tstSite__idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBatchTest_tlbObservation__idfObservation_R_1541]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] DROP CONSTRAINT [FK_tlbBatchTest_tlbObservation__idfObservation_R_1541];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBatchTest_tlbOffice__idfPerformedByOffice_R_1539]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] DROP CONSTRAINT [FK_tlbBatchTest_tlbOffice__idfPerformedByOffice_R_1539];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBatchTest_tlbOffice__idfResultEnteredByOffice]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] DROP CONSTRAINT [FK_tlbBatchTest_tlbOffice__idfResultEnteredByOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBatchTest_tlbOffice__idfValidatedByOffice_R_1542]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] DROP CONSTRAINT [FK_tlbBatchTest_tlbOffice__idfValidatedByOffice_R_1542];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBatchTest_tlbPerson__idfPerformedByPerson_R_1540]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] DROP CONSTRAINT [FK_tlbBatchTest_tlbPerson__idfPerformedByPerson_R_1540];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBatchTest_tlbPerson__idfResultEnteredByPerson]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] DROP CONSTRAINT [FK_tlbBatchTest_tlbPerson__idfResultEnteredByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBatchTest_tlbPerson__idfValidatedByPerson_R_1543]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] DROP CONSTRAINT [FK_tlbBatchTest_tlbPerson__idfValidatedByPerson_R_1543];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBatchTest_trtBaseReference__idfsBatchStatus_R_1544]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] DROP CONSTRAINT [FK_tlbBatchTest_trtBaseReference__idfsBatchStatus_R_1544];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBatchTest_trtBaseReference__idfsTestName]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] DROP CONSTRAINT [FK_tlbBatchTest_trtBaseReference__idfsTestName];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBatchTest_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] DROP CONSTRAINT [FK_tlbBatchTest_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbBatchTest_tstSite__idfsSite_R_1653]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] DROP CONSTRAINT [FK_tlbBatchTest_tstSite__idfsSite_R_1653];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbCampaign_trtBaseRef_CampaignCategory]...';


GO
ALTER TABLE [dbo].[tlbCampaign] DROP CONSTRAINT [FK_tlbCampaign_trtBaseRef_CampaignCategory];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbCampaign_trtBaseReference__idfsCampaignType_R_1736]...';


GO
ALTER TABLE [dbo].[tlbCampaign] DROP CONSTRAINT [FK_tlbCampaign_trtBaseReference__idfsCampaignType_R_1736];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbCampaign_trtBaseReference_idfsCampaignStatus]...';


GO
ALTER TABLE [dbo].[tlbCampaign] DROP CONSTRAINT [FK_tlbCampaign_trtBaseReference_idfsCampaignStatus];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbCampaign_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbCampaign] DROP CONSTRAINT [FK_tlbCampaign_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbCampaign_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbCampaign] DROP CONSTRAINT [FK_tlbCampaign_tstSite__idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbCampaignToDiagnosis_tlbCampaign__idfCampaign_R_1738]...';


GO
ALTER TABLE [dbo].[tlbCampaignToDiagnosis] DROP CONSTRAINT [FK_tlbCampaignToDiagnosis_tlbCampaign__idfCampaign_R_1738];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbCampaignToDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbCampaignToDiagnosis] DROP CONSTRAINT [FK_tlbCampaignToDiagnosis_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbCampaignToDiagnosis_trtDiagnosis__idfsDiagnosis_R_1739]...';


GO
ALTER TABLE [dbo].[tlbCampaignToDiagnosis] DROP CONSTRAINT [FK_tlbCampaignToDiagnosis_trtDiagnosis__idfsDiagnosis_R_1739];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbCampaignToDiagnosis_trtSampleType__idfsSampleType]...';


GO
ALTER TABLE [dbo].[tlbCampaignToDiagnosis] DROP CONSTRAINT [FK_tlbCampaignToDiagnosis_trtSampleType__idfsSampleType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbCampaignToDiagnosis_trtSpeciesType__idfsSpeciesType]...';


GO
ALTER TABLE [dbo].[tlbCampaignToDiagnosis] DROP CONSTRAINT [FK_tlbCampaignToDiagnosis_trtSpeciesType__idfsSpeciesType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbChangeDiagnosisHistory_tlbHumanCase__idfHumanCase_R_1797]...';


GO
ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] DROP CONSTRAINT [FK_tlbChangeDiagnosisHistory_tlbHumanCase__idfHumanCase_R_1797];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbChangeDiagnosisHistory_tlbPerson__idfPerson]...';


GO
ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] DROP CONSTRAINT [FK_tlbChangeDiagnosisHistory_tlbPerson__idfPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbChangeDiagnosisHistory_trtBaseReference_idfsChangeDiagnosisReason]...';


GO
ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] DROP CONSTRAINT [FK_tlbChangeDiagnosisHistory_trtBaseReference_idfsChangeDiagnosisReason];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbChangeDiagnosisHistory_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] DROP CONSTRAINT [FK_tlbChangeDiagnosisHistory_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbChangeDiagnosisHistory_trtDiagnosis__idfsCurrentDiagnosis_R_1799]...';


GO
ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] DROP CONSTRAINT [FK_tlbChangeDiagnosisHistory_trtDiagnosis__idfsCurrentDiagnosis_R_1799];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbChangeDiagnosisHistory_trtDiagnosis__idfsPreviousDiagnosis_R_1798]...';


GO
ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] DROP CONSTRAINT [FK_tlbChangeDiagnosisHistory_trtDiagnosis__idfsPreviousDiagnosis_R_1798];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbContactedCasePerson_tlbHuman__idfHuman_R_1460]...';


GO
ALTER TABLE [dbo].[tlbContactedCasePerson] DROP CONSTRAINT [FK_tlbContactedCasePerson_tlbHuman__idfHuman_R_1460];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbContactedCasePerson_tlbHumanCase__idfHumanCase_R_1461]...';


GO
ALTER TABLE [dbo].[tlbContactedCasePerson] DROP CONSTRAINT [FK_tlbContactedCasePerson_tlbHumanCase__idfHumanCase_R_1461];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbContactedCasePerson_trtBaseReference__idfsPersonContactType_R_1462]...';


GO
ALTER TABLE [dbo].[tlbContactedCasePerson] DROP CONSTRAINT [FK_tlbContactedCasePerson_trtBaseReference__idfsPersonContactType_R_1462];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbContactedCasePerson_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbContactedCasePerson] DROP CONSTRAINT [FK_tlbContactedCasePerson_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbDepartment_tlbOffice__idfOrganization]...';


GO
ALTER TABLE [dbo].[tlbDepartment] DROP CONSTRAINT [FK_tlbDepartment_tlbOffice__idfOrganization];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbDepartment_trtBaseReference__idfsDepartmentName]...';


GO
ALTER TABLE [dbo].[tlbDepartment] DROP CONSTRAINT [FK_tlbDepartment_trtBaseReference__idfsDepartmentName];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbDepartment_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbDepartment] DROP CONSTRAINT [FK_tlbDepartment_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_Employee_Site]...';


GO
ALTER TABLE [dbo].[tlbEmployee] DROP CONSTRAINT [FK_Employee_Site];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbEmployee_trtBaseReference__idfsEmployeeType_R_1250]...';


GO
ALTER TABLE [dbo].[tlbEmployee] DROP CONSTRAINT [FK_tlbEmployee_trtBaseReference__idfsEmployeeType_R_1250];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbEmployee_trtBaseReference_idfsEmployeeCategory]...';


GO
ALTER TABLE [dbo].[tlbEmployee] DROP CONSTRAINT [FK_tlbEmployee_trtBaseReference_idfsEmployeeCategory];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbEmployee_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbEmployee] DROP CONSTRAINT [FK_tlbEmployee_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbEmployeeGroup_tlbEmployee__idfEmployeeGroup_R_832]...';


GO
ALTER TABLE [dbo].[tlbEmployeeGroup] DROP CONSTRAINT [FK_tlbEmployeeGroup_tlbEmployee__idfEmployeeGroup_R_832];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbEmployeeGroup_trtBaseReference__idfsEmployeeGroupName_R_1014]...';


GO
ALTER TABLE [dbo].[tlbEmployeeGroup] DROP CONSTRAINT [FK_tlbEmployeeGroup_trtBaseReference__idfsEmployeeGroupName_R_1014];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbEmployeeGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbEmployeeGroup] DROP CONSTRAINT [FK_tlbEmployeeGroup_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbEmployeeGroup_tstSite__idfsSite_R_1018]...';


GO
ALTER TABLE [dbo].[tlbEmployeeGroup] DROP CONSTRAINT [FK_tlbEmployeeGroup_tstSite__idfsSite_R_1018];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbEmployeeGroupMember_tlbEmployee__idfEmployee_R_1668]...';


GO
ALTER TABLE [dbo].[tlbEmployeeGroupMember] DROP CONSTRAINT [FK_tlbEmployeeGroupMember_tlbEmployee__idfEmployee_R_1668];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbEmployeeGroupMember_tlbEmployeeGroup__idfEmployeeGroup_R_1465]...';


GO
ALTER TABLE [dbo].[tlbEmployeeGroupMember] DROP CONSTRAINT [FK_tlbEmployeeGroupMember_tlbEmployeeGroup__idfEmployeeGroup_R_1465];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbEmployeeGroupMember_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbEmployeeGroupMember] DROP CONSTRAINT [FK_tlbEmployeeGroupMember_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarm_tlbFarmActual]...';


GO
ALTER TABLE [dbo].[tlbFarm] DROP CONSTRAINT [FK_tlbFarm_tlbFarmActual];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarm_tlbGeoLocation__idfFarmAddress_R_1473]...';


GO
ALTER TABLE [dbo].[tlbFarm] DROP CONSTRAINT [FK_tlbFarm_tlbGeoLocation__idfFarmAddress_R_1473];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarm_tlbHuman__idfHuman_R_1470]...';


GO
ALTER TABLE [dbo].[tlbFarm] DROP CONSTRAINT [FK_tlbFarm_tlbHuman__idfHuman_R_1470];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarm_tlbMonitoringSession]...';


GO
ALTER TABLE [dbo].[tlbFarm] DROP CONSTRAINT [FK_tlbFarm_tlbMonitoringSession];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarm_tlbObservation__idfObservation_R_1471]...';


GO
ALTER TABLE [dbo].[tlbFarm] DROP CONSTRAINT [FK_tlbFarm_tlbObservation__idfObservation_R_1471];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsAvianFarmType_R_1295]...';


GO
ALTER TABLE [dbo].[tlbFarm] DROP CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsAvianFarmType_R_1295];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsAvianProductionType_R_1294]...';


GO
ALTER TABLE [dbo].[tlbFarm] DROP CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsAvianProductionType_R_1294];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsFarmCategory_R_1288]...';


GO
ALTER TABLE [dbo].[tlbFarm] DROP CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsFarmCategory_R_1288];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsGrazingPattern_R_1298]...';


GO
ALTER TABLE [dbo].[tlbFarm] DROP CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsGrazingPattern_R_1298];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsIntendedUse_R_1299]...';


GO
ALTER TABLE [dbo].[tlbFarm] DROP CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsIntendedUse_R_1299];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsLivestockProductionType_R_1296]...';


GO
ALTER TABLE [dbo].[tlbFarm] DROP CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsLivestockProductionType_R_1296];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsMovementPattern_R_1300]...';


GO
ALTER TABLE [dbo].[tlbFarm] DROP CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsMovementPattern_R_1300];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsOwnershipStructure_R_1287]...';


GO
ALTER TABLE [dbo].[tlbFarm] DROP CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsOwnershipStructure_R_1287];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarm_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbFarm] DROP CONSTRAINT [FK_tlbFarm_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarm_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbFarm] DROP CONSTRAINT [FK_tlbFarm_tstSite__idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarmActual_tlbGeoLocationShared__idfFarmAddress_R_1473]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] DROP CONSTRAINT [FK_tlbFarmActual_tlbGeoLocationShared__idfFarmAddress_R_1473];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarmActual_tlbHumanActual__idfHumanActual_R_1470]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] DROP CONSTRAINT [FK_tlbFarmActual_tlbHumanActual__idfHumanActual_R_1470];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsAvianFarmType_R_1295]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] DROP CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsAvianFarmType_R_1295];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsAvianProductionType_R_1294]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] DROP CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsAvianProductionType_R_1294];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsFarmCategory_R_1288]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] DROP CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsFarmCategory_R_1288];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsGrazingPattern_R_1298]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] DROP CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsGrazingPattern_R_1298];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsIntendedUse_R_1299]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] DROP CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsIntendedUse_R_1299];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsLivestockProductionType_R_1296]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] DROP CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsLivestockProductionType_R_1296];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsMovementPattern_R_1300]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] DROP CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsMovementPattern_R_1300];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsOwnershipStructure_R_1287]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] DROP CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsOwnershipStructure_R_1287];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] DROP CONSTRAINT [FK_tlbFarmActual_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFreezer_trtBaseReference__idfsStorageType_R_1256]...';


GO
ALTER TABLE [dbo].[tlbFreezer] DROP CONSTRAINT [FK_tlbFreezer_trtBaseReference__idfsStorageType_R_1256];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFreezer_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbFreezer] DROP CONSTRAINT [FK_tlbFreezer_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFreezer_tstSite__idfsSite_R_236]...';


GO
ALTER TABLE [dbo].[tlbFreezer] DROP CONSTRAINT [FK_tlbFreezer_tstSite__idfsSite_R_236];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_FreezerSubdivision_BaseRef_BoxSizeID]...';


GO
ALTER TABLE [dbo].[tlbFreezerSubdivision] DROP CONSTRAINT [FK_FreezerSubdivision_BaseRef_BoxSizeID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFreezerSubdivision_tlbFreezer__idfFreezer_R_902]...';


GO
ALTER TABLE [dbo].[tlbFreezerSubdivision] DROP CONSTRAINT [FK_tlbFreezerSubdivision_tlbFreezer__idfFreezer_R_902];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFreezerSubdivision_tlbFreezerSubdivision__idfParentSubdivision_R_904]...';


GO
ALTER TABLE [dbo].[tlbFreezerSubdivision] DROP CONSTRAINT [FK_tlbFreezerSubdivision_tlbFreezerSubdivision__idfParentSubdivision_R_904];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFreezerSubdivision_trtBaseReference__idfsSubdivisionType_R_1257]...';


GO
ALTER TABLE [dbo].[tlbFreezerSubdivision] DROP CONSTRAINT [FK_tlbFreezerSubdivision_trtBaseReference__idfsSubdivisionType_R_1257];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFreezerSubdivision_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbFreezerSubdivision] DROP CONSTRAINT [FK_tlbFreezerSubdivision_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbFreezerSubdivision_tstSite__idfsSite_R_908]...';


GO
ALTER TABLE [dbo].[tlbFreezerSubdivision] DROP CONSTRAINT [FK_tlbFreezerSubdivision_tstSite__idfsSite_R_908];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocation_gisCountry__idfsCountry_R_972]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] DROP CONSTRAINT [FK_tlbGeoLocation_gisCountry__idfsCountry_R_972];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocation_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] DROP CONSTRAINT [FK_tlbGeoLocation_gisLocation_idfsLocation];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocation_gisRayon__idfsRayon_R_974]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] DROP CONSTRAINT [FK_tlbGeoLocation_gisRayon__idfsRayon_R_974];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocation_gisRegion__idfsRegion_R_973]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] DROP CONSTRAINT [FK_tlbGeoLocation_gisRegion__idfsRegion_R_973];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocation_gisSettlement__idfsSettlement_R_1218]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] DROP CONSTRAINT [FK_tlbGeoLocation_gisSettlement__idfsSettlement_R_1218];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocation_trtBaseReference__idfsGeoLocationType_R_1238]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] DROP CONSTRAINT [FK_tlbGeoLocation_trtBaseReference__idfsGeoLocationType_R_1238];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocation_trtBaseReference__idfsGroundType_R_1239]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] DROP CONSTRAINT [FK_tlbGeoLocation_trtBaseReference__idfsGroundType_R_1239];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocation_trtBaseReference__idfsResidentType_R_1277]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] DROP CONSTRAINT [FK_tlbGeoLocation_trtBaseReference__idfsResidentType_R_1277];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] DROP CONSTRAINT [FK_tlbGeoLocation_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocation_tstSite__idfsSite_R_1028]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] DROP CONSTRAINT [FK_tlbGeoLocation_tstSite__idfsSite_R_1028];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationShared_gisCountry__idfsCountry_R_972]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] DROP CONSTRAINT [FK_tlbGeoLocationShared_gisCountry__idfsCountry_R_972];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationShared_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] DROP CONSTRAINT [FK_tlbGeoLocationShared_gisLocation_idfsLocation];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationShared_gisRayon__idfsRayon_R_974]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] DROP CONSTRAINT [FK_tlbGeoLocationShared_gisRayon__idfsRayon_R_974];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationShared_gisRegion__idfsRegion_R_973]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] DROP CONSTRAINT [FK_tlbGeoLocationShared_gisRegion__idfsRegion_R_973];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationShared_gisSettlement__idfsSettlement_R_1218]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] DROP CONSTRAINT [FK_tlbGeoLocationShared_gisSettlement__idfsSettlement_R_1218];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationShared_trtBaseReference__idfsGeoLocationType_R_1238]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] DROP CONSTRAINT [FK_tlbGeoLocationShared_trtBaseReference__idfsGeoLocationType_R_1238];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationShared_trtBaseReference__idfsGroundType_R_1239]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] DROP CONSTRAINT [FK_tlbGeoLocationShared_trtBaseReference__idfsGroundType_R_1239];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationShared_trtBaseReference__idfsResidentType_R_1277]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] DROP CONSTRAINT [FK_tlbGeoLocationShared_trtBaseReference__idfsResidentType_R_1277];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationShared_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] DROP CONSTRAINT [FK_tlbGeoLocationShared_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationShared_tstSite__idfsSite_R_1028]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] DROP CONSTRAINT [FK_tlbGeoLocationShared_tstSite__idfsSite_R_1028];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationSharedTranslation_tlbGeoLocationShared__idfGeoLocationShared]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationSharedTranslation] DROP CONSTRAINT [FK_tlbGeoLocationSharedTranslation_tlbGeoLocationShared__idfGeoLocationShared];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationSharedTranslation_trtBaseReference__idfsLanguage]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationSharedTranslation] DROP CONSTRAINT [FK_tlbGeoLocationSharedTranslation_trtBaseReference__idfsLanguage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationSharedTranslation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationSharedTranslation] DROP CONSTRAINT [FK_tlbGeoLocationSharedTranslation_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationTranslation_tlbGeoLocation__idfGeoLocation]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationTranslation] DROP CONSTRAINT [FK_tlbGeoLocationTranslation_tlbGeoLocation__idfGeoLocation];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationTranslation_trtBaseReference__idfsLanguage]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationTranslation] DROP CONSTRAINT [FK_tlbGeoLocationTranslation_trtBaseReference__idfsLanguage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGeoLocationTranslation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationTranslation] DROP CONSTRAINT [FK_tlbGeoLocationTranslation_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGridDefinition_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbGridDefinition] DROP CONSTRAINT [FK_tlbGridDefinition_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGridDefinition_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tlbGridDefinition] DROP CONSTRAINT [FK_tlbGridDefinition_tstSite_idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbGridDefinition_tstUserTable_idfUserID]...';


GO
ALTER TABLE [dbo].[tlbGridDefinition] DROP CONSTRAINT [FK_tlbGridDefinition_tstUserTable_idfUserID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHerd_tlbFarm__idfFarm_R_1480]...';


GO
ALTER TABLE [dbo].[tlbHerd] DROP CONSTRAINT [FK_tlbHerd_tlbFarm__idfFarm_R_1480];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHerd_tlbHerdActual]...';


GO
ALTER TABLE [dbo].[tlbHerd] DROP CONSTRAINT [FK_tlbHerd_tlbHerdActual];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHerd_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbHerd] DROP CONSTRAINT [FK_tlbHerd_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHerdActual_tlbFarmActual__idfFarmActual_R_1480]...';


GO
ALTER TABLE [dbo].[tlbHerdActual] DROP CONSTRAINT [FK_tlbHerdActual_tlbFarmActual__idfFarmActual_R_1480];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHerdActual_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbHerdActual] DROP CONSTRAINT [FK_tlbHerdActual_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHuman_tlbGeoLocation__idfCurrentResidenceAddress_R_1424]...';


GO
ALTER TABLE [dbo].[tlbHuman] DROP CONSTRAINT [FK_tlbHuman_tlbGeoLocation__idfCurrentResidenceAddress_R_1424];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHuman_tlbGeoLocation__idfEmployerAddress_R_1425]...';


GO
ALTER TABLE [dbo].[tlbHuman] DROP CONSTRAINT [FK_tlbHuman_tlbGeoLocation__idfEmployerAddress_R_1425];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHuman_tlbGeoLocation__idfRegistrationAddress_R_1426]...';


GO
ALTER TABLE [dbo].[tlbHuman] DROP CONSTRAINT [FK_tlbHuman_tlbGeoLocation__idfRegistrationAddress_R_1426];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHuman_tlbHumanActual]...';


GO
ALTER TABLE [dbo].[tlbHuman] DROP CONSTRAINT [FK_tlbHuman_tlbHumanActual];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHuman_tlbMonitoringSession_MontoringSessionID]...';


GO
ALTER TABLE [dbo].[tlbHuman] DROP CONSTRAINT [FK_tlbHuman_tlbMonitoringSession_MontoringSessionID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHuman_trtBaseReference__idfsHumanGender_R_1232]...';


GO
ALTER TABLE [dbo].[tlbHuman] DROP CONSTRAINT [FK_tlbHuman_trtBaseReference__idfsHumanGender_R_1232];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHuman_trtBaseReference__idfsNationality_R_1278]...';


GO
ALTER TABLE [dbo].[tlbHuman] DROP CONSTRAINT [FK_tlbHuman_trtBaseReference__idfsNationality_R_1278];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHuman_trtBaseReference__idfsOccupationType_R_1233]...';


GO
ALTER TABLE [dbo].[tlbHuman] DROP CONSTRAINT [FK_tlbHuman_trtBaseReference__idfsOccupationType_R_1233];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHuman_trtBaseReference_idfsPersonIDType]...';


GO
ALTER TABLE [dbo].[tlbHuman] DROP CONSTRAINT [FK_tlbHuman_trtBaseReference_idfsPersonIDType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHuman_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbHuman] DROP CONSTRAINT [FK_tlbHuman_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHuman_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbHuman] DROP CONSTRAINT [FK_tlbHuman_tstSite__idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanActual_tlbGeoLocation__idfCurrentResidenceAddress_R_1424]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] DROP CONSTRAINT [FK_tlbHumanActual_tlbGeoLocation__idfCurrentResidenceAddress_R_1424];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanActual_tlbGeoLocation__idfEmployerAddress_R_1425]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] DROP CONSTRAINT [FK_tlbHumanActual_tlbGeoLocation__idfEmployerAddress_R_1425];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanActual_tlbGeoLocation__idfRegistrationAddress_R_1426]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] DROP CONSTRAINT [FK_tlbHumanActual_tlbGeoLocation__idfRegistrationAddress_R_1426];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanActual_trtBaseReference__idfsHumanGender_R_1232]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] DROP CONSTRAINT [FK_tlbHumanActual_trtBaseReference__idfsHumanGender_R_1232];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanActual_trtBaseReference__idfsNationality_R_1278]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] DROP CONSTRAINT [FK_tlbHumanActual_trtBaseReference__idfsNationality_R_1278];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanActual_trtBaseReference__idfsOccupationType_R_1233]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] DROP CONSTRAINT [FK_tlbHumanActual_trtBaseReference__idfsOccupationType_R_1233];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanActual_trtBaseReference_idfsPersonIDType]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] DROP CONSTRAINT [FK_tlbHumanActual_trtBaseReference_idfsPersonIDType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanActual_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] DROP CONSTRAINT [FK_tlbHumanActual_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanCase_BaseRef_ExposureLocationKnown]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_HumanCase_BaseRef_ExposureLocationKnown];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanCase_BaseRef_PreviouslySoughtCare]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_HumanCase_BaseRef_PreviouslySoughtCare];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_HumanCase_BaseRef_SpecificVaccinationAdministered]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_HumanCase_BaseRef_SpecificVaccinationAdministered];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumaCase_BaseRef_DiseaseReportTypeID]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumaCase_BaseRef_DiseaseReportTypeID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbGeoLocation__idfPointGeoLocation_R_1421]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbGeoLocation__idfPointGeoLocation_R_1421];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbHuman]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbHuman];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbHumanCase__idfDeduplicationResultCase_R_1444]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbHumanCase__idfDeduplicationResultCase_R_1444];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbMonitoringSession_ParentMonitoringSession]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbMonitoringSession_ParentMonitoringSession];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbObservation__idfCSObservation_R_1416]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbObservation__idfCSObservation_R_1416];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbObservation__idfEpiObservation_R_1415]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbObservation__idfEpiObservation_R_1415];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbOffice__idfHospital]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbOffice__idfHospital];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbOffice__idfInvestigatedByOffice_R_1420]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbOffice__idfInvestigatedByOffice_R_1420];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbOffice__idfReceivedByOffice_R_1419]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbOffice__idfReceivedByOffice_R_1419];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbOffice__idfSentByOffice_R_1418]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbOffice__idfSentByOffice_R_1418];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbOffice_idfSoughtCareFacility]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbOffice_idfSoughtCareFacility];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbOutbreak__idfOutbreak]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbOutbreak__idfOutbreak];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbPerson__idfInvestigatedByPerson]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbPerson__idfInvestigatedByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbPerson__idfReceivedByPerson]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbPerson__idfReceivedByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbPerson__idfSentByPerson]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbPerson__idfSentByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tlbPerson_idfPersonEnteredBy]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tlbPerson_idfPersonEnteredBy];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsCaseProgressStatus]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsCaseProgressStatus];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsFinalCaseStatus_R_1676]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsFinalCaseStatus_R_1676];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsFinalState_R_1292]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsFinalState_R_1292];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsHospitalizationStatus_R_1269]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsHospitalizationStatus_R_1269];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsHumanAgeType_R_1247]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsHumanAgeType_R_1247];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsInitialCaseStatus_R_1439]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsInitialCaseStatus_R_1439];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsOutcome_R_1414]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsOutcome_R_1414];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsYNAntimicrobialTherapy_R_1409]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsYNAntimicrobialTherapy_R_1409];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsYNHospitalization_R_1410]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsYNHospitalization_R_1410];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsYNRelatedToOutbreak_R_1413]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsYNRelatedToOutbreak_R_1413];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsYNSpecimenCollected_R_1411]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsYNSpecimenCollected_R_1411];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsYNTestsConducted]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsYNTestsConducted];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference_idfsNonNotifiableDiagnosis]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtBaseReference_idfsNonNotifiableDiagnosis];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference_idfsNotCollectedReason]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtBaseReference_idfsNotCollectedReason];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtDiagnosis__idfsFinalDiagnosis_R_1427]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtDiagnosis__idfsFinalDiagnosis_R_1427];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_trtDiagnosis__idfsTentativeDiagnosis_R_1428]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_trtDiagnosis__idfsTentativeDiagnosis_R_1428];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbHumanCase_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] DROP CONSTRAINT [FK_tlbHumanCase_tstSite__idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbAnimal]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbAnimal];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbDepartment_idfInDepartment]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbDepartment_idfInDepartment];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbFreezerSubdivision]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbFreezerSubdivision];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbHuman]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbHuman];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbHumanCase]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbHumanCase];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbMaterial__idfParentMaterial_R_1222]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbMaterial__idfParentMaterial_R_1222];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbMaterial__idfRootMaterial]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbMaterial__idfRootMaterial];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbMonitoringSession]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbMonitoringSession];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbOffice__idfFieldCollectedByOffice_R_1530]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbOffice__idfFieldCollectedByOffice_R_1530];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbOffice__idfSendToOffice]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbOffice__idfSendToOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbPerson]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbPerson__idfAccesionByPerson]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbPerson__idfAccesionByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbPerson__idfFieldCollectedByPerson_R_1529]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbPerson__idfFieldCollectedByPerson_R_1529];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbPerson__idfMarkedForDispositionByPerson]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbPerson__idfMarkedForDispositionByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbSpecies]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbSpecies];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbTesting__idfMainTest]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbTesting__idfMainTest];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbVector_idfVector]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbVector_idfVector];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbVectorSurveillanceSession_idfVectorSurveillanceSession]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbVectorSurveillanceSession_idfVectorSurveillanceSession];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tlbVetCase]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tlbVetCase];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference__idfsAccessionCondition]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_trtBaseReference__idfsAccessionCondition];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference_DiseaseID]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_trtBaseReference_DiseaseID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference_idfsBirdStatus]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_trtBaseReference_idfsBirdStatus];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference_idfsDestructionMethod]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_trtBaseReference_idfsDestructionMethod];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference_idfsSampleKind]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_trtBaseReference_idfsSampleKind];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference_idfsSampleStatus]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_trtBaseReference_idfsSampleStatus];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference_PreviousSampleStatusID]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_trtBaseReference_PreviousSampleStatusID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_trtSampleType__idfsSampleType]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_trtSampleType__idfsSampleType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tstSite__idfsCurrentSite]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tstSite__idfsCurrentSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMaterial_tstSite__idfsSite_R_1066]...';


GO
ALTER TABLE [dbo].[tlbMaterial] DROP CONSTRAINT [FK_tlbMaterial_tstSite__idfsSite_R_1066];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSession_gisCountry__idfsCountry_R_1741]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] DROP CONSTRAINT [FK_tlbMonitoringSession_gisCountry__idfsCountry_R_1741];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSession_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] DROP CONSTRAINT [FK_tlbMonitoringSession_gisLocation_idfsLocation];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSession_gisRayon__idfsRayon_R_1743]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] DROP CONSTRAINT [FK_tlbMonitoringSession_gisRayon__idfsRayon_R_1743];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSession_gisRegion__idfsRegion_R_1742]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] DROP CONSTRAINT [FK_tlbMonitoringSession_gisRegion__idfsRegion_R_1742];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSession_gisSettlement__idfsSettlement_R_1744]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] DROP CONSTRAINT [FK_tlbMonitoringSession_gisSettlement__idfsSettlement_R_1744];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSession_idfsMonitoringSessionSpeciesType]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] DROP CONSTRAINT [FK_tlbMonitoringSession_idfsMonitoringSessionSpeciesType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSession_tlbCampaign__idfCampaign_R_1748]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] DROP CONSTRAINT [FK_tlbMonitoringSession_tlbCampaign__idfCampaign_R_1748];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSession_tlbPerson__idfPersonEnteredBy_R_1745]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] DROP CONSTRAINT [FK_tlbMonitoringSession_tlbPerson__idfPersonEnteredBy_R_1745];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSession_trtBaseRef_SessionCategoryID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] DROP CONSTRAINT [FK_tlbMonitoringSession_trtBaseRef_SessionCategoryID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSession_trtBaseReference__idfsMonitoringSessionStatus_R_1740]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] DROP CONSTRAINT [FK_tlbMonitoringSession_trtBaseReference__idfsMonitoringSessionStatus_R_1740];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSession_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] DROP CONSTRAINT [FK_tlbMonitoringSession_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSession_tstSite__idfsSite_R_1746]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] DROP CONSTRAINT [FK_tlbMonitoringSession_tstSite__idfsSite_R_1746];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionAction_tlbMonitoringSession__idfMonitoringSession_R_1833]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionAction] DROP CONSTRAINT [FK_tlbMonitoringSessionAction_tlbMonitoringSession__idfMonitoringSession_R_1833];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionAction_tlbPerson__idfPersonEnteredBy_R_1836]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionAction] DROP CONSTRAINT [FK_tlbMonitoringSessionAction_tlbPerson__idfPersonEnteredBy_R_1836];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionAction_trtBaseReference__idfsMonitoringSessionActionStatus_R_1835]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionAction] DROP CONSTRAINT [FK_tlbMonitoringSessionAction_trtBaseReference__idfsMonitoringSessionActionStatus_R_1835];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionAction_trtBaseReference__idfsMonitoringSessionActionType_R_1834]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionAction] DROP CONSTRAINT [FK_tlbMonitoringSessionAction_trtBaseReference__idfsMonitoringSessionActionType_R_1834];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionAction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionAction] DROP CONSTRAINT [FK_tlbMonitoringSessionAction_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionSummary_tlbFarm__idfFarm]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummary] DROP CONSTRAINT [FK_tlbMonitoringSessionSummary_tlbFarm__idfFarm];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionSummary_tlbMonitoringSession__idfMonitoringSession]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummary] DROP CONSTRAINT [FK_tlbMonitoringSessionSummary_tlbMonitoringSession__idfMonitoringSession];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionSummary_tlbSpecies__idfSpecies]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummary] DROP CONSTRAINT [FK_tlbMonitoringSessionSummary_tlbSpecies__idfSpecies];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionSummary_trtBaseReference__idfsAnimalSex]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummary] DROP CONSTRAINT [FK_tlbMonitoringSessionSummary_trtBaseReference__idfsAnimalSex];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionSummary_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummary] DROP CONSTRAINT [FK_tlbMonitoringSessionSummary_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionSummaryDiagnosis_tlbMonitoringSessionSummary__idfMonitoringSessionSummary]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummaryDiagnosis] DROP CONSTRAINT [FK_tlbMonitoringSessionSummaryDiagnosis_tlbMonitoringSessionSummary__idfMonitoringSessionSummary];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionSummaryDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummaryDiagnosis] DROP CONSTRAINT [FK_tlbMonitoringSessionSummaryDiagnosis_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionSummaryDiagnosis_trtDiagnosis__idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummaryDiagnosis] DROP CONSTRAINT [FK_tlbMonitoringSessionSummaryDiagnosis_trtDiagnosis__idfsDiagnosis];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionSummarySample_tlbMonitoringSessionSummary__idfMonitoringSessionSummary]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummarySample] DROP CONSTRAINT [FK_tlbMonitoringSessionSummarySample_tlbMonitoringSessionSummary__idfMonitoringSessionSummary];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionSummarySample_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummarySample] DROP CONSTRAINT [FK_tlbMonitoringSessionSummarySample_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionSummarySample_trtSampleType__idfsSampleType]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummarySample] DROP CONSTRAINT [FK_tlbMonitoringSessionSummarySample_trtSampleType__idfsSampleType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionToDiagnosis_tlbMonitoringSession__idfMonitoringSession_R_1750]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToDiagnosis] DROP CONSTRAINT [FK_tlbMonitoringSessionToDiagnosis_tlbMonitoringSession__idfMonitoringSession_R_1750];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionToDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToDiagnosis] DROP CONSTRAINT [FK_tlbMonitoringSessionToDiagnosis_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionToDiagnosis_trtDiagnosis__idfsDiagnosis_R_1757]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToDiagnosis] DROP CONSTRAINT [FK_tlbMonitoringSessionToDiagnosis_trtDiagnosis__idfsDiagnosis_R_1757];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionToDiagnosis_trtSampleType__idfsSampleType]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToDiagnosis] DROP CONSTRAINT [FK_tlbMonitoringSessionToDiagnosis_trtSampleType__idfsSampleType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionToDiagnosis_trtSpeciesType__idfsSpeciesType]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToDiagnosis] DROP CONSTRAINT [FK_tlbMonitoringSessionToDiagnosis_trtSpeciesType__idfsSpeciesType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionToMaterial_tlbMaterial]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToMaterial] DROP CONSTRAINT [FK_tlbMonitoringSessionToMaterial_tlbMaterial];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionToMaterial_trtBaseRef_idfsSampleType]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToMaterial] DROP CONSTRAINT [FK_tlbMonitoringSessionToMaterial_trtBaseRef_idfsSampleType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionToMaterial_trtBaseReference]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToMaterial] DROP CONSTRAINT [FK_tlbMonitoringSessionToMaterial_trtBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbMonitoringSessionToMaterial_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToMaterial] DROP CONSTRAINT [FK_tlbMonitoringSessionToMaterial_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbObservation_ffFormTemplate__idfsFormTemplate_R_1405]...';


GO
ALTER TABLE [dbo].[tlbObservation] DROP CONSTRAINT [FK_tlbObservation_ffFormTemplate__idfsFormTemplate_R_1405];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbObservation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbObservation] DROP CONSTRAINT [FK_tlbObservation_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbObservation_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbObservation] DROP CONSTRAINT [FK_tlbObservation_tstSite__idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOffice_BaseRef_]...';


GO
ALTER TABLE [dbo].[tlbOffice] DROP CONSTRAINT [FK_tlbOffice_BaseRef_];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOffice_tlbGeoLocationShared]...';


GO
ALTER TABLE [dbo].[tlbOffice] DROP CONSTRAINT [FK_tlbOffice_tlbGeoLocationShared];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOffice_trtBaseReference__idfsOfficeAbbreviation_R_704]...';


GO
ALTER TABLE [dbo].[tlbOffice] DROP CONSTRAINT [FK_tlbOffice_trtBaseReference__idfsOfficeAbbreviation_R_704];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOffice_trtBaseReference__idfsOfficeName_R_703]...';


GO
ALTER TABLE [dbo].[tlbOffice] DROP CONSTRAINT [FK_tlbOffice_trtBaseReference__idfsOfficeName_R_703];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOffice_trtBaseReference_LegalFormID]...';


GO
ALTER TABLE [dbo].[tlbOffice] DROP CONSTRAINT [FK_tlbOffice_trtBaseReference_LegalFormID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOffice_trtBaseReference_MainFormOfActivityID]...';


GO
ALTER TABLE [dbo].[tlbOffice] DROP CONSTRAINT [FK_tlbOffice_trtBaseReference_MainFormOfActivityID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOffice_trtBaseReference_OwnershipFormID]...';


GO
ALTER TABLE [dbo].[tlbOffice] DROP CONSTRAINT [FK_tlbOffice_trtBaseReference_OwnershipFormID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOffice_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbOffice] DROP CONSTRAINT [FK_tlbOffice_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOffice_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tlbOffice] DROP CONSTRAINT [FK_tlbOffice_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOffice_tstSite__idfsSite_R_1030]...';


GO
ALTER TABLE [dbo].[tlbOffice] DROP CONSTRAINT [FK_tlbOffice_tstSite__idfsSite_R_1030];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreak_BaseRef_OutbreakTypeID]...';


GO
ALTER TABLE [dbo].[tlbOutbreak] DROP CONSTRAINT [FK_tlbOutbreak_BaseRef_OutbreakTypeID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutBreak_idfsLocation_gisLocation]...';


GO
ALTER TABLE [dbo].[tlbOutbreak] DROP CONSTRAINT [FK_tlbOutBreak_idfsLocation_gisLocation];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreak_tlbGeoLocation__idfGeoLocation_R_1469]...';


GO
ALTER TABLE [dbo].[tlbOutbreak] DROP CONSTRAINT [FK_tlbOutbreak_tlbGeoLocation__idfGeoLocation_R_1469];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreak_trtBaseReference__idfsDiagnosisOrDiagnosisGroup]...';


GO
ALTER TABLE [dbo].[tlbOutbreak] DROP CONSTRAINT [FK_tlbOutbreak_trtBaseReference__idfsDiagnosisOrDiagnosisGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreak_trtBaseReference__idfsOutbreakStatus_R_1262]...';


GO
ALTER TABLE [dbo].[tlbOutbreak] DROP CONSTRAINT [FK_tlbOutbreak_trtBaseReference__idfsOutbreakStatus_R_1262];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreak_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbOutbreak] DROP CONSTRAINT [FK_tlbOutbreak_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreak_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbOutbreak] DROP CONSTRAINT [FK_tlbOutbreak_tstSite__idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreakCaseMonitoring_tlbHumanCase__idfHumanCase]...';


GO
ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] DROP CONSTRAINT [FK_tlbOutbreakCaseMonitoring_tlbHumanCase__idfHumanCase];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreakCaseMonitoring_tlbObservation__idfInvestigatedByOffice]...';


GO
ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] DROP CONSTRAINT [FK_tlbOutbreakCaseMonitoring_tlbObservation__idfInvestigatedByOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreakCaseMonitoring_tlbObservation__idfInvestigatedByPerson]...';


GO
ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] DROP CONSTRAINT [FK_tlbOutbreakCaseMonitoring_tlbObservation__idfInvestigatedByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreakCaseMonitoring_tlbObservation__idfObservation]...';


GO
ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] DROP CONSTRAINT [FK_tlbOutbreakCaseMonitoring_tlbObservation__idfObservation];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreakCaseMonitoring_tlbVetCase__idfVetCase]...';


GO
ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] DROP CONSTRAINT [FK_tlbOutbreakCaseMonitoring_tlbVetCase__idfVetCase];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreakCaseMonitoring_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] DROP CONSTRAINT [FK_tlbOutbreakCaseMonitoring_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreakNote_BaseRef_UpdatePriorityID]...';


GO
ALTER TABLE [dbo].[tlbOutbreakNote] DROP CONSTRAINT [FK_tlbOutbreakNote_BaseRef_UpdatePriorityID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreakNote_tlbOutbreak__idfOutbreak]...';


GO
ALTER TABLE [dbo].[tlbOutbreakNote] DROP CONSTRAINT [FK_tlbOutbreakNote_tlbOutbreak__idfOutbreak];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreakNote_tlbPerson__idfPerson]...';


GO
ALTER TABLE [dbo].[tlbOutbreakNote] DROP CONSTRAINT [FK_tlbOutbreakNote_tlbPerson__idfPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOutbreakNote_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbOutbreakNote] DROP CONSTRAINT [FK_tlbOutbreakNote_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPensideTest_tlbMaterial__idfMaterial_R_1664]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] DROP CONSTRAINT [FK_tlbPensideTest_tlbMaterial__idfMaterial_R_1664];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPensideTest_tlbOffice_idfTestedByOffice]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] DROP CONSTRAINT [FK_tlbPensideTest_tlbOffice_idfTestedByOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPensideTest_tlbPerson_idfTestedByPerson]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] DROP CONSTRAINT [FK_tlbPensideTest_tlbPerson_idfTestedByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPensideTest_trtBaseReference__idfsPensideTestCategory]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] DROP CONSTRAINT [FK_tlbPensideTest_trtBaseReference__idfsPensideTestCategory];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPensideTest_trtBaseReference__idfsPensideTestName]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] DROP CONSTRAINT [FK_tlbPensideTest_trtBaseReference__idfsPensideTestName];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPensideTest_trtBaseReference__idfsPensideTestResult_R_1573]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] DROP CONSTRAINT [FK_tlbPensideTest_trtBaseReference__idfsPensideTestResult_R_1573];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPensideTest_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] DROP CONSTRAINT [FK_tlbPensideTest_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPensideTest_trtDiagnosis_idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] DROP CONSTRAINT [FK_tlbPensideTest_trtDiagnosis_idfsDiagnosis];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPerson_tlbDepartment__idfDepartment]...';


GO
ALTER TABLE [dbo].[tlbPerson] DROP CONSTRAINT [FK_tlbPerson_tlbDepartment__idfDepartment];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPerson_tlbEmployee__idfPerson_R_1498]...';


GO
ALTER TABLE [dbo].[tlbPerson] DROP CONSTRAINT [FK_tlbPerson_tlbEmployee__idfPerson_R_1498];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPerson_tlbOffice__idfInstitution_R_1509]...';


GO
ALTER TABLE [dbo].[tlbPerson] DROP CONSTRAINT [FK_tlbPerson_tlbOffice__idfInstitution_R_1509];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPerson_trtBaseReference__idfsStaffPosition_R_1511]...';


GO
ALTER TABLE [dbo].[tlbPerson] DROP CONSTRAINT [FK_tlbPerson_trtBaseReference__idfsStaffPosition_R_1511];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPerson_trtBaseReference_PersonalIDTypeID]...';


GO
ALTER TABLE [dbo].[tlbPerson] DROP CONSTRAINT [FK_tlbPerson_trtBaseReference_PersonalIDTypeID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPerson_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbPerson] DROP CONSTRAINT [FK_tlbPerson_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPostalCode_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tlbPostalCode] DROP CONSTRAINT [FK_tlbPostalCode_gisLocation_idfsLocation];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPostalCode_gisSettlement__idfsSettlement_R_17]...';


GO
ALTER TABLE [dbo].[tlbPostalCode] DROP CONSTRAINT [FK_tlbPostalCode_gisSettlement__idfsSettlement_R_17];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbPostalCode_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbPostalCode] DROP CONSTRAINT [FK_tlbPostalCode_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbReportForm_idfsReportFormType]...';


GO
ALTER TABLE [dbo].[tlbReportForm] DROP CONSTRAINT [FK_tlbReportForm_idfsReportFormType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbReportForm_tlbOffice__idfEnteredByOffice]...';


GO
ALTER TABLE [dbo].[tlbReportForm] DROP CONSTRAINT [FK_tlbReportForm_tlbOffice__idfEnteredByOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbReportForm_tlbOffice__idfSentByOffice]...';


GO
ALTER TABLE [dbo].[tlbReportForm] DROP CONSTRAINT [FK_tlbReportForm_tlbOffice__idfSentByOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbReportForm_tlbPerson__idfEnteredByPerson]...';


GO
ALTER TABLE [dbo].[tlbReportForm] DROP CONSTRAINT [FK_tlbReportForm_tlbPerson__idfEnteredByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbReportForm_tlbPerson__idfSentByPerson]...';


GO
ALTER TABLE [dbo].[tlbReportForm] DROP CONSTRAINT [FK_tlbReportForm_tlbPerson__idfSentByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbReportForm_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tlbReportForm] DROP CONSTRAINT [FK_tlbReportForm_tstSite_idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbSpecies_OutbreakCaseStatus]...';


GO
ALTER TABLE [dbo].[tlbSpecies] DROP CONSTRAINT [FK_tlbSpecies_OutbreakCaseStatus];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbSpecies_tlbHerd__idfHerd_R_1479]...';


GO
ALTER TABLE [dbo].[tlbSpecies] DROP CONSTRAINT [FK_tlbSpecies_tlbHerd__idfHerd_R_1479];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbSpecies_tlbObservation__idfObservation_R_1474]...';


GO
ALTER TABLE [dbo].[tlbSpecies] DROP CONSTRAINT [FK_tlbSpecies_tlbObservation__idfObservation_R_1474];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbSpecies_tlbSpeciesActual]...';


GO
ALTER TABLE [dbo].[tlbSpecies] DROP CONSTRAINT [FK_tlbSpecies_tlbSpeciesActual];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbSpecies_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbSpecies] DROP CONSTRAINT [FK_tlbSpecies_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbSpecies_trtSpeciesType__idfsSpeciesType_R_1651]...';


GO
ALTER TABLE [dbo].[tlbSpecies] DROP CONSTRAINT [FK_tlbSpecies_trtSpeciesType__idfsSpeciesType_R_1651];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbSpeciesActual_tlbHerdActual__idfHerdActual_R_1479]...';


GO
ALTER TABLE [dbo].[tlbSpeciesActual] DROP CONSTRAINT [FK_tlbSpeciesActual_tlbHerdActual__idfHerdActual_R_1479];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbSpeciesActual_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbSpeciesActual] DROP CONSTRAINT [FK_tlbSpeciesActual_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbSpeciesActual_trtSpeciesType__idfsSpeciesType_R_1651]...';


GO
ALTER TABLE [dbo].[tlbSpeciesActual] DROP CONSTRAINT [FK_tlbSpeciesActual_trtSpeciesType__idfsSpeciesType_R_1651];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbStatistic_gisBaseReference__idfsArea_R_1641]...';


GO
ALTER TABLE [dbo].[tlbStatistic] DROP CONSTRAINT [FK_tlbStatistic_gisBaseReference__idfsArea_R_1641];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbStatistic_trtBaseReference__idfsMainBaseReference_R_923]...';


GO
ALTER TABLE [dbo].[tlbStatistic] DROP CONSTRAINT [FK_tlbStatistic_trtBaseReference__idfsMainBaseReference_R_923];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbStatistic_trtBaseReference__idfsStatisticAreaType_R_1273]...';


GO
ALTER TABLE [dbo].[tlbStatistic] DROP CONSTRAINT [FK_tlbStatistic_trtBaseReference__idfsStatisticAreaType_R_1273];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbStatistic_trtBaseReference__idfsStatisticPeriodType_R_1272]...';


GO
ALTER TABLE [dbo].[tlbStatistic] DROP CONSTRAINT [FK_tlbStatistic_trtBaseReference__idfsStatisticPeriodType_R_1272];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbStatistic_trtBaseReference_idfsStatisticalAgeGroup]...';


GO
ALTER TABLE [dbo].[tlbStatistic] DROP CONSTRAINT [FK_tlbStatistic_trtBaseReference_idfsStatisticalAgeGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbStatistic_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbStatistic] DROP CONSTRAINT [FK_tlbStatistic_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbStatistic_trtStatisticDataType__idfsStatisticDataType_R_921]...';


GO
ALTER TABLE [dbo].[tlbStatistic] DROP CONSTRAINT [FK_tlbStatistic_trtStatisticDataType__idfsStatisticDataType_R_921];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbStreet_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tlbStreet] DROP CONSTRAINT [FK_tlbStreet_gisLocation_idfsLocation];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbStreet_gisSettlement__idfsSettlement_R_16]...';


GO
ALTER TABLE [dbo].[tlbStreet] DROP CONSTRAINT [FK_tlbStreet_gisSettlement__idfsSettlement_R_16];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbStreet_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbStreet] DROP CONSTRAINT [FK_tlbStreet_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTestAmendmentHistory_tlbOffice__idfAmendByOffice]...';


GO
ALTER TABLE [dbo].[tlbTestAmendmentHistory] DROP CONSTRAINT [FK_tlbTestAmendmentHistory_tlbOffice__idfAmendByOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTestAmendmentHistory_tlbPerson__idfAmendByPerson]...';


GO
ALTER TABLE [dbo].[tlbTestAmendmentHistory] DROP CONSTRAINT [FK_tlbTestAmendmentHistory_tlbPerson__idfAmendByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTestAmendmentHistory_tlbTesting__idfTesting]...';


GO
ALTER TABLE [dbo].[tlbTestAmendmentHistory] DROP CONSTRAINT [FK_tlbTestAmendmentHistory_tlbTesting__idfTesting];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTestAmendmentHistory_trtBaseReference__idfsNewTestResult]...';


GO
ALTER TABLE [dbo].[tlbTestAmendmentHistory] DROP CONSTRAINT [FK_tlbTestAmendmentHistory_trtBaseReference__idfsNewTestResult];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTestAmendmentHistory_trtBaseReference__idfsOldTestResult]...';


GO
ALTER TABLE [dbo].[tlbTestAmendmentHistory] DROP CONSTRAINT [FK_tlbTestAmendmentHistory_trtBaseReference__idfsOldTestResult];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTestAmendmentHistory_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbTestAmendmentHistory] DROP CONSTRAINT [FK_tlbTestAmendmentHistory_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_tlbBatchTest__idfBatchTest_R_1534]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_tlbBatchTest__idfBatchTest_R_1534];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_tlbHumanCase]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_tlbHumanCase];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_tlbMaterial]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_tlbMaterial];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_tlbMonitoringSession]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_tlbMonitoringSession];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_tlbOffice__idfPerformedByOffice]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_tlbOffice__idfPerformedByOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_tlbOffice__idfResultEnteredByOffice]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_tlbOffice__idfResultEnteredByOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_tlbOffice__idfTestedByOffice]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_tlbOffice__idfTestedByOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_tlbOffice__idfValidatedByOffice]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_tlbOffice__idfValidatedByOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_tlbPerson__idfResultEnteredByPerson]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_tlbPerson__idfResultEnteredByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_tlbPerson__idfTestedByPerson]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_tlbPerson__idfTestedByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_tlbPerson__idfValidatedByPerson]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_tlbPerson__idfValidatedByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_tlbVector]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_tlbVector];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_tlbVetCase]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_tlbVetCase];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_trtBaseReference__idfsTestCategory]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_trtBaseReference__idfsTestCategory];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_trtBaseReference__idfsTestName]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_trtBaseReference__idfsTestName];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_trtBaseReference__idfsTestResult_R_1243]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_trtBaseReference__idfsTestResult_R_1243];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_trtBaseReference__idfsTestStatus_R_1754]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_trtBaseReference__idfsTestStatus_R_1754];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_trtBaseReference_PreviousTestStatusID]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_trtBaseReference_PreviousTestStatusID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTesting_trtDiagnosis]...';


GO
ALTER TABLE [dbo].[tlbTesting] DROP CONSTRAINT [FK_tlbTesting_trtDiagnosis];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTestValidation_tlbOffice__idfInterpretedByOffice_R_1550]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] DROP CONSTRAINT [FK_tlbTestValidation_tlbOffice__idfInterpretedByOffice_R_1550];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTestValidation_tlbOffice__idfValidatedByOffice_R_1548]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] DROP CONSTRAINT [FK_tlbTestValidation_tlbOffice__idfValidatedByOffice_R_1548];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTestValidation_tlbPerson__idfInterpretedByPerson_R_1551]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] DROP CONSTRAINT [FK_tlbTestValidation_tlbPerson__idfInterpretedByPerson_R_1551];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTestValidation_tlbPerson__idfValidatedByPerson_R_1549]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] DROP CONSTRAINT [FK_tlbTestValidation_tlbPerson__idfValidatedByPerson_R_1549];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTestValidation_tlbTesting__idfTesting_R_1546]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] DROP CONSTRAINT [FK_tlbTestValidation_tlbTesting__idfTesting_R_1546];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTestValidation_trtBaseReference__idfsInterpretedStatus_R_1552]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] DROP CONSTRAINT [FK_tlbTestValidation_trtBaseReference__idfsInterpretedStatus_R_1552];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTestValidation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] DROP CONSTRAINT [FK_tlbTestValidation_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTestValidation_trtDiagnosis__idfsDiagnosis_R_1547]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] DROP CONSTRAINT [FK_tlbTestValidation_trtDiagnosis__idfsDiagnosis_R_1547];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTransferOUT_tlbOffice__idfSendFromOffice_R_1516]...';


GO
ALTER TABLE [dbo].[tlbTransferOUT] DROP CONSTRAINT [FK_tlbTransferOUT_tlbOffice__idfSendFromOffice_R_1516];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTransferOUT_tlbOffice__idfSendToOffice_R_1517]...';


GO
ALTER TABLE [dbo].[tlbTransferOUT] DROP CONSTRAINT [FK_tlbTransferOUT_tlbOffice__idfSendToOffice_R_1517];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTransferOUT_tlbPerson__idfSendByPerson_R_1518]...';


GO
ALTER TABLE [dbo].[tlbTransferOUT] DROP CONSTRAINT [FK_tlbTransferOUT_tlbPerson__idfSendByPerson_R_1518];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTransferOUT_trtBaseReference__idfsTransferStatus_R_1671]...';


GO
ALTER TABLE [dbo].[tlbTransferOUT] DROP CONSTRAINT [FK_tlbTransferOUT_trtBaseReference__idfsTransferStatus_R_1671];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTransferOUT_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbTransferOUT] DROP CONSTRAINT [FK_tlbTransferOUT_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTransferOUT_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbTransferOUT] DROP CONSTRAINT [FK_tlbTransferOUT_tstSite__idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTransferOutMaterial_tlbMaterial]...';


GO
ALTER TABLE [dbo].[tlbTransferOutMaterial] DROP CONSTRAINT [FK_tlbTransferOutMaterial_tlbMaterial];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTransferOutMaterial_tlbTransferOUT]...';


GO
ALTER TABLE [dbo].[tlbTransferOutMaterial] DROP CONSTRAINT [FK_tlbTransferOutMaterial_tlbTransferOUT];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbTransferOutMaterial_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbTransferOutMaterial] DROP CONSTRAINT [FK_tlbTransferOutMaterial_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVaccination_tlbSpecies__idfSpecies_R_1654]...';


GO
ALTER TABLE [dbo].[tlbVaccination] DROP CONSTRAINT [FK_tlbVaccination_tlbSpecies__idfSpecies_R_1654];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVaccination_tlbVetCase__idfVetCase_R_1482]...';


GO
ALTER TABLE [dbo].[tlbVaccination] DROP CONSTRAINT [FK_tlbVaccination_tlbVetCase__idfVetCase_R_1482];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVaccination_trtBaseReference__idfsVaccinationRoute_R_1302]...';


GO
ALTER TABLE [dbo].[tlbVaccination] DROP CONSTRAINT [FK_tlbVaccination_trtBaseReference__idfsVaccinationRoute_R_1302];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVaccination_trtBaseReference__idfsVaccinationType_R_1301]...';


GO
ALTER TABLE [dbo].[tlbVaccination] DROP CONSTRAINT [FK_tlbVaccination_trtBaseReference__idfsVaccinationType_R_1301];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVaccination_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVaccination] DROP CONSTRAINT [FK_tlbVaccination_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVaccination_trtDiagnosis__idfsDiagnosis_R_983]...';


GO
ALTER TABLE [dbo].[tlbVaccination] DROP CONSTRAINT [FK_tlbVaccination_trtDiagnosis__idfsDiagnosis_R_983];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_tlbGeoLocation_idfLocation]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_tlbGeoLocation_idfLocation];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_tlbObservation_idfObservation]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_tlbObservation_idfObservation];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_tlbOffice_idfCollectedByOffice]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_tlbOffice_idfCollectedByOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_tlbOffice_idfIdentifiedByOffice]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_tlbOffice_idfIdentifiedByOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_tlbPerson_idfCollectedByPerson]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_tlbPerson_idfCollectedByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_tlbPerson_idfIdentifiedByPerson]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_tlbPerson_idfIdentifiedByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_tlbVector_idfHostVector]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_tlbVector_idfHostVector];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_tlbVectorSurveillanceSession_idfVectorSurveillanceSession]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_tlbVectorSurveillanceSession_idfVectorSurveillanceSession];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_trtBaseReference__idfsEctoparasitesCollected]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_trtBaseReference__idfsEctoparasitesCollected];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_trtBaseReference_idfsBasisOfREcord]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_trtBaseReference_idfsBasisOfREcord];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_trtBaseReference_idfsCollectionMethod]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_trtBaseReference_idfsCollectionMethod];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_trtBaseReference_idfsDayPeriod]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_trtBaseReference_idfsDayPeriod];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_trtBaseReference_idfsIdentificationMethod]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_trtBaseReference_idfsIdentificationMethod];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_trtBaseReference_idfsSex]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_trtBaseReference_idfsSex];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_trtBaseReference_idfsSurrounding]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_trtBaseReference_idfsSurrounding];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_trtVectorSubType_idfsVectorSubType]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_trtVectorSubType_idfsVectorSubType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVector_trtVectorType_idfsVectorType]...';


GO
ALTER TABLE [dbo].[tlbVector] DROP CONSTRAINT [FK_tlbVector_trtVectorType_idfsVectorType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVectorSurveillanceSession_tlbGeoLocation_idfLocation]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSession] DROP CONSTRAINT [FK_tlbVectorSurveillanceSession_tlbGeoLocation_idfLocation];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVectorSurveillanceSession_tlbOutbreak_idfOutbreak]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSession] DROP CONSTRAINT [FK_tlbVectorSurveillanceSession_tlbOutbreak_idfOutbreak];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVectorSurveillanceSession_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSession] DROP CONSTRAINT [FK_tlbVectorSurveillanceSession_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVectorSurveillanceSession_trtBaseReference_VectorSurveillanceStatus]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSession] DROP CONSTRAINT [FK_tlbVectorSurveillanceSession_trtBaseReference_VectorSurveillanceStatus];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVectorSurveillanceSession_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSession] DROP CONSTRAINT [FK_tlbVectorSurveillanceSession_tstSite_idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVectorSurveillanceSessionSummary_tlbGeoLocation__idfGeoLocation]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummary] DROP CONSTRAINT [FK_tlbVectorSurveillanceSessionSummary_tlbGeoLocation__idfGeoLocation];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVectorSurveillanceSessionSummary_tlbVectorSurveillanceSession__idfVectorSurveillanceSession]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummary] DROP CONSTRAINT [FK_tlbVectorSurveillanceSessionSummary_tlbVectorSurveillanceSession__idfVectorSurveillanceSession];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVectorSurveillanceSessionSummary_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummary] DROP CONSTRAINT [FK_tlbVectorSurveillanceSessionSummary_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVectorSurveillanceSessionSummary_trtVectorSubType__idfsVectorSubType]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummary] DROP CONSTRAINT [FK_tlbVectorSurveillanceSessionSummary_trtVectorSubType__idfsVectorSubType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVectorSurveillanceSessionSummaryDiagnosis_tlbVectorSurveillanceSessionSummary__idfsVSSessionSummary]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummaryDiagnosis] DROP CONSTRAINT [FK_tlbVectorSurveillanceSessionSummaryDiagnosis_tlbVectorSurveillanceSessionSummary__idfsVSSessionSummary];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVectorSurveillanceSessionSummaryDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummaryDiagnosis] DROP CONSTRAINT [FK_tlbVectorSurveillanceSessionSummaryDiagnosis_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVectorSurveillanceSessionSummaryDiagnosis_trtDiagnosis__idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummaryDiagnosis] DROP CONSTRAINT [FK_tlbVectorSurveillanceSessionSummaryDiagnosis_trtDiagnosis__idfsDiagnosis];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_tlbFarm]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_tlbFarm];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_tlbMonitoringSession__idfParentMonitoringSession]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_tlbMonitoringSession__idfParentMonitoringSession];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_tlbObservation__idfObservation_R_1447]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_tlbObservation__idfObservation_R_1447];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_tlbOffice__idfInvestigatedByOffice]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_tlbOffice__idfInvestigatedByOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_tlbOffice__idfReportedByOffice]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_tlbOffice__idfReportedByOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_tlbOffice_idfReceivedByOffice]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_tlbOffice_idfReceivedByOffice];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_tlbOutbreak__idfOutbreak]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_tlbOutbreak__idfOutbreak];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_tlbPerson__idfPersonEnteredBy_R_1507]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_tlbPerson__idfPersonEnteredBy_R_1507];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_tlbPerson__idfPersonInvestigatedBy_R_1506]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_tlbPerson__idfPersonInvestigatedBy_R_1506];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_tlbPerson__idfPersonReportedBy_R_1508]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_tlbPerson__idfPersonReportedBy_R_1508];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_tlbPerson_idfReceivedByPerson]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_tlbPerson_idfReceivedByPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_trtBaseReference__idfsCaseClassification]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_trtBaseReference__idfsCaseClassification];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_trtBaseReference__idfsCaseProgressStatus]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_trtBaseReference__idfsCaseProgressStatus];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_trtBaseReference__idfsCaseReportType]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_trtBaseReference__idfsCaseReportType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_trtBaseReference__idfsCaseType]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_trtBaseReference__idfsCaseType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_trtBaseReference__idfsYNTestsConducted]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_trtBaseReference__idfsYNTestsConducted];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_trtDiagnosis__idfsFinalDiagnosis_R_1438]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_trtDiagnosis__idfsFinalDiagnosis_R_1438];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_trtDiagnosis__idfsShowDiagnosis]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_trtDiagnosis__idfsShowDiagnosis];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_trtDiagnosis__idfsTentativeDiagnosis_R_1435]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_trtDiagnosis__idfsTentativeDiagnosis_R_1435];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_trtDiagnosis__idfsTentativeDiagnosis1_R_1436]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_trtDiagnosis__idfsTentativeDiagnosis1_R_1436];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_trtDiagnosis__idfsTentativeDiagnosis2_R_1437]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_trtDiagnosis__idfsTentativeDiagnosis2_R_1437];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCase_tstSite__idfsSite_R_1588]...';


GO
ALTER TABLE [dbo].[tlbVetCase] DROP CONSTRAINT [FK_tlbVetCase_tstSite__idfsSite_R_1588];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCaseDisplayDiagnosis_tlbVetCase_idfVetCase]...';


GO
ALTER TABLE [dbo].[tlbVetCaseDisplayDiagnosis] DROP CONSTRAINT [FK_tlbVetCaseDisplayDiagnosis_tlbVetCase_idfVetCase];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCaseDisplayDiagnosis_trtBaseReference_idfsLanguage]...';


GO
ALTER TABLE [dbo].[tlbVetCaseDisplayDiagnosis] DROP CONSTRAINT [FK_tlbVetCaseDisplayDiagnosis_trtBaseReference_idfsLanguage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCaseDisplayDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVetCaseDisplayDiagnosis] DROP CONSTRAINT [FK_tlbVetCaseDisplayDiagnosis_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCaseLog_tlbPerson__idfPerson_R_1501]...';


GO
ALTER TABLE [dbo].[tlbVetCaseLog] DROP CONSTRAINT [FK_tlbVetCaseLog_tlbPerson__idfPerson_R_1501];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCaseLog_tlbVetCase__idfVetCase_R_1489]...';


GO
ALTER TABLE [dbo].[tlbVetCaseLog] DROP CONSTRAINT [FK_tlbVetCaseLog_tlbVetCase__idfVetCase_R_1489];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCaseLog_trtBaseReference__idfsCaseLogStatus_R_1490]...';


GO
ALTER TABLE [dbo].[tlbVetCaseLog] DROP CONSTRAINT [FK_tlbVetCaseLog_trtBaseReference__idfsCaseLogStatus_R_1490];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbVetCaseLog_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVetCaseLog] DROP CONSTRAINT [FK_tlbVetCaseLog_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbxSiteDocumentMap_LkupEIDSSMenu]...';


GO
ALTER TABLE [dbo].[tlbxSiteDocumentMap] DROP CONSTRAINT [FK_tlbxSiteDocumentMap_LkupEIDSSMenu];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtAttributeType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtAttributeType] DROP CONSTRAINT [FK_trtAttributeType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtBaseReference_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtBaseReference] DROP CONSTRAINT [FK_trtBaseReference_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtBaseReference_trtReferenceType__idfsReferenceType_R_381]...';


GO
ALTER TABLE [dbo].[trtBaseReference] DROP CONSTRAINT [FK_trtBaseReference_trtReferenceType__idfsReferenceType_R_381];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtBaseReferenceAttribute_trtAttributeType__idfAttributeType]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceAttribute] DROP CONSTRAINT [FK_trtBaseReferenceAttribute_trtAttributeType__idfAttributeType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtBaseReferenceAttribute_trtBaseReference__idfsBaseReference]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceAttribute] DROP CONSTRAINT [FK_trtBaseReferenceAttribute_trtBaseReference__idfsBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtBaseReferenceAttribute_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceAttribute] DROP CONSTRAINT [FK_trtBaseReferenceAttribute_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtBaseReferenceAttributeToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceAttributeToCP] DROP CONSTRAINT [FK_trtBaseReferenceAttributeToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtBaseReferenceAttributeToCP_trtBaseReferenceAttribute__idfsBaseReference]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceAttributeToCP] DROP CONSTRAINT [FK_trtBaseReferenceAttributeToCP_trtBaseReferenceAttribute__idfsBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtBaseReferenceAttributeToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceAttributeToCP] DROP CONSTRAINT [FK_trtBaseReferenceAttributeToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtBaseReferenceToCP_trtBaseReference__idfsBaseReference]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceToCP] DROP CONSTRAINT [FK_trtBaseReferenceToCP_trtBaseReference__idfsBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtBaseReferenceToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceToCP] DROP CONSTRAINT [FK_trtBaseReferenceToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtBaseReferenceToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceToCP] DROP CONSTRAINT [FK_trtBaseReferenceToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtBssAggregateColumns_tauColumn__idfColumn]...';


GO
ALTER TABLE [dbo].[trtBssAggregateColumns] DROP CONSTRAINT [FK_trtBssAggregateColumns_tauColumn__idfColumn];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtBssAggregateColumns_trtBaseReference__idfsBssAggregateColumn]...';


GO
ALTER TABLE [dbo].[trtBssAggregateColumns] DROP CONSTRAINT [FK_trtBssAggregateColumns_trtBaseReference__idfsBssAggregateColumn];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtBssAggregateColumns_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtBssAggregateColumns] DROP CONSTRAINT [FK_trtBssAggregateColumns_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtCaseClassification_trtBaseReference__idfsCaseClassification]...';


GO
ALTER TABLE [dbo].[trtCaseClassification] DROP CONSTRAINT [FK_trtCaseClassification_trtBaseReference__idfsCaseClassification];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtCaseClassification_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtCaseClassification] DROP CONSTRAINT [FK_trtCaseClassification_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtCollectionMethodForVectorType_trtBaseReference_idfsCollectionMethod]...';


GO
ALTER TABLE [dbo].[trtCollectionMethodForVectorType] DROP CONSTRAINT [FK_trtCollectionMethodForVectorType_trtBaseReference_idfsCollectionMethod];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtCollectionMethodForVectorType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtCollectionMethodForVectorType] DROP CONSTRAINT [FK_trtCollectionMethodForVectorType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtCollectionMethodForVectorType_trtVectorType_idfsVectorType]...';


GO
ALTER TABLE [dbo].[trtCollectionMethodForVectorType] DROP CONSTRAINT [FK_trtCollectionMethodForVectorType_trtVectorType_idfsVectorType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtCollectionMethodForVectorTypeToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtCollectionMethodForVectorTypeToCP] DROP CONSTRAINT [FK_trtCollectionMethodForVectorTypeToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtCollectionMethodForVectorTypeToCP_trtCollectionMethodForVectorType_idfCollectionMethodForVectorType]...';


GO
ALTER TABLE [dbo].[trtCollectionMethodForVectorTypeToCP] DROP CONSTRAINT [FK_trtCollectionMethodForVectorTypeToCP_trtCollectionMethodForVectorType_idfCollectionMethodForVectorType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtCollectionMethodForVectorTypeToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtCollectionMethodForVectorTypeToCP] DROP CONSTRAINT [FK_trtCollectionMethodForVectorTypeToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDerivativeForSampleType_trtBaseReference__idfsDerivativeType_R_1863]...';


GO
ALTER TABLE [dbo].[trtDerivativeForSampleType] DROP CONSTRAINT [FK_trtDerivativeForSampleType_trtBaseReference__idfsDerivativeType_R_1863];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDerivativeForSampleType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDerivativeForSampleType] DROP CONSTRAINT [FK_trtDerivativeForSampleType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDerivativeForSampleType_trtSampleType__idfsSampleType_R_1862]...';


GO
ALTER TABLE [dbo].[trtDerivativeForSampleType] DROP CONSTRAINT [FK_trtDerivativeForSampleType_trtSampleType__idfsSampleType_R_1862];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDerivativeForSampleTypeToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDerivativeForSampleTypeToCP] DROP CONSTRAINT [FK_trtDerivativeForSampleTypeToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDerivativeForSampleTypeToCP_trtDerivativeForSampleType__idfDerivativeForSampleType]...';


GO
ALTER TABLE [dbo].[trtDerivativeForSampleTypeToCP] DROP CONSTRAINT [FK_trtDerivativeForSampleTypeToCP_trtDerivativeForSampleType__idfDerivativeForSampleType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDerivativeForSampleTypeToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtDerivativeForSampleTypeToCP] DROP CONSTRAINT [FK_trtDerivativeForSampleTypeToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosis_trtBaseReference__idfsDiagnosis_R_624]...';


GO
ALTER TABLE [dbo].[trtDiagnosis] DROP CONSTRAINT [FK_trtDiagnosis_trtBaseReference__idfsDiagnosis_R_624];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosis_trtBaseReference__idfsUsingType_R_1600]...';


GO
ALTER TABLE [dbo].[trtDiagnosis] DROP CONSTRAINT [FK_trtDiagnosis_trtBaseReference__idfsUsingType_R_1600];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosis] DROP CONSTRAINT [FK_trtDiagnosis_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisAgeGroup_trtBaseReference_idfsAgeType]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroup] DROP CONSTRAINT [FK_trtDiagnosisAgeGroup_trtBaseReference_idfsAgeType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisAgeGroup_trtBaseReference_idfsDiagnosisAgeGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroup] DROP CONSTRAINT [FK_trtDiagnosisAgeGroup_trtBaseReference_idfsDiagnosisAgeGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisAgeGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroup] DROP CONSTRAINT [FK_trtDiagnosisAgeGroup_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosis] DROP CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosis_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToDiagnosis_trtDiagnosis_idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosis] DROP CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosis_trtDiagnosis_idfsDiagnosis];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToDiagnosis_trtDiagnosisAgeGroup_idfsDiagnosisAgeGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosis] DROP CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosis_trtDiagnosisAgeGroup_idfsDiagnosisAgeGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToDiagnosisToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosisToCP] DROP CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosisToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToDiagnosisToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosisToCP] DROP CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosisToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToDiagnosisToCP_tstPersonalDataGroup_idfDiagnosisAgeGroupToDiagnosis]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosisToCP] DROP CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosisToCP_tstPersonalDataGroup_idfDiagnosisAgeGroupToDiagnosis];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToStatisticalAgeGroup_trtBaseReference_idfsStatisticalAgeGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroup] DROP CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroup_trtBaseReference_idfsStatisticalAgeGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToStatisticalAgeGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroup] DROP CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroup_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToStatisticalAgeGroup_trtDiagnosisAgeGroup_idfsDiagnosisAgeGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroup] DROP CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroup_trtDiagnosisAgeGroup_idfsDiagnosisAgeGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroupToCP] DROP CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_trtDiagnosisAgeGroupToStatisticalAgeGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroupToCP] DROP CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_trtDiagnosisAgeGroupToStatisticalAgeGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroupToCP] DROP CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisToDiagnosisGroup_trtBaseReference__idfsDiagnosisGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroup] DROP CONSTRAINT [FK_trtDiagnosisToDiagnosisGroup_trtBaseReference__idfsDiagnosisGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisToDiagnosisGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroup] DROP CONSTRAINT [FK_trtDiagnosisToDiagnosisGroup_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisToDiagnosisGroup_trtDiagnosis__idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroup] DROP CONSTRAINT [FK_trtDiagnosisToDiagnosisGroup_trtDiagnosis__idfsDiagnosis];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisToDiagnosisGroupToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroupToCP] DROP CONSTRAINT [FK_trtDiagnosisToDiagnosisGroupToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisToDiagnosisGroupToCP_trtDiagnosisToDiagnosisGroup_idfDiagnosisToDiagnosisGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroupToCP] DROP CONSTRAINT [FK_trtDiagnosisToDiagnosisGroupToCP_trtDiagnosisToDiagnosisGroup_idfDiagnosisToDiagnosisGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisToDiagnosisGroupToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroupToCP] DROP CONSTRAINT [FK_trtDiagnosisToDiagnosisGroupToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisToGroupForReportType_trtBaseReference__idfsCustomReportType_R_1871]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToGroupForReportType] DROP CONSTRAINT [FK_trtDiagnosisToGroupForReportType_trtBaseReference__idfsCustomReportType_R_1871];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisToGroupForReportType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToGroupForReportType] DROP CONSTRAINT [FK_trtDiagnosisToGroupForReportType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisToGroupForReportType_trtDiagnosis__idfsDiagnosis_R_1873]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToGroupForReportType] DROP CONSTRAINT [FK_trtDiagnosisToGroupForReportType_trtDiagnosis__idfsDiagnosis_R_1873];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtDiagnosisToGroupForReportType_trtReportDiagnosisGroup__idfsReportDiagnosisGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToGroupForReportType] DROP CONSTRAINT [FK_trtDiagnosisToGroupForReportType_trtReportDiagnosisGroup__idfsReportDiagnosisGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtEventType_trtBaseReference__idfsEventSubscription]...';


GO
ALTER TABLE [dbo].[trtEventType] DROP CONSTRAINT [FK_trtEventType_trtBaseReference__idfsEventSubscription];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtEventType_trtBaseReference__idfsEventTypeID_R_663]...';


GO
ALTER TABLE [dbo].[trtEventType] DROP CONSTRAINT [FK_trtEventType_trtBaseReference__idfsEventTypeID_R_663];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtEventType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtEventType] DROP CONSTRAINT [FK_trtEventType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtFFObjectForCustomReport_trtBaseReference]...';


GO
ALTER TABLE [dbo].[trtFFObjectForCustomReport] DROP CONSTRAINT [FK_trtFFObjectForCustomReport_trtBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtFFObjectForCustomReport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtFFObjectForCustomReport] DROP CONSTRAINT [FK_trtFFObjectForCustomReport_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtFFObjectToDiagnosisForCustomReport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtFFObjectToDiagnosisForCustomReport] DROP CONSTRAINT [FK_trtFFObjectToDiagnosisForCustomReport_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtFFObjectToDiagnosisForCustomReport_trtDiagnosis]...';


GO
ALTER TABLE [dbo].[trtFFObjectToDiagnosisForCustomReport] DROP CONSTRAINT [FK_trtFFObjectToDiagnosisForCustomReport_trtDiagnosis];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtFFParameterToDiagnosisForCustomReport_trtFFParameterForCustomReport]...';


GO
ALTER TABLE [dbo].[trtFFObjectToDiagnosisForCustomReport] DROP CONSTRAINT [FK_trtFFParameterToDiagnosisForCustomReport_trtFFParameterForCustomReport];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtGISBaseReferenceAttribute_gisBaseReference__idfsGISBaseReference]...';


GO
ALTER TABLE [dbo].[trtGISBaseReferenceAttribute] DROP CONSTRAINT [FK_trtGISBaseReferenceAttribute_gisBaseReference__idfsGISBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtGISBaseReferenceAttribute_trtAttributeType__idfAttributeType]...';


GO
ALTER TABLE [dbo].[trtGISBaseReferenceAttribute] DROP CONSTRAINT [FK_trtGISBaseReferenceAttribute_trtAttributeType__idfAttributeType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtGISBaseReferenceAttribute_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtGISBaseReferenceAttribute] DROP CONSTRAINT [FK_trtGISBaseReferenceAttribute_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtGISObjectForCustomReport_gisBaseReference__idfsGISBaseReference]...';


GO
ALTER TABLE [dbo].[trtGISObjectForCustomReport] DROP CONSTRAINT [FK_trtGISObjectForCustomReport_gisBaseReference__idfsGISBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtGISObjectForCustomReport_trtBaseReference__idfsCustomReportType]...';


GO
ALTER TABLE [dbo].[trtGISObjectForCustomReport] DROP CONSTRAINT [FK_trtGISObjectForCustomReport_trtBaseReference__idfsCustomReportType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtGISObjectForCustomReport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtGISObjectForCustomReport] DROP CONSTRAINT [FK_trtGISObjectForCustomReport_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtHACodeList_trtBaseReference__idfsCodeName_R_674]...';


GO
ALTER TABLE [dbo].[trtHACodeList] DROP CONSTRAINT [FK_trtHACodeList_trtBaseReference__idfsCodeName_R_674];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtHACodeList_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtHACodeList] DROP CONSTRAINT [FK_trtHACodeList_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtLanguageToCP_trtBaseReference__idfsLanguage_idfsBaseReference]...';


GO
ALTER TABLE [dbo].[trtLanguageToCP] DROP CONSTRAINT [FK_trtLanguageToCP_trtBaseReference__idfsLanguage_idfsBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtLanguageToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtLanguageToCP] DROP CONSTRAINT [FK_trtLanguageToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtLanguageToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtLanguageToCP] DROP CONSTRAINT [FK_trtLanguageToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtMaterialForDisease_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtMaterialForDisease] DROP CONSTRAINT [FK_trtMaterialForDisease_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtMaterialForDisease_trtDiagnosis__idfsDiagnosis_R_891]...';


GO
ALTER TABLE [dbo].[trtMaterialForDisease] DROP CONSTRAINT [FK_trtMaterialForDisease_trtDiagnosis__idfsDiagnosis_R_891];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtMaterialForDisease_trtSampleType__idfsSampleType]...';


GO
ALTER TABLE [dbo].[trtMaterialForDisease] DROP CONSTRAINT [FK_trtMaterialForDisease_trtSampleType__idfsSampleType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtMaterialForDiseaseToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtMaterialForDiseaseToCP] DROP CONSTRAINT [FK_trtMaterialForDiseaseToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtMaterialForDiseaseToCP_trtMaterialForDisease__idfMaterialForDisease_R_1876]...';


GO
ALTER TABLE [dbo].[trtMaterialForDiseaseToCP] DROP CONSTRAINT [FK_trtMaterialForDiseaseToCP_trtMaterialForDisease__idfMaterialForDisease_R_1876];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtMaterialForDiseaseToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtMaterialForDiseaseToCP] DROP CONSTRAINT [FK_trtMaterialForDiseaseToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtMatrixColumn_trtBaseReference__idfsEditor]...';


GO
ALTER TABLE [dbo].[trtMatrixColumn] DROP CONSTRAINT [FK_trtMatrixColumn_trtBaseReference__idfsEditor];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtMatrixColumn_trtBaseReference__idfsMatrixColumn]...';


GO
ALTER TABLE [dbo].[trtMatrixColumn] DROP CONSTRAINT [FK_trtMatrixColumn_trtBaseReference__idfsMatrixColumn];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtMatrixColumn_trtBaseReference__idfsParameterType]...';


GO
ALTER TABLE [dbo].[trtMatrixColumn] DROP CONSTRAINT [FK_trtMatrixColumn_trtBaseReference__idfsParameterType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtMatrixColumn_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtMatrixColumn] DROP CONSTRAINT [FK_trtMatrixColumn_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtMatrixColumn_trtMatrixType__idfsMatrixType]...';


GO
ALTER TABLE [dbo].[trtMatrixColumn] DROP CONSTRAINT [FK_trtMatrixColumn_trtMatrixType__idfsMatrixType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtMatrixType_trtBaseReference__idfsFormType]...';


GO
ALTER TABLE [dbo].[trtMatrixType] DROP CONSTRAINT [FK_trtMatrixType_trtBaseReference__idfsFormType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtMatrixType_trtBaseReference__idfsMatrixType]...';


GO
ALTER TABLE [dbo].[trtMatrixType] DROP CONSTRAINT [FK_trtMatrixType_trtBaseReference__idfsMatrixType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtMatrixType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtMatrixType] DROP CONSTRAINT [FK_trtMatrixType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtObjectTypeToObjectOperation_trtBaseReference__idfsObjectOperation_R_1620]...';


GO
ALTER TABLE [dbo].[trtObjectTypeToObjectOperation] DROP CONSTRAINT [FK_trtObjectTypeToObjectOperation_trtBaseReference__idfsObjectOperation_R_1620];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtObjectTypeToObjectOperation_trtBaseReference__idfsObjectType_R_1619]...';


GO
ALTER TABLE [dbo].[trtObjectTypeToObjectOperation] DROP CONSTRAINT [FK_trtObjectTypeToObjectOperation_trtBaseReference__idfsObjectType_R_1619];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtObjectTypeToObjectOperation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtObjectTypeToObjectOperation] DROP CONSTRAINT [FK_trtObjectTypeToObjectOperation_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtObjectTypeToObjectType_trtBaseReference__idfsParentObjectType_R_1621]...';


GO
ALTER TABLE [dbo].[trtObjectTypeToObjectType] DROP CONSTRAINT [FK_trtObjectTypeToObjectType_trtBaseReference__idfsParentObjectType_R_1621];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtObjectTypeToObjectType_trtBaseReference__idfsRelatedObjectType_R_1622]...';


GO
ALTER TABLE [dbo].[trtObjectTypeToObjectType] DROP CONSTRAINT [FK_trtObjectTypeToObjectType_trtBaseReference__idfsRelatedObjectType_R_1622];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtObjectTypeToObjectType_trtBaseReference__idfsStatus_R_1623]...';


GO
ALTER TABLE [dbo].[trtObjectTypeToObjectType] DROP CONSTRAINT [FK_trtObjectTypeToObjectType_trtBaseReference__idfsStatus_R_1623];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtObjectTypeToObjectType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtObjectTypeToObjectType] DROP CONSTRAINT [FK_trtObjectTypeToObjectType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestForDisease_trtBaseReference__idfsPensideTestName]...';


GO
ALTER TABLE [dbo].[trtPensideTestForDisease] DROP CONSTRAINT [FK_trtPensideTestForDisease_trtBaseReference__idfsPensideTestName];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestForDisease_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtPensideTestForDisease] DROP CONSTRAINT [FK_trtPensideTestForDisease_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestForDisease_trtDiagnosis__idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[trtPensideTestForDisease] DROP CONSTRAINT [FK_trtPensideTestForDisease_trtDiagnosis__idfsDiagnosis];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestForDiseaseToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtPensideTestForDiseaseToCP] DROP CONSTRAINT [FK_trtPensideTestForDiseaseToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestForDiseaseToCP_trtPensideTestForDisease__idfPensideTestForDisease]...';


GO
ALTER TABLE [dbo].[trtPensideTestForDiseaseToCP] DROP CONSTRAINT [FK_trtPensideTestForDiseaseToCP_trtPensideTestForDisease__idfPensideTestForDisease];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestForDiseaseToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtPensideTestForDiseaseToCP] DROP CONSTRAINT [FK_trtPensideTestForDiseaseToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestTypeForVectorType_trtBaseReference_idfsPensideTestName]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeForVectorType] DROP CONSTRAINT [FK_trtPensideTestTypeForVectorType_trtBaseReference_idfsPensideTestName];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestTypeForVectorType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeForVectorType] DROP CONSTRAINT [FK_trtPensideTestTypeForVectorType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestTypeForVectorType_trtVectorType_idfsVectorType]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeForVectorType] DROP CONSTRAINT [FK_trtPensideTestTypeForVectorType_trtVectorType_idfsVectorType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestTypeForVectorTypeToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeForVectorTypeToCP] DROP CONSTRAINT [FK_trtPensideTestTypeForVectorTypeToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestTypeForVectorTypeToCP_trtPensideTestTypeForVectorType_idfPensideTestTypeForVectorType]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeForVectorTypeToCP] DROP CONSTRAINT [FK_trtPensideTestTypeForVectorTypeToCP_trtPensideTestTypeForVectorType_idfPensideTestTypeForVectorType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestTypeForVectorTypeToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeForVectorTypeToCP] DROP CONSTRAINT [FK_trtPensideTestTypeForVectorTypeToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestTypeToTestResult_trtBaseReference__idfsPensideTestName]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeToTestResult] DROP CONSTRAINT [FK_trtPensideTestTypeToTestResult_trtBaseReference__idfsPensideTestName];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestTypeToTestResult_trtBaseReference__idfsPensideTestResult_R_1663]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeToTestResult] DROP CONSTRAINT [FK_trtPensideTestTypeToTestResult_trtBaseReference__idfsPensideTestResult_R_1663];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestTypeToTestResult_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeToTestResult] DROP CONSTRAINT [FK_trtPensideTestTypeToTestResult_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestTypeToTestResultToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeToTestResultToCP] DROP CONSTRAINT [FK_trtPensideTestTypeToTestResultToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestTypeToTestResultToCP_trtPensideTestTypeToTestResult__idfsPensideTestName_idfsPensideTestResult]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeToTestResultToCP] DROP CONSTRAINT [FK_trtPensideTestTypeToTestResultToCP_trtPensideTestTypeToTestResult__idfsPensideTestName_idfsPensideTestResult];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtPensideTestTypeToTestResultToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeToTestResultToCP] DROP CONSTRAINT [FK_trtPensideTestTypeToTestResultToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtProphilacticAction_trtBaseReference__idfsProphilacticAction_R_1109]...';


GO
ALTER TABLE [dbo].[trtProphilacticAction] DROP CONSTRAINT [FK_trtProphilacticAction_trtBaseReference__idfsProphilacticAction_R_1109];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtProphilacticAction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtProphilacticAction] DROP CONSTRAINT [FK_trtProphilacticAction_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtReferenceType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtReferenceType] DROP CONSTRAINT [FK_trtReferenceType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtReportDiagnosisGroup_trtBaseReference__idfsReportDiagnosisGroup]...';


GO
ALTER TABLE [dbo].[trtReportDiagnosisGroup] DROP CONSTRAINT [FK_trtReportDiagnosisGroup_trtBaseReference__idfsReportDiagnosisGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtReportDiagnosisGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtReportDiagnosisGroup] DROP CONSTRAINT [FK_trtReportDiagnosisGroup_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtReportRows_trtBaseReference__idfsCustomReportType_R_1867]...';


GO
ALTER TABLE [dbo].[trtReportRows] DROP CONSTRAINT [FK_trtReportRows_trtBaseReference__idfsCustomReportType_R_1867];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtReportRows_trtBaseReference__idfsDiagnosisOrReportDiagnosisGroup]...';


GO
ALTER TABLE [dbo].[trtReportRows] DROP CONSTRAINT [FK_trtReportRows_trtBaseReference__idfsDiagnosisOrReportDiagnosisGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtReportRows_trtBaseReference__idfsICDReportAdditionalText]...';


GO
ALTER TABLE [dbo].[trtReportRows] DROP CONSTRAINT [FK_trtReportRows_trtBaseReference__idfsICDReportAdditionalText];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtReportRows_trtBaseReference__idfsReportAdditionalText_R_1895]...';


GO
ALTER TABLE [dbo].[trtReportRows] DROP CONSTRAINT [FK_trtReportRows_trtBaseReference__idfsReportAdditionalText_R_1895];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtReportRows_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtReportRows] DROP CONSTRAINT [FK_trtReportRows_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResource_idfsResourceType]...';


GO
ALTER TABLE [dbo].[trtResource] DROP CONSTRAINT [FK_trtResource_idfsResourceType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResource_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResource] DROP CONSTRAINT [FK_trtResource_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceSet_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceSet] DROP CONSTRAINT [FK_trtResourceSet_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceSetHierarchy_idfsResourceSet]...';


GO
ALTER TABLE [dbo].[trtResourceSetHierarchy] DROP CONSTRAINT [FK_trtResourceSetHierarchy_idfsResourceSet];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceSetHierarchy_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceSetHierarchy] DROP CONSTRAINT [FK_trtResourceSetHierarchy_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceSetToResource_idfsResourceSet]...';


GO
ALTER TABLE [dbo].[trtResourceSetToResource] DROP CONSTRAINT [FK_trtResourceSetToResource_idfsResourceSet];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceSetToResource_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceSetToResource] DROP CONSTRAINT [FK_trtResourceSetToResource_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceSetToResource_trtResource]...';


GO
ALTER TABLE [dbo].[trtResourceSetToResource] DROP CONSTRAINT [FK_trtResourceSetToResource_trtResource];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceSetTranslation__idfsLanguage]...';


GO
ALTER TABLE [dbo].[trtResourceSetTranslation] DROP CONSTRAINT [FK_trtResourceSetTranslation__idfsLanguage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceSetTranslation_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceSetTranslation] DROP CONSTRAINT [FK_trtResourceSetTranslation_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceSetTranslation_trtResourceSet]...';


GO
ALTER TABLE [dbo].[trtResourceSetTranslation] DROP CONSTRAINT [FK_trtResourceSetTranslation_trtResourceSet];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceTranslation_idfsLanguage]...';


GO
ALTER TABLE [dbo].[trtResourceTranslation] DROP CONSTRAINT [FK_trtResourceTranslation_idfsLanguage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceTranslation_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceTranslation] DROP CONSTRAINT [FK_trtResourceTranslation_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceTranslation_trtResource]...';


GO
ALTER TABLE [dbo].[trtResourceTranslation] DROP CONSTRAINT [FK_trtResourceTranslation_trtResource];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSampleType_trtBaseReference__idfsSampleType_R_1866]...';


GO
ALTER TABLE [dbo].[trtSampleType] DROP CONSTRAINT [FK_trtSampleType_trtBaseReference__idfsSampleType_R_1866];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSampleType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSampleType] DROP CONSTRAINT [FK_trtSampleType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSampleTypeForVectorType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSampleTypeForVectorType] DROP CONSTRAINT [FK_trtSampleTypeForVectorType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSampleTypeForVectorType_trtSampleType_idfsSampleType]...';


GO
ALTER TABLE [dbo].[trtSampleTypeForVectorType] DROP CONSTRAINT [FK_trtSampleTypeForVectorType_trtSampleType_idfsSampleType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSampleTypeForVectorType_trtVectorType_idfsVectorType]...';


GO
ALTER TABLE [dbo].[trtSampleTypeForVectorType] DROP CONSTRAINT [FK_trtSampleTypeForVectorType_trtVectorType_idfsVectorType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSampleTypeForVectorTypeToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSampleTypeForVectorTypeToCP] DROP CONSTRAINT [FK_trtSampleTypeForVectorTypeToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSampleTypeForVectorTypeToCP_trtSampleTypeForVectorType_idfSampleTypeForVectorType]...';


GO
ALTER TABLE [dbo].[trtSampleTypeForVectorTypeToCP] DROP CONSTRAINT [FK_trtSampleTypeForVectorTypeToCP_trtSampleTypeForVectorType_idfSampleTypeForVectorType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSampleTypeForVectorTypeToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtSampleTypeForVectorTypeToCP] DROP CONSTRAINT [FK_trtSampleTypeForVectorTypeToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSanitaryAction_trtBaseReference__idfsSanitaryAction_R_1110]...';


GO
ALTER TABLE [dbo].[trtSanitaryAction] DROP CONSTRAINT [FK_trtSanitaryAction_trtBaseReference__idfsSanitaryAction_R_1110];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSanitaryAction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSanitaryAction] DROP CONSTRAINT [FK_trtSanitaryAction_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesContentInCustomReport_trtBaseReference_idfsCustomReportType]...';


GO
ALTER TABLE [dbo].[trtSpeciesContentInCustomReport] DROP CONSTRAINT [FK_trtSpeciesContentInCustomReport_trtBaseReference_idfsCustomReportType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesContentInCustomReport_trtBaseReference_idfsReportAdditionalText]...';


GO
ALTER TABLE [dbo].[trtSpeciesContentInCustomReport] DROP CONSTRAINT [FK_trtSpeciesContentInCustomReport_trtBaseReference_idfsReportAdditionalText];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesContentInCustomReport_trtBaseReference_idfsSpeciesOrSpeciesGroup]...';


GO
ALTER TABLE [dbo].[trtSpeciesContentInCustomReport] DROP CONSTRAINT [FK_trtSpeciesContentInCustomReport_trtBaseReference_idfsSpeciesOrSpeciesGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesContentInCustomReport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSpeciesContentInCustomReport] DROP CONSTRAINT [FK_trtSpeciesContentInCustomReport_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesGroup_trtBaseReference_idfsSpeciesGroup]...';


GO
ALTER TABLE [dbo].[trtSpeciesGroup] DROP CONSTRAINT [FK_trtSpeciesGroup_trtBaseReference_idfsSpeciesGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSpeciesGroup] DROP CONSTRAINT [FK_trtSpeciesGroup_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesToGroupForCustomReport_trtBaseReference_idfsCustomReportType]...';


GO
ALTER TABLE [dbo].[trtSpeciesToGroupForCustomReport] DROP CONSTRAINT [FK_trtSpeciesToGroupForCustomReport_trtBaseReference_idfsCustomReportType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesToGroupForCustomReport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSpeciesToGroupForCustomReport] DROP CONSTRAINT [FK_trtSpeciesToGroupForCustomReport_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesToGroupForCustomReport_trtSpeciesGroup_idfsSpeciesGroup]...';


GO
ALTER TABLE [dbo].[trtSpeciesToGroupForCustomReport] DROP CONSTRAINT [FK_trtSpeciesToGroupForCustomReport_trtSpeciesGroup_idfsSpeciesGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesToGroupForCustomReport_trtSpeciesType_idfsSpeciesType]...';


GO
ALTER TABLE [dbo].[trtSpeciesToGroupForCustomReport] DROP CONSTRAINT [FK_trtSpeciesToGroupForCustomReport_trtSpeciesType_idfsSpeciesType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesType_trtBaseReference__idfsSpeciesType_R_1650]...';


GO
ALTER TABLE [dbo].[trtSpeciesType] DROP CONSTRAINT [FK_trtSpeciesType_trtBaseReference__idfsSpeciesType_R_1650];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSpeciesType] DROP CONSTRAINT [FK_trtSpeciesType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesTypeToAnimalAge_trtBaseReference__idfsAnimalAge_R_1599]...';


GO
ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAge] DROP CONSTRAINT [FK_trtSpeciesTypeToAnimalAge_trtBaseReference__idfsAnimalAge_R_1599];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesTypeToAnimalAge_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAge] DROP CONSTRAINT [FK_trtSpeciesTypeToAnimalAge_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesTypeToAnimalAge_trtSpeciesType__idfsSpeciesType_R_1598]...';


GO
ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAge] DROP CONSTRAINT [FK_trtSpeciesTypeToAnimalAge_trtSpeciesType__idfsSpeciesType_R_1598];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesTypeToAnimalAgeToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAgeToCP] DROP CONSTRAINT [FK_trtSpeciesTypeToAnimalAgeToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesTypeToAnimalAgeToCP_trtSpeciesTypeToAnimalAge__idfSpeciesTypeToAnimalAge_R_1882]...';


GO
ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAgeToCP] DROP CONSTRAINT [FK_trtSpeciesTypeToAnimalAgeToCP_trtSpeciesTypeToAnimalAge__idfSpeciesTypeToAnimalAge_R_1882];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSpeciesTypeToAnimalAgeToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAgeToCP] DROP CONSTRAINT [FK_trtSpeciesTypeToAnimalAgeToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtStatisticDataType_trtBaseReference__idfsStatisticAreaType_R_1591]...';


GO
ALTER TABLE [dbo].[trtStatisticDataType] DROP CONSTRAINT [FK_trtStatisticDataType_trtBaseReference__idfsStatisticAreaType_R_1591];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtStatisticDataType_trtBaseReference__idfsStatisticDataType_R_496]...';


GO
ALTER TABLE [dbo].[trtStatisticDataType] DROP CONSTRAINT [FK_trtStatisticDataType_trtBaseReference__idfsStatisticDataType_R_496];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtStatisticDataType_trtBaseReference__idfsStatisticPeriodType_R_1592]...';


GO
ALTER TABLE [dbo].[trtStatisticDataType] DROP CONSTRAINT [FK_trtStatisticDataType_trtBaseReference__idfsStatisticPeriodType_R_1592];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtStatisticDataType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtStatisticDataType] DROP CONSTRAINT [FK_trtStatisticDataType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtStatisticDataType_trtReferenceType__idfsReferenceType_R_933]...';


GO
ALTER TABLE [dbo].[trtStatisticDataType] DROP CONSTRAINT [FK_trtStatisticDataType_trtReferenceType__idfsReferenceType_R_933];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtStringNameTranslationToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtStringNameTranslationToCP] DROP CONSTRAINT [FK_trtStringNameTranslationToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtStringNameTranslationToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtStringNameTranslationToCP] DROP CONSTRAINT [FK_trtStringNameTranslationToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSystemFunction_trtBaseReference__idfsObjectType_R_1581]...';


GO
ALTER TABLE [dbo].[trtSystemFunction] DROP CONSTRAINT [FK_trtSystemFunction_trtBaseReference__idfsObjectType_R_1581];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSystemFunction_trtBaseReference__idfsSystemFunction_R_1038]...';


GO
ALTER TABLE [dbo].[trtSystemFunction] DROP CONSTRAINT [FK_trtSystemFunction_trtBaseReference__idfsSystemFunction_R_1038];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtSystemFunction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSystemFunction] DROP CONSTRAINT [FK_trtSystemFunction_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestForDisease_trtBaseReference__idfsTestCategory]...';


GO
ALTER TABLE [dbo].[trtTestForDisease] DROP CONSTRAINT [FK_trtTestForDisease_trtBaseReference__idfsTestCategory];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestForDisease_trtBaseReference__idfsTestName]...';


GO
ALTER TABLE [dbo].[trtTestForDisease] DROP CONSTRAINT [FK_trtTestForDisease_trtBaseReference__idfsTestName];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestForDisease_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtTestForDisease] DROP CONSTRAINT [FK_trtTestForDisease_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestForDisease_trtDiagnosis__idfsDiagnosis_R_892]...';


GO
ALTER TABLE [dbo].[trtTestForDisease] DROP CONSTRAINT [FK_trtTestForDisease_trtDiagnosis__idfsDiagnosis_R_892];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestForDisease_trtSampleType__idfsSampleType]...';


GO
ALTER TABLE [dbo].[trtTestForDisease] DROP CONSTRAINT [FK_trtTestForDisease_trtSampleType__idfsSampleType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestForDiseaseToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtTestForDiseaseToCP] DROP CONSTRAINT [FK_trtTestForDiseaseToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestForDiseaseToCP_trtTestForDisease__idfTestForDisease_R_1884]...';


GO
ALTER TABLE [dbo].[trtTestForDiseaseToCP] DROP CONSTRAINT [FK_trtTestForDiseaseToCP_trtTestForDisease__idfTestForDisease_R_1884];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestForDiseaseToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtTestForDiseaseToCP] DROP CONSTRAINT [FK_trtTestForDiseaseToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestTypeForCustomReport_trtBaseReference__idfsCustomReportType]...';


GO
ALTER TABLE [dbo].[trtTestTypeForCustomReport] DROP CONSTRAINT [FK_trtTestTypeForCustomReport_trtBaseReference__idfsCustomReportType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestTypeForCustomReport_trtBaseReference__idfsTestName]...';


GO
ALTER TABLE [dbo].[trtTestTypeForCustomReport] DROP CONSTRAINT [FK_trtTestTypeForCustomReport_trtBaseReference__idfsTestName];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestTypeForCustomReport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtTestTypeForCustomReport] DROP CONSTRAINT [FK_trtTestTypeForCustomReport_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestTypeToTestResult_trtBaseReference__idfsTestName]...';


GO
ALTER TABLE [dbo].[trtTestTypeToTestResult] DROP CONSTRAINT [FK_trtTestTypeToTestResult_trtBaseReference__idfsTestName];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestTypeToTestResult_trtBaseReference__idfsTestResult_R_1596]...';


GO
ALTER TABLE [dbo].[trtTestTypeToTestResult] DROP CONSTRAINT [FK_trtTestTypeToTestResult_trtBaseReference__idfsTestResult_R_1596];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestTypeToTestResult_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtTestTypeToTestResult] DROP CONSTRAINT [FK_trtTestTypeToTestResult_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestTypeToTestResultToCountry_trtTestTypeToTestResult__idfsTestName_idfsTestResult]...';


GO
ALTER TABLE [dbo].[trtTestTypeToTestResultToCP] DROP CONSTRAINT [FK_trtTestTypeToTestResultToCountry_trtTestTypeToTestResult__idfsTestName_idfsTestResult];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestTypeToTestResultToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtTestTypeToTestResultToCP] DROP CONSTRAINT [FK_trtTestTypeToTestResultToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtTestTypeToTestResultToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtTestTypeToTestResultToCP] DROP CONSTRAINT [FK_trtTestTypeToTestResultToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtVectorSubType_trtBaseReference_idfsVectorSubType]...';


GO
ALTER TABLE [dbo].[trtVectorSubType] DROP CONSTRAINT [FK_trtVectorSubType_trtBaseReference_idfsVectorSubType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtVectorSubType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtVectorSubType] DROP CONSTRAINT [FK_trtVectorSubType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtVectorSubType_trtVectorType_idfsVectorType]...';


GO
ALTER TABLE [dbo].[trtVectorSubType] DROP CONSTRAINT [FK_trtVectorSubType_trtVectorType_idfsVectorType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtVectorType_trtBaseReference__idfsVectorType]...';


GO
ALTER TABLE [dbo].[trtVectorType] DROP CONSTRAINT [FK_trtVectorType_trtBaseReference__idfsVectorType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtVectorType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtVectorType] DROP CONSTRAINT [FK_trtVectorType_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference__idfsAggrCaseType_R_941]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] DROP CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsAggrCaseType_R_941];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference__idfsStatisticAreaType_R_1612]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] DROP CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsStatisticAreaType_R_1612];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference__idfsStatisticPeriodType_R_1613]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] DROP CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsStatisticPeriodType_R_1613];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] DROP CONSTRAINT [FK_tstAggrSetting_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstAggrSetting_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] DROP CONSTRAINT [FK_tstAggrSetting_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstAggrSetting_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] DROP CONSTRAINT [FK_tstAggrSetting_tstSite_idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstBarcodeLayout_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstBarcodeLayout] DROP CONSTRAINT [FK_tstBarcodeLayout_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstBarcodeLayout_tstNextNumbers__idfsNumberName_R_1677]...';


GO
ALTER TABLE [dbo].[tstBarcodeLayout] DROP CONSTRAINT [FK_tstBarcodeLayout_tstNextNumbers__idfsNumberName_R_1677];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstCheckTables_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstCheckTables] DROP CONSTRAINT [FK_tstCheckTables_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstCustomizationPackage_gisLocation_idfsCountry]...';


GO
ALTER TABLE [dbo].[tstCustomizationPackage] DROP CONSTRAINT [FK_tstCustomizationPackage_gisLocation_idfsCountry];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstCustomizationPackage_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstCustomizationPackage] DROP CONSTRAINT [FK_tstCustomizationPackage_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstCustomizationPackageSettings_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstCustomizationPackageSettings] DROP CONSTRAINT [FK_tstCustomizationPackageSettings_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEvent_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tstEvent] DROP CONSTRAINT [FK_tstEvent_gisLocation_idfsLocation];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEvent_gisRayon__idfsRayon]...';


GO
ALTER TABLE [dbo].[tstEvent] DROP CONSTRAINT [FK_tstEvent_gisRayon__idfsRayon];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEvent_gisRegion__idfsRegion]...';


GO
ALTER TABLE [dbo].[tstEvent] DROP CONSTRAINT [FK_tstEvent_gisRegion__idfsRegion];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEvent_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstEvent] DROP CONSTRAINT [FK_tstEvent_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEvent_trtDiagnosis__idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[tstEvent] DROP CONSTRAINT [FK_tstEvent_trtDiagnosis__idfsDiagnosis];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEvent_trtEventType__idfsEventTypeID_R_664]...';


GO
ALTER TABLE [dbo].[tstEvent] DROP CONSTRAINT [FK_tstEvent_trtEventType__idfsEventTypeID_R_664];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEvent_tstSite__idfsLoginSite]...';


GO
ALTER TABLE [dbo].[tstEvent] DROP CONSTRAINT [FK_tstEvent_tstSite__idfsLoginSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEvent_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tstEvent] DROP CONSTRAINT [FK_tstEvent_tstSite__idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEventActive_gisRayon__idfsRayon]...';


GO
ALTER TABLE [dbo].[tstEventActive] DROP CONSTRAINT [FK_tstEventActive_gisRayon__idfsRayon];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEventActive_gisRegion__idfsRegion]...';


GO
ALTER TABLE [dbo].[tstEventActive] DROP CONSTRAINT [FK_tstEventActive_gisRegion__idfsRegion];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEventActive_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstEventActive] DROP CONSTRAINT [FK_tstEventActive_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEventActive_trtDiagnosis__idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[tstEventActive] DROP CONSTRAINT [FK_tstEventActive_trtDiagnosis__idfsDiagnosis];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEventActive_trtEventType__idfsEventTypeID]...';


GO
ALTER TABLE [dbo].[tstEventActive] DROP CONSTRAINT [FK_tstEventActive_trtEventType__idfsEventTypeID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEventActive_tstSite__idfsLoginSite]...';


GO
ALTER TABLE [dbo].[tstEventActive] DROP CONSTRAINT [FK_tstEventActive_tstSite__idfsLoginSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEventActive_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tstEventActive] DROP CONSTRAINT [FK_tstEventActive_tstSite__idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEventClient_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstEventClient] DROP CONSTRAINT [FK_tstEventClient_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEventSubscription_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstEventSubscription] DROP CONSTRAINT [FK_tstEventSubscription_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstEventSubscription_trtEventType__idfsEventTypeID_R_676]...';


GO
ALTER TABLE [dbo].[tstEventSubscription] DROP CONSTRAINT [FK_tstEventSubscription_trtEventType__idfsEventTypeID_R_676];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstGeoLocationFormat_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tstGeoLocationFormat] DROP CONSTRAINT [FK_tstGeoLocationFormat_gisLocation_idfsLocation];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstGeoLocationFormat_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstGeoLocationFormat] DROP CONSTRAINT [FK_tstGeoLocationFormat_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstGlobalSiteOptions_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstGlobalSiteOptions] DROP CONSTRAINT [FK_tstGlobalSiteOptions_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstGlobalSiteOptions_tstSite__idfsSite_R_1753]...';


GO
ALTER TABLE [dbo].[tstGlobalSiteOptions] DROP CONSTRAINT [FK_tstGlobalSiteOptions_tstSite__idfsSite_R_1753];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstInvisibleFields_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstInvisibleFields] DROP CONSTRAINT [FK_tstInvisibleFields_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstInvisibleFieldsToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstInvisibleFieldsToCP] DROP CONSTRAINT [FK_tstInvisibleFieldsToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstInvisibleFieldsToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tstInvisibleFieldsToCP] DROP CONSTRAINT [FK_tstInvisibleFieldsToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstInvisibleFieldsToCP_tstInvisibleFields_idfInvisibleField]...';


GO
ALTER TABLE [dbo].[tstInvisibleFieldsToCP] DROP CONSTRAINT [FK_tstInvisibleFieldsToCP_tstInvisibleFields_idfInvisibleField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstLocalClient_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstLocalClient] DROP CONSTRAINT [FK_tstLocalClient_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstLocalConnectionContext_tauDataAuditEvent__idfDataAuditEvent_R_1043]...';


GO
ALTER TABLE [dbo].[tstLocalConnectionContext] DROP CONSTRAINT [FK_tstLocalConnectionContext_tauDataAuditEvent__idfDataAuditEvent_R_1043];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstLocalConnectionContext_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstLocalConnectionContext] DROP CONSTRAINT [FK_tstLocalConnectionContext_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstLocalConnectionContext_tstEvent__idfEventID_R_1044]...';


GO
ALTER TABLE [dbo].[tstLocalConnectionContext] DROP CONSTRAINT [FK_tstLocalConnectionContext_tstEvent__idfEventID_R_1044];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstLocalConnectionContext_tstSite__idfsSite_R_1858]...';


GO
ALTER TABLE [dbo].[tstLocalConnectionContext] DROP CONSTRAINT [FK_tstLocalConnectionContext_tstSite__idfsSite_R_1858];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstLocalConnectionContext_tstUserTable__idfUserID_R_1042]...';


GO
ALTER TABLE [dbo].[tstLocalConnectionContext] DROP CONSTRAINT [FK_tstLocalConnectionContext_tstUserTable__idfUserID_R_1042];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstLocalSamplesTestsPreferences_tlbMaterial__idfMaterial]...';


GO
ALTER TABLE [dbo].[tstLocalSamplesTestsPreferences] DROP CONSTRAINT [FK_tstLocalSamplesTestsPreferences_tlbMaterial__idfMaterial];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstLocalSamplesTestsPreferences_tlbTesting__idfTesting]...';


GO
ALTER TABLE [dbo].[tstLocalSamplesTestsPreferences] DROP CONSTRAINT [FK_tstLocalSamplesTestsPreferences_tlbTesting__idfTesting];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstLocalSamplesTestsPreferences_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstLocalSamplesTestsPreferences] DROP CONSTRAINT [FK_tstLocalSamplesTestsPreferences_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstLocalSamplesTestsPreferences_tstUserTable__idfUserID]...';


GO
ALTER TABLE [dbo].[tstLocalSamplesTestsPreferences] DROP CONSTRAINT [FK_tstLocalSamplesTestsPreferences_tstUserTable__idfUserID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstLocalSiteOptions_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstLocalSiteOptions] DROP CONSTRAINT [FK_tstLocalSiteOptions_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstMandatoryFields_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstMandatoryFields] DROP CONSTRAINT [FK_tstMandatoryFields_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstMandatoryFieldsToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstMandatoryFieldsToCP] DROP CONSTRAINT [FK_tstMandatoryFieldsToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstMandatoryFieldsToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tstMandatoryFieldsToCP] DROP CONSTRAINT [FK_tstMandatoryFieldsToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstMandatoryFieldsToCP_tstMandatoryFields_idfMandatoryField]...';


GO
ALTER TABLE [dbo].[tstMandatoryFieldsToCP] DROP CONSTRAINT [FK_tstMandatoryFieldsToCP_tstMandatoryFields_idfMandatoryField];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNewID_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstNewID] DROP CONSTRAINT [FK_tstNewID_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNextNumbers_trtBaseReference__idfsNumberName_R_930]...';


GO
ALTER TABLE [dbo].[tstNextNumbers] DROP CONSTRAINT [FK_tstNextNumbers_trtBaseReference__idfsNumberName_R_930];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNextNumbers_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstNextNumbers] DROP CONSTRAINT [FK_tstNextNumbers_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotification_trtBaseReference__idfsNotificationObjectType_R_1307]...';


GO
ALTER TABLE [dbo].[tstNotification] DROP CONSTRAINT [FK_tstNotification_trtBaseReference__idfsNotificationObjectType_R_1307];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotification_trtBaseReference__idfsNotificationType_R_1306]...';


GO
ALTER TABLE [dbo].[tstNotification] DROP CONSTRAINT [FK_tstNotification_trtBaseReference__idfsNotificationType_R_1306];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotification_trtBaseReference__idfsTargetSiteType_R_1304]...';


GO
ALTER TABLE [dbo].[tstNotification] DROP CONSTRAINT [FK_tstNotification_trtBaseReference__idfsTargetSiteType_R_1304];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotification_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstNotification] DROP CONSTRAINT [FK_tstNotification_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotification_tstSite__idfsSite_R_1035]...';


GO
ALTER TABLE [dbo].[tstNotification] DROP CONSTRAINT [FK_tstNotification_tstSite__idfsSite_R_1035];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotification_tstSite__idfsTargetSite_R_688]...';


GO
ALTER TABLE [dbo].[tstNotification] DROP CONSTRAINT [FK_tstNotification_tstSite__idfsTargetSite_R_688];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotification_tstUserTable__idfTargetUserID_R_720]...';


GO
ALTER TABLE [dbo].[tstNotification] DROP CONSTRAINT [FK_tstNotification_tstUserTable__idfTargetUserID_R_720];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotification_tstUserTable__idfUserID_R_793]...';


GO
ALTER TABLE [dbo].[tstNotification] DROP CONSTRAINT [FK_tstNotification_tstUserTable__idfUserID_R_793];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotificationActivity_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstNotificationActivity] DROP CONSTRAINT [FK_tstNotificationActivity_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotificationShared_trtBaseReference__idfsNotificationObjectType]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] DROP CONSTRAINT [FK_tstNotificationShared_trtBaseReference__idfsNotificationObjectType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotificationShared_trtBaseReference__idfsNotificationType]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] DROP CONSTRAINT [FK_tstNotificationShared_trtBaseReference__idfsNotificationType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotificationShared_trtBaseReference__idfsTargetSiteType]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] DROP CONSTRAINT [FK_tstNotificationShared_trtBaseReference__idfsTargetSiteType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotificationShared_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] DROP CONSTRAINT [FK_tstNotificationShared_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotificationShared_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] DROP CONSTRAINT [FK_tstNotificationShared_tstSite__idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotificationShared_tstSite__idfsTargetSite]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] DROP CONSTRAINT [FK_tstNotificationShared_tstSite__idfsTargetSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotificationShared_tstUserTable__idfTargetUserID]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] DROP CONSTRAINT [FK_tstNotificationShared_tstUserTable__idfTargetUserID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotificationShared_tstUserTable__idfUserID]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] DROP CONSTRAINT [FK_tstNotificationShared_tstUserTable__idfUserID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstNotificationStatus_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstNotificationStatus] DROP CONSTRAINT [FK_tstNotificationStatus_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstObjectAccess_tlbEmployee__idfActor_R_1618]...';


GO
ALTER TABLE [dbo].[tstObjectAccess] DROP CONSTRAINT [FK_tstObjectAccess_tlbEmployee__idfActor_R_1618];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstObjectAccess_trtBaseReference__idfsObjectOperation_R_1586]...';


GO
ALTER TABLE [dbo].[tstObjectAccess] DROP CONSTRAINT [FK_tstObjectAccess_trtBaseReference__idfsObjectOperation_R_1586];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstObjectAccess_trtBaseReference__idfsObjectType_R_1580]...';


GO
ALTER TABLE [dbo].[tstObjectAccess] DROP CONSTRAINT [FK_tstObjectAccess_trtBaseReference__idfsObjectType_R_1580];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstObjectAccess_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstObjectAccess] DROP CONSTRAINT [FK_tstObjectAccess_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstObjectAccess_tstSite__idfsOnSite_R_951]...';


GO
ALTER TABLE [dbo].[tstObjectAccess] DROP CONSTRAINT [FK_tstObjectAccess_tstSite__idfsOnSite_R_951];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstPersonalDataGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstPersonalDataGroup] DROP CONSTRAINT [FK_tstPersonalDataGroup_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstPersonalDataGroupToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstPersonalDataGroupToCP] DROP CONSTRAINT [FK_tstPersonalDataGroupToCP_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstPersonalDataGroupToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tstPersonalDataGroupToCP] DROP CONSTRAINT [FK_tstPersonalDataGroupToCP_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstPersonalDataGroupToCP_tstPersonalDataGroup_idfPersonalDataGroup]...';


GO
ALTER TABLE [dbo].[tstPersonalDataGroupToCP] DROP CONSTRAINT [FK_tstPersonalDataGroupToCP_tstPersonalDataGroup_idfPersonalDataGroup];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstRayonToReportSite_gisRayon__idfsRayon]...';


GO
ALTER TABLE [dbo].[tstRayonToReportSite] DROP CONSTRAINT [FK_tstRayonToReportSite_gisRayon__idfsRayon];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstRayonToReportSite_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstRayonToReportSite] DROP CONSTRAINT [FK_tstRayonToReportSite_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstRayonToReportSite_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tstRayonToReportSite] DROP CONSTRAINT [FK_tstRayonToReportSite_tstSite__idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSecurityAudit_tauDataAuditEvent__idfDataAuditEvent_R_1731]...';


GO
ALTER TABLE [dbo].[tstSecurityAudit] DROP CONSTRAINT [FK_tstSecurityAudit_tauDataAuditEvent__idfDataAuditEvent_R_1731];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSecurityAudit_trtBaseReference__idfsAction_R_1727]...';


GO
ALTER TABLE [dbo].[tstSecurityAudit] DROP CONSTRAINT [FK_tstSecurityAudit_trtBaseReference__idfsAction_R_1727];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSecurityAudit_trtBaseReference__idfsProcessType_R_1729]...';


GO
ALTER TABLE [dbo].[tstSecurityAudit] DROP CONSTRAINT [FK_tstSecurityAudit_trtBaseReference__idfsProcessType_R_1729];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSecurityAudit_trtBaseReference__idfsResult_R_1728]...';


GO
ALTER TABLE [dbo].[tstSecurityAudit] DROP CONSTRAINT [FK_tstSecurityAudit_trtBaseReference__idfsResult_R_1728];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSecurityAudit_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstSecurityAudit] DROP CONSTRAINT [FK_tstSecurityAudit_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSecurityAudit_tstSite]...';


GO
ALTER TABLE [dbo].[tstSecurityAudit] DROP CONSTRAINT [FK_tstSecurityAudit_tstSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSecurityAudit_tstUserTable__idfUserID_R_1726]...';


GO
ALTER TABLE [dbo].[tstSecurityAudit] DROP CONSTRAINT [FK_tstSecurityAudit_tstUserTable__idfUserID_R_1726];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSecurityConfiguration_trtBaseReference__idfsSecurityLevel_R_1759]...';


GO
ALTER TABLE [dbo].[tstSecurityConfiguration] DROP CONSTRAINT [FK_tstSecurityConfiguration_trtBaseReference__idfsSecurityLevel_R_1759];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSecurityConfiguration_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstSecurityConfiguration] DROP CONSTRAINT [FK_tstSecurityConfiguration_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSecurityConfiguration_tstSecurityConfiguration__idfParentSecurityConfiguration_R_1761]...';


GO
ALTER TABLE [dbo].[tstSecurityConfiguration] DROP CONSTRAINT [FK_tstSecurityConfiguration_tstSecurityConfiguration__idfParentSecurityConfiguration_R_1761];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSecurityConfigurationAlphabet_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstSecurityConfigurationAlphabet] DROP CONSTRAINT [FK_tstSecurityConfigurationAlphabet_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSecurityConfigurationAlphabetParticipation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstSecurityConfigurationAlphabetParticipation] DROP CONSTRAINT [FK_tstSecurityConfigurationAlphabetParticipation_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSecurityConfigurationAlphabetParticipation_tstSecurityConfiguration__idfSecurityConfiguration_R_1763]...';


GO
ALTER TABLE [dbo].[tstSecurityConfigurationAlphabetParticipation] DROP CONSTRAINT [FK_tstSecurityConfigurationAlphabetParticipation_tstSecurityConfiguration__idfSecurityConfiguration_R_1763];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSecurityConfigurationAlphabetParticipation_tstSecurityConfigurationAlphabet__idfsSecurityConfigurationAlphabet_R_1762]...';


GO
ALTER TABLE [dbo].[tstSecurityConfigurationAlphabetParticipation] DROP CONSTRAINT [FK_tstSecurityConfigurationAlphabetParticipation_tstSecurityConfigurationAlphabet__idfsSecurityConfigurationAlphabet_R_1762];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSite_tlbOffice__idfOffice_R_386]...';


GO
ALTER TABLE [dbo].[tstSite] DROP CONSTRAINT [FK_tstSite_tlbOffice__idfOffice_R_386];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSite_trtBaseReference__idfsSiteType_R_1305]...';


GO
ALTER TABLE [dbo].[tstSite] DROP CONSTRAINT [FK_tstSite_trtBaseReference__idfsSiteType_R_1305];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSite_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstSite] DROP CONSTRAINT [FK_tstSite_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSite_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tstSite] DROP CONSTRAINT [FK_tstSite_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstSite_tstSite__idfsParentSite]...';


GO
ALTER TABLE [dbo].[tstSite] DROP CONSTRAINT [FK_tstSite_tstSite__idfsParentSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstUserTable_tlbPerson_idfPerson]...';


GO
ALTER TABLE [dbo].[tstUserTable] DROP CONSTRAINT [FK_tstUserTable_tlbPerson_idfPerson];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstUserTable_trtBaseReference_idfsBaseReference]...';


GO
ALTER TABLE [dbo].[tstUserTable] DROP CONSTRAINT [FK_tstUserTable_trtBaseReference_idfsBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstUserTable_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstUserTable] DROP CONSTRAINT [FK_tstUserTable_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstUserTable_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tstUserTable] DROP CONSTRAINT [FK_tstUserTable_tstSite_idfsSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstUserTableLocal_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstUserTableLocal] DROP CONSTRAINT [FK_tstUserTableLocal_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstUserTableLocal_tstUserTable_idfUserID]...';


GO
ALTER TABLE [dbo].[tstUserTableLocal] DROP CONSTRAINT [FK_tstUserTableLocal_tstUserTable_idfUserID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstUserTableOldPassword_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstUserTableOldPassword] DROP CONSTRAINT [FK_tstUserTableOldPassword_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstUserTableOldPassword_tstUserTable__idfUserID_R_1730]...';


GO
ALTER TABLE [dbo].[tstUserTableOldPassword] DROP CONSTRAINT [FK_tstUserTableOldPassword_tstUserTable__idfUserID_R_1730];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstUserTicket_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstUserTicket] DROP CONSTRAINT [FK_tstUserTicket_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstUserTicket_tstUserTable__idfUserID]...';


GO
ALTER TABLE [dbo].[tstUserTicket] DROP CONSTRAINT [FK_tstUserTicket_tstUserTable__idfUserID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstVersionCompare_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstVersionCompare] DROP CONSTRAINT [FK_tstVersionCompare_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_updRunningApps_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[updRunningApps] DROP CONSTRAINT [FK_updRunningApps_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_updUpdateBlock_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[updUpdateBlock] DROP CONSTRAINT [FK_updUpdateBlock_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_UserAccess_BaseRef_AccessPermission]...';


GO
ALTER TABLE [dbo].[UserAccess] DROP CONSTRAINT [FK_UserAccess_BaseRef_AccessPermission];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_UserAccess_BaseRef_SysFunctionID]...';


GO
ALTER TABLE [dbo].[UserAccess] DROP CONSTRAINT [FK_UserAccess_BaseRef_SysFunctionID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_UserAccess_BaseReference_OperaionID]...';


GO
ALTER TABLE [dbo].[UserAccess] DROP CONSTRAINT [FK_UserAccess_BaseReference_OperaionID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_UserAccess_tlbEmployee_EmpID]...';


GO
ALTER TABLE [dbo].[UserAccess] DROP CONSTRAINT [FK_UserAccess_tlbEmployee_EmpID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_UserAccess_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[UserAccess] DROP CONSTRAINT [FK_UserAccess_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_UserAccess_tstSite_OnSite]...';


GO
ALTER TABLE [dbo].[UserAccess] DROP CONSTRAINT [FK_UserAccess_tstSite_OnSite];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_UserPreference_BAseRef_ModuleConstantID]...';


GO
ALTER TABLE [dbo].[UserPreference] DROP CONSTRAINT [FK_UserPreference_BAseRef_ModuleConstantID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_UserPreference_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[UserPreference] DROP CONSTRAINT [FK_UserPreference_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_UserPreference_tstUserTable_UserID]...';


GO
ALTER TABLE [dbo].[UserPreference] DROP CONSTRAINT [FK_UserPreference_tstUserTable_UserID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_VetDiseaseReportRelationship_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[VetDiseaseReportRelationship] DROP CONSTRAINT [FK_VetDiseaseReportRelationship_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_VetDiseaseReportReln_BaseRef_RelTypeID]...';


GO
ALTER TABLE [dbo].[VetDiseaseReportRelationship] DROP CONSTRAINT [FK_VetDiseaseReportReln_BaseRef_RelTypeID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_VetDiseaseReportReln_tlbVetCase_RelateToVetDiseaseReportID]...';


GO
ALTER TABLE [dbo].[VetDiseaseReportRelationship] DROP CONSTRAINT [FK_VetDiseaseReportReln_tlbVetCase_RelateToVetDiseaseReportID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_VetDiseaseReportReln_tlbVetCase_VetDiseaseReportID]...';


GO
ALTER TABLE [dbo].[VetDiseaseReportRelationship] DROP CONSTRAINT [FK_VetDiseaseReportReln_tlbVetCase_VetDiseaseReportID];


GO

PRINT N'Starting rebuilding table [dbo].[ASPNetUserPreviousPasswords]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_ASPNetUserPreviousPasswords] (
    [ASPNetUserPreviousPasswordsUID] BIGINT           IDENTITY (1, 1) NOT NULL,
    [Id]                             NVARCHAR (128)   NOT NULL,
    [OldPasswordHash]                NVARCHAR (MAX)   NOT NULL,
    [intRowStatus]                   INT              CONSTRAINT [Def_ASPNetUserPreviousPasswords_intRowStatus] DEFAULT ((0)) NOT NULL,
    [rowguid]                        UNIQUEIDENTIFIER CONSTRAINT [DF_ASPNetUserPreviousPasswords__rowguid] DEFAULT (newid()) NOT NULL,
    [strMaintenanceFlag]             NVARCHAR (20)    NULL,
    [strReservedAttribute]           NVARCHAR (MAX)   NULL,
    [AuditCreateUser]                VARCHAR (100)    CONSTRAINT [DF__ASPNetUserPreviousPasswords__AudiCreateUser] DEFAULT (user_name()) NOT NULL,
    [AuditCreateDTM]                 DATETIME         CONSTRAINT [DF__ASPNetUserPreviousPasswords__AuditCreateDTM] DEFAULT (getdate()) NOT NULL,
    [AuditUpdateUser]                VARCHAR (100)    CONSTRAINT [DF__ASPNetUserPreviousPasswords__AuditUpdateUser] DEFAULT (user_name()) NOT NULL,
    [AuditUpdateDTM]                 DATETIME         CONSTRAINT [DF__ASPNetUserPreviousPasswords__AuditUpdateDTM] DEFAULT (getdate()) NOT NULL,
    [SourceSystemNameID]             BIGINT           CONSTRAINT [DEF_ASPNetUserPreviousPasswords_SourceSystemNameID] DEFAULT ((10519001)) NULL,
    [SourceSystemKeyValue]           NVARCHAR (MAX)   NULL,
    CONSTRAINT [tmp_ms_xx_constraint_XPKASPNetUserPreviousPasswords1] PRIMARY KEY CLUSTERED ([ASPNetUserPreviousPasswordsUID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[ASPNetUserPreviousPasswords])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_ASPNetUserPreviousPasswords] ON;
        INSERT INTO [dbo].[tmp_ms_xx_ASPNetUserPreviousPasswords] ([ASPNetUserPreviousPasswordsUID], [Id], [OldPasswordHash], [intRowStatus], [rowguid], [strMaintenanceFlag], [strReservedAttribute], [AuditCreateUser], [AuditCreateDTM], [AuditUpdateUser], [AuditUpdateDTM], [SourceSystemNameID], [SourceSystemKeyValue])
        SELECT   [ASPNetUserPreviousPasswordsUID],
                 [Id],
                 [OldPasswordHash],
                 [intRowStatus],
                 [rowguid],
                 [strMaintenanceFlag],
                 [strReservedAttribute],
                 [AuditCreateUser],
                 [AuditCreateDTM],
                 [AuditUpdateUser],
                 [AuditUpdateDTM],
                 [SourceSystemNameID],
                 [SourceSystemKeyValue]
        FROM     [dbo].[ASPNetUserPreviousPasswords]
        ORDER BY [ASPNetUserPreviousPasswordsUID] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_ASPNetUserPreviousPasswords] OFF;
    END

DROP TABLE [dbo].[ASPNetUserPreviousPasswords];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_ASPNetUserPreviousPasswords]', N'ASPNetUserPreviousPasswords';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_XPKASPNetUserPreviousPasswords1]', N'XPKASPNetUserPreviousPasswords', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Altering Table [dbo].[trtReferenceType]...';


GO
ALTER TABLE [dbo].[trtReferenceType] DROP COLUMN [EditorSettings];


GO
PRINT N'Starting rebuilding table [dbo].[trtSystemFunctionOperation]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_trtSystemFunctionOperation] (
    [idfsSystemFunctionOperation] BIGINT           IDENTITY (1, 1) NOT NULL,
    [idfsObjectType]              BIGINT           NULL,
    [idfsObjectTypeName]          VARCHAR (200)    NULL,
    [idfsObjectOperation]         BIGINT           NULL,
    [idfsObjectOperationnName]    VARCHAR (200)    NULL,
    [idfsObjectID]                BIGINT           NULL,
    [idfsObjectIDName]            VARCHAR (200)    NULL,
    [strReservedAttribute]        NVARCHAR (MAX)   NULL,
    [intRowStatus]                INT              CONSTRAINT [DF__trtSystem__intRo__2706EE0D] DEFAULT ((0)) NOT NULL,
    [rowguid]                     UNIQUEIDENTIFIER CONSTRAINT [DF__trtSystem__rowgu__27FB1246] DEFAULT (newid()) ROWGUIDCOL NOT NULL,
    [SourceSystemNameID]          BIGINT           NULL,
    [SourceSystemKeyValue]        NVARCHAR (MAX)   NULL,
    [AuditCreateUser]             NVARCHAR (200)   NULL,
    [AuditCreateDTM]              DATETIME         CONSTRAINT [DF_trtSystemFunctionOperation_CreateDTM] DEFAULT (getdate()) NULL,
    [AuditUpdateUser]             NVARCHAR (200)   NULL,
    [AuditUpdateDTM]              DATETIME         NULL,
    CONSTRAINT [tmp_ms_xx_constraint_XPKtrtSystemFunctionOperation1] PRIMARY KEY CLUSTERED ([idfsSystemFunctionOperation] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[trtSystemFunctionOperation])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_trtSystemFunctionOperation] ON;
        INSERT INTO [dbo].[tmp_ms_xx_trtSystemFunctionOperation] ([idfsSystemFunctionOperation], [idfsObjectType], [idfsObjectTypeName], [idfsObjectOperation], [idfsObjectOperationnName], [idfsObjectID], [idfsObjectIDName], [strReservedAttribute], [intRowStatus], [rowguid], [SourceSystemNameID], [SourceSystemKeyValue], [AuditCreateUser], [AuditCreateDTM], [AuditUpdateUser], [AuditUpdateDTM])
        SELECT   [idfsSystemFunctionOperation],
                 [idfsObjectType],
                 [idfsObjectTypeName],
                 [idfsObjectOperation],
                 [idfsObjectOperationnName],
                 [idfsObjectID],
                 [idfsObjectIDName],
                 [strReservedAttribute],
                 [intRowStatus],
                 [rowguid],
                 [SourceSystemNameID],
                 [SourceSystemKeyValue],
                 [AuditCreateUser],
                 [AuditCreateDTM],
                 [AuditUpdateUser],
                 [AuditUpdateDTM]
        FROM     [dbo].[trtSystemFunctionOperation]
        ORDER BY [idfsSystemFunctionOperation] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_trtSystemFunctionOperation] OFF;
    END

DROP TABLE [dbo].[trtSystemFunctionOperation];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_trtSystemFunctionOperation]', N'trtSystemFunctionOperation';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_XPKtrtSystemFunctionOperation1]', N'XPKtrtSystemFunctionOperation', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[tstCheckConstraints]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_tstCheckConstraints] (
    [idfCheckConstraints]    BIGINT           IDENTITY (1, 1) NOT NULL,
    [idfCheckTable]          BIGINT           NULL,
    [strConstraintName]      NVARCHAR (500)   NOT NULL,
    [strTableName1]          NVARCHAR (500)   NOT NULL,
    [strColumnName1]         NVARCHAR (500)   NOT NULL,
    [strTableName2]          NVARCHAR (500)   NULL,
    [strColumnName2]         NVARCHAR (500)   NULL,
    [strAdditionalParameter] NVARCHAR (500)   NULL,
    [strAdditionalJoin]      NVARCHAR (2000)  NULL,
    [strMandatoryFieldAlias] NVARCHAR (500)   NULL,
    [strFixQueryTemplate]    NVARCHAR (MAX)   NULL,
    [blnCanAutoFix]          BIT              NULL,
    [rowguid]                UNIQUEIDENTIFIER CONSTRAINT [DF_tstCheckConstraints_rowguid] DEFAULT (newsequentialid()) ROWGUIDCOL NOT NULL,
    [SourceSystemNameID]     BIGINT           NULL,
    [SourceSystemKeyValue]   NVARCHAR (MAX)   NULL,
    [AuditCreateUser]        NVARCHAR (200)   NULL,
    [AuditCreateDTM]         DATETIME         CONSTRAINT [DF_tstCheckConstraints_CreateDTM] DEFAULT (getdate()) NULL,
    [AuditUpdateUser]        NVARCHAR (200)   NULL,
    [AuditUpdateDTM]         DATETIME         NULL,
    CONSTRAINT [tmp_ms_xx_constraint_XPKtstCheckConstraints1] PRIMARY KEY CLUSTERED ([idfCheckConstraints] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[tstCheckConstraints])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_tstCheckConstraints] ON;
        INSERT INTO [dbo].[tmp_ms_xx_tstCheckConstraints] ([idfCheckConstraints], [idfCheckTable], [strConstraintName], [strTableName1], [strColumnName1], [strTableName2], [strColumnName2], [strAdditionalParameter], [strAdditionalJoin], [strMandatoryFieldAlias], [strFixQueryTemplate], [blnCanAutoFix], [rowguid], [SourceSystemNameID], [SourceSystemKeyValue], [AuditCreateUser], [AuditCreateDTM], [AuditUpdateUser], [AuditUpdateDTM])
        SELECT   [idfCheckConstraints],
                 [idfCheckTable],
                 [strConstraintName],
                 [strTableName1],
                 [strColumnName1],
                 [strTableName2],
                 [strColumnName2],
                 [strAdditionalParameter],
                 [strAdditionalJoin],
                 [strMandatoryFieldAlias],
                 [strFixQueryTemplate],
                 [blnCanAutoFix],
                 [rowguid],
                 [SourceSystemNameID],
                 [SourceSystemKeyValue],
                 [AuditCreateUser],
                 [AuditCreateDTM],
                 [AuditUpdateUser],
                 [AuditUpdateDTM]
        FROM     [dbo].[tstCheckConstraints]
        ORDER BY [idfCheckConstraints] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_tstCheckConstraints] OFF;
    END

DROP TABLE [dbo].[tstCheckConstraints];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_tstCheckConstraints]', N'tstCheckConstraints';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_XPKtstCheckConstraints1]', N'XPKtstCheckConstraints', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Altering Table [dbo].[tstEventActive]...';


GO
ALTER TABLE [dbo].[tstEventActive] ALTER COLUMN [intRowNum] DROP NOT FOR REPLICATION;


GO
PRINT N'Starting rebuilding table [dbo].[tstInvalidObjects]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_tstInvalidObjects] (
    [idfKey]               INT              IDENTITY (1, 1) NOT NULL,
    [strProblemName]       VARCHAR (200)    NOT NULL,
    [strRootObjectName]    VARCHAR (200)    NOT NULL,
    [idfRootObjectID]      BIGINT           NOT NULL,
    [strRootObjectID]      VARCHAR (500)    NULL,
    [strInvalidTableName]  VARCHAR (200)    NOT NULL,
    [idfInvalidObjectID]   BIGINT           NOT NULL,
    [strInvalidConstraint] VARCHAR (500)    NULL,
    [strInvalidFieldName]  VARCHAR (200)    NULL,
    [strInvalidFieldValue] VARCHAR (500)    NULL,
    [strSelectQuery]       VARCHAR (MAX)    NULL,
    [strFixQueryTemplate]  VARCHAR (MAX)    NULL,
    [blnCanAutoFix]        BIT              NULL,
    [blnFixed]             BIT              NULL,
    [rowguid]              UNIQUEIDENTIFIER CONSTRAINT [DF_tstInvalidObjects_rowguid] DEFAULT (newsequentialid()) ROWGUIDCOL NOT NULL,
    [SourceSystemNameID]   BIGINT           NULL,
    [SourceSystemKeyValue] NVARCHAR (MAX)   NULL,
    [AuditCreateUser]      NVARCHAR (200)   NULL,
    [AuditCreateDTM]       DATETIME         CONSTRAINT [DF_tstInvalidObjects_CreateDTM] DEFAULT (getdate()) NULL,
    [AuditUpdateUser]      NVARCHAR (200)   NULL,
    [AuditUpdateDTM]       DATETIME         NULL,
    CONSTRAINT [tmp_ms_xx_constraint_XPKtstInvalidObjects1] PRIMARY KEY CLUSTERED ([idfKey] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[tstInvalidObjects])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_tstInvalidObjects] ON;
        INSERT INTO [dbo].[tmp_ms_xx_tstInvalidObjects] ([idfKey], [strProblemName], [strRootObjectName], [idfRootObjectID], [strRootObjectID], [strInvalidTableName], [idfInvalidObjectID], [strInvalidConstraint], [strInvalidFieldName], [strInvalidFieldValue], [strSelectQuery], [strFixQueryTemplate], [blnCanAutoFix], [blnFixed], [rowguid], [SourceSystemNameID], [SourceSystemKeyValue], [AuditCreateUser], [AuditCreateDTM], [AuditUpdateUser], [AuditUpdateDTM])
        SELECT   [idfKey],
                 [strProblemName],
                 [strRootObjectName],
                 [idfRootObjectID],
                 [strRootObjectID],
                 [strInvalidTableName],
                 [idfInvalidObjectID],
                 [strInvalidConstraint],
                 [strInvalidFieldName],
                 [strInvalidFieldValue],
                 [strSelectQuery],
                 [strFixQueryTemplate],
                 [blnCanAutoFix],
                 [blnFixed],
                 [rowguid],
                 [SourceSystemNameID],
                 [SourceSystemKeyValue],
                 [AuditCreateUser],
                 [AuditCreateDTM],
                 [AuditUpdateUser],
                 [AuditUpdateDTM]
        FROM     [dbo].[tstInvalidObjects]
        ORDER BY [idfKey] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_tstInvalidObjects] OFF;
    END

DROP TABLE [dbo].[tstInvalidObjects];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_tstInvalidObjects]', N'tstInvalidObjects';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_XPKtstInvalidObjects1]', N'XPKtstInvalidObjects', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Default Constraint unnamed constraint on [Report].[tlbReports]...';


GO
ALTER TABLE [Report].[tlbReports]
    ADD DEFAULT (newid()) FOR [rowguid];


GO
PRINT N'Creating Default Constraint unnamed constraint on [Report].[tlbReports]...';


GO
ALTER TABLE [Report].[tlbReports]
    ADD DEFAULT (getdate()) FOR [AuditCreateDTM];


GO
PRINT N'Creating Default Constraint unnamed constraint on [Report].[tlbReportStringNameTranslation]...';


GO
ALTER TABLE [Report].[tlbReportStringNameTranslation]
    ADD DEFAULT (newid()) FOR [rowguid];


GO
PRINT N'Creating Default Constraint unnamed constraint on [Report].[tlbReportStringNameTranslation]...';


GO
ALTER TABLE [Report].[tlbReportStringNameTranslation]
    ADD DEFAULT (getdate()) FOR [AuditCreateDTM];


GO
PRINT N'Creating Foreign Key [dbo].[FK_ASPNetUserPreviousPasswords_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] WITH NOCHECK
    ADD CONSTRAINT [FK_ASPNetUserPreviousPasswords_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ASPNetUserPreviousPasswords_AspNetUsers_Id]...';


GO
ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] WITH NOCHECK
    ADD CONSTRAINT [FK_ASPNetUserPreviousPasswords_AspNetUsers_Id] FOREIGN KEY ([Id]) REFERENCES [dbo].[AspNetUsers] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSystemFunctionOperation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSystemFunctionOperation] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSystemFunctionOperation_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstCheckConstraints_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstCheckConstraints] WITH NOCHECK
    ADD CONSTRAINT [FK_tstCheckConstraints_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstCheckConstraints_tstCheckTables__idfCheckTable]...';


GO
ALTER TABLE [dbo].[tstCheckConstraints] WITH NOCHECK
    ADD CONSTRAINT [FK_tstCheckConstraints_tstCheckTables__idfCheckTable] FOREIGN KEY ([idfCheckTable]) REFERENCES [dbo].[tstCheckTables] ([idfCheckTable]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstInvalidObjects_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstInvalidObjects] WITH NOCHECK
    ADD CONSTRAINT [FK_tstInvalidObjects_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AccessRule_tflSiteGroup_GrantingActorSiteGroupID]...';


GO
ALTER TABLE [dbo].[AccessRule] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRule_tflSiteGroup_GrantingActorSiteGroupID] FOREIGN KEY ([GrantingActorSiteGroupID]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AccessRule_trtBaseReference]...';


GO
ALTER TABLE [dbo].[AccessRule] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRule_trtBaseReference] FOREIGN KEY ([AccessRuleID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_AccessRule_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[AccessRule] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRule_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AccessRule_tstSite_GrantingActorSiteID]...';


GO
ALTER TABLE [dbo].[AccessRule] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRule_tstSite_GrantingActorSiteID] FOREIGN KEY ([GrantingActorSiteID]) REFERENCES [dbo].[tstSite] ([idfsSite]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AccessRuleActor_AccessRule_AccessRuleID]...';


GO
ALTER TABLE [dbo].[AccessRuleActor] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRuleActor_AccessRule_AccessRuleID] FOREIGN KEY ([AccessRuleID]) REFERENCES [dbo].[AccessRule] ([AccessRuleID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AccessRuleActor_tflSiteGroup_ActorSiteGroupID]...';


GO
ALTER TABLE [dbo].[AccessRuleActor] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRuleActor_tflSiteGroup_ActorSiteGroupID] FOREIGN KEY ([ActorSiteGroupID]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AccessRuleActor_tlbEmployeGroup_ActorEmployeeGroupID]...';


GO
ALTER TABLE [dbo].[AccessRuleActor] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRuleActor_tlbEmployeGroup_ActorEmployeeGroupID] FOREIGN KEY ([ActorEmployeeGroupID]) REFERENCES [dbo].[tlbEmployeeGroup] ([idfEmployeeGroup]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AccessRuleActor_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[AccessRuleActor] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRuleActor_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AccessRuleActor_tstSite_ActorSiteID]...';


GO
ALTER TABLE [dbo].[AccessRuleActor] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRuleActor_tstSite_ActorSiteID] FOREIGN KEY ([ActorSiteID]) REFERENCES [dbo].[tstSite] ([idfsSite]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AccessRuleActor_tstUserTable_ActorUserID]...';


GO
ALTER TABLE [dbo].[AccessRuleActor] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRuleActor_tstUserTable_ActorUserID] FOREIGN KEY ([ActorUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AccessRulePermission_AccessRule_AccessRuleID]...';


GO
ALTER TABLE [dbo].[AccessRulePermission] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRulePermission_AccessRule_AccessRuleID] FOREIGN KEY ([AccessRuleID]) REFERENCES [dbo].[AccessRule] ([AccessRuleID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AccessRulePermission_trtBaseReference_AccessPermissionID]...';


GO
ALTER TABLE [dbo].[AccessRulePermission] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRulePermission_trtBaseReference_AccessPermissionID] FOREIGN KEY ([AccessPermissionID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AccessRulePermission_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[AccessRulePermission] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRulePermission_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AppObjectSysFunction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[AppObjectSysFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_AppObjectSysFunction_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AppObjSysFunction_AppObj_AppObjectNameID]...';


GO
ALTER TABLE [dbo].[AppObjectSysFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_AppObjSysFunction_AppObj_AppObjectNameID] FOREIGN KEY ([AppObjectNameID]) REFERENCES [dbo].[LkupEIDSSAppObject] ([AppObjectNameID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AppObjSysFunction_BaseReference_SysFunctionID]...';


GO
ALTER TABLE [dbo].[AppObjectSysFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_AppObjSysFunction_BaseReference_SysFunctionID] FOREIGN KEY ([SystemFunctionID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AppSessionLog_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[AppSessionLog] WITH NOCHECK
    ADD CONSTRAINT [FK_AppSessionLog_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_SesionLog_BaseRef_AppModuleGroupID]...';


GO
ALTER TABLE [dbo].[AppSessionLog] WITH NOCHECK
    ADD CONSTRAINT [FK_SesionLog_BaseRef_AppModuleGroupID] FOREIGN KEY ([AppModuleGroupID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_SessionLog_BaseRef_ModuleConstantID]...';


GO
ALTER TABLE [dbo].[AppSessionLog] WITH NOCHECK
    ADD CONSTRAINT [FK_SessionLog_BaseRef_ModuleConstantID] FOREIGN KEY ([ModuleConstantID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ArchiveSetting_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ArchiveSetting] WITH NOCHECK
    ADD CONSTRAINT [FK_ArchiveSetting_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ASPNetRole_tlbEmployeeGRoup_idfemployeeGroup]...';


GO
ALTER TABLE [dbo].[AspNetRoles] WITH NOCHECK
    ADD CONSTRAINT [FK_ASPNetRole_tlbEmployeeGRoup_idfemployeeGroup] FOREIGN KEY ([idfEmployeeGroup]) REFERENCES [dbo].[tlbEmployeeGroup] ([idfEmployeeGroup]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[AspNetUserClaims] WITH NOCHECK
    ADD CONSTRAINT [FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[AspNetUserLogins] WITH NOCHECK
    ADD CONSTRAINT [FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId]...';


GO
ALTER TABLE [dbo].[AspNetUserRoles] WITH NOCHECK
    ADD CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId] FOREIGN KEY ([RoleId]) REFERENCES [dbo].[AspNetRoles] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[AspNetUserRoles] WITH NOCHECK
    ADD CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_AspNetUsers_tstUserTable_UserID]...';


GO
ALTER TABLE [dbo].[AspNetUsers] WITH NOCHECK
    ADD CONSTRAINT [FK_AspNetUsers_tstUserTable_UserID] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AspNetUserTokens_AspNetUsers_UserId]...';


GO
ALTER TABLE [dbo].[AspNetUserTokens] WITH NOCHECK
    ADD CONSTRAINT [FK_AspNetUserTokens_AspNetUsers_UserId] FOREIGN KEY ([UserId]) REFERENCES [dbo].[AspNetUsers] ([Id]) ON DELETE CASCADE;


GO
PRINT N'Creating Foreign Key [dbo].[FK_AuditEventSystemLog_AppSessionLog]...';


GO
ALTER TABLE [dbo].[AuditEventSystemLog] WITH NOCHECK
    ADD CONSTRAINT [FK_AuditEventSystemLog_AppSessionLog] FOREIGN KEY ([AppSessionLogID]) REFERENCES [dbo].[AppSessionLog] ([AppSessionLogUID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AuditEventSystemLog_BaseRef_AuditObjectID]...';


GO
ALTER TABLE [dbo].[AuditEventSystemLog] WITH NOCHECK
    ADD CONSTRAINT [FK_AuditEventSystemLog_BaseRef_AuditObjectID] FOREIGN KEY ([AuditObjectID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AuditEventSystemLog_idfsModule]...';


GO
ALTER TABLE [dbo].[AuditEventSystemLog] WITH NOCHECK
    ADD CONSTRAINT [FK_AuditEventSystemLog_idfsModule] FOREIGN KEY ([idfsModule]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AuditEventSystemLog_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[AuditEventSystemLog] WITH NOCHECK
    ADD CONSTRAINT [FK_AuditEventSystemLog_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AuditEventSystemLog_tstSite_idfSiteID]...';


GO
ALTER TABLE [dbo].[AuditEventSystemLog] WITH NOCHECK
    ADD CONSTRAINT [FK_AuditEventSystemLog_tstSite_idfSiteID] FOREIGN KEY ([idfSiteID]) REFERENCES [dbo].[tstSite] ([idfsSite]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AuditEventSystemLog_UserTable_idfAppUserID]...';


GO
ALTER TABLE [dbo].[AuditEventSystemLog] WITH NOCHECK
    ADD CONSTRAINT [FK_AuditEventSystemLog_UserTable_idfAppUserID] FOREIGN KEY ([idfAppUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AuditEventUserLog_AuditEventSystemLog_LogUID]...';


GO
ALTER TABLE [dbo].[AuditEventUserLog] WITH NOCHECK
    ADD CONSTRAINT [FK_AuditEventUserLog_AuditEventSystemLog_LogUID] FOREIGN KEY ([AuditEventSystemLogUID]) REFERENCES [dbo].[AuditEventSystemLog] ([AuditEventSystemLogUID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AuditEventUserLog_BaseRef_AuditEventTypeID]...';


GO
ALTER TABLE [dbo].[AuditEventUserLog] WITH NOCHECK
    ADD CONSTRAINT [FK_AuditEventUserLog_BaseRef_AuditEventTypeID] FOREIGN KEY ([AuditEventTypeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AuditEventUserLog_BaseRef_AuditObjectTypeID]...';


GO
ALTER TABLE [dbo].[AuditEventUserLog] WITH NOCHECK
    ADD CONSTRAINT [FK_AuditEventUserLog_BaseRef_AuditObjectTypeID] FOREIGN KEY ([AuditObjectTypeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AuditEventUserLog_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[AuditEventUserLog] WITH NOCHECK
    ADD CONSTRAINT [FK_AuditEventUserLog_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AuditEventUserLog_tstSite_idfSiteID]...';


GO
ALTER TABLE [dbo].[AuditEventUserLog] WITH NOCHECK
    ADD CONSTRAINT [FK_AuditEventUserLog_tstSite_idfSiteID] FOREIGN KEY ([idfSiteID]) REFERENCES [dbo].[tstSite] ([idfsSite]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AuditEventUserLog_UserTable_idfAppUserID]...';


GO
ALTER TABLE [dbo].[AuditEventUserLog] WITH NOCHECK
    ADD CONSTRAINT [FK_AuditEventUserLog_UserTable_idfAppUserID] FOREIGN KEY ([idfAppUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_DiagnosisGroupToGender_trtBaseReference_DiagnosisGroupID]...';


GO
ALTER TABLE [dbo].[DiagnosisGroupToGender] WITH NOCHECK
    ADD CONSTRAINT [FK_DiagnosisGroupToGender_trtBaseReference_DiagnosisGroupID] FOREIGN KEY ([DisgnosisGroupID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_DiagnosisGroupToGender_trtBaseReference_GenderID]...';


GO
ALTER TABLE [dbo].[DiagnosisGroupToGender] WITH NOCHECK
    ADD CONSTRAINT [FK_DiagnosisGroupToGender_trtBaseReference_GenderID] FOREIGN KEY ([GenderID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_DiagnosisGroupToGender_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[DiagnosisGroupToGender] WITH NOCHECK
    ADD CONSTRAINT [FK_DiagnosisGroupToGender_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_dotNetAppenderLog_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[dotNetAppenderLog] WITH NOCHECK
    ADD CONSTRAINT [FK_dotNetAppenderLog_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_EmployeeToInstitution_AspNetUserId]...';


GO
ALTER TABLE [dbo].[EmployeeToInstitution] WITH NOCHECK
    ADD CONSTRAINT [FK_EmployeeToInstitution_AspNetUserId] FOREIGN KEY ([aspNetUserId]) REFERENCES [dbo].[AspNetUsers] ([Id]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_EmployeeToInstitution_Office]...';


GO
ALTER TABLE [dbo].[EmployeeToInstitution] WITH NOCHECK
    ADD CONSTRAINT [FK_EmployeeToInstitution_Office] FOREIGN KEY ([idfInstitution]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_EmployeeToInstitution_UserId]...';


GO
ALTER TABLE [dbo].[EmployeeToInstitution] WITH NOCHECK
    ADD CONSTRAINT [FK_EmployeeToInstitution_UserId] FOREIGN KEY ([idfUserId]) REFERENCES [dbo].[tstUserTable] ([idfUserID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_EventSubscription_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[EventSubscription] WITH NOCHECK
    ADD CONSTRAINT [FK_EventSubscription_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_EventSubscription_trtEventType_EventNameID]...';


GO
ALTER TABLE [dbo].[EventSubscription] WITH NOCHECK
    ADD CONSTRAINT [FK_EventSubscription_trtEventType_EventNameID] FOREIGN KEY ([EventNameID]) REFERENCES [dbo].[trtEventType] ([idfsEventTypeID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_EventSubscription_tstUserTable]...';


GO
ALTER TABLE [dbo].[EventSubscription] WITH NOCHECK
    ADD CONSTRAINT [FK_EventSubscription_tstUserTable] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDecorElement_ffFormTemplate__idfsFormTemplate_R_1373]...';


GO
ALTER TABLE [dbo].[ffDecorElement] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDecorElement_ffFormTemplate__idfsFormTemplate_R_1373] FOREIGN KEY ([idfsFormTemplate]) REFERENCES [dbo].[ffFormTemplate] ([idfsFormTemplate]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDecorElement_ffSection__idfsSection_R_1379]...';


GO
ALTER TABLE [dbo].[ffDecorElement] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDecorElement_ffSection__idfsSection_R_1379] FOREIGN KEY ([idfsSection]) REFERENCES [dbo].[ffSection] ([idfsSection]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDecorElement_trtBaseReference__idfsDecorElementType_R_1376]...';


GO
ALTER TABLE [dbo].[ffDecorElement] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDecorElement_trtBaseReference__idfsDecorElementType_R_1376] FOREIGN KEY ([idfsDecorElementType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDecorElement_trtBaseReference__idfsLanguage_R_1375]...';


GO
ALTER TABLE [dbo].[ffDecorElement] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDecorElement_trtBaseReference__idfsLanguage_R_1375] FOREIGN KEY ([idfsLanguage]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDecorElement_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffDecorElement] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDecorElement_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDecorElementLine_ffDecorElement__idfDecorElement_R_1401]...';


GO
ALTER TABLE [dbo].[ffDecorElementLine] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDecorElementLine_ffDecorElement__idfDecorElement_R_1401] FOREIGN KEY ([idfDecorElement]) REFERENCES [dbo].[ffDecorElement] ([idfDecorElement]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDecorElementLine_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffDecorElementLine] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDecorElementLine_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDecorElementText_ffDecorElement__idfDecorElement_R_1374]...';


GO
ALTER TABLE [dbo].[ffDecorElementText] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDecorElementText_ffDecorElement__idfDecorElement_R_1374] FOREIGN KEY ([idfDecorElement]) REFERENCES [dbo].[ffDecorElement] ([idfDecorElement]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDecorElementText_trtBaseReference__idfsBaseReference_R_1389]...';


GO
ALTER TABLE [dbo].[ffDecorElementText] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDecorElementText_trtBaseReference__idfsBaseReference_R_1389] FOREIGN KEY ([idfsBaseReference]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDecorElementText_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffDecorElementText] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDecorElementText_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDeterminantType_gisReferenceType__idfsGISReferenceType_R_1669]...';


GO
ALTER TABLE [dbo].[ffDeterminantType] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDeterminantType_gisReferenceType__idfsGISReferenceType_R_1669] FOREIGN KEY ([idfsGISReferenceType]) REFERENCES [dbo].[gisReferenceType] ([idfsGISReferenceType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDeterminantType_trtBaseReference__idfsFormType_R_1660]...';


GO
ALTER TABLE [dbo].[ffDeterminantType] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDeterminantType_trtBaseReference__idfsFormType_R_1660] FOREIGN KEY ([idfsFormType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDeterminantType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffDeterminantType] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDeterminantType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDeterminantType_trtReferenceType__idfsReferenceType_R_950]...';


GO
ALTER TABLE [dbo].[ffDeterminantType] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDeterminantType_trtReferenceType__idfsReferenceType_R_950] FOREIGN KEY ([idfsReferenceType]) REFERENCES [dbo].[trtReferenceType] ([idfsReferenceType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDeterminantValue_gisBaseReference__idfsGISBaseReference_R_1670]...';


GO
ALTER TABLE [dbo].[ffDeterminantValue] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDeterminantValue_gisBaseReference__idfsGISBaseReference_R_1670] FOREIGN KEY ([idfsGISBaseReference]) REFERENCES [dbo].[gisBaseReference] ([idfsGISBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDeterminantValue_trtBaseReference__idfsBaseReference_R_949]...';


GO
ALTER TABLE [dbo].[ffDeterminantValue] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDeterminantValue_trtBaseReference__idfsBaseReference_R_949] FOREIGN KEY ([idfsBaseReference]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffDeterminantValue_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffDeterminantValue] WITH NOCHECK
    ADD CONSTRAINT [FK_ffDeterminantValue_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_FFormControlValue_FFormTemplate]...';


GO
ALTER TABLE [dbo].[ffDeterminantValue] WITH NOCHECK
    ADD CONSTRAINT [FK_FFormControlValue_FFormTemplate] FOREIGN KEY ([idfsFormTemplate]) REFERENCES [dbo].[ffFormTemplate] ([idfsFormTemplate]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffFormTemplate_trtBaseReference__idfsFormTemplate_R_1385]...';


GO
ALTER TABLE [dbo].[ffFormTemplate] WITH NOCHECK
    ADD CONSTRAINT [FK_ffFormTemplate_trtBaseReference__idfsFormTemplate_R_1385] FOREIGN KEY ([idfsFormTemplate]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffFormTemplate_trtBaseReference__idfsFormType_R_1656]...';


GO
ALTER TABLE [dbo].[ffFormTemplate] WITH NOCHECK
    ADD CONSTRAINT [FK_ffFormTemplate_trtBaseReference__idfsFormType_R_1656] FOREIGN KEY ([idfsFormType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffFormTemplate_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffFormTemplate] WITH NOCHECK
    ADD CONSTRAINT [FK_ffFormTemplate_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameter_ffParameterType__idfsParameterType_R_21]...';


GO
ALTER TABLE [dbo].[ffParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameter_ffParameterType__idfsParameterType_R_21] FOREIGN KEY ([idfsParameterType]) REFERENCES [dbo].[ffParameterType] ([idfsParameterType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameter_ffSection__idfsSection_R_1380]...';


GO
ALTER TABLE [dbo].[ffParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameter_ffSection__idfsSection_R_1380] FOREIGN KEY ([idfsSection]) REFERENCES [dbo].[ffSection] ([idfsSection]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameter_trtBaseReference__idfsEditor_R_1387]...';


GO
ALTER TABLE [dbo].[ffParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameter_trtBaseReference__idfsEditor_R_1387] FOREIGN KEY ([idfsEditor]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameter_trtBaseReference__idfsFormType_R_1658]...';


GO
ALTER TABLE [dbo].[ffParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameter_trtBaseReference__idfsFormType_R_1658] FOREIGN KEY ([idfsFormType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameter_trtBaseReference__idfsParameter_R_1382]...';


GO
ALTER TABLE [dbo].[ffParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameter_trtBaseReference__idfsParameter_R_1382] FOREIGN KEY ([idfsParameter]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameter_trtBaseReference__idfsParameterCaption_R_1383]...';


GO
ALTER TABLE [dbo].[ffParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameter_trtBaseReference__idfsParameterCaption_R_1383] FOREIGN KEY ([idfsParameterCaption]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameter_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameter_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterDesignOption_ffFormTemplate__idfsFormTemplate_R_1361]...';


GO
ALTER TABLE [dbo].[ffParameterDesignOption] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterDesignOption_ffFormTemplate__idfsFormTemplate_R_1361] FOREIGN KEY ([idfsFormTemplate]) REFERENCES [dbo].[ffFormTemplate] ([idfsFormTemplate]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterDesignOption_ffParameter__idfsParameter_R_1360]...';


GO
ALTER TABLE [dbo].[ffParameterDesignOption] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterDesignOption_ffParameter__idfsParameter_R_1360] FOREIGN KEY ([idfsParameter]) REFERENCES [dbo].[ffParameter] ([idfsParameter]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterDesignOption_trtBaseReference__idfsLanguage_R_1381]...';


GO
ALTER TABLE [dbo].[ffParameterDesignOption] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterDesignOption_trtBaseReference__idfsLanguage_R_1381] FOREIGN KEY ([idfsLanguage]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterDesignOption_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffParameterDesignOption] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterDesignOption_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterFixedPresetValue_ffParameterType__idfsParameterType_R_925]...';


GO
ALTER TABLE [dbo].[ffParameterFixedPresetValue] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterFixedPresetValue_ffParameterType__idfsParameterType_R_925] FOREIGN KEY ([idfsParameterType]) REFERENCES [dbo].[ffParameterType] ([idfsParameterType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterFixedPresetValue_trtBaseReference__idfsParameterFixedPresetValue_R_1398]...';


GO
ALTER TABLE [dbo].[ffParameterFixedPresetValue] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterFixedPresetValue_trtBaseReference__idfsParameterFixedPresetValue_R_1398] FOREIGN KEY ([idfsParameterFixedPresetValue]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterFixedPresetValue_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffParameterFixedPresetValue] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterFixedPresetValue_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterForAction_ffParameterForTemplate__idfsParameter_idfsFormTemplate_R]...';


GO
ALTER TABLE [dbo].[ffParameterForAction] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterForAction_ffParameterForTemplate__idfsParameter_idfsFormTemplate_R] FOREIGN KEY ([idfsParameter], [idfsFormTemplate]) REFERENCES [dbo].[ffParameterForTemplate] ([idfsParameter], [idfsFormTemplate]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterForAction_ffRule__idfsRule_R_820]...';


GO
ALTER TABLE [dbo].[ffParameterForAction] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterForAction_ffRule__idfsRule_R_820] FOREIGN KEY ([idfsRule]) REFERENCES [dbo].[ffRule] ([idfsRule]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterForAction_trtBaseReference__idfsRuleAction_R_1392]...';


GO
ALTER TABLE [dbo].[ffParameterForAction] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterForAction_trtBaseReference__idfsRuleAction_R_1392] FOREIGN KEY ([idfsRuleAction]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterForAction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffParameterForAction] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterForAction_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterForFunction_ffParameterForTemplate__idfsParameter___________________________________________________idfsFormTempla]...';


GO
ALTER TABLE [dbo].[ffParameterForFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterForFunction_ffParameterForTemplate__idfsParameter___________________________________________________idfsFormTempla] FOREIGN KEY ([idfsParameter], [idfsFormTemplate]) REFERENCES [dbo].[ffParameterForTemplate] ([idfsParameter], [idfsFormTemplate]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterForFunction_ffRule__idfsRule_R_1647]...';


GO
ALTER TABLE [dbo].[ffParameterForFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterForFunction_ffRule__idfsRule_R_1647] FOREIGN KEY ([idfsRule]) REFERENCES [dbo].[ffRule] ([idfsRule]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterForFunction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffParameterForFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterForFunction_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterForTemplate_ffFormTemplate__idfsFormTemplate_R_91]...';


GO
ALTER TABLE [dbo].[ffParameterForTemplate] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterForTemplate_ffFormTemplate__idfsFormTemplate_R_91] FOREIGN KEY ([idfsFormTemplate]) REFERENCES [dbo].[ffFormTemplate] ([idfsFormTemplate]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterForTemplate_ffParameter__idfsParameter_R_2]...';


GO
ALTER TABLE [dbo].[ffParameterForTemplate] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterForTemplate_ffParameter__idfsParameter_R_2] FOREIGN KEY ([idfsParameter]) REFERENCES [dbo].[ffParameter] ([idfsParameter]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterForTemplate_trtBaseReference__idfsEditMode_R_1388]...';


GO
ALTER TABLE [dbo].[ffParameterForTemplate] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterForTemplate_trtBaseReference__idfsEditMode_R_1388] FOREIGN KEY ([idfsEditMode]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterForTemplate_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffParameterForTemplate] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterForTemplate_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterType_trtBaseReference__idfsParameterType_R_1395]...';


GO
ALTER TABLE [dbo].[ffParameterType] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterType_trtBaseReference__idfsParameterType_R_1395] FOREIGN KEY ([idfsParameterType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffParameterType] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffParameterType_trtReferenceType__idfsReferenceType_R_927]...';


GO
ALTER TABLE [dbo].[ffParameterType] WITH NOCHECK
    ADD CONSTRAINT [FK_ffParameterType_trtReferenceType__idfsReferenceType_R_927] FOREIGN KEY ([idfsReferenceType]) REFERENCES [dbo].[trtReferenceType] ([idfsReferenceType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_FFRule_FFormTemplate]...';


GO
ALTER TABLE [dbo].[ffRule] WITH NOCHECK
    ADD CONSTRAINT [FK_FFRule_FFormTemplate] FOREIGN KEY ([idfsFormTemplate]) REFERENCES [dbo].[ffFormTemplate] ([idfsFormTemplate]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffRule_ffRuleFunction__idfsRuleFunction_R_1646]...';


GO
ALTER TABLE [dbo].[ffRule] WITH NOCHECK
    ADD CONSTRAINT [FK_ffRule_ffRuleFunction__idfsRuleFunction_R_1646] FOREIGN KEY ([idfsRuleFunction]) REFERENCES [dbo].[ffRuleFunction] ([idfsRuleFunction]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffRule_trtBaseReference__idfsCheckPoint_R_1390]...';


GO
ALTER TABLE [dbo].[ffRule] WITH NOCHECK
    ADD CONSTRAINT [FK_ffRule_trtBaseReference__idfsCheckPoint_R_1390] FOREIGN KEY ([idfsCheckPoint]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffRule_trtBaseReference__idfsRule_R_1394]...';


GO
ALTER TABLE [dbo].[ffRule] WITH NOCHECK
    ADD CONSTRAINT [FK_ffRule_trtBaseReference__idfsRule_R_1394] FOREIGN KEY ([idfsRule]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffRule_trtBaseReference__idfsRuleMessage_R_1391]...';


GO
ALTER TABLE [dbo].[ffRule] WITH NOCHECK
    ADD CONSTRAINT [FK_ffRule_trtBaseReference__idfsRuleMessage_R_1391] FOREIGN KEY ([idfsRuleMessage]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffRule_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffRule] WITH NOCHECK
    ADD CONSTRAINT [FK_ffRule_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffRuleConstant_ffRule__idfsRule_R_1648]...';


GO
ALTER TABLE [dbo].[ffRuleConstant] WITH NOCHECK
    ADD CONSTRAINT [FK_ffRuleConstant_ffRule__idfsRule_R_1648] FOREIGN KEY ([idfsRule]) REFERENCES [dbo].[ffRule] ([idfsRule]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffRuleConstant_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffRuleConstant] WITH NOCHECK
    ADD CONSTRAINT [FK_ffRuleConstant_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffRuleFunction_trtBaseReference__idfsRuleFunction_R_1393]...';


GO
ALTER TABLE [dbo].[ffRuleFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_ffRuleFunction_trtBaseReference__idfsRuleFunction_R_1393] FOREIGN KEY ([idfsRuleFunction]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffRuleFunction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffRuleFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_ffRuleFunction_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffSection_ffSection__idfsParentSection_R_1362]...';


GO
ALTER TABLE [dbo].[ffSection] WITH NOCHECK
    ADD CONSTRAINT [FK_ffSection_ffSection__idfsParentSection_R_1362] FOREIGN KEY ([idfsParentSection]) REFERENCES [dbo].[ffSection] ([idfsSection]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffSection_trtBaseReference__idfsFormType_R_1659]...';


GO
ALTER TABLE [dbo].[ffSection] WITH NOCHECK
    ADD CONSTRAINT [FK_ffSection_trtBaseReference__idfsFormType_R_1659] FOREIGN KEY ([idfsFormType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffSection_trtBaseReference__idfsSection_R_1378]...';


GO
ALTER TABLE [dbo].[ffSection] WITH NOCHECK
    ADD CONSTRAINT [FK_ffSection_trtBaseReference__idfsSection_R_1378] FOREIGN KEY ([idfsSection]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffSection_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffSection] WITH NOCHECK
    ADD CONSTRAINT [FK_ffSection_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffSection_trtMatrixType__idfsMatrixType]...';


GO
ALTER TABLE [dbo].[ffSection] WITH NOCHECK
    ADD CONSTRAINT [FK_ffSection_trtMatrixType__idfsMatrixType] FOREIGN KEY ([idfsMatrixType]) REFERENCES [dbo].[trtMatrixType] ([idfsMatrixType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffSectionDesignOption_ffSectionForTemplate__idfsFormTemplate________________________________________________idfsSection_R_163]...';


GO
ALTER TABLE [dbo].[ffSectionDesignOption] WITH NOCHECK
    ADD CONSTRAINT [FK_ffSectionDesignOption_ffSectionForTemplate__idfsFormTemplate________________________________________________idfsSection_R_163] FOREIGN KEY ([idfsFormTemplate], [idfsSection]) REFERENCES [dbo].[ffSectionForTemplate] ([idfsFormTemplate], [idfsSection]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffSectionDesignOption_trtBaseReference__idfsLanguage_R_1377]...';


GO
ALTER TABLE [dbo].[ffSectionDesignOption] WITH NOCHECK
    ADD CONSTRAINT [FK_ffSectionDesignOption_trtBaseReference__idfsLanguage_R_1377] FOREIGN KEY ([idfsLanguage]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffSectionDesignOption_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffSectionDesignOption] WITH NOCHECK
    ADD CONSTRAINT [FK_ffSectionDesignOption_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffSectionForAction_ffRule__idfsRule_R_1403]...';


GO
ALTER TABLE [dbo].[ffSectionForAction] WITH NOCHECK
    ADD CONSTRAINT [FK_ffSectionForAction_ffRule__idfsRule_R_1403] FOREIGN KEY ([idfsRule]) REFERENCES [dbo].[ffRule] ([idfsRule]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffSectionForAction_ffSectionForTemplate__idfsFormTemplate_____________________________________________idfsSection_R_1402]...';


GO
ALTER TABLE [dbo].[ffSectionForAction] WITH NOCHECK
    ADD CONSTRAINT [FK_ffSectionForAction_ffSectionForTemplate__idfsFormTemplate_____________________________________________idfsSection_R_1402] FOREIGN KEY ([idfsFormTemplate], [idfsSection]) REFERENCES [dbo].[ffSectionForTemplate] ([idfsFormTemplate], [idfsSection]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffSectionForAction_trtBaseReference__idfsRuleAction_R_1404]...';


GO
ALTER TABLE [dbo].[ffSectionForAction] WITH NOCHECK
    ADD CONSTRAINT [FK_ffSectionForAction_trtBaseReference__idfsRuleAction_R_1404] FOREIGN KEY ([idfsRuleAction]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffSectionForAction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffSectionForAction] WITH NOCHECK
    ADD CONSTRAINT [FK_ffSectionForAction_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffSectionForTemplate_ffFormTemplate__idfsFormTemplate_R_1400]...';


GO
ALTER TABLE [dbo].[ffSectionForTemplate] WITH NOCHECK
    ADD CONSTRAINT [FK_ffSectionForTemplate_ffFormTemplate__idfsFormTemplate_R_1400] FOREIGN KEY ([idfsFormTemplate]) REFERENCES [dbo].[ffFormTemplate] ([idfsFormTemplate]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffSectionForTemplate_ffSection__idfsSection_R_1399]...';


GO
ALTER TABLE [dbo].[ffSectionForTemplate] WITH NOCHECK
    ADD CONSTRAINT [FK_ffSectionForTemplate_ffSection__idfsSection_R_1399] FOREIGN KEY ([idfsSection]) REFERENCES [dbo].[ffSection] ([idfsSection]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_ffSectionForTemplate_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ffSectionForTemplate] WITH NOCHECK
    ADD CONSTRAINT [FK_ffSectionForTemplate_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisBaseReference_gisReferenceType__idfsGISReferenceType_R_1632]...';


GO
ALTER TABLE [dbo].[gisBaseReference] WITH NOCHECK
    ADD CONSTRAINT [FK_gisBaseReference_gisReferenceType__idfsGISReferenceType_R_1632] FOREIGN KEY ([idfsGISReferenceType]) REFERENCES [dbo].[gisReferenceType] ([idfsGISReferenceType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisBaseReference_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisBaseReference] WITH NOCHECK
    ADD CONSTRAINT [FK_gisBaseReference_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisCountry_gisBaseReference__idfsCountry_R_1634]...';


GO
ALTER TABLE [dbo].[gisCountry] WITH NOCHECK
    ADD CONSTRAINT [FK_gisCountry_gisBaseReference__idfsCountry_R_1634] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisBaseReference] ([idfsGISBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisCountry_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisCountry] WITH NOCHECK
    ADD CONSTRAINT [FK_gisCountry_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisDistrictSubdistrict_gisRayon__idfsGeoObject]...';


GO
ALTER TABLE [dbo].[gisDistrictSubdistrict] WITH NOCHECK
    ADD CONSTRAINT [FK_gisDistrictSubdistrict_gisRayon__idfsGeoObject] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisRayon] ([idfsRayon]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisDistrictSubdistrict_gisRayon__idfsParent]...';


GO
ALTER TABLE [dbo].[gisDistrictSubdistrict] WITH NOCHECK
    ADD CONSTRAINT [FK_gisDistrictSubdistrict_gisRayon__idfsParent] FOREIGN KEY ([idfsParent]) REFERENCES [dbo].[gisRayon] ([idfsRayon]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisDistrictSubdistrict_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisDistrictSubdistrict] WITH NOCHECK
    ADD CONSTRAINT [FK_gisDistrictSubdistrict_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisLegendSymbol_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisLegendSymbol] WITH NOCHECK
    ADD CONSTRAINT [FK_gisLegendSymbol_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisMainCityForRayon_gisRayon__idfsRayon]...';


GO
ALTER TABLE [dbo].[gisMainCityForRayon] WITH NOCHECK
    ADD CONSTRAINT [FK_gisMainCityForRayon_gisRayon__idfsRayon] FOREIGN KEY ([idfsRayon]) REFERENCES [dbo].[gisRayon] ([idfsRayon]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisMainCityForRayon_gisSettlement__idfsMainSettlement]...';


GO
ALTER TABLE [dbo].[gisMainCityForRayon] WITH NOCHECK
    ADD CONSTRAINT [FK_gisMainCityForRayon_gisSettlement__idfsMainSettlement] FOREIGN KEY ([idfsMainSettlement]) REFERENCES [dbo].[gisSettlement] ([idfsSettlement]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisMetadata_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisMetadata] WITH NOCHECK
    ADD CONSTRAINT [FK_gisMetadata_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisNewID_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisNewID] WITH NOCHECK
    ADD CONSTRAINT [FK_gisNewID_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisOtherBaseReference_gisReferenceType__idfsGISReferenceType_R_1678]...';


GO
ALTER TABLE [dbo].[gisOtherBaseReference] WITH NOCHECK
    ADD CONSTRAINT [FK_gisOtherBaseReference_gisReferenceType__idfsGISReferenceType_R_1678] FOREIGN KEY ([idfsGISReferenceType]) REFERENCES [dbo].[gisReferenceType] ([idfsGISReferenceType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisOtherBaseReference_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisOtherBaseReference] WITH NOCHECK
    ADD CONSTRAINT [FK_gisOtherBaseReference_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisOtherStringNameTranslation_gisBaseReference__idfsLanguage_R_1680]...';


GO
ALTER TABLE [dbo].[gisOtherStringNameTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_gisOtherStringNameTranslation_gisBaseReference__idfsLanguage_R_1680] FOREIGN KEY ([idfsLanguage]) REFERENCES [dbo].[gisBaseReference] ([idfsGISBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisOtherStringNameTranslation_gisOtherBaseReference__idfsGISOtherBaseReference_R_1679]...';


GO
ALTER TABLE [dbo].[gisOtherStringNameTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_gisOtherStringNameTranslation_gisOtherBaseReference__idfsGISOtherBaseReference_R_1679] FOREIGN KEY ([idfsGISOtherBaseReference]) REFERENCES [dbo].[gisOtherBaseReference] ([idfsGISOtherBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisOtherStringNameTranslation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisOtherStringNameTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_gisOtherStringNameTranslation_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisRayon_gisBaseReference__idfsRayon_R_1636]...';


GO
ALTER TABLE [dbo].[gisRayon] WITH NOCHECK
    ADD CONSTRAINT [FK_gisRayon_gisBaseReference__idfsRayon_R_1636] FOREIGN KEY ([idfsRayon]) REFERENCES [dbo].[gisBaseReference] ([idfsGISBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisRayon_gisCountry__idfsCountry_R_233]...';


GO
ALTER TABLE [dbo].[gisRayon] WITH NOCHECK
    ADD CONSTRAINT [FK_gisRayon_gisCountry__idfsCountry_R_233] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisRayon_gisRegion__idfsRegion_R_121]...';


GO
ALTER TABLE [dbo].[gisRayon] WITH NOCHECK
    ADD CONSTRAINT [FK_gisRayon_gisRegion__idfsRegion_R_121] FOREIGN KEY ([idfsRegion]) REFERENCES [dbo].[gisRegion] ([idfsRegion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisRayon_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisRayon] WITH NOCHECK
    ADD CONSTRAINT [FK_gisRayon_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisReferenceType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisReferenceType] WITH NOCHECK
    ADD CONSTRAINT [FK_gisReferenceType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisRegion_gisBaseReference__idfsRegion_R_1635]...';


GO
ALTER TABLE [dbo].[gisRegion] WITH NOCHECK
    ADD CONSTRAINT [FK_gisRegion_gisBaseReference__idfsRegion_R_1635] FOREIGN KEY ([idfsRegion]) REFERENCES [dbo].[gisBaseReference] ([idfsGISBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisRegion_gisCountry__idfsCountry_R_232]...';


GO
ALTER TABLE [dbo].[gisRegion] WITH NOCHECK
    ADD CONSTRAINT [FK_gisRegion_gisCountry__idfsCountry_R_232] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisRegion_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisRegion] WITH NOCHECK
    ADD CONSTRAINT [FK_gisRegion_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisSettlement_gisBaseReference__idfsSettlement_R_1637]...';


GO
ALTER TABLE [dbo].[gisSettlement] WITH NOCHECK
    ADD CONSTRAINT [FK_gisSettlement_gisBaseReference__idfsSettlement_R_1637] FOREIGN KEY ([idfsSettlement]) REFERENCES [dbo].[gisBaseReference] ([idfsGISBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisSettlement_gisBaseReference__idfsSettlementType_R_1638]...';


GO
ALTER TABLE [dbo].[gisSettlement] WITH NOCHECK
    ADD CONSTRAINT [FK_gisSettlement_gisBaseReference__idfsSettlementType_R_1638] FOREIGN KEY ([idfsSettlementType]) REFERENCES [dbo].[gisBaseReference] ([idfsGISBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisSettlement_gisCountry__idfsCountry_R_7]...';


GO
ALTER TABLE [dbo].[gisSettlement] WITH NOCHECK
    ADD CONSTRAINT [FK_gisSettlement_gisCountry__idfsCountry_R_7] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisSettlement_gisRayon__idfsRayon_R_9]...';


GO
ALTER TABLE [dbo].[gisSettlement] WITH NOCHECK
    ADD CONSTRAINT [FK_gisSettlement_gisRayon__idfsRayon_R_9] FOREIGN KEY ([idfsRayon]) REFERENCES [dbo].[gisRayon] ([idfsRayon]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisSettlement_gisRegion__idfsRegion_R_8]...';


GO
ALTER TABLE [dbo].[gisSettlement] WITH NOCHECK
    ADD CONSTRAINT [FK_gisSettlement_gisRegion__idfsRegion_R_8] FOREIGN KEY ([idfsRegion]) REFERENCES [dbo].[gisRegion] ([idfsRegion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisSettlement_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisSettlement] WITH NOCHECK
    ADD CONSTRAINT [FK_gisSettlement_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisStringNameTranslation_gisBaseReference__idfsGISBaseReference_R_1639]...';


GO
ALTER TABLE [dbo].[gisStringNameTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_gisStringNameTranslation_gisBaseReference__idfsGISBaseReference_R_1639] FOREIGN KEY ([idfsGISBaseReference]) REFERENCES [dbo].[gisBaseReference] ([idfsGISBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisStringNameTranslation_gisBaseReference__idfsLanguage_R_1640]...';


GO
ALTER TABLE [dbo].[gisStringNameTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_gisStringNameTranslation_gisBaseReference__idfsLanguage_R_1640] FOREIGN KEY ([idfsLanguage]) REFERENCES [dbo].[gisBaseReference] ([idfsGISBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisStringNameTranslation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisStringNameTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_gisStringNameTranslation_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisUserLayer_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisUserLayer] WITH NOCHECK
    ADD CONSTRAINT [FK_gisUserLayer_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisUserLayer_tstUserTable]...';


GO
ALTER TABLE [dbo].[gisUserLayer] WITH NOCHECK
    ADD CONSTRAINT [FK_gisUserLayer_tstUserTable] FOREIGN KEY ([idfUser]) REFERENCES [dbo].[tstUserTable] ([idfUserID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWHOMap_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWHOMap] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWHOMap_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_idfsLocation_gisLocation]...';


GO
ALTER TABLE [dbo].[gisWHOMap] WITH NOCHECK
    ADD CONSTRAINT [FK_idfsLocation_gisLocation] FOREIGN KEY ([idfsLocation]) REFERENCES [dbo].[gisLocation] ([idfsLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK__gisWKBCou__idfsG__37E6D44C]...';


GO
ALTER TABLE [dbo].[gisWKBCountry] WITH NOCHECK
    ADD CONSTRAINT [FK__gisWKBCou__idfsG__37E6D44C] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBCountry_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBCountry] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBCountry_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBDistrict_gisBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBDistrict] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBDistrict_gisBaseReference] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisBaseReference] ([idfsGISBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBDistrict_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBDistrict] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBDistrict_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBDistrictReady_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBDistrictReady] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBDistrictReady_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBEarthRoad_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBEarthRoad] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBEarthRoad_gisCountry] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBEarthRoad_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBEarthRoad] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBEarthRoad_gisOtherBaseReference] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisOtherBaseReference] ([idfsGISOtherBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBEarthRoad_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBEarthRoad] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBEarthRoad_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBForest_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBForest] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBForest_gisCountry] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBForest_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBForest] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBForest_gisOtherBaseReference] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisOtherBaseReference] ([idfsGISOtherBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBForest_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBForest] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBForest_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBHighway_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBHighway] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBHighway_gisCountry] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBHighway_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBHighway] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBHighway_gisOtherBaseReference] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisOtherBaseReference] ([idfsGISOtherBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBHighway_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBHighway] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBHighway_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBInlandWater_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBInlandWater] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBInlandWater_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBLake_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBLake] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBLake_gisCountry] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBLake_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBLake] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBLake_gisOtherBaseReference] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisOtherBaseReference] ([idfsGISOtherBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBLake_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBLake] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBLake_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBLanduse_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBLanduse] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBLanduse_gisCountry] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBLanduse_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBLanduse] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBLanduse_gisOtherBaseReference] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisOtherBaseReference] ([idfsGISOtherBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBLanduse_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBLanduse] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBLanduse_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBMainRiver_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBMainRiver] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBMainRiver_gisCountry] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBMainRiver_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBMainRiver] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBMainRiver_gisOtherBaseReference] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisOtherBaseReference] ([idfsGISOtherBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBMainRiver_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBMainRiver] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBMainRiver_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBMajorRoad_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBMajorRoad] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBMajorRoad_gisCountry] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBMajorRoad_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBMajorRoad] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBMajorRoad_gisOtherBaseReference] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisOtherBaseReference] ([idfsGISOtherBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBMajorRoad_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBMajorRoad] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBMajorRoad_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBPath_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBPath] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBPath_gisCountry] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBPath_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBPath] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBPath_gisOtherBaseReference] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisOtherBaseReference] ([idfsGISOtherBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBPath_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBPath] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBPath_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRailroad_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBRailroad] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRailroad_gisCountry] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRailroad_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBRailroad] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRailroad_gisOtherBaseReference] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisOtherBaseReference] ([idfsGISOtherBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRailroad_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRailroad] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRailroad_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK__gisWKBRay__idfsG__35FE8BDA]...';


GO
ALTER TABLE [dbo].[gisWKBRayon] WITH NOCHECK
    ADD CONSTRAINT [FK__gisWKBRay__idfsG__35FE8BDA] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisRayon] ([idfsRayon]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRayon_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRayon] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRayon_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRayonReady_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRayonReady] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRayonReady_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK__gisWKBReg__idfsG__34164368]...';


GO
ALTER TABLE [dbo].[gisWKBRegion] WITH NOCHECK
    ADD CONSTRAINT [FK__gisWKBReg__idfsG__34164368] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisRegion] ([idfsRegion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRegion_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRegion] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRegion_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRegionReady_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRegionReady] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRegionReady_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRiver_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBRiver] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRiver_gisCountry] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRiver_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBRiver] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRiver_gisOtherBaseReference] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisOtherBaseReference] ([idfsGISOtherBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRiver_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRiver] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRiver_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRiverPolygon_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBRiverPolygon] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRiverPolygon_gisCountry] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRiverPolygon_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBRiverPolygon] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRiverPolygon_gisOtherBaseReference] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisOtherBaseReference] ([idfsGISOtherBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRiverPolygon_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRiverPolygon] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRiverPolygon_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRuralDistrict_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBRuralDistrict] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRuralDistrict_gisCountry] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRuralDistrict_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBRuralDistrict] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRuralDistrict_gisOtherBaseReference] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisOtherBaseReference] ([idfsGISOtherBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBRuralDistrict_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBRuralDistrict] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBRuralDistrict_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBSea_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBSea] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBSea_gisOtherBaseReference] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisOtherBaseReference] ([idfsGISOtherBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBSea_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBSea] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBSea_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK__gisWKBSet__idfsG__322DFAF6]...';


GO
ALTER TABLE [dbo].[gisWKBSettlement] WITH NOCHECK
    ADD CONSTRAINT [FK__gisWKBSet__idfsG__322DFAF6] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisSettlement] ([idfsSettlement]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBSettlement_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBSettlement] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBSettlement_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBSettlementReady_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBSettlementReady] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBSettlementReady_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBSmallRiver_gisCountry]...';


GO
ALTER TABLE [dbo].[gisWKBSmallRiver] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBSmallRiver_gisCountry] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBSmallRiver_gisOtherBaseReference]...';


GO
ALTER TABLE [dbo].[gisWKBSmallRiver] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBSmallRiver_gisOtherBaseReference] FOREIGN KEY ([idfsGeoObject]) REFERENCES [dbo].[gisOtherBaseReference] ([idfsGISOtherBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWKBSmallRiver_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWKBSmallRiver] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWKBSmallRiver_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[[FK_HumanActualAddlInfo_Human_UID]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [[FK_HumanActualAddlInfo_Human_UID] FOREIGN KEY ([HumanActualAddlInfoUID]) REFERENCES [dbo].[tlbHumanActual] ([idfHumanActual]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanActualAddlInfo_BaseRef_AgeUOM]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanActualAddlInfo_BaseRef_AgeUOM] FOREIGN KEY ([ReportedAgeUOMID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanActualAddlInfo_BaseRef_ContactPhone2NbrType]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanActualAddlInfo_BaseRef_ContactPhone2NbrType] FOREIGN KEY ([ContactPhone2NbrTypeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanActualAddlInfo_BaseRef_ContactPhoneNbrType]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanActualAddlInfo_BaseRef_ContactPhoneNbrType] FOREIGN KEY ([ContactPhoneNbrTypeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanActualAddlInfo_BaseRef_IsEmployed]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanActualAddlInfo_BaseRef_IsEmployed] FOREIGN KEY ([IsEmployedID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanActualAddlInfo_tlbHUmanActual_idfHumanActual]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanActualAddlInfo_tlbHUmanActual_idfHumanActual] FOREIGN KEY ([DeduplicationResultHumanActualID]) REFERENCES [dbo].[tlbHumanActual] ([idfHumanActual]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanActualAddlInfo_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanActualAddlInfo_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanActulaAddlIfo_BaseRef_IsSchool]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanActulaAddlIfo_BaseRef_IsSchool] FOREIGN KEY ([IsStudentID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanActulaAddlIfo_GeoLocationShared_AtlAddressID]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanActulaAddlIfo_GeoLocationShared_AtlAddressID] FOREIGN KEY ([AltAddressID]) REFERENCES [dbo].[tlbGeoLocationShared] ([idfGeoLocationShared]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanActulaAddlIfo_GeosharedaddressID]...';


GO
ALTER TABLE [dbo].[HumanActualAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanActulaAddlIfo_GeosharedaddressID] FOREIGN KEY ([SchoolAddressID]) REFERENCES [dbo].[tlbGeoLocationShared] ([idfGeoLocationShared]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanAddlIfo_BaseRef_IsSchool]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanAddlIfo_BaseRef_IsSchool] FOREIGN KEY ([IsStudentID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanAddlIfo_Geo_addressID]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanAddlIfo_Geo_addressID] FOREIGN KEY ([SchoolAddressID]) REFERENCES [dbo].[tlbGeoLocation] ([idfGeoLocation]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanAddlInfo_BaseRef_ContactPhoneNbr2Type]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanAddlInfo_BaseRef_ContactPhoneNbr2Type] FOREIGN KEY ([ContactPhone2NbrTypeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanAddlInfo_BaseRef_ContactPhoneNbrType]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanAddlInfo_BaseRef_ContactPhoneNbrType] FOREIGN KEY ([ContactPhoneNbrTypeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanAddlInfo_BaseRef_IsEmployed]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanAddlInfo_BaseRef_IsEmployed] FOREIGN KEY ([IsEmployedID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanAddlInfo_BaseRef_IsInSchool]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanAddlInfo_BaseRef_IsInSchool] FOREIGN KEY ([IsStudentID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanAddlInfo_BaseRef_ReportedAgeUOM]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanAddlInfo_BaseRef_ReportedAgeUOM] FOREIGN KEY ([ReportedAgeUOMID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanAddlInfo_GeoLocation_AltAddress]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanAddlInfo_GeoLocation_AltAddress] FOREIGN KEY ([AltAddressID]) REFERENCES [dbo].[tlbGeoLocation] ([idfGeoLocation]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanAddlInfo_Human_idfhuman]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanAddlInfo_Human_idfhuman] FOREIGN KEY ([HumanAdditionalInfo]) REFERENCES [dbo].[tlbHuman] ([idfHuman]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanAddlInfo_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[HumanAddlInfo] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanAddlInfo_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanDiseaseReportRelationship_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportRelationship] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanDiseaseReportRelationship_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanDiseaseReportReln_BaseRef_RelTypeID]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportRelationship] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanDiseaseReportReln_BaseRef_RelTypeID] FOREIGN KEY ([RelationshipTypeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanDiseaseReportReln_tlbHumanCase_HumanDiseaseReportID]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportRelationship] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanDiseaseReportReln_tlbHumanCase_HumanDiseaseReportID] FOREIGN KEY ([HumanDiseaseReportID]) REFERENCES [dbo].[tlbHumanCase] ([idfHumanCase]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanDiseaseReportReln_tlbHumanCase_RelatedToHumanDiseaseReportIdRoot]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportRelationship] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanDiseaseReportReln_tlbHumanCase_RelatedToHumanDiseaseReportIdRoot] FOREIGN KEY ([RelatedToHumanDiseaseReportIdRoot]) REFERENCES [dbo].[tlbHumanCase] ([idfHumanCase]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanDiseaseReportReln_tlbHumanCase_RelateToHumanDiseaseReportID]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportRelationship] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanDiseaseReportReln_tlbHumanCase_RelateToHumanDiseaseReportID] FOREIGN KEY ([RelateToHumanDiseaseReportID]) REFERENCES [dbo].[tlbHumanCase] ([idfHumanCase]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanDiseaseReportVaccination_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportVaccination] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanDiseaseReportVaccination_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[R_1417]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportVaccination] WITH NOCHECK
    ADD CONSTRAINT [R_1417] FOREIGN KEY ([idfHumanCase]) REFERENCES [dbo].[tlbHumanCase] ([idfHumanCase]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupConfigParm_trtBaseReference_idfsBaseReference]...';


GO
ALTER TABLE [dbo].[LkupConfigParm] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupConfigParm_trtBaseReference_idfsBaseReference] FOREIGN KEY ([ConfigParmNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupConfigParm_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupConfigParm] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupConfigParm_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_CountryRoleToStandardRoleMap_gidCountry_CountryID]...';


GO
ALTER TABLE [dbo].[LkupCountryToStandardRoleMap] WITH NOCHECK
    ADD CONSTRAINT [FK_CountryRoleToStandardRoleMap_gidCountry_CountryID] FOREIGN KEY ([CountryID]) REFERENCES [dbo].[gisCountry] ([idfsCountry]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_CountryRoleToStandardRoleMap_trtBaseReference_StadardRoleID]...';


GO
ALTER TABLE [dbo].[LkupCountryToStandardRoleMap] WITH NOCHECK
    ADD CONSTRAINT [FK_CountryRoleToStandardRoleMap_trtBaseReference_StadardRoleID] FOREIGN KEY ([StandardRoleID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AppObj_EIDSSMenu_MenuID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH NOCHECK
    ADD CONSTRAINT [FK_AppObj_EIDSSMenu_MenuID] FOREIGN KEY ([RelatedEIDSSMenuID]) REFERENCES [dbo].[LkupEIDSSMenu] ([EIDSSMenuID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AppObj_ObjName]...';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH NOCHECK
    ADD CONSTRAINT [FK_AppObj_ObjName] FOREIGN KEY ([AppObjectNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AppObj_ObjType]...';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH NOCHECK
    ADD CONSTRAINT [FK_AppObj_ObjType] FOREIGN KEY ([AppObjectTypeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AppObj_PageToolTip]...';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH NOCHECK
    ADD CONSTRAINT [FK_AppObj_PageToolTip] FOREIGN KEY ([PageTitleID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupEIDSSAppObject_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupEIDSSAppObject_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupEIDSSMenu_BaseRef_MenuID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenu] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupEIDSSMenu_BaseRef_MenuID] FOREIGN KEY ([EIDSSMenuID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupEIDSSMenu_BaseRef_ParentMenuID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenu] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupEIDSSMenu_BaseRef_ParentMenuID] FOREIGN KEY ([EIDSSParentMenuID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupEIDSSMenu_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenu] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupEIDSSMenu_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupEIDSSMenuToEventType_BaseRef_MenuID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenuToEventType] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupEIDSSMenuToEventType_BaseRef_MenuID] FOREIGN KEY ([EIDSSMenuID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupEIDSSMenuToEventType_EventType_idfsEventTypeId]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenuToEventType] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupEIDSSMenuToEventType_EventType_idfsEventTypeId] FOREIGN KEY ([EventTypeID]) REFERENCES [dbo].[trtEventType] ([idfsEventTypeID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupEIDSSMenuToEventType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenuToEventType] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupEIDSSMenuToEventType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupEIDSSMenuToSystemFunction_BaseRef_MenuID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenuToSystemFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupEIDSSMenuToSystemFunction_BaseRef_MenuID] FOREIGN KEY ([EIDSSMenuID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupEIDSSMenuToSystemFunction_BaseRef_SystemFunctionID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenuToSystemFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupEIDSSMenuToSystemFunction_BaseRef_SystemFunctionID] FOREIGN KEY ([SystemFunctionID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupEIDSSMenuToSystemFunction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenuToSystemFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupEIDSSMenuToSystemFunction_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LKUPNextKey_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LKUPNextKey] WITH NOCHECK
    ADD CONSTRAINT [FK_LKUPNextKey_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupRoleDashboardObject_AppObject_SashboardObjectID]...';


GO
ALTER TABLE [dbo].[LkupRoleDashboardObject] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupRoleDashboardObject_AppObject_SashboardObjectID] FOREIGN KEY ([DashboardObjectID]) REFERENCES [dbo].[LkupEIDSSAppObject] ([AppObjectNameID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupRoleDashboardObject_idfEmployee]...';


GO
ALTER TABLE [dbo].[LkupRoleDashboardObject] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupRoleDashboardObject_idfEmployee] FOREIGN KEY ([idfEmployee]) REFERENCES [dbo].[tlbEmployee] ([idfEmployee]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupRoleDashboardObject_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupRoleDashboardObject] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupRoleDashboardObject_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupRoleMenuAccess_idfEmployee]...';


GO
ALTER TABLE [dbo].[LkupRoleMenuAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupRoleMenuAccess_idfEmployee] FOREIGN KEY ([idfEmployee]) REFERENCES [dbo].[tlbEmployee] ([idfEmployee]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupRoleMenuAccess_LkupEIDSSMenu_MenuID]...';


GO
ALTER TABLE [dbo].[LkupRoleMenuAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupRoleMenuAccess_LkupEIDSSMenu_MenuID] FOREIGN KEY ([EIDSSMenuID]) REFERENCES [dbo].[LkupEIDSSMenu] ([EIDSSMenuID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupRoleMenuAccess_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupRoleMenuAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupRoleMenuAccess_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_lkupRoleSysFunctionAccess_BaseReference_SysFunctionOperationID]...';


GO
ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_lkupRoleSysFunctionAccess_BaseReference_SysFunctionOperationID] FOREIGN KEY ([SystemFunctionOperationID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_lkupRoleSysFunctionAccess_BaseReference_SystemFunction]...';


GO
ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_lkupRoleSysFunctionAccess_BaseReference_SystemFunction] FOREIGN KEY ([SystemFunctionID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_lkupRoleSysFunctionAccess_trtBaseRef_AccessPermissionID]...';


GO
ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_lkupRoleSysFunctionAccess_trtBaseRef_AccessPermissionID] FOREIGN KEY ([AccessPermissionID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupRoleSystemFunctionAccess_idfEmployee]...';


GO
ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupRoleSystemFunctionAccess_idfEmployee] FOREIGN KEY ([idfEmployee]) REFERENCES [dbo].[tlbEmployee] ([idfEmployee]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupRoleSystemFunctionAccess_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupRoleSystemFunctionAccess_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupSystemFunctionToOperation_BaseReference_idfsModule]...';


GO
ALTER TABLE [dbo].[LkupSystemFunctionToOperation] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupSystemFunctionToOperation_BaseReference_idfsModule] FOREIGN KEY ([idfsModuleName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupSystemFunctionToOperation_BaseReference_SysFunctionOperationID]...';


GO
ALTER TABLE [dbo].[LkupSystemFunctionToOperation] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupSystemFunctionToOperation_BaseReference_SysFunctionOperationID] FOREIGN KEY ([SystemFunctionOperationID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupSystemFunctionToOperation_BaseReference_SystemFunction]...';


GO
ALTER TABLE [dbo].[LkupSystemFunctionToOperation] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupSystemFunctionToOperation_BaseReference_SystemFunction] FOREIGN KEY ([SystemFunctionID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupSystemFunctionToOperation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupSystemFunctionToOperation] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupSystemFunctionToOperation_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_locBaseReference_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[locBaseReference] WITH NOCHECK
    ADD CONSTRAINT [FK_locBaseReference_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_locStringNameTranslation_locBaseReference__idflBaseReference_R_1702]...';


GO
ALTER TABLE [dbo].[locStringNameTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_locStringNameTranslation_locBaseReference__idflBaseReference_R_1702] FOREIGN KEY ([idflBaseReference]) REFERENCES [dbo].[locBaseReference] ([idflBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_locStringNameTranslation_trtBaseReference__idfsLanguage_R_1692]...';


GO
ALTER TABLE [dbo].[locStringNameTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_locStringNameTranslation_trtBaseReference__idfsLanguage_R_1692] FOREIGN KEY ([idfsLanguage]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_locStringNameTranslation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[locStringNameTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_locStringNameTranslation_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LOINCEidssMapping_trtBaseReference__idfsBaseReference]...';


GO
ALTER TABLE [dbo].[LOINCEidssMapping] WITH NOCHECK
    ADD CONSTRAINT [FK_LOINCEidssMapping_trtBaseReference__idfsBaseReference] FOREIGN KEY ([idfsBaseReference]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_LOINCEidssMapping_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LOINCEidssMapping] WITH NOCHECK
    ADD CONSTRAINT [FK_LOINCEidssMapping_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LOINCEidssMapping_trtReferenecType__idfsReferenceType]...';


GO
ALTER TABLE [dbo].[LOINCEidssMapping] WITH NOCHECK
    ADD CONSTRAINT [FK_LOINCEidssMapping_trtReferenecType__idfsReferenceType] FOREIGN KEY ([idfsReferenceType]) REFERENCES [dbo].[trtReferenceType] ([idfsReferenceType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_MonitoringSessionToSampleType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[MonitoringSessionToSampleType] WITH NOCHECK
    ADD CONSTRAINT [FK_MonitoringSessionToSampleType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionToSampleType_tlbMonitoringSession_MonitoringSessionID]...';


GO
ALTER TABLE [dbo].[MonitoringSessionToSampleType] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionToSampleType_tlbMonitoringSession_MonitoringSessionID] FOREIGN KEY ([idfMonitoringSession]) REFERENCES [dbo].[tlbMonitoringSession] ([idfMonitoringSession]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionToSampleType_trtSampleType_SampleType]...';


GO
ALTER TABLE [dbo].[MonitoringSessionToSampleType] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionToSampleType_trtSampleType_SampleType] FOREIGN KEY ([idfsSampleType]) REFERENCES [dbo].[trtSampleType] ([idfsSampleType]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionToSampleType_trtSpeciesType_SpeciesType]...';


GO
ALTER TABLE [dbo].[MonitoringSessionToSampleType] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionToSampleType_trtSpeciesType_SpeciesType] FOREIGN KEY ([idfsSpeciesType]) REFERENCES [dbo].[trtSpeciesType] ([idfsSpeciesType]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreakCaseContact_OutbreakCase_OutbreakCaseReportUID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseContact] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreakCaseContact_OutbreakCase_OutbreakCaseReportUID] FOREIGN KEY ([OutBreakCaseReportUID]) REFERENCES [dbo].[OutbreakCaseReport] ([OutBreakCaseReportUID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreakCaseContact_tlbContactedCasePerson_idfContactedCasePersonID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseContact] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreakCaseContact_tlbContactedCasePerson_idfContactedCasePersonID] FOREIGN KEY ([ContactedHumanCasePersonID]) REFERENCES [dbo].[tlbContactedCasePerson] ([idfContactedCasePerson]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreakCaseContact_tlbHuman_idfHuman]...';


GO
ALTER TABLE [dbo].[OutbreakCaseContact] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreakCaseContact_tlbHuman_idfHuman] FOREIGN KEY ([idfHuman]) REFERENCES [dbo].[tlbHuman] ([idfHuman]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreakCaseContact_tlbObservation_ContactTracingObservationID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseContact] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreakCaseContact_tlbObservation_ContactTracingObservationID] FOREIGN KEY ([ContactTracingObservationID]) REFERENCES [dbo].[tlbObservation] ([idfObservation]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreakCaseContact_trtBaseReference_ContactRelationshipTypeID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseContact] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreakCaseContact_trtBaseReference_ContactRelationshipTypeID] FOREIGN KEY ([ContactRelationshipTypeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreakCaseContact_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseContact] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreakCaseContact_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreakCase_tlbHUmanCase_idfHumanCaseID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseReport] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreakCase_tlbHUmanCase_idfHumanCaseID] FOREIGN KEY ([idfHumanCase]) REFERENCES [dbo].[tlbHumanCase] ([idfHumanCase]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreakCase_tlbObservation_CaseEPIObservationID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseReport] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreakCase_tlbObservation_CaseEPIObservationID] FOREIGN KEY ([CaseEPIObservationID]) REFERENCES [dbo].[tlbObservation] ([idfObservation]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreakCase_tlbOutbreak_idfOutbreakID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseReport] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreakCase_tlbOutbreak_idfOutbreakID] FOREIGN KEY ([idfOutbreak]) REFERENCES [dbo].[tlbOutbreak] ([idfOutbreak]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreakCase_tlbVetCase_idfVetCaseID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseReport] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreakCase_tlbVetCase_idfVetCaseID] FOREIGN KEY ([idfVetCase]) REFERENCES [dbo].[tlbVetCase] ([idfVetCase]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreakCaseReport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseReport] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreakCaseReport_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreatkCase_Observation_OutbreakCaseObservationID]...';


GO
ALTER TABLE [dbo].[OutbreakCaseReport] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreatkCase_Observation_OutbreakCaseObservationID] FOREIGN KEY ([OutbreakCaseObservationID]) REFERENCES [dbo].[tlbObservation] ([idfObservation]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_outbreakSpeciesParameter_tlbOutbreak_OutbreakID]...';


GO
ALTER TABLE [dbo].[OutbreakSpeciesParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_outbreakSpeciesParameter_tlbOutbreak_OutbreakID] FOREIGN KEY ([idfOutbreak]) REFERENCES [dbo].[tlbOutbreak] ([idfOutbreak]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreakSpeciesParameter_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[OutbreakSpeciesParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreakSpeciesParameter_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreakSpeciesParm_FormTemplate_CaseMonitoringTemplateID]...';


GO
ALTER TABLE [dbo].[OutbreakSpeciesParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreakSpeciesParm_FormTemplate_CaseMonitoringTemplateID] FOREIGN KEY ([CaseMonitoringTemplateID]) REFERENCES [dbo].[ffFormTemplate] ([idfsFormTemplate]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreakSpeciesParm_FormTemplate_CaseQuestionaireTemplateID]...';


GO
ALTER TABLE [dbo].[OutbreakSpeciesParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreakSpeciesParm_FormTemplate_CaseQuestionaireTemplateID] FOREIGN KEY ([CaseQuestionaireTemplateID]) REFERENCES [dbo].[ffFormTemplate] ([idfsFormTemplate]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_OutbreakSpeciesParm_FormTemplate_ContactTracingTemplateID]...';


GO
ALTER TABLE [dbo].[OutbreakSpeciesParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_OutbreakSpeciesParm_FormTemplate_ContactTracingTemplateID] FOREIGN KEY ([ContactTracingTemplateID]) REFERENCES [dbo].[ffFormTemplate] ([idfsFormTemplate]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_SecurityPolicyConfig_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[SecurityPolicyConfiguration] WITH NOCHECK
    ADD CONSTRAINT [FK_SecurityPolicyConfig_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_SiteToSiteAccess_BaseReference_AaccessPermissionID]...';


GO
ALTER TABLE [dbo].[SiteToSiteAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_SiteToSiteAccess_BaseReference_AaccessPermissionID] FOREIGN KEY ([AccessPermissionID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_SiteToSiteAccess_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[SiteToSiteAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_SiteToSiteAccess_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_SiteToSiteAccess_tstSite_GranteeSite]...';


GO
ALTER TABLE [dbo].[SiteToSiteAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_SiteToSiteAccess_tstSite_GranteeSite] FOREIGN KEY ([GranteeSite]) REFERENCES [dbo].[tstSite] ([idfsSite]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_SiteToSiteAccess_tstSite_GrantToSite]...';


GO
ALTER TABLE [dbo].[SiteToSiteAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_SiteToSiteAccess_tstSite_GrantToSite] FOREIGN KEY ([GrantToSite]) REFERENCES [dbo].[tstSite] ([idfsSite]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_SystemPreference_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[SystemPreference] WITH NOCHECK
    ADD CONSTRAINT [FK_SystemPreference_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasAggregateFunction_trtBaseReference__idfsAggregateFunction]...';


GO
ALTER TABLE [dbo].[tasAggregateFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_tasAggregateFunction_trtBaseReference__idfsAggregateFunction] FOREIGN KEY ([idfsAggregateFunction]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasAggregateFunction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasAggregateFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_tasAggregateFunction_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasFieldSourceForTable_tasSearchField__idfsSearchField]...';


GO
ALTER TABLE [dbo].[tasFieldSourceForTable] WITH NOCHECK
    ADD CONSTRAINT [FK_tasFieldSourceForTable_tasSearchField__idfsSearchField] FOREIGN KEY ([idfsSearchField]) REFERENCES [dbo].[tasSearchField] ([idfsSearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasFieldSourceForTable_tasSearchTable__idfSearchTable]...';


GO
ALTER TABLE [dbo].[tasFieldSourceForTable] WITH NOCHECK
    ADD CONSTRAINT [FK_tasFieldSourceForTable_tasSearchTable__idfSearchTable] FOREIGN KEY ([idfSearchTable]) REFERENCES [dbo].[tasSearchTable] ([idfSearchTable]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasFieldSourceForTable_tasSearchTable__idfUnionSearchTable]...';


GO
ALTER TABLE [dbo].[tasFieldSourceForTable] WITH NOCHECK
    ADD CONSTRAINT [FK_tasFieldSourceForTable_tasSearchTable__idfUnionSearchTable] FOREIGN KEY ([idfUnionSearchTable]) REFERENCES [dbo].[tasSearchTable] ([idfSearchTable]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasFieldSourceForTable_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasFieldSourceForTable] WITH NOCHECK
    ADD CONSTRAINT [FK_tasFieldSourceForTable_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayout_tasglLayoutFolder__idfsLayoutFolder_R_1698_1]...';


GO
ALTER TABLE [dbo].[tasglLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayout_tasglLayoutFolder__idfsLayoutFolder_R_1698_1] FOREIGN KEY ([idfsLayoutFolder]) REFERENCES [dbo].[tasglLayoutFolder] ([idfsLayoutFolder]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayout_tasglQuery__idfsQuery_R_1326_1]...';


GO
ALTER TABLE [dbo].[tasglLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayout_tasglQuery__idfsQuery_R_1326_1] FOREIGN KEY ([idfsQuery]) REFERENCES [dbo].[tasglQuery] ([idfsQuery]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayout_tlbPerson__idfPerson]...';


GO
ALTER TABLE [dbo].[tasglLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayout_tlbPerson__idfPerson] FOREIGN KEY ([idfPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayout_trtBaseReference__idfsDefaultGroupDate]...';


GO
ALTER TABLE [dbo].[tasglLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayout_trtBaseReference__idfsDefaultGroupDate] FOREIGN KEY ([idfsDefaultGroupDate]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayout_trtBaseReference__idfsDescription_R_1717_1]...';


GO
ALTER TABLE [dbo].[tasglLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayout_trtBaseReference__idfsDescription_R_1717_1] FOREIGN KEY ([idfsDescription]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayout_trtBaseReference__idfsLayout_R_1708_1]...';


GO
ALTER TABLE [dbo].[tasglLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayout_trtBaseReference__idfsLayout_R_1708_1] FOREIGN KEY ([idfsLayout]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayout_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayout_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayoutFolder_tasglLayoutFolder__idfsParentLayoutFolder_R_1715_1]...';


GO
ALTER TABLE [dbo].[tasglLayoutFolder] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayoutFolder_tasglLayoutFolder__idfsParentLayoutFolder_R_1715_1] FOREIGN KEY ([idfsParentLayoutFolder]) REFERENCES [dbo].[tasglLayoutFolder] ([idfsLayoutFolder]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayoutFolder_tasglQuery__idfsQuery_R_1697_1]...';


GO
ALTER TABLE [dbo].[tasglLayoutFolder] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayoutFolder_tasglQuery__idfsQuery_R_1697_1] FOREIGN KEY ([idfsQuery]) REFERENCES [dbo].[tasglQuery] ([idfsQuery]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayoutFolder_trtBaseReference__idfsLayoutFolder_R_1703_1]...';


GO
ALTER TABLE [dbo].[tasglLayoutFolder] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayoutFolder_trtBaseReference__idfsLayoutFolder_R_1703_1] FOREIGN KEY ([idfsLayoutFolder]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayoutFolder_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglLayoutFolder] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayoutFolder_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayoutSearchField_tasAggregateFunction__idfsAggregateFunction]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayoutSearchField_tasAggregateFunction__idfsAggregateFunction] FOREIGN KEY ([idfsAggregateFunction]) REFERENCES [dbo].[tasAggregateFunction] ([idfsAggregateFunction]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayoutSearchField_tasglLayoutSearchField__idfDateLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayoutSearchField_tasglLayoutSearchField__idfDateLayoutSearchField] FOREIGN KEY ([idfDateLayoutSearchField]) REFERENCES [dbo].[tasglLayoutSearchField] ([idfLayoutSearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayoutSearchField_tasglLayoutSearchField__idfUnitLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayoutSearchField_tasglLayoutSearchField__idfUnitLayoutSearchField] FOREIGN KEY ([idfUnitLayoutSearchField]) REFERENCES [dbo].[tasglLayoutSearchField] ([idfLayoutSearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayoutSearchField_tasglQuerySearchField__idfQuerySearchField]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayoutSearchField_tasglQuerySearchField__idfQuerySearchField] FOREIGN KEY ([idfQuerySearchField]) REFERENCES [dbo].[tasglQuerySearchField] ([idfQuerySearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayoutSearchField_tasLayout_idflLayout]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayoutSearchField_tasLayout_idflLayout] FOREIGN KEY ([idfsLayout]) REFERENCES [dbo].[tasglLayout] ([idfsLayout]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayoutSearchField_trtBaseReference__idfsGroupDate]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayoutSearchField_trtBaseReference__idfsGroupDate] FOREIGN KEY ([idfsGroupDate]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayoutSearchField_trtBaseReference_idfsLayoutSearchFieldName]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayoutSearchField_trtBaseReference_idfsLayoutSearchFieldName] FOREIGN KEY ([idfsLayoutSearchFieldName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayoutSearchField_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayoutSearchField_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayoutToMapImage_tasglLayout__idfsLayout]...';


GO
ALTER TABLE [dbo].[tasglLayoutToMapImage] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayoutToMapImage_tasglLayout__idfsLayout] FOREIGN KEY ([idfsLayout]) REFERENCES [dbo].[tasglLayout] ([idfsLayout]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayoutToMapImage_tasglMapImage__idfMapImage]...';


GO
ALTER TABLE [dbo].[tasglLayoutToMapImage] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayoutToMapImage_tasglMapImage__idfMapImage] FOREIGN KEY ([idfMapImage]) REFERENCES [dbo].[tasglMapImage] ([idfMapImage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglLayoutToMapImage_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglLayoutToMapImage] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglLayoutToMapImage_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglMapImage_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglMapImage] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglMapImage_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQuery_trtBaseReference__idfsDescription_R_1718_1]...';


GO
ALTER TABLE [dbo].[tasglQuery] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQuery_trtBaseReference__idfsDescription_R_1718_1] FOREIGN KEY ([idfsDescription]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQuery_trtBaseReference__idfsQueryName_R_1709_1]...';


GO
ALTER TABLE [dbo].[tasglQuery] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQuery_trtBaseReference__idfsQueryName_R_1709_1] FOREIGN KEY ([idfsQuery]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQuery_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglQuery] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQuery_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQueryConditionGroup_tasglQueryConditionGroup__idfParentQueryConditionGroup_R_1345_1]...';


GO
ALTER TABLE [dbo].[tasglQueryConditionGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQueryConditionGroup_tasglQueryConditionGroup__idfParentQueryConditionGroup_R_1345_1] FOREIGN KEY ([idfParentQueryConditionGroup]) REFERENCES [dbo].[tasglQueryConditionGroup] ([idfQueryConditionGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQueryConditionGroup_tasglQuerySearchObject__idfQuerySearchObject_R_1344_1]...';


GO
ALTER TABLE [dbo].[tasglQueryConditionGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQueryConditionGroup_tasglQuerySearchObject__idfQuerySearchObject_R_1344_1] FOREIGN KEY ([idfQuerySearchObject]) REFERENCES [dbo].[tasglQuerySearchObject] ([idfQuerySearchObject]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQueryConditionGroup_tasglQuerySearchObject__idfSubQuerySearchObject]...';


GO
ALTER TABLE [dbo].[tasglQueryConditionGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQueryConditionGroup_tasglQuerySearchObject__idfSubQuerySearchObject] FOREIGN KEY ([idfSubQuerySearchObject]) REFERENCES [dbo].[tasglQuerySearchObject] ([idfQuerySearchObject]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQueryConditionGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglQueryConditionGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQueryConditionGroup_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQuerySearchField_ffParameter__idfsParameter_R_1353_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQuerySearchField_ffParameter__idfsParameter_R_1353_1] FOREIGN KEY ([idfsParameter]) REFERENCES [dbo].[ffParameter] ([idfsParameter]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQuerySearchField_tasglQuerySearchObject__idfQuerySearchObject_R_1351_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQuerySearchField_tasglQuerySearchObject__idfQuerySearchObject_R_1351_1] FOREIGN KEY ([idfQuerySearchObject]) REFERENCES [dbo].[tasglQuerySearchObject] ([idfQuerySearchObject]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQuerySearchField_tasglSearchFieldList__idfsSearchField_R_1352_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQuerySearchField_tasglSearchFieldList__idfsSearchField_R_1352_1] FOREIGN KEY ([idfsSearchField]) REFERENCES [dbo].[tasSearchField] ([idfsSearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQuerySearchField_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQuerySearchField_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQuerySearchFieldCondition_tasglQueryConditionGroup__idfQueryConditionGroup_R_1342_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchFieldCondition] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQuerySearchFieldCondition_tasglQueryConditionGroup__idfQueryConditionGroup_R_1342_1] FOREIGN KEY ([idfQueryConditionGroup]) REFERENCES [dbo].[tasglQueryConditionGroup] ([idfQueryConditionGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQuerySearchFieldCondition_tasglQuerySearchField__idfQuerySearchField_R_1343_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchFieldCondition] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQuerySearchFieldCondition_tasglQuerySearchField__idfQuerySearchField_R_1343_1] FOREIGN KEY ([idfQuerySearchField]) REFERENCES [dbo].[tasglQuerySearchField] ([idfQuerySearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQuerySearchFieldCondition_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchFieldCondition] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQuerySearchFieldCondition_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQuerySearchObject_tasglQuery__idfsQueryName_R_1327_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQuerySearchObject_tasglQuery__idfsQueryName_R_1327_1] FOREIGN KEY ([idfsQuery]) REFERENCES [dbo].[tasglQuery] ([idfsQuery]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQuerySearchObject_tasglQuerySearchObject__idfParentQuerySearchObject_R_1329_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQuerySearchObject_tasglQuerySearchObject__idfParentQuerySearchObject_R_1329_1] FOREIGN KEY ([idfParentQuerySearchObject]) REFERENCES [dbo].[tasglQuerySearchObject] ([idfQuerySearchObject]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQuerySearchObject_tasSearchObject__idfsSearchObject_R_1328_1]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQuerySearchObject_tasSearchObject__idfsSearchObject_R_1328_1] FOREIGN KEY ([idfsSearchObject]) REFERENCES [dbo].[tasSearchObject] ([idfsSearchObject]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQuerySearchObject_trtBaseReference__idfsReportType]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQuerySearchObject_trtBaseReference__idfsReportType] FOREIGN KEY ([idfsReportType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglQuerySearchObject_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglQuerySearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglQuerySearchObject_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglView_tasglLayout__idfsLayout]...';


GO
ALTER TABLE [dbo].[tasglView] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglView_tasglLayout__idfsLayout] FOREIGN KEY ([idfsLayout]) REFERENCES [dbo].[tasglLayout] ([idfsLayout]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglView_tasglViewColumn__idfChartXAxisViewColumn]...';


GO
ALTER TABLE [dbo].[tasglView] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglView_tasglViewColumn__idfChartXAxisViewColumn] FOREIGN KEY ([idfChartXAxisViewColumn]) REFERENCES [dbo].[tasglViewColumn] ([idfViewColumn]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglView_tasglViewColumn__idfMapAdminUnitViewColumn]...';


GO
ALTER TABLE [dbo].[tasglView] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglView_tasglViewColumn__idfMapAdminUnitViewColumn] FOREIGN KEY ([idfMapAdminUnitViewColumn]) REFERENCES [dbo].[tasglViewColumn] ([idfViewColumn]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglView_trtBaseReference__idfsLanguage]...';


GO
ALTER TABLE [dbo].[tasglView] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglView_trtBaseReference__idfsLanguage] FOREIGN KEY ([idfsLanguage]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglView_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglView] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglView_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglViewBand_tasglLayoutSearchField__idfLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasglViewBand] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglViewBand_tasglLayoutSearchField__idfLayoutSearchField] FOREIGN KEY ([idfLayoutSearchField]) REFERENCES [dbo].[tasglLayoutSearchField] ([idfLayoutSearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglViewBand_tasglView__idfView_idfsLanguage]...';


GO
ALTER TABLE [dbo].[tasglViewBand] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglViewBand_tasglView__idfView_idfsLanguage] FOREIGN KEY ([idfView], [idfsLanguage]) REFERENCES [dbo].[tasglView] ([idfView], [idfsLanguage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglViewBand_tasglViewBand__idfParentViewBand]...';


GO
ALTER TABLE [dbo].[tasglViewBand] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglViewBand_tasglViewBand__idfParentViewBand] FOREIGN KEY ([idfParentViewBand]) REFERENCES [dbo].[tasglViewBand] ([idfViewBand]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglViewBand_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglViewBand] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglViewBand_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglViewColumn_tasAggregateFunction__idfsAggregateFunction]...';


GO
ALTER TABLE [dbo].[tasglViewColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglViewColumn_tasAggregateFunction__idfsAggregateFunction] FOREIGN KEY ([idfsAggregateFunction]) REFERENCES [dbo].[tasAggregateFunction] ([idfsAggregateFunction]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglViewColumn_tasglLayoutSearchField__idfLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasglViewColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglViewColumn_tasglLayoutSearchField__idfLayoutSearchField] FOREIGN KEY ([idfLayoutSearchField]) REFERENCES [dbo].[tasglLayoutSearchField] ([idfLayoutSearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglViewColumn_tasglView__idfView_idfsLanguage]...';


GO
ALTER TABLE [dbo].[tasglViewColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglViewColumn_tasglView__idfView_idfsLanguage] FOREIGN KEY ([idfView], [idfsLanguage]) REFERENCES [dbo].[tasglView] ([idfView], [idfsLanguage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglViewColumn_tasglViewBand__idfViewBand]...';


GO
ALTER TABLE [dbo].[tasglViewColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglViewColumn_tasglViewBand__idfViewBand] FOREIGN KEY ([idfViewBand]) REFERENCES [dbo].[tasglViewBand] ([idfViewBand]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglViewColumn_tasglViewColumn__idfDenominatorViewColumn]...';


GO
ALTER TABLE [dbo].[tasglViewColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglViewColumn_tasglViewColumn__idfDenominatorViewColumn] FOREIGN KEY ([idfDenominatorViewColumn]) REFERENCES [dbo].[tasglViewColumn] ([idfViewColumn]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglViewColumn_tasglViewColumn__idfSourceViewColumn]...';


GO
ALTER TABLE [dbo].[tasglViewColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglViewColumn_tasglViewColumn__idfSourceViewColumn] FOREIGN KEY ([idfSourceViewColumn]) REFERENCES [dbo].[tasglViewColumn] ([idfViewColumn]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasglViewColumn_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasglViewColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tasglViewColumn_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayout_locBaseReference__idflDescription_R_1717]...';


GO
ALTER TABLE [dbo].[tasLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayout_locBaseReference__idflDescription_R_1717] FOREIGN KEY ([idflDescription]) REFERENCES [dbo].[locBaseReference] ([idflBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayout_locBaseReference__idflLayout_R_1708]...';


GO
ALTER TABLE [dbo].[tasLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayout_locBaseReference__idflLayout_R_1708] FOREIGN KEY ([idflLayout]) REFERENCES [dbo].[locBaseReference] ([idflBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayout_tasglLayout__idfsGlobalLayout_R_1794]...';


GO
ALTER TABLE [dbo].[tasLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayout_tasglLayout__idfsGlobalLayout_R_1794] FOREIGN KEY ([idfsGlobalLayout]) REFERENCES [dbo].[tasglLayout] ([idfsLayout]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayout_tasLayoutFolder__idflLayoutFolder_R_1698]...';


GO
ALTER TABLE [dbo].[tasLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayout_tasLayoutFolder__idflLayoutFolder_R_1698] FOREIGN KEY ([idflLayoutFolder]) REFERENCES [dbo].[tasLayoutFolder] ([idflLayoutFolder]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayout_tasQuery__idflQuery_R_1326]...';


GO
ALTER TABLE [dbo].[tasLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayout_tasQuery__idflQuery_R_1326] FOREIGN KEY ([idflQuery]) REFERENCES [dbo].[tasQuery] ([idflQuery]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayout_tlbPerson__idfPerson]...';


GO
ALTER TABLE [dbo].[tasLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayout_tlbPerson__idfPerson] FOREIGN KEY ([idfPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayout_trtBaseReference__idfsDefaultGroupDate]...';


GO
ALTER TABLE [dbo].[tasLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayout_trtBaseReference__idfsDefaultGroupDate] FOREIGN KEY ([idfsDefaultGroupDate]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayout_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayout_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutFolder_locBaseReference__idflLayoutFolder_R_1703]...';


GO
ALTER TABLE [dbo].[tasLayoutFolder] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutFolder_locBaseReference__idflLayoutFolder_R_1703] FOREIGN KEY ([idflLayoutFolder]) REFERENCES [dbo].[locBaseReference] ([idflBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutFolder_tasglLayoutFolder__idfsGlobalLayoutFolder_R_1796]...';


GO
ALTER TABLE [dbo].[tasLayoutFolder] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutFolder_tasglLayoutFolder__idfsGlobalLayoutFolder_R_1796] FOREIGN KEY ([idfsGlobalLayoutFolder]) REFERENCES [dbo].[tasglLayoutFolder] ([idfsLayoutFolder]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutFolder_tasLayoutFolder__idflParentLayoutFolder_R_1715]...';


GO
ALTER TABLE [dbo].[tasLayoutFolder] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutFolder_tasLayoutFolder__idflParentLayoutFolder_R_1715] FOREIGN KEY ([idflParentLayoutFolder]) REFERENCES [dbo].[tasLayoutFolder] ([idflLayoutFolder]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutFolder_tasQuery__idflQuery_R_1697]...';


GO
ALTER TABLE [dbo].[tasLayoutFolder] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutFolder_tasQuery__idflQuery_R_1697] FOREIGN KEY ([idflQuery]) REFERENCES [dbo].[tasQuery] ([idflQuery]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutFolder_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasLayoutFolder] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutFolder_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutSearchField_locBaseReference_idflLayoutSearchFieldName]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutSearchField_locBaseReference_idflLayoutSearchFieldName] FOREIGN KEY ([idflLayoutSearchFieldName]) REFERENCES [dbo].[locBaseReference] ([idflBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutSearchField_tasAggregateFunction__idfsAggregateFunction]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutSearchField_tasAggregateFunction__idfsAggregateFunction] FOREIGN KEY ([idfsAggregateFunction]) REFERENCES [dbo].[tasAggregateFunction] ([idfsAggregateFunction]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutSearchField_tasLayout_idflLayout]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutSearchField_tasLayout_idflLayout] FOREIGN KEY ([idflLayout]) REFERENCES [dbo].[tasLayout] ([idflLayout]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutSearchField_tasLayoutSearchField__idfDateLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutSearchField_tasLayoutSearchField__idfDateLayoutSearchField] FOREIGN KEY ([idfDateLayoutSearchField]) REFERENCES [dbo].[tasLayoutSearchField] ([idfLayoutSearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutSearchField_tasLayoutSearchField__idfUnitLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutSearchField_tasLayoutSearchField__idfUnitLayoutSearchField] FOREIGN KEY ([idfUnitLayoutSearchField]) REFERENCES [dbo].[tasLayoutSearchField] ([idfLayoutSearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutSearchField_tasQuerySearchField__idfQuerySearchField]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutSearchField_tasQuerySearchField__idfQuerySearchField] FOREIGN KEY ([idfQuerySearchField]) REFERENCES [dbo].[tasQuerySearchField] ([idfQuerySearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutSearchField_trtBaseReference__idfsGroupDate]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutSearchField_trtBaseReference__idfsGroupDate] FOREIGN KEY ([idfsGroupDate]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutSearchField_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasLayoutSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutSearchField_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutToMapImage_tasLayout__idflLayout]...';


GO
ALTER TABLE [dbo].[tasLayoutToMapImage] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutToMapImage_tasLayout__idflLayout] FOREIGN KEY ([idflLayout]) REFERENCES [dbo].[tasLayout] ([idflLayout]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutToMapImage_tasMapImage__idfMapImage]...';


GO
ALTER TABLE [dbo].[tasLayoutToMapImage] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutToMapImage_tasMapImage__idfMapImage] FOREIGN KEY ([idfMapImage]) REFERENCES [dbo].[tasMapImage] ([idfMapImage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasLayoutToMapImage_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasLayoutToMapImage] WITH NOCHECK
    ADD CONSTRAINT [FK_tasLayoutToMapImage_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasMainTableForObject_tasSearchObject__idfsSearchObject]...';


GO
ALTER TABLE [dbo].[tasMainTableForObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasMainTableForObject_tasSearchObject__idfsSearchObject] FOREIGN KEY ([idfsSearchObject]) REFERENCES [dbo].[tasSearchObject] ([idfsSearchObject]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasMainTableForObject_tasSearchTable__idfMainSearchTable]...';


GO
ALTER TABLE [dbo].[tasMainTableForObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasMainTableForObject_tasSearchTable__idfMainSearchTable] FOREIGN KEY ([idfMainSearchTable]) REFERENCES [dbo].[tasSearchTable] ([idfSearchTable]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasMainTableForObject_tasSearchTable__idfMandatorySearchTable]...';


GO
ALTER TABLE [dbo].[tasMainTableForObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasMainTableForObject_tasSearchTable__idfMandatorySearchTable] FOREIGN KEY ([idfMandatorySearchTable]) REFERENCES [dbo].[tasSearchTable] ([idfSearchTable]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasMainTableForObject_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasMainTableForObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasMainTableForObject_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasMapImage_tasglMapImage__idfGlobalMapImage]...';


GO
ALTER TABLE [dbo].[tasMapImage] WITH NOCHECK
    ADD CONSTRAINT [FK_tasMapImage_tasglMapImage__idfGlobalMapImage] FOREIGN KEY ([idfGlobalMapImage]) REFERENCES [dbo].[tasglMapImage] ([idfMapImage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasMapImage_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasMapImage] WITH NOCHECK
    ADD CONSTRAINT [FK_tasMapImage_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuery_locBaseReference__idflDescription_R_1718]...';


GO
ALTER TABLE [dbo].[tasQuery] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuery_locBaseReference__idflDescription_R_1718] FOREIGN KEY ([idflDescription]) REFERENCES [dbo].[locBaseReference] ([idflBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuery_locBaseReference__idflQueryName_R_1709]...';


GO
ALTER TABLE [dbo].[tasQuery] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuery_locBaseReference__idflQueryName_R_1709] FOREIGN KEY ([idflQuery]) REFERENCES [dbo].[locBaseReference] ([idflBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuery_tasglQuery__idfsGlobalQuery_R_1795]...';


GO
ALTER TABLE [dbo].[tasQuery] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuery_tasglQuery__idfsGlobalQuery_R_1795] FOREIGN KEY ([idfsGlobalQuery]) REFERENCES [dbo].[tasglQuery] ([idfsQuery]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuery_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasQuery] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuery_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQueryConditionGroup_tasQueryConditionGroup__idfParentQueryConditionGroup_R_1345]...';


GO
ALTER TABLE [dbo].[tasQueryConditionGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQueryConditionGroup_tasQueryConditionGroup__idfParentQueryConditionGroup_R_1345] FOREIGN KEY ([idfParentQueryConditionGroup]) REFERENCES [dbo].[tasQueryConditionGroup] ([idfQueryConditionGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQueryConditionGroup_tasQuerySearchObject__idfQuerySearchObject_R_1344]...';


GO
ALTER TABLE [dbo].[tasQueryConditionGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQueryConditionGroup_tasQuerySearchObject__idfQuerySearchObject_R_1344] FOREIGN KEY ([idfQuerySearchObject]) REFERENCES [dbo].[tasQuerySearchObject] ([idfQuerySearchObject]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQueryConditionGroup_tasQuerySearchObject__idfSubQuerySearchObject]...';


GO
ALTER TABLE [dbo].[tasQueryConditionGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQueryConditionGroup_tasQuerySearchObject__idfSubQuerySearchObject] FOREIGN KEY ([idfSubQuerySearchObject]) REFERENCES [dbo].[tasQuerySearchObject] ([idfQuerySearchObject]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQueryConditionGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasQueryConditionGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQueryConditionGroup_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuerySearchField_ffParameter__idfsParameter_R_1353]...';


GO
ALTER TABLE [dbo].[tasQuerySearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuerySearchField_ffParameter__idfsParameter_R_1353] FOREIGN KEY ([idfsParameter]) REFERENCES [dbo].[ffParameter] ([idfsParameter]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuerySearchField_tasQuerySearchObject__idfQuerySearchObject_R_1351]...';


GO
ALTER TABLE [dbo].[tasQuerySearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuerySearchField_tasQuerySearchObject__idfQuerySearchObject_R_1351] FOREIGN KEY ([idfQuerySearchObject]) REFERENCES [dbo].[tasQuerySearchObject] ([idfQuerySearchObject]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuerySearchField_tasSearchFieldList__idfsSearchField_R_1352]...';


GO
ALTER TABLE [dbo].[tasQuerySearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuerySearchField_tasSearchFieldList__idfsSearchField_R_1352] FOREIGN KEY ([idfsSearchField]) REFERENCES [dbo].[tasSearchField] ([idfsSearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuerySearchField_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasQuerySearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuerySearchField_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuerySearchFieldCondition_tasQueryConditionGroup__idfQueryConditionGroup_R_1342]...';


GO
ALTER TABLE [dbo].[tasQuerySearchFieldCondition] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuerySearchFieldCondition_tasQueryConditionGroup__idfQueryConditionGroup_R_1342] FOREIGN KEY ([idfQueryConditionGroup]) REFERENCES [dbo].[tasQueryConditionGroup] ([idfQueryConditionGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuerySearchFieldCondition_tasQuerySearchField__idfQuerySearchField_R_1343]...';


GO
ALTER TABLE [dbo].[tasQuerySearchFieldCondition] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuerySearchFieldCondition_tasQuerySearchField__idfQuerySearchField_R_1343] FOREIGN KEY ([idfQuerySearchField]) REFERENCES [dbo].[tasQuerySearchField] ([idfQuerySearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuerySearchFieldCondition_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasQuerySearchFieldCondition] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuerySearchFieldCondition_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuerySearchObject_tasQuery__idflQueryName_R_1327]...';


GO
ALTER TABLE [dbo].[tasQuerySearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuerySearchObject_tasQuery__idflQueryName_R_1327] FOREIGN KEY ([idflQuery]) REFERENCES [dbo].[tasQuery] ([idflQuery]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuerySearchObject_tasQuerySearchObject__idfParentQuerySearchObject_R_1329]...';


GO
ALTER TABLE [dbo].[tasQuerySearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuerySearchObject_tasQuerySearchObject__idfParentQuerySearchObject_R_1329] FOREIGN KEY ([idfParentQuerySearchObject]) REFERENCES [dbo].[tasQuerySearchObject] ([idfQuerySearchObject]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuerySearchObject_tasSearchObject__idfsSearchObject_R_1328]...';


GO
ALTER TABLE [dbo].[tasQuerySearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuerySearchObject_tasSearchObject__idfsSearchObject_R_1328] FOREIGN KEY ([idfsSearchObject]) REFERENCES [dbo].[tasSearchObject] ([idfsSearchObject]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuerySearchObject_trtBaseReference__idfsReportType]...';


GO
ALTER TABLE [dbo].[tasQuerySearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuerySearchObject_trtBaseReference__idfsReportType] FOREIGN KEY ([idfsReportType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasQuerySearchObject_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasQuerySearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasQuerySearchObject_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchField_gisReferenceType__idfsGISReferenceType_R_1720]...';


GO
ALTER TABLE [dbo].[tasSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchField_gisReferenceType__idfsGISReferenceType_R_1720] FOREIGN KEY ([idfsGISReferenceType]) REFERENCES [dbo].[gisReferenceType] ([idfsGISReferenceType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchField_tasAggregateFunction__idfsDefaultAggregateFunction]...';


GO
ALTER TABLE [dbo].[tasSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchField_tasAggregateFunction__idfsDefaultAggregateFunction] FOREIGN KEY ([idfsDefaultAggregateFunction]) REFERENCES [dbo].[tasAggregateFunction] ([idfsAggregateFunction]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchField_tasSearchObject__idfsSearchObject_R_1346]...';


GO
ALTER TABLE [dbo].[tasSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchField_tasSearchObject__idfsSearchObject_R_1346] FOREIGN KEY ([idfsSearchObject]) REFERENCES [dbo].[tasSearchObject] ([idfsSearchObject]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchField_trtBaseReference__idfsSearchField_R_1355]...';


GO
ALTER TABLE [dbo].[tasSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchField_trtBaseReference__idfsSearchField_R_1355] FOREIGN KEY ([idfsSearchField]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchField_trtBaseReference__idfsSearchFieldType_R_1587]...';


GO
ALTER TABLE [dbo].[tasSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchField_trtBaseReference__idfsSearchFieldType_R_1587] FOREIGN KEY ([idfsSearchFieldType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchField_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchField_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchFieldList_trtReferenceType__idfsReferenceType_R_1349]...';


GO
ALTER TABLE [dbo].[tasSearchField] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchFieldList_trtReferenceType__idfsReferenceType_R_1349] FOREIGN KEY ([idfsReferenceType]) REFERENCES [dbo].[trtReferenceType] ([idfsReferenceType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchFieldsWithRelatedValues_tasSearchField__idfsRelatedSearchField]...';


GO
ALTER TABLE [dbo].[tasSearchFieldsWithRelatedValues] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchFieldsWithRelatedValues_tasSearchField__idfsRelatedSearchField] FOREIGN KEY ([idfsRelatedSearchField]) REFERENCES [dbo].[tasSearchField] ([idfsSearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchFieldsWithRelatedValues_tasSearchField__idfsSearchField]...';


GO
ALTER TABLE [dbo].[tasSearchFieldsWithRelatedValues] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchFieldsWithRelatedValues_tasSearchField__idfsSearchField] FOREIGN KEY ([idfsSearchField]) REFERENCES [dbo].[tasSearchField] ([idfsSearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchFieldsWithRelatedValues_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchFieldsWithRelatedValues] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchFieldsWithRelatedValues_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchFieldToFFParameter_ffParameter_idfsParameter]...';


GO
ALTER TABLE [dbo].[tasSearchFieldToFFParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchFieldToFFParameter_ffParameter_idfsParameter] FOREIGN KEY ([idfsParameter]) REFERENCES [dbo].[ffParameter] ([idfsParameter]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchFieldToFFParameter_tasSearchField_idfsSearchField]...';


GO
ALTER TABLE [dbo].[tasSearchFieldToFFParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchFieldToFFParameter_tasSearchField_idfsSearchField] FOREIGN KEY ([idfsSearchField]) REFERENCES [dbo].[tasSearchField] ([idfsSearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchFieldToFFParameter_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchFieldToFFParameter] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchFieldToFFParameter_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchFieldToPersonalDataGroup_tasSearchField_idfsSearchField]...';


GO
ALTER TABLE [dbo].[tasSearchFieldToPersonalDataGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchFieldToPersonalDataGroup_tasSearchField_idfsSearchField] FOREIGN KEY ([idfsSearchField]) REFERENCES [dbo].[tasSearchField] ([idfsSearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchFieldToPersonalDataGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchFieldToPersonalDataGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchFieldToPersonalDataGroup_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchFieldToPersonalDataGroup_tstPersonalDataGroup_idfPersonalDataGroup]...';


GO
ALTER TABLE [dbo].[tasSearchFieldToPersonalDataGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchFieldToPersonalDataGroup_tstPersonalDataGroup_idfPersonalDataGroup] FOREIGN KEY ([idfPersonalDataGroup]) REFERENCES [dbo].[tstPersonalDataGroup] ([idfPersonalDataGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchObject_trtBaseReference__idfsFormType_R_1657]...';


GO
ALTER TABLE [dbo].[tasSearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchObject_trtBaseReference__idfsFormType_R_1657] FOREIGN KEY ([idfsFormType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchObject_trtBaseReference__idfsSearchObject_R_1357]...';


GO
ALTER TABLE [dbo].[tasSearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchObject_trtBaseReference__idfsSearchObject_R_1357] FOREIGN KEY ([idfsSearchObject]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchObject_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchObject_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchObjectToSearchObject_tasSearchObject__idfsParentSearchObject_R_1714]...';


GO
ALTER TABLE [dbo].[tasSearchObjectToSearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchObjectToSearchObject_tasSearchObject__idfsParentSearchObject_R_1714] FOREIGN KEY ([idfsParentSearchObject]) REFERENCES [dbo].[tasSearchObject] ([idfsSearchObject]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchObjectToSearchObject_tasSearchObject__idfsRelatedSearchObject_R_1713]...';


GO
ALTER TABLE [dbo].[tasSearchObjectToSearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchObjectToSearchObject_tasSearchObject__idfsRelatedSearchObject_R_1713] FOREIGN KEY ([idfsRelatedSearchObject]) REFERENCES [dbo].[tasSearchObject] ([idfsSearchObject]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchObjectToSearchObject_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchObjectToSearchObject] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchObjectToSearchObject_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchObjectToSystemFunction_tasSearchObject_idfsSearchObject]...';


GO
ALTER TABLE [dbo].[tasSearchObjectToSystemFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchObjectToSystemFunction_tasSearchObject_idfsSearchObject] FOREIGN KEY ([idfsSearchObject]) REFERENCES [dbo].[tasSearchObject] ([idfsSearchObject]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchObjectToSystemFunction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchObjectToSystemFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchObjectToSystemFunction_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchObjectToSystemFunction_trtSystemFunction_idfsSystemFunction]...';


GO
ALTER TABLE [dbo].[tasSearchObjectToSystemFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchObjectToSystemFunction_trtSystemFunction_idfsSystemFunction] FOREIGN KEY ([idfsSystemFunction]) REFERENCES [dbo].[trtSystemFunction] ([idfsSystemFunction]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchTable_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchTable] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchTable_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchTableJoinRule_tasSearchTable__idfMainSearchTable_R_1723]...';


GO
ALTER TABLE [dbo].[tasSearchTableJoinRule] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchTableJoinRule_tasSearchTable__idfMainSearchTable_R_1723] FOREIGN KEY ([idfMainSearchTable]) REFERENCES [dbo].[tasSearchTable] ([idfSearchTable]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchTableJoinRule_tasSearchTable__idfParentSearchTable_R_1700]...';


GO
ALTER TABLE [dbo].[tasSearchTableJoinRule] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchTableJoinRule_tasSearchTable__idfParentSearchTable_R_1700] FOREIGN KEY ([idfParentSearchTable]) REFERENCES [dbo].[tasSearchTable] ([idfSearchTable]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchTableJoinRule_tasSearchTable__idfSearchTable_R_1701]...';


GO
ALTER TABLE [dbo].[tasSearchTableJoinRule] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchTableJoinRule_tasSearchTable__idfSearchTable_R_1701] FOREIGN KEY ([idfSearchTable]) REFERENCES [dbo].[tasSearchTable] ([idfSearchTable]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchTableJoinRule_tasSearchTable__idfUnionSearchTable]...';


GO
ALTER TABLE [dbo].[tasSearchTableJoinRule] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchTableJoinRule_tasSearchTable__idfUnionSearchTable] FOREIGN KEY ([idfUnionSearchTable]) REFERENCES [dbo].[tasSearchTable] ([idfSearchTable]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasSearchTableJoinRule_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasSearchTableJoinRule] WITH NOCHECK
    ADD CONSTRAINT [FK_tasSearchTableJoinRule_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasView_tasglView__idfGlobalView_idfsLanguage]...';


GO
ALTER TABLE [dbo].[tasView] WITH NOCHECK
    ADD CONSTRAINT [FK_tasView_tasglView__idfGlobalView_idfsLanguage] FOREIGN KEY ([idfGlobalView], [idfsLanguage]) REFERENCES [dbo].[tasglView] ([idfView], [idfsLanguage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasView_tasLayout__idflLayout]...';


GO
ALTER TABLE [dbo].[tasView] WITH NOCHECK
    ADD CONSTRAINT [FK_tasView_tasLayout__idflLayout] FOREIGN KEY ([idflLayout]) REFERENCES [dbo].[tasLayout] ([idflLayout]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasView_tasViewColumn__idfChartXAxisViewColumn]...';


GO
ALTER TABLE [dbo].[tasView] WITH NOCHECK
    ADD CONSTRAINT [FK_tasView_tasViewColumn__idfChartXAxisViewColumn] FOREIGN KEY ([idfChartXAxisViewColumn]) REFERENCES [dbo].[tasViewColumn] ([idfViewColumn]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasView_tasViewColumn__idfMapAdminUnitViewColumn]...';


GO
ALTER TABLE [dbo].[tasView] WITH NOCHECK
    ADD CONSTRAINT [FK_tasView_tasViewColumn__idfMapAdminUnitViewColumn] FOREIGN KEY ([idfMapAdminUnitViewColumn]) REFERENCES [dbo].[tasViewColumn] ([idfViewColumn]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasView_trtBaseReference__idfsLanguage]...';


GO
ALTER TABLE [dbo].[tasView] WITH NOCHECK
    ADD CONSTRAINT [FK_tasView_trtBaseReference__idfsLanguage] FOREIGN KEY ([idfsLanguage]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasView_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasView] WITH NOCHECK
    ADD CONSTRAINT [FK_tasView_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasViewBand_tasLayoutSearchField__idfLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasViewBand] WITH NOCHECK
    ADD CONSTRAINT [FK_tasViewBand_tasLayoutSearchField__idfLayoutSearchField] FOREIGN KEY ([idfLayoutSearchField]) REFERENCES [dbo].[tasLayoutSearchField] ([idfLayoutSearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasViewBand_tasView__idfView_idfsLanguage]...';


GO
ALTER TABLE [dbo].[tasViewBand] WITH NOCHECK
    ADD CONSTRAINT [FK_tasViewBand_tasView__idfView_idfsLanguage] FOREIGN KEY ([idfView], [idfsLanguage]) REFERENCES [dbo].[tasView] ([idfView], [idfsLanguage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasViewBand_tasViewBand__idfParentViewBand]...';


GO
ALTER TABLE [dbo].[tasViewBand] WITH NOCHECK
    ADD CONSTRAINT [FK_tasViewBand_tasViewBand__idfParentViewBand] FOREIGN KEY ([idfParentViewBand]) REFERENCES [dbo].[tasViewBand] ([idfViewBand]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasViewBand_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasViewBand] WITH NOCHECK
    ADD CONSTRAINT [FK_tasViewBand_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasViewColumn_tasAggregateFunction__idfsAggregateFunction]...';


GO
ALTER TABLE [dbo].[tasViewColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tasViewColumn_tasAggregateFunction__idfsAggregateFunction] FOREIGN KEY ([idfsAggregateFunction]) REFERENCES [dbo].[tasAggregateFunction] ([idfsAggregateFunction]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasViewColumn_tasLayoutSearchField__idfLayoutSearchField]...';


GO
ALTER TABLE [dbo].[tasViewColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tasViewColumn_tasLayoutSearchField__idfLayoutSearchField] FOREIGN KEY ([idfLayoutSearchField]) REFERENCES [dbo].[tasLayoutSearchField] ([idfLayoutSearchField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasViewColumn_tasView__idfView_idfsLanguage]...';


GO
ALTER TABLE [dbo].[tasViewColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tasViewColumn_tasView__idfView_idfsLanguage] FOREIGN KEY ([idfView], [idfsLanguage]) REFERENCES [dbo].[tasView] ([idfView], [idfsLanguage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasViewColumn_tasViewBand__idfViewBand]...';


GO
ALTER TABLE [dbo].[tasViewColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tasViewColumn_tasViewBand__idfViewBand] FOREIGN KEY ([idfViewBand]) REFERENCES [dbo].[tasViewBand] ([idfViewBand]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasViewColumn_tasViewColumn__idfDenominatorViewColumn]...';


GO
ALTER TABLE [dbo].[tasViewColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tasViewColumn_tasViewColumn__idfDenominatorViewColumn] FOREIGN KEY ([idfDenominatorViewColumn]) REFERENCES [dbo].[tasViewColumn] ([idfViewColumn]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasViewColumn_tasViewColumn__idfSourceViewColumn]...';


GO
ALTER TABLE [dbo].[tasViewColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tasViewColumn_tasViewColumn__idfSourceViewColumn] FOREIGN KEY ([idfSourceViewColumn]) REFERENCES [dbo].[tasViewColumn] ([idfViewColumn]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tasViewColumn_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tasViewColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tasViewColumn_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauColumn_tauTable__idfTable_R_1559]...';


GO
ALTER TABLE [dbo].[tauColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tauColumn_tauTable__idfTable_R_1559] FOREIGN KEY ([idfTable]) REFERENCES [dbo].[tauTable] ([idfTable]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauColumn_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tauColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_tauColumn_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditDetailCreate_tauDataAuditEvent__idfDataAuditEvent_R_1024]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailCreate] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditDetailCreate_tauDataAuditEvent__idfDataAuditEvent_R_1024] FOREIGN KEY ([idfDataAuditEvent]) REFERENCES [dbo].[tauDataAuditEvent] ([idfDataAuditEvent]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditDetailCreate_tauTable__idfObjectTable_R_1561]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailCreate] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditDetailCreate_tauTable__idfObjectTable_R_1561] FOREIGN KEY ([idfObjectTable]) REFERENCES [dbo].[tauTable] ([idfTable]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditDetailCreate_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailCreate] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditDetailCreate_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditDetailDelete_tauDataAuditEvent__idfDataAuditEvent_R_1558]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailDelete] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditDetailDelete_tauDataAuditEvent__idfDataAuditEvent_R_1558] FOREIGN KEY ([idfDataAuditEvent]) REFERENCES [dbo].[tauDataAuditEvent] ([idfDataAuditEvent]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditDetailDelete_tauTable__idfObjectTable_R_1563]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailDelete] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditDetailDelete_tauTable__idfObjectTable_R_1563] FOREIGN KEY ([idfObjectTable]) REFERENCES [dbo].[tauTable] ([idfTable]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditDetailDelete_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailDelete] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditDetailDelete_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditDetailRestore_tauDataAuditEvent__idfDataAuditEvent_R_1558]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailRestore] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditDetailRestore_tauDataAuditEvent__idfDataAuditEvent_R_1558] FOREIGN KEY ([idfDataAuditEvent]) REFERENCES [dbo].[tauDataAuditEvent] ([idfDataAuditEvent]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditDetailRestore_tauTable__idfObjectTable_R_1563]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailRestore] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditDetailRestore_tauTable__idfObjectTable_R_1563] FOREIGN KEY ([idfObjectTable]) REFERENCES [dbo].[tauTable] ([idfTable]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditDetailRestore_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailRestore] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditDetailRestore_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditDetailUpdate_tauColumn__idfColumn_R_1564]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailUpdate] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditDetailUpdate_tauColumn__idfColumn_R_1564] FOREIGN KEY ([idfColumn]) REFERENCES [dbo].[tauColumn] ([idfColumn]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditDetailUpdate_tauDataAuditEvent__idfDataAuditEvent_R_1557]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailUpdate] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditDetailUpdate_tauDataAuditEvent__idfDataAuditEvent_R_1557] FOREIGN KEY ([idfDataAuditEvent]) REFERENCES [dbo].[tauDataAuditEvent] ([idfDataAuditEvent]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditDetailUpdate_tauTable__idfObjectTable_R_1562]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailUpdate] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditDetailUpdate_tauTable__idfObjectTable_R_1562] FOREIGN KEY ([idfObjectTable]) REFERENCES [dbo].[tauTable] ([idfTable]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditDetailUpdate_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tauDataAuditDetailUpdate] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditDetailUpdate_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditEvent_tauTable__idfMainObjectTable_R_1560]...';


GO
ALTER TABLE [dbo].[tauDataAuditEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditEvent_tauTable__idfMainObjectTable_R_1560] FOREIGN KEY ([idfMainObjectTable]) REFERENCES [dbo].[tauTable] ([idfTable]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditEvent_trtBaseReference__idfsDataAuditEventType_R_1556]...';


GO
ALTER TABLE [dbo].[tauDataAuditEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditEvent_trtBaseReference__idfsDataAuditEventType_R_1556] FOREIGN KEY ([idfsDataAuditEventType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditEvent_trtBaseReference__idfsDataAuditObjectType_R_1555]...';


GO
ALTER TABLE [dbo].[tauDataAuditEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditEvent_trtBaseReference__idfsDataAuditObjectType_R_1555] FOREIGN KEY ([idfsDataAuditObjectType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditEvent_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tauDataAuditEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditEvent_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditEvent_tstSite__idfsSite_R_1021]...';


GO
ALTER TABLE [dbo].[tauDataAuditEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditEvent_tstSite__idfsSite_R_1021] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauDataAuditEvent_tstUserTable__idfUserID_R_1022]...';


GO
ALTER TABLE [dbo].[tauDataAuditEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tauDataAuditEvent_tstUserTable__idfUserID_R_1022] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauPINAuditEvent_tstUserTable]...';


GO
ALTER TABLE [dbo].[tauPINAuditEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tauPINAuditEvent_tstUserTable] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauTable_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tauTable] WITH NOCHECK
    ADD CONSTRAINT [FK_tauTable_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tdeDataExport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tdeDataExport] WITH NOCHECK
    ADD CONSTRAINT [FK_tdeDataExport_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tdeDataExport_tstUserTable__idfUserID_R_1004]...';


GO
ALTER TABLE [dbo].[tdeDataExport] WITH NOCHECK
    ADD CONSTRAINT [FK_tdeDataExport_tstUserTable__idfUserID_R_1004] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tdeDataExportDetail_tdeDataExport__idfDataExport_R_1001]...';


GO
ALTER TABLE [dbo].[tdeDataExportDetail] WITH NOCHECK
    ADD CONSTRAINT [FK_tdeDataExportDetail_tdeDataExport__idfDataExport_R_1001] FOREIGN KEY ([idfDataExport]) REFERENCES [dbo].[tdeDataExport] ([idfDataExport]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tdeDataExportDetail_trtBaseReference__idfsDataExportDetailStatus_R_1582]...';


GO
ALTER TABLE [dbo].[tdeDataExportDetail] WITH NOCHECK
    ADD CONSTRAINT [FK_tdeDataExportDetail_trtBaseReference__idfsDataExportDetailStatus_R_1582] FOREIGN KEY ([idfsDataExportDetailStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tdeDataExportDetail_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tdeDataExportDetail] WITH NOCHECK
    ADD CONSTRAINT [FK_tdeDataExportDetail_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tdeDataExportDetail_trtDiagnosis__idfsDiagnosis_R_1003]...';


GO
ALTER TABLE [dbo].[tdeDataExportDetail] WITH NOCHECK
    ADD CONSTRAINT [FK_tdeDataExportDetail_trtDiagnosis__idfsDiagnosis_R_1003] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tdeDataExportDiagnosis_tdeDataExport__idfDataExport_R_1000]...';


GO
ALTER TABLE [dbo].[tdeDataExportDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tdeDataExportDiagnosis_tdeDataExport__idfDataExport_R_1000] FOREIGN KEY ([idfDataExport]) REFERENCES [dbo].[tdeDataExport] ([idfDataExport]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tdeDataExportDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tdeDataExportDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tdeDataExportDiagnosis_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tdeDataExportDiagnosis_trtDiagnosis__idfsDiagnosis_R_999]...';


GO
ALTER TABLE [dbo].[tdeDataExportDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tdeDataExportDiagnosis_trtDiagnosis__idfsDiagnosis_R_999] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tdeDataExportFFReference_ffParameter__idfsParameter]...';


GO
ALTER TABLE [dbo].[tdeDataExportFFReference] WITH NOCHECK
    ADD CONSTRAINT [FK_tdeDataExportFFReference_ffParameter__idfsParameter] FOREIGN KEY ([idfsParameter]) REFERENCES [dbo].[ffParameter] ([idfsParameter]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tdeDataExportFFReference_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tdeDataExportFFReference] WITH NOCHECK
    ADD CONSTRAINT [FK_tdeDataExportFFReference_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tdeDataExportFFReference_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tdeDataExportFFReference] WITH NOCHECK
    ADD CONSTRAINT [FK_tdeDataExportFFReference_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tdeDataExportProblem_tdeDataExport__idfDataExport_R_1008]...';


GO
ALTER TABLE [dbo].[tdeDataExportProblem] WITH NOCHECK
    ADD CONSTRAINT [FK_tdeDataExportProblem_tdeDataExport__idfDataExport_R_1008] FOREIGN KEY ([idfDataExport]) REFERENCES [dbo].[tdeDataExport] ([idfDataExport]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tdeDataExportProblem_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tdeDataExportProblem] WITH NOCHECK
    ADD CONSTRAINT [FK_tdeDataExportProblem_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflAggrCaseFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflAggrCaseFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflAggrCaseFiltered_tflSiteGroup__idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflAggrCaseFiltered_tlbAggrCase__idfAggrCase]...';


GO
ALTER TABLE [dbo].[tflAggrCaseFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflAggrCaseFiltered_tlbAggrCase__idfAggrCase] FOREIGN KEY ([idfAggrCase]) REFERENCES [dbo].[tlbAggrCase] ([idfAggrCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflAggrCaseFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflAggrCaseFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflAggrCaseFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceAggregateHeaderFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_tflSiteGroup__idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_tlbBasicSyndromicSurveillanceAggregateHeader__idfAggregateHeader]...';


GO
ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceAggregateHeaderFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_tlbBasicSyndromicSurveillanceAggregateHeader__idfAggregateHeader] FOREIGN KEY ([idfAggregateHeader]) REFERENCES [dbo].[tlbBasicSyndromicSurveillanceAggregateHeader] ([idfAggregateHeader]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceAggregateHeaderFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflBasicSyndromicSurveillanceFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflBasicSyndromicSurveillanceFiltered_tflSiteGroup__idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflBasicSyndromicSurveillanceFiltered_tlbBasicSyndromicSurveillance__idfBasicSyndromicSurveillance_R_1831]...';


GO
ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflBasicSyndromicSurveillanceFiltered_tlbBasicSyndromicSurveillance__idfBasicSyndromicSurveillance_R_1831] FOREIGN KEY ([idfBasicSyndromicSurveillance]) REFERENCES [dbo].[tlbBasicSyndromicSurveillance] ([idfBasicSyndromicSurveillance]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflBasicSyndromicSurveillanceFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflBasicSyndromicSurveillanceFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflBatchTestFiltered_tflSiteGroup]...';


GO
ALTER TABLE [dbo].[tflBatchTestFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflBatchTestFiltered_tflSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflBatchTestFiltered_tlbBatchTest]...';


GO
ALTER TABLE [dbo].[tflBatchTestFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflBatchTestFiltered_tlbBatchTest] FOREIGN KEY ([idfBatchTest]) REFERENCES [dbo].[tlbBatchTest] ([idfBatchTest]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflBatchTestFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflBatchTestFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflBatchTestFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflDataAuditEventFiltered_tauDataAuditEvent__idfDataAuditEvent_R_1830]...';


GO
ALTER TABLE [dbo].[tflDataAuditEventFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflDataAuditEventFiltered_tauDataAuditEvent__idfDataAuditEvent_R_1830] FOREIGN KEY ([idfDataAuditEvent]) REFERENCES [dbo].[tauDataAuditEvent] ([idfDataAuditEvent]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflDataAuditEventFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflDataAuditEventFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflDataAuditEventFiltered_tflSiteGroup__idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflDataAuditEventFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflDataAuditEventFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflDataAuditEventFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflFarmFiltered_tlbFarm]...';


GO
ALTER TABLE [dbo].[tflFarmFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflFarmFiltered_tlbFarm] FOREIGN KEY ([idfFarm]) REFERENCES [dbo].[tlbFarm] ([idfFarm]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflFarmFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflFarmFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflFarmFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflFarmFilteredGroup_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflFarmFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflFarmFilteredGroup_tflSiteGroup__idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflGeoLocationFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflGeoLocationFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflGeoLocationFiltered_tflSiteGroup__idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflGeoLocationFiltered_tlbGeoLocation__idfGeoLocation_R_1805]...';


GO
ALTER TABLE [dbo].[tflGeoLocationFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflGeoLocationFiltered_tlbGeoLocation__idfGeoLocation_R_1805] FOREIGN KEY ([idfGeoLocation]) REFERENCES [dbo].[tlbGeoLocation] ([idfGeoLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflGeoLocationFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflGeoLocationFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflGeoLocationFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflHumanCaseFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflHumanCaseFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflHumanCaseFiltered_tflSiteGroup__idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflHumanCaseFiltered_tlbHumanCase__idfHumanCase]...';


GO
ALTER TABLE [dbo].[tflHumanCaseFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflHumanCaseFiltered_tlbHumanCase__idfHumanCase] FOREIGN KEY ([idfHumanCase]) REFERENCES [dbo].[tlbHumanCase] ([idfHumanCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflHumanCaseFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflHumanCaseFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflHumanCaseFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflHumanFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflHumanFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflHumanFiltered_tflSiteGroup__idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflHumanFiltered_tlbHuman]...';


GO
ALTER TABLE [dbo].[tflHumanFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflHumanFiltered_tlbHuman] FOREIGN KEY ([idfHuman]) REFERENCES [dbo].[tlbHuman] ([idfHuman]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflHumanFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflHumanFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflHumanFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflMonitoringSessionFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflMonitoringSessionFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflMonitoringSessionFiltered_tflSiteGroup__idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflMonitoringSessionFiltered_tlbMonitoringSession__idfMonitoringSession_R_1819]...';


GO
ALTER TABLE [dbo].[tflMonitoringSessionFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflMonitoringSessionFiltered_tlbMonitoringSession__idfMonitoringSession_R_1819] FOREIGN KEY ([idfMonitoringSession]) REFERENCES [dbo].[tlbMonitoringSession] ([idfMonitoringSession]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflMonitoringSessionFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflMonitoringSessionFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflMonitoringSessionFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflNewID_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflNewID] WITH NOCHECK
    ADD CONSTRAINT [FK_tflNewID_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflNotificationFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflNotificationFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflNotificationFiltered_tflSiteGroup__idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflNotificationFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflNotificationFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflNotificationFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflNotificationFiltered_tstNotification__idfNotification_R_1825]...';


GO
ALTER TABLE [dbo].[tflNotificationFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflNotificationFiltered_tstNotification__idfNotification_R_1825] FOREIGN KEY ([idfNotification]) REFERENCES [dbo].[tstNotification] ([idfNotification]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflObservationFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflObservationFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflObservationFiltered_tflSiteGroup__idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflObservationFiltered_tlbObservation__idfObservation_R_1809]...';


GO
ALTER TABLE [dbo].[tflObservationFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflObservationFiltered_tlbObservation__idfObservation_R_1809] FOREIGN KEY ([idfObservation]) REFERENCES [dbo].[tlbObservation] ([idfObservation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflObservationFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflObservationFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflObservationFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflOutbreakFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflOutbreakFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflOutbreakFiltered_tflSiteGroup__idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflOutbreakFiltered_tlbOutbreak__idfOutbreak_R_1811]...';


GO
ALTER TABLE [dbo].[tflOutbreakFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflOutbreakFiltered_tlbOutbreak__idfOutbreak_R_1811] FOREIGN KEY ([idfOutbreak]) REFERENCES [dbo].[tlbOutbreak] ([idfOutbreak]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflOutbreakFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflOutbreakFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflOutbreakFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflSite_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflSite] WITH NOCHECK
    ADD CONSTRAINT [FK_tflSite_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflSite_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tflSite] WITH NOCHECK
    ADD CONSTRAINT [FK_tflSite_tstSite__idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflSiteGroup_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tflSiteGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tflSiteGroup_gisLocation_idfsLocation] FOREIGN KEY ([idfsLocation]) REFERENCES [dbo].[gisLocation] ([idfsLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflSiteGroup_gisRayon_idfsRayon]...';


GO
ALTER TABLE [dbo].[tflSiteGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tflSiteGroup_gisRayon_idfsRayon] FOREIGN KEY ([idfsRayon]) REFERENCES [dbo].[gisRayon] ([idfsRayon]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflSiteGroup_trtBaseReference_idfsSiteGroupType]...';


GO
ALTER TABLE [dbo].[tflSiteGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tflSiteGroup_trtBaseReference_idfsSiteGroupType] FOREIGN KEY ([idfsSiteGroupType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflSiteGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflSiteGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tflSiteGroup_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflSiteGroup_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tflSiteGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tflSiteGroup_tstSite_idfsSite] FOREIGN KEY ([idfsCentralSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflSiteGroupRelation_tflSiteGroup_idfReceiverSite]...';


GO
ALTER TABLE [dbo].[tflSiteGroupRelation] WITH NOCHECK
    ADD CONSTRAINT [FK_tflSiteGroupRelation_tflSiteGroup_idfReceiverSite] FOREIGN KEY ([idfReceiverSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflSiteGroupRelation_tflSiteGroup_idfsSenderSiteGroup]...';


GO
ALTER TABLE [dbo].[tflSiteGroupRelation] WITH NOCHECK
    ADD CONSTRAINT [FK_tflSiteGroupRelation_tflSiteGroup_idfsSenderSiteGroup] FOREIGN KEY ([idfSenderSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflSiteGroupRelation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflSiteGroupRelation] WITH NOCHECK
    ADD CONSTRAINT [FK_tflSiteGroupRelation_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflSiteToSiteGroup_tflSiteGroup_idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflSiteToSiteGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tflSiteToSiteGroup_tflSiteGroup_idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflSiteToSiteGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflSiteToSiteGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tflSiteToSiteGroup_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflSiteToSiteGroup_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tflSiteToSiteGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tflSiteToSiteGroup_tstSite_idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflTransferOutFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflTransferOutFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflTransferOutFiltered_tflSiteGroup__idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflTransferOutFiltered_tlbTransferOUT__idfTransferOut_R_1817]...';


GO
ALTER TABLE [dbo].[tflTransferOutFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflTransferOutFiltered_tlbTransferOUT__idfTransferOut_R_1817] FOREIGN KEY ([idfTransferOut]) REFERENCES [dbo].[tlbTransferOUT] ([idfTransferOut]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflTransferOutFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflTransferOutFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflTransferOutFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflVectorSurveillanceSessionFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflVectorSurveillanceSessionFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflVectorSurveillanceSessionFiltered_tflSiteGroup__idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflVectorSurveillanceSessionFiltered_tlbVectorSurveillanceSession__idfVectorSurveillanceSession]...';


GO
ALTER TABLE [dbo].[tflVectorSurveillanceSessionFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflVectorSurveillanceSessionFiltered_tlbVectorSurveillanceSession__idfVectorSurveillanceSession] FOREIGN KEY ([idfVectorSurveillanceSession]) REFERENCES [dbo].[tlbVectorSurveillanceSession] ([idfVectorSurveillanceSession]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflVectorSurveillanceSessionFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflVectorSurveillanceSessionFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflVectorSurveillanceSessionFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflVetCaseFiltered_tflSiteGroup__idfSiteGroup]...';


GO
ALTER TABLE [dbo].[tflVetCaseFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflVetCaseFiltered_tflSiteGroup__idfSiteGroup] FOREIGN KEY ([idfSiteGroup]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflVetCaseFiltered_tlbVetCase__idfVetCase]...';


GO
ALTER TABLE [dbo].[tflVetCaseFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflVetCaseFiltered_tlbVetCase__idfVetCase] FOREIGN KEY ([idfVetCase]) REFERENCES [dbo].[tlbVetCase] ([idfVetCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tflVetCaseFiltered_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tflVetCaseFiltered] WITH NOCHECK
    ADD CONSTRAINT [FK_tflVetCaseFiltered_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbActivityParameters_ffParameter__idfsParameter_R_222]...';


GO
ALTER TABLE [dbo].[tlbActivityParameters] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbActivityParameters_ffParameter__idfsParameter_R_222] FOREIGN KEY ([idfsParameter]) REFERENCES [dbo].[ffParameter] ([idfsParameter]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbActivityParameters_tlbObservation__idfObservation_R_1423]...';


GO
ALTER TABLE [dbo].[tlbActivityParameters] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbActivityParameters_tlbObservation__idfObservation_R_1423] FOREIGN KEY ([idfObservation]) REFERENCES [dbo].[tlbObservation] ([idfObservation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbActivityParameters_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbActivityParameters] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbActivityParameters_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAdministrativeReportAudit_idfsReport]...';


GO
ALTER TABLE [dbo].[tlbAdministrativeReportAudit] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAdministrativeReportAudit_idfsReport] FOREIGN KEY ([idfsReport]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAdministrativeReportAudit_RoleID]...';


GO
ALTER TABLE [dbo].[tlbAdministrativeReportAudit] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAdministrativeReportAudit_RoleID] FOREIGN KEY ([RoleID]) REFERENCES [dbo].[tlbEmployeeGroup] ([idfEmployeeGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_gisBaseReference__idfsAdministrativeUnit_R_1666]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_gisBaseReference__idfsAdministrativeUnit_R_1666] FOREIGN KEY ([idfsAdministrativeUnit]) REFERENCES [dbo].[gisBaseReference] ([idfsGISBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfDiagnosticVersion_R_1686]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfDiagnosticVersion_R_1686] FOREIGN KEY ([idfDiagnosticVersion]) REFERENCES [dbo].[tlbAggrMatrixVersionHeader] ([idfVersion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfProphylacticVersion_R_1687]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfProphylacticVersion_R_1687] FOREIGN KEY ([idfProphylacticVersion]) REFERENCES [dbo].[tlbAggrMatrixVersionHeader] ([idfVersion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfSanitaryVersion_R_1688]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfSanitaryVersion_R_1688] FOREIGN KEY ([idfSanitaryVersion]) REFERENCES [dbo].[tlbAggrMatrixVersionHeader] ([idfVersion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfVersion_R_1684]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfVersion_R_1684] FOREIGN KEY ([idfVersion]) REFERENCES [dbo].[tlbAggrMatrixVersionHeader] ([idfVersion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tlbObservation__idfCaseObservation_R_1608]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tlbObservation__idfCaseObservation_R_1608] FOREIGN KEY ([idfCaseObservation]) REFERENCES [dbo].[tlbObservation] ([idfObservation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tlbObservation__idfDiagnosticObservation_R_1609]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tlbObservation__idfDiagnosticObservation_R_1609] FOREIGN KEY ([idfDiagnosticObservation]) REFERENCES [dbo].[tlbObservation] ([idfObservation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tlbObservation__idfProphylacticObservation_R_1610]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tlbObservation__idfProphylacticObservation_R_1610] FOREIGN KEY ([idfProphylacticObservation]) REFERENCES [dbo].[tlbObservation] ([idfObservation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tlbObservation__idfSanitaryObservation_R_1611]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tlbObservation__idfSanitaryObservation_R_1611] FOREIGN KEY ([idfSanitaryObservation]) REFERENCES [dbo].[tlbObservation] ([idfObservation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tlbOffice__idfEnteredByOffice_R_1606]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tlbOffice__idfEnteredByOffice_R_1606] FOREIGN KEY ([idfEnteredByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tlbOffice__idfOffice]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tlbOffice__idfOffice] FOREIGN KEY ([idfOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tlbOffice__idfReceivedByOffice_R_1602]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tlbOffice__idfReceivedByOffice_R_1602] FOREIGN KEY ([idfReceivedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tlbOffice__idfSentByOffice_R_1604]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tlbOffice__idfSentByOffice_R_1604] FOREIGN KEY ([idfSentByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tlbPerson__idfEnteredByPerson_R_1607]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tlbPerson__idfEnteredByPerson_R_1607] FOREIGN KEY ([idfEnteredByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tlbPerson__idfReceivedByPerson_R_1603]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tlbPerson__idfReceivedByPerson_R_1603] FOREIGN KEY ([idfReceivedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tlbPerson__idfSentByPerson_R_1605]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tlbPerson__idfSentByPerson_R_1605] FOREIGN KEY ([idfSentByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_trtBaseReference__idfsAggrCaseType_R_1601]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_trtBaseReference__idfsAggrCaseType_R_1601] FOREIGN KEY ([idfsAggrCaseType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrCase_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbAggrCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrCase_tstSite__idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrDiagnosticActionMTX_tlbAggrMatrixVersionHeader__idfVersion]...';


GO
ALTER TABLE [dbo].[tlbAggrDiagnosticActionMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrDiagnosticActionMTX_tlbAggrMatrixVersionHeader__idfVersion] FOREIGN KEY ([idfVersion]) REFERENCES [dbo].[tlbAggrMatrixVersionHeader] ([idfVersion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrDiagnosticActionMTX_trtBaseReference__idfsDiagnosticAction_R_1117]...';


GO
ALTER TABLE [dbo].[tlbAggrDiagnosticActionMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrDiagnosticActionMTX_trtBaseReference__idfsDiagnosticAction_R_1117] FOREIGN KEY ([idfsDiagnosticAction]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrDiagnosticActionMTX_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAggrDiagnosticActionMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrDiagnosticActionMTX_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrDiagnosticActionMTX_trtDiagnosis__idfsDiagnosis_R_1616]...';


GO
ALTER TABLE [dbo].[tlbAggrDiagnosticActionMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrDiagnosticActionMTX_trtDiagnosis__idfsDiagnosis_R_1616] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrDiagnosticActionMTX_trtSpeciesType__idfsSpeciesType_R_1116]...';


GO
ALTER TABLE [dbo].[tlbAggrDiagnosticActionMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrDiagnosticActionMTX_trtSpeciesType__idfsSpeciesType_R_1116] FOREIGN KEY ([idfsSpeciesType]) REFERENCES [dbo].[trtSpeciesType] ([idfsSpeciesType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrHumanCaseMTX_tlbAggrMatrixVersionHeader__idfVersion]...';


GO
ALTER TABLE [dbo].[tlbAggrHumanCaseMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrHumanCaseMTX_tlbAggrMatrixVersionHeader__idfVersion] FOREIGN KEY ([idfVersion]) REFERENCES [dbo].[tlbAggrMatrixVersionHeader] ([idfVersion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrHumanCaseMTX_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAggrHumanCaseMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrHumanCaseMTX_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrHumanCaseMTX_trtDiagnosis__idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[tlbAggrHumanCaseMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrHumanCaseMTX_trtDiagnosis__idfsDiagnosis] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrMatrixVersionHeader_trtBaseReference__idfsAggrMatrixType_R_1685]...';


GO
ALTER TABLE [dbo].[tlbAggrMatrixVersionHeader] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrMatrixVersionHeader_trtBaseReference__idfsAggrMatrixType_R_1685] FOREIGN KEY ([idfsMatrixType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrMatrixVersionHeader_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAggrMatrixVersionHeader] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrMatrixVersionHeader_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrProphylacticActionMTX_tlbAggrMatrixVersionHeader__idfVersion]...';


GO
ALTER TABLE [dbo].[tlbAggrProphylacticActionMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrProphylacticActionMTX_tlbAggrMatrixVersionHeader__idfVersion] FOREIGN KEY ([idfVersion]) REFERENCES [dbo].[tlbAggrMatrixVersionHeader] ([idfVersion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrProphylacticActionMTX_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAggrProphylacticActionMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrProphylacticActionMTX_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrProphylacticActionMTX_trtDiagnosis__idfsDiagnosis_R_1615]...';


GO
ALTER TABLE [dbo].[tlbAggrProphylacticActionMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrProphylacticActionMTX_trtDiagnosis__idfsDiagnosis_R_1615] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrProphylacticActionMTX_trtProphilacticAction__idfsProphilacticAction_R_1614]...';


GO
ALTER TABLE [dbo].[tlbAggrProphylacticActionMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrProphylacticActionMTX_trtProphilacticAction__idfsProphilacticAction_R_1614] FOREIGN KEY ([idfsProphilacticAction]) REFERENCES [dbo].[trtProphilacticAction] ([idfsProphilacticAction]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrProphylacticActionMTX_trtSpeciesType__idfsSpeciesType_R_1119]...';


GO
ALTER TABLE [dbo].[tlbAggrProphylacticActionMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrProphylacticActionMTX_trtSpeciesType__idfsSpeciesType_R_1119] FOREIGN KEY ([idfsSpeciesType]) REFERENCES [dbo].[trtSpeciesType] ([idfsSpeciesType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrSanitaryActionMTX_tlbAggrMatrixVersionHeader__idfVersion]...';


GO
ALTER TABLE [dbo].[tlbAggrSanitaryActionMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrSanitaryActionMTX_tlbAggrMatrixVersionHeader__idfVersion] FOREIGN KEY ([idfVersion]) REFERENCES [dbo].[tlbAggrMatrixVersionHeader] ([idfVersion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrSanitaryActionMTX_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAggrSanitaryActionMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrSanitaryActionMTX_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrSanitaryActionMTX_trtSanitaryAction__idfsSanitaryAction]...';


GO
ALTER TABLE [dbo].[tlbAggrSanitaryActionMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrSanitaryActionMTX_trtSanitaryAction__idfsSanitaryAction] FOREIGN KEY ([idfsSanitaryAction]) REFERENCES [dbo].[trtSanitaryAction] ([idfsSanitaryAction]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrVetCaseMTX_tlbAggrMatrixVersionHeader__idfVersion]...';


GO
ALTER TABLE [dbo].[tlbAggrVetCaseMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrVetCaseMTX_tlbAggrMatrixVersionHeader__idfVersion] FOREIGN KEY ([idfVersion]) REFERENCES [dbo].[tlbAggrMatrixVersionHeader] ([idfVersion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrVetCaseMTX_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAggrVetCaseMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrVetCaseMTX_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrVetCaseMTX_trtDiagnosis__idfsDiagnosis_R_1617]...';


GO
ALTER TABLE [dbo].[tlbAggrVetCaseMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrVetCaseMTX_trtDiagnosis__idfsDiagnosis_R_1617] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAggrVetCaseMTX_trtSpeciesType__idfsSpeciesType_R_1122]...';


GO
ALTER TABLE [dbo].[tlbAggrVetCaseMTX] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAggrVetCaseMTX_trtSpeciesType__idfsSpeciesType_R_1122] FOREIGN KEY ([idfsSpeciesType]) REFERENCES [dbo].[trtSpeciesType] ([idfsSpeciesType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAnimal_tlbObservation__idfObservation_R_1481]...';


GO
ALTER TABLE [dbo].[tlbAnimal] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAnimal_tlbObservation__idfObservation_R_1481] FOREIGN KEY ([idfObservation]) REFERENCES [dbo].[tlbObservation] ([idfObservation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAnimal_tlbSpecies__idfSpecies_R_1478]...';


GO
ALTER TABLE [dbo].[tlbAnimal] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAnimal_tlbSpecies__idfSpecies_R_1478] FOREIGN KEY ([idfSpecies]) REFERENCES [dbo].[tlbSpecies] ([idfSpecies]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAnimal_trtBaseReference__idfsAnimalAge_R_1236]...';


GO
ALTER TABLE [dbo].[tlbAnimal] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAnimal_trtBaseReference__idfsAnimalAge_R_1236] FOREIGN KEY ([idfsAnimalAge]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAnimal_trtBaseReference__idfsAnimalCondition_R_1280]...';


GO
ALTER TABLE [dbo].[tlbAnimal] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAnimal_trtBaseReference__idfsAnimalCondition_R_1280] FOREIGN KEY ([idfsAnimalCondition]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAnimal_trtBaseReference__idfsAnimalGender_R_1237]...';


GO
ALTER TABLE [dbo].[tlbAnimal] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAnimal_trtBaseReference__idfsAnimalGender_R_1237] FOREIGN KEY ([idfsAnimalGender]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAnimal_trtBaseReference__idfsYNClinicalSigns_R_1409]...';


GO
ALTER TABLE [dbo].[tlbAnimal] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAnimal_trtBaseReference__idfsYNClinicalSigns_R_1409] FOREIGN KEY ([idfsYNClinicalSigns]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAnimal_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAnimal] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAnimal_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAntimicrobialTherapy_tlbHumanCase__idfHumanCase_R_1422]...';


GO
ALTER TABLE [dbo].[tlbAntimicrobialTherapy] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAntimicrobialTherapy_tlbHumanCase__idfHumanCase_R_1422] FOREIGN KEY ([idfHumanCase]) REFERENCES [dbo].[tlbHumanCase] ([idfHumanCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbAntimicrobialTherapy_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbAntimicrobialTherapy] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbAntimicrobialTherapy_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_tlbHuman__idfHuman]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_tlbHuman__idfHuman] FOREIGN KEY ([idfHuman]) REFERENCES [dbo].[tlbHuman] ([idfHuman]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_tlbOffice__idfHospital]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_tlbOffice__idfHospital] FOREIGN KEY ([idfHospital]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_tlbPerson__idfEnteredBy]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_tlbPerson__idfEnteredBy] FOREIGN KEY ([idfEnteredBy]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsBasicSyndromicSurveillanceType]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsBasicSyndromicSurveillanceType] FOREIGN KEY ([idfsBasicSyndromicSurveillanceType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsMethodOfMeasurement]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsMethodOfMeasurement] FOREIGN KEY ([idfsMethodOfMeasurement]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsOutcome]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsOutcome] FOREIGN KEY ([idfsOutcome]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsTestResult]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsTestResult] FOREIGN KEY ([idfsTestResult]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNAdministratedAntiviralMedication]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNAdministratedAntiviralMedication] FOREIGN KEY ([idfsYNAdministratedAntiviralMedication]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNCough]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNCough] FOREIGN KEY ([idfsYNCough]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNFever]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNFever] FOREIGN KEY ([idfsYNFever]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPatientWasHospitalized]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPatientWasHospitalized] FOREIGN KEY ([idfsYNPatientWasHospitalized]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPatientWasInER]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPatientWasInER] FOREIGN KEY ([idfsYNPatientWasInER]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPostpartumPeriod]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPostpartumPeriod] FOREIGN KEY ([idfsYNPostpartumPeriod]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPregnant]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPregnant] FOREIGN KEY ([idfsYNPregnant]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNSeasonalFluVaccine]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNSeasonalFluVaccine] FOREIGN KEY ([idfsYNSeasonalFluVaccine]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNShortnessOfBreath]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNShortnessOfBreath] FOREIGN KEY ([idfsYNShortnessOfBreath]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNTreatment]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNTreatment] FOREIGN KEY ([idfsYNTreatment]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillance_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillance_tstSite__idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillanceAggregateDetail_tlbBasicSyndromicSurveillanceAggregateHeader__idfAggregateHeader]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateDetail] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateDetail_tlbBasicSyndromicSurveillanceAggregateHeader__idfAggregateHeader] FOREIGN KEY ([idfAggregateHeader]) REFERENCES [dbo].[tlbBasicSyndromicSurveillanceAggregateHeader] ([idfAggregateHeader]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillanceAggregateDetail_tlbOffice__idfHospital]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateDetail] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateDetail_tlbOffice__idfHospital] FOREIGN KEY ([idfHospital]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillanceAggregateDetail_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateDetail] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateDetail_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillanceAggregateHeader_tlbPerson__idfEnteredBy]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateHeader] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateHeader_tlbPerson__idfEnteredBy] FOREIGN KEY ([idfEnteredBy]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillanceAggregateHeader_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateHeader] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateHeader_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBasicSyndromicSurveillanceAggregateHeader_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateHeader] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateHeader_tstSite__idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBatchTest_tlbObservation__idfObservation_R_1541]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBatchTest_tlbObservation__idfObservation_R_1541] FOREIGN KEY ([idfObservation]) REFERENCES [dbo].[tlbObservation] ([idfObservation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBatchTest_tlbOffice__idfPerformedByOffice_R_1539]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBatchTest_tlbOffice__idfPerformedByOffice_R_1539] FOREIGN KEY ([idfPerformedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBatchTest_tlbOffice__idfResultEnteredByOffice]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBatchTest_tlbOffice__idfResultEnteredByOffice] FOREIGN KEY ([idfResultEnteredByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBatchTest_tlbOffice__idfValidatedByOffice_R_1542]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBatchTest_tlbOffice__idfValidatedByOffice_R_1542] FOREIGN KEY ([idfValidatedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBatchTest_tlbPerson__idfPerformedByPerson_R_1540]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBatchTest_tlbPerson__idfPerformedByPerson_R_1540] FOREIGN KEY ([idfPerformedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBatchTest_tlbPerson__idfResultEnteredByPerson]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBatchTest_tlbPerson__idfResultEnteredByPerson] FOREIGN KEY ([idfResultEnteredByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBatchTest_tlbPerson__idfValidatedByPerson_R_1543]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBatchTest_tlbPerson__idfValidatedByPerson_R_1543] FOREIGN KEY ([idfValidatedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBatchTest_trtBaseReference__idfsBatchStatus_R_1544]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBatchTest_trtBaseReference__idfsBatchStatus_R_1544] FOREIGN KEY ([idfsBatchStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBatchTest_trtBaseReference__idfsTestName]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBatchTest_trtBaseReference__idfsTestName] FOREIGN KEY ([idfsTestName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBatchTest_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBatchTest_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbBatchTest_tstSite__idfsSite_R_1653]...';


GO
ALTER TABLE [dbo].[tlbBatchTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbBatchTest_tstSite__idfsSite_R_1653] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbCampaign_trtBaseRef_CampaignCategory]...';


GO
ALTER TABLE [dbo].[tlbCampaign] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbCampaign_trtBaseRef_CampaignCategory] FOREIGN KEY ([CampaignCategoryID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbCampaign_trtBaseReference__idfsCampaignType_R_1736]...';


GO
ALTER TABLE [dbo].[tlbCampaign] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbCampaign_trtBaseReference__idfsCampaignType_R_1736] FOREIGN KEY ([idfsCampaignType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbCampaign_trtBaseReference_idfsCampaignStatus]...';


GO
ALTER TABLE [dbo].[tlbCampaign] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbCampaign_trtBaseReference_idfsCampaignStatus] FOREIGN KEY ([idfsCampaignStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbCampaign_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbCampaign] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbCampaign_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbCampaign_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbCampaign] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbCampaign_tstSite__idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbCampaignToDiagnosis_tlbCampaign__idfCampaign_R_1738]...';


GO
ALTER TABLE [dbo].[tlbCampaignToDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbCampaignToDiagnosis_tlbCampaign__idfCampaign_R_1738] FOREIGN KEY ([idfCampaign]) REFERENCES [dbo].[tlbCampaign] ([idfCampaign]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbCampaignToDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbCampaignToDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbCampaignToDiagnosis_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbCampaignToDiagnosis_trtDiagnosis__idfsDiagnosis_R_1739]...';


GO
ALTER TABLE [dbo].[tlbCampaignToDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbCampaignToDiagnosis_trtDiagnosis__idfsDiagnosis_R_1739] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbCampaignToDiagnosis_trtSampleType__idfsSampleType]...';


GO
ALTER TABLE [dbo].[tlbCampaignToDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbCampaignToDiagnosis_trtSampleType__idfsSampleType] FOREIGN KEY ([idfsSampleType]) REFERENCES [dbo].[trtSampleType] ([idfsSampleType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbCampaignToDiagnosis_trtSpeciesType__idfsSpeciesType]...';


GO
ALTER TABLE [dbo].[tlbCampaignToDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbCampaignToDiagnosis_trtSpeciesType__idfsSpeciesType] FOREIGN KEY ([idfsSpeciesType]) REFERENCES [dbo].[trtSpeciesType] ([idfsSpeciesType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbChangeDiagnosisHistory_tlbHumanCase__idfHumanCase_R_1797]...';


GO
ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbChangeDiagnosisHistory_tlbHumanCase__idfHumanCase_R_1797] FOREIGN KEY ([idfHumanCase]) REFERENCES [dbo].[tlbHumanCase] ([idfHumanCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbChangeDiagnosisHistory_tlbPerson__idfPerson]...';


GO
ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbChangeDiagnosisHistory_tlbPerson__idfPerson] FOREIGN KEY ([idfPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbChangeDiagnosisHistory_trtBaseReference_idfsChangeDiagnosisReason]...';


GO
ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbChangeDiagnosisHistory_trtBaseReference_idfsChangeDiagnosisReason] FOREIGN KEY ([idfsChangeDiagnosisReason]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbChangeDiagnosisHistory_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbChangeDiagnosisHistory_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbChangeDiagnosisHistory_trtDiagnosis__idfsCurrentDiagnosis_R_1799]...';


GO
ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbChangeDiagnosisHistory_trtDiagnosis__idfsCurrentDiagnosis_R_1799] FOREIGN KEY ([idfsCurrentDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbChangeDiagnosisHistory_trtDiagnosis__idfsPreviousDiagnosis_R_1798]...';


GO
ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbChangeDiagnosisHistory_trtDiagnosis__idfsPreviousDiagnosis_R_1798] FOREIGN KEY ([idfsPreviousDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbContactedCasePerson_tlbHuman__idfHuman_R_1460]...';


GO
ALTER TABLE [dbo].[tlbContactedCasePerson] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbContactedCasePerson_tlbHuman__idfHuman_R_1460] FOREIGN KEY ([idfHuman]) REFERENCES [dbo].[tlbHuman] ([idfHuman]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbContactedCasePerson_tlbHumanCase__idfHumanCase_R_1461]...';


GO
ALTER TABLE [dbo].[tlbContactedCasePerson] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbContactedCasePerson_tlbHumanCase__idfHumanCase_R_1461] FOREIGN KEY ([idfHumanCase]) REFERENCES [dbo].[tlbHumanCase] ([idfHumanCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbContactedCasePerson_trtBaseReference__idfsPersonContactType_R_1462]...';


GO
ALTER TABLE [dbo].[tlbContactedCasePerson] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbContactedCasePerson_trtBaseReference__idfsPersonContactType_R_1462] FOREIGN KEY ([idfsPersonContactType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbContactedCasePerson_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbContactedCasePerson] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbContactedCasePerson_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbDepartment_tlbOffice__idfOrganization]...';


GO
ALTER TABLE [dbo].[tlbDepartment] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbDepartment_tlbOffice__idfOrganization] FOREIGN KEY ([idfOrganization]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbDepartment_trtBaseReference__idfsDepartmentName]...';


GO
ALTER TABLE [dbo].[tlbDepartment] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbDepartment_trtBaseReference__idfsDepartmentName] FOREIGN KEY ([idfsDepartmentName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbDepartment_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbDepartment] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbDepartment_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_Employee_Site]...';


GO
ALTER TABLE [dbo].[tlbEmployee] WITH NOCHECK
    ADD CONSTRAINT [FK_Employee_Site] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbEmployee_trtBaseReference__idfsEmployeeType_R_1250]...';


GO
ALTER TABLE [dbo].[tlbEmployee] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbEmployee_trtBaseReference__idfsEmployeeType_R_1250] FOREIGN KEY ([idfsEmployeeType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbEmployee_trtBaseReference_idfsEmployeeCategory]...';


GO
ALTER TABLE [dbo].[tlbEmployee] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbEmployee_trtBaseReference_idfsEmployeeCategory] FOREIGN KEY ([idfsEmployeeCategory]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbEmployee_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbEmployee] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbEmployee_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbEmployeeGroup_tlbEmployee__idfEmployeeGroup_R_832]...';


GO
ALTER TABLE [dbo].[tlbEmployeeGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbEmployeeGroup_tlbEmployee__idfEmployeeGroup_R_832] FOREIGN KEY ([idfEmployeeGroup]) REFERENCES [dbo].[tlbEmployee] ([idfEmployee]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbEmployeeGroup_trtBaseReference__idfsEmployeeGroupName_R_1014]...';


GO
ALTER TABLE [dbo].[tlbEmployeeGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbEmployeeGroup_trtBaseReference__idfsEmployeeGroupName_R_1014] FOREIGN KEY ([idfsEmployeeGroupName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbEmployeeGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbEmployeeGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbEmployeeGroup_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbEmployeeGroup_tstSite__idfsSite_R_1018]...';


GO
ALTER TABLE [dbo].[tlbEmployeeGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbEmployeeGroup_tstSite__idfsSite_R_1018] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbEmployeeGroupMember_tlbEmployee__idfEmployee_R_1668]...';


GO
ALTER TABLE [dbo].[tlbEmployeeGroupMember] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbEmployeeGroupMember_tlbEmployee__idfEmployee_R_1668] FOREIGN KEY ([idfEmployee]) REFERENCES [dbo].[tlbEmployee] ([idfEmployee]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbEmployeeGroupMember_tlbEmployeeGroup__idfEmployeeGroup_R_1465]...';


GO
ALTER TABLE [dbo].[tlbEmployeeGroupMember] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbEmployeeGroupMember_tlbEmployeeGroup__idfEmployeeGroup_R_1465] FOREIGN KEY ([idfEmployeeGroup]) REFERENCES [dbo].[tlbEmployeeGroup] ([idfEmployeeGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbEmployeeGroupMember_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbEmployeeGroupMember] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbEmployeeGroupMember_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarm_tlbFarmActual]...';


GO
ALTER TABLE [dbo].[tlbFarm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarm_tlbFarmActual] FOREIGN KEY ([idfFarmActual]) REFERENCES [dbo].[tlbFarmActual] ([idfFarmActual]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarm_tlbGeoLocation__idfFarmAddress_R_1473]...';


GO
ALTER TABLE [dbo].[tlbFarm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarm_tlbGeoLocation__idfFarmAddress_R_1473] FOREIGN KEY ([idfFarmAddress]) REFERENCES [dbo].[tlbGeoLocation] ([idfGeoLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarm_tlbHuman__idfHuman_R_1470]...';


GO
ALTER TABLE [dbo].[tlbFarm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarm_tlbHuman__idfHuman_R_1470] FOREIGN KEY ([idfHuman]) REFERENCES [dbo].[tlbHuman] ([idfHuman]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarm_tlbMonitoringSession]...';


GO
ALTER TABLE [dbo].[tlbFarm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarm_tlbMonitoringSession] FOREIGN KEY ([idfMonitoringSession]) REFERENCES [dbo].[tlbMonitoringSession] ([idfMonitoringSession]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarm_tlbObservation__idfObservation_R_1471]...';


GO
ALTER TABLE [dbo].[tlbFarm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarm_tlbObservation__idfObservation_R_1471] FOREIGN KEY ([idfObservation]) REFERENCES [dbo].[tlbObservation] ([idfObservation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsAvianFarmType_R_1295]...';


GO
ALTER TABLE [dbo].[tlbFarm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsAvianFarmType_R_1295] FOREIGN KEY ([idfsAvianFarmType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsAvianProductionType_R_1294]...';


GO
ALTER TABLE [dbo].[tlbFarm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsAvianProductionType_R_1294] FOREIGN KEY ([idfsAvianProductionType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsFarmCategory_R_1288]...';


GO
ALTER TABLE [dbo].[tlbFarm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsFarmCategory_R_1288] FOREIGN KEY ([idfsFarmCategory]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsGrazingPattern_R_1298]...';


GO
ALTER TABLE [dbo].[tlbFarm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsGrazingPattern_R_1298] FOREIGN KEY ([idfsGrazingPattern]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsIntendedUse_R_1299]...';


GO
ALTER TABLE [dbo].[tlbFarm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsIntendedUse_R_1299] FOREIGN KEY ([idfsIntendedUse]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsLivestockProductionType_R_1296]...';


GO
ALTER TABLE [dbo].[tlbFarm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsLivestockProductionType_R_1296] FOREIGN KEY ([idfsLivestockProductionType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsMovementPattern_R_1300]...';


GO
ALTER TABLE [dbo].[tlbFarm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsMovementPattern_R_1300] FOREIGN KEY ([idfsMovementPattern]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarm_trtBaseReference__idfsOwnershipStructure_R_1287]...';


GO
ALTER TABLE [dbo].[tlbFarm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsOwnershipStructure_R_1287] FOREIGN KEY ([idfsOwnershipStructure]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarm_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbFarm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarm_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarm_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbFarm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarm_tstSite__idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarmActual_tlbGeoLocationShared__idfFarmAddress_R_1473]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarmActual_tlbGeoLocationShared__idfFarmAddress_R_1473] FOREIGN KEY ([idfFarmAddress]) REFERENCES [dbo].[tlbGeoLocationShared] ([idfGeoLocationShared]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarmActual_tlbHumanActual__idfHumanActual_R_1470]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarmActual_tlbHumanActual__idfHumanActual_R_1470] FOREIGN KEY ([idfHumanActual]) REFERENCES [dbo].[tlbHumanActual] ([idfHumanActual]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsAvianFarmType_R_1295]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsAvianFarmType_R_1295] FOREIGN KEY ([idfsAvianFarmType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsAvianProductionType_R_1294]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsAvianProductionType_R_1294] FOREIGN KEY ([idfsAvianProductionType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsFarmCategory_R_1288]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsFarmCategory_R_1288] FOREIGN KEY ([idfsFarmCategory]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsGrazingPattern_R_1298]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsGrazingPattern_R_1298] FOREIGN KEY ([idfsGrazingPattern]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsIntendedUse_R_1299]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsIntendedUse_R_1299] FOREIGN KEY ([idfsIntendedUse]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsLivestockProductionType_R_1296]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsLivestockProductionType_R_1296] FOREIGN KEY ([idfsLivestockProductionType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsMovementPattern_R_1300]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsMovementPattern_R_1300] FOREIGN KEY ([idfsMovementPattern]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference__idfsOwnershipStructure_R_1287]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsOwnershipStructure_R_1287] FOREIGN KEY ([idfsOwnershipStructure]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFarmActual_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbFarmActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFarmActual_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFreezer_trtBaseReference__idfsStorageType_R_1256]...';


GO
ALTER TABLE [dbo].[tlbFreezer] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFreezer_trtBaseReference__idfsStorageType_R_1256] FOREIGN KEY ([idfsStorageType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFreezer_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbFreezer] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFreezer_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFreezer_tstSite__idfsSite_R_236]...';


GO
ALTER TABLE [dbo].[tlbFreezer] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFreezer_tstSite__idfsSite_R_236] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_FreezerSubdivision_BaseRef_BoxSizeID]...';


GO
ALTER TABLE [dbo].[tlbFreezerSubdivision] WITH NOCHECK
    ADD CONSTRAINT [FK_FreezerSubdivision_BaseRef_BoxSizeID] FOREIGN KEY ([BoxSizeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFreezerSubdivision_tlbFreezer__idfFreezer_R_902]...';


GO
ALTER TABLE [dbo].[tlbFreezerSubdivision] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFreezerSubdivision_tlbFreezer__idfFreezer_R_902] FOREIGN KEY ([idfFreezer]) REFERENCES [dbo].[tlbFreezer] ([idfFreezer]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFreezerSubdivision_tlbFreezerSubdivision__idfParentSubdivision_R_904]...';


GO
ALTER TABLE [dbo].[tlbFreezerSubdivision] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFreezerSubdivision_tlbFreezerSubdivision__idfParentSubdivision_R_904] FOREIGN KEY ([idfParentSubdivision]) REFERENCES [dbo].[tlbFreezerSubdivision] ([idfSubdivision]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFreezerSubdivision_trtBaseReference__idfsSubdivisionType_R_1257]...';


GO
ALTER TABLE [dbo].[tlbFreezerSubdivision] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFreezerSubdivision_trtBaseReference__idfsSubdivisionType_R_1257] FOREIGN KEY ([idfsSubdivisionType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFreezerSubdivision_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbFreezerSubdivision] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFreezerSubdivision_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbFreezerSubdivision_tstSite__idfsSite_R_908]...';


GO
ALTER TABLE [dbo].[tlbFreezerSubdivision] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbFreezerSubdivision_tstSite__idfsSite_R_908] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocation_gisCountry__idfsCountry_R_972]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocation_gisCountry__idfsCountry_R_972] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocation_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocation_gisLocation_idfsLocation] FOREIGN KEY ([idfsLocation]) REFERENCES [dbo].[gisLocation] ([idfsLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocation_gisRayon__idfsRayon_R_974]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocation_gisRayon__idfsRayon_R_974] FOREIGN KEY ([idfsRayon]) REFERENCES [dbo].[gisRayon] ([idfsRayon]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocation_gisRegion__idfsRegion_R_973]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocation_gisRegion__idfsRegion_R_973] FOREIGN KEY ([idfsRegion]) REFERENCES [dbo].[gisRegion] ([idfsRegion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocation_gisSettlement__idfsSettlement_R_1218]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocation_gisSettlement__idfsSettlement_R_1218] FOREIGN KEY ([idfsSettlement]) REFERENCES [dbo].[gisSettlement] ([idfsSettlement]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocation_trtBaseReference__idfsGeoLocationType_R_1238]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocation_trtBaseReference__idfsGeoLocationType_R_1238] FOREIGN KEY ([idfsGeoLocationType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocation_trtBaseReference__idfsGroundType_R_1239]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocation_trtBaseReference__idfsGroundType_R_1239] FOREIGN KEY ([idfsGroundType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocation_trtBaseReference__idfsResidentType_R_1277]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocation_trtBaseReference__idfsResidentType_R_1277] FOREIGN KEY ([idfsResidentType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocation_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocation_tstSite__idfsSite_R_1028]...';


GO
ALTER TABLE [dbo].[tlbGeoLocation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocation_tstSite__idfsSite_R_1028] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationShared_gisCountry__idfsCountry_R_972]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationShared_gisCountry__idfsCountry_R_972] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationShared_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationShared_gisLocation_idfsLocation] FOREIGN KEY ([idfsLocation]) REFERENCES [dbo].[gisLocation] ([idfsLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationShared_gisRayon__idfsRayon_R_974]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationShared_gisRayon__idfsRayon_R_974] FOREIGN KEY ([idfsRayon]) REFERENCES [dbo].[gisRayon] ([idfsRayon]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationShared_gisRegion__idfsRegion_R_973]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationShared_gisRegion__idfsRegion_R_973] FOREIGN KEY ([idfsRegion]) REFERENCES [dbo].[gisRegion] ([idfsRegion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationShared_gisSettlement__idfsSettlement_R_1218]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationShared_gisSettlement__idfsSettlement_R_1218] FOREIGN KEY ([idfsSettlement]) REFERENCES [dbo].[gisSettlement] ([idfsSettlement]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationShared_trtBaseReference__idfsGeoLocationType_R_1238]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationShared_trtBaseReference__idfsGeoLocationType_R_1238] FOREIGN KEY ([idfsGeoLocationType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationShared_trtBaseReference__idfsGroundType_R_1239]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationShared_trtBaseReference__idfsGroundType_R_1239] FOREIGN KEY ([idfsGroundType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationShared_trtBaseReference__idfsResidentType_R_1277]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationShared_trtBaseReference__idfsResidentType_R_1277] FOREIGN KEY ([idfsResidentType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationShared_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationShared_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationShared_tstSite__idfsSite_R_1028]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationShared_tstSite__idfsSite_R_1028] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationSharedTranslation_tlbGeoLocationShared__idfGeoLocationShared]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationSharedTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationSharedTranslation_tlbGeoLocationShared__idfGeoLocationShared] FOREIGN KEY ([idfGeoLocationShared]) REFERENCES [dbo].[tlbGeoLocationShared] ([idfGeoLocationShared]) ON DELETE CASCADE NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationSharedTranslation_trtBaseReference__idfsLanguage]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationSharedTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationSharedTranslation_trtBaseReference__idfsLanguage] FOREIGN KEY ([idfsLanguage]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationSharedTranslation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationSharedTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationSharedTranslation_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationTranslation_tlbGeoLocation__idfGeoLocation]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationTranslation_tlbGeoLocation__idfGeoLocation] FOREIGN KEY ([idfGeoLocation]) REFERENCES [dbo].[tlbGeoLocation] ([idfGeoLocation]) ON DELETE CASCADE NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationTranslation_trtBaseReference__idfsLanguage]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationTranslation_trtBaseReference__idfsLanguage] FOREIGN KEY ([idfsLanguage]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGeoLocationTranslation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbGeoLocationTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGeoLocationTranslation_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGridDefinition_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbGridDefinition] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGridDefinition_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGridDefinition_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tlbGridDefinition] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGridDefinition_tstSite_idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGridDefinition_tstUserTable_idfUserID]...';


GO
ALTER TABLE [dbo].[tlbGridDefinition] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGridDefinition_tstUserTable_idfUserID] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHerd_tlbFarm__idfFarm_R_1480]...';


GO
ALTER TABLE [dbo].[tlbHerd] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHerd_tlbFarm__idfFarm_R_1480] FOREIGN KEY ([idfFarm]) REFERENCES [dbo].[tlbFarm] ([idfFarm]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHerd_tlbHerdActual]...';


GO
ALTER TABLE [dbo].[tlbHerd] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHerd_tlbHerdActual] FOREIGN KEY ([idfHerdActual]) REFERENCES [dbo].[tlbHerdActual] ([idfHerdActual]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHerd_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbHerd] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHerd_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHerdActual_tlbFarmActual__idfFarmActual_R_1480]...';


GO
ALTER TABLE [dbo].[tlbHerdActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHerdActual_tlbFarmActual__idfFarmActual_R_1480] FOREIGN KEY ([idfFarmActual]) REFERENCES [dbo].[tlbFarmActual] ([idfFarmActual]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHerdActual_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbHerdActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHerdActual_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHuman_tlbGeoLocation__idfCurrentResidenceAddress_R_1424]...';


GO
ALTER TABLE [dbo].[tlbHuman] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHuman_tlbGeoLocation__idfCurrentResidenceAddress_R_1424] FOREIGN KEY ([idfCurrentResidenceAddress]) REFERENCES [dbo].[tlbGeoLocation] ([idfGeoLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHuman_tlbGeoLocation__idfEmployerAddress_R_1425]...';


GO
ALTER TABLE [dbo].[tlbHuman] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHuman_tlbGeoLocation__idfEmployerAddress_R_1425] FOREIGN KEY ([idfEmployerAddress]) REFERENCES [dbo].[tlbGeoLocation] ([idfGeoLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHuman_tlbGeoLocation__idfRegistrationAddress_R_1426]...';


GO
ALTER TABLE [dbo].[tlbHuman] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHuman_tlbGeoLocation__idfRegistrationAddress_R_1426] FOREIGN KEY ([idfRegistrationAddress]) REFERENCES [dbo].[tlbGeoLocation] ([idfGeoLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHuman_tlbHumanActual]...';


GO
ALTER TABLE [dbo].[tlbHuman] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHuman_tlbHumanActual] FOREIGN KEY ([idfHumanActual]) REFERENCES [dbo].[tlbHumanActual] ([idfHumanActual]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHuman_tlbMonitoringSession_MontoringSessionID]...';


GO
ALTER TABLE [dbo].[tlbHuman] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHuman_tlbMonitoringSession_MontoringSessionID] FOREIGN KEY ([idfMonitoringSession]) REFERENCES [dbo].[tlbMonitoringSession] ([idfMonitoringSession]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHuman_trtBaseReference__idfsHumanGender_R_1232]...';


GO
ALTER TABLE [dbo].[tlbHuman] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHuman_trtBaseReference__idfsHumanGender_R_1232] FOREIGN KEY ([idfsHumanGender]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHuman_trtBaseReference__idfsNationality_R_1278]...';


GO
ALTER TABLE [dbo].[tlbHuman] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHuman_trtBaseReference__idfsNationality_R_1278] FOREIGN KEY ([idfsNationality]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHuman_trtBaseReference__idfsOccupationType_R_1233]...';


GO
ALTER TABLE [dbo].[tlbHuman] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHuman_trtBaseReference__idfsOccupationType_R_1233] FOREIGN KEY ([idfsOccupationType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHuman_trtBaseReference_idfsPersonIDType]...';


GO
ALTER TABLE [dbo].[tlbHuman] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHuman_trtBaseReference_idfsPersonIDType] FOREIGN KEY ([idfsPersonIDType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHuman_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbHuman] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHuman_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHuman_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbHuman] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHuman_tstSite__idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanActual_tlbGeoLocation__idfCurrentResidenceAddress_R_1424]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanActual_tlbGeoLocation__idfCurrentResidenceAddress_R_1424] FOREIGN KEY ([idfCurrentResidenceAddress]) REFERENCES [dbo].[tlbGeoLocationShared] ([idfGeoLocationShared]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanActual_tlbGeoLocation__idfEmployerAddress_R_1425]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanActual_tlbGeoLocation__idfEmployerAddress_R_1425] FOREIGN KEY ([idfEmployerAddress]) REFERENCES [dbo].[tlbGeoLocationShared] ([idfGeoLocationShared]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanActual_tlbGeoLocation__idfRegistrationAddress_R_1426]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanActual_tlbGeoLocation__idfRegistrationAddress_R_1426] FOREIGN KEY ([idfRegistrationAddress]) REFERENCES [dbo].[tlbGeoLocationShared] ([idfGeoLocationShared]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanActual_trtBaseReference__idfsHumanGender_R_1232]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanActual_trtBaseReference__idfsHumanGender_R_1232] FOREIGN KEY ([idfsHumanGender]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanActual_trtBaseReference__idfsNationality_R_1278]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanActual_trtBaseReference__idfsNationality_R_1278] FOREIGN KEY ([idfsNationality]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanActual_trtBaseReference__idfsOccupationType_R_1233]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanActual_trtBaseReference__idfsOccupationType_R_1233] FOREIGN KEY ([idfsOccupationType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanActual_trtBaseReference_idfsPersonIDType]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanActual_trtBaseReference_idfsPersonIDType] FOREIGN KEY ([idfsPersonIDType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanActual_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbHumanActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanActual_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanCase_BaseRef_ExposureLocationKnown]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanCase_BaseRef_ExposureLocationKnown] FOREIGN KEY ([idfsYNExposureLocationKnown]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanCase_BaseRef_PreviouslySoughtCare]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanCase_BaseRef_PreviouslySoughtCare] FOREIGN KEY ([idfsYNPreviouslySoughtCare]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_HumanCase_BaseRef_SpecificVaccinationAdministered]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_HumanCase_BaseRef_SpecificVaccinationAdministered] FOREIGN KEY ([idfsYNSpecificVaccinationAdministered]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumaCase_BaseRef_DiseaseReportTypeID]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumaCase_BaseRef_DiseaseReportTypeID] FOREIGN KEY ([DiseaseReportTypeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbGeoLocation__idfPointGeoLocation_R_1421]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbGeoLocation__idfPointGeoLocation_R_1421] FOREIGN KEY ([idfPointGeoLocation]) REFERENCES [dbo].[tlbGeoLocation] ([idfGeoLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbHuman]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbHuman] FOREIGN KEY ([idfHuman]) REFERENCES [dbo].[tlbHuman] ([idfHuman]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbHumanCase__idfDeduplicationResultCase_R_1444]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbHumanCase__idfDeduplicationResultCase_R_1444] FOREIGN KEY ([idfDeduplicationResultCase]) REFERENCES [dbo].[tlbHumanCase] ([idfHumanCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbMonitoringSession_ParentMonitoringSession]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbMonitoringSession_ParentMonitoringSession] FOREIGN KEY ([idfParentMonitoringSession]) REFERENCES [dbo].[tlbMonitoringSession] ([idfMonitoringSession]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbObservation__idfCSObservation_R_1416]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbObservation__idfCSObservation_R_1416] FOREIGN KEY ([idfCSObservation]) REFERENCES [dbo].[tlbObservation] ([idfObservation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbObservation__idfEpiObservation_R_1415]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbObservation__idfEpiObservation_R_1415] FOREIGN KEY ([idfEpiObservation]) REFERENCES [dbo].[tlbObservation] ([idfObservation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbOffice__idfHospital]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbOffice__idfHospital] FOREIGN KEY ([idfHospital]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbOffice__idfInvestigatedByOffice_R_1420]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbOffice__idfInvestigatedByOffice_R_1420] FOREIGN KEY ([idfInvestigatedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbOffice__idfReceivedByOffice_R_1419]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbOffice__idfReceivedByOffice_R_1419] FOREIGN KEY ([idfReceivedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbOffice__idfSentByOffice_R_1418]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbOffice__idfSentByOffice_R_1418] FOREIGN KEY ([idfSentByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbOffice_idfSoughtCareFacility]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbOffice_idfSoughtCareFacility] FOREIGN KEY ([idfSoughtCareFacility]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbOutbreak__idfOutbreak]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbOutbreak__idfOutbreak] FOREIGN KEY ([idfOutbreak]) REFERENCES [dbo].[tlbOutbreak] ([idfOutbreak]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbPerson__idfInvestigatedByPerson]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbPerson__idfInvestigatedByPerson] FOREIGN KEY ([idfInvestigatedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbPerson__idfReceivedByPerson]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbPerson__idfReceivedByPerson] FOREIGN KEY ([idfReceivedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbPerson__idfSentByPerson]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbPerson__idfSentByPerson] FOREIGN KEY ([idfSentByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tlbPerson_idfPersonEnteredBy]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tlbPerson_idfPersonEnteredBy] FOREIGN KEY ([idfPersonEnteredBy]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsCaseProgressStatus]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsCaseProgressStatus] FOREIGN KEY ([idfsCaseProgressStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsFinalCaseStatus_R_1676]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsFinalCaseStatus_R_1676] FOREIGN KEY ([idfsFinalCaseStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsFinalState_R_1292]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsFinalState_R_1292] FOREIGN KEY ([idfsFinalState]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsHospitalizationStatus_R_1269]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsHospitalizationStatus_R_1269] FOREIGN KEY ([idfsHospitalizationStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsHumanAgeType_R_1247]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsHumanAgeType_R_1247] FOREIGN KEY ([idfsHumanAgeType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsInitialCaseStatus_R_1439]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsInitialCaseStatus_R_1439] FOREIGN KEY ([idfsInitialCaseStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsOutcome_R_1414]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsOutcome_R_1414] FOREIGN KEY ([idfsOutcome]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsYNAntimicrobialTherapy_R_1409]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsYNAntimicrobialTherapy_R_1409] FOREIGN KEY ([idfsYNAntimicrobialTherapy]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsYNHospitalization_R_1410]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsYNHospitalization_R_1410] FOREIGN KEY ([idfsYNHospitalization]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsYNRelatedToOutbreak_R_1413]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsYNRelatedToOutbreak_R_1413] FOREIGN KEY ([idfsYNRelatedToOutbreak]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsYNSpecimenCollected_R_1411]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsYNSpecimenCollected_R_1411] FOREIGN KEY ([idfsYNSpecimenCollected]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference__idfsYNTestsConducted]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsYNTestsConducted] FOREIGN KEY ([idfsYNTestsConducted]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference_idfsNonNotifiableDiagnosis]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtBaseReference_idfsNonNotifiableDiagnosis] FOREIGN KEY ([idfsNonNotifiableDiagnosis]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference_idfsNotCollectedReason]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtBaseReference_idfsNotCollectedReason] FOREIGN KEY ([idfsNotCollectedReason]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtDiagnosis__idfsFinalDiagnosis_R_1427]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtDiagnosis__idfsFinalDiagnosis_R_1427] FOREIGN KEY ([idfsFinalDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_trtDiagnosis__idfsTentativeDiagnosis_R_1428]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_trtDiagnosis__idfsTentativeDiagnosis_R_1428] FOREIGN KEY ([idfsTentativeDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbHumanCase_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbHumanCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbHumanCase_tstSite__idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbAnimal]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbAnimal] FOREIGN KEY ([idfAnimal]) REFERENCES [dbo].[tlbAnimal] ([idfAnimal]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbDepartment_idfInDepartment]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbDepartment_idfInDepartment] FOREIGN KEY ([idfInDepartment]) REFERENCES [dbo].[tlbDepartment] ([idfDepartment]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbFreezerSubdivision]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbFreezerSubdivision] FOREIGN KEY ([idfSubdivision]) REFERENCES [dbo].[tlbFreezerSubdivision] ([idfSubdivision]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbHuman]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbHuman] FOREIGN KEY ([idfHuman]) REFERENCES [dbo].[tlbHuman] ([idfHuman]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbHumanCase]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbHumanCase] FOREIGN KEY ([idfHumanCase]) REFERENCES [dbo].[tlbHumanCase] ([idfHumanCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbMaterial__idfParentMaterial_R_1222]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbMaterial__idfParentMaterial_R_1222] FOREIGN KEY ([idfParentMaterial]) REFERENCES [dbo].[tlbMaterial] ([idfMaterial]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbMaterial__idfRootMaterial]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbMaterial__idfRootMaterial] FOREIGN KEY ([idfRootMaterial]) REFERENCES [dbo].[tlbMaterial] ([idfMaterial]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbMonitoringSession]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbMonitoringSession] FOREIGN KEY ([idfMonitoringSession]) REFERENCES [dbo].[tlbMonitoringSession] ([idfMonitoringSession]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbOffice__idfFieldCollectedByOffice_R_1530]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbOffice__idfFieldCollectedByOffice_R_1530] FOREIGN KEY ([idfFieldCollectedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbOffice__idfSendToOffice]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbOffice__idfSendToOffice] FOREIGN KEY ([idfSendToOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbPerson]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbPerson] FOREIGN KEY ([idfDestroyedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbPerson__idfAccesionByPerson]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbPerson__idfAccesionByPerson] FOREIGN KEY ([idfAccesionByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbPerson__idfFieldCollectedByPerson_R_1529]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbPerson__idfFieldCollectedByPerson_R_1529] FOREIGN KEY ([idfFieldCollectedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbPerson__idfMarkedForDispositionByPerson]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbPerson__idfMarkedForDispositionByPerson] FOREIGN KEY ([idfMarkedForDispositionByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbSpecies]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbSpecies] FOREIGN KEY ([idfSpecies]) REFERENCES [dbo].[tlbSpecies] ([idfSpecies]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbTesting__idfMainTest]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbTesting__idfMainTest] FOREIGN KEY ([idfMainTest]) REFERENCES [dbo].[tlbTesting] ([idfTesting]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbVector_idfVector]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbVector_idfVector] FOREIGN KEY ([idfVector]) REFERENCES [dbo].[tlbVector] ([idfVector]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbVectorSurveillanceSession_idfVectorSurveillanceSession]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbVectorSurveillanceSession_idfVectorSurveillanceSession] FOREIGN KEY ([idfVectorSurveillanceSession]) REFERENCES [dbo].[tlbVectorSurveillanceSession] ([idfVectorSurveillanceSession]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tlbVetCase]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tlbVetCase] FOREIGN KEY ([idfVetCase]) REFERENCES [dbo].[tlbVetCase] ([idfVetCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference__idfsAccessionCondition]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_trtBaseReference__idfsAccessionCondition] FOREIGN KEY ([idfsAccessionCondition]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference_DiseaseID]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_trtBaseReference_DiseaseID] FOREIGN KEY ([DiseaseID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference_idfsBirdStatus]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_trtBaseReference_idfsBirdStatus] FOREIGN KEY ([idfsBirdStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference_idfsDestructionMethod]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_trtBaseReference_idfsDestructionMethod] FOREIGN KEY ([idfsDestructionMethod]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference_idfsSampleKind]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_trtBaseReference_idfsSampleKind] FOREIGN KEY ([idfsSampleKind]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference_idfsSampleStatus]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_trtBaseReference_idfsSampleStatus] FOREIGN KEY ([idfsSampleStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference_PreviousSampleStatusID]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_trtBaseReference_PreviousSampleStatusID] FOREIGN KEY ([PreviousSampleStatusID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_trtSampleType__idfsSampleType]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_trtSampleType__idfsSampleType] FOREIGN KEY ([idfsSampleType]) REFERENCES [dbo].[trtSampleType] ([idfsSampleType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tstSite__idfsCurrentSite]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tstSite__idfsCurrentSite] FOREIGN KEY ([idfsCurrentSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMaterial_tstSite__idfsSite_R_1066]...';


GO
ALTER TABLE [dbo].[tlbMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMaterial_tstSite__idfsSite_R_1066] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSession_gisCountry__idfsCountry_R_1741]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSession_gisCountry__idfsCountry_R_1741] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSession_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSession_gisLocation_idfsLocation] FOREIGN KEY ([idfsLocation]) REFERENCES [dbo].[gisLocation] ([idfsLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSession_gisRayon__idfsRayon_R_1743]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSession_gisRayon__idfsRayon_R_1743] FOREIGN KEY ([idfsRayon]) REFERENCES [dbo].[gisRayon] ([idfsRayon]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSession_gisRegion__idfsRegion_R_1742]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSession_gisRegion__idfsRegion_R_1742] FOREIGN KEY ([idfsRegion]) REFERENCES [dbo].[gisRegion] ([idfsRegion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSession_gisSettlement__idfsSettlement_R_1744]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSession_gisSettlement__idfsSettlement_R_1744] FOREIGN KEY ([idfsSettlement]) REFERENCES [dbo].[gisSettlement] ([idfsSettlement]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSession_idfsMonitoringSessionSpeciesType]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSession_idfsMonitoringSessionSpeciesType] FOREIGN KEY ([idfsMonitoringSessionSpeciesType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSession_tlbCampaign__idfCampaign_R_1748]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSession_tlbCampaign__idfCampaign_R_1748] FOREIGN KEY ([idfCampaign]) REFERENCES [dbo].[tlbCampaign] ([idfCampaign]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSession_tlbPerson__idfPersonEnteredBy_R_1745]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSession_tlbPerson__idfPersonEnteredBy_R_1745] FOREIGN KEY ([idfPersonEnteredBy]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSession_trtBaseRef_SessionCategoryID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSession_trtBaseRef_SessionCategoryID] FOREIGN KEY ([SessionCategoryID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSession_trtBaseReference__idfsMonitoringSessionStatus_R_1740]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSession_trtBaseReference__idfsMonitoringSessionStatus_R_1740] FOREIGN KEY ([idfsMonitoringSessionStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSession_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSession_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSession_tstSite__idfsSite_R_1746]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSession_tstSite__idfsSite_R_1746] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionAction_tlbMonitoringSession__idfMonitoringSession_R_1833]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionAction] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionAction_tlbMonitoringSession__idfMonitoringSession_R_1833] FOREIGN KEY ([idfMonitoringSession]) REFERENCES [dbo].[tlbMonitoringSession] ([idfMonitoringSession]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionAction_tlbPerson__idfPersonEnteredBy_R_1836]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionAction] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionAction_tlbPerson__idfPersonEnteredBy_R_1836] FOREIGN KEY ([idfPersonEnteredBy]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionAction_trtBaseReference__idfsMonitoringSessionActionStatus_R_1835]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionAction] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionAction_trtBaseReference__idfsMonitoringSessionActionStatus_R_1835] FOREIGN KEY ([idfsMonitoringSessionActionStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionAction_trtBaseReference__idfsMonitoringSessionActionType_R_1834]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionAction] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionAction_trtBaseReference__idfsMonitoringSessionActionType_R_1834] FOREIGN KEY ([idfsMonitoringSessionActionType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionAction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionAction] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionAction_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionSummary_tlbFarm__idfFarm]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummary] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionSummary_tlbFarm__idfFarm] FOREIGN KEY ([idfFarm]) REFERENCES [dbo].[tlbFarm] ([idfFarm]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionSummary_tlbMonitoringSession__idfMonitoringSession]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummary] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionSummary_tlbMonitoringSession__idfMonitoringSession] FOREIGN KEY ([idfMonitoringSession]) REFERENCES [dbo].[tlbMonitoringSession] ([idfMonitoringSession]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionSummary_tlbSpecies__idfSpecies]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummary] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionSummary_tlbSpecies__idfSpecies] FOREIGN KEY ([idfSpecies]) REFERENCES [dbo].[tlbSpecies] ([idfSpecies]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionSummary_trtBaseReference__idfsAnimalSex]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummary] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionSummary_trtBaseReference__idfsAnimalSex] FOREIGN KEY ([idfsAnimalSex]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionSummary_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummary] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionSummary_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionSummaryDiagnosis_tlbMonitoringSessionSummary__idfMonitoringSessionSummary]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummaryDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionSummaryDiagnosis_tlbMonitoringSessionSummary__idfMonitoringSessionSummary] FOREIGN KEY ([idfMonitoringSessionSummary]) REFERENCES [dbo].[tlbMonitoringSessionSummary] ([idfMonitoringSessionSummary]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionSummaryDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummaryDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionSummaryDiagnosis_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionSummaryDiagnosis_trtDiagnosis__idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummaryDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionSummaryDiagnosis_trtDiagnosis__idfsDiagnosis] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionSummarySample_tlbMonitoringSessionSummary__idfMonitoringSessionSummary]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummarySample] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionSummarySample_tlbMonitoringSessionSummary__idfMonitoringSessionSummary] FOREIGN KEY ([idfMonitoringSessionSummary]) REFERENCES [dbo].[tlbMonitoringSessionSummary] ([idfMonitoringSessionSummary]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionSummarySample_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummarySample] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionSummarySample_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionSummarySample_trtSampleType__idfsSampleType]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionSummarySample] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionSummarySample_trtSampleType__idfsSampleType] FOREIGN KEY ([idfsSampleType]) REFERENCES [dbo].[trtSampleType] ([idfsSampleType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionToDiagnosis_tlbMonitoringSession__idfMonitoringSession_R_1750]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionToDiagnosis_tlbMonitoringSession__idfMonitoringSession_R_1750] FOREIGN KEY ([idfMonitoringSession]) REFERENCES [dbo].[tlbMonitoringSession] ([idfMonitoringSession]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionToDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionToDiagnosis_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionToDiagnosis_trtDiagnosis__idfsDiagnosis_R_1757]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionToDiagnosis_trtDiagnosis__idfsDiagnosis_R_1757] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionToDiagnosis_trtSampleType__idfsSampleType]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionToDiagnosis_trtSampleType__idfsSampleType] FOREIGN KEY ([idfsSampleType]) REFERENCES [dbo].[trtSampleType] ([idfsSampleType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionToDiagnosis_trtSpeciesType__idfsSpeciesType]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionToDiagnosis_trtSpeciesType__idfsSpeciesType] FOREIGN KEY ([idfsSpeciesType]) REFERENCES [dbo].[trtSpeciesType] ([idfsSpeciesType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionToMaterial_tlbMaterial]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionToMaterial_tlbMaterial] FOREIGN KEY ([idfMaterial]) REFERENCES [dbo].[tlbMaterial] ([idfMaterial]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionToMaterial_trtBaseRef_idfsSampleType]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionToMaterial_trtBaseRef_idfsSampleType] FOREIGN KEY ([idfsSampleType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionToMaterial_trtBaseReference]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionToMaterial_trtBaseReference] FOREIGN KEY ([idfsDisease]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionToMaterial_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionToMaterial_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbObservation_ffFormTemplate__idfsFormTemplate_R_1405]...';


GO
ALTER TABLE [dbo].[tlbObservation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbObservation_ffFormTemplate__idfsFormTemplate_R_1405] FOREIGN KEY ([idfsFormTemplate]) REFERENCES [dbo].[ffFormTemplate] ([idfsFormTemplate]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbObservation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbObservation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbObservation_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbObservation_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbObservation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbObservation_tstSite__idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOffice_BaseRef_]...';


GO
ALTER TABLE [dbo].[tlbOffice] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOffice_BaseRef_] FOREIGN KEY ([OrganizationTypeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOffice_tlbGeoLocationShared]...';


GO
ALTER TABLE [dbo].[tlbOffice] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOffice_tlbGeoLocationShared] FOREIGN KEY ([idfLocation]) REFERENCES [dbo].[tlbGeoLocationShared] ([idfGeoLocationShared]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOffice_trtBaseReference__idfsOfficeAbbreviation_R_704]...';


GO
ALTER TABLE [dbo].[tlbOffice] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOffice_trtBaseReference__idfsOfficeAbbreviation_R_704] FOREIGN KEY ([idfsOfficeAbbreviation]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOffice_trtBaseReference__idfsOfficeName_R_703]...';


GO
ALTER TABLE [dbo].[tlbOffice] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOffice_trtBaseReference__idfsOfficeName_R_703] FOREIGN KEY ([idfsOfficeName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOffice_trtBaseReference_LegalFormID]...';


GO
ALTER TABLE [dbo].[tlbOffice] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOffice_trtBaseReference_LegalFormID] FOREIGN KEY ([LegalFormID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOffice_trtBaseReference_MainFormOfActivityID]...';


GO
ALTER TABLE [dbo].[tlbOffice] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOffice_trtBaseReference_MainFormOfActivityID] FOREIGN KEY ([MainFormOfActivityID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOffice_trtBaseReference_OwnershipFormID]...';


GO
ALTER TABLE [dbo].[tlbOffice] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOffice_trtBaseReference_OwnershipFormID] FOREIGN KEY ([OwnershipFormID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOffice_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbOffice] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOffice_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOffice_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tlbOffice] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOffice_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOffice_tstSite__idfsSite_R_1030]...';


GO
ALTER TABLE [dbo].[tlbOffice] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOffice_tstSite__idfsSite_R_1030] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreak_BaseRef_OutbreakTypeID]...';


GO
ALTER TABLE [dbo].[tlbOutbreak] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreak_BaseRef_OutbreakTypeID] FOREIGN KEY ([OutbreakTypeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutBreak_idfsLocation_gisLocation]...';


GO
ALTER TABLE [dbo].[tlbOutbreak] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutBreak_idfsLocation_gisLocation] FOREIGN KEY ([idfsLocation]) REFERENCES [dbo].[gisLocation] ([idfsLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreak_tlbGeoLocation__idfGeoLocation_R_1469]...';


GO
ALTER TABLE [dbo].[tlbOutbreak] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreak_tlbGeoLocation__idfGeoLocation_R_1469] FOREIGN KEY ([idfGeoLocation]) REFERENCES [dbo].[tlbGeoLocation] ([idfGeoLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreak_trtBaseReference__idfsDiagnosisOrDiagnosisGroup]...';


GO
ALTER TABLE [dbo].[tlbOutbreak] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreak_trtBaseReference__idfsDiagnosisOrDiagnosisGroup] FOREIGN KEY ([idfsDiagnosisOrDiagnosisGroup]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreak_trtBaseReference__idfsOutbreakStatus_R_1262]...';


GO
ALTER TABLE [dbo].[tlbOutbreak] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreak_trtBaseReference__idfsOutbreakStatus_R_1262] FOREIGN KEY ([idfsOutbreakStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreak_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbOutbreak] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreak_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreak_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbOutbreak] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreak_tstSite__idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreakCaseMonitoring_tlbHumanCase__idfHumanCase]...';


GO
ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreakCaseMonitoring_tlbHumanCase__idfHumanCase] FOREIGN KEY ([idfHumanCase]) REFERENCES [dbo].[tlbHumanCase] ([idfHumanCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreakCaseMonitoring_tlbObservation__idfInvestigatedByOffice]...';


GO
ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreakCaseMonitoring_tlbObservation__idfInvestigatedByOffice] FOREIGN KEY ([idfInvestigatedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreakCaseMonitoring_tlbObservation__idfInvestigatedByPerson]...';


GO
ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreakCaseMonitoring_tlbObservation__idfInvestigatedByPerson] FOREIGN KEY ([idfInvestigatedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreakCaseMonitoring_tlbObservation__idfObservation]...';


GO
ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreakCaseMonitoring_tlbObservation__idfObservation] FOREIGN KEY ([idfObservation]) REFERENCES [dbo].[tlbObservation] ([idfObservation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreakCaseMonitoring_tlbVetCase__idfVetCase]...';


GO
ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreakCaseMonitoring_tlbVetCase__idfVetCase] FOREIGN KEY ([idfVetCase]) REFERENCES [dbo].[tlbVetCase] ([idfVetCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreakCaseMonitoring_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreakCaseMonitoring_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreakNote_BaseRef_UpdatePriorityID]...';


GO
ALTER TABLE [dbo].[tlbOutbreakNote] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreakNote_BaseRef_UpdatePriorityID] FOREIGN KEY ([UpdatePriorityID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreakNote_tlbOutbreak__idfOutbreak]...';


GO
ALTER TABLE [dbo].[tlbOutbreakNote] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreakNote_tlbOutbreak__idfOutbreak] FOREIGN KEY ([idfOutbreak]) REFERENCES [dbo].[tlbOutbreak] ([idfOutbreak]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreakNote_tlbPerson__idfPerson]...';


GO
ALTER TABLE [dbo].[tlbOutbreakNote] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreakNote_tlbPerson__idfPerson] FOREIGN KEY ([idfPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOutbreakNote_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbOutbreakNote] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOutbreakNote_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPensideTest_tlbMaterial__idfMaterial_R_1664]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPensideTest_tlbMaterial__idfMaterial_R_1664] FOREIGN KEY ([idfMaterial]) REFERENCES [dbo].[tlbMaterial] ([idfMaterial]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPensideTest_tlbOffice_idfTestedByOffice]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPensideTest_tlbOffice_idfTestedByOffice] FOREIGN KEY ([idfTestedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPensideTest_tlbPerson_idfTestedByPerson]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPensideTest_tlbPerson_idfTestedByPerson] FOREIGN KEY ([idfTestedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPensideTest_trtBaseReference__idfsPensideTestCategory]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPensideTest_trtBaseReference__idfsPensideTestCategory] FOREIGN KEY ([idfsPensideTestCategory]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPensideTest_trtBaseReference__idfsPensideTestName]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPensideTest_trtBaseReference__idfsPensideTestName] FOREIGN KEY ([idfsPensideTestName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPensideTest_trtBaseReference__idfsPensideTestResult_R_1573]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPensideTest_trtBaseReference__idfsPensideTestResult_R_1573] FOREIGN KEY ([idfsPensideTestResult]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPensideTest_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPensideTest_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPensideTest_trtDiagnosis_idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[tlbPensideTest] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPensideTest_trtDiagnosis_idfsDiagnosis] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPerson_tlbDepartment__idfDepartment]...';


GO
ALTER TABLE [dbo].[tlbPerson] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPerson_tlbDepartment__idfDepartment] FOREIGN KEY ([idfDepartment]) REFERENCES [dbo].[tlbDepartment] ([idfDepartment]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPerson_tlbEmployee__idfPerson_R_1498]...';


GO
ALTER TABLE [dbo].[tlbPerson] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPerson_tlbEmployee__idfPerson_R_1498] FOREIGN KEY ([idfPerson]) REFERENCES [dbo].[tlbEmployee] ([idfEmployee]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPerson_tlbOffice__idfInstitution_R_1509]...';


GO
ALTER TABLE [dbo].[tlbPerson] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPerson_tlbOffice__idfInstitution_R_1509] FOREIGN KEY ([idfInstitution]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPerson_trtBaseReference__idfsStaffPosition_R_1511]...';


GO
ALTER TABLE [dbo].[tlbPerson] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPerson_trtBaseReference__idfsStaffPosition_R_1511] FOREIGN KEY ([idfsStaffPosition]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPerson_trtBaseReference_PersonalIDTypeID]...';


GO
ALTER TABLE [dbo].[tlbPerson] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPerson_trtBaseReference_PersonalIDTypeID] FOREIGN KEY ([PersonalIDTypeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPerson_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbPerson] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPerson_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPostalCode_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tlbPostalCode] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPostalCode_gisLocation_idfsLocation] FOREIGN KEY ([idfsLocation]) REFERENCES [dbo].[gisLocation] ([idfsLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPostalCode_gisSettlement__idfsSettlement_R_17]...';


GO
ALTER TABLE [dbo].[tlbPostalCode] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPostalCode_gisSettlement__idfsSettlement_R_17] FOREIGN KEY ([idfsSettlement]) REFERENCES [dbo].[gisSettlement] ([idfsSettlement]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbPostalCode_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbPostalCode] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbPostalCode_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbReportForm_idfsReportFormType]...';


GO
ALTER TABLE [dbo].[tlbReportForm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbReportForm_idfsReportFormType] FOREIGN KEY ([idfsReportFormType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbReportForm_tlbOffice__idfEnteredByOffice]...';


GO
ALTER TABLE [dbo].[tlbReportForm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbReportForm_tlbOffice__idfEnteredByOffice] FOREIGN KEY ([idfEnteredByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbReportForm_tlbOffice__idfSentByOffice]...';


GO
ALTER TABLE [dbo].[tlbReportForm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbReportForm_tlbOffice__idfSentByOffice] FOREIGN KEY ([idfSentByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbReportForm_tlbPerson__idfEnteredByPerson]...';


GO
ALTER TABLE [dbo].[tlbReportForm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbReportForm_tlbPerson__idfEnteredByPerson] FOREIGN KEY ([idfEnteredByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbReportForm_tlbPerson__idfSentByPerson]...';


GO
ALTER TABLE [dbo].[tlbReportForm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbReportForm_tlbPerson__idfSentByPerson] FOREIGN KEY ([idfSentByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbReportForm_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tlbReportForm] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbReportForm_tstSite_idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbSpecies_OutbreakCaseStatus]...';


GO
ALTER TABLE [dbo].[tlbSpecies] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbSpecies_OutbreakCaseStatus] FOREIGN KEY ([idfsOutbreakCaseStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbSpecies_tlbHerd__idfHerd_R_1479]...';


GO
ALTER TABLE [dbo].[tlbSpecies] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbSpecies_tlbHerd__idfHerd_R_1479] FOREIGN KEY ([idfHerd]) REFERENCES [dbo].[tlbHerd] ([idfHerd]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbSpecies_tlbObservation__idfObservation_R_1474]...';


GO
ALTER TABLE [dbo].[tlbSpecies] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbSpecies_tlbObservation__idfObservation_R_1474] FOREIGN KEY ([idfObservation]) REFERENCES [dbo].[tlbObservation] ([idfObservation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbSpecies_tlbSpeciesActual]...';


GO
ALTER TABLE [dbo].[tlbSpecies] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbSpecies_tlbSpeciesActual] FOREIGN KEY ([idfSpeciesActual]) REFERENCES [dbo].[tlbSpeciesActual] ([idfSpeciesActual]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbSpecies_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbSpecies] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbSpecies_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbSpecies_trtSpeciesType__idfsSpeciesType_R_1651]...';


GO
ALTER TABLE [dbo].[tlbSpecies] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbSpecies_trtSpeciesType__idfsSpeciesType_R_1651] FOREIGN KEY ([idfsSpeciesType]) REFERENCES [dbo].[trtSpeciesType] ([idfsSpeciesType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbSpeciesActual_tlbHerdActual__idfHerdActual_R_1479]...';


GO
ALTER TABLE [dbo].[tlbSpeciesActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbSpeciesActual_tlbHerdActual__idfHerdActual_R_1479] FOREIGN KEY ([idfHerdActual]) REFERENCES [dbo].[tlbHerdActual] ([idfHerdActual]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbSpeciesActual_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbSpeciesActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbSpeciesActual_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbSpeciesActual_trtSpeciesType__idfsSpeciesType_R_1651]...';


GO
ALTER TABLE [dbo].[tlbSpeciesActual] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbSpeciesActual_trtSpeciesType__idfsSpeciesType_R_1651] FOREIGN KEY ([idfsSpeciesType]) REFERENCES [dbo].[trtSpeciesType] ([idfsSpeciesType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbStatistic_gisBaseReference__idfsArea_R_1641]...';


GO
ALTER TABLE [dbo].[tlbStatistic] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbStatistic_gisBaseReference__idfsArea_R_1641] FOREIGN KEY ([idfsArea]) REFERENCES [dbo].[gisBaseReference] ([idfsGISBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbStatistic_trtBaseReference__idfsMainBaseReference_R_923]...';


GO
ALTER TABLE [dbo].[tlbStatistic] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbStatistic_trtBaseReference__idfsMainBaseReference_R_923] FOREIGN KEY ([idfsMainBaseReference]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbStatistic_trtBaseReference__idfsStatisticAreaType_R_1273]...';


GO
ALTER TABLE [dbo].[tlbStatistic] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbStatistic_trtBaseReference__idfsStatisticAreaType_R_1273] FOREIGN KEY ([idfsStatisticAreaType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbStatistic_trtBaseReference__idfsStatisticPeriodType_R_1272]...';


GO
ALTER TABLE [dbo].[tlbStatistic] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbStatistic_trtBaseReference__idfsStatisticPeriodType_R_1272] FOREIGN KEY ([idfsStatisticPeriodType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbStatistic_trtBaseReference_idfsStatisticalAgeGroup]...';


GO
ALTER TABLE [dbo].[tlbStatistic] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbStatistic_trtBaseReference_idfsStatisticalAgeGroup] FOREIGN KEY ([idfsStatisticalAgeGroup]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbStatistic_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbStatistic] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbStatistic_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbStatistic_trtStatisticDataType__idfsStatisticDataType_R_921]...';


GO
ALTER TABLE [dbo].[tlbStatistic] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbStatistic_trtStatisticDataType__idfsStatisticDataType_R_921] FOREIGN KEY ([idfsStatisticDataType]) REFERENCES [dbo].[trtStatisticDataType] ([idfsStatisticDataType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbStreet_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tlbStreet] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbStreet_gisLocation_idfsLocation] FOREIGN KEY ([idfsLocation]) REFERENCES [dbo].[gisLocation] ([idfsLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbStreet_gisSettlement__idfsSettlement_R_16]...';


GO
ALTER TABLE [dbo].[tlbStreet] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbStreet_gisSettlement__idfsSettlement_R_16] FOREIGN KEY ([idfsSettlement]) REFERENCES [dbo].[gisSettlement] ([idfsSettlement]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbStreet_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbStreet] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbStreet_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTestAmendmentHistory_tlbOffice__idfAmendByOffice]...';


GO
ALTER TABLE [dbo].[tlbTestAmendmentHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTestAmendmentHistory_tlbOffice__idfAmendByOffice] FOREIGN KEY ([idfAmendByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTestAmendmentHistory_tlbPerson__idfAmendByPerson]...';


GO
ALTER TABLE [dbo].[tlbTestAmendmentHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTestAmendmentHistory_tlbPerson__idfAmendByPerson] FOREIGN KEY ([idfAmendByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTestAmendmentHistory_tlbTesting__idfTesting]...';


GO
ALTER TABLE [dbo].[tlbTestAmendmentHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTestAmendmentHistory_tlbTesting__idfTesting] FOREIGN KEY ([idfTesting]) REFERENCES [dbo].[tlbTesting] ([idfTesting]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTestAmendmentHistory_trtBaseReference__idfsNewTestResult]...';


GO
ALTER TABLE [dbo].[tlbTestAmendmentHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTestAmendmentHistory_trtBaseReference__idfsNewTestResult] FOREIGN KEY ([idfsNewTestResult]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTestAmendmentHistory_trtBaseReference__idfsOldTestResult]...';


GO
ALTER TABLE [dbo].[tlbTestAmendmentHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTestAmendmentHistory_trtBaseReference__idfsOldTestResult] FOREIGN KEY ([idfsOldTestResult]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTestAmendmentHistory_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbTestAmendmentHistory] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTestAmendmentHistory_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_tlbBatchTest__idfBatchTest_R_1534]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_tlbBatchTest__idfBatchTest_R_1534] FOREIGN KEY ([idfBatchTest]) REFERENCES [dbo].[tlbBatchTest] ([idfBatchTest]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_tlbHumanCase]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_tlbHumanCase] FOREIGN KEY ([idfHumanCase]) REFERENCES [dbo].[tlbHumanCase] ([idfHumanCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_tlbMaterial]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_tlbMaterial] FOREIGN KEY ([idfMaterial]) REFERENCES [dbo].[tlbMaterial] ([idfMaterial]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_tlbMonitoringSession]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_tlbMonitoringSession] FOREIGN KEY ([idfMonitoringSession]) REFERENCES [dbo].[tlbMonitoringSession] ([idfMonitoringSession]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_tlbOffice__idfPerformedByOffice]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_tlbOffice__idfPerformedByOffice] FOREIGN KEY ([idfPerformedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_tlbOffice__idfResultEnteredByOffice]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_tlbOffice__idfResultEnteredByOffice] FOREIGN KEY ([idfResultEnteredByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_tlbOffice__idfTestedByOffice]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_tlbOffice__idfTestedByOffice] FOREIGN KEY ([idfTestedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_tlbOffice__idfValidatedByOffice]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_tlbOffice__idfValidatedByOffice] FOREIGN KEY ([idfValidatedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_tlbPerson__idfResultEnteredByPerson]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_tlbPerson__idfResultEnteredByPerson] FOREIGN KEY ([idfResultEnteredByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_tlbPerson__idfTestedByPerson]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_tlbPerson__idfTestedByPerson] FOREIGN KEY ([idfTestedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_tlbPerson__idfValidatedByPerson]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_tlbPerson__idfValidatedByPerson] FOREIGN KEY ([idfValidatedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_tlbVector]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_tlbVector] FOREIGN KEY ([idfVector]) REFERENCES [dbo].[tlbVector] ([idfVector]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_tlbVetCase]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_tlbVetCase] FOREIGN KEY ([idfVetCase]) REFERENCES [dbo].[tlbVetCase] ([idfVetCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_trtBaseReference__idfsTestCategory]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_trtBaseReference__idfsTestCategory] FOREIGN KEY ([idfsTestCategory]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_trtBaseReference__idfsTestName]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_trtBaseReference__idfsTestName] FOREIGN KEY ([idfsTestName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_trtBaseReference__idfsTestResult_R_1243]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_trtBaseReference__idfsTestResult_R_1243] FOREIGN KEY ([idfsTestResult]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_trtBaseReference__idfsTestStatus_R_1754]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_trtBaseReference__idfsTestStatus_R_1754] FOREIGN KEY ([idfsTestStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_trtBaseReference_PreviousTestStatusID]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_trtBaseReference_PreviousTestStatusID] FOREIGN KEY ([PreviousTestStatusID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTesting_trtDiagnosis]...';


GO
ALTER TABLE [dbo].[tlbTesting] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTesting_trtDiagnosis] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTestValidation_tlbOffice__idfInterpretedByOffice_R_1550]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTestValidation_tlbOffice__idfInterpretedByOffice_R_1550] FOREIGN KEY ([idfInterpretedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTestValidation_tlbOffice__idfValidatedByOffice_R_1548]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTestValidation_tlbOffice__idfValidatedByOffice_R_1548] FOREIGN KEY ([idfValidatedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTestValidation_tlbPerson__idfInterpretedByPerson_R_1551]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTestValidation_tlbPerson__idfInterpretedByPerson_R_1551] FOREIGN KEY ([idfInterpretedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTestValidation_tlbPerson__idfValidatedByPerson_R_1549]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTestValidation_tlbPerson__idfValidatedByPerson_R_1549] FOREIGN KEY ([idfValidatedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTestValidation_tlbTesting__idfTesting_R_1546]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTestValidation_tlbTesting__idfTesting_R_1546] FOREIGN KEY ([idfTesting]) REFERENCES [dbo].[tlbTesting] ([idfTesting]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTestValidation_trtBaseReference__idfsInterpretedStatus_R_1552]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTestValidation_trtBaseReference__idfsInterpretedStatus_R_1552] FOREIGN KEY ([idfsInterpretedStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTestValidation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTestValidation_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTestValidation_trtDiagnosis__idfsDiagnosis_R_1547]...';


GO
ALTER TABLE [dbo].[tlbTestValidation] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTestValidation_trtDiagnosis__idfsDiagnosis_R_1547] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTransferOUT_tlbOffice__idfSendFromOffice_R_1516]...';


GO
ALTER TABLE [dbo].[tlbTransferOUT] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTransferOUT_tlbOffice__idfSendFromOffice_R_1516] FOREIGN KEY ([idfSendFromOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTransferOUT_tlbOffice__idfSendToOffice_R_1517]...';


GO
ALTER TABLE [dbo].[tlbTransferOUT] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTransferOUT_tlbOffice__idfSendToOffice_R_1517] FOREIGN KEY ([idfSendToOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTransferOUT_tlbPerson__idfSendByPerson_R_1518]...';


GO
ALTER TABLE [dbo].[tlbTransferOUT] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTransferOUT_tlbPerson__idfSendByPerson_R_1518] FOREIGN KEY ([idfSendByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTransferOUT_trtBaseReference__idfsTransferStatus_R_1671]...';


GO
ALTER TABLE [dbo].[tlbTransferOUT] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTransferOUT_trtBaseReference__idfsTransferStatus_R_1671] FOREIGN KEY ([idfsTransferStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTransferOUT_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbTransferOUT] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTransferOUT_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTransferOUT_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tlbTransferOUT] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTransferOUT_tstSite__idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTransferOutMaterial_tlbMaterial]...';


GO
ALTER TABLE [dbo].[tlbTransferOutMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTransferOutMaterial_tlbMaterial] FOREIGN KEY ([idfMaterial]) REFERENCES [dbo].[tlbMaterial] ([idfMaterial]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTransferOutMaterial_tlbTransferOUT]...';


GO
ALTER TABLE [dbo].[tlbTransferOutMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTransferOutMaterial_tlbTransferOUT] FOREIGN KEY ([idfTransferOut]) REFERENCES [dbo].[tlbTransferOUT] ([idfTransferOut]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbTransferOutMaterial_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbTransferOutMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbTransferOutMaterial_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVaccination_tlbSpecies__idfSpecies_R_1654]...';


GO
ALTER TABLE [dbo].[tlbVaccination] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVaccination_tlbSpecies__idfSpecies_R_1654] FOREIGN KEY ([idfSpecies]) REFERENCES [dbo].[tlbSpecies] ([idfSpecies]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVaccination_tlbVetCase__idfVetCase_R_1482]...';


GO
ALTER TABLE [dbo].[tlbVaccination] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVaccination_tlbVetCase__idfVetCase_R_1482] FOREIGN KEY ([idfVetCase]) REFERENCES [dbo].[tlbVetCase] ([idfVetCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVaccination_trtBaseReference__idfsVaccinationRoute_R_1302]...';


GO
ALTER TABLE [dbo].[tlbVaccination] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVaccination_trtBaseReference__idfsVaccinationRoute_R_1302] FOREIGN KEY ([idfsVaccinationRoute]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVaccination_trtBaseReference__idfsVaccinationType_R_1301]...';


GO
ALTER TABLE [dbo].[tlbVaccination] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVaccination_trtBaseReference__idfsVaccinationType_R_1301] FOREIGN KEY ([idfsVaccinationType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVaccination_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVaccination] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVaccination_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVaccination_trtDiagnosis__idfsDiagnosis_R_983]...';


GO
ALTER TABLE [dbo].[tlbVaccination] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVaccination_trtDiagnosis__idfsDiagnosis_R_983] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_tlbGeoLocation_idfLocation]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_tlbGeoLocation_idfLocation] FOREIGN KEY ([idfLocation]) REFERENCES [dbo].[tlbGeoLocation] ([idfGeoLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_tlbObservation_idfObservation]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_tlbObservation_idfObservation] FOREIGN KEY ([idfObservation]) REFERENCES [dbo].[tlbObservation] ([idfObservation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_tlbOffice_idfCollectedByOffice]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_tlbOffice_idfCollectedByOffice] FOREIGN KEY ([idfCollectedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_tlbOffice_idfIdentifiedByOffice]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_tlbOffice_idfIdentifiedByOffice] FOREIGN KEY ([idfIdentifiedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_tlbPerson_idfCollectedByPerson]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_tlbPerson_idfCollectedByPerson] FOREIGN KEY ([idfCollectedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_tlbPerson_idfIdentifiedByPerson]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_tlbPerson_idfIdentifiedByPerson] FOREIGN KEY ([idfIdentifiedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_tlbVector_idfHostVector]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_tlbVector_idfHostVector] FOREIGN KEY ([idfHostVector]) REFERENCES [dbo].[tlbVector] ([idfVector]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_tlbVectorSurveillanceSession_idfVectorSurveillanceSession]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_tlbVectorSurveillanceSession_idfVectorSurveillanceSession] FOREIGN KEY ([idfVectorSurveillanceSession]) REFERENCES [dbo].[tlbVectorSurveillanceSession] ([idfVectorSurveillanceSession]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_trtBaseReference__idfsEctoparasitesCollected]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_trtBaseReference__idfsEctoparasitesCollected] FOREIGN KEY ([idfsEctoparasitesCollected]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_trtBaseReference_idfsBasisOfREcord]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_trtBaseReference_idfsBasisOfREcord] FOREIGN KEY ([idfsBasisOfRecord]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_trtBaseReference_idfsCollectionMethod]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_trtBaseReference_idfsCollectionMethod] FOREIGN KEY ([idfsCollectionMethod]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_trtBaseReference_idfsDayPeriod]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_trtBaseReference_idfsDayPeriod] FOREIGN KEY ([idfsDayPeriod]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_trtBaseReference_idfsIdentificationMethod]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_trtBaseReference_idfsIdentificationMethod] FOREIGN KEY ([idfsIdentificationMethod]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_trtBaseReference_idfsSex]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_trtBaseReference_idfsSex] FOREIGN KEY ([idfsSex]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_trtBaseReference_idfsSurrounding]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_trtBaseReference_idfsSurrounding] FOREIGN KEY ([idfsSurrounding]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_trtVectorSubType_idfsVectorSubType]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_trtVectorSubType_idfsVectorSubType] FOREIGN KEY ([idfsVectorSubType]) REFERENCES [dbo].[trtVectorSubType] ([idfsVectorSubType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVector_trtVectorType_idfsVectorType]...';


GO
ALTER TABLE [dbo].[tlbVector] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVector_trtVectorType_idfsVectorType] FOREIGN KEY ([idfsVectorType]) REFERENCES [dbo].[trtVectorType] ([idfsVectorType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVectorSurveillanceSession_tlbGeoLocation_idfLocation]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVectorSurveillanceSession_tlbGeoLocation_idfLocation] FOREIGN KEY ([idfLocation]) REFERENCES [dbo].[tlbGeoLocation] ([idfGeoLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVectorSurveillanceSession_tlbOutbreak_idfOutbreak]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVectorSurveillanceSession_tlbOutbreak_idfOutbreak] FOREIGN KEY ([idfOutbreak]) REFERENCES [dbo].[tlbOutbreak] ([idfOutbreak]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVectorSurveillanceSession_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVectorSurveillanceSession_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVectorSurveillanceSession_trtBaseReference_VectorSurveillanceStatus]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVectorSurveillanceSession_trtBaseReference_VectorSurveillanceStatus] FOREIGN KEY ([idfsVectorSurveillanceStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVectorSurveillanceSession_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVectorSurveillanceSession_tstSite_idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVectorSurveillanceSessionSummary_tlbGeoLocation__idfGeoLocation]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummary] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVectorSurveillanceSessionSummary_tlbGeoLocation__idfGeoLocation] FOREIGN KEY ([idfGeoLocation]) REFERENCES [dbo].[tlbGeoLocation] ([idfGeoLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVectorSurveillanceSessionSummary_tlbVectorSurveillanceSession__idfVectorSurveillanceSession]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummary] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVectorSurveillanceSessionSummary_tlbVectorSurveillanceSession__idfVectorSurveillanceSession] FOREIGN KEY ([idfVectorSurveillanceSession]) REFERENCES [dbo].[tlbVectorSurveillanceSession] ([idfVectorSurveillanceSession]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVectorSurveillanceSessionSummary_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummary] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVectorSurveillanceSessionSummary_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVectorSurveillanceSessionSummary_trtVectorSubType__idfsVectorSubType]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummary] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVectorSurveillanceSessionSummary_trtVectorSubType__idfsVectorSubType] FOREIGN KEY ([idfsVectorSubType]) REFERENCES [dbo].[trtVectorSubType] ([idfsVectorSubType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVectorSurveillanceSessionSummaryDiagnosis_tlbVectorSurveillanceSessionSummary__idfsVSSessionSummary]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummaryDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVectorSurveillanceSessionSummaryDiagnosis_tlbVectorSurveillanceSessionSummary__idfsVSSessionSummary] FOREIGN KEY ([idfsVSSessionSummary]) REFERENCES [dbo].[tlbVectorSurveillanceSessionSummary] ([idfsVSSessionSummary]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVectorSurveillanceSessionSummaryDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummaryDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVectorSurveillanceSessionSummaryDiagnosis_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVectorSurveillanceSessionSummaryDiagnosis_trtDiagnosis__idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummaryDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVectorSurveillanceSessionSummaryDiagnosis_trtDiagnosis__idfsDiagnosis] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_tlbFarm]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_tlbFarm] FOREIGN KEY ([idfFarm]) REFERENCES [dbo].[tlbFarm] ([idfFarm]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_tlbMonitoringSession__idfParentMonitoringSession]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_tlbMonitoringSession__idfParentMonitoringSession] FOREIGN KEY ([idfParentMonitoringSession]) REFERENCES [dbo].[tlbMonitoringSession] ([idfMonitoringSession]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_tlbObservation__idfObservation_R_1447]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_tlbObservation__idfObservation_R_1447] FOREIGN KEY ([idfObservation]) REFERENCES [dbo].[tlbObservation] ([idfObservation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_tlbOffice__idfInvestigatedByOffice]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_tlbOffice__idfInvestigatedByOffice] FOREIGN KEY ([idfInvestigatedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_tlbOffice__idfReportedByOffice]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_tlbOffice__idfReportedByOffice] FOREIGN KEY ([idfReportedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_tlbOffice_idfReceivedByOffice]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_tlbOffice_idfReceivedByOffice] FOREIGN KEY ([idfReceivedByOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_tlbOutbreak__idfOutbreak]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_tlbOutbreak__idfOutbreak] FOREIGN KEY ([idfOutbreak]) REFERENCES [dbo].[tlbOutbreak] ([idfOutbreak]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_tlbPerson__idfPersonEnteredBy_R_1507]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_tlbPerson__idfPersonEnteredBy_R_1507] FOREIGN KEY ([idfPersonEnteredBy]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_tlbPerson__idfPersonInvestigatedBy_R_1506]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_tlbPerson__idfPersonInvestigatedBy_R_1506] FOREIGN KEY ([idfPersonInvestigatedBy]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_tlbPerson__idfPersonReportedBy_R_1508]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_tlbPerson__idfPersonReportedBy_R_1508] FOREIGN KEY ([idfPersonReportedBy]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_tlbPerson_idfReceivedByPerson]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_tlbPerson_idfReceivedByPerson] FOREIGN KEY ([idfReceivedByPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_trtBaseReference__idfsCaseClassification]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_trtBaseReference__idfsCaseClassification] FOREIGN KEY ([idfsCaseClassification]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_trtBaseReference__idfsCaseProgressStatus]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_trtBaseReference__idfsCaseProgressStatus] FOREIGN KEY ([idfsCaseProgressStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_trtBaseReference__idfsCaseReportType]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_trtBaseReference__idfsCaseReportType] FOREIGN KEY ([idfsCaseReportType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_trtBaseReference__idfsCaseType]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_trtBaseReference__idfsCaseType] FOREIGN KEY ([idfsCaseType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_trtBaseReference__idfsYNTestsConducted]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_trtBaseReference__idfsYNTestsConducted] FOREIGN KEY ([idfsYNTestsConducted]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_trtDiagnosis__idfsFinalDiagnosis_R_1438]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_trtDiagnosis__idfsFinalDiagnosis_R_1438] FOREIGN KEY ([idfsFinalDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_trtDiagnosis__idfsShowDiagnosis]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_trtDiagnosis__idfsShowDiagnosis] FOREIGN KEY ([idfsShowDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_trtDiagnosis__idfsTentativeDiagnosis_R_1435]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_trtDiagnosis__idfsTentativeDiagnosis_R_1435] FOREIGN KEY ([idfsTentativeDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_trtDiagnosis__idfsTentativeDiagnosis1_R_1436]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_trtDiagnosis__idfsTentativeDiagnosis1_R_1436] FOREIGN KEY ([idfsTentativeDiagnosis1]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_trtDiagnosis__idfsTentativeDiagnosis2_R_1437]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_trtDiagnosis__idfsTentativeDiagnosis2_R_1437] FOREIGN KEY ([idfsTentativeDiagnosis2]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCase_tstSite__idfsSite_R_1588]...';


GO
ALTER TABLE [dbo].[tlbVetCase] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCase_tstSite__idfsSite_R_1588] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCaseDisplayDiagnosis_tlbVetCase_idfVetCase]...';


GO
ALTER TABLE [dbo].[tlbVetCaseDisplayDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCaseDisplayDiagnosis_tlbVetCase_idfVetCase] FOREIGN KEY ([idfVetCase]) REFERENCES [dbo].[tlbVetCase] ([idfVetCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCaseDisplayDiagnosis_trtBaseReference_idfsLanguage]...';


GO
ALTER TABLE [dbo].[tlbVetCaseDisplayDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCaseDisplayDiagnosis_trtBaseReference_idfsLanguage] FOREIGN KEY ([idfsLanguage]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCaseDisplayDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVetCaseDisplayDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCaseDisplayDiagnosis_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCaseLog_tlbPerson__idfPerson_R_1501]...';


GO
ALTER TABLE [dbo].[tlbVetCaseLog] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCaseLog_tlbPerson__idfPerson_R_1501] FOREIGN KEY ([idfPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCaseLog_tlbVetCase__idfVetCase_R_1489]...';


GO
ALTER TABLE [dbo].[tlbVetCaseLog] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCaseLog_tlbVetCase__idfVetCase_R_1489] FOREIGN KEY ([idfVetCase]) REFERENCES [dbo].[tlbVetCase] ([idfVetCase]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCaseLog_trtBaseReference__idfsCaseLogStatus_R_1490]...';


GO
ALTER TABLE [dbo].[tlbVetCaseLog] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCaseLog_trtBaseReference__idfsCaseLogStatus_R_1490] FOREIGN KEY ([idfsCaseLogStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbVetCaseLog_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbVetCaseLog] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbVetCaseLog_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbxSiteDocumentMap_LkupEIDSSMenu]...';


GO
ALTER TABLE [dbo].[tlbxSiteDocumentMap] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbxSiteDocumentMap_LkupEIDSSMenu] FOREIGN KEY ([EIDSSMenuId]) REFERENCES [dbo].[LkupEIDSSMenu] ([EIDSSMenuID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtAttributeType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtAttributeType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtAttributeType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtBaseReference_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtBaseReference] WITH NOCHECK
    ADD CONSTRAINT [FK_trtBaseReference_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtBaseReference_trtReferenceType__idfsReferenceType_R_381]...';


GO
ALTER TABLE [dbo].[trtBaseReference] WITH NOCHECK
    ADD CONSTRAINT [FK_trtBaseReference_trtReferenceType__idfsReferenceType_R_381] FOREIGN KEY ([idfsReferenceType]) REFERENCES [dbo].[trtReferenceType] ([idfsReferenceType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtBaseReferenceAttribute_trtAttributeType__idfAttributeType]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceAttribute] WITH NOCHECK
    ADD CONSTRAINT [FK_trtBaseReferenceAttribute_trtAttributeType__idfAttributeType] FOREIGN KEY ([idfAttributeType]) REFERENCES [dbo].[trtAttributeType] ([idfAttributeType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtBaseReferenceAttribute_trtBaseReference__idfsBaseReference]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceAttribute] WITH NOCHECK
    ADD CONSTRAINT [FK_trtBaseReferenceAttribute_trtBaseReference__idfsBaseReference] FOREIGN KEY ([idfsBaseReference]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtBaseReferenceAttribute_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceAttribute] WITH NOCHECK
    ADD CONSTRAINT [FK_trtBaseReferenceAttribute_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtBaseReferenceAttributeToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceAttributeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtBaseReferenceAttributeToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtBaseReferenceAttributeToCP_trtBaseReferenceAttribute__idfsBaseReference]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceAttributeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtBaseReferenceAttributeToCP_trtBaseReferenceAttribute__idfsBaseReference] FOREIGN KEY ([idfBaseReferenceAttribute]) REFERENCES [dbo].[trtBaseReferenceAttribute] ([idfBaseReferenceAttribute]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtBaseReferenceAttributeToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceAttributeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtBaseReferenceAttributeToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtBaseReferenceToCP_trtBaseReference__idfsBaseReference]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtBaseReferenceToCP_trtBaseReference__idfsBaseReference] FOREIGN KEY ([idfsBaseReference]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtBaseReferenceToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtBaseReferenceToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtBaseReferenceToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtBaseReferenceToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtBaseReferenceToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtBssAggregateColumns_tauColumn__idfColumn]...';


GO
ALTER TABLE [dbo].[trtBssAggregateColumns] WITH NOCHECK
    ADD CONSTRAINT [FK_trtBssAggregateColumns_tauColumn__idfColumn] FOREIGN KEY ([idfColumn]) REFERENCES [dbo].[tauColumn] ([idfColumn]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtBssAggregateColumns_trtBaseReference__idfsBssAggregateColumn]...';


GO
ALTER TABLE [dbo].[trtBssAggregateColumns] WITH NOCHECK
    ADD CONSTRAINT [FK_trtBssAggregateColumns_trtBaseReference__idfsBssAggregateColumn] FOREIGN KEY ([idfsBssAggregateColumn]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtBssAggregateColumns_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtBssAggregateColumns] WITH NOCHECK
    ADD CONSTRAINT [FK_trtBssAggregateColumns_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtCaseClassification_trtBaseReference__idfsCaseClassification]...';


GO
ALTER TABLE [dbo].[trtCaseClassification] WITH NOCHECK
    ADD CONSTRAINT [FK_trtCaseClassification_trtBaseReference__idfsCaseClassification] FOREIGN KEY ([idfsCaseClassification]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtCaseClassification_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtCaseClassification] WITH NOCHECK
    ADD CONSTRAINT [FK_trtCaseClassification_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtCollectionMethodForVectorType_trtBaseReference_idfsCollectionMethod]...';


GO
ALTER TABLE [dbo].[trtCollectionMethodForVectorType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtCollectionMethodForVectorType_trtBaseReference_idfsCollectionMethod] FOREIGN KEY ([idfsCollectionMethod]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtCollectionMethodForVectorType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtCollectionMethodForVectorType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtCollectionMethodForVectorType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtCollectionMethodForVectorType_trtVectorType_idfsVectorType]...';


GO
ALTER TABLE [dbo].[trtCollectionMethodForVectorType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtCollectionMethodForVectorType_trtVectorType_idfsVectorType] FOREIGN KEY ([idfsVectorType]) REFERENCES [dbo].[trtVectorType] ([idfsVectorType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtCollectionMethodForVectorTypeToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtCollectionMethodForVectorTypeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtCollectionMethodForVectorTypeToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtCollectionMethodForVectorTypeToCP_trtCollectionMethodForVectorType_idfCollectionMethodForVectorType]...';


GO
ALTER TABLE [dbo].[trtCollectionMethodForVectorTypeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtCollectionMethodForVectorTypeToCP_trtCollectionMethodForVectorType_idfCollectionMethodForVectorType] FOREIGN KEY ([idfCollectionMethodForVectorType]) REFERENCES [dbo].[trtCollectionMethodForVectorType] ([idfCollectionMethodForVectorType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtCollectionMethodForVectorTypeToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtCollectionMethodForVectorTypeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtCollectionMethodForVectorTypeToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDerivativeForSampleType_trtBaseReference__idfsDerivativeType_R_1863]...';


GO
ALTER TABLE [dbo].[trtDerivativeForSampleType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDerivativeForSampleType_trtBaseReference__idfsDerivativeType_R_1863] FOREIGN KEY ([idfsDerivativeType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDerivativeForSampleType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDerivativeForSampleType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDerivativeForSampleType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDerivativeForSampleType_trtSampleType__idfsSampleType_R_1862]...';


GO
ALTER TABLE [dbo].[trtDerivativeForSampleType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDerivativeForSampleType_trtSampleType__idfsSampleType_R_1862] FOREIGN KEY ([idfsSampleType]) REFERENCES [dbo].[trtSampleType] ([idfsSampleType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDerivativeForSampleTypeToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDerivativeForSampleTypeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDerivativeForSampleTypeToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDerivativeForSampleTypeToCP_trtDerivativeForSampleType__idfDerivativeForSampleType]...';


GO
ALTER TABLE [dbo].[trtDerivativeForSampleTypeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDerivativeForSampleTypeToCP_trtDerivativeForSampleType__idfDerivativeForSampleType] FOREIGN KEY ([idfDerivativeForSampleType]) REFERENCES [dbo].[trtDerivativeForSampleType] ([idfDerivativeForSampleType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDerivativeForSampleTypeToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtDerivativeForSampleTypeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDerivativeForSampleTypeToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosis_trtBaseReference__idfsDiagnosis_R_624]...';


GO
ALTER TABLE [dbo].[trtDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosis_trtBaseReference__idfsDiagnosis_R_624] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosis_trtBaseReference__idfsUsingType_R_1600]...';


GO
ALTER TABLE [dbo].[trtDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosis_trtBaseReference__idfsUsingType_R_1600] FOREIGN KEY ([idfsUsingType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosis_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisAgeGroup_trtBaseReference_idfsAgeType]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisAgeGroup_trtBaseReference_idfsAgeType] FOREIGN KEY ([idfsAgeType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisAgeGroup_trtBaseReference_idfsDiagnosisAgeGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisAgeGroup_trtBaseReference_idfsDiagnosisAgeGroup] FOREIGN KEY ([idfsDiagnosisAgeGroup]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisAgeGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisAgeGroup_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToDiagnosis_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosis_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToDiagnosis_trtDiagnosis_idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosis_trtDiagnosis_idfsDiagnosis] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToDiagnosis_trtDiagnosisAgeGroup_idfsDiagnosisAgeGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosis] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosis_trtDiagnosisAgeGroup_idfsDiagnosisAgeGroup] FOREIGN KEY ([idfsDiagnosisAgeGroup]) REFERENCES [dbo].[trtDiagnosisAgeGroup] ([idfsDiagnosisAgeGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToDiagnosisToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosisToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosisToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToDiagnosisToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosisToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosisToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToDiagnosisToCP_tstPersonalDataGroup_idfDiagnosisAgeGroupToDiagnosis]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosisToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosisToCP_tstPersonalDataGroup_idfDiagnosisAgeGroupToDiagnosis] FOREIGN KEY ([idfDiagnosisAgeGroupToDiagnosis]) REFERENCES [dbo].[trtDiagnosisAgeGroupToDiagnosis] ([idfDiagnosisAgeGroupToDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToStatisticalAgeGroup_trtBaseReference_idfsStatisticalAgeGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroup_trtBaseReference_idfsStatisticalAgeGroup] FOREIGN KEY ([idfsStatisticalAgeGroup]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToStatisticalAgeGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroup_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToStatisticalAgeGroup_trtDiagnosisAgeGroup_idfsDiagnosisAgeGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroup_trtDiagnosisAgeGroup_idfsDiagnosisAgeGroup] FOREIGN KEY ([idfsDiagnosisAgeGroup]) REFERENCES [dbo].[trtDiagnosisAgeGroup] ([idfsDiagnosisAgeGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroupToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_trtDiagnosisAgeGroupToStatisticalAgeGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroupToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_trtDiagnosisAgeGroupToStatisticalAgeGroup] FOREIGN KEY ([idfDiagnosisAgeGroupToStatisticalAgeGroup]) REFERENCES [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroup] ([idfDiagnosisAgeGroupToStatisticalAgeGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroupToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisToDiagnosisGroup_trtBaseReference__idfsDiagnosisGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisToDiagnosisGroup_trtBaseReference__idfsDiagnosisGroup] FOREIGN KEY ([idfsDiagnosisGroup]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisToDiagnosisGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisToDiagnosisGroup_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisToDiagnosisGroup_trtDiagnosis__idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisToDiagnosisGroup_trtDiagnosis__idfsDiagnosis] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisToDiagnosisGroupToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroupToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisToDiagnosisGroupToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisToDiagnosisGroupToCP_trtDiagnosisToDiagnosisGroup_idfDiagnosisToDiagnosisGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroupToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisToDiagnosisGroupToCP_trtDiagnosisToDiagnosisGroup_idfDiagnosisToDiagnosisGroup] FOREIGN KEY ([idfDiagnosisToDiagnosisGroup]) REFERENCES [dbo].[trtDiagnosisToDiagnosisGroup] ([idfDiagnosisToDiagnosisGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisToDiagnosisGroupToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroupToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisToDiagnosisGroupToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisToGroupForReportType_trtBaseReference__idfsCustomReportType_R_1871]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToGroupForReportType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisToGroupForReportType_trtBaseReference__idfsCustomReportType_R_1871] FOREIGN KEY ([idfsCustomReportType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisToGroupForReportType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToGroupForReportType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisToGroupForReportType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisToGroupForReportType_trtDiagnosis__idfsDiagnosis_R_1873]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToGroupForReportType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisToGroupForReportType_trtDiagnosis__idfsDiagnosis_R_1873] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtDiagnosisToGroupForReportType_trtReportDiagnosisGroup__idfsReportDiagnosisGroup]...';


GO
ALTER TABLE [dbo].[trtDiagnosisToGroupForReportType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtDiagnosisToGroupForReportType_trtReportDiagnosisGroup__idfsReportDiagnosisGroup] FOREIGN KEY ([idfsReportDiagnosisGroup]) REFERENCES [dbo].[trtReportDiagnosisGroup] ([idfsReportDiagnosisGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtEventType_trtBaseReference__idfsEventSubscription]...';


GO
ALTER TABLE [dbo].[trtEventType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtEventType_trtBaseReference__idfsEventSubscription] FOREIGN KEY ([idfsEventSubscription]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtEventType_trtBaseReference__idfsEventTypeID_R_663]...';


GO
ALTER TABLE [dbo].[trtEventType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtEventType_trtBaseReference__idfsEventTypeID_R_663] FOREIGN KEY ([idfsEventTypeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtEventType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtEventType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtEventType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtFFObjectForCustomReport_trtBaseReference]...';


GO
ALTER TABLE [dbo].[trtFFObjectForCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtFFObjectForCustomReport_trtBaseReference] FOREIGN KEY ([idfsCustomReportType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtFFObjectForCustomReport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtFFObjectForCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtFFObjectForCustomReport_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtFFObjectToDiagnosisForCustomReport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtFFObjectToDiagnosisForCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtFFObjectToDiagnosisForCustomReport_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtFFObjectToDiagnosisForCustomReport_trtDiagnosis]...';


GO
ALTER TABLE [dbo].[trtFFObjectToDiagnosisForCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtFFObjectToDiagnosisForCustomReport_trtDiagnosis] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtFFParameterToDiagnosisForCustomReport_trtFFParameterForCustomReport]...';


GO
ALTER TABLE [dbo].[trtFFObjectToDiagnosisForCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtFFParameterToDiagnosisForCustomReport_trtFFParameterForCustomReport] FOREIGN KEY ([idfFFObjectForCustomReport]) REFERENCES [dbo].[trtFFObjectForCustomReport] ([idfFFObjectForCustomReport]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtGISBaseReferenceAttribute_gisBaseReference__idfsGISBaseReference]...';


GO
ALTER TABLE [dbo].[trtGISBaseReferenceAttribute] WITH NOCHECK
    ADD CONSTRAINT [FK_trtGISBaseReferenceAttribute_gisBaseReference__idfsGISBaseReference] FOREIGN KEY ([idfsGISBaseReference]) REFERENCES [dbo].[gisBaseReference] ([idfsGISBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtGISBaseReferenceAttribute_trtAttributeType__idfAttributeType]...';


GO
ALTER TABLE [dbo].[trtGISBaseReferenceAttribute] WITH NOCHECK
    ADD CONSTRAINT [FK_trtGISBaseReferenceAttribute_trtAttributeType__idfAttributeType] FOREIGN KEY ([idfAttributeType]) REFERENCES [dbo].[trtAttributeType] ([idfAttributeType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtGISBaseReferenceAttribute_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtGISBaseReferenceAttribute] WITH NOCHECK
    ADD CONSTRAINT [FK_trtGISBaseReferenceAttribute_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtGISObjectForCustomReport_gisBaseReference__idfsGISBaseReference]...';


GO
ALTER TABLE [dbo].[trtGISObjectForCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtGISObjectForCustomReport_gisBaseReference__idfsGISBaseReference] FOREIGN KEY ([idfsGISBaseReference]) REFERENCES [dbo].[gisBaseReference] ([idfsGISBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtGISObjectForCustomReport_trtBaseReference__idfsCustomReportType]...';


GO
ALTER TABLE [dbo].[trtGISObjectForCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtGISObjectForCustomReport_trtBaseReference__idfsCustomReportType] FOREIGN KEY ([idfsCustomReportType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtGISObjectForCustomReport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtGISObjectForCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtGISObjectForCustomReport_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtHACodeList_trtBaseReference__idfsCodeName_R_674]...';


GO
ALTER TABLE [dbo].[trtHACodeList] WITH NOCHECK
    ADD CONSTRAINT [FK_trtHACodeList_trtBaseReference__idfsCodeName_R_674] FOREIGN KEY ([idfsCodeName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtHACodeList_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtHACodeList] WITH NOCHECK
    ADD CONSTRAINT [FK_trtHACodeList_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtLanguageToCP_trtBaseReference__idfsLanguage_idfsBaseReference]...';


GO
ALTER TABLE [dbo].[trtLanguageToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtLanguageToCP_trtBaseReference__idfsLanguage_idfsBaseReference] FOREIGN KEY ([idfsLanguage]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtLanguageToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtLanguageToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtLanguageToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtLanguageToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtLanguageToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtLanguageToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtMaterialForDisease_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtMaterialForDisease] WITH NOCHECK
    ADD CONSTRAINT [FK_trtMaterialForDisease_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtMaterialForDisease_trtDiagnosis__idfsDiagnosis_R_891]...';


GO
ALTER TABLE [dbo].[trtMaterialForDisease] WITH NOCHECK
    ADD CONSTRAINT [FK_trtMaterialForDisease_trtDiagnosis__idfsDiagnosis_R_891] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtMaterialForDisease_trtSampleType__idfsSampleType]...';


GO
ALTER TABLE [dbo].[trtMaterialForDisease] WITH NOCHECK
    ADD CONSTRAINT [FK_trtMaterialForDisease_trtSampleType__idfsSampleType] FOREIGN KEY ([idfsSampleType]) REFERENCES [dbo].[trtSampleType] ([idfsSampleType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtMaterialForDiseaseToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtMaterialForDiseaseToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtMaterialForDiseaseToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtMaterialForDiseaseToCP_trtMaterialForDisease__idfMaterialForDisease_R_1876]...';


GO
ALTER TABLE [dbo].[trtMaterialForDiseaseToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtMaterialForDiseaseToCP_trtMaterialForDisease__idfMaterialForDisease_R_1876] FOREIGN KEY ([idfMaterialForDisease]) REFERENCES [dbo].[trtMaterialForDisease] ([idfMaterialForDisease]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtMaterialForDiseaseToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtMaterialForDiseaseToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtMaterialForDiseaseToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtMatrixColumn_trtBaseReference__idfsEditor]...';


GO
ALTER TABLE [dbo].[trtMatrixColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_trtMatrixColumn_trtBaseReference__idfsEditor] FOREIGN KEY ([idfsEditor]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtMatrixColumn_trtBaseReference__idfsMatrixColumn]...';


GO
ALTER TABLE [dbo].[trtMatrixColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_trtMatrixColumn_trtBaseReference__idfsMatrixColumn] FOREIGN KEY ([idfsMatrixColumn]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtMatrixColumn_trtBaseReference__idfsParameterType]...';


GO
ALTER TABLE [dbo].[trtMatrixColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_trtMatrixColumn_trtBaseReference__idfsParameterType] FOREIGN KEY ([idfsParameterType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtMatrixColumn_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtMatrixColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_trtMatrixColumn_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtMatrixColumn_trtMatrixType__idfsMatrixType]...';


GO
ALTER TABLE [dbo].[trtMatrixColumn] WITH NOCHECK
    ADD CONSTRAINT [FK_trtMatrixColumn_trtMatrixType__idfsMatrixType] FOREIGN KEY ([idfsMatrixType]) REFERENCES [dbo].[trtMatrixType] ([idfsMatrixType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtMatrixType_trtBaseReference__idfsFormType]...';


GO
ALTER TABLE [dbo].[trtMatrixType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtMatrixType_trtBaseReference__idfsFormType] FOREIGN KEY ([idfsFormType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtMatrixType_trtBaseReference__idfsMatrixType]...';


GO
ALTER TABLE [dbo].[trtMatrixType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtMatrixType_trtBaseReference__idfsMatrixType] FOREIGN KEY ([idfsMatrixType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtMatrixType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtMatrixType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtMatrixType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtObjectTypeToObjectOperation_trtBaseReference__idfsObjectOperation_R_1620]...';


GO
ALTER TABLE [dbo].[trtObjectTypeToObjectOperation] WITH NOCHECK
    ADD CONSTRAINT [FK_trtObjectTypeToObjectOperation_trtBaseReference__idfsObjectOperation_R_1620] FOREIGN KEY ([idfsObjectOperation]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtObjectTypeToObjectOperation_trtBaseReference__idfsObjectType_R_1619]...';


GO
ALTER TABLE [dbo].[trtObjectTypeToObjectOperation] WITH NOCHECK
    ADD CONSTRAINT [FK_trtObjectTypeToObjectOperation_trtBaseReference__idfsObjectType_R_1619] FOREIGN KEY ([idfsObjectType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtObjectTypeToObjectOperation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtObjectTypeToObjectOperation] WITH NOCHECK
    ADD CONSTRAINT [FK_trtObjectTypeToObjectOperation_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtObjectTypeToObjectType_trtBaseReference__idfsParentObjectType_R_1621]...';


GO
ALTER TABLE [dbo].[trtObjectTypeToObjectType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtObjectTypeToObjectType_trtBaseReference__idfsParentObjectType_R_1621] FOREIGN KEY ([idfsParentObjectType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtObjectTypeToObjectType_trtBaseReference__idfsRelatedObjectType_R_1622]...';


GO
ALTER TABLE [dbo].[trtObjectTypeToObjectType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtObjectTypeToObjectType_trtBaseReference__idfsRelatedObjectType_R_1622] FOREIGN KEY ([idfsRelatedObjectType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtObjectTypeToObjectType_trtBaseReference__idfsStatus_R_1623]...';


GO
ALTER TABLE [dbo].[trtObjectTypeToObjectType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtObjectTypeToObjectType_trtBaseReference__idfsStatus_R_1623] FOREIGN KEY ([idfsStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtObjectTypeToObjectType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtObjectTypeToObjectType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtObjectTypeToObjectType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestForDisease_trtBaseReference__idfsPensideTestName]...';


GO
ALTER TABLE [dbo].[trtPensideTestForDisease] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestForDisease_trtBaseReference__idfsPensideTestName] FOREIGN KEY ([idfsPensideTestName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestForDisease_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtPensideTestForDisease] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestForDisease_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestForDisease_trtDiagnosis__idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[trtPensideTestForDisease] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestForDisease_trtDiagnosis__idfsDiagnosis] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestForDiseaseToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtPensideTestForDiseaseToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestForDiseaseToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestForDiseaseToCP_trtPensideTestForDisease__idfPensideTestForDisease]...';


GO
ALTER TABLE [dbo].[trtPensideTestForDiseaseToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestForDiseaseToCP_trtPensideTestForDisease__idfPensideTestForDisease] FOREIGN KEY ([idfPensideTestForDisease]) REFERENCES [dbo].[trtPensideTestForDisease] ([idfPensideTestForDisease]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestForDiseaseToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtPensideTestForDiseaseToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestForDiseaseToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestTypeForVectorType_trtBaseReference_idfsPensideTestName]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeForVectorType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestTypeForVectorType_trtBaseReference_idfsPensideTestName] FOREIGN KEY ([idfsPensideTestName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestTypeForVectorType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeForVectorType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestTypeForVectorType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestTypeForVectorType_trtVectorType_idfsVectorType]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeForVectorType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestTypeForVectorType_trtVectorType_idfsVectorType] FOREIGN KEY ([idfsVectorType]) REFERENCES [dbo].[trtVectorType] ([idfsVectorType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestTypeForVectorTypeToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeForVectorTypeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestTypeForVectorTypeToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestTypeForVectorTypeToCP_trtPensideTestTypeForVectorType_idfPensideTestTypeForVectorType]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeForVectorTypeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestTypeForVectorTypeToCP_trtPensideTestTypeForVectorType_idfPensideTestTypeForVectorType] FOREIGN KEY ([idfPensideTestTypeForVectorType]) REFERENCES [dbo].[trtPensideTestTypeForVectorType] ([idfPensideTestTypeForVectorType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestTypeForVectorTypeToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeForVectorTypeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestTypeForVectorTypeToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestTypeToTestResult_trtBaseReference__idfsPensideTestName]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeToTestResult] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestTypeToTestResult_trtBaseReference__idfsPensideTestName] FOREIGN KEY ([idfsPensideTestName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestTypeToTestResult_trtBaseReference__idfsPensideTestResult_R_1663]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeToTestResult] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestTypeToTestResult_trtBaseReference__idfsPensideTestResult_R_1663] FOREIGN KEY ([idfsPensideTestResult]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestTypeToTestResult_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeToTestResult] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestTypeToTestResult_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestTypeToTestResultToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeToTestResultToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestTypeToTestResultToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestTypeToTestResultToCP_trtPensideTestTypeToTestResult__idfsPensideTestName_idfsPensideTestResult]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeToTestResultToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestTypeToTestResultToCP_trtPensideTestTypeToTestResult__idfsPensideTestName_idfsPensideTestResult] FOREIGN KEY ([idfsPensideTestName], [idfsPensideTestResult]) REFERENCES [dbo].[trtPensideTestTypeToTestResult] ([idfsPensideTestName], [idfsPensideTestResult]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtPensideTestTypeToTestResultToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtPensideTestTypeToTestResultToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtPensideTestTypeToTestResultToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtProphilacticAction_trtBaseReference__idfsProphilacticAction_R_1109]...';


GO
ALTER TABLE [dbo].[trtProphilacticAction] WITH NOCHECK
    ADD CONSTRAINT [FK_trtProphilacticAction_trtBaseReference__idfsProphilacticAction_R_1109] FOREIGN KEY ([idfsProphilacticAction]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtProphilacticAction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtProphilacticAction] WITH NOCHECK
    ADD CONSTRAINT [FK_trtProphilacticAction_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtReferenceType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtReferenceType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtReferenceType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtReportDiagnosisGroup_trtBaseReference__idfsReportDiagnosisGroup]...';


GO
ALTER TABLE [dbo].[trtReportDiagnosisGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_trtReportDiagnosisGroup_trtBaseReference__idfsReportDiagnosisGroup] FOREIGN KEY ([idfsReportDiagnosisGroup]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtReportDiagnosisGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtReportDiagnosisGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_trtReportDiagnosisGroup_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtReportRows_trtBaseReference__idfsCustomReportType_R_1867]...';


GO
ALTER TABLE [dbo].[trtReportRows] WITH NOCHECK
    ADD CONSTRAINT [FK_trtReportRows_trtBaseReference__idfsCustomReportType_R_1867] FOREIGN KEY ([idfsCustomReportType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtReportRows_trtBaseReference__idfsDiagnosisOrReportDiagnosisGroup]...';


GO
ALTER TABLE [dbo].[trtReportRows] WITH NOCHECK
    ADD CONSTRAINT [FK_trtReportRows_trtBaseReference__idfsDiagnosisOrReportDiagnosisGroup] FOREIGN KEY ([idfsDiagnosisOrReportDiagnosisGroup]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtReportRows_trtBaseReference__idfsICDReportAdditionalText]...';


GO
ALTER TABLE [dbo].[trtReportRows] WITH NOCHECK
    ADD CONSTRAINT [FK_trtReportRows_trtBaseReference__idfsICDReportAdditionalText] FOREIGN KEY ([idfsICDReportAdditionalText]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtReportRows_trtBaseReference__idfsReportAdditionalText_R_1895]...';


GO
ALTER TABLE [dbo].[trtReportRows] WITH NOCHECK
    ADD CONSTRAINT [FK_trtReportRows_trtBaseReference__idfsReportAdditionalText_R_1895] FOREIGN KEY ([idfsReportAdditionalText]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtReportRows_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtReportRows] WITH NOCHECK
    ADD CONSTRAINT [FK_trtReportRows_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResource_idfsResourceType]...';


GO
ALTER TABLE [dbo].[trtResource] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResource_idfsResourceType] FOREIGN KEY ([idfsResourceType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResource_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResource] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResource_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceSet_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceSet] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceSet_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceSetHierarchy_idfsResourceSet]...';


GO
ALTER TABLE [dbo].[trtResourceSetHierarchy] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceSetHierarchy_idfsResourceSet] FOREIGN KEY ([idfsResourceSet]) REFERENCES [dbo].[trtResourceSet] ([idfsResourceSet]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceSetHierarchy_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceSetHierarchy] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceSetHierarchy_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceSetToResource_idfsResourceSet]...';


GO
ALTER TABLE [dbo].[trtResourceSetToResource] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceSetToResource_idfsResourceSet] FOREIGN KEY ([idfsResourceSet]) REFERENCES [dbo].[trtResourceSet] ([idfsResourceSet]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceSetToResource_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceSetToResource] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceSetToResource_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceSetToResource_trtResource]...';


GO
ALTER TABLE [dbo].[trtResourceSetToResource] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceSetToResource_trtResource] FOREIGN KEY ([idfsResource]) REFERENCES [dbo].[trtResource] ([idfsResource]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceSetTranslation__idfsLanguage]...';


GO
ALTER TABLE [dbo].[trtResourceSetTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceSetTranslation__idfsLanguage] FOREIGN KEY ([idfsLanguage]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceSetTranslation_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceSetTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceSetTranslation_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceSetTranslation_trtResourceSet]...';


GO
ALTER TABLE [dbo].[trtResourceSetTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceSetTranslation_trtResourceSet] FOREIGN KEY ([idfsResourceSet]) REFERENCES [dbo].[trtResourceSet] ([idfsResourceSet]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceTranslation_idfsLanguage]...';


GO
ALTER TABLE [dbo].[trtResourceTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceTranslation_idfsLanguage] FOREIGN KEY ([idfsLanguage]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceTranslation_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceTranslation_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceTranslation_trtResource]...';


GO
ALTER TABLE [dbo].[trtResourceTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceTranslation_trtResource] FOREIGN KEY ([idfsResource]) REFERENCES [dbo].[trtResource] ([idfsResource]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSampleType_trtBaseReference__idfsSampleType_R_1866]...';


GO
ALTER TABLE [dbo].[trtSampleType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSampleType_trtBaseReference__idfsSampleType_R_1866] FOREIGN KEY ([idfsSampleType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSampleType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSampleType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSampleType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSampleTypeForVectorType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSampleTypeForVectorType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSampleTypeForVectorType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSampleTypeForVectorType_trtSampleType_idfsSampleType]...';


GO
ALTER TABLE [dbo].[trtSampleTypeForVectorType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSampleTypeForVectorType_trtSampleType_idfsSampleType] FOREIGN KEY ([idfsSampleType]) REFERENCES [dbo].[trtSampleType] ([idfsSampleType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSampleTypeForVectorType_trtVectorType_idfsVectorType]...';


GO
ALTER TABLE [dbo].[trtSampleTypeForVectorType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSampleTypeForVectorType_trtVectorType_idfsVectorType] FOREIGN KEY ([idfsVectorType]) REFERENCES [dbo].[trtVectorType] ([idfsVectorType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSampleTypeForVectorTypeToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSampleTypeForVectorTypeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSampleTypeForVectorTypeToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSampleTypeForVectorTypeToCP_trtSampleTypeForVectorType_idfSampleTypeForVectorType]...';


GO
ALTER TABLE [dbo].[trtSampleTypeForVectorTypeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSampleTypeForVectorTypeToCP_trtSampleTypeForVectorType_idfSampleTypeForVectorType] FOREIGN KEY ([idfSampleTypeForVectorType]) REFERENCES [dbo].[trtSampleTypeForVectorType] ([idfSampleTypeForVectorType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSampleTypeForVectorTypeToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtSampleTypeForVectorTypeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSampleTypeForVectorTypeToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSanitaryAction_trtBaseReference__idfsSanitaryAction_R_1110]...';


GO
ALTER TABLE [dbo].[trtSanitaryAction] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSanitaryAction_trtBaseReference__idfsSanitaryAction_R_1110] FOREIGN KEY ([idfsSanitaryAction]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSanitaryAction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSanitaryAction] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSanitaryAction_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesContentInCustomReport_trtBaseReference_idfsCustomReportType]...';


GO
ALTER TABLE [dbo].[trtSpeciesContentInCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesContentInCustomReport_trtBaseReference_idfsCustomReportType] FOREIGN KEY ([idfsCustomReportType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesContentInCustomReport_trtBaseReference_idfsReportAdditionalText]...';


GO
ALTER TABLE [dbo].[trtSpeciesContentInCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesContentInCustomReport_trtBaseReference_idfsReportAdditionalText] FOREIGN KEY ([idfsReportAdditionalText]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesContentInCustomReport_trtBaseReference_idfsSpeciesOrSpeciesGroup]...';


GO
ALTER TABLE [dbo].[trtSpeciesContentInCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesContentInCustomReport_trtBaseReference_idfsSpeciesOrSpeciesGroup] FOREIGN KEY ([idfsSpeciesOrSpeciesGroup]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesContentInCustomReport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSpeciesContentInCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesContentInCustomReport_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesGroup_trtBaseReference_idfsSpeciesGroup]...';


GO
ALTER TABLE [dbo].[trtSpeciesGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesGroup_trtBaseReference_idfsSpeciesGroup] FOREIGN KEY ([idfsSpeciesGroup]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSpeciesGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesGroup_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesToGroupForCustomReport_trtBaseReference_idfsCustomReportType]...';


GO
ALTER TABLE [dbo].[trtSpeciesToGroupForCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesToGroupForCustomReport_trtBaseReference_idfsCustomReportType] FOREIGN KEY ([idfsCustomReportType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesToGroupForCustomReport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSpeciesToGroupForCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesToGroupForCustomReport_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesToGroupForCustomReport_trtSpeciesGroup_idfsSpeciesGroup]...';


GO
ALTER TABLE [dbo].[trtSpeciesToGroupForCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesToGroupForCustomReport_trtSpeciesGroup_idfsSpeciesGroup] FOREIGN KEY ([idfsSpeciesGroup]) REFERENCES [dbo].[trtSpeciesGroup] ([idfsSpeciesGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesToGroupForCustomReport_trtSpeciesType_idfsSpeciesType]...';


GO
ALTER TABLE [dbo].[trtSpeciesToGroupForCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesToGroupForCustomReport_trtSpeciesType_idfsSpeciesType] FOREIGN KEY ([idfsSpeciesType]) REFERENCES [dbo].[trtSpeciesType] ([idfsSpeciesType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesType_trtBaseReference__idfsSpeciesType_R_1650]...';


GO
ALTER TABLE [dbo].[trtSpeciesType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesType_trtBaseReference__idfsSpeciesType_R_1650] FOREIGN KEY ([idfsSpeciesType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSpeciesType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesTypeToAnimalAge_trtBaseReference__idfsAnimalAge_R_1599]...';


GO
ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAge] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesTypeToAnimalAge_trtBaseReference__idfsAnimalAge_R_1599] FOREIGN KEY ([idfsAnimalAge]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesTypeToAnimalAge_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAge] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesTypeToAnimalAge_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesTypeToAnimalAge_trtSpeciesType__idfsSpeciesType_R_1598]...';


GO
ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAge] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesTypeToAnimalAge_trtSpeciesType__idfsSpeciesType_R_1598] FOREIGN KEY ([idfsSpeciesType]) REFERENCES [dbo].[trtSpeciesType] ([idfsSpeciesType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesTypeToAnimalAgeToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAgeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesTypeToAnimalAgeToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesTypeToAnimalAgeToCP_trtSpeciesTypeToAnimalAge__idfSpeciesTypeToAnimalAge_R_1882]...';


GO
ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAgeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesTypeToAnimalAgeToCP_trtSpeciesTypeToAnimalAge__idfSpeciesTypeToAnimalAge_R_1882] FOREIGN KEY ([idfSpeciesTypeToAnimalAge]) REFERENCES [dbo].[trtSpeciesTypeToAnimalAge] ([idfSpeciesTypeToAnimalAge]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSpeciesTypeToAnimalAgeToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAgeToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSpeciesTypeToAnimalAgeToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtStatisticDataType_trtBaseReference__idfsStatisticAreaType_R_1591]...';


GO
ALTER TABLE [dbo].[trtStatisticDataType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtStatisticDataType_trtBaseReference__idfsStatisticAreaType_R_1591] FOREIGN KEY ([idfsStatisticAreaType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtStatisticDataType_trtBaseReference__idfsStatisticDataType_R_496]...';


GO
ALTER TABLE [dbo].[trtStatisticDataType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtStatisticDataType_trtBaseReference__idfsStatisticDataType_R_496] FOREIGN KEY ([idfsStatisticDataType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtStatisticDataType_trtBaseReference__idfsStatisticPeriodType_R_1592]...';


GO
ALTER TABLE [dbo].[trtStatisticDataType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtStatisticDataType_trtBaseReference__idfsStatisticPeriodType_R_1592] FOREIGN KEY ([idfsStatisticPeriodType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtStatisticDataType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtStatisticDataType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtStatisticDataType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtStatisticDataType_trtReferenceType__idfsReferenceType_R_933]...';


GO
ALTER TABLE [dbo].[trtStatisticDataType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtStatisticDataType_trtReferenceType__idfsReferenceType_R_933] FOREIGN KEY ([idfsReferenceType]) REFERENCES [dbo].[trtReferenceType] ([idfsReferenceType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtStringNameTranslationToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtStringNameTranslationToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtStringNameTranslationToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtStringNameTranslationToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtStringNameTranslationToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtStringNameTranslationToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSystemFunction_trtBaseReference__idfsObjectType_R_1581]...';


GO
ALTER TABLE [dbo].[trtSystemFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSystemFunction_trtBaseReference__idfsObjectType_R_1581] FOREIGN KEY ([idfsObjectType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSystemFunction_trtBaseReference__idfsSystemFunction_R_1038]...';


GO
ALTER TABLE [dbo].[trtSystemFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSystemFunction_trtBaseReference__idfsSystemFunction_R_1038] FOREIGN KEY ([idfsSystemFunction]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtSystemFunction_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtSystemFunction] WITH NOCHECK
    ADD CONSTRAINT [FK_trtSystemFunction_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestForDisease_trtBaseReference__idfsTestCategory]...';


GO
ALTER TABLE [dbo].[trtTestForDisease] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestForDisease_trtBaseReference__idfsTestCategory] FOREIGN KEY ([idfsTestCategory]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestForDisease_trtBaseReference__idfsTestName]...';


GO
ALTER TABLE [dbo].[trtTestForDisease] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestForDisease_trtBaseReference__idfsTestName] FOREIGN KEY ([idfsTestName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestForDisease_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtTestForDisease] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestForDisease_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestForDisease_trtDiagnosis__idfsDiagnosis_R_892]...';


GO
ALTER TABLE [dbo].[trtTestForDisease] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestForDisease_trtDiagnosis__idfsDiagnosis_R_892] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestForDisease_trtSampleType__idfsSampleType]...';


GO
ALTER TABLE [dbo].[trtTestForDisease] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestForDisease_trtSampleType__idfsSampleType] FOREIGN KEY ([idfsSampleType]) REFERENCES [dbo].[trtSampleType] ([idfsSampleType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestForDiseaseToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtTestForDiseaseToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestForDiseaseToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestForDiseaseToCP_trtTestForDisease__idfTestForDisease_R_1884]...';


GO
ALTER TABLE [dbo].[trtTestForDiseaseToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestForDiseaseToCP_trtTestForDisease__idfTestForDisease_R_1884] FOREIGN KEY ([idfTestForDisease]) REFERENCES [dbo].[trtTestForDisease] ([idfTestForDisease]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestForDiseaseToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtTestForDiseaseToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestForDiseaseToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestTypeForCustomReport_trtBaseReference__idfsCustomReportType]...';


GO
ALTER TABLE [dbo].[trtTestTypeForCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestTypeForCustomReport_trtBaseReference__idfsCustomReportType] FOREIGN KEY ([idfsCustomReportType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestTypeForCustomReport_trtBaseReference__idfsTestName]...';


GO
ALTER TABLE [dbo].[trtTestTypeForCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestTypeForCustomReport_trtBaseReference__idfsTestName] FOREIGN KEY ([idfsTestName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestTypeForCustomReport_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtTestTypeForCustomReport] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestTypeForCustomReport_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestTypeToTestResult_trtBaseReference__idfsTestName]...';


GO
ALTER TABLE [dbo].[trtTestTypeToTestResult] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestTypeToTestResult_trtBaseReference__idfsTestName] FOREIGN KEY ([idfsTestName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestTypeToTestResult_trtBaseReference__idfsTestResult_R_1596]...';


GO
ALTER TABLE [dbo].[trtTestTypeToTestResult] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestTypeToTestResult_trtBaseReference__idfsTestResult_R_1596] FOREIGN KEY ([idfsTestResult]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestTypeToTestResult_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtTestTypeToTestResult] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestTypeToTestResult_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestTypeToTestResultToCountry_trtTestTypeToTestResult__idfsTestName_idfsTestResult]...';


GO
ALTER TABLE [dbo].[trtTestTypeToTestResultToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestTypeToTestResultToCountry_trtTestTypeToTestResult__idfsTestName_idfsTestResult] FOREIGN KEY ([idfsTestName], [idfsTestResult]) REFERENCES [dbo].[trtTestTypeToTestResult] ([idfsTestName], [idfsTestResult]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestTypeToTestResultToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtTestTypeToTestResultToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestTypeToTestResultToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtTestTypeToTestResultToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[trtTestTypeToTestResultToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_trtTestTypeToTestResultToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtVectorSubType_trtBaseReference_idfsVectorSubType]...';


GO
ALTER TABLE [dbo].[trtVectorSubType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtVectorSubType_trtBaseReference_idfsVectorSubType] FOREIGN KEY ([idfsVectorSubType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtVectorSubType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtVectorSubType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtVectorSubType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtVectorSubType_trtVectorType_idfsVectorType]...';


GO
ALTER TABLE [dbo].[trtVectorSubType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtVectorSubType_trtVectorType_idfsVectorType] FOREIGN KEY ([idfsVectorType]) REFERENCES [dbo].[trtVectorType] ([idfsVectorType]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtVectorType_trtBaseReference__idfsVectorType]...';


GO
ALTER TABLE [dbo].[trtVectorType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtVectorType_trtBaseReference__idfsVectorType] FOREIGN KEY ([idfsVectorType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtVectorType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtVectorType] WITH NOCHECK
    ADD CONSTRAINT [FK_trtVectorType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference__idfsAggrCaseType_R_941]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] WITH NOCHECK
    ADD CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsAggrCaseType_R_941] FOREIGN KEY ([idfsAggrCaseType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference__idfsStatisticAreaType_R_1612]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] WITH NOCHECK
    ADD CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsStatisticAreaType_R_1612] FOREIGN KEY ([idfsStatisticAreaType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference__idfsStatisticPeriodType_R_1613]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] WITH NOCHECK
    ADD CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsStatisticPeriodType_R_1613] FOREIGN KEY ([idfsStatisticPeriodType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] WITH NOCHECK
    ADD CONSTRAINT [FK_tstAggrSetting_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstAggrSetting_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] WITH NOCHECK
    ADD CONSTRAINT [FK_tstAggrSetting_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstAggrSetting_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] WITH NOCHECK
    ADD CONSTRAINT [FK_tstAggrSetting_tstSite_idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstBarcodeLayout_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstBarcodeLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tstBarcodeLayout_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstBarcodeLayout_tstNextNumbers__idfsNumberName_R_1677]...';


GO
ALTER TABLE [dbo].[tstBarcodeLayout] WITH NOCHECK
    ADD CONSTRAINT [FK_tstBarcodeLayout_tstNextNumbers__idfsNumberName_R_1677] FOREIGN KEY ([idfsNumberName]) REFERENCES [dbo].[tstNextNumbers] ([idfsNumberName]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstCheckTables_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstCheckTables] WITH NOCHECK
    ADD CONSTRAINT [FK_tstCheckTables_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstCustomizationPackage_gisLocation_idfsCountry]...';


GO
ALTER TABLE [dbo].[tstCustomizationPackage] WITH NOCHECK
    ADD CONSTRAINT [FK_tstCustomizationPackage_gisLocation_idfsCountry] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisCountry] ([idfsCountry]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstCustomizationPackage_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstCustomizationPackage] WITH NOCHECK
    ADD CONSTRAINT [FK_tstCustomizationPackage_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstCustomizationPackageSettings_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstCustomizationPackageSettings] WITH NOCHECK
    ADD CONSTRAINT [FK_tstCustomizationPackageSettings_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEvent_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tstEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEvent_gisLocation_idfsLocation] FOREIGN KEY ([idfsLocation]) REFERENCES [dbo].[gisLocation] ([idfsLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEvent_gisRayon__idfsRayon]...';


GO
ALTER TABLE [dbo].[tstEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEvent_gisRayon__idfsRayon] FOREIGN KEY ([idfsRayon]) REFERENCES [dbo].[gisRayon] ([idfsRayon]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEvent_gisRegion__idfsRegion]...';


GO
ALTER TABLE [dbo].[tstEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEvent_gisRegion__idfsRegion] FOREIGN KEY ([idfsRegion]) REFERENCES [dbo].[gisRegion] ([idfsRegion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEvent_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEvent_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEvent_trtDiagnosis__idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[tstEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEvent_trtDiagnosis__idfsDiagnosis] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEvent_trtEventType__idfsEventTypeID_R_664]...';


GO
ALTER TABLE [dbo].[tstEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEvent_trtEventType__idfsEventTypeID_R_664] FOREIGN KEY ([idfsEventTypeID]) REFERENCES [dbo].[trtEventType] ([idfsEventTypeID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEvent_tstSite__idfsLoginSite]...';


GO
ALTER TABLE [dbo].[tstEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEvent_tstSite__idfsLoginSite] FOREIGN KEY ([idfsLoginSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEvent_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tstEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEvent_tstSite__idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEventActive_gisRayon__idfsRayon]...';


GO
ALTER TABLE [dbo].[tstEventActive] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEventActive_gisRayon__idfsRayon] FOREIGN KEY ([idfsRayon]) REFERENCES [dbo].[gisRayon] ([idfsRayon]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEventActive_gisRegion__idfsRegion]...';


GO
ALTER TABLE [dbo].[tstEventActive] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEventActive_gisRegion__idfsRegion] FOREIGN KEY ([idfsRegion]) REFERENCES [dbo].[gisRegion] ([idfsRegion]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEventActive_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstEventActive] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEventActive_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEventActive_trtDiagnosis__idfsDiagnosis]...';


GO
ALTER TABLE [dbo].[tstEventActive] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEventActive_trtDiagnosis__idfsDiagnosis] FOREIGN KEY ([idfsDiagnosis]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEventActive_trtEventType__idfsEventTypeID]...';


GO
ALTER TABLE [dbo].[tstEventActive] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEventActive_trtEventType__idfsEventTypeID] FOREIGN KEY ([idfsEventTypeID]) REFERENCES [dbo].[trtEventType] ([idfsEventTypeID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEventActive_tstSite__idfsLoginSite]...';


GO
ALTER TABLE [dbo].[tstEventActive] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEventActive_tstSite__idfsLoginSite] FOREIGN KEY ([idfsLoginSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEventActive_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tstEventActive] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEventActive_tstSite__idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEventClient_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstEventClient] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEventClient_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEventSubscription_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstEventSubscription] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEventSubscription_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstEventSubscription_trtEventType__idfsEventTypeID_R_676]...';


GO
ALTER TABLE [dbo].[tstEventSubscription] WITH NOCHECK
    ADD CONSTRAINT [FK_tstEventSubscription_trtEventType__idfsEventTypeID_R_676] FOREIGN KEY ([idfsEventTypeID]) REFERENCES [dbo].[trtEventType] ([idfsEventTypeID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstGeoLocationFormat_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tstGeoLocationFormat] WITH NOCHECK
    ADD CONSTRAINT [FK_tstGeoLocationFormat_gisLocation_idfsLocation] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisLocation] ([idfsLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstGeoLocationFormat_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstGeoLocationFormat] WITH NOCHECK
    ADD CONSTRAINT [FK_tstGeoLocationFormat_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstGlobalSiteOptions_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstGlobalSiteOptions] WITH NOCHECK
    ADD CONSTRAINT [FK_tstGlobalSiteOptions_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstGlobalSiteOptions_tstSite__idfsSite_R_1753]...';


GO
ALTER TABLE [dbo].[tstGlobalSiteOptions] WITH NOCHECK
    ADD CONSTRAINT [FK_tstGlobalSiteOptions_tstSite__idfsSite_R_1753] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstInvisibleFields_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstInvisibleFields] WITH NOCHECK
    ADD CONSTRAINT [FK_tstInvisibleFields_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstInvisibleFieldsToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstInvisibleFieldsToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_tstInvisibleFieldsToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstInvisibleFieldsToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tstInvisibleFieldsToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_tstInvisibleFieldsToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstInvisibleFieldsToCP_tstInvisibleFields_idfInvisibleField]...';


GO
ALTER TABLE [dbo].[tstInvisibleFieldsToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_tstInvisibleFieldsToCP_tstInvisibleFields_idfInvisibleField] FOREIGN KEY ([idfInvisibleField]) REFERENCES [dbo].[tstInvisibleFields] ([idfInvisibleField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstLocalClient_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstLocalClient] WITH NOCHECK
    ADD CONSTRAINT [FK_tstLocalClient_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstLocalConnectionContext_tauDataAuditEvent__idfDataAuditEvent_R_1043]...';


GO
ALTER TABLE [dbo].[tstLocalConnectionContext] WITH NOCHECK
    ADD CONSTRAINT [FK_tstLocalConnectionContext_tauDataAuditEvent__idfDataAuditEvent_R_1043] FOREIGN KEY ([idfDataAuditEvent]) REFERENCES [dbo].[tauDataAuditEvent] ([idfDataAuditEvent]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstLocalConnectionContext_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstLocalConnectionContext] WITH NOCHECK
    ADD CONSTRAINT [FK_tstLocalConnectionContext_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstLocalConnectionContext_tstEvent__idfEventID_R_1044]...';


GO
ALTER TABLE [dbo].[tstLocalConnectionContext] WITH NOCHECK
    ADD CONSTRAINT [FK_tstLocalConnectionContext_tstEvent__idfEventID_R_1044] FOREIGN KEY ([idfEventID]) REFERENCES [dbo].[tstEvent] ([idfEventID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstLocalConnectionContext_tstSite__idfsSite_R_1858]...';


GO
ALTER TABLE [dbo].[tstLocalConnectionContext] WITH NOCHECK
    ADD CONSTRAINT [FK_tstLocalConnectionContext_tstSite__idfsSite_R_1858] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstLocalConnectionContext_tstUserTable__idfUserID_R_1042]...';


GO
ALTER TABLE [dbo].[tstLocalConnectionContext] WITH NOCHECK
    ADD CONSTRAINT [FK_tstLocalConnectionContext_tstUserTable__idfUserID_R_1042] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstLocalSamplesTestsPreferences_tlbMaterial__idfMaterial]...';


GO
ALTER TABLE [dbo].[tstLocalSamplesTestsPreferences] WITH NOCHECK
    ADD CONSTRAINT [FK_tstLocalSamplesTestsPreferences_tlbMaterial__idfMaterial] FOREIGN KEY ([idfMaterial]) REFERENCES [dbo].[tlbMaterial] ([idfMaterial]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstLocalSamplesTestsPreferences_tlbTesting__idfTesting]...';


GO
ALTER TABLE [dbo].[tstLocalSamplesTestsPreferences] WITH NOCHECK
    ADD CONSTRAINT [FK_tstLocalSamplesTestsPreferences_tlbTesting__idfTesting] FOREIGN KEY ([idfTesting]) REFERENCES [dbo].[tlbTesting] ([idfTesting]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstLocalSamplesTestsPreferences_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstLocalSamplesTestsPreferences] WITH NOCHECK
    ADD CONSTRAINT [FK_tstLocalSamplesTestsPreferences_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstLocalSamplesTestsPreferences_tstUserTable__idfUserID]...';


GO
ALTER TABLE [dbo].[tstLocalSamplesTestsPreferences] WITH NOCHECK
    ADD CONSTRAINT [FK_tstLocalSamplesTestsPreferences_tstUserTable__idfUserID] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstLocalSiteOptions_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstLocalSiteOptions] WITH NOCHECK
    ADD CONSTRAINT [FK_tstLocalSiteOptions_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstMandatoryFields_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstMandatoryFields] WITH NOCHECK
    ADD CONSTRAINT [FK_tstMandatoryFields_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstMandatoryFieldsToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstMandatoryFieldsToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_tstMandatoryFieldsToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstMandatoryFieldsToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tstMandatoryFieldsToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_tstMandatoryFieldsToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstMandatoryFieldsToCP_tstMandatoryFields_idfMandatoryField]...';


GO
ALTER TABLE [dbo].[tstMandatoryFieldsToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_tstMandatoryFieldsToCP_tstMandatoryFields_idfMandatoryField] FOREIGN KEY ([idfMandatoryField]) REFERENCES [dbo].[tstMandatoryFields] ([idfMandatoryField]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNewID_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstNewID] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNewID_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNextNumbers_trtBaseReference__idfsNumberName_R_930]...';


GO
ALTER TABLE [dbo].[tstNextNumbers] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNextNumbers_trtBaseReference__idfsNumberName_R_930] FOREIGN KEY ([idfsNumberName]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNextNumbers_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstNextNumbers] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNextNumbers_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotification_trtBaseReference__idfsNotificationObjectType_R_1307]...';


GO
ALTER TABLE [dbo].[tstNotification] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotification_trtBaseReference__idfsNotificationObjectType_R_1307] FOREIGN KEY ([idfsNotificationObjectType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotification_trtBaseReference__idfsNotificationType_R_1306]...';


GO
ALTER TABLE [dbo].[tstNotification] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotification_trtBaseReference__idfsNotificationType_R_1306] FOREIGN KEY ([idfsNotificationType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotification_trtBaseReference__idfsTargetSiteType_R_1304]...';


GO
ALTER TABLE [dbo].[tstNotification] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotification_trtBaseReference__idfsTargetSiteType_R_1304] FOREIGN KEY ([idfsTargetSiteType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotification_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstNotification] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotification_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotification_tstSite__idfsSite_R_1035]...';


GO
ALTER TABLE [dbo].[tstNotification] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotification_tstSite__idfsSite_R_1035] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotification_tstSite__idfsTargetSite_R_688]...';


GO
ALTER TABLE [dbo].[tstNotification] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotification_tstSite__idfsTargetSite_R_688] FOREIGN KEY ([idfsTargetSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotification_tstUserTable__idfTargetUserID_R_720]...';


GO
ALTER TABLE [dbo].[tstNotification] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotification_tstUserTable__idfTargetUserID_R_720] FOREIGN KEY ([idfTargetUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotification_tstUserTable__idfUserID_R_793]...';


GO
ALTER TABLE [dbo].[tstNotification] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotification_tstUserTable__idfUserID_R_793] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotificationActivity_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstNotificationActivity] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotificationActivity_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotificationShared_trtBaseReference__idfsNotificationObjectType]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotificationShared_trtBaseReference__idfsNotificationObjectType] FOREIGN KEY ([idfsNotificationObjectType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotificationShared_trtBaseReference__idfsNotificationType]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotificationShared_trtBaseReference__idfsNotificationType] FOREIGN KEY ([idfsNotificationType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotificationShared_trtBaseReference__idfsTargetSiteType]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotificationShared_trtBaseReference__idfsTargetSiteType] FOREIGN KEY ([idfsTargetSiteType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotificationShared_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotificationShared_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotificationShared_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotificationShared_tstSite__idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotificationShared_tstSite__idfsTargetSite]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotificationShared_tstSite__idfsTargetSite] FOREIGN KEY ([idfsTargetSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotificationShared_tstUserTable__idfTargetUserID]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotificationShared_tstUserTable__idfTargetUserID] FOREIGN KEY ([idfTargetUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotificationShared_tstUserTable__idfUserID]...';


GO
ALTER TABLE [dbo].[tstNotificationShared] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotificationShared_tstUserTable__idfUserID] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstNotificationStatus_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstNotificationStatus] WITH NOCHECK
    ADD CONSTRAINT [FK_tstNotificationStatus_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstObjectAccess_tlbEmployee__idfActor_R_1618]...';


GO
ALTER TABLE [dbo].[tstObjectAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_tstObjectAccess_tlbEmployee__idfActor_R_1618] FOREIGN KEY ([idfActor]) REFERENCES [dbo].[tlbEmployee] ([idfEmployee]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstObjectAccess_trtBaseReference__idfsObjectOperation_R_1586]...';


GO
ALTER TABLE [dbo].[tstObjectAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_tstObjectAccess_trtBaseReference__idfsObjectOperation_R_1586] FOREIGN KEY ([idfsObjectOperation]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstObjectAccess_trtBaseReference__idfsObjectType_R_1580]...';


GO
ALTER TABLE [dbo].[tstObjectAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_tstObjectAccess_trtBaseReference__idfsObjectType_R_1580] FOREIGN KEY ([idfsObjectType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstObjectAccess_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstObjectAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_tstObjectAccess_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstObjectAccess_tstSite__idfsOnSite_R_951]...';


GO
ALTER TABLE [dbo].[tstObjectAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_tstObjectAccess_tstSite__idfsOnSite_R_951] FOREIGN KEY ([idfsOnSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstPersonalDataGroup_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstPersonalDataGroup] WITH NOCHECK
    ADD CONSTRAINT [FK_tstPersonalDataGroup_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstPersonalDataGroupToCP_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstPersonalDataGroupToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_tstPersonalDataGroupToCP_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstPersonalDataGroupToCP_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tstPersonalDataGroupToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_tstPersonalDataGroupToCP_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstPersonalDataGroupToCP_tstPersonalDataGroup_idfPersonalDataGroup]...';


GO
ALTER TABLE [dbo].[tstPersonalDataGroupToCP] WITH NOCHECK
    ADD CONSTRAINT [FK_tstPersonalDataGroupToCP_tstPersonalDataGroup_idfPersonalDataGroup] FOREIGN KEY ([idfPersonalDataGroup]) REFERENCES [dbo].[tstPersonalDataGroup] ([idfPersonalDataGroup]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstRayonToReportSite_gisRayon__idfsRayon]...';


GO
ALTER TABLE [dbo].[tstRayonToReportSite] WITH NOCHECK
    ADD CONSTRAINT [FK_tstRayonToReportSite_gisRayon__idfsRayon] FOREIGN KEY ([idfsRayon]) REFERENCES [dbo].[gisRayon] ([idfsRayon]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstRayonToReportSite_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstRayonToReportSite] WITH NOCHECK
    ADD CONSTRAINT [FK_tstRayonToReportSite_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstRayonToReportSite_tstSite__idfsSite]...';


GO
ALTER TABLE [dbo].[tstRayonToReportSite] WITH NOCHECK
    ADD CONSTRAINT [FK_tstRayonToReportSite_tstSite__idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSecurityAudit_tauDataAuditEvent__idfDataAuditEvent_R_1731]...';


GO
ALTER TABLE [dbo].[tstSecurityAudit] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSecurityAudit_tauDataAuditEvent__idfDataAuditEvent_R_1731] FOREIGN KEY ([idfDataAuditEvent]) REFERENCES [dbo].[tauDataAuditEvent] ([idfDataAuditEvent]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSecurityAudit_trtBaseReference__idfsAction_R_1727]...';


GO
ALTER TABLE [dbo].[tstSecurityAudit] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSecurityAudit_trtBaseReference__idfsAction_R_1727] FOREIGN KEY ([idfsAction]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSecurityAudit_trtBaseReference__idfsProcessType_R_1729]...';


GO
ALTER TABLE [dbo].[tstSecurityAudit] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSecurityAudit_trtBaseReference__idfsProcessType_R_1729] FOREIGN KEY ([idfsProcessType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSecurityAudit_trtBaseReference__idfsResult_R_1728]...';


GO
ALTER TABLE [dbo].[tstSecurityAudit] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSecurityAudit_trtBaseReference__idfsResult_R_1728] FOREIGN KEY ([idfsResult]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSecurityAudit_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstSecurityAudit] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSecurityAudit_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSecurityAudit_tstSite]...';


GO
ALTER TABLE [dbo].[tstSecurityAudit] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSecurityAudit_tstSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSecurityAudit_tstUserTable__idfUserID_R_1726]...';


GO
ALTER TABLE [dbo].[tstSecurityAudit] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSecurityAudit_tstUserTable__idfUserID_R_1726] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSecurityConfiguration_trtBaseReference__idfsSecurityLevel_R_1759]...';


GO
ALTER TABLE [dbo].[tstSecurityConfiguration] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSecurityConfiguration_trtBaseReference__idfsSecurityLevel_R_1759] FOREIGN KEY ([idfsSecurityLevel]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSecurityConfiguration_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstSecurityConfiguration] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSecurityConfiguration_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSecurityConfiguration_tstSecurityConfiguration__idfParentSecurityConfiguration_R_1761]...';


GO
ALTER TABLE [dbo].[tstSecurityConfiguration] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSecurityConfiguration_tstSecurityConfiguration__idfParentSecurityConfiguration_R_1761] FOREIGN KEY ([idfParentSecurityConfiguration]) REFERENCES [dbo].[tstSecurityConfiguration] ([idfSecurityConfiguration]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSecurityConfigurationAlphabet_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstSecurityConfigurationAlphabet] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSecurityConfigurationAlphabet_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSecurityConfigurationAlphabetParticipation_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstSecurityConfigurationAlphabetParticipation] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSecurityConfigurationAlphabetParticipation_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSecurityConfigurationAlphabetParticipation_tstSecurityConfiguration__idfSecurityConfiguration_R_1763]...';


GO
ALTER TABLE [dbo].[tstSecurityConfigurationAlphabetParticipation] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSecurityConfigurationAlphabetParticipation_tstSecurityConfiguration__idfSecurityConfiguration_R_1763] FOREIGN KEY ([idfSecurityConfiguration]) REFERENCES [dbo].[tstSecurityConfiguration] ([idfSecurityConfiguration]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSecurityConfigurationAlphabetParticipation_tstSecurityConfigurationAlphabet__idfsSecurityConfigurationAlphabet_R_1762]...';


GO
ALTER TABLE [dbo].[tstSecurityConfigurationAlphabetParticipation] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSecurityConfigurationAlphabetParticipation_tstSecurityConfigurationAlphabet__idfsSecurityConfigurationAlphabet_R_1762] FOREIGN KEY ([idfsSecurityConfigurationAlphabet]) REFERENCES [dbo].[tstSecurityConfigurationAlphabet] ([idfsSecurityConfigurationAlphabet]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSite_tlbOffice__idfOffice_R_386]...';


GO
ALTER TABLE [dbo].[tstSite] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSite_tlbOffice__idfOffice_R_386] FOREIGN KEY ([idfOffice]) REFERENCES [dbo].[tlbOffice] ([idfOffice]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSite_trtBaseReference__idfsSiteType_R_1305]...';


GO
ALTER TABLE [dbo].[tstSite] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSite_trtBaseReference__idfsSiteType_R_1305] FOREIGN KEY ([idfsSiteType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSite_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstSite] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSite_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSite_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tstSite] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSite_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstSite_tstSite__idfsParentSite]...';


GO
ALTER TABLE [dbo].[tstSite] WITH NOCHECK
    ADD CONSTRAINT [FK_tstSite_tstSite__idfsParentSite] FOREIGN KEY ([idfsParentSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstUserTable_tlbPerson_idfPerson]...';


GO
ALTER TABLE [dbo].[tstUserTable] WITH NOCHECK
    ADD CONSTRAINT [FK_tstUserTable_tlbPerson_idfPerson] FOREIGN KEY ([idfPerson]) REFERENCES [dbo].[tlbPerson] ([idfPerson]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstUserTable_trtBaseReference_idfsBaseReference]...';


GO
ALTER TABLE [dbo].[tstUserTable] WITH NOCHECK
    ADD CONSTRAINT [FK_tstUserTable_trtBaseReference_idfsBaseReference] FOREIGN KEY ([PreferredLanguageID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstUserTable_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstUserTable] WITH NOCHECK
    ADD CONSTRAINT [FK_tstUserTable_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstUserTable_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tstUserTable] WITH NOCHECK
    ADD CONSTRAINT [FK_tstUserTable_tstSite_idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstUserTableLocal_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstUserTableLocal] WITH NOCHECK
    ADD CONSTRAINT [FK_tstUserTableLocal_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstUserTableLocal_tstUserTable_idfUserID]...';


GO
ALTER TABLE [dbo].[tstUserTableLocal] WITH NOCHECK
    ADD CONSTRAINT [FK_tstUserTableLocal_tstUserTable_idfUserID] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstUserTableOldPassword_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstUserTableOldPassword] WITH NOCHECK
    ADD CONSTRAINT [FK_tstUserTableOldPassword_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstUserTableOldPassword_tstUserTable__idfUserID_R_1730]...';


GO
ALTER TABLE [dbo].[tstUserTableOldPassword] WITH NOCHECK
    ADD CONSTRAINT [FK_tstUserTableOldPassword_tstUserTable__idfUserID_R_1730] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstUserTicket_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstUserTicket] WITH NOCHECK
    ADD CONSTRAINT [FK_tstUserTicket_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstUserTicket_tstUserTable__idfUserID]...';


GO
ALTER TABLE [dbo].[tstUserTicket] WITH NOCHECK
    ADD CONSTRAINT [FK_tstUserTicket_tstUserTable__idfUserID] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstVersionCompare_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstVersionCompare] WITH NOCHECK
    ADD CONSTRAINT [FK_tstVersionCompare_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_updRunningApps_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[updRunningApps] WITH NOCHECK
    ADD CONSTRAINT [FK_updRunningApps_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_updUpdateBlock_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[updUpdateBlock] WITH NOCHECK
    ADD CONSTRAINT [FK_updUpdateBlock_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_UserAccess_BaseRef_AccessPermission]...';


GO
ALTER TABLE [dbo].[UserAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_UserAccess_BaseRef_AccessPermission] FOREIGN KEY ([AccessPermissionID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_UserAccess_BaseRef_SysFunctionID]...';


GO
ALTER TABLE [dbo].[UserAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_UserAccess_BaseRef_SysFunctionID] FOREIGN KEY ([SystemFunctionID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_UserAccess_BaseReference_OperaionID]...';


GO
ALTER TABLE [dbo].[UserAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_UserAccess_BaseReference_OperaionID] FOREIGN KEY ([SystemFunctionOperationID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_UserAccess_tlbEmployee_EmpID]...';


GO
ALTER TABLE [dbo].[UserAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_UserAccess_tlbEmployee_EmpID] FOREIGN KEY ([UserEmployeeID]) REFERENCES [dbo].[tlbEmployee] ([idfEmployee]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_UserAccess_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[UserAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_UserAccess_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_UserAccess_tstSite_OnSite]...';


GO
ALTER TABLE [dbo].[UserAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_UserAccess_tstSite_OnSite] FOREIGN KEY ([OnSite]) REFERENCES [dbo].[tstSite] ([idfsSite]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_UserPreference_BAseRef_ModuleConstantID]...';


GO
ALTER TABLE [dbo].[UserPreference] WITH NOCHECK
    ADD CONSTRAINT [FK_UserPreference_BAseRef_ModuleConstantID] FOREIGN KEY ([ModuleConstantID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_UserPreference_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[UserPreference] WITH NOCHECK
    ADD CONSTRAINT [FK_UserPreference_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_UserPreference_tstUserTable_UserID]...';


GO
ALTER TABLE [dbo].[UserPreference] WITH NOCHECK
    ADD CONSTRAINT [FK_UserPreference_tstUserTable_UserID] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_VetDiseaseReportRelationship_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[VetDiseaseReportRelationship] WITH NOCHECK
    ADD CONSTRAINT [FK_VetDiseaseReportRelationship_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_VetDiseaseReportReln_BaseRef_RelTypeID]...';


GO
ALTER TABLE [dbo].[VetDiseaseReportRelationship] WITH NOCHECK
    ADD CONSTRAINT [FK_VetDiseaseReportReln_BaseRef_RelTypeID] FOREIGN KEY ([RelationshipTypeID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_VetDiseaseReportReln_tlbVetCase_RelateToVetDiseaseReportID]...';


GO
ALTER TABLE [dbo].[VetDiseaseReportRelationship] WITH NOCHECK
    ADD CONSTRAINT [FK_VetDiseaseReportReln_tlbVetCase_RelateToVetDiseaseReportID] FOREIGN KEY ([RelatedToVetDiseaseReportID]) REFERENCES [dbo].[tlbVetCase] ([idfVetCase]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_VetDiseaseReportReln_tlbVetCase_VetDiseaseReportID]...';


GO
ALTER TABLE [dbo].[VetDiseaseReportRelationship] WITH NOCHECK
    ADD CONSTRAINT [FK_VetDiseaseReportReln_tlbVetCase_VetDiseaseReportID] FOREIGN KEY ([VetDiseaseReportID]) REFERENCES [dbo].[tlbVetCase] ([idfVetCase]);


GO
PRINT N'Creating Trigger [dbo].[TR_trtSystemFunctionOperation_A_Update]...';


GO

CREATE TRIGGER [dbo].[TR_trtSystemFunctionOperation_A_Update] ON [dbo].[trtSystemFunctionOperation]
FOR UPDATE
NOT FOR REPLICATION
AS
BEGIN

	IF (dbo.FN_GBL_TriggersWork() = 1 AND UPDATE([idfsSystemFunctionOperation]))  -- update to Primary Key is not allowed.
	BEGIN
		RAISERROR('Update Trigger: Not allowed to update PK.',16,1);
		ROLLBACK TRANSACTION;
	END

END
GO
PRINT N'Creating Trigger [dbo].[TR_tstCheckConstraints_A_Update]...';


GO

CREATE TRIGGER [dbo].[TR_tstCheckConstraints_A_Update] ON [dbo].[tstCheckConstraints]
FOR UPDATE
NOT FOR REPLICATION
AS
BEGIN

	IF (dbo.FN_GBL_TriggersWork() = 1 AND UPDATE([idfCheckConstraints]))  -- update to Primary Key is not allowed.
	BEGIN
		RAISERROR('Update Trigger: Not allowed to update PK.',16,1);
		ROLLBACK TRANSACTION;
	END

END
GO
PRINT N'Creating Trigger [dbo].[TR_tstInvalidObjects_A_Update]...';


GO

CREATE TRIGGER [dbo].[TR_tstInvalidObjects_A_Update] ON [dbo].[tstInvalidObjects]
FOR UPDATE
NOT FOR REPLICATION
AS
BEGIN

	IF (dbo.FN_GBL_TriggersWork() = 1 AND UPDATE([idfKey]))  -- update to Primary Key is not allowed.
	BEGIN
		RAISERROR('Update Trigger: Not allowed to update PK.',16,1);
		ROLLBACK TRANSACTION;
	END

END
GO
PRINT N'Altering Trigger [dbo].[TR_AccessRule_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_AccessRule_A_Update]
    ON [dbo].[AccessRule];


GO
PRINT N'Altering Trigger [dbo].[TR_AccessRule_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_AccessRule_I_Delete]
    ON [dbo].[AccessRule];


GO
PRINT N'Altering Trigger [dbo].[TR_AppObjectSysFunction_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_AppObjectSysFunction_A_Update]
    ON [dbo].[AppObjectSysFunction];


GO
PRINT N'Altering Trigger [dbo].[TR_AppObjectSysFunction_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_AppObjectSysFunction_I_Delete]
    ON [dbo].[AppObjectSysFunction];


GO
PRINT N'Altering Trigger [dbo].[TR_AppSessionLog_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_AppSessionLog_A_Update]
    ON [dbo].[AppSessionLog];


GO
PRINT N'Altering Trigger [dbo].[TR_ArchiveSetting_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ArchiveSetting_A_Update]
    ON [dbo].[ArchiveSetting];


GO
PRINT N'Altering Trigger [dbo].[TR_ArchiveSetting_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ArchiveSetting_I_Delete]
    ON [dbo].[ArchiveSetting];


GO
PRINT N'Altering Trigger [dbo].[TR_DiagnosisGroupToGender_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_DiagnosisGroupToGender_A_Update]
    ON [dbo].[DiagnosisGroupToGender];


GO
PRINT N'Altering Trigger [dbo].[TR_DiagnosisGroupToGender_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_DiagnosisGroupToGender_I_Delete]
    ON [dbo].[DiagnosisGroupToGender];


GO
PRINT N'Altering Trigger [dbo].[TR_dotNetAppenderLog_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_dotNetAppenderLog_A_Update]
    ON [dbo].[dotNetAppenderLog];


GO
PRINT N'Altering Trigger [dbo].[TR_EmployeeToInstitution_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_EmployeeToInstitution_A_Update]
    ON [dbo].[EmployeeToInstitution];


GO
PRINT N'Altering Trigger [dbo].[TR_EmployeeToInstitution_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_EmployeeToInstitution_I_Delete]
    ON [dbo].[EmployeeToInstitution];


GO
PRINT N'Altering Trigger [dbo].[TR_ffDecorElement_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffDecorElement_A_Update]
    ON [dbo].[ffDecorElement];


GO
PRINT N'Altering Trigger [dbo].[TR_ffDecorElement_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffDecorElement_I_Delete]
    ON [dbo].[ffDecorElement];


GO
PRINT N'Altering Trigger [dbo].[TR_ffDecorElementLine_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffDecorElementLine_A_Update]
    ON [dbo].[ffDecorElementLine];


GO
PRINT N'Altering Trigger [dbo].[TR_ffDecorElementLine_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffDecorElementLine_I_Delete]
    ON [dbo].[ffDecorElementLine];


GO
PRINT N'Altering Trigger [dbo].[TR_ffDecorElementText_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffDecorElementText_A_Update]
    ON [dbo].[ffDecorElementText];


GO
PRINT N'Altering Trigger [dbo].[TR_ffDecorElementText_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffDecorElementText_I_Delete]
    ON [dbo].[ffDecorElementText];


GO
PRINT N'Altering Trigger [dbo].[TR_ffDeterminantType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffDeterminantType_A_Update]
    ON [dbo].[ffDeterminantType];


GO
PRINT N'Altering Trigger [dbo].[TR_ffDeterminantValue_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffDeterminantValue_A_Update]
    ON [dbo].[ffDeterminantValue];


GO
PRINT N'Altering Trigger [dbo].[TR_ffDeterminantValue_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffDeterminantValue_I_Delete]
    ON [dbo].[ffDeterminantValue];


GO
PRINT N'Altering Trigger [dbo].[TR_ffFormTemplate_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffFormTemplate_A_Update]
    ON [dbo].[ffFormTemplate];


GO
PRINT N'Altering Trigger [dbo].[TR_ffFormTemplate_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffFormTemplate_I_Delete]
    ON [dbo].[ffFormTemplate];


GO
PRINT N'Altering Trigger [dbo].[TR_ffParameter_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffParameter_A_Update]
    ON [dbo].[ffParameter];


GO
PRINT N'Altering Trigger [dbo].[TR_ffParameter_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffParameter_I_Delete]
    ON [dbo].[ffParameter];


GO
PRINT N'Altering Trigger [dbo].[TR_ffParameterDesignOption_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffParameterDesignOption_A_Update]
    ON [dbo].[ffParameterDesignOption];


GO
PRINT N'Altering Trigger [dbo].[TR_ffParameterDesignOption_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffParameterDesignOption_I_Delete]
    ON [dbo].[ffParameterDesignOption];


GO
PRINT N'Altering Trigger [dbo].[TR_ffParameterFixedPresetValue_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffParameterFixedPresetValue_A_Update]
    ON [dbo].[ffParameterFixedPresetValue];


GO
PRINT N'Altering Trigger [dbo].[TR_ffParameterFixedPresetValue_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffParameterFixedPresetValue_I_Delete]
    ON [dbo].[ffParameterFixedPresetValue];


GO
PRINT N'Altering Trigger [dbo].[TR_ffParameterForAction_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffParameterForAction_A_Update]
    ON [dbo].[ffParameterForAction];


GO
PRINT N'Altering Trigger [dbo].[TR_ffParameterForAction_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffParameterForAction_I_Delete]
    ON [dbo].[ffParameterForAction];


GO
PRINT N'Altering Trigger [dbo].[TR_ffParameterForFunction_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffParameterForFunction_A_Update]
    ON [dbo].[ffParameterForFunction];


GO
PRINT N'Altering Trigger [dbo].[TR_ffParameterForFunction_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffParameterForFunction_I_Delete]
    ON [dbo].[ffParameterForFunction];


GO
PRINT N'Altering Trigger [dbo].[TR_ffParameterForTemplate_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffParameterForTemplate_A_Update]
    ON [dbo].[ffParameterForTemplate];


GO
PRINT N'Altering Trigger [dbo].[TR_ffParameterForTemplate_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffParameterForTemplate_I_Delete]
    ON [dbo].[ffParameterForTemplate];


GO
PRINT N'Altering Trigger [dbo].[TR_ffParameterType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffParameterType_A_Update]
    ON [dbo].[ffParameterType];


GO
PRINT N'Altering Trigger [dbo].[TR_ffParameterType_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffParameterType_I_Delete]
    ON [dbo].[ffParameterType];


GO
PRINT N'Altering Trigger [dbo].[TR_ffRule_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffRule_A_Update]
    ON [dbo].[ffRule];


GO
PRINT N'Altering Trigger [dbo].[TR_ffRule_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffRule_I_Delete]
    ON [dbo].[ffRule];


GO
PRINT N'Altering Trigger [dbo].[TR_ffRuleConstant_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffRuleConstant_A_Update]
    ON [dbo].[ffRuleConstant];


GO
PRINT N'Altering Trigger [dbo].[TR_ffRuleConstant_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffRuleConstant_I_Delete]
    ON [dbo].[ffRuleConstant];


GO
PRINT N'Altering Trigger [dbo].[TR_ffRuleFunction_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffRuleFunction_A_Update]
    ON [dbo].[ffRuleFunction];


GO
PRINT N'Altering Trigger [dbo].[TR_ffSection_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffSection_A_Update]
    ON [dbo].[ffSection];


GO
PRINT N'Altering Trigger [dbo].[TR_ffSection_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffSection_I_Delete]
    ON [dbo].[ffSection];


GO
PRINT N'Altering Trigger [dbo].[TR_ffSectionDesignOption_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffSectionDesignOption_A_Update]
    ON [dbo].[ffSectionDesignOption];


GO
PRINT N'Altering Trigger [dbo].[TR_ffSectionDesignOption_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffSectionDesignOption_I_Delete]
    ON [dbo].[ffSectionDesignOption];


GO
PRINT N'Altering Trigger [dbo].[TR_ffSectionForAction_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffSectionForAction_A_Update]
    ON [dbo].[ffSectionForAction];


GO
PRINT N'Altering Trigger [dbo].[TR_ffSectionForAction_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffSectionForAction_I_Delete]
    ON [dbo].[ffSectionForAction];


GO
PRINT N'Altering Trigger [dbo].[TR_ffSectionForTemplate_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_ffSectionForTemplate_A_Update]
    ON [dbo].[ffSectionForTemplate];


GO
PRINT N'Altering Trigger [dbo].[TR_ffSectionForTemplate_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_ffSectionForTemplate_I_Delete]
    ON [dbo].[ffSectionForTemplate];


GO
PRINT N'Altering Trigger [dbo].[TR_gisBaseReference_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisBaseReference_A_Update]
    ON [dbo].[gisBaseReference];


GO
PRINT N'Altering Trigger [dbo].[TR_gisBaseReference_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_gisBaseReference_I_Delete]
    ON [dbo].[gisBaseReference];


GO
PRINT N'Altering Trigger [dbo].[TR_gisCountry_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisCountry_A_Update]
    ON [dbo].[gisCountry];


GO
PRINT N'Altering Trigger [dbo].[TR_gisCountry_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_gisCountry_I_Delete]
    ON [dbo].[gisCountry];


GO
PRINT N'Altering Trigger [dbo].[TR_gisDistrictSubdistrict_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisDistrictSubdistrict_A_Update]
    ON [dbo].[gisDistrictSubdistrict];


GO
PRINT N'Altering Trigger [dbo].[TR_gisLegendSymbol_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisLegendSymbol_A_Update]
    ON [dbo].[gisLegendSymbol];


GO
PRINT N'Altering Trigger [dbo].[TR_gisLocation_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_gisLocation_I_Delete]
    ON [dbo].[gisLocation];


GO
PRINT N'Altering Trigger [dbo].[TR_gisLocation_UpdateDenormalizedHierarchy]...';


GO
ENABLE TRIGGER [dbo].[TR_gisLocation_UpdateDenormalizedHierarchy]
    ON [dbo].[gisLocation];


GO
PRINT N'Altering Trigger [dbo].[TR_gisMetadata_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisMetadata_A_Update]
    ON [dbo].[gisMetadata];


GO
PRINT N'Altering Trigger [dbo].[TR_gisNewID_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisNewID_A_Update]
    ON [dbo].[gisNewID];


GO
PRINT N'Altering Trigger [dbo].[TR_gisOtherBaseReference_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisOtherBaseReference_A_Update]
    ON [dbo].[gisOtherBaseReference];


GO
PRINT N'Altering Trigger [dbo].[TR_gisOtherStringNameTranslation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisOtherStringNameTranslation_A_Update]
    ON [dbo].[gisOtherStringNameTranslation];


GO
PRINT N'Altering Trigger [dbo].[TR_gisRayon_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisRayon_A_Update]
    ON [dbo].[gisRayon];


GO
PRINT N'Altering Trigger [dbo].[TR_gisRayon_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_gisRayon_I_Delete]
    ON [dbo].[gisRayon];


GO
PRINT N'Altering Trigger [dbo].[TR_gisReferenceType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisReferenceType_A_Update]
    ON [dbo].[gisReferenceType];


GO
PRINT N'Altering Trigger [dbo].[TR_gisReferenceType_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_gisReferenceType_I_Delete]
    ON [dbo].[gisReferenceType];


GO
PRINT N'Altering Trigger [dbo].[TR_gisRegion_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisRegion_A_Update]
    ON [dbo].[gisRegion];


GO
PRINT N'Altering Trigger [dbo].[TR_gisRegion_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_gisRegion_I_Delete]
    ON [dbo].[gisRegion];


GO
PRINT N'Altering Trigger [dbo].[TR_gisSettlement_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisSettlement_A_Update]
    ON [dbo].[gisSettlement];


GO
PRINT N'Altering Trigger [dbo].[TR_gisSettlement_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_gisSettlement_I_Delete]
    ON [dbo].[gisSettlement];


GO
PRINT N'Altering Trigger [dbo].[TR_gisStringNameTranslation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisStringNameTranslation_A_Update]
    ON [dbo].[gisStringNameTranslation];


GO
PRINT N'Altering Trigger [dbo].[TR_gisStringNameTranslation_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_gisStringNameTranslation_I_Delete]
    ON [dbo].[gisStringNameTranslation];


GO
PRINT N'Altering Trigger [dbo].[TR_gisUserLayer_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisUserLayer_A_Update]
    ON [dbo].[gisUserLayer];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBCountry_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBCountry_A_Update]
    ON [dbo].[gisWKBCountry];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBDistrict_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBDistrict_A_Update]
    ON [dbo].[gisWKBDistrict];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBDistrictReady_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBDistrictReady_A_Update]
    ON [dbo].[gisWKBDistrictReady];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBEarthRoad_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBEarthRoad_A_Update]
    ON [dbo].[gisWKBEarthRoad];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBForest_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBForest_A_Update]
    ON [dbo].[gisWKBForest];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBHighway_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBHighway_A_Update]
    ON [dbo].[gisWKBHighway];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBInlandWater_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBInlandWater_A_Update]
    ON [dbo].[gisWKBInlandWater];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBLake_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBLake_A_Update]
    ON [dbo].[gisWKBLake];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBLandUse_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBLandUse_A_Update]
    ON [dbo].[gisWKBLanduse];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBMainRiver_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBMainRiver_A_Update]
    ON [dbo].[gisWKBMainRiver];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBMajorRoad_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBMajorRoad_A_Update]
    ON [dbo].[gisWKBMajorRoad];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBPath_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBPath_A_Update]
    ON [dbo].[gisWKBPath];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBRailroad_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBRailroad_A_Update]
    ON [dbo].[gisWKBRailroad];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBRayon_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBRayon_A_Update]
    ON [dbo].[gisWKBRayon];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBRayonReady_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBRayonReady_A_Update]
    ON [dbo].[gisWKBRayonReady];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBRegion_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBRegion_A_Update]
    ON [dbo].[gisWKBRegion];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBRegionReady_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBRegionReady_A_Update]
    ON [dbo].[gisWKBRegionReady];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBRiver_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBRiver_A_Update]
    ON [dbo].[gisWKBRiver];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBRiverPolygon_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBRiverPolygon_A_Update]
    ON [dbo].[gisWKBRiverPolygon];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBSea_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBSea_A_Update]
    ON [dbo].[gisWKBSea];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBSettlement_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBSettlement_A_Update]
    ON [dbo].[gisWKBSettlement];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBSettlementReady_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBSettlementReady_A_Update]
    ON [dbo].[gisWKBSettlementReady];


GO
PRINT N'Altering Trigger [dbo].[TR_gisWKBSmallRiver_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_gisWKBSmallRiver_A_Update]
    ON [dbo].[gisWKBSmallRiver];


GO
PRINT N'Altering Trigger [dbo].[TR_HumanActualAddlInfo_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_HumanActualAddlInfo_A_Update]
    ON [dbo].[HumanActualAddlInfo];


GO
PRINT N'Altering Trigger [dbo].[TR_HumanActualAddlInfo_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_HumanActualAddlInfo_I_Delete]
    ON [dbo].[HumanActualAddlInfo];


GO
PRINT N'Altering Trigger [dbo].[TR_HumanAddlInfo_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_HumanAddlInfo_A_Update]
    ON [dbo].[HumanAddlInfo];


GO
PRINT N'Altering Trigger [dbo].[TR_HumanAddlInfo_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_HumanAddlInfo_I_Delete]
    ON [dbo].[HumanAddlInfo];


GO
PRINT N'Altering Trigger [dbo].[TR_HumanDiseaseReportRelationship_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_HumanDiseaseReportRelationship_A_Update]
    ON [dbo].[HumanDiseaseReportRelationship];


GO
PRINT N'Altering Trigger [dbo].[TR_HumanDiseaseReportRelationship_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_HumanDiseaseReportRelationship_I_Delete]
    ON [dbo].[HumanDiseaseReportRelationship];


GO
PRINT N'Altering Trigger [dbo].[TR_HumanDiseaseReportVaccination_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_HumanDiseaseReportVaccination_A_Update]
    ON [dbo].[HumanDiseaseReportVaccination];


GO
PRINT N'Altering Trigger [dbo].[TR_HumanDiseaseReportVaccination_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_HumanDiseaseReportVaccination_I_Delete]
    ON [dbo].[HumanDiseaseReportVaccination];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupConfigParm_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupConfigParm_A_Update]
    ON [dbo].[LkupConfigParm];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupConfigParm_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupConfigParm_I_Delete]
    ON [dbo].[LkupConfigParm];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupEIDSSAppObject_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupEIDSSAppObject_A_Update]
    ON [dbo].[LkupEIDSSAppObject];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupEIDSSAppObject_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupEIDSSAppObject_I_Delete]
    ON [dbo].[LkupEIDSSAppObject];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupEIDSSMenu_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupEIDSSMenu_A_Update]
    ON [dbo].[LkupEIDSSMenu];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupEIDSSMenu_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupEIDSSMenu_I_Delete]
    ON [dbo].[LkupEIDSSMenu];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupEIDSSMenuToSystemFunction_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupEIDSSMenuToSystemFunction_A_Update]
    ON [dbo].[LkupEIDSSMenuToSystemFunction];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupEIDSSMenuToSystemFunction_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupEIDSSMenuToSystemFunction_I_Delete]
    ON [dbo].[LkupEIDSSMenuToSystemFunction];


GO
PRINT N'Altering Trigger [dbo].[TR_LKUPNextKey_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_LKUPNextKey_A_Update]
    ON [dbo].[LKUPNextKey];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupNextKey_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupNextKey_I_Delete]
    ON [dbo].[LKUPNextKey];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupRoleDashboardObject_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupRoleDashboardObject_A_Update]
    ON [dbo].[LkupRoleDashboardObject];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupRoleDashboardObject_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupRoleDashboardObject_I_Delete]
    ON [dbo].[LkupRoleDashboardObject];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupRoleMenuAccess_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupRoleMenuAccess_A_Update]
    ON [dbo].[LkupRoleMenuAccess];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupRoleMenuAccess_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupRoleMenuAccess_I_Delete]
    ON [dbo].[LkupRoleMenuAccess];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupRoleSystemFunctionAccess_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupRoleSystemFunctionAccess_A_Update]
    ON [dbo].[LkupRoleSystemFunctionAccess];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupRoleSystemFunctionAccess_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupRoleSystemFunctionAccess_I_Delete]
    ON [dbo].[LkupRoleSystemFunctionAccess];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupSystemFunctionToOperation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupSystemFunctionToOperation_A_Update]
    ON [dbo].[LkupSystemFunctionToOperation];


GO
PRINT N'Altering Trigger [dbo].[TR_LkupSystemFunctionToOperation_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_LkupSystemFunctionToOperation_I_Delete]
    ON [dbo].[LkupSystemFunctionToOperation];


GO
PRINT N'Altering Trigger [dbo].[TR_locBaseReference_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_locBaseReference_A_Update]
    ON [dbo].[locBaseReference];


GO
PRINT N'Altering Trigger [dbo].[TR_locStringNameTranslation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_locStringNameTranslation_A_Update]
    ON [dbo].[locStringNameTranslation];


GO
PRINT N'Altering Trigger [dbo].[TR_MonitoringSessionToSampleType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_MonitoringSessionToSampleType_A_Update]
    ON [dbo].[MonitoringSessionToSampleType];


GO
PRINT N'Altering Trigger [dbo].[TR_MonitoringSessionToSampleType_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_MonitoringSessionToSampleType_I_Delete]
    ON [dbo].[MonitoringSessionToSampleType];


GO
PRINT N'Altering Trigger [dbo].[TR_OutbreakCaseContact_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_OutbreakCaseContact_A_Update]
    ON [dbo].[OutbreakCaseContact];


GO
PRINT N'Altering Trigger [dbo].[TR_OutbreakCaseContact_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_OutbreakCaseContact_I_Delete]
    ON [dbo].[OutbreakCaseContact];


GO
PRINT N'Altering Trigger [dbo].[TR_OutbreakCaseReport_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_OutbreakCaseReport_A_Update]
    ON [dbo].[OutbreakCaseReport];


GO
PRINT N'Altering Trigger [dbo].[TR_OutbreakCaseReport_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_OutbreakCaseReport_I_Delete]
    ON [dbo].[OutbreakCaseReport];


GO
PRINT N'Altering Trigger [dbo].[TR_OutbreakSpeciesParameter_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_OutbreakSpeciesParameter_A_Update]
    ON [dbo].[OutbreakSpeciesParameter];


GO
PRINT N'Altering Trigger [dbo].[TR_OutbreakSpeciesParameter_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_OutbreakSpeciesParameter_I_Delete]
    ON [dbo].[OutbreakSpeciesParameter];


GO
PRINT N'Altering Trigger [dbo].[TR_SecurityPolicyConfiguration_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_SecurityPolicyConfiguration_A_Update]
    ON [dbo].[SecurityPolicyConfiguration];


GO
PRINT N'Altering Trigger [dbo].[TR_SecurityPolicyConfiguration_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_SecurityPolicyConfiguration_I_Delete]
    ON [dbo].[SecurityPolicyConfiguration];


GO
PRINT N'Altering Trigger [dbo].[TR_SiteToSiteAccess_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_SiteToSiteAccess_A_Update]
    ON [dbo].[SiteToSiteAccess];


GO
PRINT N'Altering Trigger [dbo].[TR_SiteToSiteAccess_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_SiteToSiteAccess_I_Delete]
    ON [dbo].[SiteToSiteAccess];


GO
PRINT N'Altering Trigger [dbo].[TR_SystemPreference_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_SystemPreference_A_Update]
    ON [dbo].[SystemPreference];


GO
PRINT N'Altering Trigger [dbo].[TR_SystemPreference_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_SystemPreference_I_Delete]
    ON [dbo].[SystemPreference];


GO
PRINT N'Altering Trigger [dbo].[TR_tasAggregateFunction_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasAggregateFunction_A_Update]
    ON [dbo].[tasAggregateFunction];


GO
PRINT N'Altering Trigger [dbo].[TR_tasFieldSourceForTable_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasFieldSourceForTable_A_Update]
    ON [dbo].[tasFieldSourceForTable];


GO
PRINT N'Altering Trigger [dbo].[TR_tasglLayout_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasglLayout_A_Update]
    ON [dbo].[tasglLayout];


GO
PRINT N'Altering Trigger [dbo].[TR_tasglLayoutFolder_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasglLayoutFolder_A_Update]
    ON [dbo].[tasglLayoutFolder];


GO
PRINT N'Altering Trigger [dbo].[TR_tasglLayoutSearchField_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasglLayoutSearchField_A_Update]
    ON [dbo].[tasglLayoutSearchField];


GO
PRINT N'Altering Trigger [dbo].[TR_tasglLayoutToMapImage_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasglLayoutToMapImage_A_Update]
    ON [dbo].[tasglLayoutToMapImage];


GO
PRINT N'Altering Trigger [dbo].[TR_tasglMapImage_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasglMapImage_A_Update]
    ON [dbo].[tasglMapImage];


GO
PRINT N'Altering Trigger [dbo].[TR_tasglQuery_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasglQuery_A_Update]
    ON [dbo].[tasglQuery];


GO
PRINT N'Altering Trigger [dbo].[TR_tasglQueryConditionGroup_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasglQueryConditionGroup_A_Update]
    ON [dbo].[tasglQueryConditionGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_tasglQuerySearchField_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasglQuerySearchField_A_Update]
    ON [dbo].[tasglQuerySearchField];


GO
PRINT N'Altering Trigger [dbo].[TR_tasglQuerySearchFieldCondition_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasglQuerySearchFieldCondition_A_Update]
    ON [dbo].[tasglQuerySearchFieldCondition];


GO
PRINT N'Altering Trigger [dbo].[TR_tasglQuerySearchObject_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasglQuerySearchObject_A_Update]
    ON [dbo].[tasglQuerySearchObject];


GO
PRINT N'Altering Trigger [dbo].[TR_tasglView_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasglView_A_Update]
    ON [dbo].[tasglView];


GO
PRINT N'Altering Trigger [dbo].[TR_tasglViewBand_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasglViewBand_A_Update]
    ON [dbo].[tasglViewBand];


GO
PRINT N'Altering Trigger [dbo].[TR_tasglViewColumn_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasglViewColumn_A_Update]
    ON [dbo].[tasglViewColumn];


GO
PRINT N'Altering Trigger [dbo].[TR_tasLayout_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasLayout_A_Update]
    ON [dbo].[tasLayout];


GO
PRINT N'Altering Trigger [dbo].[TR_tasLayoutFolder_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasLayoutFolder_A_Update]
    ON [dbo].[tasLayoutFolder];


GO
PRINT N'Altering Trigger [dbo].[TR_tasLayoutSearchField_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasLayoutSearchField_A_Update]
    ON [dbo].[tasLayoutSearchField];


GO
PRINT N'Altering Trigger [dbo].[TR_tasLayoutToMapImage_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasLayoutToMapImage_A_Update]
    ON [dbo].[tasLayoutToMapImage];


GO
PRINT N'Altering Trigger [dbo].[TR_tasMainTableForObject_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasMainTableForObject_A_Update]
    ON [dbo].[tasMainTableForObject];


GO
PRINT N'Altering Trigger [dbo].[TR_tasMapImage_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasMapImage_A_Update]
    ON [dbo].[tasMapImage];


GO
PRINT N'Altering Trigger [dbo].[TR_tasQuery_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasQuery_A_Update]
    ON [dbo].[tasQuery];


GO
PRINT N'Altering Trigger [dbo].[TR_tasQueryConditionGroup_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasQueryConditionGroup_A_Update]
    ON [dbo].[tasQueryConditionGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_tasQuerySearchField_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasQuerySearchField_A_Update]
    ON [dbo].[tasQuerySearchField];


GO
PRINT N'Altering Trigger [dbo].[TR_tasQuerySearchFieldCondition_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasQuerySearchFieldCondition_A_Update]
    ON [dbo].[tasQuerySearchFieldCondition];


GO
PRINT N'Altering Trigger [dbo].[TR_tasQuerySearchObject_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasQuerySearchObject_A_Update]
    ON [dbo].[tasQuerySearchObject];


GO
PRINT N'Altering Trigger [dbo].[TR_tasSearchField_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasSearchField_A_Update]
    ON [dbo].[tasSearchField];


GO
PRINT N'Altering Trigger [dbo].[TR_tasSearchField_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tasSearchField_I_Delete]
    ON [dbo].[tasSearchField];


GO
PRINT N'Altering Trigger [dbo].[TR_tasSearchFieldsWithRelatedValues_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasSearchFieldsWithRelatedValues_A_Update]
    ON [dbo].[tasSearchFieldsWithRelatedValues];


GO
PRINT N'Altering Trigger [dbo].[TR_tasSearchFieldToFFParameter_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasSearchFieldToFFParameter_A_Update]
    ON [dbo].[tasSearchFieldToFFParameter];


GO
PRINT N'Altering Trigger [dbo].[TR_tasSearchFieldToPersonalDataGroup_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasSearchFieldToPersonalDataGroup_A_Update]
    ON [dbo].[tasSearchFieldToPersonalDataGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_tasSearchObject_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasSearchObject_A_Update]
    ON [dbo].[tasSearchObject];


GO
PRINT N'Altering Trigger [dbo].[TR_tasSearchObject_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tasSearchObject_I_Delete]
    ON [dbo].[tasSearchObject];


GO
PRINT N'Altering Trigger [dbo].[TR_tasSearchObjectToSearchObject_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasSearchObjectToSearchObject_A_Update]
    ON [dbo].[tasSearchObjectToSearchObject];


GO
PRINT N'Altering Trigger [dbo].[TR_tasSearchObjectToSystemFunction_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasSearchObjectToSystemFunction_A_Update]
    ON [dbo].[tasSearchObjectToSystemFunction];


GO
PRINT N'Altering Trigger [dbo].[TR_tasSearchTable_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasSearchTable_A_Update]
    ON [dbo].[tasSearchTable];


GO
PRINT N'Altering Trigger [dbo].[TR_tasSearchTableJoinRule_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasSearchTableJoinRule_A_Update]
    ON [dbo].[tasSearchTableJoinRule];


GO
PRINT N'Altering Trigger [dbo].[TR_tasView_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasView_A_Update]
    ON [dbo].[tasView];


GO
PRINT N'Altering Trigger [dbo].[TR_tasViewBand_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasViewBand_A_Update]
    ON [dbo].[tasViewBand];


GO
PRINT N'Altering Trigger [dbo].[TR_tasViewColumn_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tasViewColumn_A_Update]
    ON [dbo].[tasViewColumn];


GO
PRINT N'Altering Trigger [dbo].[TR_tauDataAuditEvent_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tauDataAuditEvent_I_Delete]
    ON [dbo].[tauDataAuditEvent];


GO
PRINT N'Altering Trigger [dbo].[TR_tdeDataExport_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tdeDataExport_A_Update]
    ON [dbo].[tdeDataExport];


GO
PRINT N'Altering Trigger [dbo].[TR_tdeDataExportDetail_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tdeDataExportDetail_A_Update]
    ON [dbo].[tdeDataExportDetail];


GO
PRINT N'Altering Trigger [dbo].[TR_tdeDataExportDiagnosis_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tdeDataExportDiagnosis_A_Update]
    ON [dbo].[tdeDataExportDiagnosis];


GO
PRINT N'Altering Trigger [dbo].[TR_tdeDataExportFFReference_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tdeDataExportFFReference_A_Update]
    ON [dbo].[tdeDataExportFFReference];


GO
PRINT N'Altering Trigger [dbo].[TR_tdeDataExportProblem_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tdeDataExportProblem_A_Update]
    ON [dbo].[tdeDataExportProblem];


GO
PRINT N'Altering Trigger [dbo].[TR_tflAggrCaseFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflAggrCaseFiltered_A_Update]
    ON [dbo].[tflAggrCaseFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_A_Update]
    ON [dbo].[tflBasicSyndromicSurveillanceAggregateHeaderFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tflBasicSyndromicSurveillanceFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflBasicSyndromicSurveillanceFiltered_A_Update]
    ON [dbo].[tflBasicSyndromicSurveillanceFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tflBatchTestFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflBatchTestFiltered_A_Update]
    ON [dbo].[tflBatchTestFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tflDataAuditEventFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflDataAuditEventFiltered_A_Update]
    ON [dbo].[tflDataAuditEventFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tflFarmFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflFarmFiltered_A_Update]
    ON [dbo].[tflFarmFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tflGeoLocationFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflGeoLocationFiltered_A_Update]
    ON [dbo].[tflGeoLocationFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tflHumanCaseFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflHumanCaseFiltered_A_Update]
    ON [dbo].[tflHumanCaseFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tflHumanFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflHumanFiltered_A_Update]
    ON [dbo].[tflHumanFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tflMonitoringSessionFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflMonitoringSessionFiltered_A_Update]
    ON [dbo].[tflMonitoringSessionFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tflNotificationFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflNotificationFiltered_A_Update]
    ON [dbo].[tflNotificationFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tflObservationFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflObservationFiltered_A_Update]
    ON [dbo].[tflObservationFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tflOutbreakFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflOutbreakFiltered_A_Update]
    ON [dbo].[tflOutbreakFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tflSite_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflSite_A_Update]
    ON [dbo].[tflSite];


GO
PRINT N'Altering Trigger [dbo].[TR_tflSite_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tflSite_I_Delete]
    ON [dbo].[tflSite];


GO
PRINT N'Altering Trigger [dbo].[TR_tflSiteGroup_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflSiteGroup_A_Update]
    ON [dbo].[tflSiteGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_tflSiteGroup_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tflSiteGroup_I_Delete]
    ON [dbo].[tflSiteGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_tflSiteGroupRelation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflSiteGroupRelation_A_Update]
    ON [dbo].[tflSiteGroupRelation];


GO
PRINT N'Altering Trigger [dbo].[TR_tflSiteToSiteGroup_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflSiteToSiteGroup_A_Update]
    ON [dbo].[tflSiteToSiteGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_tflTransferOutFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflTransferOutFiltered_A_Update]
    ON [dbo].[tflTransferOutFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tflVectorSurveillanceSessionFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflVectorSurveillanceSessionFiltered_A_Update]
    ON [dbo].[tflVectorSurveillanceSessionFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tflVetCaseFiltered_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tflVetCaseFiltered_A_Update]
    ON [dbo].[tflVetCaseFiltered];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbActivityParameters_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbActivityParameters_A_Update]
    ON [dbo].[tlbActivityParameters];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbActivityParameters_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbActivityParameters_I_Delete]
    ON [dbo].[tlbActivityParameters];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAggrCase_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAggrCase_A_Update]
    ON [dbo].[tlbAggrCase];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAggrCase_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAggrCase_I_Delete]
    ON [dbo].[tlbAggrCase];


GO
PRINT N'Altering Trigger [dbo].[trtAggrCaseReplicationUp]...';


GO
ENABLE TRIGGER [dbo].[trtAggrCaseReplicationUp]
    ON [dbo].[tlbAggrCase];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAggrDiagnosticActionMTX_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAggrDiagnosticActionMTX_A_Update]
    ON [dbo].[tlbAggrDiagnosticActionMTX];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAggrDiagnosticActionMTX_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAggrDiagnosticActionMTX_I_Delete]
    ON [dbo].[tlbAggrDiagnosticActionMTX];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAggrHumanCaseMTX_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAggrHumanCaseMTX_A_Update]
    ON [dbo].[tlbAggrHumanCaseMTX];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAggrHumanCaseMTX_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAggrHumanCaseMTX_I_Delete]
    ON [dbo].[tlbAggrHumanCaseMTX];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAggrMatrixVersionHeader_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAggrMatrixVersionHeader_A_Update]
    ON [dbo].[tlbAggrMatrixVersionHeader];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAggrMatrixVersionHeader_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAggrMatrixVersionHeader_I_Delete]
    ON [dbo].[tlbAggrMatrixVersionHeader];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAggrProphylacticActionMTX_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAggrProphylacticActionMTX_A_Update]
    ON [dbo].[tlbAggrProphylacticActionMTX];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAggrProphylacticActionMTX_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAggrProphylacticActionMTX_I_Delete]
    ON [dbo].[tlbAggrProphylacticActionMTX];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAggrSanitaryActionMTX_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAggrSanitaryActionMTX_A_Update]
    ON [dbo].[tlbAggrSanitaryActionMTX];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAggrSanitaryActionMTX_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAggrSanitaryActionMTX_I_Delete]
    ON [dbo].[tlbAggrSanitaryActionMTX];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAggrVetCaseMTX_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAggrVetCaseMTX_A_Update]
    ON [dbo].[tlbAggrVetCaseMTX];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAggrVetCaseMTX_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAggrVetCaseMTX_I_Delete]
    ON [dbo].[tlbAggrVetCaseMTX];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAnimal_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAnimal_A_Update]
    ON [dbo].[tlbAnimal];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAnimal_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAnimal_I_Delete]
    ON [dbo].[tlbAnimal];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAntimicrobialTherapy_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAntimicrobialTherapy_A_Update]
    ON [dbo].[tlbAntimicrobialTherapy];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbAntimicrobialTherapy_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbAntimicrobialTherapy_I_Delete]
    ON [dbo].[tlbAntimicrobialTherapy];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbBasicSyndromicSurveillance_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbBasicSyndromicSurveillance_A_Update]
    ON [dbo].[tlbBasicSyndromicSurveillance];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbBasicSyndromicSurveillance_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbBasicSyndromicSurveillance_I_Delete]
    ON [dbo].[tlbBasicSyndromicSurveillance];


GO
PRINT N'Altering Trigger [dbo].[trtBasicSyndromicSurveillanceReplicationUp]...';


GO
ENABLE TRIGGER [dbo].[trtBasicSyndromicSurveillanceReplicationUp]
    ON [dbo].[tlbBasicSyndromicSurveillance];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbBasicSyndromicSurveillanceAggregateDetail_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbBasicSyndromicSurveillanceAggregateDetail_A_Update]
    ON [dbo].[tlbBasicSyndromicSurveillanceAggregateDetail];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbBasicSyndromicSurveillanceAggregateDetail_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbBasicSyndromicSurveillanceAggregateDetail_I_Delete]
    ON [dbo].[tlbBasicSyndromicSurveillanceAggregateDetail];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbBasicSyndromicSurveillanceAggregateHeader_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbBasicSyndromicSurveillanceAggregateHeader_A_Update]
    ON [dbo].[tlbBasicSyndromicSurveillanceAggregateHeader];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbBasicSyndromicSurveillanceAggregateHeader_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbBasicSyndromicSurveillanceAggregateHeader_I_Delete]
    ON [dbo].[tlbBasicSyndromicSurveillanceAggregateHeader];


GO
PRINT N'Altering Trigger [dbo].[trtBasicSyndromicSurveillanceAggregateHeaderReplicationUp]...';


GO
ENABLE TRIGGER [dbo].[trtBasicSyndromicSurveillanceAggregateHeaderReplicationUp]
    ON [dbo].[tlbBasicSyndromicSurveillanceAggregateHeader];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbBatchTest_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbBatchTest_A_Update]
    ON [dbo].[tlbBatchTest];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbBatchTest_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbBatchTest_I_Delete]
    ON [dbo].[tlbBatchTest];


GO
PRINT N'Altering Trigger [dbo].[trtBatchTestReplicationUp]...';


GO
ENABLE TRIGGER [dbo].[trtBatchTestReplicationUp]
    ON [dbo].[tlbBatchTest];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbCampaign_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbCampaign_A_Update]
    ON [dbo].[tlbCampaign];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbCampaign_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbCampaign_I_Delete]
    ON [dbo].[tlbCampaign];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbChangeDiagnosisHistory_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbChangeDiagnosisHistory_A_Update]
    ON [dbo].[tlbChangeDiagnosisHistory];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbChangeDiagnosisHistory_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbChangeDiagnosisHistory_I_Delete]
    ON [dbo].[tlbChangeDiagnosisHistory];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbContactedCasePerson_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbContactedCasePerson_A_Update]
    ON [dbo].[tlbContactedCasePerson];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbContactedCasePerson_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbContactedCasePerson_I_Delete]
    ON [dbo].[tlbContactedCasePerson];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbDepartment_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbDepartment_A_Update]
    ON [dbo].[tlbDepartment];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbDepartment_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbDepartment_I_Delete]
    ON [dbo].[tlbDepartment];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbEmployee_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbEmployee_A_Update]
    ON [dbo].[tlbEmployee];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbEmployee_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbEmployee_I_Delete]
    ON [dbo].[tlbEmployee];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbEmployeeGroup_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbEmployeeGroup_A_Update]
    ON [dbo].[tlbEmployeeGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbEmployeeGroup_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbEmployeeGroup_I_Delete]
    ON [dbo].[tlbEmployeeGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbEmployeeGroupMember_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbEmployeeGroupMember_A_Update]
    ON [dbo].[tlbEmployeeGroupMember];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbEmployeeGroupMember_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbEmployeeGroupMember_I_Delete]
    ON [dbo].[tlbEmployeeGroupMember];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbFarm_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbFarm_A_Update]
    ON [dbo].[tlbFarm];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbFarm_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbFarm_I_Delete]
    ON [dbo].[tlbFarm];


GO
PRINT N'Altering Trigger [dbo].[trtFarmReplicationUp]...';


GO
ENABLE TRIGGER [dbo].[trtFarmReplicationUp]
    ON [dbo].[tlbFarm];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbFarmActual_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbFarmActual_A_Update]
    ON [dbo].[tlbFarmActual];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbFarmActual_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbFarmActual_I_Delete]
    ON [dbo].[tlbFarmActual];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbFreezer_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbFreezer_A_Update]
    ON [dbo].[tlbFreezer];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbFreezer_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbFreezer_I_Delete]
    ON [dbo].[tlbFreezer];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbFreezerSubdivision_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbFreezerSubdivision_A_Update]
    ON [dbo].[tlbFreezerSubdivision];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbFreezerSubdivision_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbFreezerSubdivision_I_Delete]
    ON [dbo].[tlbFreezerSubdivision];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbGeoLocation_A_Insert]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbGeoLocation_A_Insert]
    ON [dbo].[tlbGeoLocation];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbGeoLocation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbGeoLocation_A_Update]
    ON [dbo].[tlbGeoLocation];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbGeoLocation_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbGeoLocation_I_Delete]
    ON [dbo].[tlbGeoLocation];


GO
PRINT N'Altering Trigger [dbo].[trtGeoLocationReplicationUp]...';


GO
ENABLE TRIGGER [dbo].[trtGeoLocationReplicationUp]
    ON [dbo].[tlbGeoLocation];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbGeoLocationShared_A_Insert]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbGeoLocationShared_A_Insert]
    ON [dbo].[tlbGeoLocationShared];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbGeoLocationShared_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbGeoLocationShared_A_Update]
    ON [dbo].[tlbGeoLocationShared];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbGeoLocationShared_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbGeoLocationShared_I_Delete]
    ON [dbo].[tlbGeoLocationShared];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbGeoLocationSharedTranslation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbGeoLocationSharedTranslation_A_Update]
    ON [dbo].[tlbGeoLocationSharedTranslation];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbGeoLocationTranslation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbGeoLocationTranslation_A_Update]
    ON [dbo].[tlbGeoLocationTranslation];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbHerd_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbHerd_A_Update]
    ON [dbo].[tlbHerd];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbHerd_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbHerd_I_Delete]
    ON [dbo].[tlbHerd];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbHerdActual_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbHerdActual_A_Update]
    ON [dbo].[tlbHerdActual];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbHerdActual_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbHerdActual_I_Delete]
    ON [dbo].[tlbHerdActual];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbHuman_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbHuman_A_Update]
    ON [dbo].[tlbHuman];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbHuman_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbHuman_I_Delete]
    ON [dbo].[tlbHuman];


GO
PRINT N'Altering Trigger [dbo].[trtHumanReplicationUp]...';


GO
ENABLE TRIGGER [dbo].[trtHumanReplicationUp]
    ON [dbo].[tlbHuman];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbHumanActual_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbHumanActual_A_Update]
    ON [dbo].[tlbHumanActual];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbHumanActual_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbHumanActual_I_Delete]
    ON [dbo].[tlbHumanActual];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbHumanCase_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbHumanCase_A_Update]
    ON [dbo].[tlbHumanCase];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbHumanCase_ChangeArchiveDate]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbHumanCase_ChangeArchiveDate]
    ON [dbo].[tlbHumanCase];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbHumanCase_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbHumanCase_I_Delete]
    ON [dbo].[tlbHumanCase];


GO
PRINT N'Altering Trigger [dbo].[trtHumanCaseReplicationUp]...';


GO
ENABLE TRIGGER [dbo].[trtHumanCaseReplicationUp]
    ON [dbo].[tlbHumanCase];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMaterial_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMaterial_A_Update]
    ON [dbo].[tlbMaterial];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMaterial_Calculate]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMaterial_Calculate]
    ON [dbo].[tlbMaterial];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMaterial_ChangeArchiveDate]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMaterial_ChangeArchiveDate]
    ON [dbo].[tlbMaterial];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMaterial_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMaterial_I_Delete]
    ON [dbo].[tlbMaterial];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMonitoringSession_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMonitoringSession_A_Update]
    ON [dbo].[tlbMonitoringSession];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMonitoringSession_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMonitoringSession_I_Delete]
    ON [dbo].[tlbMonitoringSession];


GO
PRINT N'Altering Trigger [dbo].[trtMonitoringSessionReplicationUp]...';


GO
ENABLE TRIGGER [dbo].[trtMonitoringSessionReplicationUp]
    ON [dbo].[tlbMonitoringSession];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMonitoringSessionAction_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMonitoringSessionAction_A_Update]
    ON [dbo].[tlbMonitoringSessionAction];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMonitoringSessionAction_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMonitoringSessionAction_I_Delete]
    ON [dbo].[tlbMonitoringSessionAction];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMonitoringSessionSummary_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMonitoringSessionSummary_A_Update]
    ON [dbo].[tlbMonitoringSessionSummary];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMonitoringSessionSummary_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMonitoringSessionSummary_I_Delete]
    ON [dbo].[tlbMonitoringSessionSummary];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMonitoringSessionSummaryDiagnosis_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMonitoringSessionSummaryDiagnosis_A_Update]
    ON [dbo].[tlbMonitoringSessionSummaryDiagnosis];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMonitoringSessionSummaryDiagnosis_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMonitoringSessionSummaryDiagnosis_I_Delete]
    ON [dbo].[tlbMonitoringSessionSummaryDiagnosis];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMonitoringSessionSummarySample_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMonitoringSessionSummarySample_A_Update]
    ON [dbo].[tlbMonitoringSessionSummarySample];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMonitoringSessionSummarySample_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMonitoringSessionSummarySample_I_Delete]
    ON [dbo].[tlbMonitoringSessionSummarySample];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMonitoringSessionToDiagnosis_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMonitoringSessionToDiagnosis_A_Update]
    ON [dbo].[tlbMonitoringSessionToDiagnosis];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbMonitoringSessionToDiagnosis_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbMonitoringSessionToDiagnosis_I_Delete]
    ON [dbo].[tlbMonitoringSessionToDiagnosis];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbObservation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbObservation_A_Update]
    ON [dbo].[tlbObservation];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbObservation_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbObservation_I_Delete]
    ON [dbo].[tlbObservation];


GO
PRINT N'Altering Trigger [dbo].[trtObservationReplicationUp]...';


GO
ENABLE TRIGGER [dbo].[trtObservationReplicationUp]
    ON [dbo].[tlbObservation];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbOffice_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbOffice_A_Update]
    ON [dbo].[tlbOffice];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbOffice_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbOffice_I_Delete]
    ON [dbo].[tlbOffice];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbOutbreak_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbOutbreak_A_Update]
    ON [dbo].[tlbOutbreak];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbOutbreak_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbOutbreak_I_Delete]
    ON [dbo].[tlbOutbreak];


GO
PRINT N'Altering Trigger [dbo].[trtOutbreakReplicationUp]...';


GO
ENABLE TRIGGER [dbo].[trtOutbreakReplicationUp]
    ON [dbo].[tlbOutbreak];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbOutbreakCaseMonitoring_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbOutbreakCaseMonitoring_A_Update]
    ON [dbo].[tlbOutbreakCaseMonitoring];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbOutbreakCaseMonitoring_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbOutbreakCaseMonitoring_I_Delete]
    ON [dbo].[tlbOutbreakCaseMonitoring];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbOutbreakNote_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbOutbreakNote_A_Update]
    ON [dbo].[tlbOutbreakNote];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbOutbreakNote_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbOutbreakNote_I_Delete]
    ON [dbo].[tlbOutbreakNote];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbPensideTest_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbPensideTest_A_Update]
    ON [dbo].[tlbPensideTest];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbPensideTest_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbPensideTest_I_Delete]
    ON [dbo].[tlbPensideTest];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbPerson_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbPerson_A_Update]
    ON [dbo].[tlbPerson];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbPerson_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbPerson_I_Delete]
    ON [dbo].[tlbPerson];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbPostalCode_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbPostalCode_A_Update]
    ON [dbo].[tlbPostalCode];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbPostalCode_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbPostalCode_I_Delete]
    ON [dbo].[tlbPostalCode];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbReportForm_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbReportForm_A_Update]
    ON [dbo].[tlbReportForm];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbReportForm_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbReportForm_I_Delete]
    ON [dbo].[tlbReportForm];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbSpecies_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbSpecies_A_Update]
    ON [dbo].[tlbSpecies];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbSpecies_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbSpecies_I_Delete]
    ON [dbo].[tlbSpecies];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbSpeciesActual_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbSpeciesActual_A_Update]
    ON [dbo].[tlbSpeciesActual];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbSpeciesActual_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbSpeciesActual_I_Delete]
    ON [dbo].[tlbSpeciesActual];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbStatistic_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbStatistic_A_Update]
    ON [dbo].[tlbStatistic];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbStatistic_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbStatistic_I_Delete]
    ON [dbo].[tlbStatistic];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbStreet_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbStreet_A_Update]
    ON [dbo].[tlbStreet];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbStreet_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbStreet_I_Delete]
    ON [dbo].[tlbStreet];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbTestAmendmentHistory_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbTestAmendmentHistory_A_Update]
    ON [dbo].[tlbTestAmendmentHistory];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbTestAmendmentHistory_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbTestAmendmentHistory_I_Delete]
    ON [dbo].[tlbTestAmendmentHistory];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbTesting_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbTesting_A_Update]
    ON [dbo].[tlbTesting];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbTesting_ChangeArchiveDate]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbTesting_ChangeArchiveDate]
    ON [dbo].[tlbTesting];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbTesting_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbTesting_I_Delete]
    ON [dbo].[tlbTesting];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbTestValidation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbTestValidation_A_Update]
    ON [dbo].[tlbTestValidation];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbTestValidation_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbTestValidation_I_Delete]
    ON [dbo].[tlbTestValidation];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbTransferOUT_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbTransferOUT_A_Update]
    ON [dbo].[tlbTransferOUT];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbTransferOUT_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbTransferOUT_I_Delete]
    ON [dbo].[tlbTransferOUT];


GO
PRINT N'Altering Trigger [dbo].[trtTransferOutReplicationUp]...';


GO
ENABLE TRIGGER [dbo].[trtTransferOutReplicationUp]
    ON [dbo].[tlbTransferOUT];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbTransferOutMaterial_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbTransferOutMaterial_A_Update]
    ON [dbo].[tlbTransferOutMaterial];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbTransferOutMaterial_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbTransferOutMaterial_I_Delete]
    ON [dbo].[tlbTransferOutMaterial];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVaccination_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVaccination_A_Update]
    ON [dbo].[tlbVaccination];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVaccination_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVaccination_I_Delete]
    ON [dbo].[tlbVaccination];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVector_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVector_A_Update]
    ON [dbo].[tlbVector];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVector_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVector_I_Delete]
    ON [dbo].[tlbVector];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVectorSurveillanceSession_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVectorSurveillanceSession_A_Update]
    ON [dbo].[tlbVectorSurveillanceSession];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVectorSurveillanceSession_ChangeArchiveDate]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVectorSurveillanceSession_ChangeArchiveDate]
    ON [dbo].[tlbVectorSurveillanceSession];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVectorSurveillanceSession_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVectorSurveillanceSession_I_Delete]
    ON [dbo].[tlbVectorSurveillanceSession];


GO
PRINT N'Altering Trigger [dbo].[trtVectorSurveillanceSessionReplicationUp]...';


GO
ENABLE TRIGGER [dbo].[trtVectorSurveillanceSessionReplicationUp]
    ON [dbo].[tlbVectorSurveillanceSession];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVectorSurveillanceSessionSummary_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVectorSurveillanceSessionSummary_A_Update]
    ON [dbo].[tlbVectorSurveillanceSessionSummary];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVectorSurveillanceSessionSummary_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVectorSurveillanceSessionSummary_I_Delete]
    ON [dbo].[tlbVectorSurveillanceSessionSummary];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVectorSurveillanceSessionSummaryDiagnosis_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVectorSurveillanceSessionSummaryDiagnosis_A_Update]
    ON [dbo].[tlbVectorSurveillanceSessionSummaryDiagnosis];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVectorSurveillanceSessionSummaryDiagnosis_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVectorSurveillanceSessionSummaryDiagnosis_I_Delete]
    ON [dbo].[tlbVectorSurveillanceSessionSummaryDiagnosis];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVetCase_A_Insert]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVetCase_A_Insert]
    ON [dbo].[tlbVetCase];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVetCase_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVetCase_A_Update]
    ON [dbo].[tlbVetCase];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVetCase_ChangeArchiveDate]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVetCase_ChangeArchiveDate]
    ON [dbo].[tlbVetCase];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVetCase_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVetCase_I_Delete]
    ON [dbo].[tlbVetCase];


GO
PRINT N'Altering Trigger [dbo].[TR_VetCaseReplicationUp_A_Insert]...';


GO
ENABLE TRIGGER [dbo].[TR_VetCaseReplicationUp_A_Insert]
    ON [dbo].[tlbVetCase];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVetCaseDisplayDiagnosis_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVetCaseDisplayDiagnosis_A_Update]
    ON [dbo].[tlbVetCaseDisplayDiagnosis];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVetCaseDisplayDiagnosis_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVetCaseDisplayDiagnosis_I_Delete]
    ON [dbo].[tlbVetCaseDisplayDiagnosis];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVetCaseLog_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVetCaseLog_A_Update]
    ON [dbo].[tlbVetCaseLog];


GO
PRINT N'Altering Trigger [dbo].[TR_tlbVetCaseLog_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tlbVetCaseLog_I_Delete]
    ON [dbo].[tlbVetCaseLog];


GO
PRINT N'Altering Trigger [dbo].[TR_trtAttributeType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtAttributeType_A_Update]
    ON [dbo].[trtAttributeType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtBaseReference_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtBaseReference_A_Update]
    ON [dbo].[trtBaseReference];


GO
PRINT N'Altering Trigger [dbo].[TR_trtBaseReference_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtBaseReference_I_Delete]
    ON [dbo].[trtBaseReference];


GO
PRINT N'Altering Trigger [dbo].[TR_trtBaseReferenceAttribute_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtBaseReferenceAttribute_A_Update]
    ON [dbo].[trtBaseReferenceAttribute];


GO
PRINT N'Altering Trigger [dbo].[TR_trtBaseReferenceAttributeToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtBaseReferenceAttributeToCP_A_Update]
    ON [dbo].[trtBaseReferenceAttributeToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtBaseReferenceToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtBaseReferenceToCP_A_Update]
    ON [dbo].[trtBaseReferenceToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtBssAggregateColumns_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtBssAggregateColumns_A_Update]
    ON [dbo].[trtBssAggregateColumns];


GO
PRINT N'Altering Trigger [dbo].[TR_trtBssAggregateColumns_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtBssAggregateColumns_I_Delete]
    ON [dbo].[trtBssAggregateColumns];


GO
PRINT N'Altering Trigger [dbo].[TR_trtCaseClassification_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtCaseClassification_A_Update]
    ON [dbo].[trtCaseClassification];


GO
PRINT N'Altering Trigger [dbo].[TR_trtCollectionMethodForVectorType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtCollectionMethodForVectorType_A_Update]
    ON [dbo].[trtCollectionMethodForVectorType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtCollectionMethodForVectorType_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtCollectionMethodForVectorType_I_Delete]
    ON [dbo].[trtCollectionMethodForVectorType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtCollectionMethodForVectorTypeToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtCollectionMethodForVectorTypeToCP_A_Update]
    ON [dbo].[trtCollectionMethodForVectorTypeToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDerivativeForSampleType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDerivativeForSampleType_A_Update]
    ON [dbo].[trtDerivativeForSampleType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDerivativeForSampleType_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDerivativeForSampleType_I_Delete]
    ON [dbo].[trtDerivativeForSampleType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDerivativeForSampleTypeToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDerivativeForSampleTypeToCP_A_Update]
    ON [dbo].[trtDerivativeForSampleTypeToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDiagnosis_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDiagnosis_A_Update]
    ON [dbo].[trtDiagnosis];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDiagnosis_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDiagnosis_I_Delete]
    ON [dbo].[trtDiagnosis];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDiagnosisAgeGroup_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDiagnosisAgeGroup_A_Update]
    ON [dbo].[trtDiagnosisAgeGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDiagnosisAgeGroup_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDiagnosisAgeGroup_I_Delete]
    ON [dbo].[trtDiagnosisAgeGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDiagnosisAgeGroupToDiagnosis_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDiagnosisAgeGroupToDiagnosis_A_Update]
    ON [dbo].[trtDiagnosisAgeGroupToDiagnosis];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDiagnosisAgeGroupToDiagnosis_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDiagnosisAgeGroupToDiagnosis_I_Delete]
    ON [dbo].[trtDiagnosisAgeGroupToDiagnosis];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDiagnosisAgeGroupToDiagnosisToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDiagnosisAgeGroupToDiagnosisToCP_A_Update]
    ON [dbo].[trtDiagnosisAgeGroupToDiagnosisToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDiagnosisAgeGroupToStatisticalAgeGroup_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDiagnosisAgeGroupToStatisticalAgeGroup_A_Update]
    ON [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDiagnosisAgeGroupToStatisticalAgeGroup_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDiagnosisAgeGroupToStatisticalAgeGroup_I_Delete]
    ON [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_A_Update]
    ON [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroupToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDiagnosisToDiagnosisGroup_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDiagnosisToDiagnosisGroup_A_Update]
    ON [dbo].[trtDiagnosisToDiagnosisGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDiagnosisToDiagnosisGroup_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDiagnosisToDiagnosisGroup_I_Delete]
    ON [dbo].[trtDiagnosisToDiagnosisGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDiagnosisToDiagnosisGroupToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDiagnosisToDiagnosisGroupToCP_A_Update]
    ON [dbo].[trtDiagnosisToDiagnosisGroupToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtDiagnosisToGroupForReportType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtDiagnosisToGroupForReportType_A_Update]
    ON [dbo].[trtDiagnosisToGroupForReportType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtEventType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtEventType_A_Update]
    ON [dbo].[trtEventType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtEventType_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtEventType_I_Delete]
    ON [dbo].[trtEventType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtFFObjectForCustomReport_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtFFObjectForCustomReport_A_Update]
    ON [dbo].[trtFFObjectForCustomReport];


GO
PRINT N'Altering Trigger [dbo].[TR_trtFFObjectForCustomReport_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtFFObjectForCustomReport_I_Delete]
    ON [dbo].[trtFFObjectForCustomReport];


GO
PRINT N'Altering Trigger [dbo].[TR_trtFFObjectToDiagnosisForCustomReport_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtFFObjectToDiagnosisForCustomReport_A_Update]
    ON [dbo].[trtFFObjectToDiagnosisForCustomReport];


GO
PRINT N'Altering Trigger [dbo].[TR_trtFFObjectToDiagnosisForCustomReport_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtFFObjectToDiagnosisForCustomReport_I_Delete]
    ON [dbo].[trtFFObjectToDiagnosisForCustomReport];


GO
PRINT N'Altering Trigger [dbo].[TR_trtGISBaseReferenceAttribute_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtGISBaseReferenceAttribute_A_Update]
    ON [dbo].[trtGISBaseReferenceAttribute];


GO
PRINT N'Altering Trigger [dbo].[TR_trtGISObjectForCustomReport_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtGISObjectForCustomReport_A_Update]
    ON [dbo].[trtGISObjectForCustomReport];


GO
PRINT N'Altering Trigger [dbo].[TR_trtHACodeList_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtHACodeList_A_Update]
    ON [dbo].[trtHACodeList];


GO
PRINT N'Altering Trigger [dbo].[TR_trtHACodeList_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtHACodeList_I_Delete]
    ON [dbo].[trtHACodeList];


GO
PRINT N'Altering Trigger [dbo].[TR_trtLanguageToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtLanguageToCP_A_Update]
    ON [dbo].[trtLanguageToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtMaterialForDisease_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtMaterialForDisease_A_Update]
    ON [dbo].[trtMaterialForDisease];


GO
PRINT N'Altering Trigger [dbo].[TR_trtMaterialForDisease_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtMaterialForDisease_I_Delete]
    ON [dbo].[trtMaterialForDisease];


GO
PRINT N'Altering Trigger [dbo].[TR_trtMaterialForDiseaseToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtMaterialForDiseaseToCP_A_Update]
    ON [dbo].[trtMaterialForDiseaseToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtMatrixColumn_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtMatrixColumn_A_Update]
    ON [dbo].[trtMatrixColumn];


GO
PRINT N'Altering Trigger [dbo].[TR_trtMatrixType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtMatrixType_A_Update]
    ON [dbo].[trtMatrixType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtObjectTypeToObjectOperation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtObjectTypeToObjectOperation_A_Update]
    ON [dbo].[trtObjectTypeToObjectOperation];


GO
PRINT N'Altering Trigger [dbo].[TR_trtObjectTypeToObjectType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtObjectTypeToObjectType_A_Update]
    ON [dbo].[trtObjectTypeToObjectType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtPensideTestForDisease_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtPensideTestForDisease_A_Update]
    ON [dbo].[trtPensideTestForDisease];


GO
PRINT N'Altering Trigger [dbo].[TR_trtPensideTestForDisease_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtPensideTestForDisease_I_Delete]
    ON [dbo].[trtPensideTestForDisease];


GO
PRINT N'Altering Trigger [dbo].[TR_trtPensideTestForDiseaseToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtPensideTestForDiseaseToCP_A_Update]
    ON [dbo].[trtPensideTestForDiseaseToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtPensideTestTypeForVectorType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtPensideTestTypeForVectorType_A_Update]
    ON [dbo].[trtPensideTestTypeForVectorType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtPensideTestTypeForVectorType_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtPensideTestTypeForVectorType_I_Delete]
    ON [dbo].[trtPensideTestTypeForVectorType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtPensideTestTypeForVectorTypeToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtPensideTestTypeForVectorTypeToCP_A_Update]
    ON [dbo].[trtPensideTestTypeForVectorTypeToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtPensideTestTypeToTestResult_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtPensideTestTypeToTestResult_A_Update]
    ON [dbo].[trtPensideTestTypeToTestResult];


GO
PRINT N'Altering Trigger [dbo].[TR_trtPensideTestTypeToTestResult_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtPensideTestTypeToTestResult_I_Delete]
    ON [dbo].[trtPensideTestTypeToTestResult];


GO
PRINT N'Altering Trigger [dbo].[TR_trtPensideTestTypeToTestResultToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtPensideTestTypeToTestResultToCP_A_Update]
    ON [dbo].[trtPensideTestTypeToTestResultToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtProphilacticAction_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtProphilacticAction_A_Update]
    ON [dbo].[trtProphilacticAction];


GO
PRINT N'Altering Trigger [dbo].[TR_trtProphilacticAction_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtProphilacticAction_I_Delete]
    ON [dbo].[trtProphilacticAction];


GO
PRINT N'Altering Trigger [dbo].[TR_trtReferenceType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtReferenceType_A_Update]
    ON [dbo].[trtReferenceType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtReferenceType_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtReferenceType_I_Delete]
    ON [dbo].[trtReferenceType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtReportDiagnosisGroup_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtReportDiagnosisGroup_A_Update]
    ON [dbo].[trtReportDiagnosisGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_trtReportDiagnosisGroup_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtReportDiagnosisGroup_I_Delete]
    ON [dbo].[trtReportDiagnosisGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_trtReportRows_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtReportRows_A_Update]
    ON [dbo].[trtReportRows];


GO
PRINT N'Altering Trigger [dbo].[TR_trtReportRows_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtReportRows_I_Delete]
    ON [dbo].[trtReportRows];


GO
PRINT N'Altering Trigger [dbo].[TR_trtResource_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtResource_A_Update]
    ON [dbo].[trtResource];


GO
PRINT N'Altering Trigger [dbo].[TR_trtResource_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtResource_I_Delete]
    ON [dbo].[trtResource];


GO
PRINT N'Altering Trigger [dbo].[TR_trtResourceSet_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtResourceSet_A_Update]
    ON [dbo].[trtResourceSet];


GO
PRINT N'Altering Trigger [dbo].[TR_trtResourceSet_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtResourceSet_I_Delete]
    ON [dbo].[trtResourceSet];


GO
PRINT N'Altering Trigger [dbo].[TR_trtResourceSetHierarchy_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtResourceSetHierarchy_A_Update]
    ON [dbo].[trtResourceSetHierarchy];


GO
PRINT N'Altering Trigger [dbo].[TR_trtResourceSetHierarchy_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtResourceSetHierarchy_I_Delete]
    ON [dbo].[trtResourceSetHierarchy];


GO
PRINT N'Altering Trigger [dbo].[TR_trtResourceSetToResource_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtResourceSetToResource_A_Update]
    ON [dbo].[trtResourceSetToResource];


GO
PRINT N'Altering Trigger [dbo].[TR_trtResourceSetToResource_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtResourceSetToResource_I_Delete]
    ON [dbo].[trtResourceSetToResource];


GO
PRINT N'Altering Trigger [dbo].[TR_trtResourceSetTranslation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtResourceSetTranslation_A_Update]
    ON [dbo].[trtResourceSetTranslation];


GO
PRINT N'Altering Trigger [dbo].[TR_trtResourceSetTranslation_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtResourceSetTranslation_I_Delete]
    ON [dbo].[trtResourceSetTranslation];


GO
PRINT N'Altering Trigger [dbo].[TR_trtResourceTranslation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtResourceTranslation_A_Update]
    ON [dbo].[trtResourceTranslation];


GO
PRINT N'Altering Trigger [dbo].[TR_trtResourceTranslation_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtResourceTranslation_I_Delete]
    ON [dbo].[trtResourceTranslation];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSampleType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSampleType_A_Update]
    ON [dbo].[trtSampleType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSampleType_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSampleType_I_Delete]
    ON [dbo].[trtSampleType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSampleTypeForVectorType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSampleTypeForVectorType_A_Update]
    ON [dbo].[trtSampleTypeForVectorType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSampleTypeForVectorType_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSampleTypeForVectorType_I_Delete]
    ON [dbo].[trtSampleTypeForVectorType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSampleTypeForVectorTypeToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSampleTypeForVectorTypeToCP_A_Update]
    ON [dbo].[trtSampleTypeForVectorTypeToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSanitaryAction_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSanitaryAction_A_Update]
    ON [dbo].[trtSanitaryAction];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSanitaryAction_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSanitaryAction_I_Delete]
    ON [dbo].[trtSanitaryAction];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSpeciesContentInCustomReport_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSpeciesContentInCustomReport_A_Update]
    ON [dbo].[trtSpeciesContentInCustomReport];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSpeciesContentInCustomReport_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSpeciesContentInCustomReport_I_Delete]
    ON [dbo].[trtSpeciesContentInCustomReport];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSpeciesGroup_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSpeciesGroup_A_Update]
    ON [dbo].[trtSpeciesGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSpeciesGroup_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSpeciesGroup_I_Delete]
    ON [dbo].[trtSpeciesGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSpeciesToGroupForCustomReport_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSpeciesToGroupForCustomReport_A_Update]
    ON [dbo].[trtSpeciesToGroupForCustomReport];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSpeciesToGroupForCustomReport_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSpeciesToGroupForCustomReport_I_Delete]
    ON [dbo].[trtSpeciesToGroupForCustomReport];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSpeciesType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSpeciesType_A_Update]
    ON [dbo].[trtSpeciesType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSpeciesType_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSpeciesType_I_Delete]
    ON [dbo].[trtSpeciesType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSpeciesTypeToAnimalAge_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSpeciesTypeToAnimalAge_A_Update]
    ON [dbo].[trtSpeciesTypeToAnimalAge];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSpeciesTypeToAnimalAge_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSpeciesTypeToAnimalAge_I_Delete]
    ON [dbo].[trtSpeciesTypeToAnimalAge];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSpeciesTypeToAnimalAgeToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSpeciesTypeToAnimalAgeToCP_A_Update]
    ON [dbo].[trtSpeciesTypeToAnimalAgeToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtStatisticDataType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtStatisticDataType_A_Update]
    ON [dbo].[trtStatisticDataType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtStatisticDataType_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtStatisticDataType_I_Delete]
    ON [dbo].[trtStatisticDataType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtStringNameTranslation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtStringNameTranslation_A_Update]
    ON [dbo].[trtStringNameTranslation];


GO
PRINT N'Altering Trigger [dbo].[TR_trtStringNameTranslation_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtStringNameTranslation_I_Delete]
    ON [dbo].[trtStringNameTranslation];


GO
PRINT N'Altering Trigger [dbo].[TR_trtStringNameTranslationToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtStringNameTranslationToCP_A_Update]
    ON [dbo].[trtStringNameTranslationToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSystemFunction_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSystemFunction_A_Update]
    ON [dbo].[trtSystemFunction];


GO
PRINT N'Altering Trigger [dbo].[TR_trtSystemFunction_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtSystemFunction_I_Delete]
    ON [dbo].[trtSystemFunction];


GO
PRINT N'Altering Trigger [dbo].[TR_trtTestForDisease_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtTestForDisease_A_Update]
    ON [dbo].[trtTestForDisease];


GO
PRINT N'Altering Trigger [dbo].[TR_trtTestForDisease_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtTestForDisease_I_Delete]
    ON [dbo].[trtTestForDisease];


GO
PRINT N'Altering Trigger [dbo].[TR_trtTestForDiseaseToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtTestForDiseaseToCP_A_Update]
    ON [dbo].[trtTestForDiseaseToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtTestTypeForCustomReport_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtTestTypeForCustomReport_A_Update]
    ON [dbo].[trtTestTypeForCustomReport];


GO
PRINT N'Altering Trigger [dbo].[TR_trtTestTypeForCustomReport_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtTestTypeForCustomReport_I_Delete]
    ON [dbo].[trtTestTypeForCustomReport];


GO
PRINT N'Altering Trigger [dbo].[TR_trtTestTypeToTestResult_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtTestTypeToTestResult_A_Update]
    ON [dbo].[trtTestTypeToTestResult];


GO
PRINT N'Altering Trigger [dbo].[TR_trtTestTypeToTestResult_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtTestTypeToTestResult_I_Delete]
    ON [dbo].[trtTestTypeToTestResult];


GO
PRINT N'Altering Trigger [dbo].[TR_trtTestTypeToTestResultToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtTestTypeToTestResultToCP_A_Update]
    ON [dbo].[trtTestTypeToTestResultToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_trtVectorSubType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtVectorSubType_A_Update]
    ON [dbo].[trtVectorSubType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtVectorSubType_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtVectorSubType_I_Delete]
    ON [dbo].[trtVectorSubType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtVectorType_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_trtVectorType_A_Update]
    ON [dbo].[trtVectorType];


GO
PRINT N'Altering Trigger [dbo].[TR_trtVectorType_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtVectorType_I_Delete]
    ON [dbo].[trtVectorType];


GO
PRINT N'Altering Trigger [dbo].[TR_tstAggrSetting_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstAggrSetting_A_Update]
    ON [dbo].[tstAggrSetting];


GO
PRINT N'Altering Trigger [dbo].[TR_tstAggrSetting_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tstAggrSetting_I_Delete]
    ON [dbo].[tstAggrSetting];


GO
PRINT N'Altering Trigger [dbo].[TR_tstBarcodeLayout_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstBarcodeLayout_A_Update]
    ON [dbo].[tstBarcodeLayout];


GO
PRINT N'Altering Trigger [dbo].[TR_tstCheckTables_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstCheckTables_A_Update]
    ON [dbo].[tstCheckTables];


GO
PRINT N'Altering Trigger [dbo].[TR_tstCustomizationPackage_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstCustomizationPackage_A_Update]
    ON [dbo].[tstCustomizationPackage];


GO
PRINT N'Altering Trigger [dbo].[TR_tstCustomizationPackageSettings_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstCustomizationPackageSettings_A_Update]
    ON [dbo].[tstCustomizationPackageSettings];


GO
PRINT N'Altering Trigger [dbo].[TR_tstEvent_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstEvent_A_Update]
    ON [dbo].[tstEvent];


GO
PRINT N'Altering Trigger [dbo].[TR_tstEventActive_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstEventActive_A_Update]
    ON [dbo].[tstEventActive];


GO
PRINT N'Altering Trigger [dbo].[TR_tstEventClient_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstEventClient_A_Update]
    ON [dbo].[tstEventClient];


GO
PRINT N'Altering Trigger [dbo].[TR_tstEventSubscription_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstEventSubscription_A_Update]
    ON [dbo].[tstEventSubscription];


GO
PRINT N'Altering Trigger [dbo].[TR_tstGeoLocationFormat_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstGeoLocationFormat_A_Update]
    ON [dbo].[tstGeoLocationFormat];


GO
PRINT N'Altering Trigger [dbo].[TR_tstGlobalSiteOptions_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstGlobalSiteOptions_A_Update]
    ON [dbo].[tstGlobalSiteOptions];


GO
PRINT N'Altering Trigger [dbo].[TR_tstInvisibleFields_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstInvisibleFields_A_Update]
    ON [dbo].[tstInvisibleFields];


GO
PRINT N'Altering Trigger [dbo].[TR_tstInvisibleFieldsToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstInvisibleFieldsToCP_A_Update]
    ON [dbo].[tstInvisibleFieldsToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_tstLocalClient_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstLocalClient_A_Update]
    ON [dbo].[tstLocalClient];


GO
PRINT N'Altering Trigger [dbo].[TR_tstLocalConnectionContext_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstLocalConnectionContext_A_Update]
    ON [dbo].[tstLocalConnectionContext];


GO
PRINT N'Altering Trigger [dbo].[TR_tstLocalSamplesTestsPreferences_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstLocalSamplesTestsPreferences_A_Update]
    ON [dbo].[tstLocalSamplesTestsPreferences];


GO
PRINT N'Altering Trigger [dbo].[TR_tstLocalSiteOptions_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstLocalSiteOptions_A_Update]
    ON [dbo].[tstLocalSiteOptions];


GO
PRINT N'Altering Trigger [dbo].[TR_tstMandatoryFields_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstMandatoryFields_A_Update]
    ON [dbo].[tstMandatoryFields];


GO
PRINT N'Altering Trigger [dbo].[TR_tstMandatoryFieldsToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstMandatoryFieldsToCP_A_Update]
    ON [dbo].[tstMandatoryFieldsToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_tstNextNumbers_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstNextNumbers_A_Update]
    ON [dbo].[tstNextNumbers];


GO
PRINT N'Altering Trigger [dbo].[TR_tstNotification_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstNotification_A_Update]
    ON [dbo].[tstNotification];


GO
PRINT N'Altering Trigger [dbo].[TR_tstNotification_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tstNotification_I_Delete]
    ON [dbo].[tstNotification];


GO
PRINT N'Altering Trigger [dbo].[trtNotificationReplicationUp]...';


GO
ENABLE TRIGGER [dbo].[trtNotificationReplicationUp]
    ON [dbo].[tstNotification];


GO
PRINT N'Altering Trigger [dbo].[TR_tstNotificationShared_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstNotificationShared_A_Update]
    ON [dbo].[tstNotificationShared];


GO
PRINT N'Altering Trigger [dbo].[TR_tstNotificationStatus_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstNotificationStatus_A_Update]
    ON [dbo].[tstNotificationStatus];


GO
PRINT N'Altering Trigger [dbo].[TR_tstObjectAccess_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstObjectAccess_A_Update]
    ON [dbo].[tstObjectAccess];


GO
PRINT N'Altering Trigger [dbo].[TR_tstObjectAccess_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tstObjectAccess_I_Delete]
    ON [dbo].[tstObjectAccess];


GO
PRINT N'Altering Trigger [dbo].[TR_tstPersonalDataGroup_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstPersonalDataGroup_A_Update]
    ON [dbo].[tstPersonalDataGroup];


GO
PRINT N'Altering Trigger [dbo].[TR_tstPersonalDataGroupToCP_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstPersonalDataGroupToCP_A_Update]
    ON [dbo].[tstPersonalDataGroupToCP];


GO
PRINT N'Altering Trigger [dbo].[TR_tstRayonToReportSite_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstRayonToReportSite_A_Update]
    ON [dbo].[tstRayonToReportSite];


GO
PRINT N'Altering Trigger [dbo].[TR_tstSecurityAudit_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstSecurityAudit_A_Update]
    ON [dbo].[tstSecurityAudit];


GO
PRINT N'Altering Trigger [dbo].[TR_tstSecurityConfiguration_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstSecurityConfiguration_A_Update]
    ON [dbo].[tstSecurityConfiguration];


GO
PRINT N'Altering Trigger [dbo].[TR_tstSecurityConfiguration_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tstSecurityConfiguration_I_Delete]
    ON [dbo].[tstSecurityConfiguration];


GO
PRINT N'Altering Trigger [dbo].[TR_tstSecurityConfigurationAlphabet_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstSecurityConfigurationAlphabet_A_Update]
    ON [dbo].[tstSecurityConfigurationAlphabet];


GO
PRINT N'Altering Trigger [dbo].[TR_tstSecurityConfigurationAlphabet_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tstSecurityConfigurationAlphabet_I_Delete]
    ON [dbo].[tstSecurityConfigurationAlphabet];


GO
PRINT N'Altering Trigger [dbo].[TR_tstSecurityConfigurationAlphabetParticipation_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstSecurityConfigurationAlphabetParticipation_A_Update]
    ON [dbo].[tstSecurityConfigurationAlphabetParticipation];


GO
PRINT N'Altering Trigger [dbo].[TR_tstSecurityConfigurationAlphabetParticipation_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tstSecurityConfigurationAlphabetParticipation_I_Delete]
    ON [dbo].[tstSecurityConfigurationAlphabetParticipation];


GO
PRINT N'Altering Trigger [dbo].[TR_tstSite_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstSite_A_Update]
    ON [dbo].[tstSite];


GO
PRINT N'Altering Trigger [dbo].[TR_tstSite_CopyToTfl]...';


GO
ENABLE TRIGGER [dbo].[TR_tstSite_CopyToTfl]
    ON [dbo].[tstSite];


GO
PRINT N'Altering Trigger [dbo].[TR_tstSite_DeleteFromTfl]...';


GO
ENABLE TRIGGER [dbo].[TR_tstSite_DeleteFromTfl]
    ON [dbo].[tstSite];


GO
PRINT N'Altering Trigger [dbo].[TR_tstUserTable_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstUserTable_A_Update]
    ON [dbo].[tstUserTable];


GO
PRINT N'Altering Trigger [dbo].[TR_tstUserTable_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tstUserTable_I_Delete]
    ON [dbo].[tstUserTable];


GO
PRINT N'Altering Trigger [dbo].[TR_tstUserTableLocal_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstUserTableLocal_A_Update]
    ON [dbo].[tstUserTableLocal];


GO
PRINT N'Altering Trigger [dbo].[TR_tstUserTableOldPassword_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstUserTableOldPassword_A_Update]
    ON [dbo].[tstUserTableOldPassword];


GO
PRINT N'Altering Trigger [dbo].[TR_tstUserTableOldPassword_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_tstUserTableOldPassword_I_Delete]
    ON [dbo].[tstUserTableOldPassword];


GO
PRINT N'Altering Trigger [dbo].[TR_tstUserTicket_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstUserTicket_A_Update]
    ON [dbo].[tstUserTicket];


GO
PRINT N'Altering Trigger [dbo].[TR_tstVersionCompare_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_tstVersionCompare_A_Update]
    ON [dbo].[tstVersionCompare];


GO
PRINT N'Altering Trigger [dbo].[TR_updRunningApps_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_updRunningApps_A_Update]
    ON [dbo].[updRunningApps];


GO
PRINT N'Altering Trigger [dbo].[TR_updUpdateBlock_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_updUpdateBlock_A_Update]
    ON [dbo].[updUpdateBlock];


GO
PRINT N'Altering Trigger [dbo].[TR_UserAccess_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_UserAccess_A_Update]
    ON [dbo].[UserAccess];


GO
PRINT N'Altering Trigger [dbo].[TR_UserAccess_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_UserAccess_I_Delete]
    ON [dbo].[UserAccess];


GO
PRINT N'Altering Trigger [dbo].[TR_UserPreference_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_UserPreference_A_Update]
    ON [dbo].[UserPreference];


GO
PRINT N'Altering Trigger [dbo].[TR_UserPreference_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_UserPreference_I_Delete]
    ON [dbo].[UserPreference];


GO
PRINT N'Altering Trigger [dbo].[TR_VetDiseaseReportRelationship_A_Update]...';


GO
ENABLE TRIGGER [dbo].[TR_VetDiseaseReportRelationship_A_Update]
    ON [dbo].[VetDiseaseReportRelationship];


GO
PRINT N'Refreshing Function [dbo].[FN_ADMIN_STAT_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[FN_ADMIN_STAT_GetList]';


GO
PRINT N'Refreshing Function [dbo].[fn_Statistic_SelectList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_Statistic_SelectList]';


GO
PRINT N'Refreshing Function [dbo].[fn_GetRayonStatInfo]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fn_GetRayonStatInfo]';


GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_TemplateDeterminantValues_GET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_TemplateDeterminantValues_GET
-- Description: Return list of Template Determinant Values.
--          
-- Revision History:
-- Name            Date       Change
-- --------------- ---------- --------------------------------------------------------------------
-- Kishore Kodru    11/28/2018 Initial release for new API.
-- Doug Albanese	03/21/2023 Swapped out the language code function
--
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_TemplateDeterminantValues_GET]
(
	@LangID NVARCHAR(50) = NULL
	,@idfsFormTemplate BIGINT = NULL	
)
AS
BEGIN	
	SET NOCOUNT ON;

	IF (@LangID IS NULL)
		SET @LangID = 'en';
	DECLARE 
		@langid_int BIGINT,
		@returnCode BIGINT,
		@returnMsg  NVARCHAR(MAX) 

	BEGIN TRY
		BEGIN  TRANSACTION;
		SET @langid_int = dbo.FN_GBL_LanguageCode_GET(@LangID);

		SELECT DV.idfDeterminantValue
			   ,FT.idfsFormTemplate
		       ,FT.idfsFormType
		       ,ISNULL(DV.idfsBaseReference, DV.idfsGISBaseReference) AS [DeterminantValue]
		       ,CASE WHEN (DV.idfsBaseReference IS NOT NULL)
					 THEN (SELECT [strDefault]
						   FROM dbo.trtBaseReference
						   WHERE [idfsBaseReference] = DV.idfsBaseReference
								 AND [intRowStatus] = 0)
		       		 ELSE
		       			  (SELECT [strDefault]
						   FROM dbo.gisBaseReference
						   WHERE [idfsGISBaseReference] = DV.idfsGISBaseReference
								 AND DV.intRowStatus = 0)
		       		END AS [DeterminantDefaultName]
		       ,CASE WHEN (DV.idfsBaseReference IS NOT NULL)
					 THEN (SELECT [strTextString]
						   FROM dbo.[trtStringNameTranslation]
						   WHERE [idfsBaseReference] = DV.idfsBaseReference
								 AND idfsLanguage = @langid_int 
								 AND [intRowStatus] = 0)
		       		 ELSE
		       			   (SELECT [strTextString]
						    FROM dbo.[gisStringNameTranslation]
						    WHERE [idfsGISBaseReference] = DV.idfsGISBaseReference
							      AND idfsLanguage = @langid_int
							      AND intRowStatus = 0)
		       		 END AS [DeterminantNationalName]			       		
		       ,[idfsBaseReference]
		       ,[idfsGISBaseReference]
		       ,CASE WHEN (DV.idfsBaseReference IS NOT NULL)
					 THEN (SELECT idfsReferenceType
						   FROM dbo.trtBaseReference
						   WHERE [idfsBaseReference] = DV.idfsBaseReference
						         AND [intRowStatus] = 0)
		       		 ELSE
		       			  (SELECT idfsGISReferenceType
						   FROM dbo.gisBaseReference
						   WHERE [idfsGISBaseReference] = DV.idfsGISBaseReference
								 AND DV.intRowStatus = 0)
		       		 END AS [DeterminantType]
		       ,CASE WHEN (DV.idfsBaseReference IS NOT NULL)
					 THEN (SELECT strReferenceTypeName
						   FROM dbo.trtReferenceType
						   WHERE [idfsReferenceType] IN (SELECT TOP 1 idfsReferenceType
														 FROM dbo.trtBaseReference
														 WHERE [idfsBaseReference] = DV.idfsBaseReference
														       AND [intRowStatus] = 0)
								 AND [intRowStatus] = 0)
		       		 ELSE 
						  (SELECT strGISReferenceTypeName
						   FROM dbo.gisReferenceType
						   WHERE [idfsGISReferenceType] IN (SELECT TOP 1 idfsGISReferenceType
															FROM dbo.gisBaseReference
															WHERE [idfsGISBaseReference] = DV.idfsGISBaseReference
																  AND DV.intRowStatus = 0)
								 AND intRowStatus = 0)
		       		 END AS [DeterminantTypeDefaultName]
		       ,ISNULL(CASE WHEN (DV.idfsBaseReference IS NOT NULL)
							THEN (SELECT [strTextString]
								  FROM dbo.[trtStringNameTranslation]
								  WHERE idfsLanguage = @langid_int
										AND [idfsBaseReference] IN (SELECT TOP 1 idfsReferenceType
																	FROM dbo.trtReferenceType
																	WHERE [idfsReferenceType] IN (SELECT TOP 1 idfsReferenceType
																								  FROM dbo.trtBaseReference
																								  WHERE [idfsBaseReference] = DV.idfsBaseReference
																										AND [intRowStatus] = 0)
																		  AND [intRowStatus] = 0)
										AND [intRowStatus] = 0)
		       				 ELSE 
								 (SELECT strTextString
								  FROM dbo.trtStringNameTranslation
								  WHERE idfsBaseReference = 10003001
										AND idfsLanguage = @langid_int
										AND [intRowStatus] = 0)
		       				 END 
		       	,CASE WHEN (DV.idfsBaseReference IS NOT NULL)
					  THEN (SELECT strReferenceTypeName
							FROM dbo.trtReferenceType
							WHERE [idfsReferenceType] IN (SELECT TOP 1 idfsReferenceType
														  FROM dbo.trtBaseReference
														  WHERE [idfsBaseReference] = DV.idfsBaseReference
																AND [intRowStatus] = 0) 
								  AND [intRowStatus] = 0)
		       		  ELSE
		       			   (SELECT strGISReferenceTypeName
						    FROM dbo.gisReferenceType
							WHERE idfsGISReferenceType = 19000001
								  AND intRowStatus = 0)
		       		  END) AS [DeterminantTypeNationalName]
		FROM dbo.[ffFormTemplate] FT
		INNER JOIN dbo.[ffDeterminantValue] DV
		ON FT.idfsFormTemplate = DV.idfsFormTemplate
		   AND DV.[intRowStatus]=0 
		WHERE ((FT.idfsFormTemplate = @idfsFormTemplate)
			   OR (@idfsFormTemplate IS NULL))				
			  AND FT.[intRowStatus] = 0
		ORDER BY [DeterminantNationalName]

		COMMIT TRANSACTION;
	END TRY 
	BEGIN CATCH   
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;

		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_BASEREFERENCE_DEL]...';


GO
-- ================================================================================================
-- Name: USP_REF_BASEREFERENCE_DEL
-- Description:	Removes a base reference
--                      
-- Author: Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		02/10/2019 Initial release.
-- Ricky Moss		02/12/2019 Returns values.
-- LAMONT MITCHELL	06/17/2021 PROHIBITED DELETION FOR REFERENCE TYPES THAT ARE FOUND BASED ON 
--                             USE CASE DOCUMENT SAUC40
-- Stephen Long     10/26/2022 Added site alert for reference table change event.
--
-- exec USP_REF_BASEREFERENCE_DEL 55540680000289
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_BASEREFERENCE_DEL]
(
    @idfsBaseReference BIGINT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
declare @idfUserId BIGINT =NULL;
declare @idfSiteId BIGINT = NULL;
declare @idfsDataAuditEventType bigint = 10016002;
declare @idfsObjectType bigint = 10017042;
declare @idfObject bigint = @idfsBaseReference;
declare @idfObjectTable_tlbTestMatrix bigint = 75820000000;
declare @idfDataAuditEvent bigint= NULL; 
-- Get and Set UserId and SiteId
select @idfUserId =userInfo.UserId, @idfSiteId=UserInfo.SiteId from dbo.FN_UserSiteInformation(@AuditUserName) userInfo
    BEGIN TRY
        DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
                @ReturnCode BIGINT = 0, 
                @Duplicate BIT = 0;
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );

        SELECT @Duplicate =
        (
            SELECT Top (1)
                Case
                    WHEN rt.idfsReferenceType = 19000001 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000003 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000004 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000007 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000012 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000013 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000015 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000016 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000017 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000018 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000020 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000023 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000025 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000028 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000030 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000031 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000034 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000036 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000039 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000040 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000041 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000042 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000043 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000049 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000057 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000059 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000063 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000067 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000068 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000076 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000080 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000081 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000082 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000085 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000089 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000091 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000093 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000094 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000095 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000100 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000102 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000103 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000106 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000108 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000110 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000111 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000112 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000113 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000114 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000115 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000117 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000128 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000129 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000133 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000151 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000155 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000158 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000160 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000163 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000504 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000512 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000513 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000514 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000526 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000527 THEN
                        1
                    WHEN rt.idfsReferenceType IS NULL THEN
                        0
                    ELSE
                        0
                END
            FROM dbo.trtReferenceType rt
                JOIN dbo.trtBaseReference br
                    ON rt.idfsReferenceType = br.idfsReferenceType
            WHERE br.idfsBaseReference = @idfsBaseReference
        )

        IF @Duplicate = 0
        BEGIN
            UPDATE dbo.trtBaseReference
            SET intRowStatus = 1, 
                AuditUpdateUser = @AuditUserName, 
                AuditUpdateDTM = GETDATE()
            WHERE idfsBaseReference = @idfsBaseReference;

			EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbTestMatrix, @idfDataAuditEvent OUTPUT
			insert into dbo.tauDataAuditDetailUpdate (idfDataAuditEvent, idfObjectTable, idfColumn, idfObject, idfObjectDetail, strOldValue, strNewValue)
			values (@idfDataAuditEvent,@idfObjectTable_tlbTestMatrix, 4578170000000,@idfObject,null,0,1) 

            UPDATE dbo.trtStringNameTranslation
            SET intRowStatus = 1, 
                AuditUpdateUser = @AuditUserName, 
                AuditUpdateDTM = GETDATE()
            WHERE idfsBaseReference = @idfsBaseReference;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                           @EventTypeId,
                                           @UserId,
                                           @idfsBaseReference,
                                           NULL,
                                           @SiteId,
                                           NULL,
                                           @SiteId,
                                           @LocationId,
                                           @AuditUserName;
        END
        ELSE
        BEGIN
            SELECT @ReturnMessage = 'CAN NOT DELETE';
        END
        SELECT @ReturnCode 'ReturnCode',
               @ReturnMessage 'ReturnMessage';
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_DEPARTMENT_SET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_DEPARTMENT_SET
--
-- Description: Adds or updates a department in an organization.
-- Author: Ricky Moss
-- 
-- Change Log:
-- Name 				Date       Description
-- -------------------- ---------- ---------------------------------------------------------------
-- Ricky Moss			12/27/2019 Initial Release
-- Ricky Moss			01/03/2020 Refactored to check Department Name existence
-- Ann Xiong		    11/20/2020 Modified to insert NationalName in trtStringNameTranslation
-- Mark Wilson			08/10/2021 Updated to use E7 artifacts
-- Stephen Long         09/01/2021 Added order and row status parameters and added organization 
--                                 ID to the duplicate department check.  Duplicate check will 
--                                 be performed on both insert and update.
-- Ann Xiong			02/16/2023 Implemented Data Audit
-- Ann Xiong			03/28/2023 Called USSP_GBL_BASE_REFERENCE_SET instead of USP_GBL_BaseReference_SET to use its data auditing
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_ADMIN_Department_Set]
		@LanguageID = N'en-US',
		@DepartmentID = NULL,
		@OrganizationID = 48120000000,
		@DefaultName = N'DEP199',
		@NationalName = N'DEP1100',
		@CountryID = NULL,
		@UserName = N'rykermase',
		@RowAction = NULL - values are R for read, I for insert, U for update and D for delete.

SELECT	'Return Value' = @return_value

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_DEPARTMENT_SET] (
	@LanguageID NVARCHAR(50)
	,@DepartmentID BIGINT = NULL
	,@DefaultName NVARCHAR(200)
	,@NationalName NVARCHAR(200)
	,@OrganizationID BIGINT
	,@DepartmentNameTypeID BIGINT
	,@Order INT = 0
	,@UserName VARCHAR(100) = NULL
	,@RowStatus INT = 0
	)
AS
BEGIN
	DECLARE @ReturnMessage VARCHAR(MAX) = 'SUCCESS';
	DECLARE @ReturnCode BIGINT = 0;

	--Data Audit--
	declare @idfUserId BIGINT = NULL;
	declare @idfSiteId BIGINT = NULL;
	declare @idfsDataAuditEventType bigint = NULL;
	declare @idfsObjectType bigint = 10017016;                         -- Department
	declare @idfObject bigint = @DepartmentID;
	declare @idfObjectTable_tlbDepartment bigint = 50815890000000;
	declare @idfDataAuditEvent bigint= NULL;
	declare @idfObjectTable_trtBaseReference bigint = 75820000000;
	declare @idfObjectTable_trtStringNameTranslation bigint = 75990000000;

    DECLARE @tlbDepartment_BeforeEdit TABLE
    (
        DepartmentID BIGINT,
        DepartmentNameBaseReferenceID BIGINT,
        OrganizationID BIGINT
    );
    DECLARE @tlbDepartment_AfterEdit TABLE
    (
        DepartmentID BIGINT,
        DepartmentNameBaseReferenceID BIGINT,
        OrganizationID BIGINT
    );

	-- Get and Set UserId and SiteId
	select @idfUserId =userInfo.UserId, @idfSiteId=UserInfo.SiteId from dbo.FN_UserSiteInformation(@UserName) userInfo

	--Data Audit--

	BEGIN TRY
		IF @RowStatus = 1 -- Soft Delete
		BEGIN
			IF @DepartmentNameTypeID IS NULL
			BEGIN
				SELECT @DepartmentNameTypeID = idfsDepartmentName
				FROM dbo.tlbDepartment
				WHERE idfDepartment = @DepartmentID;
			END

			--Data Audit

			-- tauDataAuditEvent Event Type - Delete
			set @idfsDataAuditEventType =10016002;

			-- insert record into tauDataAuditEvent
			EXEC USSP_GBL_DataAuditEvent_GET @idfUserID,@idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbDepartment, @idfDataAuditEvent OUTPUT

			--Data Audit--

			UPDATE dbo.tlbDepartment
			SET intRowStatus = @RowStatus
				,AuditUpdateDTM = GETDATE()
				,AuditUpdateUser = @UserName
			WHERE idfDepartment = @DepartmentID;

            -- Data audit
			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
				SELECT @idfDataAuditEvent, @idfObjectTable_tlbDepartment, @idfObject
            -- End data audit

			UPDATE dbo.trtBaseReference
			SET intRowStatus = @RowStatus
			WHERE idfsBaseReference = @DepartmentNameTypeID
				AND intRowStatus = 0;

            -- Data audit
			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
				SELECT @idfDataAuditEvent, @idfObjectTable_trtBaseReference, @DepartmentNameTypeID
            -- End data audit

			UPDATE dbo.trtStringNameTranslation
			SET intRowStatus = @RowStatus
			WHERE idfsBaseReference = @DepartmentNameTypeID;

            -- Data audit
			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
				SELECT @idfDataAuditEvent, @idfObjectTable_trtStringNameTranslation, @DepartmentNameTypeID
            -- End data audit
		END
		ELSE
		BEGIN
			IF (
					SELECT COUNT(b.idfsReference)
					FROM dbo.FN_GBL_ReferenceRepair_GET(@LanguageID, 19000164) b
					INNER JOIN dbo.tlbDepartment d ON d.idfsDepartmentName = b.idfsReference
					WHERE b.strDefault = @DefaultName
						AND d.intRowStatus = 0
						AND d.idfOrganization = @OrganizationID
						AND ((d.idfDepartment <> @DepartmentID AND @DepartmentID IS NOT NULL AND @DepartmentID > 0) --Update
						OR (@DepartmentID IS NULL OR @DepartmentID < 0)) --Insert
					) > 0
			BEGIN
				SELECT @ReturnMessage = 'DOES EXIST';
			END

			IF @ReturnMessage <> 'DOES EXIST'
			BEGIN
				IF @DepartmentID IS NULL
					OR @DepartmentID < 0
				BEGIN
					IF (
							UPPER(@LanguageID) = 'EN-US'
							AND ISNULL(@DefaultName, N'') = N''
							)
					BEGIN
						SET @DefaultName = @NationalName;
					END

					--Data Audit--
					-- tauDataAuditEvent Event Type - Create 
					set @idfsDataAuditEventType =10016001;
					-- insert record into tauDataAuditEvent - 
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@DepartmentID, @idfObjectTable_tlbDepartment, @idfDataAuditEvent OUTPUT
					--Data Audit--

                    EXECUTE dbo.USSP_GBL_BASE_REFERENCE_SET @DepartmentNameTypeID OUTPUT,
                                                            19000164,
                                                            @LanguageID,
                                                            @DefaultName,
                                                            @NationalName,
                                                            0,
                                                            @Order,
                                                            0,
                                                            @UserName,
                                                            @idfDataAuditEvent,
                                                            NULL;

					EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbDepartment'
						,@DepartmentID OUTPUT;

					INSERT INTO dbo.tlbDepartment (
						idfDepartment
						,idfsDepartmentName
						,idfOrganization
						,strReservedAttribute
						,intRowStatus
						,rowguid
						,SourceSystemNameID
						,SourceSystemKeyValue
						,AuditCreateUser
						,AuditCreateDTM
						,AuditUpdateUser
						,AuditUpdateDTM
						)
					VALUES (
						@DepartmentID
						,@DepartmentNameTypeID
						,@OrganizationID
						,dbo.FN_GBL_DATACHANGE_INFO(@UserName)
						,0
						,NEWID()
						,10519001
						,N'[{"idfDepartment":' + CAST(@DepartmentID AS NVARCHAR(300)) + '}]'
						,@UserName
						,GETDATE()
						,@UserName
						,GETDATE()
						);

					--Data Audit--
					INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject )
						values ( @idfDataAuditEvent, @idfObjectTable_tlbDepartment, @DepartmentID)
					--Data Audit--

				END
				ELSE
				BEGIN
					SELECT @DepartmentNameTypeID = (
							SELECT idfsDepartmentName
							FROM dbo.tlbDepartment
							WHERE idfDepartment = @DepartmentID
							);

                    -- Data audit
			        --  tauDataAuditEvent  Event Type- Edit 
			        set @idfsDataAuditEventType =10016003;
			        -- insert record into tauDataAuditEvent - 
			        EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbDepartment, @idfDataAuditEvent OUTPUT
                    -- Data audit

                    EXECUTE dbo.USSP_GBL_BASE_REFERENCE_SET @DepartmentNameTypeID OUTPUT,
                                                            19000164,
                                                            @LanguageID,
                                                            @DefaultName,
                                                            @NationalName,
                                                            0,
                                                            @Order,
                                                            0,
                                                            @UserName,
                                                            @idfDataAuditEvent,
                                                            NULL;

                    -- Data audit
                    INSERT INTO @tlbDepartment_BeforeEdit
                    (
                        DepartmentID,
                        DepartmentNameBaseReferenceID,
                        OrganizationID
                    )
                    SELECT idfDepartment,
                           idfsDepartmentName,
                           idfOrganization
                    FROM dbo.tlbDepartment
                    WHERE idfDepartment = @DepartmentID;
                    -- End data audit

					UPDATE dbo.tlbDepartment
					SET idfsDepartmentName = @DepartmentNameTypeID
						,strReservedAttribute = dbo.FN_GBL_DATACHANGE_INFO(@UserName)
						,AuditUpdateUser = @UserName
						,AuditUpdateDTM = GETDATE()
					WHERE idfDepartment = @DepartmentID;

                    -- Data audit
                    INSERT INTO @tlbDepartment_AfterEdit
                    (
                        DepartmentID,
                        DepartmentNameBaseReferenceID,
                        OrganizationID
                    )
                    SELECT idfDepartment,
                           idfsDepartmentName,
                           idfOrganization
                    FROM dbo.tlbDepartment
                    WHERE idfDepartment = @DepartmentID;

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue
                    )
                    SELECT @idfDataAuditEvent,
                           @idfObjectTable_tlbDepartment,
                           50815910000000,
                           a.DepartmentID,
                           NULL,
                           b.DepartmentNameBaseReferenceID,
                           a.DepartmentNameBaseReferenceID
                    FROM @tlbDepartment_AfterEdit AS a
                        FULL JOIN @tlbDepartment_BeforeEdit AS b
                            ON a.DepartmentID = b.DepartmentID
                    WHERE (a.DepartmentNameBaseReferenceID <> b.DepartmentNameBaseReferenceID)
                          OR (
                                 a.DepartmentNameBaseReferenceID IS NOT NULL
                                 AND b.DepartmentNameBaseReferenceID IS NULL
                             )
                          OR (
                                 a.DepartmentNameBaseReferenceID IS NULL
                                 AND b.DepartmentNameBaseReferenceID IS NOT NULL
                             );
                    -- End data audit
				END
			END
		END;

		SELECT @ReturnCode ReturnCode
			,@ReturnMessage ReturnMessage
			,@DepartmentID KeyId
			,'DepartmentID' KeyName
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK;

		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_EMP_ORGANIZATION_USER_GROUP_GETList]...';


GO




-- ================================================================================================
-- Name: USP_ADMIN_EMP_ORGANIZATION_USER_GROUP_GETList		
-- 
-- Description: Returns a list of Organizations, site IDs, User Groups for an Employee.
--
-- Revision History:
--		
-- Name				Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ann Xiong     	08/24/2020 Initial release.
-- Ann Xiong     	08/31/2020 Changed to consider default Organization
-- Ann Xiong     	09/08/2020 Rearranged scripts to return UserGroupID and UserGroup
-- Ann Xiong     	09/10/2020 Modified to return multiple Organizations
-- Ann Xiong     	09/14/2020 Added idfUserID to the select list.
-- Ann Xiong     	10/15/2020 Modified to return correct Organization from tlbPerson and return '' for SiteID and SiteName when s.idfsSite = 1.
-- Ann Xiong     	10/20/2020 Modified to return only active records (intRowStatus = 0) if there is any active records otherwise return Deactivated records (intRowStatus = 1).
-- Ann Xiong     	11/06/2020 Modified to only return record if intRowStatus = 0 for tlbEmployeeGroupMember
-- Stephen Long     12/11/2020 Added site group ID and site type ID to the query.
-- Stephen Long     01/08/2021 Add string aggregate function on site to site group to get a list 
--                             of site groups in a concatenated list.  Removed join on main query 
--                             to eliminate duplicates.
-- Mani				01/22/2021  Added OrganizationFullName
-- Minal			08/09/2021  Organization is picked from EmployeeToInstitution in place of Person
-- Ann Xiong     	03/23/2023 Modified to return translated User Group name
--
-- Testing Code:
-- EXEC USP_ADMIN_EMP_ORGANIZATION_USER_GROUP_GETList -471, 'en'
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_EMP_ORGANIZATION_USER_GROUP_GETList] (
	@idfPerson BIGINT
	,@LangID NVARCHAR(50)
	)
AS
BEGIN
	DECLARE @returnMsg VARCHAR(MAX) = 'SUCCESS';
	DECLARE @returnCode BIGINT = 0;

	BEGIN TRY
		DECLARE @aspNetUserId NVARCHAR(128);

		SELECT @aspNetUserId = ei.aspNetUserId
		FROM dbo.tstUserTable ut
		LEFT JOIN dbo.EmployeeToInstitution ei ON ut.idfUserID = ei.idfUserID
		WHERE ut.idfPerson = @idfPerson

		SELECT ROW_NUMBER() OVER (
				ORDER BY ei.IsDefault DESC
					,ut.idfUserID
				) AS Row
			,s.idfsSite
			,CASE 
				WHEN s.idfsSite = 1
					THEN ''
				ELSE s.strSiteID
				END AS SiteID
			,CASE 
				WHEN s.idfsSite = 1
					THEN ''
				ELSE s.strSiteName
				END AS SiteName
			,ei.idfInstitution AS OrganizationID
			,o.name AS Organization
			,o.FullName AS OrganizationFullName
			,STRING_AGG(g.idfEmployeeGroup, ', ') WITHIN
		GROUP (
				ORDER BY g.idfEmployeeGroup DESC
				) AS UserGroupID
			,STRING_AGG(egbr.[name], ', ') AS UserGroup
			,e.idfEmployee
			,ISNULL(ei.intRowStatus, 1) AS STATUS
			,ei.Active 
			,ei.IsDefault
			,ut.idfUserID
			,s.idfsSiteType AS SiteTypeID
			,NULL AS SiteGroupID --TODO: temporary fix until site filtration logic is adjusted to use new site group list below.  Will remove this field once complete.  SHL
			,(
				SELECT STRING_AGG(ssg.idfSiteGroup, ',') WITHIN
				GROUP (
						ORDER BY ssg.idfSiteGroup ASC
						) AS SiteGroupID
				FROM dbo.tflSiteToSiteGroup AS ssg 
				WHERE ssg.idfsSite = s.idfsSite
				) AS SiteGroupList
		FROM dbo.tstUserTable ut
		LEFT JOIN dbo.tlbEmployee e ON e.idfEmployee = ut.idfPerson
		LEFT JOIN dbo.tstSite s ON s.idfsSite = e.idfsSite
			AND s.intRowStatus = 0
		LEFT JOIN tlbPerson p ON e.idfEmployee = p.idfPerson
		LEFT JOIN dbo.EmployeeToInstitution ei ON ut.idfUserID = ei.idfUserID
		LEFT JOIN dbo.FN_GBL_Institution(@LangID) o ON ei.idfInstitution = o.idfOffice
--		INNER JOIN dbo.FN_GBL_InstitutionRepair(@LangID) o ON p.idfInstitution = o.idfOffice
		LEFT JOIN dbo.tlbEmployeeGroupMember m ON m.idfEmployee = ut.idfPerson
			AND m.intRowStatus = 0
		LEFT JOIN dbo.tlbEmployeeGroup g ON m.idfEmployeeGroup = g.idfEmployeeGroup
			AND g.idfEmployeeGroup <> - 1
			AND g.intRowStatus = 0
		LEFT JOIN FN_GBL_ReferenceRepair(@LangID, 19000022) egbr
					ON g.idfsEmployeeGroupName = egbr.idfsReference
		WHERE ei.aspNetUserId = @aspNetUserId
			AND ut.intRowStatus = 0
			AND e.intRowStatus = 0
		GROUP BY s.idfsSite
			,s.strSiteID
			,s.strSiteName
			,ei.idfInstitution
			,o.name
			,e.idfEmployee
			,ei.intRowStatus
			,ei.Active
			,ei.IsDefault
			,ut.idfUserID
			,s.idfsSiteType
			,o.FullName

		--SELECT @returnCode AS ReturnCode
		--	,@returnMsg AS ReturnMessage
	END TRY

	BEGIN CATCH
	--	BEGIN
	--		SET @returnCode = ERROR_NUMBER();
	--		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();

	--		SELECT @returnCode AS ReturnCode
	--			,@returnMsg AS ReturnMessage
	--	END
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_EMPLOYEESFOREMPLOYEEGROUP_GETLIST]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_EMPLOYEESFOREMPLOYEEGROUP_GETLIST
--
-- Description: Returns a list of employees in an employee group
--
-- Author: Ricky Moss
--
-- Revision History:
-- Name					Date       Change
-- -------------------- ---------- --------------------------------------------------------------
-- Ricky Moss			12/05/2019 Initial Release
-- Doug Albanese		09/09/2020 Added Type and Description
-- Mani					12/29/2020 Added AspNetUser and tstUserTable tables to get username and 
--                                 idfuserId.
-- Mani					02/08/2021 Added intRowStatus
-- Ann Xiong			05/20/2021 Modified to return a list of employee (user) groups and 
--                                 persons.
-- Ann Xiong			06/16/2021 Added RowStatus and RowAction to the select
-- Ann Xiong			06/18/2021 Added filtered by @idfsSite when @idfEmployeeGroup IS NULL
-- Ann Xiong			07/06/2021 Changed two INNER JOIN to LEFT JOIN when @idfEmployeeGroup IS 
--                                 NULL
-- Ann Xiong			07/16/2021 Changed to exclude existing members from the Person/Employee 
--                                 Group search result
-- Ann Xiong			07/19/2021 Changed two INNER JOIN to LEFT JOIN and INNER JOIN 
--                                 tlbEmployeeGroupMember on e.idfEmployee instead of p.idfPerson, 
--                                 etc. when @user != 'Search'
-- Ann Xiong			07/21/2021 Fixed an issue when add a new user group
-- Ann Xiong			03/21/2021 Excluded a Person if this Person is already assigned to one 
--                                 User Group.
-- Stephen Long         03/17/2023 Fix on like query leading wildcards, and cleaned up formatting.
-- Ann Xiong			03/22/2023 Modified to allow search by FamilyName, FirstName or SecondName 
--                                 or full name (FamilyName FirstName SecondName) if type is Person
-- Ann Xiong			03/30/2023 Modified to return persons without any User Group
-- 
-- USP_ADMIN_EMPLOYEESFOREMPLOYEEGROUP_GETLIST -501, 'en', null
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_EMPLOYEESFOREMPLOYEEGROUP_GETLIST]
(
    @idfEmployeeGroup BIGINT,
    @langId NVARCHAR(50),
    @Type AS BIGINT = NULL, -- Person, Employee Group
    @Name AS NVARCHAR(200) = NULL,
    @Organization AS NVARCHAR(200) = NULL,
    @Description AS NVARCHAR(200) = NULL,
    @pageNo INT = 1,
    @pageSize INT = 10,
    @SortColumn NVARCHAR(30) = 'Name',
    @SortOrder NVARCHAR(4) = 'ASC',
    @user NVARCHAR(50),
    @idfsSite BIGINT = NULL
)
AS
BEGIN
    BEGIN TRY
        DECLARE @firstRec INT = (@pageNo - 1) * @pagesize,
                @lastRec INT = (@pageNo * @pageSize + 1);
        DECLARE @T TABLE
        (
            idfEmployeeGroup BIGINT,
            idfEmployee BIGINT,
            TypeID BIGINT NOT NULL,
            TypeName NVARCHAR(2000),
            Name NVARCHAR(2000),
            Organization NVARCHAR(2000),
            Description NVARCHAR(2000),
            idfUserID BIGINT NULL,
            UserName NVARCHAR(2000),
            RowStatus INT,
            RowAction CHAR(1)
        );

		DECLARE @FamilyName VARCHAR(200), @FirstName VARCHAR(200), @SecondName VARCHAR(200);
        IF (@Type = 10023002)
        BEGIN
			DECLARE @tempValues TABLE  (num INT, Value VARCHAR(200))
			INSERT INTO @tempValues 
			SELECT num, CAST([Value] AS VARCHAR(200)) FROM report.FN_GBL_SYS_SplitList(@Name, 0, ' ')

			SELECT @FamilyName = Value
			FROM @tempValues
			WHERE num = 1

			SELECT @FirstName = Value
			FROM @tempValues
			WHERE num = 2

			SELECT @SecondName = Value
			FROM @tempValues
			WHERE num = 3
        END

        IF (@user = 'Search')
        BEGIN
            INSERT INTO @T
            SELECT eg.idfEmployeeGroup,
                   e.idfEmployee,
                   e.idfsEmployeeType AS TypeID,
                   actorType.name AS TypeName,
                   (CASE
                        WHEN e.idfsEmployeeType = 10023001 THEN
                            eg.strName
                        ELSE
                            dbo.FN_GBL_ConcatFullName(p.strFamilyName, p.strFirstName, p.strSecondName)
                    END
                   ) AS Name,
                   (CASE
                        WHEN e.idfsEmployeeType = 10023001 THEN
                            NULL
                        ELSE
                            organizationName.name
                    END
                   ) AS Organization,
                   eg.strDescription AS Description,
                   a.idfUserID,
                   a.UserName,
                   e.intRowStatus AS RowStatus,
                   'R' AS RowAction
            FROM dbo.tlbEmployee e
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@langId, 19000023) AS actorType
                    ON e.idfsEmployeeType = actorType.idfsReference
                LEFT JOIN dbo.tlbPerson AS p
                    ON p.idfPerson = e.idfEmployee
                       AND p.intRowStatus = 0
                LEFT JOIN dbo.tstUserTable AS u
                    ON u.idfPerson = p.idfPerson
                       AND u.intRowStatus = 0
                LEFT JOIN dbo.AspNetUsers a
                    on a.idfUserID = u.idfUserID
                LEFT JOIN dbo.FN_GBL_Institution(@langId) organizationName
                    ON p.idfInstitution = organizationName.idfOffice
                LEFT JOIN dbo.tlbEmployeeGroup AS eg
                    ON e.idfEmployee = eg.idfEmployeeGroup
                       AND eg.intRowStatus = 0
                LEFT JOIN dbo.tstSite AS employeeSite
                    ON employeeSite.idfsSite = e.idfsSite
                       AND employeeSite.intRowStatus = 0
                LEFT JOIN dbo.tstSite AS employeeGroupSite
                    ON employeeGroupSite.idfsSite = eg.idfsSite
                       AND employeeGroupSite.intRowStatus = 0
            WHERE e.intRowStatus = 0
                  AND e.idfsSite = @idfsSite
                  AND (
                          (
                              -- Person
                              e.idfsEmployeeCategory = 10526001
                              AND e.idfsEmployeeType = 10023002
                          )
                          OR (
                                 -- Employee Group
                                 e.idfsEmployeeCategory = 10526002
                                 AND e.idfsEmployeeType = 10023001
                                 AND eg.intRowStatus = 0
                             )
                      )
                  AND (e.idfEmployee NOT IN (
                                                SELECT idfEmployee
                                                FROM dbo.tlbEmployeeGroupMember egm
                                                WHERE idfEmployeeGroup = @idfEmployeeGroup
                                                      AND intRowStatus = 0
                                            )
                      )
                  --AND (e.idfEmployee NOT IN (
                  --                              SELECT idfEmployee
                  --                              FROM dbo.tlbEmployeeGroupMember egm
                  --                              WHERE e.idfsEmployeeType = 10023002
                  --                                    AND intRowStatus = 0
                  --                          )
                  --    )
                  AND (
                          (e.idfEmployee != @idfEmployeeGroup)
                          OR (@idfEmployeeGroup IS NULL)
                      )
                  AND (
                          (idfsEmployeeType = @Type)
                          OR (@Type IS NULL)
                      )
                  AND (
                          (
                              (@Type = 10023002)
                              AND ISNULL(p.strFamilyName, '') LIKE IIF(@FamilyName IS NOT NULL,
                                                                       @FamilyName + '%',
                                                                       ISNULL(p.strFamilyName, ''))
                          )
                          AND (
                              (@Type = 10023002)
                              AND ISNULL(p.strFirstName, '') LIKE IIF(@FirstName IS NOT NULL,
                                                                       @FirstName + '%',
                                                                       ISNULL(p.strFirstName, ''))
                          )
                          AND (
                              (@Type = 10023002)
                              AND ISNULL(p.strSecondName, '') LIKE IIF(@SecondName IS NOT NULL,
                                                                       @SecondName + '%',
                                                                       ISNULL(p.strSecondName, ''))
                          )
                          OR (
                              (@Type = 10023002)
                              AND ISNULL(p.strFamilyName, '') LIKE IIF(@Name IS NOT NULL,
                                                                       @Name + '%',
                                                                       ISNULL(p.strFamilyName, ''))
                          )
                          OR (
                              (@Type = 10023002)
                              AND ISNULL(p.strFirstName, '') LIKE IIF(@Name IS NOT NULL,
                                                                       @Name + '%',
                                                                       ISNULL(p.strFirstName, ''))
                          )
                          OR (
                              (@Type = 10023002)
                              AND ISNULL(p.strSecondName, '') LIKE IIF(@Name IS NOT NULL,
                                                                       @Name + '%',
                                                                       ISNULL(p.strSecondName, ''))
                          )
                          OR (
                                 (@Type = 10023001)
                                 AND ISNULL(eg.strName, '') LIKE IIF(@Name IS NOT NULL,
                                                                     @Name + '%',
                                                                     ISNULL(eg.strName, ''))
                             )
                          OR (
                                 (@Type IS NULL)
                                 AND (
                                         ISNULL(p.strFamilyName, '') LIKE IIF(@Name IS NOT NULL,
                                                                              @Name + '%',
                                                                              ISNULL(p.strFamilyName, ''))
                                         OR ISNULL(p.strFirstName, '') LIKE IIF(@Name IS NOT NULL,
                                                                              @Name + '%',
                                                                              ISNULL(p.strFirstName, ''))
                                         OR ISNULL(p.strSecondName, '') LIKE IIF(@Name IS NOT NULL,
                                                                              @Name + '%',
                                                                              ISNULL(p.strSecondName, ''))
                                         OR ISNULL(eg.strName, '') LIKE IIF(@Name IS NOT NULL,
                                                                            @Name + '%',
                                                                            ISNULL(eg.strName, ''))
                                     )
                             )
                      )
                  AND ISNULL(organizationName.name, '') LIKE IIF(@Organization IS NOT NULL,
                                                                 '%' + @Organization + '%',
                                                                 ISNULL(organizationName.name, ''))
                  AND ISNULL(eg.strDescription, '') LIKE IIF(@Description IS NOT NULL,
                                                             @Description + '%',
                                                             ISNULL(eg.strDescription, ''));
        END
        ELSE
        BEGIN
            INSERT INTO @T
            SELECT egm.idfEmployeeGroup,
                   e.idfEmployee,
                   e.idfsEmployeeType AS TypeID,
                   actorType.name AS TypeName,
                   (CASE
                        WHEN e.idfsEmployeeType = 10023001 THEN
                            eg.strName
                        ELSE
                            dbo.FN_GBL_ConcatFullName(p.strFamilyName, p.strFirstName, p.strSecondName)
                    END
                   ) AS Name,
                   (CASE
                        WHEN e.idfsEmployeeType = 10023001 THEN
                            NULL
                        ELSE
                            organization.name
                    END
                   ) AS Organization,
                   eg.strDescription AS Description,
                   a.idfUserID,
                   a.UserName,
                   e.intRowStatus AS RowStatus,
                   'R' AS RowAction
            FROM dbo.tlbEmployee e
                INNER JOIN dbo.FN_GBL_ReferenceRepair(@langId, 19000023) AS actorType
                    ON e.idfsEmployeeType = actorType.idfsReference
                LEFT JOIN dbo.tlbPerson AS p
                    ON p.idfPerson = e.idfEmployee
                       AND p.intRowStatus = 0
                LEFT JOIN dbo.tstUserTable AS u
                    ON u.idfPerson = p.idfPerson
                       AND u.intRowStatus = 0
                LEFT JOIN dbo.AspNetUsers a
                    on a.idfUserID = u.idfUserID
                LEFT JOIN dbo.FN_GBL_Institution(@langId) organization
                    ON p.idfInstitution = organization.idfOffice
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON e.idfEmployee = egm.idfEmployee
                       and egm.intRowStatus = 0
                LEFT JOIN dbo.tlbEmployeeGroup AS eg
                    ON e.idfEmployee = eg.idfEmployeeGroup
                       AND eg.intRowStatus = 0
            WHERE e.intRowStatus = 0
                  and egm.idfEmployeeGroup = @idfEmployeeGroup
                  AND e.idfsSite = @idfsSite
                  AND (
                          (
                              -- User
                              e.idfsEmployeeCategory = 10526001
                              AND e.idfsEmployeeType = 10023002
                          )
                          OR (
                                 -- User Group
                                 e.idfsEmployeeCategory = 10526002
                                 AND e.idfsEmployeeType = 10023001
                                 AND eg.intRowStatus = 0
                             )
                      )
                  AND (
                          (idfsEmployeeType = @Type)
                          OR (@Type IS NULL)
                      )
                  AND (
                          (p.strFamilyName = @Name)
                          OR (@Name IS NULL)
                      )
                  AND (
                          (p.strFirstName = @Name)
                          OR (@Name IS NULL)
                      )
                  AND (
                          (p.strSecondName = @Name)
                          OR (@Name IS NULL)
                      )
                  AND (
                          (eg.strName = @Name)
                          OR (@Name IS NULL)
                      )
                  AND (
                          (organization.name = @Organization)
                          OR @Organization IS NULL
                      )
                  AND (
                          (eg.strDescription = @Description)
                          OR (@Description IS NULL)
                      );
        END;
        WITH CTEResults
        as (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @sortColumn = 'idfEmployeeGroup'
                                                        AND @SortOrder = 'asc' THEN
                                                       idfEmployeeGroup
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'idfEmployeeGroup'
                                                        AND @SortOrder = 'desc' THEN
                                                       idfEmployeeGroup
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'idfEmployee'
                                                        AND @SortOrder = 'asc' THEN
                                                       idfEmployee
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'idfEmployee'
                                                        AND @SortOrder = 'desc' THEN
                                                       idfEmployee
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'TypeID'
                                                        AND @SortOrder = 'asc' THEN
                                                       TypeID
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'TypeID'
                                                        AND @SortOrder = 'desc' THEN
                                                       TypeID
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'TypeName'
                                                        AND @SortOrder = 'asc' THEN
                                                       TypeName
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'TypeName'
                                                        AND @SortOrder = 'desc' THEN
                                                       TypeName
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'Name'
                                                        AND @SortOrder = 'asc' THEN
                                                       Name
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'Name'
                                                        AND @SortOrder = 'desc' THEN
                                                       Name
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'Organization'
                                                        AND @SortOrder = 'asc' THEN
                                                       Organization
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'Organization'
                                                        AND @SortOrder = 'desc' THEN
                                                       Organization
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'Description'
                                                        AND @SortOrder = 'asc' THEN
                                                       Description
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'Description'
                                                        AND @SortOrder = 'desc' THEN
                                                       Description
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'idfUserID'
                                                        AND @SortOrder = 'asc' THEN
                                                       idfUserID
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'idfUserID'
                                                        AND @SortOrder = 'desc' THEN
                                                       idfUserID
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'UserName'
                                                        AND @SortOrder = 'asc' THEN
                                                       UserName
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'UserName'
                                                        AND @SortOrder = 'desc' THEN
                                                       UserName
                                               END DESC
                                     ) AS ROWNUM,
                   COUNT(*) OVER () AS TotalRowCount,
                   idfEmployeeGroup,
                   idfEmployee,
                   TypeID,
                   TypeName,
                   Name,
                   Organization,
                   Description,
                   idfUserID,
                   UserName,
                   RowStatus,
                   RowAction
            FROM @T
           )
        SELECT TotalRowCount,
               idfEmployeeGroup,
               idfEmployee,
               TypeID,
               TypeName,
               Name,
               Organization,
               Description,
               idfUserID,
               UserName,
               RowStatus,
               RowAction,
               TotalPages = (TotalRowCount / @pageSize) + IIF(TotalRowCount % @pageSize > 0, 1, 0),
               CurrentPage = @pageNo
        FROM CTEResults
        WHERE RowNum > @firstRec
              AND RowNum < @lastRec;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_EVENT_GETCount]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_EVENT_GETCount		
--
-- Description: Gets a count of event notifications for a user as defined in SAUC55 and SAUC56.
--
-- Author: Stephen Long
-- 
-- Revision History:
-- Name                        Date       Change Detail
-- --------------------------- ---------- --------------------------------------------------------
-- Stephen Long                03/17/2023 Initial release
-- Stephen Long                03/22/2023 Added nolock
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_EVENT_GETCount]
(
    @LanguageId NVARCHAR(50),
    @UserId BIGINT,
    @DaysFromReadDate INT
)
AS
BEGIN
    BEGIN TRY
        SELECT COUNT(e.idfEventID) AS EventCount
        FROM dbo.tstEvent e WITH (NOLOCK)
            INNER JOIN dbo.trtEventType et
                ON et.idfsEventTypeID = e.idfsEventTypeID
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageId, 19000155) notificationType
                ON notificationType.idfsReference = et.idfsEventSubscription
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageId, 19000025) eventType
                ON eventType.idfsReference = e.idfsEventTypeID
        WHERE e.idfUserID = @UserId
              AND e.intProcessed = 0;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_EVENT_GETList]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_EVENT_GETList		
--
-- Description: Gets a list of event notifications for a user as defined in SAUC55 and SAUC56.
--
-- Author: Stephen Long
-- 
-- Revision History:
-- Name                        Date       Change Detail
-- --------------------------- ---------- --------------------------------------------------------
-- Stephen Long                07/06/2022 Initial release
-- Stephen Long                07/28/2022 Added sort fields.
-- Stephen Long                08/18/2022 Fixed reference type for the event type.
-- Stephen Long                08/29/2022 Added trtEventType join and correct reference type name.
-- Stephen Long                03/20/2023 Added parenthesis to group processed indicator.
-- Stephen Long                03/22/2023 Added nolock
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_EVENT_GETList]
(
    @LanguageId NVARCHAR(50),
    @UserId BIGINT,
    @DaysFromReadDate INT,
    @PageNo INT = 1,
    @PageSize INT = 10,
    @SortColumn NVARCHAR(100) = 'EventDate',
    @SortOrder VARCHAR(4) = 'DESC'
)
AS
BEGIN
    DECLARE @FirstRec INT = (@PageNo - 1) * @PageSize,
            @LastRec INT = (@PageNo * @PageSize + 1);

    BEGIN TRY
        WITH CTEResults
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'EventTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       eventType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EventTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       eventType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EventDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       e.datEventDatatime
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EventDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       e.datEventDatatime
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSSiteID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       s.strSiteID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSSiteID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       s.strSiteID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel2Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel2Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel3Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel3Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel3Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel3Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       disease.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       disease.name
                                               END DESC
                                     ) AS ROWNUM,
                   e.idfEventID AS EventId,
                   e.idfsEventTypeID AS EventTypeId,
                   CASE
                       WHEN e.strInformationString IS NULL THEN
                           eventType.name
                       ELSE
                           e.strInformationString
                   END AS EventTypeName,
                   notificationType.name AS NotificationTypeName,
                   e.idfObjectID AS ObjectId,
                   disease.name AS DiseaseName,
                   e.idfsSite AS SiteId,
                   s.strSiteID AS EIDSSSiteID,
                   lh.AdminLevel2Name AS AdministrativeLevel2Name,
                   lh.AdminLevel3Name AS AdministrativeLevel3Name,
                   e.intProcessed AS ProcessedIndicator,
                   e.datEventDatatime AS EventDate,
                   COUNT(*) OVER () AS TotalRowCount
            FROM dbo.tstEvent e WITH (NOLOCK)
                INNER JOIN dbo.trtEventType et
                    ON et.idfsEventTypeID = e.idfsEventTypeID
                INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageId, 19000155) notificationType
                    ON notificationType.idfsReference = et.idfsEventSubscription
                INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageId, 19000025) eventType
                    ON eventType.idfsReference = e.idfsEventTypeID
                LEFT JOIN dbo.tstSite s
                    ON s.idfsSite = e.idfsSite
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = e.idfsLocation
                LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageId) lh
                    ON lh.idfsLocation = g.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                    ON disease.idfsReference = e.idfsDiagnosis
            WHERE e.idfUserID = @UserId
                  AND (
                          (e.intProcessed = 0)
                          OR (
                                 e.intProcessed = 1
                                 AND GETDATE() <= DATEADD(DAY, @DaysFromReadDate, e.datEventDatatime)
                             )
                      )
           )
        SELECT EventId,
               EventTypeId,
               EventTypeName,
               ObjectId,
               DiseaseName,
               SiteId,
               EIDSSSiteID,
               AdministrativeLevel2Name,
               AdministrativeLevel3Name,
               ProcessedIndicator,
               EventDate,
               TotalRowCount,
               TotalPages = (TotalRowCount / @PageSize) + IIF(TotalRowCount % @PageSize > 0, 1, 0),
               CurrentPage = @pageNo
        FROM CTEResults
        WHERE RowNum > @FirstRec
              AND RowNum < @LastRec;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH

END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_Copy_Template]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_Copy_Template
-- Description: Copies the base structure of a template and its components to prevent historical damage.
--          
-- Revision History:
-- Name				Date		Change
-- ---------------	----------	--------------------------------------------------------------------
-- Doug Albanese	01/12/2021	Initial release for use by other SPs.
-- Doug Albanese	01/19/2021	Fixed the return to provide the new Form Template id
-- Doug Albanese	01/21/2021	Change of business rule to allow older templates to still be modified.
-- Doug Albanese	01/21/2021	Disabled UNI for the old template being copied.
-- Doug Albanese	07/02/2021	Altered the procedure to ignore blank idfsSections
-- Doug Albanese	07/06/2021	Refactored for use with a user initiated copy.
-- Doug Albanese	07/09/2021	Added language parameter
-- Doug Albanese	07/09/2021	Removed supression
-- Doug Albanese	07/12/2021	Corrected return aliases
-- Doug Albanese	07/12/2021	Corrections to remove copying of Sections and Parameters, and replace with association to the new template
-- Doug Albanese	07/14/2021	Turning off content to make this process a successor procedure only
-- Doug Albanese	07/14/2021	Created translation for SP generated "Copy"
-- Doug Albanese	07/14/2021	Added ordering from original template
-- Doug Albanese	07/14/2021	Added Edit Mode for Mandatory/Ordinary settings
--	Doug Albanese	05/12/2022	Adjusting for copying to another formtype
--	Doug Albanese	06/02/2022	Changed the functioncall parameter for USP_ADMIN_FF_ParameterTemplate_SET, to work with USP_ADMIN_FF_ParameterDesignOptions_SET
--	Doug Albanese	06/07/2022	Changed USP_ADMIN_FF_ParameterTemplate_SET, to call as a function
--	Doug Albanese	06/08/2022	Corrected the Determinants value copy. Was in the wrong place
--	Doug Albanese	06/10/2022	Making use of USP_ADMIN_FF_ParameterTemplateForCopy_SET, instead of USP_ADMIN_FF_ParameterTemplate_SET for EF Generation purposes
--								Realigned call to USP_Admin_FF_Rule_GetDetails for new changes
--	Doug Albanese	06/30/2022	Correcting the process of copying Determinants
--	Doug Albanese	07/01/2022	Removed rollback
--	Doug Albanese	07/21/2022	Re-aligned to work with changes made on USP_ADMIN_FF_Template_SET
--	Doug Albanese	08/04/2022	Added a secondary "intRowStatus"
--	Doug Albanese	08/04/2022	Corrected a call to USP_ADMIN_FF_Determinant_SET, because it was remotely set for Event logging.
--	Doug Albanese	08/04/2022	Corrected "Template Details" to coalesce the blnUNI value, when it was null
--  Doug Albanese	01/26/2023	Correction to allow Copying of templates to create Outbreak assigned flex forms.
-- Doug Albanese	03/22/2023	Changed SP to make use of UserId, instead of User...so that event logging will not break.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_Copy_Template] (
	@LangId									NVARCHAR(50),
	@idfsFormTemplate						BIGINT,
	@User									NVARCHAR(50),
	@idfsSite								BIGINT = NULL,
	@idfsNewFormType						BIGINT = NULL
)
AS
BEGIN
	DECLARE @returnCode						INT = 0;
	DECLARE @returnMsg						NVARCHAR(MAX) = 'SUCCESS';
	
	Declare @SupressSelect TABLE
	(	
		retrunCode							INT,
		returnMessage						VARCHAR(200)
	) 

	DECLARE @Supress_USP_ADMIN_FF_Parameters_SET TABLE (
		ReturnCode							INT,
		ReturnMessage						VARCHAR(200),
		idfsParameter						BIGINT,
		idfsParameterCaption				BIGINT
	)
	
	DECLARE @Supress_USP_ADMIN_FF_ParameterTemplate_SET TABLE(
		ReturnData							VARCHAR(200)
	)

	DECLARE @iObservations					INT = 0


	BEGIN TRY
		
		--Changes that have the potential to trigger copying of a template
		--Template details
		--Parameter addition, moving, or deleting from a template
		--Section addition, moving, or deleting from a template
		--Parameter Editor changes
		--Section Editor Changes
		--Updating "Mandatory" status
		--Adding, Editing, or Removing a Rule

		DECLARE @FormTemplate				NVARCHAR(200)
		DECLARE @NationalName				NVARCHAR(200)
		DECLARE @NationalLongName			NVARCHAR(200)
		DECLARE @idfsFormType				BIGINT
		DECLARE @strNote					NVARCHAR(MAX)
		DECLARE @blnUNI						BIT

		DECLARE @idfsSection				BIGINT
		DECLARE @idfsParameter				BIGINT
		DECLARE @idfsParentSection			BIGINT 
		DECLARE @DefaultName				NVARCHAR(400)
		DECLARE @DefaultLongName			NVARCHAR(400)
		DECLARE @intOrder					INT
		DECLARE @blnGrid					BIT
		DECLARE @blnFixedRowset				BIT
		DECLARE @idfsMatrixType				BIGINT
		DECLARE @intRowStatus				INT
		DECLARE @idfsSectionNew				BIGINT
		DECLARE @idfsFormTemplateNew		BIGINT

		DECLARE @idfsParameterNew			BIGINT
		DECLARE	@idfsParameterCaption		BIGINT
		DECLARE @idfsParameterType			BIGINT
		DECLARE @idfsEditor					BIGINT
		DECLARE @intHACode					INT
		DECLARE @langid_int					BIGINT
		DECLARE @idfsRule					BIGINT
		DECLARE @idfsEditMode				BIGINT

		DECLARE @idfsRuleMessage			BIGINT
		DECLARE @idfsRuleFunction			BIGINT
		DECLARE @idfsRuleAction				BIGINT
		DECLARE	@idfsFunctionParameter		BIGINT
		DECLARE @idfsActionParameter		BIGINT
		DECLARE	@idfsFunctionParameterNew	BIGINT
		DECLARE @idfsActionParameterNew		BIGINT
		DECLARE @intNumberOfParameters		INT
		DECLARE @idfsCheckPoint				BIGINT
		DECLARE @MessageText				NVARCHAR(MAX)
		DECLARE @MessageNationalText		NVARCHAR(MAX)
		DECLARE @blnNot						BIT
		DECLARE	@idfsRuleNew				BIGINT
		DECLARE	@strFillValue				NVARCHAR(MAX)
		DECLARE	@strCompareValue			NVARCHAR(MAX)

		DECLARE @DefaultRuleName			NVARCHAR(MAX)
		DECLARE @NationalRuleName			NVARCHAR(MAX)
		DECLARE @DefaultRuleMessage			NVARCHAR(MAX)
		DECLARE @NationalRuleMessage		NVARCHAR(MAX)
		DECLARE @strActionParameters		NVARCHAR(MAX)

		DECLARE @idfRuleConstant			BIGINT
		DECLARE @idfRuleConstantNew			BIGINT
		DECLARE @varConstant				SQL_VARIANT

		DECLARE @idfDeterminantValue		BIGINT
		DECLARE @idfsBaseReference			BIGINT
		DECLARE @idfsGISBaseReference		BIGINT

		DECLARE @strResourceString			NVARCHAR(200) = 'Copy'
		DECLARE @UserId						 BIGINT

		SET NOCOUNT ON

		SET @langid_int = dbo.FN_GBL_LanguageCode_GET(@LangID);

		SELECT @UserId = userInfo.UserId,
		  @idfsSite = userInfo.SiteId
		   FROM dbo.FN_UserSiteInformation(@User) userInfo;

		
		--Are any observations made for the given active (intRowStatus = 0) template?
		--SELECT
		--	@iObservations = COUNT(idfObservation)
		--FROM
		--	tlbObservation O
		--INNER JOIN ffFormTemplate FT
		--	ON FT.idfsFormTemplate = O.idfsFormTemplate
		--	AND FT.intRowStatus = 0
		--WHERE
		--	O.idfsFormTemplate = @idfsFormTemplate

		--IF @iObservations > 0
		--	BEGIN
				----------------------------------------------------------------------------------------
				--Create table structures for collecting up items to enumerate and tag,				  --
				--and capture EXEC results                                                            --
				----------------------------------------------------------------------------------------
				DECLARE @Sections TABLE (
					idfsSection			BIGINT NULL,
					idfsSectionNew		BIGINT NULL
				)

				DECLARE @Parameters TABLE (
					idfsParameter		BIGINT,
					idfsParameterNew	BIGINT,
					idfsSection			BIGINT,
					idfsSectionNew		BIGINT
				)

				DECLARE @ActionParameters TABLE (
					idfsParameter		BIGINT
				)

				DECLARE @FunctionParameters TABLE (
					idfsParameter		BIGINT
				)

				DECLARE @TemplateDetails TABLE (
					idfsFormTemplate	BIGINT,
					FormTemplate		NVARCHAR(200),
					DefaultName			NVARCHAR(200),
					NationalName		NVARCHAR(200),
					idfsFormType		BIGINT,
					strNote				NVARCHAR(MAX),
					blnUNI				BIT
				)

				DECLARE @SectionSetResults TABLE (
					returnCode			BIGINT,
					returnMsg			NVARCHAR(MAX),
					idfsSection			BIGINT
				)

				DECLARE @SectionDetailResults TABLE (
					idfsParentSection	BIGINT,
					idfsFormType		BIGINT,
					intOrder			INT,
					blnGrid				BIT,
					blnFixedRowset		BIT,
					idfsMatrixType		BIGINT,
					strDefault			NVARCHAR(MAX),
					NationalName		NVARCHAR(MAX)
				)

				DECLARE @TemplateDetailsResults TABLE (
					returnCode			BIGINT,
					returnMsg			NVARCHAR(MAX),
					idfsFormTemplate	BIGINT
				)

				DECLARE	@Rules	TABLE (
					idfsRule			BIGINT,
					idfsRuleNew			BIGINT
				)

				DECLARE @RuleDetailResults TABLE (
					idfsRule				BIGINT,
					defaultRuleName			NVARCHAR(MAX),
					RuleName				NVARCHAR(MAX),
					idfsRuleMessage			BIGINT,
					defaultRuleMessage		NVARCHAR(MAX),
					RuleMessage				NVARCHAR(MAX),
					idfsCheckPoint			BIGINT,
					idfsRuleFunction		BIGINT,
					blnNot					BIT,
					idfsRuleAction			BIGINT,
					strActionParameters		NVARCHAR(MAX),
					idfsFunctionParameter	BIGINT,
					FillValue				NVARCHAR(MAX)
				)

				DECLARE @RuleConstants TABLE (
					idfRuleConstant		BIGINT,
					idfsRule			BIGINT,
					varConstant			SQL_VARIANT
				)

				DECLARE @Functions TABLE (
					idfParameterForFunction	BIGINT,
					idfsParameter			BIGINT,
					idfsFormTemplate		BIGINT,
					idfsRule				BIGINT,
					intOrder				INT,
					strCompareValue			NVARCHAR(MAX)
				)

				DECLARE @Actions TABLE (
					idfParameterForAction	BIGINT,
					idfsParameter			BIGINT,
					idfsFormTemplate		BIGINT,
					idfsRuleAction			BIGINT,
					idfsRule				BIGINT,
					strFillValue			NVARCHAR(MAX)
				)

				DECLARE @GlobalReference TABLE (
					idfs					BIGINT,
					idfsNew					BIGINT
				)

				DECLARE @Determinants TABLE (
					idfDeterminantValue		BIGINT,
					idfsBaseReference		BIGINT
				)

				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Make a copy of the base Template													  --
				----------------------------------------------------------------------------------------
				INSERT INTO @TemplateDetails
				EXEC USP_ADMIN_FF_Template_GetDetail @LangID = @LangId, @idfsFormTemplate = @idfsFormTemplate

				SELECT
					@idfsFormTemplate = idfsFormTemplate,
					@FormTemplate = FormTemplate,
					@DefaultName = DefaultName,
					@NationalName = NationalName,
					@idfsFormType = idfsFormType,
					@strNote = strNote,
					@blnUNI = COALESCE(blnUNI,0)
				FROM
					@TemplateDetails

				if @idfsNewFormType IS NOT NULL
					BEGIN
						--if NOT EXISTS(SELECT TOP 1 idfsFormTemplate FROM ffFormTemplate WHERE idfsFormType = @idfsNewFormType AND intRowStatus = 0)
						--	BEGIN
								SET @idfsFormType = @idfsNewFormType
								SET @blnUNI = 1
							--END
					END
				--Collect remaining details that are not supplied by the existing SP
				--SELECT
				--	@DefaultName = strDefault
				--FROM
				--	trtBaseReference 
				--WHERE
				--	idfsBaseReference = @idfsFormTemplate
				
				--Generate new idfsFormTemplate with existing names, having "Copy" appended to it
				SELECT
					@strResourceString = strResourceString
				FROM
					trtResourceTranslation
				WHERE 
					idfsResource = 744 and 
					idfsLanguage = @langid_int

				SET @DefaultName = CONCAT(@DefaultName,' (', @strResourceString , ')')
				SET @NationalName = CONCAT(@NationalName,' (', @strResourceString , ')')

				INSERT INTO @SupressSelect
				EXEC dbo.USSP_GBL_BaseReference_SET @idfsFormTemplateNew OUTPUT, 19000033/*'rftParameter'*/,@LangID, @DefaultName, @NationalName, 0

				--Create Global Reference for use by subsequential steps
				INSERT INTO @GlobalReference (idfs, idfsNew) VALUES (@idfsFormTemplate, @idfsFormTemplateNew)

				--Create the new Template
				INSERT INTO @SupressSelect
				EXEC USP_ADMIN_FF_Template_SET 
					@idfsFormType = @idfsFormType, 
					@DefaultName = @DefaultName,
					@NationalName = @NationalName, 
					@strNote = @strNote, 
					@LangId = @LangID, 
					@blnUNI = @blnUNI,
					@idfsFormTemplate = @idfsFormTemplateNew,
					@User = @User,
					@FunctionCall = 1,
					@CopyOnly = 1,
					@EventTypeId =10025120,
					@SiteId = @idfsSite,
					@UserId = @UserId,
					@LocationId = -1
					

				--Turn off UNI on old Template, since the newer on is the primary one now
				UPDATE
					ffFormTemplate
				SET
					blnUNI = 0
				WHERE
					idfsFormTemplate = @idfsFormTemplate

				--Disable existing Template
				--UPDATE
				--	ffFormTemplate
				--SET
				--	intRowStatus = 1
				--WHERE
				--	idfsFormTemplate = @idfsFormTemplate
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Sections													  --
				----------------------------------------------------------------------------------------
				INSERT INTO @Sections (idfsSection)
				SELECT
					SFT.idfsSection
				FROM
					ffSectionForTemplate SFT
				INNER JOIN ffSection S
					ON S.idfsSection = SFT.idfsSection AND
						SFT.intRowStatus = 0
				WHERE
					SFT.idfsFormTemplate = @idfsFormTemplate AND
					S.intRowStatus = 0

				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Parameters and their associated Sections					  --
				----------------------------------------------------------------------------------------
				INSERT INTO @Parameters (idfsParameter, idfsSection)
				SELECT
					PFT.idfsParameter,
					P.idfsSection
				FROM
					ffParameterForTemplate PFT
				INNER JOIN ffParameter P
					ON P.idfsParameter = PFT.idfsParameter AND
						PFT.intRowStatus = 0
				WHERE
					PFT.idfsFormTemplate = @idfsFormTemplate AND
					P.intRowStatus = 0
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Rules														  --
				----------------------------------------------------------------------------------------
				INSERT INTO @Rules (idfsRule)
				SELECT
					idfsRule
				FROM
					ffRule
				WHERE
					idfsFormTemplate = @idfsFormTemplate AND
					intRowStatus = 0
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Rules														  --
				----------------------------------------------------------------------------------------
				--INSERT INTO @Rules (idfsRule)
				--SELECT
				--	idfsRule
				--FROM
				--	ffRule
				--WHERE
				--	idfsFormTemplate = @idfsFormTemplate
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Rule Constants												  --
				----------------------------------------------------------------------------------------
				INSERT INTO @RuleConstants (idfRuleConstant, idfsRule, varConstant)
				SELECT
					RC.idfRuleConstant,
					RC.idfsRule,
					RC.varConstant
				FROM
					ffRuleConstant RC
				INNER JOIN ffRule R
					ON R.idfsRule = RC.idfsRule
				WHERE
					R.idfsFormTemplate = @idfsFormTemplate AND
					R.intRowStatus = 0
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Template Determinants										  --
				--------------------------------------------------------------------------------------
				INSERT INTO @Determinants (idfDeterminantValue, idfsBaseReference)
				SELECT
					idfDeterminantValue,
					idfsBaseReference
				FROM
					ffDeterminantValue
				WHERE
					idfsFormTemplate = @idfsFormTemplate
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Make a copy of each Section and its Template association							  --
				----------------------------------------------------------------------------------------
				WHILE EXISTS(SELECT TOP 1 idfsSection FROM @Sections WHERE idfsSectionNew IS NULL)
					BEGIN
						--Get another recored that hasn't been converted yet
						SELECT TOP 1 @idfsSection = idfsSection FROM @Sections WHERE idfsSectionNew IS NULL
						SELECT @intOrder = intOrder FROM ffSectionDesignOption WHERE idfsFormTemplate = @idfsFormTemplate AND idfsSection = @idfsSection
						
						--SELECT
						--	@idfsParentSection	= idfsParentSection,
						--	@idfsFormType		= idfsFormType,
						--	@intOrder			= S.intOrder,
						--	@blnGrid			= blnGrid,
						--	@blnFixedRowset		= blnFixedRowset,
						--	@idfsMatrixType		= idfsMatrixType,
						--	@DefaultName		= B.strDefault,
						--	@NationalName		= ISNULL(SNT.[strTextString], B.[strDefault]) 
						--FROM
						--	ffSection S
						--INNER JOIN dbo.trtBaseReference B
						--ON B.[idfsBaseReference] = S.[idfsSection]
						--   AND B.[intRowStatus] = 0  
						--LEFT JOIN dbo.trtStringNameTranslation SNT
						--ON SNT.[idfsBaseReference] = S.[idfsSection]
						--   AND SNT.idfsLanguage = @langid_int
						--   AND SNT.[intRowStatus] = 0
						--WHERE
						--	idfsSection = @idfsSection
							
						--Reset to grab a new id each iteration
						--SET @idfsSectionNew = NULL

						--Create another Section, based off of the details obtained from the previous step
						--INSERT INTO @SupressSelect
						--EXEC dbo.USSP_GBL_BaseReference_SET @idfsSectionNew OUTPUT,19000101,@LangID,@DefaultName,@NationalName,0

						--IF @idfsSectionNew IS NOT NULL 
						--	BEGIN
								--Create Global Reference for use by subsequential steps
								--INSERT INTO @GlobalReference (idfs, idfsNew) VALUES (@idfsSection, @idfsSectionNew)
								----INSERT INTO @SectionSetResults
								--INSERT INTO @SupressSelect
								--EXEC USP_ADMIN_FF_Sections_SET 
								--	@idfsSection		= @idfsSectionNew, 
								--	@idfsParentSection	= @idfsParentSection, 
								--	@idfsFormType		= @idfsFormType,
								--	@intOrder			= @intOrder,
								--	@blnGrid			= @blnGrid,
								--	@blnFixedRowset		= @blnFixedRowset,
								--	@idfsMatrixType		= @idfsMatrixType,
								--	@intRowStatus		= @intRowStatus,
								--	@User				= @User,
								--	@CopyOnly			= 1

								--Create entry for the association of this new Section against the new Template
								INSERT INTO @SupressSelect
								EXEC USP_ADMIN_FF_SectionTemplate_SET 
									@LangId = @LangID, 
									@idfsSection = @idfsSection, 
									@idfsFormTemplate = @idfsFormTemplateNew,
									@User = @User

								UPDATE
									ffSectionDesignOption
								SET
									intOrder = @intOrder
								WHERE
									idfsFormTemplate = @idfsFormTemplate AND
									idfsSection = @idfsSection

								--Update the temporary table, to mark it as converted
								UPDATE
									@Sections
								SET
									idfsSectionNew = @idfsSection
								WHERE
									idfsSection = @idfsSection

								UPDATE
									@Parameters
								SET
									idfsSectionNew = @idfsSection
								WHERE
									idfsSection = @idfsSection
									
								--Soft delete the old section, from the ffSection table
								--UPDATE 
								--	ffSection
								--SET
								--	intRowStatus = 1
								--WHERE
								--	idfsSection = @idfsSection
							--END
					END
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Make a copy of each Parameter and its Template association						  --
				----------------------------------------------------------------------------------------
				WHILE EXISTS(SELECT TOP 1 idfsParameter FROM @Parameters WHERE idfsParameterNew IS NULL)
					BEGIN
						--Get another record that hasn't been converted yet
						SELECT TOP 1 @idfsParameter = idfsParameter FROM @Parameters WHERE idfsParameterNew IS NULL
						SELECT @intOrder = intOrder FROM ffParameterDesignOption WHERE idfsFormTemplate = @idfsFormTemplate AND idfsParameter = @idfsParameter
						SELECT @idfsEditMode = idfsEditMode FROM ffParameterForTemplate WHERE idfsFormTemplate = @idfsFormTemplate AND idfsParameter = @idfsParameter

						--Grab the details for the current parameter
						--SELECT
						--	@idfsSection			= P.idfsSection,
						--	@idfsParameterCaption	= P.idfsParameterCaption,
						--	@idfsParameterType		= P.idfsParameterType,
						--	@idfsFormType			= P.idfsFormType,
						--	@idfsEditor				= P.idfsEditor,
						--	@strNote				= P.strNote,
						--	@intOrder				= P.intOrder,
						--	@intHACode				= P.intHACode,
						--	@DefaultName			= ISNULL(B2.[strDefault], ''),
						--	@DefaultLongName		= ISNULL(B1.[strDefault], ''),
						--	@NationalName			= ISNULL(SNT2.[strTextString], B2.[strDefault]),
						--	@NationalLongName		= ISNULL(SNT1.[strTextString], B1.[strDefault])
						--FROM
						--	ffParameter P
						--INNER JOIN dbo.trtBaseReference B1
						--ON B1.[idfsBaseReference] = P.[idfsParameter]
						--	AND B1.[intRowStatus] = 0
						--LEFT JOIN dbo.trtBaseReference B2
						--ON B2.[idfsBaseReference] = P.[idfsParameterCaption]
						--	AND B2.[intRowStatus] = 0
						--LEFT JOIN dbo.trtStringNameTranslation SNT1
						--ON (SNT1.[idfsBaseReference] = P.[idfsParameter]
						--	AND SNT1.[idfsLanguage] = @langid_int)
						--	AND SNT1.[intRowStatus] = 0
						--LEFT JOIN dbo.trtStringNameTranslation SNT2
						--ON (SNT2.[idfsBaseReference] = P.[idfsParameterCaption]
						--	AND SNT2.[idfsLanguage] = @langid_int)
						--	AND SNT2.[intRowStatus] = 0
						--WHERE
						--	P.idfsParameter = @idfsParameter
							
						--Reset to grab a new id each iteration
						--SET @idfsParameterNew = NULL

						----Create another parameter, based off of the details obtained from the previous step
						--INSERT INTO @SupressSelect
						--EXEC dbo.USSP_GBL_BaseReference_SET @idfsParameterNew OUTPUT, 19000066/*'rftParameter'*/,@LangID, @DefaultLongName, @NationalLongName, 0

						--INSERT INTO @SupressSelect
						--EXEC dbo.USSP_GBL_BaseReference_SET @idfsParameterCaption OUTPUT, 19000070 /*'rftParameterToolTip'*/,@LangID, @DefaultName, @NationalName, 0

						----Create Global Reference for use by subsequential steps
						--INSERT INTO @GlobalReference (idfs, idfsNew) VALUES (@idfsParameter, @idfsParameterNew)

						--Obtain the id for the newly copied section
						--SELECT
						--	@idfsSectionNew = idfsSectionNew
						--FROM
						--	@Parameters
						--WHERE
						--	idfsParameter = @idfsParameter

						--Create the copy of the existing Parameter
						--INSERT INTO @Supress_USP_ADMIN_FF_Parameters_SET
						--EXEC USP_ADMIN_FF_Parameters_SET 
						--	@LangID					= @LangID,
						--	@idfsSection			= @idfsSectionNew, 
						--	@idfsFormType			= @idfsFormType,
						--	@idfsParameterType		= @idfsParameterType,
						--	@idfsEditor				= @idfsEditor,
						--	@intHACode				= @intHACode,
						--	@intOrder				= @intOrder,
						--	@strNote				= @strNote,
						--	@DefaultName			= @DefaultName,
						--	@NationalName			= @NationalName,
						--	@DefaultLongName		= @DefaultLongName,
						--	@NationalLongName		= @NationalLongName,
						--	@idfsParameter			= @idfsParameterNew,
						--	@idfsParameterCaption	= @idfsParameterCaption,
						--	@User					= @User,
						--	@intRowStatus			= 0,
						--	@CopyOnly				= 1

						--Create entry for the association of this new Section against the new Template
						--INSERT INTO @Supress_USP_ADMIN_FF_ParameterTemplate_SET
						EXEC USP_ADMIN_FF_ParameterTemplateForCopy_SET
							@LangID= @LangID,
							@idfsParameter = @idfsParameter, 
							@idfsFormTemplate = @idfsFormTemplateNew,
							@User = @User,
							@CopyOnly = 1,
							@FunctionCall = 1

						--Apply ordering settings
						UPDATE
							ffParameterDesignOption
						SET
							intOrder = @intOrder
						WHERE
							idfsFormTemplate = @idfsFormTemplateNew AND
							idfsParameter = @idfsParameter

						--Apply Edit Mode (Mandatory or Ordinary)
						UPDATE
							ffParameterForTemplate
						SET
							idfsEditMode = @idfsEditMode
						WHERE
							idfsFormTemplate = @idfsFormTemplateNew AND
							idfsParameter = @idfsParameter

						--Update the temporary table, to mark it as converted
						UPDATE
							@Parameters
						SET
							idfsParameterNew = @idfsParameter
						WHERE
							idfsParameter = @idfsParameter


						--Soft delete the old section, from the ffSection table
						--UPDATE 
						--	ffParameter
						--SET
						--	intRowStatus = 1
						--WHERE
						--	idfsParameter = @idfsParameter

					END
				----------------------------------------------------------------------------------------

				--Enumerate through all determinants that are related to the Template
				WHILE EXISTS (SELECT idfDeterminantValue FROM @Determinants)
					BEGIN
						--Grab the first items in the list
						SELECT
							TOP 1
							@idfDeterminantValue = idfDeterminantValue,
							@idfsBaseReference = idfsBaseReference
						FROM
							@Determinants

						--Create the copy of the existing entry
						INSERT INTO @SupressSelect
						EXEC USP_ADMIN_FF_Determinant_SET @idfsDiagnosisGroup = @idfsBaseReference, 
														@idfsFormTemplate = @idfsFormTemplateNew, 
														@User = @User, 
														@intRowStatus = 0, 
														@FunctionCall = 1,
														@EventTypeId =10025120,
														@SiteId = @idfsSite,
														@UserId = @UserId,
														@LocationId = NULL

						--Disable
						UPDATE
							ffDeterminantValue
						SET
							intRowStatus = 1
						WHERE
							idfDeterminantValue = @idfDeterminantValue

						DELETE
						FROM
							@Determinants
						WHERE
							idfDeterminantValue = @idfDeterminantValue
					END

				----------------------------------------------------------------------------------------
				--Make a copy of each Rule															  --
				----------------------------------------------------------------------------------------
				WHILE EXISTS(SELECT TOP 1 idfsRule FROM @Rules WHERE idfsRuleNew IS NULL)
					BEGIN
						--Get another record that hasn't been converted yet
						SELECT
							TOP 1 @idfsRule = idfsRule
						FROM
							@Rules
						WHERE
							idfsRuleNew IS NULL

						--Reset @RuleDetailResults, so that it will only have one row at a time in it
						DELETE FROM @RuleDetailResults

						--Grab the details for the current Rule
						INSERT INTO @RuleDetailResults
						EXEC USP_ADMIN_FF_Rule_GetDetails @langid=@LangId, @idfsRule = @idfsRule

						SELECT
							@idfsRule = idfsRule,
							@DefaultRuleName = defaultRuleName,
							@NationalRuleName = RuleName,
							@DefaultRuleMessage = defaultRuleMessage,
							@NationalRuleMessage = RuleMessage,
							@idfsRuleMessage = idfsRuleMessage,
							@idfsCheckPoint = idfsCheckPoint,
							@idfsRuleFunction = idfsRuleFunction,
							@blnNot = blnNot,
							@idfsRuleAction = idfsRuleAction,
							@strActionParameters = strActionParameters,
							@idfsFunctionParameter = idfsFunctionParameter,
							@strFillValue = FillValue
						FROM
							@RuleDetailResults
						
						--Reset to grab a new id each iteration
						--SET @idfsRuleNew = -1

						--Create another Rule, based off of the details obtained from the previous step
						--INSERT INTO @SupressSelect
						EXEC dbo.USSP_GBL_BaseReference_SET @ReferenceID = @idfsRuleNew OUTPUT, @ReferenceType = 19000029, @LangId = @LangID, @DefaultName = @DefaultName, @NationalName = @NationalName, @System = 0

						INSERT INTO @SupressSelect
						EXEC dbo.USSP_GBL_BaseReference_SET @idfsRuleMessage OUTPUT, 19000032, @LangID, @MessageText, @MessageNationalText, 0
						
						--Create Global Reference for use by subsequential steps
						INSERT INTO @GlobalReference (idfs, idfsNew) VALUES (@idfsRule, @idfsRuleNew)

						--Reset the Action Parameters Table
						DELETE FROM @ActionParameters
						
						--Create table from string "Parameters" of the current rule details
						INSERT INTO @ActionParameters (idfsParameter)
						SELECT
							CAST(L.value AS BIGINT) AS idfsParameter
						FROM
							[dbo].[FN_GBL_SYS_SplitList](@strActionParameters, 0, ',') L

						--Get the conversion of the idfsParameter from its old value for the Function that the parameter is using.
						SELECT
							@idfsFunctionParameterNew = idfsNew
						FROM
							@GlobalReference
						WHERE
							idfs = @idfsFunctionParameter

						
						--Enumerate through all Action Parameters, that are associated with the rule
						WHILE EXISTS(SELECT idfsParameter FROM @ActionParameters)
							BEGIN
								SELECT 
									TOP 1 @idfsActionParameter = idfsParameter
								FROM
									@ActionParameters
									
								--Get the conversion of the idfsParameter from its old value for the Action that the parameter is using.
								SELECT
									@idfsActionParameterNew = idfsNew
								FROM
									@GlobalReference
								WHERE
									idfs = @idfsActionParameter

								--Create the copy of the existing Parameter
								--INSERT INTO @SupressSelect
								EXEC USP_ADMIN_FF_Rules_SET
									@idfsRule = @idfsRuleNew,
									@idfsFormTemplate = @idfsFormTemplateNew,
									@idfsCheckPoint = @idfsCheckPoint,
									@idfsRuleFunction = @idfsRuleFunction,
									@idfsRuleAction = @idfsRuleAction,
									@DefaultName = @DefaultName,
									@NationalName = @NationalName,
									@MessageText = @MessageText,
									@MessageNationalText = @MessageNationalText,
									@blnNot = @blnNot,
									@LangID = @LangID,
									@idfsRuleMessage = @idfsRuleMessage,
									@idfsFunctionParameter = @idfsFunctionParameterNew,
									@idfsActionParameter = @idfsActionParameterNew,
									@User = @User,
									@strFillValue = @strFillValue,
									@strCompareValue = @strCompareValue,
									@intRowStatus = 0,
									@FunctionCall = 1,
									@CopyOnly = 1

								DELETE FROM @ActionParameters WHERE idfsParameter = @idfsActionParameter
							END

						--Enumerate through all Constants, that are related to the Rule
						WHILE EXISTS(SELECT idfRuleConstant FROM @RuleConstants)
							BEGIN
								SELECT
									TOP 1
									@idfRuleConstant = idfRuleConstant,
									@idfsRule = idfsRule,
									@varConstant = varConstant
								FROM
									@RuleConstants

								--Get a new row id
								INSERT INTO @SupressSelect
								EXEC dbo.USP_GBL_NEXTKEYID_GET 'ffRuleConstant', @idfRuleConstantNew OUTPUT;

								--Get the newly created id for the old entry.
								SELECT
									@idfRuleConstantNew = idfsNew
								FROM
									@GlobalReference
								WHERE
									idfs = @idfRuleConstant

								--Get the newly created id for the old entry.
								SELECT
									@idfsRuleNew = idfsNew
								FROM
									@GlobalReference
								WHERE
									idfs = @idfsRuleNew

								--Create the new Record
								INSERT INTO ffRuleConstant (
									idfRuleConstant, 
									idfsRule, 
									varConstant, 
									intRowStatus,
									AuditCreateDTM,
									AuditCreateUser
								)
								VALUES (
									@idfRuleConstantNew,
									@idfsRuleNew,
									@varConstant,
									0,
									GETDATE(),
									@User
								)
								
								--Delete the top record so that continous looping doesn't occur to produce records over and over
								DELETE 
								FROM 
									@RuleConstants
								WHERE
									idfRuleConstant = @idfRuleConstant
							END
						
						--Update the temporary table, to mark it as converted
						UPDATE
							@Rules
						SET
							idfsRuleNew = @idfsRuleNew
						WHERE
							idfsRule = @idfsRule
						
						--Soft delete the old section, from the ffSection table
						UPDATE 
							ffRule
						SET
							intRowStatus = 1
						WHERE
							idfsRule= @idfsRule

					END
				----------------------------------------------------------------------------------------

				--USP_ADMIN_FF_Parameter_Copy
				--USP_ADMIN_FF_Section_Copy
				--SELECT * FROM @SectionsParameters
				--USP_ADMIN_FF_TemplateSectionOrder_Set
				--USP_ADMIN_FF_RequiredParameter_SET
				--USP_ADMIN_FF_ParameterDesignOptions_SET
				--USP_ADMIN_FF_Parameters_SET
				--USP_ADMIN_FF_ParameterFixedPresetValue_SET
				--USP_ADMIN_FF_ParameterTypes_SET
				--USP_ADMIN_FF_ParameterTemplate_SET
				--USP_ADMIN_FF_RuleConstant_SET
				--USP_ADMIN_FF_RuleParameterForAction_SET
				--USP_ADMIN_FF_RuleParameterForFunction_SET
				--USP_ADMIN_FF_Rules_SET
				--USP_ADMIN_FF_SectionDesignOptions_SET
				--USP_ADMIN_FF_Sections_SET
				--USP_ADMIN_FF_SectionTemplate_SET
				--USP_ADMIN_FF_SectionTemplateRecursive_SET ????????????????
				--USP_ADMIN_FF_Template_SET
				--USP_ADMIN_FF_TemplateDeterminantValues_SET
				--USP_ADMIN_FF_TemplateParameterOrder_Set
				--USP_ADMIN_FF_Determinant_SET

			--END
		
		--If any observations are made, then the following must be copied
		--select * from ffDeterminantValue where idfsFormTemplate = 9871670000000 

		IF @idfsFormTemplateNew IS NULL
			BEGIN
				SET @idfsFormTemplateNew = @idfsFormTemplate
			END

		SELECT	@returnCode as ReturnCode, @returnMsg as ReturnMessage, @idfsFormTemplateNew As idfsFormTemplate
	END TRY

	BEGIN CATCH

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		throw;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_DIAGNOSISREFERENCE_GETList]...';


GO
--=================================================================================================
-- Name: USP_REF_DIAGNOSISREFERENCE_GETList
--
-- Description:	Returns list of diagnosis/disease references
--							
-- Author:  Philip Shaffer
--
-- Revision History:
-- Name				 Date		 Change Detail
-- ----------------	 ----------	 -------------------------------------------------------------------
-- Doug Albanese	 07/16/2021	 Initial Release
-- Doug Albanese	 07/07/2022	 Rewrote entire SP for better performance and filtering of correct diagnosises, used for the FFD Determinants
-- Doug Albanese	 09/22/2022	 Rewrite to include other determinant types that aren't disease releated
-- Doug Albanese	 02/08/2023	 Changed how exlucsions are determined for the Determinants list.
-- Doug Albanese	 02/16/2023	 Changing the method on pulling determinanta again. Found another problem that didn't work for all situations
-- Doug Albanese	 03/27/2023	 Added Fiter for "Using Type" (Standard)
--
-- Test Code:
-- exec USP_REF_DIAGNOSISREFERENCE_GETList 'en', NULL, NULL
-- exec USP_REF_DIAGNOSISREFERENCE_GETList 'en', 'Hu', NULL
-- exec USP_REF_DIAGNOSISREFERENCE_GETList 'en', NULL, 32
--=================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_DIAGNOSISREFERENCE_GETList] 
	@LangID				   NVARCHAR(50)
	,@idfsFormTemplate	   BIGINT
	,@idfsFormType		   BIGINT
AS
BEGIN
	DECLARE @AccessoryCode INT = 510
	DECLARE @NonDisease	   BIT = 0

	DECLARE @idfsDiagnosisExclusions TABLE (
		idfsDiagnosis		BIGINT
	)

   DECLARE @Determinants TABLE (
	  idfsDiagnosis BIGINT,
	  strName  NVARCHAR(200)
   )

   BEGIN TRY
	  IF (@idfsFormType = 10034018 or @idfsFormType = 10034019) --Test Details / Test Run
		 BEGIN
			SET @NonDisease = 1

			INSERT INTO @Determinants
			SELECT
			   BR.idfsBaseReference AS idfsDiagnosis,
			   BRT.name AS strName
			FROM 
			   trtBaseReference BR
			INNER JOIN FN_GBL_ReferenceRepair(@LangID, 19000097) BRT
			ON BRT.idfsReference = BR.idfsBaseReference
			WHERE
			   BR.intRowStatus = 0
		 END

	  IF @idfsFormType = 10034025 --Vector type specific data
		 BEGIN
			SET @NonDisease = 1

			INSERT INTO @Determinants
			SELECT
			   VT.idfsVectorType AS idfsDiagnosis,
			   VTT.name AS strName
			FROM 
			   trtVectorType VT
			INNER JOIN FN_GBL_ReferenceRepair(@LangID, 19000140) VTT
			ON VTT.idfsReference = VT.idfsVectorType
			WHERE
			   VT.intRowStatus = 0
		 END

	   DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS',
	   @returnCode BIGINT = 0;
	
	  IF @NonDisease = 0
		 BEGIN
			
			  SELECT
				  @AccessoryCode = intHACode 
			  FROM 
				  trtBaseReference 
			  WHERE 
				  idfsReferenceType = 19000034 AND
				  introwStatus = 0 AND
				  idfsBaseReference = @idfsFormType
		
			  IF (@AccessoryCode IS NULL) SET @AccessoryCode = 510

			  INSERT INTO @idfsDiagnosisExclusions
			  SELECT
				  dv.idfsBaseReference
			  FROM
				  ffDeterminantValue dv
			  WHERE
				  dv.idfsFormTemplate = @idfsFormTemplate AND
				  dv.intRowStatus = 0	
			
			INSERT INTO @Determinants
			  SELECT d.idfsDiagnosis,
				  dbr.[name] AS strName
			  FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS dbr
			  INNER JOIN dbo.trtDiagnosis d
				  ON d.idfsDiagnosis = dbr.idfsReference
			  LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000020) AS ut
				  ON d.idfsUsingType = ut.idfsReference
			  WHERE (
					  dbr.intHACode IS NULL
					  OR dbr.intHACode > 0
					  )
				  AND d.intRowStatus = 0
				  AND dbr.intRowStatus = 0
				  AND (
				  (
					  @AccessoryCode IN (
						  SELECT *
						  FROM dbo.FN_GBL_SplitHACode(dbr.intHaCode, 510)
						  )
					  )
				  OR (@AccessoryCode IS NULL)
				  ) AND
				  idfsDiagnosis NOT IN (
					  SELECT idfsDiagnosis FROM @idfsDiagnosisExclusions
				  ) AND
				  d.idfsUsingType = 10020001
			  ORDER BY dbr.[name];
		 ENd


		 SELECT
			idfsDiagnosis,
			strName
		 FROM
			@Determinants
		 ORDER BY
			strName

	END TRY
	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_TemplateSectionOrder_Set]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_TemplateSectionOrder_Set
-- Description: Changes the order of a Section
--          
-- Revision History:
-- Name				Date		Change
-- ---------------	----------	--------------------------------------------------------------------
-- Doug Albanese	04/07/2020	Initial release for new API.
-- Doug Albanese	10/20/2020	Added Auditing Information
-- Doug Albanese	10/28/2021	Refactoring to get EF to generate a proper return model
-- Doug Albanese	03/24/2023	Refactored the entire SP to swap the order of two sections.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_TemplateSectionOrder_Set] (
	@idfsFormTemplate			BIGINT,
	@idfsCurrentSection			BIGINT,
	@idfsDestinationSection		BIGINT,
	@User						NVARCHAR(50) = ''
)
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY
		BEGIN TRANSACTION
		 DECLARE @returnCode INT = 0
         DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS'

		 DECLARE @idfSectionDesignOptionCurrent		 BIGINT
		 DECLARE @idfsSectionCurrentOrder			 INT

		 DECLARE @idfSectionDesignOptionDestination	 BIGINT
		 DECLARE @idfsSectionDestinationOrder		 INT

		 --Collect Section details to be moved
		 SELECT
			@idfSectionDesignOptionCurrent = idfSectionDesignOption,
			@idfsSectionCurrentOrder = intOrder
		 FROM
			ffSectionDesignOption
		 WHERE
			idfsFormTemplate = @idfsFormTemplate AND
			idfsSection = @idfsCurrentSection AND
			intRowStatus = 0

		 --Collect Destination details for Section to be moved to
		 SELECT
			@idfSectionDesignOptionDestination = idfSectionDesignOption,
			@idfsSectionDestinationOrder = intOrder
		 FROM
			ffSectionDesignOption
		 WHERE
			idfsFormTemplate = @idfsFormTemplate AND
			idfsSection = @idfsDestinationSection AND
			intRowStatus = 0

		 --Swap order between Current and Destination sections
		 UPDATE
			ffSectionDesignOption
		 SET
			intOrder = @idfsSectionDestinationOrder,
			AuditUpdateDTM = GETDATE(),
			AuditUpdateUser = @User
		 WHERE
			idfSectionDesignOption  = @idfSectionDesignOptionCurrent
	  
		 --Swap order between Current and Destination sections
		 UPDATE
			ffSectionDesignOption
		 SET
			intOrder = @idfsSectionCurrentOrder,
			AuditUpdateDTM = GETDATE(),
			AuditUpdateUser = @User
		 WHERE
			idfSectionDesignOption  = @idfSectionDesignOptionDestination
   

		 SELECT @returnCode AS ReturnCode,
			   @returnMsg AS ReturnMessage

		COMMIT TRANSACTION;
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;

		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_STAT_SET]...';


GO

--=================================================================================================================
-- Created by:				Joan Li
-- Last modified by:		
-- Joan Li					06/13/17	Created based on V6 spStatistic_Post:  V7 usp54 purpose: save records in tlbStatistic
-- Joan Li	                06/15/17	change action parameter
-- Lamont Mitchell			1/2/19		Added ReturnCode and ReturnMessage and changed @idfStatistic from output parameter added it to the Select output
-- Ricky Moss				3/12/20		Check for Duplicates and return a message and statistic id if record exists.
-- Ricky Moss				3/18/20		Added settlement parameter
-- Ricky Moss				3/23/20		Developed search for existing statistic data
-- LAMONT MITCHELL			6/7/2022	ADDED BULKINPORT PARAMETER TO DISTINGUISH BETWEEN BULK IMPORT AND SINGLE ENTERIES.. BULK IMPORT BYPASSES DUPLICATE CHECK
-- Leo Tracchia				9/6/2022	modified logic to handle duplicate data during bulk import
-- Leo Tracchia				10/26/2022	fix for GAT defect #472, DevOps 5259
-- Leo Tracchia				3/1/2023	added logic for data auditing
-- Leo Tracchia				4/3/2023	corrected @idfsObjectType to 10017049
--=================================================================================================================

ALTER PROCEDURE [dbo].[USP_ADMIN_STAT_SET]
(
	@idfStatistic						BIGINT		= NULL,	--##PARAM @idfStatistic - statistic record ID
	@idfsStatisticDataType				BIGINT		= NULL,	--##PARAM @idfsStatisticDataType - statistic data Type
	@idfsMainBaseReference				BIGINT		= NULL,	--##PARAM @idfsMainBaseReference - statistic base reference
	@idfsStatisticAreaType				BIGINT		= NULL,	--##PARAM @idfsStatisticAreaType - statistic Area Type
	@idfsStatisticPeriodType			BIGINT		= NULL,	--##PARAM @idfsStatisticPeriodType - statistic period Type
	@LocationUserControlidfsCountry		BIGINT		= NULL,	--##PARAM @idfsArea - statistic Area
	@LocationUserControlidfsRegion		BIGINT		= NULL,	--##PARAM @idfsArea - statistic Area
	@LocationUserControlidfsRayon 		BIGINT		= NULL,	--##PARAM @idfsArea - statistic Area
	@LocationUserControlidfsSettlement	BIGINT		= NULL,	--##PARAM @idfsArea - statistic Area
	@datStatisticStartDate				DATETIME	= NULL,	--##PARAM @datStatisticStartDate - start date
	@datStatisticFinishDate				DATETIME	= NULL,	--##PARAM @datStatisticFinishDate - finish date 
	@varValue							INT			= NULL,	--##PARAM @varValue - statistic content
	@idfsStatisticalAgeGroup			BIGINT		= NULL,
	@idfsParameterName					BIGINT		= NULL,
	@bulkImport							BIT			= 0,
	@SiteId								BIGINT,
	@UserId								BIGINT
)
AS

DECLARE @returnCode					INT = 0 
DECLARE	@returnMsg					NVARCHAR(max) = 'SUCCESS' 
DECLARE @existingStatistic			BIGINT = null;
DECLARE @idfsArea					BIGINT

Declare @SupressSelect table
( 
	retrunCode int,
	returnMessage varchar(200)
)

--Data Audit--

	DECLARE @idfUserId BIGINT = @UserId;
	DECLARE @idfSiteId BIGINT = @SiteId;
	DECLARE @idfsDataAuditEventType bigint = NULL;
	DECLARE @idfsObjectType bigint = 10017049; 
	DECLARE @idfObject bigint = @idfStatistic;
	DECLARE @idfObjectTable_tlbStatistic bigint = 75720000000;		
	DECLARE @idfDataAuditEvent bigint = NULL;		

	DECLARE @tlbStatistic_BeforeEdit TABLE
	(
		idfStatistic bigint,
		idfsStatisticDataType bigint, 
		idfsMainBaseReference bigint, 
		idfsStatisticAreaType bigint, 
		idfsStatisticPeriodType bigint, 
		idfsArea bigint,
		datStatisticStartDate datetime,
		datStatisticFinishDate datetime,
		varValue sql_variant,
		idfsStatisticalAgeGroup bigint
	)

	DECLARE @tlbStatistic_AfterEdit TABLE
	(
		idfStatistic bigint,
		idfsStatisticDataType bigint, 
		idfsMainBaseReference bigint, 
		idfsStatisticAreaType bigint, 
		idfsStatisticPeriodType bigint, 
		idfsArea bigint,
		datStatisticStartDate datetime,
		datStatisticFinishDate datetime,
		varValue sql_variant,
		idfsStatisticalAgeGroup bigint
	)	

--Data Audit--

BEGIN

	BEGIN TRY  	

		BEGIN TRANSACTION

			IF @LocationUserControlidfsSettlement IS NOT NULL
				SELECT @idfsArea = @LocationUserControlidfsSettlement
			ELSE IF @LocationUserControlidfsRayon IS NOT NULL 
				SELECT @idfsArea = @LocationUserControlidfsRayon
			ELSE IF @LocationUserControlidfsRegion IS NOT NULL
				SELECT @idfsArea = @LocationUserControlidfsRegion
			ELSE 
				SELECT @idfsArea = @LocationUserControlidfsCountry

			--SELECT @existingStatistic = (SELECT top 1(idfStatistic) from tlbStatistic WHERE idfsStatisticDataType = @idfsStatisticDataType AND idfsStatisticPeriodType = @idfsStatisticPeriodType AND ((idfsStatisticalAgeGroup = @idfsStatisticalAgeGroup) OR (idfsStatisticalAgeGroup IS NULL AND @idfsStatisticalAgeGroup IS NULL ))AND idfsStatisticAreaType = @idfsStatisticAreaType AND idfsArea = @idfsArea AND datStatisticStartDate = @datStatisticStartDate AND ((idfsMainBaseReference = @idfsMainBaseReference ) OR idfsMainBaseReference IS NULL AND @idfsMainBaseReference IS NULL) )
			--SELECT @existingStatistic =
			--	(SELECT top 1(idfStatistic) 
			--	FROM tlbStatistic 
			--	WHERE 
			--	idfsStatisticDataType = @idfsStatisticDataType 
			--	AND idfsStatisticAreaType = @idfsStatisticAreaType 
			--	AND idfsStatisticPeriodType = @idfsStatisticPeriodType 
			--	AND idfsArea = @idfsArea --Georgia?
			--	AND datStatisticStartDate = @datStatisticStartDate 
			--	AND datStatisticFinishDate = @datStatisticFinishDate 
			--	--AND varValue = @varValue
			--	AND idfsStatisticalAgeGroup = @idfsStatisticalAgeGroup)

			--IF(@existingStatistic IS NOT NULL AND @idfStatistic IS NULL) --AND @bulkImport = 0)
			--	BEGIN
			--		SELECT @returnMsg = 'DOES EXIST'
			--		SELECT @idfStatistic = @existingStatistic
			--	END
			--ELSE 

			-- if @idfStatistic is not passed in... (possibly a new record)
			IF NOT EXISTS (SELECT * FROM dbo.tlbStatistic WHERE  idfStatistic = @idfStatistic) 

				BEGIN

					--print 'getting existing statistic...'

					-- check if a row already exists with the same data
					SELECT @existingStatistic =
						(SELECT top 1(idfStatistic) 
						FROM tlbStatistic 
						WHERE 
						(idfsStatisticDataType = @idfsStatisticDataType or @idfsStatisticDataType is null)
						AND (idfsMainBaseReference = @idfsMainBaseReference or @idfsMainBaseReference is null)
						AND (idfsStatisticAreaType = @idfsStatisticAreaType or @idfsStatisticAreaType is null)
						AND (idfsStatisticPeriodType = @idfsStatisticPeriodType or @idfsStatisticPeriodType is null)
						AND (idfsArea = @idfsArea or @idfsArea is null)
						AND (datStatisticStartDate = @datStatisticStartDate or @datStatisticStartDate is null)
						AND (datStatisticFinishDate = @datStatisticFinishDate or @datStatisticFinishDate is null)
						--AND (varValue = @varValue or @varValue is null)
						AND (idfsStatisticalAgeGroup = @idfsStatisticalAgeGroup or @idfsStatisticalAgeGroup is null)
						AND intRowStatus = 0)

					--print @existingStatistic

					-- if row doesn't exists, then insert new data
					IF(@existingStatistic IS NULL)
						BEGIN

							--print 'existing statistic is null, so insert'

							INSERT INTO @SupressSelect
							EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbStatistic', @idfStatistic OUTPUT

							--Data Audit--

								-- tauDataAuditEvent Event Type - Create 
								set @idfsDataAuditEventType = 10016001;
			
								-- insert record into tauDataAuditEvent - 
								INSERT INTO @SupressSelect
								EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfStatistic, @idfObjectTable_tlbStatistic, @idfDataAuditEvent OUTPUT

							--Data Audit--

							INSERT INTO tlbStatistic
								(
									idfStatistic,
									idfsStatisticDataType,
									idfsMainBaseReference,
									idfsStatisticAreaType,
									idfsStatisticPeriodType,
									idfsArea,
									datStatisticStartDate,
									datStatisticFinishDate,
									varValue,
									idfsStatisticalAgeGroup
								)
							VALUES
								(
									@idfStatistic,
									@idfsStatisticDataType,
									@idfsMainBaseReference,
									@idfsStatisticAreaType,
									@idfsStatisticPeriodType,
									CASE ISNULL(@LocationUserControlidfsSettlement , '') 
									WHEN '' THEN
										CASE ISNULL(@LocationUserControlidfsRayon, '') 
										WHEN '' THEN
											CASE ISNULL(@LocationUserControlidfsRegion,'')
												WHEN '' THEN
													@LocationUserControlidfsCountry 
												ELSE 
													@LocationUserControlidfsRegion
												END
										ELSE 
												@LocationUserControlidfsRayon 
										END 
									ELSE 
										@LocationUserControlidfsSettlement  
									END,
									@datStatisticStartDate,
									@datStatisticFinishDate,
									CAST(@varValue AS INT),
									@idfsStatisticalAgeGroup
								)

							--Data Audit--							

								INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
								VALUES (@idfDataAuditEvent, @idfObjectTable_tlbStatistic, @idfStatistic)
			
							--Data Audit--

						END
					-- else, just update it with @existingStatistic
					ELSE

						--print 'existing statistic is NOT null, so update'

						--BEGIN: DataAudit-- 
				
							--  tauDataAuditEvent  Event Type - Edit 
							set @idfsDataAuditEventType = 10016003;
			
							-- insert record into tauDataAuditEvent - 
							INSERT INTO @SupressSelect
							EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfStatistic, @idfObjectTable_tlbStatistic, @idfDataAuditEvent OUTPUT						

							INSERT INTO @tlbStatistic_BeforeEdit(
								idfStatistic,
								idfsStatisticDataType, 
								idfsMainBaseReference, 
								idfsStatisticAreaType, 
								idfsStatisticPeriodType, 
								idfsArea,
								datStatisticStartDate,
								datStatisticFinishDate,
								varValue,
								idfsStatisticalAgeGroup
								)
							SELECT 
								idfStatistic,
								idfsStatisticDataType, 
								idfsMainBaseReference, 
								idfsStatisticAreaType, 
								idfsStatisticPeriodType, 
								idfsArea,
								datStatisticStartDate,
								datStatisticFinishDate,
								varValue,
								idfsStatisticalAgeGroup				
								FROM tlbStatistic WHERE idfStatistic = @idfStatistic;

						--END: DataAudit-- 

						UPDATE	tlbStatistic
						SET		idfsStatisticDataType = @idfsStatisticDataType,
								idfsMainBaseReference = @idfsMainBaseReference,
								idfsStatisticAreaType = @idfsStatisticAreaType,
								idfsStatisticPeriodType = @idfsStatisticPeriodType,
								idfsArea = CASE ISNULL(@LocationUserControlidfsSettlement , '') 
									WHEN '' THEN
										CASE ISNULL(@LocationUserControlidfsRayon, '') 
										WHEN '' THEN
											CASE ISNULL(@LocationUserControlidfsRegion,'')
												WHEN '' THEN
													@LocationUserControlidfsCountry 
												ELSE 
													@LocationUserControlidfsRegion
												END
										ELSE 
												@LocationUserControlidfsRayon 
										END 
									ELSE 
										@LocationUserControlidfsSettlement  
									END,
								datStatisticStartDate = @datStatisticStartDate,
								datStatisticFinishDate = @datStatisticFinishDate,
								varValue = CAST(@varValue AS INT),
								idfsStatisticalAgeGroup = @idfsStatisticalAgeGroup
						 WHERE 	idfStatistic = @existingStatistic

						 --BEGIN: DataAudit-- 

							INSERT INTO @tlbStatistic_AfterEdit(
								idfStatistic,
								idfsStatisticDataType, 
								idfsMainBaseReference, 
								idfsStatisticAreaType, 
								idfsStatisticPeriodType, 
								idfsArea,
								datStatisticStartDate,
								datStatisticFinishDate,
								varValue,
								idfsStatisticalAgeGroup
								)
							SELECT 
								idfStatistic,
								idfsStatisticDataType, 
								idfsMainBaseReference, 
								idfsStatisticAreaType, 
								idfsStatisticPeriodType, 
								idfsArea,
								datStatisticStartDate,
								datStatisticFinishDate,
								varValue,
								idfsStatisticalAgeGroup				
								FROM tlbStatistic WHERE idfStatistic = @idfStatistic;

							--idfsStatisticDataType
							insert into dbo.tauDataAuditDetailUpdate(
								idfDataAuditEvent, 
								idfObjectTable, 
								idfColumn, 
								idfObject, 
								idfObjectDetail, 
								strOldValue, 
								strNewValue)
							select 
								@idfDataAuditEvent,
								@idfObjectTable_tlbStatistic, 
								80410000000,
								a.idfStatistic,
								null,
								a.idfsStatisticDataType,
								b.idfsStatisticDataType 
							from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
							where (a.idfsStatisticDataType <> b.idfsStatisticDataType) 
								or(a.idfsStatisticDataType is not null and b.idfsStatisticDataType is null)
								or(a.idfsStatisticDataType is null and b.idfsStatisticDataType is not null)

							--idfsMainBaseReference
							insert into dbo.tauDataAuditDetailUpdate(
								idfDataAuditEvent, 
								idfObjectTable, 
								idfColumn, 
								idfObject, 
								idfObjectDetail, 
								strOldValue, 
								strNewValue)
							select 
								@idfDataAuditEvent,
								@idfObjectTable_tlbStatistic, 
								4577930000000,
								a.idfStatistic,
								null,
								a.idfsMainBaseReference,
								b.idfsMainBaseReference 
							from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
							where (a.idfsMainBaseReference <> b.idfsMainBaseReference) 
								or(a.idfsMainBaseReference is not null and b.idfsMainBaseReference is null)
								or(a.idfsMainBaseReference is null and b.idfsMainBaseReference is not null)

							--idfsStatisticAreaType
							insert into dbo.tauDataAuditDetailUpdate(
								idfDataAuditEvent, 
								idfObjectTable, 
								idfColumn, 
								idfObject, 
								idfObjectDetail, 
								strOldValue, 
								strNewValue)
							select 
								@idfDataAuditEvent,
								@idfObjectTable_tlbStatistic, 
								80400000000,
								a.idfStatistic,
								null,
								a.idfsStatisticAreaType,
								b.idfsStatisticAreaType 
							from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
							where (a.idfsStatisticAreaType <> b.idfsStatisticAreaType) 
								or(a.idfsStatisticAreaType is not null and b.idfsStatisticAreaType is null)
								or(a.idfsStatisticAreaType is null and b.idfsStatisticAreaType is not null)

							--idfsStatisticPeriodType
							insert into dbo.tauDataAuditDetailUpdate(
								idfDataAuditEvent, 
								idfObjectTable, 
								idfColumn, 
								idfObject, 
								idfObjectDetail, 
								strOldValue, 
								strNewValue)
							select 
								@idfDataAuditEvent,
								@idfObjectTable_tlbStatistic, 
								80420000000,
								a.idfStatistic,
								null,
								a.idfsStatisticPeriodType,
								b.idfsStatisticPeriodType 
							from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
							where (a.idfsStatisticPeriodType <> b.idfsStatisticPeriodType) 
								or(a.idfsStatisticPeriodType is not null and b.idfsStatisticPeriodType is null)
								or(a.idfsStatisticPeriodType is null and b.idfsStatisticPeriodType is not null)

							--idfsArea
							insert into dbo.tauDataAuditDetailUpdate(
								idfDataAuditEvent, 
								idfObjectTable, 
								idfColumn, 
								idfObject, 
								idfObjectDetail, 
								strOldValue, 
								strNewValue)
							select 
								@idfDataAuditEvent,
								@idfObjectTable_tlbStatistic, 
								80390000000,
								a.idfStatistic,
								null,
								a.idfsArea,
								b.idfsArea 
							from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
							where (a.idfsArea <> b.idfsArea) 
								or(a.idfsArea is not null and b.idfsArea is null)
								or(a.idfsArea is null and b.idfsArea is not null)

							--datStatisticStartDate
							insert into dbo.tauDataAuditDetailUpdate(
								idfDataAuditEvent, 
								idfObjectTable, 
								idfColumn, 
								idfObject, 
								idfObjectDetail, 
								strOldValue, 
								strNewValue)
							select 
								@idfDataAuditEvent,
								@idfObjectTable_tlbStatistic, 
								80380000000,
								a.idfStatistic,
								null,
								a.datStatisticStartDate,
								b.datStatisticStartDate 
							from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
							where (a.datStatisticStartDate <> b.datStatisticStartDate) 
								or(a.datStatisticStartDate is not null and b.datStatisticStartDate is null)
								or(a.datStatisticStartDate is null and b.datStatisticStartDate is not null)
								
							--datStatisticFinishDate
							insert into dbo.tauDataAuditDetailUpdate(
								idfDataAuditEvent, 
								idfObjectTable, 
								idfColumn, 
								idfObject, 
								idfObjectDetail, 
								strOldValue, 
								strNewValue)
							select 
								@idfDataAuditEvent,
								@idfObjectTable_tlbStatistic, 
								80370000000,
								a.idfStatistic,
								null,
								a.datStatisticFinishDate,
								b.datStatisticFinishDate 
							from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
							where (a.datStatisticFinishDate <> b.datStatisticFinishDate) 
								or(a.datStatisticFinishDate is not null and b.datStatisticFinishDate is null)
								or(a.datStatisticFinishDate is null and b.datStatisticFinishDate is not null)

							--varValue
							insert into dbo.tauDataAuditDetailUpdate(
								idfDataAuditEvent, 
								idfObjectTable, 
								idfColumn, 
								idfObject, 
								idfObjectDetail, 
								strOldValue, 
								strNewValue)
							select 
								@idfDataAuditEvent,
								@idfObjectTable_tlbStatistic, 
								80440000000,
								a.idfStatistic,
								null,
								a.varValue,
								b.varValue 
							from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
							where (a.varValue <> b.varValue) 
								or(a.varValue is not null and b.varValue is null)
								or(a.varValue is null and b.varValue is not null)

							--idfsStatisticalAgeGroup
							insert into dbo.tauDataAuditDetailUpdate(
								idfDataAuditEvent, 
								idfObjectTable, 
								idfColumn, 
								idfObject, 
								idfObjectDetail, 
								strOldValue, 
								strNewValue)
							select 
								@idfDataAuditEvent,
								@idfObjectTable_tlbStatistic, 
								12014500000000,
								a.idfStatistic,
								null,
								a.idfsStatisticalAgeGroup,
								b.idfsStatisticalAgeGroup 
							from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
							where (a.idfsStatisticalAgeGroup <> b.idfsStatisticalAgeGroup) 
								or(a.idfsStatisticalAgeGroup is not null and b.idfsStatisticalAgeGroup is null)
								or(a.idfsStatisticalAgeGroup is null and b.idfsStatisticalAgeGroup is not null)

						--END: DataAudit-- 

				END

			-- update record with the passed in @idfStatistic (does not happen during bulk import)
			ELSE 

				--print '@idfStatistic was passed in (does not happen during bulk import)'

				--BEGIN: DataAudit-- 
				
					--  tauDataAuditEvent  Event Type - Edit 
					set @idfsDataAuditEventType = 10016003;
			
					-- insert record into tauDataAuditEvent - 
					INSERT INTO @SupressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfStatistic, @idfObjectTable_tlbStatistic, @idfDataAuditEvent OUTPUT						

					INSERT INTO @tlbStatistic_BeforeEdit(
						idfStatistic,
						idfsStatisticDataType, 
						idfsMainBaseReference, 
						idfsStatisticAreaType, 
						idfsStatisticPeriodType, 
						idfsArea,
						datStatisticStartDate,
						datStatisticFinishDate,
						varValue,
						idfsStatisticalAgeGroup
						)
					SELECT 
						idfStatistic,
						idfsStatisticDataType, 
						idfsMainBaseReference, 
						idfsStatisticAreaType, 
						idfsStatisticPeriodType, 
						idfsArea,
						datStatisticStartDate,
						datStatisticFinishDate,
						varValue,
						idfsStatisticalAgeGroup				
						FROM tlbStatistic WHERE idfStatistic = @idfStatistic;

				--END: DataAudit-- 

				UPDATE	tlbStatistic
				SET		idfsStatisticDataType = @idfsStatisticDataType,
						idfsMainBaseReference = @idfsMainBaseReference,
						idfsStatisticAreaType = @idfsStatisticAreaType,
						idfsStatisticPeriodType = @idfsStatisticPeriodType,
						idfsArea = CASE ISNULL(@LocationUserControlidfsSettlement , '') 
							WHEN '' THEN
								CASE ISNULL(@LocationUserControlidfsRayon, '') 
								WHEN '' THEN
									CASE ISNULL(@LocationUserControlidfsRegion,'')
										WHEN '' THEN
											@LocationUserControlidfsCountry 
										ELSE 
											@LocationUserControlidfsRegion
										END
								ELSE 
										@LocationUserControlidfsRayon 
								END 
							ELSE 
								@LocationUserControlidfsSettlement  
							END,
						datStatisticStartDate = @datStatisticStartDate,
						datStatisticFinishDate = @datStatisticFinishDate,
						varValue = CAST(@varValue AS INT),
						idfsStatisticalAgeGroup = @idfsStatisticalAgeGroup
				WHERE 	idfStatistic = @idfStatistic

				--BEGIN: DataAudit-- 

					INSERT INTO @tlbStatistic_AfterEdit(
						idfStatistic,
						idfsStatisticDataType, 
						idfsMainBaseReference, 
						idfsStatisticAreaType, 
						idfsStatisticPeriodType, 
						idfsArea,
						datStatisticStartDate,
						datStatisticFinishDate,
						varValue,
						idfsStatisticalAgeGroup
						)
					SELECT 
						idfStatistic,
						idfsStatisticDataType, 
						idfsMainBaseReference, 
						idfsStatisticAreaType, 
						idfsStatisticPeriodType, 
						idfsArea,
						datStatisticStartDate,
						datStatisticFinishDate,
						varValue,
						idfsStatisticalAgeGroup				
						FROM tlbStatistic WHERE idfStatistic = @idfStatistic;

					--idfsStatisticDataType
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_tlbStatistic, 
						80410000000,
						a.idfStatistic,
						null,
						a.idfsStatisticDataType,
						b.idfsStatisticDataType 
					from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
					where (a.idfsStatisticDataType <> b.idfsStatisticDataType) 
						or(a.idfsStatisticDataType is not null and b.idfsStatisticDataType is null)
						or(a.idfsStatisticDataType is null and b.idfsStatisticDataType is not null)

					--idfsMainBaseReference
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_tlbStatistic, 
						4577930000000,
						a.idfStatistic,
						null,
						a.idfsMainBaseReference,
						b.idfsMainBaseReference 
					from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
					where (a.idfsMainBaseReference <> b.idfsMainBaseReference) 
						or(a.idfsMainBaseReference is not null and b.idfsMainBaseReference is null)
						or(a.idfsMainBaseReference is null and b.idfsMainBaseReference is not null)

					--idfsStatisticAreaType
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_tlbStatistic, 
						80400000000,
						a.idfStatistic,
						null,
						a.idfsStatisticAreaType,
						b.idfsStatisticAreaType 
					from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
					where (a.idfsStatisticAreaType <> b.idfsStatisticAreaType) 
						or(a.idfsStatisticAreaType is not null and b.idfsStatisticAreaType is null)
						or(a.idfsStatisticAreaType is null and b.idfsStatisticAreaType is not null)

					--idfsStatisticPeriodType
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_tlbStatistic, 
						80420000000,
						a.idfStatistic,
						null,
						a.idfsStatisticPeriodType,
						b.idfsStatisticPeriodType 
					from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
					where (a.idfsStatisticPeriodType <> b.idfsStatisticPeriodType) 
						or(a.idfsStatisticPeriodType is not null and b.idfsStatisticPeriodType is null)
						or(a.idfsStatisticPeriodType is null and b.idfsStatisticPeriodType is not null)

					--idfsArea
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_tlbStatistic, 
						80390000000,
						a.idfStatistic,
						null,
						a.idfsArea,
						b.idfsArea 
					from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
					where (a.idfsArea <> b.idfsArea) 
						or(a.idfsArea is not null and b.idfsArea is null)
						or(a.idfsArea is null and b.idfsArea is not null)

					--datStatisticStartDate
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_tlbStatistic, 
						80380000000,
						a.idfStatistic,
						null,
						a.datStatisticStartDate,
						b.datStatisticStartDate 
					from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
					where (a.datStatisticStartDate <> b.datStatisticStartDate) 
						or(a.datStatisticStartDate is not null and b.datStatisticStartDate is null)
						or(a.datStatisticStartDate is null and b.datStatisticStartDate is not null)
								
					--datStatisticFinishDate
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_tlbStatistic, 
						80370000000,
						a.idfStatistic,
						null,
						a.datStatisticFinishDate,
						b.datStatisticFinishDate 
					from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
					where (a.datStatisticFinishDate <> b.datStatisticFinishDate) 
						or(a.datStatisticFinishDate is not null and b.datStatisticFinishDate is null)
						or(a.datStatisticFinishDate is null and b.datStatisticFinishDate is not null)

					--varValue
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_tlbStatistic, 
						80440000000,
						a.idfStatistic,
						null,
						a.varValue,
						b.varValue 
					from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
					where (a.varValue <> b.varValue) 
						or(a.varValue is not null and b.varValue is null)
						or(a.varValue is null and b.varValue is not null)

					--idfsStatisticalAgeGroup
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_tlbStatistic, 
						12014500000000,
						a.idfStatistic,
						null,
						a.idfsStatisticalAgeGroup,
						b.idfsStatisticalAgeGroup 
					from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
					where (a.idfsStatisticalAgeGroup <> b.idfsStatisticalAgeGroup) 
						or(a.idfsStatisticalAgeGroup is not null and b.idfsStatisticalAgeGroup is null)
						or(a.idfsStatisticalAgeGroup is null and b.idfsStatisticalAgeGroup is not null)

				--END: DataAudit-- 

		-- Commit the transaction
		IF @@TRANCOUNT > 0
			COMMIT  
		
		Select @returnCode 'ReturnCode', @returnMsg 'ReturnMessage' , @idfStatistic 'idfStatistic'
	END TRY  

	BEGIN CATCH  

		-- Execute error retrieval routine. 
		IF @@TRANCOUNT > 0
			BEGIN
				ROLLBACK


			END;
			Throw;		
	END CATCH; 
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_TESTTOTESTRESULTMATRIX_DEL]...';


GO
-- =========================================================================================
-- NAME: USP_CONF_TESTTOTESTRESULTMATRIX_DEL
-- DESCRIPTION: Deactivates a test to test result relationship

-- AUTHOR: Ricky Moss

-- Revision History:
-- Name             Date        Change Detail
-- ---------------- ---------- -----------------------------------------------
-- Ricky Moss		03/08/2019	Initial Release
-- Ricky Moss		03/27/2019	Added delete anyway field
--
-- exec USP_CONF_TESTTOTESTRESULTMATRIX_DEL 19000097, 803960000000, 807830000000, 0
-- exec USP_CONF_TESTTOTESTRESULTMATRIX_DEL 19000104, 6618660000000, 808040000000, 0
-- ========================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_TESTTOTESTRESULTMATRIX_DEL]
(
	@idfsTestResultRelation BIGINT,
	@idfsTestName BIGINT,
	@idfsTestResult BIGINT,
	@deleteAnyway BIT,
	@AuditUserName NVARCHAR(200)
)
AS
DECLARE @returnCode					INT = 0  
DECLARE	@returnMsg					NVARCHAR(max) = 'SUCCESS' 

declare @idfUserId BIGINT =NULL;
declare @idfSiteId BIGINT = NULL;
declare @idfsDataAuditEventType bigint = 10016002;
declare @idfsObjectType bigint = 10017055;
declare @idfObject bigint = @idfsTestName;
declare @idfObjectTable_tlbTestMatrix bigint = 76020000000;
declare @idfDataAuditEvent bigint= NULL; 
-- Get and Set UserId and SiteId
select @idfUserId =userInfo.UserId, @idfSiteId=UserInfo.SiteId from dbo.FN_UserSiteInformation(@AuditUserName) userInfo

BEGIN
	BEGIN TRY
		IF @idfsTestResultRelation = 19000097
		BEGIN
			UPDATE trtTestTypeToTestResult SET intRowStatus = 1 WHERE idfsTestName = @idfsTestName AND idfsTestResult = @idfsTestResult AND intRowStatus = 0
			
			EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbTestMatrix, @idfDataAuditEvent OUTPUT
			insert into dbo.tauDataAuditDetailUpdate (idfDataAuditEvent, idfObjectTable, idfColumn, idfObject, idfObjectDetail, strOldValue, strNewValue)
			values (@idfDataAuditEvent,@idfObjectTable_tlbTestMatrix, 4578170000000,@idfObject,null,0,1) 
		END
		ELSE
		BEGIN
			UPDATE trtPensideTestTypeToTestResult SET intRowStatus = 1 WHERE idfsPensideTestName = @idfsTestName AND idfsPensideTestResult = @idfsTestResult AND intRowStatus = 0
			
			set @idfObjectTable_tlbTestMatrix =75910000000;
			EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbTestMatrix, @idfDataAuditEvent OUTPUT
			insert into dbo.tauDataAuditDetailUpdate (idfDataAuditEvent, idfObjectTable, idfColumn, idfObject, idfObjectDetail, strOldValue, strNewValue)
			values (@idfDataAuditEvent,@idfObjectTable_tlbTestMatrix, 4578170000000,@idfObject,null,0,1) 
		END
		SELECT @returnCode 'ReturnCode', @returnMsg 'ReturnMessage'
	END TRY
	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_TESTTOTESTRESULTMATRIX_SET]...';


GO
-- ================================================================================================
-- Name: USP_CONF_TESTTOTESTRESULTMATRIX_SET
--
-- Description:	Creates a test to test result matrix
--                      
-- Author: Ricky Moss
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		03/11/2018 Initial release.
-- Stephen Long     07/13/2022 Added site alert logic.
--
-- exec USP_CONF_TESTTOTESTRESULTMATRIX_SET 803960000000, '807830000000, 807990000000, 808040000000', 0
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_TESTTOTESTRESULTMATRIX_SET]
(
    @idfsTestResultRelation BIGINT,
    @idfsTestName BIGINT,
    @idfsTestResult BIGINT,
    @blnIndicative BIT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
        @ReturnCode BIGINT = 0,
        @EventId BIGINT = -1,
        @EventSiteId BIGINT = @SiteId,
        @EventUserId BIGINT = @UserId,
        @EventDiseaseId BIGINT = NULL,
        @EventLocationId BIGINT = @LocationId,
        @EventInformationString NVARCHAR(MAX) = NULL,
        @EventLoginSiteId BIGINT = @SiteId;
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage NVARCHAR(MAX)
);

--Data Audit--
declare @idfUserId BIGINT =NULL;
declare @idfSiteId BIGINT = NULL;
declare @idfsDataAuditEventType bigint =NULL;
declare @idfsObjectType bigint = 10017055;
declare @idfObject bigint = NULL;
declare @idfObjectTable_tlbTestMatrix bigint = 76020000000;
declare @idfDataAuditEvent bigint= NULL; 

DECLARE @tlbTestMatrix_BeforeEdit TABLE
(
	blnIndicative BIT,
	idfsTestResult BIGINT,
	idfsTestName BIGINT,
	intRowStatus INT
)
DECLARE @tlbTestMatrix_AfterEdit TABLE
(
	blnIndicative BIT,
	idfsTestResult BIGINT,
	idfsTestName BIGINT,
	intRowStatus INT
)

-- Get and Set UserId and SiteId
select @idfUserId =userInfo.UserId, @idfSiteId=UserInfo.SiteId from dbo.FN_UserSiteInformation(@AuditUserName) userInfo
--Data Audit--

BEGIN
    BEGIN TRY 
        IF @idfsTestResultRelation = 19000097
        BEGIN
            IF NOT EXISTS
            (
                SELECT idfsTestResult
                FROM dbo.trtTestTypeToTestResult
                WHERE idfsTestResult = @idfsTestResult
                      AND idfsTestName = @idfsTestName
            )
            BEGIN
                INSERT INTO dbo.trtTestTypeToTestResult
                (
                    idfsTestName,
                    idfsTestResult,
                    blnIndicative,
                    intRowStatus,
                    AuditCreateDTM,
                    AuditCreateUser
                )
                VALUES
                (@idfsTestName, @idfsTestResult, @blnIndicative, 0, GETDATE(), @AuditUserName);
				
				--Data Audit--
				-- tauDataAuditEvent Event Type - Create 
				set @idfObject = @idfsTestName;
				set @idfObjectTable_tlbTestMatrix =76020000000;
				set @idfsDataAuditEventType =10016001;
						-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbTestMatrix, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
					values ( @idfDataAuditEvent, @idfObjectTable_tlbTestMatrix, @idfObject)
				--Data Audit--
            END
            ELSE IF EXISTS
            (
                SELECT idfsTestResult
                FROM dbo.trtTestTypeToTestResult
                WHERE idfsTestResult = @idfsTestResult
                      AND idfsTestName = @idfsTestName
            )
            BEGIN

				insert into @tlbTestMatrix_BeforeEdit (idfsTestName, idfsTestResult, blnIndicative, intRowStatus)
				select idfsTestName, idfsTestResult, blnIndicative, intRowStatus 
					from trtTestTypeToTestResult WHERE idfsTestResult = @idfsTestResult AND idfsTestName = @idfsTestName

                UPDATE dbo.trtTestTypeToTestResult
                SET intRowStatus = 0,
                    blnIndicative = @blnIndicative,
                    AuditUpdateDTM = GETDATE(), 
                    AuditUpdateUser = @AuditUserName
                WHERE idfsTestResult = @idfsTestResult
                      AND idfsTestName = @idfsTestName;
				insert into @tlbTestMatrix_AfterEdit (idfsTestName, idfsTestResult, blnIndicative, intRowStatus)
				select idfsTestName, idfsTestResult, blnIndicative, intRowStatus 
					from trtTestTypeToTestResult WHERE idfsTestResult = @idfsTestResult AND idfsTestName = @idfsTestName

				--DataAudit-- 
				insert into @tlbTestMatrix_AfterEdit (idfsTestName, idfsTestResult, blnIndicative, intRowStatus)
				select idfsTestName, idfsTestResult, blnIndicative, intRowStatus 
					from trtTestTypeToTestResult WHERE idfsTestResult = @idfsTestResult AND idfsTestName = @idfsTestName

				IF EXISTS 
				(
					select *
					from @tlbTestMatrix_BeforeEdit a  inner join @tlbTestMatrix_AfterEdit b on a.idfsTestResult = b.idfsTestResult and a.idfsTestName = b.idfsTestName 
					where (ISNULL(a.blnIndicative,'') <> ISNULL(b.blnIndicative,'')) OR (ISNULL(a.intRowStatus,'') <> ISNULL(b.intRowStatus,''))
				)
				BEGIN
					--  tauDataAuditEvent  Event Type- Edit 
					set @idfsDataAuditEventType = 10016003;
					Set @idfObject = @idfsTestName
					-- insert record into tauDataAuditEvent - 
					INSERT INTO @SuppressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbTestMatrix, @idfDataAuditEvent OUTPUT

					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, idfObjectTable, idfColumn, 
						idfObject, idfObjectDetail, 
						strOldValue, strNewValue)
					select @idfDataAuditEvent,@idfObjectTable_tlbTestMatrix, 4578170000000,
						@idfObject,null,
						a.blnIndicative,b.blnIndicative 
					from @tlbTestMatrix_BeforeEdit a  inner join @tlbTestMatrix_AfterEdit b on a.idfsTestResult = b.idfsTestResult and a.idfsTestName = b.idfsTestName 
					where (ISNULL(a.blnIndicative,'') <> ISNULL(b.blnIndicative,'')) 
				END

				set @ReturnCode = 6
				set @ReturnMessage = 'EXISTS'
            END
        END
        ELSE
        BEGIN
            --creates new test for disease
            IF NOT EXISTS
            (
                SELECT idfsPensideTestResult
                FROM dbo.trtPensideTestTypeToTestResult
                WHERE idfsPensideTestResult = @idfsTestResult
                      AND idfsPensideTestName = @idfsTestName
            )
            BEGIN
                INSERT INTO dbo.trtPensideTestTypeToTestResult
                (
                    idfsPensideTestName,
                    idfsPensideTestResult,
                    blnIndicative,
                    intRowStatus,
                    AuditCreateDTM,
                    AuditCreateUser
                )
                VALUES
                (@idfsTestName, @idfsTestResult, @blnIndicative, 0, GETDATE(), @AuditUserName);

				--Data Audit--
				-- tauDataAuditEvent Event Type - Create 
				set @idfObject = @idfsTestName;
				set @idfObjectTable_tlbTestMatrix =75910000000;
				set @idfsDataAuditEventType =10016001;
						-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbTestMatrix, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
					values ( @idfDataAuditEvent, @idfObjectTable_tlbTestMatrix, @idfObject)
				--Data Audit--
            END
            ELSE IF EXISTS
            (
                SELECT idfsTestResult
                FROM dbo.trtTestTypeToTestResult
                WHERE idfsTestResult = @idfsTestResult
                      AND idfsTestName = @idfsTestName
            )
            BEGIN
			
				insert into @tlbTestMatrix_BeforeEdit (idfsTestName, idfsTestResult, blnIndicative, intRowStatus)
				select idfsTestName, idfsTestResult, blnIndicative, intRowStatus 
					from trtTestTypeToTestResult WHERE idfsTestResult = @idfsTestResult AND idfsTestName = @idfsTestName
		 
                UPDATE dbo.trtTestTypeToTestResult
                SET intRowStatus = 0,
                    blnIndicative = @blnIndicative, 
                    AuditUpdateDTM = GETDATE(), 
                    AuditUpdateUser = @AuditUserName 
                WHERE idfsTestResult = @idfsTestResult
                      AND idfsTestName = @idfsTestName;
				set @ReturnCode = 6
				set @ReturnMessage = 'EXISTS'
			 
				insert into @tlbTestMatrix_AfterEdit (idfsTestName, idfsTestResult, blnIndicative, intRowStatus)
				select idfsTestName, idfsTestResult, blnIndicative, intRowStatus 
					from trtTestTypeToTestResult WHERE idfsTestResult = @idfsTestResult AND idfsTestName = @idfsTestName

				--DataAudit-- 
				IF EXISTS 
				(
					select *
					from @tlbTestMatrix_BeforeEdit a  inner join @tlbTestMatrix_AfterEdit b on a.idfsTestResult = b.idfsTestResult and a.idfsTestName = b.idfsTestName 
					where (ISNULL(a.blnIndicative,'') <> ISNULL(b.blnIndicative,'')) OR (ISNULL(a.intRowStatus,'') <> ISNULL(b.intRowStatus,''))
				)
				BEGIN
					--  tauDataAuditEvent  Event Type- Edit 
					set @idfsDataAuditEventType = 10016003;
					Set @idfObject = @idfsTestName
					-- insert record into tauDataAuditEvent - 
					INSERT INTO @SuppressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbTestMatrix, @idfDataAuditEvent OUTPUT

					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, idfObjectTable, idfColumn, 
						idfObject, idfObjectDetail, 
						strOldValue, strNewValue)
					select @idfDataAuditEvent,@idfObjectTable_tlbTestMatrix, 4578170000000,
						@idfObject,null,
						a.blnIndicative,b.blnIndicative 
					from @tlbTestMatrix_BeforeEdit a  inner join @tlbTestMatrix_AfterEdit b on a.idfsTestResult = b.idfsTestResult and a.idfsTestName = b.idfsTestName 
					where (ISNULL(a.blnIndicative,'') <> ISNULL(b.blnIndicative,'')) 
				END
            END
        END

        INSERT INTO @SuppressSelect 
        EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                        @EventTypeId,
                                        @EventUserId,
                                        @idfsTestName,
                                        @EventDiseaseId,
                                        @EventSiteId,
                                        @EventInformationString,
                                        @EventLoginSiteId,
                                        @EventLocationId,
                                        @AuditUserName;

        SELECT @ReturnCode AS 'ReturnCode',
               @ReturnMessage AS 'ReturnMessage',
               @idfsTestName AS 'idfsTestName';
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_TEST_DISEASE_GETList]...';


GO

-- ============================================================================
-- Name: USP_GBL_TEST_DISEASE_GETList
--
-- Description:	Get test name and category types by disease matrix list.
--                      
-- Revision History:
-- Name             Date		Change Detail
-- ---------------- ----------	-----------------------------------------------
-- Stephen Long     10/12/2018	Initial release.
-- Stephen Long     02/01/2019	Added disease ID column and modified where 
--								clause to IN from wild card.
-- Doug Albanese	01/04/2022	Corrected the use of DiseaseIDList to operate as a table of data
-- Mani Govindarajan 04/04/2023 Added else condition for non filtered by disease.

-- ============================================================================
ALTER PROCEDURE [dbo].[USP_GBL_TEST_DISEASE_GETList] (
	@LanguageID NVARCHAR(50),
	@DiseaseIDList VARCHAR(MAX) =NULL
	)
AS
BEGIN
	SET NOCOUNT ON;


	BEGIN TRY
		IF (@DiseaseIDList IS NOT NULL)
		BEGIN
			SELECT distinct td.idfsTestName AS TestNameTypeID,
				testNameType.name AS TestNameTypeName,
				td.idfsTestCategory AS TestCategoryTypeID,
				testCategoryType.name AS TestCategoryTypeName,
				td.idfsDiagnosis AS DiseaseID
			FROM dbo.trtTestForDisease td
			LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) AS testNameType
				ON testNameType.idfsReference = td.idfsTestName
			LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) AS testCategoryType
				ON testCategoryType.idfsReference = td.idfsTestCategory
			LEFT JOIN dbo.trtTestForDiseaseToCP tdcp
				ON tdcp.idfTestForDisease = td.idfTestForDisease
					WHERE td.idfsDiagnosis IN (select * from STRING_SPLIT(@DiseaseIDList,','))
				AND td.intRowStatus = 0-- and testNameType.intHACode=2 --and td.idfsTestCategory is NOT NULL
			GROUP BY td.idfsTestName,
				testNameType.name,
				td.idfsTestCategory,
				testCategoryType.name,
				td.idfsDiagnosis;
		END
		ELSE
		BEGIN

			SELECT td.idfsTestName AS TestNameTypeID,
				testNameType.name AS TestNameTypeName,
				NULL AS TestCategoryTypeID,
				NULL AS TestCategoryTypeName,
				cast(0 as bigint) as DiseaseID

			FROM dbo.trtTestForDisease td
			LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) AS testNameType
				ON testNameType.idfsReference = td.idfsTestName
			LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) AS testCategoryType
				ON testCategoryType.idfsReference = td.idfsTestCategory
			--LEFT JOIN dbo.trtTestForDiseaseToCP tdcp
				--ON tdcp.idfTestForDisease = td.idfTestForDisease
			WHERE td.intRowStatus = 0 --and testNameType.intHACode=2 --and td.idfsTestCategory is NOT NULL
			GROUP BY td.idfsTestName,
				testNameType.name
				--td.idfsTestCategory,
				--testCategoryType.name
				--,td.idfsDiagnosis;
		END

	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_HUMAN_MASTER_GETDetail]...';


GO
-- ================================================================================================
-- Name: USP_HUM_HUMAN_MASTER_GETDetail OLD
--
-- Description:	Get a human actual record
--          
-- Revision History:
-- Name				Date		Change Detail
-- ---------------	----------	--------------------------------------------------------------------
-- Mandar Kulkarni				Initial release.
-- Vilma Thomas		05/25/2018	Update the ReferenceType key from 19000167 to 19000500 for 'Contact 
--								Phone Type'
-- Stephen Long		11/26/2018	Update for the new API; remove returnCode and returnMsg.
-- Ann Xiong		08/30/2019	Added script to select PersonalIDTypeName, OccupationTypeName, 
--								SchoolCountry, 
--								SchoolRegion, SchoolRayon, SchoolSettlement for Person Deduplication.
-- Ann Xiong		09/09/2019	return haai.SchoolAddressID instead of haai.AltAddressID as 
--								SchoolGeoLocationID
-- Mark Wilson		10/29/2019	added Settlement Type to return
-- Ann Xiong		02/17/2020	Added IsAnotherPhone and Age to select
-- Ann Xiong		05/08/2020	Added YNAnotherAddress, YNHumanForeignAddress, 
--								YNEmployerForeignAddress, YNHumanAltForeignAddress, 
--								YNSchoolForeignAddress, YNWorkSameAddress to select
-- Stephen Long		07/07/2020	Changed v6.1 function call for create address string to v7 version.
-- Mark Wilson		09/20/2021	reworked the locations to use gisLocation and hierarchy
-- Mark Wilson		10/04/2021	Updated to pull location data from correct table
-- Mark Wilson		10/05/2021	Updated to use correct location references and udpate test code
-- Mark Wilson		10/06/2021	Added Alt Address fields
-- Mark Wilson		10/07/2021	Lat/Long only needed for Current Address and Foreign Address not needed for Permanent
-- Mark Wilson		10/12/2021  Added YNPermanentSameAddress, updated YNAnotherAddress
-- Leo Tracchia		05/13/2022	Added joins for Location hierachy
-- Ann Xiong		03/24/2020	Modified to return Age from DateofBirth for Person Deduplication when DateofBirth is not null but haai.ReportedAge and haai.ReportedAgeUOMID are null
--
/*Test Code

EXEC dbo.USP_HUM_HUMAN_MASTER_GETDetail
	@LangID = 'en-US',
	@HumanMasterID = 422849750000916


EXEC dbo.USP_HUM_HUMAN_MASTER_GETDetail
	@LangID = 'az-Latn-AZ',
	@HumanMasterID = 411420970000870


EXEC dbo.USP_HUM_HUMAN_MASTER_GETDetail
	@LangID = 'en-US',
	@HumanMasterID = 413771740000870

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_HUMAN_MASTER_GETDetail] (
	@LangID NVARCHAR(20),
	@HumanMasterID BIGINT
	)
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY
		SELECT ISNULL(ha.strFirstName, '') + ' ' + ISNULL(ha.strLastName, '') AS PatientFarmOwnerName,
			haai.EIDSSPersonId AS EIDSSPersonID,
			ha.idfsOccupationType AS OccupationTypeID,
			ha.idfsNationality AS CitizenshipTypeID,
			citizenshipType.name AS CitizenshipTypeName,
			ha.idfsHumanGender AS GenderTypeID,
			tb.name AS GenderTypeName,

			-- Current Address
			ha.idfCurrentResidenceAddress AS HumanGeoLocationID,
			lhHuman.AdminLevel1ID AS HumanidfsCountry,
			lhHuman.AdminLevel1Name AS HumanCountry,
			lhHuman.AdminLevel2ID AS HumanidfsRegion,
			lhHuman.AdminLevel2Name AS HumanRegion,
			lhHuman.AdminLevel3ID AS HumanidfsRayon,
			lhHuman.AdminLevel3Name AS HumanRayon,
			lhHuman.AdminLevel4ID AS HumanidfsSettlement,
			lhHuman.AdminLevel4Name AS HumanSettlement,			
			HL.idfsType AS HumanidfsSettlementType,
			humanSettlementType.[name] AS HumanSettlementType,
			tglHuman.strPostCode AS HumanstrPostalCode,
			tglHuman.strStreetName AS HumanstrStreetName,
			tglHuman.strHouse AS HumanstrHouse,
			tglHuman.strBuilding AS HumanstrBuilding,
			tglHuman.strApartment AS HumanstrApartment,
			tglHuman.strDescription AS HumanDescription,
			tglHuman.dblLatitude AS HumanstrLatitude,
			tglHuman.dblLongitude AS HumanstrLongitude,
			tglHuman.blnForeignAddress AS HumanForeignAddressIndicator,
			tglHuman.strForeignAddress AS HumanForeignAddressString,

			-- Employer Address
			ha.idfEmployerAddress AS EmployerGeoLocationID,
			lhEmployer.AdminLevel1ID AS EmployeridfsCountry,
			lhEmployer.AdminLevel1Name AS EmployerCountry,
			lhEmployer.AdminLevel2ID AS EmployeridfsRegion,
			lhEmployer.AdminLevel2Name AS EmployerRegion,
			lhEmployer.AdminLevel3ID AS EmployeridfsRayon,
			lhEmployer.AdminLevel3Name AS EmployerRayon,
			lhEmployer.AdminLevel4ID AS EmployeridfsSettlement,
			lhEmployer.AdminLevel4Name AS EmployerSettlement,
			EA.idfsType AS EmployeridfsSettlementType,
			EmpSettlementType.strDefault AS EmployerSettlementType,
			tglEmployer.strPostCode AS EmployerstrPostalCode,
			tglEmployer.strStreetName AS EmployerstrStreetName,
			tglEmployer.strHouse AS EmployerstrHouse,
			tglEmployer.strBuilding AS EmployerstrBuilding,
			tglEmployer.strApartment AS EmployerstrApartment,
			tglEmployer.strDescription AS EmployerDescription,
			tglEmployer.blnForeignAddress AS EmployerForeignAddressIndicator,
			tglEmployer.strForeignAddress AS EmployerForeignAddressString,

			-- Permanent Address
			ha.idfRegistrationAddress AS HumanPermGeoLocationID,
			lhPerm.AdminLevel1ID AS HumanPermidfsCountry,
			lhPerm.AdminLevel1Name AS HumanPermCountry,
			lhPerm.AdminLevel2ID AS HumanPermidfsRegion,
			lhPerm.AdminLevel2Name AS HumanPermRegion,
			lhPerm.AdminLevel3ID AS HumanPermidfsRayon,
			lhPerm.AdminLevel3Name AS HumanPermRayon,
			lhPerm.AdminLevel4ID HumanPermidfsSettlement,
			lhPerm.AdminLevel4Name AS HumanPermSettlement,
			registrationLocation.idfsType AS HumanPermidfsSettlementType,
			registrationSettlementType.[name] AS HumanPermSettlementType,
			tglRegistrationAddress.strPostCode AS HumanPermstrPostalCode,
			tglRegistrationAddress.strStreetName AS HumanPermstrStreetName,
			tglRegistrationAddress.strHouse AS HumanPermstrHouse,
			tglRegistrationAddress.strBuilding AS HumanPermstrBuilding,
			tglRegistrationAddress.strApartment AS HumanPermstrApartment,
			tglRegistrationAddress.strDescription AS HumanPermDescription,

			-- Alternate Address
			haai.AltAddressID AS HumanAltGeoLocationID,
			lhAlt.AdminLevel1ID AS HumanAltidfsCountry,
			lhAlt.AdminLevel1Name AS HumanAltCountry,
			lhAlt.AdminLevel2ID AS HumanAltidfsRegion,
			lhAlt.AdminLevel2Name AS HumanAltRegion,
			lhAlt.AdminLevel3ID AS HumanAltidfsRayon,
			lhAlt.AdminLevel3Name AS HumanAltRayon,
			lhAlt.AdminLevel4ID HumanAltidfsSettlement,
			lhAlt.AdminLevel4Name AS HumanAltSettlement,
			AltLocation.idfsType AS HumanAltidfsSettlementType,
			AltSettlementType.[name] AS HumanAltSettlementType,
			tglAlt.strPostCode AS HumanAltstrPostalCode,
			tglAlt.strStreetName AS HumanAltstrStreetName,
			tglAlt.strHouse AS HumanAltstrHouse,
			tglAlt.strBuilding AS HumanAltstrBuilding,
			tglAlt.strApartment AS HumanAltstrApartment,
			tglAlt.strDescription AS HumanAltDescription,
			tglAlt.blnForeignAddress AS HumanAltForeignAddressIndicator,
			tglAlt.strForeignAddress AS HumanAltForeignAddressString,

			-- School Address
			haai.SchoolAddressID AS SchoolGeoLocationID,
			lhSchool.AdminLevel1ID AS SchoolidfsCountry,
			lhSchool.AdminLevel1Name AS SchoolCountry,
			lhSchool.AdminLevel2ID AS SchoolidfsRegion,
			lhSchool.AdminLevel2Name AS SchoolRegion,
			lhSchool.AdminLevel3ID AS SchoolidfsRayon,
			lhSchool.AdminLevel3Name AS SchoolRayon,
			lhSchool.AdminLevel4ID AS SchoolidfsSettlement,
			lhSchool.AdminLevel4Name AS SchoolSettlement,
			SchoolLocation.idfsType AS SchoolAltidfsSettlementType,
			SchoolSettlementType.strDefault AS SchoolAltSettlementType,
			tglSchool.strPostCode AS SchoolstrPostalCode,
			tglSchool.strStreetName AS SchoolstrStreetName,
			tglSchool.strHouse AS SchoolstrHouse,
			tglSchool.strBuilding AS SchoolstrBuilding,
			tglSchool.strApartment AS SchoolstrApartment,
			tglSchool.blnForeignAddress AS SchoolForeignAddressIndicator,
			tglSchool.strForeignAddress AS SchoolForeignAddressString,

			dbo.FN_GBL_FormatDate(ha.datDateofBirth, 'mm/dd/yyyy') AS DateOfBirth,
			dbo.FN_GBL_FormatDate(ha.datDateOfDeath, 'mm/dd/yyyy') AS DateOfDeath,
			dbo.FN_GBL_FormatDate(ha.datEnteredDate, 'mm/dd/yyyy') AS EnteredDate,
			dbo.FN_GBL_FormatDate(ha.datModificationDate, 'mm/dd/yyyy') AS ModificationDate,
			ha.strFirstName AS FirstOrGivenName,
			ha.strSecondName AS SecondName,
			ha.strLastName AS LastOrSurname,
			ha.strEmployerName AS EmployerName,
			ha.strHomePhone AS HomePhone,
			ha.strWorkPhone AS WorkPhone,
			ha.idfsPersonIDType AS PersonalIDType,
			ha.strPersonID AS PersonalID,
			haai.ReportedAge,
			haai.ReportedAgeUOMID,
			haai.PassportNbr AS PassportNumber,
			haai.IsEmployedID AS IsEmployedTypeID,
			isEmployed.name AS IsEmployedTypeName,
			haai.EmployerPhoneNbr AS EmployerPhone,
			haai.EmployedDTM AS EmployedDateLastPresent,
			haai.IsStudentID AS IsStudentTypeID,
			isStudent.name AS IsStudentTypeName,
			haai.SchoolName AS SchoolName,
			haai.SchoolLastAttendDTM AS SchoolDateLastAttended,
			haai.SchoolPhoneNbr AS SchoolPhone,
			haai.ContactPhoneCountryCode,
			haai.ContactPhoneNbr AS ContactPhone,
			haai.ContactPhoneNbrTypeID AS ContactPhoneTypeID,
			ContactPhoneNbrTypeID.name AS ContactPhoneTypeName,
			haai.ContactPhone2CountryCode,
			haai.ContactPhone2Nbr AS ContactPhone2,
			haai.ContactPhone2NbrTypeID AS ContactPhone2TypeID,
			ContactPhone2NbrTypeID.name AS ContactPhone2TypeName,
			personalIDType.name AS PersonalIDTypeName,
			occupationType.name AS OccupationTypeName,
			CASE 
				WHEN haai.ContactPhone2Nbr IS NULL
					AND haai.ContactPhone2NbrTypeID IS NULL
					THEN 'No'
				ELSE 'Yes'
				END AS IsAnotherPhone,
			--CAST(ISNULL(haai.ReportedAge, '') AS VARCHAR(3)) + ' ' + ISNULL(HumanAgeType.name, '') AS Age,
			CASE 
				WHEN haai.ReportedAge IS NULL AND haai.ReportedAgeUOMID IS NULL
					THEN (CASE 
							WHEN ha.datDateofBirth IS NOT NULL					
								THEN CAST(FLOOR(DATEDIFF(DAY, ha.datDateofBirth, GETDATE ())/365.242199) AS VARCHAR(3)) + ' ' + HumanAgeType.name
							ELSE ''
							END)
				ELSE CAST(ISNULL(haai.ReportedAge, '') AS VARCHAR(3)) + ' ' + ISNULL(HumanAgeType.name, '')
				END AS Age,

			CASE 
				WHEN ((ha.idfRegistrationAddress IS NOT NULL AND ha.idfRegistrationAddress > 0) OR (haai.AltAddressID IS NOT NULL AND haai.AltAddressID > 0))
					THEN 'Yes'
				ELSE 'No'
				END AS YNAnotherAddress,
			CASE 
				WHEN tglHuman.blnForeignAddress IS NOT NULL
					AND tglHuman.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNHumanForeignAddress,
			CASE 
				WHEN tglEmployer.blnForeignAddress IS NOT NULL
					AND tglEmployer.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNEmployerForeignAddress,
			CASE 
				WHEN tglRegistrationAddress.blnForeignAddress IS NOT NULL
					AND tglRegistrationAddress.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNHumPermForeignAddress,
			CASE 
				WHEN tglAlt.blnForeignAddress IS NOT NULL
					AND tglAlt.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNHumanAltForeignAddress,
			CASE 
				WHEN tglSchool.blnForeignAddress IS NOT NULL
					AND tglSchool.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNSchoolForeignAddress,
			CASE 
				WHEN dbo.FN_GBL_CreateAddressString(ISNULL(lhHuman.AdminLevel1Name, N''), ISNULL(lhHuman.AdminLevel2Name, N''), ISNULL(lhHuman.AdminLevel3Name, N''), ISNULL(tglHuman.strPostCode, N''), ISNULL(humanSettlementType.strDefault, N''), ISNULL(lhHuman.AdminLevel4Name, N''), ISNULL(tglHuman.strStreetName, N''), ISNULL(tglHuman.strHouse, N''), ISNULL(tglHuman.strBuilding, N''), ISNULL(tglHuman.strApartment, N''), ISNULL(tglHuman.blnForeignAddress, N''), ISNULL(tglHuman.strForeignAddress, N'')) = 
						dbo.FN_GBL_CreateAddressString(ISNULL(lhEmployer.AdminLevel1Name, N''), ISNULL(lhEmployer.AdminLevel2Name, N''), ISNULL(lhEmployer.AdminLevel3Name, N''), ISNULL(tglEmployer.strPostCode, N''), ISNULL(EmpSettlementType.strDefault, N''), ISNULL(lhEmployer.AdminLevel4Name, N''), ISNULL(tglEmployer.strStreetName, N''), ISNULL(tglEmployer.strHouse, N''), ISNULL(tglEmployer.strBuilding, N''), ISNULL(tglEmployer.strApartment, N''), ISNULL(tglEmployer.blnForeignAddress, N''), ISNULL(tglEmployer.strForeignAddress, N''))
					THEN 'Yes'
				ELSE 'No'
				END AS YNWorkSameAddress,
			CASE 
				WHEN dbo.FN_GBL_CreateAddressString(ISNULL(lhHuman.AdminLevel1Name, N''), ISNULL(lhHuman.AdminLevel2Name, N''), ISNULL(lhHuman.AdminLevel3Name, N''), ISNULL(tglHuman.strPostCode, N''), ISNULL(humanSettlementType.strDefault, N''), ISNULL(lhHuman.AdminLevel4Name, N''), ISNULL(tglHuman.strStreetName, N''), ISNULL(tglHuman.strHouse, N''), ISNULL(tglHuman.strBuilding, N''), ISNULL(tglHuman.strApartment, N''), ISNULL(tglHuman.blnForeignAddress, N''), ISNULL(tglHuman.strForeignAddress, N'')) = 
						dbo.FN_GBL_CreateAddressString(ISNULL(lhPerm.AdminLevel1Name, N''), ISNULL(lhPerm.AdminLevel2Name, N''), ISNULL(lhPerm.AdminLevel3Name, N''), ISNULL(tglRegistrationAddress.strPostCode, N''), ISNULL(registrationSettlementType.strDefault, N''), ISNULL(lhPerm.AdminLevel4Name, N''), ISNULL(tglRegistrationAddress.strStreetName, N''), ISNULL(tglRegistrationAddress.strHouse, N''), ISNULL(tglRegistrationAddress.strBuilding, N''), ISNULL(tglRegistrationAddress.strApartment, N''), ISNULL(tglRegistrationAddress.blnForeignAddress, N''), ISNULL(tglRegistrationAddress.strForeignAddress, N''))
					THEN 'Yes'
				ELSE 'No'
				END AS YNPermanentSameAddress 

		FROM dbo.tlbHumanActual ha

		LEFT JOIN dbo.HumanActualAddlinfo haai ON ha.idfHumanActual = haai.HumanActualAddlinfoUID
		LEFT JOIN dbo.tlbGeoLocationShared AS tglHuman ON ha.idfCurrentResidenceAddress = tglHuman.idfGeoLocationShared
		LEFT JOIN dbo.tlbGeoLocationShared AS tglEmployer ON ha.idfEmployerAddress = tglEmployer.idfGeoLocationShared
		LEFT JOIN dbo.tlbGeoLocationShared AS tglRegistrationAddress ON ha.idfRegistrationAddress = tglRegistrationAddress.idfGeoLocationShared
		LEFT JOIN dbo.tlbGeoLocationShared AS tglSchool ON haai.SchoolAddressID = tglSchool.idfGeoLocationShared
		LEFT JOIN dbo.tlbGeoLocationShared AS tglAlt ON haai.AltAddressID = tglAlt.idfGeoLocationShared
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000043) tb ON tb.idfsReference = ha.idfsHumanGender

		-- Current Address
		LEFT JOIN dbo.gisLocation HL ON HL.idfsLocation = tglHuman.idfsLocation	
		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhHuman ON lhHuman.idfsLocation = tglHuman.idfsLocation			
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001) AS humanCountry ON HL.node.IsDescendantOf(humanCountry.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003) AS humanRegion ON HL.node.IsDescendantOf(humanRegion.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000002) AS humanRayon ON HL.node.IsDescendantOf(humanRayon.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000004) AS humanSettlement ON HL.node.IsDescendantOf(humanSettlement.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS humanSettlementType ON humanSettlementType.idfsReference = HL.idfsType

		-- Employer address 
		LEFT JOIN dbo.gisLocation EA ON EA.idfsLocation = tglEmployer.idfsLocation
		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhEmployer ON lhEmployer.idfsLocation = tglEmployer.idfsLocation		
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001) AS ECountry ON EA.node.IsDescendantOf(Ecountry.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003) AS ERegion ON EA.node.IsDescendantOf(ERegion.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000002) AS ERayon ON EA.node.IsDescendantOf(ERayon.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000004) AS ESettlement ON EA.node.IsDescendantOf(ESettlement.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS EmpSettlementType ON EmpSettlementType.idfsReference = EA.idfsType

		-- Permanent address 
		LEFT JOIN dbo.gisLocation registrationLocation ON registrationLocation.idfsLocation = tglRegistrationAddress.idfsLocation
		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhPerm ON lhPerm.idfsLocation = tglRegistrationAddress.idfsLocation		
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001) AS registrationCountry ON registrationLocation.node.IsDescendantOf(registrationCountry.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003) AS registrationRegion ON registrationLocation.node.IsDescendantOf(registrationRegion.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000002) AS registrationRayon ON registrationLocation.node.IsDescendantOf(registrationRayon.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000004) AS registrationSettlement ON registrationLocation.node.IsDescendantOf(registrationSettlement.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS registrationSettlementType ON registrationSettlementType.idfsReference = registrationLocation.idfsType

		-- Alternate address - new for EIDSS7
		LEFT JOIN dbo.gisLocation AltLocation ON AltLocation.idfsLocation = tglAlt.idfsLocation
		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhAlt ON lhAlt.idfsLocation = tglAlt.idfsLocation		
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001) AS AltCountry ON AltLocation.node.IsDescendantOf(AltCountry.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003) AS AltRegion ON AltLocation.node.IsDescendantOf(AltRegion.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000002) AS AltRayon ON AltLocation.node.IsDescendantOf(AltRayon.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000004) AS AltSettlement ON AltLocation.node.IsDescendantOf(AltSettlement.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS AltSettlementType ON AltSettlementType.idfsReference = AltLocation.idfsType

		LEFT JOIN dbo.FN_GBL_Repair(@LangID, 19000100) isEmployed ON IsEmployed.idfsReference = haai.IsEmployedID
		LEFT JOIN dbo.FN_GBL_Repair(@LangID, 19000100) isStudent ON isStudent.idfsReference = haai.IsStudentID
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000054) AS citizenshipType ON ha.idfsNationality = citizenshipType.idfsReference
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000500) AS contactPhoneNbrTypeID ON contactPhoneNbrTypeID.idfsReference = haai.ContactPhoneNbrTypeID
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000500) AS contactPhone2NbrTypeID ON contactPhone2NbrTypeID.idfsReference = haai.ContactPhone2NbrTypeID
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000148) AS personalIDType ON ha.idfsPersonIDType = personalIDType.idfsReference
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000061) AS occupationType ON ha.idfsOccupationType = occupationType.idfsReference

		-- School address - E6 school address was originally stored in idfEmployerAddress with employment type = 'Student'
		LEFT JOIN dbo.gisLocation SchoolLocation ON SchoolLocation.idfsLocation = tglSchool.idfsLocation
		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhSchool ON lhSchool.idfsLocation = tglSchool.idfsLocation		
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001) AS schoolCountry ON SchoolLocation.node.IsDescendantOf(schoolCountry.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003) AS schoolRegion ON SchoolLocation.node.IsDescendantOf(schoolRegion.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000002) AS schoolRayon ON SchoolLocation.node.IsDescendantOf(schoolRayon.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000004) AS schoolSettlement ON SchoolLocation.node.IsDescendantOf(schoolSettlement.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS schoolSettlementType ON schoolSettlementType.idfsReference = SchoolLocation.idfsType


		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000042) AS HumanAgeType	ON (haai.ReportedAgeUOMID = HumanAgeType.idfsReference Or HumanAgeType.idfsReference = 10042003)



		WHERE ha.idfHumanActual = @HumanMasterID;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_HUMAN_MASTER_GETList]...';


GO
-- ================================================================================================
-- Name: USP_HUM_HUMAN_MASTER_GETList
--
-- Description: Get human actual list for human, laboratory and veterinary modules.
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mandar Kulkarni             Initial release.
-- Stephen Long     03/13/2018 Added additional address fields.
-- Stephen Long     08/23/2018 Added EIDSS person ID to list.
-- Stephen Long     09/26/2018 Added wildcard to the front of fields using the wildcard symbol, as 
--                             per use case.
-- Stephen Long		09/28/2018 Added order by and total records, as per use case.
-- Stephen Long     11/26/2018 Updated for the new API; removed returnCode and returnMsg. Total 
--                             records will need to be handled differently.
-- Stephen Long     12/14/2018 Added pagination set, page size and max pages per fetch parameters
--                             and fetch portion.
-- Stephen Long     12/30/2018 Renamed to master so the human get list stored procedure can query 
--                             the human table which is needed for the lab module instead of human 
--                             actual.
-- Stephen Long     01/18/2019 Changed date of birth to date of birth range, and duplicate check.
-- Stephen Long     04/08/2019 Changed full name from first name last name second name to last 
--                             name ', ' first name and then second name.
-- Stephen Long     07/07/2019 Added settlement ID and settlement name to select.
-- Ann Xiong	    10/29/2019 added PassportNumber to return
-- Ann Xiong		01/15/2020 Used humanAddress.strAddressString instead of 
--                             humanAddress.strForeignAddress for AddressString
-- Stephen Long     01/28/2021 Added order by clause to handle user selected sorting across 
--                             pagination sets.
-- Doug Albanese	06/11/2021 Refactored to conform to the new filtering requirements and return structure for our gridview.
-- Mark Wilson		10/05/2021 updated for changes to DOB rules, location udpates, etc...
-- Mark Wilson		10/26/2021 changed to nolock...
-- Ann Xiong		12/03/2021 Changed ha.datDateofBirth AS DateOfBirth to CONVERT(char(10), ha.datDateofBirth,126) AS DateOfBirth
-- Mike Kornegay	12/10/2021 Changed procedure to use denormailized location table function.
-- Mike Kornegay	01/12/2022 Swapped where condition referring to gisLocation for new flat location hierarchy and corrected ISNULL
--							   check on PersonalTypeID and fixed where statements on left joins.
-- Mike Kornegay	04/27/2022 Added AddressID and ContactPhoneNbrTypeID to revert fields after accidental alter.
-- Mike Kornegay	05/06/2022 Changed inner join to left join on FN_GBL_LocationHierarchy_Flattened so results return if location is not
--								in FN_GBL_LocationHierarchy_Flattened.
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Stephen Long     10/10/2022 Added monitoring session ID parameter and where criteria.
-- Ann Xiong		11/10/2022 Added SettlementTypeID parameter and where criteria.
-- Stephen Long     03/30/2023 Removed option recompile; performance improvement.
-- Ann Xiong		11/10/2022 Added SettlementTypeID parameter and where criteria. 
-- Stephen Long     03/30/2023 Removed option recompile; performance improvement.
-- Mani             03/31/2023 Changed the Location Joins to Inner Join as Location is a requied field

--
/*Test Code

EXEC dbo.USP_HUM_HUMAN_MASTER_GETList
	@LangID = 'en-US',
	@FirstOrGivenName = 'a',
--	@idfsLocation = 1344330000000 -- region = Baku
	@idfsLocation = 4720500000000  -- Rayon = Pirallahi (Baku)

EXEC dbo.USP_HUM_HUMAN_MASTER_GETList
	@LangID = 'en-US',
	@FirstOrGivenName = 'a',
    @DateOfBirthFrom = '2010-12-30 00:00:00.000',
    @DateOfBirthTo = '2012-12-30 00:00:00.000',
	--@idfsLocation = 1344330000000, -- region = Baku
	@idfsLocation = 1344380000000, -- Rayon = Khatai (Baku)
	@pageSize = 50000 
---------

DECLARE @return_value int

EXEC    @return_value = [dbo].[USP_HUM_HUMAN_MASTER_GETList]
        @LangID = N'en-US',
        @EIDSSPersonID = NULL,
        @PersonalIDType = NULL,
        @PersonalID = NULL,
        @FirstOrGivenName = 'a',
        @SecondName = NULL,
        @LastOrSurname = NULL,
        @DateOfBirthFrom = '1976-02-04 00:00:00.000',
        @DateOfBirthTo = '1980-02-04 00:00:00.000',
        @GenderTypeID = NULL,
		@idfsLocation = 1344330000000, -- region = Baku
        @pageNo = 1,
        @pageSize = 10,
        @sortColumn = N'EIDSSPersonID',
        @sortOrder = N'asc'

SELECT  @return_value
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_HUMAN_MASTER_GETList]
(
    @LangID NVARCHAR(50),
    @EIDSSPersonID NVARCHAR(200) = NULL,
    @PersonalIDType BIGINT = NULL,
    @PersonalID NVARCHAR(100) = NULL,
    @FirstOrGivenName NVARCHAR(200) = NULL,
    @SecondName NVARCHAR(200) = NULL,
    @LastOrSurname NVARCHAR(200) = NULL,
    @DateOfBirthFrom DATETIME = NULL,
    @DateOfBirthTo DATETIME = NULL,
    @GenderTypeID BIGINT = NULL,
    @idfsLocation BIGINT = NULL,
    @MonitoringSessionID BIGINT = NULL,
    @SettlementTypeID BIGINT = NULL,
    @pageNo INT = 1,
    @pageSize INT = 10,
    @sortColumn NVARCHAR(30) = 'EIDSSPersonID',
    @sortOrder NVARCHAR(4) = 'DESC'
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @firstRec INT
        DECLARE @lastRec INT

        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        DECLARE @DOB DATETIME = NULL

        IF (@DateOfBirthTo IS NOT NULL AND @DateOfBirthTo = @DateOfBirthFrom)
            SET @DOB = @DateOfBirthFrom

        SET @firstRec = (@pageNo - 1) * @pagesize
        SET @lastRec = (@pageNo * @pageSize + 1);

        WITH CTEResults
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @sortColumn = 'EIDSSPersonID'
                                                        AND @SortOrder = 'asc' THEN
                                                       hai.EIDSSPersonID
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'EIDSSPersonID'
                                                        AND @SortOrder = 'desc' THEN
                                                       hai.EIDSSPersonID
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'LastOrSurname'
                                                        AND @SortOrder = 'asc' THEN
                                                       ha.strLastName
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'LastOrSurname'
                                                        AND @SortOrder = 'desc' THEN
                                                       ha.strLastName
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'FirstOrGivenName'
                                                        AND @SortOrder = 'asc' THEN
                                                       ha.strFirstName
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'FirstOrGivenName'
                                                        AND @SortOrder = 'desc' THEN
                                                       ha.strFirstName
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'PersonalID'
                                                        AND @SortOrder = 'asc' THEN
                                                       ha.strPersonID
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'PersonalID'
                                                        AND @SortOrder = 'desc' THEN
                                                       ha.strPersonID
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'PersonIDTypeName'
                                                        AND @SortOrder = 'asc' THEN
                                                       idType.name
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'PersonIDTypeName'
                                                        AND @SortOrder = 'desc' THEN
                                                       idType.name
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'PassportNumber'
                                                        AND @SortOrder = 'asc' THEN
                                                       hai.PassportNbr
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'PassportNumber'
                                                        AND @SortOrder = 'desc' THEN
                                                       hai.PassportNbr
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'GenderTypeName'
                                                        AND @SortOrder = 'asc' THEN
                                                       genderType.name
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'GenderTypeName'
                                                        AND @SortOrder = 'desc' THEN
                                                       genderType.name
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'RayonName'
                                                        AND @SortOrder = 'asc' THEN
                                                       LH.AdminLevel3Name
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'RayonName'
                                                        AND @SortOrder = 'desc' THEN
                                                       LH.AdminLevel3Name
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'DateOfBirth'
                                                        AND @SortOrder = 'asc' THEN
                                                       ha.datDateofBirth
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'DateOfBirth'
                                                        AND @SortOrder = 'desc' THEN
                                                       ha.datDateofBirth
                                               END DESC
                                     ) AS ROWNUM,
                   COUNT(*) OVER () AS TotalRowCount,
                   ha.idfHumanActual AS HumanMasterID,
                   hai.EIDSSPersonID AS EIDSSPersonID,
                   ha.idfCurrentResidenceAddress AS AddressID,
                   ha.strFirstName AS FirstOrGivenName,
                   ha.strSecondName AS SecondName,
                   ha.strLastName AS LastOrSurname,
                   dbo.FN_GBL_ConcatFullName(ha.strLastName, ha.strFirstName, ha.strSecondName) AS FullName,
                   CONVERT(CHAR(10), ha.datDateofBirth, 126) AS DateOfBirth,
                   ha.strPersonID AS PersonalID,
                   ISNULL(idType.[name], idType.strDefault) AS PersonIDTypeName,
                   humanAddress.strStreetName AS StreetName,
                   dbo.FN_GBL_CreateAddressString(
                                                     LH.AdminLevel1Name,
                                                     LH.AdminLevel2Name,
                                                     LH.AdminLevel3Name,
                                                     humanAddress.strPostCode,
                                                     '',
                                                     LH.AdminLevel4Name,
                                                     humanAddress.strStreetName,
                                                     humanAddress.strHouse,
                                                     humanAddress.strBuilding,
                                                     humanAddress.strApartment,
                                                     humanAddress.blnForeignAddress,
                                                     ''
                                                 ) AS AddressString,
                   (CONVERT(NVARCHAR(100), humanAddress.dblLatitude) + ', '
                    + CONVERT(NVARCHAR(100), humanAddress.dblLongitude)
                   ) AS LongitudeLatitude,
                   hai.ContactPhoneCountryCode AS ContactPhoneCountryCode,
                   hai.ContactPhoneNbr AS ContactPhoneNumber,
                   hai.ContactPhoneNbrTypeID AS ContactPhoneNbrTypeID,
                   hai.ReportedAge AS Age,
                   hai.PassportNbr AS PassportNumber,
                   ha.idfsNationality AS CitizenshipTypeID,
                   citizenshipType.[name] AS CitizenshipTypeName,
                   ha.idfsHumanGender AS GenderTypeID,
                   genderType.[name] AS GenderTypeName,
                   humanAddress.idfsCountry AS CountryID,
                   LH.AdminLevel1Name AS CountryName,
                   LH.AdminLevel2ID AS RegionID,
                   LH.AdminLevel2Name AS RegionName,
                   LH.AdminLevel3ID AS RayonID,
                   LH.AdminLevel3Name AS RayonName,
                   humanAddress.idfsSettlement AS SettlementID,
                   LH.AdminLevel4Name AS SettlementName,
                   dbo.FN_GBL_CreateAddressString(
                                                     LH.AdminLevel1Name,
                                                     LH.AdminLevel2Name,
                                                     LH.AdminLevel3Name,
                                                     '',
                                                     '',
                                                     '',
                                                     '',
                                                     '',
                                                     '',
                                                     '',
                                                     humanAddress.blnForeignAddress,
                                                     humanAddress.strForeignAddress
                                                 ) AS FormattedAddressString
            FROM dbo.tlbHumanActual AS ha WITH (NOLOCK)
                INNER JOIN dbo.HumanActualAddlInfo hai WITH (NOLOCK)
                    ON ha.idfHumanActual = hai.HumanActualAddlInfoUID
                       AND hai.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000043) AS genderType
                    ON ha.idfsHumanGender = genderType.idfsReference
                       AND genderType.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000148) AS idType
                    ON ha.idfsPersonIDType = idType.idfsReference
                       AND idType.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000054) AS citizenshipType
                    ON ha.idfsNationality = citizenshipType.idfsReference
                       AND citizenshipType.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocationShared humanAddress WITH (NOLOCK)
                    ON ha.idfCurrentResidenceAddress = humanAddress.idfGeoLocationShared
                       AND humanAddress.intRowStatus = 0
                INNER JOIN dbo.gisLocation L WITH (NOLOCK)
                    ON L.idfsLocation = humanAddress.idfsLocation
                INNER JOIN FN_GBL_LocationHierarchy_Flattened(@LangID) LH
                    ON LH.idfsLocation = L.idfsLocation
            WHERE (
                      ha.intRowStatus = 0
                      AND (
                              (
                                  @idfsLocation IS NOT NULL
                                  AND (
                                          LH.AdminLevel1ID = @idfsLocation
                                          OR LH.AdminLevel2ID = @idfsLocation
                                          OR LH.AdminLevel3ID = @idfsLocation
                                          OR LH.AdminLevel4ID = @idfsLocation
                                          OR LH.AdminLevel5ID = @idfsLocation
                                          OR LH.AdminLevel6ID = @idfsLocation
                                          OR LH.AdminLevel7ID = @idfsLocation
                                      )
                              )
                              OR (@idfsLocation IS NULL)
                          )
                      AND (
                              (
                                  @SettlementTypeID IS NOT NULL
                                  AND L.idfsType = @SettlementTypeID
                              )
                              OR (@SettlementTypeID IS NULL)
                          )
                      AND (
                              @DOB = ha.datDateofBirth
                              OR @DateOfBirthFrom IS NULL
                              OR (ha.datDateofBirth
                  BETWEEN @DateOfBirthFrom AND @DateOfBirthTo
                                 )
                          )
                      AND (
                              (
                                  @EIDSSPersonID IS NOT NULL
                                  AND hai.EIDSSPersonID LIKE '%' + @EIDSSPersonID + '%'
                              )
                              OR @EIDSSPersonID IS NULL
                          )
                      AND (
                              (
                                  @PersonalID IS NOT NULL
                                  AND ha.strPersonID LIKE '%' + @PersonalID + '%'
                              )
                              OR @PersonalID IS NULL
                          )
                      AND (
                              (
                                  @FirstOrGivenName IS NOT NULL
                                  AND ha.strFirstName LIKE '%' + @FirstOrGivenName + '%'
                              )
                              OR @FirstOrGivenName IS NULL
                          )
                      AND (
                              (
                                  @SecondName IS NOT NULL
                                  AND ha.strSecondName LIKE '%' + @SecondName + '%'
                              )
                              OR @SecondName IS NULL
                          )
                      AND (
                              (
                                  @LastOrSurname IS NOT NULL
                                  AND ha.strLastName LIKE '%' + @LastOrSurname + '%'
                              )
                              OR @LastOrSurname IS NULL
                          )
                      AND (
                              (
                                  @PersonalIDType IS NOT NULL
                                  AND ha.idfsPersonIDType = @PersonalIDType
                              )
                              OR @PersonalIDType IS NULL
                          )
                      AND (
                              (
                                  @GenderTypeID IS NOT NULL
                                  AND ha.idfsHumanGender = @GenderTypeID
                              )
                              OR @GenderTypeID IS NULL
                          )
                      AND (
                              EXISTS
            (
                SELECT h.idfHuman
                FROM dbo.tlbHuman h
                    INNER JOIN dbo.tlbMaterial m
                        ON m.idfHuman = h.idfHuman
                WHERE h.idfHumanActual = ha.idfHumanActual
                      AND m.idfMonitoringSession = @MonitoringSessionID
            )
                              OR @MonitoringSessionID IS NULL
                          )
                  )
           )
        SELECT TotalRowCount,
               HumanMasterID,
               EIDSSPersonID,
               AddressID,
               FirstOrGivenName,
               SecondName,
               LastOrSurname,
               FullName,
               DateOfBirth,
               PersonalID,
               PersonIDTypeName,
               StreetName,
               AddressString,
               LongitudeLatitude,
               ContactPhoneCountryCode,
               ContactPhoneNumber,
               ContactPhoneNbrTypeID,
               Age,
               PassportNumber,
               CitizenshipTypeID,
               CitizenshipTypeName,
               GenderTypeID,
               GenderTypeName,
               CountryID,
               CountryName,
               RegionID,
               RegionName,
               RayonID,
               RayonName,
               SettlementID,
               SettlementName,
               FormattedAddressString,
               TotalPages = (TotalRowCount / @pageSize) + IIF(TotalRowCount % @pageSize > 0, 1, 0),
               CurrentPage = @pageNo
        FROM CTEResults
        WHERE RowNum > @firstRec
              AND RowNum < @lastRec;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_ILI_Aggregate_Set]...';


GO
-- ================================================================================================
-- Name: USP_ILI_Aggregate_Set
--
-- Description: Insert and update for ILI aggregate forms.
--          
-- Author: Arnold Kennedy
--
-- Revision History:
-- Name                    Date       Change Detail
-- ----------------------- ---------- ------------------------------------------------------------
-- Lamont Mitchell         07/13/2019 Udated to include FormId
-- Ann Xiong               02/28/2020 Modified to save a list of rows instead of one single row to 
--                                    table tlbBasicSyndromicSurveillanceAggregateDetail 
-- Leo Tracchia            03/13/2022 Altered logic for better handling of updates
-- Stephen Long            07/12/2022 Added events parameter and site alert logic.
-- Stephen Long            12/01/2022 Added data audit logic for SAUC30 and 31.
-- Stephen Long            03/06/2023 Fix to use correct object type on data audit.
-- Stephen Long            03/09/2023 Moved data event audit call after EIDSS ID is obtained.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ILI_Aggregate_Set]
(
    @idfAggregateHeader BIGINT = -1,
    @idfEnteredBy BIGINT,
    @idfsSite BIGINT,
    @intYear INT,
    @intWeek INT,
    @datStartDate DATETIME,
    @datFinishDate DATETIME,
    @strFormId VARCHAR(MAX) = NULL,
    @RowStatus INT,
    @AuditUserName NVARCHAR(200),
    @ILITables NVARCHAR(MAX),
    @Events NVARCHAR(MAX) = NULL
)
AS
BEGIN
    DECLARE @ReturnCode INT = 0,
            @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
            @EventID BIGINT,
            @EventTypeID BIGINT = NULL,
            @EventSiteID BIGINT = NULL,
            @EventObjectID BIGINT = NULL,
            @EventUserID BIGINT = NULL,
            @EventDiseaseID BIGINT = NULL,
            @EventLocationID BIGINT = NULL,
            @EventInformationString NVARCHAR(MAX) = NULL,
            @EventLoginSiteID BIGINT = NULL,
                                                    -- Data audit
            @AuditUserID BIGINT = NULL,
            @AuditSiteID BIGINT = NULL,
            @DataAuditEventID BIGINT = NULL,
            @DataAuditEventTypeID BIGINT = NULL,
            @ObjectTypeID BIGINT = 10017075,        -- ILI aggregate
            @ObjectID BIGINT = @idfAggregateHeader,
            @ObjectTableID BIGINT = 50791690000000; -- tlbBasicSyndromicSurveillanceAggregateHeader
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );
    DECLARE @idfHospital BIGINT,
            @idfAggregateDetail BIGINT,
            @intAge0_4 INT = NULL,
            @intAge5_14 INT = NULL,
            @intAge15_29 INT = NULL,
            @intAge30_64 INT = NULL,
            @intAge65 INT = NULL,
            @inTotalILI INT = NULL,
            @intTotalAdmissions INT = NULL,
            @intILISamples INT = NULL,
            @RowID BIGINT = NULL,
            @RowAction CHAR(1) = NULL;
    DECLARE @ILITablesTemp TABLE
    (
        idfAggregateDetail BIGINT NOT NULL,
        idfHospital BIGINT NULL,
        intAge0_4 INT,
        intAge5_14 INT,
        intAge15_29 INT,
        intAge30_64 INT,
        intAge65 INT,
        inTotalILI INT,
        intTotalAdmissions INT,
        intILISamples INT,
        RowStatus INT NULL,
        RowAction CHAR(1) NULL,
        RowId BIGINT
    );
    DECLARE @ILIAggregateHeaderBeforeEdit TABLE
    (
        AggregateHeaderID BIGINT,
        FormID NVARCHAR(200),
        DateEntered DATETIME,
        DateLastSaved DATETIME,
        EnteredByID BIGINT,
        YearValue INT,
        WeekValue INT,
        StartDate DATETIME,
        FinishDate DATETIME
    );
    DECLARE @ILIAggregateHeaderAfterEdit TABLE
    (
        AggregateHeaderID BIGINT,
        FormID NVARCHAR(200),
        DateEntered DATETIME,
        DateLastSaved DATETIME,
        EnteredByID BIGINT,
        YearValue INT,
        WeekValue INT,
        StartDate DATETIME,
        FinishDate DATETIME
    );
    DECLARE @EventsTemp TABLE
    (
        EventId BIGINT NOT NULL,
        EventTypeId BIGINT NULL,
        UserId BIGINT NULL,
        SiteId BIGINT NULL,
        LoginSiteId BIGINT NULL,
        ObjectId BIGINT NULL,
        DiseaseId BIGINT NULL,
        LocationId BIGINT NULL,
        InformationString NVARCHAR(MAX) NULL
    );

    BEGIN TRY
        BEGIN TRANSACTION

        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        INSERT INTO @ILITablesTemp
        SELECT *
        FROM
            OPENJSON(@ILITables)
            WITH
            (
                IdfAggregateDetail BIGINT,
                IdfHospital BIGINT,
                IntAge0_4 INT,
                IntAge5_14 INT,
                IntAge15_29 INT,
                IntAge30_64 INT,
                IntAge65 INT,
                InTotalILI INT,
                IntTotalAdmissions INT,
                IntILISamples INT,
                RowStatus INT,
                RowAction CHAR(1),
                RowId BIGINT
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        -- Update the header if this is an edit
        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader
            WHERE idfAggregateHeader = @idfAggregateHeader
        )
        BEGIN
            -- Data audit
            SET @DataAuditEventTypeID = 10016003; -- Data audit edit event type

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      @DataAuditEventTypeID,
                                                      @ObjectTypeID,
                                                      @idfAggregateHeader,
                                                      @ObjectTableID,
                                                      @strFormID, 
                                                      @DataAuditEventID OUTPUT;

            INSERT INTO @ILIAggregateHeaderBeforeEdit
            (
                AggregateHeaderID,
                FormID,
                DateEntered,
                DateLastSaved,
                EnteredByID,
                YearValue,
                WeekValue,
                StartDate,
                FinishDate
            )
            SELECT idfAggregateHeader,
                   strFormID,
                   datDateEntered,
                   datDateLastSaved,
                   idfEnteredBy,
                   intYear,
                   intWeek,
                   datStartDate,
                   datFinishDate
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader
            WHERE idfAggregateHeader = @idfAggregateHeader;
            -- End data audit

            UPDATE dbo.tlbBasicSyndromicSurveillanceAggregateHeader
            SET intYear = @intYear,
                intWeek = @intWeek,
                datStartDate = @datStartDate,
                datFinishDate = @datFinishDate,
                datDateLastSaved = GETDATE(),
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfAggregateHeader = @idfAggregateHeader;

            -- Data audit
            INSERT INTO @ILIAggregateHeaderAfterEdit
            (
                AggregateHeaderID,
                FormID,
                DateEntered,
                DateLastSaved,
                EnteredByID,
                YearValue,
                WeekValue,
                StartDate,
                FinishDate
            )
            SELECT idfAggregateHeader,
                   strFormID,
                   datDateEntered,
                   datDateLastSaved,
                   idfEnteredBy,
                   intYear,
                   intWeek,
                   datStartDate,
                   datFinishDate
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader
            WHERE idfAggregateHeader = @idfAggregateHeader;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791710000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.FormID,
                   a.FormID,
                   a.FormID
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.FormID <> b.FormID)
                  OR (
                         a.FormID IS NOT NULL
                         AND b.FormID IS NULL
                     )
                  OR (
                         a.FormID IS NULL
                         AND b.FormID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791720000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.DateEntered,
                   a.DateEntered, 
                   a.FormID
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.DateEntered <> b.DateEntered)
                  OR (
                         a.DateEntered IS NOT NULL
                         AND b.DateEntered IS NULL
                     )
                  OR (
                         a.DateEntered IS NULL
                         AND b.DateEntered IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791730000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.DateLastSaved,
                   a.DateLastSaved,
                   a.FormID
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.DateLastSaved <> b.DateLastSaved)
                  OR (
                         a.DateLastSaved IS NOT NULL
                         AND b.DateLastSaved IS NULL
                     )
                  OR (
                         a.DateLastSaved IS NULL
                         AND b.DateLastSaved IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791740000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.EnteredByID,
                   a.EnteredByID,
                   a.FormID 
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.EnteredByID <> b.EnteredByID)
                  OR (
                         a.EnteredByID IS NOT NULL
                         AND b.EnteredByID IS NULL
                     )
                  OR (
                         a.EnteredByID IS NULL
                         AND b.EnteredByID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791750000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.YearValue,
                   a.YearValue,
                   a.FormID
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.YearValue <> b.YearValue)
                  OR (
                         a.YearValue IS NOT NULL
                         AND b.YearValue IS NULL
                     )
                  OR (
                         a.YearValue IS NULL
                         AND b.YearValue IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791760000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.WeekValue,
                   a.WeekValue,
                   a.FormID
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.WeekValue <> b.WeekValue)
                  OR (
                         a.WeekValue IS NOT NULL
                         AND b.WeekValue IS NULL
                     )
                  OR (
                         a.WeekValue IS NULL
                         AND b.WeekValue IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791770000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.StartDate,
                   a.StartDate,
                   a.FormID 
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.StartDate <> b.StartDate)
                  OR (
                         a.StartDate IS NOT NULL
                         AND b.StartDate IS NULL
                     )
                  OR (
                         a.StartDate IS NULL
                         AND b.StartDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791780000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.FinishDate,
                   a.FinishDate,
                   a.FormID
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.FinishDate <> b.FinishDate)
                  OR (
                         a.FinishDate IS NOT NULL
                         AND b.FinishDate IS NULL
                     )
                  OR (
                         a.FinishDate IS NULL
                         AND b.FinishDate IS NOT NULL
                     );
        -- End data audit
        END
        ELSE
        BEGIN
            -- Get new PK for insert
            BEGIN
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbBasicSyndromicSurveillanceAggregateHeader',
                                               @idfAggregateHeader OUTPUT;
            END

            -- Get New Smartkey
            IF ISNULL(@strFormID, N'') = N''
               OR LEFT(ISNULL(@strFormID, N''), 4) = '(new'
            BEGIN
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NextNumber_GET 'Basic Syndromic Surveillance Aggregate Form',
                                                @strFormID OUTPUT,
                                                NULL;
            END

            -- Data audit
            SET @DataAuditEventTypeID = 10016001; -- Data audit create event type

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      @DataAuditEventTypeID,
                                                      @ObjectTypeID,
                                                      @idfAggregateHeader,
                                                      @ObjectTableID,
                                                      @strFormID, 
                                                      @DataAuditEventID OUTPUT;
            -- End data audit
			Declare @getDate DateTime = GETDATE();
            INSERT INTO dbo.tlbBasicSyndromicSurveillanceAggregateHeader
            (
                idfAggregateHeader,
                strFormID,
                datDateEntered,
                datDateLastSaved,
                idfEnteredBy,
                idfsSite,
                intYear,
                intWeek,
                datStartDate,
                datFinishDate,
                datModificationForArchiveDate,
                strMaintenanceFlag,
                strReservedAttribute,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateDTM,
                AuditCreateUser
            )
            VALUES
            (   @idfAggregateHeader,
                @strFormID,
                @getDate,
                @getDate,
                @idfEnteredBy,
                @idfsSite,
                @intYear,
                @intWeek,
                @datStartDate,
                @datFinishDate,
                @getDate,
                'system',
                'V7 ILI Syndromic Surveillance Aggregate Form',
                10519001, -- EIDSS7
                '[{"idfAggregateHeader":' + CAST(@idfAggregateHeader AS NVARCHAR(300)) + '}]',
                GETDATE(),
                @AuditUserName
            );

            UPDATE @EventsTemp
            SET ObjectId = @idfAggregateHeader
            WHERE ObjectId = 0;

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser, 
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @idfAggregateHeader,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName, 
             @strFormID
            );
        -- End data audit
        END

        WHILE EXISTS (SELECT * FROM @ILITablesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = RowId,
                @idfAggregateDetail = idfAggregateDetail,
                @RowStatus = RowStatus,
                @idfHospital = idfHospital,
                @intAge0_4 = intAge0_4,
                @intAge5_14 = intAge5_14,
                @intAge15_29 = intAge15_29,
                @intAge30_64 = intAge30_64,
                @intAge65 = intAge65,
                @inTotalILI = inTotalILI,
                @intTotalAdmissions = intTotalAdmissions,
                @intILISamples = intILISamples,
                @RowAction = RowAction
            FROM @ILITablesTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ILI_Aggregate_Detail_SET @idfAggregateDetail,
                                                     @idfAggregateHeader,
                                                     @RowStatus,
                                                     @idfHospital,
                                                     @intAge0_4,
                                                     @intAge5_14,
                                                     @intAge15_29,
                                                     @intAge30_64,
                                                     @intAge65,
                                                     @inTotalILI,
                                                     @intTotalAdmissions,
                                                     @intILISamples,
                                                     @AuditUserName,
                                                     @DataAuditEventID, 
                                                     @strFormID, 
                                                     @RowAction;

            DELETE FROM @ILITablesTemp
            WHERE RowId = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventID = EventId,
                @EventTypeID = EventTypeId,
                @EventUserID = UserId,
                @EventObjectID = ObjectId,
                @EventSiteID = SiteId,
                @EventDiseaseID = DiseaseId,
                @EventLocationID = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteID = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_ADMIN_EVENT_SET @EventID,
                                             @EventTypeID,
                                             @EventUserID,
                                             @EventObjectID,
                                             @EventDiseaseID,
                                             @EventSiteID,
                                             @EventInformationString,
                                             @EventLoginSiteID,
                                             @EventLocationID,
                                             @AuditUserName, 
                                             @DataAuditEventID, 
                                             @strFormID;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventID;
        END;

        IF @@TRANCOUNT > 0
            COMMIT;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK;

        THROW;
    END CATCH
    SELECT @ReturnCode 'ReturnCode',
           @ReturnMessage 'ReturnMessage',
           @strFormID 'strFormID',
           @idfAggregateHeader 'idfAggregateHeader',
           @idfAggregateDetail 'idfAggregateDetail';
END
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_APPROVAL_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_APPROVAL_ADVANCED_SEARCH_GETList
--
-- Description:	Get approval advanced search list for the laboratory module use case LUC13.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/27/2019 Initial relase.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/16/2020 Added sample and test list parameters and where clause criteria.
-- Stephen Long     04/20/2020 Removed farm and herd left joins.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/30/2020 Remove unneeded joins.
-- Stephen Long     11/30/2020 Changed site list to site ID and bigint and made required.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     11/18/2021 Added action requested ID to the query.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     01/03/2022 Corrected sample status type to use the correct field.
-- Stephen Long     02/10/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/11/2022 Changed monitoring session disease join from inner to left.
-- Stephen Long     08/12/2022 Removed where criteria for surveillance type of both; de-activated 
--                             base reference record.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     09/28/2022 Added translated value for action requested name.
-- Stephen Long     10/11/2022 Added check for closed batch test status to display test records 
--                             ready for validation.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     10/23/2022 Added check for non-laboratory test indicator of false.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/11/2023 Updated for site filtration queries.
-- Stephen Long     01/31/2023 Added coalesce on collection and entered dates.
-- Stephen Long     02/20/2023 Added sent to organization sent to site ID and where criteria.
-- Stephen Long     03/15/2023 Added narrow search criteria logic.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_APPROVAL_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT,
    @SentToOrganizationSiteID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @SampleList VARCHAR(MAX) = NULL,
    @TestList VARCHAR(MAX) = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @Results TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL INDEX c NONCLUSTERED,
        TestID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL INDEX c NONCLUSTERED,
        TestID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL,
        RowAction INT NOT NULL
            DEFAULT 0
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @LanguageCode BIGINT,
            @SampleDeletion NVARCHAR(MAX),
            @SampleDestruction NVARCHAR(MAX),
            @TestDeletion NVARCHAR(MAX),
            @Validation NVARCHAR(MAX);
    DECLARE @SampleStatusTypeListTable TABLE (ID BIGINT NOT NULL PRIMARY KEY);
    BEGIN TRY
        IF @SampleStatusTypeList IS NOT NULL
            INSERT INTO @SampleStatusTypeListTable
            SELECT CAST([Value] AS BIGINT)
            FROM dbo.FN_GBL_SYS_SplitList(@SampleStatusTypeList, NULL, ',');

        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);
        SET @SampleDeletion =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 812
        );
        SET @SampleDestruction =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 1040
        );
        SET @TestDeletion =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 4493
        );
        SET @Validation =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 4492
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfsSampleStatus = 10015002 --Marked for Deletion 
                      OR m.idfsSampleStatus = 10015003 --Marked for Destruction
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND (
                      (
                          (
                              m.idfSendToOffice = @SentToOrganizationID
                              OR @SentToOrganizationID IS NULL
                          )
                          AND (
                                  (
                                      m.blnAccessioned = @AccessionedIndicatorList
                                      OR (
                                             m.blnAccessioned = 1
                                             AND m.datAccession IS NULL
                                             AND @AccessionedIndicatorList IS NOT NULL
                                         )
                                  )
                                  AND m.idfsAccessionCondition IS NULL
                                  AND m.idfsSampleStatus IS NULL
                                  AND m.datDestructionDate IS NULL
                                  OR (
                                         @AccessionedIndicatorList IS NULL
                                         AND @SampleStatusTypeList IS NULL
                                     )
                              )
                      )
                      OR (
                             (
                                 (
                                     m.idfSendToOffice = @SentToOrganizationID
                                     AND m.idfsSite = @SentToOrganizationSiteID
                                 )
                                 OR @SentToOrganizationID IS NULL
                             )
                             AND (
                                     (m.idfsSampleStatus IN (
                                                                SELECT ID FROM @SampleStatusTypeListTable
                                                            )
                                     )
                                     OR (
                                            m.idfsAccessionCondition IN (
                                                                            SELECT ID FROM @SampleStatusTypeListTable
                                                                        )
                                            AND (
                                                    m.idfsSampleStatus IS NULL
                                                    OR m.idfsSampleStatus = 10015007 --In Repository
                                                )
                                        )
                                     OR (
                                            @SampleStatusTypeList IS NULL
                                            AND @AccessionedIndicatorList IS NULL
                                        )
                                 )
                         )
                  );

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = m.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT m.idfMaterial,
               NULL,
               MAX(ReadPermissionIndicator),
               MAX(AccessToPersonalDataPermissionIndicator),
               MAX(AccessToGenderAndAgeDataPermissionIndicator),
               MAX(WritePermissionIndicator),
               MAX(DeletePermissionIndicator),
               0
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      (m.idfMaterial IN (
                                            SELECT CAST([Value] AS BIGINT)
                                            FROM dbo.FN_GBL_SYS_SplitList(@SampleList, NULL, ',')
                                        )
                      )
                      OR (@SampleList IS NULL)
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.idfSendToOffice = @SentToOrganizationID
                              OR @SentToOrganizationID IS NULL
                          )
                          AND (
                                  (
                                      m.blnAccessioned = @AccessionedIndicatorList
                                      OR (
                                             m.blnAccessioned = 1
                                             AND m.datAccession IS NULL
                                             AND @AccessionedIndicatorList IS NOT NULL
                                         )
                                  )
                                  AND m.idfsAccessionCondition IS NULL
                                  AND m.idfsSampleStatus IS NULL
                                  AND m.datDestructionDate IS NULL
                                  OR (
                                         @AccessionedIndicatorList IS NULL
                                         AND @SampleStatusTypeList IS NULL
                                     )
                              )
                      )
                      OR (
                             (
                                 (
                                     m.idfSendToOffice = @SentToOrganizationID
                                     AND m.idfsSite = @SentToOrganizationSiteID
                                 )
                                 OR @SentToOrganizationID IS NULL
                             )
                             AND (
                                     (m.idfsSampleStatus IN (
                                                                SELECT ID FROM @SampleStatusTypeListTable
                                                            )
                                     )
                                     OR (
                                            m.idfsAccessionCondition IN (
                                                                            SELECT ID FROM @SampleStatusTypeListTable
                                                                        )
                                            AND (
                                                    m.idfsSampleStatus IS NULL
                                                    OR m.idfsSampleStatus = 10015007 --In Repository
                                                )
                                        )
                                     OR (
                                            @SampleStatusTypeList IS NULL
                                            AND @AccessionedIndicatorList IS NULL
                                        )
                                 )
                         )
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR m.DiseaseID = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR (@EIDSSReportCampaignOrSessionID IS NULL)
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      (m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%')
                      OR (@FarmOwnerName IS NULL)
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
        GROUP BY m.idfMaterial;

        DELETE FROM @Results;

        -- Test Approvals --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      AND m.idfsSite = @SentToOrganizationSiteID
                      OR @SentToOrganizationID IS NULL
                  )
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE t.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup -- Default role
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = m.idfsSite
        )
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        )
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT m.idfMaterial,
               t.idfTesting,
               MAX(ReadPermissionIndicator),
               MAX(AccessToPersonalDataPermissionIndicator),
               MAX(AccessToGenderAndAgeDataPermissionIndicator),
               MAX(WritePermissionIndicator),
               MAX(DeletePermissionIndicator),
               0
        FROM @Results res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.TestID
            INNER JOIN dbo.tlbMaterial m
                ON t.idfMaterial = m.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      t.idfTesting IN (
                                          SELECT CAST([Value] AS BIGINT)
                                          FROM dbo.FN_GBL_SYS_SplitList(@TestList, NULL, ',')
                                      )
                      OR @TestList IS NULL
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.idfSendToOffice = @SentToOrganizationID
                              OR @SentToOrganizationID IS NULL
                          )
                          AND (
                                  (
                                      m.blnAccessioned = @AccessionedIndicatorList
                                      OR (
                                             m.blnAccessioned = 1
                                             AND m.datAccession IS NULL
                                             AND @AccessionedIndicatorList IS NOT NULL
                                         )
                                  )
                                  AND m.idfsAccessionCondition IS NULL
                                  AND m.idfsSampleStatus IS NULL
                                  AND m.datDestructionDate IS NULL
                                  OR (
                                         @AccessionedIndicatorList IS NULL
                                         AND @SampleStatusTypeList IS NULL
                                     )
                              )
                      )
                      OR (
                             (
                                 (
                                     m.idfSendToOffice = @SentToOrganizationID
                                     AND m.idfsSite = @SentToOrganizationSiteID
                                 )
                                 OR @SentToOrganizationID IS NULL
                             )
                             AND (
                                     (m.idfsSampleStatus IN (
                                                                SELECT ID FROM @SampleStatusTypeListTable
                                                            )
                                     )
                                     OR (
                                            m.idfsAccessionCondition IN (
                                                                            SELECT ID FROM @SampleStatusTypeListTable
                                                                        )
                                            AND (
                                                    m.idfsSampleStatus IS NULL
                                                    OR m.idfsSampleStatus = 10015007 --In Repository
                                                )
                                        )
                                     OR (
                                            @SampleStatusTypeList IS NULL
                                            AND @AccessionedIndicatorList IS NULL
                                        )
                                 )
                         )
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR m.DiseaseID = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND @TestResultDateTo
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR (@EIDSSReportCampaignOrSessionID IS NULL)
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
        GROUP BY t.idfTesting,
                 m.idfMaterial;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        DECLARE @RecordCount INT = (
                                       SELECT COUNT(ID) FROM @FinalResults
                                   );

        IF @RecordCount > 10000
        BEGIN
            DELETE FROM @FinalResults
            WHERE ID <>
            (
                SELECT MAX(ID) FROM @FinalResults
            );
            UPDATE @FinalResults
            SET RowAction = 99; -- Narrow Search Criteria
        END

        SELECT CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
            THEN
                       m.idfsSampleStatus
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
            THEN
                       m.idfsSampleStatus
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
            THEN
                       t.idfsTestStatus
                   WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
            THEN
                       t.idfsTestStatus
               END AS ActionRequestedID,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       @SampleDeletion
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       @SampleDestruction
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
               THEN
                       @Validation
                   WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
               THEN
                       @TestDeletion
               END AS ActionRequested,
               m.idfMaterial AS SampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               a.strAnimalCode AS EIDSSAnimalID,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                       '********'
                   ELSE
                       m.strCalculatedHumanName
               END AS PatientOrFarmOwnerName,
               sampleType.name AS SampleTypeName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               t.idfTesting AS TestID,
               t.idfsTestName AS TestNameTypeID,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsTestResult AS TestResultTypeID,
               t.idfsTestStatus AS TestStatusTypeID,
               testNameType.name AS TestNameTypeName,
               testStatusType.name AS TestStatusTypeName,
               testResultType.name AS TestResultTypeName,
               u.idfUserID AS ResultEnteredByUserID,
               m.datAccession AS AccessionDate,
               m.idfsSampleStatus AS SampleStatusTypeID,
               CASE
                   WHEN m.blnAccessioned = 0
                        AND m.idfsSampleStatus IS NULL
                        AND m.idfsAccessionCondition IS NULL THEN
                       'Un-accessioned'
                   WHEN m.idfsSampleStatus IS NULL THEN
                       accessionConditionType.name
                   WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                       accessionConditionType.name
                   ELSE
                       sampleStatusType.name
               END AS AccessionConditionOrSampleStatusTypeName,
               t.datConcludedDate AS ResultDate,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               NULL AS PreviousTestStatusTypeID,
               m.intRowStatus AS RowStatus,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               res.RowAction,
               0 AS RowSelectionIndicator,
               @RecordCount AS TotalRowCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfTesting = res.TestID
                   AND t.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tstUserTable u
                ON u.idfPerson = t.idfResultEnteredByPerson
                   AND u.intRowStatus = 0;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_APPROVAL_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_APPROVAL_GETList
--
-- Description:	Get laboratory approval list for the various lab use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     12/03/2018 Initial release.
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     01/25/2019 Added previous sample and test status types.
-- Stephen Long     01/30/2019 Added sample disease reference join and removed the vector 
--                             surveillance session joins as they are no longer needed.
-- Stephen Long     02/19/2019 Split out selects between sample and test and added test deletion 
--                             as one of the options.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     08/30/2019 Added organization ID parameter and where clause changes for site.
-- Stephen Long     09/14/2019 Added pagination set 0 to bring back "all" records.
-- Stephen Long     09/28/2019 Updated test deletion base reference value to newly added entry.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     09/04/2020 Updated reference value for marked for deletion test status.
-- Stephen Long     11/30/2020 Removed site ID parameter and updated where criteria to use 
--                             sent to organization ID.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     11/18/2021 Added sample ID and test ID parameters and action requested ID to 
--                             the query.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     01/03/2022 Corrected sample status type to use the correct field.
-- Stephen Long     01/10/2022 Corrected join on user table, removed identity column, and changed 
--                             default sort order.
-- Stephen Long     02/03/2022 Corrected monitoring session to diagnosis join.
-- Stephen Long     02/10/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to vector session diseases.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     09/28/2022 Added translated value for action requested name.
-- Stephen Long     10/11/2022 Added check for closed batch test status to display test records 
--                             ready for validation.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     10/23/2022 Added check for non-laboratory test indicator of false.
-- Stephen Long     11/16/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/11/2023 Updated for site filtration queries.
-- Stephen Long     03/02/2023 Updated initial query where to use site ID instead of sent to 
--                             organization.
-- Stephen Long     03/23/2023 Correction on criteria for sent to organization and site ID.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_APPROVAL_GETList]
(
    @LanguageID NVARCHAR(50),
    @SampleID BIGINT = NULL,
    @TestID BIGINT = NULL,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Results TABLE
    (
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL
    );
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @TotalRowCount INT = 0,
            @LanguageCode BIGINT,
            @SampleDeletion NVARCHAR(MAX),
            @SampleDestruction NVARCHAR(MAX),
            @TestDeletion NVARCHAR(MAX),
            @Validation NVARCHAR(MAX);

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);
        SET @SampleDeletion =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 812
        );
        SET @SampleDestruction =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 1040
        );
        SET @TestDeletion =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 4493
        );
        SET @Validation =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 4492
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND m.idfsSampleStatus IN (   10015002, --Marked for Deletion 
                                            10015003
                                        ) --Marked for Destruction
              AND (
                      (
                          m.idfSendToOffice = @UserOrganizationID
                      )
                      OR (
                             m.idfsSite = @UserSiteID OR m.idfsCurrentSite = @UserSiteID
                         )
                  )
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  );

        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON t.idfMaterial = m.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND (
                      (
                          m.idfSendToOffice = @UserOrganizationID
                      )
                      OR (
                             m.idfsSite = @UserSiteID OR m.idfsCurrentSite = @UserSiteID
                         )
                  )
              AND (
                      t.idfTesting = @TestID
                      OR @TestID IS NULL
                  );

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite OR oa.idfsObjectID = m.idfsCurrentSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite OR ugsp.SiteID = m.idfsCurrentSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite OR usp.SiteID = m.idfsCurrentSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SET @TotalRowCount =
        (
            SELECT COUNT(*) FROM @Results
        );

        SELECT CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
            THEN
                       m.idfsSampleStatus
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
            THEN
                       m.idfsSampleStatus
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
            THEN
                       t.idfsTestStatus
                   WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
            THEN
                       t.idfsTestStatus
               END AS ActionRequestedID,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       @SampleDeletion
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       @SampleDestruction
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
               THEN
                       @Validation
                   WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
               THEN
                       @TestDeletion
               END AS ActionRequested,
               m.idfMaterial AS SampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               a.strAnimalCode AS EIDSSAnimalID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               sampleType.name AS SampleTypeName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               t.idfTesting AS TestID,
               t.idfsTestName AS TestNameTypeID,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsTestResult AS TestResultTypeID,
               t.idfsTestStatus AS TestStatusTypeID,
               testNameType.name AS TestNameTypeName,
               testStatusType.name AS TestStatusTypeName,
               testResultType.name AS TestResultTypeName,
               u.idfUserID AS ResultEnteredByUserID,
               m.datAccession AS AccessionDate,
               m.idfsSampleStatus AS SampleStatusTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               t.datConcludedDate AS ResultDate,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               NULL AS PreviousTestStatusTypeID,
               m.intRowStatus AS RowStatus,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               @TotalRowCount AS TotalRowCount
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
                   AND m.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN dbo.tlbTesting t
                ON t.idfTesting = res.TestID
                   AND t.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tstUserTable u
                ON u.idfPerson = t.idfResultEnteredByPerson
                   AND u.intRowStatus = 0
            OPTION (RECOMPILE);
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_APPROVAL_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_APPROVAL_SEARCH_GETList
--
-- Description:	Get laboratory approval list for the various lab use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/21/2019 Initial release.
-- Stephen Long     07/09/2019 Added disease to search wildcard.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     06/07/2020 Added additional search fields to the where clause.
-- Stephen Long     09/04/2020 Updated reference value for marked for deletion test status.
-- Stephen Long     11/30/2020 Modified where clause to look at sent to organization and removed 
--                             user ID as a parameter.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2021 Moved pagination to table variable insert.
-- Stephen Long     01/05/2021 Changed where criteria strNote to strCondition.
-- Stephen Long     01/07/2021 Removed leading wildcard (%) as full table scans are performed even 
--                             with indices resulting in long query run times.  Recommend NOT 
--                             putting those back in.
-- Stephen Long     09/24/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     11/18/2021 Added action requested ID to the query.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/17/2021 Added group by to eliminate duplicate records.
-- Stephen Long     01/03/2022 Corrected sample status type to use the correct field.
-- Stephen Long     02/10/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     09/28/2022 Bug fix on item 5111, 5115 and 5116.
-- Stephen Long     10/11/2022 Added check for closed batch test status to display test records 
--                             ready for validation.
-- Stephen Long     10/17/2022 Bug fix on item 5018 - searching by dates.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     10/23/2022 Added check for non-laboratory test indicator of false.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/14/2023 Updated for site filtration queries.
-- Stephen Long     03/29/2023 Fix on accession condition or sample status type name case.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_APPROVAL_SEARCH_GETList]
		@LanguageID = N'en-US',
		@SearchString = N'PCR', -- Use 'Gnhnscvxb', 'Brucellosis', 'SWAZ200GEDD' as other tests.
		@TestUnassignedIndicator = NULL,
		@TestCompletedIndicator = NULL,
		@UserID = 161287150000872, -- rykermase
		@UserOrganizationID = 758210000000,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_APPROVAL_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @SearchString NVARCHAR(2000),
    @AccessionedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT, 
    @UserOrganizationID BIGINT, 
    @UserSiteID BIGINT
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @InitialResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        ActionRequested NVARCHAR(MAX) NOT NULL,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        ActionRequested NVARCHAR(MAX) NOT NULL,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL
    );
    DECLARE @FinalResultsDedup TABLE
    (
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL
    );
    DECLARE @SampleTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @SampleStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @AccessionConditionTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestNameTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestResultTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestCategoryTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @Diseases TABLE (ID BIGINT NOT NULL);
    DECLARE @FunctionalAreas TABLE (ID BIGINT NOT NULL);
    DECLARE @Favorites XML,
            @LanguageCode BIGINT,
            @TotalRowCount INT = 0,
            @SampleDeletion NVARCHAR(MAX),
            @SampleDestruction NVARCHAR(MAX),
            @TestDeletion NVARCHAR(MAX),
            @Validation NVARCHAR(MAX);
    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);
        SET @SampleDeletion =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 812
        );
        SET @SampleDestruction =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 1040
        );
        SET @TestDeletion =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 4493
        );
        SET @Validation =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 4492
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @InitialResults
        SELECT CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
            THEN
                       @SampleDeletion
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
            THEN
                       @SampleDestruction
               END,
               m.idfMaterial,
               NULL
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND (
                      m.idfsSampleStatus = 10015002 --Marked for Deletion 
                      OR m.idfsSampleStatus = 10015003 --Marked for Destruction
                  )
              AND m.idfSendToOffice = @UserOrganizationID;

        INSERT INTO @InitialResults
        SELECT CASE
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
            THEN
                       @Validation
                   WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
            THEN
                       @TestDeletion
               END,
               m.idfMaterial,
               t.idfTesting
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON t.idfMaterial = m.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND (
                      t.idfsTestStatus = 10001004 --Preliminary 
                      OR t.idfsTestStatus = 10001008 --Marked for Deletion 
                  )
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfSendToOffice = @UserOrganizationID;

        INSERT INTO @SampleTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000087
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @SampleStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000015
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @AccessionConditionTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000110
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @Diseases
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000019
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestNameTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000097
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestResultTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000096
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestCategoryTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000095
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000001
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FunctionalAreas
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000164
              AND idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FinalResults
        SELECT ActionRequested,
               SampleID,
               TestID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = SampleID
        WHERE (
                  m.blnAccessioned = @AccessionedIndicator
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND @AccessionedIndicator IS NOT NULL
              ) -- Un-accessioned samples
              OR (
                     CONVERT(NVARCHAR(MAX), FORMAT(m.datAccession, 'g', @LanguageID)) LIKE '%' + @SearchString + '%'
                     OR CONVERT(NVARCHAR(MAX), FORMAT(t.datStartedDate, 'd', @LanguageID)) LIKE '%' + @SearchString
                                                                                                + '%'
                     OR CONVERT(NVARCHAR(MAX), FORMAT(t.datConcludedDate, 'd', @LanguageID)) LIKE '%' + @SearchString
                                                                                                  + '%'
                     OR (
                            m.strBarcode IS NOT NULL
                            AND m.strBarcode <> ''
                            AND m.strBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strFieldBarcode IS NOT NULL
                            AND m.strFieldBarcode <> ''
                            AND m.strFieldBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCondition IS NOT NULL
                            AND m.strCondition <> ''
                            AND m.strCondition LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedCaseID IS NOT NULL
                            AND m.strCalculatedCaseID <> ''
                            AND m.strCalculatedCaseID LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedHumanName IS NOT NULL
                            AND m.strCalculatedHumanName <> ''
                            AND m.strCalculatedHumanName LIKE '%' + @SearchString + '%'
                        )
                     OR (ActionRequested LIKE '%' + @SearchString + '%')
                 );

        INSERT INTO @FinalResults
        SELECT ActionRequested,
               SampleID,
               TestID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = SampleID
            INNER JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
        WHERE m.idfAnimal IS NOT NULL
              AND a.strAnimalCode LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ActionRequested,
               SampleID,
               TestID
        FROM @InitialResults
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = SampleID
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = SampleID
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
        WHERE tro.strBarcode LIKE '%' + @SearchString + '%';

        IF
        (
            SELECT COUNT(*) FROM @SampleTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
            WHERE EXISTS
            (
                SELECT ID FROM @SampleTypes WHERE m.idfsSampleType = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @SampleStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
            WHERE EXISTS
            (
                SELECT ID FROM @SampleStatusTypes WHERE m.idfsSampleStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @AccessionConditionTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
            WHERE (
                      m.idfsSampleStatus IS NULL
                      OR m.idfsSampleStatus = 10015007
                  ) --In Repository
                  AND EXISTS
            (
                SELECT ID
                FROM @AccessionConditionTypes
                WHERE m.idfsAccessionCondition = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @FunctionalAreas
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
                INNER JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
            WHERE m.idfInDepartment IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @FunctionalAreas WHERE d.idfsDepartmentName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @Diseases
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
            WHERE m.DiseaseID IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE m.DiseaseID = ID
            );

            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                INNER JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
            WHERE m.idfVectorSurveillanceSession IS NOT NULL
                  AND EXISTS
            (
                SELECT ID
                FROM @Diseases
                WHERE ID IN (
                                SELECT CAST([Value] AS BIGINT)
                                FROM dbo.FN_GBL_SYS_SplitList(vsDiseases.DiseaseIdentifiers, NULL, ',')
                            )
            );

            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                INNER JOIN dbo.tlbMonitoringSession ms
                    ON ms.idfMonitoringSession = m.idfMonitoringSession
                       AND ms.intRowStatus = 0
                INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                       AND msd.intRowStatus = 0
            WHERE m.idfMonitoringSession IS NOT NULL
                  AND m.DiseaseID IS NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE msd.idfsDiagnosis = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestNameTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = TestID
            WHERE EXISTS
            (
                SELECT ID FROM @TestNameTypes WHERE t.idfsTestName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestResultTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = TestID
            WHERE EXISTS
            (
                SELECT ID FROM @TestResultTypes WHERE t.idfsTestResult = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestCategoryTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = TestID
            WHERE EXISTS
            (
                SELECT ID FROM @TestCategoryTypes WHERE t.idfsTestCategory = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = TestID
            WHERE EXISTS
            (
                SELECT ID FROM @TestStatusTypes WHERE t.idfsTestStatus = ID
            );
        END;

        INSERT INTO @FinalResultsDedup
        SELECT SampleID,
               TestID
        FROM @FinalResults
        GROUP BY SampleID,
                 TestID;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @FinalResultsDedup
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        DELETE res
        FROM @FinalResultsDedup res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS (
                              SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
              );

        DELETE FROM @FinalResultsDedup
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SET @TotalRowCount =
        (
            SELECT COUNT(*) FROM @FinalResultsDedup
        );

        SELECT CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
            THEN
                       m.idfsSampleStatus
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
            THEN
                       m.idfsSampleStatus
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
            THEN
                       t.idfsTestStatus
                   WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
            THEN
                       t.idfsTestStatus
               END AS ActionRequestedID,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       @SampleDeletion
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       @SampleDestruction
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
               THEN
                       @Validation
                   WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
               THEN
                       @TestDeletion
               END AS ActionRequested,
               m.idfMaterial AS SampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               a.strAnimalCode AS EIDSSAnimalID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               sampleType.name AS SampleTypeName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               t.idfTesting AS TestID,
               t.idfsTestName AS TestNameTypeID,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsTestResult AS TestResultTypeID,
               t.idfsTestStatus AS TestStatusTypeID,
               testNameType.name AS TestNameTypeName,
               testStatusType.name AS TestStatusTypeName,
               testResultType.name AS TestResultTypeName,
               u.idfUserID AS ResultEnteredByUserID,
               m.datAccession AS AccessionDate,
               m.idfsSampleStatus AS SampleStatusTypeID,
               CASE
                   WHEN m.blnAccessioned = 0
                        AND m.idfsSampleStatus IS NULL
                        AND m.idfsAccessionCondition IS NULL THEN
                       'Un-accessioned'
                   WHEN m.idfsSampleStatus IS NULL THEN
                       accessionConditionType.name
                   WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                       accessionConditionType.name
                   ELSE
                       sampleStatusType.name
               END AS AccessionConditionOrSampleStatusTypeName,
               t.datConcludedDate AS ResultDate,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               NULL AS PreviousTestStatusTypeID,
               m.intRowStatus AS RowStatus,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               @TotalRowCount AS TotalRowCount
        FROM @FinalResultsDedup res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
                   AND m.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN dbo.tlbTesting t
                ON t.idfTesting = res.TestID
                   AND t.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tstUserTable u
                ON u.idfPerson = t.idfResultEnteredByPerson
                   AND u.intRowStatus = 0;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_BATCH_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_BATCH_ADVANCED_SEARCH_GETList
--
-- Description:	Get laboratory batch list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     03/25/2019 Initial release.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/25/2020 Added batch test list parameter and where clause criteria.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/30/2020 Remove unneeded joins.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Mark Wilson		08/16/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     02/10/2022 Removed unneeded joins.
-- Stephen Long     03/25/2022 Removed primary key from final results table variable.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Changed from repair to reference repair function.
-- Stephen Long     08/12/2022 Removed where criteria for surveillance type of both; de-activated 
--                             base reference record.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     10/24/2022 Moved where clause check on tests count to insert of final results.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/12/2023 Updated for site filtration queries.
-- Stephen Long     01/31/2023 Added coalesce on collection and entered dates.
-- Stephen Long     02/03/2023 Added filtration indicator logic.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_BATCH_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @BatchTestList VARCHAR(MAX),
    @FiltrationIndicator BIT = 1,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        BatchStatusTypeID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID INT NOT NULL,
        BatchStatusTypeID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL,
        TestsCount INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML,
            @InProgressCount INT = 0;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               1,
               CASE
                   WHEN b.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN b.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN b.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN b.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      m.idfSendToOffice = @UserOrganizationID
                      OR @UserOrganizationID IS NULL
                  )
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND sgs.idfsSite = b.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = b.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = b.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = b.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT b.idfBatchTest
            FROM dbo.tlbBatchTest b
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = b.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE b.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup -- Default role
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = b.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = b.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = b.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = b.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = b.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = b.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = b.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = b.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = b.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = b.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = b.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = b.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = b.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT b.idfBatchTest
            FROM dbo.tlbBatchTest b
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = b.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT res.ID,
               MAX(res.BatchStatusTypeID),
               MAX(ReadPermissionIndicator),
               MAX(AccessToPersonalDataPermissionIndicator),
               MAX(AccessToGenderAndAgeDataPermissionIndicator),
               MAX(WritePermissionIndicator),
               MAX(DeletePermissionIndicator),
               (
                   SELECT COUNT(idfTesting)
                   FROM dbo.tlbTesting
                   WHERE idfBatchTest = res.ID
                         AND intRowStatus = 0
               ) AS TestsCount
        FROM @Results res
            INNER JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = res.ID
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      (b.idfBatchTest IN (
                                             SELECT CAST([Value] AS BIGINT)
                                             FROM dbo.FN_GBL_SYS_SplitList(@BatchTestList, NULL, ',')
                                         )
                      )
                      OR @BatchTestList IS NULL
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.blnAccessioned = @AccessionedIndicatorList
                              AND m.idfsAccessionCondition IS NULL
                          )
                          OR (
                                 @AccessionedIndicatorList IS NULL
                                 AND @SampleStatusTypeList IS NULL
                             )
                      )
                      OR (
                             (
                                 (m.idfsSampleStatus IN (
                                                            SELECT CAST([Value] AS BIGINT)
                                                            FROM dbo.FN_GBL_SYS_SplitList(
                                                                                             @SampleStatusTypeList,
                                                                                             NULL,
                                                                                             ','
                                                                                         )
                                                        )
                                 )
                                 OR (
                                        m.idfsAccessionCondition IN (
                                                                        SELECT CAST([Value] AS BIGINT)
                                                                        FROM dbo.FN_GBL_SYS_SplitList(
                                                                                                         @SampleStatusTypeList,
                                                                                                         NULL,
                                                                                                         ','
                                                                                                     )
                                                                    )
                                        AND (
                                                m.idfsSampleStatus IS NULL
                                                OR m.idfsSampleStatus = 10015007 --In Repository
                                            )
                                    )
                             )
                             OR (
                                    @SampleStatusTypeList IS NULL
                                    AND @AccessionedIndicatorList IS NULL
                                )
                         )
                  )
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      t.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR (@EIDSSReportCampaignOrSessionID IS NULL)
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
        GROUP by res.ID;

        DELETE FROM @FinalResults
        WHERE TestsCount = 0;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SET @InProgressCount =
        (
            SELECT IIF(
                       SUM(   CASE
                                  WHEN BatchStatusTypeID = 10001003 --In Progress
                              THEN
                                      1
                                  ELSE
                                      0
                              END
                          ) IS NULL,
                       0,
                       SUM(   CASE
                                  WHEN BatchStatusTypeID = 10001003 --In Progress
                              THEN
                                      1
                                  ELSE
                                      0
                              END
                          ))
            FROM @FinalResults res
                INNER JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = res.ID
        );

        SELECT b.idfBatchTest AS BatchTestID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               b.strBarcode AS EIDSSBatchTestID,
               b.idfsBatchStatus AS BatchStatusTypeID,
               batchStatusType.name AS BatchStatusTypeName,
               b.idfPerformedByOffice AS BatchTestPerformedByOrganizationID,
               b.idfPerformedByPerson AS BatchTestPerformedByPersonID,
               b.idfsTestName AS BatchTestTestNameTypeID,
               batchTestTestNameType.name AS BatchTestTestNameTypeName,
               t.idfTesting AS TestID,
               t.idfsTestName AS TestNameTypeID,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsTestResult AS TestResultTypeID,
               t.idfsTestStatus AS TestStatusTypeID,
               t.idfsDiagnosis AS DiseaseID,
               disease.name AS DiseaseName,
               m.idfMaterial AS SampleID,
               m.idfSendToOffice AS SentToOrganizationID,
               t.intTestNumber AS TestNumber,
               t.strNote AS Note,
               t.datStartedDate AS StartedDate,
               t.datConcludedDate AS ResultDate,
               t.idfTestedByOffice AS TestedByOrganizationID,
               t.idfTestedByPerson AS TestedByPersonID,
               t.idfResultEnteredByOffice AS ResultEnteredByOrganizationID,
               t.idfResultEnteredByPerson AS ResultEnteredByPersonID,
               t.idfValidatedByOffice AS ValidatedByOrganizationID,
               t.idfValidatedByPerson AS ValidatedByPersonID,
               t.blnReadOnly AS ReadOnlyIndicator,
               t.blnNonLaboratoryTest AS NonLaboratoryTestIndicator,
               t.blnExternalTest AS ExternalTestIndicator,
               t.idfPerformedByOffice AS PerformedByOrganizationID,
               t.datReceivedDate AS ReceivedDate,
               t.strContactPerson AS ContactPersonName,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                       '**********'
                   ELSE
                       m.strCalculatedHumanName
               END AS PatientOrFarmOwnerName,
               sampleType.name AS SampleTypeName,
               m.strBarcode AS EIDSSLaboratorySampleID,
               testNameType.name AS TestNameTypeName,
               testStatusType.name AS TestStatusTypeName,
               testResultType.name AS TestResultTypeName,
               testCategoryType.name AS TestCategoryTypeName,
               m.datAccession AS AccessionDate,
               functionalArea.name AS FunctionalAreaName,
               m.idfsAccessionCondition AS SampleStatusTypeID,
               CASE
                   WHEN m.blnAccessioned = 0
                        AND m.idfsSampleStatus IS NULL
                        AND m.idfsAccessionCondition IS NULL THEN
                       'Un-accessioned'
                   WHEN m.idfsSampleStatus IS NULL THEN
                       accessionConditionType.name
                   WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                       accessionConditionType.name
                   ELSE
                       sampleStatusType.name
               END AS AccessionConditionOrSampleStatusTypeName,
               m.strCondition AS AccessionComment,
               a.strAnimalCode AS EIDSSAnimalID,
               b.TestRequested,
               b.idfObservation AS ObservationID,
               b.idfPerformedByPerson AS PerformedByPersonID,
               b.datPerformedDate AS PerformedDate,
               b.datValidatedDate AS ValidationDate,
               b.idfsSite AS SiteID,
               t.intRowStatus AS RowStatus,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @InProgressCount AS InProgressCount,
               res.TestsCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = res.ID
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) disease
                ON disease.idfsReference = t.idfsDiagnosis
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) batchTestTestNameType
                ON batchTestTestNameType.idfsReference = b.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) batchStatusType
                ON batchStatusType.idfsReference = b.idfsBatchStatus;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_FAVORITE_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_FAVORITE_ADVANCED_SEARCH_GETList
--
-- Description:	Get laboratory favorites list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/21/2019 Initial release.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     01/15/2020 Added transfer ID to query.
-- Stephen Long     01/22/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/16/2020 Added sample and test list parameters and where clause criteria.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     06/06/2020 Added batch status type ID to the model.
-- Stephen Long     06/14/2020 Added action requested to the model.
-- Stephen Long     06/24/2020 Added test completed indicator to the model.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/30/2020 Removing unneeded joins.
-- Stephen Long     11/29/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Mark Wilson		08/16/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     11/18/2021 Added action requested ID and previous test status type to the 
--                             query.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     02/10/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     03/10/2022 Added note field to the query.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/11/2022 Removed show in lab list criteria.
-- Stephen Long     08/12/2022 Removed where criteria for surveillance type of both; de-activated 
--                             base reference record.  Changed group by on insert of final results.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     09/28/2022 Bug fix on item 5117.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/12/2023 Updated for site filtration queries.
-- Stephen Long     01/23/2023 Updated default sort order.
-- Stephen Long     01/31/2023 Added coalesce on collection and entered dates.
-- Stephen Long     02/03/2023 Added filtration indicator logic.
-- Stephen Long     03/02/2023 Updated initial query where to use site ID instead of sent to 
--                             organization.
-- Stephen Long     03/15/2023 Fix on default sort order.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_FAVORITE_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @SentToOrganizationSiteID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @SampleList VARCHAR(MAX) = NULL,
    @TestList VARCHAR(MAX) = NULL,
    @FiltrationIndicator BIT = 1,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @Results TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL INDEX c NONCLUSTERED,
        TestID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL INDEX c NONCLUSTERED,
        TestID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL,
        RowAction INT NOT NULL
            DEFAULT 0
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML;
    DECLARE @SampleStatusTypeListTable TABLE (ID BIGINT NOT NULL PRIMARY KEY);
    BEGIN TRY
        IF @SampleStatusTypeList IS NOT NULL
            INSERT INTO @SampleStatusTypeListTable
            SELECT CAST([Value] AS BIGINT)
            FROM dbo.FN_GBL_SYS_SplitList(@SampleStatusTypeList, NULL, ',');

        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               1,
               CASE
                   WHEN m.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND (
                      (
                          (
                              m.idfSendToOffice = @SentToOrganizationID
                              OR @SentToOrganizationID IS NULL
                          )
                          AND (
                                  (
                                      m.blnAccessioned = @AccessionedIndicatorList
                                      OR (
                                             m.blnAccessioned = 1
                                             AND m.datAccession IS NULL
                                             AND @AccessionedIndicatorList IS NOT NULL
                                         )
                                  )
                                  AND m.idfsAccessionCondition IS NULL
                                  AND m.idfsSampleStatus IS NULL
                                  AND m.datDestructionDate IS NULL
                                  OR (
                                         @AccessionedIndicatorList IS NULL
                                         AND @SampleStatusTypeList IS NULL
                                     )
                              )
                      )
                      OR (
                             (
                                 (
                                     m.idfSendToOffice = @SentToOrganizationID
                                     AND m.idfsSite = @SentToOrganizationSiteID
                                 )
                                 OR @SentToOrganizationID IS NULL
                             )
                             AND (
                                     (m.idfsSampleStatus IN (
                                                                SELECT ID FROM @SampleStatusTypeListTable
                                                            )
                                     )
                                     OR (
                                            m.idfsAccessionCondition IN (
                                                                            SELECT ID FROM @SampleStatusTypeListTable
                                                                        )
                                            AND (
                                                    m.idfsSampleStatus IS NULL
                                                    OR m.idfsSampleStatus = 10015007 --In Repository
                                                )
                                        )
                                     OR (
                                            @SampleStatusTypeList IS NULL
                                            AND @AccessionedIndicatorList IS NULL
                                        )
                                 )
                         )
                  );

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
        WHERE m.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = m.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
        WHERE m.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT m.idfMaterial,
               t.idfTesting,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator),
               0
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      (m.idfMaterial IN (
                                            SELECT CAST([Value] AS BIGINT)
                                            FROM dbo.FN_GBL_SYS_SplitList(@SampleList, NULL, ',')
                                        )
                      )
                      OR (@SampleList IS NULL)
                  )
              AND (
                      (t.idfTesting IN (
                                           SELECT CAST([Value] AS BIGINT)
                                           FROM dbo.FN_GBL_SYS_SplitList(@TestList, NULL, ',')
                                       )
                      )
                      OR (@TestList IS NULL)
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.idfSendToOffice = @SentToOrganizationID
                              OR @SentToOrganizationID IS NULL
                          )
                          AND (
                                  (
                                      m.blnAccessioned = @AccessionedIndicatorList
                                      OR (
                                             m.blnAccessioned = 1
                                             AND m.datAccession IS NULL
                                             AND @AccessionedIndicatorList IS NOT NULL
                                         )
                                  )
                                  AND m.idfsAccessionCondition IS NULL
                                  AND m.idfsSampleStatus IS NULL
                                  AND m.datDestructionDate IS NULL
                                  OR (
                                         @AccessionedIndicatorList IS NULL
                                         AND @SampleStatusTypeList IS NULL
                                     )
                              )
                      )
                      OR (
                             (
                                 (
                                     m.idfSendToOffice = @SentToOrganizationID
                                     AND m.idfsSite = @SentToOrganizationSiteID
                                 )
                                 OR @SentToOrganizationID IS NULL
                             )
                             AND (
                                     (m.idfsSampleStatus IN (
                                                                SELECT ID FROM @SampleStatusTypeListTable
                                                            )
                                     )
                                     OR (
                                            m.idfsAccessionCondition IN (
                                                                            SELECT ID FROM @SampleStatusTypeListTable
                                                                        )
                                            AND (
                                                    m.idfsSampleStatus IS NULL
                                                    OR m.idfsSampleStatus = 10015007 --In Repository
                                                )
                                        )
                                     OR (
                                            @SampleStatusTypeList IS NULL
                                            AND @AccessionedIndicatorList IS NULL
                                        )
                                 )
                         )
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR m.DiseaseID = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR (@EIDSSReportCampaignOrSessionID IS NULL)
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
        GROUP BY m.idfMaterial,
                 t.idfTesting;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        DECLARE @FavoriteCount AS INT = (
                                            SELECT COUNT(*)
                                            FROM @FinalResults
                                                INNER JOIN
                                                (
                                                    SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                                                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                                                ) f
                                                    ON ID = f.SampleID
                                        ),
                @RecordCount INT = (
                                       SELECT COUNT(ID) FROM @FinalResults
                                   );

        IF @RecordCount > 10000
        BEGIN
            DELETE FROM @FinalResults
            WHERE ID <>
            (
                SELECT MAX(ID) FROM @FinalResults
            );
            UPDATE @FinalResults
            SET RowAction = 99; -- Narrow Search Criteria
        END

        SELECT m.idfMaterial AS SampleID,
               m.idfsSite AS SiteID,
               m.idfsCurrentSite AS CurrentSiteID,
               t.idfTesting AS TestID,
               tom.idfTransferOut AS TransferID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               m.idfsSampleType AS SampleTypeID,
               sampleType.name AS SampleTypeName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               m.datFieldCollectionDate AS CollectionDate,
               m.idfFieldCollectedByPerson AS CollectedByPersonID,
               m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
               m.datFieldSentDate AS SentDate,
               m.idfSendToOffice AS SentToOrganizationID,
               t.idfsTestName AS TestNameTypeID,
               testNameType.name AS TestNameTypeName,
               t.idfsTestStatus AS TestStatusTypeID,
               testStatusType.name AS TestStatusTypeName,
               t.datStartedDate AS StartedDate,
               t.idfsTestResult AS TestResultTypeID,
               testResultType.name AS TestResultTypeName,
               t.datConcludedDate AS ResultDate,
               t.idfsTestCategory AS TestCategoryTypeID,
               testCategoryType.name AS TestCategoryTypeName,
               m.blnAccessioned AS AccessionIndicator,
               m.datAccession AS AccessionDate,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.idfSubdivision AS FreezerSubdivisionID,
               m.StorageBoxPlace,
               m.datEnteringDate AS EnteredDate,
               m.datOutOfRepositoryDate AS OutOfRepositoryDate,
               m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
               m.blnReadOnly AS ReadOnlyIndicator,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               CASE
                   WHEN m.blnAccessioned = 0
                        AND m.idfsSampleStatus IS NULL
                        AND m.idfsAccessionCondition IS NULL THEN
                       'Un-accessioned'
                   WHEN m.idfsSampleStatus IS NULL THEN
                       accessionConditionType.name
                   WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                       accessionConditionType.name
                   ELSE
                       sampleStatusType.name
               END AS AccessionConditionOrSampleStatusTypeName,
               m.idfAccesionByPerson AS AccessionedInByPersonID,
               m.datSampleStatusDate AS SampleStatusDate,
               m.strCondition AS AccessionComment,
               m.strNote AS Comment,
               a.strAnimalCode AS EIDSSAnimalID,
               m.idfsBirdStatus AS BirdStatusTypeID,
               m.idfMainTest AS MainTestID,
               m.idfsSampleKind AS SampleKindTypeID,
               b.idfsBatchStatus AS BatchStatusTypeID,
               ISNULL(   IIF(
                            (
                                SELECT COUNT(t3.idfTesting)
                                FROM dbo.tlbTesting t3
                                WHERE t3.idfsTestStatus IN (   10001003,
                                                                        --In Progress
                                                               10001004 --Preliminary
                                                           )
                                      AND t3.idfMaterial = m.idfMaterial
                                      AND t3.intRowStatus = 0
                                      AND t3.blnNonLaboratoryTest = 0
                            ) > 0,
                            1,
                            0),
                         0
                     ) AS TestAssignedIndicator,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       m.idfsSampleStatus
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       m.idfsSampleStatus
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
               THEN
                       t.idfsTestStatus
                   WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
               THEN
                       t.idfsTestStatus
               END AS ActionRequestedID,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       'Sample Deletion'
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       'Sample Destruction'
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
               THEN
                       'Validation'
                   WHEN t.idfsTestStatus = 19000502 --Marked for Deletion
               THEN
                       'Test Deletion'
               END AS ActionRequested,
               ISNULL(   IIF(
                            (
                                SELECT COUNT(t2.idfTesting)
                                FROM dbo.tlbTesting t2
                                WHERE t2.idfsTestStatus IN (   10001001,
                                                                        --Final
                                                               10001006 --Amended
                                                           )
                                      AND t2.idfMaterial = m.idfMaterial
                                      AND t2.intRowStatus = 0
                                      AND t2.blnNonLaboratoryTest = 0
                            ) > 0,
                            1,
                            0),
                         0
                     ) AS TestCompletedIndicator,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               t.PreviousTestStatusID AS PreviousTestStatusTypeID,
               m.LabModuleSourceIndicator,
               m.idfHumanCase AS HumanDiseaseReportID,
               m.idfVetCase AS VeterinaryDiseaseReportID,
               m.idfMonitoringSession AS MonitoringSessionID,
               m.idfVectorSurveillanceSession AS VectorSessionID,
               m.idfVector AS VectorID,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               res.RowAction,
               0 AS RowSelectionIndicator,
               @RecordCount AS TotalRowCount,
               @FavoriteCount AS FavoriteCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN dbo.tlbTesting t
                ON t.idfTesting = res.TestID
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
        ORDER BY m.blnAccessioned,
                 m.idfsSampleStatus DESC,
                 m.idfsAccessionCondition,
                 COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate) DESC;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_FAVORITE_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_FAVORITE_GETList
--
-- Description:	Get laboratory favorites list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     10/20/2018 Initial release.
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     01/25/2019 Added intRowStatus check to where clause.
-- Stephen Long     01/30/2019 Added sample disease reference join and removed the vector 
--                             surveillance session joins as they are no longer needed.
-- Stephen Long     02/20/2019 Added disease ID to the select list.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     09/14/2019 Added pagination set 0 to bring back "all" records.
-- Stephen Long     10/20/2019 Added test assigned indicator and test name type ID to the list of 
--                             fields.
-- Stephen Long     01/15/2020 Added transfer ID to query.
-- Stephen Long     01/22/2020 Cleaned up stored procedure.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     06/06/2020 Added batch status type ID to the model.
-- Stephen Long     06/14/2020 Added action requested to the model.
-- Stephen Long     06/24/2020 Added test completed indicator to the model.
-- Stephen Long     11/29/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Mark Wilson		08/16/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     11/10/2021 Added sample ID parameter and where criteria.
-- Stephen Long     11/16/2021 Changed to use select row over instead of with cte.
-- Stephen Long     11/18/2021 Added action requested ID and previous test status type to the 
--                  query.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     02/10/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     03/10/2022 Added note field to the query.
-- Stephen Long     04/15/2022 Added join for favorites to the filtration queries.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/12/2023 Updated for site filtration queries.
-- Stephen Long     01/23/2023 Updated default sort order.
-- Stephen Long     03/29/2023 Added default rule check for configurable filtration.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_FAVORITE_GETList]
		@LanguageID = N'en-US',
		@UserID = 161287150000872, --rykermase
		@UserEmployeeID = 420664190000872,
		@UserSiteID = 864,
		@UserOrganizationID = 758210000000,
		@UserSiteGroupID = NULL,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_FAVORITE_GETList]
(
    @LanguageID NVARCHAR(50),
    @SampleID BIGINT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @Results
        SELECT m.idfMaterial,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  );

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = @UserSiteGroupID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
                   AND ar.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
                   AND ar.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
                   AND ar.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
                   AND ar.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfSiteGroup = @UserSiteGroupID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
                   AND ar.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
                   AND ar.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND ar.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
                   AND ar.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND ar.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
                   AND ar.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND ar.GrantingActorSiteID = m.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS (
                              SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
              );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT res.ID,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator)
        FROM @Results res
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
        GROUP BY res.ID;

        DECLARE @FavoriteCount AS INT = (
                                            SELECT COUNT(*)
                                            FROM @FinalResults
                                                INNER JOIN
                                                (
                                                    SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                                                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                                                ) f
                                                    ON ID = f.SampleID
                                        );

        SELECT m.idfMaterial AS SampleID,
               m.idfsSite AS SiteID,
               m.idfsCurrentSite AS CurrentSiteID,
               t.idfTesting AS TestID,
               tom.idfTransferOut AS TransferID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               m.idfsSampleType AS SampleTypeID,
               sampleType.name AS SampleTypeName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               m.datFieldCollectionDate AS CollectionDate,
               m.idfFieldCollectedByPerson AS CollectedByPersonID,
               m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
               m.datFieldSentDate AS SentDate,
               m.idfSendToOffice AS SentToOrganizationID,
               t.idfsTestName AS TestNameTypeID,
               testNameType.name AS TestNameTypeName,
               t.idfsTestStatus AS TestStatusTypeID,
               testStatusType.name AS TestStatusTypeName,
               t.datStartedDate AS StartedDate,
               t.idfsTestResult AS TestResultTypeID,
               testResultType.name AS TestResultTypeName,
               t.datConcludedDate AS ResultDate,
               t.idfsTestCategory AS TestCategoryTypeID,
               testCategoryType.name AS TestCategoryTypeName,
               m.blnAccessioned AS AccessionIndicator,
               m.datAccession AS AccessionDate,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.idfSubdivision AS FreezerSubdivisionID,
               m.StorageBoxPlace,
               m.datEnteringDate AS EnteredDate,
               m.datOutOfRepositoryDate AS OutOfRepositoryDate,
               m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
               m.blnReadOnly AS ReadOnlyIndicator,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               CASE
                   WHEN m.blnAccessioned = 0
                        AND m.idfsSampleStatus IS NULL
                        AND m.idfsAccessionCondition IS NULL THEN
                       'Un-accessioned'
                   WHEN m.idfsSampleStatus IS NULL THEN
                       accessionConditionType.name
                   WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                       accessionConditionType.name
                   ELSE
                       sampleStatusType.name
               END AS AccessionConditionOrSampleStatusTypeName,
               m.idfAccesionByPerson AS AccessionedInByPersonID,
               m.datSampleStatusDate AS SampleStatusDate,
               m.strCondition AS AccessionComment,
               m.strNote AS Comment,
               a.strAnimalCode AS EIDSSAnimalID,
               m.idfsBirdStatus AS BirdStatusTypeID,
               m.idfMainTest AS MainTestID,
               m.idfsSampleKind AS SampleKindTypeID,
               b.idfsBatchStatus AS BatchStatusTypeID,
               ISNULL(   IIF(
                            (
                                SELECT COUNT(t3.idfTesting)
                                FROM dbo.tlbTesting t3
                                WHERE t3.idfsTestStatus IN (   10001003,
                                                                        --In Progress
                                                               10001004 --Preliminary
                                                           )
                                      AND t3.idfMaterial = m.idfMaterial
                                      AND t3.intRowStatus = 0
                                      AND t3.blnNonLaboratoryTest = 0
                            ) > 0,
                            1,
                            0),
                         0
                     ) AS TestAssignedIndicator,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       m.idfsSampleStatus
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       m.idfsSampleStatus
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
               THEN
                       t.idfsTestStatus
                   WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
               THEN
                       t.idfsTestStatus
               END AS ActionRequestedID,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       'Sample Deletion'
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       'Sample Destruction'
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
               THEN
                       'Validation'
                   WHEN t.idfsTestStatus = 19000502 --Marked for Deletion
               THEN
                       'Test Deletion'
               END AS ActionRequested,
               ISNULL(   IIF(
                            (
                                SELECT COUNT(t2.idfTesting)
                                FROM dbo.tlbTesting t2
                                WHERE t2.idfsTestStatus IN (   10001001,
                                                                        --Final
                                                               10001006 --Amended
                                                           )
                                      AND t2.idfMaterial = m.idfMaterial
                                      AND t2.intRowStatus = 0
                                      AND t2.blnNonLaboratoryTest = 0
                            ) > 0,
                            1,
                            0),
                         0
                     ) AS TestCompletedIndicator,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               t.PreviousTestStatusID AS PreviousTestStatusTypeID,
               m.LabModuleSourceIndicator,
               m.idfHumanCase AS HumanDiseaseReportID,
               m.idfVetCase AS VeterinaryDiseaseReportID,
               m.idfMonitoringSession AS MonitoringSessionID,
               m.idfVectorSurveillanceSession AS VectorSessionID,
               m.idfVector AS VectorID,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @FavoriteCount AS FavoriteCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            ORDER BY m.blnAccessioned,
                     m.idfsSampleStatus DESC,
                     m.idfsAccessionCondition,
                     COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate) DESC;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_FAVORITE_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_FAVORITE_SEARCH_GETList
--
-- Description:	Get laboratory favorites list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/21/2019 Initial release.
-- Stephen Long     07/09/2019 Added disease to wildcard search.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     09/05/2019 Removed transfer where clause and organization ID check.
-- Stephen Long     01/15/2020 Added transfer ID to query.
-- Stephen Long     01/22/2020 Cleaned up stored procedure.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     06/06/2020 Added batch status type ID to the model.
-- Stephen Long     06/07/2020 Added additional search fields to the where clause.
-- Stephen Long     06/14/2020 Added action requested to the model.
-- Stephen Long     06/24/2020 Added test completed indicator to the model.
-- Stephen Long     11/29/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2021 Moved pagination to table variable insert.
-- Stephen Long     01/05/2021 Removed sent to organization where criteria.
-- Stephen Long     01/07/2021 Removed leading wildcard (%) as full table scans are performed even 
--                             with indices resulting in long query run times.  Recommend NOT 
--                             putting those back in.
-- Mark Wilson		08/16/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/20/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     11/18/2021 Added action requested ID and previous test status type to the 
--                  query.
-- Stephen Long     12/07/2021 Added group by on final results.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     02/10/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     03/10/2022 Added note field to the query.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     09/28/2022 Bug fix on item 5111, 5112, 5113 and 5114.
-- Stephen Long     10/17/2022 Bug fix on item 5018 - searching by dates.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     10/24/2022 Bug fix on GIT #464.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/14/2023 Updated for site filtration queries.
-- Stephen Long     01/23/2023 Updated default sort order.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_FAVORITE_SEARCH_GETList]
		@LanguageID = N'en-US',
		@SearchString = N'COVID', -- Use 'Gnhnscvxb', 'Blood', 'XWEB00' as other tests.
		@TestUnassignedIndicator = NULL,
		@TestCompletedIndicator = NULL,
		@UserID = 161287150000872, -- rykermase
		@UserOrganizationID = 758210000000,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_FAVORITE_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @SearchString NVARCHAR(2000),
    @AccessionedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT, 
    @UserOrganizationID BIGINT,
    @UserSiteID BIGINT 
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @InitialResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL
    );
    DECLARE @Results TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL,
        BatchStatusTypeID BIGINT NULL,
        TestNameTypeID BIGINT NULL,
        TestNameTypeName NVARCHAR(MAX) NULL,
        TestStatusTypeID BIGINT NULL,
        TestStatusTypeName NVARCHAR(MAX) NULL,
        StartedDate DATETIME NULL,
        TestResultTypeID BIGINT NULL,
        TestResultTypeName NVARCHAR(MAX) NULL,
        ResultDate DATETIME NULL,
        TestCategoryTypeID BIGINT NULL,
        TestCategoryTypeName NVARCHAR(MAX) NULL,
        PreviousTestStatusID BIGINT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL,
        BatchStatusTypeID BIGINT NULL,
        TestNameTypeID BIGINT NULL,
        TestNameTypeName NVARCHAR(MAX) NULL,
        TestStatusTypeID BIGINT NULL,
        TestStatusTypeName NVARCHAR(MAX) NULL,
        StartedDate DATETIME NULL,
        TestResultTypeID BIGINT NULL,
        TestResultTypeName NVARCHAR(MAX) NULL,
        ResultDate DATETIME NULL,
        TestCategoryTypeID BIGINT NULL,
        TestCategoryTypeName NVARCHAR(MAX) NULL,
        PreviousTestStatusID BIGINT NULL
    );
    DECLARE @SampleTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @SampleStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @AccessionConditionTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestNameTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestResultTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestCategoryTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @Diseases TABLE (ID BIGINT NOT NULL);
    DECLARE @FunctionalAreas TABLE (ID BIGINT NOT NULL);
    DECLARE @Favorites XML,
            @LanguageCode BIGINT;
    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);
        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @InitialResults
        SELECT m.idfMaterial,
               NULL
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
        WHERE m.intRowStatus = 0;

        INSERT INTO @SampleTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000087
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @SampleStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000015
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @AccessionConditionTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000110
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @Diseases
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000019
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestNameTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000097
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestResultTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000096
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestCategoryTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000095
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000001
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FunctionalAreas
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000164
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @Results
        SELECT SampleID,
               t.idfTesting,
               b.idfsBatchStatus,
               t.idfsTestName,
               testNameType.name,
               t.idfsTestStatus,
               testStatusType.name,
               t.datStartedDate,
               t.idfsTestResult,
               testResultType.name,
               t.datConcludedDate,
               t.idfsTestCategory,
               testCategoryType.name,
               t.PreviousTestStatusID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
        WHERE (
                  m.blnAccessioned = @AccessionedIndicator
                  AND m.idfsSampleStatus IS NULL
                  AND m.datAccession IS NULL 
                  AND m.datDestructionDate IS NULL
                  AND @AccessionedIndicator IS NOT NULL
              ) -- Un-accessioned samples
              OR (
                     CONVERT(NVARCHAR(MAX), FORMAT(m.datAccession, 'g', @LanguageID)) LIKE '%' + @SearchString + '%'
                     OR CONVERT(NVARCHAR(MAX), FORMAT(t.datStartedDate, 'd', @LanguageID)) LIKE '%' + @SearchString
                                                                                                + '%'
                     OR CONVERT(NVARCHAR(MAX), FORMAT(t.datConcludedDate, 'd', @LanguageID)) LIKE '%' + @SearchString
                                                                                                  + '%'
                     OR (
                            m.strBarcode IS NOT NULL
                            AND m.strBarcode <> ''
                            AND m.strBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strFieldBarcode IS NOT NULL
                            AND m.strFieldBarcode <> ''
                            AND m.strFieldBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCondition IS NOT NULL
                            AND m.strCondition <> ''
                            AND m.strCondition LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedCaseID IS NOT NULL
                            AND m.strCalculatedCaseID <> ''
                            AND m.strCalculatedCaseID LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedHumanName IS NOT NULL
                            AND m.strCalculatedHumanName <> ''
                            AND m.strCalculatedHumanName LIKE '%' + @SearchString + '%'
                        )
                 );

        INSERT INTO @Results
        SELECT SampleID,
               t.idfTesting,
               b.idfsBatchStatus,
               t.idfsTestName,
               testNameType.name,
               t.idfsTestStatus,
               testStatusType.name,
               t.datStartedDate,
               t.idfsTestResult,
               testResultType.name,
               t.datConcludedDate,
               t.idfsTestCategory,
               testCategoryType.name,
               t.PreviousTestStatusID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
            INNER JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
        WHERE m.idfAnimal IS NOT NULL
              AND a.strAnimalCode LIKE '%' + @SearchString + '%';

        INSERT INTO @Results
        SELECT SampleID,
               TestID,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL
        FROM @InitialResults
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = SampleID
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
        WHERE tro.strBarcode LIKE '%' + @SearchString + '%';

        IF
        (
            SELECT COUNT(*) FROM @SampleTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @SampleTypes WHERE m.idfsSampleType = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @SampleStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @SampleStatusTypes WHERE m.idfsSampleStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @AccessionConditionTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE (
                      m.idfsSampleStatus IS NULL
                      OR m.idfsSampleStatus = 10015007
                  ) --In Repository
                  AND EXISTS
            (
                SELECT ID
                FROM @AccessionConditionTypes
                WHERE m.idfsAccessionCondition = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestNameTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @TestNameTypes WHERE t.idfsTestName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestResultTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @TestResultTypes WHERE t.idfsTestResult = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestCategoryTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @TestCategoryTypes WHERE t.idfsTestCategory = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @TestStatusTypes WHERE t.idfsTestStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @FunctionalAreas
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                INNER JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE m.idfInDepartment IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @FunctionalAreas WHERE d.idfsDepartmentName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @Diseases
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE m.DiseaseID IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE m.DiseaseID = ID
            );

            INSERT INTO @FinalResults
            SELECT ir.SampleID,
                   ir.TestID,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL
            FROM @InitialResults ir
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ir.SampleID
                INNER JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
            WHERE m.idfVectorSurveillanceSession IS NOT NULL
                  AND m.DiseaseID IS NULL
                  AND EXISTS
            (
                SELECT ID
                FROM @Diseases
                WHERE ID IN (
                                SELECT CAST([Value] AS BIGINT)
                                FROM dbo.FN_GBL_SYS_SplitList(vsDiseases.DiseaseIdentifiers, NULL, ',')
                            )
            );

            INSERT INTO @Results
            SELECT SampleID,
                   TestID,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                INNER JOIN dbo.tlbMonitoringSession ms
                    ON ms.idfMonitoringSession = m.idfMonitoringSession
                       AND ms.intRowStatus = 0
                INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                       AND msd.intRowStatus = 0
            WHERE m.idfMonitoringSession IS NOT NULL
                  AND m.DiseaseID IS NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE msd.idfsDiagnosis = ID
            );
        END;

        INSERT INTO @FinalResults
        SELECT SampleID,
               TestID,
               BatchStatusTypeID,
               TestNameTypeID,
               TestNameTypeName,
               TestStatusTypeID,
               TestStatusTypeName,
               StartedDate,
               TestResultTypeID,
               TestResultTypeName,
               ResultDate,
               TestCategoryTypeID,
               TestCategoryTypeName,
               PreviousTestStatusID
        FROM @Results
        GROUP BY SampleID,
                 TestID,
                 BatchStatusTypeID,
                 TestNameTypeID,
                 TestNameTypeName,
                 TestStatusTypeID,
                 TestStatusTypeName,
                 StartedDate,
                 TestResultTypeID,
                 TestResultTypeName,
                 ResultDate,
                 TestCategoryTypeID,
                 TestCategoryTypeName,
                 PreviousTestStatusID;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @FinalResults
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS (
                              SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
              );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @FinalResults
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        DECLARE @FavoriteCount AS INT = (
                                            SELECT COUNT(*)
                                            FROM @FinalResults r
                                                INNER JOIN
                                                (
                                                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                                                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                                                ) f
                                                    ON r.SampleID = f.SampleID
                                        );

        SELECT m.idfMaterial AS SampleID,
               m.idfsSite AS SiteID,
               m.idfsCurrentSite AS CurrentSiteID,
               res.TestID AS TestID,
               tom.idfTransferOut AS TransferID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               m.idfsSampleType AS SampleTypeID,
               sampleType.name AS SampleTypeName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               m.datFieldCollectionDate AS CollectionDate,
               m.idfFieldCollectedByPerson AS CollectedByPersonID,
               m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
               m.datFieldSentDate AS SentDate,
               m.idfSendToOffice AS SentToOrganizationID,
               TestNameTypeID,
               TestNameTypeName,
               TestStatusTypeID,
               TestStatusTypeName,
               StartedDate,
               TestResultTypeID,
               TestResultTypeName,
               ResultDate,
               TestCategoryTypeID,
               TestCategoryTypeName,
               m.blnAccessioned AS AccessionIndicator,
               m.datAccession AS AccessionDate,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.idfSubdivision AS FreezerSubdivisionID,
               m.StorageBoxPlace,
               m.datEnteringDate AS EnteredDate,
               m.datOutOfRepositoryDate AS OutOfRepositoryDate,
               m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
               m.blnReadOnly AS ReadOnlyIndicator,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               CASE
                   WHEN m.blnAccessioned = 0
                        AND m.idfsSampleStatus IS NULL
                        AND m.idfsAccessionCondition IS NULL THEN
                       'Un-accessioned'
                   WHEN m.idfsSampleStatus IS NULL THEN
                       accessionConditionType.name
                   WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                       accessionConditionType.name
                   ELSE
                       sampleStatusType.name
               END AS AccessionConditionOrSampleStatusTypeName,
               m.idfAccesionByPerson AS AccessionedInByPersonID,
               m.datSampleStatusDate AS SampleStatusDate,
               m.strCondition AS AccessionComment,
               m.strNote AS Comment,
               a.strAnimalCode AS EIDSSAnimalID,
               m.idfsBirdStatus AS BirdStatusTypeID,
               m.idfMainTest AS MainTestID,
               m.idfsSampleKind AS SampleKindTypeID,
               BatchStatusTypeID,
               ISNULL(   IIF(
                            (
                                SELECT COUNT(t3.idfTesting)
                                FROM dbo.tlbTesting t3
                                WHERE t3.idfsTestStatus IN (   10001003,
                                                                        --In Progress
                                                               10001004 --Preliminary
                                                           )
                                      AND t3.idfMaterial = m.idfMaterial
                                      AND t3.intRowStatus = 0
                                      AND t3.blnNonLaboratoryTest = 0
                            ) > 0,
                            1,
                            0),
                         0
                     ) AS TestAssignedIndicator,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       m.idfsSampleStatus
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       m.idfsSampleStatus
                   WHEN TestStatusTypeID = 10001004 --Preliminary
               THEN
                       TestStatusTypeID
                   WHEN TestStatusTypeID = 10001008 --Marked for Deletion
               THEN
                       TestStatusTypeID
               END AS ActionRequestedID,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       'Sample Deletion'
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       'Sample Destruction'
                   WHEN TestStatusTypeID = 10001004 --Preliminary
               THEN
                       'Validation'
                   WHEN TestStatusTypeID = 19000502 --Marked for Deletion
               THEN
                       'Test Deletion'
               END AS ActionRequested,
               ISNULL(   IIF(
                            (
                                SELECT COUNT(t2.idfTesting)
                                FROM dbo.tlbTesting t2
                                WHERE t2.idfsTestStatus IN (   10001001,
                                                                        --Final
                                                               10001006 --Amended
                                                           )
                                      AND t2.idfMaterial = m.idfMaterial
                                      AND t2.intRowStatus = 0
                                      AND t2.blnNonLaboratoryTest = 0
                            ) > 0,
                            1,
                            0),
                         0
                     ) AS TestCompletedIndicator,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               PreviousTestStatusID AS PreviousTestStatusTypeID,
               m.LabModuleSourceIndicator,
               m.idfHumanCase AS HumanDiseaseReportID,
               m.idfVetCase AS VeterinaryDiseaseReportID,
               m.idfMonitoringSession AS MonitoringSessionID,
               m.idfVectorSurveillanceSession AS VectorSessionID,
               m.idfVector AS VectorID,
               1 AS ReadPermissionIndicator,
               1 AS AccessToPersonalDataPermissionIndicator,
               1 AS AccessToGenderAndAgeDataPermissionIndicator,
               1 AS WritePermissionIndicator,
               1 AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @FavoriteCount AS FavoriteCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            ORDER BY m.blnAccessioned,
                     m.idfsSampleStatus DESC,
                     m.idfsAccessionCondition,
                     COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate) DESC;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_SAMPLE_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_SAMPLE_ADVANCED_SEARCH_GETList
--
-- Description:	Get sample advanced search list for the laboratory module use case LUC13.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     01/14/2019 Initial relase.
-- Stephen Long     01/30/2019 Added sample disease reference join, and removed the vector 
--                             surveillance session joins as they are not needed.
-- Stephen Long     02/11/2019 Changed sample status type ID from bigint to nvarchar(max).  Can 
--                             have multiple sample status types.
-- Stephen Long     02/21/2019 Renamed parameters to be consistent with other objects.
-- Stephen Long     03/28/2019 Removed test status 'Not Started' as criteria to pull back in the 
--                             test assigned indicator.
-- Stephen Long     07/01/2019 Corrected reference type on monitoring session category.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     08/29/2019 Added accession condition type field as one of the where clauses.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     11/04/2019 Corrected tlbSpecies join; joined to tlbMaterial instead of tlbHerd.
-- Stephen Long     01/16/2020 Corrected where clause on sample status type for defect 5699.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/08/2020 Added sample list parameter and where clause criteria.
-- Stephen Long     04/16/2020 Removed un-needed joins for farm, herd and species type.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     07/06/2020 Added lab module source indicator to the model.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/28/2020 Removed site left joins as not needed.
-- Stephen Long     10/30/2020 Remove test assigned indicator; use test assigned count instead.
--                             Added EIDSS freezer ID.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Stephen Long     02/10/2021 Remove unneeded joins and add check for blnShowInLabList.
-- Stephen Long     06/28/2021 Applied new pagination parameters.
-- Mark Wilson		08/11/2021 updated to join tlbMonitoringSessionToDiagnosis
-- Stephen Long     09/18/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/11/2021 Split out query to get initial results using required date range.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     02/08/2022 Removed unneeded joins.
-- Stephen Long     03/10/2022 Changed note to comment and transfer count to transferred count.
-- Stephen Long     03/24/2022 Removed primary key from results and final results table variables.
-- Stephen Long     03/30/2022 Remove show in lab list from where criteria.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/12/2022 Removed where criteria for surveillance type of both; de-activated 
--                             base reference record.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     09/28/2022 Bug fix on item 5117.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     12/16/2022 Fix on initial query to use sent to organization and not user 
--                             organization.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/11/2023 Updated for site filtration queries for SAUC29.
-- Stephen Long     01/31/2023 Added coalesce on collection and entered dates.
-- Stephen Long     02/03/2023 Added filtration indicator logic.
-- Stephen Long     02/20/2023 Added sent to organization sent to site ID and where criteria.
-- Stephen Long     03/14/2023 Added narrow search criteria, and fixed default sort order.
-- Stephen Long     03/28/2023 Bug fix for item 5818 and 5819.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_SAMPLE_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @SentToOrganizationSiteID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @SampleList VARCHAR(MAX) = NULL,
    @TestUnassignedIndicator BIT = NULL,
    @TestCompletedIndicator BIT = NULL,
    @FiltrationIndicator BIT = 1,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL INDEX c NONCLUSTERED,
        ReadPermissionIndicator BIT NOT NULL INDEX r CLUSTERED,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @NarrowResults TABLE
    (
        NotNullBigint BIGINT NOT NULL
            DEFAULT 0,
        NotNullInt INT NOT NULL
            DEFAULT 0,
        NotNullBoolean BIT NOT NULL
            DEFAULT 0
    );
    DECLARE @RecordCount INT = 0,
            @UnaccessionedCount INT = 0,
            @ReturnCode INT = 0,
            @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
    DECLARE @FunctionalAreas TABLE
    (
        DepartmentID BIGINT NOT NULL PRIMARY KEY,
        DepartmentNameID BIGINT NULL,
        FunctionalAreaName NVARCHAR(200) NULL
    );
    DECLARE @SampleStatusTypes TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        Name NVARCHAR(200) NOT NULL
    );
    DECLARE @AccessionConditionTypes TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        Name NVARCHAR(200) NOT NULL
    );
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @SampleListTable TABLE (ID BIGINT NOT NULL);
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL INDEX IDX1 CLUSTERED,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL INDEX IDX1 CLUSTERED,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML,
            @LanguageCode BIGINT;

    IF @SampleList IS NOT NULL
    BEGIN
        INSERT INTO @SampleListTable
        SELECT CAST([Value] AS BIGINT)
        FROM dbo.FN_GBL_SYS_SplitList(@SampleList, NULL, ',');
    END

    DECLARE @SampleStatusTypeListTable TABLE (ID BIGINT NOT NULL PRIMARY KEY);

    IF @SampleStatusTypeList IS NOT NULL
        INSERT INTO @SampleStatusTypeListTable
        SELECT CAST([Value] AS BIGINT)
        FROM dbo.FN_GBL_SYS_SplitList(@SampleStatusTypeList, NULL, ',');

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        INSERT INTO @FunctionalAreas
        SELECT d.idfDepartment,
               idfsReference,
               name
        FROM dbo.tlbDepartment d
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164)
                ON d.idfsDepartmentName = idfsReference;

        INSERT INTO @SampleStatusTypes
        SELECT idfsReference,
               name
        FROM dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015);

        INSERT INTO @AccessionConditionTypes
        SELECT idfsReference,
               name
        FROM dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110);

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @Results
        SELECT m.idfMaterial,
               1,
               CASE
                   WHEN
                   (
                       COALESCE(m.idfsCurrentSite, m.idfsSite) = @UserSiteID
                       OR m.idfSendToOffice = @UserOrganizationID
                       OR @FiltrationIndicator = 0
                   ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN COALESCE(m.idfsCurrentSite, m.idfsSite) = @UserSiteID
                        OR m.idfSendToOffice = @UserOrganizationID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN COALESCE(m.idfsCurrentSite, m.idfsSite) = @UserSiteID
                        OR m.idfSendToOffice = @UserOrganizationID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN COALESCE(m.idfsCurrentSite, m.idfsSite) = @UserSiteID
                        OR m.idfSendToOffice = @UserOrganizationID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND (
                      (
                          (
                              m.idfSendToOffice = @SentToOrganizationID
                              OR @SentToOrganizationID IS NULL
                          )
                          AND (
                                  (
                                      m.blnAccessioned = @AccessionedIndicatorList
                                      OR (
                                             m.blnAccessioned = 1
                                             AND m.datAccession IS NULL
                                             AND @AccessionedIndicatorList IS NOT NULL
                                         )
                                  )
                                  AND m.idfsAccessionCondition IS NULL
                                  AND m.idfsSampleStatus IS NULL
                                  AND m.datDestructionDate IS NULL
                                  OR (
                                         @AccessionedIndicatorList IS NULL
                                         AND @SampleStatusTypeList IS NULL
                                     )
                              )
                      )
                      OR (
                             (
                                 (
                                     m.idfSendToOffice = @SentToOrganizationID
                                     AND m.idfsSite = @SentToOrganizationSiteID
                                 )
                                 OR @SentToOrganizationID IS NULL
                             )
                             AND (
                                     (m.idfsSampleStatus IN (
                                                                SELECT ID FROM @SampleStatusTypeListTable
                                                            )
                                     )
                                     OR (
                                            m.idfsAccessionCondition IN (
                                                                            SELECT ID FROM @SampleStatusTypeListTable
                                                                        )
                                            AND (
                                                    m.idfsSampleStatus IS NULL
                                                    OR m.idfsSampleStatus = 10015007 --In Repository
                                                )
                                        )
                                     OR (
                                            @SampleStatusTypeList IS NULL
                                            AND @AccessionedIndicatorList IS NULL
                                        )
                                 )
                         )
                  );

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the default rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = m.idfsSite
        )
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = m.idfsSite
        )
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT res.ID,
               1,
               MAX(AccessToPersonalDataPermissionIndicator),
               MAX(AccessToGenderAndAgeDataPermissionIndicator),
               MAX(WritePermissionIndicator),
               MAX(DeletePermissionIndicator)
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = res.ID
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = res.ID
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human 
                          AND (
                                  m.idfHumanCase IS NOT NULL
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary
                             AND (
                                     m.idfVetCase IS NOT NULL
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR @ReportOrSessionTypeID IS NULL
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR @SurveillanceTypeID IS NULL
                  )
              AND (
                      (
                          (
                              m.idfSendToOffice = @SentToOrganizationID
                              OR @SentToOrganizationID IS NULL
                          )
                          AND (
                                  (
                                      m.blnAccessioned = @AccessionedIndicatorList
                                      OR (
                                             m.blnAccessioned = 1
                                             AND m.datAccession IS NULL
                                             AND @AccessionedIndicatorList IS NOT NULL
                                         )
                                  )
                                  AND m.idfsAccessionCondition IS NULL
                                  AND m.idfsSampleStatus IS NULL
                                  AND m.datDestructionDate IS NULL
                                  OR (
                                         @AccessionedIndicatorList IS NULL
                                         AND @SampleStatusTypeList IS NULL
                                     )
                              )
                      )
                      OR (
                             (
                                 (
                                     m.idfSendToOffice = @SentToOrganizationID
                                     AND m.idfsSite = @SentToOrganizationSiteID
                                 )
                                 OR @SentToOrganizationID IS NULL
                             )
                             AND (
                                     (m.idfsSampleStatus IN (
                                                                SELECT ID FROM @SampleStatusTypeListTable
                                                            )
                                     )
                                     OR (
                                            m.idfsAccessionCondition IN (
                                                                            SELECT ID FROM @SampleStatusTypeListTable
                                                                        )
                                            AND (
                                                    m.idfsSampleStatus IS NULL
                                                    OR m.idfsSampleStatus = 10015007 --In Repository
                                                )
                                        )
                                     OR (
                                            @SampleStatusTypeList IS NULL
                                            AND @AccessionedIndicatorList IS NULL
                                        )
                                 )
                         )
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR m.DiseaseID = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR @EIDSSReportCampaignOrSessionID IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
              AND (
                      (
                          m.blnAccessioned = 1
                          AND m.datAccession IS NOT NULL
                          AND m.strBarcode IS NOT NULL
                          AND m.idfsAccessionCondition IS NOT NULL
                          AND m.idfsSampleStatus = 10015007 -- In Repository
                          AND m.TestUnassignedIndicator = 1
                          AND @TestUnassignedIndicator = 1
                      )
                      OR @TestUnassignedIndicator IS NULL
                  )
              AND (
                      (
                          m.blnAccessioned = 1
                          AND m.datAccession IS NOT NULL
                          AND m.strBarcode IS NOT NULL
                          AND m.idfsAccessionCondition IS NOT NULL
                          AND m.idfsSampleStatus = 10015007 -- In Repository
                          AND m.TestCompletedIndicator = 1
                          AND @TestCompletedIndicator = 1
                      )
                      OR @TestCompletedIndicator IS NULL
                  )
        GROUP BY res.ID
        OPTION (RECOMPILE);

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SET @RecordCount =
        (
            SELECT COUNT(ID) FROM @FinalResults
        );

        IF @RecordCount > 10000
        BEGIN
            INSERT INTO @NarrowResults
            SELECT 0,
                   0,
                   0;

            SELECT NotNullBigint AS SampleID,
                   CAST(NULL AS NVARCHAR(200)) AS EIDSSLaboratorySampleID,
                   0 AS FavoriteIndicator,
                   CAST(NULL AS BIGINT) AS RootSampleID,
                   CAST(NULL AS BIGINT) AS ParentSampleID,
                   NotNullBigint AS SampleTypeID,
                   '' AS SampleTypeName,
                   CAST(NULL AS BIGINT) AS HumanID,
                   '' AS PatientOrFarmOwnerName,
                   CAST(NULL AS BIGINT) AS SpeciesID,
                   CAST(NULL AS BIGINT) AS AnimalID,
                   '' AS EIDSSAnimalID,
                   CAST(NULL AS BIGINT) AS VectorID,
                   CAST(NULL AS BIGINT) AS MonitoringSessionID,
                   CAST(NULL AS BIGINT) AS VectorSessionID,
                   CAST(NULL AS BIGINT) AS HumanDiseaseReportID,
                   CAST(NULL AS BIGINT) AS VeterinaryDiseaseReportID,
                   '' AS EIDSSReportOrSessionID,
                   NotNullBoolean AS TestCompletedIndicator,
                   '' AS DiseaseID,
                   '' AS DiseaseName,
                   '' AS DisplayDiseaseName,
                   CAST(NULL AS BIGINT) AS FunctionalAreaID,
                   '' AS FunctionalAreaName,
                   CAST(NULL AS BIGINT) AS FreezerSubdivisionID,
                   '' AS StorageBoxPlace,
                   CAST(NULL AS DATETIME) AS CollectionDate,
                   CAST(NULL AS BIGINT) AS CollectedByPersonID,
                   CAST(NULL AS BIGINT) AS CollectedByOrganizationID,
                   CAST(NULL AS DATETIME) AS SentDate,
                   CAST(NULL AS BIGINT) AS SentToOrganizationID,
                   NotNullBigint AS SiteID,
                   '' AS EIDSSLocalOrFieldSampleID,
                   CAST(NULL AS DATETIME) AS EnteredDate,
                   CAST(NULL AS DATETIME) AS OutOfRepositoryDate,
                   CAST(NULL AS BIGINT) AS MarkedForDispositionByPersonID,
                   NotNullBoolean AS ReadOnlyIndicator,
                   0 AS AccessionIndicator,
                   '' AS AccessionConditionTypeName,
                   CAST(NULL AS DATETIME) AS AccessionDate,
                   CAST(NULL AS BIGINT) AS AccessionConditionTypeID,
                   '' AS AccessionConditionOrSampleStatusTypeName,
                   '' AS SampleStatusTypeName,
                   CAST(NULL AS BIGINT) AS AccessionByPersonID,
                   CAST(NULL AS BIGINT) AS SampleStatusTypeID,
                   CAST(NULL AS DATETIME) AS SampleStatusDate,
                   '' AS AccessionComment,
                   CAST(NULL AS BIGINT) AS DestructionMethodTypeID,
                   CAST(NULL AS DATETIME) AS DestructionDate,
                   CAST(NULL AS BIGINT) AS DestroyedByPersonID,
                   0 AS TestAssignedCount,
                   NotNullBoolean AS TransferredCount,
                   '' AS Comment,
                   CAST(NULL AS BIGINT) AS CurrentSiteID,
                   CAST(NULL AS BIGINT) AS BirdStatusTypeID,
                   CAST(NULL AS BIGINT) AS MainTestID,
                   CAST(NULL AS BIGINT) AS SampleKindTypeID,
                   CAST(NULL AS BIGINT) AS PreviousSampleStatusTypeID,
                   0 AS LabModuleSourceIndicator,
                   0 AS RowStatus,
                   CONVERT(BIT, 0) AS ReadPermissionindicator,
                   CONVERT(BIT, 0) AS AccessToPersonalDataPermissionIndicator,
                   CONVERT(BIT, 0) AS AccessToGenderAndAgeDataPermissionIndicator,
                   CONVERT(BIT, 0) AS WritePermissionIndicator,
                   CONVERT(BIT, 0) AS DeletePermissionIndicator,
                   99 AS RowAction,
                   0 AS RowSelectionIndicator,
                   @RecordCount AS TotalRowCount,
                   @UnaccessionedCount AS UnaccessionedSampleCount
            FROM @NarrowResults;
        END
        ELSE
        BEGIN
            SET @UnaccessionedCount =
            (
                SELECT COUNT(res.ID)
                FROM @FinalResults res
                    INNER JOIN dbo.tlbMaterial m
                        ON m.idfMaterial = res.ID
                WHERE m.blnAccessioned = 0
                      AND m.idfsAccessionCondition IS NULL
            );

            SELECT res.ID AS SampleID,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   CASE
                       WHEN f.SampleID IS NULL THEN
                           0
                       ELSE
                           1
                   END AS FavoriteIndicator,
                   m.idfRootMaterial AS RootSampleID,
                   m.idfParentMaterial AS ParentSampleID,
                   m.idfsSampleType AS SampleTypeID,
                   sampleType.name AS SampleTypeName,
                   m.idfHuman AS HumanID,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                           '********'
                       ELSE
                           m.strCalculatedHumanName
                   END AS PatientOrFarmOwnerName,
                   m.idfSpecies AS SpeciesID,
                   m.idfAnimal AS AnimalID,
                   a.strAnimalCode AS EIDSSAnimalID,
                   m.idfVector AS VectorID,
                   m.idfMonitoringSession AS MonitoringSessionID,
                   m.idfVectorSurveillanceSession AS VectorSessionID,
                   m.idfHumanCase AS HumanDiseaseReportID,
                   m.idfVetCase AS VeterinaryDiseaseReportID,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   m.TestCompletedIndicator,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           CAST(m.DiseaseID AS NVARCHAR(MAX))
                       WHEN m.idfMonitoringSession IS NOT NULL THEN
                           msDiseases.DiseaseIdentifiers
                       WHEN m.idfVectorSurveillanceSession IS NOT NULL THEN
                           vsDiseases.DiseaseIdentifiers
                       ELSE
                           ''
                   END AS DiseaseID,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           diseaseName.name
                       WHEN m.idfMonitoringSession IS NOT NULL THEN
                           msDiseases.DiseaseNames
                       WHEN m.idfVectorSurveillanceSession IS NOT NULL THEN
                           vsDiseases.DiseaseNames
                       ELSE
                           ''
                   END AS DiseaseName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           diseaseName.name
                       WHEN m.idfMonitoringSession IS NOT NULL THEN
                           msDiseases.DisplayDiseaseNames
                       WHEN m.idfVectorSurveillanceSession IS NOT NULL THEN
                           vsDiseases.DisplayDiseaseNames
                       ELSE
                           ''
                   END AS DisplayDiseaseName,
                   m.idfInDepartment AS FunctionalAreaID,
                   fa.FunctionalAreaName,
                   m.idfSubdivision AS FreezerSubdivisionID,
                   m.StorageBoxPlace,
                   m.datFieldCollectionDate AS CollectionDate,
                   m.idfFieldCollectedByPerson AS CollectedByPersonID,
                   m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
                   m.datFieldSentDate AS SentDate,
                   m.idfSendToOffice AS SentToOrganizationID,
                   m.idfsSite AS SiteID,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   m.datEnteringDate AS EnteredDate,
                   m.datOutOfRepositoryDate AS OutOfRepositoryDate,
                   m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
                   m.blnReadOnly AS ReadOnlyIndicator,
                   m.blnAccessioned AS AccessionIndicator,
                   accessionConditionType.name AS AccessionConditionTypeName,
                   m.datAccession AS AccessionDate,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   CASE
                       WHEN m.blnAccessioned = 0
                            AND m.idfsSampleStatus IS NULL
                            AND m.idfsAccessionCondition IS NULL THEN
                           'Un-accessioned'
                       WHEN m.idfsSampleStatus IS NULL THEN
                           accessionConditionType.name
                       WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                           accessionConditionType.name
                       ELSE
                           sampleStatusType.name
                   END AS AccessionConditionOrSampleStatusTypeName,
                   sampleStatusType.name AS SampleStatusTypeName,
                   m.idfAccesionByPerson AS AccessionByPersonID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   m.datSampleStatusDate AS SampleStatusDate,
                   m.strCondition AS AccessionComment,
                   m.idfsDestructionMethod AS DestructionMethodTypeID,
                   m.datDestructionDate AS DestructionDate,
                   m.idfDestroyedByPerson AS DestroyedByPersonID,
                   CASE
                       WHEN m.TestUnassignedIndicator = 1 THEN
                           0
                       ELSE
                           1
                   END AS TestAssignedCount,
                   m.TransferIndicator AS TransferredCount,
                   m.strNote AS Comment,
                   m.idfsCurrentSite AS CurrentSiteID,
                   m.idfsBirdStatus AS BirdStatusTypeID,
                   m.idfMainTest AS MainTestID,
                   m.idfsSampleKind AS SampleKindTypeID,
                   m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
                   m.LabModuleSourceIndicator,
                   m.intRowStatus AS RowStatus,
                   CASE
                       WHEN res.ReadPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.ReadPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.ReadPermissionIndicator)
                   END AS ReadPermissionindicator,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
                   END AS AccessToPersonalDataPermissionIndicator,
                   CASE
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
                   END AS AccessToGenderAndAgeDataPermissionIndicator,
                   CASE
                       WHEN res.WritePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.WritePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.WritePermissionIndicator)
                   END AS WritePermissionIndicator,
                   CASE
                       WHEN res.DeletePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.DeletePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.DeletePermissionIndicator)
                   END AS DeletePermissionIndicator,
                   0 AS RowAction,
                   0 AS RowSelectionIndicator,
                   COUNT(*) OVER () AS TotalRowCount,
                   @UnaccessionedCount AS UnaccessionedSampleCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.ID
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN
                (
                    SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                ) f
                    ON f.SampleID = res.ID
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                    ON diseaseName.idfsReference = m.DiseaseID
                LEFT JOIN @MonitoringSessionDiseases msDiseases
                    ON msDiseases.ID = m.idfMonitoringSession
                LEFT JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
                LEFT JOIN @FunctionalAreas fa
                    ON fa.DepartmentID = m.idfInDepartment
                LEFT JOIN @SampleStatusTypes sampleStatusType
                    ON sampleStatusType.ID = m.idfsSampleStatus
                LEFT JOIN @AccessionConditionTypes accessionConditionType
                    ON accessionConditionType.ID = m.idfsAccessionCondition
            ORDER BY m.blnAccessioned,
                     m.idfsSampleStatus DESC,
                     m.idfsAccessionCondition,
                     COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate) DESC
            OPTION (RECOMPILE);
        END
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_SAMPLE_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_SAMPLE_GETList
--
-- Description:	Get sample list for the laboratory module use case LUC01.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     07/18/2018 Initial release.
-- Stephen Long	    12/19/2018 Added pagination logic.
-- Stephen Long     01/14/2019 Split out search functionality (where conditions) for better 
--                             performance on this procedure.
-- Stephen Long     01/30/2019 Added sample disease reference join and removed the vector 
--                             surveillance session joins as they are no longer needed.
-- Stephen Long     02/11/2019 Fix to the value used for the test completed indicator.  It was 
--                             using the wrong base reference value.
-- Stephen Long     02/21/2019 Changed field collection and field sent to collection and sent to 
--                             be consistent on naming.  Added parent sample ID to support the 
--                             edit transfer use case.
-- Stephen Long     03/28/2019 Removed test status 'Not Started' as criteria for the test assigned 
--                             indicator and test assigned count.
-- Stephen Long     06/22/2019 Removal of herd join and joined species on the sample table.
-- Stephen Long     07/01/2019 Corrected reference type on monitoring session category.
-- Stephen Long     07/09/2019 Added human master ID to select as placeholder for model.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     07/17/2019 Added vector join and field vector ID to the patient/species/vector.
-- Stephen Long     07/28/2019 Corrected sample kind ID where clause for aliquots/derivatives.
-- Stephen Long     08/12/2019 Corrected parenthesis for POCO error on sample kind where clause.
-- Stephen Long     08/30/2019 Removed commented out IF ELSE for individual sample.
-- Stephen Long     09/11/2019 Added sample destroyed status to sample status where clause.  Added 
--                             pagination set 0 to bring back "all" records.
-- Stephen Long     09/26/2019 Added sample list parameter and where clause.
-- Stephen Long     10/03/2019 Added comma to split sample list delimeter.
-- Stephen Long     10/17/2019 Added intRowStatus and non-laboratory test check on test completed 
--                             and test assigned indicators, and test assigned count.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     02/19/2020 Corrected left joins needing intRowStatus = 0.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     03/16/2020 Added sample status type of transferred out to include in the list.
-- Stephen Long     04/16/2020 Correction on vector surveillance session disease ID's and names.
-- Stephen Long     04/20/2020 Added vector type ID and vector species type ID to the model.
-- Stephen Long     05/05/2020 Added transfer status type ID of final when sample status type ID 
--                             is transferred out.
-- Stephen Long     06/21/2020 Added additional criteria to show samples with a final or amended 
--                             test to be selected within the accession timeframe.
-- Stephen Long     06/30/2020 Added additional criteria to pull back transferred in records after
--                             accessioned in.
-- Stephen Long     07/06/2020 Added lab module source indicator to model.
-- Stephen Long     10/27/2020 Removed test assigned indicator, and split out queries for better 
--                             performance.
-- Stephen Long     10/29/2020 Added test unassigned and test completed parameters and where 
--                             criteria.
-- Stephen Long     10/31/2020 Correct disease report/session query where criteria; prevent dups.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/15/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Correct record and unaccessioned counts.
-- Stephen Long     01/21/2021 Change counts from distinct count to group by with sub-query.
-- Stephen Long     02/08/2021 Change where criteria to handle null organization for the central
--                             data repository.
-- Stephen Long     06/28/2021 Applied new pagination parameters.
-- Mark Wilson		08/11/2021 updated to join tlbMonitoringSessionToDiagnosis
-- Stephen Long     09/18/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     02/03/2022 Corrected monitoring session to diagnosis join.
-- Stephen Long     02/07/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     02/17/2022 Fix on where criteria for test status types.
-- Stephen Long     03/10/2022 Changed note to comment and transfer count to transferred count.
-- Stephen Long     03/24/2022 Added final results table variable to account for duplicates that 
--                             may return from filtration rules.
-- Stephen Long     04/15/2022 Fix to filtration query grouping.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     05/23/2022 Added check on testing table to only look for laboratory tests and
--                             rejected samples check within sample window.
-- Stephen Long     06/20/2022 Added row status check when looking for parent samples.
-- Stephen Long     06/28/2022 Added check to include transferred out samples only when the 
--                             transfer is final and within the accession date window.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/17/2022 Added collection and entered date to the default sort order.
-- Stephen Long     09/21/2022 Removed test status types of final and amended from the in 
--                             repository samples within the accession date window check.  Changed 
--                             rejected samples to use collection date or entered date against the 
--                             date window (number of days for samples to stay in the list).
-- Stephen Long     10/04/2022 Bug fix on item 5057; don't show marked for deletion or marked 
--                             for destruction in the default listing.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     11/03/2022 Added date to the table variable to store the collection date, if 
--                             available, otherwise entered date.  Sort order for default base on 
--                             this new date field.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/03/2023 Added check for user's site identifier when the sent to organization 
--                             is not present.
-- Stephen Long     01/10/2023 Updated for site filtration queries.
-- Stephen Long     02/07/2023 Fix for rejected samples - bug 5610.
-- Stephen Long     03/02/2023 Added sent to organization sent to site ID and where criteria.
-- Stephen Long     03/09/2023 Added filtration indicator logic.
-- Stephen Long     03/29/2023 Added default rule check for configurable filtration.
-- 
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_SAMPLE_GETList]
		@LanguageID = N'en-US',
		@SampleID = NULL,
		@ParentSampleID = NULL,
		@DaysFromAccessionDate = 60,
		@SampleList = NULL,
		@TestUnassignedIndicator = NULL,
		@TestCompletedIndicator = NULL,
		@UserID = 161287150000872, --rykermase
		@UserEmployeeID = 420664190000872,
		@UserSiteID = 864,
		@UserOrganizationID = 758210000000,
		@UserSiteGroupID = NULL,
		@Page = 1,
		@PageSize = 100,
		@SortColumn = N'AccessionDate',
		@SortOrder = N'ASC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_SAMPLE_GETList]
(
    @LanguageID NVARCHAR(50),
    @SampleID BIGINT = NULL,
    @ParentSampleID BIGINT = NULL,
    @DaysFromAccessionDate INT,
    @SampleList VARCHAR(MAX) = NULL,
    @TestUnassignedIndicator BIT = NULL,
    @TestCompletedIndicator BIT = NULL,
    @FiltrationIndicator BIT = 1, 
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL,
    @SortColumn VARCHAR(200) = 'Default'
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @UnaccessionedCount INT = 0,
            @TotalRowCount INT = 0;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        AccessionedIndicator BIT NOT NULL,
        AccessionConditionTypeID BIGINT NULL,
        DestructionDate DATETIME NULL, 
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        AccessionedIndicator BIT NOT NULL,
        AccessionConditionTypeID BIGINT NULL,
        DestructionDate DATETIME NULL, 
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @SampleListTable TABLE (ID BIGINT NOT NULL);
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML;

    IF @SampleList IS NOT NULL
        INSERT INTO @SampleListTable
        SELECT CAST([Value] AS BIGINT)
        FROM dbo.FN_GBL_SYS_SplitList(@SampleList, NULL, ',')

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        IF @SampleID IS NOT NULL
           OR @SampleList IS NOT NULL
           OR @ParentSampleID IS NOT NULL
        BEGIN
            INSERT INTO @FinalResults
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   1,
               CASE
                   WHEN m.idfsSite = @UserSiteID OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END
            FROM dbo.tlbMaterial m
            WHERE m.intRowStatus = 0
                  AND (
                          @SampleList IS NULL
                          OR m.idfMaterial IN (
                                                  SELECT ID FROM @SampleListTable
                                              )
                      )
                  AND (
                          @SampleID IS NULL
                          OR m.idfMaterial = @SampleID
                      )
                  AND (
                          @ParentSampleID IS NULL
                          OR m.idfParentMaterial = @ParentSampleID
                      );
        END
        ELSE
        BEGIN
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbMaterial m
            WHERE m.intRowStatus = 0
                  AND m.blnReadOnly = 0
                  AND m.idfsSampleType <> 10320001 -- Unknown
                  AND (
                          (
                              m.idfSendToOffice = @UserOrganizationID
                              AND m.idfsSite = @UserSiteID
                              AND GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                              AND m.TestUnassignedIndicator = 1
                              AND @TestUnassignedIndicator IS NOT NULL
                              AND m.blnAccessioned = 1
                              AND m.datAccession IS NOT NULL
                              AND m.strBarcode IS NOT NULL 
                              AND m.idfsAccessionCondition IS NOT NULL
                              AND m.idfsSampleStatus = 10015007 -- In Repository
                          )
                          OR (
                                 m.idfSendToOffice = @UserOrganizationID
                                 AND m.idfsSite = @UserSiteID
                                 AND GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND m.TestCompletedIndicator = 1
                                 AND @TestCompletedIndicator IS NOT NULL
                             )
                          OR (
                                 m.blnAccessioned = 0
                                 AND m.idfsAccessionCondition IS NULL
                                 AND m.idfsSampleStatus IS NULL
                                 and m.datDestructionDate IS NULL 
                                 AND m.idfSendToOffice = @UserOrganizationID 
                                 AND @TestCompletedIndicator IS NULL
                                 AND @TestUnassignedIndicator IS NULL
                             )
                          OR ( -- Accessioned in with no in progress, preliminary tests assigned, deleted or destroyed
                                 m.idfSendToOffice = @UserOrganizationID
                                 AND m.idfsSite = @UserSiteID
                                 AND GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND (m.TestUnassignedIndicator = 1 OR m.TestCompletedIndicator = 1)
                                 AND m.idfsSampleStatus IN ( 10015007, 10015008, 10015009 ) -- In Repository, Deleted, Destroyed
                                 AND @TestUnassignedIndicator IS NULL
                                 AND @TestCompletedIndicator IS NULL
                             )
                          OR (
                                 m.idfSendToOffice = @UserOrganizationID
                                 AND m.idfsSite = @UserSiteID
                                 AND GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND m.idfsSampleStatus = 10015010 -- Transferred Out
                                 AND
                                 (
                                     SELECT COUNT(tr.idfTransferOut)
                                     FROM dbo.tlbTransferOutMaterial tom
                                         INNER JOIN dbo.tlbTransferOUT tr
                                             ON tr.idfTransferOut = tom.idfTransferOut
                                     WHERE tom.idfMaterial = m.idfMaterial
                                           AND tr.intRowStatus = 0
                                           AND tr.idfsTransferStatus = 10001003 -- Final
                                 ) = 0
                                 AND @TestCompletedIndicator IS NULL
                                 AND @TestUnassignedIndicator IS NULL
                             ) -- Transferred Out and Final
                          OR (
                                 m.idfSendToOffice = @UserOrganizationID
                                 AND m.idfsSite = @UserSiteID
                                 AND GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND m.idfsAccessionCondition = 10108003 -- Rejected Sample
                                 AND @TestCompletedIndicator IS NULL
                                 AND @TestUnassignedIndicator IS NULL
                             )
                      );
        END

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        IF @UserOrganizationID IS NOT NULL --First-level sites (central data repository, general data repository, etc.) do not filter results.
        BEGIN
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = @UserSiteGroupID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
                       AND ar.DefaultRuleIndicator = 0
            WHERE m.intRowStatus = 0
                  AND @UserSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
                       AND ar.DefaultRuleIndicator = 0
            WHERE m.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
                       AND ar.DefaultRuleIndicator = 0
            WHERE m.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
                       AND ar.DefaultRuleIndicator = 0
            WHERE m.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfSiteGroup = @UserSiteGroupID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
                       AND ar.DefaultRuleIndicator = 0
            WHERE m.intRowStatus = 0
                  AND @UserSiteGroupID IS NOT NULL
                  AND sgs.idfsSite = m.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRule ar
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbMaterial m
                    ON m.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND ar.DefaultRuleIndicator = 0
                  AND m.idfsSite = ar.GrantingActorSiteID;

            DECLARE @UserEmployeeGroupID BIGINT = (
                                                      SELECT TOP 1
                                                          egm.idfEmployeeGroup
                                                      FROM dbo.tlbEmployeeGroupMember egm
                                                      WHERE egm.idfEmployee = @UserEmployeeID
                                                            AND egm.intRowStatus = 0
                                                  );

            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRuleActor ara
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
                       AND ar.DefaultRuleIndicator = 0
                       AND ar.GrantingActorSiteID IS NOT NULL
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfsSite = ar.GrantingActorSiteID
                       AND m.intRowStatus = 0
            WHERE ara.ActorEmployeeGroupID = @UserEmployeeGroupID
                  AND ara.intRowStatus = 0;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRule ar
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbMaterial m
                    ON m.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND ar.DefaultRuleIndicator = 0
                  AND m.idfsSite = ar.GrantingActorSiteID;
        END;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS (
                              SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
              );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        IF @SortColumn <> 'Query'
        BEGIN
            INSERT INTO @FinalResults
            SELECT res.ID,
                   res.AccessionedIndicator,
                   MAX(res.AccessionConditionTypeID),
                   MAX(res.DestructionDate), 
                   MAX(res.ReadPermissionIndicator),
                   MAX(res.AccessToPersonalDataPermissionIndicator),
                   MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
                   MAX(res.WritePermissionIndicator),
                   MAX(res.DeletePermissionIndicator)
            FROM @Results res
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.ID
                                      AND m.intRowStatus = 0
            WHERE (res.ReadPermissionIndicator IN ( 1, 3, 5 )
                  AND m.blnReadOnly = 0
                  AND m.idfsSampleType <> 10320001 -- Unknown
                  AND (
                          (
                              GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                              AND m.TestUnassignedIndicator = 1
                              AND @TestUnassignedIndicator IS NOT NULL
                              AND m.blnAccessioned = 1
                              AND m.datAccession IS NOT NULL
                              AND m.strBarcode IS NOT NULL 
                              AND m.idfsAccessionCondition IS NOT NULL
                              AND m.idfsSampleStatus = 10015007 -- In Repository
                          )
                          OR (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND m.TestCompletedIndicator = 1
                                 AND @TestCompletedIndicator IS NOT NULL
                             )
                          OR (
                                 m.blnAccessioned = 0
                                 AND m.idfsAccessionCondition IS NULL
                                 AND m.idfsSampleStatus IS NULL
                                 and m.datDestructionDate IS NULL 
                                 AND @TestCompletedIndicator IS NULL
                                 AND @TestUnassignedIndicator IS NULL
                             )
                          OR ( -- Accessioned in with no in progress, preliminary tests assigned, deleted or destroyed
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND (m.TestUnassignedIndicator = 1 OR m.TestCompletedIndicator = 1)
                                 AND m.idfsSampleStatus IN ( 10015007, 10015008, 10015009 ) -- In Repository, Deleted, Destroyed
                                 AND @TestUnassignedIndicator IS NULL
                                 AND @TestCompletedIndicator IS NULL
                             )
                          OR (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND m.idfsSampleStatus = 10015010 -- Transferred Out
                                 AND
                                 (
                                     SELECT COUNT(tr.idfTransferOut)
                                     FROM dbo.tlbTransferOutMaterial tom
                                         INNER JOIN dbo.tlbTransferOUT tr
                                             ON tr.idfTransferOut = tom.idfTransferOut
                                     WHERE tom.idfMaterial = m.idfMaterial
                                           AND tr.intRowStatus = 0
                                           AND tr.idfsTransferStatus = 10001003 -- Final
                                 ) = 0
                                 AND @TestCompletedIndicator IS NULL
                                 AND @TestUnassignedIndicator IS NULL
                             ) -- Transferred Out and Final
                          OR (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND @TestCompletedIndicator IS NULL
                                 AND @TestUnassignedIndicator IS NULL
                                 AND m.idfsAccessionCondition = 10108003 -- Rejected Sample
                             )
                      )
                      )
            GROUP BY res.ID, 
                     res.AccessionedIndicator;
        END

        SET @TotalRowCount =
        (
            SELECT COUNT(ID) FROM @FinalResults
        );
        SET @UnaccessionedCount =
        (
            SELECT COUNT(ID)
            FROM @FinalResults
            WHERE AccessionedIndicator = 0
                  AND AccessionConditionTypeID IS NULL
                  AND DestructionDate IS NULL 
        );

        SELECT m.idfMaterial AS SampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.idfsSampleType AS SampleTypeID,
               sampleType.name AS SampleTypeName,
               m.idfHuman AS HumanID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               m.idfSpecies AS SpeciesID,
               m.idfAnimal AS AnimalID,
               a.strAnimalCode AS EIDSSAnimalID,
               m.idfVector AS VectorID,
               m.idfMonitoringSession AS MonitoringSessionID,
               m.idfVectorSurveillanceSession AS VectorSessionID,
               m.idfHumanCase AS HumanDiseaseReportID,
               m.idfVetCase AS VeterinaryDiseaseReportID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               '' AS ReportOrSessionTypeName,
               m.TestCompletedIndicator,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.idfSubdivision AS FreezerSubdivisionID,
               m.StorageBoxPlace,
               m.datFieldCollectionDate AS CollectionDate,
               m.idfFieldCollectedByPerson AS CollectedByPersonID,
               m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
               m.datFieldSentDate AS SentDate,
               m.idfSendToOffice AS SentToOrganizationID,
               m.idfsSite AS SiteID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               m.datEnteringDate AS EnteredDate,
               m.datOutOfRepositoryDate AS OutOfRepositoryDate,
               m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
               m.blnReadOnly AS ReadOnlyIndicator,
               m.blnAccessioned AS AccessionIndicator,
               m.datAccession AS AccessionDate,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               CASE
                   WHEN m.blnAccessioned = 0
                        AND m.idfsAccessionCondition IS NULL THEN
                       'Un-accessioned'
                   WHEN m.idfsSampleStatus IS NULL THEN
                       accessionConditionType.name
                   WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                       accessionConditionType.name
                   ELSE
                       sampleStatusType.name
               END AS AccessionConditionOrSampleStatusTypeName,
               m.idfAccesionByPerson AS AccessionByPersonID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               m.datSampleStatusDate AS SampleStatusDate,
               m.strCondition AS AccessionComment,
               m.idfsDestructionMethod AS DestructionMethodTypeID,
               m.datDestructionDate AS DestructionDate,
               m.idfDestroyedByPerson AS DestroyedByPersonID,
               CASE
                   WHEN m.TestUnassignedIndicator = 1 THEN
                       0
                   ELSE
                       1
               END AS TestAssignedCount,
               m.TransferIndicator AS TransferredCount,
               m.strNote AS Comment,
               m.idfsCurrentSite AS CurrentSiteID,
               m.idfsBirdStatus AS BirdStatusTypeID,
               m.idfMainTest AS MainTestID,
               m.idfsSampleKind AS SampleKindTypeID,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               m.LabModuleSourceIndicator,
               m.intRowStatus AS RowStatus,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               @TotalRowCount AS TotalRowCount,
               @UnaccessionedCount AS UnaccessionedSampleCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON f.SampleID = res.ID
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
        ORDER BY m.blnAccessioned,
                 m.idfsSampleStatus DESC,
                 m.idfsAccessionCondition,
                 COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate) DESC;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_SAMPLE_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_SAMPLE_SEARCH_GETList
--
-- Description:	Get sample search list for the laboratory module use case LUC13.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     01/14/2019 Initial release.
-- Stephen Long     01/30/2019 Removed joins to vector surveillance session, and added reference 
--                             to the disease reference table for the sample table.
-- Stephen Long     02/21/2019 Added organization ID parameter to narrow search.
-- Stephen Long     07/01/2019 Corrected reference type on monitoring session category.
-- Stephen Long     07/09/2019 Added disease to the wildcard search.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     08/18/2019 Removed herd left join and modified species left join to material 
--                             table.
-- Stephen Long     01/21/2020 Added site list for site filtration.
-- Stephen Long     03/09/2020 Added additional search filters to match the default get.
-- Stephen Long     03/10/2020 Removed filter on sample disease, and added disease report and 
--                             monitoring session ones.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     05/05/2020 Added transfer status type ID of final when sample status type ID 
--                             is transferred out.
-- Stephen Long     06/07/2020 Added additional search fields to the where clause.
-- Stephen Long     07/06/2020 Added lab module source indicator to the model.
-- Stephen Long     10/27/2020 Removed test assigned indicator, and split out queries for better 
--                             performance.
-- Stephen Long     10/30/2020 Added test unassigned and test completed indicators.
-- Stephen Long     10/31/2020 Correct disease report/session query where criteria; prevent dups.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2021 Moved pagination to table variable insert.
-- Stephen Long     01/05/2021 Changed over missed functions for reference data.
-- Stephen Long     01/07/2021 Removed leading wildcard (%) as full table scans are performed even 
--                             with indices resulting in long query run times.  Recommend NOT 
--                             putting those back in.
-- Stephen Long     06/28/2021 Applied new pagination parameters.
-- Stephen Long     09/20/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     12/06/2021 Correction to EIDSSReportOrSessionID alias name.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     02/08/2022 Removed unneeded joins.
-- Stephen Long     02/17/2022 Fix on where criteria for test status types.
-- Stephen Long     03/10/2022 Changed note to comment and transfer count to transferred count.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     05/23/2022 Fix to show rejected samples on sample search.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/04/2022 Add where criteria from the default sample listing, so only
--                             records for the simple search are filtered from the default set.
-- Stephen Long     08/16/2022 Added null DaysFromAccessionDate to the where criteria.
-- Stephen Long     09/21/2022 Removed test status types of final and amended from the in 
--                             repository samples within the accession date window check.  Changed 
--                             rejected samples to use collection date or entered date against the 
--                             date window (number of days for samples to stay in the list).
-- Stephen Long     10/17/2022 Bug fix on item 5111 and 5018.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/03/2023 Added check for user's site identifier when the sent to organization 
--                             is not present.
-- Stephen Long     01/14/2023 Updated for site filtration queries.
-- Stephen Long     03/02/2023 Updated initial query where to use site ID instead of sent to 
--                             organization.
-- Stephen Long     03/14/2023 Fix on default sort order.
-- Stephen Long     03/28/2023 Bug fix for item 5818 and 5819.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_SAMPLE_SEARCH_GETList]
		@LanguageID = N'en-US',
		@SearchString = N'COVID', -- Use 'Gnhnscvxb', 'Blood', 'XWEB00' as other tests.
		@TestUnassignedIndicator = NULL,
		@TestCompletedIndicator = NULL,
		@UserID = 161287150000872, -- rykermase
		@UserOrganizationID = 758210000000,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_SAMPLE_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @SearchString NVARCHAR(2000),
    @AccessionedIndicator BIT = NULL,
    @TestUnassignedIndicator BIT = NULL,
    @TestCompletedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserOrganizationID BIGINT,
    @UserSiteID BIGINT,
    @DaysFromAccessionDate INT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @InitialResults TABLE (ID BIGINT NOT NULL);
    DECLARE @FilteredResults TABLE (ID BIGINT NOT NULL);
    DECLARE @FinalResults TABLE (ID BIGINT NOT NULL);
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @SampleTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @SampleStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @AccessionConditionTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @Diseases TABLE (ID BIGINT NOT NULL);
    DECLARE @FunctionalAreas TABLE (ID BIGINT NOT NULL);
    DECLARE @Favorites XML,
            @LanguageCode BIGINT;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @InitialResults
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 -- Unknown
              AND (
                      (
                          m.blnAccessioned = 0
                          AND m.idfsSampleStatus IS NULL
                          AND m.datAccession IS NULL
                          AND m.datDestructionDate IS NULL
                          AND m.idfSendToOffice = @UserOrganizationID
                      )
                      OR (
                             m.idfSendToOffice = @UserOrganizationID
                             AND m.idfsSite = @UserSiteID
                         )
                  )
              AND (
                      (
                          (
                              GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                              OR @DaysFromAccessionDate IS NULL
                          )
                          AND m.TestUnassignedIndicator = 1
                          AND @TestUnassignedIndicator IS NOT NULL
                          AND m.blnAccessioned = 1
                          AND m.datAccession IS NOT NULL
                          AND m.strBarcode IS NOT NULL 
                          AND m.idfsAccessionCondition IS NOT NULL
                          AND m.idfsSampleStatus = 10015007 -- In Repository
                      )
                      OR (
                             (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 OR @DaysFromAccessionDate IS NULL
                             )
                             AND m.TestCompletedIndicator = 1
                             AND @TestCompletedIndicator IS NOT NULL
                         )
                      OR (
                             m.blnAccessioned = 0
                             AND m.idfsAccessionCondition IS NULL
                             AND m.idfsSampleStatus IS NULL
                             AND @TestCompletedIndicator IS NULL
                             AND @TestUnassignedIndicator IS NULL
                         )
                      OR (
                             (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 OR @DaysFromAccessionDate IS NULL
                             )
                             AND
                             (
                                 SELECT COUNT(*)
                                 FROM dbo.tlbTesting t
                                 WHERE t.idfMaterial = m.idfMaterial
                                       AND t.intRowStatus = 0
                                       AND t.blnNonLaboratoryTest = 0
                                       AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                             ) = 0
                             AND m.idfsSampleStatus <> 10015010 -- Transferred Out
                             AND @TestUnassignedIndicator IS NULL
                             AND @TestCompletedIndicator IS NULL
                         )
                      OR (
                             (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 OR @DaysFromAccessionDate IS NULL
                             )
                             AND m.idfsSampleStatus = 10015010 -- Transferred Out
                             AND
                             (
                                 SELECT COUNT(tr.idfTransferOut)
                                 FROM dbo.tlbTransferOutMaterial tom
                                     INNER JOIN dbo.tlbTransferOUT tr
                                         ON tr.idfTransferOut = tom.idfTransferOut
                                 WHERE tom.idfMaterial = m.idfMaterial
                                       AND tr.intRowStatus = 0
                                       AND tr.idfsTransferStatus = 10001003 -- Final
                             ) = 0
                             AND @TestCompletedIndicator IS NULL
                             AND @TestUnassignedIndicator IS NULL
                         ) -- Transferred Out and Final
                      OR (
                             GETDATE() <= DATEADD(
                                                     DAY,
                                                     @DaysFromAccessionDate,
                                                     COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                                                 )
                             AND m.idfsAccessionCondition = 10108003 -- Rejected Sample
                             AND @TestCompletedIndicator IS NULL
                             AND @TestUnassignedIndicator IS NULL
                         )
                  )
        GROUP BY m.idfMaterial;

        INSERT INTO @SampleTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000087
              AND idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @SampleStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000015
              AND idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @AccessionConditionTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000110
              AND idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @Diseases
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000019
              AND idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FunctionalAreas
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000164
              AND idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FilteredResults
        SELECT ID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = ID
        WHERE (
                  m.blnAccessioned = @AccessionedIndicator
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND @AccessionedIndicator IS NOT NULL
              ) -- Un-accessioned samples
              OR (
                     CONVERT(NVARCHAR(MAX), FORMAT(m.datAccession, 'g', @LanguageID)) LIKE '%' + @SearchString + '%'
                     OR (
                            m.strBarcode IS NOT NULL
                            AND m.strBarcode <> ''
                            AND m.strBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strFieldBarcode IS NOT NULL
                            AND m.strFieldBarcode <> ''
                            AND m.strFieldBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCondition IS NOT NULL
                            AND m.strCondition <> ''
                            AND m.strCondition LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedCaseID IS NOT NULL
                            AND m.strCalculatedCaseID <> ''
                            AND m.strCalculatedCaseID LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedHumanName IS NOT NULL
                            AND m.strCalculatedHumanName <> ''
                            AND m.strCalculatedHumanName LIKE '%' + @SearchString + '%'
                        )
                 );

        INSERT INTO @FilteredResults
        SELECT ID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = ID
            INNER JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
        WHERE m.idfAnimal IS NOT NULL
              AND a.strAnimalCode LIKE '%' + @SearchString + '%';

        INSERT INTO @FilteredResults
        SELECT ID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = ID
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
        WHERE tro.strBarcode LIKE '%' + @SearchString + '%';

        IF
        (
            SELECT COUNT(*) FROM @SampleTypes
        ) > 0
        BEGIN
            INSERT INTO @FilteredResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ID
            WHERE EXISTS
            (
                SELECT ID FROM @SampleTypes WHERE m.idfsSampleType = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @SampleStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @FilteredResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ID
            WHERE EXISTS
            (
                SELECT ID FROM @SampleStatusTypes WHERE m.idfsSampleStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @AccessionConditionTypes
        ) > 0
        BEGIN
            INSERT INTO @FilteredResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ID
            WHERE (
                      m.idfsSampleStatus IS NULL
                      OR m.idfsSampleStatus = 10015007
                  ) --In Repository
                  AND EXISTS
            (
                SELECT ID
                FROM @AccessionConditionTypes
                WHERE m.idfsAccessionCondition = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @FunctionalAreas
        ) > 0
        BEGIN
            INSERT INTO @FilteredResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ID
                INNER JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
            WHERE m.idfInDepartment IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @FunctionalAreas WHERE d.idfsDepartmentName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @Diseases
        ) > 0
        BEGIN
            INSERT INTO @FilteredResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ID
            WHERE m.DiseaseID IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE m.DiseaseID = ID
            );

            INSERT INTO @FilteredResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ID
                INNER JOIN dbo.tlbMonitoringSession ms
                    ON ms.idfMonitoringSession = m.idfMonitoringSession
                       AND ms.intRowStatus = 0
                INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                       AND msd.intRowStatus = 0
            WHERE m.idfMonitoringSession IS NOT NULL
                  AND m.DiseaseID IS NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE msd.idfsDiagnosis = ID
            );
        END

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @FilteredResults
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @FilteredResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @FilteredResults
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT res.ID
        FROM @FilteredResults res
        GROUP BY res.ID;

        DECLARE @UnaccessionedSampleCount AS INT = (
                                                       SELECT COUNT(m.idfMaterial)
                                                       FROM @FinalResults res
                                                           INNER JOIN dbo.tlbMaterial m
                                                               ON m.idfMaterial = res.ID
                                                       WHERE (
                                                                 m.blnAccessioned = 0
                                                                 AND m.idfsAccessionCondition IS NULL
                                                             )
                                                   );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SELECT m.idfMaterial AS SampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.idfsSampleType AS SampleTypeID,
               sampleType.name AS SampleTypeName,
               m.idfHuman AS HumanID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               m.idfSpecies AS SpeciesID,
               m.idfAnimal AS AnimalID,
               a.strAnimalCode AS EIDSSAnimalID,
               m.idfVector AS VectorID,
               m.idfMonitoringSession AS MonitoringSessionID,
               m.idfVectorSurveillanceSession AS VectorSessionID,
               m.idfHumanCase AS HumanDiseaseReportID,
               m.idfVetCase AS VeterinaryDiseaseReportID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               ISNULL(   IIF(
                            (
                                SELECT COUNT(t2.idfTesting)
                                FROM dbo.tlbTesting t2
                                WHERE t2.idfsTestStatus IN (   10001001,
                                                                        -- Final
                                                               10001006 -- Amended
                                                           )
                                      AND t2.idfMaterial = m.idfMaterial
                                      AND t2.intRowStatus = 0
                                      AND t2.blnNonLaboratoryTest = 0
                            ) > 0,
                            1,
                            0),
                         0
                     ) AS TestCompletedIndicator,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.idfSubdivision AS FreezerSubdivisionID,
               m.StorageBoxPlace,
               m.datFieldCollectionDate AS CollectionDate,
               m.idfFieldCollectedByPerson AS CollectedByPersonID,
               m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
               m.datFieldSentDate AS SentDate,
               m.idfSendToOffice AS SentToOrganizationID,
               m.idfsSite AS SiteID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               m.datEnteringDate AS EnteredDate,
               m.datOutOfRepositoryDate AS OutOfRepositoryDate,
               m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
               m.blnReadOnly AS ReadOnlyIndicator,
               m.blnAccessioned AS AccessionIndicator,
               m.datAccession AS AccessionDate,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 -- In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               m.idfAccesionByPerson AS AccessionByPersonID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               m.datSampleStatusDate AS SampleStatusDate,
               m.strCondition AS AccessionComment,
               m.idfsDestructionMethod AS DestructionMethodTypeID,
               m.datDestructionDate AS DestructionDate,
               m.idfDestroyedByPerson AS DestroyedByPersonID,
               ISNULL(
               (
                   SELECT COUNT(NULLIF(t4.idfTesting, 0))
                   FROM dbo.tlbTesting t4
                   WHERE t4.idfsTestStatus IN (   10001003,
                                                           -- In Progress
                                                  10001004 -- Preliminary
                                              )
                         AND t4.idfMaterial = m.idfMaterial
                         AND t4.intRowStatus = 0
                         AND t4.blnNonLaboratoryTest = 0
               ),
               0
                     ) AS TestAssignedCount,
               ISNULL(
               (
                   SELECT COUNT(NULLIF(tom2.idfTransferOUT, 0))
                   FROM dbo.tlbTransferOutMaterial tom2
                   WHERE tom2.idfMaterial = m.idfMaterial
                         AND tom2.intRowStatus = 0
               ),
               0
                     ) AS TransferredCount,
               m.strNote AS Comment,
               m.idfsCurrentSite AS CurrentSiteID,
               m.idfsBirdStatus AS BirdStatusTypeID,
               m.idfMainTest AS MainTestID,
               m.idfsSampleKind AS SampleKindTypeID,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               m.LabModuleSourceIndicator,
               m.intRowStatus AS RowStatus,
               1 AS ReadPermissionIndicator,
               1 AS AccessToPersonalDataPermissionIndicator,
               1 AS AccessToGenderAndAgeDataPermissionIndicator,
               1 AS WritePermissionIndicator,
               1 AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @UnaccessionedSampleCount AS UnaccessionedSampleCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
        ORDER BY m.blnAccessioned,
                 m.idfsSampleStatus DESC,
                 m.idfsAccessionCondition,
                 COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate) DESC;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TAB_COUNTS_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TAB_COUNTS_GETList
--
-- Description:	Gets a list of counts for each laboratory module tab: samples (un-accessioned), 
-- testing (in progress tests), transferred, my favorites, batches (in progress) and approvals.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     10/18/2021 Initial release.
-- Stephen Long     12/21/2021 Removed filtration rules as these are the default counts.
-- Stephen Long     02/10/2022 Added send to office on transfer count.
-- Stephen Long     04/15/2022 Fix to account for filtration counts.
-- Stephen Long     07/26/2022 Simplified where criteria on testing in progress count.
-- Stephen Long     08/10/2022 Corrected where criteria on batches in progress count; include only
--                             batches with at least one test.
-- Stephen Long     10/11/2022 Added check for closed batch test status to display test records 
--                             ready for validation.
-- Stephen Long     10/23/2022 Added non-laboratory test indicator to where criteria on test 
--                             records for approval.
-- Stephen Long     01/03/2023 Added check for user's site identifier when the sent to organization 
--                             is not present.
-- Stephen Long     01/14/2023 Updated for site filtration queries.
-- Stephen Long     03/02/2023 Added sent to organization sent to site ID and where criteria.
-- Stephen Long     03/29/2023 Fixed un-accessioned samples to only look at sent to organization.
-- 
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_TAB_COUNTS_GETList]
		@DaysFromAccessionDate = 60,
		@UserID = 161287150000872, --rykermase
		@UserEmployeeID = 420664190000872,
		@UserSiteID = 864,
		@UserOrganizationID = 758210000000,
		@UserSiteGroupID = NULL

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TAB_COUNTS_GETList]
(
    @DaysFromAccessionDate INT,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @SamplesUnaccessionedCount INT = 0,
            @TestingInProgressCount INT = 0,
            @TransferredCount INT = 0,
            @MyFavoritesCount INT = 0,
            @BatchesInProgressCount INT = 0,
            @ApprovalsCount INT = 0;
    DECLARE @Results TABLE (ID BIGINT NOT NULL);
    DECLARE @FinalResults TABLE (ID BIGINT NOT NULL);
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML;
    DECLARE @UserEmployeeGroupID BIGINT = (
                                              SELECT TOP 1
                                                  egm.idfEmployeeGroup
                                              FROM dbo.tlbEmployeeGroupMember egm
                                              WHERE egm.idfEmployee = @UserEmployeeID
                                                    AND egm.intRowStatus = 0
                                          );

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        -- =======================================================================================
        -- Samples Tab Unaccessioned Count
        -- =======================================================================================
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.idfSendToOffice = @UserOrganizationID 
              AND m.blnAccessioned = 0
              AND m.idfsAccessionCondition IS NULL
              AND m.datDestructionDate IS NULL 
              AND m.idfsSampleStatus IS NULL;

        -- =======================================================================================
        -- CONFIGURABLE SITE FILTRATION RULES
        -- 
        -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        IF @UserOrganizationID IS NOT NULL --First-level sites (central data repository, general data repository, etc.) do not filter results.
        BEGIN
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = @UserSiteGroupID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
                       AND ar.DefaultRuleIndicator = 0
            WHERE m.intRowStatus = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND @UserSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
                       AND ar.DefaultRuleIndicator = 0
            WHERE m.intRowStatus = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
                       AND ar.DefaultRuleIndicator = 0
            WHERE m.intRowStatus = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
                       AND ar.DefaultRuleIndicator = 0
            WHERE m.intRowStatus = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfSiteGroup = @UserSiteGroupID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
                       AND ar.DefaultRuleIndicator = 0
            WHERE m.intRowStatus = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND @UserSiteGroupID IS NOT NULL
                  AND sgs.idfsSite = m.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.AccessRule ar
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbMaterial m
                    ON m.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND ar.DefaultRuleIndicator = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND m.idfsSite = ar.GrantingActorSiteID;

            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.AccessRuleActor ara
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
                       AND ar.DefaultRuleIndicator = 0
                       AND ar.GrantingActorSiteID IS NOT NULL
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfsSite = ar.GrantingActorSiteID
                       AND m.intRowStatus = 0
            WHERE ara.ActorEmployeeGroupID = @UserEmployeeGroupID
                  AND ara.intRowStatus = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND m.idfsSite = ar.GrantingActorSiteID;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.AccessRule ar
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbMaterial m
                    ON m.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND ar.DefaultRuleIndicator = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND m.idfsSite = ar.GrantingActorSiteID;
        END;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT ID
        FROM @Results res
        GROUP BY ID;

        SET @SamplesUnaccessionedCount =
        (
            SELECT COUNT(*) FROM @FinalResults
        );

        -- =======================================================================================
        -- Testing Tab In Progress Count
        -- =======================================================================================
        DELETE FROM @Results;
        DELETE FROM @FinalResults;

        INSERT INTO @Results
        SELECT t.idfTesting
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.idfsTestName IS NOT NULL
              AND t.idfsTestStatus = 10001003 --In Progress
              AND t.blnNonLaboratoryTest = 0
              AND (
                      (
                          m.idfsSite = @UserSiteID
                          AND m.idfsCurrentSite IS NULL
                      )
                      OR (m.idfsCurrentSite = @UserSiteID)
                  )
              AND (
                      GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                      OR @DaysFromAccessionDate IS NULL
                  )
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001 --Closed
                         )
                  );

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE t.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup -- Default role
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        SET @TestingInProgressCount =
        (
            SELECT COUNT(*) FROM @Results
        );

        -- =======================================================================================
        -- Transferred Tab Count
        -- =======================================================================================
        DELETE FROM @Results;
        DELETE FROM @FinalResults;

        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
        WHERE (
                  tr.idfSendFromOffice = @UserOrganizationID
                  OR tr.idfSendToOffice = @UserOrganizationID
              )
              AND (tr.idfsTransferStatus IN (   10001003, --In Progress
                                                10001006  --Amended
                                            )
                  )
              AND tr.intRowStatus = 0;

        -- =======================================================================================
        -- CONFIGURABLE SITE FILTRATION RULES
        -- 
        -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = @UserSiteGroupID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND @UserSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfSiteGroup = @UserSiteGroupID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND @UserSiteGroupID IS NOT NULL
              AND sgs.idfsSite = tr.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.AccessRule ar
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
        WHERE ar.GrantingActorSiteID IS NOT NULL
              AND tr.idfsSite = ar.GrantingActorSiteID;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.AccessRuleActor ara
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
                   AND ar.GrantingActorSiteID IS NOT NULL
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
        WHERE ara.ActorEmployeeGroupID = @UserEmployeeGroupID
              AND ara.intRowStatus = 0
              AND tr.idfsSite = ar.GrantingActorSiteID;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.AccessRule ar
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
        WHERE ar.GrantingActorSiteID IS NOT NULL
              AND tr.idfsSite = ar.GrantingActorSiteID;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT tr.idfTransferOut
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = tr.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE tr.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = tr.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = tr.idfsSite
        );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT tr.idfTransferOut
            FROM dbo.tlbTransferOUT tr
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = tr.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT ID
        FROM @Results res
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = res.ID
        WHERE tr.intRowStatus = 0
              AND tr.idfsTransferStatus IN (   10001003, --In Progress
                                               10001006  --Amended
                                           )
        GROUP BY ID;

        SET @TransferredCount =
        (
            SELECT COUNT(*) FROM @FinalResults res
        );

        -- =======================================================================================
        -- My Favorites Tab Count
        -- =======================================================================================
        DELETE FROM @Results;
        DELETE FROM @FinalResults;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
        WHERE m.intRowStatus = 0;

        -- =======================================================================================
        -- CONFIGURABLE SITE FILTRATION RULES
        -- 
        -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = @UserSiteGroupID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfSiteGroup = @UserSiteGroupID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND a.GrantingActorSiteID = m.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT ID
        FROM @Results
        GROUP BY ID;

        SET @MyFavoritesCount =
        (
            SELECT COUNT(*) FROM @FinalResults
        );

        -- =======================================================================================
        -- Batches Tab Count
        -- =======================================================================================
        DELETE FROM @Results;
        DELETE FROM @FinalResults;

        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.tlbBatchTest b
        WHERE b.idfPerformedByOffice = @UserOrganizationID
              AND b.idfsSite = @UserSiteID
              AND b.intRowStatus = 0
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0;

        -- =======================================================================================
        -- CONFIGURABLE SITE FILTRATION RULES
        -- 
        -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup AS grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tstUserTable AS u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor AS ara
                ON ara.ActorSiteGroupID = @UserSiteGroupID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule AS ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0
              AND @UserSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfSiteGroup = @UserSiteGroupID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0
              AND @UserSiteGroupID IS NOT NULL
              AND sgs.idfsSite = b.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.AccessRule ar
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.tlbBatchTest b
                ON b.intRowStatus = 0
        WHERE ar.GrantingActorSiteID IS NOT NULL
              AND b.idfsSite = ar.GrantingActorSiteID
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.AccessRule ar
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.tlbBatchTest b
                ON b.intRowStatus = 0
        WHERE ar.GrantingActorSiteID IS NOT NULL
              AND b.idfsSite = ar.GrantingActorSiteID
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.AccessRule ar
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.tlbBatchTest b
                ON b.intRowStatus = 0
        WHERE ar.GrantingActorSiteID IS NOT NULL
              AND b.idfsSite = ar.GrantingActorSiteID
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT b.idfBatchTest
            FROM dbo.tlbBatchTest b
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = b.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE b.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup -- Default role
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = b.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = b.idfsSite
        );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT b.idfBatchTest
            FROM dbo.tlbBatchTest b
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = b.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT ID
        FROM @Results res
            INNER JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = res.ID
        WHERE b.idfsBatchStatus = 10001003 --In Progress
        GROUP BY ID;

        SET @BatchesInProgressCount =
        (
            SELECT COUNT(*) FROM @FinalResults
        );

        -- =======================================================================================
        -- Approvals Tab Count
        -- =======================================================================================
        DELETE FROM @Results;
        DELETE FROM @FinalResults;

        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.idfsSampleStatus IN (   10015002, --Marked for Deletion 
                                            10015003
                                        ) --Marked for Destruction
              AND (
                      (
                          m.idfsSite = @UserSiteID
                          AND m.idfsCurrentSite IS NULL
                      )
                      OR (m.idfsCurrentSite = @UserSiteID)
                  );

        INSERT INTO @Results
        SELECT t.idfTesting
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON t.idfMaterial = m.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion 
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND (
                      (
                          m.idfsSite = @UserSiteID
                          AND m.idfsCurrentSite IS NULL
                      )
                      OR (m.idfsCurrentSite = @UserSiteID)
                  );

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        SET @ApprovalsCount =
        (
            SELECT COUNT(ID) FROM @Results
        );

        SELECT @SamplesUnaccessionedCount AS SamplesTabCount,
               @TestingInProgressCount AS TestingTabCount,
               @TransferredCount AS TransferredTabCount,
               @MyFavoritesCount AS MyFavoritesTabCount,
               @BatchesInProgressCount AS BatchesTabCount,
               @ApprovalsCount AS ApprovalsTabCount;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TEST_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TEST_ADVANCED_SEARCH_GETList
--
-- Description:	Get laboratory tests list for the various lab use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/21/2019 Initial release.
-- Stephen Long     03/28/2019 Added EIDSS local/field sample ID field.
-- Stephen Long     04/27/2019 Added EIDSS batch ID, observation ID and batch status type name for 
--                             additional test information.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     01/22/2020 Converted site ID to site list for site filtration.
-- Stephen Long     02/03/2020 Added non-laboratory test indicator where clause.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/16/2020 Added test list parameter and where clause criteria.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     06/06/2020 Added batch status type ID to the model.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/30/2020 Remove unneeded joins.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Mark Wilson		08/20/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     03/24/2022 Removed primary key from final results table variable.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Changed from repair to reference repair function.
-- Stephen Long     08/09/2022 Added batch test association indicator parameter.
-- Stephen Long     08/12/2022 Removed where criteria for surveillance type of both; de-activated 
--                             base reference record.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     10/18/2022 Fix on external test indicator to use the field on the testing 
--                             table.
-- Stephen Long     10/21/2022 Added human disease report, veterinary disease report, monitoring 
--                             session and vector identifiers to the query.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/11/2023 Updated for site filtration queries.
-- Stephen Long     01/31/2023 Added coalesce on collection and entered dates.
-- Stephen Long     02/03/2023 Added filtration indicator logic.
-- Stephen Long     02/20/2023 Added sent to organization sent to site ID and where criteria.
-- Stephen Long     03/15/2023 Fix on default sort order.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TEST_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @SentToOrganizationSiteID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @TestList VARCHAR(MAX) = NULL,
    @BatchTestAssociationIndicator BIT = NULL,
    @FiltrationIndicator BIT = 1,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @ReturnMessage VARCHAR(MAX) = 'SUCCESS',
            @ReturnCode INT = 0;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL INDEX c NONCLUSTERED,
        TestStatusTypeID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        TestStatusTypeID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL,
        RowAction INT NOT NULL
            DEFAULT 0
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @SampleStatusTypeListTable TABLE (ID BIGINT NOT NULL PRIMARY KEY);
    DECLARE @Favorites XML;

    BEGIN TRY
        IF @SampleStatusTypeList IS NOT NULL
            INSERT INTO @SampleStatusTypeListTable
            SELECT CAST([Value] AS BIGINT)
            FROM dbo.FN_GBL_SYS_SplitList(@SampleStatusTypeList, NULL, ',');

        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               1,
               CASE
                   WHEN m.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND (
                      (
                          (
                              m.idfSendToOffice = @SentToOrganizationID
                              OR @SentToOrganizationID IS NULL
                          )
                          AND (
                                  (
                                      m.blnAccessioned = @AccessionedIndicatorList
                                      OR (
                                             m.blnAccessioned = 1
                                             AND m.datAccession IS NULL
                                             AND @AccessionedIndicatorList IS NOT NULL
                                         )
                                  )
                                  AND m.idfsAccessionCondition IS NULL
                                  AND m.idfsSampleStatus IS NULL
                                  AND m.datDestructionDate IS NULL
                                  OR (
                                         @AccessionedIndicatorList IS NULL
                                         AND @SampleStatusTypeList IS NULL
                                     )
                              )
                      )
                      OR (
                             (
                                 (
                                     m.idfSendToOffice = @SentToOrganizationID
                                     AND m.idfsSite = @SentToOrganizationSiteID
                                 )
                                 OR @SentToOrganizationID IS NULL
                             )
                             AND (
                                     (m.idfsSampleStatus IN (
                                                                SELECT ID FROM @SampleStatusTypeListTable
                                                            )
                                     )
                                     OR (
                                            m.idfsAccessionCondition IN (
                                                                            SELECT ID FROM @SampleStatusTypeListTable
                                                                        )
                                            AND (
                                                    m.idfsSampleStatus IS NULL
                                                    OR m.idfsSampleStatus = 10015007 --In Repository
                                                )
                                        )
                                     OR (
                                            @SampleStatusTypeList IS NULL
                                            AND @AccessionedIndicatorList IS NULL
                                        )
                                 )
                         )
                  );

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE t.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup -- Default role
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = m.idfsSite
        )
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        )
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT res.ID,
               res.TestStatusTypeID,
               MAX(ReadPermissionIndicator),
               MAX(AccessToPersonalDataPermissionIndicator),
               MAX(AccessToGenderAndAgeDataPermissionIndicator),
               MAX(WritePermissionIndicator),
               MAX(DeletePermissionIndicator),
               0
        FROM @Results res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      (
                          t.idfBatchTest IS NULL
                          AND t.idfsTestResult IS NULL
                          AND @BatchTestAssociationIndicator = 1
                      )
                      OR @BatchTestAssociationIndicator IS NULL
                  ) -- Adding a test to a batch, so should not currently be a batch test ID.
              AND (
                      (t.idfTesting IN (
                                           SELECT CAST([Value] AS BIGINT)
                                           FROM dbo.FN_GBL_SYS_SplitList(@TestList, NULL, ',')
                                       )
                      )
                      OR (@TestList IS NULL)
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.idfSendToOffice = @SentToOrganizationID
                              OR @SentToOrganizationID IS NULL
                          )
                          AND (
                                  (
                                      m.blnAccessioned = @AccessionedIndicatorList
                                      OR (
                                             m.blnAccessioned = 1
                                             AND m.datAccession IS NULL
                                             AND @AccessionedIndicatorList IS NOT NULL
                                         )
                                  )
                                  AND m.idfsAccessionCondition IS NULL
                                  AND m.idfsSampleStatus IS NULL
                                  AND m.datDestructionDate IS NULL
                                  OR (
                                         @AccessionedIndicatorList IS NULL
                                         AND @SampleStatusTypeList IS NULL
                                     )
                              )
                      )
                      OR (
                             (
                                 (
                                     m.idfSendToOffice = @SentToOrganizationID
                                     AND m.idfsSite = @SentToOrganizationSiteID
                                 )
                                 OR @SentToOrganizationID IS NULL
                             )
                             AND (
                                     (m.idfsSampleStatus IN (
                                                                SELECT ID FROM @SampleStatusTypeListTable
                                                            )
                                     )
                                     OR (
                                            m.idfsAccessionCondition IN (
                                                                            SELECT ID FROM @SampleStatusTypeListTable
                                                                        )
                                            AND (
                                                    m.idfsSampleStatus IS NULL
                                                    OR m.idfsSampleStatus = 10015007 --In Repository
                                                )
                                        )
                                     OR (
                                            @SampleStatusTypeList IS NULL
                                            AND @AccessionedIndicatorList IS NULL
                                        )
                                 )
                         )
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      t.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR @EIDSSReportCampaignOrSessionID IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
        GROUP BY res.ID,
                 res.TestStatusTypeID
        OPTION (RECOMPILE);

        DECLARE @InProgressCount INT = (
                                           SELECT COUNT(*)
                                           FROM @FinalResults res
                                               INNER JOIN dbo.tlbTesting t
                                                   ON t.idfTesting = res.ID
                                                      AND t.intRowStatus = 0
                                               LEFT JOIN dbo.tlbBatchTest b
                                                   ON b.idfBatchTest = t.idfBatchTest
                                                      AND b.intRowStatus = 0
                                           WHERE t.idfsTestStatus = 10001003
                                                 AND t.idfsTestName IS NOT NULL
                                                 AND t.blnNonLaboratoryTest = 0
                                                 AND (
                                                         (
                                                             t.idfBatchTest IS NULL
                                                             AND (
                                                                     t.idfsTestStatus = 10001001 --Final
                                                                     OR t.idfsTestStatus = 10001003 --In Progress
                                                                     OR t.idfstestStatus = 10001006 --Amended
                                                                 )
                                                         )
                                                         OR (
                                                                t.idfBatchTest IS NOT NULL
                                                                AND b.idfsBatchStatus = 10001003 --In Progress
                                                                AND (
                                                                        t.idfsTestStatus = 10001001 --Final 
                                                                        OR t.idfstestStatus = 10001006 --Amended
                                                                    )
                                                            )
                                                         OR (
                                                                t.idfBatchTest IS NOT NULL
                                                                AND b.idfsBatchStatus = 10001001 --Closed
                                                                AND (
                                                                        t.idfsTestStatus = 10001001 --Final
                                                                        OR t.idfsTestStatus = 10001003 --In Progress
                                                                        OR t.idfsTestStatus = 10001004 --Preliminary
                                                                        OR t.idfstestStatus = 10001006 --Amended
                                                                    )
                                                            )
                                                     )
                                       ),
                @RecordCount INT = (
                                       SELECT COUNT(ID) FROM @FinalResults
                                   );

        IF @RecordCount > 10000
        BEGIN
            DELETE FROM @FinalResults
            WHERE ID <>
            (
                SELECT MAX(ID) FROM @FinalResults
            );
            UPDATE @FinalResults
            SET RowAction = 99; -- Narrow Search Criteria
        END

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SELECT t.idfTesting AS TestID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.idfsSite AS SiteID,
               m.idfsCurrentSite AS CurrentSiteID,
               t.idfsTestName AS TestNameTypeID,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsTestResult AS TestResultTypeID,
               t.idfsTestStatus AS TestStatusTypeID,
               t.PreviousTestStatusID AS PreviousTestStatusTypeID,
               t.idfsDiagnosis AS DiseaseID,
               m.idfMaterial AS SampleID,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.idfSendToOffice AS SentToOrganizationID,
               t.idfBatchTest AS BatchTestID,
               t.idfObservation AS ObservationID,
               t.intTestNumber AS TestNumber,
               t.strNote AS Note,
               t.datStartedDate AS StartedDate,
               t.datConcludedDate AS ResultDate,
               t.idfTestedByOffice AS TestedByOrganizationID,
               t.idfTestedByPerson AS TestedByPersonID,
               t.idfResultEnteredByOffice AS ResultEnteredByOrganizationID,
               t.idfResultEnteredByPerson AS ResultEnteredByPersonID,
               t.idfValidatedByOffice AS ValidatedByOrganizationID,
               t.idfValidatedByPerson AS ValidatedByPersonID,
               t.blnReadOnly AS ReadOnlyIndicator,
               t.blnNonLaboratoryTest AS NonLaboratoryTestIndicator,
               t.blnExternalTest AS ExternalTestIndicator,
               t.idfPerformedByOffice AS PerformedByOrganizationID,
               t.datReceivedDate AS ReceivedDate,
               t.strContactPerson AS ContactPersonName,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                       '**********'
                   ELSE
                       m.strCalculatedHumanName
               END AS PatientOrFarmOwnerName,
               sampleType.name AS SampleTypeName,
               disease.name AS DiseaseName,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               testNameType.name AS TestNameTypeName,
               testStatusType.name AS TestStatusTypeName,
               testResultType.name AS TestResultTypeName,
               testCategoryType.name AS TestCategoryTypeName,
               m.datAccession AS AccessionDate,
               functionalArea.name AS FunctionalAreaName,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               CASE
                   WHEN m.blnAccessioned = 0
                        AND m.idfsSampleStatus IS NULL
                        AND m.idfsAccessionCondition IS NULL THEN
                       'Un-accessioned'
                   WHEN m.idfsSampleStatus IS NULL THEN
                       accessionConditionType.name
                   WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                       accessionConditionType.name
                   ELSE
                       sampleStatusType.name
               END AS AccessionConditionOrSampleStatusTypeName,
               m.strCondition AS AccessionComment,
               a.strAnimalCode AS EIDSSAnimalID,
               ISNULL(
               (
                   SELECT COUNT(NULLIF(tom2.idfTransferOUT, 0))
                   FROM dbo.tlbTransferOutMaterial tom2
                   WHERE tom2.idfMaterial = m.idfMaterial
                         AND tom2.intRowStatus = 0
               ),
               0
                     ) AS TransferCount,
               tro.idfTransferOut AS TransferID,
               t.idfHumanCase AS HumanDiseaseReportID,
               t.idfVetCase AS VeterinaryDiseaseReportID,
               t.idfMonitoringSession AS MonitoringSessionID,
               t.idfVector AS VectorID,
               t.intRowStatus AS RowStatus,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               res.RowAction,
               0 AS RowSelectionIndicator,
               @RecordCount AS TotalRowCount,
               @InProgressCount AS InProgressCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) disease
                ON disease.idfsReference = t.idfsDiagnosis
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
        ORDER BY m.strBarcode DESC
        OPTION (RECOMPILE);
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TEST_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TEST_GETList
--
-- Description:	Get laboratory tests list for the various lab use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     10/18/2018 Initial release.
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     01/18/2019 Added row selection indicator.
-- Stephen Long     01/30/2019 Added sample disease reference join, and removed the vector 
--                             surveillance session joins as they are no longer needed.
-- Stephen Long     02/12/2019 Added sample ID parameter.
-- Stephen Long     02/21/2019 Added root and parent sample ID's to the select list.  Added 
--                             test status type ID, batch test ID, site ID and test ID parameters.
-- Stephen Long     03/28/2019 Added EIDSS local/field sample ID field.
--                             Changed batch test portion of the where clause to bring back test 
--                             records with a null batch test/in progress unless an actual 
--                             batch test records is specified.  The Testing grid on the labor-
--                             atory module should exclude tests associated with a batch.  These 
--                             display on the Batches tab.
-- Stephen Long     04/03/2019 Changed tests where clause to look at the performed by organization 
--                             instead of sample sent to organization.
-- Stephen Long     04/27/2019 Added EIDSS batch ID, observation ID and batch status type name for 
--                             additional test information.
-- Stephen Long     07/02/2019 Updated joins for sample type and test status type from left to 
--                             inner.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     07/29/2019 Correction on test status typeID where clause conditions.
-- Stephen Long     08/28/2019 Added @TestID null check on the test status type id where clause.
-- Stephen Long     09/03/2019 Added send to organization as part of the where clause.
-- Stephen Long     09/14/2019 Added pagination set 0 to bring back "all" records.
-- Stephen Long     09/26/2019 Added null OR portion on SiteID and OrganizationID where clauses.
-- Stephen Long     10/03/2019 Added test id parameter if/else.
-- Stephen Long     10/22/2019 Added test list parameter and where clause.
-- Stephen Long     01/22/2020 Converted site ID to site list for site filtration.
-- Stephen Long     02/03/2020 Added non-laboratory test indicator where clause.
-- Stephen Long     02/19/2020 Corrected left joins needing intRowStatus = 0.
-- Stephen Long     03/10/2020 Added additional test status types: amended and final and days from 
--                             accession date.
-- Stephen Long     04/07/2020 Added option of no pagination for batch tests.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     06/06/2020 Added batch status type ID to the model.
-- Stephen Long     06/11/2020 Correction on where clause criteria for batch tests in final or 
--                             amended status.
-- Stephen Long     09/16/2020 Removed test status type preliminary as these should only show in 
--                             the approvals query.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/21/2021 Change function on reference data to handle inactive records.
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     11/16/2021 Changed to use select row over instead of with cte.
-- Stephen Long     12/17/2021 Removed filtration rules; only apply on advanced search.
-- Stephen Long     12/18/2021 Changed left to inner join on accession condition and sample 
--                             status types.
-- Stephen Long     04/20/2022 Changed to include preliminary in the testing list for tests 
--                             not associated with a batch.
-- Stephen Long     05/24/2022 Added additional test status types for batch of in progress.
-- Stephen Long     05/25/2022 Fix for GIT item 326.
-- Stephen Long     07/25/2022 Removed option (recompile).
-- Stephen Long     08/12/2022 Removed preliminary from where criteria for default list.
-- Stephen Long     08/29/2012 Bug fix on DevOps item 4404.
-- Stephen Long     10/18/2022 Fix on external test indicator to use the field on the testing 
--                             table.
-- Stephen Long     10/21/2022 Added human disease report, veterinary disease report, monitoring 
--                             session and vector identifiers to the query.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/11/2023 Updated for site filtration queries.
-- Stephen Long     03/02/2023 Updated initial query where to use site ID instead of sent to 
--                             organization.
-- Stephen Long     03/09/2023 Added filtration indicator logic.
-- Stephen Long     03/15/2023 Fix on default sort order.
-- Stephen Long     03/29/2023 Fix on accession condition or sample status type name case.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_TEST_GETList]
		@LanguageID = N'en-US',
		@TestStatusTypeID = NULL,
		@SampleID = NULL,
		@TestID = NULL,
		@BatchTestID = NULL,
		@TestList = NULL,
		@DaysFromAccessionDate = 60,
		@UserID = 161287150000872, --rykermase
		@UserEmployeeID = 420664190000872,
		@UserSiteID = 864,
		@UserOrganizationID = 758210000000,
		@UserSiteGroupID = NULL,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TEST_GETList]
(
    @LanguageID NVARCHAR(50),
    @TestStatusTypeID BIGINT = NULL,
    @SampleID BIGINT = NULL,
    @TestID BIGINT = NULL,
    @BatchTestID BIGINT = NULL,
    @TestList VARCHAR(MAX) = NULL,
    @DaysFromAccessionDate INT = NULL,
    @FiltrationIndicator BIT = 1,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteID BIGINT,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        TestStatusTypeID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        TestStatusTypeID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML,
            @InProgressCount INT;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        IF @TestID IS NULL
           AND @TestList IS NULL
           AND @SampleID IS NULL 
        BEGIN
            INSERT INTO @Results
            SELECT t.idfTesting,
                   t.idfsTestStatus,
                   1,
                   CASE
                       WHEN m.idfsSite = @UserSiteID
                            OR @FiltrationIndicator = 0 THEN
                           1
                       ELSE
                           0
                   END,
                   CASE
                       WHEN m.idfsSite = @UserSiteID
                            OR @FiltrationIndicator = 0 THEN
                           1
                       ELSE
                           0
                   END,
                   CASE
                       WHEN m.idfsSite = @UserSiteID
                            OR @FiltrationIndicator = 0 THEN
                           1
                       ELSE
                           0
                   END,
                   CASE
                       WHEN m.idfsSite = @UserSiteID
                            OR @FiltrationIndicator = 0 THEN
                           1
                       ELSE
                           0
                   END
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                    ON disease.idfsReference = t.idfsDiagnosis
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
            WHERE t.intRowStatus = 0
                  AND t.idfsTestName IS NOT NULL
                  AND t.blnNonLaboratoryTest = 0
                  AND (
                          (
                              m.idfsSite = @UserSiteID
                              AND m.idfsCurrentSite IS NULL
                          )
                          OR (
                                 m.idfsCurrentSite = @UserSiteID
                             )
                      )
                  AND (
                          GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                          OR @DaysFromAccessionDate IS NULL
                      )
                  AND (
                          t.idfsTestStatus = @TestStatusTypeID
                          OR @TestStatusTypeID IS NULL
                      )
                  AND (
                          (
                              t.idfBatchTest IS NULL
                              AND t.idfsTestStatus IN (   10001001, --Final
                                                          10001007, --Deleted
                                                          10001003, --In Progress
                                                          10001006
                                                      ) --Amended
                          )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001003 --In Progress
                                 AND t.idfsTestStatus IN (   10001001, --Final 
                                                             10001003, -- In Progress
                                                             10001004, --Preliminary
                                                             10001006
                                                         ) --Amended
                             )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001001 --Closed
                                 AND t.idfsTestStatus IN (   10001001, --Final 
                                                             10001003, -- In Progress
                                                             10001004, --Preliminary
                                                             10001006
                                                         ) --Amended
                             )
                      )
                  AND (
                          (t.idfBatchTest = @BatchTestID)
                          OR (
                                 t.idfBatchTest IS NULL
                                 AND @BatchTestID IS NULL
                             )
                      );
        END
        ELSE
        BEGIN
            INSERT INTO @Results
            SELECT t.idfTesting,
                   t.idfsTestStatus,
                   1,
                   CASE
                       WHEN m.idfsSite = @UserSiteID
                            OR @FiltrationIndicator = 0 THEN
                           1
                       ELSE
                           0
                   END,
                   CASE
                       WHEN m.idfsSite = @UserSiteID
                            OR @FiltrationIndicator = 0 THEN
                           1
                       ELSE
                           0
                   END,
                   CASE
                       WHEN m.idfsSite = @UserSiteID
                            OR @FiltrationIndicator = 0 THEN
                           1
                       ELSE
                           0
                   END,
                   CASE
                       WHEN m.idfsSite = @UserSiteID
                            OR @FiltrationIndicator = 0 THEN
                           1
                       ELSE
                           0
                   END
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
            WHERE t.intRowStatus = 0
                  AND (
                          t.idfTesting = @TestID
                          OR @TestID IS NULL
                      )
                  AND (
                          t.idfMaterial = @SampleID
                          OR @SampleID IS NULL
                      )
                  AND (
                          t.idfTesting IN (
                                              SELECT CAST([Value] AS BIGINT)
                                              FROM dbo.FN_GBL_SYS_SplitList(@TestList, NULL, ',')
                                          )
                          OR @TestList IS NULL
                      );

            -- =======================================================================================
            -- CONFIGURABLE FILTRATION RULES
            -- 
            -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the non-configurable rules.
            -- =======================================================================================
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT t.idfTesting,
                   t.idfsTestStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE t.intRowStatus = 0
                  AND t.blnNonLaboratoryTest = 0
                  AND t.idfsTestName IS NOT NULL
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT t.idfTesting,
                   t.idfsTestStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE t.intRowStatus = 0
                  AND t.blnNonLaboratoryTest = 0
                  AND t.idfsTestName IS NOT NULL
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT t.idfTesting,
                   t.idfsTestStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE t.intRowStatus = 0
                  AND t.blnNonLaboratoryTest = 0
                  AND t.idfsTestName IS NOT NULL
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT t.idfTesting,
                   t.idfsTestStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE t.intRowStatus = 0
                  AND t.blnNonLaboratoryTest = 0
                  AND t.idfsTestName IS NOT NULL
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT t.idfTesting,
                   t.idfsTestStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE t.intRowStatus = 0
                  AND t.blnNonLaboratoryTest = 0
                  AND t.idfsTestName IS NOT NULL
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND sgs.idfsSite = m.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @Results
            SELECT t.idfTesting,
                   t.idfsTestStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE t.intRowStatus = 0
                  AND t.blnNonLaboratoryTest = 0
                  AND t.idfsTestName IS NOT NULL
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND a.GrantingActorSiteID = m.idfsSite;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT t.idfTesting,
                   t.idfsTestStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE t.intRowStatus = 0
                  AND t.blnNonLaboratoryTest = 0
                  AND t.idfsTestName IS NOT NULL
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND a.GrantingActorSiteID = m.idfsSite;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @Results
            SELECT t.idfTesting,
                   t.idfsTestStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE t.intRowStatus = 0
                  AND t.blnNonLaboratoryTest = 0
                  AND t.idfsTestName IS NOT NULL
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND a.GrantingActorSiteID = m.idfsSite;
        END;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE t.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup -- Default role
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT res.ID,
               res.TestStatusTypeID,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator)
        FROM @Results res
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
        GROUP BY res.ID,
                 res.TestStatusTypeID;

        SET @InProgressCount =
        (
            SELECT COUNT(   CASE
                                WHEN TestStatusTypeID = 10001003 --In Progress
                            THEN
                                    ID
                                ELSE
                                    NULL
                            END
                        )
            FROM @FinalResults res
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = res.ID
                       AND t.intRowStatus = 0
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
            WHERE t.intRowStatus = 0
                  AND (
                          t.idfTesting = @TestID
                          OR @TestID IS NULL
                      )
                  AND t.idfsTestName IS NOT NULL
                  AND t.blnNonLaboratoryTest = 0
                  AND (
                          GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                          OR @DaysFromAccessionDate IS NULL
                      )
                  AND (
                          t.idfTesting IN (
                                              SELECT CAST([Value] AS BIGINT)
                                              FROM dbo.FN_GBL_SYS_SplitList(@TestList, NULL, ',')
                                          )
                          OR @TestList IS NULL
                      )
                  AND (
                          t.idfsTestStatus = @TestStatusTypeID
                          OR @TestStatusTypeID IS NULL
                      )
                  AND (
                          (
                              t.idfBatchTest IS NULL
                              AND t.idfsTestStatus IN (   10001001, --Final
                                                          10001003, --In Progress
                                                          10001006
                                                      ) --Amended
                          )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001003 --In Progress
                                 AND t.idfsTestStatus IN (   10001001, --Final 
                                                             10001004, --Preliminary
                                                             10001006  --Amended
                                                         )
                             )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001001 --Closed
                                 AND t.idfsTestStatus IN (   10001001, --Final 
                                                             10001003, -- In Progress
                                                             10001004, --Preliminary
                                                             10001006
                                                         ) --Amended
                             )
                      )
                  AND (
                          t.idfMaterial = @SampleID
                          OR @SampleID IS NULL
                      )
                  AND (
                          (t.idfBatchTest = @BatchTestID)
                          OR (
                                 t.idfBatchTest IS NULL
                                 AND @BatchTestID IS NULL
                             )
                      )
        );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SELECT t.idfTesting AS TestID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.idfsSite AS SiteID,
               m.idfsCurrentSite AS CurrentSiteID,
               t.idfsTestName AS TestNameTypeID,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsTestResult AS TestResultTypeID,
               t.idfsTestStatus AS TestStatusTypeID,
               t.PreviousTestStatusID AS PreviousTestStatusTypeID,
               t.idfsDiagnosis AS DiseaseID,
               m.idfMaterial AS SampleID,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.idfSendToOffice AS SentToOrganizationID,
               t.idfBatchTest AS BatchTestID,
               t.idfObservation AS ObservationID,
               t.intTestNumber AS TestNumber,
               t.strNote AS Note,
               t.datStartedDate AS StartedDate,
               t.datConcludedDate AS ResultDate,
               t.idfTestedByOffice AS TestedByOrganizationID,
               t.idfTestedByPerson AS TestedByPersonID,
               t.idfResultEnteredByOffice AS ResultEnteredByOrganizationID,
               t.idfResultEnteredByPerson AS ResultEnteredByPersonID,
               t.idfValidatedByOffice AS ValidatedByOrganizationID,
               t.idfValidatedByPerson AS ValidatedByPersonID,
               t.blnReadOnly AS ReadOnlyIndicator,
               t.blnNonLaboratoryTest AS NonLaboratoryTestIndicator,
               t.blnExternalTest AS ExternalTestIndicator,
               t.idfPerformedByOffice AS PerformedByOrganizationID,
               t.datReceivedDate AS ReceivedDate,
               t.strContactPerson AS ContactPersonName,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               sampleType.name AS SampleTypeName,
               disease.name AS DiseaseName,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               testNameType.name AS TestNameTypeName,
               testStatusType.name AS TestStatusTypeName,
               testResultType.name AS TestResultTypeName,
               testCategoryType.name AS TestCategoryTypeName,
               m.datAccession AS AccessionDate,
               functionalArea.name AS FunctionalAreaName,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               CASE
                   WHEN m.blnAccessioned = 0
                        AND m.idfsSampleStatus IS NULL
                        AND m.idfsAccessionCondition IS NULL THEN
                       'Un-accessioned'
                   WHEN m.idfsSampleStatus IS NULL THEN
                       accessionConditionType.name
                   WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                       accessionConditionType.name
                   ELSE
                       sampleStatusType.name
               END AS AccessionConditionOrSampleStatusTypeName,
               m.strCondition AS AccessionComment,
               a.strAnimalCode AS EIDSSAnimalID,
               ISNULL(
               (
                   SELECT COUNT(NULLIF(tom2.idfTransferOUT, 0))
                   FROM dbo.tlbTransferOutMaterial tom2
                   WHERE tom2.idfMaterial = m.idfMaterial
                         AND tom2.intRowStatus = 0
               ),
               0
                     ) AS TransferCount,
               tro.idfTransferOut AS TransferID,
               t.idfHumanCase AS HumanDiseaseReportID,
               t.idfVetCase AS VeterinaryDiseaseReportID,
               t.idfMonitoringSession AS MonitoringSessionID,
               t.idfVector AS VectorID,
               t.intRowStatus AS RowStatus,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @InProgressCount AS InProgressCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) disease
                ON disease.idfsReference = t.idfsDiagnosis
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
            ORDER BY m.strBarcode DESC;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TEST_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TEST_SEARCH_GETList
--
-- Description:	Get laboratory tests list for the various lab use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/21/2019 Initial release.
-- Stephen Long     03/28/2019 Added EIDSS local/field sample ID field.
-- Stephen Long     04/27/2019 Added EIDSS batch ID, observation ID and batch status type name for 
--                             additional test information.
-- Stephen Long     07/09/2019 Added disease to wildcard search.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     01/22/2020 Added site list parameter for site filtration.
-- Stephen Long     02/03/2020 Added non-laboratory test indicator where clause.
-- Stephen Long     03/10/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     06/06/2020 Added batch status type ID to the model.
-- Stephen Long     06/07/2020 Added additional search fields to the where clause.
-- Stephen Long     10/28/2020 Added where criteria from the test get list.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Moved pagination to table variable insert.
-- Stephen Long     01/05/2021 Removed sent to organization where criteria.
-- Stephen Long     01/07/2021 Removed leading wildcard (%) as full table scans are performed even 
--                             with indices resulting in long query run times.  Recommend NOT 
--                             putting those back in.
-- Stephen Long     09/24/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     12/08/2021 Changed pagination logic and removed optiont recompile.
-- Stephen Long     12/18/2021 Changed left to inner join on accession condition and sample 
--                             status types.
-- Stephen Long     07/26/2022 Changed from repair to reference repair function.
-- Stephen Long     08/04/2022 Add where criteria from the default testing listing, so only
--                             records for the simple search are filtered from the default set.
-- Stephen Long     09/28/2022 Bug fix on item 5111.
-- Stephen Long     10/17/2022 Bug fix on item 5018 - searching by dates.
-- Stephen Long     10/18/2022 Fix on external test indicator to use the field on the testing 
--                             table.
-- Stephen Long     10/21/2022 Added human disease report, veterinary disease report, monitoring 
--                             session and vector identifiers to the query.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/14/2023 Updated for site filtration queries.
-- Stephen Long     02/17/2023 Updated initial query where to use site ID instead of sent to 
--                             organization.
-- Stephen Long     03/15/2023 Fix on default sort order.
-- Stephen Long     03/29/2023 Fix on accession condition or sample status type name case.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_TEST_SEARCH_GETList]
		@LanguageID = N'en-US',
		@SearchString = N'PCR', -- Use 'Gnhnscvxb', 'Brucellosis', 'SWAZ200GEDD' as other tests.
		@TestUnassignedIndicator = NULL,
		@TestCompletedIndicator = NULL,
		@UserID = 161287150000872, -- rykermase
		@UserOrganizationID = 758210000000,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TEST_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @SearchString NVARCHAR(2000),
    @AccessionedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserOrganizationID BIGINT,
    @UserSiteID BIGINT,
    @DaysFromAccessionDate INT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @InProgressCount INT;
    DECLARE @InitialResults TABLE (ID BIGINT NOT NULL);
    DECLARE @FinalResults TABLE (ID BIGINT NOT NULL);
    DECLARE @FinalResultsDedup TABLE (ID BIGINT NOT NULL);
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @SampleTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @SampleStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @AccessionConditionTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestNameTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestResultTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestCategoryTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @Diseases TABLE (ID BIGINT NOT NULL);
    DECLARE @FunctionalAreas TABLE (ID BIGINT NOT NULL);
    DECLARE @Favorites XML,
            @LanguageCode BIGINT;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);
        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @InitialResults
        SELECT t.idfTesting
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.idfsTestName IS NOT NULL
              AND t.blnNonLaboratoryTest = 0
              AND (
                      (
                          m.idfsSite = @UserSiteID
                          AND m.idfsCurrentSite IS NULL
                      )
                      OR (m.idfsCurrentSite = @UserSiteID)
                  )
              AND (
                      GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                      OR @DaysFromAccessionDate IS NULL
                  )
              AND (
                      (
                          t.idfBatchTest IS NULL
                          AND t.idfsTestStatus IN (   10001001, --Final
                                                      10001007, --Deleted
                                                      10001003, --In Progress
                                                      10001004, --Preliminary
                                                      10001006
                                                  ) --Amended
                      )
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001003 --In Progress
                             AND t.idfsTestStatus IN (   10001001, --Final 
                                                         10001003, -- In Progress
                                                         10001004, --Preliminary
                                                         10001006
                                                     ) --Amended
                         )
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001 --Closed
                             AND t.idfsTestStatus IN (   10001001, --Final 
                                                         10001003, -- In Progress
                                                         10001004, --Preliminary
                                                         10001006
                                                     ) --Amended
                         )
                  );

        INSERT INTO @SampleTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000087
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @SampleStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000015
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @AccessionConditionTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000110
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @Diseases
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000019
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestNameTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000097
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestResultTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000096
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestCategoryTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000095
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000001
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FunctionalAreas
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000164
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FinalResults
        SELECT ID
        FROM @InitialResults
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
        WHERE (
                  m.blnAccessioned = @AccessionedIndicator
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND @AccessionedIndicator IS NOT NULL
              ) -- Un-accessioned samples
              OR (
                     CONVERT(NVARCHAR(MAX), FORMAT(m.datAccession, 'g', @LanguageID)) LIKE '%' + @SearchString + '%'
                     OR CONVERT(NVARCHAR(MAX), FORMAT(t.datStartedDate, 'd', @LanguageID)) LIKE '%' + @SearchString
                                                                                                + '%'
                     OR CONVERT(NVARCHAR(MAX), FORMAT(t.datConcludedDate, 'd', @LanguageID)) LIKE '%' + @SearchString
                                                                                                  + '%'
                     OR (
                            m.strBarcode IS NOT NULL
                            AND m.strBarcode <> ''
                            AND m.strBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strFieldBarcode IS NOT NULL
                            AND m.strFieldBarcode <> ''
                            AND m.strFieldBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCondition IS NOT NULL
                            AND m.strCondition <> ''
                            AND m.strCondition LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedCaseID IS NOT NULL
                            AND m.strCalculatedCaseID <> ''
                            AND m.strCalculatedCaseID LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedHumanName IS NOT NULL
                            AND m.strCalculatedHumanName <> ''
                            AND m.strCalculatedHumanName LIKE '%' + @SearchString + '%'
                        )
                 );

        INSERT INTO @FinalResults
        SELECT ID
        FROM @InitialResults
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
            INNER JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
        WHERE m.idfAnimal IS NOT NULL
              AND a.strAnimalCode LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID
        FROM @InitialResults
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
        WHERE tro.strBarcode LIKE '%' + @SearchString + '%';

        IF
        (
            SELECT COUNT(*) FROM @SampleTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
            WHERE EXISTS
            (
                SELECT ID FROM @SampleTypes WHERE m.idfsSampleType = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @SampleStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
            WHERE (
                      m.idfsSampleStatus IS NULL
                      OR m.idfsSampleStatus = 10015007
                  ) --In Repository
                  AND EXISTS
            (
                SELECT ID FROM @SampleStatusTypes WHERE m.idfsSampleStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @AccessionConditionTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
            WHERE EXISTS
            (
                SELECT ID
                FROM @AccessionConditionTypes
                WHERE m.idfsAccessionCondition = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestNameTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
            WHERE EXISTS
            (
                SELECT ID FROM @TestNameTypes WHERE t.idfsTestName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestResultTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
            WHERE EXISTS
            (
                SELECT ID FROM @TestResultTypes WHERE t.idfsTestResult = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestCategoryTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
            WHERE EXISTS
            (
                SELECT ID FROM @TestCategoryTypes WHERE t.idfsTestCategory = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
            WHERE EXISTS
            (
                SELECT ID FROM @TestStatusTypes WHERE t.idfsTestStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @FunctionalAreas
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                INNER JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
            WHERE m.idfInDepartment IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @FunctionalAreas WHERE d.idfsDepartmentName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @Diseases
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
            WHERE t.idfsDiagnosis IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE t.idfsDiagnosis = ID
            );
        END

        INSERT INTO @FinalResultsDedup
        SELECT *
        FROM @FinalResults;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @FinalResultsDedup
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE t.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup -- Default role
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @FinalResultsDedup res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @FinalResultsDedup
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SET @InProgressCount =
        (
            SELECT COUNT(*)
            FROM @FinalResultsDedup res
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = res.ID
                       AND t.intRowStatus = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
            WHERE (t.idfsTestStatus = 10001003)
                  AND (t.idfsTestName IS NOT NULL)
                  AND (t.blnNonLaboratoryTest = 0)
                  AND (
                          (
                              t.idfBatchTest IS NULL
                              AND (
                                      t.idfsTestStatus = 10001001 --Final
                                      OR t.idfsTestStatus = 10001003 --In Progress
                                      OR t.idfstestStatus = 10001006 --Amended
                                  )
                          )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001003 --In Progress
                                 AND (
                                         t.idfsTestStatus = 10001001 --Final 
                                         OR t.idfstestStatus = 10001006 --Amended
                                     )
                             )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001001 --Closed
                                 AND (
                                         t.idfsTestStatus = 10001001 --Final
                                         OR t.idfsTestStatus = 10001003 --In Progress
                                         OR t.idfsTestStatus = 10001004 --Preliminary
                                         OR t.idfstestStatus = 10001006 --Amended
                                     )
                             )
                      )
        );

        SELECT t.idfTesting AS TestID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.idfsSite AS SiteID,
               m.idfsCurrentSite AS CurrentSiteID,
               t.idfsTestName AS TestNameTypeID,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsTestResult AS TestResultTypeID,
               t.idfsTestStatus AS TestStatusTypeID,
               t.PreviousTestStatusID AS PreviousTestStatusTypeID,
               t.idfsDiagnosis AS DiseaseID,
               m.idfMaterial AS SampleID,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.idfSendToOffice AS SentToOrganizationID,
               t.idfBatchTest AS BatchTestID,
               t.idfObservation AS ObservationID,
               t.intTestNumber AS TestNumber,
               t.strNote AS Note,
               t.datStartedDate AS StartedDate,
               t.datConcludedDate AS ResultDate,
               t.idfTestedByOffice AS TestedByOrganizationID,
               t.idfTestedByPerson AS TestedByPersonID,
               t.idfResultEnteredByOffice AS ResultEnteredByOrganizationID,
               t.idfResultEnteredByPerson AS ResultEnteredByPersonID,
               t.idfValidatedByOffice AS ValidatedByOrganizationID,
               t.idfValidatedByPerson AS ValidatedByPersonID,
               t.blnReadOnly AS ReadOnlyIndicator,
               t.blnNonLaboratoryTest AS NonLaboratoryTestIndicator,
               t.blnExternalTest AS ExternalTestIndicator,
               t.idfPerformedByOffice AS PerformedByOrganizationID,
               t.datReceivedDate AS ReceivedDate,
               t.strContactPerson AS ContactPersonName,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               sampleType.name AS SampleTypeName,
               disease.name AS DiseaseName,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               testNameType.name AS TestNameTypeName,
               testStatusType.name AS TestStatusTypeName,
               testResultType.name AS TestResultTypeName,
               testCategoryType.name AS TestCategoryTypeName,
               m.datAccession AS AccessionDate,
               functionalArea.name AS FunctionalAreaName,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               CASE
                   WHEN m.blnAccessioned = 0
                        AND m.idfsSampleStatus IS NULL
                        AND m.idfsAccessionCondition IS NULL THEN
                       'Un-accessioned'
                   WHEN m.idfsSampleStatus IS NULL THEN
                       accessionConditionType.name
                   WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                       accessionConditionType.name
                   ELSE
                       sampleStatusType.name
               END AS AccessionConditionOrSampleStatusTypeName,
               m.strCondition AS AccessionComment,
               a.strAnimalCode AS EIDSSAnimalID,
               ISNULL(
               (
                   SELECT COUNT(NULLIF(tom2.idfTransferOUT, 0))
                   FROM dbo.tlbTransferOutMaterial tom2
                   WHERE tom2.idfMaterial = m.idfMaterial
                         AND tom2.intRowStatus = 0
               ),
               0
                     ) AS TransferCount,
               tro.idfTransferOut AS TransferID,
               t.idfHumanCase AS HumanDiseaseReportID,
               t.idfVetCase AS VeterinaryDiseaseReportID,
               t.idfMonitoringSession AS MonitoringSessionID,
               t.idfVector AS VectorID,
               t.intRowStatus AS RowStatus,
               1 AS ReadPermissionIndicator,
               1 AS AccessToPersonalDataPermissionIndicator,
               1 AS AccessToGenderAndAgeDataPermissionIndicator,
               1 AS WritePermissionIndicator,
               1 AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @InProgressCount AS InProgressCount
        FROM @FinalResultsDedup res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) disease
                ON disease.idfsReference = t.idfsDiagnosis
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
            ORDER BY m.strBarcode DESC;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TRANSFER_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TRANSFER_ADVANCED_SEARCH_GETList
--
-- Description:	Get transferred advanced search list for the laboratory module use case LUC13.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/18/2019 Initial relase.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     10/21/2019 Added accession indicator and test status type ID to the list of 
--                             fields.
-- Stephen Long     01/22/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/07/2020 Added test name type ID to the model.
-- Stephen Long     04/15/2020 Changed select from table to tlbTransferOUT instead of tlbMaterial.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     05/06/2020 Added test started date and test category type name to the model.
-- Stephen Long     06/24/2020 Added external test check to the test left join.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/30/2020 Remove unneeded joins.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Mark Wilson		08/16/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     02/10/2022 Replaced joins for monitoring session and vector session
--                             disease references to improve performance.
-- Stephen Long     03/24/2022 Removed primary key from final results table variable.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/11/2022 Changed monitoring session disease join from inner to left.
-- Stephen Long     08/24/2022 Added test name type name parameter and where criteria against test 
--                             requested.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     10/14/2022 Changed monitoring session disease function to monitoring session
--                             to sample disease function.
-- Stephen Long     10/18/2022 Added test disease ID to the query.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/12/2023 Updated for site filtration queries.
-- Stephen Long     01/31/2023 Added coalesce on collection and entered dates.
-- Stephen Long     02/03/2023 Added filtration indicator logic.
-- Stephen Long     03/02/2023 Added sent to organization sent to site ID and where criteria.
-- Stephen Long     03/14/2023 Fix on default sort order.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TRANSFER_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @SentToOrganizationSiteID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @TestNameTypeName NVARCHAR(200) = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @TransferList VARCHAR(MAX) = NULL,
    @FiltrationIndicator BIT = 1,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @FunctionalAreas TABLE
    (
        DepartmentID BIGINT NOT NULL PRIMARY KEY,
        DepartmentNameID BIGINT NULL,
        FunctionalAreaName NVARCHAR(200) NULL
    );
    DECLARE @SampleStatusTypes TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        Name NVARCHAR(200) NOT NULL
    );
    DECLARE @AccessionConditionTypes TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        Name NVARCHAR(200) NOT NULL
    );
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL,
        RowAction INT NOT NULL
            DEFAULT 0
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @SampleStatusTypeListTable TABLE (ID BIGINT NOT NULL PRIMARY KEY);

    DECLARE @Favorites XML;

    BEGIN TRY
        INSERT INTO @FunctionalAreas
        SELECT d.idfDepartment,
               idfsReference,
               name
        FROM dbo.tlbDepartment d
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164)
                ON d.idfsDepartmentName = idfsReference;

        INSERT INTO @SampleStatusTypes
        SELECT idfsReference,
               name
        FROM dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015);

        INSERT INTO @AccessionConditionTypes
        SELECT idfsReference,
               name
        FROM dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110);

        IF @SampleStatusTypeList IS NOT NULL
            INSERT INTO @SampleStatusTypeListTable
            SELECT CAST([Value] AS BIGINT)
            FROM dbo.FN_GBL_SYS_SplitList(@SampleStatusTypeList, NULL, ',');

        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT SampleID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_TO_SAMPLE_DISEASES_GET(@LanguageID)
        GROUP BY SampleID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, ';') AS DiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               1,
               CASE
                   WHEN tr.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN tr.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN tr.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN tr.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND (
                      (
                          (
                              m.idfSendToOffice = @SentToOrganizationID
                              OR @SentToOrganizationID IS NULL
                          )
                          AND (
                                  (
                                      m.blnAccessioned = @AccessionedIndicatorList
                                      OR (
                                             m.blnAccessioned = 1
                                             AND m.datAccession IS NULL
                                             AND @AccessionedIndicatorList IS NOT NULL
                                         )
                                  )
                                  AND m.idfsAccessionCondition IS NULL
                                  AND m.idfsSampleStatus IS NULL
                                  AND m.datDestructionDate IS NULL
                                  OR (
                                         @AccessionedIndicatorList IS NULL
                                         AND @SampleStatusTypeList IS NULL
                                     )
                              )
                      )
                      OR (
                             (
                                 (
                                     m.idfSendToOffice = @SentToOrganizationID
                                     AND m.idfsSite = @SentToOrganizationSiteID
                                 )
                                 OR @SentToOrganizationID IS NULL
                             )
                             AND (
                                     (m.idfsSampleStatus IN (
                                                                SELECT ID FROM @SampleStatusTypeListTable
                                                            )
                                     )
                                     OR (
                                            m.idfsAccessionCondition IN (
                                                                            SELECT ID FROM @SampleStatusTypeListTable
                                                                        )
                                            AND (
                                                    m.idfsSampleStatus IS NULL
                                                    OR m.idfsSampleStatus = 10015007 --In Repository
                                                )
                                        )
                                     OR (
                                            @SampleStatusTypeList IS NULL
                                            AND @AccessionedIndicatorList IS NULL
                                        )
                                 )
                         )
                  );

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND sgs.idfsSite = tr.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = tr.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = tr.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = tr.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT tr.idfTransferOut
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = tr.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE tr.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               tom.idfMaterial,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = tr.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = tr.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               tom.idfMaterial,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = tr.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT tr.idfTransferOut
            FROM dbo.tlbTransferOUT tr
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = tr.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator),
               0
        FROM @Results res
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = res.ID
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnExternalTest = 1
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      (tr.idfTransferOut IN (
                                                SELECT CAST([Value] AS BIGINT)
                                                FROM dbo.FN_GBL_SYS_SplitList(@TransferList, NULL, ',')
                                            )
                      )
                      OR (@TransferList IS NULL)
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.idfSendToOffice = @SentToOrganizationID
                              OR @SentToOrganizationID IS NULL
                          )
                          AND (
                                  (
                                      m.blnAccessioned = @AccessionedIndicatorList
                                      OR (
                                             m.blnAccessioned = 1
                                             AND m.datAccession IS NULL
                                             AND @AccessionedIndicatorList IS NOT NULL
                                         )
                                  )
                                  AND m.idfsAccessionCondition IS NULL
                                  AND m.idfsSampleStatus IS NULL
                                  AND m.datDestructionDate IS NULL
                                  OR (
                                         @AccessionedIndicatorList IS NULL
                                         AND @SampleStatusTypeList IS NULL
                                     )
                              )
                      )
                      OR (
                             (
                                 (
                                     m.idfSendToOffice = @SentToOrganizationID
                                     AND m.idfsSite = @SentToOrganizationSiteID
                                 )
                                 OR @SentToOrganizationID IS NULL
                             )
                             AND (
                                     (m.idfsSampleStatus IN (
                                                                SELECT ID FROM @SampleStatusTypeListTable
                                                            )
                                     )
                                     OR (
                                            m.idfsAccessionCondition IN (
                                                                            SELECT ID FROM @SampleStatusTypeListTable
                                                                        )
                                            AND (
                                                    m.idfsSampleStatus IS NULL
                                                    OR m.idfsSampleStatus = 10015007 --In Repository
                                                )
                                        )
                                     OR (
                                            @SampleStatusTypeList IS NULL
                                            AND @AccessionedIndicatorList IS NULL
                                        )
                                 )
                         )
                  )
              AND (
                      tr.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                      OR tr.TestRequested LIKE '%' + @TestNameTypeName + '%'
                      OR @TestNameTypeName IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR m.DiseaseID = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR (@EIDSSReportCampaignOrSessionID IS NULL)
                  )
              AND (
                      (m.strCalculatedHumanName LIKE '%' + @PatientName + '%')
                      OR (@PatientName IS NULL)
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tr.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
        GROUP BY tr.idfTransferOut,
                 m.idfMaterial
        OPTION (RECOMPILE);

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        DECLARE @InProgressCount INT = (
                                           SELECT COUNT(res.ID)
                                           FROM @FinalResults res
                                               INNER JOIN dbo.tlbTransferOUT tr
                                                   ON tr.idfTransferOut = res.ID
                                           WHERE tr.idfsTransferStatus IN (   10001003, --In Progress
                                                                              10001006  --Amended
                                                                          )
                                       ),
                @RecordCount INT = (
                                       SELECT COUNT(ID) FROM @FinalResults
                                   );

        IF @RecordCount > 10000
        BEGIN
            DELETE FROM @FinalResults
            WHERE ID <>
            (
                SELECT MAX(ID) FROM @FinalResults
            );
            UPDATE @FinalResults
            SET RowAction = 99; -- Narrow Search Criteria
        END

        SELECT tr.idfTransferOut AS TransferID,
               tr.strBarcode AS EIDSSTransferID,
               m.idfMaterial AS TransferredOutSampleID,
               (
                   SELECT TOP 1
                       idfMaterial
                   FROM dbo.tlbMaterial
                   WHERE idfRootMaterial = m.idfMaterial
                         AND intRowStatus = 0
                         AND idfsSampleKind = 12675430000000 --Transferred in
               ) AS TransferredInSampleID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                       '********'
                   ELSE
                       m.strCalculatedHumanName
               END AS PatientOrFarmOwnerName,
               m.strBarcode AS EIDSSLaboratorySampleID,
               tr.idfSendToOffice AS TransferredToOrganizationID,
               transferredToOrganization.[FullName] AS TransferredToOrganizationName,
               tr.idfSendFromOffice AS TransferredFromOrganizationID,
               tr.datSendDate AS TransferDate,
               tr.TestRequested,
               t.idfTesting AS TestID,
               t.idfsTestName AS TestNameTypeID,
               testNameType.name AS TestNameTypeName,
               t.idfsTestResult AS TestResultTypeID,
               testResultType.name AS TestResultTypeName,
               t.idfsTestStatus AS TestStatusTypeID,
               testStatusType.name AS TestStatusTypeName,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsDiagnosis AS TestDiseaseID,
               t.datStartedDate AS StartedDate,
               t.datConcludedDate AS ResultDate,
               t.strContactPerson AS ContactPersonName,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               sampleType.name AS SampleTypeName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               m.datAccession AS AccessionDate,
               m.idfInDepartment AS FunctionalAreaID,
               fa.FunctionalAreaName,
               m.blnAccessioned AS AccessionIndicator,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               CASE
                   WHEN m.blnAccessioned = 0
                        AND m.idfsSampleStatus IS NULL
                        AND m.idfsAccessionCondition IS NULL THEN
                       'Un-accessioned'
                   WHEN m.idfsSampleStatus IS NULL THEN
                       accessionConditionType.name
                   WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                       accessionConditionType.name
                   ELSE
                       sampleStatusType.name
               END AS AccessionConditionOrSampleStatusTypeName,
               m.strCondition AS AccessionComment,
               tr.strNote AS PurposeOfTransfer,
               tr.idfsSite AS TransferredFromOrganizationSiteID,
               m.idfSendToOffice AS SentToOrganizationID,
               tr.idfSendByPerson AS SentByPersonID,
               tr.idfsTransferStatus AS TransferStatusTypeID,
               tr.intRowStatus AS RowStatus,
               a.strAnimalCode AS EIDSSAnimalID,
               IIF(
                  (
                      SELECT COUNT(t2.idfTesting)
                      FROM dbo.tlbTesting t2
                      WHERE t2.idfsTestStatus IN (   10001003,
                                                              --In Progress
                                                     10001004,
                                                              --Preliminary
                                                     10001005 --Not Started
                                                 )
                            AND t2.idfMaterial = m.idfMaterial
                  ) > 0,
                  1,
                  0) AS TestAssignedIndicator,
               (CASE
                    WHEN transferredToOrganization.idfsSite IS NULL THEN
                        1
                    ELSE
                        0
                END
               ) AS NonEIDSSLaboratoryIndicator,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               res.RowAction,
               0 AS RowSelectionIndicator,
               @InProgressCount AS InProgressCount,
               COUNT(*) OVER () AS TotalRowCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnExternalTest = 1
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMaterial
                   AND m.idfMonitoringSession IS NOT NULL
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) transferredToOrganization
                ON transferredToOrganization.idfOffice = tr.idfSendToOffice
                   AND transferredToOrganization.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN @FunctionalAreas fa
                ON fa.DepartmentID = m.idfInDepartment
            LEFT JOIN @SampleStatusTypes sampleStatusType
                ON sampleStatusType.ID = m.idfsSampleStatus
            LEFT JOIN @AccessionConditionTypes accessionConditionType
                ON accessionConditionType.ID = m.idfsAccessionCondition
        ORDER BY tr.strBarcode DESC
        OPTION (RECOMPILE);
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TRANSFER_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TRANSFER_GETList
--
-- Description:	Get laboratory transfer list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     10/18/2018 Initial release.
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     01/25/2019 Added row selection indicator and corrected intRowStatus in where 
--                             clause to use sample table instead of testing table.
-- Stephen Long     01/30/2019 Added sample disease reference join, and removed the vector 
--                             surveillance session joins as they are no longer needed.
-- Stephen Long     02/09/2019 Added sample ID parameter.
-- Stephen Long     02/19/2019 Added test requested, disease ID and functional area to the select 
--                             list.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     08/19/2019 Added comma to sent by person name (last name ', ' first name).
-- Stephen Long     09/14/2019 Added pagination set 0 to bring back "all" records.
-- Stephen Long     10/21/2019 Added accession indicator and test status type ID to the list of 
--                             fields.
-- Stephen Long     01/22/2020 Added site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     03/17/2020 Removed declined transfer status from inclusion in the list.
-- Stephen Long     03/30/2020 Changed criteria on transferred in sample left join.
-- Stephen Long     04/07/2020 Added test name type ID to model, and corrected test assigned 
--                             indicator.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     05/06/2020 Added test started date and test category type name to the model.
-- Stephen Long     06/09/2020 Added intRowStatus check on transferred from organization.
-- Stephen Long     06/24/2020 Added external test check to the test left join.
-- Jason Li			09/24/2020 Remove blnExternalTest --AND t.blnExternalTest = 1 at line 224
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Mark Wilson		08/17/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     11/18/2021 Added test status type name to the query.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     02/03/2022 Corrected monitoring session to diagnosis join.
-- Stephen Long     02/10/2022 Replaced joins for monitoring session and vector session
--                             disease references to improve performance.
-- Stephen Long     03/24/2022 Added final results table variable to account for duplicates that 
--                             may return from filtration rules.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/12/2022 Changed default sort column to EIDSSTransferID.
-- Stephen Long     10/14/2022 Changed monitoring session disease function to monitoring session
--                             to sample disease function.
-- Stephen Long     10/18/2022 Added test disease ID to the query.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/12/2023 Updated for site filtration queries.
-- Stephen Long     02/14/2023 Added filtration indicator logic.
-- Stephen Long     03/14/2023 Fix on default sort order.
-- Stephen Long     03/29/2023 Added default rule check for configurable filtration.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_TRANSFER_GETList]
		@LanguageID = N'en-US',
		@UserID = 161287150000872, --rykermase
		@UserEmployeeID = 420664190000872,
		@UserSiteID = 864,
		@UserOrganizationID = 758210000000,
		@UserSiteGroupID = NULL,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TRANSFER_GETList]
(
    @LanguageID NVARCHAR(50),
    @SampleID BIGINT = NULL,
    @FiltrationIndicator BIT = 1,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL INDEX c NONCLUSTERED,
        SampleID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL INDEX c CLUSTERED,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @TransferredInSampleIdentifiers TABLE
    (
        SampleID BIGINT NOT NULL,
        TransferredInSampleID BIGINT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT SampleID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_TO_SAMPLE_DISEASES_GET(@LanguageID)
        GROUP BY SampleID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, ';') AS DiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        IF @SampleID IS NULL
        BEGIN
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
            WHERE (
                      tr.idfSendFromOffice = @UserOrganizationID
                      OR tr.idfSendToOffice = @UserOrganizationID
                  )
                  AND (tr.idfsTransferStatus IN (   10001003,
                                                             --In Progress
                                                    10001006 --Amended
                                                )
                      )
                  AND tr.intRowStatus = 0;

            -- =======================================================================================
            -- CONFIGURABLE FILTRATION RULES
            -- 
            -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the non-configurable rules.
            -- =======================================================================================
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = tr.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = @UserSiteGroupID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
                       AND ar.DefaultRuleIndicator = 0
            WHERE tr.intRowStatus = 0
                  AND @UserSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = tr.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
                       AND ar.DefaultRuleIndicator = 0
            WHERE tr.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = tr.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
                       AND ar.DefaultRuleIndicator = 0
            WHERE tr.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = tr.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
                       AND ar.DefaultRuleIndicator = 0
            WHERE tr.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfSiteGroup = @UserSiteGroupID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
                       AND ar.DefaultRuleIndicator = 0
            WHERE tr.intRowStatus = 0
                  AND @UserSiteGroupID IS NOT NULL
                  AND sgs.idfsSite = tr.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRule ar
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbTransferOUT tr
                    ON tr.intRowStatus = 0
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND ar.DefaultRuleIndicator = 0
                  AND tr.idfsSite = ar.GrantingActorSiteID;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRule ar
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbTransferOUT tr
                    ON tr.intRowStatus = 0
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND ar.DefaultRuleIndicator = 0
                  AND tr.idfsSite = ar.GrantingActorSiteID;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRule ar
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbTransferOUT tr
                    ON tr.intRowStatus = 0
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND ar.DefaultRuleIndicator = 0
                  AND tr.idfsSite = ar.GrantingActorSiteID;

            -- =======================================================================================
            -- SITE FILTRATION RULES
            --
            -- Apply site filtration rules from use case SAUC29.
            -- =======================================================================================
            -- 
            -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without site filtration rules applied.
            --
            DELETE FROM @Results
            WHERE EXISTS
            (
                SELECT tr.idfTransferOut
                FROM dbo.tlbTransferOUT tr
                    INNER JOIN dbo.tstObjectAccess oa
                        ON oa.idfsObjectID = tr.idfsSite
                           AND oa.intRowStatus = 0
                    INNER JOIN dbo.tlbEmployeeGroup eg
                        ON eg.idfsSite = @UserSiteID
                           AND eg.intRowStatus = 0
                    INNER JOIN dbo.trtBaseReference br
                        ON br.idfsBaseReference = eg.idfEmployeeGroup
                           AND br.intRowStatus = 0
                           AND br.blnSystem = 1
                WHERE tr.intRowStatus = 0
                      AND oa.idfsObjectOperation = 10059003 -- Read permission
                      AND oa.intPermission = 1 -- Deny permission
                      AND oa.idfsObjectType = 10060011 -- Site
                      AND oa.idfActor = eg.idfEmployeeGroup
            );

            --
            -- Apply level 1 site filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            DELETE res
            FROM @Results res
                INNER JOIN dbo.tlbTransferOUT tr
                    ON tr.idfTransferOut = res.ID
                INNER JOIN @UserGroupSitePermissions ugsp
                    ON ugsp.SiteID = tr.idfsSite
            WHERE ugsp.Permission = 2 -- Deny permission
                  AND ugsp.PermissionTypeID = 10059003 -- Read permission
                  AND NOT EXISTS
            (
                SELECT * FROM @UserSitePermissions WHERE SiteID = tr.idfsSite
            );

            --
            -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            DELETE FROM @Results
            WHERE EXISTS
            (
                SELECT tr.idfTransferOut
                FROM dbo.tlbTransferOUT tr
                    INNER JOIN @UserSitePermissions usp
                        ON usp.SiteID = tr.idfsSite
                WHERE usp.Permission = 4 -- Deny permission
                      AND usp.PermissionTypeID = 10059003 -- Read permission
            );

            INSERT INTO @FinalResults
            SELECT res.ID,
                   res.SampleID,
                   MAX(res.ReadPermissionIndicator),
                   MAX(res.AccessToPersonalDataPermissionIndicator),
                   MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
                   MAX(res.WritePermissionIndicator),
                   MAX(res.DeletePermissionIndicator)
            FROM @Results res
                INNER JOIN dbo.tlbTransferOUT tr
                    ON tr.idfTransferOut = res.ID
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
            WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
                  AND (
                          tr.idfSendFromOffice = @UserOrganizationID
                          OR tr.idfSendToOffice = @UserOrganizationID
                      )
                  AND (
                          tom.idfMaterial = @SampleID
                          OR @SampleID IS NULL
                      )
                  AND (tr.idfsTransferStatus IN (   10001003,
                                                             --In Progress
                                                    10001006 --Amended
                                                )
                      )
                  AND tr.intRowStatus = 0
            GROUP BY ID,
                     SampleID;
        END
        ELSE
        BEGIN
            INSERT INTO @FinalResults
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   1,
                   CASE
                       WHEN tr.idfsSite = @UserSiteID
                            OR @FiltrationIndicator = 0 THEN
                           1
                       ELSE
                           0
                   END,
                   CASE
                       WHEN tr.idfsSite = @UserSiteID
                            OR @FiltrationIndicator = 0 THEN
                           1
                       ELSE
                           0
                   END,
                   CASE
                       WHEN tr.idfsSite = @UserSiteID
                            OR @FiltrationIndicator = 0 THEN
                           1
                       ELSE
                           0
                   END,
                   CASE
                       WHEN tr.idfsSite = @UserSiteID
                            OR @FiltrationIndicator = 0 THEN
                           1
                       ELSE
                           0
                   END
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
            WHERE tom.idfMaterial = @SampleID
                  AND tr.intRowStatus = 0;
        END

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        DECLARE @InProgressCount INT = (
                                           SELECT COUNT(DISTINCT res.ID)
                                           FROM @FinalResults res
                                               INNER JOIN dbo.tlbTransferOUT tr
                                                   ON tr.idfTransferOut = res.ID
                                           WHERE tr.idfsTransferStatus IN (   10001003, --In Progress
                                                                              10001006  --Amended
                                                                          )
                                       );

        INSERT INTO @TransferredInSampleIdentifiers
        SELECT SampleID,
               transferredInSample.idfMaterial
        FROM @FinalResults
            INNER JOIN dbo.tlbMaterial AS transferredInSample
                ON transferredInSample.idfRootMaterial = SampleID
                   AND transferredInSample.intRowStatus = 0
                   AND transferredInSample.idfsSampleKind = 12675430000000; --Transferred in

        SELECT tr.idfTransferOut AS TransferID,
               tr.strBarcode AS EIDSSTransferID,
               m.idfMaterial AS TransferredOutSampleID,
               (
                   SELECT TOP 1
                       TransferredInSampleID
                   FROM @TransferredInSampleIdentifiers
                   WHERE SampleID = res.SampleID
               ) AS TransferredInSampleID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               m.strBarcode AS EIDSSLaboratorySampleID,
               tr.idfSendToOffice AS TransferredToOrganizationID,
               transferredToOrganization.AbbreviatedName AS TransferredToOrganizationName,
               tr.idfSendFromOffice AS TransferredFromOrganizationID,
               tr.datSendDate AS TransferDate,
               tr.TestRequested,
               t.idfTesting AS TestID,
               t.idfsTestName AS TestNameTypeID,
               testNameType.name AS TestNameTypeName,
               t.idfsTestResult AS TestResultTypeID,
               testResultType.name AS TestResultTypeName,
               t.idfsTestStatus AS TestStatusTypeID,
               testStatusType.name AS TestStatusTypeName,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsDiagnosis AS TestDiseaseID,
               t.datStartedDate AS StartedDate,
               t.datConcludedDate AS ResultDate,
               t.strContactPerson AS ContactPersonName,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               sampleType.name AS SampleTypeName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               m.datAccession AS AccessionDate,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.blnAccessioned AS AccessionIndicator,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               CASE
                   WHEN m.blnAccessioned = 0
                        AND m.idfsSampleStatus IS NULL
                        AND m.idfsAccessionCondition IS NULL THEN
                       'Un-accessioned'
                   WHEN m.idfsSampleStatus IS NULL THEN
                       accessionConditionType.name
                   WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                       accessionConditionType.name
                   ELSE
                       sampleStatusType.name
               END AS AccessionConditionOrSampleStatusTypeName,
               m.strCondition AS AccessionComment,
               tr.strNote AS PurposeOfTransfer,
               tr.idfsSite AS TransferredFromOrganizationSiteID,
               transferredToOrganization.idfsSite AS TransferredToOrganizationSiteID,
               m.idfSendToOffice AS SentToOrganizationID,
               tr.idfSendByPerson AS SentByPersonID,
               tr.idfsTransferStatus AS TransferStatusTypeID,
               tr.intRowStatus AS RowStatus,
               a.strAnimalCode AS EIDSSAnimalID,
               CASE
                   WHEN m.TestUnassignedIndicator = 1 THEN
                       0
                   ELSE
                       1
               END AS TestAssignedIndicator,
               CASE
                   WHEN transferredToOrganization.idfsSite IS NULL THEN
                       1
                   ELSE
                       0
               END AS NonEIDSSLaboratoryIndicator,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               @InProgressCount AS InProgressCount,
               COUNT(*) OVER () AS TotalRowCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
                   AND m.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            INNER JOIN dbo.FN_GBL_Institution_Min(@LanguageID) transferredToOrganization
                ON transferredToOrganization.idfOffice = tr.idfSendToOffice
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnExternalTest = 1
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMaterial
                   AND m.idfMonitoringSession IS NOT NULL
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
                   AND m.idfVectorSurveillanceSession IS NOT NULL
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            ORDER BY tr.strBarcode DESC;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TRANSFER_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TRANSFER_SEARCH_GETList
--
-- Description:	Get laboratory transfer list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/21/2019 Initial release.
-- Stephen Long     07/09/2019 Added disease to wildcard search.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/21/2019 Added accession indicator and test status type ID to the list of 
--                             fields.
-- Stephen Long     01/22/2020 Added site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/07/2020 Added test name type ID to the model.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     05/06/2020 Added test started date and test category type name to the model.
-- Stephen Long     06/07/2020 Added additional search fields to the where clause.
-- Stephen Long     06/24/2020 Added external test check to the test left join.
-- Stephen Long     11/29/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2021 Moved pagination to table variable insert.
-- Stephen Long     01/05/2021 Removed sent to organization where criteria.
-- Stephen Long     01/07/2021 Removed leading wildcard (%) as full table scans are performed even 
--                             with indices resulting in long query run times.  Recommend NOT 
--                             putting those back in.
-- Mark Wilson		08/17/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/23/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     02/10/2022 Replaced joins for monitoring session and vector session
--                             disease references to improve performance.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/04/2022 Add where criteria from the default sample listing, so only
--                             records for the simple search are filtered from the default set.
-- Stephen Long     09/28/2022 Bug fix on item 5111.
-- Stephen Long     10/14/2022 Changed monitoring session disease function to monitoring session
--                             to sample disease function.
-- Stephen Long     10/17/2022 Bug fix on item 5018 - searching by dates.
-- Stephen Long     10/18/2022 Added test disease ID to the query.
-- Stephen Long     10/24/2022 Fix for GIT item #46 - duplciate records comming back.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/14/2023 Updated for site filtration queries.
-- Stephen Long     03/14/2023 Fix on default sort order.
-- Stephen Long     03/29/2023 Fix on accession condition or sample status type name case.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_TRANSFER_SEARCH_GETList]
		@LanguageID = N'en-US',
		@SearchString = N'COVID', -- Use 'Gnhnscvxb', 'Brucellosis', 'XWEB00' as other tests.
		@UserID = 161287150000872, -- rykermase
		@UserOrganizationID = 758210000000,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TRANSFER_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @SearchString NVARCHAR(2000),
    @AccessionedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserOrganizationID BIGINT,
    @UserSiteID BIGINT
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @InitialResults TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL
    );
    DECLARE @DeduplicatedFinalResults TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @SampleTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @SampleStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @AccessionConditionTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestNameTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestResultTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestCategoryTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @Diseases TABLE (ID BIGINT NOT NULL);
    DECLARE @FunctionalAreas TABLE (ID BIGINT NOT NULL);
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @Favorites XML,
            @LanguageCode BIGINT;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);
        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT SampleID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_TO_SAMPLE_DISEASES_GET(@LanguageID)
        GROUP BY SampleID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, ';') AS DiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @InitialResults
        SELECT tr.idfTransferOut,
               tom.idfMaterial
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
        WHERE (
                  tr.idfSendFromOffice = @UserOrganizationID
                  OR tr.idfSendToOffice = @UserOrganizationID
              )
              AND (tr.idfsTransferStatus IN (   10001003,
                                                         --In Progress
                                                10001006 --Amended
                                            )
                  )
              AND tr.intRowStatus = 0;

        INSERT INTO @SampleTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000087
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @SampleStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000015
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @AccessionConditionTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000110
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @Diseases
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000019
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestNameTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000097
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestResultTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000096
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FunctionalAreas
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000164
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
                   AND m.intRowStatus = 0
        WHERE (
                  m.blnAccessioned = @AccessionedIndicator
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND @AccessionedIndicator IS NOT NULL
              ) -- Un-accessioned samples
              OR (
                     CONVERT(NVARCHAR(MAX), FORMAT(m.datAccession, 'g', @LanguageID)) LIKE '%' + @SearchString + '%'
                     OR (
                            m.strBarcode IS NOT NULL
                            AND m.strBarcode <> ''
                            AND m.strBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strFieldBarcode IS NOT NULL
                            AND m.strFieldBarcode <> ''
                            AND m.strFieldBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCondition IS NOT NULL
                            AND m.strCondition <> ''
                            AND m.strCondition LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedCaseID IS NOT NULL
                            AND m.strCalculatedCaseID <> ''
                            AND m.strCalculatedCaseID LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedHumanName IS NOT NULL
                            AND m.strCalculatedHumanName <> ''
                            AND m.strCalculatedHumanName LIKE '%' + @SearchString + '%'
                        )
                 );

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnExternalTest = 1
        WHERE CONVERT(NVARCHAR(MAX), FORMAT(t.datConcludedDate, 'd', @LanguageID)) LIKE '%' + @SearchString + '%';


        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = ID
        WHERE CONVERT(NVARCHAR(MAX), FORMAT(tr.datSendDate, 'd', @LanguageID)) LIKE '%' + @SearchString + '%';

        IF
        (
            SELECT COUNT(*) FROM @SampleTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
            WHERE EXISTS
            (
                SELECT ID FROM @SampleTypes WHERE m.idfsSampleType = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @SampleStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
            WHERE (
                      m.idfsSampleStatus IS NULL
                      OR m.idfsSampleStatus = 10015007
                  ) --In Repository
                  AND EXISTS
            (
                SELECT ID FROM @SampleStatusTypes WHERE m.idfsSampleStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @AccessionConditionTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
            WHERE EXISTS
            (
                SELECT ID
                FROM @AccessionConditionTypes
                WHERE m.idfsAccessionCondition = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestNameTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnExternalTest = 1
            WHERE EXISTS
            (
                SELECT ID FROM @TestNameTypes WHERE t.idfsTestName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestResultTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnExternalTest = 1
            WHERE EXISTS
            (
                SELECT ID FROM @TestResultTypes WHERE t.idfsTestResult = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @FunctionalAreas
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
            WHERE m.idfInDepartment IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @FunctionalAreas WHERE d.idfsDepartmentName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @Diseases
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
            WHERE m.DiseaseID IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE m.DiseaseID = ID
            );

            INSERT INTO @FinalResults
            SELECT ir.ID,
                   ir.SampleID
            FROM @InitialResults ir
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ir.SampleID
                INNER JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
            WHERE m.idfVectorSurveillanceSession IS NOT NULL
                  AND EXISTS
            (
                SELECT ID
                FROM @Diseases
                WHERE ID IN (
                                SELECT CAST([Value] AS BIGINT)
                                FROM dbo.FN_GBL_SYS_SplitList(vsDiseases.DiseaseIdentifiers, NULL, ',')
                            )
            );

            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                INNER JOIN dbo.tlbMonitoringSession ms
                    ON ms.idfMonitoringSession = m.idfMonitoringSession
                       AND ms.intRowStatus = 0
                INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                       AND msd.intRowStatus = 0
            WHERE EXISTS
            (
                SELECT ID FROM @Diseases WHERE msd.idfsDiagnosis = ID
            );
        END

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
        WHERE m.idfAnimal IS NOT NULL
              AND a.strAnimalCode LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = ID
        WHERE tr.strBarcode LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = ID
        WHERE tr.TestRequested LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnExternalTest = 1
        WHERE t.strContactPerson LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = ID
            INNER JOIN dbo.FN_GBL_Institution_Min(@LanguageID) transferredFromOrganization
                ON transferredFromOrganization.idfOffice = tr.idfSendFromOffice
        WHERE transferredFromOrganization.AbbreviatedName LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = ID
            INNER JOIN dbo.FN_GBL_Institution_Min(@LanguageID) transferredToOrganization
                ON transferredToOrganization.idfOffice = tr.idfSendToOffice
        WHERE transferredToOrganization.AbbreviatedName LIKE '%' + @SearchString + '%';

        INSERT INTO @DeduplicatedFinalResults
        SELECT ID,
               SampleID
        FROM @FinalResults
        GROUP BY ID,
                 SampleID;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @DeduplicatedFinalResults
        WHERE EXISTS
        (
            SELECT tr.idfTransferOut
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = tr.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE tr.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @DeduplicatedFinalResults res
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = tr.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = tr.idfsSite
        );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @DeduplicatedFinalResults
        WHERE EXISTS
        (
            SELECT tr.idfTransferOut
            FROM dbo.tlbTransferOUT tr
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = tr.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        DECLARE @InProgressCount INT = (
                                           SELECT COUNT(DISTINCT res.ID)
                                           FROM @DeduplicatedFinalResults res
                                               INNER JOIN dbo.tlbTransferOUT tr
                                                   ON tr.idfTransferOut = res.ID
                                           WHERE tr.idfsTransferStatus IN (   10001003, --In Progress
                                                                              10001006  --Amended
                                                                          )
                                       );

        SELECT tr.idfTransferOut AS TransferID,
               tr.strBarcode AS EIDSSTransferID,
               m.idfMaterial AS TransferredOutSampleID,
               (
                   SELECT TOP 1
                       idfMaterial
                   FROM dbo.tlbMaterial
                   WHERE idfRootMaterial = m.idfMaterial
                         AND intRowStatus = 0
                         AND idfsSampleKind = 12675430000000 --Transferred in
               ) AS TransferredInSampleID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               m.strBarcode AS EIDSSLaboratorySampleID,
               tr.idfSendToOffice AS TransferredToOrganizationID,
               transferredToOrganization.[FullName] AS TransferredToOrganizationName,
               tr.idfSendFromOffice AS TransferredFromOrganizationID,
               tr.datSendDate AS TransferDate,
               tr.TestRequested,
               t.idfTesting AS TestID,
               t.idfsTestName AS TestNameTypeID,
               testNameType.name AS TestNameTypeName,
               t.idfsTestResult AS TestResultTypeID,
               testResultType.name AS TestResultTypeName,
               t.idfsTestStatus AS TestStatusTypeID,
               testStatusType.name AS TestStatusTypeName,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsDiagnosis AS TestDiseaseID,
               t.datStartedDate AS StartedDate,
               t.datConcludedDate AS ResultDate,
               t.strContactPerson AS ContactPersonName,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               sampleType.name AS SampleTypeName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               m.datAccession AS AccessionDate,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.blnAccessioned AS AccessionIndicator,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               CASE
                   WHEN m.blnAccessioned = 0
                        AND m.idfsSampleStatus IS NULL
                        AND m.idfsAccessionCondition IS NULL THEN
                       'Un-accessioned'
                   WHEN m.idfsSampleStatus IS NULL THEN
                       accessionConditionType.name
                   WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                       accessionConditionType.name
                   ELSE
                       sampleStatusType.name
               END AS AccessionConditionOrSampleStatusTypeName,
               m.strCondition AS AccessionComment,
               tr.strNote AS PurposeOfTransfer,
               tr.idfsSite AS TransferredFromOrganizationSiteID,
               m.idfSendToOffice AS SentToOrganizationID,
               tr.idfSendByPerson AS SentByPersonID,
               tr.idfsTransferStatus AS TransferStatusTypeID,
               tr.intRowStatus AS RowStatus,
               a.strAnimalCode AS EIDSSAnimalID,
               CASE
                   WHEN m.TestUnassignedIndicator = 1 THEN
                       0
                   ELSE
                       1
               END AS TestAssignedIndicator,
               CASE
                   WHEN transferredToOrganization.idfsSite IS NULL THEN
                       1
                   ELSE
                       0
               END AS NonEIDSSLaboratoryIndicator,
               1 AS ReadPermissionIndicator,
               1 AS AccessToPersonalDataPermissionIndicator,
               1 AS AccessToGenderAndAgeDataPermissionIndicator,
               1 AS WritePermissionIndicator,
               1 AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               @InProgressCount AS InProgressCount,
               COUNT(*) OVER () AS TotalRowCount
        FROM @DeduplicatedFinalResults res
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
                   AND m.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            INNER JOIN dbo.FN_GBL_Institution(@LanguageID) transferredToOrganization
                ON transferredToOrganization.idfOffice = tr.idfSendToOffice
                   AND transferredToOrganization.intRowStatus = 0
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnExternalTest = 1
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMaterial
                   AND m.idfMonitoringSession IS NOT NULL
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            ORDER BY tr.strBarcode DESC;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_OMM_Session_GetList]...';


GO
-- ================================================================================================
-- Name: USP_OMM_Session_GetList
--
-- Description: Get a list of outbreak sessions for the outbreak module.
--          
-- Author: Doug Albanese
--
-- Revision History:
-- Name            Date       Change Detail
-- --------------- ---------- --------------------------------------------------------------------
-- Lamont Mitchell 01/09/2019 Removed ReturnCode and Return Message
-- Stephen Long	   01/13/2020 Changed from strDefault to name to pick up language translation.
-- Stephen Long	   01/26/2020 Added site list parameter for site filtration.
-- Stephen Long	   05/19/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long	   11/18/2020 Added site ID to the query.
-- Stephen Long	   11/27/2020 Added configurable site filtration rules.
-- Stephen Long	   12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long	   12/24/2020 Modified join on disease filtration default role rule.  Changed 
--                            function call to bring back inactive outbreak status and type to 
--                            handle v6.1 data that has been made obsolete.
-- Stephen Long	   12/29/2020 Changed function call on reference data for inactive records.
-- Stephen Long	   04/04/2021 Added updated pagination and location hierarchy.
-- Stephen Long	   08/16/2021 Added gisLocation and location joins where IsDescendent is called.
-- Doug Albanese   11/17/2021 Fixed the default range for returning Outbreak for the past year only.
-- Doug Albanese   12/03/2021 Integrated the new FN_GBL_LocationHierarchy_Flattened for use with 
--                             the Location Hierarchy
-- Stephen Long    03/29/2022 Fix to site filtration to pull back a user's own site records.
-- Doug Albanese   05/16/2022 Corrected Date Range, when not passed. This causes other searches 
--                            not to work well.
-- Stephen Long    06/03/2022 Updated to point default access rules to base reference.
-- Doug Albanese   01/10/2023 Changed the default sorting to correctly sort for "Status" and then 
--                            "Start Date"
-- Stephen Long    01/11/2023 Updated for site filtration queries.
-- Doug Albanese   01/12/2023 Further correction on default sorting on initial load.
-- Stephen Long    01/14/2023 Fix on site filtration queries; added site permission table 
--                            variables.
-- Doug Albanese   01/25/2023 Added logic to exclude migration status in the base reference
-- Doug Albanese   01/25/2023 Included "intOrder" for Outbreak Status to correctly order the initial 
--                            listing of sessions
-- Doug Albanese   02/10/2023 Change the "Quick Search" to operate against "Name" instead of 
--                            "Default"
-- Doug Albanese   03/10/2023 Defect 5586: Migrated data, with foreign addresses, are not 
--                            searchable.
-- Doug Albanese   03/15/2023 Changes to swap out idfGeoLocation with idfsLocation
-- Stephen Long    04/03/2023 Fixes for bug #5511.
--
-- exec [dbo].[USP_OMM_Session_GetList] @LanguageId = 'en-us', @UserSiteId = 0, @UserOrganizationID = 0, @UserEmployeeId = 0
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_OMM_Session_GetList]
(
    @LanguageID NVARCHAR(50),
    @OutbreakID NVARCHAR(200) = NULL,
    @OutbreakTypeID BIGINT = NULL,
    @SearchDiagnosesGroup BIGINT = NULL,
    @StartDateFrom DATETIME = NULL,
    @StartDateTo DATETIME = NULL,
    @OutbreakStatusTypeID BIGINT = NULL,
    @AdministrativeLevelID BIGINT = NULL,
    @QuickSearch NVARCHAR(200) = '',
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'INIT',
    @SortOrder NVARCHAR(4) = 'DESC',
    @PageNumber INT = 1,
    @PageSize INT = 10
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @firstRec INT = (@PageNumber - 1) * @pagesize,
            @lastRec INT = (@PageNumber * @pageSize + 1),
            @AdministrativeLevelNode AS HIERARCHYID,
            @RuleActiveStatus INT = 0,
            @AdministrativeLevelTypeID INT,
            @OrganizationAdministrativeLevelNode HIERARCHYID;
    DECLARE @DefaultAccessRules AS TABLE
    (
        AccessRuleID BIGINT NOT NULL,
        ActiveIndicator INT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL,
        AdministrativeLevelTypeID INT NULL
    );
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FilteredResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL, INDEX IDX_ID (ID)
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        IF @AdministrativeLevelID IS NOT NULL
        BEGIN
            SELECT @AdministrativeLevelNode = node
            FROM dbo.gisLocation
            WHERE idfsLocation = @AdministrativeLevelID;
        END;

        IF @QuickSearch = ''
           OR @QuickSearch IS NULL
        BEGIN
            -- ========================================================================================
            -- NO CONFIGURABLE FILTRATION RULES APPLIED
            --
            -- For first and second level sites, do not apply any site configurable rules.
            -- ========================================================================================
            IF @ApplySiteFiltrationIndicator = 0
            BEGIN
                INSERT INTO @Results
                SELECT idfOutbreak,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                    LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN dbo.gisLocation g
                        ON g.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND (
                              (o.datStartDate BETWEEN @StartDateFrom AND @StartDateTo)
                              OR (@StartDateFrom IS NULL AND @StartDateTo IS NULL)
                          )
                      AND (
                              o.OutbreakTypeID = @OutbreakTypeID
                              OR @OutbreakTypeID IS NULL
                          )
                      AND (
                              o.idfsOutbreakStatus = @OutbreakStatusTypeID
                              OR @OutbreakStatusTypeID IS NULL
                          )
                      AND (
                              g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                              OR @AdministrativeLevelID IS NULL
                          )
                      AND (
                              o.idfsDiagnosisOrDiagnosisGroup = @SearchDiagnosesGroup
                              OR @SearchDiagnosesGroup IS NULL
                          )
                      AND (
                              o.strOutbreakID LIKE '%' + @OutbreakID + '%'
                              OR @OutbreakID IS NULL
                          );
            END
            ELSE
            BEGIN
                -- =======================================================================================
                -- CONFIGURABLE FILTRATION RULES
                -- 
                -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
                -- overlap the default rules.
                -- =======================================================================================
                INSERT INTO @Results
                SELECT idfOutbreak,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                    LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN dbo.gisLocation g
                        ON g.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND o.idfsSite = @UserSiteID
                      AND (
                              (o.datStartDate BETWEEN @StartDateFrom AND @StartDateTo)
                              OR (@StartDateFrom IS NULL AND @StartDateTo IS NULL)
                          )
                      AND (
                              o.OutbreakTypeID = @OutbreakTypeID
                              OR @OutbreakTypeID IS NULL
                          )
                      AND (
                              o.idfsOutbreakStatus = @OutbreakStatusTypeID
                              OR @OutbreakStatusTypeID IS NULL
                          )
                      AND (
                              g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                              OR @AdministrativeLevelID IS NULL
                          )
                      AND (
                              o.idfsDiagnosisOrDiagnosisGroup = @SearchDiagnosesGroup
                              OR @SearchDiagnosesGroup IS NULL
                          )
                      AND (
                              o.strOutbreakID LIKE '%' + @OutbreakID + '%'
                              OR @OutbreakID IS NULL
                          );

                -- =======================================================================================
                -- DEFAULT CONFIGURABLE FILTRATION RULES
                --
                -- Apply active default configurable filtration rules for third level sites.
                -- =======================================================================================
                INSERT INTO @DefaultAccessRules
                SELECT AccessRuleID,
                       a.intRowStatus,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator,
                       a.AdministrativeLevelTypeID
                FROM dbo.AccessRule a
                WHERE AccessRuleID = 10537022;

                SELECT @RuleActiveStatus = ActiveIndicator
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537022;

                IF @RuleActiveStatus = 0
                BEGIN
                    SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                    FROM @DefaultAccessRules
                    WHERE AccessRuleID = 10537022;

                    SELECT @AdministrativeLevelNode
                        = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                    FROM dbo.tlbOffice o
                        INNER JOIN dbo.tlbGeoLocationShared l
                            ON l.idfGeoLocationShared = o.idfLocation
                        INNER JOIN dbo.gisLocation g
                            ON g.idfsLocation = l.idfsLocation
                               AND g.intRowStatus = 0
                    WHERE o.idfOffice = @UserOrganizationID
                          AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

                    -- Administrative level specified in the rule of the site where the session was created.
                    INSERT INTO @FilteredResults
                    SELECT ob.idfOutbreak,
                           a.ReadPermissionIndicator,
                           a.AccessToPersonalDataPermissionIndicator,
                           a.AccessToGenderAndAgeDataPermissionIndicator,
                           a.WritePermissionIndicator,
                           a.DeletePermissionIndicator
                    FROM dbo.tlbOutbreak ob
                        INNER JOIN dbo.tstSite s
                            ON ob.idfsSite = s.idfsSite
                        INNER JOIN dbo.tlbOffice o
                            ON o.idfOffice = s.idfOffice
                               AND o.intRowStatus = 0
                        INNER JOIN dbo.tlbGeoLocationShared l
                            ON l.idfGeoLocationShared = o.idfLocation
                               AND l.intRowStatus = 0
                        INNER JOIN dbo.gisLocation g
                            ON g.idfsLocation = l.idfsLocation
                               AND g.intRowStatus = 0
                        INNER JOIN @DefaultAccessRules a
                            ON a.AccessRuleID = 10537022
                    WHERE ob.intRowStatus = 0
                          AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;
                END;

                --
                -- Apply at the user's site group level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                        ON userSiteGroup.idfsSite = @UserSiteID
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                --
                -- Apply at the user's site level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteID = @UserSiteID
                           AND ara.ActorEmployeeGroupID IS NULL
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                -- 
                -- Apply at the user's employee group level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tlbEmployeeGroupMember egm
                        ON egm.idfEmployee = @UserEmployeeID
                           AND egm.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                -- 
                -- Apply at the user's ID level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tstUserTable u
                        ON u.idfPerson = @UserEmployeeID
                           AND u.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorUserID = u.idfUserID
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                --
                -- Apply at the user's site group level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup sgs
                        ON sgs.idfsSite = @UserSiteID
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND sgs.idfsSite = o.idfsSite;

                -- 
                -- Apply at the user's site level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteID = @UserSiteID
                           AND ara.ActorEmployeeGroupID IS NULL
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- 
                -- Apply at the user's employee group level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tlbEmployeeGroupMember egm
                        ON egm.idfEmployee = @UserEmployeeID
                           AND egm.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- 
                -- Apply at the user's ID level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tstUserTable u
                        ON u.idfPerson = @UserEmployeeID
                           AND u.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorUserID = u.idfUserID
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- Copy filtered results to results and use search criteria
                INSERT INTO @Results
                SELECT ID,
                       ReadPermissionIndicator,
                       AccessToPersonalDataPermissionIndicator,
                       AccessToGenderAndAgeDataPermissionIndicator,
                       WritePermissionIndicator,
                       DeletePermissionIndicator
                FROM @FilteredResults
                    INNER JOIN dbo.tlbOutbreak o
                        ON o.idfOutbreak = ID
                    INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN dbo.gisLocation g
                        ON g.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND (
                              (o.datStartDate BETWEEN @StartDateFrom AND @StartDateTo)
                              OR (@StartDateFrom IS NULL AND @StartDateTo IS NULL)
                          )
                      AND (
                              o.OutbreakTypeID = @OutbreakTypeID
                              OR @OutbreakTypeID IS NULL
                          )
                      AND (
                              o.idfsOutbreakStatus = @OutbreakStatusTypeID
                              OR @OutbreakStatusTypeID IS NULL
                          )
                      AND (
                              g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                              OR @AdministrativeLevelID IS NULL
                          )
                      AND (
                              o.idfsDiagnosisOrDiagnosisGroup = @SearchDiagnosesGroup
                              OR @SearchDiagnosesGroup IS NULL
                          )
                      AND (
                              o.strOutbreakID LIKE '%' + @OutbreakID + '%'
                              OR @OutbreakID IS NULL
                          )
                GROUP BY ID,
                         ReadPermissionIndicator,
                         AccessToPersonalDataPermissionIndicator,
                         AccessToGenderAndAgeDataPermissionIndicator,
                         WritePermissionIndicator,
                         DeletePermissionIndicator;
            END;

            -- =======================================================================================
            -- DISEASE FILTRATION RULES
            --
            -- Apply disease filtration rules from use case SAUC62.
            -- =======================================================================================		
            -- 
            -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without site filtration rules applied.
            --
            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN dbo.tstObjectAccess oa
                                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                                       AND oa.intRowStatus = 0
                            WHERE o.intRowStatus = 0
                                  AND oa.intPermission = 1
                                  AND oa.idfsObjectType = 10060001 -- Disease
                                  AND oa.idfActor = -506 -- Default role
                        );

            --
            -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
            WHERE oa.intPermission = 2 -- Allow permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND o.intRowStatus = 0
                  AND oa.idfActor = egm.idfEmployeeGroup
                      AND (
                              (o.datStartDate BETWEEN @StartDateFrom AND @StartDateTo)
                              OR (@StartDateFrom IS NULL AND @StartDateTo IS NULL)
                          )
                      AND (
                              o.OutbreakTypeID = @OutbreakTypeID
                              OR @OutbreakTypeID IS NULL
                          )
                      AND (
                              o.idfsOutbreakStatus = @OutbreakStatusTypeID
                              OR @OutbreakStatusTypeID IS NULL
                          )
                      AND (
                              g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                              OR @AdministrativeLevelID IS NULL
                          )
                      AND (
                              o.idfsDiagnosisOrDiagnosisGroup = @SearchDiagnosesGroup
                              OR @SearchDiagnosesGroup IS NULL
                          )
                      AND (
                              o.strOutbreakID LIKE '%' + @OutbreakID + '%'
                              OR @OutbreakID IS NULL
                          );

            DELETE res
            FROM @Results res
                INNER JOIN dbo.tlbOutbreak o
                    ON o.idfOutbreak = res.ID
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
            WHERE o.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = egm.idfEmployeeGroup;

            --
            -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
            WHERE oa.intPermission = 2 -- Allow permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND o.intRowStatus = 0
                  AND oa.idfActor = @UserEmployeeID
                      AND (
                              (o.datStartDate BETWEEN @StartDateFrom AND @StartDateTo)
                              OR (@StartDateFrom IS NULL AND @StartDateTo IS NULL)
                          )
                      AND (
                              o.OutbreakTypeID = @OutbreakTypeID
                              OR @OutbreakTypeID IS NULL
                          )
                      AND (
                              o.idfsOutbreakStatus = @OutbreakStatusTypeID
                              OR @OutbreakStatusTypeID IS NULL
                          )
                      AND (
                              g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                              OR @AdministrativeLevelID IS NULL
                          )
                      AND (
                              o.idfsDiagnosisOrDiagnosisGroup = @SearchDiagnosesGroup
                              OR @SearchDiagnosesGroup IS NULL
                          )
                      AND (
                              o.strOutbreakID LIKE '%' + @OutbreakID + '%'
                              OR @OutbreakID IS NULL
                          );

            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN dbo.tstObjectAccess oa
                                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                                       AND oa.intRowStatus = 0
                            WHERE o.intRowStatus = 0
                                  AND oa.intPermission = 1 -- Deny permission
                                  AND oa.idfsObjectType = 10060001 -- Disease
                                  AND idfActor = @UserEmployeeID
                        );

            -- =======================================================================================
            -- SITE FILTRATION RULES
            --
            -- Apply site filtration rules from use case SAUC29.
            -- =======================================================================================		
            -- 
            -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without filtration rules applied.
            --
            DELETE FROM @Results
            WHERE EXISTS
            (
                SELECT o.idfOutbreak
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tstObjectAccess oa
                        ON oa.idfsObjectID = o.idfsSite
                           AND oa.intRowStatus = 0
                    INNER JOIN dbo.tlbEmployeeGroup eg
                        ON eg.idfsSite = @UserSiteID
                           AND eg.intRowStatus = 0
                    INNER JOIN dbo.trtBaseReference br
                        ON br.idfsBaseReference = eg.idfEmployeeGroup
                           AND br.intRowStatus = 0
                           AND br.blnSystem = 1
                WHERE o.intRowStatus = 0
                      AND oa.idfsObjectOperation = 10059003 -- Read permission
                      AND oa.intPermission = 1 -- Deny permission
                      AND oa.idfsObjectType = 10060011 -- Site
                      AND oa.idfActor = eg.idfEmployeeGroup
            );

            --
            -- Apply level 1 site filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059003
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059006
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059007
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059004
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059002
                   )
            FROM dbo.tlbOutbreak o
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
            WHERE o.intRowStatus = 0
                  AND EXISTS
            (
                SELECT * FROM @UserGroupSitePermissions WHERE SiteID = o.idfsSite
            )
                      AND (
                              (o.datStartDate BETWEEN @StartDateFrom AND @StartDateTo)
                              OR (@StartDateFrom IS NULL AND @StartDateTo IS NULL)
                          )
                      AND (
                              o.OutbreakTypeID = @OutbreakTypeID
                              OR @OutbreakTypeID IS NULL
                          )
                      AND (
                              o.idfsOutbreakStatus = @OutbreakStatusTypeID
                              OR @OutbreakStatusTypeID IS NULL
                          )
                      AND (
                              g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                              OR @AdministrativeLevelID IS NULL
                          )
                      AND (
                              o.idfsDiagnosisOrDiagnosisGroup = @SearchDiagnosesGroup
                              OR @SearchDiagnosesGroup IS NULL
                          )
                      AND (
                              o.strOutbreakID LIKE '%' + @OutbreakID + '%'
                              OR @OutbreakID IS NULL
                          );

            DELETE res
            FROM @Results res
                INNER JOIN dbo.tlbOutbreak o
                    ON o.idfOutbreak = res.ID
                INNER JOIN @UserGroupSitePermissions ugsp
                    ON ugsp.SiteID = o.idfsSite
            WHERE ugsp.Permission = 2 -- Deny permission
                  AND ugsp.PermissionTypeID = 10059003; -- Read permission

            --
            -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059003
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059006
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059007
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059004
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059002
                   )
            FROM dbo.tlbOutbreak o
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
            WHERE o.intRowStatus = 0
                  AND EXISTS
            (
                SELECT * FROM @UserSitePermissions WHERE SiteID = o.idfsSite
            )
                      AND (
                              (o.datStartDate BETWEEN @StartDateFrom AND @StartDateTo)
                              OR (@StartDateFrom IS NULL AND @StartDateTo IS NULL)
                          )
                      AND (
                              o.OutbreakTypeID = @OutbreakTypeID
                              OR @OutbreakTypeID IS NULL
                          )
                      AND (
                              o.idfsOutbreakStatus = @OutbreakStatusTypeID
                              OR @OutbreakStatusTypeID IS NULL
                          )
                      AND (
                              g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                              OR @AdministrativeLevelID IS NULL
                          )
                      AND (
                              o.idfsDiagnosisOrDiagnosisGroup = @SearchDiagnosesGroup
                              OR @SearchDiagnosesGroup IS NULL
                          )
                      AND (
                              o.strOutbreakID LIKE '%' + @OutbreakID + '%'
                              OR @OutbreakID IS NULL
                          );

            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN @UserSitePermissions usp
                                    ON usp.SiteID = o.idfsSite
                            WHERE usp.Permission = 4 -- Deny permission
                                  AND usp.PermissionTypeID = 10059003 -- Read permission
                        );
        END
        ELSE
        BEGIN
            -- ========================================================================================
            -- NO CONFIGURABLE FILTRATION RULES APPLIED
            --
            -- For first and second level sites, do not apply any configurable filtration rules.
            -- ========================================================================================
            IF @ApplySiteFiltrationIndicator = 0
            BEGIN
                INSERT INTO @Results
                SELECT idfOutbreak,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                    LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                        ON lh.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND (
                              strOutbreakID LIKE '%' + @QuickSearch + '%'
                              OR d.name LIKE '%' + @QuickSearch + '%'
                              OR os.name LIKE '%' + @QuickSearch + '%'
                              OR ot.name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                              OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                          );
            END
            ELSE
            BEGIN
                -- =======================================================================================
                -- CONFIGURABLE FILTRATION RULES
                -- 
                -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
                -- overlap the default rules.
                -- =======================================================================================
                INSERT INTO @Results
                SELECT idfOutbreak,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                    LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                        ON lh.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND o.idfsSite = @UserSiteID
                      AND (
                              strOutbreakID LIKE '%' + @QuickSearch + '%'
                              OR d.name LIKE '%' + @QuickSearch + '%'
                              OR os.name LIKE '%' + @QuickSearch + '%'
                              OR ot.name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                              OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                          );

                -- =======================================================================================
                -- DEFAULT CONFIGURABLE FILTRATION RULES
                --
                -- Apply active default configurable filtration rules for third level sites.
                -- =======================================================================================
                INSERT INTO @DefaultAccessRules
                SELECT AccessRuleID,
                       a.intRowStatus,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator,
                       a.AdministrativeLevelTypeID
                FROM dbo.AccessRule a
                WHERE AccessRuleID = 10537022;

                SELECT @RuleActiveStatus = ActiveIndicator
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537022;

                IF @RuleActiveStatus = 0
                BEGIN
                    SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                    FROM @DefaultAccessRules
                    WHERE AccessRuleID = 10537022;

                    SELECT @AdministrativeLevelNode
                        = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                    FROM dbo.tlbOffice o
                        INNER JOIN dbo.tlbGeoLocationShared l
                            ON l.idfGeoLocationShared = o.idfLocation
                        INNER JOIN dbo.gisLocation g
                            ON g.idfsLocation = l.idfsLocation
                               AND g.intRowStatus = 0
                    WHERE o.idfOffice = @UserOrganizationID
                          AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

                    -- Administrative level specified in the rule of the site where the session was created.
                    INSERT INTO @FilteredResults
                    SELECT ob.idfOutbreak,
                           a.ReadPermissionIndicator,
                           a.AccessToPersonalDataPermissionIndicator,
                           a.AccessToGenderAndAgeDataPermissionIndicator,
                           a.WritePermissionIndicator,
                           a.DeletePermissionIndicator
                    FROM dbo.tlbOutbreak ob
                        INNER JOIN dbo.tstSite s
                            ON ob.idfsSite = s.idfsSite
                        INNER JOIN dbo.tlbOffice o
                            ON o.idfOffice = s.idfOffice
                               AND o.intRowStatus = 0
                        INNER JOIN dbo.tlbGeoLocationShared l
                            ON l.idfGeoLocationShared = o.idfLocation
                               AND l.intRowStatus = 0
                        INNER JOIN dbo.gisLocation g
                            ON g.idfsLocation = l.idfsLocation
                               AND g.intRowStatus = 0
                        INNER JOIN @DefaultAccessRules a
                            ON a.AccessRuleID = 10537022
                    WHERE ob.intRowStatus = 0
                          AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;
                END;

                --
                -- Apply at the user's site group level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                        ON userSiteGroup.idfsSite = @UserSiteID
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                --
                -- Apply at the user's site level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteID = @UserSiteID
                           AND ara.ActorEmployeeGroupID IS NULL
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                -- 
                -- Apply at the user's employee group level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tlbEmployeeGroupMember egm
                        ON egm.idfEmployee = @UserEmployeeID
                           AND egm.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                -- 
                -- Apply at the user's ID level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tstUserTable u
                        ON u.idfPerson = @UserEmployeeID
                           AND u.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorUserID = u.idfUserID
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                --
                -- Apply at the user's site group level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup sgs
                        ON sgs.idfsSite = @UserSiteID
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND sgs.idfsSite = o.idfsSite;

                -- 
                -- Apply at the user's site level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteID = @UserSiteID
                           AND ara.ActorEmployeeGroupID IS NULL
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- 
                -- Apply at the user's employee group level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tlbEmployeeGroupMember egm
                        ON egm.idfEmployee = @UserEmployeeID
                           AND egm.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- 
                -- Apply at the user's ID level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tstUserTable u
                        ON u.idfPerson = @UserEmployeeID
                           AND u.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorUserID = u.idfUserID
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- Copy filtered results to results and use search criteria
                INSERT INTO @Results
                SELECT ID,
                       ReadPermissionIndicator,
                       AccessToPersonalDataPermissionIndicator,
                       AccessToGenderAndAgeDataPermissionIndicator,
                       WritePermissionIndicator,
                       DeletePermissionIndicator
                FROM @FilteredResults
                    INNER JOIN dbo.tlbOutbreak o
                        ON o.idfOutbreak = ID
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                    LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                        ON lh.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND (
                              strOutbreakID LIKE '%' + @QuickSearch + '%'
                              OR d.name LIKE '%' + @QuickSearch + '%'
                              OR os.name LIKE '%' + @QuickSearch + '%'
                              OR ot.name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                              OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                          )
                GROUP BY ID,
                         ReadPermissionIndicator,
                         AccessToPersonalDataPermissionIndicator,
                         AccessToGenderAndAgeDataPermissionIndicator,
                         WritePermissionIndicator,
                         DeletePermissionIndicator;
            END;

            -- =======================================================================================
            -- DISEASE FILTRATION RULES
            --
            -- Apply disease filtration rules from use case SAUC62.
            -- =======================================================================================		
            -- 
            -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without site filtration rules applied.
            --
            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN dbo.tstObjectAccess oa
                                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                                       AND oa.intRowStatus = 0
                            WHERE o.intRowStatus = 0
                                  AND oa.intPermission = 1
                                  AND oa.idfsObjectType = 10060001 -- Disease
                                  AND oa.idfActor = -506 -- Default role
                        );

            --
            -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                    ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                    ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                    ON ot.idfsReference = o.OutbreakTypeId
            WHERE oa.intPermission = 2 -- Allow permission
                  AND o.intRowStatus = 0
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = egm.idfEmployeeGroup
                  AND (
                          strOutbreakID LIKE '%' + @QuickSearch + '%'
                          OR d.name LIKE '%' + @QuickSearch + '%'
                          OR os.name LIKE '%' + @QuickSearch + '%'
                          OR ot.name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                          OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                      );

            DELETE res
            FROM @Results res
                INNER JOIN dbo.tlbOutbreak o
                    ON o.idfOutbreak = res.ID
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
            WHERE intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = egm.idfEmployeeGroup;

            --
            -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                    ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                    ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                    ON ot.idfsReference = o.OutbreakTypeId
            WHERE oa.intPermission = 2 -- Allow permission
                  AND o.intRowStatus = 0
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = @UserEmployeeID
                  AND (
                          strOutbreakID LIKE '%' + @QuickSearch + '%'
                          OR d.name LIKE '%' + @QuickSearch + '%'
                          OR os.name LIKE '%' + @QuickSearch + '%'
                          OR ot.name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                          OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                      );

            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN dbo.tstObjectAccess oa
                                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                                       AND oa.intRowStatus = 0
                            WHERE o.intRowStatus = 0
                                  AND oa.intPermission = 1 -- Deny permission
                                  AND oa.idfsObjectType = 10060001 -- Disease
                                  AND idfActor = @UserEmployeeID
                        );

            -- =======================================================================================
            -- SITE FILTRATION RULES
            --
            -- Apply site filtration rules from use case SAUC29.
            -- =======================================================================================		
            -- 
            -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without site filtration rules applied.
            --
            DELETE FROM @Results
            WHERE EXISTS
            (
                SELECT o.idfOutbreak
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tstObjectAccess oa
                        ON oa.idfsObjectID = o.idfsSite
                           AND oa.intRowStatus = 0
                    INNER JOIN dbo.tlbEmployeeGroup eg
                        ON eg.idfsSite = @UserSiteID
                           AND eg.intRowStatus = 0
                    INNER JOIN dbo.trtBaseReference br
                        ON br.idfsBaseReference = eg.idfEmployeeGroup
                           AND br.intRowStatus = 0
                           AND br.blnSystem = 1
                WHERE o.intRowStatus = 0
                      AND oa.idfsObjectOperation = 10059003 -- Read permission
                      AND oa.intPermission = 1 -- Deny permission
                      AND oa.idfsObjectType = 10060011 -- Site
                      AND oa.idfActor = eg.idfEmployeeGroup
            );

            --
            -- Apply level 1 site filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059003
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059006
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059007
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059004
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059002
                   )
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                    ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                    ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                    ON ot.idfsReference = o.OutbreakTypeId
            WHERE o.intRowStatus = 0
                  AND EXISTS
            (
                SELECT * FROM @UserGroupSitePermissions WHERE SiteID = o.idfsSite
            )
                  AND (
                          strOutbreakID LIKE '%' + @QuickSearch + '%'
                          OR d.name LIKE '%' + @QuickSearch + '%'
                          OR os.name LIKE '%' + @QuickSearch + '%'
                          OR ot.name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                          OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                      );

            DELETE res
            FROM @Results res
                INNER JOIN dbo.tlbOutbreak o
                    ON o.idfOutbreak = res.ID
                INNER JOIN @UserGroupSitePermissions ugsp
                    ON ugsp.SiteID = o.idfsSite
            WHERE ugsp.Permission = 2 -- Deny permission
                  AND ugsp.PermissionTypeID = 10059003; -- Read permission

            --
            -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059003
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059006
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059007
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059004
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059002
                   )
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                    ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                    ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                    ON ot.idfsReference = o.OutbreakTypeId
            WHERE o.intRowStatus = 0
                  AND EXISTS
            (
                SELECT * FROM @UserSitePermissions WHERE SiteID = o.idfsSite
            )
                  AND (
                          strOutbreakID LIKE '%' + @QuickSearch + '%'
                          OR d.name LIKE '%' + @QuickSearch + '%'
                          OR os.name LIKE '%' + @QuickSearch + '%'
                          OR ot.name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                          OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                      );

            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN @UserSitePermissions usp
                                    ON usp.SiteID = o.idfsSite
                            WHERE usp.Permission = 4 -- Deny permission
                                  AND usp.PermissionTypeID = 10059003 -- Read permission
                        );
        END;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator)
        FROM @Results res
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
        GROUP BY ID;
		
        WITH paging
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'OutbreakID'
                                                        AND @SortOrder = 'ASC' THEN
                                          (os.name + ' ' + o.strOutbreakID)
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'OutbreakID'
                                                        AND @SortOrder = 'DESC' THEN
                                               (os.name + ' ' + o.strOutbreakID)
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'OutbreakStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       os.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'OutbreakStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       os.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'OutbreakTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ot.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'OutbreakTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ot.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel1Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel1Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel1Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel1Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel2Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel2Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel3Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel3Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel3Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel3Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel4Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel4Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel4Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel4Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel5Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel5Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel5Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel5Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel6Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel6Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel6Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel6Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel7Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel7Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel7Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel7Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       d.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       d.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'StartDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       o.datStartDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'StartDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       o.datStartDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'INIT' THEN
                                                       CAST(os.intOrder AS NVARCHAR) + ',' + CONVERT(NVARCHAR, o.datStartDate, 12) + ' DESC'
                                               END DESC
                                     ) AS ROWNUM,
                   ID,
                   c = COUNT(*) OVER ()
            FROM @FinalResults res
                INNER JOIN dbo.tlbOutbreak o
                    ON o.idfOutbreak = res.ID
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                    ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                    ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                    ON ot.idfsReference = o.OutbreakTypeId
           )
        SELECT paging.ROWNUM,
               o.idfOutbreak,
               strOutbreakID AS OutbreakID,
               d.name AS DiseaseName,
               os.name AS OutbreakStatusTypeName,
               ot.name AS OutbreakTypeName,
               lh.AdminLevel1Name AS AdministrativeLevel1Name,
               lh.AdminLevel2Name AS AdministrativeLevel2Name,
               lh.AdminLevel3Name AS AdministrativeLevel3Name,
               lh.AdminLevel4Name AS AdministrativeLevel4Name,
               lh.AdminLevel5Name AS AdministrativeLevel5Name,
               lh.AdminLevel6Name AS AdministrativeLevel6Name,
               lh.AdminLevel7Name AS AdministrativeLevel7Name,
               o.datStartDate AS StartDate,
               o.idfsSite AS SiteID,
               CASE
                   WHEN ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               c AS RecordCount,
               (
                   SELECT COUNT(*) FROM dbo.tlbOutbreak WHERE intRowStatus = 0
               ) AS TotalCount,
               CurrentPage = @PageNumber,
               TotalPages = (c / @PageSize) + IIF(c % @PageSize > 0, 1, 0)
        FROM @FinalResults res
            INNER JOIN paging
                ON paging.ID = res.ID
            INNER JOIN dbo.tlbOutbreak o
                ON o.idfOutbreak = res.ID
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
			LEFT JOIN FN_GBL_LocationHierarchy_Flattened (@LanguageID) lh
                ON lh.idfsLocation = o.idfsLocation
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                ON ot.idfsReference = o.OutbreakTypeId
        WHERE RowNum > @firstRec
              AND RowNum < @lastRec
        ORDER BY paging.ROWNUM;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_BASEREFERENCE_SET]...';


GO
-- ================================================================================================
-- Name: USP_REF_BASEREFERENCE_SET
--
-- Description:	Creates or saves a base reference
--                      
-- Author: Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		02/10/2018 Initial release.
-- Ricky Moss		02/19/2018 Updated the portion of the query to see if there reference 
--                             currently exists
-- Ricky Moss		09/30/2019 Reference duplicate check
-- Ann Xiong		11/20/2020 Modified to insert strName in trtStringNameTranslation
-- Mark Wilson		06/17/2021 Updated to check for dupes, etc.
-- Mark Wilson		07/07/2021 updated to use FN_GBL_LanguageCode_GET()
-- Mark Wilson		08/13/2021 updated to remove strDefault from USSP_GBL_StringTranslation_SET
-- Stephen Long     07/16/2022 Added site alert logic.
-- Doug Albanese	11/30/2022 Added LOINC
--
-- exec USP_REF_BASEREFERENCE_SET NULL, 19000005, 'en-US', 'ABCDEFGhij', 'ABC123', 32, 0
-- exec USP_REF_BASEREFERENCE_SET 389445040004019, 19000005, 'ka-GE', 'ABCDEFGhij', 'ABC123GG to ka', 34, 1
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_BASEREFERENCE_SET] 
   @idfsBaseReference BIGINT = NULL
   ,@idfsReferenceType BIGINT
   ,@LangID NVARCHAR(50)
   ,@strDefault VARCHAR(200)
   ,@strName NVARCHAR(200)
   ,@HACode INT = NULL
   ,@Order INT = NULL
   ,@EventTypeId BIGINT
   ,@SiteId BIGINT
   ,@UserId BIGINT
   ,@LocationId BIGINT
   ,@AuditUserName NVARCHAR(200)
   ,@LOINC NVARCHAR(200) = NULL
AS
BEGIN
	DECLARE @ReturnMessage VARCHAR(MAX) = 'SUCCESS'
		,@ReturnCode BIGINT = 0
		,@DuplicateDefault INT = 0
		,-- updated to capture 0 or 1. 1 indicates a duplicate and will not execute the set.
		@idfCustomizationPackage BIGINT
		,@idfsLanguage BIGINT = (
			SELECT dbo.FN_GBL_LanguageCode_GET(@LangID)
			);-- capture the idfsLanguage for the translation
	DECLARE @SuppressSelect TABLE (
		ReturnCode INT
		,ReturnMessage NVARCHAR(MAX)
		);
		
declare @idfUserId BIGINT =NULL;
declare @idfSiteId BIGINT = NULL;
declare @idfsDataAuditEventType bigint;
declare @idfsObjectType bigint = 10017042;
declare @idfObject bigint;
declare @idfObjectTable_tlbTestMatrix bigint = 75820000000;
declare @idfDataAuditEvent bigint= NULL; 
DECLARE @tlbBaseReference_BeforeEdit TABLE
(
	idfsBaseReference BIGINT
	,idfsReferenceType BIGINT 
	,strDefault VARCHAR(200) 
	,HACode INT
	,[Order] INT
	,intRowStatus INT
)
DECLARE @tlbBaseReference_AfterEdit TABLE
(
	idfsBaseReference BIGINT
	,idfsReferenceType BIGINT 
	,strDefault VARCHAR(200) 
	,HACode INT
	,[Order] INT
	,intRowStatus INT
)
-- Get and Set UserId and SiteId
select @idfUserId =userInfo.UserId, @idfSiteId=UserInfo.SiteId from dbo.FN_UserSiteInformation(@AuditUserName) userInfo

	BEGIN TRY
		IF @idfsBaseReference IS NULL
		BEGIN -- this is an insert.  check if the strDefault is a duplicate
			IF EXISTS (
					SELECT *
					FROM dbo.trtBaseReference
					WHERE strDefault = @strDefault
						AND idfsReferenceType = @idfsReferenceType
						AND trtBaseReference.intRowStatus = 0
					)
			BEGIN
				SELECT @ReturnMessage = 'DOES EXIST';

				SELECT @DuplicateDefault = 1
			END
		END
		ELSE
		BEGIN -- this is an update.  check if the strDefault is a duplicate
			IF EXISTS (
					SELECT *
					FROM dbo.trtBaseReference
					WHERE idfsBaseReference <> @idfsBaseReference -- check all the other strDefaults of that reference type
						AND strDefault = @strDefault
						AND idfsReferenceType = @idfsReferenceType
						AND trtBaseReference.intRowStatus = 0
					)
			BEGIN
				SELECT @ReturnMessage = 'DOES EXIST';

				SELECT @DuplicateDefault = 1
			END
		END

		IF @DuplicateDefault = 1 -- No need to go any further, as the strDefault is a duplicate
		BEGIN
			SELECT @ReturnMessage = 'DOES EXIST';
		END
		ELSE
		BEGIN
			IF @idfsBaseReference IS NULL -- there is no duplicate and this is an insert
			BEGIN
				INSERT INTO @SuppressSelect
				EXEC dbo.USP_GBL_NEXTKEYID_GET 'trtBaseReference'
					,@idfsBaseReference OUTPUT;

				INSERT INTO dbo.trtBaseReference (
					idfsBaseReference
					,idfsReferenceType
					,intHACode
					,strDefault
					,intOrder
					,rowguid
					,intRowStatus
					,SourceSystemNameID
					,SourceSystemKeyValue
					,AuditCreateDTM
					,AuditCreateUser
					)
				VALUES (
					@idfsBaseReference
					,@idfsReferenceType
					,@HACode
					,@strDefault
					,@Order
					,NEWID()
					,0
					,10519001
					,'[{"idfsBaseReference":' + CAST(@idfsBaseReference AS NVARCHAR(300)) + '}]'
					,GETDATE()
					,@AuditUserName
					);

				EXEC dbo.USSP_GBL_StringTranslation_SET @idfsBaseReference
					,@LangID
					,@strName
					,@User = @AuditUserName;

				SELECT @idfCustomizationPackage = dbo.FN_GBL_CustomizationPackage_GET();

				IF @idfCustomizationPackage IS NOT NULL
					AND @idfCustomizationPackage <> 51577300000000 --The USA
				BEGIN
					EXEC dbo.USP_GBL_BaseReferenceToCP_SET @idfsBaseReference
						,@idfCustomizationPackage
						,@User = @AuditUserName;
				END

				INSERT INTO @SuppressSelect
				EXECUTE dbo.USP_ADMIN_EVENT_SET - 1
					,@EventTypeId
					,@UserId
					,@idfsBaseReference
					,NULL
					,@SiteId
					,NULL
					,@SiteId
					,@LocationId
					,@AuditUserName;

					
				--Data Audit--
				-- tauDataAuditEvent Event Type - Create 
				set @idfObject = @idfsBaseReference;
				set @idfObjectTable_tlbTestMatrix =76020000000;
				set @idfsDataAuditEventType =10016001;
						-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbTestMatrix, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
					values ( @idfDataAuditEvent, @idfObjectTable_tlbTestMatrix, @idfObject)
				--Data Audit--
			END
			ELSE -- There is no duplicate and this is an update
			BEGIN		
				insert into @tlbBaseReference_BeforeEdit (idfsBaseReference,idfsReferenceType, strDefault, HACode, [Order], intRowStatus)
				select idfsBaseReference,idfsReferenceType, strDefault, intHACode, intOrder, intRowStatus
					from trtBaseReference WHERE idfsBaseReference = @idfsBaseReference

				UPDATE dbo.trtBaseReference
				SET idfsReferenceType = @idfsReferenceType
					,strDefault = @strDefault
					,intHACode = ISNULL(@HACode, intHACode)
					,intOrder = ISNULL(@Order, intOrder)
					,intRowStatus = 0
					,SourceSystemNameID = ISNULL(SourceSystemNameID, 10519001)
					,SourceSystemKeyValue = '[{"idfsBaseReference":' + CAST(@idfsBaseReference AS NVARCHAR(300)) + '}]'
					,AuditUpdateDTM = GETDATE()
					,AuditUpdateUser = @AuditUserName
				WHERE idfsBaseReference = @idfsBaseReference;

				EXEC dbo.USSP_GBL_StringTranslation_SET @idfsBaseReference
					,@LangID
					,@strName
					,@User = @AuditUserName;

				INSERT INTO @SuppressSelect
				EXECUTE dbo.USP_ADMIN_EVENT_SET - 1
					,@EventTypeId
					,@UserId
					,@idfsBaseReference
					,NULL
					,@SiteId
					,NULL
					,@SiteId
					,@LocationId
					,@AuditUserName;

				--DataAudit-- 
				insert into @tlbBaseReference_AfterEdit (idfsBaseReference,idfsReferenceType, strDefault, HACode, [Order], intRowStatus)
				select idfsBaseReference,idfsReferenceType, strDefault, intHACode, intOrder, intRowStatus
					from trtBaseReference WHERE idfsBaseReference = @idfsBaseReference

				IF EXISTS 
				(
					select *
					from @tlbBaseReference_BeforeEdit a  inner join @tlbBaseReference_AfterEdit b on a.idfsBaseReference = b.idfsBaseReference
					where (ISNULL(a.idfsReferenceType,'') <> ISNULL(b.idfsReferenceType,'')) OR (ISNULL(a.strDefault,'') <> ISNULL(b.strDefault,''))
						OR (ISNULL(a.HACode,'') <> ISNULL(b.HACode,'')) OR (ISNULL(a.[Order],'') <> ISNULL(b.[Order],'')) OR (ISNULL(a.intRowStatus,'') <> ISNULL(b.intRowStatus,''))
				)
				BEGIN
					--  tauDataAuditEvent  Event Type- Edit 
					set @idfsDataAuditEventType = 10016003;
					Set @idfObject = @idfsBaseReference
					-- insert record into tauDataAuditEvent - 
					INSERT INTO @SuppressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbTestMatrix, @idfDataAuditEvent OUTPUT

					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, idfObjectTable, idfColumn, 
						idfObject, idfObjectDetail, 
						strOldValue, strNewValue)
					select @idfDataAuditEvent,@idfObjectTable_tlbTestMatrix, 81080000000,
						@idfObject,null,
						a.idfsReferenceType,b.idfsReferenceType 
					from @tlbBaseReference_BeforeEdit a  inner join @tlbBaseReference_AfterEdit b on a.idfsBaseReference = b.idfsBaseReference
					where (ISNULL(a.idfsReferenceType,'') <> ISNULL(b.idfsReferenceType,'')) 

					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, idfObjectTable, idfColumn, 
						idfObject, idfObjectDetail, 
						strOldValue, strNewValue)
					select @idfDataAuditEvent,@idfObjectTable_tlbTestMatrix, 81120000000,
						@idfObject,null,
						a.strDefault,b.strDefault 
					from @tlbBaseReference_BeforeEdit a  inner join @tlbBaseReference_AfterEdit b on a.idfsBaseReference = b.idfsBaseReference
					where (ISNULL(a.strDefault,'') <> ISNULL(b.strDefault,'')) 

					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, idfObjectTable, idfColumn, 
						idfObject, idfObjectDetail, 
						strOldValue, strNewValue)
					select @idfDataAuditEvent,@idfObjectTable_tlbTestMatrix, 81090000000,
						@idfObject,null,
						a.HACode,b.HACode 
					from @tlbBaseReference_BeforeEdit a  inner join @tlbBaseReference_AfterEdit b on a.idfsBaseReference = b.idfsBaseReference
					where (ISNULL(a.HACode,'') <> ISNULL(b.HACode,'')) 

					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, idfObjectTable, idfColumn, 
						idfObject, idfObjectDetail, 
						strOldValue, strNewValue)
					select @idfDataAuditEvent,@idfObjectTable_tlbTestMatrix, 81100000000,
						@idfObject,null,
						a.[Order],b.[Order] 
					from @tlbBaseReference_BeforeEdit a  inner join @tlbBaseReference_AfterEdit b on a.idfsBaseReference = b.idfsBaseReference
					where (ISNULL(a.[Order],'') <> ISNULL(b.[Order],''))  
				END
			END
		END

		 --Adding new feature to the Base Reference Editor
		 --LOINC saving to remote mapping table: LOINCEidssMapping
		 IF EXISTS (
				  SELECT *
				  FROM dbo.LOINCEidssMapping
				  WHERE idfsBaseReference = @idfsBaseReference
		 )
			BEGIN
				  UPDATE dbo.LOINCEidssMapping
				  SET LOINC_NUM = @LOINC
					 ,AuditUpdateDTM = GETDATE()
					 ,AuditUpdateUser = @AuditUserName
					 ,intRowStatus = 0
					 ,SourceSystemKeyValue = N'[{"idfsBaseReference":' + CAST(@idfsBaseReference AS NVARCHAR(300)) + '}]'
				  WHERE idfsBaseReference = @idfsBaseReference;
			END
		 ELSE
			BEGIN
				  IF @LOINC <> ''
					 BEGIN
						INSERT INTO dbo.LOINCEidssMapping (
						   idfsBaseReference
						   ,idfsReferenceType
						   ,LOINC_NUM
						   ,intRowStatus
						   ,rowguid
						   ,SourceSystemNameID
						   ,SourceSystemKeyValue
						   ,AuditCreateUser
						   ,AuditCreateDTM
						   )
						VALUES (
						   @idfsBaseReference,
						   @idfsReferenceType,
						   @LOINC,
						   0,
						   NEWID(),
						   10519001,
						   N'[{"idfsBaseReference":' + CAST(@idfsBaseReference AS NVARCHAR(300)) + '}]',
						   @AuditUserName,
						   GETDATE()
						);
					 END
			END

	  	 SELECT @ReturnCode AS 'ReturnCode'
		 ,@ReturnMessage AS 'ReturnMessage'
		 ,@idfsBaseReference AS 'idfsBaseReference';

	END TRY
	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_VAS_MONITORING_SESSION_SAMPLE_GETList]...';


GO
-- ================================================================================================
-- Name: USP_VAS_MONITORING_SESSION_SAMPLE_GETList
--
-- Description:	Gets sample records for veterinary surveillance session report use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mike	Kornegay 01/17/2022 Initial release (copied from USP_VET_SAMPLE_GETList)
-- Mike	Kornegay 09/30/2022 Correct species type to look at HACode instead of idfsBaseReference.
-- Mike Kornegay 10/10/2022 Add disease name to group by.
-- Mike Kornegay 10/16/2022 Correct test count to show 1 when tests exist.
-- Mike Kornegay 10/31/2022 Add comma separated disease name list.
-- Mike Kornegay 03/06/2023 Add TotalSamples and TotalAnimalsSampled to stored proc.
-- Mike Kornegay 03/31/2023 Correct TotalAnimalsSampled and TotalRowCount.
--
-- EXEC	@return_value = [dbo].[USP_VCT_MONITORING_SESSION_SAMPLE_GETList]
		--@LanguageID = N'en-US',
		--@PageNumber = 1,
		--@PageSize = 10,
		--@SortColumn = NULL,
		--@SortOrder = NULL,
		--@MonitoringSessionID = 10,
		--@ParentSampleID = NULL,
		--@RootSampleID = NULL 
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VAS_MONITORING_SESSION_SAMPLE_GETList] (
	@LanguageID NVARCHAR(50)
	,@PageNumber INT = 1
	,@PageSize INT = 10
	,@SortColumn NVARCHAR(30) = 'SampleTypeName'
	,@SortOrder NVARCHAR(4) = 'ASC'
	,@MonitoringSessionID BIGINT = NULL
	,@ParentSampleID BIGINT = NULL
	,@RootSampleID BIGINT = NULL
	)
AS
BEGIN
	DECLARE @firstRec INT
		,@lastRec INT
		,@TotalRowCount INT = 0;
	DECLARE @Results TABLE (
		SampleID BIGINT NOT NULL
	);

	SET @firstRec = (@PageNumber - 1) * @PageSize;
	SET @lastRec = (@PageNumber * @PageSize + 1);
	SET NOCOUNT ON;

	BEGIN TRY
		INSERT INTO @Results
		SELECT
			m.idfMaterial 
		FROM dbo.tlbMaterial m
		WHERE m.intRowStatus = 0
			AND m.idfMonitoringSession IS NOT NULL 
			AND (m.idfMonitoringSession = @MonitoringSessionID OR @MonitoringSessionID IS NULL)
			AND (
				(
					m.idfParentMaterial = @ParentSampleID
					AND m.idfsSampleKind IS NOT NULL --Get any samples aliquoted or derived once.
					)
				OR (@ParentSampleID IS NULL)
				)
			AND (
				(
					m.idfRootMaterial = @RootSampleID
					AND m.idfsSampleKind IS NOT NULL
					AND m.idfParentMaterial IS NOT NULL
					) --Get any aliquots or derivatives for the root sample.
				OR (@RootSampleID IS NULL)
				);

		SET @TotalRowCount =
        (
            SELECT COUNT(SampleID) FROM @Results
        );


		SELECT SampleID
			,SampleTypeID
			,SampleTypeName
			,RootSampleID
			,OriginalSampleID
			,HumanID
			,SpeciesID
			,SpeciesTypeID
			,SpeciesTypeName
			,AnimalID
			,EIDSSAnimalID
			,AnimalGenderTypeID
			,AnimalGenderTypeName
			,AnimalAgeTypeID
			,AnimalAgeTypeName
			,AnimalColor
			,AnimalName
			,MonitoringSessionID
			,CollectedByPersonID
			,CollectedByPersonName
			,CollectedByOrganizationID
			,CollectedByOrganizationName
			,MainTestID
			,CollectionDate
			,SentDate
			,EIDSSLocalOrFieldSampleID
			,EIDSSReportSessionID
			,PatientFarmOwnerName
			,VectorSessionID
			,VectorID
			,FreezerID
			,SampleStatusTypeID
			,SampleStatusTypeName
			,FunctionalAreaID
			,FunctionalAreaName
			,DestroyedByPersonID
			,EnteredDate
			,DestructionDate
			,EIDSSLaboratorySampleID
			,Comments
			,SiteID
			,SentToOrganizationID
			,SentToOrganizationName
			,ReadOnlyIndicator
			,BirdStatusTypeID
			,BirdStatusTypeName
			,HumanDiseaseReportID
			,VeterinaryDiseaseReportID
			,AccessionDate
			,AccessionConditionTypeID
			,AccessionConditionTypeName
			,AccessionComment
			,AccessionByPersonID
			,DestructionMethodTypeID
			,CurrentSiteID
			,SampleKindTypeID
			,SampleKindTypeName
			,AccessionedIndicator
			,ShowInReportSessionListIndicator
			,ShowInLaboratoryListIndicator
			,ShowInDispositionListIndicator
			,ShowInAccessionListIndicator
			,MarkedForDispositionByPersonID
			,OutOfRepositoryDate
			,SampleStatusDate
			,DiseaseID
			,DiseaseNames
			,TestsCount
			,FarmID
			,FarmMasterID
			,EIDSSFarmID
			,Species
			,EIDSSLaboratoryOrLocalFieldSampleID
			,LabModuleSourceIndicator
			,TotalAnimalsSampled
			,TotalSamples
			,RowStatus 
			,RowAction
			,TotalRowCount
			,CurrentPage
			,TotalPages
		FROM (
			SELECT ROW_NUMBER() OVER (
					ORDER BY CASE 
							WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
								AND @SortOrder = 'ASC'
								THEN m.strFieldBarcode
							END ASC
						,CASE 
							WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
								AND @SortOrder = 'DESC'
								THEN m.strFieldBarcode
							END DESC
						,CASE 
							WHEN @SortColumn = 'SampleTypeName'
								AND @SortOrder = 'ASC'
								THEN sampleType.name
							END ASC
						,CASE 
							WHEN @SortColumn = 'SampleTypeName'
								AND @SortOrder = 'DESC'
								THEN sampleType.name
							END DESC
					) AS RowNum
			,m.idfMaterial AS SampleID
			,m.idfsSampleType AS SampleTypeID
			,sampleType.name AS SampleTypeName
			,m.idfRootMaterial AS RootSampleID
			,m.idfParentMaterial AS OriginalSampleID
			,m.idfHuman AS HumanID
			,m.idfSpecies AS SpeciesID
			,speciesType.idfsReference AS SpeciesTypeID
			,speciesType.name AS SpeciesTypeName
			,m.idfAnimal AS AnimalID
			,a.strAnimalCode AS EIDSSAnimalID
			,a.idfsAnimalGender AS AnimalGenderTypeID
			,animalSexType.name AS AnimalGenderTypeName
			,a.idfsAnimalAge AS AnimalAgeTypeID
			,animalAgeType.name AS AnimalAgeTypeName
			,a.strColor AS AnimalColor
			,a.strName AS AnimalName
			,m.idfMonitoringSession AS MonitoringSessionID
			,m.idfFieldCollectedByPerson AS CollectedByPersonID
			,ISNULL(collectedByPerson.strFamilyName, N'') + ISNULL(', ' + collectedByPerson.strFirstName, '') + ISNULL(' ' + collectedByPerson.strSecondName, '') AS CollectedByPersonName
			,m.idfFieldCollectedByOffice AS CollectedByOrganizationID
			,collectedByOrganization.name AS CollectedByOrganizationName
			,m.idfMainTest AS MainTestID
			,m.datFieldCollectionDate AS CollectionDate
			,m.datFieldSentDate AS SentDate
			,m.strFieldBarcode AS EIDSSLocalOrFieldSampleID
			,m.strCalculatedCaseID AS EIDSSReportSessionID
			,m.strCalculatedHumanName AS PatientFarmOwnerName
			,m.idfVectorSurveillanceSession AS VectorSessionID
			,m.idfVector AS VectorID
			,m.idfSubdivision AS FreezerID
			,m.idfsSampleStatus AS SampleStatusTypeID
			,sampleStatusType.name AS SampleStatusTypeName
			,m.idfInDepartment AS FunctionalAreaID
			,functionalArea.name AS FunctionalAreaName
			,m.idfDestroyedByPerson AS DestroyedByPersonID
			,m.datEnteringDate AS EnteredDate
			,m.datDestructionDate AS DestructionDate
			,m.strBarcode AS EIDSSLaboratorySampleID
			,m.strNote AS Comments
			,m.idfsSite AS SiteID
			,m.idfSendToOffice AS SentToOrganizationID
			,sentToOrganization.name AS SentToOrganizationName
			,m.blnReadOnly AS ReadOnlyIndicator
			,m.idfsBirdStatus AS BirdStatusTypeID
			,birdStatusType.name AS BirdStatusTypeName
			,m.idfHumanCase AS HumanDiseaseReportID
			,m.idfVetCase AS VeterinaryDiseaseReportID
			,m.datAccession AS AccessionDate
			,m.idfsAccessionCondition AS AccessionConditionTypeID
			,accessionConditionType.name AS AccessionConditionTypeName
			,m.strCondition AS AccessionComment
			,m.idfAccesionByPerson AS AccessionByPersonID
			,m.idfsDestructionMethod AS DestructionMethodTypeID
			,m.idfsCurrentSite AS CurrentSiteID
			,m.idfsSampleKind AS SampleKindTypeID
			,sampleKindType.name AS SampleKindTypeName
			,m.blnAccessioned AS AccessionedIndicator
			,m.blnShowInCaseOrSession AS ShowInReportSessionListIndicator
			,m.blnShowInLabList AS ShowInLaboratoryListIndicator
			,m.blnShowInDispositionList AS ShowInDispositionListIndicator
			,m.blnShowInAccessionInForm AS ShowInAccessionListIndicator
			,m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID
			,m.datOutOfRepositoryDate AS OutOfRepositoryDate
			,m.datSampleStatusDate AS SampleStatusDate
			,m.DiseaseID
			,diseases AS DiseaseNames
			,CASE WHEN (SELECT Count(*) FROM dbo.tlbTesting t WHERE t.idfMaterial = m.idfMaterial) = 0 THEN 0 ELSE 1 END AS TestsCount
			,f.idfFarm AS FarmID
			,f.idfFarmActual AS FarmMasterID
			,f.strFarmCode AS EIDSSFarmID
			,(
				CASE 
					WHEN ms.idfsMonitoringSessionSpeciesType = 10538001
						THEN 'Herd ' + hd.strHerdCode + ' - ' + speciesType.name
					ELSE 'Flock ' + hd.strHerdCode + ' - ' + speciesType.name
					END
				) AS Species
			,CASE 
				WHEN m.strBarcode IS NULL
					THEN m.strFieldBarcode
				ELSE m.strBarcode
				END AS EIDSSLaboratoryOrLocalFieldSampleID
			,m.LabModuleSourceIndicator
			,COUNT(*) OVER() AS TotalSamples
			,(select COUNT(DISTINCT a.strAnimalCode)
				from tlbMaterial m
				left join tlbAnimal a
				on a.idfAnimal = m.idfAnimal
				where m.idfMonitoringSession = @MonitoringSessionID) AS TotalAnimalsSampled 
			,m.intRowStatus AS RowStatus
			,0 AS RowAction
			,@TotalRowCount AS TotalRowCount
			,CurrentPage = @PageNumber
			,TotalPages = (@TotalRowCount / @PageSize) + IIF(@TotalRowCount % @PageSize > 0, 1, 0)
		FROM @Results res
		INNER JOIN dbo.tlbMaterial m ON m.idfMaterial = res.SampleID 
		INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000087) sampleType ON sampleType.idfsReference = m.idfsSampleType
		INNER JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = m.idfMonitoringSession
			AND ms.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) collectedByOrganization ON collectedByOrganization.idfOffice = m.idfFieldCollectedByOffice
		LEFT JOIN dbo.tlbDepartment d ON d.idfDepartment = m.idfInDepartment
			AND d.intRowStatus = 0
		LEFT JOIN dbo.tlbOffice departmentOffice ON departmentOffice.idfOffice = d.idfOrganization
			AND departmentOffice.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000164) functionalArea ON functionalArea.idfsReference = d.idfsDepartmentName
		LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) sentToOrganization ON sentToOrganization.idfOffice = m.idfSendToOffice
		LEFT JOIN dbo.tlbPerson collectedByPerson ON collectedByPerson.idfPerson = m.idfFieldCollectedByPerson
			AND collectedByPerson.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000015) sampleStatusType ON sampleStatusType.idfsReference = m.idfsSampleStatus
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000006) birdStatusType ON birdStatusType.idfsReference = m.idfsBirdStatus
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000110) accessionConditionType ON accessionConditionType.idfsReference = m.idfsAccessionCondition
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000158) sampleKindType ON sampleKindType.idfsReference = m.idfsSampleKind
		LEFT JOIN dbo.tlbAnimal a ON a.idfAnimal = m.idfAnimal
			AND a.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000005) animalAgeType ON animalAgeType.idfsReference = a.idfsAnimalAge
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000007) animalSexType ON animalSexType.idfsReference = a.idfsAnimalGender
		CROSS APPLY (SELECT dbo.FN_VAS_SESSION_SAMPLE_DIAGNOSESNAMES_GET(ms.idfMonitoringSession, @LanguageID, m.idfMaterial) diseases) diseaseNames
		LEFT JOIN dbo.tlbSpecies s ON s.idfSpecies = CASE 
				WHEN m.idfAnimal IS NULL
					THEN m.idfSpecies
				ELSE a.idfSpecies
				END
			AND s.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000086) speciesType ON speciesType.idfsReference = s.idfsSpeciesType
		LEFT JOIN dbo.tlbHerd hd ON hd.idfHerd = s.idfHerd
			AND hd.intRowStatus = 0
		LEFT JOIN dbo.tlbFarm f ON f.idfFarm = hd.idfFarm
			AND f.intRowStatus = 0
		GROUP BY m.idfMaterial
			,m.idfsSampleType
			,sampleType.name
			,m.idfRootMaterial
			,m.idfParentMaterial
			,m.idfHuman
			,m.idfSpecies
			,speciesType.idfsReference
			,speciesType.name
			,m.idfAnimal
			,a.strAnimalCode
			,a.idfsAnimalGender
			,animalSexType.name
			,a.idfsAnimalAge
			,animalAgeType.name
			,a.strColor
			,a.strName
			,m.idfMonitoringSession
			,m.idfFieldCollectedByPerson
			,collectedByPerson.strFamilyName
			,collectedByPerson.strFirstName
			,collectedByPerson.strSecondName
			,m.idfFieldCollectedByOffice
			,collectedByOrganization.name
			,m.idfMainTest
			,m.datFieldCollectionDate
			,m.datFieldSentDate
			,m.strFieldBarcode
			,m.strCalculatedCaseID
			,m.strCalculatedHumanName
			,m.idfVectorSurveillanceSession
			,m.idfVector
			,m.idfSubdivision
			,m.idfsSampleStatus
			,sampleStatusType.name
			,m.idfInDepartment
			,functionalArea.name 
			,m.idfDestroyedByPerson
			,m.datEnteringDate
			,m.datDestructionDate
			,m.strBarcode
			,m.strNote
			,m.idfsSite
			,m.intRowStatus
			,m.idfSendToOffice
			,sentToOrganization.name
			,m.blnReadOnly
			,m.idfsBirdStatus
			,birdStatusType.name
			,m.idfHumanCase
			,m.idfVetCase
			,m.datAccession
			,m.idfsAccessionCondition
			,accessionConditionType.name
			,m.strCondition
			,m.idfAccesionByPerson
			,m.idfsDestructionMethod
			,m.idfsCurrentSite
			,m.idfsSampleKind
			,sampleKindType.name 
			,m.blnAccessioned 
			,m.blnShowInCaseOrSession 
			,m.blnShowInLabList 
			,m.blnShowInDispositionList 
			,m.blnShowInAccessionInForm 
			,m.idfMarkedForDispositionByPerson 
			,m.datOutOfRepositoryDate 
			,m.datSampleStatusDate 
			,m.DiseaseID
			,diseases
			,hd.strHerdCode
			,f.idfFarm 
			,f.idfFarmActual 
			,f.strFarmCode
			,ms.idfsMonitoringSessionSpeciesType
			,m.LabModuleSourceIndicator
		) AS x
		WHERE RowNum > @firstRec
			AND RowNum < @lastRec
		ORDER BY RowNum;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USSP_LAB_SAMPLE_SET]...';


GO
-- ================================================================================================
-- Name: USSP_LAB_SAMPLE_SET
--
-- Description:	Inserts or updates sample records for various laboratory module use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     11/08/2018 Initial release.
-- Stephen Long		01/24/2019 Added storage box place to support the location in the freezer 
--                             subdivision.  Changed freezer ID to freezer subdivision ID.
-- Stephen Long     01/30/2019 Added disease ID parameter and to insert/update statements.
-- Stephen Long     02/21/2019 Added root sample ID and sample kind type ID.
-- Stephen Long     03/08/2019 Added row action 'D' for aliquot/derivative, so new lab sample ID 
--                             is not created, rather a number or country decides on a customized 
--                             method.
-- Stephen Long     03/28/2019 Added parameter @EIDSSLaboratorySampleID for aliquots/derivatives. 
--                             These are assigned in the EIDSS application from the derived off of
--                             the original (parent) sample ID.
-- Stephen Long     04/16/2019 Added copy of human master to human for new sample records.
-- Stephen Long     07/09/2019 Added human master ID parameter.  Updated human copy call.
-- Stephen Long     08/29/2019 Corrected root sample ID on insert portion.
-- Stephen Long     11/05/2019 Set root sample ID to sample ID when aliquot/derivative action.
-- Stephen Long     03/11/2020 Changed entered date to use GETDATE on insert.
-- Stephen Long     03/17/2020 Added logic to process transferred out sample's status.
-- Stephen Long     03/18/2020 Added logic to mark transfer final when sample accessioned in or 
--                             rejected at the receiving laboratory.
-- Stephen Long     03/30/2020 Added set of audit update time and user on record inserts/updates.
--                             Removed setting of root sample ID to sample ID of parent when 
--                             aliquot/derivative row action.  Root sample ID set to parent sample 
--                             ID in the application.
-- Stephen Long     04/17/2020 Renamed original sample ID to parent sample ID to be inline with the
--                             business terminology. Root is more along the line of original.  Also
--                             changed not to set the parent sample ID unless it is an aliquot/
--                             derivative which is handled in the app.
-- Stephen Long     05/05/2020 Removed update of transfer sample out record.  Handled in the 
--                             application.
-- Stephen Long     07/06/2020 Add set of lab module source indicator.
-- Stephen Long     09/03/2020 Removal of laboratory sample ID next number get call for 
--                             samples being accessioned and saved.  The laboratory sample ID get
--                             call has been moved to occur prior to save.
-- Stephen Long     09/24/2021 Removed language ID parameter as it is not needed.
-- Stephen Long     01/07/2022 Removed copy human actual to human; moved to parent stored 
--                             procedure.
-- Stephen Long     01/31/2022 Added source system name and key value update on insert.
-- Stephen Long     05/23/2022 Commented out update of disease ID; should never happen in the lab 
--                             module.
-- Stephen Long     10/01/2022 Changed to set EIDSS lab sample ID on a rejected sample.  Business 
--                             requirement retained from 6.1.
-- Stephen Long     01/03/2023 Added update to specimen collected field on human disease report 
--                             when a sample is added.
-- Stephen Long     02/07/2023 Fix to not populate strBarcode when sample is rejected.
-- Stephen Long     02/20/2023 Added data audit logic for SAUC30 and 31.
-- Stephen Long     03/28/2023 Fixed test completed and unassigned indicator.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_LAB_SAMPLE_SET]
(
    @SampleID BIGINT OUTPUT,
    @SampleTypeID BIGINT,
    @RootSampleID BIGINT = NULL,
    @ParentSampleID BIGINT = NULL,
    @HumanMasterID BIGINT = NULL,
    @HumanID BIGINT = NULL,
    @FarmMasterID BIGINT = NULL,
    @FarmID BIGINT = NULL,
    @SpeciesID BIGINT = NULL,
    @AnimalID BIGINT = NULL,
    @VectorID BIGINT = NULL,
    @VectorTypeID BIGINT = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @EIDSSVectorID NVARCHAR(50) = NULL,
    @MonitoringSessionID BIGINT = NULL,
    @VectorSessionID BIGINT = NULL,
    @HumanDiseaseReportID BIGINT = NULL,
    @VeterinaryDiseaseReportID BIGINT = NULL,
    @CollectionDate DATETIME = NULL,
    @CollectedByPersonID BIGINT = NULL,
    @CollectedByOrganizationID BIGINT = NULL,
    @SentDate DATETIME = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SiteID BIGINT,
    @FunctionalAreaID BIGINT = NULL,
    @FreezerSubdivisionID BIGINT = NULL,
    @StorageBoxPlace NVARCHAR(200) = NULL,
    @EnteredDate DATETIME = NULL,
    @OutOfRepositoryDate DATETIME = NULL,
    @MarkedForDispositionByPersonID BIGINT = NULL,
    @DestructionDate DATETIME = NULL,
    @DestructionMethodTypeID BIGINT = NULL,
    @DestroyedByPersonID BIGINT = NULL,
    @ReadOnlyIndicator BIT,
    @AccessionDate DATETIME = NULL,
    @AccessionConditionTypeID BIGINT = NULL,
    @AccessionByPersonID BIGINT = NULL,
    @SampleStatusTypeID BIGINT = NULL,
    @PreviousSampleStatusTypeID BIGINT = NULL,
    @AccessionComment NVARCHAR(200) = NULL,
    @Note NVARCHAR(500) = NULL,
    @CurrentSiteID BIGINT = NULL,
    @SampleKindTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @RowStatus INT,
    @RowAction INT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
                @MonitoringSessionToMaterialID BIGINT = NULL,
                                                                       -- Data audit
                @AuditUserID BIGINT = NULL,
                @AuditSiteID BIGINT = NULL,
                @DataAuditEventID BIGINT = NULL,
                @DataAuditEventTypeID BIGINT = NULL,
                @ObjectTypeID BIGINT = NULL,
                @ObjectID BIGINT = NULL,
                @ObjectTableSampleID BIGINT = 75620000000,             -- tlbMaterial
                @ObjectTableVectorID BIGINT = 4575310000000,           -- tlbVector
                @ObjectTableTransferOutID BIGINT = 75770000000,        -- tlbTransferOUT, 
                @ObjectTableHumanDiseaseReportID BIGINT = 75610000000, -- tlbHumanCase,
                @ObjectTableHumanID BIGINT = 75600000000,              -- tlbHuman
                @ObjectTableFarmID BIGINT = 75550000000,               -- tlbFarm
                @EIDSSObjectID NVARCHAR(200);
        -- End data audit

        DECLARE @SampleBeforeEdit TABLE
        (
            SampleID BIGINT,
            SampleTypeID BIGINT,
            RootSampleID BIGINT,
            ParentSampleID BIGINT,
            HumanID BIGINT,
            SpeciesID BIGINT,
            AnimalID BIGINT,
            MonitoringSessionID BIGINT,
            FieldCollectedByPersonID BIGINT,
            FieldCollectedByOfficeID BIGINT,
            MainTestID BIGINT,
            FieldCollectionDate DATETIME,
            FieldSentDate DATETIME,
            FieldBarcodeID NVARCHAR(200),
            CalculatedCaseID NVARCHAR(200),
            CalculatedHumanName NVARCHAR(700),
            VectorSurveillanceSessionID BIGINT,
            VectorID BIGINT,
            SubdivisionID BIGINT,
            SampleStatusTypeID BIGINT,
            DepartmentID BIGINT,
            DestroyedByPersonID BIGINT,
            EnteringDate DATETIME,
            DestructionDate DATETIME,
            BarcodeID NVARCHAR(200),
            Note NVARCHAR(500),
            SendToOfficeID BIGINT,
            ReadOnlyIndicator BIT,
            BirdStatusTypeID BIGINT,
            HumanDiseaseReportID BIGINT,
            VeterinaryDiseaseReportID BIGINT,
            AccessionDate DATETIME,
            AccessionConditionTypeID BIGINT,
            Condition NVARCHAR(200),
            AccessionByPersonID BIGINT,
            DestructionMethodTypeID BIGINT,
            CurrentSiteID BIGINT,
            SampleKindTypeID BIGINT,
            AccessionIndicator INT,
            ShowInCaseOrSessionIndicator INT,
            ShowInLabListIndicator INT,
            ShowInDispositionListIndicator INT,
            ShowInAccessionInFormIndicator INT,
            MarkedForDispositionByPersonID BIGINT,
            OutOfRepositoryDate DATETIME,
            SampleStatusDate DATETIME,
            RowStatus INT,
            StorageBoxPlace NVARCHAR(200),
            PreviousSampleStatusTypeID BIGINT,
            DiseaseID BIGINT,
            LabModuleSourceIndicator BIT,
            TestUnassignedIndicator BIT,
            TestCompletedIndicator BIT,
            TransferIndicator BIT
        );
        DECLARE @SampleAfterEdit TABLE
        (
            SampleID BIGINT,
            SampleTypeID BIGINT,
            RootSampleID BIGINT,
            ParentSampleID BIGINT,
            HumanID BIGINT,
            SpeciesID BIGINT,
            AnimalID BIGINT,
            MonitoringSessionID BIGINT,
            FieldCollectedByPersonID BIGINT,
            FieldCollectedByOfficeID BIGINT,
            MainTestID BIGINT,
            FieldCollectionDate DATETIME,
            FieldSentDate DATETIME,
            FieldBarcodeID NVARCHAR(200),
            CalculatedCaseID NVARCHAR(200),
            CalculatedHumanName NVARCHAR(700),
            VectorSurveillanceSessionID BIGINT,
            VectorID BIGINT,
            SubdivisionID BIGINT,
            SampleStatusTypeID BIGINT,
            DepartmentID BIGINT,
            DestroyedByPersonID BIGINT,
            EnteringDate DATETIME,
            DestructionDate DATETIME,
            BarcodeID NVARCHAR(200),
            Note NVARCHAR(500),
            SendToOfficeID BIGINT,
            ReadOnlyIndicator BIT,
            BirdStatusTypeID BIGINT,
            HumanDiseaseReportID BIGINT,
            VeterinaryDiseaseReportID BIGINT,
            AccessionDate DATETIME,
            AccessionConditionTypeID BIGINT,
            Condition NVARCHAR(200),
            AccessionByPersonID BIGINT,
            DestructionMethodTypeID BIGINT,
            CurrentSiteID BIGINT,
            SampleKindTypeID BIGINT,
            AccessionIndicator INT,
            ShowInCaseOrSessionIndicator INT,
            ShowInLabListIndicator INT,
            ShowInDispositionListIndicator INT,
            ShowInAccessionInFormIndicator INT,
            MarkedForDispositionByPersonID BIGINT,
            OutOfRepositoryDate DATETIME,
            SampleStatusDate DATETIME,
            RowStatus INT,
            StorageBoxPlace NVARCHAR(200),
            PreviousSampleStatusTypeID BIGINT,
            DiseaseID BIGINT,
            LabModuleSourceIndicator BIT,
            TestUnassignedIndicator BIT,
            TestCompletedIndicator BIT,
            TransferIndicator BIT
        );
        DECLARE @TransferBeforeEdit TABLE
        (
            TransferID BIGINT,
            TransferStatusTypeID BIGINT
        );
        DECLARE @TransferAfterEdit TABLE
        (
            TransferID BIGINT,
            TransferStatusTypeID BIGINT
        );
        DECLARE @HumanDiseaseReportBeforeEdit TABLE
        (
            HumanDiseaseReportID BIGINT,
            SpecimenCollectedTypeID BIGINT NULL
        );
        DECLARE @HumanDiseaseReportAfterEdit TABLE
        (
            HumanDiseaseReportID BIGINT,
            SpecimenCollectedTypeID BIGINT NULL
        );
        DECLARE @FarmBeforeEdit TABLE
        (
            FarmID BIGINT,
            MonitoringSessionID BIGINT NULL
        );
        DECLARE @FarmAfterEdit TABLE
        (
            FarmID BIGINT,
            MonitoringSessionID BIGINT NULL
        );
        DECLARE @HumanBeforeEdit TABLE
        (
            HumanID BIGINT,
            MonitoringSessionID BIGINT NULL
        );
        DECLARE @HumanAfterEdit TABLE
        (
            HumanID BIGINT,
            MonitoringSessionID BIGINT NULL
        );

        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        -- Data audit
        IF @RowAction = 1 -- Standard insert
           OR @RowAction = 5 -- Insert and accession (LUC01)
           OR @RowAction = 6 -- Create aliquot/derivative and accession (LUC02)
           OR @RowAction = 7 -- Create transfer in sample and do not accession (LUC03)
        BEGIN
            SET @DataAuditEventTypeID = 10016001; -- Data audit create event type

            --Local/field sample EIDSS ID. Only system assign when user leaves blank.
            IF @RowAction = 1
            BEGIN
                IF @EIDSSLocalOrFieldSampleID IS NULL
                   OR @EIDSSLocalOrFieldSampleID = ''
                BEGIN
                    EXECUTE dbo.USP_GBL_NextNumber_GET @ObjectName = N'Sample Field Barcode',
                                                       @NextNumberValue = @EIDSSLocalOrFieldSampleID OUTPUT,
                                                       @InstallationSite = NULL;
                END
            END

            IF @RowAction = 5
            BEGIN
                SET @ObjectTypeID = 10017001; -- Accession In
            END

            IF @RowAction = 6
            BEGIN
                IF @SampleKindTypeID = 12675410000000 -- Aliquot
                BEGIN
                    SET @ObjectTypeID = 10017008; -- Aliquot
                END
                ELSE
                BEGIN
                    SET @ObjectTypeID = 10017017; -- Derivative
                END
            END

            IF @RowAction = 7
            BEGIN
                SET @ObjectTypeID = 10017056; -- Sample Transfer
            END

            EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = N'tlbMaterial',
                                              @idfsKey = @SampleID OUTPUT;

            IF @EIDSSLaboratorySampleID IS NULL
            BEGIN
                SET @EIDSSObjectID = @EIDSSLocalOrFieldSampleID;
            END
            ELSE
            BEGIN
                SET @EIDSSObjectID = @EIDSSLaboratorySampleID;
            END

            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      @DataAuditEventTypeID,
                                                      @ObjectTypeID,
                                                      @SampleID,
                                                      @ObjectTableSampleID,
                                                      @EIDSSObjectID,
                                                      @DataAuditEventID OUTPUT;
        END
        -- End data audit

        IF @RowAction = 1
           OR @RowAction = 5
        BEGIN
            IF @FarmMasterID IS NOT NULL -- Registering new veterinary sample with either no disease report or possibly no monitoring session.
            BEGIN
                IF @FarmID IS NULL
                BEGIN
                    DECLARE @NewFarmOwnerID BIGINT,
                            @FlockOrHerdID BIGINT;

                    EXECUTE dbo.USSP_VET_COPY_FARM_SET @AuditUserName,
                                                       @DataAuditEventID,
                                                       @EIDSSLaboratorySampleID,
                                                       @FarmMasterID,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       @HumanMasterID,
                                                       @FarmID OUTPUT,
                                                       @NewFarmOwnerID OUTPUT;

                    IF @MonitoringSessionID IS NOT NULL -- New farm added to the veterinary active surveillance session.
                    BEGIN
                        INSERT INTO @FarmBeforeEdit
                        SELECT idfFarm,
                               idfMonitoringSession
                        FROM dbo.tlbFarm
                        WHERE idfFarm = @FarmID;

                        UPDATE dbo.tlbFarm
                        SET idfMonitoringSession = @MonitoringSessionID
                        WHERE idfFarm = @FarmID;

                        INSERT INTO @FarmAfterEdit
                        SELECT idfFarm,
                               idfMonitoringSession
                        FROM dbo.tlbFarm
                        WHERE idfFarm = @FarmID;

                        INSERT INTO dbo.tauDataAuditDetailUpdate
                        (
                            idfDataAuditEvent,
                            idfObjectTable,
                            idfColumn,
                            idfObject,
                            idfObjectDetail,
                            strOldValue,
                            strNewValue,
                            AuditCreateUser,
                            strObject
                        )
                        SELECT @DataAuditEventID,
                               @ObjectTableFarmID,
                               4572180000000,
                               a.FarmID,
                               NULL,
                               b.MonitoringSessionID,
                               a.MonitoringSessionID,
                               @AuditUserName,
                               @EIDSSObjectID
                        FROM @FarmAfterEdit a
                            FULL JOIN @FarmBeforeEdit b
                                ON a.FarmID = b.FarmID
                        WHERE (a.MonitoringSessionID <> b.MonitoringSessionID)
                              OR (
                                     a.MonitoringSessionID IS NOT NULL
                                     AND b.MonitoringSessionID IS NULL
                                 )
                              OR (
                                     a.MonitoringSessionID IS NULL
                                     AND b.MonitoringSessionID IS NOT NULL
                                 );
                    END

                    SET @HumanID = @NewFarmOwnerID;
                    SET @HumanMasterID = NULL;
                END

                IF @SpeciesID IS NULL -- Adding new flock or herd and species to an existing farm.
                BEGIN
                    EXECUTE dbo.USSP_VET_FLOCK_HERD_SET @AuditUserName,
                                                        @DataAuditEventID,
                                                        @EIDSSLaboratorySampleID,
                                                        @FlockOrHerdID OUTPUT,
                                                        NULL,
                                                        @FarmID,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        0,
                                                        1;

                    EXECUTE dbo.USSP_VET_SPECIES_SET @AuditUserName,
                                                     @DataAuditEventID,
                                                     @SpeciesID OUTPUT,
                                                     NULL,
                                                     @SpeciesTypeID,
                                                     @FlockOrHerdID,
                                                     NULL,
                                                     NULL,
                                                     NULL,
                                                     NULL,
                                                     NULL,
                                                     NULL,
                                                     NULL,
                                                     0,
                                                     1,
                                                     NULL;
                END
            END
            ELSE
            BEGIN
                IF @HumanMasterID IS NOT NULL -- Registering new human sample with either no disease report or possibly no active surveillance session.
                BEGIN
                    EXECUTE dbo.USSP_HUM_COPY_HUMAN_SET @HumanMasterID,
                                                        @DataAuditEventID,
                                                        @AuditUserName,
                                                        @HumanID OUTPUT,
                                                        @ReturnCode OUTPUT,
                                                        @ReturnMessage OUTPUT;

                    IF @MonitoringSessionID IS NOT NULL -- New person added to the human active surveillance session.
                    BEGIN
                        INSERT INTO @HumanBeforeEdit
                        SELECT idfHuman,
                               idfMonitoringSession
                        FROM dbo.tlbHuman
                        WHERE idfHuman = @HumanID;

                        UPDATE dbo.tlbHuman
                        SET idfMonitoringSession = @MonitoringSessionID
                        WHERE idfHuman = @HumanID;

                        INSERT INTO @HumanAfterEdit
                        SELECT idfHuman,
                               idfMonitoringSession
                        FROM dbo.tlbHuman
                        WHERE idfHuman = @HumanID;

                        INSERT INTO dbo.tauDataAuditDetailUpdate
                        (
                            idfDataAuditEvent,
                            idfObjectTable,
                            idfColumn,
                            idfObject,
                            idfObjectDetail,
                            strOldValue,
                            strNewValue,
                            AuditCreateUser,
                            strObject
                        )
                        SELECT @DataAuditEventID,
                               @ObjectTableHumanID,
                               51586990000027,
                               a.HumanID,
                               NULL,
                               b.MonitoringSessionID,
                               a.MonitoringSessionID,
                               @AuditUserName,
                               @EIDSSObjectID
                        FROM @HumanAfterEdit a
                            FULL JOIN @HumanBeforeEdit b
                                ON a.HumanID = b.HumanID
                        WHERE (a.MonitoringSessionID <> b.MonitoringSessionID)
                              OR (
                                     a.MonitoringSessionID IS NOT NULL
                                     AND b.MonitoringSessionID IS NULL
                                 )
                              OR (
                                     a.MonitoringSessionID IS NULL
                                     AND b.MonitoringSessionID IS NOT NULL
                                 );
                    END
                END
            END
        END;

        IF @VectorID < 0
           AND @SpeciesTypeID IS NOT NULL
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbVector', @VectorID OUTPUT;

            EXECUTE dbo.USP_GBL_NextNumber_GET 'Vector Surveillance Vector',
                                               @EIDSSVectorID OUTPUT,
                                               NULL;

            INSERT INTO dbo.tlbVector
            (
                idfVector,
                strVectorID,
                idfCollectedByOffice,
                idfCollectedByPerson,
                datCollectionDateTime,
                idfsVectorType,
                idfsVectorSubType,
                intQuantity,
                intRowStatus,
                AuditCreateDTM,
                AuditCreateUser
            )
            VALUES
            (@VectorID,
             @EIDSSVectorID,
             @CollectedByOrganizationID,
             @CollectedByPersonID,
             @CollectionDate,
             @VectorTypeID,
             @SpeciesTypeID,
             1  ,
             0  ,
             GETDATE(),
             @AuditUserName
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableVectorID,
             @VectorID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableVectorID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @EIDSSVectorID
            );
        -- End data audit
        END;

        IF @RowAction = 1 -- Standard insert
           OR @RowAction = 5 -- Insert and accession (LUC01)
           OR @RowAction = 6 -- Create aliquot/derivative and accession (LUC02)
           OR @RowAction = 7 -- Create transfer in sample and do not accession (LUC03)
        BEGIN
            IF @RowAction <> 6
               AND @RowAction <> 7
            BEGIN
                SET @RootSampleID = @SampleID;
            END

            INSERT INTO dbo.tlbMaterial
            (
                idfMaterial,
                idfsSampleType,
                idfRootMaterial,
                idfParentMaterial,
                idfHuman,
                idfSpecies,
                idfAnimal,
                idfVector,
                idfMonitoringSession,
                idfVectorSurveillanceSession,
                idfHumanCase,
                idfVetCase,
                datFieldCollectionDate,
                idfFieldCollectedByPerson,
                idfFieldCollectedByOffice,
                datFieldSentDate,
                idfSendToOffice,
                strFieldBarcode,
                strBarcode,
                idfsSite,
                idfInDepartment,
                idfSubdivision,
                StorageBoxPlace,
                datEnteringDate,
                datOutOfRepositoryDate,
                idfMarkedForDispositionByPerson,
                datDestructionDate,
                idfsDestructionMethod,
                idfDestroyedByPerson,
                blnReadOnly,
                datAccession,
                idfsAccessionCondition,
                idfAccesionByPerson,
                idfsSampleStatus,
                strCondition,
                strNote,
                idfsCurrentSite,
                idfsSampleKind,
                PreviousSampleStatusID,
                DiseaseID,
                LabModuleSourceIndicator,
                intRowStatus,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                TestCompletedIndicator, 
                TestUnassignedIndicator
            )
            VALUES
            (@SampleID,
             @SampleTypeID,
             @RootSampleID,
             @ParentSampleID,
             @HumanID,
             @SpeciesID,
             @AnimalID,
             @VectorID,
             @MonitoringSessionID,
             @VectorSessionID,
             @HumanDiseaseReportID,
             @VeterinaryDiseaseReportID,
             @CollectionDate,
             @CollectedByPersonID,
             @CollectedByOrganizationID,
             @SentDate,
             @SentToOrganizationID,
             @EIDSSLocalOrFieldSampleID,
             @EIDSSLaboratorySampleID,
             @SiteID,
             @FunctionalAreaID,
             @FreezerSubdivisionID,
             @StorageBoxPlace,
             GETDATE(),
             @OutOfRepositoryDate,
             @MarkedForDispositionByPersonID,
             @DestructionDate,
             @DestructionMethodTypeID,
             @DestroyedByPersonID,
             @ReadOnlyIndicator,
             @AccessionDate,
             @AccessionConditionTypeID,
             @AccessionByPersonID,
             @SampleStatusTypeID,
             @AccessionComment,
             @Note,
             @CurrentSiteID,
             @SampleKindTypeID,
             @PreviousSampleStatusTypeID,
             @DiseaseID,
             1  ,
             0  ,
             10519001,
             '[{"idfMaterial":' + CAST(@SampleID AS NVARCHAR(300)) + '}]',
             @AuditUserName, 
             0, 
             1
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableSampleID,
             @SampleID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableSampleID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @EIDSSLaboratorySampleID
            );
            -- End data audit

            IF @HumanDiseaseReportID IS NOT NULL
            BEGIN
                INSERT INTO @HumanDiseaseReportBeforeEdit
                SELECT idfHumanCase,
                       idfsYNSpecimenCollected
                FROM dbo.tlbHumanCase
                WHERE idfHumanCase = @HumanDiseaseReportID;

                UPDATE dbo.tlbHumanCase
                SET idfsYNSpecimenCollected = 10100001,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfHumanCase = @HumanDiseaseReportID;

                INSERT INTO @HumanDiseaseReportAfterEdit
                SELECT idfHumanCase,
                       idfsYNSpecimenCollected
                FROM dbo.tlbHumanCase
                WHERE idfHumanCase = @HumanDiseaseReportID;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableHumanDiseaseReportID,
                       79760000000,
                       a.HumanDiseaseReportID,
                       NULL,
                       b.SpecimenCollectedTypeID,
                       a.SpecimenCollectedTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @HumanDiseaseReportAfterEdit a
                    FULL JOIN @HumanDiseaseReportBeforeEdit b
                        ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
                WHERE (a.SpecimenCollectedTypeID <> b.SpecimenCollectedTypeID)
                      OR (
                             a.SpecimenCollectedTypeID IS NOT NULL
                             AND b.SpecimenCollectedTypeID IS NULL
                         )
                      OR (
                             a.SpecimenCollectedTypeID IS NULL
                             AND b.SpecimenCollectedTypeID IS NOT NULL
                         );
            END

            IF (
                   @RowAction = 1 -- Register new sample
                   OR @RowAction = 5 -- Insert accession
               )
               AND @MonitoringSessionID IS NOT NULL
            BEGIN
                EXECUTE dbo.USSP_AS_SAMPLE_TO_DISEASE_SET @AuditUserName,
                                                          @DataAuditEventID,
                                                          0,
                                                          @MonitoringSessionID,
                                                          @SampleID,
                                                          @DiseaseID,
                                                          @SampleTypeID,
                                                          0,
                                                          1;
            END
            ELSE IF @RowAction = 7
                    AND @MonitoringSessionID IS NOT NULL -- Transfer a sample (creates a new sample record)
            BEGIN
                DECLARE @SamplesToDiseaseRowID BIGINT;
                DECLARE @SamplesToDiseasesTemp TABLE
                (
                    MonitoringSessionToMaterialID BIGINT NOT NULL,
                    MonitoringSessionID BIGINT NULL,
                    SampleID BIGINT NOT NULL,
                    SampleTypeID BIGINT NULL,
                    DiseaseID BIGINT NOT NULL
                );

                INSERT INTO @SamplesToDiseasesTemp
                SELECT idfMonitoringSessionToMaterial,
                       idfMonitoringSession,
                       idfMaterial,
                       idfsSampleType,
                       idfsDisease
                FROM dbo.tlbMonitoringSessionToMaterial
                WHERE idfMaterial = @RootSampleID
                      AND intRowStatus = 0;

                WHILE EXISTS (SELECT * FROM @SamplesToDiseasesTemp)
                BEGIN
                    SELECT TOP 1
                        @SamplesToDiseaseRowID = MonitoringSessionToMaterialID,
                        @MonitoringSessionToMaterialID = MonitoringSessionToMaterialID,
                        @DiseaseID = DiseaseID
                    FROM @SamplesToDiseasesTemp;

                    EXECUTE dbo.USSP_AS_SAMPLE_TO_DISEASE_SET @AuditUserName,
                                                              @DataAuditEventID,
                                                              @MonitoringSessionToMaterialID,
                                                              @MonitoringSessionID,
                                                              @SampleID,
                                                              @DiseaseID,
                                                              @SampleTypeID,
                                                              0,
                                                              1;

                    DELETE FROM @SamplesToDiseasesTemp
                    WHERE MonitoringSessionToMaterialID = @SamplesToDiseaseRowID;
                END;
            END
        END;
        ELSE
        BEGIN
            INSERT INTO @SampleBeforeEdit
            (
                SampleID,
                SampleTypeID,
                RootSampleID,
                ParentSampleID,
                HumanID,
                SpeciesID,
                AnimalID,
                MonitoringSessionID,
                FieldCollectedByPersonID,
                FieldCollectedByOfficeID,
                MainTestID,
                FieldCollectionDate,
                FieldSentDate,
                FieldBarcodeID,
                CalculatedCaseID,
                CalculatedHumanName,
                VectorSurveillanceSessionID,
                VectorID,
                SubdivisionID,
                SampleStatusTypeID,
                DepartmentID,
                DestroyedByPersonID,
                EnteringDate,
                DestructionDate,
                BarcodeID,
                Note,
                SendToOfficeID,
                ReadOnlyIndicator,
                BirdStatusTypeID,
                HumanDiseaseReportID,
                VeterinaryDiseaseReportID,
                AccessionDate,
                AccessionConditionTypeID,
                Condition,
                AccessionByPersonID,
                DestructionMethodTypeID,
                CurrentSiteID,
                SampleKindTypeID,
                AccessionIndicator,
                ShowInCaseOrSessionIndicator,
                ShowInLabListIndicator,
                ShowInDispositionListIndicator,
                ShowInAccessionInFormIndicator,
                MarkedForDispositionByPersonID,
                OutOfRepositoryDate,
                SampleStatusDate,
                RowStatus,
                StorageBoxPlace,
                PreviousSampleStatusTypeID,
                DiseaseID,
                LabModuleSourceIndicator,
                TestUnassignedIndicator,
                TestCompletedIndicator,
                TransferIndicator
            )
            SELECT idfMaterial,
                   idfsSampleType,
                   idfRootMaterial,
                   idfParentMaterial,
                   idfHuman,
                   idfSpecies,
                   idfAnimal,
                   idfMonitoringSession,
                   idfFieldCollectedByPerson,
                   idfFieldCollectedByOffice,
                   idfMainTest,
                   datFieldCollectionDate,
                   datFieldSentDate,
                   strFieldBarcode,
                   strCalculatedCaseID,
                   strCalculatedHumanName,
                   idfVectorSurveillanceSession,
                   idfVector,
                   idfSubdivision,
                   idfsSampleStatus,
                   idfInDepartment,
                   idfDestroyedByPerson,
                   datEnteringDate,
                   datDestructionDate,
                   strBarcode,
                   strNote,
                   idfSendToOffice,
                   blnReadOnly,
                   idfsBirdStatus,
                   idfHumanCase,
                   idfVetCase,
                   datAccession,
                   idfsAccessionCondition,
                   strCondition,
                   idfAccesionByPerson,
                   idfsDestructionMethod,
                   idfsCurrentSite,
                   idfsSampleKind,
                   blnAccessioned,
                   blnShowInCaseOrSession,
                   blnShowInLabList,
                   blnShowInDispositionList,
                   blnShowInAccessionInForm,
                   idfMarkedForDispositionByPerson,
                   datOutOfRepositoryDate,
                   datSampleStatusDate,
                   intRowStatus,
                   StorageBoxPlace,
                   PreviousSampleStatusID,
                   DiseaseID,
                   LabModuleSourceIndicator,
                   TestUnassignedIndicator,
                   TestCompletedIndicator,
                   TransferIndicator
            FROM dbo.tlbMaterial
            WHERE idfMaterial = @SampleID;

            IF @RowAction = 4 -- Update and accession (LUC01)
            BEGIN
                SET @ObjectTypeID = 10017001; -- Accession In
            END
            ELSE IF @RowAction = 8 -- Sample Transfer
                    OR @RowAction = 9
            BEGIN
                SET @ObjectTypeID = 10017056; -- Sample Transfer
            END
            ELSE IF @RowAction = 10 -- Sample Destruction
            BEGIN
                SET @ObjectTypeID = 10017060; -- Sample Destruction
            END
            ELSE
            BEGIN
                SET @ObjectTypeID = 10017045; -- Sample
            END

            -- Data audit
            SET @DataAuditEventTypeID = 10016003; -- Data audit edit event type

            IF @EIDSSLaboratorySampleID IS NULL
            BEGIN
                SET @EIDSSObjectID = @EIDSSLocalOrFieldSampleID;
            END
            ELSE
            BEGIN
                SET @EIDSSObjectID = @EIDSSLaboratorySampleID;
            END

            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      @DataAuditEventTypeID,
                                                      @ObjectTypeID,
                                                      @SampleID,
                                                      @ObjectTableSampleID,
                                                      @EIDSSObjectID,
                                                      @DataAuditEventID OUTPUT;
            -- End data audit

            -- Sample is being accessioned, so get the next lab sample code allowing the user the option to print the barcode.
            IF @RowAction = 4
               OR @RowAction = 8 -- Update and accession (LUC01)
            BEGIN
                -- Transferred in sample accessioned in, so update the transfer record's transfer status type ID to final. 
                IF @RowAction = 8
                BEGIN
                    INSERT INTO @TransferBeforeEdit
                    SELECT t.idfTransferOut,
                           t.idfsTransferStatus
                    FROM dbo.tlbTransferOUT t
                        INNER JOIN dbo.tlbTransferOutMaterial tom
                            ON tom.idfTransferOut = t.idfTransferOut
                    WHERE tom.idfMaterial = @RootSampleID;

                    UPDATE t
                    SET t.idfsTransferStatus = 10001001,
                        --Final
                        t.AuditUpdateUser = @AuditUserName,
                        t.AuditUpdateDTM = GETDATE()
                    FROM dbo.tlbTransferOUT t
                        INNER JOIN dbo.tlbTransferOutMaterial tom
                            ON tom.idfTransferOut = t.idfTransferOut
                    WHERE tom.idfMaterial = @RootSampleID;

                    INSERT INTO @TransferAfterEdit
                    SELECT t.idfTransferOut,
                           t.idfsTransferStatus
                    FROM dbo.tlbTransferOUT t
                        INNER JOIN dbo.tlbTransferOutMaterial tom
                            ON tom.idfTransferOut = t.idfTransferOut
                    WHERE tom.idfMaterial = @RootSampleID;

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableTransferOutID,
                           4577940000000,
                           a.TransferID,
                           NULL,
                           b.TransferStatusTypeID,
                           a.TransferStatusTypeID,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM @TransferAfterEdit a
                        FULL JOIN @TransferBeforeEdit b
                            ON a.TransferID = b.TransferID
                    WHERE (a.TransferStatusTypeID <> b.TransferStatusTypeID)
                          OR (
                                 a.TransferStatusTypeID IS NOT NULL
                                 AND b.TransferStatusTypeID IS NULL
                             )
                          OR (
                                 a.TransferStatusTypeID IS NULL
                                 AND b.TransferStatusTypeID IS NOT NULL
                             );
                END;

                UPDATE dbo.tlbMaterial
                SET idfsSampleType = @SampleTypeID,
                    idfRootMaterial = @RootSampleID,
                    idfParentMaterial = @ParentSampleID,
                    idfHuman = @HumanID,
                    idfSpecies = @SpeciesID,
                    idfAnimal = @AnimalID,
                    idfMonitoringSession = @MonitoringSessionID,
                    idfFieldCollectedByPerson = @CollectedByPersonID,
                    idfFieldCollectedByOffice = @CollectedByOrganizationID,
                    datFieldCollectionDate = @CollectionDate,
                    datFieldSentDate = @SentDate,
                    strFieldBarcode = @EIDSSLocalOrFieldSampleID,
                    idfVectorSurveillanceSession = @VectorSessionID,
                    idfVector = @VectorID,
                    idfSubdivision = @FreezerSubdivisionID,
                    StorageBoxPlace = @StorageBoxPlace,
                    idfsSampleStatus = @SampleStatusTypeID,
                    idfInDepartment = @FunctionalAreaID,
                    idfDestroyedByPerson = @DestroyedByPersonID,
                    datEnteringDate = @EnteredDate,
                    datDestructionDate = @DestructionDate,
                    strBarcode = @EIDSSLaboratorySampleID,
                    strNote = @Note,
                    idfsSite = @SiteID,
                    idfsCurrentSite = @CurrentSiteID,
                    idfsSampleKind = @SampleKindTypeID,
                    intRowStatus = @RowStatus,
                    idfSendToOffice = @SentToOrganizationID,
                    blnReadOnly = @ReadOnlyIndicator,
                    idfHumanCase = @HumanDiseaseReportID,
                    idfVetCase = @VeterinaryDiseaseReportID,
                    datAccession = @AccessionDate,
                    idfsAccessionCondition = @AccessionConditionTypeID,
                    strCondition = @AccessionComment,
                    idfAccesionByPerson = @AccessionByPersonID,
                    idfsDestructionMethod = @DestructionMethodTypeID,
                    idfMarkedForDispositionByPerson = @MarkedForDispositionByPersonID,
                    datOutOfRepositoryDate = @OutOfRepositoryDate,
                    PreviousSampleStatusID = @PreviousSampleStatusTypeID,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE(), 
                    TestCompletedIndicator = 0, 
                    TestUnassignedIndicator = 1
                WHERE idfMaterial = @SampleID;
            END
            ELSE
            BEGIN
                -- Transferred in sample rejected, so update the transferred out sample's status to transferred out. 
                IF @RowAction = 9
                BEGIN
                    UPDATE dbo.tlbMaterial
                    SET idfsSampleStatus = 10015010, -- Transferred Out
                        AuditUpdateUser = @AuditUserName,
                        AuditUpdateDTM = GETDATE()
                    WHERE idfMaterial = @RootSampleID;

                    INSERT INTO @TransferBeforeEdit
                    SELECT t.idfTransferOut,
                           t.idfsTransferStatus
                    FROM dbo.tlbTransferOUT t
                        INNER JOIN dbo.tlbTransferOutMaterial tom
                            ON tom.idfTransferOut = t.idfTransferOut
                    WHERE tom.idfMaterial = @RootSampleID;

                    UPDATE t
                    SET t.idfsTransferStatus = 10001001, -- Final
                        t.AuditUpdateUser = @AuditUserName,
                        t.AuditUpdateDTM = GETDATE()
                    FROM dbo.tlbTransferOUT t
                        INNER JOIN dbo.tlbTransferOutMaterial tom
                            ON tom.idfTransferOut = t.idfTransferOut
                    WHERE tom.idfMaterial = @RootSampleID;

                    INSERT INTO @TransferAfterEdit
                    SELECT t.idfTransferOut,
                           t.idfsTransferStatus
                    FROM dbo.tlbTransferOUT t
                        INNER JOIN dbo.tlbTransferOutMaterial tom
                            ON tom.idfTransferOut = t.idfTransferOut
                    WHERE tom.idfMaterial = @RootSampleID;

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableTransferOutID,
                           4577940000000,
                           a.TransferID,
                           NULL,
                           b.TransferStatusTypeID,
                           a.TransferStatusTypeID,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM @TransferAfterEdit a
                        FULL JOIN @TransferBeforeEdit b
                            ON a.TransferID = b.TransferID
                    WHERE (a.TransferStatusTypeID <> b.TransferStatusTypeID)
                          OR (
                                 a.TransferStatusTypeID IS NOT NULL
                                 AND b.TransferStatusTypeID IS NULL
                             )
                          OR (
                                 a.TransferStatusTypeID IS NULL
                                 AND b.TransferStatusTypeID IS NOT NULL
                             );
                END;

                IF @RowAction = 2
                   AND @AccessionConditionTypeID = 10108003 -- Rejected
                BEGIN
                    UPDATE dbo.tlbMaterial
                    SET idfsSampleType = @SampleTypeID,
                        idfRootMaterial = @RootSampleID,
                        idfParentMaterial = @ParentSampleID,
                        idfHuman = @HumanID,
                        idfSpecies = @SpeciesID,
                        idfAnimal = @AnimalID,
                        idfMonitoringSession = @MonitoringSessionID,
                        idfFieldCollectedByPerson = @CollectedByPersonID,
                        idfFieldCollectedByOffice = @CollectedByOrganizationID,
                        datFieldCollectionDate = @CollectionDate,
                        datFieldSentDate = @SentDate,
                        strFieldBarcode = @EIDSSLocalOrFieldSampleID,
                        idfVectorSurveillanceSession = @VectorSessionID,
                        idfVector = @VectorID,
                        idfSubdivision = @FreezerSubdivisionID,
                        StorageBoxPlace = @StorageBoxPlace,
                        idfsSampleStatus = @SampleStatusTypeID,
                        idfInDepartment = @FunctionalAreaID,
                        idfDestroyedByPerson = @DestroyedByPersonID,
                        datEnteringDate = @EnteredDate,
                        datDestructionDate = @DestructionDate,
                        strNote = @Note,
                        idfsSite = @SiteID,
                        idfsCurrentSite = @CurrentSiteID,
                        idfsSampleKind = @SampleKindTypeID,
                        intRowStatus = @RowStatus,
                        idfSendToOffice = @SentToOrganizationID,
                        blnReadOnly = @ReadOnlyIndicator,
                        idfHumanCase = @HumanDiseaseReportID,
                        idfVetCase = @VeterinaryDiseaseReportID,
                        datAccession = @AccessionDate,
                        idfsAccessionCondition = @AccessionConditionTypeID,
                        strCondition = @AccessionComment,
                        idfAccesionByPerson = @AccessionByPersonID,
                        idfsDestructionMethod = @DestructionMethodTypeID,
                        idfMarkedForDispositionByPerson = @MarkedForDispositionByPersonID,
                        datOutOfRepositoryDate = @OutOfRepositoryDate,
                        PreviousSampleStatusID = @PreviousSampleStatusTypeID,
                        AuditUpdateUser = @AuditUserName,
                        AuditUpdateDTM = GETDATE(), 
                        TestCompletedIndicator = 0,
                        TestUnassignedIndicator = 1
                    WHERE idfMaterial = @SampleID;
                END
                ELSE
                BEGIN
                    UPDATE dbo.tlbMaterial
                    SET idfsSampleType = @SampleTypeID,
                        idfRootMaterial = @RootSampleID,
                        idfParentMaterial = @ParentSampleID,
                        idfHuman = @HumanID,
                        idfSpecies = @SpeciesID,
                        idfAnimal = @AnimalID,
                        idfMonitoringSession = @MonitoringSessionID,
                        idfFieldCollectedByPerson = @CollectedByPersonID,
                        idfFieldCollectedByOffice = @CollectedByOrganizationID,
                        datFieldCollectionDate = @CollectionDate,
                        datFieldSentDate = @SentDate,
                        strFieldBarcode = @EIDSSLocalOrFieldSampleID,
                        idfVectorSurveillanceSession = @VectorSessionID,
                        idfVector = @VectorID,
                        idfSubdivision = @FreezerSubdivisionID,
                        StorageBoxPlace = @StorageBoxPlace,
                        idfsSampleStatus = @SampleStatusTypeID,
                        idfInDepartment = @FunctionalAreaID,
                        idfDestroyedByPerson = @DestroyedByPersonID,
                        datEnteringDate = @EnteredDate,
                        datDestructionDate = @DestructionDate,
                        strNote = @Note,
                        idfsSite = @SiteID,
                        idfsCurrentSite = @CurrentSiteID,
                        idfsSampleKind = @SampleKindTypeID,
                        intRowStatus = @RowStatus,
                        idfSendToOffice = @SentToOrganizationID,
                        blnReadOnly = @ReadOnlyIndicator,
                        idfHumanCase = @HumanDiseaseReportID,
                        idfVetCase = @VeterinaryDiseaseReportID,
                        datAccession = @AccessionDate,
                        idfsAccessionCondition = @AccessionConditionTypeID,
                        strCondition = @AccessionComment,
                        idfAccesionByPerson = @AccessionByPersonID,
                        idfsDestructionMethod = @DestructionMethodTypeID,
                        idfMarkedForDispositionByPerson = @MarkedForDispositionByPersonID,
                        datOutOfRepositoryDate = @OutOfRepositoryDate,
                        PreviousSampleStatusID = @PreviousSampleStatusTypeID,
                        AuditUpdateUser = @AuditUserName,
                        AuditUpdateDTM = GETDATE()
                    WHERE idfMaterial = @SampleID;
                END
            END

            INSERT INTO @SampleAfterEdit
            (
                SampleID,
                SampleTypeID,
                RootSampleID,
                ParentSampleID,
                HumanID,
                SpeciesID,
                AnimalID,
                MonitoringSessionID,
                FieldCollectedByPersonID,
                FieldCollectedByOfficeID,
                MainTestID,
                FieldCollectionDate,
                FieldSentDate,
                FieldBarcodeID,
                CalculatedCaseID,
                CalculatedHumanName,
                VectorSurveillanceSessionID,
                VectorID,
                SubdivisionID,
                SampleStatusTypeID,
                DepartmentID,
                DestroyedByPersonID,
                EnteringDate,
                DestructionDate,
                BarcodeID,
                Note,
                SendToOfficeID,
                ReadOnlyIndicator,
                BirdStatusTypeID,
                HumanDiseaseReportID,
                VeterinaryDiseaseReportID,
                AccessionDate,
                AccessionConditionTypeID,
                Condition,
                AccessionByPersonID,
                DestructionMethodTypeID,
                CurrentSiteID,
                SampleKindTypeID,
                AccessionIndicator,
                ShowInCaseOrSessionIndicator,
                ShowInLabListIndicator,
                ShowInDispositionListIndicator,
                ShowInAccessionInFormIndicator,
                MarkedForDispositionByPersonID,
                OutOfRepositoryDate,
                SampleStatusDate,
                RowStatus,
                StorageBoxPlace,
                PreviousSampleStatusTypeID,
                DiseaseID,
                LabModuleSourceIndicator,
                TestUnassignedIndicator,
                TestCompletedIndicator,
                TransferIndicator
            )
            SELECT idfMaterial,
                   idfsSampleType,
                   idfRootMaterial,
                   idfParentMaterial,
                   idfHuman,
                   idfSpecies,
                   idfAnimal,
                   idfMonitoringSession,
                   idfFieldCollectedByPerson,
                   idfFieldCollectedByOffice,
                   idfMainTest,
                   datFieldCollectionDate,
                   datFieldSentDate,
                   strFieldBarcode,
                   strCalculatedCaseID,
                   strCalculatedHumanName,
                   idfVectorSurveillanceSession,
                   idfVector,
                   idfSubdivision,
                   idfsSampleStatus,
                   idfInDepartment,
                   idfDestroyedByPerson,
                   datEnteringDate,
                   datDestructionDate,
                   strBarcode,
                   strNote,
                   idfSendToOffice,
                   blnReadOnly,
                   idfsBirdStatus,
                   idfHumanCase,
                   idfVetCase,
                   datAccession,
                   idfsAccessionCondition,
                   strCondition,
                   idfAccesionByPerson,
                   idfsDestructionMethod,
                   idfsCurrentSite,
                   idfsSampleKind,
                   blnAccessioned,
                   blnShowInCaseOrSession,
                   blnShowInLabList,
                   blnShowInDispositionList,
                   blnShowInAccessionInForm,
                   idfMarkedForDispositionByPerson,
                   datOutOfRepositoryDate,
                   datSampleStatusDate,
                   intRowStatus,
                   StorageBoxPlace,
                   PreviousSampleStatusID,
                   DiseaseID,
                   LabModuleSourceIndicator,
                   TestUnassignedIndicator,
                   TestCompletedIndicator,
                   TransferIndicator
            FROM dbo.tlbMaterial
            WHERE idfMaterial = @SampleID;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   49545390000000,
                   a.SampleID,
                   NULL,
                   b.SampleTypeID,
                   a.SampleTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.SampleTypeID <> b.SampleTypeID)
                  OR (
                         a.SampleTypeID IS NOT NULL
                         AND b.SampleTypeID IS NULL
                     )
                  OR (
                         a.SampleTypeID IS NULL
                         AND b.SampleTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   49545400000000,
                   a.SampleID,
                   NULL,
                   b.RootSampleID,
                   a.RootSampleID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.RootSampleID <> b.RootSampleID)
                  OR (
                         a.RootSampleID IS NOT NULL
                         AND b.RootSampleID IS NULL
                     )
                  OR (
                         a.RootSampleID IS NULL
                         AND b.RootSampleID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   79970000000,
                   a.SampleID,
                   NULL,
                   b.ParentSampleID,
                   a.ParentSampleID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.ParentSampleID <> b.ParentSampleID)
                  OR (
                         a.ParentSampleID IS NOT NULL
                         AND b.ParentSampleID IS NULL
                     )
                  OR (
                         a.ParentSampleID IS NULL
                         AND b.ParentSampleID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4572430000000,
                   a.SampleID,
                   NULL,
                   b.HumanID,
                   a.HumanID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.HumanID <> b.HumanID)
                  OR (
                         a.HumanID IS NOT NULL
                         AND b.HumanID IS NULL
                     )
                  OR (
                         a.HumanID IS NULL
                         AND b.HumanID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4572440000000,
                   a.SampleID,
                   NULL,
                   b.SpeciesID,
                   a.SpeciesID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.SpeciesID <> b.SpeciesID)
                  OR (
                         a.SpeciesID IS NOT NULL
                         AND b.SpeciesID IS NULL
                     )
                  OR (
                         a.SpeciesID IS NULL
                         AND b.SpeciesID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4572450000000,
                   a.SampleID,
                   NULL,
                   b.AnimalID,
                   a.AnimalID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.AnimalID <> b.AnimalID)
                  OR (
                         a.AnimalID IS NOT NULL
                         AND b.AnimalID IS NULL
                     )
                  OR (
                         a.AnimalID IS NULL
                         AND b.AnimalID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4572470000000,
                   a.SampleID,
                   NULL,
                   b.MonitoringSessionID,
                   a.MonitoringSessionID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.MonitoringSessionID <> b.MonitoringSessionID)
                  OR (
                         a.MonitoringSessionID IS NOT NULL
                         AND b.MonitoringSessionID IS NULL
                     )
                  OR (
                         a.MonitoringSessionID IS NULL
                         AND b.MonitoringSessionID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   79950000000,
                   a.SampleID,
                   NULL,
                   b.FieldCollectedByPersonID,
                   a.FieldCollectedByPersonID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.FieldCollectedByPersonID <> b.FieldCollectedByPersonID)
                  OR (
                         a.FieldCollectedByPersonID IS NOT NULL
                         AND b.FieldCollectedByPersonID IS NULL
                     )
                  OR (
                         a.FieldCollectedByPersonID IS NULL
                         AND b.FieldCollectedByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   79940000000,
                   a.SampleID,
                   NULL,
                   b.FieldCollectedByOfficeID,
                   a.FieldCollectedByOfficeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.FieldCollectedByOfficeID <> b.FieldCollectedByOfficeID)
                  OR (
                         a.FieldCollectedByOfficeID IS NOT NULL
                         AND b.FieldCollectedByOfficeID IS NULL
                     )
                  OR (
                         a.FieldCollectedByOfficeID IS NULL
                         AND b.FieldCollectedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   49545410000000,
                   a.SampleID,
                   NULL,
                   b.MainTestID,
                   a.MainTestID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.MainTestID <> b.MainTestID)
                  OR (
                         a.MainTestID IS NOT NULL
                         AND b.MainTestID IS NULL
                     )
                  OR (
                         a.MainTestID IS NULL
                         AND b.MainTestID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   79920000000,
                   a.SampleID,
                   NULL,
                   b.FieldCollectionDate,
                   a.FieldCollectionDate,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.FieldCollectionDate <> b.FieldCollectionDate)
                  OR (
                         a.FieldCollectionDate IS NOT NULL
                         AND b.FieldCollectionDate IS NULL
                     )
                  OR (
                         a.FieldCollectionDate IS NULL
                         AND b.FieldCollectionDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   79930000000,
                   a.SampleID,
                   NULL,
                   b.FieldSentDate,
                   a.FieldSentDate,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.FieldSentDate <> b.FieldSentDate)
                  OR (
                         a.FieldSentDate IS NOT NULL
                         AND b.FieldSentDate IS NULL
                     )
                  OR (
                         a.FieldSentDate IS NULL
                         AND b.FieldSentDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   80030000000,
                   a.SampleID,
                   NULL,
                   b.FieldBarcodeID,
                   a.FieldBarcodeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.FieldBarcodeID <> b.FieldBarcodeID)
                  OR (
                         a.FieldBarcodeID IS NOT NULL
                         AND b.FieldBarcodeID IS NULL
                     )
                  OR (
                         a.FieldBarcodeID IS NULL
                         AND b.FieldBarcodeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4572480000000,
                   a.SampleID,
                   NULL,
                   b.CalculatedCaseID,
                   a.CalculatedCaseID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.CalculatedCaseID <> b.CalculatedCaseID)
                  OR (
                         a.CalculatedCaseID IS NOT NULL
                         AND b.CalculatedCaseID IS NULL
                     )
                  OR (
                         a.CalculatedCaseID IS NULL
                         AND b.CalculatedCaseID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4572490000000,
                   a.SampleID,
                   NULL,
                   b.CalculatedHumanName,
                   a.CalculatedHumanName,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.CalculatedHumanName <> b.CalculatedHumanName)
                  OR (
                         a.CalculatedHumanName IS NOT NULL
                         AND b.CalculatedHumanName IS NULL
                     )
                  OR (
                         a.CalculatedHumanName IS NULL
                         AND b.CalculatedHumanName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4575190000000,
                   a.SampleID,
                   NULL,
                   b.VectorSurveillanceSessionID,
                   a.VectorSurveillanceSessionID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.VectorSurveillanceSessionID <> b.VectorSurveillanceSessionID)
                  OR (
                         a.VectorSurveillanceSessionID IS NOT NULL
                         AND b.VectorSurveillanceSessionID IS NULL
                     )
                  OR (
                         a.VectorSurveillanceSessionID IS NULL
                         AND b.VectorSurveillanceSessionID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4575200000000,
                   a.SampleID,
                   NULL,
                   b.VectorID,
                   a.VectorID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.VectorID <> b.VectorID)
                  OR (
                         a.VectorID IS NOT NULL
                         AND b.VectorID IS NULL
                     )
                  OR (
                         a.VectorID IS NULL
                         AND b.VectorID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4576340000000,
                   a.SampleID,
                   NULL,
                   b.SubdivisionID,
                   a.SubdivisionID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.SubdivisionID <> b.SubdivisionID)
                  OR (
                         a.SubdivisionID IS NOT NULL
                         AND b.SubdivisionID IS NULL
                     )
                  OR (
                         a.SubdivisionID IS NULL
                         AND b.SubdivisionID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   49545420000000,
                   a.SampleID,
                   NULL,
                   b.SampleStatusTypeID,
                   a.SampleStatusTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.SampleStatusTypeID <> b.SampleStatusTypeID)
                  OR (
                         a.SampleStatusTypeID IS NOT NULL
                         AND b.SampleStatusTypeID IS NULL
                     )
                  OR (
                         a.SampleStatusTypeID IS NULL
                         AND b.SampleStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4576360000000,
                   a.SampleID,
                   NULL,
                   b.DepartmentID,
                   a.DepartmentID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.DepartmentID <> b.DepartmentID)
                  OR (
                         a.DepartmentID IS NOT NULL
                         AND b.DepartmentID IS NULL
                     )
                  OR (
                         a.DepartmentID IS NULL
                         AND b.DepartmentID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4576370000000,
                   a.SampleID,
                   NULL,
                   b.DestroyedByPersonID,
                   a.DestroyedByPersonID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.DestroyedByPersonID <> b.DestroyedByPersonID)
                  OR (
                         a.DestroyedByPersonID IS NOT NULL
                         AND b.DestroyedByPersonID IS NULL
                     )
                  OR (
                         a.DestroyedByPersonID IS NULL
                         AND b.DestroyedByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4576390000000,
                   a.SampleID,
                   NULL,
                   b.EnteringDate,
                   a.EnteringDate,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.EnteringDate <> b.EnteringDate)
                  OR (
                         a.EnteringDate IS NOT NULL
                         AND b.EnteringDate IS NULL
                     )
                  OR (
                         a.EnteringDate IS NULL
                         AND b.EnteringDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4576400000000,
                   a.SampleID,
                   NULL,
                   b.DestructionDate,
                   a.DestructionDate,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.DestructionDate <> b.DestructionDate)
                  OR (
                         a.DestructionDate IS NOT NULL
                         AND b.DestructionDate IS NULL
                     )
                  OR (
                         a.DestructionDate IS NULL
                         AND b.DestructionDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4576410000000,
                   a.SampleID,
                   NULL,
                   b.BarcodeID,
                   a.BarcodeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.BarcodeID <> b.BarcodeID)
                  OR (
                         a.BarcodeID IS NOT NULL
                         AND b.BarcodeID IS NULL
                     )
                  OR (
                         a.BarcodeID IS NULL
                         AND b.BarcodeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4576420000000,
                   a.SampleID,
                   NULL,
                   b.Note,
                   a.Note,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.Note <> b.Note)
                  OR (
                         a.Note IS NOT NULL
                         AND b.Note IS NULL
                     )
                  OR (
                         a.Note IS NULL
                         AND b.Note IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4578720000000,
                   a.SampleID,
                   NULL,
                   b.SendToOfficeID,
                   a.SendToOfficeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.SendToOfficeID <> b.SendToOfficeID)
                  OR (
                         a.SendToOfficeID IS NOT NULL
                         AND b.SendToOfficeID IS NULL
                     )
                  OR (
                         a.SendToOfficeID IS NULL
                         AND b.SendToOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   4578730000000,
                   a.SampleID,
                   NULL,
                   b.ReadOnlyIndicator,
                   a.ReadOnlyIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.ReadOnlyIndicator <> b.ReadOnlyIndicator)
                  OR (
                         a.ReadOnlyIndicator IS NOT NULL
                         AND b.ReadOnlyIndicator IS NULL
                     )
                  OR (
                         a.ReadOnlyIndicator IS NULL
                         AND b.ReadOnlyIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   12014480000000,
                   a.SampleID,
                   NULL,
                   b.BirdStatusTypeID,
                   a.BirdStatusTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.BirdStatusTypeID <> b.BirdStatusTypeID)
                  OR (
                         a.BirdStatusTypeID IS NOT NULL
                         AND b.BirdStatusTypeID IS NULL
                     )
                  OR (
                         a.BirdStatusTypeID IS NULL
                         AND b.BirdStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   12665570000000,
                   a.SampleID,
                   NULL,
                   b.HumanDiseaseReportID,
                   a.HumanDiseaseReportID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.HumanDiseaseReportID <> b.HumanDiseaseReportID)
                  OR (
                         a.HumanDiseaseReportID IS NOT NULL
                         AND b.HumanDiseaseReportID IS NULL
                     )
                  OR (
                         a.HumanDiseaseReportID IS NULL
                         AND b.HumanDiseaseReportID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   12665580000000,
                   a.SampleID,
                   NULL,
                   b.VeterinaryDiseaseReportID,
                   a.VeterinaryDiseaseReportID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.VeterinaryDiseaseReportID <> b.VeterinaryDiseaseReportID)
                  OR (
                         a.VeterinaryDiseaseReportID IS NOT NULL
                         AND b.VeterinaryDiseaseReportID IS NULL
                     )
                  OR (
                         a.VeterinaryDiseaseReportID IS NULL
                         AND b.VeterinaryDiseaseReportID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   12666880000000,
                   a.SampleID,
                   NULL,
                   b.AccessionDate,
                   a.AccessionDate,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.AccessionDate <> b.AccessionDate)
                  OR (
                         a.AccessionDate IS NOT NULL
                         AND b.AccessionDate IS NULL
                     )
                  OR (
                         a.AccessionDate IS NULL
                         AND b.AccessionDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   12666890000000,
                   a.SampleID,
                   NULL,
                   b.AccessionConditionTypeID,
                   a.AccessionConditionTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.AccessionConditionTypeID <> b.AccessionConditionTypeID)
                  OR (
                         a.AccessionConditionTypeID IS NOT NULL
                         AND b.AccessionConditionTypeID IS NULL
                     )
                  OR (
                         a.AccessionConditionTypeID IS NULL
                         AND b.AccessionConditionTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   12666900000000,
                   a.SampleID,
                   NULL,
                   b.Condition,
                   a.Condition,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.Condition <> b.Condition)
                  OR (
                         a.Condition IS NOT NULL
                         AND b.Condition IS NULL
                     )
                  OR (
                         a.Condition IS NULL
                         AND b.Condition IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   12666910000000,
                   a.SampleID,
                   NULL,
                   b.AccessionByPersonID,
                   a.AccessionByPersonID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.AccessionByPersonID <> b.AccessionByPersonID)
                  OR (
                         a.AccessionByPersonID IS NOT NULL
                         AND b.AccessionByPersonID IS NULL
                     )
                  OR (
                         a.AccessionByPersonID IS NULL
                         AND b.AccessionByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   12675260000000,
                   a.SampleID,
                   NULL,
                   b.DestructionMethodTypeID,
                   a.DestructionMethodTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.DestructionMethodTypeID <> b.DestructionMethodTypeID)
                  OR (
                         a.DestructionMethodTypeID IS NOT NULL
                         AND b.DestructionMethodTypeID IS NULL
                     )
                  OR (
                         a.DestructionMethodTypeID IS NULL
                         AND b.DestructionMethodTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   49545560000000,
                   a.SampleID,
                   NULL,
                   b.CurrentSiteID,
                   a.CurrentSiteID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.CurrentSiteID <> b.CurrentSiteID)
                  OR (
                         a.CurrentSiteID IS NOT NULL
                         AND b.CurrentSiteID IS NULL
                     )
                  OR (
                         a.CurrentSiteID IS NULL
                         AND b.CurrentSiteID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   49545570000000,
                   a.SampleID,
                   NULL,
                   b.SampleKindTypeID,
                   a.SampleKindTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.SampleKindTypeID <> b.SampleKindTypeID)
                  OR (
                         a.SampleKindTypeID IS NOT NULL
                         AND b.SampleKindTypeID IS NULL
                     )
                  OR (
                         a.SampleKindTypeID IS NULL
                         AND b.SampleKindTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   49545580000000,
                   a.SampleID,
                   NULL,
                   b.AccessionIndicator,
                   a.AccessionIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.AccessionIndicator <> b.AccessionIndicator)
                  OR (
                         a.AccessionIndicator IS NOT NULL
                         AND b.AccessionIndicator IS NULL
                     )
                  OR (
                         a.AccessionIndicator IS NULL
                         AND b.AccessionIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   49545590000000,
                   a.SampleID,
                   NULL,
                   b.ShowInCaseOrSessionIndicator,
                   a.ShowInCaseOrSessionIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.ShowInCaseOrSessionIndicator <> b.ShowInCaseOrSessionIndicator)
                  OR (
                         a.ShowInCaseOrSessionIndicator IS NOT NULL
                         AND b.ShowInCaseOrSessionIndicator IS NULL
                     )
                  OR (
                         a.ShowInCaseOrSessionIndicator IS NULL
                         AND b.ShowInCaseOrSessionIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   49545600000000,
                   a.SampleID,
                   NULL,
                   b.ShowInLabListIndicator,
                   a.ShowInLabListIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.ShowInLabListIndicator <> b.ShowInLabListIndicator)
                  OR (
                         a.ShowInLabListIndicator IS NOT NULL
                         AND b.ShowInLabListIndicator IS NULL
                     )
                  OR (
                         a.ShowInLabListIndicator IS NULL
                         AND b.ShowInLabListIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   49545620000000,
                   a.SampleID,
                   NULL,
                   b.ShowInDispositionListIndicator,
                   a.ShowInDispositionListIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.ShowInDispositionListIndicator <> b.ShowInDispositionListIndicator)
                  OR (
                         a.ShowInDispositionListIndicator IS NOT NULL
                         AND b.ShowInDispositionListIndicator IS NULL
                     )
                  OR (
                         a.ShowInDispositionListIndicator IS NULL
                         AND b.ShowInDispositionListIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   49545610000000,
                   a.SampleID,
                   NULL,
                   b.ShowInAccessionInFormIndicator,
                   a.ShowInAccessionInFormIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.ShowInAccessionInFormIndicator <> b.ShowInAccessionInFormIndicator)
                  OR (
                         a.ShowInAccessionInFormIndicator IS NOT NULL
                         AND b.ShowInAccessionInFormIndicator IS NULL
                     )
                  OR (
                         a.ShowInAccessionInFormIndicator IS NULL
                         AND b.ShowInAccessionInFormIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   51523600000000,
                   a.SampleID,
                   NULL,
                   b.MarkedForDispositionByPersonID,
                   a.MarkedForDispositionByPersonID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.MarkedForDispositionByPersonID <> b.MarkedForDispositionByPersonID)
                  OR (
                         a.MarkedForDispositionByPersonID IS NOT NULL
                         AND b.MarkedForDispositionByPersonID IS NULL
                     )
                  OR (
                         a.MarkedForDispositionByPersonID IS NULL
                         AND b.MarkedForDispositionByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   51528570000000,
                   a.SampleID,
                   NULL,
                   b.OutOfRepositoryDate,
                   a.OutOfRepositoryDate,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.OutOfRepositoryDate <> b.OutOfRepositoryDate)
                  OR (
                         a.OutOfRepositoryDate IS NOT NULL
                         AND b.OutOfRepositoryDate IS NULL
                     )
                  OR (
                         a.OutOfRepositoryDate IS NULL
                         AND b.OutOfRepositoryDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   51528580000000,
                   a.SampleID,
                   NULL,
                   b.SampleStatusDate,
                   a.SampleStatusDate,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.SampleStatusDate <> b.SampleStatusDate)
                  OR (
                         a.SampleStatusDate IS NOT NULL
                         AND b.SampleStatusDate IS NULL
                     )
                  OR (
                         a.SampleStatusDate IS NULL
                         AND b.SampleStatusDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   51586990000034,
                   a.SampleID,
                   NULL,
                   b.StorageBoxPlace,
                   a.StorageBoxPlace,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.StorageBoxPlace <> b.StorageBoxPlace)
                  OR (
                         a.StorageBoxPlace IS NOT NULL
                         AND b.StorageBoxPlace IS NULL
                     )
                  OR (
                         a.StorageBoxPlace IS NULL
                         AND b.StorageBoxPlace IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   51586990000033,
                   a.SampleID,
                   NULL,
                   b.PreviousSampleStatusTypeID,
                   a.PreviousSampleStatusTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.PreviousSampleStatusTypeID <> b.PreviousSampleStatusTypeID)
                  OR (
                         a.PreviousSampleStatusTypeID IS NOT NULL
                         AND b.PreviousSampleStatusTypeID IS NULL
                     )
                  OR (
                         a.PreviousSampleStatusTypeID IS NULL
                         AND b.PreviousSampleStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   51586990000035,
                   a.SampleID,
                   NULL,
                   b.DiseaseID,
                   a.DiseaseID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.DiseaseID <> b.DiseaseID)
                  OR (
                         a.DiseaseID IS NOT NULL
                         AND b.DiseaseID IS NULL
                     )
                  OR (
                         a.DiseaseID IS NULL
                         AND b.DiseaseID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   51586990000036,
                   a.SampleID,
                   NULL,
                   b.LabModuleSourceIndicator,
                   a.LabModuleSourceIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.LabModuleSourceIndicator <> b.LabModuleSourceIndicator)
                  OR (
                         a.LabModuleSourceIndicator IS NOT NULL
                         AND b.LabModuleSourceIndicator IS NULL
                     )
                  OR (
                         a.LabModuleSourceIndicator IS NULL
                         AND b.LabModuleSourceIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   51586990000037,
                   a.SampleID,
                   NULL,
                   b.TestUnassignedIndicator,
                   a.TestUnassignedIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.TestUnassignedIndicator <> b.TestUnassignedIndicator)
                  OR (
                         a.TestUnassignedIndicator IS NOT NULL
                         AND b.TestUnassignedIndicator IS NULL
                     )
                  OR (
                         a.TestUnassignedIndicator IS NULL
                         AND b.TestUnassignedIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   51586990000038,
                   a.SampleID,
                   NULL,
                   b.TestCompletedIndicator,
                   a.TestCompletedIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.TestCompletedIndicator <> b.TestCompletedIndicator)
                  OR (
                         a.TestCompletedIndicator IS NOT NULL
                         AND b.TestCompletedIndicator IS NULL
                     )
                  OR (
                         a.TestCompletedIndicator IS NULL
                         AND b.TestCompletedIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   51586990000039,
                   a.SampleID,
                   NULL,
                   b.TransferIndicator,
                   a.TransferIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.TransferIndicator <> b.TransferIndicator)
                  OR (
                         a.TransferIndicator IS NOT NULL
                         AND b.TransferIndicator IS NULL
                     )
                  OR (
                         a.TransferIndicator IS NULL
                         AND b.TransferIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailRestore
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                idfObjectDetail,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   a.SampleID,
                   NULL,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE a.RowStatus = 0
                  AND b.RowStatus = 1;
        END;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USSP_LAB_TEST_SET]...';


GO
-- ================================================================================================
-- Name: USSP_LAB_TEST_SET
--
-- Description:	Inserts or updates test records for various laboratory module use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long		01/24/2019 Initial release.
-- Stephen Long     02/01/2019 Added null to the observation ID parameter.
-- Stephen Long     03/30/2020 Added set of audit update time and user on record inserts/updates.
-- Stephen Long     10/28/2020 Changed record action from nchar to char.
-- Stephen Long     02/11/2021 Add logic to set test unassigned and test completed indicators.
-- Stephen Long     09/24/2021 Removed language ID parameter as it is not needed.
-- Stephen Long     01/31/2022 Added source system name and key value update on insert.
-- Leo Tracchia		10/21/2022 Fix for properly deleting tests for human disease report DevOps 
--                  defect 5006.
-- Stephen Long     10/21/2022 Added veterinary disease report, monitoring session and vector 
--                             identifiers to the USSP_LAB_TEST_SET call.
-- Stephen Long     01/04/2023 Added update to tests conducted field on human and veterinary 
--                             disease report when a test is added or deleted.
-- Stephen Long     02/21/2023 Added data audit logic for SAUC30 and 31.
-- Stephen Long     03/28/2023 Fix to set sample test unassigned and test completed indicators 
--                             after the test record is saved.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_LAB_TEST_SET]
(
    @TestID BIGINT,
    @TestNameTypeID BIGINT = NULL,
    @TestCategoryTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestStatusTypeID BIGINT,
    @PreviousTestStatusTypeID BIGINT = NULL,
    @DiseaseID BIGINT,
    @SampleID BIGINT = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200),
    @BatchTestID BIGINT = NULL,
    @ObservationID BIGINT = NULL,
    @TestNumber INT = NULL,
    @Note NVARCHAR(500) = NULL,
    @RowStatus INT = NULL,
    @StartedDate DATETIME = NULL,
    @ConcludedDate DATETIME = NULL,
    @TestedByOrganizationID BIGINT = NULL,
    @TestedByPersonID BIGINT = NULL,
    @ResultEnteredByOrganizationID BIGINT = NULL,
    @ResultEnteredByPersonID BIGINT = NULL,
    @ValidatedByOrganizationID BIGINT = NULL,
    @ValidatedByPersonID BIGINT = NULL,
    @ReadOnlyIndicator BIT,
    @NonLaboratoryTestIndicator BIT,
    @ExternalTestIndicator BIT = NULL,
    @PerformedByOrganizationID BIGINT = NULL,
    @ReceivedDate DATETIME = NULL,
    @ContactPerson NVARCHAR(200) = NULL,
    @HumanDiseaseReportID BIGINT = NULL,
    @VeterinaryDiseaseReportID BIGINT = NULL,
    @MonitoringSessionID BIGINT = NULL,
    @VectorID BIGINT = NULL,
    @RowAction INT,
    @AuditUserName NVARCHAR(200),
    @DataAuditEventID BIGINT OUTPUT
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @TestAssignedCount AS INT = 0,
                                                                            -- Data audit
                @AuditUserID BIGINT = NULL,
                @AuditSiteID BIGINT = NULL,
                @DataAuditEventTypeID BIGINT = NULL,
                @ObjectTypeID BIGINT = 10017053,
                @ObjectID BIGINT = NULL,
                @ObjectTableSampleID BIGINT = 75620000000,                  -- tlbMaterial
                @ObjectTableTestID BIGINT = 75740000000,                    -- tlbTesting
                @ObjectTableHumanDiseaseReportID BIGINT = 75610000000,      -- tlbHumanCase,
                @ObjectTableVeterinaryDiseaseReportID BIGINT = 75800000000, -- tlbVetCase
                @EIDSSObjectID NVARCHAR(200);
        -- End data audit

        DECLARE @TestBeforeEdit TABLE
        (
            TestID BIGINT,
            TestNameTypeID BIGINT,
            TestCategoryTypeID BIGINT,
            TestResultTypeID BIGINT,
            TestStatusTypeID BIGINT,
            DiseaseID BIGINT,
            SampleID BIGINT,
            BatchTestID BIGINT,
            ObservationID BIGINT,
            TestNumber INT,
            Note NVARCHAR(500),
            StartedDate DATETIME,
            ConcludedDate DATETIME,
            TestedByOfficeID BIGINT,
            TestedByPersonID BIGINT,
            ResultEnteredByOfficeID BIGINT,
            ResultEnteredByPersonID BIGINT,
            ValidatedByOfficeID BIGINT,
            ValidatedByPersonID BIGINT,
            ReadOnlyIndicator BIT,
            NonLaboratoryTestIndicator BIT,
            ExternalTestIndicator BIT,
            PerformedByOfficeID BIGINT,
            ReceivedDate DATETIME,
            ContactPerson NVARCHAR(200),
            RowStatus INT,
            PreviousTestStatusTypeID BIGINT,
            MonitoringSessionID BIGINT,
            HumanDiseaseReportID BIGINT,
            VeterinaryDiseaseReportID BIGINT,
            VectorID BIGINT
        );
        DECLARE @TestAfterEdit TABLE
        (
            TestID BIGINT,
            TestNameTypeID BIGINT,
            TestCategoryTypeID BIGINT,
            TestResultTypeID BIGINT,
            TestStatusTypeID BIGINT,
            DiseaseID BIGINT,
            SampleID BIGINT,
            BatchTestID BIGINT,
            ObservationID BIGINT,
            TestNumber INT,
            Note NVARCHAR(500),
            StartedDate DATETIME,
            ConcludedDate DATETIME,
            TestedByOfficeID BIGINT,
            TestedByPersonID BIGINT,
            ResultEnteredByOfficeID BIGINT,
            ResultEnteredByPersonID BIGINT,
            ValidatedByOfficeID BIGINT,
            ValidatedByPersonID BIGINT,
            ReadOnlyIndicator BIT,
            NonLaboratoryTestIndicator BIT,
            ExternalTestIndicator BIT,
            PerformedByOfficeID BIGINT,
            ReceivedDate DATETIME,
            ContactPerson NVARCHAR(200),
            RowStatus INT,
            PreviousTestStatusTypeID BIGINT,
            MonitoringSessionID BIGINT,
            HumanDiseaseReportID BIGINT,
            VeterinaryDiseaseReportID BIGINT,
            VectorID BIGINT
        );
        DECLARE @SampleBeforeEdit TABLE
        (
            SampleID BIGINT,
            TestUnassignedIndicator BIT,
            TestCompletedIndicator BIT
        );
        DECLARE @SampleAfterEdit TABLE
        (
            SampleID BIGINT,
            TestUnassignedIndicator BIT,
            TestCompletedIndicator BIT
        );
        DECLARE @HumanDiseaseReportBeforeEdit TABLE
        (
            HumanDiseaseReportID BIGINT,
            TestsConductedTypeID BIGINT NULL
        );
        DECLARE @HumanDiseaseReportAfterEdit TABLE
        (
            HumanDiseaseReportID BIGINT,
            TestsConductedTypeID BIGINT NULL
        );
        DECLARE @VeterinaryDiseaseReportBeforeEdit TABLE
        (
            VeterinaryDiseaseReportID BIGINT,
            TestsConductedTypeID BIGINT NULL
        );
        DECLARE @VeterinaryDiseaseReportAfterEdit TABLE
        (
            VeterinaryDiseaseReportID BIGINT,
            TestsConductedTypeID BIGINT NULL
        );

        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        SET @EIDSSObjectID = @EIDSSLaboratorySampleID;

        IF @RowAction = 1 -- Insert
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = N'tlbTesting',
                                              @idfsKey = @TestID OUTPUT;

            SET @DataAuditEventTypeID = 10016001; -- Data audit create event type

            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      @DataAuditEventTypeID,
                                                      @ObjectTypeID,
                                                      @TestID,
                                                      @ObjectTableTestID,
                                                      @EIDSSObjectID,
                                                      @DataAuditEventID OUTPUT;
        END
        ELSE
        BEGIN
            SET @DataAuditEventTypeID = 10016003; -- Data audit edit event type

            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      @DataAuditEventTypeID,
                                                      @ObjectTypeID,
                                                      @TestID,
                                                      @ObjectTableTestID,
                                                      @EIDSSObjectID,
                                                      @DataAuditEventID OUTPUT;
        END
        -- End data audit

        IF @RowAction = 1 -- Insert
        BEGIN
            INSERT INTO dbo.tlbTesting
            (
                idfTesting,
                idfsTestName,
                idfsTestCategory,
                idfsTestResult,
                idfsTestStatus,
                PreviousTestStatusID,
                idfsDiagnosis,
                idfMaterial,
                idfBatchTest,
                idfObservation,
                intTestNumber,
                strNote,
                intRowStatus,
                datStartedDate,
                datConcludedDate,
                idfTestedByOffice,
                idfTestedByPerson,
                idfResultEnteredByOffice,
                idfResultEnteredByPerson,
                idfValidatedByOffice,
                idfValidatedByPerson,
                blnReadOnly,
                blnNonLaboratoryTest,
                blnExternalTest,
                idfPerformedByOffice,
                datReceivedDate,
                strContactPerson,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                idfHumanCase,
                idfVetCase,
                idfMonitoringSession,
                idfVector
            )
            VALUES
            (@TestID,
             @TestNameTypeID,
             @TestCategoryTypeID,
             @TestResultTypeID,
             @TestStatusTypeID,
             @PreviousTestStatusTypeID,
             @DiseaseID,
             @SampleID,
             @BatchTestID,
             @ObservationID,
             @TestNumber,
             @Note,
             @RowStatus,
             @StartedDate,
             @ConcludedDate,
             @TestedByOrganizationID,
             @TestedByPersonID,
             @ResultEnteredByOrganizationID,
             @ResultEnteredByPersonID,
             @ValidatedByOrganizationID,
             @ValidatedByPersonID,
             @ReadOnlyIndicator,
             @NonLaboratoryTestIndicator,
             @ExternalTestIndicator,
             @PerformedByOrganizationID,
             @ReceivedDate,
             @ContactPerson,
             10519001,
             '[{"idfTesting":' + CAST(@TestID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @HumanDiseaseReportID,
             @VeterinaryDiseaseReportID,
             @MonitoringSessionID,
             @VectorID
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableTestID,
             @TestID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableTestID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @EIDSSObjectID
            );
            -- End data audit

            IF @HumanDiseaseReportID IS NOT NULL
            BEGIN
                INSERT INTO @HumanDiseaseReportBeforeEdit
                SELECT idfHumanCase,
                       idfsYNTestsConducted
                FROM dbo.tlbHumanCase
                WHERE idfHumanCase = @HumanDiseaseReportID;

                UPDATE dbo.tlbHumanCase
                SET idfsYNTestsConducted = 10100001, -- Yes
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfHumanCase = @HumanDiseaseReportID;

                INSERT INTO @HumanDiseaseReportAfterEdit
                SELECT idfHumanCase,
                       idfsYNTestsConducted
                FROM dbo.tlbHumanCase
                WHERE idfHumanCase = @HumanDiseaseReportID;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableHumanDiseaseReportID,
                       4578420000000,
                       a.HumanDiseaseReportID,
                       NULL,
                       b.TestsConductedTypeID,
                       a.TestsConductedTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @HumanDiseaseReportAfterEdit a
                    FULL JOIN @HumanDiseaseReportBeforeEdit b
                        ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
                WHERE (a.TestsConductedTypeID <> b.TestsConductedTypeID)
                      OR (
                             a.TestsConductedTypeID IS NOT NULL
                             AND b.TestsConductedTypeID IS NULL
                         )
                      OR (
                             a.TestsConductedTypeID IS NULL
                             AND b.TestsConductedTypeID IS NOT NULL
                         );
            END
            ELSE IF @VeterinaryDiseaseReportID IS NOT NULL
            BEGIN
                INSERT INTO @VeterinaryDiseaseReportBeforeEdit
                SELECT idfVetCase,
                       idfsYNTestsConducted
                FROM dbo.tlbVetCase
                WHERE idfVetCase = @VeterinaryDiseaseReportID;

                UPDATE dbo.tlbVetCase
                SET idfsYNTestsConducted = 10100001, -- Yes
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfVetCase = @VeterinaryDiseaseReportID;

                INSERT INTO @VeterinaryDiseaseReportAfterEdit
                SELECT idfVetCase,
                       idfsYNTestsConducted
                FROM dbo.tlbVetCase
                WHERE idfVetCase = @VeterinaryDiseaseReportID;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableVeterinaryDiseaseReportID,
                       4578870000000,
                       a.VeterinaryDiseaseReportID,
                       NULL,
                       b.TestsConductedTypeID,
                       a.TestsConductedTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @VeterinaryDiseaseReportAfterEdit a
                    FULL JOIN @VeterinaryDiseaseReportBeforeEdit b
                        ON a.VeterinaryDiseaseReportID = b.VeterinaryDiseaseReportID
                WHERE (a.TestsConductedTypeID <> b.TestsConductedTypeID)
                      OR (
                             a.TestsConductedTypeID IS NOT NULL
                             AND b.TestsConductedTypeID IS NULL
                         )
                      OR (
                             a.TestsConductedTypeID IS NULL
                             AND b.TestsConductedTypeID IS NOT NULL
                         );
            END
        END;
        ELSE
        BEGIN
            INSERT INTO @TestBeforeEdit
            (
                TestID,
                TestNameTypeID,
                TestCategoryTypeID,
                TestResultTypeID,
                TestStatusTypeID,
                DiseaseID,
                SampleID,
                BatchTestID,
                ObservationID,
                TestNumber,
                Note,
                StartedDate,
                ConcludedDate,
                TestedByOfficeID,
                TestedByPersonID,
                ResultEnteredByOfficeID,
                ResultEnteredByPersonID,
                ValidatedByOfficeID,
                ValidatedByPersonID,
                ReadOnlyIndicator,
                NonLaboratoryTestIndicator,
                ExternalTestIndicator,
                PerformedByOfficeID,
                ReceivedDate,
                ContactPerson,
                RowStatus,
                PreviousTestStatusTypeID,
                MonitoringSessionID,
                HumanDiseaseReportID,
                VeterinaryDiseaseReportID,
                VectorID
            )
            SELECT idfTesting,
                   idfsTestName,
                   idfsTestCategory,
                   idfsTestResult,
                   idfsTestStatus,
                   idfsDiagnosis,
                   idfMaterial,
                   idfBatchTest,
                   idfObservation,
                   intTestNumber,
                   strNote,
                   datStartedDate,
                   datConcludedDate,
                   idfTestedByOffice,
                   idfTestedByPerson,
                   idfResultEnteredByOffice,
                   idfResultEnteredByPerson,
                   idfValidatedByOffice,
                   idfValidatedByPerson,
                   blnReadOnly,
                   blnNonLaboratoryTest,
                   blnExternalTest,
                   idfPerformedByOffice,
                   datReceivedDate,
                   strContactPerson,
                   intRowStatus,
                   PreviousTestStatusID,
                   idfMonitoringSession,
                   idfHumanCase,
                   idfVetCase,
                   idfVector
            FROM dbo.tlbTesting
            WHERE idfTesting = @TestID;

            UPDATE dbo.tlbTesting
            SET idfsTestName = @TestNameTypeID,
                idfsTestCategory = @TestCategoryTypeID,
                idfsTestResult = @TestResultTypeID,
                idfsTestStatus = @TestStatusTypeID,
                PreviousTestStatusID = @PreviousTestStatusTypeID,
                idfsDiagnosis = @DiseaseID,
                idfMaterial = @SampleID,
                idfBatchTest = @BatchTestID,
                idfObservation = @ObservationID,
                intTestNumber = @TestNumber,
                strNote = @Note,
                intRowStatus = @RowStatus,
                datStartedDate = @StartedDate,
                datConcludedDate = @ConcludedDate,
                idfTestedByOffice = @TestedByOrganizationID,
                idfTestedByPerson = @TestedByPersonID,
                idfResultEnteredByOffice = @ResultEnteredByOrganizationID,
                idfResultEnteredByPerson = @ResultEnteredByPersonID,
                idfValidatedByOffice = @ValidatedByOrganizationID,
                idfValidatedByPerson = @ValidatedByPersonID,
                blnReadOnly = @ReadOnlyIndicator,
                blnNonLaboratoryTest = @NonLaboratoryTestIndicator,
                blnExternalTest = @ExternalTestIndicator,
                idfPerformedByOffice = @PerformedByOrganizationID,
                datReceivedDate = @ReceivedDate,
                strContactPerson = @ContactPerson,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE(),
                idfHumanCase = @HumanDiseaseReportID,
                idfVetCase = @VeterinaryDiseaseReportID,
                idfMonitoringSession = @MonitoringSessionID,
                idfVector = @VectorID
            WHERE idfTesting = @TestID;

            INSERT INTO @TestAfterEdit
            (
                TestID,
                TestNameTypeID,
                TestCategoryTypeID,
                TestResultTypeID,
                TestStatusTypeID,
                DiseaseID,
                SampleID,
                BatchTestID,
                ObservationID,
                TestNumber,
                Note,
                StartedDate,
                ConcludedDate,
                TestedByOfficeID,
                TestedByPersonID,
                ResultEnteredByOfficeID,
                ResultEnteredByPersonID,
                ValidatedByOfficeID,
                ValidatedByPersonID,
                ReadOnlyIndicator,
                NonLaboratoryTestIndicator,
                ExternalTestIndicator,
                PerformedByOfficeID,
                ReceivedDate,
                ContactPerson,
                RowStatus,
                PreviousTestStatusTypeID,
                MonitoringSessionID,
                HumanDiseaseReportID,
                VeterinaryDiseaseReportID,
                VectorID
            )
            SELECT idfTesting,
                   idfsTestName,
                   idfsTestCategory,
                   idfsTestResult,
                   idfsTestStatus,
                   idfsDiagnosis,
                   idfMaterial,
                   idfBatchTest,
                   idfObservation,
                   intTestNumber,
                   strNote,
                   datStartedDate,
                   datConcludedDate,
                   idfTestedByOffice,
                   idfTestedByPerson,
                   idfResultEnteredByOffice,
                   idfResultEnteredByPerson,
                   idfValidatedByOffice,
                   idfValidatedByPerson,
                   blnReadOnly,
                   blnNonLaboratoryTest,
                   blnExternalTest,
                   idfPerformedByOffice,
                   datReceivedDate,
                   strContactPerson,
                   intRowStatus,
                   PreviousTestStatusID,
                   idfMonitoringSession,
                   idfHumanCase,
                   idfVetCase,
                   idfVector
            FROM dbo.tlbTesting
            WHERE idfTesting = @TestID;

            IF @HumanDiseaseReportID IS NOT NULL
               AND @TestStatusTypeID = 10001007 -- Deleted
            BEGIN
                IF
                (
                    SELECT COUNT(*)
                    FROM dbo.tlbTesting
                    WHERE idfHumanCase = @HumanDiseaseReportID
                          AND (
                                  intRowStatus = 0
                                  AND idfsTestStatus <> 10001007
                              )
                ) = 0
                BEGIN
                    INSERT INTO @HumanDiseaseReportBeforeEdit
                    SELECT idfHumanCase,
                           idfsYNTestsConducted
                    FROM dbo.tlbHumanCase
                    WHERE idfHumanCase = @HumanDiseaseReportID;

                    UPDATE dbo.tlbHumanCase
                    SET idfsYNTestsConducted = 10100002, -- No
                        AuditUpdateDTM = GETDATE(),
                        AuditUpdateUser = @AuditUserName
                    WHERE idfHumanCase = @HumanDiseaseReportID;

                    INSERT INTO @HumanDiseaseReportAfterEdit
                    SELECT idfHumanCase,
                           idfsYNTestsConducted
                    FROM dbo.tlbHumanCase
                    WHERE idfHumanCase = @HumanDiseaseReportID;

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableHumanDiseaseReportID,
                           4578420000000,
                           a.HumanDiseaseReportID,
                           NULL,
                           b.TestsConductedTypeID,
                           a.TestsConductedTypeID,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM @HumanDiseaseReportAfterEdit a
                        FULL JOIN @HumanDiseaseReportBeforeEdit b
                            ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
                    WHERE (a.TestsConductedTypeID <> b.TestsConductedTypeID)
                          OR (
                                 a.TestsConductedTypeID IS NOT NULL
                                 AND b.TestsConductedTypeID IS NULL
                             )
                          OR (
                                 a.TestsConductedTypeID IS NULL
                                 AND b.TestsConductedTypeID IS NOT NULL
                             );
                END
            END
            ELSE IF @VeterinaryDiseaseReportID IS NOT NULL
                    AND @TestStatusTypeID = 10001007 -- Deleted
            BEGIN
                IF
                (
                    SELECT COUNT(*)
                    FROM dbo.tlbTesting
                    WHERE idfVetCase = @VeterinaryDiseaseReportID
                          AND (
                                  intRowStatus = 0
                                  AND idfsTestStatus <> 10001007
                              )
                ) = 0
                BEGIN
                    INSERT INTO @VeterinaryDiseaseReportBeforeEdit
                    SELECT idfVetCase,
                           idfsYNTestsConducted
                    FROM dbo.tlbVetCase
                    WHERE idfVetCase = @VeterinaryDiseaseReportID;

                    UPDATE dbo.tlbVetCase
                    SET idfsYNTestsConducted = 10100002, -- No
                        AuditUpdateDTM = GETDATE(),
                        AuditUpdateUser = @AuditUserName
                    WHERE idfVetCase = @VeterinaryDiseaseReportID;

                    INSERT INTO @VeterinaryDiseaseReportAfterEdit
                    SELECT idfVetCase,
                           idfsYNTestsConducted
                    FROM dbo.tlbVetCase
                    WHERE idfVetCase = @VeterinaryDiseaseReportID;

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableVeterinaryDiseaseReportID,
                           4578870000000,
                           a.VeterinaryDiseaseReportID,
                           NULL,
                           b.TestsConductedTypeID,
                           a.TestsConductedTypeID,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM @VeterinaryDiseaseReportAfterEdit a
                        FULL JOIN @VeterinaryDiseaseReportBeforeEdit b
                            ON a.VeterinaryDiseaseReportID = b.VeterinaryDiseaseReportID
                    WHERE (a.TestsConductedTypeID <> b.TestsConductedTypeID)
                          OR (
                                 a.TestsConductedTypeID IS NOT NULL
                                 AND b.TestsConductedTypeID IS NULL
                             )
                          OR (
                                 a.TestsConductedTypeID IS NULL
                                 AND b.TestsConductedTypeID IS NOT NULL
                             );
                END
            END

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   49545430000000,
                   a.TestID,
                   NULL,
                   b.TestNameTypeID,
                   a.TestNameTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.TestNameTypeID <> b.TestNameTypeID)
                  OR (
                         a.TestNameTypeID IS NOT NULL
                         AND b.TestNameTypeID IS NULL
                     )
                  OR (
                         a.TestNameTypeID IS NULL
                         AND b.TestNameTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   49545440000000,
                   a.TestID,
                   NULL,
                   b.TestCategoryTypeID,
                   a.TestCategoryTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.TestCategoryTypeID <> b.TestCategoryTypeID)
                  OR (
                         a.TestCategoryTypeID IS NOT NULL
                         AND b.TestCategoryTypeID IS NULL
                     )
                  OR (
                         a.TestCategoryTypeID IS NULL
                         AND b.TestCategoryTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   80510000000,
                   a.TestID,
                   NULL,
                   b.TestResultTypeID,
                   a.TestResultTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.TestResultTypeID <> b.TestResultTypeID)
                  OR (
                         a.TestResultTypeID IS NOT NULL
                         AND b.TestResultTypeID IS NULL
                     )
                  OR (
                         a.TestResultTypeID IS NULL
                         AND b.TestResultTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   4572510000000,
                   a.TestID,
                   NULL,
                   b.TestStatusTypeID,
                   a.TestStatusTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.TestStatusTypeID <> b.TestStatusTypeID)
                  OR (
                         a.TestStatusTypeID IS NOT NULL
                         AND b.TestStatusTypeID IS NULL
                     )
                  OR (
                         a.TestStatusTypeID IS NULL
                         AND b.TestStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   4572520000000,
                   a.TestID,
                   NULL,
                   b.DiseaseID,
                   a.DiseaseID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.DiseaseID <> b.DiseaseID)
                  OR (
                         a.DiseaseID IS NOT NULL
                         AND b.DiseaseID IS NULL
                     )
                  OR (
                         a.DiseaseID IS NULL
                         AND b.DiseaseID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   4576430000000,
                   a.TestID,
                   NULL,
                   b.SampleID,
                   a.SampleID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.SampleID <> b.SampleID)
                  OR (
                         a.SampleID IS NOT NULL
                         AND b.SampleID IS NULL
                     )
                  OR (
                         a.SampleID IS NULL
                         AND b.SampleID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   80470000000,
                   a.TestID,
                   NULL,
                   b.BatchTestID,
                   a.BatchTestID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.BatchTestID <> b.BatchTestID)
                  OR (
                         a.BatchTestID IS NOT NULL
                         AND b.BatchTestID IS NULL
                     )
                  OR (
                         a.BatchTestID IS NULL
                         AND b.BatchTestID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   80500000000,
                   a.TestID,
                   NULL,
                   b.ObservationID,
                   a.ObservationID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.ObservationID <> b.ObservationID)
                  OR (
                         a.ObservationID IS NOT NULL
                         AND b.ObservationID IS NULL
                     )
                  OR (
                         a.ObservationID IS NULL
                         AND b.ObservationID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   80540000000,
                   a.TestID,
                   NULL,
                   b.TestNumber,
                   a.TestNumber,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.TestNumber <> b.TestNumber)
                  OR (
                         a.TestNumber IS NOT NULL
                         AND b.TestNumber IS NULL
                     )
                  OR (
                         a.TestNumber IS NULL
                         AND b.TestNumber IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   4572540000000,
                   a.TestID,
                   NULL,
                   b.Note,
                   a.Note,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.Note <> b.Note)
                  OR (
                         a.Note IS NOT NULL
                         AND b.Note IS NULL
                     )
                  OR (
                         a.Note IS NULL
                         AND b.Note IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   4578540000000,
                   a.TestID,
                   NULL,
                   b.StartedDate,
                   a.StartedDate,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.StartedDate <> b.StartedDate)
                  OR (
                         a.StartedDate IS NOT NULL
                         AND b.StartedDate IS NULL
                     )
                  OR (
                         a.StartedDate IS NULL
                         AND b.StartedDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   4578550000000,
                   a.TestID,
                   NULL,
                   b.ConcludedDate,
                   a.ConcludedDate,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.ConcludedDate <> b.ConcludedDate)
                  OR (
                         a.ConcludedDate IS NOT NULL
                         AND b.ConcludedDate IS NULL
                     )
                  OR (
                         a.ConcludedDate IS NULL
                         AND b.ConcludedDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   4578560000000,
                   a.TestID,
                   NULL,
                   b.TestedByOfficeID,
                   a.TestedByOfficeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.TestedByOfficeID <> b.TestedByOfficeID)
                  OR (
                         a.TestedByOfficeID IS NOT NULL
                         AND b.TestedByOfficeID IS NULL
                     )
                  OR (
                         a.TestedByOfficeID IS NULL
                         AND b.TestedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   4578570000000,
                   a.TestID,
                   NULL,
                   b.TestedByPersonID,
                   a.TestedByPersonID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.TestedByPersonID <> b.TestedByPersonID)
                  OR (
                         a.TestedByPersonID IS NOT NULL
                         AND b.TestedByPersonID IS NULL
                     )
                  OR (
                         a.TestedByPersonID IS NULL
                         AND b.TestedByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   4578580000000,
                   a.TestID,
                   NULL,
                   b.ResultEnteredByOfficeID,
                   a.ResultEnteredByOfficeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.ResultEnteredByOfficeID <> b.ResultEnteredByOfficeID)
                  OR (
                         a.ResultEnteredByOfficeID IS NOT NULL
                         AND b.ResultEnteredByOfficeID IS NULL
                     )
                  OR (
                         a.ResultEnteredByOfficeID IS NULL
                         AND b.ResultEnteredByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   4578590000000,
                   a.TestID,
                   NULL,
                   b.ResultEnteredByPersonID,
                   a.ResultEnteredByPersonID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.ResultEnteredByPersonID <> b.ResultEnteredByPersonID)
                  OR (
                         a.ResultEnteredByPersonID IS NOT NULL
                         AND b.ResultEnteredByPersonID IS NULL
                     )
                  OR (
                         a.ResultEnteredByPersonID IS NULL
                         AND b.ResultEnteredByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   4578600000000,
                   a.TestID,
                   NULL,
                   b.ValidatedByOfficeID,
                   a.ValidatedByOfficeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.ValidatedByOfficeID <> b.ValidatedByOfficeID)
                  OR (
                         a.ValidatedByOfficeID IS NOT NULL
                         AND b.ValidatedByOfficeID IS NULL
                     )
                  OR (
                         a.ValidatedByOfficeID IS NULL
                         AND b.ValidatedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   4578610000000,
                   a.TestID,
                   NULL,
                   b.ValidatedByPersonID,
                   a.ValidatedByPersonID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.ValidatedByPersonID <> b.ValidatedByPersonID)
                  OR (
                         a.ValidatedByPersonID IS NOT NULL
                         AND b.ValidatedByPersonID IS NULL
                     )
                  OR (
                         a.ValidatedByPersonID IS NULL
                         AND b.ValidatedByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   4578740000000,
                   a.TestID,
                   NULL,
                   b.ReadOnlyIndicator,
                   a.ReadOnlyIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.ReadOnlyIndicator <> b.ReadOnlyIndicator)
                  OR (
                         a.ReadOnlyIndicator IS NOT NULL
                         AND b.ReadOnlyIndicator IS NULL
                     )
                  OR (
                         a.ReadOnlyIndicator IS NULL
                         AND b.ReadOnlyIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   4578760000000,
                   a.TestID,
                   NULL,
                   b.NonLaboratoryTestIndicator,
                   a.NonLaboratoryTestIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.NonLaboratoryTestIndicator <> b.NonLaboratoryTestIndicator)
                  OR (
                         a.NonLaboratoryTestIndicator IS NOT NULL
                         AND b.NonLaboratoryTestIndicator IS NULL
                     )
                  OR (
                         a.NonLaboratoryTestIndicator IS NULL
                         AND b.NonLaboratoryTestIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   50815850000000,
                   a.TestID,
                   NULL,
                   b.ExternalTestIndicator,
                   a.ExternalTestIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.ExternalTestIndicator <> b.ExternalTestIndicator)
                  OR (
                         a.ExternalTestIndicator IS NOT NULL
                         AND b.ExternalTestIndicator IS NULL
                     )
                  OR (
                         a.ExternalTestIndicator IS NULL
                         AND b.ExternalTestIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   50815860000000,
                   a.TestID,
                   NULL,
                   b.PerformedByOfficeID,
                   a.PerformedByOfficeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.PerformedByOfficeID <> b.PerformedByOfficeID)
                  OR (
                         a.PerformedByOfficeID IS NOT NULL
                         AND b.PerformedByOfficeID IS NULL
                     )
                  OR (
                         a.PerformedByOfficeID IS NULL
                         AND b.PerformedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   50815870000000,
                   a.TestID,
                   NULL,
                   b.ReceivedDate,
                   a.ReceivedDate,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.ReceivedDate <> b.ReceivedDate)
                  OR (
                         a.ReceivedDate IS NOT NULL
                         AND b.ReceivedDate IS NULL
                     )
                  OR (
                         a.ReceivedDate IS NULL
                         AND b.ReceivedDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   50815880000000,
                   a.TestID,
                   NULL,
                   b.ContactPerson,
                   a.ContactPerson,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.ContactPerson <> b.ContactPerson)
                  OR (
                         a.ContactPerson IS NOT NULL
                         AND b.ContactPerson IS NULL
                     )
                  OR (
                         a.ContactPerson IS NULL
                         AND b.ContactPerson IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   51586990000032,
                   a.TestID,
                   NULL,
                   b.PreviousTestStatusTypeID,
                   a.PreviousTestStatusTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.PreviousTestStatusTypeID <> b.PreviousTestStatusTypeID)
                  OR (
                         a.PreviousTestStatusTypeID IS NOT NULL
                         AND b.PreviousTestStatusTypeID IS NULL
                     )
                  OR (
                         a.PreviousTestStatusTypeID IS NULL
                         AND b.PreviousTestStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   51586990000028,
                   a.TestID,
                   NULL,
                   b.MonitoringSessionID,
                   a.MonitoringSessionID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.MonitoringSessionID <> b.MonitoringSessionID)
                  OR (
                         a.MonitoringSessionID IS NOT NULL
                         AND b.MonitoringSessionID IS NULL
                     )
                  OR (
                         a.MonitoringSessionID IS NULL
                         AND b.MonitoringSessionID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   51586990000029,
                   a.TestID,
                   NULL,
                   b.HumanDiseaseReportID,
                   a.HumanDiseaseReportID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.HumanDiseaseReportID <> b.HumanDiseaseReportID)
                  OR (
                         a.HumanDiseaseReportID IS NOT NULL
                         AND b.HumanDiseaseReportID IS NULL
                     )
                  OR (
                         a.HumanDiseaseReportID IS NULL
                         AND b.HumanDiseaseReportID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   51586990000030,
                   a.TestID,
                   NULL,
                   b.VeterinaryDiseaseReportID,
                   a.VeterinaryDiseaseReportID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.VeterinaryDiseaseReportID <> b.VeterinaryDiseaseReportID)
                  OR (
                         a.VeterinaryDiseaseReportID IS NOT NULL
                         AND b.VeterinaryDiseaseReportID IS NULL
                     )
                  OR (
                         a.VeterinaryDiseaseReportID IS NULL
                         AND b.VeterinaryDiseaseReportID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableTestID,
                   51586990000031,
                   a.TestID,
                   NULL,
                   b.VectorID,
                   a.VectorID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.VectorID <> b.VectorID)
                  OR (
                         a.VectorID IS NOT NULL
                         AND b.VectorID IS NULL
                     )
                  OR (
                         a.VectorID IS NULL
                         AND b.VectorID IS NOT NULL
                     );
        END;

        IF @TestStatusTypeID = 10001003 -- In Progress
           OR @TestStatusTypeID = 10001004 -- Preliminary
        BEGIN
            INSERT INTO @SampleBeforeEdit
            SELECT idfMaterial,
                   TestUnassignedIndicator,
                   TestCompletedIndicator
            FROM dbo.tlbMaterial
            WHERE idfMaterial = @SampleID;

            UPDATE dbo.tlbMaterial
            SET TestUnassignedIndicator = 0,
                TestCompletedIndicator = 0
            WHERE idfMaterial = @SampleID;

            INSERT INTO @SampleAfterEdit
            SELECT idfMaterial,
                   TestUnassignedIndicator,
                   TestCompletedIndicator
            FROM dbo.tlbMaterial
            WHERE idfMaterial = @SampleID;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   51586990000037,
                   a.SampleID,
                   NULL,
                   b.TestUnassignedIndicator,
                   a.TestUnassignedIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit a
                FULL JOIN @SampleBeforeEdit b
                    ON a.SampleID = b.SampleID
            WHERE (a.TestUnassignedIndicator <> b.TestUnassignedIndicator)
                  OR (
                         a.TestUnassignedIndicator IS NOT NULL
                         AND b.TestUnassignedIndicator IS NULL
                     )
                  OR (
                         a.TestUnassignedIndicator IS NULL
                         AND b.TestUnassignedIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableSampleID,
                   51586990000038,
                   a.SampleID,
                   NULL,
                   b.TestCompletedIndicator,
                   a.TestCompletedIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @SampleAfterEdit a
                FULL JOIN @SampleBeforeEdit b
                    ON a.SampleID = b.SampleID
            WHERE (a.TestCompletedIndicator <> b.TestCompletedIndicator)
                  OR (
                         a.TestCompletedIndicator IS NOT NULL
                         AND b.TestCompletedIndicator IS NULL
                     )
                  OR (
                         a.TestCompletedIndicator IS NULL
                         AND b.TestCompletedIndicator IS NOT NULL
                     );
        END;
        ELSE IF @TestStatusTypeID = 10001001 -- Final
                OR @TestStatusTypeID = 10001006 -- Amended
        BEGIN
            SELECT @TestAssignedCount = COUNT(idfTesting)
            FROM dbo.tlbTesting
            WHERE idfMaterial = @SampleID
                  AND intRowStatus = 0
                  AND idfsTestStatus IN ( 10001003, 10001004 );

            IF @TestAssignedCount = 0
            BEGIN
                INSERT INTO @SampleBeforeEdit
                SELECT idfMaterial,
                       TestUnassignedIndicator,
                       TestCompletedIndicator
                FROM dbo.tlbMaterial
                WHERE idfMaterial = @SampleID;

                UPDATE dbo.tlbMaterial
                SET TestCompletedIndicator = 1,
                    TestUnassignedIndicator = 0
                WHERE idfMaterial = @SampleID;

                INSERT INTO @SampleAfterEdit
                SELECT idfMaterial,
                       TestUnassignedIndicator,
                       TestCompletedIndicator
                FROM dbo.tlbMaterial
                WHERE idfMaterial = @SampleID;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableSampleID,
                       51586990000037,
                       a.SampleID,
                       NULL,
                       b.TestUnassignedIndicator,
                       a.TestUnassignedIndicator,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit a
                    FULL JOIN @SampleBeforeEdit b
                        ON a.SampleID = b.SampleID
                WHERE (a.TestUnassignedIndicator <> b.TestUnassignedIndicator)
                      OR (
                             a.TestUnassignedIndicator IS NOT NULL
                             AND b.TestUnassignedIndicator IS NULL
                         )
                      OR (
                             a.TestUnassignedIndicator IS NULL
                             AND b.TestUnassignedIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableSampleID,
                       51586990000038,
                       a.SampleID,
                       NULL,
                       b.TestCompletedIndicator,
                       a.TestCompletedIndicator,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit a
                    FULL JOIN @SampleBeforeEdit b
                        ON a.SampleID = b.SampleID
                WHERE (a.TestCompletedIndicator <> b.TestCompletedIndicator)
                      OR (
                             a.TestCompletedIndicator IS NOT NULL
                             AND b.TestCompletedIndicator IS NULL
                         )
                      OR (
                             a.TestCompletedIndicator IS NULL
                             AND b.TestCompletedIndicator IS NOT NULL
                         );
            END
            ELSE
            BEGIN
                INSERT INTO @SampleBeforeEdit
                SELECT idfMaterial,
                       TestUnassignedIndicator,
                       TestCompletedIndicator
                FROM dbo.tlbMaterial
                WHERE idfMaterial = @SampleID;

                UPDATE dbo.tlbMaterial
                SET TestCompletedIndicator = 0,
                    TestUnassignedIndicator = 1
                WHERE idfMaterial = @SampleID;

                INSERT INTO @SampleAfterEdit
                SELECT idfMaterial,
                       TestUnassignedIndicator,
                       TestCompletedIndicator
                FROM dbo.tlbMaterial
                WHERE idfMaterial = @SampleID;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableSampleID,
                       51586990000037,
                       a.SampleID,
                       NULL,
                       b.TestUnassignedIndicator,
                       a.TestUnassignedIndicator,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit a
                    FULL JOIN @SampleBeforeEdit b
                        ON a.SampleID = b.SampleID
                WHERE (a.TestUnassignedIndicator <> b.TestUnassignedIndicator)
                      OR (
                             a.TestUnassignedIndicator IS NOT NULL
                             AND b.TestUnassignedIndicator IS NULL
                         )
                      OR (
                             a.TestUnassignedIndicator IS NULL
                             AND b.TestUnassignedIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableSampleID,
                       51586990000038,
                       a.SampleID,
                       NULL,
                       b.TestCompletedIndicator,
                       a.TestCompletedIndicator,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit a
                    FULL JOIN @SampleBeforeEdit b
                        ON a.SampleID = b.SampleID
                WHERE (a.TestCompletedIndicator <> b.TestCompletedIndicator)
                      OR (
                             a.TestCompletedIndicator IS NOT NULL
                             AND b.TestCompletedIndicator IS NULL
                         )
                      OR (
                             a.TestCompletedIndicator IS NULL
                             AND b.TestCompletedIndicator IS NOT NULL
                         );
            END;
        END;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [Report].[USP_REP_Human_Aggregate_Disease_Summary_Report_Detail]...';


GO

-- ================================================================================================
-- Name: USP_REP_Human_Aggregate_Disease_Summary_Report_Detail
-- Description: PrintedForm Human Aggregate Report
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Srini Goli		08/24/2022	Initial release for Human Aggregate Report.
-- Srini Goli		10/07/2022  used Sql Veriant data type.
-- Mike Kornegay	10/17/2022	Remove temp table (not compatible with EF Power Tools)
-- Mark Wilson  	03/30/2023	added two new fields to @tempFlexForm to support changes to USP_ADMIN_FF_FlexForm_Get
/*

EXEC    [Report].[USP_REP_Human_Aggregate_Disease_Summary_Report_Detail]
        @LangID = N'en-US',
        @idfsAggrCaseType = 10102001,
        @idfAggrCaseList = '155564770001958;155564770001956'

*/
-- ================================================================================================
ALTER PROCEDURE [Report].[USP_REP_Human_Aggregate_Disease_Summary_Report_Detail] (
	@LangID AS NVARCHAR(50)
	,@idfsAggrCaseType AS  BIGINT= NULL
	,@idfAggrCaseList AS  NVARCHAR(MAX)= NULL
	)
AS
BEGIN
	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

	DECLARE @AggrCaseTable TABLE (
		[idfAggrCase] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpMatrix AS TABLE (
		intNumRow INT
		,idfAggrHumanCaseMTX BIGINT
		,idfsDiagnosis BIGINT
		,strDefault NVARCHAR(2000)
		,strIDC10 NVARCHAR(100)
		)

   DECLARE @tempFlexForm TABLE (
		idfsParentSection BIGINT
		,idfsSection BIGINT
		,idfsParameter BIGINT
		,ParentSectionName NVARCHAR(2000) -- added by MCW
		,SectionName NVARCHAR(2000)
		,ParameterName NVARCHAR(500)
		,parameterType NVARCHAR(100)
		,idfsParameterType BIGINT
		,idfsReferenceType BIGINT
		,idfsEditor BIGINT
		,SectionOrder INT
		,ParameterOrder INT
		,blnGrid BIT
		,blnFixedRowSet BIT
		,idfsEditMode BIGINT
		,idfsFormTemplate BIGINT
		,DecorElementText NVARCHAR(200) -- added by MCW
		)

	DECLARE @observationsTable TABLE (
		[idfObservation] BIGINT,
		[idfVersion] BIGINT,
		[idfsCaseFormTemplate] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpActivityParameters TABLE (
		[idfActivityParameters] BIGINT,
		[idfObservation] BIGINT,
		[idfsFormTemplate] BIGINT,
		[idfsParameter] BIGINT,
		[idfsSection] BIGINT,
		[idfRow] BIGINT,
		--[intNumRow] INT,
		[Type] BIGINT,
		[varValue] sql_variant,
		--[strNameValue] NVARCHAR(200),
		[numRow] INT,
		--[FakeField ] INT,
		[ParameterType]  BIGINT
		)

	DECLARE @tmpDetails TABLE (
		idfCaseObservation BIGINT,
		idfsCaseFormTemplate BIGINT,
		idfVersion BIGINT
	)

	BEGIN TRY
			BEGIN

			--Get Selected Agg Cases
			INSERT INTO @AggrCaseTable (
					[idfAggrCase],
					[intRowNumber]
					)
				SELECT CAST([Value] AS BIGINT),
					ROW_NUMBER() OVER (
						ORDER BY [Value]
						)
				FROM [dbo].[FN_GBL_SYS_SplitList](@idfAggrCaseList, NULL, NULL)

				--Get this SQl from [dbo].[USP_AGG_CASE_GETDETAIL]
				INSERT INTO @tmpDetails
				SELECT 
					a.idfCaseObservation
					,CaseObs.idfsFormTemplate AS idfsCaseFormTemplate
					,a.idfVersion
				--INTO #tmpDetails
				FROM dbo.tlbAggrCase a	
				LEFT JOIN dbo.tlbObservation CaseObs ON idfCaseObservation = CaseObs.idfObservation
				WHERE a.intRowStatus = 0
				AND a.idfAggrCase IN (SELECT idfAggrCase FROM @AggrCaseTable)
				--AND (@idfAggrCase IS NULL OR a.idfAggrCase = @idfAggrCase)
				--	AND (
				--		CASE 
				--			WHEN @idfsAggrCaseType IS NULL
				--				THEN 1
				--			WHEN ISNULL(a.idfsAggrCaseType, '') = @idfsAggrCaseType
				--				THEN 1
				--			ELSE 0
				--			END = 1
				--		)
				--	AND (
				--		CASE 
				--			WHEN @idfAggrCase IS NULL
				--				THEN 1
				--			WHEN ISNULL(a.idfAggrCase, '') = @idfAggrCase
				--				THEN 1
				--			ELSE 0
				--			END = 1
				--		);
				
				DECLARE @idfsFormTemplate BIGINT,
						@idfVersion BIGINT

				INSERT INTO @observationsTable (
					[idfObservation],
					[idfVersion],
					[idfsCaseFormTemplate],
					[intRowNumber]
					)
				SELECT [idfCaseObservation],
					[idfVersion],
					[idfsCaseFormTemplate],
					ROW_NUMBER() OVER (
						ORDER BY [idfCaseObservation]
						)
				FROM @tmpDetails

				SELECT @idfsFormTemplate=idfsCaseFormTemplate, 
						@idfVersion= idfVersion
				FROM @observationsTable


				--Get this SQL from dbo.USP_CONF_ADMIN_AggregateHumanCaseMatrixReport_GET
				INSERT INTO @tmpMatrix
				SELECT	 
					mtx.intNumRow as intNumRow,
					mtx.idfAggrHumanCaseMTX,
					mtx.idfsDiagnosis,
					D.name AS strDefault,
					D.strIDC10

				FROM dbo.tlbAggrHumanCaseMTX mtx
				INNER JOIN dbo.FN_GBL_DiagnosisRepair(@LangID, 2, 10020002) D ON D.idfsDiagnosis = mtx.idfsDiagnosis  -- 2 = Human, use 10020002 for Aggregate cases
		
				WHERE mtx.intRowStatus = 0 AND mtx.idfVersion = @idfVersion

				--Get Flex Form header details
				INSERT INTO @tempFlexForm
				EXEC [dbo].[USP_ADMIN_FF_FlexForm_Get] 
						@LangID =@LangID, 
						@idfsDiagnosis= NULL, 
						@idfsFormType = 10034012, 
						@idfsFormTemplate=@idfsFormTemplate

				--Get Activity Parameters
				--INSERT INTO @tmpActivityParameters
				--EXEC dbo.USP_ADMIN_FF_ActivityParameters_GET
				--		@observationList = @observationList, 
				--		@LangID = @LangID
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[varValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					--CAST(AP.varValue AS NVARCHAR(MAX)),
					AP.varValue,
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfObservation FROM @observationsTable)
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0
				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow


				--Report
				SELECT	ff.ParameterName
						,ff.idfsParameter
						,ff.ParameterOrder
						,m.idfsDiagnosis
						,m.strDefault
						,m.strIDC10
						,m.intNumRow
						,ap.varValue as varValue--ap.idfRow,m.idfAggrHumanCaseMTX as idfRow
				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter and m.idfAggrHumanCaseMTX=ap.idfRow
				ORDER BY intNumRow

				--Test
				--Dynamic Pivot
				--DECLARE @ColumnToPivot  NVARCHAR(255),
				--		@ListToPivot    NVARCHAR(255),
				--		@SqlStatement NVARCHAR(MAX)
				--SET @ColumnToPivot='ParameterName'
				--SELECT @ListToPivot= COALESCE(@ListToPivot + ',','') +  N'[' + CAST(ff.ParameterName AS varchar(100)) + ']'
				--FROM @tempFlexForm ff
				--ORDER BY ParameterOrder

				----SELECT @ListToPivot
				----EXEC dbo.USP_ADMIN_DynamicPivotTableInSql @ColumnToPivot,@ListToPivot

				--  SET @SqlStatement = N'
				--	SELECT * FROM (
				--	  SELECT
				--	    [intNumRow],
				--		[strDefault],
				--		[strIDC10],
				--		[ParameterName],
				--		[varValue]
				--	  FROM #tempReport
				--	) Results
				--	PIVOT (
				--	  MAX([varValue])
				--	  FOR ['+@ColumnToPivot+']
				--	  IN (
				--		'+@ListToPivot+'
				--	  )
				--	) AS PivotTable
				--	ORDER BY intNumRow
				--  ';

			END

		--DROP TABLE IF EXISTS #tmpDetails;

	END TRY

	BEGIN CATCH
		--IF @@TRANCOUNT = 1
			--ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [Report].[USP_REP_Lim_AliquotBarCodes_GET]...';


GO
-- ================================================================================================
-- Name: report.USP_REP_Lim_AliquotBarCodes_GET
--
-- Description:	Select data for transfer report, aliquots/derivatives and print bar codes in 
-- general for the laboratory module.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mark Wilson		12/13/2021 Initial Version, converted to E7 standards
-- Stephen Long     03/31/2023 Changed date to the current date to match the use case (#4964).

/*
--Example of a call of procedure:

exec report.USP_REP_Lim_AliquotBarCodes_GET 
	@LangID=N'en-US',
	@SamplesList='42306380001294,8959170001183'
*/
-- ================================================================================================
ALTER PROCEDURE [Report].[USP_REP_Lim_AliquotBarCodes_GET]
(
    @LangID AS NVARCHAR(20),
    @SamplesList AS NVARCHAR(MAX)
)
AS
BEGIN

    SELECT (ROW_NUMBER() OVER (ORDER BY m.strCalculatedHumanName, GETDATE()) + 1)
           - ((ROW_NUMBER() OVER (ORDER BY m.strCalculatedHumanName, GETDATE()) - 1) % 4) AS RowGroup,
           1 + ((ROW_NUMBER() OVER (ORDER BY m.strCalculatedHumanName, GETDATE()) - 1) % 4) AS ColumGroup,
           m.idfMaterial,
           CONVERT(VARCHAR(20), GETDATE(), 101) datEnteringDate,
           m.strBarcode,
           m.strCalculatedHumanName AS FullName
    FROM dbo.tlbMaterial m
    WHERE m.strBarcode IS NOT NULL
          AND m.idfMaterial IN (
                                   SELECT VALUE FROM STRING_SPLIT(@SamplesList, ',')
                               )
          AND m.intRowStatus = 0;

END
GO
PRINT N'Altering Procedure [Report].[USP_REP_Veterinary_Aggregate_DiagnosticAction_Summary_Report_Detail]...';


GO
-- ================================================================================================
-- Name: USP_REP_Veterinary_Aggregate_DiagnosticAction_Summary_Report_Detail
-- Description: PrintedForm Veterinary Aggregate Report
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Mark Wilson		10/11/2022  initial cut.
-- Mike Kornegay	10/17/2022	Remove temp table (not compatible with EF Power Tools)
-- Mike Kornegay	03/27/2023	Change numeric values from int to float.
--
/*

EXEC    [Report].[USP_REP_Veterinary_Aggregate_DiagnosticAction_Summary_Report_Detail]
        @LangID = N'en-US',
        @idfAggrCaseList = 155564770001982

*/
-- ================================================================================================
ALTER PROCEDURE [Report].[USP_REP_Veterinary_Aggregate_DiagnosticAction_Summary_Report_Detail] 
(
	@LangID AS NVARCHAR(50),
	@idfAggrCaseList AS  NVARCHAR(MAX)= NULL
)
AS
BEGIN
	DROP TABLE IF EXISTS #tmpDetails;

	DECLARE @idfsCountry AS BIGINT,
			@idfsLanguage BIGINT = dbo.FN_GBL_LanguageCode_GET(@LangID);

	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

	DECLARE @AggrCaseTable TABLE (
		[idfAggrCase] BIGINT,
		[intRowNumber] INT
		)

	--Get Selected Agg Cases
	INSERT INTO @AggrCaseTable (
			[idfAggrCase],
			[intRowNumber]
			)
	SELECT CAST([Value] AS BIGINT),
		ROW_NUMBER() OVER (
			ORDER BY [Value]
			)
	FROM [dbo].[FN_GBL_SYS_SplitList](@idfAggrCaseList, NULL, NULL)

	DECLARE @tmpMatrix AS TABLE (
		intNumRow INT
		,idfAggrVetCaseMTX BIGINT
		,idfsDiagnosis BIGINT
		,idfsSpeciesType BIGINT
		,strDefault NVARCHAR(2000)
		,strOIECode NVARCHAR(100)
		,strAction NVARCHAR(300)
		)

   DECLARE @tempFlexForm TABLE (
		idfsParentSection BIGINT
		,idfsSection BIGINT
		,idfsParameter BIGINT
		,SectionName NVARCHAR(2000)
		,ParameterName NVARCHAR(500)
		,parameterType NVARCHAR(100)
		,idfsParameterType BIGINT
		,idfsReferenceType BIGINT
		,idfsEditor BIGINT
		,SectionOrder INT
		,ParameterOrder INT
		,blnGrid BIT
		,blnFixedRowSet BIT
		,idfsEditMode BIGINT
		,idfsFormTemplate BIGINT
		)

	DECLARE @observationsTable TABLE (
		[idfDiagnosticObservation] BIGINT,
		[idfDiagnosticVersion] BIGINT,
		[idfsCaseFormTemplate] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpActivityParameters TABLE (
		[idfActivityParameters] BIGINT,
		[idfObservation] BIGINT,
		[idfsFormTemplate] BIGINT,
		[idfsParameter] BIGINT,
		[idfsSection] BIGINT,
		[idfRow] BIGINT,
		--[intNumRow] INT,
		[Type] BIGINT,
		[fltValue] FLOAT,
		[varValue] sql_variant, --NVARCHAR(MAX),
		[numRow] INT,
		[ParameterType]  BIGINT
		)

	DECLARE @tmpSpeciesList TABLE (
		[idfBaseReference] BIGINT,
		strDefault NVARCHAR(2000),
		strSpecies NVARCHAR(100),
		[intRowNumber] INT
		--idfsReferenceType BIGINT
		)

	DECLARE @tmpDetails TABLE (
		idfDiagnosticObservation BIGINT,
		idfsCaseFormTemplate BIGINT,
		idfDiagnosticVersion BIGINT
	)

	DECLARE @FinalReportTable TABLE 
	(
		ParameterName NVARCHAR(300),
		strSpecies NVARCHAR(300),
		idfsParameter BIGINT,
		ParameterOrder INT,
		idfsDiagnosis BIGINT,
		strDefault NVARCHAR(300),
		strOIECode NVARCHAR(300),
		numRow INT,
		fltValue FLOAT,
		varValue SQL_VARIANT,
		strActionCode NVARCHAR(300),
		strAction NVARCHAR(300)
	)

	BEGIN TRY

			BEGIN


				--Get this SQl from [dbo].[USP_AGG_CASE_GETDETAIL]
				INSERT INTO @tmpDetails (
					idfDiagnosticObservation,
					idfsCaseFormTemplate,
					idfDiagnosticVersion
				)
				SELECT 
					a.idfDiagnosticObservation
					,CaseObs.idfsFormTemplate AS idfsCaseFormTemplate
					,a.idfDiagnosticVersion
				--INTO #tmpDetails
				FROM dbo.tlbAggrCase a	
				LEFT JOIN dbo.tlbObservation CaseObs ON a.idfDiagnosticObservation = CaseObs.idfObservation
				WHERE a.intRowStatus = 0
				AND a.idfAggrCase IN (SELECT idfAggrCase FROM @AggrCaseTable)

				DECLARE @idfsFormTemplate BIGINT,
						@idfVersion BIGINT

				INSERT INTO @observationsTable (
					[idfDiagnosticObservation],
					[idfDiagnosticVersion],
					[idfsCaseFormTemplate],
					[intRowNumber]
					)
				SELECT [idfDiagnosticObservation],
					idfDiagnosticVersion,
					idfsCaseFormTemplate,
					ROW_NUMBER() OVER (
						ORDER BY [idfDiagnosticObservation]
						)
				FROM @tmpDetails

				SELECT @idfsFormTemplate=idfsCaseFormTemplate, 
						@idfVersion= idfDiagnosticVersion
				FROM @observationsTable
				--SELECT * FROM @observationsTable

				--Get this SQL from USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GET -- dbo.USP_CONF_ADMIN_AggregateHumanCaseMatrixReport_GET
				INSERT INTO @tmpMatrix
				SELECT	 
					mtx.intNumRow as intNumRow,
					mtx.idfAggrDiagnosticActionMTX,
					mtx.idfsDiagnosis,
					mtx.idfsSpeciesType,
					D.name AS strDefault,
					D.strOIECode,
					DA.name AS strAction

				FROM dbo.tlbAggrDiagnosticActionMTX mtx
				INNER JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID, 19000021) DA ON DA.idfsReference = mtx.idfsDiagnosticAction
				INNER JOIN dbo.FN_GBL_DiagnosisRepair(@LangID, 96, 10020002) D ON D.idfsDiagnosis = mtx.idfsDiagnosis  -- 2 = Human, use 10020002 for Aggregate cases

				WHERE mtx.intRowStatus = 0 AND  mtx.idfVersion = @idfVersion
				--ORDER BY mtx.intNumRow ASC

--------------------------------------------------------------------------------------------------------------------------------
				--SpicesList
				INSERT INTO @tmpSpeciesList
				EXEC dbo.USP_CONF_GetSpeciesList_GET 
						@idfsBaseReference= 19000086,
						@intHACode=96,
						@strLanguageID=@LangID --@idfVersion=19000086
				
				--Get Flex Form for Diagnostic Actions details
				INSERT INTO @tempFlexForm
				SELECT 
					s.idfsParentSection
					,COALESCE(p.idfsSection,0) AS idfsSection
					,p.idfsParameter
					,RF.Name AS SectionName
					,PN.Name AS ParameterName
					,PTR.Name AS parameterType
					,p.idfsParameterType
					,pt.idfsReferenceType
					,p.idfsEditor
					,sdo.intOrder	AS SectionOrder
					,PDO.intOrder	AS ParameterOrder
					,s.blnGrid
					,s.blnFixedRowSet
					,PFT.idfsEditMode
					,pft.idfsFormTemplate
				FROM dbo.ffParameter p
				LEFT JOIN dbo.ffParameterForTemplate PFT ON PFT.idfsParameter = p.idfsParameter AND PFT.intRowStatus = 0
				LEFT JOIN dbo.ffSection s ON s.idfsSection = p.idfsSection
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000101) RF ON S.idfsSection = RF.idfsReference
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000071) PTR ON PTR.idfsReference = P.idfsParameterType
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000066) PN ON PN.idfsReference = P.idfsParameter
				LEFT JOIN dbo.ffParameterDesignOption PDO ON PFT.idfsParameter = PDO.idfsParameter
					AND PFT.idfsFormTemplate = PDO.idfsFormTemplate
					AND PDO.idfsLanguage = @idfsLanguage
					AND PDO.intRowStatus = 0
				LEFT JOIN dbo.ffSectionDesignOption sdo ON sdo.idfsSection = s.idfsSection 
					AND sdo.idfsFormTemplate = @idfsFormTemplate 
					AND sdo.idfsLanguage = @idfsLanguage
					AND sdo.intRowStatus = 0
				LEFT JOIN dbo.ffParameterType PT
					ON pt.idfsParameterType = p.idfsParameterType
				WHERE PFT.idfsFormTemplate = @idfsFormTemplate


				--EXEC [dbo].[USP_ADMIN_FF_FlexForm_Get] 
				--		@LangID =@LangID, 
				--		@idfsDiagnosis= NULL, 
				--		@idfsFormType = 10034023, 
				--		@idfsFormTemplate=@idfsFormTemplate

--				SELECT * FROM @tempFlexForm

				--Get Activity Parameters
				--INSERT INTO @tmpActivityParameters
				--EXEC dbo.USP_ADMIN_FF_ActivityParameters_GET
				--		@observationList = @observationList, 
				--		@LangID = @LangID

				--Get numeric values activity parameters
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[fltValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					SUM(CAST(AP.varValue AS FLOAT)),
					--CAST(AP.varValue AS NVARCHAR(MAX)),
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfDiagnosticObservation FROM @observationsTable)
				AND ISNUMERIC(CAST(AP.varValue AS NVARCHAR)) = 1
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0

				GROUP BY
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					P.idfsParameterType

				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow

				--Get non-numeric values activity parameters
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[varValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					AP.varValue,
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfDiagnosticObservation FROM @observationsTable)
				AND ISNUMERIC(CAST(AP.varValue AS NVARCHAR)) = 0
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0

				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow

				--Report
				INSERT INTO @FinalReportTable
				(
					ParameterName,
				    strSpecies,
				    idfsParameter,
				    ParameterOrder,
				    idfsDiagnosis,
				    strDefault,
				    strOIECode,
				    numRow,
				    strActionCode,
					strAction,
					fltValue
				)

				SELECT	ff.ParameterName
						,sl.strSpecies
						,ff.idfsParameter
						,ff.ParameterOrder
						,m.idfsDiagnosis
						,m.strDefault
						,m.strOIECode
						,m.intNumRow
						,m.strAction
						,m.strAction
						,SUM(fltValue)
						--,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')

				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter AND m.idfAggrVetCaseMTX=ap.idfRow
				LEFT JOIN @tmpSpeciesList sl ON sl.idfBaseReference=m.idfsSpeciesType
				GROUP BY
					ff.ParameterName
					,sl.strSpecies
					,ff.idfsParameter
					,ff.ParameterOrder
					,m.idfsDiagnosis
					,m.strDefault
					,m.strOIECode
					,m.intNumRow
					,m.strAction
					,m.strAction
					--,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')
				ORDER BY intNumRow

				--non numeric items
				INSERT INTO @FinalReportTable
				(
					ParameterName,
				    strSpecies,
				    idfsParameter,
				    ParameterOrder,
				    idfsDiagnosis,
				    strDefault,
				    strOIECode,
				    numRow,
				    strActionCode,
					strAction,
					varValue
				)

				SELECT	ff.ParameterName
						,sl.strSpecies
						,ff.idfsParameter
						,ff.ParameterOrder
						,m.idfsDiagnosis
						,m.strDefault
						,m.strOIECode
						,m.intNumRow
						,m.strAction
						,m.strAction
						,ap.varValue
						--,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')

				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter AND m.idfAggrVetCaseMTX=ap.idfRow
				LEFT JOIN @tmpSpeciesList sl ON sl.idfBaseReference=m.idfsSpeciesType
				WHERE ap.varValue IS NOT NULL
				
				ORDER BY intNumRow

				--final query
				SELECT 
					ParameterName,
					strSpecies,
					idfsParameter,
					ParameterOrder,
					idfsDiagnosis,
					strDefault,
					strOIECode,
					numRow AS intNumRow,
					strAction,
					strActionCode,
					CAST(fltValue AS NVARCHAR(300)) AS varValue
					
				FROM @FinalReportTable
				WHERE varValue IS NULL

				UNION ALL 

				SELECT
					DISTINCT t.ParameterName,
					t.strSpecies,
					t.idfsParameter,
					t.ParameterOrder,
					t.idfsDiagnosis,
					t.strDefault,
					t.strOIECode,
					t.numRow AS intNumRow,
					strAction,
					strActionCode,
					STUFF((SELECT distinct ', ' + CAST(t1.varValue AS NVARCHAR(300))
						 FROM @FinalReportTable t1
						 WHERE t.ParameterName = t1.ParameterName
						 AND t.strSpecies = t1.strSpecies
						 AND t.idfsParameter = t1.idfsParameter
						 AND t.ParameterOrder = t1.ParameterOrder
						 AND t.idfsDiagnosis = t1.idfsDiagnosis
						 AND t.strDefault = t1.strDefault
						 AND t.strOIECode = t1.strOIECode
						 FOR XML PATH(''), TYPE
							).value('.', 'NVARCHAR(MAX)') 
						,1,2,'') varValue
				from @FinalReportTable t
				WHERE t.varValue IS NOT NULL;				
			END

		--DROP TABLE IF EXISTS #tmpDetails;

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT = 1
			ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [Report].[USP_REP_Veterinary_Aggregate_ProphylacticAction_Summary_Report_Detail]...';


GO
-- ================================================================================================
-- Name: USP_REP_Veterinary_Aggregate_ProphylacticAction_Summary_Report_Detail
-- Description: PrintedForm Veterinary Aggregate Report
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Mark Wilson		10/11/2022  initial cut.
-- Mike Kornegay	10/17/2022	Remove temp table (not compatible with EF Power Tools)
-- Mike Kornegay	10/25/2022  Separate numerical results from string results
-- Mike Kornegay	03/27/2023	Change numeric values from int to float.
--
/*

EXEC    [Report].[USP_REP_Veterinary_Aggregate_ProphylacticAction_Summary_Report_Detail]
        @LangID = N'en-US',
        @idfAggrCaseList = '128822070001294;127398630001294;121195250001294'

*/
-- ================================================================================================
ALTER PROCEDURE [Report].[USP_REP_Veterinary_Aggregate_ProphylacticAction_Summary_Report_Detail] 
(
	@LangID AS NVARCHAR(50),
	@idfAggrCaseList AS  NVARCHAR(MAX)= NULL
)
AS
BEGIN
	DROP TABLE IF EXISTS #tmpDetails;

	DECLARE @idfsCountry AS BIGINT,
			@idfsLanguage BIGINT = dbo.FN_GBL_LanguageCode_GET(@LangID);

	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

	DECLARE @AggrCaseTable TABLE (
		[idfAggrCase] BIGINT,
		[intRowNumber] INT
		)

	--Get Selected Agg Cases
	INSERT INTO @AggrCaseTable (
			[idfAggrCase],
			[intRowNumber]
			)
	SELECT CAST([Value] AS BIGINT),
		ROW_NUMBER() OVER (
			ORDER BY [Value]
			)
	FROM [dbo].[FN_GBL_SYS_SplitList](@idfAggrCaseList, NULL, NULL)

	DECLARE @tmpMatrix AS TABLE (
		intNumRow INT
		,idfAggrVetCaseMTX BIGINT
		,idfsDiagnosis BIGINT
		,idfsSpeciesType BIGINT
		,strDefault NVARCHAR(2000)
		,strOIECode NVARCHAR(100)
		,strActionCode NVARCHAR(200)
		,strAction NVARCHAR(300)
		)

   DECLARE @tempFlexForm TABLE (
		idfsParentSection BIGINT
		,idfsSection BIGINT
		,idfsParameter BIGINT
		,SectionName NVARCHAR(2000)
		,ParameterName NVARCHAR(500)
		,parameterType NVARCHAR(100)
		,idfsParameterType BIGINT
		,idfsReferenceType BIGINT
		,idfsEditor BIGINT
		,SectionOrder INT
		,ParameterOrder INT
		,blnGrid BIT
		,blnFixedRowSet BIT
		,idfsEditMode BIGINT
		,idfsFormTemplate BIGINT
		)

	DECLARE @observationsTable TABLE (
		[idfProphylacticObservation] BIGINT,
		[idfProphylacticVersion] BIGINT,
		[idfsCaseFormTemplate] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpActivityParameters TABLE (
		[idfActivityParameters] BIGINT,
		[idfObservation] BIGINT,
		[idfsFormTemplate] BIGINT,
		[idfsParameter] BIGINT,
		[idfsSection] BIGINT,
		[idfRow] BIGINT,
		[Type] BIGINT,
		[fltValue] FLOAT,
		[varValue] sql_variant, --NVARCHAR(MAX),
		[numRow] INT,
		[ParameterType]  BIGINT
		)

	DECLARE @tmpSpeciesList TABLE (
		[idfBaseReference] BIGINT,
		strDefault NVARCHAR(2000),
		strSpecies NVARCHAR(100),
		[intRowNumber] INT
		)

	DECLARE @tmpDetails TABLE (
		idfProphylacticObservation BIGINT,
		idfsCaseFormTemplate BIGINT,
		idfProphylacticVersion BIGINT
	)

	DECLARE @FinalReportTable TABLE 
	(
		ParameterName NVARCHAR(300),
		strSpecies NVARCHAR(300),
		idfsParameter BIGINT,
		ParameterOrder INT,
		idfsDiagnosis BIGINT,
		strDefault NVARCHAR(300),
		strOIECode NVARCHAR(300),
		numRow INT,
		fltValue FLOAT,
		varValue SQL_VARIANT,
		strActionCode NVARCHAR(300),
		strAction NVARCHAR(300)
	)

	BEGIN TRY

			BEGIN


				--Get this SQl from [dbo].[USP_AGG_CASE_GETDETAIL]
				INSERT INTO @tmpDetails
				SELECT 
					a.idfProphylacticObservation
					,CaseObs.idfsFormTemplate AS idfsCaseFormTemplate
					,a.idfProphylacticVersion
				--INTO #tmpDetails
				FROM dbo.tlbAggrCase a	
				LEFT JOIN dbo.tlbObservation CaseObs ON a.idfProphylacticObservation = CaseObs.idfObservation
				WHERE a.intRowStatus = 0
				AND a.idfAggrCase IN (SELECT idfAggrCase FROM @AggrCaseTable)

				DECLARE @idfsFormTemplate BIGINT,
						@idfVersion BIGINT

				INSERT INTO @observationsTable (
					[idfProphylacticObservation],
					[idfProphylacticVersion],
					[idfsCaseFormTemplate],
					[intRowNumber]
					)
				SELECT [idfProphylacticObservation],
					idfProphylacticVersion,
					idfsCaseFormTemplate,
					ROW_NUMBER() OVER (
						ORDER BY [idfProphylacticObservation]
						)
				FROM @tmpDetails

				SELECT @idfsFormTemplate=idfsCaseFormTemplate, 
						@idfVersion= idfProphylacticVersion
				FROM @observationsTable
				--SELECT * FROM @observationsTable

				--Get this SQL from USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GET -- dbo.USP_CONF_ADMIN_AggregateHumanCaseMatrixReport_GET
				INSERT INTO @tmpMatrix
				SELECT	 
					mtx.intNumRow as intNumRow,
					mtx.idfAggrProphylacticActionMTX,
					mtx.idfsDiagnosis,
					mtx.idfsSpeciesType,
					D.name AS strDefault,
					D.strOIECode,
					PAC.strActionCode,
					PA.name AS strAction

				FROM dbo.tlbAggrProphylacticActionMTX mtx
				INNER JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID, 19000074) PA ON PA.idfsReference = mtx.idfsProphilacticAction
				INNER JOIN dbo.trtProphilacticAction PAC ON PAC.idfsProphilacticAction = PA.idfsReference
				INNER JOIN dbo.FN_GBL_DiagnosisRepair(@LangID, 96, 10020002) D ON D.idfsDiagnosis = mtx.idfsDiagnosis  -- 2 = Human, use 10020002 for Aggregate cases

				WHERE mtx.intRowStatus = 0 AND  mtx.idfVersion = @idfVersion
				ORDER BY mtx.intNumRow ASC

--------------------------------------------------------------------------------------------------------------------------------
				--SpeiciesList
				INSERT INTO @tmpSpeciesList
				EXEC dbo.USP_CONF_GetSpeciesList_GET 
						@idfsBaseReference= 19000086,
						@intHACode=96,
						@strLanguageID=@LangID --@idfVersion=19000086
				
				--Get Flex Form for Prophylactic Actions details
				INSERT INTO @tempFlexForm
				SELECT 
					s.idfsParentSection
					,COALESCE(p.idfsSection,0) AS idfsSection
					,p.idfsParameter
					,RF.Name AS SectionName
					,PN.Name AS ParameterName
					,PTR.Name AS parameterType
					,p.idfsParameterType
					,pt.idfsReferenceType
					,p.idfsEditor
					,sdo.intOrder	AS SectionOrder
					,PDO.intOrder	AS ParameterOrder
					,s.blnGrid
					,s.blnFixedRowSet
					,PFT.idfsEditMode
					,pft.idfsFormTemplate
				FROM dbo.ffParameter p
				LEFT JOIN dbo.ffParameterForTemplate PFT ON PFT.idfsParameter = p.idfsParameter AND PFT.intRowStatus = 0
				LEFT JOIN dbo.ffSection s ON s.idfsSection = p.idfsSection
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000101) RF ON S.idfsSection = RF.idfsReference
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000071) PTR ON PTR.idfsReference = P.idfsParameterType
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000066) PN ON PN.idfsReference = P.idfsParameter
				LEFT JOIN dbo.ffParameterDesignOption PDO ON PFT.idfsParameter = PDO.idfsParameter
					AND PFT.idfsFormTemplate = PDO.idfsFormTemplate
					AND PDO.idfsLanguage = @idfsLanguage
					AND PDO.intRowStatus = 0
				LEFT JOIN dbo.ffSectionDesignOption sdo ON sdo.idfsSection = s.idfsSection 
					AND sdo.idfsFormTemplate = @idfsFormTemplate 
					AND sdo.idfsLanguage = @idfsLanguage
					AND sdo.intRowStatus = 0
				LEFT JOIN dbo.ffParameterType PT
					ON pt.idfsParameterType = p.idfsParameterType
				WHERE PFT.idfsFormTemplate = @idfsFormTemplate


				--EXEC [dbo].[USP_ADMIN_FF_FlexForm_Get] 
				--		@LangID =@LangID, 
				--		@idfsDiagnosis= NULL, 
				--		@idfsFormType = 10034023, 
				--		@idfsFormTemplate=@idfsFormTemplate

--				SELECT * FROM @tempFlexForm

				--Get Activity Parameters
				--INSERT INTO @tmpActivityParameters
				--EXEC dbo.USP_ADMIN_FF_ActivityParameters_GET
				--		@observationList = @observationList, 
				--		@LangID = @LangID

				--Get numeric values activity parameters
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[fltValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					SUM(CAST(AP.varValue AS FLOAT)),
					--CAST(AP.varValue AS NVARCHAR(MAX)),
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfProphylacticObservation FROM @observationsTable)
				AND ISNUMERIC(CAST(AP.varValue AS NVARCHAR)) = 1
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0

				GROUP BY
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					P.idfsParameterType
				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow

				--Get non-numeric values activity parameters
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[varValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					AP.varValue,
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfProphylacticObservation FROM @observationsTable)
				AND ISNUMERIC(CAST(AP.varValue AS NVARCHAR)) = 0
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0

				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow

				--Report
				INSERT INTO @FinalReportTable
				(
					ParameterName,
				    strSpecies,
				    idfsParameter,
				    ParameterOrder,
				    idfsDiagnosis,
				    strDefault,
				    strOIECode,
				    numRow,
				    strActionCode,
					strAction,
					fltValue
				)

				SELECT	ff.ParameterName
						,sl.strSpecies
						,ff.idfsParameter
						,ff.ParameterOrder
						,m.idfsDiagnosis
						,m.strDefault
						,m.strOIECode
						,m.intNumRow
						,m.strActionCode
						,m.strAction
						,SUM(fltValue)
						--,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')

				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter AND m.idfAggrVetCaseMTX=ap.idfRow
				LEFT JOIN @tmpSpeciesList sl ON sl.idfBaseReference=m.idfsSpeciesType
				GROUP BY
					ff.ParameterName
					,sl.strSpecies
					,ff.idfsParameter
					,ff.ParameterOrder
					,m.idfsDiagnosis
					,m.strDefault
					,m.strOIECode
					,m.intNumRow
					,m.strActionCode
					,m.strAction
					--,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')
				ORDER BY intNumRow

				--non numeric items
				INSERT INTO @FinalReportTable
				(
					ParameterName,
				    strSpecies,
				    idfsParameter,
				    ParameterOrder,
				    idfsDiagnosis,
				    strDefault,
				    strOIECode,
				    numRow,
				    strActionCode,
					strAction,
					varValue
				)

				SELECT	ff.ParameterName
						,sl.strSpecies
						,ff.idfsParameter
						,ff.ParameterOrder
						,m.idfsDiagnosis
						,m.strDefault
						,m.strOIECode
						,m.intNumRow
						,m.strActionCode
						,m.strAction
						,ap.varValue
						--,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')

				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter AND m.idfAggrVetCaseMTX=ap.idfRow
				LEFT JOIN @tmpSpeciesList sl ON sl.idfBaseReference=m.idfsSpeciesType
				WHERE ap.varValue IS NOT NULL
				
				ORDER BY intNumRow

				--final query
				SELECT 
					ParameterName,
					strSpecies,
					idfsParameter,
					ParameterOrder,
					idfsDiagnosis,
					strDefault,
					strOIECode,
					numRow AS intNumRow,
					strAction,
					strActionCode,
					CAST(fltValue AS NVARCHAR(300)) AS varValue
					
				FROM @FinalReportTable
				WHERE varValue IS NULL

				UNION ALL 

				SELECT
					DISTINCT t.ParameterName,
					t.strSpecies,
					t.idfsParameter,
					t.ParameterOrder,
					t.idfsDiagnosis,
					t.strDefault,
					t.strOIECode,
					t.numRow AS intNumRow,
					strAction,
					strActionCode,
					STUFF((SELECT distinct ', ' + CAST(t1.varValue AS NVARCHAR(300))
						 FROM @FinalReportTable t1
						 WHERE t.ParameterName = t1.ParameterName
						 AND t.strSpecies = t1.strSpecies
						 AND t.idfsParameter = t1.idfsParameter
						 AND t.ParameterOrder = t1.ParameterOrder
						 AND t.idfsDiagnosis = t1.idfsDiagnosis
						 AND t.strDefault = t1.strDefault
						 AND t.strOIECode = t1.strOIECode
						 FOR XML PATH(''), TYPE
							).value('.', 'NVARCHAR(MAX)') 
						,1,2,'') varValue
				from @FinalReportTable t
				WHERE t.varValue IS NOT NULL;				
			END

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT = 1
			ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [Report].[USP_REP_Veterinary_Aggregate_SanitaryAction_Summary_Report_Detail]...';


GO
-- ================================================================================================
-- Name: USP_REP_Veterinary_Aggregate_SanitaryAction_Summary_Report_Detail
-- Description: PrintedForm Veterinary Aggregate Report
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Mark Wilson		10/11/2022  initial cut.
-- Mike Kornegay	10/17/2022	Remove temp table (not compatible with EF Power Tools)
-- Mike Kornegay	03/27/2023	Change numeric values from int to float and separate numeric and string results.
--
/*

EXEC    [Report].[USP_REP_Veterinary_Aggregate_SanitaryAction_Summary_Report_Detail]
        @LangID = N'en-US',
        @idfAggrCaseList = '128822070001294;127398630001294;121195250001294'

*/
-- ================================================================================================
ALTER PROCEDURE [Report].[USP_REP_Veterinary_Aggregate_SanitaryAction_Summary_Report_Detail] 
(
	@LangID AS NVARCHAR(50),
	@idfAggrCaseList AS  NVARCHAR(MAX)= NULL
)
AS
BEGIN
	DROP TABLE IF EXISTS #tmpDetails;

	DECLARE @idfsCountry AS BIGINT,
			@idfsLanguage BIGINT = dbo.FN_GBL_LanguageCode_GET(@LangID);

	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

	DECLARE @AggrCaseTable TABLE (
		[idfAggrCase] BIGINT,
		[intRowNumber] INT
		)

	--Get Selected Agg Cases
	INSERT INTO @AggrCaseTable (
			[idfAggrCase],
			[intRowNumber]
			)
	SELECT CAST([Value] AS BIGINT),
		ROW_NUMBER() OVER (
			ORDER BY [Value]
			)
	FROM [dbo].[FN_GBL_SYS_SplitList](@idfAggrCaseList, NULL, NULL)

	DECLARE @tmpMatrix AS TABLE (
		intNumRow INT
		,idfAggrVetCaseMTX BIGINT
		,strActionCode NVARCHAR(200)
		,strAction NVARCHAR(300)
		)

   DECLARE @tempFlexForm TABLE (
		idfsParentSection BIGINT
		,idfsSection BIGINT
		,idfsParameter BIGINT
		,SectionName NVARCHAR(2000)
		,ParameterName NVARCHAR(500)
		,parameterType NVARCHAR(100)
		,idfsParameterType BIGINT
		,idfsReferenceType BIGINT
		,idfsEditor BIGINT
		,SectionOrder INT
		,ParameterOrder INT
		,blnGrid BIT
		,blnFixedRowSet BIT
		,idfsEditMode BIGINT
		,idfsFormTemplate BIGINT
		)

	DECLARE @observationsTable TABLE (
		[idfSanitaryObservation] BIGINT,
		[idfSanitaryVersion] BIGINT,
		[idfsCaseFormTemplate] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpActivityParameters TABLE (
		[idfActivityParameters] BIGINT,
		[idfObservation] BIGINT,
		[idfsFormTemplate] BIGINT,
		[idfsParameter] BIGINT,
		[idfsSection] BIGINT,
		[idfRow] BIGINT,
		[Type] BIGINT,
		[fltValue] FLOAT,
		[varValue] sql_variant, --NVARCHAR(MAX),
		[numRow] INT,
		[ParameterType]  BIGINT
		)

	DECLARE @tmpDetails TABLE (
		idfSanitaryObservation BIGINT,
		idfsCaseFormTemplate BIGINT,
		idfSanitaryVersion BIGINT
	)

	DECLARE @FinalReportTable TABLE 
	(
		ParameterName NVARCHAR(300),
		strSpecies NVARCHAR(300),
		idfsParameter BIGINT,
		ParameterOrder INT,
		idfsDiagnosis BIGINT,
		strDefault NVARCHAR(300),
		strOIECode NVARCHAR(300),
		numRow INT,
		fltValue FLOAT,
		varValue SQL_VARIANT,
		strActionCode NVARCHAR(300),
		strAction NVARCHAR(300)
	)

	BEGIN TRY

			BEGIN


				--Get this SQl from [dbo].[USP_AGG_CASE_GETDETAIL]
				INSERT INTO @tmpDetails
				SELECT 
					a.idfSanitaryObservation
					,CaseObs.idfsFormTemplate AS idfsCaseFormTemplate
					,a.idfSanitaryVersion
				--INTO #tmpDetails
				FROM dbo.tlbAggrCase a	
				LEFT JOIN dbo.tlbObservation CaseObs ON a.idfSanitaryObservation = CaseObs.idfObservation
				WHERE a.intRowStatus = 0
				AND a.idfAggrCase IN (SELECT idfAggrCase FROM @AggrCaseTable)

				DECLARE @idfsFormTemplate BIGINT,
						@idfVersion BIGINT

				INSERT INTO @observationsTable (
					[idfSanitaryObservation],
					[idfSanitaryVersion],
					[idfsCaseFormTemplate],
					[intRowNumber]
					)
				SELECT [idfSanitaryObservation],
					idfSanitaryVersion,
					idfsCaseFormTemplate,
					ROW_NUMBER() OVER (
						ORDER BY [idfSanitaryObservation]
						)
				FROM @tmpDetails

				SELECT @idfsFormTemplate=idfsCaseFormTemplate, 
						@idfVersion= idfSanitaryVersion
				FROM @observationsTable
				--SELECT * FROM @observationsTable

				--Get this SQL from USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GET -- dbo.USP_CONF_ADMIN_AggregateHumanCaseMatrixReport_GET
				INSERT INTO @tmpMatrix
				SELECT	 
					mtx.intNumRow as intNumRow,
					mtx.idfAggrSanitaryActionMTX,
					SAC.strActionCode,
					SA.name AS strAction

				FROM dbo.tlbAggrSanitaryActionMTX mtx
				INNER JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID, 19000079) SA ON SA.idfsReference = mtx.idfsSanitaryAction
				INNER JOIN dbo.trtSanitaryAction SAC ON SAC.idfsSanitaryAction = SA.idfsReference

				WHERE mtx.intRowStatus = 0 AND  mtx.idfVersion = @idfVersion
				--ORDER BY mtx.intNumRow ASC

--------------------------------------------------------------------------------------------------------------------------------		
				--Get Flex Form for Sanitary Actions details
				INSERT INTO @tempFlexForm
				SELECT 
					s.idfsParentSection
					,COALESCE(p.idfsSection,0) AS idfsSection
					,p.idfsParameter
					,RF.Name AS SectionName
					,PN.Name AS ParameterName
					,PTR.Name AS parameterType
					,p.idfsParameterType
					,pt.idfsReferenceType
					,p.idfsEditor
					,sdo.intOrder	AS SectionOrder
					,PDO.intOrder	AS ParameterOrder
					,s.blnGrid
					,s.blnFixedRowSet
					,PFT.idfsEditMode
					,pft.idfsFormTemplate
				FROM dbo.ffParameter p
				LEFT JOIN dbo.ffParameterForTemplate PFT ON PFT.idfsParameter = p.idfsParameter AND PFT.intRowStatus = 0
				LEFT JOIN dbo.ffSection s ON s.idfsSection = p.idfsSection
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000101) RF ON S.idfsSection = RF.idfsReference
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000071) PTR ON PTR.idfsReference = P.idfsParameterType
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000066) PN ON PN.idfsReference = P.idfsParameter
				LEFT JOIN dbo.ffParameterDesignOption PDO ON PFT.idfsParameter = PDO.idfsParameter
					AND PFT.idfsFormTemplate = PDO.idfsFormTemplate
					AND PDO.idfsLanguage = @idfsLanguage
					AND PDO.intRowStatus = 0
				LEFT JOIN dbo.ffSectionDesignOption sdo ON sdo.idfsSection = s.idfsSection 
					AND sdo.idfsFormTemplate = @idfsFormTemplate 
					AND sdo.idfsLanguage = @idfsLanguage
					AND sdo.intRowStatus = 0
				LEFT JOIN dbo.ffParameterType PT
					ON pt.idfsParameterType = p.idfsParameterType
				WHERE PFT.idfsFormTemplate = @idfsFormTemplate

				--get numeric values activity parameters
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[fltValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					SUM(CAST(AP.varValue AS FLOAT)),
					--CAST(AP.varValue AS NVARCHAR(MAX)),
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfSanitaryObservation FROM @observationsTable)
				AND ISNUMERIC(CAST(AP.varValue AS NVARCHAR)) = 1
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0

				GROUP BY
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					P.idfsParameterType

				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow

				--get non-numeric values activity parameters
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[varValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					AP.varValue,
					--CAST(AP.varValue AS NVARCHAR(MAX)),
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfSanitaryObservation FROM @observationsTable)
				AND ISNUMERIC(CAST(AP.varValue AS NVARCHAR)) = 0
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0
				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow


				--Report
				--	numeric items
				INSERT INTO @FinalReportTable
				(
					ParameterName,
				    idfsParameter,
				    ParameterOrder,
				    numRow,
				    strActionCode,
					strAction,
					fltValue
				)
				SELECT	ff.ParameterName
						,ff.idfsParameter
						,ff.ParameterOrder
						,m.intNumRow
						,m.strActionCode
						,m.strAction
						,SUM(fltValue)
						--,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')

				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter AND m.idfAggrVetCaseMTX=ap.idfRow

				GROUP BY
						ff.ParameterName
						,ff.idfsParameter
						,ff.ParameterOrder
						,m.intNumRow
						,m.strActionCode
						,m.strAction
						--,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')
				ORDER BY intNumRow

				--non-numeric items				
				INSERT INTO @FinalReportTable
				(
					ParameterName,
				    idfsParameter,
				    ParameterOrder,
				    numRow,
				    strActionCode,
					strAction,
					varValue
				)
				SELECT	ff.ParameterName
						,ff.idfsParameter
						,ff.ParameterOrder
						,m.intNumRow
						,m.strActionCode
						,m.strAction
						,ap.varValue
						--,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')

				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter AND m.idfAggrVetCaseMTX=ap.idfRow
				WHERE ap.varValue IS NOT NULL

				ORDER BY intNumRow

				--final query
				SELECT 
					ParameterName,
					strSpecies,
					idfsParameter,
					ParameterOrder,
					idfsDiagnosis,
					strDefault,
					strOIECode,
					numRow AS intNumRow,
					strAction,
					strActionCode,
					CAST(fltValue AS NVARCHAR(300)) AS varValue
					
				FROM @FinalReportTable
				WHERE varValue IS NULL

				UNION ALL 

				SELECT
					DISTINCT t.ParameterName,
					t.strSpecies,
					t.idfsParameter,
					t.ParameterOrder,
					t.idfsDiagnosis,
					t.strDefault,
					t.strOIECode,
					t.numRow AS intNumRow,
					strAction,
					strActionCode,
					STUFF((SELECT distinct ', ' + CAST(t1.varValue AS NVARCHAR(300))
						 FROM @FinalReportTable t1
						 WHERE t.ParameterName = t1.ParameterName
						 AND t.strSpecies = t1.strSpecies
						 AND t.idfsParameter = t1.idfsParameter
						 AND t.ParameterOrder = t1.ParameterOrder
						 AND t.idfsDiagnosis = t1.idfsDiagnosis
						 AND t.strDefault = t1.strDefault
						 AND t.strOIECode = t1.strOIECode
						 FOR XML PATH(''), TYPE
							).value('.', 'NVARCHAR(MAX)') 
						,1,2,'') varValue
				from @FinalReportTable t
				WHERE t.varValue IS NOT NULL;		

			END

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT = 1
			ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_LKUP_Diseases_BY_IDS_GETLIST_Paged]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_LKUP_Diseases_BY_IDS_GETLIST_Paged]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_BASE_REFERENCEBYNAMES_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_BASE_REFERENCEBYNAMES_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_LKUP_REFERENCETYPE_BY_IDS_GETLIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_LKUP_REFERENCETYPE_BY_IDS_GETLIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_STAT_GetDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_STAT_GetDetail]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_SYSTEMEVENTS_LOG_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_SYSTEMEVENTS_LOG_GetList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_LKUP_BaseRef_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_LKUP_BaseRef_GetList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_BASE_REFERENCE_Advanced_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_BASE_REFERENCE_Advanced_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_LKUP_REFERENCETYPE_BY_IDS_GETLIST_Paged]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_LKUP_REFERENCETYPE_BY_IDS_GETLIST_Paged]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_BASE_REFERENCE_GETBatchList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_BASE_REFERENCE_GETBatchList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_STAT_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_STAT_GetList]';


GO
PRINT N'Refreshing Procedure [Report].[USP_GBL_LKUP_BaseRef_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_GBL_LKUP_BaseRef_GetList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_SYSTEMFUNCTION_GETLIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_SYSTEMFUNCTION_GETLIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_BASE_REFERENCE_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_BASE_REFERENCE_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_CHILDTABLESUSAGE_GET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_CHILDTABLESUSAGE_GET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_Employee_Permissions_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_Employee_Permissions_GetList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_Determinants_GET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_Determinants_GET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_ParameterReferenceTypes_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_ParameterReferenceTypes_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_LKUP_ReferenceType_GETLIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_LKUP_ReferenceType_GETLIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ASPNetUser_GetRolesAndPermissions]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ASPNetUser_GetRolesAndPermissions]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ASPNetUser_GetRolesAndPermissionsByOrg]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ASPNetUser_GetRolesAndPermissionsByOrg]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_LKUP_REFERENCETYPE_FILTERED_PAGED_GETLIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_LKUP_REFERENCETYPE_FILTERED_PAGED_GETLIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_LKUP_REFERENCETYPE_GETLIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_LKUP_REFERENCETYPE_GETLIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_AGEGROUP_DOESEXIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_AGEGROUP_DOESEXIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_CASECLASSIFICATION_DOESEXIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_CASECLASSIFICATION_DOESEXIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_DIAGNOSISREFERENCE_DOESEXIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_DIAGNOSISREFERENCE_DOESEXIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_MEASURELIST_DOESEXIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_MEASURELIST_DOESEXIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_MEASURELIST_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_MEASURELIST_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_REPORTDIAGNOSISGROUP_DOESEXIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_REPORTDIAGNOSISGROUP_DOESEXIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_SAMPLETYPEREFERENCE_DOESEXIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_SAMPLETYPEREFERENCE_DOESEXIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_SPECIESTYPE_DOESEXIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_SPECIESTYPE_DOESEXIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_STATISTICDATATYPE_DOESEXIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_STATISTICDATATYPE_DOESEXIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_VECTORSUBTYPE_DOESEXIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_VECTORSUBTYPE_DOESEXIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_VECTORTYPE_DOESEXIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_VECTORTYPE_DOESEXIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_STAT_GETCOUNT]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_STAT_GETCOUNT]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_Statistic_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Statistic_GetList]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_ObjectAccess_GetDefaultUserDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_ObjectAccess_GetDefaultUserDetail]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_ValidateForeignKeys]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_ValidateForeignKeys]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_ValidateKeys]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_ValidateKeys]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_ValidateMandatoryFields]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_ValidateMandatoryFields]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_Employee_ValidateForeignKeys]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Employee_ValidateForeignKeys]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_HumanAggregateCase_ValidateForeignKeys]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_HumanAggregateCase_ValidateForeignKeys]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_HumanCase_Validate]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_HumanCase_Validate]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_HumanActual_ValidateMandatoryFields]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_HumanActual_ValidateMandatoryFields]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_Employee_Validate]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Employee_Validate]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_HumanAggregateCase_Validate]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_HumanAggregateCase_Validate]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_Person_CanDelete]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_Person_CanDelete]';


GO
PRINT N'Refreshing Procedure [dbo].[usp_HumanAggregateCase_CanDelete]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[usp_HumanAggregateCase_CanDelete]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_LAB_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_LAB_SET]';


GO
PRINT N'Checking existing data against newly created constraints';


GO
ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] WITH CHECK CHECK CONSTRAINT [FK_ASPNetUserPreviousPasswords_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] WITH CHECK CHECK CONSTRAINT [FK_ASPNetUserPreviousPasswords_AspNetUsers_Id];

ALTER TABLE [dbo].[trtSystemFunctionOperation] WITH CHECK CHECK CONSTRAINT [FK_trtSystemFunctionOperation_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstCheckConstraints] WITH CHECK CHECK CONSTRAINT [FK_tstCheckConstraints_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstCheckConstraints] WITH CHECK CHECK CONSTRAINT [FK_tstCheckConstraints_tstCheckTables__idfCheckTable];

ALTER TABLE [dbo].[tstInvalidObjects] WITH CHECK CHECK CONSTRAINT [FK_tstInvalidObjects_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[AccessRule] WITH CHECK CHECK CONSTRAINT [FK_AccessRule_tflSiteGroup_GrantingActorSiteGroupID];

ALTER TABLE [dbo].[AccessRule] WITH CHECK CHECK CONSTRAINT [FK_AccessRule_trtBaseReference];

ALTER TABLE [dbo].[AccessRule] WITH CHECK CHECK CONSTRAINT [FK_AccessRule_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[AccessRule] WITH CHECK CHECK CONSTRAINT [FK_AccessRule_tstSite_GrantingActorSiteID];

ALTER TABLE [dbo].[AccessRuleActor] WITH CHECK CHECK CONSTRAINT [FK_AccessRuleActor_AccessRule_AccessRuleID];

ALTER TABLE [dbo].[AccessRuleActor] WITH CHECK CHECK CONSTRAINT [FK_AccessRuleActor_tflSiteGroup_ActorSiteGroupID];

ALTER TABLE [dbo].[AccessRuleActor] WITH CHECK CHECK CONSTRAINT [FK_AccessRuleActor_tlbEmployeGroup_ActorEmployeeGroupID];

ALTER TABLE [dbo].[AccessRuleActor] WITH CHECK CHECK CONSTRAINT [FK_AccessRuleActor_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[AccessRuleActor] WITH CHECK CHECK CONSTRAINT [FK_AccessRuleActor_tstSite_ActorSiteID];

ALTER TABLE [dbo].[AccessRuleActor] WITH CHECK CHECK CONSTRAINT [FK_AccessRuleActor_tstUserTable_ActorUserID];

ALTER TABLE [dbo].[AccessRulePermission] WITH CHECK CHECK CONSTRAINT [FK_AccessRulePermission_AccessRule_AccessRuleID];

ALTER TABLE [dbo].[AccessRulePermission] WITH CHECK CHECK CONSTRAINT [FK_AccessRulePermission_trtBaseReference_AccessPermissionID];

ALTER TABLE [dbo].[AccessRulePermission] WITH CHECK CHECK CONSTRAINT [FK_AccessRulePermission_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[AppObjectSysFunction] WITH CHECK CHECK CONSTRAINT [FK_AppObjectSysFunction_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[AppObjectSysFunction] WITH CHECK CHECK CONSTRAINT [FK_AppObjSysFunction_AppObj_AppObjectNameID];

ALTER TABLE [dbo].[AppObjectSysFunction] WITH CHECK CHECK CONSTRAINT [FK_AppObjSysFunction_BaseReference_SysFunctionID];

ALTER TABLE [dbo].[AppSessionLog] WITH CHECK CHECK CONSTRAINT [FK_AppSessionLog_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[AppSessionLog] WITH CHECK CHECK CONSTRAINT [FK_SesionLog_BaseRef_AppModuleGroupID];

ALTER TABLE [dbo].[AppSessionLog] WITH CHECK CHECK CONSTRAINT [FK_SessionLog_BaseRef_ModuleConstantID];

ALTER TABLE [dbo].[ArchiveSetting] WITH CHECK CHECK CONSTRAINT [FK_ArchiveSetting_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[AspNetRoles] WITH CHECK CHECK CONSTRAINT [FK_ASPNetRole_tlbEmployeeGRoup_idfemployeeGroup];

ALTER TABLE [dbo].[AspNetUserClaims] WITH CHECK CHECK CONSTRAINT [FK_dbo.AspNetUserClaims_dbo.AspNetUsers_UserId];

ALTER TABLE [dbo].[AspNetUserLogins] WITH CHECK CHECK CONSTRAINT [FK_dbo.AspNetUserLogins_dbo.AspNetUsers_UserId];

ALTER TABLE [dbo].[AspNetUserRoles] WITH CHECK CHECK CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetRoles_RoleId];

ALTER TABLE [dbo].[AspNetUserRoles] WITH CHECK CHECK CONSTRAINT [FK_dbo.AspNetUserRoles_dbo.AspNetUsers_UserId];

ALTER TABLE [dbo].[AspNetUsers] WITH CHECK CHECK CONSTRAINT [FK_AspNetUsers_tstUserTable_UserID];

ALTER TABLE [dbo].[AspNetUserTokens] WITH CHECK CHECK CONSTRAINT [FK_AspNetUserTokens_AspNetUsers_UserId];

ALTER TABLE [dbo].[AuditEventSystemLog] WITH CHECK CHECK CONSTRAINT [FK_AuditEventSystemLog_AppSessionLog];

ALTER TABLE [dbo].[AuditEventSystemLog] WITH CHECK CHECK CONSTRAINT [FK_AuditEventSystemLog_BaseRef_AuditObjectID];

ALTER TABLE [dbo].[AuditEventSystemLog] WITH CHECK CHECK CONSTRAINT [FK_AuditEventSystemLog_idfsModule];

ALTER TABLE [dbo].[AuditEventSystemLog] WITH CHECK CHECK CONSTRAINT [FK_AuditEventSystemLog_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[AuditEventSystemLog] WITH CHECK CHECK CONSTRAINT [FK_AuditEventSystemLog_tstSite_idfSiteID];

ALTER TABLE [dbo].[AuditEventSystemLog] WITH CHECK CHECK CONSTRAINT [FK_AuditEventSystemLog_UserTable_idfAppUserID];

ALTER TABLE [dbo].[AuditEventUserLog] WITH CHECK CHECK CONSTRAINT [FK_AuditEventUserLog_AuditEventSystemLog_LogUID];

ALTER TABLE [dbo].[AuditEventUserLog] WITH CHECK CHECK CONSTRAINT [FK_AuditEventUserLog_BaseRef_AuditEventTypeID];

ALTER TABLE [dbo].[AuditEventUserLog] WITH CHECK CHECK CONSTRAINT [FK_AuditEventUserLog_BaseRef_AuditObjectTypeID];

ALTER TABLE [dbo].[AuditEventUserLog] WITH CHECK CHECK CONSTRAINT [FK_AuditEventUserLog_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[AuditEventUserLog] WITH CHECK CHECK CONSTRAINT [FK_AuditEventUserLog_tstSite_idfSiteID];

ALTER TABLE [dbo].[AuditEventUserLog] WITH CHECK CHECK CONSTRAINT [FK_AuditEventUserLog_UserTable_idfAppUserID];

ALTER TABLE [dbo].[DiagnosisGroupToGender] WITH CHECK CHECK CONSTRAINT [FK_DiagnosisGroupToGender_trtBaseReference_DiagnosisGroupID];

ALTER TABLE [dbo].[DiagnosisGroupToGender] WITH CHECK CHECK CONSTRAINT [FK_DiagnosisGroupToGender_trtBaseReference_GenderID];

ALTER TABLE [dbo].[DiagnosisGroupToGender] WITH CHECK CHECK CONSTRAINT [FK_DiagnosisGroupToGender_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[dotNetAppenderLog] WITH CHECK CHECK CONSTRAINT [FK_dotNetAppenderLog_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[EmployeeToInstitution] WITH CHECK CHECK CONSTRAINT [FK_EmployeeToInstitution_AspNetUserId];

ALTER TABLE [dbo].[EmployeeToInstitution] WITH CHECK CHECK CONSTRAINT [FK_EmployeeToInstitution_Office];

ALTER TABLE [dbo].[EmployeeToInstitution] WITH CHECK CHECK CONSTRAINT [FK_EmployeeToInstitution_UserId];

ALTER TABLE [dbo].[EventSubscription] WITH CHECK CHECK CONSTRAINT [FK_EventSubscription_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[EventSubscription] WITH CHECK CHECK CONSTRAINT [FK_EventSubscription_trtEventType_EventNameID];

ALTER TABLE [dbo].[EventSubscription] WITH CHECK CHECK CONSTRAINT [FK_EventSubscription_tstUserTable];

ALTER TABLE [dbo].[ffDecorElement] WITH CHECK CHECK CONSTRAINT [FK_ffDecorElement_ffFormTemplate__idfsFormTemplate_R_1373];

ALTER TABLE [dbo].[ffDecorElement] WITH CHECK CHECK CONSTRAINT [FK_ffDecorElement_ffSection__idfsSection_R_1379];

ALTER TABLE [dbo].[ffDecorElement] WITH CHECK CHECK CONSTRAINT [FK_ffDecorElement_trtBaseReference__idfsDecorElementType_R_1376];

ALTER TABLE [dbo].[ffDecorElement] WITH CHECK CHECK CONSTRAINT [FK_ffDecorElement_trtBaseReference__idfsLanguage_R_1375];

ALTER TABLE [dbo].[ffDecorElement] WITH CHECK CHECK CONSTRAINT [FK_ffDecorElement_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffDecorElementLine] WITH CHECK CHECK CONSTRAINT [FK_ffDecorElementLine_ffDecorElement__idfDecorElement_R_1401];

ALTER TABLE [dbo].[ffDecorElementLine] WITH CHECK CHECK CONSTRAINT [FK_ffDecorElementLine_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffDecorElementText] WITH CHECK CHECK CONSTRAINT [FK_ffDecorElementText_ffDecorElement__idfDecorElement_R_1374];

ALTER TABLE [dbo].[ffDecorElementText] WITH CHECK CHECK CONSTRAINT [FK_ffDecorElementText_trtBaseReference__idfsBaseReference_R_1389];

ALTER TABLE [dbo].[ffDecorElementText] WITH CHECK CHECK CONSTRAINT [FK_ffDecorElementText_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffDeterminantType] WITH CHECK CHECK CONSTRAINT [FK_ffDeterminantType_gisReferenceType__idfsGISReferenceType_R_1669];

ALTER TABLE [dbo].[ffDeterminantType] WITH CHECK CHECK CONSTRAINT [FK_ffDeterminantType_trtBaseReference__idfsFormType_R_1660];

ALTER TABLE [dbo].[ffDeterminantType] WITH CHECK CHECK CONSTRAINT [FK_ffDeterminantType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffDeterminantType] WITH CHECK CHECK CONSTRAINT [FK_ffDeterminantType_trtReferenceType__idfsReferenceType_R_950];

ALTER TABLE [dbo].[ffDeterminantValue] WITH CHECK CHECK CONSTRAINT [FK_ffDeterminantValue_gisBaseReference__idfsGISBaseReference_R_1670];

ALTER TABLE [dbo].[ffDeterminantValue] WITH CHECK CHECK CONSTRAINT [FK_ffDeterminantValue_trtBaseReference__idfsBaseReference_R_949];

ALTER TABLE [dbo].[ffDeterminantValue] WITH CHECK CHECK CONSTRAINT [FK_ffDeterminantValue_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffDeterminantValue] WITH CHECK CHECK CONSTRAINT [FK_FFormControlValue_FFormTemplate];

ALTER TABLE [dbo].[ffFormTemplate] WITH CHECK CHECK CONSTRAINT [FK_ffFormTemplate_trtBaseReference__idfsFormTemplate_R_1385];

ALTER TABLE [dbo].[ffFormTemplate] WITH CHECK CHECK CONSTRAINT [FK_ffFormTemplate_trtBaseReference__idfsFormType_R_1656];

ALTER TABLE [dbo].[ffFormTemplate] WITH CHECK CHECK CONSTRAINT [FK_ffFormTemplate_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffParameter] WITH CHECK CHECK CONSTRAINT [FK_ffParameter_ffParameterType__idfsParameterType_R_21];

ALTER TABLE [dbo].[ffParameter] WITH CHECK CHECK CONSTRAINT [FK_ffParameter_ffSection__idfsSection_R_1380];

ALTER TABLE [dbo].[ffParameter] WITH CHECK CHECK CONSTRAINT [FK_ffParameter_trtBaseReference__idfsEditor_R_1387];

ALTER TABLE [dbo].[ffParameter] WITH CHECK CHECK CONSTRAINT [FK_ffParameter_trtBaseReference__idfsFormType_R_1658];

ALTER TABLE [dbo].[ffParameter] WITH CHECK CHECK CONSTRAINT [FK_ffParameter_trtBaseReference__idfsParameter_R_1382];

ALTER TABLE [dbo].[ffParameter] WITH CHECK CHECK CONSTRAINT [FK_ffParameter_trtBaseReference__idfsParameterCaption_R_1383];

ALTER TABLE [dbo].[ffParameter] WITH CHECK CHECK CONSTRAINT [FK_ffParameter_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffParameterDesignOption] WITH CHECK CHECK CONSTRAINT [FK_ffParameterDesignOption_ffFormTemplate__idfsFormTemplate_R_1361];

ALTER TABLE [dbo].[ffParameterDesignOption] WITH CHECK CHECK CONSTRAINT [FK_ffParameterDesignOption_ffParameter__idfsParameter_R_1360];

ALTER TABLE [dbo].[ffParameterDesignOption] WITH CHECK CHECK CONSTRAINT [FK_ffParameterDesignOption_trtBaseReference__idfsLanguage_R_1381];

ALTER TABLE [dbo].[ffParameterDesignOption] WITH CHECK CHECK CONSTRAINT [FK_ffParameterDesignOption_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffParameterFixedPresetValue] WITH CHECK CHECK CONSTRAINT [FK_ffParameterFixedPresetValue_ffParameterType__idfsParameterType_R_925];

ALTER TABLE [dbo].[ffParameterFixedPresetValue] WITH CHECK CHECK CONSTRAINT [FK_ffParameterFixedPresetValue_trtBaseReference__idfsParameterFixedPresetValue_R_1398];

ALTER TABLE [dbo].[ffParameterFixedPresetValue] WITH CHECK CHECK CONSTRAINT [FK_ffParameterFixedPresetValue_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffParameterForAction] WITH CHECK CHECK CONSTRAINT [FK_ffParameterForAction_ffParameterForTemplate__idfsParameter_idfsFormTemplate_R];

ALTER TABLE [dbo].[ffParameterForAction] WITH CHECK CHECK CONSTRAINT [FK_ffParameterForAction_ffRule__idfsRule_R_820];

ALTER TABLE [dbo].[ffParameterForAction] WITH CHECK CHECK CONSTRAINT [FK_ffParameterForAction_trtBaseReference__idfsRuleAction_R_1392];

ALTER TABLE [dbo].[ffParameterForAction] WITH CHECK CHECK CONSTRAINT [FK_ffParameterForAction_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffParameterForFunction] WITH CHECK CHECK CONSTRAINT [FK_ffParameterForFunction_ffParameterForTemplate__idfsParameter___________________________________________________idfsFormTempla];

ALTER TABLE [dbo].[ffParameterForFunction] WITH CHECK CHECK CONSTRAINT [FK_ffParameterForFunction_ffRule__idfsRule_R_1647];

ALTER TABLE [dbo].[ffParameterForFunction] WITH CHECK CHECK CONSTRAINT [FK_ffParameterForFunction_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffParameterForTemplate] WITH CHECK CHECK CONSTRAINT [FK_ffParameterForTemplate_ffFormTemplate__idfsFormTemplate_R_91];

ALTER TABLE [dbo].[ffParameterForTemplate] WITH CHECK CHECK CONSTRAINT [FK_ffParameterForTemplate_ffParameter__idfsParameter_R_2];

ALTER TABLE [dbo].[ffParameterForTemplate] WITH CHECK CHECK CONSTRAINT [FK_ffParameterForTemplate_trtBaseReference__idfsEditMode_R_1388];

ALTER TABLE [dbo].[ffParameterForTemplate] WITH CHECK CHECK CONSTRAINT [FK_ffParameterForTemplate_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffParameterType] WITH CHECK CHECK CONSTRAINT [FK_ffParameterType_trtBaseReference__idfsParameterType_R_1395];

ALTER TABLE [dbo].[ffParameterType] WITH CHECK CHECK CONSTRAINT [FK_ffParameterType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffParameterType] WITH CHECK CHECK CONSTRAINT [FK_ffParameterType_trtReferenceType__idfsReferenceType_R_927];

ALTER TABLE [dbo].[ffRule] WITH CHECK CHECK CONSTRAINT [FK_FFRule_FFormTemplate];

ALTER TABLE [dbo].[ffRule] WITH CHECK CHECK CONSTRAINT [FK_ffRule_ffRuleFunction__idfsRuleFunction_R_1646];

ALTER TABLE [dbo].[ffRule] WITH CHECK CHECK CONSTRAINT [FK_ffRule_trtBaseReference__idfsCheckPoint_R_1390];

ALTER TABLE [dbo].[ffRule] WITH CHECK CHECK CONSTRAINT [FK_ffRule_trtBaseReference__idfsRule_R_1394];

ALTER TABLE [dbo].[ffRule] WITH CHECK CHECK CONSTRAINT [FK_ffRule_trtBaseReference__idfsRuleMessage_R_1391];

ALTER TABLE [dbo].[ffRule] WITH CHECK CHECK CONSTRAINT [FK_ffRule_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffRuleConstant] WITH CHECK CHECK CONSTRAINT [FK_ffRuleConstant_ffRule__idfsRule_R_1648];

ALTER TABLE [dbo].[ffRuleConstant] WITH CHECK CHECK CONSTRAINT [FK_ffRuleConstant_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffRuleFunction] WITH CHECK CHECK CONSTRAINT [FK_ffRuleFunction_trtBaseReference__idfsRuleFunction_R_1393];

ALTER TABLE [dbo].[ffRuleFunction] WITH CHECK CHECK CONSTRAINT [FK_ffRuleFunction_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffSection] WITH CHECK CHECK CONSTRAINT [FK_ffSection_ffSection__idfsParentSection_R_1362];

ALTER TABLE [dbo].[ffSection] WITH CHECK CHECK CONSTRAINT [FK_ffSection_trtBaseReference__idfsFormType_R_1659];

ALTER TABLE [dbo].[ffSection] WITH CHECK CHECK CONSTRAINT [FK_ffSection_trtBaseReference__idfsSection_R_1378];

ALTER TABLE [dbo].[ffSection] WITH CHECK CHECK CONSTRAINT [FK_ffSection_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffSection] WITH CHECK CHECK CONSTRAINT [FK_ffSection_trtMatrixType__idfsMatrixType];

ALTER TABLE [dbo].[ffSectionDesignOption] WITH CHECK CHECK CONSTRAINT [FK_ffSectionDesignOption_ffSectionForTemplate__idfsFormTemplate________________________________________________idfsSection_R_163];

ALTER TABLE [dbo].[ffSectionDesignOption] WITH CHECK CHECK CONSTRAINT [FK_ffSectionDesignOption_trtBaseReference__idfsLanguage_R_1377];

ALTER TABLE [dbo].[ffSectionDesignOption] WITH CHECK CHECK CONSTRAINT [FK_ffSectionDesignOption_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffSectionForAction] WITH CHECK CHECK CONSTRAINT [FK_ffSectionForAction_ffRule__idfsRule_R_1403];

ALTER TABLE [dbo].[ffSectionForAction] WITH CHECK CHECK CONSTRAINT [FK_ffSectionForAction_ffSectionForTemplate__idfsFormTemplate_____________________________________________idfsSection_R_1402];

ALTER TABLE [dbo].[ffSectionForAction] WITH CHECK CHECK CONSTRAINT [FK_ffSectionForAction_trtBaseReference__idfsRuleAction_R_1404];

ALTER TABLE [dbo].[ffSectionForAction] WITH CHECK CHECK CONSTRAINT [FK_ffSectionForAction_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ffSectionForTemplate] WITH CHECK CHECK CONSTRAINT [FK_ffSectionForTemplate_ffFormTemplate__idfsFormTemplate_R_1400];

ALTER TABLE [dbo].[ffSectionForTemplate] WITH CHECK CHECK CONSTRAINT [FK_ffSectionForTemplate_ffSection__idfsSection_R_1399];

ALTER TABLE [dbo].[ffSectionForTemplate] WITH CHECK CHECK CONSTRAINT [FK_ffSectionForTemplate_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisBaseReference] WITH CHECK CHECK CONSTRAINT [FK_gisBaseReference_gisReferenceType__idfsGISReferenceType_R_1632];

ALTER TABLE [dbo].[gisBaseReference] WITH CHECK CHECK CONSTRAINT [FK_gisBaseReference_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisCountry] WITH CHECK CHECK CONSTRAINT [FK_gisCountry_gisBaseReference__idfsCountry_R_1634];

ALTER TABLE [dbo].[gisCountry] WITH CHECK CHECK CONSTRAINT [FK_gisCountry_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisDistrictSubdistrict] WITH CHECK CHECK CONSTRAINT [FK_gisDistrictSubdistrict_gisRayon__idfsGeoObject];

ALTER TABLE [dbo].[gisDistrictSubdistrict] WITH CHECK CHECK CONSTRAINT [FK_gisDistrictSubdistrict_gisRayon__idfsParent];

ALTER TABLE [dbo].[gisDistrictSubdistrict] WITH CHECK CHECK CONSTRAINT [FK_gisDistrictSubdistrict_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisLegendSymbol] WITH CHECK CHECK CONSTRAINT [FK_gisLegendSymbol_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisMainCityForRayon] WITH CHECK CHECK CONSTRAINT [FK_gisMainCityForRayon_gisRayon__idfsRayon];

ALTER TABLE [dbo].[gisMainCityForRayon] WITH CHECK CHECK CONSTRAINT [FK_gisMainCityForRayon_gisSettlement__idfsMainSettlement];

ALTER TABLE [dbo].[gisMetadata] WITH CHECK CHECK CONSTRAINT [FK_gisMetadata_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisNewID] WITH CHECK CHECK CONSTRAINT [FK_gisNewID_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisOtherBaseReference] WITH CHECK CHECK CONSTRAINT [FK_gisOtherBaseReference_gisReferenceType__idfsGISReferenceType_R_1678];

ALTER TABLE [dbo].[gisOtherBaseReference] WITH CHECK CHECK CONSTRAINT [FK_gisOtherBaseReference_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisOtherStringNameTranslation] WITH CHECK CHECK CONSTRAINT [FK_gisOtherStringNameTranslation_gisBaseReference__idfsLanguage_R_1680];

ALTER TABLE [dbo].[gisOtherStringNameTranslation] WITH CHECK CHECK CONSTRAINT [FK_gisOtherStringNameTranslation_gisOtherBaseReference__idfsGISOtherBaseReference_R_1679];

ALTER TABLE [dbo].[gisOtherStringNameTranslation] WITH CHECK CHECK CONSTRAINT [FK_gisOtherStringNameTranslation_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisRayon] WITH CHECK CHECK CONSTRAINT [FK_gisRayon_gisBaseReference__idfsRayon_R_1636];

ALTER TABLE [dbo].[gisRayon] WITH CHECK CHECK CONSTRAINT [FK_gisRayon_gisCountry__idfsCountry_R_233];

ALTER TABLE [dbo].[gisRayon] WITH CHECK CHECK CONSTRAINT [FK_gisRayon_gisRegion__idfsRegion_R_121];

ALTER TABLE [dbo].[gisRayon] WITH CHECK CHECK CONSTRAINT [FK_gisRayon_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisReferenceType] WITH CHECK CHECK CONSTRAINT [FK_gisReferenceType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisRegion] WITH CHECK CHECK CONSTRAINT [FK_gisRegion_gisBaseReference__idfsRegion_R_1635];

ALTER TABLE [dbo].[gisRegion] WITH CHECK CHECK CONSTRAINT [FK_gisRegion_gisCountry__idfsCountry_R_232];

ALTER TABLE [dbo].[gisRegion] WITH CHECK CHECK CONSTRAINT [FK_gisRegion_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisSettlement] WITH CHECK CHECK CONSTRAINT [FK_gisSettlement_gisBaseReference__idfsSettlement_R_1637];

ALTER TABLE [dbo].[gisSettlement] WITH CHECK CHECK CONSTRAINT [FK_gisSettlement_gisBaseReference__idfsSettlementType_R_1638];

ALTER TABLE [dbo].[gisSettlement] WITH CHECK CHECK CONSTRAINT [FK_gisSettlement_gisCountry__idfsCountry_R_7];

ALTER TABLE [dbo].[gisSettlement] WITH CHECK CHECK CONSTRAINT [FK_gisSettlement_gisRayon__idfsRayon_R_9];

ALTER TABLE [dbo].[gisSettlement] WITH CHECK CHECK CONSTRAINT [FK_gisSettlement_gisRegion__idfsRegion_R_8];

ALTER TABLE [dbo].[gisSettlement] WITH CHECK CHECK CONSTRAINT [FK_gisSettlement_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisStringNameTranslation] WITH CHECK CHECK CONSTRAINT [FK_gisStringNameTranslation_gisBaseReference__idfsGISBaseReference_R_1639];

ALTER TABLE [dbo].[gisStringNameTranslation] WITH CHECK CHECK CONSTRAINT [FK_gisStringNameTranslation_gisBaseReference__idfsLanguage_R_1640];

ALTER TABLE [dbo].[gisStringNameTranslation] WITH CHECK CHECK CONSTRAINT [FK_gisStringNameTranslation_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisUserLayer] WITH CHECK CHECK CONSTRAINT [FK_gisUserLayer_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisUserLayer] WITH CHECK CHECK CONSTRAINT [FK_gisUserLayer_tstUserTable];

ALTER TABLE [dbo].[gisWHOMap] WITH CHECK CHECK CONSTRAINT [FK_gisWHOMap_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWHOMap] WITH CHECK CHECK CONSTRAINT [FK_idfsLocation_gisLocation];

ALTER TABLE [dbo].[gisWKBCountry] WITH CHECK CHECK CONSTRAINT [FK__gisWKBCou__idfsG__37E6D44C];

ALTER TABLE [dbo].[gisWKBCountry] WITH CHECK CHECK CONSTRAINT [FK_gisWKBCountry_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBDistrict] WITH CHECK CHECK CONSTRAINT [FK_gisWKBDistrict_gisBaseReference];

ALTER TABLE [dbo].[gisWKBDistrict] WITH CHECK CHECK CONSTRAINT [FK_gisWKBDistrict_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBDistrictReady] WITH CHECK CHECK CONSTRAINT [FK_gisWKBDistrictReady_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBEarthRoad] WITH CHECK CHECK CONSTRAINT [FK_gisWKBEarthRoad_gisCountry];

ALTER TABLE [dbo].[gisWKBEarthRoad] WITH CHECK CHECK CONSTRAINT [FK_gisWKBEarthRoad_gisOtherBaseReference];

ALTER TABLE [dbo].[gisWKBEarthRoad] WITH CHECK CHECK CONSTRAINT [FK_gisWKBEarthRoad_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBForest] WITH CHECK CHECK CONSTRAINT [FK_gisWKBForest_gisCountry];

ALTER TABLE [dbo].[gisWKBForest] WITH CHECK CHECK CONSTRAINT [FK_gisWKBForest_gisOtherBaseReference];

ALTER TABLE [dbo].[gisWKBForest] WITH CHECK CHECK CONSTRAINT [FK_gisWKBForest_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBHighway] WITH CHECK CHECK CONSTRAINT [FK_gisWKBHighway_gisCountry];

ALTER TABLE [dbo].[gisWKBHighway] WITH CHECK CHECK CONSTRAINT [FK_gisWKBHighway_gisOtherBaseReference];

ALTER TABLE [dbo].[gisWKBHighway] WITH CHECK CHECK CONSTRAINT [FK_gisWKBHighway_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBInlandWater] WITH CHECK CHECK CONSTRAINT [FK_gisWKBInlandWater_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBLake] WITH CHECK CHECK CONSTRAINT [FK_gisWKBLake_gisCountry];

ALTER TABLE [dbo].[gisWKBLake] WITH CHECK CHECK CONSTRAINT [FK_gisWKBLake_gisOtherBaseReference];

ALTER TABLE [dbo].[gisWKBLake] WITH CHECK CHECK CONSTRAINT [FK_gisWKBLake_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBLanduse] WITH CHECK CHECK CONSTRAINT [FK_gisWKBLanduse_gisCountry];

ALTER TABLE [dbo].[gisWKBLanduse] WITH CHECK CHECK CONSTRAINT [FK_gisWKBLanduse_gisOtherBaseReference];

ALTER TABLE [dbo].[gisWKBLanduse] WITH CHECK CHECK CONSTRAINT [FK_gisWKBLanduse_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBMainRiver] WITH CHECK CHECK CONSTRAINT [FK_gisWKBMainRiver_gisCountry];

ALTER TABLE [dbo].[gisWKBMainRiver] WITH CHECK CHECK CONSTRAINT [FK_gisWKBMainRiver_gisOtherBaseReference];

ALTER TABLE [dbo].[gisWKBMainRiver] WITH CHECK CHECK CONSTRAINT [FK_gisWKBMainRiver_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBMajorRoad] WITH CHECK CHECK CONSTRAINT [FK_gisWKBMajorRoad_gisCountry];

ALTER TABLE [dbo].[gisWKBMajorRoad] WITH CHECK CHECK CONSTRAINT [FK_gisWKBMajorRoad_gisOtherBaseReference];

ALTER TABLE [dbo].[gisWKBMajorRoad] WITH CHECK CHECK CONSTRAINT [FK_gisWKBMajorRoad_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBPath] WITH CHECK CHECK CONSTRAINT [FK_gisWKBPath_gisCountry];

ALTER TABLE [dbo].[gisWKBPath] WITH CHECK CHECK CONSTRAINT [FK_gisWKBPath_gisOtherBaseReference];

ALTER TABLE [dbo].[gisWKBPath] WITH CHECK CHECK CONSTRAINT [FK_gisWKBPath_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBRailroad] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRailroad_gisCountry];

ALTER TABLE [dbo].[gisWKBRailroad] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRailroad_gisOtherBaseReference];

ALTER TABLE [dbo].[gisWKBRailroad] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRailroad_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBRayon] WITH CHECK CHECK CONSTRAINT [FK__gisWKBRay__idfsG__35FE8BDA];

ALTER TABLE [dbo].[gisWKBRayon] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRayon_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBRayonReady] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRayonReady_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBRegion] WITH CHECK CHECK CONSTRAINT [FK__gisWKBReg__idfsG__34164368];

ALTER TABLE [dbo].[gisWKBRegion] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRegion_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBRegionReady] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRegionReady_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBRiver] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRiver_gisCountry];

ALTER TABLE [dbo].[gisWKBRiver] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRiver_gisOtherBaseReference];

ALTER TABLE [dbo].[gisWKBRiver] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRiver_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBRiverPolygon] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRiverPolygon_gisCountry];

ALTER TABLE [dbo].[gisWKBRiverPolygon] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRiverPolygon_gisOtherBaseReference];

ALTER TABLE [dbo].[gisWKBRiverPolygon] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRiverPolygon_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBRuralDistrict] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRuralDistrict_gisCountry];

ALTER TABLE [dbo].[gisWKBRuralDistrict] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRuralDistrict_gisOtherBaseReference];

ALTER TABLE [dbo].[gisWKBRuralDistrict] WITH CHECK CHECK CONSTRAINT [FK_gisWKBRuralDistrict_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBSea] WITH CHECK CHECK CONSTRAINT [FK_gisWKBSea_gisOtherBaseReference];

ALTER TABLE [dbo].[gisWKBSea] WITH CHECK CHECK CONSTRAINT [FK_gisWKBSea_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBSettlement] WITH CHECK CHECK CONSTRAINT [FK__gisWKBSet__idfsG__322DFAF6];

ALTER TABLE [dbo].[gisWKBSettlement] WITH CHECK CHECK CONSTRAINT [FK_gisWKBSettlement_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBSettlementReady] WITH CHECK CHECK CONSTRAINT [FK_gisWKBSettlementReady_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWKBSmallRiver] WITH CHECK CHECK CONSTRAINT [FK_gisWKBSmallRiver_gisCountry];

ALTER TABLE [dbo].[gisWKBSmallRiver] WITH CHECK CHECK CONSTRAINT [FK_gisWKBSmallRiver_gisOtherBaseReference];

ALTER TABLE [dbo].[gisWKBSmallRiver] WITH CHECK CHECK CONSTRAINT [FK_gisWKBSmallRiver_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[HumanActualAddlInfo] WITH CHECK CHECK CONSTRAINT [[FK_HumanActualAddlInfo_Human_UID];

ALTER TABLE [dbo].[HumanActualAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanActualAddlInfo_BaseRef_AgeUOM];

ALTER TABLE [dbo].[HumanActualAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanActualAddlInfo_BaseRef_ContactPhone2NbrType];

ALTER TABLE [dbo].[HumanActualAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanActualAddlInfo_BaseRef_ContactPhoneNbrType];

ALTER TABLE [dbo].[HumanActualAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanActualAddlInfo_BaseRef_IsEmployed];

ALTER TABLE [dbo].[HumanActualAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanActualAddlInfo_tlbHUmanActual_idfHumanActual];

ALTER TABLE [dbo].[HumanActualAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanActualAddlInfo_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[HumanActualAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanActulaAddlIfo_BaseRef_IsSchool];

ALTER TABLE [dbo].[HumanActualAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanActulaAddlIfo_GeoLocationShared_AtlAddressID];

ALTER TABLE [dbo].[HumanActualAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanActulaAddlIfo_GeosharedaddressID];

ALTER TABLE [dbo].[HumanAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanAddlIfo_BaseRef_IsSchool];

ALTER TABLE [dbo].[HumanAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanAddlIfo_Geo_addressID];

ALTER TABLE [dbo].[HumanAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanAddlInfo_BaseRef_ContactPhoneNbr2Type];

ALTER TABLE [dbo].[HumanAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanAddlInfo_BaseRef_ContactPhoneNbrType];

ALTER TABLE [dbo].[HumanAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanAddlInfo_BaseRef_IsEmployed];

ALTER TABLE [dbo].[HumanAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanAddlInfo_BaseRef_IsInSchool];

ALTER TABLE [dbo].[HumanAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanAddlInfo_BaseRef_ReportedAgeUOM];

ALTER TABLE [dbo].[HumanAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanAddlInfo_GeoLocation_AltAddress];

ALTER TABLE [dbo].[HumanAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanAddlInfo_Human_idfhuman];

ALTER TABLE [dbo].[HumanAddlInfo] WITH CHECK CHECK CONSTRAINT [FK_HumanAddlInfo_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[HumanDiseaseReportRelationship] WITH CHECK CHECK CONSTRAINT [FK_HumanDiseaseReportRelationship_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[HumanDiseaseReportRelationship] WITH CHECK CHECK CONSTRAINT [FK_HumanDiseaseReportReln_BaseRef_RelTypeID];

ALTER TABLE [dbo].[HumanDiseaseReportRelationship] WITH CHECK CHECK CONSTRAINT [FK_HumanDiseaseReportReln_tlbHumanCase_HumanDiseaseReportID];

ALTER TABLE [dbo].[HumanDiseaseReportRelationship] WITH CHECK CHECK CONSTRAINT [FK_HumanDiseaseReportReln_tlbHumanCase_RelatedToHumanDiseaseReportIdRoot];

ALTER TABLE [dbo].[HumanDiseaseReportRelationship] WITH CHECK CHECK CONSTRAINT [FK_HumanDiseaseReportReln_tlbHumanCase_RelateToHumanDiseaseReportID];

ALTER TABLE [dbo].[HumanDiseaseReportVaccination] WITH CHECK CHECK CONSTRAINT [FK_HumanDiseaseReportVaccination_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[HumanDiseaseReportVaccination] WITH CHECK CHECK CONSTRAINT [R_1417];

ALTER TABLE [dbo].[LkupConfigParm] WITH CHECK CHECK CONSTRAINT [FK_LkupConfigParm_trtBaseReference_idfsBaseReference];

ALTER TABLE [dbo].[LkupConfigParm] WITH CHECK CHECK CONSTRAINT [FK_LkupConfigParm_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[LkupCountryToStandardRoleMap] WITH CHECK CHECK CONSTRAINT [FK_CountryRoleToStandardRoleMap_gidCountry_CountryID];

ALTER TABLE [dbo].[LkupCountryToStandardRoleMap] WITH CHECK CHECK CONSTRAINT [FK_CountryRoleToStandardRoleMap_trtBaseReference_StadardRoleID];

ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH CHECK CHECK CONSTRAINT [FK_AppObj_EIDSSMenu_MenuID];

ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH CHECK CHECK CONSTRAINT [FK_AppObj_ObjName];

ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH CHECK CHECK CONSTRAINT [FK_AppObj_ObjType];

ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH CHECK CHECK CONSTRAINT [FK_AppObj_PageToolTip];

ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH CHECK CHECK CONSTRAINT [FK_LkupEIDSSAppObject_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[LkupEIDSSMenu] WITH CHECK CHECK CONSTRAINT [FK_LkupEIDSSMenu_BaseRef_MenuID];

ALTER TABLE [dbo].[LkupEIDSSMenu] WITH CHECK CHECK CONSTRAINT [FK_LkupEIDSSMenu_BaseRef_ParentMenuID];

ALTER TABLE [dbo].[LkupEIDSSMenu] WITH CHECK CHECK CONSTRAINT [FK_LkupEIDSSMenu_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[LkupEIDSSMenuToEventType] WITH CHECK CHECK CONSTRAINT [FK_LkupEIDSSMenuToEventType_BaseRef_MenuID];

ALTER TABLE [dbo].[LkupEIDSSMenuToEventType] WITH CHECK CHECK CONSTRAINT [FK_LkupEIDSSMenuToEventType_EventType_idfsEventTypeId];

ALTER TABLE [dbo].[LkupEIDSSMenuToEventType] WITH CHECK CHECK CONSTRAINT [FK_LkupEIDSSMenuToEventType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[LkupEIDSSMenuToSystemFunction] WITH CHECK CHECK CONSTRAINT [FK_LkupEIDSSMenuToSystemFunction_BaseRef_MenuID];

ALTER TABLE [dbo].[LkupEIDSSMenuToSystemFunction] WITH CHECK CHECK CONSTRAINT [FK_LkupEIDSSMenuToSystemFunction_BaseRef_SystemFunctionID];

ALTER TABLE [dbo].[LkupEIDSSMenuToSystemFunction] WITH CHECK CHECK CONSTRAINT [FK_LkupEIDSSMenuToSystemFunction_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[LKUPNextKey] WITH CHECK CHECK CONSTRAINT [FK_LKUPNextKey_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[LkupRoleDashboardObject] WITH CHECK CHECK CONSTRAINT [FK_LkupRoleDashboardObject_AppObject_SashboardObjectID];

ALTER TABLE [dbo].[LkupRoleDashboardObject] WITH CHECK CHECK CONSTRAINT [FK_LkupRoleDashboardObject_idfEmployee];

ALTER TABLE [dbo].[LkupRoleDashboardObject] WITH CHECK CHECK CONSTRAINT [FK_LkupRoleDashboardObject_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[LkupRoleMenuAccess] WITH CHECK CHECK CONSTRAINT [FK_LkupRoleMenuAccess_idfEmployee];

ALTER TABLE [dbo].[LkupRoleMenuAccess] WITH CHECK CHECK CONSTRAINT [FK_LkupRoleMenuAccess_LkupEIDSSMenu_MenuID];

ALTER TABLE [dbo].[LkupRoleMenuAccess] WITH CHECK CHECK CONSTRAINT [FK_LkupRoleMenuAccess_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] WITH CHECK CHECK CONSTRAINT [FK_lkupRoleSysFunctionAccess_BaseReference_SysFunctionOperationID];

ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] WITH CHECK CHECK CONSTRAINT [FK_lkupRoleSysFunctionAccess_BaseReference_SystemFunction];

ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] WITH CHECK CHECK CONSTRAINT [FK_lkupRoleSysFunctionAccess_trtBaseRef_AccessPermissionID];

ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] WITH CHECK CHECK CONSTRAINT [FK_LkupRoleSystemFunctionAccess_idfEmployee];

ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] WITH CHECK CHECK CONSTRAINT [FK_LkupRoleSystemFunctionAccess_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[LkupSystemFunctionToOperation] WITH CHECK CHECK CONSTRAINT [FK_LkupSystemFunctionToOperation_BaseReference_idfsModule];

ALTER TABLE [dbo].[LkupSystemFunctionToOperation] WITH CHECK CHECK CONSTRAINT [FK_LkupSystemFunctionToOperation_BaseReference_SysFunctionOperationID];

ALTER TABLE [dbo].[LkupSystemFunctionToOperation] WITH CHECK CHECK CONSTRAINT [FK_LkupSystemFunctionToOperation_BaseReference_SystemFunction];

ALTER TABLE [dbo].[LkupSystemFunctionToOperation] WITH CHECK CHECK CONSTRAINT [FK_LkupSystemFunctionToOperation_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[locBaseReference] WITH CHECK CHECK CONSTRAINT [FK_locBaseReference_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[locStringNameTranslation] WITH CHECK CHECK CONSTRAINT [FK_locStringNameTranslation_locBaseReference__idflBaseReference_R_1702];

ALTER TABLE [dbo].[locStringNameTranslation] WITH CHECK CHECK CONSTRAINT [FK_locStringNameTranslation_trtBaseReference__idfsLanguage_R_1692];

ALTER TABLE [dbo].[locStringNameTranslation] WITH CHECK CHECK CONSTRAINT [FK_locStringNameTranslation_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[LOINCEidssMapping] WITH CHECK CHECK CONSTRAINT [FK_LOINCEidssMapping_trtBaseReference__idfsBaseReference];

ALTER TABLE [dbo].[LOINCEidssMapping] WITH CHECK CHECK CONSTRAINT [FK_LOINCEidssMapping_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[LOINCEidssMapping] WITH CHECK CHECK CONSTRAINT [FK_LOINCEidssMapping_trtReferenecType__idfsReferenceType];

ALTER TABLE [dbo].[MonitoringSessionToSampleType] WITH CHECK CHECK CONSTRAINT [FK_MonitoringSessionToSampleType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[MonitoringSessionToSampleType] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionToSampleType_tlbMonitoringSession_MonitoringSessionID];

ALTER TABLE [dbo].[MonitoringSessionToSampleType] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionToSampleType_trtSampleType_SampleType];

ALTER TABLE [dbo].[MonitoringSessionToSampleType] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionToSampleType_trtSpeciesType_SpeciesType];

ALTER TABLE [dbo].[OutbreakCaseContact] WITH CHECK CHECK CONSTRAINT [FK_OutbreakCaseContact_OutbreakCase_OutbreakCaseReportUID];

ALTER TABLE [dbo].[OutbreakCaseContact] WITH CHECK CHECK CONSTRAINT [FK_OutbreakCaseContact_tlbContactedCasePerson_idfContactedCasePersonID];

ALTER TABLE [dbo].[OutbreakCaseContact] WITH CHECK CHECK CONSTRAINT [FK_OutbreakCaseContact_tlbHuman_idfHuman];

ALTER TABLE [dbo].[OutbreakCaseContact] WITH CHECK CHECK CONSTRAINT [FK_OutbreakCaseContact_tlbObservation_ContactTracingObservationID];

ALTER TABLE [dbo].[OutbreakCaseContact] WITH CHECK CHECK CONSTRAINT [FK_OutbreakCaseContact_trtBaseReference_ContactRelationshipTypeID];

ALTER TABLE [dbo].[OutbreakCaseContact] WITH CHECK CHECK CONSTRAINT [FK_OutbreakCaseContact_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[OutbreakCaseReport] WITH CHECK CHECK CONSTRAINT [FK_OutbreakCase_tlbHUmanCase_idfHumanCaseID];

ALTER TABLE [dbo].[OutbreakCaseReport] WITH CHECK CHECK CONSTRAINT [FK_OutbreakCase_tlbObservation_CaseEPIObservationID];

ALTER TABLE [dbo].[OutbreakCaseReport] WITH CHECK CHECK CONSTRAINT [FK_OutbreakCase_tlbOutbreak_idfOutbreakID];

ALTER TABLE [dbo].[OutbreakCaseReport] WITH CHECK CHECK CONSTRAINT [FK_OutbreakCase_tlbVetCase_idfVetCaseID];

ALTER TABLE [dbo].[OutbreakCaseReport] WITH CHECK CHECK CONSTRAINT [FK_OutbreakCaseReport_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[OutbreakCaseReport] WITH CHECK CHECK CONSTRAINT [FK_OutbreatkCase_Observation_OutbreakCaseObservationID];

ALTER TABLE [dbo].[OutbreakSpeciesParameter] WITH CHECK CHECK CONSTRAINT [FK_outbreakSpeciesParameter_tlbOutbreak_OutbreakID];

ALTER TABLE [dbo].[OutbreakSpeciesParameter] WITH CHECK CHECK CONSTRAINT [FK_OutbreakSpeciesParameter_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[OutbreakSpeciesParameter] WITH CHECK CHECK CONSTRAINT [FK_OutbreakSpeciesParm_FormTemplate_CaseMonitoringTemplateID];

ALTER TABLE [dbo].[OutbreakSpeciesParameter] WITH CHECK CHECK CONSTRAINT [FK_OutbreakSpeciesParm_FormTemplate_CaseQuestionaireTemplateID];

ALTER TABLE [dbo].[OutbreakSpeciesParameter] WITH CHECK CHECK CONSTRAINT [FK_OutbreakSpeciesParm_FormTemplate_ContactTracingTemplateID];

ALTER TABLE [dbo].[SecurityPolicyConfiguration] WITH CHECK CHECK CONSTRAINT [FK_SecurityPolicyConfig_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[SiteToSiteAccess] WITH CHECK CHECK CONSTRAINT [FK_SiteToSiteAccess_BaseReference_AaccessPermissionID];

ALTER TABLE [dbo].[SiteToSiteAccess] WITH CHECK CHECK CONSTRAINT [FK_SiteToSiteAccess_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[SiteToSiteAccess] WITH CHECK CHECK CONSTRAINT [FK_SiteToSiteAccess_tstSite_GranteeSite];

ALTER TABLE [dbo].[SiteToSiteAccess] WITH CHECK CHECK CONSTRAINT [FK_SiteToSiteAccess_tstSite_GrantToSite];

ALTER TABLE [dbo].[SystemPreference] WITH CHECK CHECK CONSTRAINT [FK_SystemPreference_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasAggregateFunction] WITH CHECK CHECK CONSTRAINT [FK_tasAggregateFunction_trtBaseReference__idfsAggregateFunction];

ALTER TABLE [dbo].[tasAggregateFunction] WITH CHECK CHECK CONSTRAINT [FK_tasAggregateFunction_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasFieldSourceForTable] WITH CHECK CHECK CONSTRAINT [FK_tasFieldSourceForTable_tasSearchField__idfsSearchField];

ALTER TABLE [dbo].[tasFieldSourceForTable] WITH CHECK CHECK CONSTRAINT [FK_tasFieldSourceForTable_tasSearchTable__idfSearchTable];

ALTER TABLE [dbo].[tasFieldSourceForTable] WITH CHECK CHECK CONSTRAINT [FK_tasFieldSourceForTable_tasSearchTable__idfUnionSearchTable];

ALTER TABLE [dbo].[tasFieldSourceForTable] WITH CHECK CHECK CONSTRAINT [FK_tasFieldSourceForTable_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasglLayout] WITH CHECK CHECK CONSTRAINT [FK_tasglLayout_tasglLayoutFolder__idfsLayoutFolder_R_1698_1];

ALTER TABLE [dbo].[tasglLayout] WITH CHECK CHECK CONSTRAINT [FK_tasglLayout_tasglQuery__idfsQuery_R_1326_1];

ALTER TABLE [dbo].[tasglLayout] WITH CHECK CHECK CONSTRAINT [FK_tasglLayout_tlbPerson__idfPerson];

ALTER TABLE [dbo].[tasglLayout] WITH CHECK CHECK CONSTRAINT [FK_tasglLayout_trtBaseReference__idfsDefaultGroupDate];

ALTER TABLE [dbo].[tasglLayout] WITH CHECK CHECK CONSTRAINT [FK_tasglLayout_trtBaseReference__idfsDescription_R_1717_1];

ALTER TABLE [dbo].[tasglLayout] WITH CHECK CHECK CONSTRAINT [FK_tasglLayout_trtBaseReference__idfsLayout_R_1708_1];

ALTER TABLE [dbo].[tasglLayout] WITH CHECK CHECK CONSTRAINT [FK_tasglLayout_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasglLayoutFolder] WITH CHECK CHECK CONSTRAINT [FK_tasglLayoutFolder_tasglLayoutFolder__idfsParentLayoutFolder_R_1715_1];

ALTER TABLE [dbo].[tasglLayoutFolder] WITH CHECK CHECK CONSTRAINT [FK_tasglLayoutFolder_tasglQuery__idfsQuery_R_1697_1];

ALTER TABLE [dbo].[tasglLayoutFolder] WITH CHECK CHECK CONSTRAINT [FK_tasglLayoutFolder_trtBaseReference__idfsLayoutFolder_R_1703_1];

ALTER TABLE [dbo].[tasglLayoutFolder] WITH CHECK CHECK CONSTRAINT [FK_tasglLayoutFolder_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasglLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasglLayoutSearchField_tasAggregateFunction__idfsAggregateFunction];

ALTER TABLE [dbo].[tasglLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasglLayoutSearchField_tasglLayoutSearchField__idfDateLayoutSearchField];

ALTER TABLE [dbo].[tasglLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasglLayoutSearchField_tasglLayoutSearchField__idfUnitLayoutSearchField];

ALTER TABLE [dbo].[tasglLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasglLayoutSearchField_tasglQuerySearchField__idfQuerySearchField];

ALTER TABLE [dbo].[tasglLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasglLayoutSearchField_tasLayout_idflLayout];

ALTER TABLE [dbo].[tasglLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasglLayoutSearchField_trtBaseReference__idfsGroupDate];

ALTER TABLE [dbo].[tasglLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasglLayoutSearchField_trtBaseReference_idfsLayoutSearchFieldName];

ALTER TABLE [dbo].[tasglLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasglLayoutSearchField_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasglLayoutToMapImage] WITH CHECK CHECK CONSTRAINT [FK_tasglLayoutToMapImage_tasglLayout__idfsLayout];

ALTER TABLE [dbo].[tasglLayoutToMapImage] WITH CHECK CHECK CONSTRAINT [FK_tasglLayoutToMapImage_tasglMapImage__idfMapImage];

ALTER TABLE [dbo].[tasglLayoutToMapImage] WITH CHECK CHECK CONSTRAINT [FK_tasglLayoutToMapImage_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasglMapImage] WITH CHECK CHECK CONSTRAINT [FK_tasglMapImage_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasglQuery] WITH CHECK CHECK CONSTRAINT [FK_tasglQuery_trtBaseReference__idfsDescription_R_1718_1];

ALTER TABLE [dbo].[tasglQuery] WITH CHECK CHECK CONSTRAINT [FK_tasglQuery_trtBaseReference__idfsQueryName_R_1709_1];

ALTER TABLE [dbo].[tasglQuery] WITH CHECK CHECK CONSTRAINT [FK_tasglQuery_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasglQueryConditionGroup] WITH CHECK CHECK CONSTRAINT [FK_tasglQueryConditionGroup_tasglQueryConditionGroup__idfParentQueryConditionGroup_R_1345_1];

ALTER TABLE [dbo].[tasglQueryConditionGroup] WITH CHECK CHECK CONSTRAINT [FK_tasglQueryConditionGroup_tasglQuerySearchObject__idfQuerySearchObject_R_1344_1];

ALTER TABLE [dbo].[tasglQueryConditionGroup] WITH CHECK CHECK CONSTRAINT [FK_tasglQueryConditionGroup_tasglQuerySearchObject__idfSubQuerySearchObject];

ALTER TABLE [dbo].[tasglQueryConditionGroup] WITH CHECK CHECK CONSTRAINT [FK_tasglQueryConditionGroup_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasglQuerySearchField] WITH CHECK CHECK CONSTRAINT [FK_tasglQuerySearchField_ffParameter__idfsParameter_R_1353_1];

ALTER TABLE [dbo].[tasglQuerySearchField] WITH CHECK CHECK CONSTRAINT [FK_tasglQuerySearchField_tasglQuerySearchObject__idfQuerySearchObject_R_1351_1];

ALTER TABLE [dbo].[tasglQuerySearchField] WITH CHECK CHECK CONSTRAINT [FK_tasglQuerySearchField_tasglSearchFieldList__idfsSearchField_R_1352_1];

ALTER TABLE [dbo].[tasglQuerySearchField] WITH CHECK CHECK CONSTRAINT [FK_tasglQuerySearchField_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasglQuerySearchFieldCondition] WITH CHECK CHECK CONSTRAINT [FK_tasglQuerySearchFieldCondition_tasglQueryConditionGroup__idfQueryConditionGroup_R_1342_1];

ALTER TABLE [dbo].[tasglQuerySearchFieldCondition] WITH CHECK CHECK CONSTRAINT [FK_tasglQuerySearchFieldCondition_tasglQuerySearchField__idfQuerySearchField_R_1343_1];

ALTER TABLE [dbo].[tasglQuerySearchFieldCondition] WITH CHECK CHECK CONSTRAINT [FK_tasglQuerySearchFieldCondition_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasglQuerySearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasglQuerySearchObject_tasglQuery__idfsQueryName_R_1327_1];

ALTER TABLE [dbo].[tasglQuerySearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasglQuerySearchObject_tasglQuerySearchObject__idfParentQuerySearchObject_R_1329_1];

ALTER TABLE [dbo].[tasglQuerySearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasglQuerySearchObject_tasSearchObject__idfsSearchObject_R_1328_1];

ALTER TABLE [dbo].[tasglQuerySearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasglQuerySearchObject_trtBaseReference__idfsReportType];

ALTER TABLE [dbo].[tasglQuerySearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasglQuerySearchObject_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasglView] WITH CHECK CHECK CONSTRAINT [FK_tasglView_tasglLayout__idfsLayout];

ALTER TABLE [dbo].[tasglView] WITH CHECK CHECK CONSTRAINT [FK_tasglView_tasglViewColumn__idfChartXAxisViewColumn];

ALTER TABLE [dbo].[tasglView] WITH CHECK CHECK CONSTRAINT [FK_tasglView_tasglViewColumn__idfMapAdminUnitViewColumn];

ALTER TABLE [dbo].[tasglView] WITH CHECK CHECK CONSTRAINT [FK_tasglView_trtBaseReference__idfsLanguage];

ALTER TABLE [dbo].[tasglView] WITH CHECK CHECK CONSTRAINT [FK_tasglView_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasglViewBand] WITH CHECK CHECK CONSTRAINT [FK_tasglViewBand_tasglLayoutSearchField__idfLayoutSearchField];

ALTER TABLE [dbo].[tasglViewBand] WITH CHECK CHECK CONSTRAINT [FK_tasglViewBand_tasglView__idfView_idfsLanguage];

ALTER TABLE [dbo].[tasglViewBand] WITH CHECK CHECK CONSTRAINT [FK_tasglViewBand_tasglViewBand__idfParentViewBand];

ALTER TABLE [dbo].[tasglViewBand] WITH CHECK CHECK CONSTRAINT [FK_tasglViewBand_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasglViewColumn] WITH CHECK CHECK CONSTRAINT [FK_tasglViewColumn_tasAggregateFunction__idfsAggregateFunction];

ALTER TABLE [dbo].[tasglViewColumn] WITH CHECK CHECK CONSTRAINT [FK_tasglViewColumn_tasglLayoutSearchField__idfLayoutSearchField];

ALTER TABLE [dbo].[tasglViewColumn] WITH CHECK CHECK CONSTRAINT [FK_tasglViewColumn_tasglView__idfView_idfsLanguage];

ALTER TABLE [dbo].[tasglViewColumn] WITH CHECK CHECK CONSTRAINT [FK_tasglViewColumn_tasglViewBand__idfViewBand];

ALTER TABLE [dbo].[tasglViewColumn] WITH CHECK CHECK CONSTRAINT [FK_tasglViewColumn_tasglViewColumn__idfDenominatorViewColumn];

ALTER TABLE [dbo].[tasglViewColumn] WITH CHECK CHECK CONSTRAINT [FK_tasglViewColumn_tasglViewColumn__idfSourceViewColumn];

ALTER TABLE [dbo].[tasglViewColumn] WITH CHECK CHECK CONSTRAINT [FK_tasglViewColumn_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasLayout] WITH CHECK CHECK CONSTRAINT [FK_tasLayout_locBaseReference__idflDescription_R_1717];

ALTER TABLE [dbo].[tasLayout] WITH CHECK CHECK CONSTRAINT [FK_tasLayout_locBaseReference__idflLayout_R_1708];

ALTER TABLE [dbo].[tasLayout] WITH CHECK CHECK CONSTRAINT [FK_tasLayout_tasglLayout__idfsGlobalLayout_R_1794];

ALTER TABLE [dbo].[tasLayout] WITH CHECK CHECK CONSTRAINT [FK_tasLayout_tasLayoutFolder__idflLayoutFolder_R_1698];

ALTER TABLE [dbo].[tasLayout] WITH CHECK CHECK CONSTRAINT [FK_tasLayout_tasQuery__idflQuery_R_1326];

ALTER TABLE [dbo].[tasLayout] WITH CHECK CHECK CONSTRAINT [FK_tasLayout_tlbPerson__idfPerson];

ALTER TABLE [dbo].[tasLayout] WITH CHECK CHECK CONSTRAINT [FK_tasLayout_trtBaseReference__idfsDefaultGroupDate];

ALTER TABLE [dbo].[tasLayout] WITH CHECK CHECK CONSTRAINT [FK_tasLayout_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasLayoutFolder] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutFolder_locBaseReference__idflLayoutFolder_R_1703];

ALTER TABLE [dbo].[tasLayoutFolder] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutFolder_tasglLayoutFolder__idfsGlobalLayoutFolder_R_1796];

ALTER TABLE [dbo].[tasLayoutFolder] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutFolder_tasLayoutFolder__idflParentLayoutFolder_R_1715];

ALTER TABLE [dbo].[tasLayoutFolder] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutFolder_tasQuery__idflQuery_R_1697];

ALTER TABLE [dbo].[tasLayoutFolder] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutFolder_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutSearchField_locBaseReference_idflLayoutSearchFieldName];

ALTER TABLE [dbo].[tasLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutSearchField_tasAggregateFunction__idfsAggregateFunction];

ALTER TABLE [dbo].[tasLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutSearchField_tasLayout_idflLayout];

ALTER TABLE [dbo].[tasLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutSearchField_tasLayoutSearchField__idfDateLayoutSearchField];

ALTER TABLE [dbo].[tasLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutSearchField_tasLayoutSearchField__idfUnitLayoutSearchField];

ALTER TABLE [dbo].[tasLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutSearchField_tasQuerySearchField__idfQuerySearchField];

ALTER TABLE [dbo].[tasLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutSearchField_trtBaseReference__idfsGroupDate];

ALTER TABLE [dbo].[tasLayoutSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutSearchField_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasLayoutToMapImage] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutToMapImage_tasLayout__idflLayout];

ALTER TABLE [dbo].[tasLayoutToMapImage] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutToMapImage_tasMapImage__idfMapImage];

ALTER TABLE [dbo].[tasLayoutToMapImage] WITH CHECK CHECK CONSTRAINT [FK_tasLayoutToMapImage_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasMainTableForObject] WITH CHECK CHECK CONSTRAINT [FK_tasMainTableForObject_tasSearchObject__idfsSearchObject];

ALTER TABLE [dbo].[tasMainTableForObject] WITH CHECK CHECK CONSTRAINT [FK_tasMainTableForObject_tasSearchTable__idfMainSearchTable];

ALTER TABLE [dbo].[tasMainTableForObject] WITH CHECK CHECK CONSTRAINT [FK_tasMainTableForObject_tasSearchTable__idfMandatorySearchTable];

ALTER TABLE [dbo].[tasMainTableForObject] WITH CHECK CHECK CONSTRAINT [FK_tasMainTableForObject_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasMapImage] WITH CHECK CHECK CONSTRAINT [FK_tasMapImage_tasglMapImage__idfGlobalMapImage];

ALTER TABLE [dbo].[tasMapImage] WITH CHECK CHECK CONSTRAINT [FK_tasMapImage_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasQuery] WITH CHECK CHECK CONSTRAINT [FK_tasQuery_locBaseReference__idflDescription_R_1718];

ALTER TABLE [dbo].[tasQuery] WITH CHECK CHECK CONSTRAINT [FK_tasQuery_locBaseReference__idflQueryName_R_1709];

ALTER TABLE [dbo].[tasQuery] WITH CHECK CHECK CONSTRAINT [FK_tasQuery_tasglQuery__idfsGlobalQuery_R_1795];

ALTER TABLE [dbo].[tasQuery] WITH CHECK CHECK CONSTRAINT [FK_tasQuery_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasQueryConditionGroup] WITH CHECK CHECK CONSTRAINT [FK_tasQueryConditionGroup_tasQueryConditionGroup__idfParentQueryConditionGroup_R_1345];

ALTER TABLE [dbo].[tasQueryConditionGroup] WITH CHECK CHECK CONSTRAINT [FK_tasQueryConditionGroup_tasQuerySearchObject__idfQuerySearchObject_R_1344];

ALTER TABLE [dbo].[tasQueryConditionGroup] WITH CHECK CHECK CONSTRAINT [FK_tasQueryConditionGroup_tasQuerySearchObject__idfSubQuerySearchObject];

ALTER TABLE [dbo].[tasQueryConditionGroup] WITH CHECK CHECK CONSTRAINT [FK_tasQueryConditionGroup_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasQuerySearchField] WITH CHECK CHECK CONSTRAINT [FK_tasQuerySearchField_ffParameter__idfsParameter_R_1353];

ALTER TABLE [dbo].[tasQuerySearchField] WITH CHECK CHECK CONSTRAINT [FK_tasQuerySearchField_tasQuerySearchObject__idfQuerySearchObject_R_1351];

ALTER TABLE [dbo].[tasQuerySearchField] WITH CHECK CHECK CONSTRAINT [FK_tasQuerySearchField_tasSearchFieldList__idfsSearchField_R_1352];

ALTER TABLE [dbo].[tasQuerySearchField] WITH CHECK CHECK CONSTRAINT [FK_tasQuerySearchField_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasQuerySearchFieldCondition] WITH CHECK CHECK CONSTRAINT [FK_tasQuerySearchFieldCondition_tasQueryConditionGroup__idfQueryConditionGroup_R_1342];

ALTER TABLE [dbo].[tasQuerySearchFieldCondition] WITH CHECK CHECK CONSTRAINT [FK_tasQuerySearchFieldCondition_tasQuerySearchField__idfQuerySearchField_R_1343];

ALTER TABLE [dbo].[tasQuerySearchFieldCondition] WITH CHECK CHECK CONSTRAINT [FK_tasQuerySearchFieldCondition_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasQuerySearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasQuerySearchObject_tasQuery__idflQueryName_R_1327];

ALTER TABLE [dbo].[tasQuerySearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasQuerySearchObject_tasQuerySearchObject__idfParentQuerySearchObject_R_1329];

ALTER TABLE [dbo].[tasQuerySearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasQuerySearchObject_tasSearchObject__idfsSearchObject_R_1328];

ALTER TABLE [dbo].[tasQuerySearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasQuerySearchObject_trtBaseReference__idfsReportType];

ALTER TABLE [dbo].[tasQuerySearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasQuerySearchObject_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasSearchField_gisReferenceType__idfsGISReferenceType_R_1720];

ALTER TABLE [dbo].[tasSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasSearchField_tasAggregateFunction__idfsDefaultAggregateFunction];

ALTER TABLE [dbo].[tasSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasSearchField_tasSearchObject__idfsSearchObject_R_1346];

ALTER TABLE [dbo].[tasSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasSearchField_trtBaseReference__idfsSearchField_R_1355];

ALTER TABLE [dbo].[tasSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasSearchField_trtBaseReference__idfsSearchFieldType_R_1587];

ALTER TABLE [dbo].[tasSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasSearchField_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasSearchField] WITH CHECK CHECK CONSTRAINT [FK_tasSearchFieldList_trtReferenceType__idfsReferenceType_R_1349];

ALTER TABLE [dbo].[tasSearchFieldsWithRelatedValues] WITH CHECK CHECK CONSTRAINT [FK_tasSearchFieldsWithRelatedValues_tasSearchField__idfsRelatedSearchField];

ALTER TABLE [dbo].[tasSearchFieldsWithRelatedValues] WITH CHECK CHECK CONSTRAINT [FK_tasSearchFieldsWithRelatedValues_tasSearchField__idfsSearchField];

ALTER TABLE [dbo].[tasSearchFieldsWithRelatedValues] WITH CHECK CHECK CONSTRAINT [FK_tasSearchFieldsWithRelatedValues_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasSearchFieldToFFParameter] WITH CHECK CHECK CONSTRAINT [FK_tasSearchFieldToFFParameter_ffParameter_idfsParameter];

ALTER TABLE [dbo].[tasSearchFieldToFFParameter] WITH CHECK CHECK CONSTRAINT [FK_tasSearchFieldToFFParameter_tasSearchField_idfsSearchField];

ALTER TABLE [dbo].[tasSearchFieldToFFParameter] WITH CHECK CHECK CONSTRAINT [FK_tasSearchFieldToFFParameter_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasSearchFieldToPersonalDataGroup] WITH CHECK CHECK CONSTRAINT [FK_tasSearchFieldToPersonalDataGroup_tasSearchField_idfsSearchField];

ALTER TABLE [dbo].[tasSearchFieldToPersonalDataGroup] WITH CHECK CHECK CONSTRAINT [FK_tasSearchFieldToPersonalDataGroup_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasSearchFieldToPersonalDataGroup] WITH CHECK CHECK CONSTRAINT [FK_tasSearchFieldToPersonalDataGroup_tstPersonalDataGroup_idfPersonalDataGroup];

ALTER TABLE [dbo].[tasSearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasSearchObject_trtBaseReference__idfsFormType_R_1657];

ALTER TABLE [dbo].[tasSearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasSearchObject_trtBaseReference__idfsSearchObject_R_1357];

ALTER TABLE [dbo].[tasSearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasSearchObject_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasSearchObjectToSearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasSearchObjectToSearchObject_tasSearchObject__idfsParentSearchObject_R_1714];

ALTER TABLE [dbo].[tasSearchObjectToSearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasSearchObjectToSearchObject_tasSearchObject__idfsRelatedSearchObject_R_1713];

ALTER TABLE [dbo].[tasSearchObjectToSearchObject] WITH CHECK CHECK CONSTRAINT [FK_tasSearchObjectToSearchObject_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasSearchObjectToSystemFunction] WITH CHECK CHECK CONSTRAINT [FK_tasSearchObjectToSystemFunction_tasSearchObject_idfsSearchObject];

ALTER TABLE [dbo].[tasSearchObjectToSystemFunction] WITH CHECK CHECK CONSTRAINT [FK_tasSearchObjectToSystemFunction_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasSearchObjectToSystemFunction] WITH CHECK CHECK CONSTRAINT [FK_tasSearchObjectToSystemFunction_trtSystemFunction_idfsSystemFunction];

ALTER TABLE [dbo].[tasSearchTable] WITH CHECK CHECK CONSTRAINT [FK_tasSearchTable_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasSearchTableJoinRule] WITH CHECK CHECK CONSTRAINT [FK_tasSearchTableJoinRule_tasSearchTable__idfMainSearchTable_R_1723];

ALTER TABLE [dbo].[tasSearchTableJoinRule] WITH CHECK CHECK CONSTRAINT [FK_tasSearchTableJoinRule_tasSearchTable__idfParentSearchTable_R_1700];

ALTER TABLE [dbo].[tasSearchTableJoinRule] WITH CHECK CHECK CONSTRAINT [FK_tasSearchTableJoinRule_tasSearchTable__idfSearchTable_R_1701];

ALTER TABLE [dbo].[tasSearchTableJoinRule] WITH CHECK CHECK CONSTRAINT [FK_tasSearchTableJoinRule_tasSearchTable__idfUnionSearchTable];

ALTER TABLE [dbo].[tasSearchTableJoinRule] WITH CHECK CHECK CONSTRAINT [FK_tasSearchTableJoinRule_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasView] WITH CHECK CHECK CONSTRAINT [FK_tasView_tasglView__idfGlobalView_idfsLanguage];

ALTER TABLE [dbo].[tasView] WITH CHECK CHECK CONSTRAINT [FK_tasView_tasLayout__idflLayout];

ALTER TABLE [dbo].[tasView] WITH CHECK CHECK CONSTRAINT [FK_tasView_tasViewColumn__idfChartXAxisViewColumn];

ALTER TABLE [dbo].[tasView] WITH CHECK CHECK CONSTRAINT [FK_tasView_tasViewColumn__idfMapAdminUnitViewColumn];

ALTER TABLE [dbo].[tasView] WITH CHECK CHECK CONSTRAINT [FK_tasView_trtBaseReference__idfsLanguage];

ALTER TABLE [dbo].[tasView] WITH CHECK CHECK CONSTRAINT [FK_tasView_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasViewBand] WITH CHECK CHECK CONSTRAINT [FK_tasViewBand_tasLayoutSearchField__idfLayoutSearchField];

ALTER TABLE [dbo].[tasViewBand] WITH CHECK CHECK CONSTRAINT [FK_tasViewBand_tasView__idfView_idfsLanguage];

ALTER TABLE [dbo].[tasViewBand] WITH CHECK CHECK CONSTRAINT [FK_tasViewBand_tasViewBand__idfParentViewBand];

ALTER TABLE [dbo].[tasViewBand] WITH CHECK CHECK CONSTRAINT [FK_tasViewBand_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tasViewColumn] WITH CHECK CHECK CONSTRAINT [FK_tasViewColumn_tasAggregateFunction__idfsAggregateFunction];

ALTER TABLE [dbo].[tasViewColumn] WITH CHECK CHECK CONSTRAINT [FK_tasViewColumn_tasLayoutSearchField__idfLayoutSearchField];

ALTER TABLE [dbo].[tasViewColumn] WITH CHECK CHECK CONSTRAINT [FK_tasViewColumn_tasView__idfView_idfsLanguage];

ALTER TABLE [dbo].[tasViewColumn] WITH CHECK CHECK CONSTRAINT [FK_tasViewColumn_tasViewBand__idfViewBand];

ALTER TABLE [dbo].[tasViewColumn] WITH CHECK CHECK CONSTRAINT [FK_tasViewColumn_tasViewColumn__idfDenominatorViewColumn];

ALTER TABLE [dbo].[tasViewColumn] WITH CHECK CHECK CONSTRAINT [FK_tasViewColumn_tasViewColumn__idfSourceViewColumn];

ALTER TABLE [dbo].[tasViewColumn] WITH CHECK CHECK CONSTRAINT [FK_tasViewColumn_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tauColumn] WITH CHECK CHECK CONSTRAINT [FK_tauColumn_tauTable__idfTable_R_1559];

ALTER TABLE [dbo].[tauColumn] WITH CHECK CHECK CONSTRAINT [FK_tauColumn_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tauDataAuditDetailCreate] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditDetailCreate_tauDataAuditEvent__idfDataAuditEvent_R_1024];

ALTER TABLE [dbo].[tauDataAuditDetailCreate] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditDetailCreate_tauTable__idfObjectTable_R_1561];

ALTER TABLE [dbo].[tauDataAuditDetailCreate] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditDetailCreate_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tauDataAuditDetailDelete] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditDetailDelete_tauDataAuditEvent__idfDataAuditEvent_R_1558];

ALTER TABLE [dbo].[tauDataAuditDetailDelete] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditDetailDelete_tauTable__idfObjectTable_R_1563];

ALTER TABLE [dbo].[tauDataAuditDetailDelete] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditDetailDelete_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tauDataAuditDetailRestore] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditDetailRestore_tauDataAuditEvent__idfDataAuditEvent_R_1558];

ALTER TABLE [dbo].[tauDataAuditDetailRestore] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditDetailRestore_tauTable__idfObjectTable_R_1563];

ALTER TABLE [dbo].[tauDataAuditDetailRestore] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditDetailRestore_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tauDataAuditDetailUpdate] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditDetailUpdate_tauColumn__idfColumn_R_1564];

ALTER TABLE [dbo].[tauDataAuditDetailUpdate] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditDetailUpdate_tauDataAuditEvent__idfDataAuditEvent_R_1557];

ALTER TABLE [dbo].[tauDataAuditDetailUpdate] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditDetailUpdate_tauTable__idfObjectTable_R_1562];

ALTER TABLE [dbo].[tauDataAuditDetailUpdate] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditDetailUpdate_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tauDataAuditEvent] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditEvent_tauTable__idfMainObjectTable_R_1560];

ALTER TABLE [dbo].[tauDataAuditEvent] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditEvent_trtBaseReference__idfsDataAuditEventType_R_1556];

ALTER TABLE [dbo].[tauDataAuditEvent] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditEvent_trtBaseReference__idfsDataAuditObjectType_R_1555];

ALTER TABLE [dbo].[tauDataAuditEvent] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditEvent_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tauDataAuditEvent] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditEvent_tstSite__idfsSite_R_1021];

ALTER TABLE [dbo].[tauDataAuditEvent] WITH CHECK CHECK CONSTRAINT [FK_tauDataAuditEvent_tstUserTable__idfUserID_R_1022];

ALTER TABLE [dbo].[tauPINAuditEvent] WITH CHECK CHECK CONSTRAINT [FK_tauPINAuditEvent_tstUserTable];

ALTER TABLE [dbo].[tauTable] WITH CHECK CHECK CONSTRAINT [FK_tauTable_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tdeDataExport] WITH CHECK CHECK CONSTRAINT [FK_tdeDataExport_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tdeDataExport] WITH CHECK CHECK CONSTRAINT [FK_tdeDataExport_tstUserTable__idfUserID_R_1004];

ALTER TABLE [dbo].[tdeDataExportDetail] WITH CHECK CHECK CONSTRAINT [FK_tdeDataExportDetail_tdeDataExport__idfDataExport_R_1001];

ALTER TABLE [dbo].[tdeDataExportDetail] WITH CHECK CHECK CONSTRAINT [FK_tdeDataExportDetail_trtBaseReference__idfsDataExportDetailStatus_R_1582];

ALTER TABLE [dbo].[tdeDataExportDetail] WITH CHECK CHECK CONSTRAINT [FK_tdeDataExportDetail_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tdeDataExportDetail] WITH CHECK CHECK CONSTRAINT [FK_tdeDataExportDetail_trtDiagnosis__idfsDiagnosis_R_1003];

ALTER TABLE [dbo].[tdeDataExportDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tdeDataExportDiagnosis_tdeDataExport__idfDataExport_R_1000];

ALTER TABLE [dbo].[tdeDataExportDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tdeDataExportDiagnosis_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tdeDataExportDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tdeDataExportDiagnosis_trtDiagnosis__idfsDiagnosis_R_999];

ALTER TABLE [dbo].[tdeDataExportFFReference] WITH CHECK CHECK CONSTRAINT [FK_tdeDataExportFFReference_ffParameter__idfsParameter];

ALTER TABLE [dbo].[tdeDataExportFFReference] WITH CHECK CHECK CONSTRAINT [FK_tdeDataExportFFReference_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tdeDataExportFFReference] WITH CHECK CHECK CONSTRAINT [FK_tdeDataExportFFReference_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[tdeDataExportProblem] WITH CHECK CHECK CONSTRAINT [FK_tdeDataExportProblem_tdeDataExport__idfDataExport_R_1008];

ALTER TABLE [dbo].[tdeDataExportProblem] WITH CHECK CHECK CONSTRAINT [FK_tdeDataExportProblem_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflAggrCaseFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflAggrCaseFiltered_tflSiteGroup__idfSiteGroup];

ALTER TABLE [dbo].[tflAggrCaseFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflAggrCaseFiltered_tlbAggrCase__idfAggrCase];

ALTER TABLE [dbo].[tflAggrCaseFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflAggrCaseFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceAggregateHeaderFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_tflSiteGroup__idfSiteGroup];

ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceAggregateHeaderFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_tlbBasicSyndromicSurveillanceAggregateHeader__idfAggregateHeader];

ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceAggregateHeaderFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflBasicSyndromicSurveillanceAggregateHeaderFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflBasicSyndromicSurveillanceFiltered_tflSiteGroup__idfSiteGroup];

ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflBasicSyndromicSurveillanceFiltered_tlbBasicSyndromicSurveillance__idfBasicSyndromicSurveillance_R_1831];

ALTER TABLE [dbo].[tflBasicSyndromicSurveillanceFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflBasicSyndromicSurveillanceFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflBatchTestFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflBatchTestFiltered_tflSiteGroup];

ALTER TABLE [dbo].[tflBatchTestFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflBatchTestFiltered_tlbBatchTest];

ALTER TABLE [dbo].[tflBatchTestFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflBatchTestFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflDataAuditEventFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflDataAuditEventFiltered_tauDataAuditEvent__idfDataAuditEvent_R_1830];

ALTER TABLE [dbo].[tflDataAuditEventFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflDataAuditEventFiltered_tflSiteGroup__idfSiteGroup];

ALTER TABLE [dbo].[tflDataAuditEventFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflDataAuditEventFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflFarmFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflFarmFiltered_tlbFarm];

ALTER TABLE [dbo].[tflFarmFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflFarmFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflFarmFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflFarmFilteredGroup_tflSiteGroup__idfSiteGroup];

ALTER TABLE [dbo].[tflGeoLocationFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflGeoLocationFiltered_tflSiteGroup__idfSiteGroup];

ALTER TABLE [dbo].[tflGeoLocationFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflGeoLocationFiltered_tlbGeoLocation__idfGeoLocation_R_1805];

ALTER TABLE [dbo].[tflGeoLocationFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflGeoLocationFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflHumanCaseFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflHumanCaseFiltered_tflSiteGroup__idfSiteGroup];

ALTER TABLE [dbo].[tflHumanCaseFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflHumanCaseFiltered_tlbHumanCase__idfHumanCase];

ALTER TABLE [dbo].[tflHumanCaseFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflHumanCaseFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflHumanFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflHumanFiltered_tflSiteGroup__idfSiteGroup];

ALTER TABLE [dbo].[tflHumanFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflHumanFiltered_tlbHuman];

ALTER TABLE [dbo].[tflHumanFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflHumanFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflMonitoringSessionFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflMonitoringSessionFiltered_tflSiteGroup__idfSiteGroup];

ALTER TABLE [dbo].[tflMonitoringSessionFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflMonitoringSessionFiltered_tlbMonitoringSession__idfMonitoringSession_R_1819];

ALTER TABLE [dbo].[tflMonitoringSessionFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflMonitoringSessionFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflNewID] WITH CHECK CHECK CONSTRAINT [FK_tflNewID_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflNotificationFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflNotificationFiltered_tflSiteGroup__idfSiteGroup];

ALTER TABLE [dbo].[tflNotificationFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflNotificationFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflNotificationFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflNotificationFiltered_tstNotification__idfNotification_R_1825];

ALTER TABLE [dbo].[tflObservationFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflObservationFiltered_tflSiteGroup__idfSiteGroup];

ALTER TABLE [dbo].[tflObservationFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflObservationFiltered_tlbObservation__idfObservation_R_1809];

ALTER TABLE [dbo].[tflObservationFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflObservationFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflOutbreakFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflOutbreakFiltered_tflSiteGroup__idfSiteGroup];

ALTER TABLE [dbo].[tflOutbreakFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflOutbreakFiltered_tlbOutbreak__idfOutbreak_R_1811];

ALTER TABLE [dbo].[tflOutbreakFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflOutbreakFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflSite] WITH CHECK CHECK CONSTRAINT [FK_tflSite_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflSite] WITH CHECK CHECK CONSTRAINT [FK_tflSite_tstSite__idfsSite];

ALTER TABLE [dbo].[tflSiteGroup] WITH CHECK CHECK CONSTRAINT [FK_tflSiteGroup_gisLocation_idfsLocation];

ALTER TABLE [dbo].[tflSiteGroup] WITH CHECK CHECK CONSTRAINT [FK_tflSiteGroup_gisRayon_idfsRayon];

ALTER TABLE [dbo].[tflSiteGroup] WITH CHECK CHECK CONSTRAINT [FK_tflSiteGroup_trtBaseReference_idfsSiteGroupType];

ALTER TABLE [dbo].[tflSiteGroup] WITH CHECK CHECK CONSTRAINT [FK_tflSiteGroup_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflSiteGroup] WITH CHECK CHECK CONSTRAINT [FK_tflSiteGroup_tstSite_idfsSite];

ALTER TABLE [dbo].[tflSiteGroupRelation] WITH CHECK CHECK CONSTRAINT [FK_tflSiteGroupRelation_tflSiteGroup_idfReceiverSite];

ALTER TABLE [dbo].[tflSiteGroupRelation] WITH CHECK CHECK CONSTRAINT [FK_tflSiteGroupRelation_tflSiteGroup_idfsSenderSiteGroup];

ALTER TABLE [dbo].[tflSiteGroupRelation] WITH CHECK CHECK CONSTRAINT [FK_tflSiteGroupRelation_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflSiteToSiteGroup] WITH CHECK CHECK CONSTRAINT [FK_tflSiteToSiteGroup_tflSiteGroup_idfSiteGroup];

ALTER TABLE [dbo].[tflSiteToSiteGroup] WITH CHECK CHECK CONSTRAINT [FK_tflSiteToSiteGroup_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflSiteToSiteGroup] WITH CHECK CHECK CONSTRAINT [FK_tflSiteToSiteGroup_tstSite_idfsSite];

ALTER TABLE [dbo].[tflTransferOutFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflTransferOutFiltered_tflSiteGroup__idfSiteGroup];

ALTER TABLE [dbo].[tflTransferOutFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflTransferOutFiltered_tlbTransferOUT__idfTransferOut_R_1817];

ALTER TABLE [dbo].[tflTransferOutFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflTransferOutFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflVectorSurveillanceSessionFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflVectorSurveillanceSessionFiltered_tflSiteGroup__idfSiteGroup];

ALTER TABLE [dbo].[tflVectorSurveillanceSessionFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflVectorSurveillanceSessionFiltered_tlbVectorSurveillanceSession__idfVectorSurveillanceSession];

ALTER TABLE [dbo].[tflVectorSurveillanceSessionFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflVectorSurveillanceSessionFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tflVetCaseFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflVetCaseFiltered_tflSiteGroup__idfSiteGroup];

ALTER TABLE [dbo].[tflVetCaseFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflVetCaseFiltered_tlbVetCase__idfVetCase];

ALTER TABLE [dbo].[tflVetCaseFiltered] WITH CHECK CHECK CONSTRAINT [FK_tflVetCaseFiltered_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbActivityParameters] WITH CHECK CHECK CONSTRAINT [FK_tlbActivityParameters_ffParameter__idfsParameter_R_222];

ALTER TABLE [dbo].[tlbActivityParameters] WITH CHECK CHECK CONSTRAINT [FK_tlbActivityParameters_tlbObservation__idfObservation_R_1423];

ALTER TABLE [dbo].[tlbActivityParameters] WITH CHECK CHECK CONSTRAINT [FK_tlbActivityParameters_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbAdministrativeReportAudit] WITH CHECK CHECK CONSTRAINT [FK_tlbAdministrativeReportAudit_idfsReport];

ALTER TABLE [dbo].[tlbAdministrativeReportAudit] WITH CHECK CHECK CONSTRAINT [FK_tlbAdministrativeReportAudit_RoleID];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_gisBaseReference__idfsAdministrativeUnit_R_1666];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfDiagnosticVersion_R_1686];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfProphylacticVersion_R_1687];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfSanitaryVersion_R_1688];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tlbAggrMatrixVersionHeader__idfVersion_R_1684];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tlbObservation__idfCaseObservation_R_1608];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tlbObservation__idfDiagnosticObservation_R_1609];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tlbObservation__idfProphylacticObservation_R_1610];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tlbObservation__idfSanitaryObservation_R_1611];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tlbOffice__idfEnteredByOffice_R_1606];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tlbOffice__idfOffice];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tlbOffice__idfReceivedByOffice_R_1602];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tlbOffice__idfSentByOffice_R_1604];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tlbPerson__idfEnteredByPerson_R_1607];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tlbPerson__idfReceivedByPerson_R_1603];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tlbPerson__idfSentByPerson_R_1605];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_trtBaseReference__idfsAggrCaseType_R_1601];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbAggrCase] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrCase_tstSite__idfsSite];

ALTER TABLE [dbo].[tlbAggrDiagnosticActionMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrDiagnosticActionMTX_tlbAggrMatrixVersionHeader__idfVersion];

ALTER TABLE [dbo].[tlbAggrDiagnosticActionMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrDiagnosticActionMTX_trtBaseReference__idfsDiagnosticAction_R_1117];

ALTER TABLE [dbo].[tlbAggrDiagnosticActionMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrDiagnosticActionMTX_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbAggrDiagnosticActionMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrDiagnosticActionMTX_trtDiagnosis__idfsDiagnosis_R_1616];

ALTER TABLE [dbo].[tlbAggrDiagnosticActionMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrDiagnosticActionMTX_trtSpeciesType__idfsSpeciesType_R_1116];

ALTER TABLE [dbo].[tlbAggrHumanCaseMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrHumanCaseMTX_tlbAggrMatrixVersionHeader__idfVersion];

ALTER TABLE [dbo].[tlbAggrHumanCaseMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrHumanCaseMTX_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbAggrHumanCaseMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrHumanCaseMTX_trtDiagnosis__idfsDiagnosis];

ALTER TABLE [dbo].[tlbAggrMatrixVersionHeader] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrMatrixVersionHeader_trtBaseReference__idfsAggrMatrixType_R_1685];

ALTER TABLE [dbo].[tlbAggrMatrixVersionHeader] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrMatrixVersionHeader_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbAggrProphylacticActionMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrProphylacticActionMTX_tlbAggrMatrixVersionHeader__idfVersion];

ALTER TABLE [dbo].[tlbAggrProphylacticActionMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrProphylacticActionMTX_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbAggrProphylacticActionMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrProphylacticActionMTX_trtDiagnosis__idfsDiagnosis_R_1615];

ALTER TABLE [dbo].[tlbAggrProphylacticActionMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrProphylacticActionMTX_trtProphilacticAction__idfsProphilacticAction_R_1614];

ALTER TABLE [dbo].[tlbAggrProphylacticActionMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrProphylacticActionMTX_trtSpeciesType__idfsSpeciesType_R_1119];

ALTER TABLE [dbo].[tlbAggrSanitaryActionMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrSanitaryActionMTX_tlbAggrMatrixVersionHeader__idfVersion];

ALTER TABLE [dbo].[tlbAggrSanitaryActionMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrSanitaryActionMTX_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbAggrSanitaryActionMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrSanitaryActionMTX_trtSanitaryAction__idfsSanitaryAction];

ALTER TABLE [dbo].[tlbAggrVetCaseMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrVetCaseMTX_tlbAggrMatrixVersionHeader__idfVersion];

ALTER TABLE [dbo].[tlbAggrVetCaseMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrVetCaseMTX_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbAggrVetCaseMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrVetCaseMTX_trtDiagnosis__idfsDiagnosis_R_1617];

ALTER TABLE [dbo].[tlbAggrVetCaseMTX] WITH CHECK CHECK CONSTRAINT [FK_tlbAggrVetCaseMTX_trtSpeciesType__idfsSpeciesType_R_1122];

ALTER TABLE [dbo].[tlbAnimal] WITH CHECK CHECK CONSTRAINT [FK_tlbAnimal_tlbObservation__idfObservation_R_1481];

ALTER TABLE [dbo].[tlbAnimal] WITH CHECK CHECK CONSTRAINT [FK_tlbAnimal_tlbSpecies__idfSpecies_R_1478];

ALTER TABLE [dbo].[tlbAnimal] WITH CHECK CHECK CONSTRAINT [FK_tlbAnimal_trtBaseReference__idfsAnimalAge_R_1236];

ALTER TABLE [dbo].[tlbAnimal] WITH CHECK CHECK CONSTRAINT [FK_tlbAnimal_trtBaseReference__idfsAnimalCondition_R_1280];

ALTER TABLE [dbo].[tlbAnimal] WITH CHECK CHECK CONSTRAINT [FK_tlbAnimal_trtBaseReference__idfsAnimalGender_R_1237];

ALTER TABLE [dbo].[tlbAnimal] WITH CHECK CHECK CONSTRAINT [FK_tlbAnimal_trtBaseReference__idfsYNClinicalSigns_R_1409];

ALTER TABLE [dbo].[tlbAnimal] WITH CHECK CHECK CONSTRAINT [FK_tlbAnimal_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbAntimicrobialTherapy] WITH CHECK CHECK CONSTRAINT [FK_tlbAntimicrobialTherapy_tlbHumanCase__idfHumanCase_R_1422];

ALTER TABLE [dbo].[tlbAntimicrobialTherapy] WITH CHECK CHECK CONSTRAINT [FK_tlbAntimicrobialTherapy_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_tlbHuman__idfHuman];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_tlbOffice__idfHospital];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_tlbPerson__idfEnteredBy];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsBasicSyndromicSurveillanceType];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsMethodOfMeasurement];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsOutcome];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsTestResult];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNAdministratedAntiviralMedication];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNCough];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNFever];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPatientWasHospitalized];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPatientWasInER];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPostpartumPeriod];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNPregnant];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNSeasonalFluVaccine];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNShortnessOfBreath];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference__idfsYNTreatment];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillance] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillance_tstSite__idfsSite];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateDetail] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateDetail_tlbBasicSyndromicSurveillanceAggregateHeader__idfAggregateHeader];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateDetail] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateDetail_tlbOffice__idfHospital];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateDetail] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateDetail_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateHeader] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateHeader_tlbPerson__idfEnteredBy];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateHeader] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateHeader_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbBasicSyndromicSurveillanceAggregateHeader] WITH CHECK CHECK CONSTRAINT [FK_tlbBasicSyndromicSurveillanceAggregateHeader_tstSite__idfsSite];

ALTER TABLE [dbo].[tlbBatchTest] WITH CHECK CHECK CONSTRAINT [FK_tlbBatchTest_tlbObservation__idfObservation_R_1541];

ALTER TABLE [dbo].[tlbBatchTest] WITH CHECK CHECK CONSTRAINT [FK_tlbBatchTest_tlbOffice__idfPerformedByOffice_R_1539];

ALTER TABLE [dbo].[tlbBatchTest] WITH CHECK CHECK CONSTRAINT [FK_tlbBatchTest_tlbOffice__idfResultEnteredByOffice];

ALTER TABLE [dbo].[tlbBatchTest] WITH CHECK CHECK CONSTRAINT [FK_tlbBatchTest_tlbOffice__idfValidatedByOffice_R_1542];

ALTER TABLE [dbo].[tlbBatchTest] WITH CHECK CHECK CONSTRAINT [FK_tlbBatchTest_tlbPerson__idfPerformedByPerson_R_1540];

ALTER TABLE [dbo].[tlbBatchTest] WITH CHECK CHECK CONSTRAINT [FK_tlbBatchTest_tlbPerson__idfResultEnteredByPerson];

ALTER TABLE [dbo].[tlbBatchTest] WITH CHECK CHECK CONSTRAINT [FK_tlbBatchTest_tlbPerson__idfValidatedByPerson_R_1543];

ALTER TABLE [dbo].[tlbBatchTest] WITH CHECK CHECK CONSTRAINT [FK_tlbBatchTest_trtBaseReference__idfsBatchStatus_R_1544];

ALTER TABLE [dbo].[tlbBatchTest] WITH CHECK CHECK CONSTRAINT [FK_tlbBatchTest_trtBaseReference__idfsTestName];

ALTER TABLE [dbo].[tlbBatchTest] WITH CHECK CHECK CONSTRAINT [FK_tlbBatchTest_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbBatchTest] WITH CHECK CHECK CONSTRAINT [FK_tlbBatchTest_tstSite__idfsSite_R_1653];

ALTER TABLE [dbo].[tlbCampaign] WITH CHECK CHECK CONSTRAINT [FK_tlbCampaign_trtBaseRef_CampaignCategory];

ALTER TABLE [dbo].[tlbCampaign] WITH CHECK CHECK CONSTRAINT [FK_tlbCampaign_trtBaseReference__idfsCampaignType_R_1736];

ALTER TABLE [dbo].[tlbCampaign] WITH CHECK CHECK CONSTRAINT [FK_tlbCampaign_trtBaseReference_idfsCampaignStatus];

ALTER TABLE [dbo].[tlbCampaign] WITH CHECK CHECK CONSTRAINT [FK_tlbCampaign_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbCampaign] WITH CHECK CHECK CONSTRAINT [FK_tlbCampaign_tstSite__idfsSite];

ALTER TABLE [dbo].[tlbCampaignToDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbCampaignToDiagnosis_tlbCampaign__idfCampaign_R_1738];

ALTER TABLE [dbo].[tlbCampaignToDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbCampaignToDiagnosis_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbCampaignToDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbCampaignToDiagnosis_trtDiagnosis__idfsDiagnosis_R_1739];

ALTER TABLE [dbo].[tlbCampaignToDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbCampaignToDiagnosis_trtSampleType__idfsSampleType];

ALTER TABLE [dbo].[tlbCampaignToDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbCampaignToDiagnosis_trtSpeciesType__idfsSpeciesType];

ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] WITH CHECK CHECK CONSTRAINT [FK_tlbChangeDiagnosisHistory_tlbHumanCase__idfHumanCase_R_1797];

ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] WITH CHECK CHECK CONSTRAINT [FK_tlbChangeDiagnosisHistory_tlbPerson__idfPerson];

ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] WITH CHECK CHECK CONSTRAINT [FK_tlbChangeDiagnosisHistory_trtBaseReference_idfsChangeDiagnosisReason];

ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] WITH CHECK CHECK CONSTRAINT [FK_tlbChangeDiagnosisHistory_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] WITH CHECK CHECK CONSTRAINT [FK_tlbChangeDiagnosisHistory_trtDiagnosis__idfsCurrentDiagnosis_R_1799];

ALTER TABLE [dbo].[tlbChangeDiagnosisHistory] WITH CHECK CHECK CONSTRAINT [FK_tlbChangeDiagnosisHistory_trtDiagnosis__idfsPreviousDiagnosis_R_1798];

ALTER TABLE [dbo].[tlbContactedCasePerson] WITH CHECK CHECK CONSTRAINT [FK_tlbContactedCasePerson_tlbHuman__idfHuman_R_1460];

ALTER TABLE [dbo].[tlbContactedCasePerson] WITH CHECK CHECK CONSTRAINT [FK_tlbContactedCasePerson_tlbHumanCase__idfHumanCase_R_1461];

ALTER TABLE [dbo].[tlbContactedCasePerson] WITH CHECK CHECK CONSTRAINT [FK_tlbContactedCasePerson_trtBaseReference__idfsPersonContactType_R_1462];

ALTER TABLE [dbo].[tlbContactedCasePerson] WITH CHECK CHECK CONSTRAINT [FK_tlbContactedCasePerson_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbDepartment] WITH CHECK CHECK CONSTRAINT [FK_tlbDepartment_tlbOffice__idfOrganization];

ALTER TABLE [dbo].[tlbDepartment] WITH CHECK CHECK CONSTRAINT [FK_tlbDepartment_trtBaseReference__idfsDepartmentName];

ALTER TABLE [dbo].[tlbDepartment] WITH CHECK CHECK CONSTRAINT [FK_tlbDepartment_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbEmployee] WITH CHECK CHECK CONSTRAINT [FK_Employee_Site];

ALTER TABLE [dbo].[tlbEmployee] WITH CHECK CHECK CONSTRAINT [FK_tlbEmployee_trtBaseReference__idfsEmployeeType_R_1250];

ALTER TABLE [dbo].[tlbEmployee] WITH CHECK CHECK CONSTRAINT [FK_tlbEmployee_trtBaseReference_idfsEmployeeCategory];

ALTER TABLE [dbo].[tlbEmployee] WITH CHECK CHECK CONSTRAINT [FK_tlbEmployee_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbEmployeeGroup] WITH CHECK CHECK CONSTRAINT [FK_tlbEmployeeGroup_tlbEmployee__idfEmployeeGroup_R_832];

ALTER TABLE [dbo].[tlbEmployeeGroup] WITH CHECK CHECK CONSTRAINT [FK_tlbEmployeeGroup_trtBaseReference__idfsEmployeeGroupName_R_1014];

ALTER TABLE [dbo].[tlbEmployeeGroup] WITH CHECK CHECK CONSTRAINT [FK_tlbEmployeeGroup_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbEmployeeGroup] WITH CHECK CHECK CONSTRAINT [FK_tlbEmployeeGroup_tstSite__idfsSite_R_1018];

ALTER TABLE [dbo].[tlbEmployeeGroupMember] WITH CHECK CHECK CONSTRAINT [FK_tlbEmployeeGroupMember_tlbEmployee__idfEmployee_R_1668];

ALTER TABLE [dbo].[tlbEmployeeGroupMember] WITH CHECK CHECK CONSTRAINT [FK_tlbEmployeeGroupMember_tlbEmployeeGroup__idfEmployeeGroup_R_1465];

ALTER TABLE [dbo].[tlbEmployeeGroupMember] WITH CHECK CHECK CONSTRAINT [FK_tlbEmployeeGroupMember_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbFarm] WITH CHECK CHECK CONSTRAINT [FK_tlbFarm_tlbFarmActual];

ALTER TABLE [dbo].[tlbFarm] WITH CHECK CHECK CONSTRAINT [FK_tlbFarm_tlbGeoLocation__idfFarmAddress_R_1473];

ALTER TABLE [dbo].[tlbFarm] WITH CHECK CHECK CONSTRAINT [FK_tlbFarm_tlbHuman__idfHuman_R_1470];

ALTER TABLE [dbo].[tlbFarm] WITH CHECK CHECK CONSTRAINT [FK_tlbFarm_tlbMonitoringSession];

ALTER TABLE [dbo].[tlbFarm] WITH CHECK CHECK CONSTRAINT [FK_tlbFarm_tlbObservation__idfObservation_R_1471];

ALTER TABLE [dbo].[tlbFarm] WITH CHECK CHECK CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsAvianFarmType_R_1295];

ALTER TABLE [dbo].[tlbFarm] WITH CHECK CHECK CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsAvianProductionType_R_1294];

ALTER TABLE [dbo].[tlbFarm] WITH CHECK CHECK CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsFarmCategory_R_1288];

ALTER TABLE [dbo].[tlbFarm] WITH CHECK CHECK CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsGrazingPattern_R_1298];

ALTER TABLE [dbo].[tlbFarm] WITH CHECK CHECK CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsIntendedUse_R_1299];

ALTER TABLE [dbo].[tlbFarm] WITH CHECK CHECK CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsLivestockProductionType_R_1296];

ALTER TABLE [dbo].[tlbFarm] WITH CHECK CHECK CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsMovementPattern_R_1300];

ALTER TABLE [dbo].[tlbFarm] WITH CHECK CHECK CONSTRAINT [FK_tlbFarm_trtBaseReference__idfsOwnershipStructure_R_1287];

ALTER TABLE [dbo].[tlbFarm] WITH CHECK CHECK CONSTRAINT [FK_tlbFarm_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbFarm] WITH CHECK CHECK CONSTRAINT [FK_tlbFarm_tstSite__idfsSite];

ALTER TABLE [dbo].[tlbFarmActual] WITH CHECK CHECK CONSTRAINT [FK_tlbFarmActual_tlbGeoLocationShared__idfFarmAddress_R_1473];

ALTER TABLE [dbo].[tlbFarmActual] WITH CHECK CHECK CONSTRAINT [FK_tlbFarmActual_tlbHumanActual__idfHumanActual_R_1470];

ALTER TABLE [dbo].[tlbFarmActual] WITH CHECK CHECK CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsAvianFarmType_R_1295];

ALTER TABLE [dbo].[tlbFarmActual] WITH CHECK CHECK CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsAvianProductionType_R_1294];

ALTER TABLE [dbo].[tlbFarmActual] WITH CHECK CHECK CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsFarmCategory_R_1288];

ALTER TABLE [dbo].[tlbFarmActual] WITH CHECK CHECK CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsGrazingPattern_R_1298];

ALTER TABLE [dbo].[tlbFarmActual] WITH CHECK CHECK CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsIntendedUse_R_1299];

ALTER TABLE [dbo].[tlbFarmActual] WITH CHECK CHECK CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsLivestockProductionType_R_1296];

ALTER TABLE [dbo].[tlbFarmActual] WITH CHECK CHECK CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsMovementPattern_R_1300];

ALTER TABLE [dbo].[tlbFarmActual] WITH CHECK CHECK CONSTRAINT [FK_tlbFarmActual_trtBaseReference__idfsOwnershipStructure_R_1287];

ALTER TABLE [dbo].[tlbFarmActual] WITH CHECK CHECK CONSTRAINT [FK_tlbFarmActual_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbFreezer] WITH CHECK CHECK CONSTRAINT [FK_tlbFreezer_trtBaseReference__idfsStorageType_R_1256];

ALTER TABLE [dbo].[tlbFreezer] WITH CHECK CHECK CONSTRAINT [FK_tlbFreezer_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbFreezer] WITH CHECK CHECK CONSTRAINT [FK_tlbFreezer_tstSite__idfsSite_R_236];

ALTER TABLE [dbo].[tlbFreezerSubdivision] WITH CHECK CHECK CONSTRAINT [FK_FreezerSubdivision_BaseRef_BoxSizeID];

ALTER TABLE [dbo].[tlbFreezerSubdivision] WITH CHECK CHECK CONSTRAINT [FK_tlbFreezerSubdivision_tlbFreezer__idfFreezer_R_902];

ALTER TABLE [dbo].[tlbFreezerSubdivision] WITH CHECK CHECK CONSTRAINT [FK_tlbFreezerSubdivision_tlbFreezerSubdivision__idfParentSubdivision_R_904];

ALTER TABLE [dbo].[tlbFreezerSubdivision] WITH CHECK CHECK CONSTRAINT [FK_tlbFreezerSubdivision_trtBaseReference__idfsSubdivisionType_R_1257];

ALTER TABLE [dbo].[tlbFreezerSubdivision] WITH CHECK CHECK CONSTRAINT [FK_tlbFreezerSubdivision_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbFreezerSubdivision] WITH CHECK CHECK CONSTRAINT [FK_tlbFreezerSubdivision_tstSite__idfsSite_R_908];

ALTER TABLE [dbo].[tlbGeoLocation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocation_gisCountry__idfsCountry_R_972];

ALTER TABLE [dbo].[tlbGeoLocation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocation_gisLocation_idfsLocation];

ALTER TABLE [dbo].[tlbGeoLocation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocation_gisRayon__idfsRayon_R_974];

ALTER TABLE [dbo].[tlbGeoLocation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocation_gisRegion__idfsRegion_R_973];

ALTER TABLE [dbo].[tlbGeoLocation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocation_gisSettlement__idfsSettlement_R_1218];

ALTER TABLE [dbo].[tlbGeoLocation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocation_trtBaseReference__idfsGeoLocationType_R_1238];

ALTER TABLE [dbo].[tlbGeoLocation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocation_trtBaseReference__idfsGroundType_R_1239];

ALTER TABLE [dbo].[tlbGeoLocation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocation_trtBaseReference__idfsResidentType_R_1277];

ALTER TABLE [dbo].[tlbGeoLocation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocation_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbGeoLocation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocation_tstSite__idfsSite_R_1028];

ALTER TABLE [dbo].[tlbGeoLocationShared] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationShared_gisCountry__idfsCountry_R_972];

ALTER TABLE [dbo].[tlbGeoLocationShared] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationShared_gisLocation_idfsLocation];

ALTER TABLE [dbo].[tlbGeoLocationShared] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationShared_gisRayon__idfsRayon_R_974];

ALTER TABLE [dbo].[tlbGeoLocationShared] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationShared_gisRegion__idfsRegion_R_973];

ALTER TABLE [dbo].[tlbGeoLocationShared] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationShared_gisSettlement__idfsSettlement_R_1218];

ALTER TABLE [dbo].[tlbGeoLocationShared] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationShared_trtBaseReference__idfsGeoLocationType_R_1238];

ALTER TABLE [dbo].[tlbGeoLocationShared] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationShared_trtBaseReference__idfsGroundType_R_1239];

ALTER TABLE [dbo].[tlbGeoLocationShared] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationShared_trtBaseReference__idfsResidentType_R_1277];

ALTER TABLE [dbo].[tlbGeoLocationShared] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationShared_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbGeoLocationShared] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationShared_tstSite__idfsSite_R_1028];

ALTER TABLE [dbo].[tlbGeoLocationSharedTranslation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationSharedTranslation_tlbGeoLocationShared__idfGeoLocationShared];

ALTER TABLE [dbo].[tlbGeoLocationSharedTranslation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationSharedTranslation_trtBaseReference__idfsLanguage];

ALTER TABLE [dbo].[tlbGeoLocationSharedTranslation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationSharedTranslation_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbGeoLocationTranslation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationTranslation_tlbGeoLocation__idfGeoLocation];

ALTER TABLE [dbo].[tlbGeoLocationTranslation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationTranslation_trtBaseReference__idfsLanguage];

ALTER TABLE [dbo].[tlbGeoLocationTranslation] WITH CHECK CHECK CONSTRAINT [FK_tlbGeoLocationTranslation_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbGridDefinition] WITH CHECK CHECK CONSTRAINT [FK_tlbGridDefinition_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbGridDefinition] WITH CHECK CHECK CONSTRAINT [FK_tlbGridDefinition_tstSite_idfsSite];

ALTER TABLE [dbo].[tlbGridDefinition] WITH CHECK CHECK CONSTRAINT [FK_tlbGridDefinition_tstUserTable_idfUserID];

ALTER TABLE [dbo].[tlbHerd] WITH CHECK CHECK CONSTRAINT [FK_tlbHerd_tlbFarm__idfFarm_R_1480];

ALTER TABLE [dbo].[tlbHerd] WITH CHECK CHECK CONSTRAINT [FK_tlbHerd_tlbHerdActual];

ALTER TABLE [dbo].[tlbHerd] WITH CHECK CHECK CONSTRAINT [FK_tlbHerd_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbHerdActual] WITH CHECK CHECK CONSTRAINT [FK_tlbHerdActual_tlbFarmActual__idfFarmActual_R_1480];

ALTER TABLE [dbo].[tlbHerdActual] WITH CHECK CHECK CONSTRAINT [FK_tlbHerdActual_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbHuman] WITH CHECK CHECK CONSTRAINT [FK_tlbHuman_tlbGeoLocation__idfCurrentResidenceAddress_R_1424];

ALTER TABLE [dbo].[tlbHuman] WITH CHECK CHECK CONSTRAINT [FK_tlbHuman_tlbGeoLocation__idfEmployerAddress_R_1425];

ALTER TABLE [dbo].[tlbHuman] WITH CHECK CHECK CONSTRAINT [FK_tlbHuman_tlbGeoLocation__idfRegistrationAddress_R_1426];

ALTER TABLE [dbo].[tlbHuman] WITH CHECK CHECK CONSTRAINT [FK_tlbHuman_tlbHumanActual];

ALTER TABLE [dbo].[tlbHuman] WITH CHECK CHECK CONSTRAINT [FK_tlbHuman_tlbMonitoringSession_MontoringSessionID];

ALTER TABLE [dbo].[tlbHuman] WITH CHECK CHECK CONSTRAINT [FK_tlbHuman_trtBaseReference__idfsHumanGender_R_1232];

ALTER TABLE [dbo].[tlbHuman] WITH CHECK CHECK CONSTRAINT [FK_tlbHuman_trtBaseReference__idfsNationality_R_1278];

ALTER TABLE [dbo].[tlbHuman] WITH CHECK CHECK CONSTRAINT [FK_tlbHuman_trtBaseReference__idfsOccupationType_R_1233];

ALTER TABLE [dbo].[tlbHuman] WITH CHECK CHECK CONSTRAINT [FK_tlbHuman_trtBaseReference_idfsPersonIDType];

ALTER TABLE [dbo].[tlbHuman] WITH CHECK CHECK CONSTRAINT [FK_tlbHuman_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbHuman] WITH CHECK CHECK CONSTRAINT [FK_tlbHuman_tstSite__idfsSite];

ALTER TABLE [dbo].[tlbHumanActual] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanActual_tlbGeoLocation__idfCurrentResidenceAddress_R_1424];

ALTER TABLE [dbo].[tlbHumanActual] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanActual_tlbGeoLocation__idfEmployerAddress_R_1425];

ALTER TABLE [dbo].[tlbHumanActual] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanActual_tlbGeoLocation__idfRegistrationAddress_R_1426];

ALTER TABLE [dbo].[tlbHumanActual] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanActual_trtBaseReference__idfsHumanGender_R_1232];

ALTER TABLE [dbo].[tlbHumanActual] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanActual_trtBaseReference__idfsNationality_R_1278];

ALTER TABLE [dbo].[tlbHumanActual] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanActual_trtBaseReference__idfsOccupationType_R_1233];

ALTER TABLE [dbo].[tlbHumanActual] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanActual_trtBaseReference_idfsPersonIDType];

ALTER TABLE [dbo].[tlbHumanActual] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanActual_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_HumanCase_BaseRef_ExposureLocationKnown];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_HumanCase_BaseRef_PreviouslySoughtCare];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_HumanCase_BaseRef_SpecificVaccinationAdministered];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumaCase_BaseRef_DiseaseReportTypeID];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbGeoLocation__idfPointGeoLocation_R_1421];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbHuman];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbHumanCase__idfDeduplicationResultCase_R_1444];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbMonitoringSession_ParentMonitoringSession];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbObservation__idfCSObservation_R_1416];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbObservation__idfEpiObservation_R_1415];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbOffice__idfHospital];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbOffice__idfInvestigatedByOffice_R_1420];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbOffice__idfReceivedByOffice_R_1419];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbOffice__idfSentByOffice_R_1418];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbOffice_idfSoughtCareFacility];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbOutbreak__idfOutbreak];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbPerson__idfInvestigatedByPerson];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbPerson__idfReceivedByPerson];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbPerson__idfSentByPerson];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tlbPerson_idfPersonEnteredBy];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsCaseProgressStatus];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsFinalCaseStatus_R_1676];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsFinalState_R_1292];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsHospitalizationStatus_R_1269];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsHumanAgeType_R_1247];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsInitialCaseStatus_R_1439];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsOutcome_R_1414];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsYNAntimicrobialTherapy_R_1409];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsYNHospitalization_R_1410];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsYNRelatedToOutbreak_R_1413];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsYNSpecimenCollected_R_1411];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtBaseReference__idfsYNTestsConducted];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtBaseReference_idfsNonNotifiableDiagnosis];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtBaseReference_idfsNotCollectedReason];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtDiagnosis__idfsFinalDiagnosis_R_1427];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_trtDiagnosis__idfsTentativeDiagnosis_R_1428];

ALTER TABLE [dbo].[tlbHumanCase] WITH CHECK CHECK CONSTRAINT [FK_tlbHumanCase_tstSite__idfsSite];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbAnimal];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbDepartment_idfInDepartment];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbFreezerSubdivision];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbHuman];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbHumanCase];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbMaterial__idfParentMaterial_R_1222];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbMaterial__idfRootMaterial];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbMonitoringSession];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbOffice__idfFieldCollectedByOffice_R_1530];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbOffice__idfSendToOffice];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbPerson];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbPerson__idfAccesionByPerson];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbPerson__idfFieldCollectedByPerson_R_1529];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbPerson__idfMarkedForDispositionByPerson];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbSpecies];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbTesting__idfMainTest];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbVector_idfVector];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbVectorSurveillanceSession_idfVectorSurveillanceSession];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tlbVetCase];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_trtBaseReference__idfsAccessionCondition];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_trtBaseReference_DiseaseID];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_trtBaseReference_idfsBirdStatus];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_trtBaseReference_idfsDestructionMethod];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_trtBaseReference_idfsSampleKind];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_trtBaseReference_idfsSampleStatus];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_trtBaseReference_PreviousSampleStatusID];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_trtSampleType__idfsSampleType];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tstSite__idfsCurrentSite];

ALTER TABLE [dbo].[tlbMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMaterial_tstSite__idfsSite_R_1066];

ALTER TABLE [dbo].[tlbMonitoringSession] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSession_gisCountry__idfsCountry_R_1741];

ALTER TABLE [dbo].[tlbMonitoringSession] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSession_gisLocation_idfsLocation];

ALTER TABLE [dbo].[tlbMonitoringSession] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSession_gisRayon__idfsRayon_R_1743];

ALTER TABLE [dbo].[tlbMonitoringSession] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSession_gisRegion__idfsRegion_R_1742];

ALTER TABLE [dbo].[tlbMonitoringSession] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSession_gisSettlement__idfsSettlement_R_1744];

ALTER TABLE [dbo].[tlbMonitoringSession] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSession_idfsMonitoringSessionSpeciesType];

ALTER TABLE [dbo].[tlbMonitoringSession] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSession_tlbCampaign__idfCampaign_R_1748];

ALTER TABLE [dbo].[tlbMonitoringSession] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSession_tlbPerson__idfPersonEnteredBy_R_1745];

ALTER TABLE [dbo].[tlbMonitoringSession] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSession_trtBaseRef_SessionCategoryID];

ALTER TABLE [dbo].[tlbMonitoringSession] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSession_trtBaseReference__idfsMonitoringSessionStatus_R_1740];

ALTER TABLE [dbo].[tlbMonitoringSession] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSession_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbMonitoringSession] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSession_tstSite__idfsSite_R_1746];

ALTER TABLE [dbo].[tlbMonitoringSessionAction] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionAction_tlbMonitoringSession__idfMonitoringSession_R_1833];

ALTER TABLE [dbo].[tlbMonitoringSessionAction] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionAction_tlbPerson__idfPersonEnteredBy_R_1836];

ALTER TABLE [dbo].[tlbMonitoringSessionAction] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionAction_trtBaseReference__idfsMonitoringSessionActionStatus_R_1835];

ALTER TABLE [dbo].[tlbMonitoringSessionAction] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionAction_trtBaseReference__idfsMonitoringSessionActionType_R_1834];

ALTER TABLE [dbo].[tlbMonitoringSessionAction] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionAction_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbMonitoringSessionSummary] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionSummary_tlbFarm__idfFarm];

ALTER TABLE [dbo].[tlbMonitoringSessionSummary] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionSummary_tlbMonitoringSession__idfMonitoringSession];

ALTER TABLE [dbo].[tlbMonitoringSessionSummary] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionSummary_tlbSpecies__idfSpecies];

ALTER TABLE [dbo].[tlbMonitoringSessionSummary] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionSummary_trtBaseReference__idfsAnimalSex];

ALTER TABLE [dbo].[tlbMonitoringSessionSummary] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionSummary_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbMonitoringSessionSummaryDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionSummaryDiagnosis_tlbMonitoringSessionSummary__idfMonitoringSessionSummary];

ALTER TABLE [dbo].[tlbMonitoringSessionSummaryDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionSummaryDiagnosis_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbMonitoringSessionSummaryDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionSummaryDiagnosis_trtDiagnosis__idfsDiagnosis];

ALTER TABLE [dbo].[tlbMonitoringSessionSummarySample] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionSummarySample_tlbMonitoringSessionSummary__idfMonitoringSessionSummary];

ALTER TABLE [dbo].[tlbMonitoringSessionSummarySample] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionSummarySample_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbMonitoringSessionSummarySample] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionSummarySample_trtSampleType__idfsSampleType];

ALTER TABLE [dbo].[tlbMonitoringSessionToDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionToDiagnosis_tlbMonitoringSession__idfMonitoringSession_R_1750];

ALTER TABLE [dbo].[tlbMonitoringSessionToDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionToDiagnosis_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbMonitoringSessionToDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionToDiagnosis_trtDiagnosis__idfsDiagnosis_R_1757];

ALTER TABLE [dbo].[tlbMonitoringSessionToDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionToDiagnosis_trtSampleType__idfsSampleType];

ALTER TABLE [dbo].[tlbMonitoringSessionToDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionToDiagnosis_trtSpeciesType__idfsSpeciesType];

ALTER TABLE [dbo].[tlbMonitoringSessionToMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionToMaterial_tlbMaterial];

ALTER TABLE [dbo].[tlbMonitoringSessionToMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionToMaterial_trtBaseRef_idfsSampleType];

ALTER TABLE [dbo].[tlbMonitoringSessionToMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionToMaterial_trtBaseReference];

ALTER TABLE [dbo].[tlbMonitoringSessionToMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionToMaterial_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbObservation] WITH CHECK CHECK CONSTRAINT [FK_tlbObservation_ffFormTemplate__idfsFormTemplate_R_1405];

ALTER TABLE [dbo].[tlbObservation] WITH CHECK CHECK CONSTRAINT [FK_tlbObservation_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbObservation] WITH CHECK CHECK CONSTRAINT [FK_tlbObservation_tstSite__idfsSite];

ALTER TABLE [dbo].[tlbOffice] WITH CHECK CHECK CONSTRAINT [FK_tlbOffice_BaseRef_];

ALTER TABLE [dbo].[tlbOffice] WITH CHECK CHECK CONSTRAINT [FK_tlbOffice_tlbGeoLocationShared];

ALTER TABLE [dbo].[tlbOffice] WITH CHECK CHECK CONSTRAINT [FK_tlbOffice_trtBaseReference__idfsOfficeAbbreviation_R_704];

ALTER TABLE [dbo].[tlbOffice] WITH CHECK CHECK CONSTRAINT [FK_tlbOffice_trtBaseReference__idfsOfficeName_R_703];

ALTER TABLE [dbo].[tlbOffice] WITH CHECK CHECK CONSTRAINT [FK_tlbOffice_trtBaseReference_LegalFormID];

ALTER TABLE [dbo].[tlbOffice] WITH CHECK CHECK CONSTRAINT [FK_tlbOffice_trtBaseReference_MainFormOfActivityID];

ALTER TABLE [dbo].[tlbOffice] WITH CHECK CHECK CONSTRAINT [FK_tlbOffice_trtBaseReference_OwnershipFormID];

ALTER TABLE [dbo].[tlbOffice] WITH CHECK CHECK CONSTRAINT [FK_tlbOffice_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbOffice] WITH CHECK CHECK CONSTRAINT [FK_tlbOffice_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[tlbOffice] WITH CHECK CHECK CONSTRAINT [FK_tlbOffice_tstSite__idfsSite_R_1030];

ALTER TABLE [dbo].[tlbOutbreak] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreak_BaseRef_OutbreakTypeID];

ALTER TABLE [dbo].[tlbOutbreak] WITH CHECK CHECK CONSTRAINT [FK_tlbOutBreak_idfsLocation_gisLocation];

ALTER TABLE [dbo].[tlbOutbreak] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreak_tlbGeoLocation__idfGeoLocation_R_1469];

ALTER TABLE [dbo].[tlbOutbreak] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreak_trtBaseReference__idfsDiagnosisOrDiagnosisGroup];

ALTER TABLE [dbo].[tlbOutbreak] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreak_trtBaseReference__idfsOutbreakStatus_R_1262];

ALTER TABLE [dbo].[tlbOutbreak] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreak_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbOutbreak] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreak_tstSite__idfsSite];

ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreakCaseMonitoring_tlbHumanCase__idfHumanCase];

ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreakCaseMonitoring_tlbObservation__idfInvestigatedByOffice];

ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreakCaseMonitoring_tlbObservation__idfInvestigatedByPerson];

ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreakCaseMonitoring_tlbObservation__idfObservation];

ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreakCaseMonitoring_tlbVetCase__idfVetCase];

ALTER TABLE [dbo].[tlbOutbreakCaseMonitoring] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreakCaseMonitoring_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbOutbreakNote] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreakNote_BaseRef_UpdatePriorityID];

ALTER TABLE [dbo].[tlbOutbreakNote] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreakNote_tlbOutbreak__idfOutbreak];

ALTER TABLE [dbo].[tlbOutbreakNote] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreakNote_tlbPerson__idfPerson];

ALTER TABLE [dbo].[tlbOutbreakNote] WITH CHECK CHECK CONSTRAINT [FK_tlbOutbreakNote_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbPensideTest] WITH CHECK CHECK CONSTRAINT [FK_tlbPensideTest_tlbMaterial__idfMaterial_R_1664];

ALTER TABLE [dbo].[tlbPensideTest] WITH CHECK CHECK CONSTRAINT [FK_tlbPensideTest_tlbOffice_idfTestedByOffice];

ALTER TABLE [dbo].[tlbPensideTest] WITH CHECK CHECK CONSTRAINT [FK_tlbPensideTest_tlbPerson_idfTestedByPerson];

ALTER TABLE [dbo].[tlbPensideTest] WITH CHECK CHECK CONSTRAINT [FK_tlbPensideTest_trtBaseReference__idfsPensideTestCategory];

ALTER TABLE [dbo].[tlbPensideTest] WITH CHECK CHECK CONSTRAINT [FK_tlbPensideTest_trtBaseReference__idfsPensideTestName];

ALTER TABLE [dbo].[tlbPensideTest] WITH CHECK CHECK CONSTRAINT [FK_tlbPensideTest_trtBaseReference__idfsPensideTestResult_R_1573];

ALTER TABLE [dbo].[tlbPensideTest] WITH CHECK CHECK CONSTRAINT [FK_tlbPensideTest_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbPensideTest] WITH CHECK CHECK CONSTRAINT [FK_tlbPensideTest_trtDiagnosis_idfsDiagnosis];

ALTER TABLE [dbo].[tlbPerson] WITH CHECK CHECK CONSTRAINT [FK_tlbPerson_tlbDepartment__idfDepartment];

ALTER TABLE [dbo].[tlbPerson] WITH CHECK CHECK CONSTRAINT [FK_tlbPerson_tlbEmployee__idfPerson_R_1498];

ALTER TABLE [dbo].[tlbPerson] WITH CHECK CHECK CONSTRAINT [FK_tlbPerson_tlbOffice__idfInstitution_R_1509];

ALTER TABLE [dbo].[tlbPerson] WITH CHECK CHECK CONSTRAINT [FK_tlbPerson_trtBaseReference__idfsStaffPosition_R_1511];

ALTER TABLE [dbo].[tlbPerson] WITH CHECK CHECK CONSTRAINT [FK_tlbPerson_trtBaseReference_PersonalIDTypeID];

ALTER TABLE [dbo].[tlbPerson] WITH CHECK CHECK CONSTRAINT [FK_tlbPerson_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbPostalCode] WITH CHECK CHECK CONSTRAINT [FK_tlbPostalCode_gisLocation_idfsLocation];

ALTER TABLE [dbo].[tlbPostalCode] WITH CHECK CHECK CONSTRAINT [FK_tlbPostalCode_gisSettlement__idfsSettlement_R_17];

ALTER TABLE [dbo].[tlbPostalCode] WITH CHECK CHECK CONSTRAINT [FK_tlbPostalCode_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbReportForm] WITH CHECK CHECK CONSTRAINT [FK_tlbReportForm_idfsReportFormType];

ALTER TABLE [dbo].[tlbReportForm] WITH CHECK CHECK CONSTRAINT [FK_tlbReportForm_tlbOffice__idfEnteredByOffice];

ALTER TABLE [dbo].[tlbReportForm] WITH CHECK CHECK CONSTRAINT [FK_tlbReportForm_tlbOffice__idfSentByOffice];

ALTER TABLE [dbo].[tlbReportForm] WITH CHECK CHECK CONSTRAINT [FK_tlbReportForm_tlbPerson__idfEnteredByPerson];

ALTER TABLE [dbo].[tlbReportForm] WITH CHECK CHECK CONSTRAINT [FK_tlbReportForm_tlbPerson__idfSentByPerson];

ALTER TABLE [dbo].[tlbReportForm] WITH CHECK CHECK CONSTRAINT [FK_tlbReportForm_tstSite_idfsSite];

ALTER TABLE [dbo].[tlbSpecies] WITH CHECK CHECK CONSTRAINT [FK_tlbSpecies_OutbreakCaseStatus];

ALTER TABLE [dbo].[tlbSpecies] WITH CHECK CHECK CONSTRAINT [FK_tlbSpecies_tlbHerd__idfHerd_R_1479];

ALTER TABLE [dbo].[tlbSpecies] WITH CHECK CHECK CONSTRAINT [FK_tlbSpecies_tlbObservation__idfObservation_R_1474];

ALTER TABLE [dbo].[tlbSpecies] WITH CHECK CHECK CONSTRAINT [FK_tlbSpecies_tlbSpeciesActual];

ALTER TABLE [dbo].[tlbSpecies] WITH CHECK CHECK CONSTRAINT [FK_tlbSpecies_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbSpecies] WITH CHECK CHECK CONSTRAINT [FK_tlbSpecies_trtSpeciesType__idfsSpeciesType_R_1651];

ALTER TABLE [dbo].[tlbSpeciesActual] WITH CHECK CHECK CONSTRAINT [FK_tlbSpeciesActual_tlbHerdActual__idfHerdActual_R_1479];

ALTER TABLE [dbo].[tlbSpeciesActual] WITH CHECK CHECK CONSTRAINT [FK_tlbSpeciesActual_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbSpeciesActual] WITH CHECK CHECK CONSTRAINT [FK_tlbSpeciesActual_trtSpeciesType__idfsSpeciesType_R_1651];

ALTER TABLE [dbo].[tlbStatistic] WITH CHECK CHECK CONSTRAINT [FK_tlbStatistic_gisBaseReference__idfsArea_R_1641];

ALTER TABLE [dbo].[tlbStatistic] WITH CHECK CHECK CONSTRAINT [FK_tlbStatistic_trtBaseReference__idfsMainBaseReference_R_923];

ALTER TABLE [dbo].[tlbStatistic] WITH CHECK CHECK CONSTRAINT [FK_tlbStatistic_trtBaseReference__idfsStatisticAreaType_R_1273];

ALTER TABLE [dbo].[tlbStatistic] WITH CHECK CHECK CONSTRAINT [FK_tlbStatistic_trtBaseReference__idfsStatisticPeriodType_R_1272];

ALTER TABLE [dbo].[tlbStatistic] WITH CHECK CHECK CONSTRAINT [FK_tlbStatistic_trtBaseReference_idfsStatisticalAgeGroup];

ALTER TABLE [dbo].[tlbStatistic] WITH CHECK CHECK CONSTRAINT [FK_tlbStatistic_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbStatistic] WITH CHECK CHECK CONSTRAINT [FK_tlbStatistic_trtStatisticDataType__idfsStatisticDataType_R_921];

ALTER TABLE [dbo].[tlbStreet] WITH CHECK CHECK CONSTRAINT [FK_tlbStreet_gisLocation_idfsLocation];

ALTER TABLE [dbo].[tlbStreet] WITH CHECK CHECK CONSTRAINT [FK_tlbStreet_gisSettlement__idfsSettlement_R_16];

ALTER TABLE [dbo].[tlbStreet] WITH CHECK CHECK CONSTRAINT [FK_tlbStreet_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbTestAmendmentHistory] WITH CHECK CHECK CONSTRAINT [FK_tlbTestAmendmentHistory_tlbOffice__idfAmendByOffice];

ALTER TABLE [dbo].[tlbTestAmendmentHistory] WITH CHECK CHECK CONSTRAINT [FK_tlbTestAmendmentHistory_tlbPerson__idfAmendByPerson];

ALTER TABLE [dbo].[tlbTestAmendmentHistory] WITH CHECK CHECK CONSTRAINT [FK_tlbTestAmendmentHistory_tlbTesting__idfTesting];

ALTER TABLE [dbo].[tlbTestAmendmentHistory] WITH CHECK CHECK CONSTRAINT [FK_tlbTestAmendmentHistory_trtBaseReference__idfsNewTestResult];

ALTER TABLE [dbo].[tlbTestAmendmentHistory] WITH CHECK CHECK CONSTRAINT [FK_tlbTestAmendmentHistory_trtBaseReference__idfsOldTestResult];

ALTER TABLE [dbo].[tlbTestAmendmentHistory] WITH CHECK CHECK CONSTRAINT [FK_tlbTestAmendmentHistory_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_tlbBatchTest__idfBatchTest_R_1534];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_tlbHumanCase];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_tlbMaterial];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_tlbMonitoringSession];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_tlbOffice__idfPerformedByOffice];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_tlbOffice__idfResultEnteredByOffice];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_tlbOffice__idfTestedByOffice];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_tlbOffice__idfValidatedByOffice];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_tlbPerson__idfResultEnteredByPerson];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_tlbPerson__idfTestedByPerson];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_tlbPerson__idfValidatedByPerson];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_tlbVector];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_tlbVetCase];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_trtBaseReference__idfsTestCategory];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_trtBaseReference__idfsTestName];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_trtBaseReference__idfsTestResult_R_1243];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_trtBaseReference__idfsTestStatus_R_1754];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_trtBaseReference_PreviousTestStatusID];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbTesting] WITH CHECK CHECK CONSTRAINT [FK_tlbTesting_trtDiagnosis];

ALTER TABLE [dbo].[tlbTestValidation] WITH CHECK CHECK CONSTRAINT [FK_tlbTestValidation_tlbOffice__idfInterpretedByOffice_R_1550];

ALTER TABLE [dbo].[tlbTestValidation] WITH CHECK CHECK CONSTRAINT [FK_tlbTestValidation_tlbOffice__idfValidatedByOffice_R_1548];

ALTER TABLE [dbo].[tlbTestValidation] WITH CHECK CHECK CONSTRAINT [FK_tlbTestValidation_tlbPerson__idfInterpretedByPerson_R_1551];

ALTER TABLE [dbo].[tlbTestValidation] WITH CHECK CHECK CONSTRAINT [FK_tlbTestValidation_tlbPerson__idfValidatedByPerson_R_1549];

ALTER TABLE [dbo].[tlbTestValidation] WITH CHECK CHECK CONSTRAINT [FK_tlbTestValidation_tlbTesting__idfTesting_R_1546];

ALTER TABLE [dbo].[tlbTestValidation] WITH CHECK CHECK CONSTRAINT [FK_tlbTestValidation_trtBaseReference__idfsInterpretedStatus_R_1552];

ALTER TABLE [dbo].[tlbTestValidation] WITH CHECK CHECK CONSTRAINT [FK_tlbTestValidation_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbTestValidation] WITH CHECK CHECK CONSTRAINT [FK_tlbTestValidation_trtDiagnosis__idfsDiagnosis_R_1547];

ALTER TABLE [dbo].[tlbTransferOUT] WITH CHECK CHECK CONSTRAINT [FK_tlbTransferOUT_tlbOffice__idfSendFromOffice_R_1516];

ALTER TABLE [dbo].[tlbTransferOUT] WITH CHECK CHECK CONSTRAINT [FK_tlbTransferOUT_tlbOffice__idfSendToOffice_R_1517];

ALTER TABLE [dbo].[tlbTransferOUT] WITH CHECK CHECK CONSTRAINT [FK_tlbTransferOUT_tlbPerson__idfSendByPerson_R_1518];

ALTER TABLE [dbo].[tlbTransferOUT] WITH CHECK CHECK CONSTRAINT [FK_tlbTransferOUT_trtBaseReference__idfsTransferStatus_R_1671];

ALTER TABLE [dbo].[tlbTransferOUT] WITH CHECK CHECK CONSTRAINT [FK_tlbTransferOUT_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbTransferOUT] WITH CHECK CHECK CONSTRAINT [FK_tlbTransferOUT_tstSite__idfsSite];

ALTER TABLE [dbo].[tlbTransferOutMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbTransferOutMaterial_tlbMaterial];

ALTER TABLE [dbo].[tlbTransferOutMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbTransferOutMaterial_tlbTransferOUT];

ALTER TABLE [dbo].[tlbTransferOutMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbTransferOutMaterial_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbVaccination] WITH CHECK CHECK CONSTRAINT [FK_tlbVaccination_tlbSpecies__idfSpecies_R_1654];

ALTER TABLE [dbo].[tlbVaccination] WITH CHECK CHECK CONSTRAINT [FK_tlbVaccination_tlbVetCase__idfVetCase_R_1482];

ALTER TABLE [dbo].[tlbVaccination] WITH CHECK CHECK CONSTRAINT [FK_tlbVaccination_trtBaseReference__idfsVaccinationRoute_R_1302];

ALTER TABLE [dbo].[tlbVaccination] WITH CHECK CHECK CONSTRAINT [FK_tlbVaccination_trtBaseReference__idfsVaccinationType_R_1301];

ALTER TABLE [dbo].[tlbVaccination] WITH CHECK CHECK CONSTRAINT [FK_tlbVaccination_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbVaccination] WITH CHECK CHECK CONSTRAINT [FK_tlbVaccination_trtDiagnosis__idfsDiagnosis_R_983];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_tlbGeoLocation_idfLocation];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_tlbObservation_idfObservation];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_tlbOffice_idfCollectedByOffice];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_tlbOffice_idfIdentifiedByOffice];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_tlbPerson_idfCollectedByPerson];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_tlbPerson_idfIdentifiedByPerson];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_tlbVector_idfHostVector];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_tlbVectorSurveillanceSession_idfVectorSurveillanceSession];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_trtBaseReference__idfsEctoparasitesCollected];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_trtBaseReference_idfsBasisOfREcord];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_trtBaseReference_idfsCollectionMethod];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_trtBaseReference_idfsDayPeriod];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_trtBaseReference_idfsIdentificationMethod];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_trtBaseReference_idfsSex];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_trtBaseReference_idfsSurrounding];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_trtVectorSubType_idfsVectorSubType];

ALTER TABLE [dbo].[tlbVector] WITH CHECK CHECK CONSTRAINT [FK_tlbVector_trtVectorType_idfsVectorType];

ALTER TABLE [dbo].[tlbVectorSurveillanceSession] WITH CHECK CHECK CONSTRAINT [FK_tlbVectorSurveillanceSession_tlbGeoLocation_idfLocation];

ALTER TABLE [dbo].[tlbVectorSurveillanceSession] WITH CHECK CHECK CONSTRAINT [FK_tlbVectorSurveillanceSession_tlbOutbreak_idfOutbreak];

ALTER TABLE [dbo].[tlbVectorSurveillanceSession] WITH CHECK CHECK CONSTRAINT [FK_tlbVectorSurveillanceSession_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbVectorSurveillanceSession] WITH CHECK CHECK CONSTRAINT [FK_tlbVectorSurveillanceSession_trtBaseReference_VectorSurveillanceStatus];

ALTER TABLE [dbo].[tlbVectorSurveillanceSession] WITH CHECK CHECK CONSTRAINT [FK_tlbVectorSurveillanceSession_tstSite_idfsSite];

ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummary] WITH CHECK CHECK CONSTRAINT [FK_tlbVectorSurveillanceSessionSummary_tlbGeoLocation__idfGeoLocation];

ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummary] WITH CHECK CHECK CONSTRAINT [FK_tlbVectorSurveillanceSessionSummary_tlbVectorSurveillanceSession__idfVectorSurveillanceSession];

ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummary] WITH CHECK CHECK CONSTRAINT [FK_tlbVectorSurveillanceSessionSummary_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummary] WITH CHECK CHECK CONSTRAINT [FK_tlbVectorSurveillanceSessionSummary_trtVectorSubType__idfsVectorSubType];

ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummaryDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbVectorSurveillanceSessionSummaryDiagnosis_tlbVectorSurveillanceSessionSummary__idfsVSSessionSummary];

ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummaryDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbVectorSurveillanceSessionSummaryDiagnosis_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbVectorSurveillanceSessionSummaryDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbVectorSurveillanceSessionSummaryDiagnosis_trtDiagnosis__idfsDiagnosis];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_tlbFarm];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_tlbMonitoringSession__idfParentMonitoringSession];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_tlbObservation__idfObservation_R_1447];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_tlbOffice__idfInvestigatedByOffice];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_tlbOffice__idfReportedByOffice];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_tlbOffice_idfReceivedByOffice];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_tlbOutbreak__idfOutbreak];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_tlbPerson__idfPersonEnteredBy_R_1507];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_tlbPerson__idfPersonInvestigatedBy_R_1506];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_tlbPerson__idfPersonReportedBy_R_1508];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_tlbPerson_idfReceivedByPerson];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_trtBaseReference__idfsCaseClassification];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_trtBaseReference__idfsCaseProgressStatus];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_trtBaseReference__idfsCaseReportType];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_trtBaseReference__idfsCaseType];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_trtBaseReference__idfsYNTestsConducted];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_trtDiagnosis__idfsFinalDiagnosis_R_1438];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_trtDiagnosis__idfsShowDiagnosis];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_trtDiagnosis__idfsTentativeDiagnosis_R_1435];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_trtDiagnosis__idfsTentativeDiagnosis1_R_1436];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_trtDiagnosis__idfsTentativeDiagnosis2_R_1437];

ALTER TABLE [dbo].[tlbVetCase] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCase_tstSite__idfsSite_R_1588];

ALTER TABLE [dbo].[tlbVetCaseDisplayDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCaseDisplayDiagnosis_tlbVetCase_idfVetCase];

ALTER TABLE [dbo].[tlbVetCaseDisplayDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCaseDisplayDiagnosis_trtBaseReference_idfsLanguage];

ALTER TABLE [dbo].[tlbVetCaseDisplayDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCaseDisplayDiagnosis_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbVetCaseLog] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCaseLog_tlbPerson__idfPerson_R_1501];

ALTER TABLE [dbo].[tlbVetCaseLog] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCaseLog_tlbVetCase__idfVetCase_R_1489];

ALTER TABLE [dbo].[tlbVetCaseLog] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCaseLog_trtBaseReference__idfsCaseLogStatus_R_1490];

ALTER TABLE [dbo].[tlbVetCaseLog] WITH CHECK CHECK CONSTRAINT [FK_tlbVetCaseLog_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbxSiteDocumentMap] WITH CHECK CHECK CONSTRAINT [FK_tlbxSiteDocumentMap_LkupEIDSSMenu];

ALTER TABLE [dbo].[trtAttributeType] WITH CHECK CHECK CONSTRAINT [FK_trtAttributeType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtBaseReference] WITH CHECK CHECK CONSTRAINT [FK_trtBaseReference_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtBaseReference] WITH CHECK CHECK CONSTRAINT [FK_trtBaseReference_trtReferenceType__idfsReferenceType_R_381];

ALTER TABLE [dbo].[trtBaseReferenceAttribute] WITH CHECK CHECK CONSTRAINT [FK_trtBaseReferenceAttribute_trtAttributeType__idfAttributeType];

ALTER TABLE [dbo].[trtBaseReferenceAttribute] WITH CHECK CHECK CONSTRAINT [FK_trtBaseReferenceAttribute_trtBaseReference__idfsBaseReference];

ALTER TABLE [dbo].[trtBaseReferenceAttribute] WITH CHECK CHECK CONSTRAINT [FK_trtBaseReferenceAttribute_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtBaseReferenceAttributeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtBaseReferenceAttributeToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtBaseReferenceAttributeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtBaseReferenceAttributeToCP_trtBaseReferenceAttribute__idfsBaseReference];

ALTER TABLE [dbo].[trtBaseReferenceAttributeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtBaseReferenceAttributeToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtBaseReferenceToCP] WITH CHECK CHECK CONSTRAINT [FK_trtBaseReferenceToCP_trtBaseReference__idfsBaseReference];

ALTER TABLE [dbo].[trtBaseReferenceToCP] WITH CHECK CHECK CONSTRAINT [FK_trtBaseReferenceToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtBaseReferenceToCP] WITH CHECK CHECK CONSTRAINT [FK_trtBaseReferenceToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtBssAggregateColumns] WITH CHECK CHECK CONSTRAINT [FK_trtBssAggregateColumns_tauColumn__idfColumn];

ALTER TABLE [dbo].[trtBssAggregateColumns] WITH CHECK CHECK CONSTRAINT [FK_trtBssAggregateColumns_trtBaseReference__idfsBssAggregateColumn];

ALTER TABLE [dbo].[trtBssAggregateColumns] WITH CHECK CHECK CONSTRAINT [FK_trtBssAggregateColumns_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtCaseClassification] WITH CHECK CHECK CONSTRAINT [FK_trtCaseClassification_trtBaseReference__idfsCaseClassification];

ALTER TABLE [dbo].[trtCaseClassification] WITH CHECK CHECK CONSTRAINT [FK_trtCaseClassification_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtCollectionMethodForVectorType] WITH CHECK CHECK CONSTRAINT [FK_trtCollectionMethodForVectorType_trtBaseReference_idfsCollectionMethod];

ALTER TABLE [dbo].[trtCollectionMethodForVectorType] WITH CHECK CHECK CONSTRAINT [FK_trtCollectionMethodForVectorType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtCollectionMethodForVectorType] WITH CHECK CHECK CONSTRAINT [FK_trtCollectionMethodForVectorType_trtVectorType_idfsVectorType];

ALTER TABLE [dbo].[trtCollectionMethodForVectorTypeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtCollectionMethodForVectorTypeToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtCollectionMethodForVectorTypeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtCollectionMethodForVectorTypeToCP_trtCollectionMethodForVectorType_idfCollectionMethodForVectorType];

ALTER TABLE [dbo].[trtCollectionMethodForVectorTypeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtCollectionMethodForVectorTypeToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtDerivativeForSampleType] WITH CHECK CHECK CONSTRAINT [FK_trtDerivativeForSampleType_trtBaseReference__idfsDerivativeType_R_1863];

ALTER TABLE [dbo].[trtDerivativeForSampleType] WITH CHECK CHECK CONSTRAINT [FK_trtDerivativeForSampleType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtDerivativeForSampleType] WITH CHECK CHECK CONSTRAINT [FK_trtDerivativeForSampleType_trtSampleType__idfsSampleType_R_1862];

ALTER TABLE [dbo].[trtDerivativeForSampleTypeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtDerivativeForSampleTypeToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtDerivativeForSampleTypeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtDerivativeForSampleTypeToCP_trtDerivativeForSampleType__idfDerivativeForSampleType];

ALTER TABLE [dbo].[trtDerivativeForSampleTypeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtDerivativeForSampleTypeToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosis_trtBaseReference__idfsDiagnosis_R_624];

ALTER TABLE [dbo].[trtDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosis_trtBaseReference__idfsUsingType_R_1600];

ALTER TABLE [dbo].[trtDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosis_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtDiagnosisAgeGroup] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisAgeGroup_trtBaseReference_idfsAgeType];

ALTER TABLE [dbo].[trtDiagnosisAgeGroup] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisAgeGroup_trtBaseReference_idfsDiagnosisAgeGroup];

ALTER TABLE [dbo].[trtDiagnosisAgeGroup] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisAgeGroup_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosis_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosis_trtDiagnosis_idfsDiagnosis];

ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosis] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosis_trtDiagnosisAgeGroup_idfsDiagnosisAgeGroup];

ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosisToCP] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosisToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosisToCP] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosisToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtDiagnosisAgeGroupToDiagnosisToCP] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisAgeGroupToDiagnosisToCP_tstPersonalDataGroup_idfDiagnosisAgeGroupToDiagnosis];

ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroup] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroup_trtBaseReference_idfsStatisticalAgeGroup];

ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroup] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroup_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroup] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroup_trtDiagnosisAgeGroup_idfsDiagnosisAgeGroup];

ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroupToCP] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroupToCP] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_trtDiagnosisAgeGroupToStatisticalAgeGroup];

ALTER TABLE [dbo].[trtDiagnosisAgeGroupToStatisticalAgeGroupToCP] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisAgeGroupToStatisticalAgeGroupToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroup] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisToDiagnosisGroup_trtBaseReference__idfsDiagnosisGroup];

ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroup] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisToDiagnosisGroup_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroup] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisToDiagnosisGroup_trtDiagnosis__idfsDiagnosis];

ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroupToCP] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisToDiagnosisGroupToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroupToCP] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisToDiagnosisGroupToCP_trtDiagnosisToDiagnosisGroup_idfDiagnosisToDiagnosisGroup];

ALTER TABLE [dbo].[trtDiagnosisToDiagnosisGroupToCP] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisToDiagnosisGroupToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtDiagnosisToGroupForReportType] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisToGroupForReportType_trtBaseReference__idfsCustomReportType_R_1871];

ALTER TABLE [dbo].[trtDiagnosisToGroupForReportType] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisToGroupForReportType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtDiagnosisToGroupForReportType] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisToGroupForReportType_trtDiagnosis__idfsDiagnosis_R_1873];

ALTER TABLE [dbo].[trtDiagnosisToGroupForReportType] WITH CHECK CHECK CONSTRAINT [FK_trtDiagnosisToGroupForReportType_trtReportDiagnosisGroup__idfsReportDiagnosisGroup];

ALTER TABLE [dbo].[trtEventType] WITH CHECK CHECK CONSTRAINT [FK_trtEventType_trtBaseReference__idfsEventSubscription];

ALTER TABLE [dbo].[trtEventType] WITH CHECK CHECK CONSTRAINT [FK_trtEventType_trtBaseReference__idfsEventTypeID_R_663];

ALTER TABLE [dbo].[trtEventType] WITH CHECK CHECK CONSTRAINT [FK_trtEventType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtFFObjectForCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtFFObjectForCustomReport_trtBaseReference];

ALTER TABLE [dbo].[trtFFObjectForCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtFFObjectForCustomReport_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtFFObjectToDiagnosisForCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtFFObjectToDiagnosisForCustomReport_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtFFObjectToDiagnosisForCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtFFObjectToDiagnosisForCustomReport_trtDiagnosis];

ALTER TABLE [dbo].[trtFFObjectToDiagnosisForCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtFFParameterToDiagnosisForCustomReport_trtFFParameterForCustomReport];

ALTER TABLE [dbo].[trtGISBaseReferenceAttribute] WITH CHECK CHECK CONSTRAINT [FK_trtGISBaseReferenceAttribute_gisBaseReference__idfsGISBaseReference];

ALTER TABLE [dbo].[trtGISBaseReferenceAttribute] WITH CHECK CHECK CONSTRAINT [FK_trtGISBaseReferenceAttribute_trtAttributeType__idfAttributeType];

ALTER TABLE [dbo].[trtGISBaseReferenceAttribute] WITH CHECK CHECK CONSTRAINT [FK_trtGISBaseReferenceAttribute_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtGISObjectForCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtGISObjectForCustomReport_gisBaseReference__idfsGISBaseReference];

ALTER TABLE [dbo].[trtGISObjectForCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtGISObjectForCustomReport_trtBaseReference__idfsCustomReportType];

ALTER TABLE [dbo].[trtGISObjectForCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtGISObjectForCustomReport_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtHACodeList] WITH CHECK CHECK CONSTRAINT [FK_trtHACodeList_trtBaseReference__idfsCodeName_R_674];

ALTER TABLE [dbo].[trtHACodeList] WITH CHECK CHECK CONSTRAINT [FK_trtHACodeList_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtLanguageToCP] WITH CHECK CHECK CONSTRAINT [FK_trtLanguageToCP_trtBaseReference__idfsLanguage_idfsBaseReference];

ALTER TABLE [dbo].[trtLanguageToCP] WITH CHECK CHECK CONSTRAINT [FK_trtLanguageToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtLanguageToCP] WITH CHECK CHECK CONSTRAINT [FK_trtLanguageToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtMaterialForDisease] WITH CHECK CHECK CONSTRAINT [FK_trtMaterialForDisease_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtMaterialForDisease] WITH CHECK CHECK CONSTRAINT [FK_trtMaterialForDisease_trtDiagnosis__idfsDiagnosis_R_891];

ALTER TABLE [dbo].[trtMaterialForDisease] WITH CHECK CHECK CONSTRAINT [FK_trtMaterialForDisease_trtSampleType__idfsSampleType];

ALTER TABLE [dbo].[trtMaterialForDiseaseToCP] WITH CHECK CHECK CONSTRAINT [FK_trtMaterialForDiseaseToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtMaterialForDiseaseToCP] WITH CHECK CHECK CONSTRAINT [FK_trtMaterialForDiseaseToCP_trtMaterialForDisease__idfMaterialForDisease_R_1876];

ALTER TABLE [dbo].[trtMaterialForDiseaseToCP] WITH CHECK CHECK CONSTRAINT [FK_trtMaterialForDiseaseToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtMatrixColumn] WITH CHECK CHECK CONSTRAINT [FK_trtMatrixColumn_trtBaseReference__idfsEditor];

ALTER TABLE [dbo].[trtMatrixColumn] WITH CHECK CHECK CONSTRAINT [FK_trtMatrixColumn_trtBaseReference__idfsMatrixColumn];

ALTER TABLE [dbo].[trtMatrixColumn] WITH CHECK CHECK CONSTRAINT [FK_trtMatrixColumn_trtBaseReference__idfsParameterType];

ALTER TABLE [dbo].[trtMatrixColumn] WITH CHECK CHECK CONSTRAINT [FK_trtMatrixColumn_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtMatrixColumn] WITH CHECK CHECK CONSTRAINT [FK_trtMatrixColumn_trtMatrixType__idfsMatrixType];

ALTER TABLE [dbo].[trtMatrixType] WITH CHECK CHECK CONSTRAINT [FK_trtMatrixType_trtBaseReference__idfsFormType];

ALTER TABLE [dbo].[trtMatrixType] WITH CHECK CHECK CONSTRAINT [FK_trtMatrixType_trtBaseReference__idfsMatrixType];

ALTER TABLE [dbo].[trtMatrixType] WITH CHECK CHECK CONSTRAINT [FK_trtMatrixType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtObjectTypeToObjectOperation] WITH CHECK CHECK CONSTRAINT [FK_trtObjectTypeToObjectOperation_trtBaseReference__idfsObjectOperation_R_1620];

ALTER TABLE [dbo].[trtObjectTypeToObjectOperation] WITH CHECK CHECK CONSTRAINT [FK_trtObjectTypeToObjectOperation_trtBaseReference__idfsObjectType_R_1619];

ALTER TABLE [dbo].[trtObjectTypeToObjectOperation] WITH CHECK CHECK CONSTRAINT [FK_trtObjectTypeToObjectOperation_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtObjectTypeToObjectType] WITH CHECK CHECK CONSTRAINT [FK_trtObjectTypeToObjectType_trtBaseReference__idfsParentObjectType_R_1621];

ALTER TABLE [dbo].[trtObjectTypeToObjectType] WITH CHECK CHECK CONSTRAINT [FK_trtObjectTypeToObjectType_trtBaseReference__idfsRelatedObjectType_R_1622];

ALTER TABLE [dbo].[trtObjectTypeToObjectType] WITH CHECK CHECK CONSTRAINT [FK_trtObjectTypeToObjectType_trtBaseReference__idfsStatus_R_1623];

ALTER TABLE [dbo].[trtObjectTypeToObjectType] WITH CHECK CHECK CONSTRAINT [FK_trtObjectTypeToObjectType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtPensideTestForDisease] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestForDisease_trtBaseReference__idfsPensideTestName];

ALTER TABLE [dbo].[trtPensideTestForDisease] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestForDisease_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtPensideTestForDisease] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestForDisease_trtDiagnosis__idfsDiagnosis];

ALTER TABLE [dbo].[trtPensideTestForDiseaseToCP] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestForDiseaseToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtPensideTestForDiseaseToCP] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestForDiseaseToCP_trtPensideTestForDisease__idfPensideTestForDisease];

ALTER TABLE [dbo].[trtPensideTestForDiseaseToCP] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestForDiseaseToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtPensideTestTypeForVectorType] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestTypeForVectorType_trtBaseReference_idfsPensideTestName];

ALTER TABLE [dbo].[trtPensideTestTypeForVectorType] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestTypeForVectorType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtPensideTestTypeForVectorType] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestTypeForVectorType_trtVectorType_idfsVectorType];

ALTER TABLE [dbo].[trtPensideTestTypeForVectorTypeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestTypeForVectorTypeToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtPensideTestTypeForVectorTypeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestTypeForVectorTypeToCP_trtPensideTestTypeForVectorType_idfPensideTestTypeForVectorType];

ALTER TABLE [dbo].[trtPensideTestTypeForVectorTypeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestTypeForVectorTypeToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtPensideTestTypeToTestResult] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestTypeToTestResult_trtBaseReference__idfsPensideTestName];

ALTER TABLE [dbo].[trtPensideTestTypeToTestResult] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestTypeToTestResult_trtBaseReference__idfsPensideTestResult_R_1663];

ALTER TABLE [dbo].[trtPensideTestTypeToTestResult] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestTypeToTestResult_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtPensideTestTypeToTestResultToCP] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestTypeToTestResultToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtPensideTestTypeToTestResultToCP] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestTypeToTestResultToCP_trtPensideTestTypeToTestResult__idfsPensideTestName_idfsPensideTestResult];

ALTER TABLE [dbo].[trtPensideTestTypeToTestResultToCP] WITH CHECK CHECK CONSTRAINT [FK_trtPensideTestTypeToTestResultToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtProphilacticAction] WITH CHECK CHECK CONSTRAINT [FK_trtProphilacticAction_trtBaseReference__idfsProphilacticAction_R_1109];

ALTER TABLE [dbo].[trtProphilacticAction] WITH CHECK CHECK CONSTRAINT [FK_trtProphilacticAction_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtReferenceType] WITH CHECK CHECK CONSTRAINT [FK_trtReferenceType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtReportDiagnosisGroup] WITH CHECK CHECK CONSTRAINT [FK_trtReportDiagnosisGroup_trtBaseReference__idfsReportDiagnosisGroup];

ALTER TABLE [dbo].[trtReportDiagnosisGroup] WITH CHECK CHECK CONSTRAINT [FK_trtReportDiagnosisGroup_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtReportRows] WITH CHECK CHECK CONSTRAINT [FK_trtReportRows_trtBaseReference__idfsCustomReportType_R_1867];

ALTER TABLE [dbo].[trtReportRows] WITH CHECK CHECK CONSTRAINT [FK_trtReportRows_trtBaseReference__idfsDiagnosisOrReportDiagnosisGroup];

ALTER TABLE [dbo].[trtReportRows] WITH CHECK CHECK CONSTRAINT [FK_trtReportRows_trtBaseReference__idfsICDReportAdditionalText];

ALTER TABLE [dbo].[trtReportRows] WITH CHECK CHECK CONSTRAINT [FK_trtReportRows_trtBaseReference__idfsReportAdditionalText_R_1895];

ALTER TABLE [dbo].[trtReportRows] WITH CHECK CHECK CONSTRAINT [FK_trtReportRows_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtResource] WITH CHECK CHECK CONSTRAINT [FK_trtResource_idfsResourceType];

ALTER TABLE [dbo].[trtResource] WITH CHECK CHECK CONSTRAINT [FK_trtResource_SourceSystemNameID];

ALTER TABLE [dbo].[trtResourceSet] WITH CHECK CHECK CONSTRAINT [FK_trtResourceSet_SourceSystemNameID];

ALTER TABLE [dbo].[trtResourceSetHierarchy] WITH CHECK CHECK CONSTRAINT [FK_trtResourceSetHierarchy_idfsResourceSet];

ALTER TABLE [dbo].[trtResourceSetHierarchy] WITH CHECK CHECK CONSTRAINT [FK_trtResourceSetHierarchy_SourceSystemNameID];

ALTER TABLE [dbo].[trtResourceSetToResource] WITH CHECK CHECK CONSTRAINT [FK_trtResourceSetToResource_idfsResourceSet];

ALTER TABLE [dbo].[trtResourceSetToResource] WITH CHECK CHECK CONSTRAINT [FK_trtResourceSetToResource_SourceSystemNameID];

ALTER TABLE [dbo].[trtResourceSetToResource] WITH CHECK CHECK CONSTRAINT [FK_trtResourceSetToResource_trtResource];

ALTER TABLE [dbo].[trtResourceSetTranslation] WITH CHECK CHECK CONSTRAINT [FK_trtResourceSetTranslation__idfsLanguage];

ALTER TABLE [dbo].[trtResourceSetTranslation] WITH CHECK CHECK CONSTRAINT [FK_trtResourceSetTranslation_SourceSystemNameID];

ALTER TABLE [dbo].[trtResourceSetTranslation] WITH CHECK CHECK CONSTRAINT [FK_trtResourceSetTranslation_trtResourceSet];

ALTER TABLE [dbo].[trtResourceTranslation] WITH CHECK CHECK CONSTRAINT [FK_trtResourceTranslation_idfsLanguage];

ALTER TABLE [dbo].[trtResourceTranslation] WITH CHECK CHECK CONSTRAINT [FK_trtResourceTranslation_SourceSystemNameID];

ALTER TABLE [dbo].[trtResourceTranslation] WITH CHECK CHECK CONSTRAINT [FK_trtResourceTranslation_trtResource];

ALTER TABLE [dbo].[trtSampleType] WITH CHECK CHECK CONSTRAINT [FK_trtSampleType_trtBaseReference__idfsSampleType_R_1866];

ALTER TABLE [dbo].[trtSampleType] WITH CHECK CHECK CONSTRAINT [FK_trtSampleType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtSampleTypeForVectorType] WITH CHECK CHECK CONSTRAINT [FK_trtSampleTypeForVectorType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtSampleTypeForVectorType] WITH CHECK CHECK CONSTRAINT [FK_trtSampleTypeForVectorType_trtSampleType_idfsSampleType];

ALTER TABLE [dbo].[trtSampleTypeForVectorType] WITH CHECK CHECK CONSTRAINT [FK_trtSampleTypeForVectorType_trtVectorType_idfsVectorType];

ALTER TABLE [dbo].[trtSampleTypeForVectorTypeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtSampleTypeForVectorTypeToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtSampleTypeForVectorTypeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtSampleTypeForVectorTypeToCP_trtSampleTypeForVectorType_idfSampleTypeForVectorType];

ALTER TABLE [dbo].[trtSampleTypeForVectorTypeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtSampleTypeForVectorTypeToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtSanitaryAction] WITH CHECK CHECK CONSTRAINT [FK_trtSanitaryAction_trtBaseReference__idfsSanitaryAction_R_1110];

ALTER TABLE [dbo].[trtSanitaryAction] WITH CHECK CHECK CONSTRAINT [FK_trtSanitaryAction_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtSpeciesContentInCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesContentInCustomReport_trtBaseReference_idfsCustomReportType];

ALTER TABLE [dbo].[trtSpeciesContentInCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesContentInCustomReport_trtBaseReference_idfsReportAdditionalText];

ALTER TABLE [dbo].[trtSpeciesContentInCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesContentInCustomReport_trtBaseReference_idfsSpeciesOrSpeciesGroup];

ALTER TABLE [dbo].[trtSpeciesContentInCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesContentInCustomReport_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtSpeciesGroup] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesGroup_trtBaseReference_idfsSpeciesGroup];

ALTER TABLE [dbo].[trtSpeciesGroup] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesGroup_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtSpeciesToGroupForCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesToGroupForCustomReport_trtBaseReference_idfsCustomReportType];

ALTER TABLE [dbo].[trtSpeciesToGroupForCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesToGroupForCustomReport_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtSpeciesToGroupForCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesToGroupForCustomReport_trtSpeciesGroup_idfsSpeciesGroup];

ALTER TABLE [dbo].[trtSpeciesToGroupForCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesToGroupForCustomReport_trtSpeciesType_idfsSpeciesType];

ALTER TABLE [dbo].[trtSpeciesType] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesType_trtBaseReference__idfsSpeciesType_R_1650];

ALTER TABLE [dbo].[trtSpeciesType] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAge] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesTypeToAnimalAge_trtBaseReference__idfsAnimalAge_R_1599];

ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAge] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesTypeToAnimalAge_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAge] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesTypeToAnimalAge_trtSpeciesType__idfsSpeciesType_R_1598];

ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAgeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesTypeToAnimalAgeToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAgeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesTypeToAnimalAgeToCP_trtSpeciesTypeToAnimalAge__idfSpeciesTypeToAnimalAge_R_1882];

ALTER TABLE [dbo].[trtSpeciesTypeToAnimalAgeToCP] WITH CHECK CHECK CONSTRAINT [FK_trtSpeciesTypeToAnimalAgeToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtStatisticDataType] WITH CHECK CHECK CONSTRAINT [FK_trtStatisticDataType_trtBaseReference__idfsStatisticAreaType_R_1591];

ALTER TABLE [dbo].[trtStatisticDataType] WITH CHECK CHECK CONSTRAINT [FK_trtStatisticDataType_trtBaseReference__idfsStatisticDataType_R_496];

ALTER TABLE [dbo].[trtStatisticDataType] WITH CHECK CHECK CONSTRAINT [FK_trtStatisticDataType_trtBaseReference__idfsStatisticPeriodType_R_1592];

ALTER TABLE [dbo].[trtStatisticDataType] WITH CHECK CHECK CONSTRAINT [FK_trtStatisticDataType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtStatisticDataType] WITH CHECK CHECK CONSTRAINT [FK_trtStatisticDataType_trtReferenceType__idfsReferenceType_R_933];

ALTER TABLE [dbo].[trtStringNameTranslationToCP] WITH CHECK CHECK CONSTRAINT [FK_trtStringNameTranslationToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtStringNameTranslationToCP] WITH CHECK CHECK CONSTRAINT [FK_trtStringNameTranslationToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtSystemFunction] WITH CHECK CHECK CONSTRAINT [FK_trtSystemFunction_trtBaseReference__idfsObjectType_R_1581];

ALTER TABLE [dbo].[trtSystemFunction] WITH CHECK CHECK CONSTRAINT [FK_trtSystemFunction_trtBaseReference__idfsSystemFunction_R_1038];

ALTER TABLE [dbo].[trtSystemFunction] WITH CHECK CHECK CONSTRAINT [FK_trtSystemFunction_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtTestForDisease] WITH CHECK CHECK CONSTRAINT [FK_trtTestForDisease_trtBaseReference__idfsTestCategory];

ALTER TABLE [dbo].[trtTestForDisease] WITH CHECK CHECK CONSTRAINT [FK_trtTestForDisease_trtBaseReference__idfsTestName];

ALTER TABLE [dbo].[trtTestForDisease] WITH CHECK CHECK CONSTRAINT [FK_trtTestForDisease_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtTestForDisease] WITH CHECK CHECK CONSTRAINT [FK_trtTestForDisease_trtDiagnosis__idfsDiagnosis_R_892];

ALTER TABLE [dbo].[trtTestForDisease] WITH CHECK CHECK CONSTRAINT [FK_trtTestForDisease_trtSampleType__idfsSampleType];

ALTER TABLE [dbo].[trtTestForDiseaseToCP] WITH CHECK CHECK CONSTRAINT [FK_trtTestForDiseaseToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtTestForDiseaseToCP] WITH CHECK CHECK CONSTRAINT [FK_trtTestForDiseaseToCP_trtTestForDisease__idfTestForDisease_R_1884];

ALTER TABLE [dbo].[trtTestForDiseaseToCP] WITH CHECK CHECK CONSTRAINT [FK_trtTestForDiseaseToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtTestTypeForCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtTestTypeForCustomReport_trtBaseReference__idfsCustomReportType];

ALTER TABLE [dbo].[trtTestTypeForCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtTestTypeForCustomReport_trtBaseReference__idfsTestName];

ALTER TABLE [dbo].[trtTestTypeForCustomReport] WITH CHECK CHECK CONSTRAINT [FK_trtTestTypeForCustomReport_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtTestTypeToTestResult] WITH CHECK CHECK CONSTRAINT [FK_trtTestTypeToTestResult_trtBaseReference__idfsTestName];

ALTER TABLE [dbo].[trtTestTypeToTestResult] WITH CHECK CHECK CONSTRAINT [FK_trtTestTypeToTestResult_trtBaseReference__idfsTestResult_R_1596];

ALTER TABLE [dbo].[trtTestTypeToTestResult] WITH CHECK CHECK CONSTRAINT [FK_trtTestTypeToTestResult_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtTestTypeToTestResultToCP] WITH CHECK CHECK CONSTRAINT [FK_trtTestTypeToTestResultToCountry_trtTestTypeToTestResult__idfsTestName_idfsTestResult];

ALTER TABLE [dbo].[trtTestTypeToTestResultToCP] WITH CHECK CHECK CONSTRAINT [FK_trtTestTypeToTestResultToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtTestTypeToTestResultToCP] WITH CHECK CHECK CONSTRAINT [FK_trtTestTypeToTestResultToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[trtVectorSubType] WITH CHECK CHECK CONSTRAINT [FK_trtVectorSubType_trtBaseReference_idfsVectorSubType];

ALTER TABLE [dbo].[trtVectorSubType] WITH CHECK CHECK CONSTRAINT [FK_trtVectorSubType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[trtVectorSubType] WITH CHECK CHECK CONSTRAINT [FK_trtVectorSubType_trtVectorType_idfsVectorType];

ALTER TABLE [dbo].[trtVectorType] WITH CHECK CHECK CONSTRAINT [FK_trtVectorType_trtBaseReference__idfsVectorType];

ALTER TABLE [dbo].[trtVectorType] WITH CHECK CHECK CONSTRAINT [FK_trtVectorType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstAggrSetting] WITH CHECK CHECK CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsAggrCaseType_R_941];

ALTER TABLE [dbo].[tstAggrSetting] WITH CHECK CHECK CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsStatisticAreaType_R_1612];

ALTER TABLE [dbo].[tstAggrSetting] WITH CHECK CHECK CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsStatisticPeriodType_R_1613];

ALTER TABLE [dbo].[tstAggrSetting] WITH CHECK CHECK CONSTRAINT [FK_tstAggrSetting_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstAggrSetting] WITH CHECK CHECK CONSTRAINT [FK_tstAggrSetting_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[tstAggrSetting] WITH CHECK CHECK CONSTRAINT [FK_tstAggrSetting_tstSite_idfsSite];

ALTER TABLE [dbo].[tstBarcodeLayout] WITH CHECK CHECK CONSTRAINT [FK_tstBarcodeLayout_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstBarcodeLayout] WITH CHECK CHECK CONSTRAINT [FK_tstBarcodeLayout_tstNextNumbers__idfsNumberName_R_1677];

ALTER TABLE [dbo].[tstCheckTables] WITH CHECK CHECK CONSTRAINT [FK_tstCheckTables_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstCustomizationPackage] WITH CHECK CHECK CONSTRAINT [FK_tstCustomizationPackage_gisLocation_idfsCountry];

ALTER TABLE [dbo].[tstCustomizationPackage] WITH CHECK CHECK CONSTRAINT [FK_tstCustomizationPackage_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstCustomizationPackageSettings] WITH CHECK CHECK CONSTRAINT [FK_tstCustomizationPackageSettings_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstEvent] WITH CHECK CHECK CONSTRAINT [FK_tstEvent_gisLocation_idfsLocation];

ALTER TABLE [dbo].[tstEvent] WITH CHECK CHECK CONSTRAINT [FK_tstEvent_gisRayon__idfsRayon];

ALTER TABLE [dbo].[tstEvent] WITH CHECK CHECK CONSTRAINT [FK_tstEvent_gisRegion__idfsRegion];

ALTER TABLE [dbo].[tstEvent] WITH CHECK CHECK CONSTRAINT [FK_tstEvent_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstEvent] WITH CHECK CHECK CONSTRAINT [FK_tstEvent_trtDiagnosis__idfsDiagnosis];

ALTER TABLE [dbo].[tstEvent] WITH CHECK CHECK CONSTRAINT [FK_tstEvent_trtEventType__idfsEventTypeID_R_664];

ALTER TABLE [dbo].[tstEvent] WITH CHECK CHECK CONSTRAINT [FK_tstEvent_tstSite__idfsLoginSite];

ALTER TABLE [dbo].[tstEvent] WITH CHECK CHECK CONSTRAINT [FK_tstEvent_tstSite__idfsSite];

ALTER TABLE [dbo].[tstEventActive] WITH CHECK CHECK CONSTRAINT [FK_tstEventActive_gisRayon__idfsRayon];

ALTER TABLE [dbo].[tstEventActive] WITH CHECK CHECK CONSTRAINT [FK_tstEventActive_gisRegion__idfsRegion];

ALTER TABLE [dbo].[tstEventActive] WITH CHECK CHECK CONSTRAINT [FK_tstEventActive_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstEventActive] WITH CHECK CHECK CONSTRAINT [FK_tstEventActive_trtDiagnosis__idfsDiagnosis];

ALTER TABLE [dbo].[tstEventActive] WITH CHECK CHECK CONSTRAINT [FK_tstEventActive_trtEventType__idfsEventTypeID];

ALTER TABLE [dbo].[tstEventActive] WITH CHECK CHECK CONSTRAINT [FK_tstEventActive_tstSite__idfsLoginSite];

ALTER TABLE [dbo].[tstEventActive] WITH CHECK CHECK CONSTRAINT [FK_tstEventActive_tstSite__idfsSite];

ALTER TABLE [dbo].[tstEventClient] WITH CHECK CHECK CONSTRAINT [FK_tstEventClient_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstEventSubscription] WITH CHECK CHECK CONSTRAINT [FK_tstEventSubscription_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstEventSubscription] WITH CHECK CHECK CONSTRAINT [FK_tstEventSubscription_trtEventType__idfsEventTypeID_R_676];

ALTER TABLE [dbo].[tstGeoLocationFormat] WITH CHECK CHECK CONSTRAINT [FK_tstGeoLocationFormat_gisLocation_idfsLocation];

ALTER TABLE [dbo].[tstGeoLocationFormat] WITH CHECK CHECK CONSTRAINT [FK_tstGeoLocationFormat_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstGlobalSiteOptions] WITH CHECK CHECK CONSTRAINT [FK_tstGlobalSiteOptions_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstGlobalSiteOptions] WITH CHECK CHECK CONSTRAINT [FK_tstGlobalSiteOptions_tstSite__idfsSite_R_1753];

ALTER TABLE [dbo].[tstInvisibleFields] WITH CHECK CHECK CONSTRAINT [FK_tstInvisibleFields_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstInvisibleFieldsToCP] WITH CHECK CHECK CONSTRAINT [FK_tstInvisibleFieldsToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstInvisibleFieldsToCP] WITH CHECK CHECK CONSTRAINT [FK_tstInvisibleFieldsToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[tstInvisibleFieldsToCP] WITH CHECK CHECK CONSTRAINT [FK_tstInvisibleFieldsToCP_tstInvisibleFields_idfInvisibleField];

ALTER TABLE [dbo].[tstLocalClient] WITH CHECK CHECK CONSTRAINT [FK_tstLocalClient_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstLocalConnectionContext] WITH CHECK CHECK CONSTRAINT [FK_tstLocalConnectionContext_tauDataAuditEvent__idfDataAuditEvent_R_1043];

ALTER TABLE [dbo].[tstLocalConnectionContext] WITH CHECK CHECK CONSTRAINT [FK_tstLocalConnectionContext_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstLocalConnectionContext] WITH CHECK CHECK CONSTRAINT [FK_tstLocalConnectionContext_tstEvent__idfEventID_R_1044];

ALTER TABLE [dbo].[tstLocalConnectionContext] WITH CHECK CHECK CONSTRAINT [FK_tstLocalConnectionContext_tstSite__idfsSite_R_1858];

ALTER TABLE [dbo].[tstLocalConnectionContext] WITH CHECK CHECK CONSTRAINT [FK_tstLocalConnectionContext_tstUserTable__idfUserID_R_1042];

ALTER TABLE [dbo].[tstLocalSamplesTestsPreferences] WITH CHECK CHECK CONSTRAINT [FK_tstLocalSamplesTestsPreferences_tlbMaterial__idfMaterial];

ALTER TABLE [dbo].[tstLocalSamplesTestsPreferences] WITH CHECK CHECK CONSTRAINT [FK_tstLocalSamplesTestsPreferences_tlbTesting__idfTesting];

ALTER TABLE [dbo].[tstLocalSamplesTestsPreferences] WITH CHECK CHECK CONSTRAINT [FK_tstLocalSamplesTestsPreferences_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstLocalSamplesTestsPreferences] WITH CHECK CHECK CONSTRAINT [FK_tstLocalSamplesTestsPreferences_tstUserTable__idfUserID];

ALTER TABLE [dbo].[tstLocalSiteOptions] WITH CHECK CHECK CONSTRAINT [FK_tstLocalSiteOptions_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstMandatoryFields] WITH CHECK CHECK CONSTRAINT [FK_tstMandatoryFields_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstMandatoryFieldsToCP] WITH CHECK CHECK CONSTRAINT [FK_tstMandatoryFieldsToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstMandatoryFieldsToCP] WITH CHECK CHECK CONSTRAINT [FK_tstMandatoryFieldsToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[tstMandatoryFieldsToCP] WITH CHECK CHECK CONSTRAINT [FK_tstMandatoryFieldsToCP_tstMandatoryFields_idfMandatoryField];

ALTER TABLE [dbo].[tstNewID] WITH CHECK CHECK CONSTRAINT [FK_tstNewID_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstNextNumbers] WITH CHECK CHECK CONSTRAINT [FK_tstNextNumbers_trtBaseReference__idfsNumberName_R_930];

ALTER TABLE [dbo].[tstNextNumbers] WITH CHECK CHECK CONSTRAINT [FK_tstNextNumbers_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstNotification] WITH CHECK CHECK CONSTRAINT [FK_tstNotification_trtBaseReference__idfsNotificationObjectType_R_1307];

ALTER TABLE [dbo].[tstNotification] WITH CHECK CHECK CONSTRAINT [FK_tstNotification_trtBaseReference__idfsNotificationType_R_1306];

ALTER TABLE [dbo].[tstNotification] WITH CHECK CHECK CONSTRAINT [FK_tstNotification_trtBaseReference__idfsTargetSiteType_R_1304];

ALTER TABLE [dbo].[tstNotification] WITH CHECK CHECK CONSTRAINT [FK_tstNotification_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstNotification] WITH CHECK CHECK CONSTRAINT [FK_tstNotification_tstSite__idfsSite_R_1035];

ALTER TABLE [dbo].[tstNotification] WITH CHECK CHECK CONSTRAINT [FK_tstNotification_tstSite__idfsTargetSite_R_688];

ALTER TABLE [dbo].[tstNotification] WITH CHECK CHECK CONSTRAINT [FK_tstNotification_tstUserTable__idfTargetUserID_R_720];

ALTER TABLE [dbo].[tstNotification] WITH CHECK CHECK CONSTRAINT [FK_tstNotification_tstUserTable__idfUserID_R_793];

ALTER TABLE [dbo].[tstNotificationActivity] WITH CHECK CHECK CONSTRAINT [FK_tstNotificationActivity_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstNotificationShared] WITH CHECK CHECK CONSTRAINT [FK_tstNotificationShared_trtBaseReference__idfsNotificationObjectType];

ALTER TABLE [dbo].[tstNotificationShared] WITH CHECK CHECK CONSTRAINT [FK_tstNotificationShared_trtBaseReference__idfsNotificationType];

ALTER TABLE [dbo].[tstNotificationShared] WITH CHECK CHECK CONSTRAINT [FK_tstNotificationShared_trtBaseReference__idfsTargetSiteType];

ALTER TABLE [dbo].[tstNotificationShared] WITH CHECK CHECK CONSTRAINT [FK_tstNotificationShared_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstNotificationShared] WITH CHECK CHECK CONSTRAINT [FK_tstNotificationShared_tstSite__idfsSite];

ALTER TABLE [dbo].[tstNotificationShared] WITH CHECK CHECK CONSTRAINT [FK_tstNotificationShared_tstSite__idfsTargetSite];

ALTER TABLE [dbo].[tstNotificationShared] WITH CHECK CHECK CONSTRAINT [FK_tstNotificationShared_tstUserTable__idfTargetUserID];

ALTER TABLE [dbo].[tstNotificationShared] WITH CHECK CHECK CONSTRAINT [FK_tstNotificationShared_tstUserTable__idfUserID];

ALTER TABLE [dbo].[tstNotificationStatus] WITH CHECK CHECK CONSTRAINT [FK_tstNotificationStatus_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstObjectAccess] WITH CHECK CHECK CONSTRAINT [FK_tstObjectAccess_tlbEmployee__idfActor_R_1618];

ALTER TABLE [dbo].[tstObjectAccess] WITH CHECK CHECK CONSTRAINT [FK_tstObjectAccess_trtBaseReference__idfsObjectOperation_R_1586];

ALTER TABLE [dbo].[tstObjectAccess] WITH CHECK CHECK CONSTRAINT [FK_tstObjectAccess_trtBaseReference__idfsObjectType_R_1580];

ALTER TABLE [dbo].[tstObjectAccess] WITH CHECK CHECK CONSTRAINT [FK_tstObjectAccess_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstObjectAccess] WITH CHECK CHECK CONSTRAINT [FK_tstObjectAccess_tstSite__idfsOnSite_R_951];

ALTER TABLE [dbo].[tstPersonalDataGroup] WITH CHECK CHECK CONSTRAINT [FK_tstPersonalDataGroup_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstPersonalDataGroupToCP] WITH CHECK CHECK CONSTRAINT [FK_tstPersonalDataGroupToCP_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstPersonalDataGroupToCP] WITH CHECK CHECK CONSTRAINT [FK_tstPersonalDataGroupToCP_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[tstPersonalDataGroupToCP] WITH CHECK CHECK CONSTRAINT [FK_tstPersonalDataGroupToCP_tstPersonalDataGroup_idfPersonalDataGroup];

ALTER TABLE [dbo].[tstRayonToReportSite] WITH CHECK CHECK CONSTRAINT [FK_tstRayonToReportSite_gisRayon__idfsRayon];

ALTER TABLE [dbo].[tstRayonToReportSite] WITH CHECK CHECK CONSTRAINT [FK_tstRayonToReportSite_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstRayonToReportSite] WITH CHECK CHECK CONSTRAINT [FK_tstRayonToReportSite_tstSite__idfsSite];

ALTER TABLE [dbo].[tstSecurityAudit] WITH CHECK CHECK CONSTRAINT [FK_tstSecurityAudit_tauDataAuditEvent__idfDataAuditEvent_R_1731];

ALTER TABLE [dbo].[tstSecurityAudit] WITH CHECK CHECK CONSTRAINT [FK_tstSecurityAudit_trtBaseReference__idfsAction_R_1727];

ALTER TABLE [dbo].[tstSecurityAudit] WITH CHECK CHECK CONSTRAINT [FK_tstSecurityAudit_trtBaseReference__idfsProcessType_R_1729];

ALTER TABLE [dbo].[tstSecurityAudit] WITH CHECK CHECK CONSTRAINT [FK_tstSecurityAudit_trtBaseReference__idfsResult_R_1728];

ALTER TABLE [dbo].[tstSecurityAudit] WITH CHECK CHECK CONSTRAINT [FK_tstSecurityAudit_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstSecurityAudit] WITH CHECK CHECK CONSTRAINT [FK_tstSecurityAudit_tstSite];

ALTER TABLE [dbo].[tstSecurityAudit] WITH CHECK CHECK CONSTRAINT [FK_tstSecurityAudit_tstUserTable__idfUserID_R_1726];

ALTER TABLE [dbo].[tstSecurityConfiguration] WITH CHECK CHECK CONSTRAINT [FK_tstSecurityConfiguration_trtBaseReference__idfsSecurityLevel_R_1759];

ALTER TABLE [dbo].[tstSecurityConfiguration] WITH CHECK CHECK CONSTRAINT [FK_tstSecurityConfiguration_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstSecurityConfiguration] WITH CHECK CHECK CONSTRAINT [FK_tstSecurityConfiguration_tstSecurityConfiguration__idfParentSecurityConfiguration_R_1761];

ALTER TABLE [dbo].[tstSecurityConfigurationAlphabet] WITH CHECK CHECK CONSTRAINT [FK_tstSecurityConfigurationAlphabet_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstSecurityConfigurationAlphabetParticipation] WITH CHECK CHECK CONSTRAINT [FK_tstSecurityConfigurationAlphabetParticipation_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstSecurityConfigurationAlphabetParticipation] WITH CHECK CHECK CONSTRAINT [FK_tstSecurityConfigurationAlphabetParticipation_tstSecurityConfiguration__idfSecurityConfiguration_R_1763];

ALTER TABLE [dbo].[tstSecurityConfigurationAlphabetParticipation] WITH CHECK CHECK CONSTRAINT [FK_tstSecurityConfigurationAlphabetParticipation_tstSecurityConfigurationAlphabet__idfsSecurityConfigurationAlphabet_R_1762];

ALTER TABLE [dbo].[tstSite] WITH CHECK CHECK CONSTRAINT [FK_tstSite_tlbOffice__idfOffice_R_386];

ALTER TABLE [dbo].[tstSite] WITH CHECK CHECK CONSTRAINT [FK_tstSite_trtBaseReference__idfsSiteType_R_1305];

ALTER TABLE [dbo].[tstSite] WITH CHECK CHECK CONSTRAINT [FK_tstSite_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstSite] WITH CHECK CHECK CONSTRAINT [FK_tstSite_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[tstSite] WITH CHECK CHECK CONSTRAINT [FK_tstSite_tstSite__idfsParentSite];

ALTER TABLE [dbo].[tstUserTable] WITH CHECK CHECK CONSTRAINT [FK_tstUserTable_tlbPerson_idfPerson];

ALTER TABLE [dbo].[tstUserTable] WITH CHECK CHECK CONSTRAINT [FK_tstUserTable_trtBaseReference_idfsBaseReference];

ALTER TABLE [dbo].[tstUserTable] WITH CHECK CHECK CONSTRAINT [FK_tstUserTable_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstUserTable] WITH CHECK CHECK CONSTRAINT [FK_tstUserTable_tstSite_idfsSite];

ALTER TABLE [dbo].[tstUserTableLocal] WITH CHECK CHECK CONSTRAINT [FK_tstUserTableLocal_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstUserTableLocal] WITH CHECK CHECK CONSTRAINT [FK_tstUserTableLocal_tstUserTable_idfUserID];

ALTER TABLE [dbo].[tstUserTableOldPassword] WITH CHECK CHECK CONSTRAINT [FK_tstUserTableOldPassword_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstUserTableOldPassword] WITH CHECK CHECK CONSTRAINT [FK_tstUserTableOldPassword_tstUserTable__idfUserID_R_1730];

ALTER TABLE [dbo].[tstUserTicket] WITH CHECK CHECK CONSTRAINT [FK_tstUserTicket_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstUserTicket] WITH CHECK CHECK CONSTRAINT [FK_tstUserTicket_tstUserTable__idfUserID];

ALTER TABLE [dbo].[tstVersionCompare] WITH CHECK CHECK CONSTRAINT [FK_tstVersionCompare_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[updRunningApps] WITH CHECK CHECK CONSTRAINT [FK_updRunningApps_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[updUpdateBlock] WITH CHECK CHECK CONSTRAINT [FK_updUpdateBlock_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[UserAccess] WITH CHECK CHECK CONSTRAINT [FK_UserAccess_BaseRef_AccessPermission];

ALTER TABLE [dbo].[UserAccess] WITH CHECK CHECK CONSTRAINT [FK_UserAccess_BaseRef_SysFunctionID];

ALTER TABLE [dbo].[UserAccess] WITH CHECK CHECK CONSTRAINT [FK_UserAccess_BaseReference_OperaionID];

ALTER TABLE [dbo].[UserAccess] WITH CHECK CHECK CONSTRAINT [FK_UserAccess_tlbEmployee_EmpID];

ALTER TABLE [dbo].[UserAccess] WITH CHECK CHECK CONSTRAINT [FK_UserAccess_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[UserAccess] WITH CHECK CHECK CONSTRAINT [FK_UserAccess_tstSite_OnSite];

ALTER TABLE [dbo].[UserPreference] WITH CHECK CHECK CONSTRAINT [FK_UserPreference_BAseRef_ModuleConstantID];

ALTER TABLE [dbo].[UserPreference] WITH CHECK CHECK CONSTRAINT [FK_UserPreference_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[UserPreference] WITH CHECK CHECK CONSTRAINT [FK_UserPreference_tstUserTable_UserID];

ALTER TABLE [dbo].[VetDiseaseReportRelationship] WITH CHECK CHECK CONSTRAINT [FK_VetDiseaseReportRelationship_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[VetDiseaseReportRelationship] WITH CHECK CHECK CONSTRAINT [FK_VetDiseaseReportReln_BaseRef_RelTypeID];

ALTER TABLE [dbo].[VetDiseaseReportRelationship] WITH CHECK CHECK CONSTRAINT [FK_VetDiseaseReportReln_tlbVetCase_RelateToVetDiseaseReportID];

ALTER TABLE [dbo].[VetDiseaseReportRelationship] WITH CHECK CHECK CONSTRAINT [FK_VetDiseaseReportReln_tlbVetCase_VetDiseaseReportID];


GO
PRINT N'Update complete.';


GO
