/*
Deployment script for EIDSS7_GG_UAT

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
PRINT N'Creating Default Constraint unnamed constraint on [Report].[tlbReports]...';


GO
ALTER TABLE [Report].[tlbReports]
    ADD DEFAULT (newid()) FOR [rowguid];


GO
PRINT N'Creating Default Constraint unnamed constraint on [Report].[tlbReports]...';


GO
ALTER TABLE [Report].[tlbReports]
    ADD DEFAULT (getdate()) FOR [AuditCreateDTM];


GO
PRINT N'Creating Default Constraint unnamed constraint on [Report].[tlbReportStringNameTranslation]...';


GO
ALTER TABLE [Report].[tlbReportStringNameTranslation]
    ADD DEFAULT (newid()) FOR [rowguid];


GO
PRINT N'Creating Default Constraint unnamed constraint on [Report].[tlbReportStringNameTranslation]...';


GO
ALTER TABLE [Report].[tlbReportStringNameTranslation]
    ADD DEFAULT (getdate()) FOR [AuditCreateDTM];


GO
PRINT N'Altering Function [dbo].[FN_GBL_HACodeNames_ToCSV]...';


GO
--=================================================================================================
-- Author: Phil Shaffer
--
-- Description:	Takes an HACode and breaks it down into a CSV with the names of the bitmasks that 
-- make it up.
--
-- 1) If @HACode = NULL returns NULL
-- 2) If @HACode = 0 returns corresponding entry from [trtHACodeList] table (i.e "None")
-- 3) A string of [intHACode] values that matched a bitwise AND with @HACode (e.g. 34 => "Human, 
-- Livestock").
-- 4) Names of [intHACode] values returned in the string are in ascending order of the [intHACode] 
-- values.
-- 5) This implementation will only execute on SQL Server 2017 or greater due to use of function 
-- "STRING_AGG".
-- 6) If passed an invalid @HACode that doesn't match any of the bitmasks, return the value of none 
-- (i.e. "None").
--							
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Philip Shaffer	2018/09/27 Created for EIDSS 7.0.
-- Ricky Moss		2018/09/30 Removed 510 and 0 from returned value
-- Stephen Long     2020/05/19 Added space between comma.
-- Doug Albanese	03/21/2023 Swapped out function with FN_GBL_LanguageCode_GET to get correct translation code.
--
-- Test Code:
-- declare @LangID nvarchar(50) = N'en';
-- declare @HACode int = -1; -- any bitwise OR'd values from table [trtHACodeList]. Value -1 will 
-- match all. Value NULL will return NULL.
-- select dbo.FN_GBL_HACodeNames_ToCSV(@LangID, @HACode);
--=================================================================================================
ALTER FUNCTION [dbo].[FN_GBL_HACodeNames_ToCSV] (
	@LangID NVARCHAR(50),
	@HACode BIGINT
	)
RETURNS NVARCHAR(4000)
AS
BEGIN
	DECLARE @CSV NVARCHAR(4000) = N'', -- size string returned by STRING_AGG
		@LanguageCode BIGINT = dbo.FN_GBL_LanguageCode_GET(@LangID);

	-- if passed a null, we return a null result
	IF (@HACode IS NULL)
		RETURN NULL;

	-- if not passed a zero, we process the list
	IF (@HACode <> 0)
	BEGIN
		WITH cteOrderedResults (
			[intHACode],
			[strDisplayText]
			)
		AS (
			SELECT TOP 100 PERCENT hcl.[intHACode],
				COALESCE(snt.[strTextString], br.[strDefault]) AS [strDisplayText]
			FROM [dbo].[trtHACodeList] AS hcl
			INNER JOIN [dbo].[trtBaseReference] AS br
				ON hcl.[idfsCodeName] = br.[idfsBaseReference]
			LEFT OUTER JOIN [dbo].[trtStringNameTranslation] AS snt
				ON hcl.[idfsCodeName] = snt.[idfsBaseReference]
					AND snt.[idfsLanguage] = @LanguageCode
			WHERE (
					hcl.[intHACode] <> 0
					AND hcl.intHACode <> 510
					)
				AND ((@HACode & hcl.[intHACode]) = hcl.[intHACode])
			ORDER BY hcl.[intHACode] ASC
			)
		SELECT @CSV = STRING_AGG([strDisplayText], N', ')
		FROM cteOrderedResults;-- needed CTE to get ordered result set due to AGGREGATE function

		-- do we have a valid result to return?
		IF (
				@CSV IS NOT NULL
				AND LEN(@CSV) > 0
				)
			RETURN @CSV;-- yes
	END

	-- if we got to here, then we need to return the display text for HACode zero (i.e. "None").
	SELECT TOP 1 @CSV = COALESCE(snt.[strTextString], br.[strDefault])
	FROM [dbo].[trtHACodeList] AS hcl
	INNER JOIN [dbo].[trtBaseReference] AS br
		ON hcl.[idfsCodeName] = br.[idfsBaseReference]
	LEFT OUTER JOIN [dbo].[trtStringNameTranslation] AS snt
		ON hcl.[idfsCodeName] = snt.[idfsBaseReference]
			AND snt.[idfsLanguage] = @LanguageCode
	WHERE hcl.[intHACode] = 0;

	RETURN @CSV;
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_DEDUPLICATION_PERSON_SET]...';


GO


-- ================================================================================================
-- Name: USP_ADMIN_DEDUPLICATION_PERSON_SET
--
-- Description:	Deduplication for Person Master record.
-- 
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mark Wilson		04/14/2022  initial version
-- Ann Xiong		03/15/2023	Implemented Data Audit and fixed a few issues
-- Ann Xiong		03/17/2023	Fixed an issue for Data Audit After UPDATE dbo.tlbHuman

-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_DEDUPLICATION_PERSON_SET]
(
	@HumanMasterID BIGINT = NULL,
	@SupersededHumanMasterID BIGINT,
	@CopyToHumanIndicator BIT = 0, 
	@PersonalIDType BIGINT = NULL,
	@EIDSSPersonID NVARCHAR(200) = NULL,
	@PersonalID NVARCHAR(100) = NULL,
	@FirstName NVARCHAR(200) = NULL,
	@SecondName NVARCHAR(200) = NULL,
	@LastName NVARCHAR(200),
	@DateOfBirth DATETIME = NULL,
	@DateOfDeath DATETIME = NULL,
	@ReportedAge INT = NULL,
	@ReportAgeUOMID BIGINT = NULL,
	@HumanGenderTypeID BIGINT = NULL,
	@OccupationTypeID BIGINT = NULL,
	@CitizenshipTypeID BIGINT = NULL,
	@PassportNumber NVARCHAR(20) = NULL,
	@IsEmployedTypeID BIGINT = NULL,
---------------------------------------------------------------
	@EmployerName NVARCHAR(200) = NULL,
	@EmployedDateLastPresent DATETIME = NULL,
	@EmployerForeignAddressIndicator BIT = 0,
	@EmployerForeignAddressString NVARCHAR(200) = NULL,
	@EmployerGeoLocationID BIGINT = NULL,
	@EmployeridfsLocation BIGINT = NULL,
	@EmployerstrStreetName NVARCHAR(200) = NULL,
	@EmployerstrApartment NVARCHAR(200) = NULL,
	@EmployerstrBuilding NVARCHAR(200) = NULL,
	@EmployerstrHouse NVARCHAR(200) = NULL,
	@EmployeridfsPostalCode NVARCHAR(200) = NULL,
	@EmployerPhone NVARCHAR(100) = NULL,
---------------------------------------------------------------
	@IsStudentTypeID BIGINT = NULL,
	@SchoolName NVARCHAR(200) = NULL,
	@SchoolDateLastAttended DATETIME = NULL,
	@SchoolForeignAddressIndicator BIT = 0,
	@SchoolForeignAddressString NVARCHAR(200) = NULL,
	@SchoolGeoLocationID BIGINT = NULL,
	@SchoolidfsLocation BIGINT = NULL,
	@SchoolstrStreetName NVARCHAR(200) = NULL,
	@SchoolstrApartment NVARCHAR(200) = NULL,
	@SchoolstrBuilding NVARCHAR(200) = NULL,
	@SchoolstrHouse NVARCHAR(200) = NULL,
	@SchoolidfsPostalCode NVARCHAR(200) = NULL,
	@SchoolPhone NVARCHAR(100) = NULL,
---------------------------------------------------------------
	@HumanGeoLocationID BIGINT = NULL,
	@HumanidfsLocation BIGINT = NULL,
	@HumanstrStreetName NVARCHAR(200) = NULL,
	@HumanstrApartment NVARCHAR(200) = NULL,
	@HumanstrBuilding NVARCHAR(200) = NULL,
	@HumanstrHouse NVARCHAR(200) = NULL,
	@HumanidfsPostalCode NVARCHAR(200) = NULL,
	@HumanstrLatitude FLOAT = NULL,
	@HumanstrLongitude FLOAT = NULL,
	@HumanstrElevation FLOAT = NULL,
---------------------------------------------------------------
	@HumanPermGeoLocationID BIGINT = NULL,
	@HumanPermidfsLocation BIGINT = NULL,
	@HumanPermstrStreetName NVARCHAR(200) = NULL,
	@HumanPermstrApartment NVARCHAR(200) = NULL,
	@HumanPermstrBuilding NVARCHAR(200) = NULL,
	@HumanPermstrHouse NVARCHAR(200) = NULL,
	@HumanPermidfsPostalCode NVARCHAR(200) = NULL,
---------------------------------------------------------------
	@HumanAltGeoLocationID BIGINT = NULL,
	@HumanAltForeignAddressIndicator BIT = 0,
	@HumanAltForeignAddressString NVARCHAR(200) = NULL,
	@HumanAltidfsLocation BIGINT = NULL,
	@HumanAltstrStreetName NVARCHAR(200) = NULL,
	@HumanAltstrApartment NVARCHAR(200) = NULL,
	@HumanAltstrBuilding NVARCHAR(200) = NULL,
	@HumanAltstrHouse NVARCHAR(200) = NULL,
	@HumanAltidfsPostalCode NVARCHAR(200) = NULL,
---------------------------------------------------------------
	@RegistrationPhone NVARCHAR(200) = NULL,
	@HomePhone NVARCHAR(200) = NULL,
	@WorkPhone NVARCHAR(200) = NULL,
	@ContactPhoneCountryCode INT = NULL,
	@ContactPhone NVARCHAR(200) = NULL,
	@ContactPhoneTypeID BIGINT = NULL,
	@ContactPhone2CountryCode INT = NULL,
	@ContactPhone2 NVARCHAR(200) = NULL,
	@ContactPhone2TypeID BIGINT = NULL,
	@AuditUser NVARCHAR(100) = ''
)
AS
BEGIN

	BEGIN TRY
		BEGIN TRANSACTION;

		DECLARE @ReturnCode INT = 0;
		DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
		DECLARE @HumanID BIGINT = NULL;

		--Data Audit--
		DECLARE @idfUserId BIGINT = NULL;
		DECLARE @idfSiteId BIGINT = NULL;
		DECLARE @idfsDataAuditEventType bigint = NULL;
		DECLARE @idfsObjectType bigint = 10017082; 					-- Person Deduplication --
		DECLARE @idfObject bigint = @HumanMasterID;
		DECLARE @idfObjectTable_tlbHumanActual bigint = 4573200000000;
		DECLARE @idfObjectTable_tlbHuman bigint = 75600000000;
		DECLARE @idfDataAuditEvent bigint = NULL;	

		-- Get and Set UserId and SiteId
		SELECT @idfUserId = userInfo.UserId, @idfSiteId = UserInfo.SiteId FROM dbo.FN_UserSiteInformation(@AuditUser) userInfo

		--  tauDataAuditEvent  Event Type- Edit 
		set @idfsDataAuditEventType =10016003;
		-- insert record into tauDataAuditEvent - 
		EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@HumanMasterID, @idfObjectTable_tlbHumanActual, @idfDataAuditEvent OUTPUT
		--Data Audit--

		EXEC dbo.USP_HUM_HUMAN_MASTER_SET 
			@HumanMasterID = @HumanMasterID,
		    @CopyToHumanIndicator = @CopyToHumanIndicator,
		    @PersonalIDType = @PersonalIDType,
		    @EIDSSPersonID = @EIDSSPersonID,
		    @PersonalID = @PersonalID,
		    @FirstName = @FirstName,
		    @SecondName = @SecondName,
		    @LastName = @LastName,
		    @DateOfBirth = @DateOfBirth,
		    @DateOfDeath = @DateOfDeath,
		    @ReportedAge = @ReportedAge,
		    @ReportAgeUOMID = @ReportAgeUOMID,
		    @HumanGenderTypeID = @HumanGenderTypeID,
		    @OccupationTypeID = @OccupationTypeID,
		    @CitizenshipTypeID = @CitizenshipTypeID,
		    @PassportNumber = @PassportNumber,
		    @IsEmployedTypeID = @IsEmployedTypeID,
		    @EmployerName = @EmployerName,
		    @EmployedDateLastPresent = @EmployedDateLastPresent,
		    @EmployerForeignAddressIndicator = @EmployerForeignAddressIndicator,
		    @EmployerForeignAddressString = @EmployerForeignAddressString,
		    @EmployerGeoLocationID = @EmployerGeoLocationID,
		    @EmployeridfsLocation = @EmployeridfsLocation,
		    @EmployerstrStreetName = @EmployerstrStreetName,
		    @EmployerstrApartment = @EmployerstrApartment,
		    @EmployerstrBuilding = @EmployerstrBuilding,
		    @EmployerstrHouse = @EmployerstrHouse,
		    @EmployeridfsPostalCode = @EmployeridfsPostalCode,
		    @EmployerPhone = @EmployerPhone,
		    @IsStudentTypeID = @IsStudentTypeID,
		    @SchoolName = @SchoolName,
		    @SchoolDateLastAttended = @SchoolDateLastAttended,
		    @SchoolForeignAddressIndicator = @SchoolForeignAddressIndicator,
		    @SchoolForeignAddressString = @SchoolForeignAddressString,
		    @SchoolGeoLocationID = @SchoolGeoLocationID,
		    @SchoolidfsLocation = @SchoolidfsLocation,
		    @SchoolstrStreetName = @SchoolstrStreetName,
		    @SchoolstrApartment = @SchoolstrApartment,
		    @SchoolstrBuilding = @SchoolstrBuilding,
		    @SchoolstrHouse = @SchoolstrHouse,
		    @SchoolidfsPostalCode = @SchoolidfsPostalCode,
		    @SchoolPhone = @SchoolPhone,
		    @HumanGeoLocationID = @HumanGeoLocationID,
		    @HumanidfsLocation = @HumanidfsLocation,
		    @HumanstrStreetName = @HumanstrStreetName,
		    @HumanstrApartment = @HumanstrApartment,
		    @HumanstrBuilding = @HumanstrBuilding,
		    @HumanstrHouse = @HumanstrHouse,
		    @HumanidfsPostalCode = @HumanidfsPostalCode,
		    @HumanstrLatitude = @HumanstrLatitude,
		    @HumanstrLongitude = @HumanstrLongitude,
		    @HumanstrElevation = @HumanstrElevation,
		    @HumanPermGeoLocationID = @HumanPermGeoLocationID,
		    @HumanPermidfsLocation = @HumanPermidfsLocation,
		    @HumanPermstrStreetName = @HumanPermstrStreetName,
		    @HumanPermstrApartment = @HumanPermstrApartment,
		    @HumanPermstrBuilding = @HumanPermstrBuilding,
		    @HumanPermstrHouse = @HumanPermstrHouse,
		    @HumanPermidfsPostalCode = @HumanPermidfsPostalCode,
		    @HumanAltGeoLocationID = @HumanAltGeoLocationID,
		    @HumanAltForeignAddressIndicator = @HumanAltForeignAddressIndicator,
		    @HumanAltForeignAddressString = @HumanAltForeignAddressString,
		    @HumanAltidfsLocation = @HumanAltidfsLocation,
		    @HumanAltstrStreetName = @HumanAltstrStreetName,
		    @HumanAltstrApartment = @HumanAltstrApartment,
		    @HumanAltstrBuilding = @HumanAltstrBuilding,
		    @HumanAltstrHouse = @HumanAltstrHouse,
		    @HumanAltidfsPostalCode = @HumanAltidfsPostalCode,
		    @RegistrationPhone = @RegistrationPhone,
		    @HomePhone = @HomePhone,
		    @WorkPhone =@WorkPhone,
		    @ContactPhoneCountryCode = @ContactPhoneCountryCode,
		    @ContactPhone = @ContactPhone,
		    @ContactPhoneTypeID = @ContactPhoneTypeID,
		    @ContactPhone2CountryCode = @ContactPhone2CountryCode,
		    @ContactPhone2 = @ContactPhone2,
		    @ContactPhone2TypeID = @ContactPhone2TypeID,
			@idfDataAuditEvent = @idfDataAuditEvent,
		    @AuditUser = @AuditUser
		
--------------------------------------------------------------------------------------------------
-- replace Superseded Human ID with surviving Human ID
--------------------------------------------------------------------------------------------------
		--Data Audit--
		DECLARE @HumanIDsTemp TABLE
        (
            HumanID BIGINT NOT NULL
        );
        INSERT INTO @HumanIDsTemp
        SELECT idfHuman
        FROM dbo.tlbHuman
		WHERE idfHumanActual = @SupersededHumanMasterID
		--Data Audit--

		UPDATE dbo.tlbHuman
		SET idfHumanActual = @HumanMasterID
		WHERE idfHumanActual = @SupersededHumanMasterID


		--Data Audit--
        WHILE EXISTS (SELECT * FROM @HumanIDsTemp)
        BEGIN

            SELECT TOP 1
                @HumanID = HumanID
            FROM @HumanIDsTemp;
            BEGIN
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, idfObjectTable, idfColumn, 
					idfObject, idfObjectDetail, 
					strOldValue, strNewValue)
				select @idfDataAuditEvent,@idfObjectTable_tlbHuman, 4572310000000,
					@HumanID,null,
					@SupersededHumanMasterID,@HumanMasterID

            END

            DELETE FROM @HumanIDsTemp
            WHERE HumanID = @HumanID;
        END
		--Data Audit--
		
--------------------------------------------------------------------------------------------------
-- soft delete the old Farm Master relate records
--------------------------------------------------------------------------------------------------
		EXEC dbo.USP_HUM_HUMAN_MASTER_DEL
			@HumanMasterID = @SupersededHumanMasterID,
			@idfDataAuditEvent = @idfDataAuditEvent,
		    @AuditUserName = @AuditUser
		 		
		IF @@TRANCOUNT > 0
			COMMIT TRANSACTION;

		SELECT @ReturnCode ReturnCode,
			@ReturnMessage ReturnMessage,
			@HumanMasterID HumanMasterID,
			@EIDSSPersonID EIDSSPersonID, 
			@HumanID HumanID;
		--SELECT @ReturnCode ReturnCode,
		--	@ReturnMessage ReturnMessage,
		--	@HumanMasterID SessionKey

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET]...';


GO



-- ================================================================================================
-- Name: USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET
--
-- Description:	Deduplication for Livestock and Avian disease report record.
-- 
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mark Wilson		17May2022	Initial release
-- Mark Wilson		19May2022	Added Testing, Penside Tests, Interpretations and CaseLogs
-- Ann Xiong		7/26/2022	Replaced "@Notifications = @Notifications" with "@Events = @Notifications" to fix the error "@Notifications is not a parameter for procedure USP_VET_DISEASE_REPORT_SET."
-- Ann Xiong		12/21/2022	Modified to pass parameter '@AuditUserName' when call USP_VET_DISEASE_REPORT_DEL
-- Ann Xiong		03/07/2023  Implemented Data Audit
-- Ann Xiong	    03/09/2023  Modified to pass parameter '@DataAuditEventID' when call USP_VET_DISEASE_REPORT_SET and USP_VET_DISEASE_REPORT_DEL
-- Ann Xiong		03/17/2023	Fixed a few issues when UPDATE dbo.tlbMaterial and UPDATE dbo.tlbVaccination
--
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET]
(
	@SurvivorVeterinaryDiseaseReportID BIGINT,
	@SupersededVeterinaryDiseaseReportID BIGINT,
	@EIDSSReportID NVARCHAR(200) = NULL,
	@FarmID BIGINT,
	@FarmMasterID BIGINT,
	@FarmOwnerID BIGINT = NULL,
	@MonitoringSessionID BIGINT = NULL,
	@OutbreakID BIGINT = NULL,
	@RelatedToDiseaseReportID BIGINT = NULL,
	@EIDSSFieldAccessionID NVARCHAR(200) = NULL,
	@DiseaseID BIGINT,
	@EnteredByPersonID BIGINT = NULL,
	@ReportedByOrganizationID BIGINT = NULL,
	@ReportedByPersonID BIGINT = NULL,
	@InvestigatedByOrganizationID BIGINT = NULL,
	@InvestigatedByPersonID BIGINT = NULL,
	@ReceivedByOrganizationID BIGINT = NULL,
	@ReceivedByPersonID BIGINT = NULL,
	@SiteID BIGINT,
	@DiagnosisDate DATETIME = NULL,
	@EnteredDate DATETIME = NULL,
	@ReportDate DATETIME = NULL,
	@AssignedDate DATETIME = NULL,
	@InvestigationDate DATETIME = NULL,
	@RowStatus INT,
	@ReportTypeID BIGINT = NULL,
	@ClassificationTypeID BIGINT = NULL,
	@StatusTypeID BIGINT = NULL,
	@ReportCategoryTypeID BIGINT,
	@FarmTotalAnimalQuantity INT = NULL,
	@FarmSickAnimalQuantity INT = NULL,
	@FarmDeadAnimalQuantity INT = NULL,
	@FarmLatitude FLOAT = NULL,
	@FarmLongitude FLOAT = NULL,
	@FarmEpidemiologicalObservationID BIGINT = NULL,
	@ControlMeasuresObservationID BIGINT = NULL,
	@TestsConductedIndicator BIGINT = NULL,
	@AuditUserName NVARCHAR(200),
	@FlocksOrHerds NVARCHAR(MAX) = NULL,
	@Species NVARCHAR(MAX) = NULL,
	@Animals NVARCHAR(MAX) = NULL,
	@Vaccinations NVARCHAR(MAX) = NULL,
	@Samples NVARCHAR(MAX) = NULL,
	@PensideTests NVARCHAR(MAX) = NULL,
	@LaboratoryTests NVARCHAR(MAX) = NULL,
	@LaboratoryTestInterpretations NVARCHAR(MAX) = NULL,
	@CaseLogs NVARCHAR(MAX) = NULL,
	@ClinicalInformation NVARCHAR(MAX) = NULL,
	@Contacts NVARCHAR(MAX) = NULL,
	@CaseMonitorings NVARCHAR(MAX) = NULL,
	@Notifications NVARCHAR(MAX) = NULL,
	@UserID BIGINT,
	@LinkLocalOrFieldSampleIDToReportID BIT = 0,
	@OutbreakCaseIndicator BIT = 0,
	@OutbreakCaseReportUID BIGINT = NULL,
	@OutbreakCaseStatusTypeID BIGINT = NULL,
	@OutbreakCaseQuestionnaireObservationID BIGINT = NULL,
	@PrimaryCaseIndicator BIT = 0
)
AS
BEGIN

	BEGIN TRY
		BEGIN TRANSACTION;

		DECLARE @ReturnCode INT = 0;
		DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';

        DECLARE @FlocksOrHerdsTemp TABLE
        (
            FlockOrHerdID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            FlockOrHerdMasterID BIGINT NULL,
            EIDSSFlockOrHerdID NVARCHAR(200) NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            RowStatus INT NULL,
            RowAction INT NULL
        );
        
		DECLARE @SpeciesTemp TABLE
        (
            SpeciesID BIGINT NOT NULL,
            SpeciesMasterID BIGINT NULL,
            FlockOrHerdID BIGINT NOT NULL,
            SpeciesTypeID BIGINT NOT NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            StartOfSignsDate DATETIME NULL,
            AverageAge NVARCHAR(200) NULL,
            ObservationID BIGINT NULL,
            Comments NVARCHAR(2000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToSpeciesID BIGINT NULL,
            RelatedToObservationID BIGINT NULL
        );
        DECLARE @AnimalsTemp TABLE
        (
            AnimalID BIGINT NOT NULL,
            SexTypeID BIGINT NULL,
            ConditionTypeID BIGINT NULL,
            AgeTypeID BIGINT NULL,
            SpeciesID BIGINT NULL,
            ObservationID BIGINT NULL,
            EIDSSAnimalID NVARCHAR(200) NULL,
            AnimalName NVARCHAR(200) NULL,
            Color NVARCHAR(200) NULL,
            AnimalDescription NVARCHAR(200) NULL,
            ClinicalSignsIndicator BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToAnimalID BIGINT NULL,
            RelatedToObservationID BIGINT NULL
        );
        
		DECLARE @VaccinationsTemp TABLE
        (
            VaccinationID BIGINT NOT NULL,
            SpeciesID BIGINT NULL,
            VaccinationTypeID BIGINT NULL,
            RouteTypeID BIGINT NULL,
            DiseaseID BIGINT NULL,
            VaccinationDate DATETIME NULL,
            Manufacturer NVARCHAR(200) NULL,
            LotNumber NVARCHAR(200) NULL,
            NumberVaccinated INT NULL,
            Comments NVARCHAR(2000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
		
		DECLARE @SamplesTemp TABLE
        (
            SampleID BIGINT NOT NULL,
            SampleTypeID BIGINT NULL,
            RootSampleID BIGINT NULL,
            ParentSampleID BIGINT NULL,
            SpeciesID BIGINT NULL,
            AnimalID BIGINT NULL,
            VeterinaryDiseaseReportID BIGINT NULL,
            MonitoringSessionID BIGINT NULL,
            SampleStatusTypeID BIGINT NULL,
            CollectionDate DATETIME NULL,
            CollectedByOrganizationID BIGINT NULL,
            CollectedByPersonID BIGINT NULL,
            SentDate DATETIME NULL,
            SentToOrganizationID BIGINT NULL,
            EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
            Comments NVARCHAR(200) NULL,
            SiteID BIGINT NOT NULL,
            CurrentSiteID BIGINT NULL,
            EnteredDate DATETIME NULL,
            DiseaseID BIGINT NULL,
            BirdStatusTypeID BIGINT NULL,
            ReadOnlyIndicator BIT NULL,
            LabModuleSourceIndicator INT NOT NULL,
            FarmID BIGINT NULL,
            FarmOwnerID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );

        DECLARE @PensideTestsTemp TABLE
        (
            PensideTestID BIGINT NOT NULL,
            SampleID BIGINT NOT NULL,
            PensideTestNameTypeID BIGINT NULL,
            PensideTestResultTypeID BIGINT NULL,
            PensideTestCategoryTypeID BIGINT NULL,
            TestedByPersonID BIGINT NULL,
            TestedByOrganizationID BIGINT NULL,
            DiseaseID BIGINT NULL,
            TestDate DATETIME NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
       DECLARE @LaboratoryTestsTemp TABLE
        (
            TestID BIGINT NOT NULL,
            TestNameTypeID BIGINT NULL,
            TestCategoryTypeID BIGINT NULL,
            TestResultTypeID BIGINT NULL,
            TestStatusTypeID BIGINT NOT NULL,
            DiseaseID BIGINT NOT NULL,
            SampleID BIGINT NULL,
            BatchTestID BIGINT NULL,
            ObservationID BIGINT NULL,
            TestNumber INT NULL,
            Comments NVARCHAR NULL,
            StartedDate DATETIME NULL,
            ResultDate DATETIME NULL,
            TestedByOrganizationID BIGINT NULL,
            TestedByPersonID BIGINT NULL,
            ResultEnteredByOrganizationID BIGINT NULL,
            ResultEnteredByPersonID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            ReadOnlyIndicator BIT NOT NULL,
            NonLaboratoryTestIndicator BIT NOT NULL,
            ExternalTestIndicator BIT NULL,
            PerformedByOrganizationID BIGINT NULL,
            ReceivedDate DATETIME NULL,
            ContactPersonName NVARCHAR(200) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @LaboratoryTestInterpretationsTemp TABLE
        (
            TestInterpretationID BIGINT NOT NULL,
            DiseaseID BIGINT NULL,
            InterpretedStatusTypeID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            InterpretedByOrganizationID BIGINT NULL,
            InterpretedByPersonID BIGINT NULL,
            TestID BIGINT NOT NULL,
            ValidatedStatusIndicator BIT NULL,
            ReportSessionCreatedIndicator BIT NULL,
            ValidatedComment NVARCHAR(200) NULL,
            InterpretedComment NVARCHAR(200) NULL,
            ValidatedDate DATETIME NULL,
            InterpretedDate DATETIME NULL,
            ReadOnlyIndicator BIT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @CaseLogsTemp TABLE
        (
            CaseLogID BIGINT NOT NULL,
            LogStatusTypeID BIGINT NULL,
            LoggedByPersonID BIGINT NULL,
            LogDate DATETIME NULL,
            ActionRequired NVARCHAR(200) NULL,
            Comments NVARCHAR(1000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @ClinicalInformationTemp TABLE
        (
            langId NVARCHAR(200) NULL,
            HerdID BIGINT NOT NULL,
            Herd NVARCHAR(200) NULL,
            ClinicalSignsIndicator BIGINT NOT NULL,
            SpeciesTypeID BIGINT NULL,
            SpeciesTypeName NVARCHAR(200) NULL,
            StatusTypeID BIGINT NULL,
            InvestigationPerformedTypeID BIGINT NULL
        );
        DECLARE @ActivityParametersTemp TABLE
        (
            ActivityID BIGINT NOT NULL,
            ParameterID BIGINT NOT NULL,
            ParameterValue SQL_VARIANT NULL,
            ParameterRowID BIGINT NOT NULL
        );
        DECLARE @NotificationsTemp TABLE
        (
            NotificationID BIGINT NOT NULL,
            NotificationTypeID BIGINT NULL,
            UserID BIGINT NULL,
            NotificationObjectID BIGINT NULL,
            NotificationObjectTypeID BIGINT NULL,
            TargetUserID BIGINT NULL,
            TargetSiteID BIGINT NULL,
            TargetSiteTypeID BIGINT NULL,
            SiteID BIGINT NULL,
            Payload NVARCHAR(MAX) NULL,
            LoginSite NVARCHAR(20) NULL
        );

		--Data Audit--
		declare @idfsDataAuditEventType bigint = NULL;
		declare @idfsObjectType bigint = 10017086;                         -- Veterinary Disease Report deduplication
		declare @idfObject bigint = @SurvivorVeterinaryDiseaseReportID;
		declare @idfDataAuditEvent bigint= NULL;
		declare @idfObjectTable_tlbVetCase bigint = 75800000000;
		declare @idfObjectTable_tlbMaterial bigint = 75620000000;
		declare @idfObjectTable_tlbTesting bigint = 75740000000;
		declare @idfObjectTable_tlbTestValidation bigint = 75750000000;
		declare @idfObjectTable_tlbVetCaseLog bigint = 75810000000;
		declare @idfObjectTable_tlbPensideTest bigint = 75680000000;
		declare @idfObjectTable_tlbVaccination bigint = 75790000000;

		--Data Audit--

        INSERT INTO @FlocksOrHerdsTemp
        SELECT *
        FROM
            OPENJSON(@FlocksOrHerds)
            WITH
            (
                FlockOrHerdID BIGINT,
                FarmID BIGINT,
                FlockOrHerdMasterID BIGINT,
                EIDSSFlockOrHerdID NVARCHAR(200),
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @SpeciesTemp
        SELECT *
        FROM
            OPENJSON(@Species)
            WITH
            (
                SpeciesID BIGINT,
                SpeciesMasterID BIGINT,
                FlockOrHerdID BIGINT,
                SpeciesTypeID BIGINT,
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                StartOfSignsDate DATETIME,
                AverageAge NVARCHAR(200),
                ObservationID BIGINT,
                Comments NVARCHAR(2000),
                RowStatus INT,
                RowAction INT,
                RelatedToSpeciesID BIGINT,
                RelatedToObservationID BIGINT
            );

        INSERT INTO @AnimalsTemp
        SELECT *
        FROM
            OPENJSON(@Animals)
            WITH
            (
                AnimalID BIGINT,
                SexTypeID BIGINT,
                ConditionTypeID BIGINT,
                AgeTypeID BIGINT,
                SpeciesID BIGINT,
                ObservationID BIGINT,
                EIDSSAnimalID NVARCHAR(200),
                AnimalName NVARCHAR(200),
                Color NVARCHAR(200),
                AnimalDescription NVARCHAR(200),
                ClinicalSignsIndicator BIGINT,
                RowStatus INT,
                RowAction INT,
                RelatedToAnimalID BIGINT,
                RelatedToObservationID BIGINT
            );

        INSERT INTO @VaccinationsTemp
        SELECT *
        FROM
            OPENJSON(@Vaccinations)
            WITH
            (
                VaccinationID BIGINT,
                SpeciesID BIGINT,
                VaccinationTypeID BIGINT,
                RouteTypeID BIGINT,
                DiseaseID BIGINT,
                VaccinationDate DATETIME2,
                Manufacturer NVARCHAR(200),
                LotNumber NVARCHAR(200),
                NumberVaccinated INT,
                Comments NVARCHAR(2000),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@Samples)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                RootSampleID BIGINT,
                ParentSampleID BIGINT,
                SpeciesID BIGINT,
                AnimalID BIGINT,
                VeterinaryDiseaseReportID BIGINT,
                MonitoringSessionID BIGINT,
                SampleStatusTypeID BIGINT,
                CollectionDate DATETIME2,
                CollectedByOrganizationID BIGINT,
                CollectedByPersonID BIGINT,
                SentDate DATETIME2,
                SentToOrganizationID BIGINT,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                Comments NVARCHAR(200),
                SiteID BIGINT,
                CurrentSiteID BIGINT,
                EnteredDate DATETIME2,
                DiseaseID BIGINT,
                BirdStatusTypeID BIGINT,
                ReadOnlyIndicator BIT,
                LabModuleSourceIndicator INT,
                FarmID BIGINT,
                FarmOwnerID BIGINT,
                RowStatus INT,
                RowAction INT
            );


        INSERT INTO @PensideTestsTemp
        SELECT *
        FROM
            OPENJSON(@PensideTests)
            WITH
            (
                PensideTestID BIGINT,
                SampleID BIGINT,
                PensideTestNameTypeID BIGINT,
                PensideTestResultTypeID BIGINT,
                PensideTestCategoryTypeID BIGINT,
                TestedByPersonID BIGINT,
                TestedByOrganizationID BIGINT,
                DiseaseID BIGINT,
                TestDate DATETIME2,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @LaboratoryTestsTemp
        SELECT *
        FROM
            OPENJSON(@LaboratoryTests)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Comments NVARCHAR(500),
                StartedDate DATETIME2,
                ResultDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @LaboratoryTestInterpretationsTemp
        SELECT *
        FROM
            OPENJSON(@LaboratoryTestInterpretations)
            WITH
            (
                TestInterpretationID BIGINT,
                DiseaseID BIGINT,
                InterpretedStatusTypeID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                InterpretedByOrganizationID BIGINT,
                InterpretedByPersonID BIGINT,
                TestID BIGINT,
                ValidatedStatusIndicator BIT,
                ReportSessionCreatedIndicator BIT,
                ValidatedComment NVARCHAR(200),
                InterpretedComment NVARCHAR(200),
                ValidatedDate DATETIME2,
                InterpretedDate DATETIME2,
                ReadOnlyIndicator BIT,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @CaseLogsTemp
        SELECT *
        FROM
            OPENJSON(@CaseLogs)
            WITH
            (
                CaseLogID BIGINT,
                LogStatusTypeID BIGINT,
                LoggedByPersonID BIGINT,
                LogDate DATETIME2,
                ActionRequired NVARCHAR(200),
                Comments NVARCHAR(1000),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @ClinicalInformationTemp
        SELECT *
        FROM
            OPENJSON(@ClinicalInformation)
            WITH
            (
                langId NVARCHAR(200),
                HerdID BIGINT,
                Herd NVARCHAR(200),
                ClinicalSignsTypeID BIGINT,
                SpeciesTypeID BIGINT,
                SpeciesTypeName NVARCHAR(200),
                StatusTypeID BIGINT,
                InvestigationPerformedTypeID BIGINT
            );

        INSERT INTO @NotificationsTemp
        SELECT *
        FROM
            OPENJSON(@Notifications)
            WITH
            (
                NotificationID BIGINT,
                NotificationTypeID BIGINT,
                UserID BIGINT,
                NotificationObjectID BIGINT,
                NotificationObjectTypeID BIGINT,
                TargetUserID BIGINT,
                TargetSiteID BIGINT,
                TargetSiteTypeID BIGINT,
                SiteID BIGINT,
                Payload NVARCHAR(MAX),
                LoginSite BIGINT
            );

        -- Data audit

		--  tauDataAuditEvent  Event Type- Edit 
		set @idfsDataAuditEventType =10016003;
		-- insert record into tauDataAuditEvent - 
		EXEC USSP_GBL_DataAuditEvent_GET @UserID, @SiteID, @idfsDataAuditEventType,@idfsObjectType,@SurvivorVeterinaryDiseaseReportID, @idfObjectTable_tlbVetCase, @idfDataAuditEvent OUTPUT

		DECLARE @SampleID BIGINT = NULL,
				@VeterinaryDiseaseReportID BIGINT = NULL,
				@TestID BIGINT = NULL,
				@TestValidationID BIGINT = NULL,
				@VetCaseLogID BIGINT = NULL,
				@PensideTestID BIGINT = NULL,
				@VaccinationID BIGINT = NULL
        -- End data audit

----------------------------------------------------------------------------------------------------------------
-- SET the Survivor Disease Report
		EXEC dbo.USP_VET_DISEASE_REPORT_SET 
			@DiseaseReportID = @SurvivorVeterinaryDiseaseReportID,
		    @EIDSSReportID = @EIDSSReportID,
		    @FarmID = @FarmID,
		    @FarmMasterID = @FarmMasterID,
		    @FarmOwnerID = @FarmOwnerID,
		    @MonitoringSessionID = @MonitoringSessionID,
		    @OutbreakID = @OutbreakID,
		    @RelatedToDiseaseReportID = @RelatedToDiseaseReportID,
		    @EIDSSFieldAccessionID = @EIDSSFieldAccessionID,
		    @DiseaseID = @DiseaseID,
		    @EnteredByPersonID = @EnteredByPersonID,
		    @ReportedByOrganizationID = @ReportedByOrganizationID,
		    @ReportedByPersonID = @ReportedByPersonID,
		    @InvestigatedByOrganizationID = @InvestigatedByOrganizationID,
		    @InvestigatedByPersonID = @InvestigatedByPersonID,
		    @ReceivedByOrganizationID = @ReceivedByOrganizationID,
		    @ReceivedByPersonID = @ReceivedByPersonID,
		    @SiteID = @SiteID,
		    @DiagnosisDate = @DiagnosisDate,
		    @EnteredDate = @EnteredDate,
		    @ReportDate = @ReportDate,
		    @AssignedDate = @AssignedDate,
		    @InvestigationDate = @InvestigationDate,
		    @RowStatus = @RowStatus,
		    @ReportTypeID = @ReportTypeID,
		    @ClassificationTypeID = @ClassificationTypeID,
		    @StatusTypeID = @StatusTypeID,
		    @ReportCategoryTypeID = @ReportCategoryTypeID,
		    @FarmTotalAnimalQuantity = @FarmTotalAnimalQuantity,
		    @FarmSickAnimalQuantity = @FarmSickAnimalQuantity,
		    @FarmDeadAnimalQuantity = @FarmDeadAnimalQuantity,
		    @FarmLatitude = @FarmLatitude,
		    @FarmLongitude = @FarmLongitude,
		    @FarmEpidemiologicalObservationID = @FarmEpidemiologicalObservationID,
		    @ControlMeasuresObservationID = @ControlMeasuresObservationID,
		    @TestsConductedIndicator = @TestsConductedIndicator,
			@DataAuditEventID = @idfDataAuditEvent,
		    @AuditUserName = @AuditUserName,
		    @FlocksOrHerds = @FlocksOrHerds,
		    @Species = @Species,
		    @Animals = @Animals,
		    @Vaccinations = @Vaccinations,
		    @Samples = @Samples,
		    @PensideTests = @PensideTests,
		    @LaboratoryTests = @LaboratoryTests,
		    @LaboratoryTestInterpretations = @LaboratoryTestInterpretations,
		    @CaseLogs = @CaseLogs,
		    @ClinicalInformation = @ClinicalInformation,
		    @Contacts = @Contacts,
		    @CaseMonitorings = @CaseMonitorings,
		    @Events = @Notifications,
		    @UserID = @UserID,
		    @LinkLocalOrFieldSampleIDToReportID = @LinkLocalOrFieldSampleIDToReportID,
		    @OutbreakCaseIndicator = @OutbreakCaseIndicator,
		    @OutbreakCaseReportUID = @OutbreakCaseReportUID,
		    @OutbreakCaseStatusTypeID = @OutbreakCaseStatusTypeID,
		    @OutbreakCaseQuestionnaireObservationID = @OutbreakCaseQuestionnaireObservationID,
		    @PrimaryCaseIndicator = @PrimaryCaseIndicator

----------------------------------------------------------------------------------------------------------------
-- delete the Superseded disease report
		EXEC dbo.USP_VET_DISEASE_REPORT_DEL
			@DiseaseReportID = @SupersededVeterinaryDiseaseReportID,
			@DeduplicationIndicator = 1, -- deduplication
			@DataAuditEventID = @idfDataAuditEvent,
			@AuditUserName = @AuditUserName

	
----------------------------------------------------------------------------------------------------------------
-- Superseded disease report samples that go with survivor disease report
        -- data audit
		DECLARE @SampleIDsTemp TABLE
        (
            SampleID BIGINT NOT NULL
        );
        INSERT INTO @SampleIDsTemp
        SELECT idfMaterial
        FROM dbo.tlbMaterial
		WHERE idfVetCase = @SupersededVeterinaryDiseaseReportID
		AND idfMaterial IN (SELECT SampleID FROM @SamplesTemp)
        -- End data audit

		UPDATE dbo.tlbMaterial
		SET idfVetCase = @SurvivorVeterinaryDiseaseReportID
		WHERE idfVetCase = @SupersededVeterinaryDiseaseReportID
		AND idfMaterial IN (SELECT SampleID FROM @SamplesTemp)

        -- data audit
        WHILE EXISTS (SELECT * FROM @SampleIDsTemp)
        BEGIN

            SELECT TOP 1
                @SampleID = SampleID
            FROM @SampleIDsTemp;
            BEGIN
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, idfObjectTable, idfColumn, 
					idfObject, idfObjectDetail, 
					strOldValue, strNewValue)
				select @idfDataAuditEvent,@idfObjectTable_tlbMaterial, 12665580000000,
					@SampleID,null,
					@SupersededVeterinaryDiseaseReportID,@SurvivorVeterinaryDiseaseReportID

            END

            DELETE FROM @SampleIDsTemp
            WHERE SampleID = @SampleID;
        END

        -- End data audit

----------------------------------------------------------------------------------------------------------------
-- remove tests associated with samples that aren't associated with survivor disease report
		UPDATE dbo.tlbTesting
		SET intRowStatus = 1
		WHERE idfMaterial IN (SELECT 
								idfMaterial 
							  FROM dbo.tlbMaterial 
							  WHERE (idfVetCase = @SurvivorVeterinaryDiseaseReportID OR idfVetCase = @SupersededVeterinaryDiseaseReportID) 
							  AND idfMaterial NOT IN (SELECT SampleID FROM @SamplesTemp))

        -- End data audit
		DECLARE @TestToRemoveSampleIDsTemp TABLE
        (
            SampleID BIGINT NOT NULL,
            TestID BIGINT NOT NULL
        );
        INSERT INTO @TestToRemoveSampleIDsTemp
        SELECT idfMaterial, idfTesting 
	    FROM dbo.tlbTesting
		WHERE idfMaterial IN (SELECT 
								idfMaterial 
							  FROM dbo.tlbMaterial 
							  WHERE (idfVetCase = @SurvivorVeterinaryDiseaseReportID OR idfVetCase = @SupersededVeterinaryDiseaseReportID) 
							  AND idfMaterial NOT IN (SELECT SampleID FROM @SamplesTemp))

        WHILE EXISTS (SELECT * FROM @TestToRemoveSampleIDsTemp)
        BEGIN
            SELECT TOP 1
                @SampleID = SampleID,
                @TestID = TestID
            FROM @TestToRemoveSampleIDsTemp;
            BEGIN
				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
					SELECT @idfDataAuditEvent, @idfObjectTable_tlbTesting, @TestID
            END

            DELETE FROM @TestToRemoveSampleIDsTemp
            WHERE TestID = @TestID;
        END
        -- End data audit

----------------------------------------------------------------------------------------------------------------
-- remove test interpretations associated with samples that aren't associated with survivor disease report
		UPDATE dbo.tlbTestValidation
		SET intRowStatus = 1
		WHERE idfTesting IN (SELECT 
								idfTesting 
							 FROM dbo.tlbTesting 
							 WHERE idfMaterial IN
							 (SELECT idfMaterial
							  FROM dbo.tlbMaterial 
							  WHERE (idfVetCase = @SurvivorVeterinaryDiseaseReportID OR idfVetCase = @SupersededVeterinaryDiseaseReportID) 
							  AND idfMaterial NOT IN (SELECT SampleID FROM @SamplesTemp)))

        -- End data audit

		DECLARE @TestValidationIDsTemp TABLE
        (
            TestValidationID BIGINT NOT NULL,
            TestID BIGINT NOT NULL
        );
        INSERT INTO @TestValidationIDsTemp
        SELECT idfTestValidation, idfTesting 
	    FROM dbo.tlbTestValidation
		WHERE idfTesting IN (SELECT 
									idfTesting 
							 FROM dbo.tlbTesting 
							 WHERE idfMaterial IN
							 (SELECT idfMaterial
							  FROM dbo.tlbMaterial 
							  WHERE (idfVetCase = @SurvivorVeterinaryDiseaseReportID OR idfVetCase = @SupersededVeterinaryDiseaseReportID) 
							  AND idfMaterial NOT IN (SELECT SampleID FROM @SamplesTemp)))

        WHILE EXISTS (SELECT * FROM @TestValidationIDsTemp)
        BEGIN
            SELECT TOP 1
                @TestValidationID = TestValidationID,
                @TestID = TestID
            FROM @TestValidationIDsTemp;
            BEGIN
				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
					SELECT @idfDataAuditEvent, @idfObjectTable_tlbTestValidation, @TestValidationID
            END

            DELETE FROM @TestValidationIDsTemp
            WHERE TestValidationID = @TestValidationID;
        END
        -- End data audit
----------------------------------------------------------------------------------------------------------------
-- remove case Logs not associated with survivor disease report
		UPDATE dbo.tlbVetCaseLog
		SET intRowStatus = 1
		WHERE idfVetCase = @SupersededVeterinaryDiseaseReportID

        -- End data audit

		DECLARE @VetCaseLogIDsTemp TABLE
        (
            VetCaseLogID BIGINT NOT NULL,
            VeterinaryDiseaseReportID BIGINT NOT NULL
        );
        INSERT INTO @VetCaseLogIDsTemp
        SELECT idfVetCaseLog, idfVetCase
	    FROM dbo.tlbVetCaseLog
	    WHERE idfVetCase = @SupersededVeterinaryDiseaseReportID

        WHILE EXISTS (SELECT * FROM @VetCaseLogIDsTemp)
        BEGIN
            SELECT TOP 1
                @VetCaseLogID = VetCaseLogID,
                @VeterinaryDiseaseReportID = VeterinaryDiseaseReportID
            FROM @VetCaseLogIDsTemp;
            BEGIN
			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
					SELECT @idfDataAuditEvent, @idfObjectTable_tlbVetCaseLog, @VetCaseLogID

            END

            DELETE FROM @VetCaseLogIDsTemp
            WHERE VetCaseLogID = @VetCaseLogID;
        END
        -- End data audit

----------------------------------------------------------------------------------------------------------------
-- remove penside tests associated with samples that aren't associated with survivor disease report
		UPDATE dbo.tlbPensideTest
		SET intRowStatus = 1
		WHERE idfMaterial IN (SELECT 
								idfMaterial 
							  FROM dbo.tlbMaterial 
							  WHERE (idfVetCase = @SurvivorVeterinaryDiseaseReportID OR idfVetCase = @SupersededVeterinaryDiseaseReportID) 
							  AND idfMaterial NOT IN (SELECT SampleID FROM @SamplesTemp))

        -- End data audit

		DECLARE @PensideTestIDsTemp TABLE
        (
            PensideTestID BIGINT NOT NULL,
            SampleID BIGINT NOT NULL
        );
        INSERT INTO @PensideTestIDsTemp
        SELECT idfPensideTest, idfMaterial
	    FROM dbo.tlbPensideTest
		WHERE idfMaterial IN (SELECT 
								idfMaterial 
							  FROM dbo.tlbMaterial 
							  WHERE (idfVetCase = @SurvivorVeterinaryDiseaseReportID OR idfVetCase = @SupersededVeterinaryDiseaseReportID) 
							  AND idfMaterial NOT IN (SELECT SampleID FROM @SamplesTemp))

        WHILE EXISTS (SELECT * FROM @PensideTestIDsTemp)
        BEGIN
            SELECT TOP 1
                @PensideTestID = PensideTestID,
                @SampleID = SampleID
            FROM @PensideTestIDsTemp;
            BEGIN
			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
					SELECT @idfDataAuditEvent, @idfObjectTable_tlbPensideTest, @PensideTestID
			-- End data audit

            END

            DELETE FROM @PensideTestIDsTemp
            WHERE PensideTestID = @PensideTestID;
        END
        -- End data audit

-- disease report samples that are no longer needed
        -- data audit
		DECLARE @NotNeededSampleIDsTemp TABLE
        (
            SampleID BIGINT NOT NULL,
            VeterinaryDiseaseReportID BIGINT NULL
        );
        INSERT INTO @NotNeededSampleIDsTemp
        SELECT idfMaterial, idfVetCase
        FROM dbo.tlbMaterial
		WHERE (idfVetCase = @SupersededVeterinaryDiseaseReportID OR idfVetCase = @SurvivorVeterinaryDiseaseReportID)
		AND idfMaterial NOT IN (SELECT SampleID FROM @SamplesTemp)	
        -- End data audit

		UPDATE dbo.tlbMaterial
		SET idfVetCase = NULL
		WHERE (idfVetCase = @SupersededVeterinaryDiseaseReportID OR idfVetCase = @SurvivorVeterinaryDiseaseReportID)
		AND idfMaterial NOT IN (SELECT SampleID FROM @SamplesTemp)		

        -- data audit
        WHILE EXISTS (SELECT * FROM @NotNeededSampleIDsTemp)
        BEGIN
            SELECT TOP 1
                @SampleID = SampleID,
                @VeterinaryDiseaseReportID = VeterinaryDiseaseReportID
            FROM @NotNeededSampleIDsTemp;
            BEGIN
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, idfObjectTable, idfColumn, 
					idfObject, idfObjectDetail, 
					strOldValue, strNewValue)
				select @idfDataAuditEvent,@idfObjectTable_tlbMaterial, 12665580000000,
					@SampleID,null,
					@VeterinaryDiseaseReportID,NULL
            END

            DELETE FROM @NotNeededSampleIDsTemp
            WHERE SampleID = @SampleID;
        END

        -- End data audit

----------------------------------------------------------------------------------------------------------------
-- Superseded disease report vaccinations that go with survivor disease report
        -- data audit
		DECLARE @VaccinationIDsTemp TABLE
        (
            VaccinationID BIGINT NOT NULL,
            VeterinaryDiseaseReportID BIGINT NULL
        );
        INSERT INTO @VaccinationIDsTemp
        SELECT idfVaccination, idfVetCase
        FROM dbo.tlbVaccination 
        WHERE idfVetCase = @SupersededVeterinaryDiseaseReportID
			AND idfVaccination IN (SELECT VaccinationID FROM @VaccinationsTemp)
        -- End data audit

		UPDATE dbo.tlbVaccination
		SET idfVetCase = @SurvivorVeterinaryDiseaseReportID
		WHERE idfVetCase = @SupersededVeterinaryDiseaseReportID
		AND idfVaccination IN (SELECT VaccinationID FROM @VaccinationsTemp)

        -- data audit
        WHILE EXISTS (SELECT * FROM @VaccinationIDsTemp)
        BEGIN
            SELECT TOP 1
                @VaccinationID = VaccinationID,
                @VeterinaryDiseaseReportID = VeterinaryDiseaseReportID
            FROM @VaccinationIDsTemp ;
            BEGIN
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, idfObjectTable, idfColumn, 
					idfObject, idfObjectDetail, 
					strOldValue, strNewValue)
				select @idfDataAuditEvent,@idfObjectTable_tlbVaccination, 4577960000000,
					@VaccinationID,null,
					@VeterinaryDiseaseReportID,@SurvivorVeterinaryDiseaseReportID
            END

            DELETE FROM @VaccinationIDsTemp
            WHERE VaccinationID = @VaccinationID;
        END

        -- End data audit

-- disease report vaccinations that are no longer needed
        -- data audit
		DECLARE @NotNeededVaccinationIDsTemp TABLE
        (
            VaccinationID BIGINT NOT NULL,
            VeterinaryDiseaseReportID BIGINT NULL
        );
        INSERT INTO @NotNeededVaccinationIDsTemp
        SELECT idfVaccination, idfVetCase
        FROM dbo.tlbVaccination 
        WHERE (idfVetCase = @SupersededVeterinaryDiseaseReportID OR idfVetCase = @SurvivorVeterinaryDiseaseReportID)
		AND idfVaccination NOT IN (SELECT VaccinationID FROM @VaccinationsTemp)		
        -- End data audit

		UPDATE dbo.tlbVaccination
		SET idfVetCase = NULL
		WHERE (idfVetCase = @SupersededVeterinaryDiseaseReportID OR idfVetCase = @SurvivorVeterinaryDiseaseReportID)
		AND idfVaccination NOT IN (SELECT VaccinationID FROM @VaccinationsTemp)		

        -- data audit
        WHILE EXISTS (SELECT * FROM @NotNeededVaccinationIDsTemp)
        BEGIN
            SELECT TOP 1
                @VaccinationID = VaccinationID,
                @VeterinaryDiseaseReportID = VeterinaryDiseaseReportID
            FROM @NotNeededVaccinationIDsTemp;
            BEGIN
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, idfObjectTable, idfColumn, 
					idfObject, idfObjectDetail, 
					strOldValue, strNewValue)
				select @idfDataAuditEvent,@idfObjectTable_tlbVaccination, 4577960000000,
					@VaccinationID,null,
					@VeterinaryDiseaseReportID,NULL

            END

            DELETE FROM @NotNeededVaccinationIDsTemp
            WHERE VaccinationID = @VaccinationID;
        END

        -- End data audit
		 			 		
		IF @@TRANCOUNT > 0
			COMMIT TRANSACTION;

		SELECT @ReturnCode ReturnCode,
			@ReturnMessage ReturnMessage

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_EMPLOYEESFOREMPLOYEEGROUP_GETLIST]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_EMPLOYEESFOREMPLOYEEGROUP_GETLIST
--
-- Description: Returns a list of employees in an employee group
--
-- Author: Ricky Moss
--
-- Revision History:
-- Name					Date       Change
-- -------------------- ---------- --------------------------------------------------------------
-- Ricky Moss			12/05/2019 Initial Release
-- Doug Albanese		09/09/2020 Added Type and Description
-- Mani					12/29/2020 Added AspNetUser and tstUserTable tables to get username and 
--                                 idfuserId.
-- Mani					02/08/2021 Added intRowStatus
-- Ann Xiong			05/20/2021 Modified to return a list of employee (user) groups and 
--                                 persons.
-- Ann Xiong			06/16/2021 Added RowStatus and RowAction to the select
-- Ann Xiong			06/18/2021 Added filtered by @idfsSite when @idfEmployeeGroup IS NULL
-- Ann Xiong			07/06/2021 Changed two INNER JOIN to LEFT JOIN when @idfEmployeeGroup IS 
--                                 NULL
-- Ann Xiong			07/16/2021 Changed to exclude existing members from the Person/Employee 
--                                 Group search result
-- Ann Xiong			07/19/2021 Changed two INNER JOIN to LEFT JOIN and INNER JOIN 
--                                 tlbEmployeeGroupMember on e.idfEmployee instead of p.idfPerson, 
--                                 etc. when @user != 'Search'
-- Ann Xiong			07/21/2021 Fixed an issue when add a new user group
-- Ann Xiong			03/21/2021 Excluded a Person if this Person is already assigned to one 
--                                 User Group.
-- Stephen Long         03/17/2023 Fix on like query leading wildcards, and cleaned up formatting.
-- 
-- USP_ADMIN_EMPLOYEESFOREMPLOYEEGROUP_GETLIST -501, 'en', null
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_EMPLOYEESFOREMPLOYEEGROUP_GETLIST]
(
    @idfEmployeeGroup BIGINT,
    @langId NVARCHAR(50),
    @Type AS BIGINT = NULL, -- Person, Employee Group
    @Name AS NVARCHAR(200) = NULL,
    @Organization AS NVARCHAR(200) = NULL,
    @Description AS NVARCHAR(200) = NULL,
    @pageNo INT = 1,
    @pageSize INT = 10,
    @SortColumn NVARCHAR(30) = 'Name',
    @SortOrder NVARCHAR(4) = 'ASC',
    @user NVARCHAR(50),
    @idfsSite BIGINT = NULL
)
AS
BEGIN
    BEGIN TRY
        DECLARE @firstRec INT = (@pageNo - 1) * @pagesize,
                @lastRec INT = (@pageNo * @pageSize + 1);
        DECLARE @T TABLE
        (
            idfEmployeeGroup BIGINT,
            idfEmployee BIGINT,
            TypeID BIGINT NOT NULL,
            TypeName NVARCHAR(2000),
            Name NVARCHAR(2000),
            Organization NVARCHAR(2000),
            Description NVARCHAR(2000),
            idfUserID BIGINT NULL,
            UserName NVARCHAR(2000),
            RowStatus INT,
            RowAction CHAR(1)
        );

        IF (@user = 'Search')
        BEGIN
            INSERT INTO @T
            SELECT eg.idfEmployeeGroup,
                   e.idfEmployee,
                   e.idfsEmployeeType AS TypeID,
                   actorType.name AS TypeName,
                   (CASE
                        WHEN e.idfsEmployeeType = 10023001 THEN
                            eg.strName
                        ELSE
                            dbo.FN_GBL_ConcatFullName(p.strFamilyName, p.strFirstName, p.strSecondName)
                    END
                   ) AS Name,
                   (CASE
                        WHEN e.idfsEmployeeType = 10023001 THEN
                            NULL
                        ELSE
                            organizationName.name
                    END
                   ) AS Organization,
                   eg.strDescription AS Description,
                   a.idfUserID,
                   a.UserName,
                   e.intRowStatus AS RowStatus,
                   'R' AS RowAction
            FROM dbo.tlbEmployee e
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@langId, 19000023) AS actorType
                    ON e.idfsEmployeeType = actorType.idfsReference
                LEFT JOIN dbo.tlbPerson AS p
                    ON p.idfPerson = e.idfEmployee
                       AND p.intRowStatus = 0
                LEFT JOIN dbo.tstUserTable AS u
                    ON u.idfPerson = p.idfPerson
                       AND u.intRowStatus = 0
                LEFT JOIN dbo.AspNetUsers a
                    on a.idfUserID = u.idfUserID
                LEFT JOIN dbo.FN_GBL_Institution(@langId) organizationName
                    ON p.idfInstitution = organizationName.idfOffice
                LEFT JOIN dbo.tlbEmployeeGroup AS eg
                    ON e.idfEmployee = eg.idfEmployeeGroup
                       AND eg.intRowStatus = 0
                LEFT JOIN dbo.tstSite AS employeeSite
                    ON employeeSite.idfsSite = e.idfsSite
                       AND employeeSite.intRowStatus = 0
                LEFT JOIN dbo.tstSite AS employeeGroupSite
                    ON employeeGroupSite.idfsSite = eg.idfsSite
                       AND employeeGroupSite.intRowStatus = 0
            WHERE e.intRowStatus = 0
                  AND e.idfsSite = @idfsSite
                  AND (
                          (
                              -- Person
                              e.idfsEmployeeCategory = 10526001
                              AND e.idfsEmployeeType = 10023002
                          )
                          OR (
                                 -- Employee Group
                                 e.idfsEmployeeCategory = 10526002
                                 AND e.idfsEmployeeType = 10023001
                                 AND eg.intRowStatus = 0
                             )
                      )
                  AND (e.idfEmployee NOT IN (
                                                SELECT idfEmployee
                                                FROM dbo.tlbEmployeeGroupMember egm
                                                WHERE idfEmployeeGroup = @idfEmployeeGroup
                                                      AND intRowStatus = 0
                                            )
                      )
                  AND (e.idfEmployee NOT IN (
                                                SELECT idfEmployee
                                                FROM dbo.tlbEmployeeGroupMember egm
                                                WHERE e.idfsEmployeeType = 10023002
                                                      AND intRowStatus = 0
                                            )
                      )
                  AND (
                          (e.idfEmployee != @idfEmployeeGroup)
                          OR (@idfEmployeeGroup IS NULL)
                      )
                  AND (
                          (idfsEmployeeType = @Type)
                          OR (@Type IS NULL)
                      )
                  AND (
                          (
                              (@Type = 10023002)
                              AND ISNULL(p.strFamilyName, '') LIKE IIF(@Name IS NOT NULL,
                                                                       @Name + '%',
                                                                       ISNULL(p.strFamilyName, ''))
                          )
                          OR (
                                 (@Type = 10023001)
                                 AND ISNULL(eg.strName, '') LIKE IIF(@Name IS NOT NULL,
                                                                     @Name + '%',
                                                                     ISNULL(eg.strName, ''))
                             )
                          OR (
                                 (@Type IS NULL)
                                 AND (
                                         ISNULL(p.strFamilyName, '') LIKE IIF(@Name IS NOT NULL,
                                                                              @Name + '%',
                                                                              ISNULL(p.strFamilyName, ''))
                                         OR ISNULL(eg.strName, '') LIKE IIF(@Name IS NOT NULL,
                                                                            @Name + '%',
                                                                            ISNULL(eg.strName, ''))
                                     )
                             )
                      )
                  AND ISNULL(organizationName.name, '') LIKE IIF(@Organization IS NOT NULL,
                                                                 '%' + @Organization + '%',
                                                                 ISNULL(organizationName.name, ''))
                  AND ISNULL(eg.strDescription, '') LIKE IIF(@Description IS NOT NULL,
                                                             @Description + '%',
                                                             ISNULL(eg.strDescription, ''));
        END
        ELSE
        BEGIN
            INSERT INTO @T
            SELECT egm.idfEmployeeGroup,
                   e.idfEmployee,
                   e.idfsEmployeeType AS TypeID,
                   actorType.name AS TypeName,
                   (CASE
                        WHEN e.idfsEmployeeType = 10023001 THEN
                            eg.strName
                        ELSE
                            dbo.FN_GBL_ConcatFullName(p.strFamilyName, p.strFirstName, p.strSecondName)
                    END
                   ) AS Name,
                   (CASE
                        WHEN e.idfsEmployeeType = 10023001 THEN
                            NULL
                        ELSE
                            organization.name
                    END
                   ) AS Organization,
                   eg.strDescription AS Description,
                   a.idfUserID,
                   a.UserName,
                   e.intRowStatus AS RowStatus,
                   'R' AS RowAction
            FROM dbo.tlbEmployee e
                INNER JOIN dbo.FN_GBL_ReferenceRepair(@langId, 19000023) AS actorType
                    ON e.idfsEmployeeType = actorType.idfsReference
                LEFT JOIN dbo.tlbPerson AS p
                    ON p.idfPerson = e.idfEmployee
                       AND p.intRowStatus = 0
                LEFT JOIN dbo.tstUserTable AS u
                    ON u.idfPerson = p.idfPerson
                       AND u.intRowStatus = 0
                LEFT JOIN dbo.AspNetUsers a
                    on a.idfUserID = u.idfUserID
                LEFT JOIN dbo.FN_GBL_Institution(@langId) organization
                    ON p.idfInstitution = organization.idfOffice
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON e.idfEmployee = egm.idfEmployee
                       and egm.intRowStatus = 0
                LEFT JOIN dbo.tlbEmployeeGroup AS eg
                    ON e.idfEmployee = eg.idfEmployeeGroup
                       AND eg.intRowStatus = 0
            WHERE e.intRowStatus = 0
                  and egm.idfEmployeeGroup = @idfEmployeeGroup
                  AND e.idfsSite = @idfsSite
                  AND (
                          (
                              -- User
                              e.idfsEmployeeCategory = 10526001
                              AND e.idfsEmployeeType = 10023002
                          )
                          OR (
                                 -- User Group
                                 e.idfsEmployeeCategory = 10526002
                                 AND e.idfsEmployeeType = 10023001
                                 AND eg.intRowStatus = 0
                             )
                      )
                  AND (
                          (idfsEmployeeType = @Type)
                          OR (@Type IS NULL)
                      )
                  AND (
                          (p.strFamilyName = @Name)
                          OR (@Name IS NULL)
                      )
                  AND (
                          (p.strFirstName = @Name)
                          OR (@Name IS NULL)
                      )
                  AND (
                          (eg.strName = @Name)
                          OR (@Name IS NULL)
                      )
                  AND (
                          (organization.name = @Organization)
                          OR @Organization IS NULL
                      )
                  AND (
                          (eg.strDescription = @Description)
                          OR (@Description IS NULL)
                      );
        END;
        WITH CTEResults
        as (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @sortColumn = 'idfEmployeeGroup'
                                                        AND @SortOrder = 'asc' THEN
                                                       idfEmployeeGroup
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'idfEmployeeGroup'
                                                        AND @SortOrder = 'desc' THEN
                                                       idfEmployeeGroup
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'idfEmployee'
                                                        AND @SortOrder = 'asc' THEN
                                                       idfEmployee
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'idfEmployee'
                                                        AND @SortOrder = 'desc' THEN
                                                       idfEmployee
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'TypeID'
                                                        AND @SortOrder = 'asc' THEN
                                                       TypeID
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'TypeID'
                                                        AND @SortOrder = 'desc' THEN
                                                       TypeID
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'TypeName'
                                                        AND @SortOrder = 'asc' THEN
                                                       TypeName
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'TypeName'
                                                        AND @SortOrder = 'desc' THEN
                                                       TypeName
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'Name'
                                                        AND @SortOrder = 'asc' THEN
                                                       Name
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'Name'
                                                        AND @SortOrder = 'desc' THEN
                                                       Name
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'Organization'
                                                        AND @SortOrder = 'asc' THEN
                                                       Organization
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'Organization'
                                                        AND @SortOrder = 'desc' THEN
                                                       Organization
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'Description'
                                                        AND @SortOrder = 'asc' THEN
                                                       Description
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'Description'
                                                        AND @SortOrder = 'desc' THEN
                                                       Description
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'idfUserID'
                                                        AND @SortOrder = 'asc' THEN
                                                       idfUserID
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'idfUserID'
                                                        AND @SortOrder = 'desc' THEN
                                                       idfUserID
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'UserName'
                                                        AND @SortOrder = 'asc' THEN
                                                       UserName
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'UserName'
                                                        AND @SortOrder = 'desc' THEN
                                                       UserName
                                               END DESC
                                     ) AS ROWNUM,
                   COUNT(*) OVER () AS TotalRowCount,
                   idfEmployeeGroup,
                   idfEmployee,
                   TypeID,
                   TypeName,
                   Name,
                   Organization,
                   Description,
                   idfUserID,
                   UserName,
                   RowStatus,
                   RowAction
            FROM @T
           )
        SELECT TotalRowCount,
               idfEmployeeGroup,
               idfEmployee,
               TypeID,
               TypeName,
               Name,
               Organization,
               Description,
               idfUserID,
               UserName,
               RowStatus,
               RowAction,
               TotalPages = (TotalRowCount / @pageSize) + IIF(TotalRowCount % @pageSize > 0, 1, 0),
               CurrentPage = @pageNo
        FROM CTEResults
        WHERE RowNum > @firstRec
              AND RowNum < @lastRec;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_EVENT_GETList]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_EVENT_GETList		
--
-- Description: Gets a list of event notifications for a user as defined in SAUC55 and SAUC56.
--
-- Author: Stephen Long
-- 
-- Revision History:
-- Name                        Date       Change Detail
-- --------------------------- ---------- --------------------------------------------------------
-- Stephen Long                07/06/2022 Initial release
-- Stephen Long                07/28/2022 Added sort fields.
-- Stephen Long                08/18/2022 Fixed reference type for the event type.
-- Stephen Long                08/29/2022 Added trtEventType join and correct reference type name.
-- Stephen Long                03/20/2023 Added parenthesis to group processed indicator.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_EVENT_GETList]
(
    @LanguageId NVARCHAR(50),
    @UserId BIGINT,
    @DaysFromReadDate INT,
    @PageNo INT = 1,
    @PageSize INT = 10,
    @SortColumn NVARCHAR(100) = 'EventDate',
    @SortOrder VARCHAR(4) = 'DESC'
)
AS
BEGIN
    DECLARE @FirstRec INT = (@PageNo - 1) * @PageSize,
            @LastRec INT = (@PageNo * @PageSize + 1);

    BEGIN TRY
        WITH CTEResults
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'EventTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       eventType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EventTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       eventType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EventDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       e.datEventDatatime
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EventDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       e.datEventDatatime
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSSiteID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       s.strSiteID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSSiteID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       s.strSiteID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel2Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel2Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel3Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel3Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel3Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel3Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       disease.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       disease.name
                                               END DESC
                                     ) AS ROWNUM,
                   e.idfEventID AS EventId,
                   e.idfsEventTypeID AS EventTypeId,
                   CASE
                       WHEN e.strInformationString IS NULL THEN
                           eventType.name
                       ELSE
                           e.strInformationString
                   END AS EventTypeName,
                   notificationType.name AS NotificationTypeName,
                   e.idfObjectID AS ObjectId,
                   disease.name AS DiseaseName,
                   e.idfsSite AS SiteId,
                   s.strSiteID AS EIDSSSiteID,
                   lh.AdminLevel2Name AS AdministrativeLevel2Name,
                   lh.AdminLevel3Name AS AdministrativeLevel3Name,
                   e.intProcessed AS ProcessedIndicator,
                   e.datEventDatatime AS EventDate,
                   COUNT(*) OVER () AS TotalRowCount
            FROM dbo.tstEvent e
                INNER JOIN dbo.trtEventType et
                    ON et.idfsEventTypeID = e.idfsEventTypeID
                INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageId, 19000155) notificationType
                    ON notificationType.idfsReference = et.idfsEventSubscription
                INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageId, 19000025) eventType
                    ON eventType.idfsReference = e.idfsEventTypeID
                LEFT JOIN dbo.tstSite s
                    ON s.idfsSite = e.idfsSite
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = e.idfsLocation
                LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageId) lh
                    ON lh.idfsLocation = g.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                    ON disease.idfsReference = e.idfsDiagnosis
            WHERE e.idfUserID = @UserId
                  AND (
                          (e.intProcessed = 0)
                          OR (
                                 e.intProcessed = 1
                                 AND GETDATE() <= DATEADD(DAY, @DaysFromReadDate, e.datEventDatatime)
                             )
                      )
           )
        SELECT EventId,
               EventTypeId,
               EventTypeName,
               ObjectId,
               DiseaseName,
               SiteId,
               EIDSSSiteID,
               AdministrativeLevel2Name,
               AdministrativeLevel3Name,
               ProcessedIndicator,
               EventDate,
               TotalRowCount,
               TotalPages = (TotalRowCount / @PageSize) + IIF(TotalRowCount % @PageSize > 0, 1, 0),
               CurrentPage = @pageNo
        FROM CTEResults
        WHERE RowNum > @FirstRec
              AND RowNum < @LastRec;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH

END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_EVENT_SET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_EVENT_SET
--
-- Description:	Inserts or updates the event table for SAUC55 and SAUC56.
-- 
-- Field Notes:
--
-- Object - ID of record such as human disease report
-- LoginSite - ID of organization login site where initial event that raise notification was 
-- created.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     07/06/2022 Initial release.
-- Stephen Long     07/11/2022 Added third party site alert events.
-- Stephen Long     07/12/2022 Added vector surveillance session third party site alerts.
-- Stephen Long     09/15/2022 Added note parameter.  Temporarily removed!
-- Stephen Long     10/05/2022 Fix for event type ID when third party site event is already passed 
--                             in, and where from site ID to login site ID on event users.
-- Stephen Long     03/13/2023 Changed site ID where criteria from the user table to the employee 
--                             table as user table's site ID was no longer getting updated.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_EVENT_SET]
(
    @EventId BIGINT,
    @EventTypeId BIGINT,
    @UserId BIGINT,
    @ObjectId BIGINT = NULL,
    @DiseaseId BIGINT = NULL,
    @SiteId BIGINT = NULL,
    @InformationString NVARCHAR(MAX) = NULL,
    --@Note NVARCHAR(MAX) = NULL, 
    @LoginSiteId BIGINT = NULL,
    @LocationId BIGINT = NULL,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
                @NeighboringSiteId BIGINT = NULL,
                @EventUserId BIGINT = NULL,
                @EventSiteId BIGINT = NULL;
        DECLARE @EventUsers TABLE
        (
            UserId BIGINT NOT NULL,
            SiteId BIGINT NOT NULL
        );
        DECLARE @NeighboringSites TABLE
        (
            AccessRuleId BIGINT,
            SiteId BIGINT
        );
        DECLARE @SiteAccessRuleGrantee TABLE (AccessRuleId BIGINT);

        -- Get all users of the target site that have subscribed to the notification type.
        INSERT INTO @EventUsers
        SELECT u.idfUserID,
               e.idfsSite
        FROM dbo.tstUserTable u
            INNER JOIN dbo.EventSubscription es
                ON es.idfUserID = u.idfUserID
                   AND es.EventNameID = @EventTypeId
            INNER JOIN dbo.tlbEmployee e 
                   ON e.idfEmployee = u.idfPerson
        WHERE e.idfsSite = @LoginSiteId
              AND u.intRowStatus = 0
              AND es.ReceiveAlertFlag = 1;

        -- Get all users of the target site's neighboring sites based on filtration rules.
        -- Logged in user site ID is a grantor, then get list of grantee sites.
        INSERT INTO @NeighboringSites
        SELECT ar.AccessRuleID,
               ara.ActorSiteID
        FROM dbo.AccessRule ar
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.AccessRuleID = ar.AccessRuleID
                   AND ara.intRowStatus = 0
        WHERE ar.intRowStatus = 0
              AND ar.BorderingAreaRuleIndicator = 1
              AND ar.GrantingActorSiteID = @LoginSiteId
              AND ara.ActorSiteID IS NOT NULL
              AND ara.ActorSiteID <> @LoginSiteId
        GROUP BY ara.ActorSiteID,
                 ar.AccessRuleID;

        -- Logged in user site ID access rules as a grantee.
        INSERT INTO @SiteAccessRuleGrantee
        SELECT ara.AccessRuleID
        FROM dbo.AccessRuleActor ara
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE ara.ActorSiteID = @LoginSiteId
              AND ara.intRowStatus = 0
              AND ar.BorderingAreaRuleIndicator = 1;

        -- Select all grantee sites that the site is also a grantee of.
        INSERT INTO @NeighboringSites
        SELECT sg.AccessRuleID,
               ara.ActorSiteID
        FROM @SiteAccessRuleGrantee sg
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.AccessRuleID = sg.AccessRuleID
                   AND ara.intRowStatus = 0
        WHERE ara.ActorSiteID <> @LoginSiteId
              AND ara.ActorSiteID IS NOT NULL
        GROUP BY ara.ActorSiteID,
                 sg.AccessRuleID;

        WHILE EXISTS (SELECT * FROM @NeighboringSites)
        BEGIN
            SELECT TOP 1
                @NeighboringSiteId = SiteId
            FROM @NeighboringSites;

            -- Get all users of the neighboring site.
            INSERT INTO @EventUsers
            SELECT u.idfUserID,
                   e.idfsSite
            FROM dbo.tstUserTable u
                INNER JOIN dbo.EventSubscription es
                    ON es.idfUserID = u.idfUserID
                       AND es.EventNameID = @EventTypeId
                INNER JOIN dbo.tlbEmployee e 
                   ON e.idfEmployee = u.idfPerson
            WHERE e.idfsSite = @NeighboringSiteId
                  AND u.intRowStatus = 0
                  AND es.ReceiveAlertFlag = 1;

            DELETE FROM @NeighboringSites
            WHERE SiteID = @NeighboringSiteId;
        END

        WHILE EXISTS (SELECT * FROM @EventUsers)
        BEGIN
            SELECT TOP 1
                @EventUserId = UserId,
                @EventSiteId = SiteId
            FROM @EventUsers;

            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tstEvent', @EventId OUTPUT;

            -- Change to the third party site alert/event type id.
            IF @EventSiteId <> @SiteId
            BEGIN
                SET @EventTypeId = CASE WHEN @EventTypeId = 10025503 THEN
                    10025504
                WHEN @EventTypeId = 10025501 THEN
                    10025502
                WHEN @EventTypeId = 10025505 THEN
                    10025506
                WHEN @EventTypeId = 10025507 THEN
                    10025508
                WHEN @EventTypeId = 10025509 THEN
                    10025512
                WHEN @EventTypeId = 10025510 THEN
                    10025511
                WHEN @EventTypeId = 10025037 THEN
                    10025038
                WHEN @EventTypeId = 10025041 THEN
                    10025042
                WHEN @EventTypeId = 10025043 THEN
                    10025044
                WHEN @EventTypeId = 10025045 THEN
                    10025046
                WHEN @EventTypeId = 10025047 THEN
                    10025048
                WHEN @EventTypeId = 10025077 THEN
                    10025078
                WHEN @EventTypeId = 10025079 THEN
                    10025080
                WHEN @EventTypeId = 10025081 THEN
                    10025082
                WHEN @EventTypeId = 10025099 THEN
                    10025100
                WHEN @EventTypeId = 10025097 THEN
                    10025098
                WHEN @EventTypeId = 10025129 THEN
                    10025130
                WHEN @EventTypeId = 10025101 THEN
                    10025102
                WHEN @EventTypeId = 10025103 THEN
                    10025104
                WHEN @EventTypeId = 10025105 THEN
                    10025106
                WHEN @EventTypeId = 10025107 THEN
                    10025108
                WHEN @EventTypeId = 10025085 THEN
                    10025086
                WHEN @EventTypeId = 10025087 THEN
                    10025088
                WHEN @EventTypeId = 10025089 THEN
                    10025090
                WHEN @EventTypeId = 10025091 THEN
                    10025092
                WHEN @EventTypeId = 10025093 THEN
                    10025094
                WHEN @EventTypeId = 10025095 THEN
                    10025096
                WHEN @EventTypeId = 10025067 THEN
                    10025068
                WHEN @EventTypeId = 10025071 THEN
                    10025072
                WHEN @EventTypeId = 10025073 THEN
                    10025074
                WHEN @EventTypeId = 10025075 THEN
                    10025076
                WHEN @EventTypeId = 10025513 THEN
                    10025514
                WHEN @EventTypeId = 10025517 THEN
                    10025518
                WHEN @EventTypeId = 10025519 THEN
                    10025520
                WHEN @EventTypeId = 10025525 THEN
                    10025526
                WHEN @EventTypeId = 10025049 THEN
                    10025050
                WHEN @EventTypeId = 10025051 THEN
                    10025052
                WHEN @EventTypeId = 10025053 THEN
                    10025054
                WHEN @EventTypeId = 10025055 THEN
                    10025056
                WHEN @EventTypeId = 10025057 THEN
                    10025058
                WHEN @EventTypeId = 10025059 THEN
                    10025060
                WHEN @EventTypeId = 10025061 THEN
                    10025062
                WHEN @EventTypeId = 10025065 THEN
                    10025066
                WHEN @EventTypeId = 10025069 THEN
                    10025070
                WHEN @EventTypeId = 10025527 THEN
                    10025528
                WHEN @EventTypeId = 10025529 THEN
                    10025530
                WHEN @EventTypeId = 10025537 THEN
                    10025538
                WHEN @EventTypeId = 10025539 THEN
                    10025540
                WHEN @EventTypeId = 10025563 THEN
                    10025564
                ELSE
                    @EventTypeId
                END
            END

            INSERT INTO dbo.tstEvent
            (
                idfEventID,
                idfsEventTypeID,
                idfObjectID,
                strInformationString,
                --strNote, 
                datEventDatatime,
                idfUserID,
                intProcessed,
                idfsSite,
                idfsDiagnosis,
                idfsLoginSite,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateDTM,
                AuditCreateUser,
                idfsLocation
            )
            VALUES
            (@EventId,
             @EventTypeId,
             @ObjectId,
             @InformationString,
             --@Note, 
             GETDATE(),
             @EventUserId,
             0  ,
             @EventSiteId,
             @DiseaseId,
             @LoginSiteId,
             10519001,
             '[{"idfEventID":' + CAST(@EventId AS NVARCHAR(300)) + '}]',
             GETDATE(),
             @AuditUserName,
             @LocationId
            );

            DELETE FROM @EventUsers
            WHERE UserId = @EventUserId
                  AND SiteId = @EventSiteId;
        END;
    END TRY
    BEGIN CATCH
        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        THROW;
    END CATCH;

    SELECT @ReturnCode ReturnCode,
           @ReturnMessage ReturnMessage;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_TESTTOTESTRESULTMATRIX_SET]...';


GO
-- ================================================================================================
-- Name: USP_CONF_TESTTOTESTRESULTMATRIX_SET
--
-- Description:	Creates a test to test result matrix
--                      
-- Author: Ricky Moss
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		03/11/2018 Initial release.
-- Stephen Long     07/13/2022 Added site alert logic.
--
-- exec USP_CONF_TESTTOTESTRESULTMATRIX_SET 803960000000, '807830000000, 807990000000, 808040000000', 0
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_TESTTOTESTRESULTMATRIX_SET]
(
    @idfsTestResultRelation BIGINT,
    @idfsTestName BIGINT,
    @idfsTestResult BIGINT,
    @blnIndicative BIT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
        @ReturnCode BIGINT = 0,
        @EventId BIGINT = -1,
        @EventSiteId BIGINT = @SiteId,
        @EventUserId BIGINT = @UserId,
        @EventDiseaseId BIGINT = NULL,
        @EventLocationId BIGINT = @LocationId,
        @EventInformationString NVARCHAR(MAX) = NULL,
        @EventLoginSiteId BIGINT = @SiteId;
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage NVARCHAR(MAX)
);

--Data Audit--
declare @idfUserId BIGINT =NULL;
declare @idfSiteId BIGINT = NULL;
declare @idfsDataAuditEventType bigint =NULL;
declare @idfsObjectType bigint = 10017055;
declare @idfObject bigint = NULL;
declare @idfObjectTable_tlbTestMatrix bigint = 76020000000;
declare @idfDataAuditEvent bigint= NULL; 

DECLARE @tlbTestMatrix_BeforeEdit TABLE
(
	blnIndicative BIT,
	idfsTestResult BIGINT,
	idfsTestName BIGINT,
	intRowStatus INT
)
DECLARE @tlbTestMatrix_AfterEdit TABLE
(
	blnIndicative BIT,
	idfsTestResult BIGINT,
	idfsTestName BIGINT,
	intRowStatus INT
)

-- Get and Set UserId and SiteId
select @idfUserId =userInfo.UserId, @idfSiteId=UserInfo.SiteId from dbo.FN_UserSiteInformation(@AuditUserName) userInfo
--Data Audit--

BEGIN
    BEGIN TRY 
        IF @idfsTestResultRelation = 19000097
        BEGIN
            IF NOT EXISTS
            (
                SELECT idfsTestResult
                FROM dbo.trtTestTypeToTestResult
                WHERE idfsTestResult = @idfsTestResult
                      AND idfsTestName = @idfsTestName
            )
            BEGIN
                INSERT INTO dbo.trtTestTypeToTestResult
                (
                    idfsTestName,
                    idfsTestResult,
                    blnIndicative,
                    intRowStatus,
                    AuditCreateDTM,
                    AuditCreateUser
                )
                VALUES
                (@idfsTestName, @idfsTestResult, @blnIndicative, 0, GETDATE(), @AuditUserName);
				
				--Data Audit--
				-- tauDataAuditEvent Event Type - Create 
				set @idfObject = @idfsTestName;
				set @idfObjectTable_tlbTestMatrix =76020000000;
				set @idfsDataAuditEventType =10016001;
						-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbTestMatrix, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
					values ( @idfDataAuditEvent, @idfObjectTable_tlbTestMatrix, @idfObject)
				--Data Audit--
            END
            ELSE IF EXISTS
            (
                SELECT idfsTestResult
                FROM dbo.trtTestTypeToTestResult
                WHERE idfsTestResult = @idfsTestResult
                      AND idfsTestName = @idfsTestName
            )
            BEGIN

				insert into @tlbTestMatrix_BeforeEdit (idfsTestName, idfsTestResult, blnIndicative, intRowStatus)
				select idfsTestName, idfsTestResult, blnIndicative, intRowStatus 
					from trtTestTypeToTestResult WHERE idfsTestResult = @idfsTestResult AND idfsTestName = @idfsTestName

                UPDATE dbo.trtTestTypeToTestResult
                SET intRowStatus = 0,
                    blnIndicative = @blnIndicative,
                    AuditUpdateDTM = GETDATE(), 
                    AuditUpdateUser = @AuditUserName
                WHERE idfsTestResult = @idfsTestResult
                      AND idfsTestName = @idfsTestName;
				insert into @tlbTestMatrix_AfterEdit (idfsTestName, idfsTestResult, blnIndicative, intRowStatus)
				select idfsTestName, idfsTestResult, blnIndicative, intRowStatus 
					from trtTestTypeToTestResult WHERE idfsTestResult = @idfsTestResult AND idfsTestName = @idfsTestName

				--DataAudit-- 
				IF EXISTS 
				(
					select *
					from @tlbTestMatrix_BeforeEdit a  inner join @tlbTestMatrix_AfterEdit b on a.idfsTestResult = b.idfsTestResult and a.idfsTestName = b.idfsTestName 
					where (ISNULL(a.blnIndicative,'') <> ISNULL(b.blnIndicative,'')) OR (ISNULL(a.intRowStatus,'') <> ISNULL(b.intRowStatus,''))
				)
				BEGIN
					--  tauDataAuditEvent  Event Type- Edit 
					set @idfsDataAuditEventType = 10016003;
					Set @idfObject = @idfsTestName
					-- insert record into tauDataAuditEvent - 
					INSERT INTO @SuppressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbTestMatrix, @idfDataAuditEvent OUTPUT

					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, idfObjectTable, idfColumn, 
						idfObject, idfObjectDetail, 
						strOldValue, strNewValue)
					select @idfDataAuditEvent,@idfObjectTable_tlbTestMatrix, 4578170000000,
						@idfObject,null,
						a.blnIndicative,b.blnIndicative 
					from @tlbTestMatrix_BeforeEdit a  inner join @tlbTestMatrix_AfterEdit b on a.idfsTestResult = b.idfsTestResult and a.idfsTestName = b.idfsTestName 
					where (ISNULL(a.blnIndicative,'') <> ISNULL(b.blnIndicative,'')) 
				END

				set @ReturnCode = 6
				set @ReturnMessage = 'EXISTS'
            END
        END
        ELSE
        BEGIN
            --creates new test for disease
            IF NOT EXISTS
            (
                SELECT idfsPensideTestResult
                FROM dbo.trtPensideTestTypeToTestResult
                WHERE idfsPensideTestResult = @idfsTestResult
                      AND idfsPensideTestName = @idfsTestName
            )
            BEGIN
                INSERT INTO dbo.trtPensideTestTypeToTestResult
                (
                    idfsPensideTestName,
                    idfsPensideTestResult,
                    blnIndicative,
                    intRowStatus,
                    AuditCreateDTM,
                    AuditCreateUser
                )
                VALUES
                (@idfsTestName, @idfsTestResult, @blnIndicative, 0, GETDATE(), @AuditUserName);

				--Data Audit--
				-- tauDataAuditEvent Event Type - Create 
				set @idfObject = @idfsTestName;
				set @idfObjectTable_tlbTestMatrix =75910000000;
				set @idfsDataAuditEventType =10016001;
						-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbTestMatrix, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
					values ( @idfDataAuditEvent, @idfObjectTable_tlbTestMatrix, @idfObject)
				--Data Audit--
            END
            ELSE IF EXISTS
            (
                SELECT idfsTestResult
                FROM dbo.trtTestTypeToTestResult
                WHERE idfsTestResult = @idfsTestResult
                      AND idfsTestName = @idfsTestName
            )
            BEGIN
			
				insert into @tlbTestMatrix_BeforeEdit (idfsTestName, idfsTestResult, blnIndicative, intRowStatus)
				select idfsTestName, idfsTestResult, blnIndicative, intRowStatus 
					from trtTestTypeToTestResult WHERE idfsTestResult = @idfsTestResult AND idfsTestName = @idfsTestName
		 
                UPDATE dbo.trtTestTypeToTestResult
                SET intRowStatus = 0,
                    blnIndicative = @blnIndicative, 
                    AuditUpdateDTM = GETDATE(), 
                    AuditUpdateUser = @AuditUserName 
                WHERE idfsTestResult = @idfsTestResult
                      AND idfsTestName = @idfsTestName;
				set @ReturnCode = 6
				set @ReturnMessage = 'EXISTS'
			 
				insert into @tlbTestMatrix_AfterEdit (idfsTestName, idfsTestResult, blnIndicative, intRowStatus)
				select idfsTestName, idfsTestResult, blnIndicative, intRowStatus 
					from trtTestTypeToTestResult WHERE idfsTestResult = @idfsTestResult AND idfsTestName = @idfsTestName

				--DataAudit-- 
				IF EXISTS 
				(
					select *
					from @tlbTestMatrix_BeforeEdit a  inner join @tlbTestMatrix_AfterEdit b on a.idfsTestResult = b.idfsTestResult and a.idfsTestName = b.idfsTestName 
					where (ISNULL(a.blnIndicative,'') <> ISNULL(b.blnIndicative,'')) OR (ISNULL(a.intRowStatus,'') <> ISNULL(b.intRowStatus,''))
				)
				BEGIN
					--  tauDataAuditEvent  Event Type- Edit 
					set @idfsDataAuditEventType = 10016003;
					Set @idfObject = @idfsTestName
					-- insert record into tauDataAuditEvent - 
					INSERT INTO @SuppressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbTestMatrix, @idfDataAuditEvent OUTPUT

					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, idfObjectTable, idfColumn, 
						idfObject, idfObjectDetail, 
						strOldValue, strNewValue)
					select @idfDataAuditEvent,@idfObjectTable_tlbTestMatrix, 4578170000000,
						@idfObject,null,
						a.blnIndicative,b.blnIndicative 
					from @tlbTestMatrix_BeforeEdit a  inner join @tlbTestMatrix_AfterEdit b on a.idfsTestResult = b.idfsTestResult and a.idfsTestName = b.idfsTestName 
					where (ISNULL(a.blnIndicative,'') <> ISNULL(b.blnIndicative,'')) 
				END
            END
        END

        INSERT INTO @SuppressSelect 
        EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                        @EventTypeId,
                                        @EventUserId,
                                        @idfsTestName,
                                        @EventDiseaseId,
                                        @EventSiteId,
                                        @EventInformationString,
                                        @EventLoginSiteId,
                                        @EventLocationId,
                                        @AuditUserName;

        SELECT @ReturnCode AS 'ReturnCode',
               @ReturnMessage AS 'ReturnMessage',
               @idfsTestName AS 'idfsTestName';
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_HAS_MONITORING_SESSION_SET]...';


GO
-- ================================================================================================
-- Name: USP_HAS_MONITORING_SESSION_SET
--
-- Description: Insert/update for monitoring session records for the human module.
--          
-- Revision History:
-- Name				Date	   Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long		07/06/2019 Initial release.
-- Ann Xiong		01/17/2020 Fixed an issue in Persons & Samples grid where saving a new row 
--                             will change the Person ID of several previous rows to be the same 
--                             as the newly added row.
-- Stephen Long		03/09/2020 Added current site ID to the update sample set call.
-- Ann Xiong		03/20/2020 Added the following information from the AS Session to the new 
--								Disease Report:
--								Disease Report field “Report Status” – “In progress”	
--								Disease Report field “Case classification” field - <blank>
--								Disease Report field “Report Type” – “Active”
--								Disease Report field “Entered by Name” with the user name who 
--                              created this Disease Report
--								Disease Report field “Date Entered” with the current date when 
--                              this Disease Report was created
-- Ann Xiong		03/30/2020 Update SET idfHumanCase in tlbMaterial and set 
--							   idfsYNSpecimenCollected and idfsYNTestsConducted.
-- Ann Xiong		04/14/2020 Changed to use "SSH" prefix instead of SSV for Human Active 
--							   Surveillance Session.
-- Stephen Long		12/20/2020 Updated USSP_GBL_TEST_SET call with four new parameters.
-- Doug Albanese	01/12/2022 Refactored, due to table change for storing multiple disease 
--                             against a session.  Added supress to an EXECUTE statement that was 
--                             preventing EF from generating a return model
-- Doug Albanese	01/13/2022 Refactored to use new location hierarchy
-- Doug Albanese	01/14/2022 Refactoring json conversion tables to not require PKs, until 
--                             automatically generated
-- Doug Albanese	01/18/2022 Clean up of "collections" to include required fields for foreign 
--                             records
-- Doug Albanese	01/24/2022 Final refactoring for successful save from the app.
-- Doug Albanese	02/02/2022 Minor refactoring to save SampleId to Tests collection
-- Doug Albanese	03/25/2022 Updated to make use of "RowAction" on the disease combination
-- Doug Albanese	05/23/2022 Removed idfsCurrentSite, to prevent clashing with lab.
-- Doug Albanese	06/16/2022 Changed out the value used for NonLaboratoryTestIndicator from 0 to 
--                             1
-- Doug Albanese	06/16/2022 Added "Notifications" for processing, and User ID for auditing 
--                             purposes
-- Stephen Long     07/06/2022 Updates for site alerts to call new stored procedure.
-- Doug Albanese	07/19/2022 Corrected the enumeration of multiple site alerts
-- Doug Albanese	08/01/2022 Added a replacement feature of the word "New", to have the EIDSS 
--                             Session ID, in place.
-- Doug Albanese	08/26/2022 Adjusted supression, because of changes made to USSP_GBL_SAMPLE_SET
-- Doug Albanese    10/17/2022 Added a condition to pick up any idfHumancase ids that belong to an 
--                             existing Test to maintain the "Connected" status.
-- Stephen Long     10/18/2022 Added samples to diseases parameter and logic.
-- Leo Tracchia		12/05/2022 Added statements for Audit logging 
-- Leo Tracchia		12/06/2022 Added fix for auditing logic
-- Stephen Long     12/09/2022 Added EIDSSObjectID parameter to to samples, tests and test 
--                             interpretations calls.
-- Doug Albanese    12/23/2022 Corrected the overwriting of @idfNewHuman with @HumanID for new 
--                             Sample Inserts
-- Stephen Long     03/20/2023 Changed to data audit call with strMainObject.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HAS_MONITORING_SESSION_SET]
(
    @LanguageID NVARCHAR(50),
    @MonitoringSessionID BIGINT = NULL,
    @MonitoringSessionStatusTypeID BIGINT = NULL,
    @idfsLocation BIGINT = NULL,
    @EnteredByPersonID BIGINT = NULL,
    @CampaignID BIGINT = NULL,
    @SiteID BIGINT,
    @EIDSSSessionID NVARCHAR(50) = NULL,
    @StartDate DATETIME = NULL,
    @EndDate DATETIME = NULL,
    @SessionCategoryTypeID BIGINT = NULL,
    @RowStatus INT,
    @CreateDiseaseReportHumanID BIGINT = NULL,
    @AuditUserName NVARCHAR(200),
    @DiseaseCombinations NVARCHAR(MAX),
    @SampleTypeCombinations NVARCHAR(MAX),
    @Samples NVARCHAR(MAX),
    @SamplesToDiseases NVARCHAR(MAX) = NULL,
    @Tests NVARCHAR(MAX),
    @Actions NVARCHAR(MAX),
    @Events NVARCHAR(MAX) = NULL,
    @UserId BIGINT
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @NewHumanID BIGINT = NULL,
                @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
                @EventId BIGINT,
                @EventTypeId BIGINT = NULL,
                @EventSiteId BIGINT = NULL,
                @EventObjectId BIGINT = NULL,
                @EventUserId BIGINT = NULL,
                @EventDiseaseId BIGINT = NULL,
                @EventLocationId BIGINT = NULL,
                @EventInformationString NVARCHAR(MAX) = NULL,
                @EventLoginSiteId BIGINT = NULL;

        /* Get an 'On-The-Fly' translation for the word "New". To be used, to replace the "New" indicator on Samples / Tests.*/
        DECLARE @Translated_New NVARCHAR(50);

        DECLARE @ExecReturn TABLE
        (
            strDefault NVARCHAR(200),
            name NVARCHAR(200),
            LongName NVARCHAR(200)
        );

        INSERT INTO @ExecReturn
        EXEC dbo.USP_GBL_BaseReferenceTranslation_Get @LanguageId = 'en-us',
                                                      @idfsBaseReference = 10140000;

        SELECT @Translated_New = [name]
        FROM @ExecReturn;
        /*End 'On-The-Fly' translation.*/

        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage VARCHAR(200)
        );

        DECLARE @CampaignName NVARCHAR(50);
        DECLARE @CampaignTypeID BIGINT = NULL;
        DECLARE @CampaignStartDate DATETIME = NULL;
        DECLARE @CampaignEndDate DATETIME = NULL;

        IF @CampaignID IS NOT NULL
        BEGIN
            SELECT @CampaignTypeID = idfsCampaignType,
                   @CampaignName = strCampaignname,
                   @CampaignStartDate = datCampaignDateStart,
                   @CampaignEndDate = datCampaignDateEnd
            FROM dbo.tlbCampaign
            WHERE idfCampaign = @CampaignID;
        END

        DECLARE @RowID BIGINT = NULL,
                @RowAction NCHAR = NULL,
                @MonitoringSessionToDiseaseID BIGINT,
                @MonitoringSessionToSampleTypeID BIGINT,
                @OrderNumber INT,
                @SampleID BIGINT,
                @SampleTypeID BIGINT = NULL,
                @HumanID BIGINT,
                @HumanMasterID BIGINT = NULL,
                @CollectedByPersonID BIGINT = NULL,
                @CollectedByOrganizationID BIGINT = NULL,
                @CollectionDate DATETIME = NULL,
                @SentDate DATETIME = NULL,
                @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
                @SampleStatusTypeID BIGINT = NULL,
                @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
                @SentToOrganizationID BIGINT = NULL,
                @ReadOnlyIndicator BIT = NULL,
                @AccessionDate DATETIME = NULL,
                @AccessionConditionTypeID BIGINT = NULL,
                @AccessionComment NVARCHAR(200) = NULL,
                @AccessionByPersonID BIGINT = NULL,
                --,@CurrentSiteID BIGINT = NULL
                @TestID BIGINT,
                @TestNameTypeID BIGINT = NULL,
                @TestCategoryTypeID BIGINT = NULL,
                @TestResultTypeID BIGINT = NULL,
                @TestStatusTypeID BIGINT,
                @BatchTestID BIGINT = NULL,
                @TestNumber INT = NULL,
                @StartedDate DATETIME2 = NULL,
                @ResultDate DATETIME2 = NULL,
                @TestedByPersonID BIGINT = NULL,
                @TestedByOrganizationID BIGINT = NULL,
                @ResultEnteredByOrganizationID BIGINT = NULL,
                @ResultEnteredByPersonID BIGINT = NULL,
                @ValidatedByOrganizationID BIGINT = NULL,
                @ValidatedByPersonID BIGINT = NULL,
                @NonLaboratoryTestIndicator BIT,
                @ExternalTestIndicator BIT = NULL,
                @PerformedByOrganizationID BIGINT = NULL,
                @ReceivedDate DATETIME2 = NULL,
                @ContactPersonName NVARCHAR(200) = NULL,
                @TestMonitoringSessionID BIGINT = NULL,
                @TestInterpretationID BIGINT,
                @InterpretedStatusTypeID BIGINT = NULL,
                @InterpretedByOrganizationID BIGINT = NULL,
                @InterpretedByPersonID BIGINT = NULL,
                @TestingInterpretations BIGINT,
                @ValidatedStatusIndicator BIT = NULL,
                @ReportSessionCreatedIndicator BIT = NULL,
                @ValidatedComment NVARCHAR(200) = NULL,
                @InterpretedComment NVARCHAR(200) = NULL,
                @ValidatedDate DATETIME = NULL,
                @InterpretedDate DATETIME = NULL,
                @MonitoringSessionActionID BIGINT,
                @ActionTypeID BIGINT,
                @ActionStatusTypeID BIGINT,
                @ActionDate DATETIME = NULL,
                @Comments NVARCHAR(500) = NULL,
                @DiseaseID BIGINT,
                @idfMonitoringSessionToDiagnosis BIGINT,
                @DateEntered DATETIME = GETDATE(),
                @idfHumanCase_Test BIGINT = NULL,
                @MonitoringSessionToMaterialID BIGINT = NULL;

        DECLARE @DiseaseCombinationsTemp TABLE
        (
            MonitoringSessionToDiseaseID BIGINT NULL,
            DiseaseID BIGINT NOT NULL,
            OrderNumber INT NOT NULL,
            SampleTypeID BIGINT NULL,
            Comments NVARCHAR(MAX),
            RowStatus INT NOT NULL,
            RowAction CHAR(1)
        );

        DECLARE @SampleTypeCombinationsTemp TABLE
        (
            MonitoringSessionToSampleTypeID BIGINT NOT NULL,
            SampleTypeID BIGINT NULL,
            OrderNumber INT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction CHAR(1)
        );

        DECLARE @SamplesTemp TABLE
        (
            SampleID BIGINT NOT NULL,
            SampleTypeID BIGINT NULL,
            SampleStatusTypeID BIGINT NULL,
            CollectionDate DATETIME2 NULL,
            CollectedByOrganizationID BIGINT NULL,
            CollectedByPersonID BIGINT NULL,
            SentDate DATETIME2 NULL,
            SentToOrganizationID BIGINT NULL,
            EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
            Comments NVARCHAR(200) NULL,
            SiteID BIGINT NOT NULL,
            --,CurrentSiteID BIGINT NULL
            DiseaseID BIGINT NULL,
            ReadOnlyIndicator BIT NULL,
            HumanID BIGINT NULL,
            HumanMasterID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction CHAR(1) NULL
        );

        DECLARE @SamplesToDiseasesTemp TABLE
        (
            MonitoringSessionToMaterialID BIGINT NOT NULL,
            MonitoringSessionID BIGINT NULL,
            SampleID BIGINT NOT NULL,
            SampleTypeID BIGINT NULL,
            DiseaseID BIGINT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );

        DECLARE @TestsTemp TABLE
        (
            TestID BIGINT NOT NULL,
            TestNameTypeID BIGINT NULL,
            TestCategoryTypeID BIGINT NULL,
            TestResultTypeID BIGINT NULL,
            TestStatusTypeID BIGINT NOT NULL,
            DiseaseID BIGINT NULL,
            SampleID BIGINT NULL,
            BatchTestID BIGINT NULL,
            ObservationID BIGINT NULL,
            TestNumber INT NULL,
            Comments NVARCHAR NULL,
            StartedDate DATETIME2 NULL,
            ResultDate DATETIME2 NULL,
            TestedByOrganizationID BIGINT NULL,
            TestedByPersonID BIGINT NULL,
            ResultEnteredByOrganizationID BIGINT NULL,
            ResultEnteredByPersonID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            ReadOnlyIndicator BIT NOT NULL,
            NonLaboratoryTestIndicator BIT NOT NULL,
            ExternalTestIndicator BIT NULL,
            PerformedByOrganizationID BIGINT NULL,
            ReceivedDate DATETIME2 NULL,
            ContactPersonName NVARCHAR(200) NULL,
            RowStatus INT NOT NULL,
            RowAction CHAR(1) NULL
        );

        DECLARE @ActionsTemp TABLE
        (
            MonitoringSessionActionID BIGINT NOT NULL,
            EnteredByPersonID BIGINT NULL,
            ActionTypeID BIGINT NULL,
            ActionStatusTypeID BIGINT NULL,
            ActionDate DATETIME2 NULL,
            Comments NVARCHAR(500) NULL,
            RowStatus INT NOT NULL,
            RowAction CHAR(1) NULL
        );

        DECLARE @EventsTemp TABLE
        (
            EventId BIGINT NOT NULL,
            EventTypeId BIGINT NULL,
            UserId BIGINT NULL,
            SiteId BIGINT NULL,
            LoginSiteId BIGINT NULL,
            ObjectId BIGINT NULL,
            DiseaseId BIGINT NULL,
            LocationId BIGINT NULL,
            InformationString NVARCHAR(MAX) NULL
        );

        --Data Audit--

        DECLARE @idfUserId BIGINT = NULL;
        DECLARE @idfSiteId BIGINT = NULL;
        DECLARE @idfsDataAuditEventType bigint = NULL;
        DECLARE @idfsObjectType bigint = 10017063; --select * from trtBaseReference where idfsBaseReference = 10017063
        DECLARE @idfObject bigint = @MonitoringSessionID;
        DECLARE @idfObjectTable_tlbMonitoringSession bigint = 707040000000;
        DECLARE @idfObjectTable_tlbCampaign bigint = 706900000000;
        DECLARE @idfDataAuditEvent bigint = NULL;

        DECLARE @tlbMonitoringSession_BeforeEdit TABLE
        (
            idfMonitoringSession bigint,
            idfsMonitoringSessionStatus bigint,
            idfsLocation bigint,
            idfPersonEnteredBy bigint,
            idfCampaign bigint,
            idfsSite bigint,
            datEnteredDate datetime,
            datStartDate datetime,
            datEndDate datetime,
            SessionCategoryID bigint,
            AuditUpdateUser nvarchar(200)
        );

        DECLARE @tlbMonitoringSession_AfterEdit TABLE
        (
            idfMonitoringSession bigint,
            idfsMonitoringSessionStatus bigint,
            idfsLocation bigint,
            idfPersonEnteredBy bigint,
            idfCampaign bigint,
            idfsSite bigint,
            datEnteredDate datetime,
            datStartDate datetime,
            datEndDate datetime,
            SessionCategoryID bigint,
            AuditUpdateUser nvarchar(200)
        );

        DECLARE @tlbCampaign_BeforeEdit TABLE
        (
            idfCampaign bigint,
            strCampaignName nvarchar(200),
            idfsCampaignType bigint,
            datCampaignDateStart datetime,
            datCampaignDateEnd datetime
        );

        DECLARE @tlbCampaign_AfterEdit TABLE
        (
            idfCampaign bigint,
            strCampaignName nvarchar(200),
            idfsCampaignType bigint,
            datCampaignDateStart datetime,
            datCampaignDateEnd datetime
        );

        --Data Audit--

        --BEGIN TRANSACTION;

        SET @DiseaseCombinations = REPLACE(@DiseaseCombinations, '"0001-01-01T00:00:00"', 'null');

        INSERT INTO @DiseaseCombinationsTemp
        SELECT *
        FROM
            OPENJSON(@DiseaseCombinations)
            WITH
            (
                MonitoringSessionToDiseaseID BIGINT,
                DiseaseID BIGINT,
                OrderNumber INT,
                SampleTypeID BIGINT,
                Comments NVARCHAR(MAX),
                RowStatus INT,
                RowAction CHAR(1)
            );

        SET @SampleTypeCombinations = REPLACE(@SampleTypeCombinations, '"0001-01-01T00:00:00"', 'null');

        INSERT INTO @SampleTypeCombinationsTemp
        SELECT *
        FROM
            OPENJSON(@SampleTypeCombinations)
            WITH
            (
                MonitoringSessionToSampleTypeID BIGINT,
                SampleTypeID BIGINT,
                OrderNumber INT,
                RowStatus INT,
                RowAction CHAR(1)
            );

        SET @Samples = REPLACE(@Samples, '"0001-01-01T00:00:00"', 'null');

        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@Samples)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                SampleStatusTypeID BIGINT,
                CollectionDate DATETIME2,
                CollectedByOrganizationID BIGINT,
                CollectedByPersonID BIGINT,
                SentDate DATETIME2,
                SentToOrganizationID BIGINT,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                Comments NVARCHAR(200),
                SiteID BIGINT,
                --,CurrentSiteID BIGINT
                DiseaseID BIGINT,
                ReadOnlyIndicator BIT,
                HumanID BIGINT,
                HumanMasterID BIGINT,
                RowStatus INT,
                RowAction CHAR(1)
            );

        INSERT INTO @SamplesToDiseasesTemp
        SELECT *
        FROM
            OPENJSON(@SamplesToDiseases)
            WITH
            (
                MonitoringSessionToMaterialID BIGINT,
                MonitoringSessionID BIGINT,
                SampleID BIGINT,
                SampleTypeID BIGINT,
                DiseaseID BIGINT,
                RowStatus INT,
                RowAction INT
            );

        SET @Tests = REPLACE(@Tests, '"0001-01-01T00:00:00"', 'null');

        INSERT INTO @TestsTemp
        SELECT *
        FROM
            OPENJSON(@Tests)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Comments NVARCHAR(500),
                StartedDate DATETIME2,
                ResultDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                RowStatus INT,
                RowAction CHAR(1)
            );


        SET @Actions = REPLACE(@Actions, '"0001-01-01T00:00:00"', 'null');

        INSERT INTO @ActionsTemp
        SELECT *
        FROM
            OPENJSON(@Actions)
            WITH
            (
                MonitoringSessionActionID BIGINT,
                EnteredByPersonID BIGINT,
                ActionTypeID BIGINT,
                ActionStatusTypeID BIGINT,
                ActionDate DATETIME2,
                Comments NVARCHAR(500),
                RowStatus INT,
                RowAction CHAR(1)
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        --Data Audit--
        -- Get and Set UserId and SiteId
        --SELECT @idfUserId = userInfo.UserId, @idfSiteId = UserInfo.SiteId FROM dbo.FN_UserSiteInformation(@UserId) userInfo

        SELECT @idfUserId = tu.idfUserID,
               @idfSiteId = tu.idfsSite
        FROM dbo.AspNetUsers u
            INNER JOIN dbo.tstUserTable tu
                on u.idfUserID = tu.idfUserID
        WHERE u.idfUserID = @UserId;

        --Data Audit--

        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbMonitoringSession
            WHERE idfMonitoringSession = @MonitoringSessionID
        )
        BEGIN

            --  tauDataAuditEvent  Event Type - Edit 
            SET @idfsDataAuditEventType = 10016003;

            -- insert record into tauDataAuditEvent - 
            INSERT INTO @SuppressSelect
            EXEC dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @idfUserId,
                                                   @idfSiteId,
                                                   @idfsDataAuditEventType,
                                                   @idfsObjectType,
                                                   @idfObject,
                                                   @idfObjectTable_tlbMonitoringSession,
                                                   @EIDSSSessionID,
                                                   @idfDataAuditEvent OUTPUT;

            INSERT INTO @tlbMonitoringSession_BeforeEdit
            (
                idfMonitoringSession,
                idfsMonitoringSessionStatus,
                idfsLocation,
                idfPersonEnteredBy,
                idfCampaign,
                idfsSite,
                datEnteredDate,
                datStartDate,
                datEndDate,
                SessionCategoryID,
                AuditUpdateUser
            )
            SELECT idfMonitoringSession,
                   idfsMonitoringSessionStatus,
                   idfsLocation,
                   idfPersonEnteredBy,
                   idfCampaign,
                   idfsSite,
                   datEnteredDate,
                   datStartDate,
                   datEndDate,
                   SessionCategoryID,
                   AuditUpdateUser
            FROM tlbMonitoringSession
            WHERE idfMonitoringSession = @MonitoringSessionID;

            UPDATE dbo.tlbMonitoringSession
            SET idfsMonitoringSessionStatus = @MonitoringSessionStatusTypeID,
                idfsLocation = @idfsLocation,
                idfPersonEnteredBy = @EnteredByPersonID,
                idfCampaign = @CampaignID,
                idfsSite = @SiteID,
                datEnteredDate = GETDATE(),
                datStartDate = @StartDate,
                datEndDate = @EndDate,
                SessionCategoryID = @SessionCategoryTypeID,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfMonitoringSession = @MonitoringSessionID;

            INSERT INTO @tlbMonitoringSession_AfterEdit
            (
                idfMonitoringSession,
                idfsMonitoringSessionStatus,
                idfsLocation,
                idfPersonEnteredBy,
                idfCampaign,
                idfsSite,
                datEnteredDate,
                datStartDate,
                datEndDate,
                SessionCategoryID,
                AuditUpdateUser
            )
            SELECT idfMonitoringSession,
                   idfsMonitoringSessionStatus,
                   idfsLocation,
                   idfPersonEnteredBy,
                   idfCampaign,
                   idfsSite,
                   datEnteredDate,
                   datStartDate,
                   datEndDate,
                   SessionCategoryID,
                   AuditUpdateUser
            FROM tlbMonitoringSession
            WHERE idfMonitoringSession = @MonitoringSessionID;

            --idfsMonitoringSessionStatus
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbMonitoringSession,
                   707060000000,
                   a.idfMonitoringSession,
                   null,
                   a.idfsMonitoringSessionStatus,
                   b.idfsMonitoringSessionStatus
            from @tlbMonitoringSession_BeforeEdit a
                inner join @tlbMonitoringSession_AfterEdit b
                    on a.idfMonitoringSession = b.idfMonitoringSession
            where (a.idfsMonitoringSessionStatus <> b.idfsMonitoringSessionStatus)
                  or (
                         a.idfsMonitoringSessionStatus is not null
                         and b.idfsMonitoringSessionStatus is null
                     )
                  or (
                         a.idfsMonitoringSessionStatus is null
                         and b.idfsMonitoringSessionStatus is not null
                     );

            --idfPersonEnteredBy
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbMonitoringSession,
                   707110000000,
                   a.idfMonitoringSession,
                   null,
                   a.idfPersonEnteredBy,
                   b.idfPersonEnteredBy
            from @tlbMonitoringSession_BeforeEdit a
                inner join @tlbMonitoringSession_AfterEdit b
                    on a.idfMonitoringSession = b.idfMonitoringSession
            where (a.idfPersonEnteredBy <> b.idfPersonEnteredBy)
                  or (
                         a.idfPersonEnteredBy is not null
                         and b.idfPersonEnteredBy is null
                     )
                  or (
                         a.idfPersonEnteredBy is null
                         and b.idfPersonEnteredBy is not null
                     );

            --idfCampaign
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbMonitoringSession,
                   707120000000,
                   a.idfMonitoringSession,
                   null,
                   a.idfCampaign,
                   b.idfCampaign
            from @tlbMonitoringSession_BeforeEdit a
                inner join @tlbMonitoringSession_AfterEdit b
                    on a.idfMonitoringSession = b.idfMonitoringSession
            where (a.idfCampaign <> b.idfCampaign)
                  or (
                         a.idfCampaign is not null
                         and b.idfCampaign is null
                     )
                  or (
                         a.idfCampaign is null
                         and b.idfCampaign is not null
                     );

            --datEnteredDate
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbMonitoringSession,
                   707130000000,
                   a.idfMonitoringSession,
                   null,
                   a.datEnteredDate,
                   b.datEnteredDate
            from @tlbMonitoringSession_BeforeEdit a
                inner join @tlbMonitoringSession_AfterEdit b
                    on a.idfMonitoringSession = b.idfMonitoringSession
            where (a.datEnteredDate <> b.datEnteredDate)
                  or (
                         a.datEnteredDate is not null
                         and b.datEnteredDate is null
                     )
                  or (
                         a.datEnteredDate is null
                         and b.datEnteredDate is not null
                     );

            --datStartDate
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbMonitoringSession,
                   4578670000000,
                   a.idfMonitoringSession,
                   null,
                   a.datStartDate,
                   b.datStartDate
            from @tlbMonitoringSession_BeforeEdit a
                inner join @tlbMonitoringSession_AfterEdit b
                    on a.idfMonitoringSession = b.idfMonitoringSession
            where (a.datStartDate <> b.datStartDate)
                  or (
                         a.datStartDate is not null
                         and b.datStartDate is null
                     )
                  or (
                         a.datStartDate is null
                         and b.datStartDate is not null
                     );

            --datEndDate
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbMonitoringSession,
                   4578680000000,
                   a.idfMonitoringSession,
                   null,
                   a.datEndDate,
                   b.datEndDate
            from @tlbMonitoringSession_BeforeEdit a
                inner join @tlbMonitoringSession_AfterEdit b
                    on a.idfMonitoringSession = b.idfMonitoringSession
            where (a.datEndDate <> b.datEndDate)
                  or (
                         a.datEndDate is not null
                         and b.datEndDate is null
                     )
                  or (
                         a.datEndDate is null
                         and b.datEndDate is not null
                     );

            INSERT INTO @tlbCampaign_BeforeEdit
            (
                idfCampaign,
                strCampaignName,
                idfsCampaignType,
                datCampaignDateStart,
                datCampaignDateEnd
            )
            SELECT idfCampaign,
                   strCampaignName,
                   idfsCampaignType,
                   datCampaignDateStart,
                   datCampaignDateEnd
            FROM tlbCampaign
            WHERE idfCampaign = @CampaignID;

            UPDATE dbo.tlbCampaign
            SET strCampaignName = @CampaignName,
                idfsCampaignType = @CampaignTypeID,
                datCampaignDateStart = @CampaignStartDate,
                datCampaignDateEnd = @CampaignEndDate
            WHERE idfCampaign = @CampaignID;

            INSERT INTO @tlbCampaign_AfterEdit
            (
                idfCampaign,
                strCampaignName,
                idfsCampaignType,
                datCampaignDateStart,
                datCampaignDateEnd
            )
            SELECT idfCampaign,
                   strCampaignName,
                   idfsCampaignType,
                   datCampaignDateStart,
                   datCampaignDateEnd
            FROM tlbCampaign
            WHERE idfCampaign = @CampaignID;

            --strCampaignName
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbCampaign,
                   706970000000,
                   a.idfCampaign,
                   null,
                   a.strCampaignName,
                   b.strCampaignName
            from @tlbCampaign_BeforeEdit a
                inner join @tlbCampaign_AfterEdit b
                    on a.idfCampaign = b.idfCampaign
            where (a.strCampaignName <> b.strCampaignName)
                  or (
                         a.strCampaignName is not null
                         and b.strCampaignName is null
                     )
                  or (
                         a.strCampaignName is null
                         and b.strCampaignName is not null
                     );

            --idfsCampaignType
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbCampaign,
                   706920000000,
                   a.idfCampaign,
                   null,
                   a.idfsCampaignType,
                   b.idfsCampaignType
            from @tlbCampaign_BeforeEdit a
                inner join @tlbCampaign_AfterEdit b
                    on a.idfCampaign = b.idfCampaign
            where (a.idfsCampaignType <> b.idfsCampaignType)
                  or (
                         a.idfsCampaignType is not null
                         and b.idfsCampaignType is null
                     )
                  or (
                         a.idfsCampaignType is null
                         and b.idfsCampaignType is not null
                     );

            --datCampaignDateStart
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbCampaign,
                   706940000000,
                   a.idfCampaign,
                   null,
                   a.datCampaignDateStart,
                   b.datCampaignDateStart
            from @tlbCampaign_BeforeEdit a
                inner join @tlbCampaign_AfterEdit b
                    on a.idfCampaign = b.idfCampaign
            where (a.datCampaignDateStart <> b.datCampaignDateStart)
                  or (
                         a.datCampaignDateStart is not null
                         and b.datCampaignDateStart is null
                     )
                  or (
                         a.datCampaignDateStart is null
                         and b.datCampaignDateStart is not null
                     );

            --datCampaignDateEnd
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbCampaign,
                   706950000000,
                   a.idfCampaign,
                   null,
                   a.datCampaignDateEnd,
                   b.datCampaignDateEnd
            from @tlbCampaign_BeforeEdit a
                inner join @tlbCampaign_AfterEdit b
                    on a.idfCampaign = b.idfCampaign
            where (a.datCampaignDateEnd <> b.datCampaignDateEnd)
                  or (
                         a.datCampaignDateEnd is not null
                         and b.datCampaignDateEnd is null
                     )
                  or (
                         a.datCampaignDateEnd is null
                         and b.datCampaignDateEnd is not null
                     );

            UPDATE @EventsTemp
            SET ObjectId = @MonitoringSessionID
            WHERE ObjectId = 0;
        END
        ELSE
        BEGIN
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbMonitoringSession',
                                              @MonitoringSessionID OUTPUT;

            EXECUTE dbo.USP_GBL_NextNumber_GET 'Human Active Surveillance Session',
                                               @EIDSSSessionID OUTPUT,
                                               NULL;

            INSERT INTO dbo.tlbMonitoringSession
            (
                idfMonitoringSession,
                idfsMonitoringSessionStatus,
                idfsLocation,
                idfPersonEnteredBy,
                idfCampaign,
                idfsSite,
                datEnteredDate,
                strMonitoringSessionID,
                datStartDate,
                datEndDate,
                SessionCategoryID,
                intRowStatus,
                AuditCreateUser
            )
            VALUES
            (@MonitoringSessionID,
             @MonitoringSessionStatusTypeID,
             @idfsLocation,
             @EnteredByPersonID,
             @CampaignID,
             @SiteID,
             GETDATE(),
             @EIDSSSessionID,
             @StartDate,
             @EndDate,
             @SessionCategoryTypeID,
             0  ,
             @AuditUserName
            );

            UPDATE @EventsTemp
            SET ObjectId = @MonitoringSessionID
            WHERE ObjectId = 0;

            --Data Audit--

            -- tauDataAuditEvent Event Type - Create 
            set @idfsDataAuditEventType = 10016001;

            -- insert record into tauDataAuditEvent - 
            INSERT INTO @SuppressSelect
            EXEC dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @idfUserId,
                                                   @idfSiteId,
                                                   @idfsDataAuditEventType,
                                                   @idfsObjectType,
                                                   @idfObject,
                                                   @idfObjectTable_tlbMonitoringSession,
                                                   @EIDSSSessionID,
                                                   @idfDataAuditEvent OUTPUT;

            INSERT INTO tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject
            )
            VALUES
            (@idfDataAuditEvent, @idfObjectTable_tlbMonitoringSession, @MonitoringSessionID);

        --Data Audit--
        END

        WHILE EXISTS (SELECT * FROM @DiseaseCombinationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionToDiseaseID,
                @DiseaseID = DiseaseID,
                @SampleTypeID = SampleTypeID,
                @OrderNumber = OrderNumber,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @DiseaseCombinationsTemp;

            SET @idfMonitoringSessionToDiagnosis = @RowID;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_HAS_MonitoringSessionToDiagnosis_SET @LanguageID,
                                                                  @idfDataAuditEvent,
                                                                  @idfMonitoringSessionToDiagnosis OUTPUT,
                                                                  @MonitoringSessionID,
                                                                  @DiseaseID,
                                                                  @OrderNumber,
                                                                  NULL,
                                                                  @SampleTypeID,
                                                                  @Comments,
                                                                  @AuditUserName,
                                                                  @RowAction;

            DELETE FROM @DiseaseCombinationsTemp
            WHERE MonitoringSessionToDiseaseID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @SampleTypeCombinationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionToSampleTypeID,
                @MonitoringSessionToSampleTypeID = MonitoringSessionToSampleTypeID,
                @OrderNumber = OrderNumber,
                @RowStatus = RowStatus,
                @SampleTypeID = SampleTypeID,
                @RowAction = RowAction
            FROM @SampleTypeCombinationsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_HAS_MONITORING_SESSION_TO_SAMPLE_TYPE_SET @LanguageID,
                                                                       @idfDataAuditEvent,
                                                                       @MonitoringSessionToSampleTypeID,
                                                                       @MonitoringSessionID,
                                                                       @OrderNumber,
                                                                       @RowStatus,
                                                                       @SampleTypeID,
                                                                       @RowAction,
                                                                       @AuditUserName;

            DELETE FROM @SampleTypeCombinationsTemp
            WHERE MonitoringSessionToSampleTypeID = @RowID;
        END;


        WHILE EXISTS (SELECT * FROM @SamplesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SampleID,
                @SampleID = SampleID,
                @SampleTypeID = SampleTypeID,
                @CollectedByPersonID = CollectedByPersonID,
                @CollectedByOrganizationID = CollectedByOrganizationID,
                @CollectionDate = CAST(CollectionDate AS DATETIME),
                @SentDate = CAST(SentDate AS DATETIME),
                @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                @SampleStatusTypeID = SampleStatusTypeID,
                @Comments = Comments,
                @SiteID = SiteID,
                --,@CurrentSiteID = CurrentSiteID
                @RowStatus = RowStatus,
                @SentToOrganizationID = SentToOrganizationID,
                @DiseaseID = DiseaseID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @HumanID = HumanID,
                @HumanMasterID = HumanMasterID,
                @RowAction = RowAction
            FROM @SamplesTemp;

            SET @EIDSSLocalOrFieldSampleID
                = REPLACE(@EIDSSLocalOrFieldSampleID, @Translated_New + '-', @EIDSSSessionID + '-');

            IF @RowAction = 'I'
            BEGIN
                DECLARE @idfNewHuman BIGINT = NULL;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_HUM_COPY_HUMAN_SET @HumanMasterID,
                                                    @idfDataAuditEvent,
                                                    @AuditUserName,
                                                    @idfNewHuman OUTPUT,
                                                    @ReturnCode OUTPUT,
                                                    @ReturnMessage OUTPUT;

                SELECT @HumanID = @idfNewHuman;
            END;

            EXECUTE dbo.USSP_GBL_SAMPLES_SET @AuditUserName = @AuditUserName,
                                             @DataAuditEventID = @idfDataAuditEvent,
                                             @EIDSSObjectID = @EIDSSSessionID,
                                             @SampleID = @SampleID OUTPUT,
                                             @SampleTypeID = @SampleTypeID,
                                             @RootSampleID = NULL,
                                             @ParentSampleID = NULL,
                                             @HumanID = @HumanID,
                                             @SpeciesID = NULL,
                                             @AnimalID = NULL,
                                             @VectorID = NULL,
                                             @MonitoringSessionID = @MonitoringSessionID,
                                             @VectorSessionID = NULL,
                                             @HumanDiseaseReportID = NULL,
                                             @VeterinaryDiseaseReportID = NULL,
                                             @CollectionDate = @CollectionDate,
                                             @CollectedByPersonID = @CollectedByPersonID,
                                             @CollectedByOrganizationID = @CollectedByOrganizationID,
                                             @SentDate = @SentDate,
                                             @SentToOrganizationID = @SentToOrganizationID,
                                             @EIDSSLocalFieldSampleID = @EIDSSLocalOrFieldSampleID,
                                             @SiteID = @SiteID,
                                             @EnteredDate = @DateEntered,
                                             @ReadOnlyIndicator = @ReadOnlyIndicator,
                                             @SampleStatusTypeID = @SampleStatusTypeID,
                                             @Comments = @Comments,
                                             @CurrentSiteID = NULL,
                                             @DiseaseID = @DiseaseID,
                                             @BirdStatusTypeID = NULL,
                                             @RowStatus = @RowStatus,
                                             @RowAction = @RowAction;

            UPDATE @SamplesToDiseasesTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            UPDATE @TestsTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            DELETE FROM @SamplesTemp
            WHERE SampleID = @RowID;

            DELETE FROM dbo.tlbMonitoringSessionToMaterial
            WHERE idfMaterial = @SampleID;
        END;

        WHILE EXISTS (SELECT * FROM @SamplesToDiseasesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionToMaterialID,
                @MonitoringSessionToMaterialID = MonitoringSessionToMaterialID,
                @SampleID = SampleID,
                @SampleTypeID = SampleTypeID,
                @DiseaseID = DiseaseID,
                @RowAction = RowAction,
                @RowStatus = RowStatus
            FROM @SamplesToDiseasesTemp;

            --insert or update the diseases for this sample
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_AS_SAMPLE_TO_DISEASE_SET @AuditUserName,
                                                      @idfDataAuditEvent,
                                                      @MonitoringSessionToMaterialID,
                                                      @MonitoringSessionID,
                                                      @SampleID,
                                                      @DiseaseID,
                                                      @SampleTypeID,
                                                      @RowStatus,
                                                      @RowAction;

            DELETE FROM @SamplesToDiseasesTemp
            WHERE MonitoringSessionToMaterialID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @TestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestID,
                @TestID = TestID,
                @TestNameTypeID = TestNameTypeID,
                @TestCategoryTypeID = TestCategoryTypeID,
                @TestResultTypeID = TestResultTypeID,
                @TestStatusTypeID = TestStatusTypeID,
                @DiseaseID = DiseaseID,
                @SampleID = SampleID,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @StartedDate = StartedDate,
                @ResultDate = ResultDate,
                @TestedByOrganizationID = TestedByOrganizationID,
                @TestedByPersonID = TestedByPersonID,
                @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                @ResultEnteredByPersonID = ResultEnteredByPersonID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
                @ExternalTestIndicator = ExternalTestIndicator,
                @PerformedByOrganizationID = PerformedByOrganizationID,
                @ReceivedDate = ReceivedDate,
                @ContactPersonName = ContactPersonName,
                @RowAction = RowAction
            FROM @TestsTemp;

            SELECT @idfHumanCase_Test = idfHumanCase
            FROM tlbTesting
            WHERE idfTesting = @TestID

            SET @EIDSSLocalOrFieldSampleID
                = REPLACE(@EIDSSLocalOrFieldSampleID, @Translated_New + '-', @EIDSSSessionID + '-');

            --If record is being soft-deleted, then check if the test record was originally created 
            --in the laboaratory module.  If it was, then disassociate the test record from the 
            --human monitoring session, so that the test record remains in the laboratory module 
            --for further action.
            IF @RowStatus = 1
               AND @NonLaboratoryTestIndicator = 1
            BEGIN
                SET @RowStatus = 0;
                SET @TestMonitoringSessionID = NULL;
            END
            ELSE
            BEGIN
                SET @TestMonitoringSessionID = @MonitoringSessionID;
            END;


            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TESTS_SET @TestID OUTPUT,
                                           @TestNameTypeID,
                                           @TestCategoryTypeID,
                                           @TestResultTypeID,
                                           @TestStatusTypeID,
                                           @DiseaseID,
                                           @SampleID,
                                           NULL,
                                           NULL,
                                           NULL,
                                           @Comments,
                                           @RowStatus,
                                           @StartedDate,
                                           @ResultDate,
                                           @TestedByOrganizationID,
                                           @TestedByPersonID,
                                           @ResultEnteredByOrganizationID,
                                           @ResultEnteredByPersonID,
                                           @ValidatedByOrganizationID,
                                           @ValidatedByPersonID,
                                           @ReadOnlyIndicator,
                                           @NonLaboratoryTestIndicator,
                                           @ExternalTestIndicator,
                                           @PerformedByOrganizationID,
                                           @ReceivedDate,
                                           @ContactPersonName,
                                           @TestMonitoringSessionID,
                                           NULL,
                                           @idfHumanCase_Test,
                                           NULL,
                                           @AuditUserName,
                                           @idfDataAuditEvent,
                                           @EIDSSSessionID,
                                           @RowAction;

            DELETE FROM @TestsTemp
            WHERE TestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @ActionsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionActionID,
                @MonitoringSessionActionID = MonitoringSessionActionID,
                @EnteredByPersonID = EnteredByPersonID,
                @ActionTypeID = ActionTypeID,
                @ActionStatusTypeID = ActionStatusTypeID,
                @ActionDate = ActionDate,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @ActionsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_HAS_MONITORING_SESSION_ACTION_SET @LanguageID,
                                                               @idfDataAuditEvent,
                                                               @MonitoringSessionActionID OUTPUT,
                                                               @MonitoringSessionID,
                                                               @EnteredByPersonID,
                                                               @ActionTypeID,
                                                               @ActionStatusTypeID,
                                                               @ActionDate,
                                                               @Comments,
                                                               @RowStatus,
                                                               @RowAction,
                                                               @AuditUserName;

            DELETE FROM @ActionsTemp
            WHERE MonitoringSessionActionID = @RowID;
        END;


        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                            @EventTypeId,
                                            @EventUserId,
                                            @EventObjectId,
                                            @EventDiseaseId,
                                            @EventSiteId,
                                            @EventInformationString,
                                            @EventLoginSiteId,
                                            @EventLocationId,
                                            @AuditUserName;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        DECLARE @HumanDiseaseReportID BIGINT = NULL;
        DECLARE @EIDSSReportID NVARCHAR(200) = NULL;

        IF (@CreateDiseaseReportHumanID IS NOT NULL)
        BEGIN
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbHumanCase',
                                              @HumanDiseaseReportID OUTPUT;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NextNumber_GET 'Human Disease Report',
                                               @EIDSSReportID OUTPUT,
                                               NULL;

            DECLARE @PersonID NVARCHAR(50) = NULL;
            DECLARE @Name NVARCHAR(200) = NULL;

            INSERT INTO dbo.tlbHumanCase
            (
                idfHumanCase,
                strCaseID,
                idfHuman,
                idfParentMonitoringSession,
                idfsFinalDiagnosis,
                idfsSite,
                idfsCaseProgressStatus,
                idfsInitialCaseStatus,
                idfsFinalCaseStatus,
                DiseaseReportTypeID,
                idfPersonEnteredBy,
                idfsYNSpecimenCollected,
                idfsYNTestsConducted,
                datEnteredDate
            )
            VALUES
            (   @HumanDiseaseReportID,
                @EIDSSReportID,
                @CreateDiseaseReportHumanID,
                @MonitoringSessionID,
                NULL, --@DiseaseID
                @SiteID,
                10109001,
                NULL,
                NULL,
                4578940000001,
                @EnteredByPersonID,
                10100001,
                10100001,
                GETDATE()
            );

            UPDATE dbo.tlbMaterial
            SET idfHumanCase = @HumanDiseaseReportID
            WHERE idfMonitoringSession = @MonitoringSessionID
                  AND idfHuman = @CreateDiseaseReportHumanID;
        END;

        IF @@TRANCOUNT > 0
            COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        THROW;
    END CATCH

    SELECT @ReturnCode AS ReturnCode,
           @ReturnMessage AS ReturnMessage,
           @MonitoringSessionID AS MonitoringSessionID,
           @EIDSSSessionID AS EIDSSSessionID,
           @HumanDiseaseReportID AS HumanDiseaseReportID;
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_Parameter_GET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_Parameter_GET
-- Description: Gets list of the Parameters.
--          
-- Revision History:
-- Name				Date		Change
-- ---------------	----------	--------------------------------------------------------------------
-- Doug Albanese	2/10/2020	Initial release for single parameter grab for Flex Form Editor.
-- Doug Albanese	07/14/2021	Added Parameter Type for return
-- Doug Albanese	03/21/2023	Swapped out the language id function with the new method
-- ================================================================================================
/*
exec dbo.spFFGetParameters 'en', null, 10034012
*/
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_Parameter_GET] (
	@LangID NVARCHAR(50) = NULL
	,@idfsParameter BIGINT = NULL
	)
AS
BEGIN
	SET NOCOUNT ON;

	IF (@LangID IS NULL)
		SET @LangID = 'en';

	DECLARE @langid_int BIGINT
		,@returnCode BIGINT
		,@returnMsg NVARCHAR(MAX)
	DECLARE @ParameterUsed AS BIT

	BEGIN TRY
		SET @langid_int =dbo.FN_GBL_LanguageCode_GET(@LangID)
		
		IF (EXISTS(SELECT TOP 1 1 
			FROM dbo.tlbActivityParameters
			WHERE [idfsParameter] = @idfsParameter))
		SET @ParameterUsed = 1;

		SELECT P.idfsEditor
			,ISNULL(E.strDefault, '') AS [Editor]
			,P.idfsParameterType
			,ISNULL(FR1.[name], FR1.[strDefault]) AS [ParameterTypeName]
			,ISNULL(B2.[strDefault], '') AS [DefaultName]
			,ISNULL(B1.[strDefault], '') AS [DefaultLongName]
			,ISNULL(SNT2.[strTextString], B2.[strDefault]) AS [NationalName]
			,ISNULL(SNT1.[strTextString], B1.[strDefault]) AS [NationalLongName],
			coalesce(@ParameterUsed,0) As ParameterUsed
		FROM [dbo].[ffParameter] P
		INNER JOIN dbo.trtBaseReference B1 ON B1.[idfsBaseReference] = P.[idfsParameter]
			AND B1.[intRowStatus] = 0
		LEFT JOIN dbo.trtBaseReference B2 ON B2.[idfsBaseReference] = P.[idfsParameterCaption]
			AND B2.[intRowStatus] = 0
		LEFT JOIN dbo.FN_GBL_Reference_List_GET(@LangID, 19000071) FR1 ON FR1.[idfsReference] = P.[idfsParameterType]
		LEFT JOIN dbo.trtStringNameTranslation SNT1 ON (
				SNT1.[idfsBaseReference] = P.[idfsParameter]
				AND SNT1.[idfsLanguage] = @langid_int
				)
			AND SNT1.[intRowStatus] = 0
		LEFT JOIN dbo.trtStringNameTranslation SNT2 ON (
				SNT2.[idfsBaseReference] = P.[idfsParameterCaption]
				AND SNT2.[idfsLanguage] = @langid_int
				)
			AND SNT2.[intRowStatus] = 0
		LEFT JOIN dbo.FN_GBL_Reference_List_GET(@LangID, 19000067) E ON E.idfsReference = P.idfsEditor
		WHERE P.idfsParameter = @idfsParameter
			AND P.intRowStatus = 0
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_SITE_GROUP_GETList]...';


GO
-- ================================================================================================
-- Name: USP_GBL_SITE_GROUP_GETList		
-- 
-- Description: Returns a list of site groups.
--
-- Revision History:
--		
-- Name				Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     11/29/2019 Initial release.
-- Stephen Long     12/12/2019 Added central site ID to query.
-- Stephen Long     12/29/2019 Added distinct to account for site to site group join.
-- Stephen Long     06/24/2021 Added new pagination method and leading wild card on EIDSS site ID.
-- Stephen Long     06/27/2021 Removed unneeded fields and the site to site group join and 
--                             distinct; added gisLocation join.
-- Stephen Long     07/28/2021 Corrected administrative level name field.
-- Stephen Long     07/28/2022 Added site group type id where criteria.
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Stephen Long     03/15/2023 Added group by.
-- Stephen Long     03/16/2023 Fixed total row count.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_GBL_SITE_GROUP_GETList]
    @LanguageID NVARCHAR(50),
    @SiteGroupTypeID BIGINT NULL,
    @SiteGroupName NVARCHAR(40) NULL,
    @AdministrativeLevelID BIGINT NULL,
    @CentralSiteID BIGINT NULL,
    @SiteID BIGINT NULL,
    @EIDSSSiteID NVARCHAR(36) NULL,
    @PageNumber INT = 1,
    @PageSize INT = 10,
    @SortColumn NVARCHAR(30) = 'SiteGroupName',
    @SortOrder NVARCHAR(4) = 'ASC'
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        DECLARE @AdministrativeLevelNode AS HIERARCHYID;

        IF @AdministrativeLevelID IS NOT NULL
        BEGIN
            SELECT @AdministrativeLevelNode = node
            FROM dbo.gisLocation
            WHERE idfsLocation = @AdministrativeLevelID;
        END;

        WITH paging
        AS (SELECT sg.idfSiteGroup,
                   c = COUNT(*) OVER ()
            FROM dbo.tflSiteGroup sg
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = sg.idfsLocation
                LEFT JOIN dbo.gisStringNameTranslation snt
                    ON snt.idfsGISBaseReference = g.idfsLocation
                       AND snt.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                LEFT JOIN dbo.tflSiteToSiteGroup ssg
                    ON ssg.idfSiteGroup = sg.idfSiteGroup
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000524) siteGroupType
                    ON siteGroupType.idfsReference = sg.idfsSiteGroupType
            WHERE sg.intRowStatus = 0
                  AND (
                          sg.idfsCentralSite = @CentralSiteID
                          OR @CentralSiteID IS NULL
                      )
                  AND (
                          sg.idfsLocation = @AdministrativeLevelID
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          ssg.idfsSite = @SiteID
                          OR @SiteID IS NULL
                      )
                  AND (
                          sg.idfsSiteGroupType = @SiteGroupTypeID
                          OR @SiteGroupTypeID IS NULL
                      )
                  AND (
                          ssg.strSiteID LIKE '%' + @EIDSSSiteID + '%'
                          OR @EIDSSSiteID IS NULL
                      )
                  AND (
                          sg.strSiteGroupName LIKE '%' + @SiteGroupName + '%'
                          OR @SiteGroupName IS NULL
                      )
        GROUP BY sg.idfSiteGroup,
                 sg.strSiteGroupName,
                 --s.strTextString,
                 --b.strDefault,
                 sg.strSiteGroupDescription,
                 siteGroupType.name
            ORDER BY CASE
                         WHEN @SortColumn = 'SiteGroupName'
                              AND @SortOrder = 'ASC' THEN
                             sg.strSiteGroupName
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'SiteGroupName'
                              AND @SortOrder = 'DESC' THEN
                             sg.strSiteGroupName
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'SiteGroupTypeName'
                              AND @SortOrder = 'ASC' THEN
                             siteGroupType.name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'SiteGroupTypeName'
                              AND @SortOrder = 'DESC' THEN
                             siteGroupType.name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'SiteGroupDescription'
                              AND @SortOrder = 'ASC' THEN
                             sg.strSiteGroupDescription
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'SiteGroupDescription'
                              AND @SortOrder = 'DESC' THEN
                             sg.strSiteGroupDescription
                     END DESC OFFSET @PageSize * (@PageNumber - 1) ROWS FETCH NEXT @PageSize ROWS ONLY
           )
        SELECT sg.idfSiteGroup AS SiteGroupID,
               siteGroupType.name AS SiteGroupTypeName,
               sg.strSiteGroupName AS SiteGroupName,
               ISNULL(s.strTextString, b.strDefault) AS AdministrativeLevelName,
               sg.strSiteGroupDescription AS SiteGroupDescription,
               c AS [RowCount],
               (
                   SELECT COUNT(*) FROM dbo.tflSiteGroup WHERE intRowStatus = 0
               ) AS TotalRowCount,
               CurrentPage = @PageNumber,
               TotalPages = (c / @PageSize) + IIF(c % @PageSize > 0, 1, 0)
        FROM dbo.tflSiteGroup sg
            INNER JOIN paging
                ON paging.idfSiteGroup = sg.idfSiteGroup
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = sg.idfsLocation
            LEFT OUTER JOIN dbo.gisBaseReference b
                ON b.idfsGISBaseReference = g.idfsLocation
            LEFT JOIN dbo.gisStringNameTranslation s
                ON s.idfsGISBaseReference = g.idfsLocation
                   AND s.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000524) siteGroupType
                ON siteGroupType.idfsReference = sg.idfsSiteGroupType
        GROUP BY sg.idfSiteGroup,
                 sg.strSiteGroupName,
                 s.strTextString,
                 b.strDefault,
                 sg.strSiteGroupDescription,
                 siteGroupType.name,
                 c;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_DISEASE_GETDetail]...';


GO
--*************************************************************
-- Name 				: USP_HUM_DISEASE_GETDetail
-- Description			: List Human Disease Report
--          
-- Author               : Mandar Kulkarni
-- Revision History
-- Name	Date		Change Detail
-- JWJ	20180418	Added cols for hum disease summary section of the hum disease page
-- HAP  20180801    Added columns DiseaseReportTypeID and strMonitoringSessionID to be returned
-- HAP  20181102    Added column LegacyCaseID to be returned 
-- HAP  20181130    Added columns blnClinicalDiagBasis, blnLabDiagBasis, blnEpiDiagBasis, DateofClassification, idfsYNExposureLocationKnown to be returned
-- HAP  20181207    Added column tlbOutBreak.strOutbreakID to be returned
-- HAP  20181213    Removed VaccinationName and VaccinationDate columns to be returned
-- HAP  20190210    Added column idfCSObservation to be returned for Flex Form integration
-- HAP  20190409    Added columns parentHumanDiseaseReportID and relatedHumanDiseaseReportIdList to be returned for use case HUC11 Changed Diagnosis Human Disease Report​ 
-- HAP  20190614    Added columns for Point location values to be returned
-- HAP  20190629    Added column strPointForeignAddress to be returned
-- SLV	20190703	Removed redundant call to FN_GBL_ReferenceRepair
-- Ann Xiong	   09/12/2019 Added script to select PatientStatus, HospitalName, PreviouslySoughtCare, 
--                            YNSpecificVaccinationAdministered, YNSpecimenCollected, YNExposureLocationKnown, 
--                            ExposureLocationType, ExposureLocationDescription, Country, Settlement for Human Disease Report Deduplication.
-- Ann Xiong	   09/13/2019 Modified SP to replace InitialCaseClassification.idfsReferenceType = 19000111 with InitialCaseClassification.idfsReferenceType = 19000011,
-- 							  replace NonNotifiableDiagnosis.idfsReferenceType = 19000019 with NonNotifiableDiagnosis.idfsReferenceType = 19000149
-- Ann Xiong	   09/16/2019 Modified SP to replace SoughtCareFacility.name as strSoughtCareFacility with tlbHumanCase.strSoughtCareFacility
-- 							  replace HospitalizationStatus.idfsReferenceType = 19000100 with HospitalizationStatus.idfsReferenceType = 19000041
-- Stephen Long    10/02/2019 Changed select person calls over to left joins to person.  POCO was not generating with the function call.
-- Ann Xiong	   03/13/2020 Uncommented 10 fields of Human Disease Report Deduplication were commented out
-- LM				06/07/2020 Updated Selecting Connected Disease Reports
-- LM				11/02/2020 Added strNotCollectedReason To Ouput
-- Mark Wilson		12/22/2020 Changed Institution join to E7 SP
-- Mike Kornegay	09/23/2021 Removed duplicate fields from select.
-- Mark Wilson		09/23/2021 Fixed Locations and offices
-- Mark Wilson		10/01/2021 updated join to gisLocation
-- Minal Shah	    10/22/2021 Added strGroundType, dblPointAccuracy and dblPointAlignment
-- Minal Shah		11/03/2021 Added blnInitialSSD and blnFinalSSD columns
-- Minal Shah		01/25/2021 Replaced long name to org abbrev
-- Stephen Long     01/16/2023 Fixes to use translated values on reference types.
-- Mani Govindarajan 03/20/2023 Added idfParentMonitoringSession in output
-- Testing code:
-- 
/* 
EXEC USP_HUM_DISEASE_GETDetail 'en-US', 71413

*/
--*************************************************************
ALTER PROCEDURE [dbo].[USP_HUM_DISEASE_GETDetail]
(
    @LangID NVARCHAR(50),
    @SearchHumanCaseId BIGINT = NULL
)
AS
BEGIN
    BEGIN TRY
        SET NOCOUNT ON;

        DECLARE @ReturnMessage VARCHAR(MAX) = 'Success';
        DECLARE @ReturnCode BIGINT = 0;
        --Declare @ConnectedReports Varchar(Max);
        --		Select @ConnectedReports = ( SELECT ',' + CAST(RelatedToHumanDiseaseReportIdRoot AS VARCHAR)  + '-' +  (Select strCaseId from tlbhumancase where idfHumancase =  RelatedToHumanDiseaseReportIdRoot)
        --		From  dbo.HumanDiseaseReportRelationship where RelatedToHumanDiseaseReportIdRoot =  @SearchHumanCaseId)
        DECLARE @parentHumanCaseId int
        DECLARE @ParentCaseId int
        DECLARE @ChildCaseId int
        SET @ParentCaseId =
        (
            SELECT TOP 1
                RelatedToHumanDiseaseReportIdRoot
            FROM dbo.HumanDiseaseReportRelationship
            WHERE (HumanDiseaseReportID = @SearchHumanCaseId)
        )
        SET @ChildCaseId =
        (
            SELECT TOP 1
                HumanDiseaseReportID
            FROM dbo.HumanDiseaseReportRelationship
            WHERE (RelatedToHumanDiseaseReportIdRoot = @SearchHumanCaseId)
        )
        SELECT hc.idfHumanCase,
               NULL AS parentHumanDiseaseReportID,     --HumanDiseaseReportRelationship.RelateToHumanDiseaseReportID as parentHumanDiseaseReportID,  
               (
                   SELECT DISTINCT
                       STUFF(
                       (
                           SELECT ',' + CAST(t2.RelatedToHumanDiseaseReportIdRoot AS VARCHAR) + '-' +
                                  (
                                      SELECT strCaseId
                                      FROM dbo.tlbhumancase
                                      WHERE idfHumancase = t2.RelatedToHumanDiseaseReportIdRoot
                                  )
                           FROM dbo.HumanDiseaseReportRelationship t2
                           WHERE t2.RelatedToHumanDiseaseReportIdRoot = @ParentCaseId -- (Select top 1 RelatedToHumanDiseaseReportIdRoot  from HumanDiseaseReportRelationship where (HumanDiseaseReportID = @SearchHumanCaseId) )
                                 --AND ((t2.RelateToHumanDiseaseReportID = hc.idfHumanCase) or (t2.HumanDiseaseReportID = hc.idfHumanCase)))
                                 AND t2.intRowStatus = 0
                           FOR XML PATH('')
                       ),
                       1,
                       1,
                       ''
                            )
                   FROM dbo.HumanDiseaseReportRelationship t1
               --NULL
               ) AS relatedParentHumanDiseaseReportIdList,
               (
                   SELECT DISTINCT
                       STUFF(
                       (
                           SELECT ',' + CAST(t2.HumanDiseaseReportID AS VARCHAR) + '-' +
                                  (
                                      SELECT strCaseId
                                      FROM dbo.tlbhumancase
                                      WHERE idfHumancase = t2.HumanDiseaseReportID
                                  )
                           FROM dbo.HumanDiseaseReportRelationship t2
                           WHERE t2.HumanDiseaseReportID = @ChildCaseId -- (Select top 1 RelatedToHumanDiseaseReportIdRoot  from HumanDiseaseReportRelationship where (HumanDiseaseReportID = @SearchHumanCaseId) )
                                 --AND ((t2.RelateToHumanDiseaseReportID = hc.idfHumanCase) or (t2.HumanDiseaseReportID = hc.idfHumanCase)))
                                 AND t2.intRowStatus = 0
                           FOR XML PATH('')
                       ),
                       1,
                       1,
                       ''
                            )
                   FROM dbo.HumanDiseaseReportRelationship t1
               --NULL
               ) AS relatedChildHumanDiseaseReportIdList,
               hc.idfHuman,
               hc.idfsHospitalizationStatus,
               hc.idfsYNSpecimenCollected,
               hc.idfsHumanAgeType,
               hc.idfsYNAntimicrobialTherapy,
               hc.idfsYNHospitalization,
               hc.idfsYNRelatedToOutbreak,
               hc.idfsOutCome,
               hc.idfsInitialCaseStatus,
               hc.idfsFinalDiagnosis,
               FinalDiagnosis.name AS strFinalDiagnosis,
               hc.idfsFinalCaseStatus,
               FinalCaseClassification.name AS strFinalCaseStatus,
               hc.idfSentByOffice,
               hc.idfInvestigatedByOffice,
               hc.idfReceivedByOffice,
               hc.idfEpiObservation,
               hc.idfCSObservation,
               hc.datNotificationDate,
               hc.datCompletionPaperFormDate,
               hc.datFirstSoughtCareDate,
               hc.datHospitalizationDate,
               hc.datFacilityLastVisit,
               hc.datExposureDate,
               hc.datDischargeDate,
               hc.datOnSetDate,
               hc.datInvestigationStartDate AS StartDateofInvestigation,
               hc.datFinalDiagnosisDate AS datDateOfDiagnosis,
               hc.datFinalDiagnosisDate,
               hc.strNote,
               hc.strCurrentLocation,
               hc.strHospitalizationPlace,
               hc.strLocalIdentifier,
               SoughtByOfficeRef.name AS strSoughtCareFacility,
               hc.strSentByFirstName,
               hc.strSentByPatronymicName,
               hc.strSentByLastName,
               hc.strReceivedByFirstName,
               hc.strReceivedByPatronymicName,
               hc.strReceivedByLastName,
               hc.strEpidemiologistsName,
               hc.strClinicalDiagnosis,
               hc.strClinicalNotes,
               hc.strSummaryNotes,
               hc.intPatientAge,
               hc.blnClinicalDiagBasis,
               hc.blnLabDiagBasis,
               hc.blnEpiDiagBasis,
               hc.idfPersonEnteredBy,
               hc.idfPointGeoLocation,
               gl.idfsGroundType AS idfsPointGroundType,
               gl.idfsGeoLocationType AS idfsPointGeoLocationType,
               gl.idfsCountry AS idfsPointCountry,
               gl.idfsRegion AS idfsPointRegion,
               gl.idfsRayon AS idfsPointRayon,
               gl.idfsSettlement AS idfsPointSettlement,
               gl.dblDistance AS dblPointDistance,
               gl.dblLatitude AS dblPointLatitude,
               gl.dblLongitude AS dblPointLongitude,
               gl.dblElevation AS dblPointElevation,
               gl.dblAlignment AS dblPointAlignment,
               gl.dblAccuracy AS dblPointAccuracy,
               gl.strForeignAddress AS strPointForeignAddress,
               hc.idfSentByPerson,
               hc.idfReceivedByPerson,
               hc.idfInvestigatedByPerson,
               hc.idfsYNTestsConducted,
               hc.idfSoughtCareFacility,
               hc.idfsNonNotifiableDiagnosis,
               NonNotifiableDiagnosisRef.name AS stridfsNonNotifiableDiagnosis,
               hc.idfOutbreak,
               hc.strCaseId,
               hc.idfsCaseProgressStatus,
               hc.idfsSite,
               hc.strSampleNotes,
               hc.uidOfflineCaseID,
               hc.datFinalCaseClassificationDate,
               hc.idfHospital,
               hc.idfsYNSpecificVaccinationAdministered,
               hc.idfsNotCollectedReason,
               hc.strNotCollectedReason,
               hc.idfsYNPreviouslySoughtCare,
               hc.idfsYNExposureLocationKnown,
               hc.datEnteredDate,
               hc.datModificationDate,
               hc.idfsFinalDiagnosis AS idfsDiagnosis, --possible duplicate
               hc.idfsFinalState,
               hc.DiseaseReportTypeID,
               ReportTypeRef.name AS 'ReportType',
               hc.LegacyCaseID,
               hc.datFinalCaseClassificationDate AS DateofClassification,
               o.strOutbreakID,
               o.strDescription,
               h.strPersonId,
               h.datDateOfDeath,
               RegionRef.[name] AS Region,
               RayonRef.[name] AS Rayon,
               HumanAgeRef.[name] AS HumanAgeType,
               OutcomeRef.[name] AS Outcome,
               NonNotifiableDiagnosisRef.[name] AS NonNotifiableDiagnosis,
               NotCollectedReasonRef.[name] AS NotCollectedReason,
               CaseProgressStatusRef.[name] AS CaseProgressStatus,
               SpecificVaccinationAdministered.[name] AS YNSpecificVaccinationAdministered,
               PreviouslySoughtCareRef.[name] AS PreviouslySoughtCare,
               ExposureLocationKnown.[name] AS YNExposureLocationKnown,
               HospitalizationStatusRef.[name] AS HospitalizationStatus,
               Hospitalization.[name] AS YNHospitalization,
               AntimicrobialTherapy.[name] AS YNAntimicrobialTherapy,
               SpecimenCollection.[name] AS YNSpecimenCollected,
               RelatedToOutBreak.[name] AS YNRelatedToOutBreak,
               tentativeDiagnosisRef.[name] AS TentativeDiagnosis,
               FinalDiagnosis.[name] AS SummaryIdfsFinalDiagnosis,
               InitialCaseClassification.[name] AS InitialCaseStatus,
               FinalCaseClassification.[name] AS FinalCaseStatus,
               SentByOfficeRef.LongName AS SentByOffice,
               ReceivedByOfficeRef.LongName AS ReceivedByOffice,
               HospitalRef.LongName AS HospitalName,
               InvestigateByOfficeRef.LongName AS InvestigatedByOffice,
               TestConducted.[name] AS YNTestConducted,
               MonitoringSession.strMonitoringSessionID,
               ExposureLocationTypeRef.[name] AS ExposureLocationType,
               groundTypeRef.[name] AS strGroundType,
               gl.strDescription AS ExposureLocationDescription,
               ISNULL(FinalCaseClassification.[name], InitialCaseClassification.[name]) AS SummaryCaseClassification,
               ISNULL(sentByPersonRef.strFamilyName, N'') + ISNULL(' ' + sentByPersonRef.strFirstName, '')
               + ISNULL(' ' + sentByPersonRef.strSecondName, '') AS SentByPerson,
               ISNULL(receivedByPersonRef.strFamilyName, N'') + ISNULL(' ' + receivedByPersonRef.strFirstName, '')
               + ISNULL(' ' + receivedByPersonRef.strSecondName, '') AS ReceivedByPerson,
               ISNULL(investigatedByPersonRef.strFamilyName, N'')
               + ISNULL(' ' + investigatedByPersonRef.strFirstName, '')
               + ISNULL(' ' + investigatedByPersonRef.strSecondName, '') AS InvestigatedByPerson,
               dbo.fnConcatFullName(
                                       personEnteredByRef.strFamilyName,
                                       personEnteredByRef.strFirstName,
                                       personEnteredByRef.strSecondName
                                   ) AS EnteredByPerson,
               tlbEnteredByOffice.name AS strOfficeEnteredBy,
               tlbEnteredByOffice.idfOffice AS idfOfficeEnteredBy,
               SentByOfficeRef.name AS strNotificationSentby,
               '' AS strNotificationReceivedby,
               PatientState.[name] AS PatientStatus,
               CountryRef.[name] AS Country,
               SettlementRef.[name] AS Settlement,
               ISNULL(ha.strFirstName, '') + ' ' + ISNULL(ha.strLastName, '') AS PatientFarmOwnerName,
               addinfo.EIDSSPersonID AS EIDSSPersonID,
               ha.idfHumanActual AS HumanActualId,
               initialSyndromicSurveielanceDiseases.blnSyndrome AS blnInitialSSD,
               finalSyndromicSurveielanceDiseases.blnSyndrome AS blnFinalSSD,
               relatedTo.RelateToHumanDiseaseReportID AS RelateToHumanDiseaseReportID,
               relatedToReport.strCaseID AS RelatedToHumanDiseaseEIDSSReportID,
               connectedTo.HumanDiseaseReportID AS ConnectedDiseaseReportID,
               connectedToReport.strCaseID AS ConnectedDiseaseEIDSSReportID,
			   hc.idfParentMonitoringSession
        FROM dbo.tlbHumanCase hc WITH (NOLOCK)
            LEFT JOIN dbo.tlbOutbreak AS o
                ON o.idfOutbreak = hc.idfOutbreak
            LEFT JOIN dbo.tlbHuman AS h
                ON h.idfHuman = hc.idfHuman
            LEFT JOIN dbo.tlbHumanActual AS ha
                ON ha.idfHumanActual = h.idfHumanActual
                   AND h.intRowStatus = 0
            LEFT JOIN dbo.HumanActualAddlInfo AS addinfo
                ON addinfo.HumanActualAddlInfoUID = h.idfHumanActual
                   AND addinfo.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation AS gl
                ON gl.idfGeoLocation = hc.idfPointGeoLocation
                   AND gl.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson AS sentByPersonRef
                ON sentByPersonRef.idfPerson = hc.idfSentByPerson
                   AND sentByPersonRef.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson AS receivedByPersonRef
                ON receivedByPersonRef.idfPerson = hc.idfReceivedByPerson
                   AND receivedByPersonRef.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson AS investigatedByPersonRef
                ON investigatedByPersonRef.idfPerson = hc.idfInvestigatedByPerson
                   AND investigatedByPersonRef.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson AS personEnteredByRef
                ON personEnteredByRef.idfPerson = hc.idfPersonEnteredBy
                   AND personEnteredByRef.intRowStatus = 0
            LEFT JOIN dbo.gisLocation L
                ON L.idfsLocation = gl.idfsLocation
            LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001) AS CountryRef
                ON L.node.IsDescendantOf(CountryRef.node) = 1
            LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003) AS RegionRef
                ON L.node.IsDescendantOf(RegionRef.node) = 1
            LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000002) AS RayonRef
                ON L.node.IsDescendantOf(RayonRef.node) = 1
            LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000004) AS SettlementRef
                ON L.node.IsDescendantOf(SettlementRef.node) = 1
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000042) AS HumanAgeRef
                ON HumanAgeRef.idfsReference = hc.idfsHumanAgeType
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000064) AS OutcomeRef
                ON OutcomeRef.idfsReference = hc.idfsOutcome
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS FinalDiagnosis
                ON FinalDiagnosis.idfsReference = hc.idfsFinalDiagnosis
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000011) AS InitialCaseClassification
                ON InitialCaseClassification.idfsReference = hc.idfsInitialCaseStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000011) AS FinalCaseClassification
                ON FinalCaseClassification.idfsReference = hc.idfsFinalCaseStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000149) AS NonNotifiableDiagnosisRef
                ON NonNotifiableDiagnosisRef.idfsReference = hc.idfsNonNotifiableDiagnosis
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000144) AS ReportTypeRef
                ON ReportTypeRef.idfsReference = hc.DiseaseReportTypeID
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS NotCollectedReasonRef
                ON NotCollectedReasonRef.idfsReference = hc.idfsNotCollectedReason
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000111) CaseProgressStatusRef
                ON CaseProgressStatusRef.idfsReference = hc.idfsCaseProgressStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS SpecificVaccinationAdministered
                ON SpecificVaccinationAdministered.idfsReference = hc.idfsYNSpecificVaccinationAdministered
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS PreviouslySoughtCareRef
                ON PreviouslySoughtCareRef.idfsReference = hc.idfsYNPreviouslySoughtCare
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS ExposureLocationKnown
                ON ExposureLocationKnown.idfsReference = hc.idfsYNExposureLocationKnown
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000041) AS HospitalizationStatusRef
                ON HospitalizationStatusRef.idfsReference = hc.idfsHospitalizationStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS Hospitalization
                ON Hospitalization.idfsReference = hc.idfsYNHospitalization
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS AntimicrobialTherapy
                ON AntimicrobialTherapy.idfsReference = hc.idfsYNAntimicrobialTherapy
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS SpecimenCollection
                ON SpecimenCollection.idfsReference = hc.idfsYNSpecimenCollected
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS RelatedToOutBreak
                ON RelatedToOutBreak.idfsReference = hc.idfsYNRelatedToOutbreak
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000036) AS ExposureLocationTypeRef
                ON ExposureLocationTypeRef.idfsReference = gl.idfsGeoLocationType
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS tentativeDiagnosisRef
                ON tentativeDiagnosisRef.idfsReference = hc.idfsTentativeDiagnosis
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000038) AS groundTypeRef
                ON groundTypeRef.idfsReference = gl.idfsGroundType
            LEFT JOIN dbo.tlbOffice RBO
                ON RBO.idfOffice = hc.idfReceivedByOffice
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) ReceivedByOfficeRef
                ON ReceivedByOfficeRef.idfsReference = RBO.idfsOfficeAbbreviation
            LEFT JOIN dbo.tlbOffice IBO
                ON IBO.idfOffice = hc.idfInvestigatedByOffice
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) InvestigateByOfficeRef
                ON InvestigateByOfficeRef.idfsReference = IBO.idfsOfficeAbbreviation
            LEFT JOIN dbo.tlbOffice SBO
                ON SBO.idfOffice = hc.idfSentByOffice
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) SentByOfficeRef
                ON SentByOfficeRef.idfsReference = SBO.idfsOfficeAbbreviation
            LEFT JOIN dbo.tlbOffice SoughtByOffice
                ON SBO.idfOffice = hc.idfSoughtCareFacility
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) SoughtByOfficeRef
                ON SoughtByOfficeRef.idfsReference = SoughtByOffice.idfsOfficeAbbreviation
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS TestConducted
                ON TestConducted.idfsReference = hc.idfsYNTestsConducted
            LEFT JOIN dbo.tlbMonitoringSession AS MonitoringSession
                ON MonitoringSession.idfMonitoringSession = hc.idfParentMonitoringSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000035) AS PatientState
                ON PatientState.idfsReference = hc.idfsFinalState
            LEFT JOIN dbo.tlbOffice Hospital
                ON Hospital.idfOffice = hc.idfHospital
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) HospitalRef
                ON HospitalRef.idfsReference = Hospital.idfsOfficeAbbreviation
            LEFT JOIN dbo.tstSite S
                ON S.idfsSite = hc.idfsSite
            LEFT JOIN dbo.FN_HUM_Institution_GET(@LangID) AS tlbEnteredByOffice
                ON tlbEnteredByOffice.idfOffice = S.idfOffice
                   AND tlbEnteredByOffice.idfsSite = hc.idfsSite
            LEFT JOIN dbo.trtDiagnosis AS finalSyndromicSurveielanceDiseases
                ON finalSyndromicSurveielanceDiseases.idfsDiagnosis = hc.idfsFinalDiagnosis
            LEFT JOIN dbo.trtDiagnosis AS initialSyndromicSurveielanceDiseases
                ON initialSyndromicSurveielanceDiseases.idfsDiagnosis = hc.idfsTentativeDiagnosis
            LEFT JOIN dbo.HumanDiseaseReportRelationship relatedTo
                ON relatedTo.HumanDiseaseReportID = hc.idfHumanCase
                   AND relatedTo.intRowStatus = 0
                   AND relatedTo.RelationshipTypeID = 10503001
            LEFT JOIN dbo.tlbHumanCase relatedToReport
                ON relatedToReport.idfHumanCase = relatedTo.RelateToHumanDiseaseReportID
                   AND relatedToReport.intRowStatus = 0
            LEFT JOIN dbo.HumanDiseaseReportRelationship connectedTo
                ON connectedTo.RelateToHumanDiseaseReportID = hc.idfHumanCase
                   AND connectedTo.intRowStatus = 0
                   AND connectedTo.RelationshipTypeID = 10503001
            LEFT JOIN dbo.tlbHumanCase connectedToReport
                ON connectedToReport.idfHumanCase = connectedTo.HumanDiseaseReportID
                   AND connectedToReport.intRowStatus = 0
        WHERE hc.idfHumanCase = @SearchHumanCaseId
              OR @SearchHumanCaseId IS NULL;
    END TRY
    BEGIN CATCH
        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_TESTS_GetList]...';


GO
-- ================================================================================================
-- Name: USP_HUM_TESTS_GetList
--
-- Description: List human disease report tests by human disease report identifier.
--          
-- Author: JWJ
--
-- Revision History:
-- Name	            Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- JWJ				20180603   created 
-- HAP				2018110    Added strTestResult field to result set 
-- HAP              20181109   Added TestValidation fields to result set 
-- LJM				20201230   Added strTestedByPerson and strTestedByOffice as output 
--                             parameters
-- LJM				20210105   Added strTestCategory and blnNonLaboratoryTest, 
--                             idfInterpretedByPerson,idfValidatedByPerson as output parameters.
-- Leo Tracchia		10/21/2022 Fix for properly deleting tests for human disease report DevOps 
--                             defect 5006
-- Stephen Long     01/04/2023 Added check for deleted test status.  Fixed main table to be
--                             tlbTesting and not the material table.  Changed to join.
-- Doug Albanese    01/06/2023 Removed the coalescing of null values on Interpreted and Validated 
--                             dates. They have to be done on the application side.
-- Stephen Long     01/09/2023 Fix to show the validated by person from tlbTesting when the test 
--                             record was created and updated from the laboratory module.
-- Stephen Long     01/16/2023 Fix to look at test status types when a laboratory assigned test 
--                             to determine if validated or not (final and amended status types).
-- Stephen Long     02/06/2023 Fix for bug 5620; removed unneeded joins and fields.
-- Mike Kornegay	03/17/2023 Added left join on test result types 19000096 and 19000162 (basic syndromic surveillance)
--
-- Testing code:
-- EXEC USP_HUM_TESTS_GetList 'en', @idfHumanCase=19  --10
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_TESTS_GetList]
    @LangID NVARCHAR(50),
    @idfHumanCase BIGINT = NULL,
    @SearchDiagnosis BIGINT = NULL
AS
BEGIN
    BEGIN TRY
        SELECT Samples.idfHumanCase,
               Samples.idfMaterial,
               Samples.strBarcode,          -- Lab sample ID
               Samples.strFieldBarcode,     -- Local Sample ID
               Samples.idfsSampleType,
               SampleType.name AS strSampleTypeName,
               Samples.datFieldCollectionDate,
               Samples.idfSendToOffice,
               Samples.idfFieldCollectedByOffice,
               Samples.datFieldSentDate,
               Samples.idfsSampleStatus,
               sampleStatus.name AS SampleStatusTypeName,
               Samples.idfFieldCollectedByPerson,
               Samples.datSampleStatusDate,
               Samples.rowGuid AS sampleGuid,
               t.idfTesting,
               t.idfsTestName,
               t.idfsTestCategory,
               testCat.name AS strTestCategory,
               t.idfsTestResult,
               t.idfsTestStatus,
               t.idfsDiagnosis,
               disease.name AS strDiagnosis,
               tstatus.name AS strTestStatus,
               tresult.name AS strTestResult,
               TestName.name,
               t.datReceivedDate,
               t.datConcludedDate,
               t.idfTestedByPerson,
               t.idfTestedByOffice,
			   tv.datInterpretationDate AS datInterpretedDate,
               tv.idfsInterpretedStatus,
               testinterpretedstatus.name AS strInterpretedStatus,
               tv.strInterpretedComment,
               ISNULL(interpretedByPerson.strFamilyName, N'') + ISNULL(', ' + interpretedByPerson.strFirstName, N'')
                   + ISNULL(' ' + interpretedByPerson.strSecondName, N'') AS strInterpretedBy,
               tv.datValidationDate AS datValidationDate,
               ISNULL(tv.blnValidateStatus, 0) AS blnValidateStatus,
               tv.strValidateComment,
               ISNULL(validatedByPerson.strFamilyName, N'') + ISNULL(', ' + validatedByPerson.strFirstName, N'')
                   + ISNULL(' ' + validatedByPerson.strSecondName, N'') AS strValidatedBy,
               t.rowGuid AS testGuid,
               t.intRowStatus,
               testedbyPerson.strFirstName + ' ' + ISNULL(testedbyPerson.strSecondName, '') + '  '
               + testedbyPerson.strFamilyName AS strTestedByPerson,
               testedByOffice.FullName AS strTestedByOffice,
               ISNULL(t.blnNonLaboratoryTest, 0) AS blnNonLaboratoryTest,
               tv.idfInterpretedByPerson,
               tv.idfValidatedByPerson AS idfValidatedByPerson,
               tv.idfTestValidation
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial Samples
                ON Samples.idfMaterial = t.idfMaterial
            INNER JOIN dbo.tlbHumanCase hc
                ON Samples.idfHumanCase = hc.idfHumanCase
            INNER JOIN dbo.FN_GBL_REFERENCEREPAIR(@LangID, 19000087) SampleType
                ON SampleType.idfsReference = Samples.idfsSampleType
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) disease
                ON disease.idfsReference = t.idfsDiagnosis
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000015) sampleStatus
                ON sampleStatus.idfsReference = Samples.idfsSampleStatus
            LEFT JOIN dbo.FN_GBL_REFERENCEREPAIR(@LangID, 19000097) TestName
                ON TestName.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000001) tstatus
                ON tstatus.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepairSplit(@LangID, '19000162, 19000096') tresult
				ON tresult.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.tlbTestValidation tv
                ON tv.idfTesting = t.idfTesting
                   AND tv.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson interpretedByPerson
                ON interpretedByPerson.idfPerson = tv.idfInterpretedByPerson
            LEFT JOIN dbo.tlbPerson testedbyPerson
                ON (testedbyPerson.idfPerson = t.idfTestedByPerson)
            LEFT JOIN dbo.FN_GBL_INSTITUTION(@LangID) testedByOffice
                ON testedByOffice.idfOffice = t.idfTestedByOffice
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000095) testCat
                ON testCat.idfsReference = t.idfsTestCategory
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000106) testinterpretedstatus
                ON testinterpretedstatus.idfsReference = tv.idfsInterpretedStatus
            LEFT JOIN dbo.tlbPerson validatedByPerson
                ON (validatedByPerson.idfPerson = tv.idfValidatedByPerson)
        WHERE Samples.idfHumanCase = @idfHumanCase
              AND Samples.intRowStatus = 0
              and t.idfHumanCase is not null
              AND t.intRowStatus = 0
              AND t.idfsTestStatus <> 10001007; -- Deleted
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[usp_SettlementType_GetLookup]...';


GO

--=====================================================================================================
-- Created by:				Joan Li
-- Last modified date:		06/07/2017
-- Last modified by:		Joan Li
-- Description:				06/07/2017:Created based on V6 spSettlementType_SelectLookup: rename for V7 USP49
--                          Select lookup data from tables: gisBaseReference;gisStringNameTranslation
--     
-- Testing code:
/*
----testing code:
exec usp_SettlementType_GetLookup 'en'
*/
-- Revision History:
-- Name					Date			Change Detail
-- ----------------		----------		-----------------------------------------------
-- Leo Tracchia			6/23/2022		added fields for translated string and order
-- Leo Tracchia			6/27/2022		added where for intRowStatus = 0
-- Mani Govindarajan    03/21/2023      Changed to FN_GBL_LanguageCode_GET

--=====================================================================================================

ALTER PROCEDURE [dbo].[usp_SettlementType_GetLookup]
	@LangID nvarchar(50) --##PARAM @LangID - language ID
AS
SELECT	
	gisBaseReference.idfsGISBaseReference AS idfsReference, 
	isnull(gisStringNameTranslation.strTextString, gisBaseReference.strDefault) AS [name],
	gisBaseReference.strDefault,
	gisBaseReference.intOrder,
	gisBaseReference.intRowStatus
FROM dbo.gisBaseReference 
LEFT JOIN gisStringNameTranslation  ON 
	gisBaseReference.idfsGISBaseReference = gisStringNameTranslation.idfsGISBaseReference
 	AND gisStringNameTranslation.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LangID)
	AND gisStringNameTranslation.intRowStatus = 0
WHERE	
	 gisBaseReference.idfsGISReferenceType = 19000005 --'SettlementType'
	 and gisBaseReference.intRowStatus = 0
ORDER BY intOrder, [name]
GO
PRINT N'Creating Procedure [dbo].[USP_ADMIN_EVENT_GETCount]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_EVENT_GETCount		
--
-- Description: Gets a count of event notifications for a user as defined in SAUC55 and SAUC56.
--
-- Author: Stephen Long
-- 
-- Revision History:
-- Name                        Date       Change Detail
-- --------------------------- ---------- --------------------------------------------------------
-- Stephen Long                03/17/2023 Initial release
-- ================================================================================================
CREATE PROCEDURE [dbo].[USP_ADMIN_EVENT_GETCount]
(
    @LanguageId NVARCHAR(50),
    @UserId BIGINT,
    @DaysFromReadDate INT
)
AS
BEGIN
    BEGIN TRY
        SELECT COUNT(e.idfEventID) AS EventCount
        FROM dbo.tstEvent e
            INNER JOIN dbo.trtEventType et
                ON et.idfsEventTypeID = e.idfsEventTypeID
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageId, 19000155) notificationType
                ON notificationType.idfsReference = et.idfsEventSubscription
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageId, 19000025) eventType
                ON eventType.idfsReference = e.idfsEventTypeID
        WHERE e.idfUserID = @UserId
              AND e.intProcessed = 0;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_DEDUPLICATION_HUMAN_DISEASE_Report_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_DEDUPLICATION_HUMAN_DISEASE_Report_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_Determinant_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_Determinant_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_Template_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_Template_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_AGG_REPORT_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_AGG_REPORT_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_AS_CAMPAIGN_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_AS_CAMPAIGN_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_AGEGROUPSTATISTICALAGEGROUPMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_AGEGROUPSTATISTICALAGEGROUPMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_AggregateSetting_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_AggregateSetting_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_CUSTOMREPORT_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_CUSTOMREPORT_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_DISEASEGROUPDISEASEMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_DISEASEGROUPDISEASEMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_DISEASEHUMANGENDERMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_DISEASEHUMANGENDERMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_HumanAggregateCaseMatrixReport_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_HumanAggregateCaseMatrixReport_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_HumanAggregateCaseMatrixVersion_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_HumanAggregateCaseMatrixVersion_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_PERSONALIDTYPEMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_PERSONALIDTYPEMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_REPORTDISEASEGROUPDISEASEMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_REPORTDISEASEGROUPDISEASEMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_SPECIESTYPEANIMALAGEMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_SPECIESTYPEANIMALAGEMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_VECTORTYPECOLLECTIONMETHODMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_VECTORTYPECOLLECTIONMETHODMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_VECTORTYPEFIELDTESTMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_VECTORTYPEFIELDTESTMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_VECTORTYPESAMPLETYPEMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_VECTORTYPESAMPLETYPEMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_VeterinaryAggregateCaseMatrixReport_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_VeterinaryAggregateCaseMatrixReport_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_VeterinaryDiagnosticInvestigationMatrixReport_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_VeterinaryDiagnosticInvestigationMatrixReport_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_VeterinaryProphylacticMatrixReport_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_VeterinaryProphylacticMatrixReport_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_VeterinarySanitaryActionMatrixReport_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_VeterinarySanitaryActionMatrixReport_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_LAB_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_LAB_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_Case_QuickSet]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_Case_QuickSet]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_Case_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_Case_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_Session_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_Session_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_AGEGROUP_DEL]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_AGEGROUP_DEL]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_AGEGROUP_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_AGEGROUP_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_BASEREFERENCE_DEL]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_BASEREFERENCE_DEL]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_BASEREFERENCE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_BASEREFERENCE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_CASECLASSIFICATION_DEL]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_CASECLASSIFICATION_DEL]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_CASECLASSIFICATION_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_CASECLASSIFICATION_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_DIAGNOSISREFERENCE_DEL]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_DIAGNOSISREFERENCE_DEL]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_DIAGNOSISREFERENCE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_DIAGNOSISREFERENCE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_MEASUREREFEFENCE_DEL]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_MEASUREREFEFENCE_DEL]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_MEASUREREFERENCE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_MEASUREREFERENCE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_REPORTDIAGNOSISGROUP_DEL]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_REPORTDIAGNOSISGROUP_DEL]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_REPORTDIAGNOSISGROUP_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_REPORTDIAGNOSISGROUP_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_SAMPLETYPEREFERENCE_DEL]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_SAMPLETYPEREFERENCE_DEL]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_SAMPLETYPEREFERENCE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_SAMPLETYPEREFERENCE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_SPECIESTYPE_DEL]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_SPECIESTYPE_DEL]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_SPECIESTYPE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_SPECIESTYPE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_STATISTICDATATYPE_DEL]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_STATISTICDATATYPE_DEL]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_STATISTICDATATYPE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_STATISTICDATATYPE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_VectorSubType_DEL]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_VectorSubType_DEL]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_VectorSubType_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_VectorSubType_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_VECTORTYPEREFERENCE_DEL]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_VECTORTYPEREFERENCE_DEL]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_VECTORTYPEREFERENCE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_VECTORTYPEREFERENCE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_SecurityConfiguration_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_SecurityConfiguration_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VCTS_SURVEILLANCE_SESSION_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VCTS_SURVEILLANCE_SESSION_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_Copy_Template]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_Copy_Template]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_FF_Copy_Template]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_FF_Copy_Template]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_DIAGNOSISREFERENCE_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_DIAGNOSISREFERENCE_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_CASECLASSIFICATION_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_CASECLASSIFICATION_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_LKUP_CASECLASSIFICATION]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_LKUP_CASECLASSIFICATION]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_SampleType_GetDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_SampleType_GetDetail]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_DIAGNOSISREFERENCE_GETDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_DIAGNOSISREFERENCE_GETDetail]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_LKUP_BASE_REFERENCE_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_LKUP_BASE_REFERENCE_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_BASEREFERENCE_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_BASEREFERENCE_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_ORG_GETDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_ORG_GETDetail]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_BASEREFERENCE_Filtered_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_BASEREFERENCE_Filtered_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_DISEASEGROUPDISEASEMATRIX_GETLIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_DISEASEGROUPDISEASEMATRIX_GETLIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_SPECIESTYPE_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_SPECIESTYPE_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_REPORTDISEASEGROUPDISEASEMATRIX_GETLIST]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_REPORTDISEASEGROUPDISEASEMATRIX_GETLIST]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_SampleTypeReference_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_SampleTypeReference_GetList]';


GO
PRINT N'Update complete.';


GO
