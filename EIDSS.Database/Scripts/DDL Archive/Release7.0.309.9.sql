/*
Deployment script for EIDSS7_GG

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO

USE [$(DatabaseName)];


GO

PRINT N'Altering Procedure [dbo].[USSP_OMM_HUMAN_SAMPLES_SET]...';


GO
--******************************************************************************************************************************
-- Name 				: USSP_OMM_HUMAN_SAMPLES_SET
-- Description			: add update delete Human Disease Report Samples
--          
-- Author               : JWJ
-- Revision History
--	Name			 Date		 Change Detail
--	--------------	 ----------	 -----------------------------------------------------------------------------------------------
--	Doug Albanese	 07/09/2019	 Created
--	Doug Albanese	 04/27/2022	 Refactored to include relative fields only
--	Doug Albanese	 10/04/2022	 Made corrections for RowAction to use the new numbering system
-- Doug Albanese	 10/25/2022	 Assignment of idfMaterialTemp was corrected to use SampleID
--******************************************************************************************************************************

ALTER PROCEDURE [dbo].[USSP_OMM_HUMAN_SAMPLES_SET]
	@idfHumanActual					BIGINT,
	@idfHumanCase					BIGINT,
	@SamplesParameters				NVARCHAR(MAX) = NULL,
	@TestsParameters				NVARCHAR(MAX) = NULL,
	@idfsFinalDiagnosis				BIGINT = NULL,
	@User							NVARCHAR(100) = NULL
AS
Begin
	SET NOCOUNT ON;
	
	DECLARE @idfMaterialTemp		BIGINT = NULL /*Temporary transfer when the insert occurs so that NEW tests are updated with the correct id*/

	/*This section is a copy from the USSP_OMM_HUMAN_TESTS_SET so that the idfMaterial, when created as a new ID, can be tied to the tests associated with it.*/
	DECLARE
		@idfHuman				BIGINT = NULL,
		@idfTesting				BIGINT = NULL,			--(Test Identity), tlbTesting: idfTesting
		@idfTestValidation		BIGINT = NULL,
		@idfMaterial			BIGINT = NULL,			--(Sample Identity), tlbMaterial: idfMaterial			
		@idfsSampleType			BIGINT = NULL,			--"Sample Type", tlbMaterial: idfsSampleType
		@strFieldBarcode		NVARCHAR(200) = NULL,	--"Field Sample ID", tlbMaterial: strFieldBarcode
		@strBarcode				NVARCHAR(200) = NULL,	--"Lab Sample ID", tlbMaterial: strBarCode
		@idfsTestName			BIGINT = NULL,			--"Test Name", tlbTesting: idfsTestName
		@idfsTestResult			BIGINT = NULL,			--"Test Result", tlbTesting: idfsTestResult
		@idfsTestStatus			BIGINT = NULL,			--"Test Status", tlbTesting: idfsTestStatus
		@datConcludedDate		DATETIME2 = NULL,		--"Test Name", tlbTesting: idfsTestName
		@idfsTestCategory		BIGINT = NULL,			--"Test Category", tlbTesting: idfsTestName
		@idfsInterpretedStatus	BIGINT = NULL,			--"Rule In / Rule Out", tlbTestValidation: idfsInterpretedStatus
		@strInterpretedComment	NVARCHAR(200) = NULL,	--"Comments", tlbTestValidation: strInterpretedComment
		@datInterpretationDate	DATETIME2 = NULL,		--"Date Interpreted", tlbTestValidation: datInterpretationDate
		@idfInterpretedByPerson	BIGINT = NULL,			--"Interpreted By", tlbTestValidation: idfInterpretedByPerson
		@blnValidateStatus		INT = NULL,				--"Validated (Y/N)", tlbTestValidation: blnValidateStatus
		@strValidateComment		NVARCHAR(200) = NULL,	--"Comments", tlbTestValidation: strValidateComment
		@datValidationDate		DATETIME2 = NULL,		--"Date Validated", tlbTestValidation: datValidationDate
		@idfValidatedByPerson	BIGINT = NULL,			--"Validated By", tlbTestValidation: idfValidatedByPerson
		@RowAction				INT = NULL,				--(Row Action), Designation for record manipulation... Delete, Read Only, Insert
		@intRowStatus			INT	= NULL				--(Row Status), Designation to indicate a deleted record (1 = Deleted, 0 = Active)

		SELECT
				TOP 1
				@idfHuman = idfHuman
		FROM
				tlbHuman
		WHERE
				idfHumanActual = @idfHumanActual
		ORDER BY 
				AuditCreateDTM DESC
		
		DECLARE  @TestsTemp TABLE (	
				TestID					BIGINT NULL, --
				SampleID				BIGINT NULL, --
				strFieldBarcode			NVARCHAR(200) NULL,
				strBarcode				NVARCHAR(200) NULL,
				TestNameTypeID			BIGINT NULL, --
				TestResultTypeID		BIGINT NULL, --
				TestStatusTypeID		BIGINT NULL,
				TestCategoryTypeID		BIGINT NULL,
				idfsInterpretedStatus	BIGINT NULL,
				strInterpretedComment	NVARCHAR(200) NULL,
				datInterpretationDate	DATETIME2 NULL,
				idfInterpretedByPerson	BIGINT NULL,
				blnValidateStatus		INT NULL,
				strValidateComment		NVARCHAR(200) NULL,
				datValidationDate		DATETIME2 NULL,
				idfValidatedByPerson	BIGINT NULL,
				RowAction				INT NULL
	)
	
	INSERT INTO	@TestsTemp 
	SELECT * FROM OPENJSON(@TestsParameters) 
			WITH (
				TestID					BIGINT, --
				SampleID				BIGINT, --
				strFieldBarcode			NVARCHAR(200),
				strBarcode				NVARCHAR(200),
				TestNameTypeID			BIGINT, --
				TestResultTypeID		BIGINT, --
				TestStatusTypeID		BIGINT, --
				TestCategoryTypeID		BIGINT,
				idfsInterpretedStatus	BIGINT,
				strInterpretedComment	NVARCHAR(200),
				datInterpretationDate	DATETIME2,
				idfInterpretedByPerson	BIGINT,
				blnValidateStatus		INT,
				strValidateComment		NVARCHAR(200),
				datValidationDate		DATETIME2,
				idfValidatedByPerson	BIGINT,
				RowAction				INT				
				);
   
	DECLARE
		@datFieldCollectionDate		DATETIME2 = NULL,
		@CollectedByOffice			NVARCHAR(200) = NULL,
		@idfFieldCollectedByOffice	BIGINT = NULL,
		@CollectedByPerson			NVARCHAR(200) = NULL,
		@idfFieldCollectedByPerson	BIGINT = NULL,
		@datFieldSentDate			DATETIME2 = NULL,
		@idfSendToOffice			BIGINT = NULL,
		@SentToOffice				NVARCHAR(200) = NULL,
		@strNote					NVARCHAR(500) = NULL
	
		SELECT
				TOP 1
				@idfHuman = idfHuman
		FROM
				tlbHuman
		WHERE
				idfHumanActual = @idfHumanActual
		ORDER BY 
				AuditCreateDTM DESC
		
	DECLARE  @SamplesTemp TABLE (	
			SampleID					BIGINT,
			SampleTypeID				BIGINT,
			EIDSSLocalOrFieldSampleID	NVARCHAR(200),
			CollectionDate				DATETIME2,
			CollectedByOrganizationID	BIGINT,
			CollectedByPersonID			BIGINT,
			SentDate					DATETIME2,
			SentToOrganizationID		BIGINT,
			Comments					NVARCHAR(500),
			RowStatus					INT,
			RowAction					INT			
	)
	
	INSERT INTO	@SamplesTemp 
	SELECT * FROM OPENJSON(@SamplesParameters) 
			WITH (
					SampleID					BIGINT,
					SampleTypeID				BIGINT,
					EIDSSLocalOrFieldSampleID	NVARCHAR(200),
					CollectionDate				DATETIME2,
					CollectedByOrganizationID	BIGINT,
					CollectedByPersonID			BIGINT,
					SentDate					DATETIME2,
					SentToOrganizationID		BIGINT,
					Comments					NVARCHAR(500),
					RowStatus					INT,
					RowAction					INT	
				);
	BEGIN TRY  
		WHILE EXISTS (SELECT * FROM @SamplesTemp)
			BEGIN
				SELECT TOP 1
					@idfMaterial = SampleID,
					@idfMaterialTemp = SampleID,
					@idfsSampleType = SampleTypeID,
					@strFieldBarcode = EIDSSLocalOrFieldSampleID,
					@datFieldCollectionDate = CollectionDate,
					@idfFieldCollectedByOffice = CollectedByOrganizationID,
					@idfFieldCollectedByPerson = CollectedByPersonID,
					@datFieldSentDate = SentDate,
					@idfSendToOffice = SentToOrganizationID,
					@strNote = Comments,
					@intRowStatus = RowStatus,
					@RowAction = RowAction					
				FROM @SamplesTemp

				--Because of different App-Side usage, the following will force the upcoming record existence test to abide by the negative number test
				IF @RowAction = 1 --INSERT
				  BEGIN
					 SET @idfMaterial = -1
				  END

				IF NOT EXISTS(SELECT TOP 1 idfMaterial FROM tlbMaterial WHERE idfMaterial = @idfMaterial)
					BEGIN
						EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbMaterial', @idfMaterial OUTPUT;

						/*Update any associated new Test with the  new Sample being inserted*/
						UPDATE @TestsTemp
						SET SampleID = @idfMaterial
						WHERE SampleID = @idfMaterialTemp

						INSERT INTO		dbo.tlbMaterial
						(						
							idfHumanCase,
							idfHuman,
							idfMaterial,
							idfsSampleType,
							strFieldBarcode,
							datFieldCollectionDate,
							idfFieldCollectedByOffice,
							idfFieldCollectedByPerson,
							datFieldSentDate,
							idfSendToOffice,
							strNote,
							intRowStatus,
							AuditCreateUser,
							AuditCreateDTM
						)
						VALUES
						(					
							@idfHumanCase,
							@idfHuman,
							@idfMaterial,
							@idfsSampleType,
							@strFieldBarcode,
							@datFieldCollectionDate,
							@idfFieldCollectedByOffice,
							@idfFieldCollectedByPerson,
							@datFieldSentDate,
							@idfSendToOffice,
							@strNote,
							@intRowStatus,
							@User,
							GETDATE()
						)
					END
				ELSE
					BEGIN
						IF @RowAction = 3 --DELETE
							BEGIN
								SET @intRowStatus = 1
							END
						ELSE
							BEGIN
								SET @intRowStatus = 0
							END

						UPDATE dbo.tlbMaterial
						SET 
							idfsSampleType = @idfsSampleType,
							strFieldBarcode = @strFieldBarcode,
							datFieldCollectionDate = @datFieldCollectionDate,
							idfFieldCollectedByOffice = @idfFieldCollectedByOffice,
							idfFieldCollectedByPerson = @idfFieldCollectedByPerson,
							datFieldSentDate = @datFieldSentDate,
							idfSendToOffice = @idfSendToOffice,
							strNote = @strNote,
							intRowStatus = @intRowStatus,
							AuditUpdateUser = @User,
							AuditUpdateDTM = GETDATE()
						WHERE	
							idfMaterial = @idfMaterial
					END
					
					SET ROWCOUNT 1						
					DELETE FROM @SamplesTemp
					SET ROWCOUNT 0
			END	

		SET @TestsParameters =
			(SELECT
				TestID,
				SampleID,
				strFieldBarcode,
				strBarcode,
				TestNameTypeID,
				TestResultTypeID,
				TestStatusTypeID,
				TestCategoryTypeID,
				idfsInterpretedStatus,
				strInterpretedComment,
				datInterpretationDate,
				idfInterpretedByPerson,
				blnValidateStatus,
				strValidateComment,
				datValidationDate,
				idfValidatedByPerson,
				RowAction
			FROM
				@TestsTemp
			FOR JSON PATH)

		If @TestsParameters IS NOT NULL
			EXEC USSP_OMM_HUMAN_TESTS_SET @idfsFinalDiagnosis, @idfHumanActual, @idfHumanCase,@TestsParameters, @User = @User;

	END TRY
	BEGIN CATCH
		THROW;
		
	END CATCH
END
GO
PRINT N'Altering Procedure [Report].[USP_REP_Veterinary_Aggregate_ProphylacticAction_Summary_Report_Detail]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USP_REP_Veterinary_Aggregate_ProphylacticAction_Summary_Report_Detail
-- Description: PrintedForm Veterinary Aggregate Report
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Mark Wilson		10/11/2022  initial cut.
-- Mike Kornegay	10/17/2022	Remove temp table (not compatible with EF Power Tools)
-- Mike Kornegay	10/25/2022  Separate numerical results from string results
/*

EXEC    [Report].[USP_REP_Veterinary_Aggregate_ProphylacticAction_Summary_Report_Detail]
        @LangID = N'en-US',
        @idfAggrCaseList = '128822070001294;127398630001294;121195250001294'

*/
-- ================================================================================================
ALTER PROCEDURE [Report].[USP_REP_Veterinary_Aggregate_ProphylacticAction_Summary_Report_Detail] 
(
	@LangID AS NVARCHAR(50),
	@idfAggrCaseList AS  NVARCHAR(MAX)= NULL
)
AS
BEGIN
	DROP TABLE IF EXISTS #tmpDetails;

	DECLARE @idfsCountry AS BIGINT,
			@idfsLanguage BIGINT = dbo.FN_GBL_LanguageCode_GET(@LangID);

	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

	DECLARE @AggrCaseTable TABLE (
		[idfAggrCase] BIGINT,
		[intRowNumber] INT
		)

	--Get Selected Agg Cases
	INSERT INTO @AggrCaseTable (
			[idfAggrCase],
			[intRowNumber]
			)
	SELECT CAST([Value] AS BIGINT),
		ROW_NUMBER() OVER (
			ORDER BY [Value]
			)
	FROM [dbo].[FN_GBL_SYS_SplitList](@idfAggrCaseList, NULL, NULL)

	DECLARE @tmpMatrix AS TABLE (
		intNumRow INT
		,idfAggrVetCaseMTX BIGINT
		,idfsDiagnosis BIGINT
		,idfsSpeciesType BIGINT
		,strDefault NVARCHAR(2000)
		,strOIECode NVARCHAR(100)
		,strActionCode NVARCHAR(200)
		,strAction NVARCHAR(300)
		)

   DECLARE @tempFlexForm TABLE (
		idfsParentSection BIGINT
		,idfsSection BIGINT
		,idfsParameter BIGINT
		,SectionName NVARCHAR(2000)
		,ParameterName NVARCHAR(500)
		,parameterType NVARCHAR(100)
		,idfsParameterType BIGINT
		,idfsReferenceType BIGINT
		,idfsEditor BIGINT
		,SectionOrder INT
		,ParameterOrder INT
		,blnGrid BIT
		,blnFixedRowSet BIT
		,idfsEditMode BIGINT
		,idfsFormTemplate BIGINT
		)

	DECLARE @observationsTable TABLE (
		[idfProphylacticObservation] BIGINT,
		[idfProphylacticVersion] BIGINT,
		[idfsCaseFormTemplate] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpActivityParameters TABLE (
		[idfActivityParameters] BIGINT,
		[idfObservation] BIGINT,
		[idfsFormTemplate] BIGINT,
		[idfsParameter] BIGINT,
		[idfsSection] BIGINT,
		[idfRow] BIGINT,
		[Type] BIGINT,
		[intValue] INT,
		[varValue] sql_variant, --NVARCHAR(MAX),
		[numRow] INT,
		[ParameterType]  BIGINT
		)

	DECLARE @tmpSpeciesList TABLE (
		[idfBaseReference] BIGINT,
		strDefault NVARCHAR(2000),
		strSpecies NVARCHAR(100),
		[intRowNumber] INT
		)

	DECLARE @tmpDetails TABLE (
		idfProphylacticObservation BIGINT,
		idfsCaseFormTemplate BIGINT,
		idfProphylacticVersion BIGINT
	)

	DECLARE @FinalReportTable TABLE 
	(
		ParameterName NVARCHAR(300),
		strSpecies NVARCHAR(300),
		idfsParameter BIGINT,
		ParameterOrder INT,
		idfsDiagnosis BIGINT,
		strDefault NVARCHAR(300),
		strOIECode NVARCHAR(300),
		numRow INT,
		intValue INT,
		varValue SQL_VARIANT,
		strActionCode NVARCHAR(300),
		strAction NVARCHAR(300)
	)

	BEGIN TRY

			BEGIN


				--Get this SQl from [dbo].[USP_AGG_CASE_GETDETAIL]
				INSERT INTO @tmpDetails
				SELECT 
					a.idfProphylacticObservation
					,CaseObs.idfsFormTemplate AS idfsCaseFormTemplate
					,a.idfProphylacticVersion
				--INTO #tmpDetails
				FROM dbo.tlbAggrCase a	
				LEFT JOIN dbo.tlbObservation CaseObs ON a.idfProphylacticObservation = CaseObs.idfObservation
				WHERE a.intRowStatus = 0
				AND a.idfAggrCase IN (SELECT idfAggrCase FROM @AggrCaseTable)

				DECLARE @idfsFormTemplate BIGINT,
						@idfVersion BIGINT

				INSERT INTO @observationsTable (
					[idfProphylacticObservation],
					[idfProphylacticVersion],
					[idfsCaseFormTemplate],
					[intRowNumber]
					)
				SELECT [idfProphylacticObservation],
					idfProphylacticVersion,
					idfsCaseFormTemplate,
					ROW_NUMBER() OVER (
						ORDER BY [idfProphylacticObservation]
						)
				FROM @tmpDetails

				SELECT @idfsFormTemplate=idfsCaseFormTemplate, 
						@idfVersion= idfProphylacticVersion
				FROM @observationsTable
				--SELECT * FROM @observationsTable

				--Get this SQL from USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GET -- dbo.USP_CONF_ADMIN_AggregateHumanCaseMatrixReport_GET
				INSERT INTO @tmpMatrix
				SELECT	 
					mtx.intNumRow as intNumRow,
					mtx.idfAggrProphylacticActionMTX,
					mtx.idfsDiagnosis,
					mtx.idfsSpeciesType,
					D.name AS strDefault,
					D.strOIECode,
					PAC.strActionCode,
					PA.name AS strAction

				FROM dbo.tlbAggrProphylacticActionMTX mtx
				INNER JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID, 19000074) PA ON PA.idfsReference = mtx.idfsProphilacticAction
				INNER JOIN dbo.trtProphilacticAction PAC ON PAC.idfsProphilacticAction = PA.idfsReference
				INNER JOIN dbo.FN_GBL_DiagnosisRepair(@LangID, 96, 10020002) D ON D.idfsDiagnosis = mtx.idfsDiagnosis  -- 2 = Human, use 10020002 for Aggregate cases

				WHERE mtx.intRowStatus = 0 AND  mtx.idfVersion = @idfVersion
				ORDER BY mtx.intNumRow ASC

--------------------------------------------------------------------------------------------------------------------------------
				--SpicesList
				INSERT INTO @tmpSpeciesList
				EXEC dbo.USP_CONF_GetSpeciesList_GET 
						@idfsBaseReference= 19000086,
						@intHACode=96,
						@strLanguageID=@LangID --@idfVersion=19000086
				
				--Get Flex Form for Prophylactic Actions details
				INSERT INTO @tempFlexForm
				SELECT 
					s.idfsParentSection
					,COALESCE(p.idfsSection,0) AS idfsSection
					,p.idfsParameter
					,RF.Name AS SectionName
					,PN.Name AS ParameterName
					,PTR.Name AS parameterType
					,p.idfsParameterType
					,pt.idfsReferenceType
					,p.idfsEditor
					,sdo.intOrder	AS SectionOrder
					,PDO.intOrder	AS ParameterOrder
					,s.blnGrid
					,s.blnFixedRowSet
					,PFT.idfsEditMode
					,pft.idfsFormTemplate
				FROM dbo.ffParameter p
				LEFT JOIN dbo.ffParameterForTemplate PFT ON PFT.idfsParameter = p.idfsParameter AND PFT.intRowStatus = 0
				LEFT JOIN dbo.ffSection s ON s.idfsSection = p.idfsSection
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000101) RF ON S.idfsSection = RF.idfsReference
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000071) PTR ON PTR.idfsReference = P.idfsParameterType
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000066) PN ON PN.idfsReference = P.idfsParameter
				LEFT JOIN dbo.ffParameterDesignOption PDO ON PFT.idfsParameter = PDO.idfsParameter
					AND PFT.idfsFormTemplate = PDO.idfsFormTemplate
					AND PDO.idfsLanguage = @idfsLanguage
					AND PDO.intRowStatus = 0
				LEFT JOIN dbo.ffSectionDesignOption sdo ON sdo.idfsSection = s.idfsSection 
					AND sdo.idfsFormTemplate = @idfsFormTemplate 
					AND sdo.idfsLanguage = @idfsLanguage
					AND sdo.intRowStatus = 0
				LEFT JOIN dbo.ffParameterType PT
					ON pt.idfsParameterType = p.idfsParameterType
				WHERE PFT.idfsFormTemplate = @idfsFormTemplate


				--EXEC [dbo].[USP_ADMIN_FF_FlexForm_Get] 
				--		@LangID =@LangID, 
				--		@idfsDiagnosis= NULL, 
				--		@idfsFormType = 10034023, 
				--		@idfsFormTemplate=@idfsFormTemplate

--				SELECT * FROM @tempFlexForm

				--Get Activity Parameters
				--INSERT INTO @tmpActivityParameters
				--EXEC dbo.USP_ADMIN_FF_ActivityParameters_GET
				--		@observationList = @observationList, 
				--		@LangID = @LangID

				--Get numeric values activity parameters
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[intValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					SUM(CAST(AP.varValue AS INT)),
					--CAST(AP.varValue AS NVARCHAR(MAX)),
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfProphylacticObservation FROM @observationsTable)
				AND ISNUMERIC(CAST(AP.varValue AS NVARCHAR)) = 1
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0

				GROUP BY
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					P.idfsParameterType
				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow

				--Get non-numeric values activity parameters
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[varValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					AP.varValue,
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfProphylacticObservation FROM @observationsTable)
				AND ISNUMERIC(CAST(AP.varValue AS NVARCHAR)) = 0
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0

				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow

				--Report
				--numeric items
				INSERT INTO @FinalReportTable
				(
					ParameterName,
				    strSpecies,
				    idfsParameter,
				    ParameterOrder,
				    idfsDiagnosis,
				    strDefault,
				    strOIECode,
				    numRow,
				    strActionCode,
					strAction,
					intValue
				)

				SELECT	ff.ParameterName
						,sl.strSpecies
						,ff.idfsParameter
						,ff.ParameterOrder
						,m.idfsDiagnosis
						,m.strDefault
						,m.strOIECode
						,m.intNumRow
						,m.strActionCode
						,m.strAction
						,SUM(intValue)
						--,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')

				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter AND m.idfAggrVetCaseMTX=ap.idfRow
				LEFT JOIN @tmpSpeciesList sl ON sl.idfBaseReference=m.idfsSpeciesType
				GROUP BY
					ff.ParameterName
					,sl.strSpecies
					,ff.idfsParameter
					,ff.ParameterOrder
					,m.idfsDiagnosis
					,m.strDefault
					,m.strOIECode
					,m.intNumRow
					,m.strActionCode
					,m.strAction
					--,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')
				ORDER BY intNumRow

				--non numeric items
				INSERT INTO @FinalReportTable
				(
					ParameterName,
				    strSpecies,
				    idfsParameter,
				    ParameterOrder,
				    idfsDiagnosis,
				    strDefault,
				    strOIECode,
				    numRow,
				    strActionCode,
					strAction,
					varValue
				)

				SELECT	ff.ParameterName
						,sl.strSpecies
						,ff.idfsParameter
						,ff.ParameterOrder
						,m.idfsDiagnosis
						,m.strDefault
						,m.strOIECode
						,m.intNumRow
						,m.strActionCode
						,m.strAction
						,ap.varValue
						--,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')

				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter AND m.idfAggrVetCaseMTX=ap.idfRow
				LEFT JOIN @tmpSpeciesList sl ON sl.idfBaseReference=m.idfsSpeciesType
				WHERE ap.varValue IS NOT NULL
				
				ORDER BY intNumRow

				--final query
				SELECT 
					ParameterName,
					strSpecies,
					idfsParameter,
					ParameterOrder,
					idfsDiagnosis,
					strDefault,
					strOIECode,
					numRow AS intNumRow,
					strAction,
					strActionCode,
					CAST(intValue AS NVARCHAR(300)) AS varValue
					
				FROM @FinalReportTable
				WHERE varValue IS NULL

				UNION ALL 

				SELECT
					DISTINCT t.ParameterName,
					t.strSpecies,
					t.idfsParameter,
					t.ParameterOrder,
					t.idfsDiagnosis,
					t.strDefault,
					t.strOIECode,
					t.numRow AS intNumRow,
					strAction,
					strActionCode,
					STUFF((SELECT distinct ', ' + CAST(t1.varValue AS NVARCHAR(300))
						 FROM @FinalReportTable t1
						 WHERE t.ParameterName = t1.ParameterName
						 AND t.strSpecies = t1.strSpecies
						 AND t.idfsParameter = t1.idfsParameter
						 AND t.ParameterOrder = t1.ParameterOrder
						 AND t.idfsDiagnosis = t1.idfsDiagnosis
						 AND t.strDefault = t1.strDefault
						 AND t.strOIECode = t1.strOIECode
						 FOR XML PATH(''), TYPE
							).value('.', 'NVARCHAR(MAX)') 
						,1,2,'') varValue
				from @FinalReportTable t
				WHERE t.varValue IS NOT NULL;				
			END

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT = 1
			ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Procedure [dbo].[USP_VCTS_DetailedCollections_Copy]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
--*************************************************************
-- Name 				: USP_VCTS_DetailedCollections_Copy
-- Description			: Create replicas of the given idfVector ids
--          
-- Author               : Doug Albanese
-- Revision History
--	Name			Date			Change Detail
--  Doug Albanese	01/21/2020		Initial Creation
-- Doug Albanese	11/5/2020		Re-worked to get the copy to associate samples and tests for the new vector.
-- Doug Albanese	 10/20/2022		Create parameters to denote which parts of a vector, needs to be copyied.
--									Also changed the SP name to conform to standards
--*************************************************************

CREATE PROCEDURE [dbo].[USP_VCTS_DetailedCollections_Copy]
(
    @idfVector							  BIGINT,
	@VectorData							  BIT = 0,
	@Samples							  BIT = 0,
	@Tests								  BIT = 0
)

AS 

BEGIN
	DECLARE @returnCode						INT = 200
	DECLARE	@returnMsg						NVARCHAR(max) = 'SUCCESS' 
	DECLARE @idfVectorNew					BIGINT

	DECLARE @SupressSelect TABLE
	( retrunCode INT,
		returnMsg NVARCHAR(200)
	)

	DECLARE @idfMaterials TABLE (
		idfMaterial BIGINT
	);

	DECLARE @idfTestings TABLE (
		idfTesting BIGINT,
		idfMaterial BIGINT
	);

	IF @Samples = 1
	  BEGIN
		 INSERT INTO @idfMaterials
			SELECT
			   DISTINCT idfMaterial
			FROM
			   tlbMaterial
			WHERE
			   idfVector = @idfVector
	  
		 IF @Tests = 1
			BEGIN
			   INSERT INTO @idfTestings
				  SELECT
					 DISTINCT idfTesting, idfMaterial
				  FROM
					 tlbTesting
				  WHERE
					 idfMaterial IN (
						   SELECT
							  idfMaterial
						   FROM
							  @idfMaterials
					 )
			END
	  END

	DECLARE @rowId							BIGINT
	DECLARE @idfMaterial					BIGINT
	DECLARE @idfMaterialNew					BIGINT
	DECLARE @idfVectorSurveillanceSession	BIGINT
	DECLARE @idfHostVector					BIGINT = NULL
	DECLARE @strVectorID					NVARCHAR(50)
	DECLARE @strFieldVectorID				NVARCHAR(50) = NULL
	DECLARE @idfLocation					BIGINT = NULL
	DECLARE @intElevation					BIGINT = NULL
	DECLARE @idfsSurrounding				BIGINT = NULL
	DECLARE @strGEOReferenceSources			NVARCHAR(500) = NULL
	DECLARE @idfCollectedByOffice			BIGINT
	DECLARE @idfCollectedByPerson			BIGINT = NULL
	DECLARE @datCollectionDateTime			DATETIME
	DECLARE @idfsCollectionMethod			BIGINT = NULL
	DECLARE @idfsBasisOfRecord				BIGINT = NULL
	DECLARE @idfsVectorType					BIGINT
	DECLARE @idfsVectorSubType				BIGINT
	DECLARE @intQuantity					INT
	DECLARE @idfsSex						BIGINT = NULL
	DECLARE @idfIdentIFiedByOffice			BIGINT = NULL
	DECLARE @idfIdentIFiedByPerson			BIGINT = NULL
	DECLARE @datIdentIFiedDateTime			DATETIME = NULL
	DECLARE @idfsIdentIFicationMethod		BIGINT = NULL
	DECLARE @idfObservation					BIGINT = NULL
	DECLARE @idfsDayPeriod					BIGINT = NULL
	DECLARE @strComment						NVARCHAR(500) = NULL
	DECLARE @idfsEctoparASitesCollected		BIGINT = NULL

	DECLARE @idfsSampleType 				BIGINT
	DECLARE @idfRootMaterial 				BIGINT = NULL
	DECLARE @idfParentMaterial 				BIGINT = NULL
	DECLARE @idfHuman 						BIGINT = NULL
	DECLARE @idfSpecies 					BIGINT = NULL
	DECLARE @idfAnimal 						BIGINT = NULL
	DECLARE @idfMonitoringSession 			BIGINT = NULL
	DECLARE @idfFieldCollectedByPerson 		BIGINT = NULL
	DECLARE @idfFieldCollectedByOffice 		BIGINT = NULL
	DECLARE @idfMainTest 					BIGINT = NULL
	DECLARE @datFieldCollectionDate 		DATETIME = NULL
	DECLARE @datFieldSentDate 				DATETIME = NULL
	DECLARE @strFieldBarcode 				NVARCHAR(200) = NULL
	DECLARE @strCalculatedCaseID 			NVARCHAR(200) = NULL
	DECLARE @strCalculatedHumanName 		NVARCHAR(700) = NULL
	DECLARE @idfSubdivision 				BIGINT = NULL	
	DECLARE @idfsSampleStatus 				BIGINT = NULL
	DECLARE @idfInDepartment 				BIGINT = NULL
	DECLARE @idfDestroyedByPerson 			BIGINT = NULL
	DECLARE @datEnteringDate 				DATETIME = NULL
	DECLARE @datDestructionDate 			DATETIME = NULL
	DECLARE @strBarcode 					NVARCHAR(200) = NULL
	DECLARE @strNote 						NVARCHAR(500) = NULL
	DECLARE @idfsSite 						BIGINT
	DECLARE @intRowStatus 					INT = 0
	DECLARE @idfSendToOffice 				BIGINT = NULL
	DECLARE @blnReadOnly 					BIT
	DECLARE @idfsBirdStatus 				BIGINT = NULL
	DECLARE @idfHumanCase 					BIGINT = NULL
	DECLARE @idfVetCase 					BIGINT = NULL
	DECLARE @datAccession 					DATETIME = NULL
	DECLARE @idfsAccessionCondition 		BIGINT = NULL
	DECLARE @strCondition 					NVARCHAR(200) = NULL
	DECLARE @idfAccesionByPerson 			BIGINT = NULL
	DECLARE @idfsDestructionMethod 			BIGINT = NULL
	DECLARE @idfsCurrentSite 				BIGINT = NULL
	DECLARE @idfsSampleKind 				BIGINT = NULL
	DECLARE @idfMarkedForDispositionByPerson BIGINT = NULL
	DECLARE @datOutOfRepositoryDate 		DATETIME = NULL
	DECLARE @strMaintenanceFlag 			NVARCHAR(20) = NULL

	DECLARE @idfTesting						BIGINT
	DECLARE @idfTestingNew					BIGINT
	DECLARE @idfsTestName					BIGINT = NULL
	DECLARE @idfsTestCategory				BIGINT = NULL
	DECLARE @idfsTestResult					BIGINT = NULL
	DECLARE @idfsTestStatus					BIGINT
	DECLARE @idfsDiagnosis					BIGINT
	DECLARE @idfBatchTest					BIGINT = NULL
	DECLARE @intTestNumber					INT = NULL
	DECLARE @datStartedDate					DATETIME = NULL
	DECLARE @datConcludedDate				DATETIME = NULL
	DECLARE @idfTestedByOffice				BIGINT = NULL
	DECLARE @idfTestedByPerson				BIGINT = NULL
	DECLARE @idfResultEnteredByOffice		BIGINT = NULL
	DECLARE @idfResultEnteredByPerson		BIGINT = NULL
	DECLARE @idfValidatedByOffice			BIGINT = NULL
	DECLARE @idfValidatedByPerson			BIGINT = NULL
	DECLARE @blnNonLaboratoryTest			BIT
	DECLARE @blnExternalTest				BIT = NULL
	DECLARE @idfPerformedByOffice			BIGINT = NULL
	DECLARE @datReceivedDate				DATETIME = NULL
	DECLARE @strContactPerson				NVARCHAR(200) = NULL

	BEGIN TRY
		 BEGIN
			   SELECT
					 @idfVectorSurveillanceSession = idfVectorSurveillanceSession, 
					 @idfHostVector = idfHostVector, 
					 @strFieldVectorID = strFieldVectorID, 
					 @idfLocation = idfLocation, 
					 @intElevation = intElevation, 
					 @idfsSurrounding = idfsSurrounding, 
					 @strGEOReferenceSources = strGEOReferenceSources, 
					 @idfCollectedByOffice = idfCollectedByOffice, 
					 @idfCollectedByPerson = idfCollectedByPerson, 
					 @datCollectionDateTime = datCollectionDateTime, 
					 @idfsCollectionMethod = idfsCollectionMethod, 
					 @idfsBASisOfRecord = idfsBASisOfRecord, 
					 @idfsVectorType = idfsVectorType, 
					 @idfsVectorSubType = idfsVectorSubType, 
					 @intQuantity = intQuantity, 
					 @idfsSex = idfsSex, 
					 @idfIdentIFiedByOffice = idfIdentIFiedByOffice, 
					 @idfIdentIFiedByPerson = idfIdentIFiedByPerson, 
					 @datIdentIFiedDateTime = datIdentIFiedDateTime, 
					 @idfsIdentIFicationMethod = idfsIdentIFicationMethod, 
					 @idfObservation = idfObservation,
					 @idfsDayPeriod = idfsDayPeriod,
					 @strComment = strComment,
					 @idfsEctoparASitesCollected = idfsEctoparASitesCollected
			   FROM
				  tlbVector
			   WHERE
					 idfVector = @idfVector

			   INSERT INTO @SupressSelect
			   EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbVector', @idfVectorNew OUTPUT

			   INSERT INTO @SupressSelect
			   EXEC dbo.USP_GBL_NextNumber_GET 'Vector Surveillance Vector', @strVectorID OUTPUT , NULL --N'AS Session'

			   INSERT INTO dbo.tlbVector
				  (
						idfVector, 
						idfVectorSurveillanceSession, 
						idfHostVector, 
						strVectorID, 
						strFieldVectorID, 
						idfLocation, 
						intElevation, 
						idfsSurrounding, 
						strGEOReferenceSources, 
						idfCollectedByOffice, 
						idfCollectedByPerson, 
						datCollectionDateTime, 
						idfsCollectionMethod, 
						idfsBasisOfRecord, 
						idfsVectorType, 
						idfsVectorSubType, 
						intQuantity, 
						idfsSex, 
						idfIdentIFiedByOffice, 
						idfIdentIFiedByPerson, 
						datIdentIFiedDateTime, 
						idfsIdentIFicationMethod, 
						idfObservation
						,idfsDayPeriod
						,strComment
						,idfsEctoparASitesCollected
				  )
			   VALUES
				  (
						@idfVectorNew, 
						@idfVectorSurveillanceSession, 
						@idfHostVector, 
						@strVectorID, 
						@strFieldVectorID, 
						@idfLocation, 
						@intElevation, 
						@idfsSurrounding, 
						@strGEOReferenceSources, 
						@idfCollectedByOffice, 
						@idfCollectedByPerson, 
						@datCollectionDateTime, 
						@idfsCollectionMethod, 
						@idfsBasisOfRecord, 
						@idfsVectorType, 
						@idfsVectorSubType, 
						@intQuantity, 
						@idfsSex, 
						@idfIdentifiedByOffice, 
						@idfIdentIFiedByPerson, 
						@datIdentIFiedDateTime, 
						@idfsIdentIFicationMethod, 
						@idfObservation,
						@idfsDayPeriod,
						@strComment,
						@idfsEctoparASitesCollected
			   )
		 END;
		
		 IF @Samples = 1
			BEGIN
			   WHILE EXISTS ( SELECT * FROM @idfMaterials )
				  BEGIN
					 SELECT
						TOP 1
						@rowId = idfMaterial
					 FROM 
						@idfMaterials

					 SELECT
						@idfsSampleType = idfsSampleType, 
						@idfRootMaterial = idfRootMaterial, 
						@idfParentMaterial = idfParentMaterial, 
						@idfHuman = idfHuman, 
						@idfSpecies = idfSpecies, 
						@idfAnimal = idfAnimal, 
						@idfMonitoringSession = idfMonitoringSession, 
						@idfFieldCollectedByPerson = idfFieldCollectedByPerson, 
						@idfFieldCollectedByOffice = idfFieldCollectedByOffice, 
						@idfMainTest = idfMainTest, 
						@datFieldCollectionDate = datFieldCollectionDate, 
						@datFieldSentDate = datFieldSentDate, 
						@strFieldBarcode = strFieldBarcode, 
						@strCalculatedCaseID = strCalculatedCaseID, 
						@strCalculatedHumanName = strCalculatedHumanName, 
						@idfVectorSurveillanceSession = idfVectorSurveillanceSession, 
						@idfVector = @idfVectorNew, 
						@idfSubdivision = idfSubdivision, 
						@idfsSampleStatus = idfsSampleStatus, 
						@idfInDepartment = idfInDepartment, 
						@idfDestroyedByPerson = idfDestroyedByPerson, 
						@datEnteringDate = datEnteringDate, 
						@datDestructionDate = datDestructionDate, 
						@strBarcode = strBarcode, 
						@strNote = strNote, 
						@idfsSite = idfsSite, 
						@intRowStatus = intRowStatus, 
						@idfSendToOffice = idfSendToOffice, 
						@blnReadOnly = blnReadOnly, 
						@idfsBirdStatus = idfsBirdStatus, 
						@idfHumanCase = idfHumanCase, 
						@idfVetCase = idfVetCase, 
						@datAccession = datAccession, 
						@idfsAccessionCondition = idfsAccessionCondition, 
						@strCondition = strCondition, 
						@idfAccesionByPerson = idfAccesionByPerson, 
						@idfsDestructionMethod = idfsDestructionMethod, 
						@idfsCurrentSite = idfsCurrentSite, 
						@idfsSampleKind = idfsSampleKind, 
						@idfMarkedForDispositionByPerson = idfMarkedForDispositionByPerson, 
						@datOutOfRepositoryDate = datOutOfRepositoryDate, 
						@strMaintenanceFlag = strMaintenanceFlag 
					 FROM
						tlbMaterial
					 WHERE
						idfMaterial = @rowId

					 INSERT INTO @SupressSelect
					 EXEC	dbo.USP_GBL_NEXTKEYID_GET 'tlbMaterial', @idfMaterialNew OUTPUT;

					 INSERT INTO @SupressSelect
					 EXEC	dbo.USP_GBL_NextNumber_GET 'Sample Field Barcode', @strBarcode OUTPUT, NULL 

					 --Update the temp table so that we will have the association between the new material and tests
					 UPDATE @idfTestings
					 SET idfMaterial = @idfMaterialNew
					 WHERE 
						idfMaterial = @rowid

					 INSERT INTO	dbo.tlbMaterial
						(						
								 idfMaterial, 
								 idfsSampleType, 
								 idfRootMaterial, 
								 idfParentMaterial, 
								 idfHuman, 
								 idfSpecies, 
								 idfAnimal, 
								 idfMonitoringSession, 
								 idfFieldCollectedByPerson, 
								 idfFieldCollectedByOffice, 
								 idfMainTest, 
								 datFieldCollectionDate, 
								 datFieldSentDate, 
								 strFieldBarcode, 
								 strCalculatedCaseID, 
								 strCalculatedHumanName, 
								 idfVectorSurveillanceSession, 
								 idfVector, 
								 idfSubdivision, 
								 idfsSampleStatus, 
								 idfInDepartment, 
								 idfDestroyedByPerson, 
								 datEnteringDate, 
								 datDestructionDate, 
								 strBarcode, 
								 strNote, 
								 idfsSite, 
								 intRowStatus, 
								 idfSendToOffice, 
								 blnReadOnly, 
								 idfsBirdStatus, 
								 idfHumanCase, 
								 idfVetCase, 
								 datAccession, 
								 idfsAccessionCondition, 
								 strCondition, 
								 idfAccesionByPerson, 
								 idfsDestructionMethod, 
								 idfsCurrentSite, 
								 idfsSampleKind, 
								 idfMarkedForDispositionByPerson, 
								 datOutOfRepositoryDate, 
								 strMaintenanceFlag 
						)
						VALUES
						(
								 @idfMaterialNew, 
								 @idfsSampleType, 
								 @idfRootMaterial, 
								 @idfParentMaterial, 
								 @idfHuman, 
								 @idfSpecies, 
								 @idfAnimal, 
								 @idfMonitoringSession, 
								 @idfFieldCollectedByPerson, 
								 @idfFieldCollectedByOffice, 
								 @idfMainTest, 
								 @datFieldCollectionDate, 
								 @datFieldSentDate, 
								 @strFieldBarcode, 
								 @strCalculatedCaseID, 
								 @strCalculatedHumanName, 
								 @idfVectorSurveillanceSession, 
								 @idfVectorNew, 
								 @idfSubdivision, 
								 @idfsSampleStatus, 
								 @idfInDepartment, 
								 @idfDestroyedByPerson, 
								 @datEnteringDate, 
								 @datDestructionDate, 
								 @strBarcode, 
								 @strNote, 
								 @idfsSite, 
								 @intRowStatus, 
								 @idfSendToOffice, 
								 @blnReadOnly, 
								 @idfsBirdStatus, 
								 @idfHumanCase, 
								 @idfVetCase, 
								 @datAccession, 
								 @idfsAccessionCondition, 
								 @strCondition, 
								 @idfAccesionByPerson, 
								 @idfsDestructionMethod, 
								 @idfsCurrentSite, 
								 @idfsSampleKind, 
								 @idfMarkedForDispositionByPerson, 
								 @datOutOfRepositoryDate, 
								 @strMaintenanceFlag 
						);
					
					 DELETE FROM @idfMaterials
					 WHERE idfMaterial = @rowId
				  END;
				  IF @Tests = 1
					 BEGIN
						WHILE EXISTS ( SELECT * FROM @idfTestings )
						   BEGIN
								 SELECT
									TOP 1
									@rowId = idfTesting
								 FROM 
									@idfTestings

								 SELECT
									@idfsTestName = idfsTestName, 
									@idfsTestCategory = idfsTestCategory, 
									@idfsTestResult = idfsTestResult, 
									@idfsTestStatus = idfsTestStatus, 
									@idfsDiagnosis = idfsDiagnosis, 
									@idfBatchTest = idfBatchTest, 
									@idfObservation = idfObservation, 
									@intTestNumber = intTestNumber, 
									@strNote = strNote, 
									@intRowStatus = intRowStatus, 
									@datStartedDate = datStartedDate, 
									@datConcludedDate = datConcludedDate, 
									@idfTestedByOffice = idfTestedByOffice, 
									@idfTestedByPerson = idfTestedByPerson, 
									@idfResultEnteredByOffice = idfResultEnteredByOffice, 
									@idfResultEnteredByPerson = idfResultEnteredByPerson, 
									@idfValidatedByOffice = idfValidatedByOffice, 
									@idfValidatedByPerson = idfValidatedByPerson, 
									@blnReadOnly = blnReadOnly, 
									@blnNonLaboratoryTest = blnNonLaboratoryTest, 
									@blnExternalTest = blnExternalTest, 
									@idfPerformedByOffice = idfPerformedByOffice, 
									@datReceivedDate = datReceivedDate, 
									@strContactPerson = strContactPerson, 
									@strMaintenanceFlag = strMaintenanceFlag
								 FROM
									tlbTesting
								 WHERE
									idfTesting = @rowId

								 INSERT INTO @SupressSelect
								 EXEC	dbo.USP_GBL_NEXTKEYID_GET 'tlbTesting', @idfTestingNew OUTPUT;

								 SELECT
									@idfMaterialNew = idfMaterial
								 FROM
									@idfTestings
								 WHERE
									idfTesting = @rowId

								 INSERT INTO	dbo.tlbTesting
								 (						
									   idfTesting, 
									   idfsTestName, 
									   idfsTestCategory, 
									   idfsTestResult, 
									   idfsTestStatus, 
									   idfsDiagnosis, 
									   idfMaterial, 
									   idfBatchTest, 
									   idfObservation, 
									   intTestNumber, 
									   strNote, 
									   intRowStatus, 
									   datStartedDate, 
									   datConcludedDate, 
									   idfTestedByOffice, 
									   idfTestedByPerson, 
									   idfResultEnteredByOffice, 
									   idfResultEnteredByPerson, 
									   idfValidatedByOffice, 
									   idfValidatedByPerson, 
									   blnReadOnly, 
									   blnNonLaboratoryTest, 
									   blnExternalTest, 
									   idfPerformedByOffice, 
									   datReceivedDate, 
									   strContactPerson, 
									   strMaintenanceFlag
								 )
								 VALUES
								 (
									   @idfTestingNew, 
									   @idfsTestName, 
									   @idfsTestCategory, 
									   @idfsTestResult, 
									   @idfsTestStatus, 
									   @idfsDiagnosis, 
									   @idfMaterialNew, 
									   @idfBatchTest, 
									   @idfObservation, 
									   @intTestNumber, 
									   @strNote, 
									   @intRowStatus, 
									   @datStartedDate, 
									   @datConcludedDate, 
									   @idfTestedByOffice, 
									   @idfTestedByPerson, 
									   @idfResultEnteredByOffice, 
									   @idfResultEnteredByPerson, 
									   @idfValidatedByOffice, 
									   @idfValidatedByPerson, 
									   @blnReadOnly, 
									   @blnNonLaboratoryTest, 
									   @blnExternalTest, 
									   @idfPerformedByOffice, 
									   @datReceivedDate, 
									   @strContactPerson, 
									   @strMaintenanceFlag
								 );
				
								 DELETE FROM @idfTestings
								 WHERE idfTesting = @rowId
						   END;
					 END
		 END
											
		IF @@TRANCOUNT > 0 AND @returnCode =0
			COMMIT
	END TRY

	BEGIN CATCH
			IF @@Trancount > 0
				ROLLBACK
				SET @returnCode = ERROR_NUMBER()
				SET @returnMsg = 
			   'ErrorNumber: ' + convert(varchar, ERROR_NUMBER() ) 
			   + ' ErrorSeverity: ' + convert(varchar, ERROR_SEVERITY() )
			   + ' ErrorState: ' + convert(varchar,ERROR_STATE())
			   + ' ErrorProcedure: ' + isnull(ERROR_PROCEDURE() ,'')
			   + ' ErrorLine: ' +  convert(varchar,isnull(ERROR_LINE() ,''))
			   + ' ErrorMessage: '+ ERROR_MESSAGE();
			   THROW;

	END CATCH

	SELECT 
		@returnCode AS ReturnCode
		,@returnMsg AS ReturnMsg

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_HUMAN_DISEASE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_HUMAN_DISEASE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_Case_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_Case_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USSP_OMM_CONVERT_CONTACT_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_OMM_CONVERT_CONTACT_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_Contact_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_Contact_Set]';


GO
PRINT N'Update complete.';


GO
