/*
Deployment script for EIDSS7_GG

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;
GO

PRINT N'Altering Procedure [dbo].[USP_HUM_HUMAN_MASTER_GETDetail]...';


GO
-- ================================================================================================
-- Name: USP_HUM_HUMAN_MASTER_GETDetail OLD
--
-- Description:	Get a human actual record
--          
-- Revision History:
-- Name				Date		Change Detail
-- ---------------	----------	--------------------------------------------------------------------
-- Mandar Kulkarni				Initial release.
-- Vilma Thomas		05/25/2018	Update the ReferenceType key from 19000167 to 19000500 for 'Contact 
--								Phone Type'
-- Stephen Long		11/26/2018	Update for the new API; remove returnCode and returnMsg.
-- Ann Xiong		08/30/2019	Added script to select PersonalIDTypeName, OccupationTypeName, 
--								SchoolCountry, 
--								SchoolRegion, SchoolRayon, SchoolSettlement for Person Deduplication.
-- Ann Xiong		09/09/2019	return haai.SchoolAddressID instead of haai.AltAddressID as 
--								SchoolGeoLocationID
-- Mark Wilson		10/29/2019	added Settlement Type to return
-- Ann Xiong		02/17/2020	Added IsAnotherPhone and Age to select
-- Ann Xiong		05/08/2020	Added YNAnotherAddress, YNHumanForeignAddress, 
--								YNEmployerForeignAddress, YNHumanAltForeignAddress, 
--								YNSchoolForeignAddress, YNWorkSameAddress to select
-- Stephen Long		07/07/2020	Changed v6.1 function call for create address string to v7 version.
-- Mark Wilson		09/20/2021	reworked the locations to use gisLocation and hierarchy
-- Mark Wilson		10/04/2021	Updated to pull location data from correct table
-- Mark Wilson		10/05/2021	Updated to use correct location references and udpate test code
-- Mark Wilson		10/06/2021	Added Alt Address fields
-- Mark Wilson		10/07/2021	Lat/Long only needed for Current Address and Foreign Address not needed for Permanent
-- Mark Wilson		10/12/2021  Added YNPermanentSameAddress, updated YNAnotherAddress
-- Leo Tracchia		05/13/2022	Added joins for Location hierachy
--
/*Test Code

EXEC dbo.USP_HUM_HUMAN_MASTER_GETDetail
	@LangID = 'en-US',
	@HumanMasterID = 422849750000916


EXEC dbo.USP_HUM_HUMAN_MASTER_GETDetail
	@LangID = 'az-Latn-AZ',
	@HumanMasterID = 411420970000870


EXEC dbo.USP_HUM_HUMAN_MASTER_GETDetail
	@LangID = 'en-US',
	@HumanMasterID = 413771740000870

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_HUMAN_MASTER_GETDetail] (
	@LangID NVARCHAR(20),
	@HumanMasterID BIGINT
	)
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY
		SELECT ISNULL(ha.strFirstName, '') + ' ' + ISNULL(ha.strLastName, '') AS PatientFarmOwnerName,
			haai.EIDSSPersonId AS EIDSSPersonID,
			ha.idfsOccupationType AS OccupationTypeID,
			ha.idfsNationality AS CitizenshipTypeID,
			citizenshipType.name AS CitizenshipTypeName,
			ha.idfsHumanGender AS GenderTypeID,
			tb.name AS GenderTypeName,

			-- Current Address
			ha.idfCurrentResidenceAddress AS HumanGeoLocationID,
			lhHuman.AdminLevel1ID AS HumanidfsCountry,
			lhHuman.AdminLevel1Name AS HumanCountry,
			lhHuman.AdminLevel2ID AS HumanidfsRegion,
			lhHuman.AdminLevel2Name AS HumanRegion,
			lhHuman.AdminLevel3ID AS HumanidfsRayon,
			lhHuman.AdminLevel3Name AS HumanRayon,
			lhHuman.AdminLevel4ID AS HumanidfsSettlement,
			lhHuman.AdminLevel4Name AS HumanSettlement,			
			HL.idfsType AS HumanidfsSettlementType,
			humanSettlementType.[name] AS HumanSettlementType,
			tglHuman.strPostCode AS HumanstrPostalCode,
			tglHuman.strStreetName AS HumanstrStreetName,
			tglHuman.strHouse AS HumanstrHouse,
			tglHuman.strBuilding AS HumanstrBuilding,
			tglHuman.strApartment AS HumanstrApartment,
			tglHuman.strDescription AS HumanDescription,
			tglHuman.dblLatitude AS HumanstrLatitude,
			tglHuman.dblLongitude AS HumanstrLongitude,
			tglHuman.blnForeignAddress AS HumanForeignAddressIndicator,
			tglHuman.strForeignAddress AS HumanForeignAddressString,

			-- Employer Address
			ha.idfEmployerAddress AS EmployerGeoLocationID,
			lhEmployer.AdminLevel1ID AS EmployeridfsCountry,
			lhEmployer.AdminLevel1Name AS EmployerCountry,
			lhEmployer.AdminLevel2ID AS EmployeridfsRegion,
			lhEmployer.AdminLevel2Name AS EmployerRegion,
			lhEmployer.AdminLevel3ID AS EmployeridfsRayon,
			lhEmployer.AdminLevel3Name AS EmployerRayon,
			lhEmployer.AdminLevel4ID AS EmployeridfsSettlement,
			lhEmployer.AdminLevel4Name AS EmployerSettlement,
			EA.idfsType AS EmployeridfsSettlementType,
			EmpSettlementType.strDefault AS EmployerSettlementType,
			tglEmployer.strPostCode AS EmployerstrPostalCode,
			tglEmployer.strStreetName AS EmployerstrStreetName,
			tglEmployer.strHouse AS EmployerstrHouse,
			tglEmployer.strBuilding AS EmployerstrBuilding,
			tglEmployer.strApartment AS EmployerstrApartment,
			tglEmployer.strDescription AS EmployerDescription,
			tglEmployer.blnForeignAddress AS EmployerForeignAddressIndicator,
			tglEmployer.strForeignAddress AS EmployerForeignAddressString,

			-- Permanent Address
			ha.idfRegistrationAddress AS HumanPermGeoLocationID,
			lhPerm.AdminLevel1ID AS HumanPermidfsCountry,
			lhPerm.AdminLevel1Name AS HumanPermCountry,
			lhPerm.AdminLevel2ID AS HumanPermidfsRegion,
			lhPerm.AdminLevel2Name AS HumanPermRegion,
			lhPerm.AdminLevel3ID AS HumanPermidfsRayon,
			lhPerm.AdminLevel3Name AS HumanPermRayon,
			lhPerm.AdminLevel4ID HumanPermidfsSettlement,
			lhPerm.AdminLevel4Name AS HumanPermSettlement,
			registrationLocation.idfsType AS HumanPermidfsSettlementType,
			registrationSettlementType.[name] AS HumanPermSettlementType,
			tglRegistrationAddress.strPostCode AS HumanPermstrPostalCode,
			tglRegistrationAddress.strStreetName AS HumanPermstrStreetName,
			tglRegistrationAddress.strHouse AS HumanPermstrHouse,
			tglRegistrationAddress.strBuilding AS HumanPermstrBuilding,
			tglRegistrationAddress.strApartment AS HumanPermstrApartment,
			tglRegistrationAddress.strDescription AS HumanPermDescription,

			-- Alternate Address
			haai.AltAddressID AS HumanAltGeoLocationID,
			lhAlt.AdminLevel1ID AS HumanAltidfsCountry,
			lhAlt.AdminLevel1Name AS HumanAltCountry,
			lhAlt.AdminLevel2ID AS HumanAltidfsRegion,
			lhAlt.AdminLevel2Name AS HumanAltRegion,
			lhAlt.AdminLevel3ID AS HumanAltidfsRayon,
			lhAlt.AdminLevel3Name AS HumanAltRayon,
			lhAlt.AdminLevel4ID HumanAltidfsSettlement,
			lhAlt.AdminLevel4Name AS HumanAltSettlement,
			AltLocation.idfsType AS HumanAltidfsSettlementType,
			AltSettlementType.[name] AS HumanAltSettlementType,
			tglAlt.strPostCode AS HumanAltstrPostalCode,
			tglAlt.strStreetName AS HumanAltstrStreetName,
			tglAlt.strHouse AS HumanAltstrHouse,
			tglAlt.strBuilding AS HumanAltstrBuilding,
			tglAlt.strApartment AS HumanAltstrApartment,
			tglAlt.strDescription AS HumanAltDescription,
			tglAlt.blnForeignAddress AS HumanAltForeignAddressIndicator,
			tglAlt.strForeignAddress AS HumanAltForeignAddressString,

			-- School Address
			haai.SchoolAddressID AS SchoolGeoLocationID,
			lhSchool.AdminLevel1ID AS SchoolidfsCountry,
			lhSchool.AdminLevel1Name AS SchoolCountry,
			lhSchool.AdminLevel2ID AS SchoolidfsRegion,
			lhSchool.AdminLevel2Name AS SchoolRegion,
			lhSchool.AdminLevel3ID AS SchoolidfsRayon,
			lhSchool.AdminLevel3Name AS SchoolRayon,
			lhSchool.AdminLevel4ID AS SchoolidfsSettlement,
			lhSchool.AdminLevel4Name AS SchoolSettlement,
			SchoolLocation.idfsType AS SchoolAltidfsSettlementType,
			SchoolSettlementType.strDefault AS SchoolAltSettlementType,
			tglSchool.strPostCode AS SchoolstrPostalCode,
			tglSchool.strStreetName AS SchoolstrStreetName,
			tglSchool.strHouse AS SchoolstrHouse,
			tglSchool.strBuilding AS SchoolstrBuilding,
			tglSchool.strApartment AS SchoolstrApartment,
			tglSchool.blnForeignAddress AS SchoolForeignAddressIndicator,
			tglSchool.strForeignAddress AS SchoolForeignAddressString,

			dbo.FN_GBL_FormatDate(ha.datDateofBirth, 'mm/dd/yyyy') AS DateOfBirth,
			dbo.FN_GBL_FormatDate(ha.datDateOfDeath, 'mm/dd/yyyy') AS DateOfDeath,
			dbo.FN_GBL_FormatDate(ha.datEnteredDate, 'mm/dd/yyyy') AS EnteredDate,
			dbo.FN_GBL_FormatDate(ha.datModificationDate, 'mm/dd/yyyy') AS ModificationDate,
			ha.strFirstName AS FirstOrGivenName,
			ha.strSecondName AS SecondName,
			ha.strLastName AS LastOrSurname,
			ha.strEmployerName AS EmployerName,
			ha.strHomePhone AS HomePhone,
			ha.strWorkPhone AS WorkPhone,
			ha.idfsPersonIDType AS PersonalIDType,
			ha.strPersonID AS PersonalID,
			haai.ReportedAge,
			haai.ReportedAgeUOMID,
			haai.PassportNbr AS PassportNumber,
			haai.IsEmployedID AS IsEmployedTypeID,
			isEmployed.name AS IsEmployedTypeName,
			haai.EmployerPhoneNbr AS EmployerPhone,
			haai.EmployedDTM AS EmployedDateLastPresent,
			haai.IsStudentID AS IsStudentTypeID,
			isStudent.name AS IsStudentTypeName,
			haai.SchoolName AS SchoolName,
			haai.SchoolLastAttendDTM AS SchoolDateLastAttended,
			haai.SchoolPhoneNbr AS SchoolPhone,
			haai.ContactPhoneCountryCode,
			haai.ContactPhoneNbr AS ContactPhone,
			haai.ContactPhoneNbrTypeID AS ContactPhoneTypeID,
			ContactPhoneNbrTypeID.name AS ContactPhoneTypeName,
			haai.ContactPhone2CountryCode,
			haai.ContactPhone2Nbr AS ContactPhone2,
			haai.ContactPhone2NbrTypeID AS ContactPhone2TypeID,
			ContactPhone2NbrTypeID.name AS ContactPhone2TypeName,
			personalIDType.name AS PersonalIDTypeName,
			occupationType.name AS OccupationTypeName,
			CASE 
				WHEN haai.ContactPhone2Nbr IS NULL
					AND haai.ContactPhone2NbrTypeID IS NULL
					THEN 'No'
				ELSE 'Yes'
				END AS IsAnotherPhone,
			CAST(ISNULL(haai.ReportedAge, '') AS VARCHAR(3)) + ' ' + ISNULL(HumanAgeType.name, '') AS Age,
			CASE 
				WHEN ((ha.idfRegistrationAddress IS NOT NULL AND ha.idfRegistrationAddress > 0) OR (haai.AltAddressID IS NOT NULL AND haai.AltAddressID > 0))
					THEN 'Yes'
				ELSE 'No'
				END AS YNAnotherAddress,
			CASE 
				WHEN tglHuman.blnForeignAddress IS NOT NULL
					AND tglHuman.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNHumanForeignAddress,
			CASE 
				WHEN tglEmployer.blnForeignAddress IS NOT NULL
					AND tglEmployer.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNEmployerForeignAddress,
			CASE 
				WHEN tglRegistrationAddress.blnForeignAddress IS NOT NULL
					AND tglRegistrationAddress.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNHumPermForeignAddress,
			CASE 
				WHEN tglAlt.blnForeignAddress IS NOT NULL
					AND tglAlt.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNHumanAltForeignAddress,
			CASE 
				WHEN tglSchool.blnForeignAddress IS NOT NULL
					AND tglSchool.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNSchoolForeignAddress,
			CASE 
				WHEN dbo.FN_GBL_CreateAddressString(ISNULL(lhHuman.AdminLevel1Name, N''), ISNULL(lhHuman.AdminLevel2Name, N''), ISNULL(lhHuman.AdminLevel3Name, N''), ISNULL(tglHuman.strPostCode, N''), ISNULL(humanSettlementType.strDefault, N''), ISNULL(lhHuman.AdminLevel4Name, N''), ISNULL(tglHuman.strStreetName, N''), ISNULL(tglHuman.strHouse, N''), ISNULL(tglHuman.strBuilding, N''), ISNULL(tglHuman.strApartment, N''), ISNULL(tglHuman.blnForeignAddress, N''), ISNULL(tglHuman.strForeignAddress, N'')) = 
						dbo.FN_GBL_CreateAddressString(ISNULL(lhEmployer.AdminLevel1Name, N''), ISNULL(lhEmployer.AdminLevel2Name, N''), ISNULL(lhEmployer.AdminLevel3Name, N''), ISNULL(tglEmployer.strPostCode, N''), ISNULL(EmpSettlementType.strDefault, N''), ISNULL(lhEmployer.AdminLevel4Name, N''), ISNULL(tglEmployer.strStreetName, N''), ISNULL(tglEmployer.strHouse, N''), ISNULL(tglEmployer.strBuilding, N''), ISNULL(tglEmployer.strApartment, N''), ISNULL(tglEmployer.blnForeignAddress, N''), ISNULL(tglEmployer.strForeignAddress, N''))
					THEN 'Yes'
				ELSE 'No'
				END AS YNWorkSameAddress,
			CASE 
				WHEN dbo.FN_GBL_CreateAddressString(ISNULL(lhHuman.AdminLevel1Name, N''), ISNULL(lhHuman.AdminLevel2Name, N''), ISNULL(lhHuman.AdminLevel3Name, N''), ISNULL(tglHuman.strPostCode, N''), ISNULL(humanSettlementType.strDefault, N''), ISNULL(lhHuman.AdminLevel4Name, N''), ISNULL(tglHuman.strStreetName, N''), ISNULL(tglHuman.strHouse, N''), ISNULL(tglHuman.strBuilding, N''), ISNULL(tglHuman.strApartment, N''), ISNULL(tglHuman.blnForeignAddress, N''), ISNULL(tglHuman.strForeignAddress, N'')) = 
						dbo.FN_GBL_CreateAddressString(ISNULL(lhPerm.AdminLevel1Name, N''), ISNULL(lhPerm.AdminLevel2Name, N''), ISNULL(lhPerm.AdminLevel3Name, N''), ISNULL(tglRegistrationAddress.strPostCode, N''), ISNULL(registrationSettlementType.strDefault, N''), ISNULL(lhPerm.AdminLevel4Name, N''), ISNULL(tglRegistrationAddress.strStreetName, N''), ISNULL(tglRegistrationAddress.strHouse, N''), ISNULL(tglRegistrationAddress.strBuilding, N''), ISNULL(tglRegistrationAddress.strApartment, N''), ISNULL(tglRegistrationAddress.blnForeignAddress, N''), ISNULL(tglRegistrationAddress.strForeignAddress, N''))
					THEN 'Yes'
				ELSE 'No'
				END AS YNPermanentSameAddress 

		FROM dbo.tlbHumanActual ha

		LEFT JOIN dbo.HumanActualAddlinfo haai ON ha.idfHumanActual = haai.HumanActualAddlinfoUID
		LEFT JOIN dbo.tlbGeoLocationShared AS tglHuman ON ha.idfCurrentResidenceAddress = tglHuman.idfGeoLocationShared
		LEFT JOIN dbo.tlbGeoLocationShared AS tglEmployer ON ha.idfEmployerAddress = tglEmployer.idfGeoLocationShared
		LEFT JOIN dbo.tlbGeoLocationShared AS tglRegistrationAddress ON ha.idfRegistrationAddress = tglRegistrationAddress.idfGeoLocationShared
		LEFT JOIN dbo.tlbGeoLocationShared AS tglSchool ON haai.SchoolAddressID = tglSchool.idfGeoLocationShared
		LEFT JOIN dbo.tlbGeoLocationShared AS tglAlt ON haai.AltAddressID = tglAlt.idfGeoLocationShared
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000043) tb ON tb.idfsReference = ha.idfsHumanGender

		-- Current Address
		LEFT JOIN dbo.gisLocation HL ON HL.idfsLocation = tglHuman.idfsLocation	
		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhHuman ON lhHuman.idfsLocation = tglHuman.idfsLocation			
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001) AS humanCountry ON HL.node.IsDescendantOf(humanCountry.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003) AS humanRegion ON HL.node.IsDescendantOf(humanRegion.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000002) AS humanRayon ON HL.node.IsDescendantOf(humanRayon.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000004) AS humanSettlement ON HL.node.IsDescendantOf(humanSettlement.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS humanSettlementType ON humanSettlementType.idfsReference = HL.idfsType

		-- Employer address 
		LEFT JOIN dbo.gisLocation EA ON EA.idfsLocation = tglEmployer.idfsLocation
		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhEmployer ON lhEmployer.idfsLocation = tglEmployer.idfsLocation		
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001) AS ECountry ON EA.node.IsDescendantOf(Ecountry.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003) AS ERegion ON EA.node.IsDescendantOf(ERegion.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000002) AS ERayon ON EA.node.IsDescendantOf(ERayon.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000004) AS ESettlement ON EA.node.IsDescendantOf(ESettlement.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS EmpSettlementType ON EmpSettlementType.idfsReference = EA.idfsType

		-- Permanent address 
		LEFT JOIN dbo.gisLocation registrationLocation ON registrationLocation.idfsLocation = tglRegistrationAddress.idfsLocation
		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhPerm ON lhPerm.idfsLocation = tglRegistrationAddress.idfsLocation		
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001) AS registrationCountry ON registrationLocation.node.IsDescendantOf(registrationCountry.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003) AS registrationRegion ON registrationLocation.node.IsDescendantOf(registrationRegion.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000002) AS registrationRayon ON registrationLocation.node.IsDescendantOf(registrationRayon.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000004) AS registrationSettlement ON registrationLocation.node.IsDescendantOf(registrationSettlement.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS registrationSettlementType ON registrationSettlementType.idfsReference = registrationLocation.idfsType

		-- Alternate address - new for EIDSS7
		LEFT JOIN dbo.gisLocation AltLocation ON AltLocation.idfsLocation = tglAlt.idfsLocation
		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhAlt ON lhAlt.idfsLocation = tglAlt.idfsLocation		
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001) AS AltCountry ON AltLocation.node.IsDescendantOf(AltCountry.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003) AS AltRegion ON AltLocation.node.IsDescendantOf(AltRegion.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000002) AS AltRayon ON AltLocation.node.IsDescendantOf(AltRayon.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000004) AS AltSettlement ON AltLocation.node.IsDescendantOf(AltSettlement.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS AltSettlementType ON AltSettlementType.idfsReference = AltLocation.idfsType

		LEFT JOIN dbo.FN_GBL_Repair(@LangID, 19000100) isEmployed ON IsEmployed.idfsReference = haai.IsEmployedID
		LEFT JOIN dbo.FN_GBL_Repair(@LangID, 19000100) isStudent ON isStudent.idfsReference = haai.IsStudentID
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000054) AS citizenshipType ON ha.idfsNationality = citizenshipType.idfsReference
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000500) AS contactPhoneNbrTypeID ON contactPhoneNbrTypeID.idfsReference = haai.ContactPhoneNbrTypeID
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000500) AS contactPhone2NbrTypeID ON contactPhone2NbrTypeID.idfsReference = haai.ContactPhone2NbrTypeID
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000148) AS personalIDType ON ha.idfsPersonIDType = personalIDType.idfsReference
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000061) AS occupationType ON ha.idfsOccupationType = occupationType.idfsReference

		-- School address - E6 school address was originally stored in idfEmployerAddress with employment type = 'Student'
		LEFT JOIN dbo.gisLocation SchoolLocation ON SchoolLocation.idfsLocation = tglSchool.idfsLocation
		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhSchool ON lhSchool.idfsLocation = tglSchool.idfsLocation		
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001) AS schoolCountry ON SchoolLocation.node.IsDescendantOf(schoolCountry.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003) AS schoolRegion ON SchoolLocation.node.IsDescendantOf(schoolRegion.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000002) AS schoolRayon ON SchoolLocation.node.IsDescendantOf(schoolRayon.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000004) AS schoolSettlement ON SchoolLocation.node.IsDescendantOf(schoolSettlement.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS schoolSettlementType ON schoolSettlementType.idfsReference = SchoolLocation.idfsType


		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000042) AS HumanAgeType	ON haai.ReportedAgeUOMID = HumanAgeType.idfsReference



		WHERE ha.idfHumanActual = @HumanMasterID;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_SAMPLE_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_SAMPLE_ADVANCED_SEARCH_GETList
--
-- Description:	Get sample advanced search list for the laboratory module use case LUC13.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     01/14/2019 Initial relase.
-- Stephen Long     01/30/2019 Added sample disease reference join, and removed the vector 
--                             surveillance session joins as they are not needed.
-- Stephen Long     02/11/2019 Changed sample status type ID from bigint to nvarchar(max).  Can 
--                             have multiple sample status types.
-- Stephen Long     02/21/2019 Renamed parameters to be consistent with other objects.
-- Stephen Long     03/28/2019 Removed test status 'Not Started' as criteria to pull back in the 
--                             test assigned indicator.
-- Stephen Long     07/01/2019 Corrected reference type on monitoring session category.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     08/29/2019 Added accession condition type field as one of the where clauses.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     11/04/2019 Corrected tlbSpecies join; joined to tlbMaterial instead of tlbHerd.
-- Stephen Long     01/16/2020 Corrected where clause on sample status type for defect 5699.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/08/2020 Added sample list parameter and where clause criteria.
-- Stephen Long     04/16/2020 Removed un-needed joins for farm, herd and species type.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     07/06/2020 Added lab module source indicator to the model.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/28/2020 Removed site left joins as not needed.
-- Stephen Long     10/30/2020 Remove test assigned indicator; use test assigned count instead.
--                             Added EIDSS freezer ID.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Stephen Long     02/10/2021 Remove unneeded joins and add check for blnShowInLabList.
-- Stephen Long     06/28/2021 Applied new pagination parameters.
-- Mark Wilson		08/11/2021 updated to join tlbMonitoringSessionToDiagnosis
-- Stephen Long     09/18/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/11/2021 Split out query to get initial results using required date range.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     02/08/2022 Removed unneeded joins.
-- Stephen Long     03/10/2022 Changed note to comment and transfer count to transferred count.
-- Stephen Long     03/24/2022 Removed primary key from results and final results table variables.
-- Stephen Long     03/30/2022 Remove show in lab list from where criteria.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/12/2022 Removed where criteria for surveillance type of both; de-activated 
--                             base reference record.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     09/28/2022 Bug fix on item 5117.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     12/16/2022 Fix on initial query to use sent to organization and not user 
--                             organization.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_SAMPLE_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @SampleList VARCHAR(MAX) = NULL,
    @TestUnassignedIndicator BIT = NULL,
    @TestCompletedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL,
    @Page INT = 1,
    @PageSize INT = 10,
    @SortColumn VARCHAR(200) = 'EIDSSLaboratorySampleID',
    @SortOrder VARCHAR(4) = 'ASC'
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        AccessionedIndicator BIT NOT NULL,
        AccessionConditionTypeID BIGINT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        AccessionedIndicator BIT NOT NULL,
        AccessionConditionTypeID BIGINT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @RecordCount AS INT = 0,
            @UnaccessionedCount AS INT = 0;
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL, 
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL 
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL, 
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL 
    );
    DECLARE @SampleListTable TABLE (ID BIGINT NOT NULL);
    DECLARE @Favorites XML,
            @FirstRecord INT = (@Page - 1) * @PageSize,
            @LastRecord INT = (@Page * @PageSize + 1),
            @LanguageCode BIGINT;

    IF @SampleList IS NOT NULL
        INSERT INTO @SampleListTable
        SELECT CAST([Value] AS BIGINT)
        FROM dbo.FN_GBL_SYS_SplitList(@SampleList, NULL, ',');

    DECLARE @SampleStatusTypeListTable TABLE (ID BIGINT NOT NULL);

    IF @SampleStatusTypeList IS NOT NULL
        INSERT INTO @SampleStatusTypeListTable
        SELECT CAST([Value] AS BIGINT)
        FROM dbo.FN_GBL_SYS_SplitList(@SampleStatusTypeList, NULL, ',');

    BEGIN TRY
        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames, 
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames 
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames, 
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames 
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               1,
               CASE WHEN m.idfsSite = @UserSiteID THEN 1 ELSE 0 END,
               CASE WHEN m.idfsSite = @UserSiteID THEN 1 ELSE 0 END,
               CASE WHEN m.idfsSite = @UserSiteID THEN 1 ELSE 0 END,
               CASE WHEN m.idfsSite = @UserSiteID THEN 1 ELSE 0 END
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                      OR 
                      (
                          m.datAccession IS NULL AND m.blnAccessioned = 0 
                          AND 
                          (
                              (m.datFieldCollectionDate IS NOT NULL AND m.datFieldCollectionDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                              OR (m.datEnteringDate IS NOT NULL AND m.datEnteringDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                          )
                      )
                  );

        -- =======================================================================================
        -- CONFIGURABLE SITE FILTRATION RULES
        -- 
        -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the default rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                      OR 
                      (
                          m.datAccession IS NULL AND m.blnAccessioned = 0 
                          AND 
                          (
                              (m.datFieldCollectionDate IS NOT NULL AND m.datFieldCollectionDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                              OR (m.datEnteringDate IS NOT NULL AND m.datEnteringDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                          )
                      )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                      OR 
                      (
                          m.datAccession IS NULL AND m.blnAccessioned = 0 
                          AND 
                          (
                              (m.datFieldCollectionDate IS NOT NULL AND m.datFieldCollectionDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                              OR (m.datEnteringDate IS NOT NULL AND m.datEnteringDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                          )
                      )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                      OR 
                      (
                          m.datAccession IS NULL AND m.blnAccessioned = 0 
                          AND 
                          (
                              (m.datFieldCollectionDate IS NOT NULL AND m.datFieldCollectionDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                              OR (m.datEnteringDate IS NOT NULL AND m.datEnteringDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                          )
                      )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                      OR 
                      (
                          m.datAccession IS NULL AND m.blnAccessioned = 0 
                          AND 
                          (
                              (m.datFieldCollectionDate IS NOT NULL AND m.datFieldCollectionDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                              OR (m.datEnteringDate IS NOT NULL AND m.datEnteringDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                          )
                      )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                      OR 
                      (
                          m.datAccession IS NULL AND m.blnAccessioned = 0 
                          AND 
                          (
                              (m.datFieldCollectionDate IS NOT NULL AND m.datFieldCollectionDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                              OR (m.datEnteringDate IS NOT NULL AND m.datEnteringDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                          )
                      )
                  )
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                      OR 
                      (
                          m.datAccession IS NULL AND m.blnAccessioned = 0 
                          AND 
                          (
                              (m.datFieldCollectionDate IS NOT NULL AND m.datFieldCollectionDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                              OR (m.datEnteringDate IS NOT NULL AND m.datEnteringDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                          )
                      )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                      OR 
                      (
                          m.datAccession IS NULL AND m.blnAccessioned = 0 
                          AND 
                          (
                              (m.datFieldCollectionDate IS NOT NULL AND m.datFieldCollectionDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                              OR (m.datEnteringDate IS NOT NULL AND m.datEnteringDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                          )
                      )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                      OR 
                      (
                          m.datAccession IS NULL AND m.blnAccessioned = 0 
                          AND 
                          (
                              (m.datFieldCollectionDate IS NOT NULL AND m.datFieldCollectionDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                              OR (m.datEnteringDate IS NOT NULL AND m.datEnteringDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                          )
                      )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        INSERT INTO @FinalResults
        SELECT m.idfMaterial,
               MAX(m.blnAccessioned),
               MAX(m.idfsAccessionCondition),
               CASE
                   WHEN EXISTS
                        (
                            SELECT ReadPermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT AccessToPersonalDataPermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT AccessToGenderAndAgeDataPermissionIndicator
                            FROM @Results
                            WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT WritePermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT DeletePermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator = 1
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN (10502002, 10502009) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Active
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.blnAccessioned = @AccessionedIndicatorList
                              AND m.idfsAccessionCondition IS NULL
                          )
                          OR (
                                 @AccessionedIndicatorList IS NULL
                                 AND @SampleStatusTypeList IS NULL
                             )
                      )
                      OR (
                             (
                                 (m.idfsSampleStatus IN (
                                                            SELECT ID FROM @SampleStatusTypeListTable
                                                        )
                                 )
                                 OR (
                                        m.idfsAccessionCondition IN (
                                                                        SELECT ID FROM @SampleStatusTypeListTable
                                                                    )
                                        AND (
                                                m.idfsSampleStatus IS NULL
                                                OR m.idfsSampleStatus = 10015007 --In Repository
                                            )
                                    )
                             )
                             OR (
                                    @SampleStatusTypeList IS NULL
                                    AND @AccessionedIndicatorList IS NULL
                                )
                         )
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR m.DiseaseID = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR @EIDSSReportCampaignOrSessionID IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
              AND (
                      (
                          m.TestUnassignedIndicator = 1
                          AND @TestUnassignedIndicator = 1
                      )
                      OR @TestUnassignedIndicator IS NULL
                  )
              AND (
                      (
                          m.TestCompletedIndicator = 1
                          AND @TestCompletedIndicator = 1
                      )
                      OR @TestCompletedIndicator IS NULL
                  )
        GROUP BY m.idfMaterial;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SET @UnaccessionedCount =
        (
            SELECT COUNT(ID)
            FROM @FinalResults
            WHERE AccessionedIndicator = 0
                  AND AccessionConditionTypeID IS NULL
        );

        SELECT SampleID,
               EIDSSLaboratorySampleID,
               FavoriteIndicator,
               RootSampleID,
               ParentSampleID,
               SampleTypeID,
               SampleTypeName,
               HumanID,
               PatientOrFarmOwnerName,
               SpeciesID,
               AnimalID,
               EIDSSAnimalID,
               VectorID,
               MonitoringSessionID,
               VectorSessionID,
               HumanDiseaseReportID,
               VeterinaryDiseaseReportID,
               EIDSSReportOrSessionID,
               TestCompletedIndicator,
               DiseaseID,
               DiseaseName,
               DisplayDiseaseName, 
               FunctionalAreaID,
               FunctionalAreaName,
               FreezerSubdivisionID,
               StorageBoxPlace,
               CollectionDate,
               CollectedByPersonID,
               CollectedByOrganizationID,
               SentDate,
               SentToOrganizationID,
               SiteID,
               EIDSSLocalOrFieldSampleID,
               EnteredDate,
               OutOfRepositoryDate,
               MarkedForDispositionByPersonID,
               ReadOnlyIndicator,
               AccessionIndicator,
               AccessionDate,
               AccessionConditionTypeID,
               AccessionConditionOrSampleStatusTypeName,
               AccessionByPersonID,
               SampleStatusTypeID,
               SampleStatusDate,
               AccessionComment,
               DestructionMethodTypeID,
               DestructionDate,
               DestroyedByPersonID,
               TestAssignedCount,
               TransferredCount,
               Comment,
               CurrentSiteID,
               BirdStatusTypeID,
               MainTestID,
               SampleKindTypeID,
               PreviousSampleStatusTypeID,
               LabModuleSourceIndicator,
               RowStatus,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
               RowAction,
               RowSelectionIndicator,
               TotalRowCount,
               UnaccessionedSampleCount
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedCaseID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedHumanName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedHumanName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strFieldBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strFieldBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.datAccession
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.datAccession
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       sampleType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       sampleType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DisplayDiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.DiseaseID IS NOT NULL THEN 
                                                               diseaseName.name
                                                           WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                                               msDiseases.DisplayDiseaseNames
                                                           WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                                                               vsDiseases.DisplayDiseaseNames
                                                           ELSE
                                                               ''
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DisplayDiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.DiseaseID IS NOT NULL THEN 
                                                               diseaseName.name
                                                           WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                                               msDiseases.DisplayDiseaseNames
                                                           WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                                                               vsDiseases.DisplayDiseaseNames
                                                           ELSE
                                                               ''
                                                       END
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'FunctionalAreaName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       functionalArea.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'FunctionalAreaName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       functionalArea.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSAnimalID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       a.strAnimalCode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSAnimalID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       a.strAnimalCode
                                               END DESC
                                     ) AS RowNum,
                   m.idfMaterial AS SampleID,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   CASE
                       WHEN f.SampleID IS NULL THEN
                           0
                       ELSE
                           1
                   END AS FavoriteIndicator,
                   m.idfRootMaterial AS RootSampleID,
                   m.idfParentMaterial AS ParentSampleID,
                   m.idfsSampleType AS SampleTypeID,
                   sampleType.name AS SampleTypeName,
                   m.idfHuman AS HumanID,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                           '********'
                       ELSE
                           m.strCalculatedHumanName
                   END AS PatientOrFarmOwnerName,
                   m.idfSpecies AS SpeciesID,
                   m.idfAnimal AS AnimalID,
                   a.strAnimalCode AS EIDSSAnimalID,
                   m.idfVector AS VectorID,
                   m.idfMonitoringSession AS MonitoringSessionID,
                   m.idfVectorSurveillanceSession AS VectorSessionID,
                   m.idfHumanCase AS HumanDiseaseReportID,
                   m.idfVetCase AS VeterinaryDiseaseReportID,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   m.TestCompletedIndicator,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           CAST(m.DiseaseID AS NVARCHAR(MAX))
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseIdentifiers
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DiseaseIdentifiers
                       ELSE
                           '' 
                   END AS DiseaseID,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN 
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseNames
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DiseaseNames
                       ELSE
                           ''
                   END AS DiseaseName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN 
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DisplayDiseaseNames
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DisplayDiseaseNames
                       ELSE
                           ''
                   END AS DisplayDiseaseName,
                   m.idfInDepartment AS FunctionalAreaID,
                   functionalArea.name AS FunctionalAreaName,
                   m.idfSubdivision AS FreezerSubdivisionID,
                   m.StorageBoxPlace,
                   m.datFieldCollectionDate AS CollectionDate,
                   m.idfFieldCollectedByPerson AS CollectedByPersonID,
                   m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
                   m.datFieldSentDate AS SentDate,
                   m.idfSendToOffice AS SentToOrganizationID,
                   m.idfsSite AS SiteID,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   m.datEnteringDate AS EnteredDate,
                   m.datOutOfRepositoryDate AS OutOfRepositoryDate,
                   m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
                   m.blnReadOnly AS ReadOnlyIndicator,
                   m.blnAccessioned AS AccessionIndicator,
                   accessionConditionType.name AS AccessionConditionTypeName,
                   m.datAccession AS AccessionDate,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   (CASE
                        WHEN m.blnAccessioned = 0
                             AND m.idfsAccessionCondition IS NULL THEN
                            'Un-accessioned'
                        WHEN m.idfsSampleStatus IS NULL THEN
                            accessionConditionType.name
                        WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                            accessionConditionType.name
                        ELSE
                            sampleStatusType.name
                    END
                   ) AS AccessionConditionOrSampleStatusTypeName,
                   sampleStatusType.name AS SampleStatusTypeName,
                   m.idfAccesionByPerson AS AccessionByPersonID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   m.datSampleStatusDate AS SampleStatusDate,
                   m.strCondition AS AccessionComment,
                   m.idfsDestructionMethod AS DestructionMethodTypeID,
                   m.datDestructionDate AS DestructionDate,
                   m.idfDestroyedByPerson AS DestroyedByPersonID,
                   CASE
                       WHEN m.TestUnassignedIndicator = 1 THEN
                           0
                       ELSE
                           1
                   END AS TestAssignedCount,
                   m.TransferIndicator AS TransferredCount,
                   m.strNote AS Comment,
                   m.idfsCurrentSite AS CurrentSiteID,
                   m.idfsBirdStatus AS BirdStatusTypeID,
                   m.idfMainTest AS MainTestID,
                   m.idfsSampleKind AS SampleKindTypeID,
                   m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
                   m.LabModuleSourceIndicator,
                   m.intRowStatus AS RowStatus,
                   res.ReadPermissionIndicator,
                   res.AccessToPersonalDataPermissionIndicator,
                   res.AccessToGenderAndAgeDataPermissionIndicator,
                   res.WritePermissionIndicator,
                   res.DeletePermissionIndicator,
                   0 AS RowAction,
                   0 AS RowSelectionIndicator,
                   @Page AS CurrentPage,
                   COUNT(*) OVER () AS TotalRowCount,
                   @UnaccessionedCount AS UnaccessionedSampleCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.ID
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN
                (
                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                ) f
                    ON m.idfMaterial = f.SampleID
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                    ON diseaseName.idfsReference = m.DiseaseID
                LEFT JOIN @MonitoringSessionDiseases msDiseases
                    ON msDiseases.ID = m.idfMonitoringSession
                LEFT JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                    ON functionalArea.idfsReference = d.idfsDepartmentName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            GROUP BY m.idfMaterial,
                     m.strBarcode,
                     f.SampleID,
                     m.idfRootMaterial,
                     m.idfParentMaterial,
                     m.idfsSampleType,
                     sampleType.name,
                     m.idfHuman,
                     m.strCalculatedHumanName,
                     m.idfSpecies,
                     m.idfAnimal,
                     a.strAnimalCode,
                     m.idfVector,
                     m.idfMonitoringSession,
                     m.idfVectorSurveillanceSession,
                     m.idfHumanCase,
                     m.idfVetCase,
                     m.strCalculatedCaseID,
                     m.TestCompletedIndicator,
                     msDiseases.DiseaseIdentifiers,
                     vsDiseases.DiseaseIdentifiers,
                     m.DiseaseID,
                     diseaseName.name, 
                     msDiseases.DiseaseNames,
                     msDiseases.DisplayDiseaseNames, 
                     vsDiseases.DiseaseNames, 
                     vsDiseases.DisplayDiseaseNames, 
                     m.idfInDepartment,
                     functionalArea.name,
                     m.idfSubdivision,
                     m.StorageBoxPlace,
                     m.datFieldCollectionDate,
                     m.idfFieldCollectedByPerson,
                     m.idfFieldCollectedByOffice,
                     m.datFieldSentDate,
                     m.idfSendToOffice,
                     m.idfsSite,
                     m.strFieldBarcode,
                     m.datEnteringDate,
                     m.datOutOfRepositoryDate,
                     m.idfMarkedForDispositionByPerson,
                     m.blnReadOnly,
                     m.blnAccessioned,
                     accessionConditionType.name,
                     m.datAccession,
                     m.idfsAccessionCondition,
                     accessionConditionType.name,
                     sampleStatusType.name,
                     sampleStatusType.name,
                     m.idfAccesionByPerson,
                     m.idfsSampleStatus,
                     m.datSampleStatusDate,
                     m.strCondition,
                     m.idfsDestructionMethod,
                     m.datDestructionDate,
                     m.idfDestroyedByPerson,
                     m.TestUnassignedIndicator,
                     m.TransferIndicator,
                     m.strNote,
                     m.idfsCurrentSite,
                     m.idfsBirdStatus,
                     m.idfMainTest,
                     m.idfsSampleKind,
                     m.PreviousSampleStatusID,
                     m.LabModuleSourceIndicator,
                     m.intRowStatus,
                     res.ReadPermissionIndicator,
                     res.AccessToPersonalDataPermissionIndicator,
                     res.AccessToGenderAndAgeDataPermissionIndicator,
                     res.WritePermissionIndicator,
                     res.DeletePermissionIndicator
        ) AS x
        WHERE RowNum > @FirstRecord
              AND RowNum < @LastRecord
        ORDER BY RowNum
        OPTION (RECOMPILE);
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USSP_GBL_SAMPLES_SET]...';


GO
-- ================================================================================================
-- Name: USSP_GBL_SAMPLES_SET
--
-- Description:	Inserts or updates sample records for various non-laboratory module use cases.
--
--	Revision History:
--	Name               Date       Change Detail
--	------------------ ---------- ----------------------------------------------------------------
-- Stephen Long        11/21/2022 Initial release with data audit logic for SAUC30 and 31.
-- Stephen Long        11/29/2022 Added delete data audit logic.
-- Stephen Long        11/30/2022 Added check for non-null sample ID when row action set to insert.
-- Stephen Long        12/09/2022 Added EIDSSObjectID parameter to insert for strObject.
--
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_GBL_SAMPLES_SET]
(
    @AuditUserName NVARCHAR(200) = NULL,
    @DataAuditEventID BIGINT = NULL,
    @EIDSSObjectID NVARCHAR(200) = NULL, 
    @SampleID BIGINT OUTPUT,
    @SampleTypeID BIGINT,
    @RootSampleID BIGINT = NULL,
    @ParentSampleID BIGINT = NULL,
    @HumanID BIGINT = NULL,
    @SpeciesID BIGINT = NULL,
    @AnimalID BIGINT = NULL,
    @VectorID BIGINT = NULL,
    @MonitoringSessionID BIGINT = NULL,
    @VectorSessionID BIGINT = NULL,
    @HumanDiseaseReportID BIGINT = NULL,
    @VeterinaryDiseaseReportID BIGINT = NULL,
    @CollectionDate DATETIME = NULL,
    @CollectedByPersonID BIGINT = NULL,
    @CollectedByOrganizationID BIGINT = NULL,
    @SentDate DATETIME = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @EIDSSLocalFieldSampleID NVARCHAR(200) = NULL,
    @SiteID BIGINT,
    @EnteredDate DATETIME = NULL,
    @ReadOnlyIndicator BIT,
    @SampleStatusTypeID BIGINT = NULL,
    @Comments NVARCHAR(500) = NULL,
    @CurrentSiteID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @BirdStatusTypeID BIGINT = NULL,
    @RowStatus INT,
    @RowAction CHAR
)
AS
DECLARE @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectID BIGINT = @SampleID,
        @ObjectTableID BIGINT = 75620000000; -- tlbMaterial
DECLARE @SampleBeforeEdit TABLE
(
    SampleID BIGINT,
    SampleTypeID BIGINT,
    RootSampleID BIGINT,
    ParentSampleID BIGINT,
    HumanID BIGINT,
    SpeciesID BIGINT,
    AnimalID BIGINT,
    MonitoringSessionID BIGINT,
    FieldCollectedByPersonID BIGINT,
    FieldCollectedByOfficeID BIGINT,
    MainTestID BIGINT,
    FieldCollectionDate DATETIME,
    FieldSentDate DATETIME,
    FieldBarcodeID NVARCHAR(200),
    CalculatedCaseID NVARCHAR(200),
    CalculatedHumanName NVARCHAR(700),
    VectorSurveillanceSessionID BIGINT,
    VectorID BIGINT,
    SubdivisionID BIGINT,
    SampleStatusTypeID BIGINT,
    DepartmentID BIGINT,
    DestroyedByPersonID BIGINT,
    EnteringDate DATETIME,
    DestructionDate DATETIME,
    BarcodeID NVARCHAR(200),
    Note NVARCHAR(500),
    SendToOfficeID BIGINT,
    ReadOnlyIndicator BIT,
    BirdStatusTypeID BIGINT,
    HumanDiseaseReportID BIGINT,
    VeterinaryDiseaseReportID BIGINT,
    AccessionDate DATETIME,
    AccessionConditionTypeID BIGINT,
    Condition NVARCHAR(200),
    AccessionByPersonID BIGINT,
    DestructionMethodTypeID BIGINT,
    CurrentSiteID BIGINT,
    SampleKindTypeID BIGINT,
    AccessionIndicator INT,
    ShowInCaseOrSessionIndicator INT,
    ShowInLabListIndicator INT,
    ShowInDispositionListIndicator INT,
    ShowInAccessionInFormIndicator INT,
    MarkedForDispositionByPersonID BIGINT,
    OutOfRepositoryDate DATETIME,
    SampleStatusDate DATETIME,
    RowStatus INT
);
DECLARE @SampleAfterEdit TABLE
(
    SampleID BIGINT,
    SampleTypeID BIGINT,
    RootSampleID BIGINT,
    ParentSampleID BIGINT,
    HumanID BIGINT,
    SpeciesID BIGINT,
    AnimalID BIGINT,
    MonitoringSessionID BIGINT,
    FieldCollectedByPersonID BIGINT,
    FieldCollectedByOfficeID BIGINT,
    MainTestID BIGINT,
    FieldCollectionDate DATETIME,
    FieldSentDate DATETIME,
    FieldBarcodeID NVARCHAR(200),
    CalculatedCaseID NVARCHAR(200),
    CalculatedHumanName NVARCHAR(700),
    VectorSurveillanceSessionID BIGINT,
    VectorID BIGINT,
    SubdivisionID BIGINT,
    SampleStatusTypeID BIGINT,
    DepartmentID BIGINT,
    DestroyedByPersonID BIGINT,
    EnteringDate DATETIME,
    DestructionDate DATETIME,
    BarcodeID NVARCHAR(200),
    Note NVARCHAR(500),
    SendToOfficeID BIGINT,
    ReadOnlyIndicator BIT,
    BirdStatusTypeID BIGINT,
    HumanDiseaseReportID BIGINT,
    VeterinaryDiseaseReportID BIGINT,
    AccessionDate DATETIME,
    AccessionConditionTypeID BIGINT,
    Condition NVARCHAR(200),
    AccessionByPersonID BIGINT,
    DestructionMethodTypeID BIGINT,
    CurrentSiteID BIGINT,
    SampleKindTypeID BIGINT,
    AccessionIndicator INT,
    ShowInCaseOrSessionIndicator INT,
    ShowInLabListIndicator INT,
    ShowInDispositionListIndicator INT,
    ShowInAccessionInFormIndicator INT,
    MarkedForDispositionByPersonID BIGINT,
    OutOfRepositoryDate DATETIME,
    SampleStatusDate DATETIME,
    RowStatus INT
);
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data Audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        --Local/field sample EIDSS ID. Only system assign when user leaves blank.
        IF @EIDSSLocalFieldSampleID IS NULL
           OR @EIDSSLocalFieldSampleID = ''
        BEGIN
            EXECUTE dbo.USP_GBL_NextNumber_GET @ObjectName = N'Sample Field Barcode',
                                               @NextNumberValue = @EIDSSLocalFieldSampleID OUTPUT,
                                               @InstallationSite = NULL;
        END;

        IF @RowAction = 'I'
           OR @RowAction = '1' -- Insert
        BEGIN
            IF @SampleID IS NOT NULL
            BEGIN
                SET @SampleID = NULL;
            END
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = N'tlbMaterial',
                                              @idfsKey = @SampleID OUTPUT;

            INSERT INTO dbo.tlbMaterial
            (
                idfMaterial,
                idfsSampleType,
                idfRootMaterial,
                idfParentMaterial,
                idfHuman,
                idfSpecies,
                idfAnimal,
                idfMonitoringSession,
                idfFieldCollectedByPerson,
                idfFieldCollectedByOffice,
                idfMainTest,
                datFieldCollectionDate,
                datFieldSentDate,
                strFieldBarcode,
                idfVectorSurveillanceSession,
                idfVector,
                idfsSampleStatus,
                datEnteringDate,
                strNote,
                idfsSite,
                intRowStatus,
                rowguid,
                idfSendToOffice,
                blnReadOnly,
                idfsBirdStatus,
                idfHumanCase,
                idfVetCase,
                idfsCurrentSite,
                SourceSystemNameID,
                SourceSystemKeyValue,
                DiseaseID,
                AuditCreateUser,
                AuditCreateDTM,
                AuditUpdateUser,
                AuditUpdateDTM,
                TestUnassignedIndicator,
                TestCompletedIndicator,
                TransferIndicator
            )
            VALUES
            (@SampleID,
             @SampleTypeID,
             @SampleID,
             @ParentSampleID,
             @HumanID,
             @SpeciesID,
             @AnimalID,
             @MonitoringSessionID,
             @CollectedByPersonID,
             @CollectedByOrganizationID,
             NULL,
             @CollectionDate,
             @SentDate,
             @EIDSSLocalFieldSampleID,
             @VectorSessionID,
             @VectorID,
             @SampleStatusTypeID,
             GETDATE(),
             @Comments,
             @SiteID,
             0  ,
             NEWID(),
             @SentToOrganizationID,
             @ReadOnlyIndicator,
             @BirdStatusTypeID,
             @HumanDiseaseReportID,
             @VeterinaryDiseaseReportID,
             @CurrentSiteID,
             10519001,
             '[{"idfMaterial":' + CAST(@SampleID AS NVARCHAR(300)) + '}]',
             @DiseaseID,
             @AuditUserName,
             GETDATE(),
             @AuditUserName,
             GETDATE(),
             1  ,
             0  ,
             0
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @SampleID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @EIDSSObjectID
            );
        -- End data audit
        END;
        ELSE
        BEGIN
            INSERT INTO @SampleBeforeEdit
            (
                SampleID,
                SampleTypeID,
                RootSampleID,
                ParentSampleID,
                HumanID,
                SpeciesID,
                AnimalID,
                MonitoringSessionID,
                FieldCollectedByPersonID,
                FieldCollectedByOfficeID,
                MainTestID,
                FieldCollectionDate,
                FieldSentDate,
                FieldBarcodeID,
                CalculatedCaseID,
                CalculatedHumanName,
                VectorSurveillanceSessionID,
                VectorID,
                SubdivisionID,
                SampleStatusTypeID,
                DepartmentID,
                DestroyedByPersonID,
                EnteringDate,
                DestructionDate,
                BarcodeID,
                Note,
                SendToOfficeID,
                ReadOnlyIndicator,
                BirdStatusTypeID,
                HumanDiseaseReportID,
                VeterinaryDiseaseReportID,
                AccessionDate,
                AccessionConditionTypeID,
                Condition,
                AccessionByPersonID,
                DestructionMethodTypeID,
                CurrentSiteID,
                SampleKindTypeID,
                AccessionIndicator,
                ShowInCaseOrSessionIndicator,
                ShowInLabListIndicator,
                ShowInDispositionListIndicator,
                ShowInAccessionInFormIndicator,
                MarkedForDispositionByPersonID,
                OutOfRepositoryDate,
                SampleStatusDate,
                RowStatus
            )
            SELECT idfMaterial,
                   idfsSampleType,
                   idfRootMaterial,
                   idfParentMaterial,
                   idfHuman,
                   idfSpecies,
                   idfAnimal,
                   idfMonitoringSession,
                   idfFieldCollectedByPerson,
                   idfFieldCollectedByOffice,
                   idfMainTest,
                   datFieldCollectionDate,
                   datFieldSentDate,
                   strFieldBarcode,
                   strCalculatedCaseID,
                   strCalculatedHumanName,
                   idfVectorSurveillanceSession,
                   idfVector,
                   idfSubdivision,
                   idfsSampleStatus,
                   idfInDepartment,
                   idfDestroyedByPerson,
                   datEnteringDate,
                   datDestructionDate,
                   strBarcode,
                   strNote,
                   idfSendToOffice,
                   blnReadOnly,
                   idfsBirdStatus,
                   idfHumanCase,
                   idfVetCase,
                   datAccession,
                   idfsAccessionCondition,
                   strCondition,
                   idfAccesionByPerson,
                   idfsDestructionMethod,
                   idfsCurrentSite,
                   idfsSampleKind,
                   blnAccessioned,
                   blnShowInCaseOrSession,
                   blnShowInLabList,
                   blnShowInDispositionList,
                   blnShowInAccessionInForm,
                   idfMarkedForDispositionByPerson,
                   datOutOfRepositoryDate,
                   datSampleStatusDate,
                   intRowStatus
            FROM dbo.tlbMaterial
            WHERE idfMaterial = @SampleID;

            UPDATE dbo.tlbMaterial
            SET idfsSampleType = @SampleTypeID,
                idfHuman = @HumanID,
                idfSpecies = @SpeciesID,
                idfAnimal = @AnimalID,
                idfMonitoringSession = @MonitoringSessionID,
                idfFieldCollectedByPerson = @CollectedByPersonID,
                idfFieldCollectedByOffice = @CollectedByOrganizationID,
                datFieldCollectionDate = @CollectionDate,
                datFieldSentDate = @SentDate,
                strFieldBarcode = @EIDSSLocalFieldSampleID,
                idfVectorSurveillanceSession = @VectorSessionID,
                idfVector = @VectorID,
                strNote = @Comments,
                idfsSite = @SiteID,
                intRowStatus = @RowStatus,
                idfSendToOffice = @SentToOrganizationID,
                blnReadOnly = @ReadOnlyIndicator,
                idfHumanCase = @HumanDiseaseReportID,
                idfVetCase = @VeterinaryDiseaseReportID,
                DiseaseID = @DiseaseID,
                idfsBirdStatus = @BirdStatusTypeID,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfMaterial = @SampleID;

            INSERT INTO @SampleAfterEdit
            (
                SampleID,
                SampleTypeID,
                RootSampleID,
                ParentSampleID,
                HumanID,
                SpeciesID,
                AnimalID,
                MonitoringSessionID,
                FieldCollectedByPersonID,
                FieldCollectedByOfficeID,
                MainTestID,
                FieldCollectionDate,
                FieldSentDate,
                FieldBarcodeID,
                CalculatedCaseID,
                CalculatedHumanName,
                VectorSurveillanceSessionID,
                VectorID,
                SubdivisionID,
                SampleStatusTypeID,
                DepartmentID,
                DestroyedByPersonID,
                EnteringDate,
                DestructionDate,
                BarcodeID,
                Note,
                SendToOfficeID,
                ReadOnlyIndicator,
                BirdStatusTypeID,
                HumanDiseaseReportID,
                VeterinaryDiseaseReportID,
                AccessionDate,
                AccessionConditionTypeID,
                Condition,
                AccessionByPersonID,
                DestructionMethodTypeID,
                CurrentSiteID,
                SampleKindTypeID,
                AccessionIndicator,
                ShowInCaseOrSessionIndicator,
                ShowInLabListIndicator,
                ShowInDispositionListIndicator,
                ShowInAccessionInFormIndicator,
                MarkedForDispositionByPersonID,
                OutOfRepositoryDate,
                SampleStatusDate,
                RowStatus
            )
            SELECT idfMaterial,
                   idfsSampleType,
                   idfRootMaterial,
                   idfParentMaterial,
                   idfHuman,
                   idfSpecies,
                   idfAnimal,
                   idfMonitoringSession,
                   idfFieldCollectedByPerson,
                   idfFieldCollectedByOffice,
                   idfMainTest,
                   datFieldCollectionDate,
                   datFieldSentDate,
                   strFieldBarcode,
                   strCalculatedCaseID,
                   strCalculatedHumanName,
                   idfVectorSurveillanceSession,
                   idfVector,
                   idfSubdivision,
                   idfsSampleStatus,
                   idfInDepartment,
                   idfDestroyedByPerson,
                   datEnteringDate,
                   datDestructionDate,
                   strBarcode,
                   strNote,
                   idfSendToOffice,
                   blnReadOnly,
                   idfsBirdStatus,
                   idfHumanCase,
                   idfVetCase,
                   datAccession,
                   idfsAccessionCondition,
                   strCondition,
                   idfAccesionByPerson,
                   idfsDestructionMethod,
                   idfsCurrentSite,
                   idfsSampleKind,
                   blnAccessioned,
                   blnShowInCaseOrSession,
                   blnShowInLabList,
                   blnShowInDispositionList,
                   blnShowInAccessionInForm,
                   idfMarkedForDispositionByPerson,
                   datOutOfRepositoryDate,
                   datSampleStatusDate,
                   intRowStatus
            FROM dbo.tlbMaterial
            WHERE idfMaterial = @SampleID;

            IF @RowStatus = 0
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       49545390000000,
                       a.SampleID,
                       NULL,
                       b.SampleTypeID,
                       a.SampleTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.SampleTypeID <> b.SampleTypeID)
                      OR (
                             a.SampleTypeID IS NOT NULL
                             AND b.SampleTypeID IS NULL
                         )
                      OR (
                             a.SampleTypeID IS NULL
                             AND b.SampleTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       49545400000000,
                       a.SampleID,
                       NULL,
                       b.RootSampleID,
                       a.RootSampleID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.RootSampleID <> b.RootSampleID)
                      OR (
                             a.RootSampleID IS NOT NULL
                             AND b.RootSampleID IS NULL
                         )
                      OR (
                             a.RootSampleID IS NULL
                             AND b.RootSampleID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       79970000000,
                       a.SampleID,
                       NULL,
                       b.ParentSampleID,
                       a.ParentSampleID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.ParentSampleID <> b.ParentSampleID)
                      OR (
                             a.ParentSampleID IS NOT NULL
                             AND b.ParentSampleID IS NULL
                         )
                      OR (
                             a.ParentSampleID IS NULL
                             AND b.ParentSampleID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572430000000,
                       a.SampleID,
                       NULL,
                       b.HumanID,
                       a.HumanID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.HumanID <> b.HumanID)
                      OR (
                             a.HumanID IS NOT NULL
                             AND b.HumanID IS NULL
                         )
                      OR (
                             a.HumanID IS NULL
                             AND b.HumanID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572440000000,
                       a.SampleID,
                       NULL,
                       b.SpeciesID,
                       a.SpeciesID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.SpeciesID <> b.SpeciesID)
                      OR (
                             a.SpeciesID IS NOT NULL
                             AND b.SpeciesID IS NULL
                         )
                      OR (
                             a.SpeciesID IS NULL
                             AND b.SpeciesID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572450000000,
                       a.SampleID,
                       NULL,
                       b.AnimalID,
                       a.AnimalID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.AnimalID <> b.AnimalID)
                      OR (
                             a.AnimalID IS NOT NULL
                             AND b.AnimalID IS NULL
                         )
                      OR (
                             a.AnimalID IS NULL
                             AND b.AnimalID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572470000000,
                       a.SampleID,
                       NULL,
                       b.MonitoringSessionID,
                       a.MonitoringSessionID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.MonitoringSessionID <> b.MonitoringSessionID)
                      OR (
                             a.MonitoringSessionID IS NOT NULL
                             AND b.MonitoringSessionID IS NULL
                         )
                      OR (
                             a.MonitoringSessionID IS NULL
                             AND b.MonitoringSessionID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       79950000000,
                       a.SampleID,
                       NULL,
                       b.FieldCollectedByPersonID,
                       a.FieldCollectedByPersonID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.FieldCollectedByPersonID <> b.FieldCollectedByPersonID)
                      OR (
                             a.FieldCollectedByPersonID IS NOT NULL
                             AND b.FieldCollectedByPersonID IS NULL
                         )
                      OR (
                             a.FieldCollectedByPersonID IS NULL
                             AND b.FieldCollectedByPersonID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       79940000000,
                       a.SampleID,
                       NULL,
                       b.FieldCollectedByOfficeID,
                       a.FieldCollectedByOfficeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.FieldCollectedByOfficeID <> b.FieldCollectedByOfficeID)
                      OR (
                             a.FieldCollectedByOfficeID IS NOT NULL
                             AND b.FieldCollectedByOfficeID IS NULL
                         )
                      OR (
                             a.FieldCollectedByOfficeID IS NULL
                             AND b.FieldCollectedByOfficeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       49545410000000,
                       a.SampleID,
                       NULL,
                       b.MainTestID,
                       a.MainTestID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.MainTestID <> b.MainTestID)
                      OR (
                             a.MainTestID IS NOT NULL
                             AND b.MainTestID IS NULL
                         )
                      OR (
                             a.MainTestID IS NULL
                             AND b.MainTestID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       79920000000,
                       a.SampleID,
                       NULL,
                       b.FieldCollectionDate,
                       a.FieldCollectionDate,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.FieldCollectionDate <> b.FieldCollectionDate)
                      OR (
                             a.FieldCollectionDate IS NOT NULL
                             AND b.FieldCollectionDate IS NULL
                         )
                      OR (
                             a.FieldCollectionDate IS NULL
                             AND b.FieldCollectionDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       79930000000,
                       a.SampleID,
                       NULL,
                       b.FieldSentDate,
                       a.FieldSentDate,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.FieldSentDate <> b.FieldSentDate)
                      OR (
                             a.FieldSentDate IS NOT NULL
                             AND b.FieldSentDate IS NULL
                         )
                      OR (
                             a.FieldSentDate IS NULL
                             AND b.FieldSentDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80030000000,
                       a.SampleID,
                       NULL,
                       b.FieldBarcodeID,
                       a.FieldBarcodeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.FieldBarcodeID <> b.FieldBarcodeID)
                      OR (
                             a.FieldBarcodeID IS NOT NULL
                             AND b.FieldBarcodeID IS NULL
                         )
                      OR (
                             a.FieldBarcodeID IS NULL
                             AND b.FieldBarcodeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572480000000,
                       a.SampleID,
                       NULL,
                       b.CalculatedCaseID,
                       a.CalculatedCaseID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.CalculatedCaseID <> b.CalculatedCaseID)
                      OR (
                             a.CalculatedCaseID IS NOT NULL
                             AND b.CalculatedCaseID IS NULL
                         )
                      OR (
                             a.CalculatedCaseID IS NULL
                             AND b.CalculatedCaseID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572490000000,
                       a.SampleID,
                       NULL,
                       b.CalculatedHumanName,
                       a.CalculatedHumanName,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.CalculatedHumanName <> b.CalculatedHumanName)
                      OR (
                             a.CalculatedHumanName IS NOT NULL
                             AND b.CalculatedHumanName IS NULL
                         )
                      OR (
                             a.CalculatedHumanName IS NULL
                             AND b.CalculatedHumanName IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4575190000000,
                       a.SampleID,
                       NULL,
                       b.VectorSurveillanceSessionID,
                       a.VectorSurveillanceSessionID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.VectorSurveillanceSessionID <> b.VectorSurveillanceSessionID)
                      OR (
                             a.VectorSurveillanceSessionID IS NOT NULL
                             AND b.VectorSurveillanceSessionID IS NULL
                         )
                      OR (
                             a.VectorSurveillanceSessionID IS NULL
                             AND b.VectorSurveillanceSessionID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4575200000000,
                       a.SampleID,
                       NULL,
                       b.VectorID,
                       a.VectorID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.VectorID <> b.VectorID)
                      OR (
                             a.VectorID IS NOT NULL
                             AND b.VectorID IS NULL
                         )
                      OR (
                             a.VectorID IS NULL
                             AND b.VectorID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4576340000000,
                       a.SampleID,
                       NULL,
                       b.SubdivisionID,
                       a.SubdivisionID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.SubdivisionID <> b.SubdivisionID)
                      OR (
                             a.SubdivisionID IS NOT NULL
                             AND b.SubdivisionID IS NULL
                         )
                      OR (
                             a.SubdivisionID IS NULL
                             AND b.SubdivisionID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       49545420000000,
                       a.SampleID,
                       NULL,
                       b.SampleStatusTypeID,
                       a.SampleStatusTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.SampleStatusTypeID <> b.SampleStatusTypeID)
                      OR (
                             a.SampleStatusTypeID IS NOT NULL
                             AND b.SampleStatusTypeID IS NULL
                         )
                      OR (
                             a.SampleStatusTypeID IS NULL
                             AND b.SampleStatusTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4576360000000,
                       a.SampleID,
                       NULL,
                       b.DepartmentID,
                       a.DepartmentID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.DepartmentID <> b.DepartmentID)
                      OR (
                             a.DepartmentID IS NOT NULL
                             AND b.DepartmentID IS NULL
                         )
                      OR (
                             a.DepartmentID IS NULL
                             AND b.DepartmentID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4576370000000,
                       a.SampleID,
                       NULL,
                       b.DestroyedByPersonID,
                       a.DestroyedByPersonID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.DestroyedByPersonID <> b.DestroyedByPersonID)
                      OR (
                             a.DestroyedByPersonID IS NOT NULL
                             AND b.DestroyedByPersonID IS NULL
                         )
                      OR (
                             a.DestroyedByPersonID IS NULL
                             AND b.DestroyedByPersonID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4576390000000,
                       a.SampleID,
                       NULL,
                       b.EnteringDate,
                       a.EnteringDate,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.EnteringDate <> b.EnteringDate)
                      OR (
                             a.EnteringDate IS NOT NULL
                             AND b.EnteringDate IS NULL
                         )
                      OR (
                             a.EnteringDate IS NULL
                             AND b.EnteringDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4576400000000,
                       a.SampleID,
                       NULL,
                       b.DestructionDate,
                       a.DestructionDate,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.DestructionDate <> b.DestructionDate)
                      OR (
                             a.DestructionDate IS NOT NULL
                             AND b.DestructionDate IS NULL
                         )
                      OR (
                             a.DestructionDate IS NULL
                             AND b.DestructionDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4576410000000,
                       a.SampleID,
                       NULL,
                       b.BarcodeID,
                       a.BarcodeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.BarcodeID <> b.BarcodeID)
                      OR (
                             a.BarcodeID IS NOT NULL
                             AND b.BarcodeID IS NULL
                         )
                      OR (
                             a.BarcodeID IS NULL
                             AND b.BarcodeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4576420000000,
                       a.SampleID,
                       NULL,
                       b.Note,
                       a.Note,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.Note <> b.Note)
                      OR (
                             a.Note IS NOT NULL
                             AND b.Note IS NULL
                         )
                      OR (
                             a.Note IS NULL
                             AND b.Note IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578720000000,
                       a.SampleID,
                       NULL,
                       b.SendToOfficeID,
                       a.SendToOfficeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.SendToOfficeID <> b.SendToOfficeID)
                      OR (
                             a.SendToOfficeID IS NOT NULL
                             AND b.SendToOfficeID IS NULL
                         )
                      OR (
                             a.SendToOfficeID IS NULL
                             AND b.SendToOfficeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578730000000,
                       a.SampleID,
                       NULL,
                       b.ReadOnlyIndicator,
                       a.ReadOnlyIndicator,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.ReadOnlyIndicator <> b.ReadOnlyIndicator)
                      OR (
                             a.ReadOnlyIndicator IS NOT NULL
                             AND b.ReadOnlyIndicator IS NULL
                         )
                      OR (
                             a.ReadOnlyIndicator IS NULL
                             AND b.ReadOnlyIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       12014480000000,
                       a.SampleID,
                       NULL,
                       b.BirdStatusTypeID,
                       a.BirdStatusTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.BirdStatusTypeID <> b.BirdStatusTypeID)
                      OR (
                             a.BirdStatusTypeID IS NOT NULL
                             AND b.BirdStatusTypeID IS NULL
                         )
                      OR (
                             a.BirdStatusTypeID IS NULL
                             AND b.BirdStatusTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       12665570000000,
                       a.SampleID,
                       NULL,
                       b.HumanDiseaseReportID,
                       a.HumanDiseaseReportID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.HumanDiseaseReportID <> b.HumanDiseaseReportID)
                      OR (
                             a.HumanDiseaseReportID IS NOT NULL
                             AND b.HumanDiseaseReportID IS NULL
                         )
                      OR (
                             a.HumanDiseaseReportID IS NULL
                             AND b.HumanDiseaseReportID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       12665580000000,
                       a.SampleID,
                       NULL,
                       b.VeterinaryDiseaseReportID,
                       a.VeterinaryDiseaseReportID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.VeterinaryDiseaseReportID <> b.VeterinaryDiseaseReportID)
                      OR (
                             a.VeterinaryDiseaseReportID IS NOT NULL
                             AND b.VeterinaryDiseaseReportID IS NULL
                         )
                      OR (
                             a.VeterinaryDiseaseReportID IS NULL
                             AND b.VeterinaryDiseaseReportID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       12666880000000,
                       a.SampleID,
                       NULL,
                       b.AccessionDate,
                       a.AccessionDate,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.AccessionDate <> b.AccessionDate)
                      OR (
                             a.AccessionDate IS NOT NULL
                             AND b.AccessionDate IS NULL
                         )
                      OR (
                             a.AccessionDate IS NULL
                             AND b.AccessionDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       12666890000000,
                       a.SampleID,
                       NULL,
                       b.AccessionConditionTypeID,
                       a.AccessionConditionTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.AccessionConditionTypeID <> b.AccessionConditionTypeID)
                      OR (
                             a.AccessionConditionTypeID IS NOT NULL
                             AND b.AccessionConditionTypeID IS NULL
                         )
                      OR (
                             a.AccessionConditionTypeID IS NULL
                             AND b.AccessionConditionTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       12666900000000,
                       a.SampleID,
                       NULL,
                       b.Condition,
                       a.Condition,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.Condition <> b.Condition)
                      OR (
                             a.Condition IS NOT NULL
                             AND b.Condition IS NULL
                         )
                      OR (
                             a.Condition IS NULL
                             AND b.Condition IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       12666910000000,
                       a.SampleID,
                       NULL,
                       b.AccessionByPersonID,
                       a.AccessionByPersonID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.AccessionByPersonID <> b.AccessionByPersonID)
                      OR (
                             a.AccessionByPersonID IS NOT NULL
                             AND b.AccessionByPersonID IS NULL
                         )
                      OR (
                             a.AccessionByPersonID IS NULL
                             AND b.AccessionByPersonID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       12675260000000,
                       a.SampleID,
                       NULL,
                       b.DestructionMethodTypeID,
                       a.DestructionMethodTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.DestructionMethodTypeID <> b.DestructionMethodTypeID)
                      OR (
                             a.DestructionMethodTypeID IS NOT NULL
                             AND b.DestructionMethodTypeID IS NULL
                         )
                      OR (
                             a.DestructionMethodTypeID IS NULL
                             AND b.DestructionMethodTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       49545560000000,
                       a.SampleID,
                       NULL,
                       b.CurrentSiteID,
                       a.CurrentSiteID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.CurrentSiteID <> b.CurrentSiteID)
                      OR (
                             a.CurrentSiteID IS NOT NULL
                             AND b.CurrentSiteID IS NULL
                         )
                      OR (
                             a.CurrentSiteID IS NULL
                             AND b.CurrentSiteID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       49545570000000,
                       a.SampleID,
                       NULL,
                       b.SampleKindTypeID,
                       a.SampleKindTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.SampleKindTypeID <> b.SampleKindTypeID)
                      OR (
                             a.SampleKindTypeID IS NOT NULL
                             AND b.SampleKindTypeID IS NULL
                         )
                      OR (
                             a.SampleKindTypeID IS NULL
                             AND b.SampleKindTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       49545580000000,
                       a.SampleID,
                       NULL,
                       b.AccessionIndicator,
                       a.AccessionIndicator,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.AccessionIndicator <> b.AccessionIndicator)
                      OR (
                             a.AccessionIndicator IS NOT NULL
                             AND b.AccessionIndicator IS NULL
                         )
                      OR (
                             a.AccessionIndicator IS NULL
                             AND b.AccessionIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       49545590000000,
                       a.SampleID,
                       NULL,
                       b.ShowInCaseOrSessionIndicator,
                       a.ShowInCaseOrSessionIndicator,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.ShowInCaseOrSessionIndicator <> b.ShowInCaseOrSessionIndicator)
                      OR (
                             a.ShowInCaseOrSessionIndicator IS NOT NULL
                             AND b.ShowInCaseOrSessionIndicator IS NULL
                         )
                      OR (
                             a.ShowInCaseOrSessionIndicator IS NULL
                             AND b.ShowInCaseOrSessionIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       49545600000000,
                       a.SampleID,
                       NULL,
                       b.ShowInLabListIndicator,
                       a.ShowInLabListIndicator,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.ShowInLabListIndicator <> b.ShowInLabListIndicator)
                      OR (
                             a.ShowInLabListIndicator IS NOT NULL
                             AND b.ShowInLabListIndicator IS NULL
                         )
                      OR (
                             a.ShowInLabListIndicator IS NULL
                             AND b.ShowInLabListIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       49545620000000,
                       a.SampleID,
                       NULL,
                       b.ShowInDispositionListIndicator,
                       a.ShowInDispositionListIndicator,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.ShowInDispositionListIndicator <> b.ShowInDispositionListIndicator)
                      OR (
                             a.ShowInDispositionListIndicator IS NOT NULL
                             AND b.ShowInDispositionListIndicator IS NULL
                         )
                      OR (
                             a.ShowInDispositionListIndicator IS NULL
                             AND b.ShowInDispositionListIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       49545610000000,
                       a.SampleID,
                       NULL,
                       b.ShowInAccessionInFormIndicator,
                       a.ShowInAccessionInFormIndicator,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.ShowInAccessionInFormIndicator <> b.ShowInAccessionInFormIndicator)
                      OR (
                             a.ShowInAccessionInFormIndicator IS NOT NULL
                             AND b.ShowInAccessionInFormIndicator IS NULL
                         )
                      OR (
                             a.ShowInAccessionInFormIndicator IS NULL
                             AND b.ShowInAccessionInFormIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       51523600000000,
                       a.SampleID,
                       NULL,
                       b.MarkedForDispositionByPersonID,
                       a.MarkedForDispositionByPersonID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.MarkedForDispositionByPersonID <> b.MarkedForDispositionByPersonID)
                      OR (
                             a.MarkedForDispositionByPersonID IS NOT NULL
                             AND b.MarkedForDispositionByPersonID IS NULL
                         )
                      OR (
                             a.MarkedForDispositionByPersonID IS NULL
                             AND b.MarkedForDispositionByPersonID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       51528570000000,
                       a.SampleID,
                       NULL,
                       b.OutOfRepositoryDate,
                       a.OutOfRepositoryDate,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.OutOfRepositoryDate <> b.OutOfRepositoryDate)
                      OR (
                             a.OutOfRepositoryDate IS NOT NULL
                             AND b.OutOfRepositoryDate IS NULL
                         )
                      OR (
                             a.OutOfRepositoryDate IS NULL
                             AND b.OutOfRepositoryDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       51528580000000,
                       a.SampleID,
                       NULL,
                       b.SampleStatusDate,
                       a.SampleStatusDate,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.SampleStatusDate <> b.SampleStatusDate)
                      OR (
                             a.SampleStatusDate IS NOT NULL
                             AND b.SampleStatusDate IS NULL
                         )
                      OR (
                             a.SampleStatusDate IS NULL
                             AND b.SampleStatusDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailRestore
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    idfObjectDetail,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       a.SampleID,
                       NULL,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE a.RowStatus = 0
                      AND b.RowStatus = 1;
            END
            ELSE
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                VALUES
                (@DataAuditEventID, @ObjectTableID, @SampleID, @AuditUserName, @EIDSSObjectID);
            END
        END;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USSP_GBL_TESTS_SET]...';


GO
-- ================================================================================================
-- Name: USSP_GBL_TESTS_SET
--
-- Description:	Inserts or updates laboratory and field test records for various use cases.
--
-- Revision History:
-- Name                Date       Change Detail
-- ------------------- ---------- ----------------------------------------------------------------
-- Stephen Long        11/21/2022 Initial release with data audit logic for SAUC30 and 31.
-- Stephen Long        11/29/2022 Added delete data audit logic.
-- Stephen Long        12/09/2022 Added EIDSSObjectID parameter to insert for strObject.
--
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_GBL_TESTS_SET]
(
    @TestID BIGINT OUTPUT,
    @TestNameTypeID BIGINT = NULL,
    @TestCategoryTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestStatusTypeID BIGINT,
    @DiseaseID BIGINT,
    @SampleID BIGINT = NULL,
    @BatchTestID BIGINT = NULL,
    @ObservationID BIGINT,
    @TestNumber INT = NULL,
    @Comments NVARCHAR(500) = NULL,
    @RowStatus INT = NULL,
    @StartedDate DATETIME = NULL,
    @ResultDate DATETIME = NULL,
    @TestedByOrganizationID BIGINT = NULL,
    @TestedByPersonID BIGINT = NULL,
    @ResultEnteredByOrganizationID BIGINT = NULL,
    @ResultEnteredByPersonID BIGINT = NULL,
    @ValidatedByOrganizationID BIGINT = NULL,
    @ValidatedByPersonID BIGINT = NULL,
    @ReadOnlyIndicator BIT,
    @NonLaboratoryTestIndicator BIT,
    @ExternalTestIndicator BIT = NULL,
    @PerformedByOrganizationID BIGINT = NULL,
    @ReceivedDate DATETIME = NULL,
    @ContactPerson NVARCHAR(200) = NULL,
    @MonitoringSessionID BIGINT = NULL,
    @VectorSessionID BIGINT = NULL,
    @HumanDiseaseReportID BIGINT = NULL,
    @VeterinaryDiseaseReportID BIGINT = NULL,
    @AuditUserName NVARCHAR(200),
    @DataAuditEventID BIGINT = NULL,
    @EIDSSObjectID NVARCHAR(200) = NULL,
    @RowAction CHAR
)
AS
DECLARE @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectID BIGINT = @TestID,
        @ObjectTableID BIGINT = 75740000000; -- tlbTesting
DECLARE @TestBeforeEdit TABLE
(
    TestID BIGINT,
    TestNameTypeID BIGINT,
    TestCategoryTypeID BIGINT,
    TestResultTypeID BIGINT,
    TestStatusTypeID BIGINT,
    DiseaseID BIGINT,
    SampleID BIGINT,
    BatchTestID BIGINT,
    ObservationID BIGINT,
    TestNumber INT,
    Note NVARCHAR(500),
    StartedDate DATETIME,
    ConcludedDate DATETIME,
    TestedByOfficeID BIGINT,
    TestedByPersonID BIGINT,
    ResultEnteredByOfficeID BIGINT,
    ResultEnteredByPersonID BIGINT,
    ValidatedByOfficeID BIGINT,
    ValidatedByPersonID BIGINT,
    ReadOnlyIndicator BIT,
    NonLaboratoryTestIndicator BIT,
    ExternalTestIndicator BIT,
    PerformedByOfficeID BIGINT,
    ReceivedDate DATETIME,
    ContactPerson NVARCHAR(200),
    RowStatus INT
);
DECLARE @TestAfterEdit TABLE
(
    TestID BIGINT,
    TestNameTypeID BIGINT,
    TestCategoryTypeID BIGINT,
    TestResultTypeID BIGINT,
    TestStatusTypeID BIGINT,
    DiseaseID BIGINT,
    SampleID BIGINT,
    BatchTestID BIGINT,
    ObservationID BIGINT,
    TestNumber INT,
    Note NVARCHAR(500),
    StartedDate DATETIME,
    ConcludedDate DATETIME,
    TestedByOfficeID BIGINT,
    TestedByPersonID BIGINT,
    ResultEnteredByOfficeID BIGINT,
    ResultEnteredByPersonID BIGINT,
    ValidatedByOfficeID BIGINT,
    ValidatedByPersonID BIGINT,
    ReadOnlyIndicator BIT,
    NonLaboratoryTestIndicator BIT,
    ExternalTestIndicator BIT,
    PerformedByOfficeID BIGINT,
    ReceivedDate DATETIME,
    ContactPerson NVARCHAR(200),
    RowStatus INT
);
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        IF @RowAction = 'I'
           OR @RowAction = '1' -- Insert
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbTesting', @TestID OUTPUT;

            INSERT INTO dbo.tlbTesting
            (
                idfTesting,
                idfsTestName,
                idfsTestCategory,
                idfsTestResult,
                idfsTestStatus,
                idfsDiagnosis,
                idfMaterial,
                idfBatchTest,
                idfObservation,
                intTestNumber,
                strNote,
                intRowStatus,
                datStartedDate,
                datConcludedDate,
                idfTestedByOffice,
                idfTestedByPerson,
                idfResultEnteredByOffice,
                idfResultEnteredByPerson,
                idfValidatedByOffice,
                idfValidatedByPerson,
                blnReadOnly,
                blnNonLaboratoryTest,
                blnExternalTest,
                idfPerformedByOffice,
                datReceivedDate,
                strContactPerson,
                idfMonitoringSession,
                idfVector,
                idfHumanCase,
                idfVetCase,
                AuditCreateUser,
                SourceSystemNameID,
                SourceSystemKeyValue
            )
            VALUES
            (@TestID,
             @TestNameTypeID,
             @TestCategoryTypeID,
             @TestResultTypeID,
             @TestStatusTypeID,
             @DiseaseID,
             @SampleID,
             @BatchTestID,
             @ObservationID,
             @TestNumber,
             @Comments,
             @RowStatus,
             @StartedDate,
             @ResultDate,
             @TestedByOrganizationID,
             @TestedByPersonID,
             @ResultEnteredByOrganizationID,
             @ResultEnteredByPersonID,
             @ValidatedByOrganizationID,
             @ValidatedByPersonID,
             @ReadOnlyIndicator,
             @NonLaboratoryTestIndicator,
             @ExternalTestIndicator,
             @PerformedByOrganizationID,
             @ReceivedDate,
             @ContactPerson,
             @MonitoringSessionID,
             @VectorSessionID,
             @HumanDiseaseReportID,
             @VeterinaryDiseaseReportID,
             @AuditUserName,
             10519001,
             '[{"idfTesting":' + CAST(@TestID AS NVARCHAR(300)) + '}]'
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @TestID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @EIDSSObjectID
            );
        -- End data audit
        END
        ELSE
        BEGIN
            INSERT INTO @TestBeforeEdit
            (
                TestID,
                TestNameTypeID,
                TestCategoryTypeID,
                TestResultTypeID,
                TestStatusTypeID,
                DiseaseID,
                SampleID,
                BatchTestID,
                ObservationID,
                TestNumber,
                Note,
                StartedDate,
                ConcludedDate,
                TestedByOfficeID,
                TestedByPersonID,
                ResultEnteredByOfficeID,
                ResultEnteredByPersonID,
                ValidatedByOfficeID,
                ValidatedByPersonID,
                ReadOnlyIndicator,
                NonLaboratoryTestIndicator,
                ExternalTestIndicator,
                PerformedByOfficeID,
                ReceivedDate,
                ContactPerson,
                RowStatus
            )
            SELECT idfTesting,
                   idfsTestName,
                   idfsTestCategory,
                   idfsTestResult,
                   idfsTestStatus,
                   idfsDiagnosis,
                   idfMaterial,
                   idfBatchTest,
                   idfObservation,
                   intTestNumber,
                   strNote,
                   datStartedDate,
                   datConcludedDate,
                   idfTestedByOffice,
                   idfTestedByPerson,
                   idfResultEnteredByOffice,
                   idfResultEnteredByPerson,
                   idfValidatedByOffice,
                   idfValidatedByPerson,
                   blnReadOnly,
                   blnNonLaboratoryTest,
                   blnExternalTest,
                   idfPerformedByOffice,
                   datReceivedDate,
                   strContactPerson,
                   intRowStatus
            FROM dbo.tlbTesting
            WHERE idfTesting = @TestID;

            UPDATE dbo.tlbTesting
            SET idfsTestName = @TestNameTypeID,
                idfsTestCategory = @TestCategoryTypeID,
                idfsTestResult = @TestResultTypeID,
                idfsTestStatus = @TestStatusTypeID,
                idfsDiagnosis = @DiseaseID,
                idfMaterial = @SampleID,
                idfBatchTest = @BatchTestID,
                idfObservation = @ObservationID,
                intTestNumber = @TestNumber,
                strNote = @Comments,
                intRowStatus = @RowStatus,
                datStartedDate = @StartedDate,
                datConcludedDate = @ResultDate,
                idfTestedByOffice = @TestedByOrganizationID,
                idfTestedByPerson = @TestedByPersonID,
                idfResultEnteredByOffice = @ResultEnteredByOrganizationID,
                idfResultEnteredByPerson = @ResultEnteredByPersonID,
                idfValidatedByOffice = @ValidatedByOrganizationID,
                idfValidatedByPerson = @ValidatedByPersonID,
                blnReadOnly = @ReadOnlyIndicator,
                blnNonLaboratoryTest = @NonLaboratoryTestIndicator,
                blnExternalTest = @ExternalTestIndicator,
                idfPerformedByOffice = @PerformedByOrganizationID,
                datReceivedDate = @ReceivedDate,
                strContactPerson = @ContactPerson,
                idfMonitoringSession = @MonitoringSessionID,
                idfVector = @VectorSessionID,
                idfHumanCase = @HumanDiseaseReportID,
                idfVetCase = @VeterinaryDiseaseReportID,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfTesting = @TestID;

            INSERT INTO @TestAfterEdit
            (
                TestID,
                TestNameTypeID,
                TestCategoryTypeID,
                TestResultTypeID,
                TestStatusTypeID,
                DiseaseID,
                SampleID,
                BatchTestID,
                ObservationID,
                TestNumber,
                Note,
                StartedDate,
                ConcludedDate,
                TestedByOfficeID,
                TestedByPersonID,
                ResultEnteredByOfficeID,
                ResultEnteredByPersonID,
                ValidatedByOfficeID,
                ValidatedByPersonID,
                ReadOnlyIndicator,
                NonLaboratoryTestIndicator,
                ExternalTestIndicator,
                PerformedByOfficeID,
                ReceivedDate,
                ContactPerson,
                RowStatus
            )
            SELECT idfTesting,
                   idfsTestName,
                   idfsTestCategory,
                   idfsTestResult,
                   idfsTestStatus,
                   idfsDiagnosis,
                   idfMaterial,
                   idfBatchTest,
                   idfObservation,
                   intTestNumber,
                   strNote,
                   datStartedDate,
                   datConcludedDate,
                   idfTestedByOffice,
                   idfTestedByPerson,
                   idfResultEnteredByOffice,
                   idfResultEnteredByPerson,
                   idfValidatedByOffice,
                   idfValidatedByPerson,
                   blnReadOnly,
                   blnNonLaboratoryTest,
                   blnExternalTest,
                   idfPerformedByOffice,
                   datReceivedDate,
                   strContactPerson,
                   intRowStatus
            FROM dbo.tlbTesting
            WHERE idfTesting = @TestID;

            IF @RowStatus = 0
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       49545430000000,
                       a.TestID,
                       NULL,
                       b.TestNameTypeID,
                       a.TestNameTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.TestNameTypeID <> b.TestNameTypeID)
                      OR (
                             a.TestNameTypeID IS NOT NULL
                             AND b.TestNameTypeID IS NULL
                         )
                      OR (
                             a.TestNameTypeID IS NULL
                             AND b.TestNameTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       49545440000000,
                       a.TestID,
                       NULL,
                       b.TestCategoryTypeID,
                       a.TestCategoryTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.TestCategoryTypeID <> b.TestCategoryTypeID)
                      OR (
                             a.TestCategoryTypeID IS NOT NULL
                             AND b.TestCategoryTypeID IS NULL
                         )
                      OR (
                             a.TestCategoryTypeID IS NULL
                             AND b.TestCategoryTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80510000000,
                       a.TestID,
                       NULL,
                       b.TestResultTypeID,
                       a.TestResultTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.TestResultTypeID <> b.TestResultTypeID)
                      OR (
                             a.TestResultTypeID IS NOT NULL
                             AND b.TestResultTypeID IS NULL
                         )
                      OR (
                             a.TestResultTypeID IS NULL
                             AND b.TestResultTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572510000000,
                       a.TestID,
                       NULL,
                       b.TestStatusTypeID,
                       a.TestStatusTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.TestStatusTypeID <> b.TestStatusTypeID)
                      OR (
                             a.TestStatusTypeID IS NOT NULL
                             AND b.TestStatusTypeID IS NULL
                         )
                      OR (
                             a.TestStatusTypeID IS NULL
                             AND b.TestStatusTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572520000000,
                       a.TestID,
                       NULL,
                       b.DiseaseID,
                       a.DiseaseID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.DiseaseID <> b.DiseaseID)
                      OR (
                             a.DiseaseID IS NOT NULL
                             AND b.DiseaseID IS NULL
                         )
                      OR (
                             a.DiseaseID IS NULL
                             AND b.DiseaseID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4576430000000,
                       a.TestID,
                       NULL,
                       b.SampleID,
                       a.SampleID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.SampleID <> b.SampleID)
                      OR (
                             a.SampleID IS NOT NULL
                             AND b.SampleID IS NULL
                         )
                      OR (
                             a.SampleID IS NULL
                             AND b.SampleID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80470000000,
                       a.TestID,
                       NULL,
                       b.BatchTestID,
                       a.BatchTestID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.BatchTestID <> b.BatchTestID)
                      OR (
                             a.BatchTestID IS NOT NULL
                             AND b.BatchTestID IS NULL
                         )
                      OR (
                             a.BatchTestID IS NULL
                             AND b.BatchTestID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80500000000,
                       a.TestID,
                       NULL,
                       b.ObservationID,
                       a.ObservationID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ObservationID <> b.ObservationID)
                      OR (
                             a.ObservationID IS NOT NULL
                             AND b.ObservationID IS NULL
                         )
                      OR (
                             a.ObservationID IS NULL
                             AND b.ObservationID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80540000000,
                       a.TestID,
                       NULL,
                       b.TestNumber,
                       a.TestNumber,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.TestNumber <> b.TestNumber)
                      OR (
                             a.TestNumber IS NOT NULL
                             AND b.TestNumber IS NULL
                         )
                      OR (
                             a.TestNumber IS NULL
                             AND b.TestNumber IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572540000000,
                       a.TestID,
                       NULL,
                       b.Note,
                       a.Note,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.Note <> b.Note)
                      OR (
                             a.Note IS NOT NULL
                             AND b.Note IS NULL
                         )
                      OR (
                             a.Note IS NULL
                             AND b.Note IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578540000000,
                       a.TestID,
                       NULL,
                       b.StartedDate,
                       a.StartedDate,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.StartedDate <> b.StartedDate)
                      OR (
                             a.StartedDate IS NOT NULL
                             AND b.StartedDate IS NULL
                         )
                      OR (
                             a.StartedDate IS NULL
                             AND b.StartedDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578550000000,
                       a.TestID,
                       NULL,
                       b.ConcludedDate,
                       a.ConcludedDate,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ConcludedDate <> b.ConcludedDate)
                      OR (
                             a.ConcludedDate IS NOT NULL
                             AND b.ConcludedDate IS NULL
                         )
                      OR (
                             a.ConcludedDate IS NULL
                             AND b.ConcludedDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578560000000,
                       a.TestID,
                       NULL,
                       b.TestedByOfficeID,
                       a.TestedByOfficeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.TestedByOfficeID <> b.TestedByOfficeID)
                      OR (
                             a.TestedByOfficeID IS NOT NULL
                             AND b.TestedByOfficeID IS NULL
                         )
                      OR (
                             a.TestedByOfficeID IS NULL
                             AND b.TestedByOfficeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578570000000,
                       a.TestID,
                       NULL,
                       b.TestedByPersonID,
                       a.TestedByPersonID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.TestedByPersonID <> b.TestedByPersonID)
                      OR (
                             a.TestedByPersonID IS NOT NULL
                             AND b.TestedByPersonID IS NULL
                         )
                      OR (
                             a.TestedByPersonID IS NULL
                             AND b.TestedByPersonID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578580000000,
                       a.TestID,
                       NULL,
                       b.ResultEnteredByOfficeID,
                       a.ResultEnteredByOfficeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ResultEnteredByOfficeID <> b.ResultEnteredByOfficeID)
                      OR (
                             a.ResultEnteredByOfficeID IS NOT NULL
                             AND b.ResultEnteredByOfficeID IS NULL
                         )
                      OR (
                             a.ResultEnteredByOfficeID IS NULL
                             AND b.ResultEnteredByOfficeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578590000000,
                       a.TestID,
                       NULL,
                       b.ResultEnteredByPersonID,
                       a.ResultEnteredByPersonID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ResultEnteredByPersonID <> b.ResultEnteredByPersonID)
                      OR (
                             a.ResultEnteredByPersonID IS NOT NULL
                             AND b.ResultEnteredByPersonID IS NULL
                         )
                      OR (
                             a.ResultEnteredByPersonID IS NULL
                             AND b.ResultEnteredByPersonID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578600000000,
                       a.TestID,
                       NULL,
                       b.ValidatedByOfficeID,
                       a.ValidatedByOfficeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ValidatedByOfficeID <> b.ValidatedByOfficeID)
                      OR (
                             a.ValidatedByOfficeID IS NOT NULL
                             AND b.ValidatedByOfficeID IS NULL
                         )
                      OR (
                             a.ValidatedByOfficeID IS NULL
                             AND b.ValidatedByOfficeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578610000000,
                       a.TestID,
                       NULL,
                       b.ValidatedByPersonID,
                       a.ValidatedByPersonID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ValidatedByPersonID <> b.ValidatedByPersonID)
                      OR (
                             a.ValidatedByPersonID IS NOT NULL
                             AND b.ValidatedByPersonID IS NULL
                         )
                      OR (
                             a.ValidatedByPersonID IS NULL
                             AND b.ValidatedByPersonID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578740000000,
                       a.TestID,
                       NULL,
                       b.ReadOnlyIndicator,
                       a.ReadOnlyIndicator,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ReadOnlyIndicator <> b.ReadOnlyIndicator)
                      OR (
                             a.ReadOnlyIndicator IS NOT NULL
                             AND b.ReadOnlyIndicator IS NULL
                         )
                      OR (
                             a.ReadOnlyIndicator IS NULL
                             AND b.ReadOnlyIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578760000000,
                       a.TestID,
                       NULL,
                       b.NonLaboratoryTestIndicator,
                       a.NonLaboratoryTestIndicator,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.NonLaboratoryTestIndicator <> b.NonLaboratoryTestIndicator)
                      OR (
                             a.NonLaboratoryTestIndicator IS NOT NULL
                             AND b.NonLaboratoryTestIndicator IS NULL
                         )
                      OR (
                             a.NonLaboratoryTestIndicator IS NULL
                             AND b.NonLaboratoryTestIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       50815850000000,
                       a.TestID,
                       NULL,
                       b.ExternalTestIndicator,
                       a.ExternalTestIndicator,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ExternalTestIndicator <> b.ExternalTestIndicator)
                      OR (
                             a.ExternalTestIndicator IS NOT NULL
                             AND b.ExternalTestIndicator IS NULL
                         )
                      OR (
                             a.ExternalTestIndicator IS NULL
                             AND b.ExternalTestIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       50815860000000,
                       a.TestID,
                       NULL,
                       b.PerformedByOfficeID,
                       a.PerformedByOfficeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.PerformedByOfficeID <> b.PerformedByOfficeID)
                      OR (
                             a.PerformedByOfficeID IS NOT NULL
                             AND b.PerformedByOfficeID IS NULL
                         )
                      OR (
                             a.PerformedByOfficeID IS NULL
                             AND b.PerformedByOfficeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       50815870000000,
                       a.TestID,
                       NULL,
                       b.ReceivedDate,
                       a.ReceivedDate,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ReceivedDate <> b.ReceivedDate)
                      OR (
                             a.ReceivedDate IS NOT NULL
                             AND b.ReceivedDate IS NULL
                         )
                      OR (
                             a.ReceivedDate IS NULL
                             AND b.ReceivedDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       50815880000000,
                       a.TestID,
                       NULL,
                       b.ContactPerson,
                       a.ContactPerson,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ContactPerson <> b.ContactPerson)
                      OR (
                             a.ContactPerson IS NOT NULL
                             AND b.ContactPerson IS NULL
                         )
                      OR (
                             a.ContactPerson IS NULL
                             AND b.ContactPerson IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailRestore
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    idfObjectDetail,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       a.TestID,
                       NULL,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                where a.RowStatus = 0
                      AND b.RowStatus = 1;
            END
            ELSE
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                VALUES
                (@DataAuditEventid, @ObjectTableID, @TestID, @AuditUserName, @EIDSSObjectID);
            END
        END
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USSP_HUM_REP_WHOEXPORT_GG]...';


GO
--*************************************************************************
-- Name 				: dbo.USSP_HUM_REP_WHOEXPORT_GG
--
-- Description			: SINT03 - WHO Export dbo ON Measles AND Rubella for GG.
-- 
-- Author               : Mandar Kulkarni
-- Revision History
--		Name			Date		Change Detail
--		Ann Xiong		12/02/2022	Replaced 'WHOrep_specific_gis_rayon' with 'WHOrep_specific_gis_region' to get the correct region data and added strImportationCountry and intInitialDiagnosis to the return list.
--		Ann Xiong		12/05/2022	 Generated new CaseID from WHOAreaID in table gisWHOMap
--		Ann Xiong		12/07/2022	Modified to return OutbreakID when the report is related to Outbreak Session and return data on EndDate
--		Ann Xiong		12/15/2022	Fixed a few issues Anatoliy found during test
--		Ann Xiong		12/16/2022	Modified to return sample types as a comma separated string if multiple samples were collected
--		Ann Xiong		12/19/2022	Modified to return the correct strImportationCountry
--
-- Testing code:

--Example of a call of PROCEDURE:
--GG
--exec dbo.[USSP_HUM_REP_WHOEXPORT_GG] @LangID=N'en',@StartDate='20140101',@EndDate='20141231', @idfsDiagnosis = 9843460000000   
--*************************************************************************

ALTER  PROCEDURE [dbo].[USSP_HUM_REP_WHOEXPORT_GG]
 (
		@LangID		AS NVARCHAR(50), 
		@StartDate DATETIME,
		@EndDate DATETIME,
		@idfsDiagnosis BIGINT
 )
AS	

BEGIN


DECLARE	@cmd	NVARCHAR(4000)

-- Drop temporary tables
IF Object_ID('tempdb..#HumanCasesToExport') IS NOT NULL
BEGIN
	SET	@cmd = N'drop TABLE #HumanCasesToExport'
	EXEC sp_executesql @cmd
END

IF Object_ID('tempdb..#FFToExport') IS NOT NULL
BEGIN
	SET	@cmd = N'drop TABLE #FFToExport'
	EXEC sp_executesql @cmd
END

IF Object_ID('tempdb..#ResultTable') IS NOT NULL
BEGIN
	SET	@cmd = N'drop TABLE #ResultTable'
	EXEC sp_executesql @cmd
END

-- CREATE temporary tables
IF Object_ID('tempdb..#HumanCasesToExport') IS NULL
CREATE TABLE #HumanCasesToExport
(	idfHumanCase				BIGINT NOT NULL PRIMARY KEY,
	idfHuman					BIGINT NOT NULL,
	idfCRAddress				BIGINT NULL,
	idfsDiagnosis				BIGINT NOT NULL,
	idfCSObservation			BIGINT NULL,
	idfEpiObservation			BIGINT NULL,
	datDateOnset				DATETIME NOT NULL,
	idfOutbreak					BIGINT NULL,
	NumberOfReceivedDoses		NVARCHAR(50) collate Cyrillic_General_CI_AS NULL,
	DateOfLastVaccination		DATETIME NULL,
	Fever						BIGINT NULL,
	Cough						BIGINT NULL,
	Coryza						BIGINT NULL,  		
	Conjunctivitis				BIGINT NULL,  
	RashDuration				NVARCHAR(50) collate Cyrillic_General_CI_AS NULL,	
	SourceOfInfection			BIGINT NULL,   
	NameOfSourceOfInfection		NVARCHAR(100) collate Cyrillic_General_CI_AS NULL,	
	Complications				BIGINT NULL,    
	Encephalitis				BIGINT NULL,    
	Pneumonia					BIGINT NULL,    	
	Diarrhoea					BIGINT NULL,    
	Other						NVARCHAR(500) collate Cyrillic_General_CI_AS NULL,	
	datConcludedDate			DATETIME NULL,
	idfsSampleType				BIGINT NULL,
	datFieldCollectionDate		DATETIME NULL,
	idfsTestResult				BIGINT NULL,
	idfsTestStatus				BIGINT NULL,
	idfTesting					BIGINT NULL
)
DELETE FROM #HumanCasesToExport

IF Object_ID('tempdb..#FFToExport') IS NULL
CREATE TABLE #FFToExport
(	idfActivityParameters		BIGINT NOT NULL PRIMARY KEY,
	idfsParameter				BIGINT NOT NULL,
	idfObservation				BIGINT NOT NULL,
	idfRow						BIGINT NOT NULL,
	varValue					sql_variant NULL
)
DELETE FROM #FFToExport

IF Object_ID('tempdb..#ResultTable') IS NULL
CREATE TABLE	#ResultTable
(	  
	  idfCase					BIGINT NOT NULL PRIMARY KEY
	, strCaseID					NVARCHAR(300) collate database_default NOT NULL 
	, intAreaID					INT NOT NULL 
	, datDRash					date NULL
	, intGenderID				INT NOT NULL 
	, datDBirth					date NULL
	, intAgeAtRashOnset			INT NULL
	, intNumOfVaccines			INT NULL
	, datDvaccine				DATETIME NULL
	, datDNotification			DATETIME NULL
	, datDInvestigation			DATETIME NULL
	, intClinFever				INT NULL
	, intClinCCC				INT NULL
	, intClinRashDuration		INT NULL
	, intClinOutcome			INT NULL
	, intClinHospitalization	INT NULL
	, intSrcInf					INT NULL
	, intSrcOutbreakRelated		INT NULL
	, strSrcOutbreakID			NVARCHAR(50) collate database_default NULL default NULL
	, intCompComplications		INT NULL
	, intCompEncephalitis		INT NULL
	, intCompPneumonia			INT NULL
	, intCompMalnutrition		INT NULL
	, intCompDiarrhoea			INT NULL
	, intCompOther				INT NULL
	, intFinalClassification	INT NULL
	, datDSpecimen				DATETIME NULL
	, intSpecimen				INT NULL
	, datDLabResult				DATETIME NULL
	, intMeaslesIgm				INT NULL
	, intMeaslesVirusDetection	INT NULL		
	, intRubellaIgm				INT NULL
	, intRubellaVirusDetection	INT NULL
	, strCommentsEpi			NVARCHAR(500) collate database_default NULL 
)
DELETE FROM #ResultTable

DECLARE 
  
	@idfsSummaryReportType			BIGINT,
	
	
	@FFP_DateOfOnset_M				BIGINT,
	@FFP_DateOfOnset_R				BIGINT,  	
		
	@FFP_NumberOfReceivedDoses_M	BIGINT,
	@FFP_NumberOfReceivedDoses_R	BIGINT,  		
	
	@FFP_DateOfLastVaccination_M	BIGINT,
	@FFP_DateOfLastVaccination_R	BIGINT,  		
	
	@FFP_Fever_M					BIGINT,
	@FFP_Fever_R					BIGINT,  		
	
	@FFP_Cough_M					BIGINT,
	@FFP_Cough_R					BIGINT,  	
	
	@FFP_Coryza_M					BIGINT,
	@FFP_Coryza_R					BIGINT,  	  	
	
	@FFP_Conjunctivitis_M			BIGINT,
	@FFP_Conjunctivitis_R			BIGINT,  	   				
	
	@FFP_RashDuration_M				BIGINT,
	@FFP_RashDuration_R				BIGINT,  		
	
	@FFP_SourceOfInfection_M		BIGINT,
	@FFP_SourceOfInfection_R		BIGINT,  		
	
	@FFP_Complications_M			BIGINT,
	@FFP_Complications_R			BIGINT,  		

	@FFP_Encephalitis_M				BIGINT,
	@FFP_Encephalitis_R				BIGINT,  		
	  		
	@FFP_Pneumonia_M				BIGINT,
	@FFP_Pneumonia_R				BIGINT,  		
	  		  		
	@FFP_Diarrhoea_M				BIGINT,
	--@FFP_Diarrhoea_R				BIGINT,  		
	  		  		
	@FFP_Other_M					BIGINT,  		  		
	--@FFP_Other_R					BIGINT,  	 
	 		
	@idfsDiagnosis_Measles			BIGINT,
	@idfsDiagnosis_Rubella			BIGINT
	
			  	
SET @idfsSummaryReportType = 10290027 /*WHO dbo - AJ&GG*/

--HCS FF - Rash onset date. / HCS FF- Date of onset
SELECT @FFP_DateOfOnset_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_DateOfOnset_M'
AND intRowStatus = 0

SELECT @FFP_DateOfOnset_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_DateOfOnset_R'
AND intRowStatus = 0
  
--HEI - Number of received doses (any vaccine with measles component) / HEI - Number of Measles vaccine doses received
SELECT @FFP_NumberOfReceivedDoses_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_NumberOfReceivedDoses_M'
AND intRowStatus = 0

SELECT @FFP_NumberOfReceivedDoses_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_NumberOfReceivedDoses_R'
AND intRowStatus = 0  	

--HEI - Date of last vaccination/HEI - Date of last Measles vaccine
SELECT @FFP_DateOfLastVaccination_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_DateOfLastVaccination_M'
AND intRowStatus = 0	

SELECT @FFP_DateOfLastVaccination_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_DateOfLastVaccination_R'
AND intRowStatus = 0	  
	
--HCS - Fever/HCS - Fever
SELECT @FFP_Fever_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Fever_M'
AND intRowStatus = 0

SELECT @FFP_Fever_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Fever_R'
AND intRowStatus = 0  	
	
--HCS - Cough / Coryza / Conjunctivitis /HCS - Cough / Coryza / Conjunctivitis
SELECT @FFP_Cough_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Cough_M'
AND intRowStatus = 0	

SELECT @FFP_Cough_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Cough_R'
AND intRowStatus = 0	 


SELECT @FFP_Coryza_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Coryza_M'
AND intRowStatus = 0	

SELECT @FFP_Coryza_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Coryza_R'
AND intRowStatus = 0	  	


SELECT @FFP_Conjunctivitis_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Conjunctivitis_M'
AND intRowStatus = 0	

SELECT @FFP_Conjunctivitis_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Conjunctivitis_R'
AND intRowStatus = 0	  	


--HCS - Rash duration / HCS - Duration (days)
SELECT @FFP_RashDuration_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_RashDuration_M'
AND intRowStatus = 0

SELECT @FFP_RashDuration_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_RashDuration_R'
AND intRowStatus = 0  	
	
--EPI - Source of infection / EPI - Source of infection
SELECT @FFP_SourceOfInfection_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_SourceOfInfection_M'
AND intRowStatus = 0		

SELECT @FFP_SourceOfInfection_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_SourceOfInfection_R'
AND intRowStatus = 0	  	

--HCS - Complications / HCS - Complications
SELECT @FFP_Complications_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Complications_M'
AND intRowStatus = 0		

SELECT @FFP_Complications_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Complications_R'
AND intRowStatus = 0		  

--HCS - Encephalitis / HCS - Encephalitis
SELECT @FFP_Encephalitis_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Encephalitis_M'
AND intRowStatus = 0		

SELECT @FFP_Encephalitis_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Encephalitis_R'
AND intRowStatus = 0	  	

--HCS - Pneumonia / HCS - Pneumonia
SELECT @FFP_Pneumonia_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Pneumonia_M'
AND intRowStatus = 0	

SELECT @FFP_Pneumonia_R = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Pneumonia_R'
AND intRowStatus = 0	  	
	
--HCS - Diarrhoea / HCS - Diarrhoea
SELECT @FFP_Diarrhoea_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Diarrhoea_M'
AND intRowStatus = 0		

--SELECT @FFP_Diarrhoea_R = idfsFFObject FROM trtFFObjectForCustomReport
--WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Diarrhoea_R'
--AND intRowStatus = 0		  	

--HCS - Other (specify) / HCS - Other
SELECT @FFP_Other_M = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Other_M'
AND intRowStatus = 0	 

--SELECT @FFP_Other_R = idfsFFObject FROM trtFFObjectForCustomReport
--WHERE idfsCustomReportType = @idfsSummaryReportType AND strFFObjectAlias = 'FFP_Other_R'
--AND intRowStatus = 0	   	

 	
--idfsDiagnosis for:
--Measles
SELECT top 1 @idfsDiagnosis_Measles = d.idfsDiagnosis
FROM trtDiagnosis d
  INNER JOIN dbo.trtDiagnosisToGroupForReportType dgrt
  ON dgrt.idfsDiagnosis = d.idfsDiagnosis
  AND dgrt.idfsCustomReportType = @idfsSummaryReportType
  
  INNER JOIN dbo.trtReportDiagnosisGroup dg
  ON dgrt.idfsReportDiagnosisGroup = dg.idfsReportDiagnosisGroup
  AND dg.intRowStatus = 0 AND dg.strDiagnosisGroupAlias = 'DG_Measles'
 WHERE d.intRowStatus = 0

--Rubella
SELECT top 1 @idfsDiagnosis_Rubella = d.idfsDiagnosis
FROM trtDiagnosis d
  INNER JOIN dbo.trtDiagnosisToGroupForReportType dgrt
  ON dgrt.idfsDiagnosis = d.idfsDiagnosis
  AND dgrt.idfsCustomReportType = @idfsSummaryReportType
  
  INNER JOIN dbo.trtReportDiagnosisGroup dg
  ON dgrt.idfsReportDiagnosisGroup = dg.idfsReportDiagnosisGroup
  AND dg.intRowStatus = 0 AND dg.strDiagnosisGroupAlias = 'DG_Rubella'
 WHERE d.intRowStatus = 0	

DECLARE	@DateOnsetParameter BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@DateOnsetParameter = @FFP_DateOfOnset_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@DateOnsetParameter = @FFP_DateOfOnset_R

INSERT INTO	#HumanCasesToExport
(	idfHumanCase,
	idfHuman,
	idfCRAddress,
	idfsDiagnosis,
	idfCSObservation,
	idfEpiObservation,
	datDateOnset,
	idfOutbreak
)
SELECT	hc.idfHumanCase,
		h.idfHuman,
		h.idfCurrentResidenceAddress,
		ISNULL(hc.idfsFinalDiagnosis, hc.idfsTentativeDiagnosis),
		hc.idfCSObservation,
		hc.idfEpiObservation,
		COALESCE(	
			CASE
				WHEN	(CAST(SQL_VARIANT_PROPERTY(ap_DateOfOnset.varValue, 'BaseType') AS NVARCHAR) like N'%date%') or
						(CAST(SQL_VARIANT_PROPERTY(ap_DateOfOnset.varValue, 'BaseType') AS NVARCHAR) like N'%char%' AND ISDATE(CAST(ap_DateOfOnset.varValue AS NVARCHAR)) = 1) 
					THEN dbo.fnDateCutTime(CAST(ap_DateOfOnset.varValue AS DATETIME))
					ELSE NULL
			END, hc.datOnSetDate, hc.datFinalDiagnosisDate, hc.datTentativeDiagnosisDate, hc.datNotificationDate, hc.datEnteredDate
			),
		hc.idfOutbreak
FROM tlbHumanCase hc

	INNER JOIN tlbHuman h
	ON hc.idfHuman = h.idfHuman AND  h.intRowStatus = 0	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM tlbActivityParameters ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @DateOnsetParameter
			AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_DateOfOnset

WHERE	
	hc.intRowStatus = 0
	AND 	
	ISNULL(hc.idfsFinalDiagnosis, hc.idfsTentativeDiagnosis) = @idfsDiagnosis 
	AND
	COALESCE(	
		CASE
			WHEN	(CAST(SQL_VARIANT_PROPERTY(ap_DateOfOnset.varValue, 'BaseType') AS NVARCHAR) like N'%date%') or
					(CAST(SQL_VARIANT_PROPERTY(ap_DateOfOnset.varValue, 'BaseType') AS NVARCHAR) like N'%char%' AND ISDATE(CAST(ap_DateOfOnset.varValue AS NVARCHAR)) = 1) 
				THEN dbo.fnDateCutTime(CAST(ap_DateOfOnset.varValue AS DATETIME))
				ELSE NULL
		END, hc.datOnSetDate, hc.datFinalDiagnosisDate, hc.datTentativeDiagnosisDate, hc.datNotificationDate, hc.datEnteredDate
			) >= @StartDate
	
	AND
	COALESCE(	
		CASE
			WHEN	(CAST(SQL_VARIANT_PROPERTY(ap_DateOfOnset.varValue, 'BaseType') AS NVARCHAR) like N'%date%') or
					(CAST(SQL_VARIANT_PROPERTY(ap_DateOfOnset.varValue, 'BaseType') AS NVARCHAR) like N'%char%' AND ISDATE(CAST(ap_DateOfOnset.varValue AS NVARCHAR)) = 1) 
				THEN dbo.fnDateCutTime(CAST(ap_DateOfOnset.varValue AS DATETIME))
				ELSE NULL
		END, hc.datOnSetDate, hc.datFinalDiagnosisDate, hc.datTentativeDiagnosisDate, hc.datNotificationDate, hc.datEnteredDate
			) <= @EndDate   			
		AND hc.idfHumanCase = (SELECT TOP 1 idfHumanCase FROM tlbHumanCase thc WHERE thc.idfCSObservation = hc.idfCSObservation and thc.idfsFinalDiagnosis = @idfsDiagnosis)

INSERT INTO	#FFToExport
(	idfActivityParameters,
	idfsParameter,
	idfObservation,
	idfRow,
	varValue
)
SELECT		ap.idfActivityParameters,
			ap.idfsParameter,
			ap.idfObservation,
			ap.idfRow,
			ap.varValue
FROM		tlbActivityParameters ap
INNER JOIN	#HumanCasesToExport hc_cs
ON			hc_cs.idfCSObservation = ap.idfObservation
WHERE		ap.intRowStatus = 0

INSERT INTO	#FFToExport
(	idfActivityParameters,
	idfsParameter,
	idfObservation,
	idfRow,
	varValue
)
SELECT		ap.idfActivityParameters,
			ap.idfsParameter,
			ap.idfObservation,
			ap.idfRow,
			ap.varValue
FROM		tlbActivityParameters ap
INNER JOIN	#HumanCasesToExport hc_epi
ON			hc_epi.idfEpiObservation = ap.idfObservation
left JOIN	#HumanCasesToExport hc_cs
ON			hc_cs.idfCSObservation = hc_epi.idfEpiObservation
WHERE		ap.intRowStatus = 0
			AND hc_cs.idfHumanCase IS NULL


DECLARE	@FFP_NumberOfReceivedDoses BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_NumberOfReceivedDoses = @FFP_NumberOfReceivedDoses_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_NumberOfReceivedDoses = @FFP_NumberOfReceivedDoses_R

DECLARE	@FFP_DateOfLastVaccination BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_DateOfLastVaccination = @FFP_DateOfLastVaccination_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_DateOfLastVaccination = @FFP_DateOfLastVaccination_R
	
DECLARE	@FFP_Fever BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Fever = @FFP_Fever_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Fever = @FFP_Fever_R

DECLARE	@FFP_Cough BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Cough = @FFP_Cough_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Cough = @FFP_Cough_R
	
DECLARE	@FFP_Coryza BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Coryza = @FFP_Coryza_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Coryza = @FFP_Coryza_R
	
DECLARE	@FFP_Conjunctivitis BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Conjunctivitis = @FFP_Conjunctivitis_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Conjunctivitis = @FFP_Conjunctivitis_R
	
DECLARE	@FFP_RashDuration BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_RashDuration = @FFP_RashDuration_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_RashDuration = @FFP_RashDuration_R

DECLARE	@FFP_SourceOfInfection BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_SourceOfInfection = @FFP_SourceOfInfection_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_SourceOfInfection = @FFP_SourceOfInfection_R

DECLARE	@FFP_NameOfSourceOfInfection BIGINT = 9934540000000

DECLARE	@FFP_Complications BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Complications = @FFP_Complications_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Complications = @FFP_Complications_R

DECLARE	@FFP_Encephalitis BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Encephalitis = @FFP_Encephalitis_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Encephalitis = @FFP_Encephalitis_R

DECLARE	@FFP_Pneumonia BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Pneumonia = @FFP_Pneumonia_M
ELSE IF	@idfsDiagnosis = @idfsDiagnosis_Rubella
	SET	@FFP_Pneumonia = @FFP_Pneumonia_R

DECLARE	@FFP_Diarrhoea BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Diarrhoea = @FFP_Diarrhoea_M

DECLARE	@FFP_Other BIGINT = -100
IF	@idfsDiagnosis = @idfsDiagnosis_Measles
	SET	@FFP_Other = @FFP_Other_M


UPDATE hc
SET	hc.NumberOfReceivedDoses = CAST(ap_NumberOfReceivedDoses.varValue AS NVARCHAR(50)),
	hc.DateOfLastVaccination = 
	CASE
		WHEN CAST(SQL_VARIANT_PROPERTY(ap_DateOfLastVaccination.varValue, 'BaseType') AS NVARCHAR) like N'%date%' or
				(CAST(SQL_VARIANT_PROPERTY(ap_DateOfLastVaccination.varValue, 'BaseType') AS NVARCHAR) like N'%char%' AND ISDATE(CAST(ap_DateOfLastVaccination.varValue AS NVARCHAR)) = 1 )	
			THEN dbo.FN_GBL_DATECUTTIME(CAST(ap_DateOfLastVaccination.varValue AS DATETIME))
		ELSE NULL
	END,
	hc.Fever = 
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Fever.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Fever.varValue AS BIGINT)
		ELSE NULL
	END,
	hc.Cough =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Cough.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Cough.varValue AS BIGINT)
		ELSE NULL
	END,
	hc.Coryza =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Coryza.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Coryza.varValue AS BIGINT)
		ELSE NULL
	END,  		
	hc.Conjunctivitis =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Conjunctivitis.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Conjunctivitis.varValue AS BIGINT)
		ELSE NULL
	END,  
	hc.RashDuration = CAST(ap_RashDuration.varValue AS NVARCHAR(50)),	
	hc.SourceOfInfection =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_SourceOfInfection.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_SourceOfInfection.varValue AS BIGINT)
		ELSE NULL
	END,   
	hc.NameOfSourceOfInfection = CAST(ap_NameOfSourceOfInfection.varValue AS NVARCHAR(100)),  	
	hc.Complications =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Complications.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Complications.varValue AS BIGINT)
		ELSE NULL
	END,    
	hc.Encephalitis =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Encephalitis.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Encephalitis.varValue AS BIGINT)
		ELSE NULL
	END,    
	hc.Pneumonia =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Pneumonia.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Pneumonia.varValue AS BIGINT)
		ELSE NULL
	END,    	
	hc.Diarrhoea =
	CASE
		WHEN SQL_VARIANT_PROPERTY(ap_Diarrhoea.varValue, 'BaseType') in ('BIGINT','decimal','float','INT','numeric','real','smallint','tinyint')
			THEN CAST(ap_Diarrhoea.varValue AS BIGINT)
		ELSE NULL
	END,    
	hc.Other = CAST(ap_Other.varValue AS NVARCHAR(500))	  		  		  		  			

 FROM #HumanCasesToExport hc
			
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfEpiObservation
			AND	ap.idfsParameter = @FFP_NumberOfReceivedDoses
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_NumberOfReceivedDoses		
	 			
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfEpiObservation
			AND	ap.idfsParameter = @FFP_DateOfLastVaccination
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_DateOfLastVaccination 	
		
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Fever
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Fever	
	
		
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Cough
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Cough	
	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Coryza
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Coryza
	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Conjunctivitis	
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Conjunctivitis

	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_RashDuration	
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_RashDuration
	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfEpiObservation
			AND	ap.idfsParameter = @FFP_SourceOfInfection	
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_SourceOfInfection

	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfEpiObservation
			AND	ap.idfsParameter = @FFP_NameOfSourceOfInfection	
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_NameOfSourceOfInfection
	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Complications		
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Complications
	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Encephalitis				
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Encephalitis

	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Pneumonia				
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Pneumonia
	
	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Diarrhoea						
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Diarrhoea


	OUTER APPLY ( 
		SELECT top 1 
			ap.varValue
		FROM #FFToExport ap
		WHERE	ap.idfObservation = hc.idfCSObservation
			AND	ap.idfsParameter = @FFP_Other							
			--AND ap.intRowStatus = 0
		ORDER BY ap.idfRow ASC	
	) AS  ap_Other


UPDATE	ct
SET		ct.datConcludedDate = material.datConcludedDate,
		ct.idfsSampleType = material.idfsSampleType,
		ct.datFieldCollectionDate = material.datFieldCollectionDate,
		ct.idfsTestResult = material.idfsTestResult,
		ct.idfsTestStatus = material.idfsTestStatus,
		ct.idfTesting = material.idfTesting
FROM	#HumanCasesToExport ct	
OUTER APPLY	(
	SELECT top 1 
		dbo.fnDateCutTime(tt.datConcludedDate) AS datConcludedDate,
		ISNULL(rm.idfsSampleType, m.idfsSampleType) AS idfsSampleType,
		m.datFieldCollectionDate,
		tt.idfsTestResult,
		tt.idfsTestStatus,
		tt.idfTesting
	FROM tlbMaterial m
		left JOIN tlbTesting tt
			INNER JOIN trtTestTypeForCustomReport ttcr
			ON ttcr.idfsTestName = tt.idfsTestName
			AND ttcr.intRowStatus = 0
			AND ttcr.idfsCustomReportType = @idfsSummaryReportType
		ON tt.idfMaterial = m.idfMaterial
		/*Added 2018-01-22 start*/
		AND tt.idfsDiagnosis = ct.idfsDiagnosis
		/*Added 2018-01-22 END*/
		AND tt.intRowStatus = 0
		AND tt.datConcludedDate IS NOT NULL
		
		left JOIN tlbMaterial rm
		ON rm.idfMaterial = m.idfParentMaterial
		AND rm.intRowStatus = 0						
		
   WHERE m.idfHumanCase = ct.idfHumanCase
			AND m.intRowStatus = 0
   ORDER BY ISNULL(tt.datConcludedDate, '19000101') DESC, m.datFieldCollectionDate DESC
   )	AS material	 

 DECLARE @SampleTypeIDs TABLE
 (
	strSampleTypeIDs	NVARCHAR(100),
	idfHumanCase BIGINT
 )

 INSERT INTO @SampleTypeIDs (strSampleTypeIDs, idfHumanCase)
	SELECT STRING_AGG([idfsSampleType], ','), 
			SampleTypes.idfHumanCase
	FROM 
		(SELECT	CASE Samples.idfsSampleType
					WHEN 9844480000000	/*Blood - Serum*/  THEN 1 	--Blood - Serum
					WHEN 9845550000000	/*Saliva*/ THEN 2 		--Saliva/oral fluid
					WHEN 9845840000000	/*Swab - Nose or Swab - Pharyngeal or Swab - Rhinopharyngeal*/ THEN 3 --Nasopharyngeal swab
					WHEN 52614520000000 	/*Dry Blood Spot*/ THEN 4 	--Dry Blood Spot
					WHEN 9846060000000	/*Urine*/ THEN 5 			--Urine
					WHEN 9844450000000 	/*Blood - anticoagulated whole blood*/ THEN 6 --EDTA whole blood
					WHEN -1 THEN NULL
					ELSE 7
			END AS idfsSampleType,
			Samples.idfHumanCase
		FROM		dbo.tlbMaterial Samples 
				INNER JOIN	dbo.tlbHumanCase as hc 
					ON Samples.idfHumanCase  = hc.idfHumanCase 
				LEFT JOIN	dbo.FN_GBL_REFERENCEREPAIR(@LangID,19000087) SampleType 
					ON	SampleType.idfsReference = Samples.idfsSampleType
				INNER JOIN #HumanCasesToExport ct
					ON hc.idfHumanCase = ct.idfHumanCase
		WHERE		Samples.idfHumanCase = ct.idfHumanCase
				AND	Samples.intRowStatus = 0
		) SampleTypes
	GROUP BY SampleTypes.idfHumanCase


	SELECT
		ct.idfHumanCase AS idfCase,
		CAST(to1.idfOutbreak as varchar(20)) AS strReportID,
		CONCAT(gwm.WHOAreaID,YEAR(@StartDate), hc.strCaseID) AS strCaseID,
		gwm.AreaID AS strAreaID, 
		dbo.fnDateCutTime(ct.datDateOnset) AS datDRash, 
		CASE 
			WHEN h.idfsHumanGender = 10043001 THEN 2
			WHEN h.idfsHumanGender = 10043002 THEN 1
			ELSE 4
		END AS intGenderID, 
		--dbo.fnDateCutTime(h.datDateofBirth) AS datDBirth, 
		CAST(h.datDateofBirth AS DATE) AS datDBirth, 
		CASE
			WHEN	ISNULL(hc.idfsHumanAgeType, -1) = 10042003	-- Years 
					AND (ISNULL(hc.intPatientAge, -1) >= 0 AND ISNULL(hc.intPatientAge, -1) <= 200)
				THEN	hc.intPatientAge
			WHEN	ISNULL(hc.idfsHumanAgeType, -1) = 10042002	-- Months
					AND (ISNULL(hc.intPatientAge, -1) >= 0 AND ISNULL(hc.intPatientAge, -1) <= 60)
				THEN	CAST(hc.intPatientAge / 12 AS INT)
			WHEN	ISNULL(hc.idfsHumanAgeType, -1) = 10042001	-- Days
					AND (ISNULL(hc.intPatientAge, -1) >= 0)
				THEN	0
			ELSE	
				DATEDIFF(YEAR, h.datDateofBirth, ct.datDateOnset) + 
                         CASE 
                           WHEN MONTH(ct.datDateOnset) < MONTH(h.datDateofBirth) THEN -1 
                           WHEN MONTH(ct.datDateOnset) > MONTH(h.datDateofBirth) THEN 0 
                           ELSE 
                             CASE WHEN DAY(ct.datDateOnset) < DAY(h.datDateofBirth) THEN -1 ELSE 0 END 
                         END
		END	 AS intAgeAtRashOnset,     	
		
		ISNULL(CASE WHEN isnumeric(ct.NumberOfReceivedDoses) = 1  AND CAST(ct.NumberOfReceivedDoses AS varchar) NOT in ('.', ',', '-', '+', '$')
					THEN	
						CASE  CAST(ct.NumberOfReceivedDoses AS BIGINT)
							WHEN 9878670000000 THEN 0
							WHEN 9878680000000 THEN 1
							WHEN 9878690000000 THEN 2
							WHEN 9878700000000 THEN 3
							ELSE 9
						END	
					ELSE 9 END
			, 9)	 AS intNumOfVaccines, 
			
		CAST(ct.DateOfLastVaccination AS DATE) AS datDvaccine, 			
		CAST(hc.datNotificationDate AS DATE) AS datDNotification, 
		CAST(hc.datInvestigationStartDate AS DATE) AS datDInvestigation, 
 		
		CASE ct.Fever
			WHEN 25460000000 THEN 1
			WHEN 25640000000 THEN 2
			WHEN 25660000000 THEN 9
			ELSE NULL
		END	 AS intClinFever, 
		
		CASE 
			CASE 
				WHEN ct.Cough = 25460000000 or ct.Coryza = 25460000000 or ct.Conjunctivitis = 25460000000 THEN 25460000000
				WHEN ct.Cough = 25640000000 AND ct.Coryza = 25640000000 AND ct.Conjunctivitis = 25640000000 THEN 25640000000
				ELSE 25660000000
			END		
			WHEN 25460000000 THEN 1
			WHEN 25640000000 THEN 2
			ELSE 9
		END	 AS intClinCCC, 			    			
		CASE WHEN isnumeric(ct.RashDuration) = 1  AND CAST(ct.RashDuration AS varchar) NOT in ('.', ',', '-', '+', '$')
				THEN --CAST(ct.RashDuration AS INT) 
					 CAST(CAST(replace(ct.RashDuration,',','.') AS decimal) AS INT)
				ELSE 2222 END AS intClinRashDuration,
			
		CASE hc.idfsOutcome
			WHEN 10770000000 THEN 1
			WHEN 10760000000 THEN 2
			WHEN 10780000000 THEN 3
			ELSE 3
		END AS intClinOutcome, 
		
		CASE hc.idfsYNHospitalization   
			WHEN 10100001 THEN 1
			WHEN 10100002 THEN 2
			WHEN 10100003 THEN 9
			ELSE NULL
		END AS intClinHospitalization, 
		
		-- GG - FF parameter = 'Source of infection' -- idfsParameter = 9951440000000
		--9879590000000	Imported
		--9879600000000	Import-related
		--9879610000000	Indigenous
		--9879620000000	Unknown
		--Indigenous=Endemic, Imported=Imported, Import-related=Import-related, Unknown = Unknown, Blank = Blank

		CASE ct.SourceOfInfection 
			--GG
			WHEN 9879590000000 THEN 1 --Imported = Imported
			WHEN 9879610000000 THEN 2 --Indigenous = Endemic
			WHEN 9879600000000 THEN 3 -- Import-related=Import-related
			WHEN 9879620000000 THEN 9 --  Unknown = Unknown
			ELSE NULL --Blank = Blank
		END	 AS intSrcInf, 
		
		
		CASE hc.idfsYNRelatedToOutbreak
			WHEN 10100001 THEN 1
			WHEN 10100002 THEN 2
			WHEN 10100003 THEN 9
			ELSE 
				CASE WHEN (to1.strOutbreakID IS NOT NULL) THEN 1
					ELSE 2
				END
		END AS intSrcOutbreakRelated, 
  
		to1.strOutbreakID AS strSrcOutbreakID,
		
		CASE WHEN (to1.strOutbreakID IS NOT NULL) 
		  THEN
		  CASE 
			CASE 
				-- GG
				WHEN ct.Complications = 25460000000 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles THEN 25460000000
				WHEN ct.Complications = 25640000000 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles THEN 25640000000
				WHEN ct.Complications = 25660000000 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles THEN 25660000000
				ELSE 25660000000
			END		
			WHEN 25460000000 THEN 1
			WHEN 25640000000 THEN 2
			WHEN 25660000000 THEN 9
			ELSE NULL
		END	 
		ELSE NULL
		END AS intCompComplications, 		 					
		
		CASE WHEN (to1.strOutbreakID IS NOT NULL) 
		  THEN
		CASE WHEN ct.Complications = 25460000000 /*Yes*/ AND ct.idfsDiagnosis = @idfsDiagnosis_Measles 
			THEN
				CASE ct.Encephalitis 
					WHEN 25460000000 THEN 1 
					WHEN 25640000000 THEN 2 
					WHEN 25660000000 THEN 9 		
					ELSE NULL
				END	 
			ELSE NULL
		END	 
		ELSE NULL
		END AS intCompEncephalitis, 				
	
		CASE WHEN (to1.strOutbreakID IS NOT NULL) 
		  THEN		
		CASE WHEN ct.Complications = 25460000000 /*Yes*/ AND ct.idfsDiagnosis = @idfsDiagnosis_Measles 
			THEN
				CASE ct.Pneumonia 
					WHEN 25460000000 THEN 1 
					WHEN 25640000000 THEN 2 
					WHEN 25660000000 THEN 9 		
					ELSE NULL
				END		 
			ELSE NULL
		END	 
		ELSE NULL
		END AS intCompPneumonia, 				
    
		NULL AS intCompMalnutrition, 
	
		CASE WHEN (to1.strOutbreakID IS NOT NULL) 
		  THEN		
		CASE WHEN ct.Complications = 25460000000 /*Yes*/ AND ct.idfsDiagnosis = @idfsDiagnosis_Measles 
			THEN
				CASE ct.Diarrhoea 
					WHEN 25460000000 THEN 1 
					WHEN 25640000000 THEN 2 
					WHEN 25660000000 THEN 9 		
					ELSE NULL
				END		 
			ELSE NULL
		END	 
		ELSE NULL
		END AS intCompDiarrhoea, 		

		CASE WHEN (to1.strOutbreakID IS NOT NULL) 
		  THEN		
		CASE WHEN ct.Complications = 25460000000 /*Yes*/ AND ct.idfsDiagnosis = @idfsDiagnosis_Measles 
			THEN
				CASE WHEN len(ct.Other) > 0 THEN 1 ELSE 2 END 
			ELSE NULL
		END	 
		ELSE NULL
		END AS intCompOther, 		
            
		CASE 
			WHEN hc.idfsFinalCaseStatus = 370000000  --NOT a CASE
					THEN 0
			WHEN hc.idfsFinalCaseStatus = 350000000 --Confirmed
				AND ct.idfsDiagnosis = @idfsDiagnosis_Measles
				AND hc.blnLabDiagBasis = 1
					THEN 1
			WHEN hc.idfsFinalCaseStatus = 350000000  --Confirmed
				AND ct.idfsDiagnosis = @idfsDiagnosis_Measles
				AND ISNULL(hc.blnLabDiagBasis, 0) = 0
				AND hc.blnEpiDiagBasis = 1
					THEN 2
			--WHEN hc.idfsFinalCaseStatus = 350000000  --Confirmed
			--	AND ISNULL(hc.blnLabDiagBasis, 0) = 0
			--	AND hc.blnClinicalDiagBasis = 1
			--		THEN 3
			WHEN hc.idfsFinalCaseStatus = 360000000 --Probable
				AND ct.idfsDiagnosis = @idfsDiagnosis_Measles
				AND (hc.blnLabDiagBasis = 1 or hc.blnEpiDiagBasis = 1 or hc.blnClinicalDiagBasis = 1)
					THEN 3
			WHEN hc.idfsFinalCaseStatus = 350000000 
				AND ct.idfsDiagnosis = @idfsDiagnosis_Rubella
				AND hc.blnLabDiagBasis = 1
					THEN 6
			WHEN hc.idfsFinalCaseStatus = 350000000 
				AND ct.idfsDiagnosis = @idfsDiagnosis_Rubella
				AND ISNULL(hc.blnLabDiagBasis, 0) = 0
				AND hc.blnEpiDiagBasis = 1
					THEN 7
			WHEN hc.idfsFinalCaseStatus = 360000000 --Probable
				AND ct.idfsDiagnosis = @idfsDiagnosis_Rubella
				AND  (hc.blnLabDiagBasis = 1 or hc.blnEpiDiagBasis = 1 or hc.blnClinicalDiagBasis = 1)
					THEN 8
			WHEN hc.idfsFinalCaseStatus = 380000000	--Suspect
				OR hc.idfsFinalCaseStatus = 12137920000000
				or hc.idfsFinalCaseStatus IS NULL
				or (hc.blnLabDiagBasis IS NULL AND hc.blnEpiDiagBasis IS NULL AND hc.blnClinicalDiagBasis IS NULL)
					THEN NULL
			ELSE NULL
		END intFinalClassification,        
    
    
		CASE 
		   WHEN hc.idfsYNSpecimenCollected = 10100001 THEN ct.datFieldCollectionDate
		   ELSE NULL
		END AS datDSpecimen,       
        
		--Type of sample associated with the test which result IS shown in #29/31. 
		--IF #29/31 IS blank THEN the sample with the latest date of sample collection should be taken. 
		--Blood = 1 Serum, 
		--Blood - serum=1 Serum, 
		--Saliva=2 Saliva/oral fluid, 
		--Swab - Rhinopharyngeal = 3 Nasopharyngeal swab, 
		--Urine=5 Urine, 
		--Blood - anticoagulated whole blood= 6 EDTA whole blood, 
		--in other CASE = 7 Other specimen. 
		--Which sample to send, it shall be defined BY tests (see 29/31) NB: Parent Sample Type should be tranferred to CISID in CASE Sample Derivative was created.  
		
		st.strSampleTypeIDs AS strSpecimen,
	
		CASE 
		   WHEN hc.idfsYNSpecimenCollected = 10100001 THEN ct.datConcludedDate
		   ELSE NULL
		END AS datDLabResult,    			            
       
		

		--Test Name: ELISA IgM, Antibody detection
		--The Result of the lastest "ELISA IgM, Antibody detection" 
		--Test Name shall be taken (BY Result Date). 
		--1 Positive = Positive AND Test Status = Final or Amended, 
		--2 Negative= Negative AND Test Status = Final or Amended, 
		--4 Inclonclusive = Cut off AND Test Status = Final or Amended, 
		--0 NOT Tested = IF sample data IS filled in #26/27 but no test data available, 
		--3 In Process = any test result (including blank) for assigned test AND Test Status = In Process or Preliminary      
		CASE
			ISNULL(
					CASE 
					   WHEN hc.idfsYNSpecimenCollected = 10100001 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles AND ct.idfsTestStatus in (10001001, 10001006) --Final or Amended
							THEN ct.idfsTestResult
					   WHEN hc.idfsYNSpecimenCollected = 10100001 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles AND ct.idfsTestStatus in( 10001003, 10001004)	--In Process or Preliminary   
							THEN 3
					   WHEN ct.idfsDiagnosis = @idfsDiagnosis_Measles AND ct.idfTesting IS NULL AND ct.idfsSampleType IS NOT NULL
							THEN 0
					   ELSE NULL
					END, -1)
			--GG
			WHEN 9848880000000 THEN 4--Indeterminate
			WHEN 9848980000000 THEN 2--Negative
			WHEN 9849050000000 THEN 1--Positive
			WHEN 3			   THEN 3--In Process
			WHEN 0			   THEN 0--Not Tested
			WHEN -1 THEN NULL
			ELSE NULL
		END AS intMeaslesIgm,    
		
		CASE
			ISNULL(
					CASE 
					   WHEN hc.idfsYNSpecimenCollected = 10100001 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles AND ct.idfsTestStatus in (10001001, 10001006) --Final or Amended
							THEN ct.idfsTestResult
					   WHEN hc.idfsYNSpecimenCollected = 10100001 AND ct.idfsDiagnosis = @idfsDiagnosis_Measles AND ct.idfsTestStatus in( 10001003, 10001004)	--In Process or Preliminary   
							THEN 3
					   WHEN ct.idfsDiagnosis = @idfsDiagnosis_Measles AND ct.idfTesting IS NULL AND ct.idfsSampleType IS NOT NULL
							THEN 0
					   ELSE NULL
					END, -1)
			--GG
			--WHEN 9848880000000 THEN 4--Indeterminate
			WHEN 9848980000000 THEN 2--Negative
			WHEN 9849050000000 THEN 1--Positive
			WHEN 3			   THEN 3--In Process
			WHEN 0			   THEN 0--Not Tested
			WHEN -1 THEN NULL
			ELSE NULL
		END AS intMeaslesVirusDetection,
		
		CASE
			ISNULL(
				CASE 
					   WHEN hc.idfsYNSpecimenCollected = 10100001 AND ct.idfsDiagnosis = @idfsDiagnosis_Rubella AND ct.idfsTestStatus  in (10001001, 10001006) --Final or Amended
							THEN ct.idfsTestResult
					   WHEN hc.idfsYNSpecimenCollected = 10100001 AND ct.idfsDiagnosis = @idfsDiagnosis_Rubella AND ct.idfsTestStatus in( 10001003, 10001004)	--In Process or Preliminary   
							THEN 3
					   WHEN ct.idfsDiagnosis = @idfsDiagnosis_Rubella AND ct.idfTesting IS NULL	 AND ct.idfsSampleType IS NOT NULL
							THEN 0
					   ELSE NULL
			END, -1)
			WHEN 9848880000000 THEN 4--Indeterminate
			WHEN 9848980000000 THEN 2--Negative
			WHEN 9849050000000 THEN 1--Positive
			WHEN 3			   THEN 3--In Process
			WHEN 0			   THEN 0--Tested
			WHEN -1 THEN NULL
			ELSE NULL
		END AS intRubellaIgm,  
		NULL AS intRubellaVirusDetection,
		hc.strSummaryNotes AS strComments,
		CASE ct.SourceOfInfection 
			--GG
			WHEN 9879590000000  --Imported = Imported
				THEN	
					CASE WHEN CHARINDEX('Azerbaijan',ct.NameOfSourceOfInfection) > 0 THEN 'AZ' ELSE 'GE' END 
			ELSE '' --Blank = Blank
		END strImportationCountry,
		CASE 
			WHEN CHARINDEX('Measles',NonNotifiableDiagnosisRef.[name]) > 0
					THEN 1
			WHEN CHARINDEX('Rubella',NonNotifiableDiagnosisRef.[name]) > 0
					THEN 2
			ELSE 3
		END intInitialDiagnosis
 			      			
 FROM	#HumanCasesToExport ct
	INNER JOIN tlbHumanCase hc
	ON hc.idfHumanCase = ct.idfHumanCase

	INNER JOIN tlbHuman h
	ON h.idfHuman = ct.idfHuman

	INNER JOIN	tlbGeoLocation gl
	ON gl.idfGeoLocation = ct.idfCRAddress

	left JOIN tlbOutbreak to1
	ON to1.idfOutbreak = hc.idfOutbreak
	AND to1.intRowStatus = 0   

	LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000149) AS NonNotifiableDiagnosisRef
			ON NonNotifiableDiagnosisRef.idfsReference = hc.idfsNonNotifiableDiagnosis

	INNER JOIN gisWHOMap gwm
			ON gwm.idfsLocation = ISNULL(gl.idfsRayon, gl.idfsRegion)

	INNER JOIN @SampleTypeIDs st
	ON st.idfHumanCase = ct.idfHumanCase

ORDER BY ct.datDateOnset, hc.strCaseID


--INSERT INTO	#ResultTable
-- (	
--	  idfCase
--	, strCaseID	
--	, intAreaID	
--	, datDRash	
--	, intGenderID
--	, datDBirth	
--	, intAgeAtRashOnset	
--	, intNumOfVaccines	
--	, datDvaccine	
--	, datDNotification	
--	, datDInvestigation	
--	, intClinFever		
--	, intClinCCC	
--	, intClinRashDuration	
--	, intClinOutcome		
--	, intClinHospitalization	
--	, intSrcInf				
--	, intSrcOutbreakRelated		
--	, strSrcOutbreakID		
--	, intCompComplications	
--	, intCompEncephalitis	
--	, intCompPneumonia		
--	, intCompMalnutrition	
--	, intCompDiarrhoea		
--	, intCompOther		
--	, intFinalClassification
--	, datDSpecimen			
--	, intSpecimen			
--	, datDLabResult			
--	, intMeaslesIgm			
--	, intMeaslesVirusDetection	
--	, intRubellaIgm		
--	, intRubellaVirusDetection		
--	, strCommentsEpi			
--)
--SELECT 
--	idfHumanCase
--	, strCaseID	
--	, intAreaID	
--	, datDRash	
--	, intGenderID
--	, datDBirth	
--	, intAgeAtRashOnset	
--	, intNumOfVaccines	
--	, datDvaccine	
--	, datDNotification	
--	, datDInvestigation	
--	, intClinFever		
--	, intClinCCC	
--	, intClinRashDuration	
--	, intClinOutcome		
--	, intClinHospitalization	
--	, intSrcInf				
--	, intSrcOutbreakRelated		
--	, strSrcOutbreakID		
--	, intCompComplications	
--	, intCompEncephalitis	
--	, intCompPneumonia		
--	, intCompMalnutrition	
--	, intCompDiarrhoea		
--	, intCompOther		
--	, intFinalClassification
--	, datDSpecimen			
--	, intSpecimen			
--	, datDLabResult			
--	, intMeaslesIgm			
--	, intMeaslesVirusDetection	
--	, intRubellaIgm				
--	, intRubellaVirusDetection
--	, strCommentsEpi	 


--FROM hc_table
 


--SELECT * FROM #ResultTable
--ORDER BY datDRash, strCaseID

-- Drop temporary tables
IF Object_ID('tempdb..#HumanCasesToExport') IS NOT NULL
BEGIN
SET	@cmd = N'drop TABLE #HumanCasesToExport'
EXEC sp_executesql @cmd
END

IF Object_ID('tempdb..#ResultTable') IS NOT NULL
BEGIN
SET	@cmd = N'drop TABLE #ResultTable'
EXEC sp_executesql @cmd
END

END
GO
PRINT N'Refreshing Procedure [dbo].[USP_HUM_REP_WHOEXPORT]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HUM_REP_WHOEXPORT]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_HAS_MONITORING_SESSION_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HAS_MONITORING_SESSION_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_HUM_HUMAN_DISEASE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HUM_HUMAN_DISEASE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VAS_MONITORING_SESSION_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VAS_MONITORING_SESSION_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VET_DISEASE_REPORT_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VET_DISEASE_REPORT_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USSP_OMM_CONVERT_CONTACT_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_OMM_CONVERT_CONTACT_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_Contact_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_Contact_Set]';


GO
PRINT N'Update complete.';


GO
