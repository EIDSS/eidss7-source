/*
Deployment script for EIDSS7_MSTR_Shell

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "EIDSS7_MSTR_Shell"
:setvar DefaultFilePrefix "EIDSS7_MSTR_Shell"
:setvar DefaultDataPath "D:\NGDEV2\DATA\"
:setvar DefaultLogPath "D:\NGDEV2\LOG\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping Permission Permission...';


GO
REVOKE EXECUTE
    ON SCHEMA::[dbo] TO [db_execproc] CASCADE;


GO
PRINT N'Dropping Permission Permission...';


GO
REVOKE EXECUTE
    ON SCHEMA::[Report] TO [db_execproc] CASCADE;


GO
PRINT N'Dropping Default Constraint [dbo].[DEF_ASPNetUserPreviousPasswords_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] DROP CONSTRAINT [DEF_ASPNetUserPreviousPasswords_SourceSystemNameID];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__ASPNetUserPreviousPasswords__AudiCreateUser]...';


GO
ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] DROP CONSTRAINT [DF__ASPNetUserPreviousPasswords__AudiCreateUser];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__ASPNetUserPreviousPasswords__AuditCreateDTM]...';


GO
ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] DROP CONSTRAINT [DF__ASPNetUserPreviousPasswords__AuditCreateDTM];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__ASPNetUserPreviousPasswords__AuditUpdateUser]...';


GO
ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] DROP CONSTRAINT [DF__ASPNetUserPreviousPasswords__AuditUpdateUser];


GO
PRINT N'Dropping Default Constraint [dbo].[Def_ASPNetUserPreviousPasswords_intRowStatus]...';


GO
ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] DROP CONSTRAINT [Def_ASPNetUserPreviousPasswords_intRowStatus];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__ASPNetUserPreviousPasswords__AuditUpdateDTM]...';


GO
ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] DROP CONSTRAINT [DF__ASPNetUserPreviousPasswords__AuditUpdateDTM];


GO
PRINT N'Dropping Default Constraint [dbo].[DF_ASPNetUserPreviousPasswords__rowguid]...';


GO
ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] DROP CONSTRAINT [DF_ASPNetUserPreviousPasswords__rowguid];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ASPNetUserPreviousPasswords_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] DROP CONSTRAINT [FK_ASPNetUserPreviousPasswords_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_ASPNetUserPreviousPasswords_AspNetUsers_Id]...';


GO
ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] DROP CONSTRAINT [FK_ASPNetUserPreviousPasswords_AspNetUsers_Id];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AccessRule_tflSiteGroup_GrantingActorSiteGroupID]...';


GO
ALTER TABLE [dbo].[AccessRule] DROP CONSTRAINT [FK_AccessRule_tflSiteGroup_GrantingActorSiteGroupID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AccessRule_trtBaseReference]...';


GO
ALTER TABLE [dbo].[AccessRule] DROP CONSTRAINT [FK_AccessRule_trtBaseReference];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AccessRule_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[AccessRule] DROP CONSTRAINT [FK_AccessRule_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_AccessRule_tstSite_GrantingActorSiteID]...';


GO
ALTER TABLE [dbo].[AccessRule] DROP CONSTRAINT [FK_AccessRule_tstSite_GrantingActorSiteID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResource_idfsResourceType]...';


GO
ALTER TABLE [dbo].[trtResource] DROP CONSTRAINT [FK_trtResource_idfsResourceType];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResource_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResource] DROP CONSTRAINT [FK_trtResource_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceSet_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceSet] DROP CONSTRAINT [FK_trtResourceSet_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceSetHierarchy_idfsResourceSet]...';


GO
ALTER TABLE [dbo].[trtResourceSetHierarchy] DROP CONSTRAINT [FK_trtResourceSetHierarchy_idfsResourceSet];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceSetHierarchy_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceSetHierarchy] DROP CONSTRAINT [FK_trtResourceSetHierarchy_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceSetToResource_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceSetToResource] DROP CONSTRAINT [FK_trtResourceSetToResource_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceSetTranslation_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceSetTranslation] DROP CONSTRAINT [FK_trtResourceSetTranslation_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_trtResourceTranslation_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceTranslation] DROP CONSTRAINT [FK_trtResourceTranslation_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [migration].[FK_migration_MigrationRun_MigrationRunType_runTypeId]...';


GO
ALTER TABLE [migration].[MigrationRun] DROP CONSTRAINT [FK_migration_MigrationRun_MigrationRunType_runTypeId];


GO
PRINT N'Dropping Foreign Key [migration].[FK_migration_MigrationStatistics_MigrationRun_runId]...';


GO
ALTER TABLE [migration].[MigrationStatistics] DROP CONSTRAINT [FK_migration_MigrationStatistics_MigrationRun_runId];


GO
PRINT N'Dropping Role Membership <unnamed>...';


GO
EXECUTE sp_droprolemember @rolename = N'db_owner', @membername = N'KulkarniM';


GO
PRINT N'Dropping Role Membership <unnamed>...';


GO
EXECUTE sp_droprolemember @rolename = N'db_owner', @membername = N'DataTeamSA';


GO
PRINT N'Dropping Role Membership <unnamed>...';


GO
EXECUTE sp_droprolemember @rolename = N'db_securityadmin', @membername = N'DataTeamSA';


GO
PRINT N'Starting rebuilding table [dbo].[ASPNetUserPreviousPasswords]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_ASPNetUserPreviousPasswords] (
    [ASPNetUserPreviousPasswordsUID] BIGINT           IDENTITY (1, 1) NOT NULL,
    [Id]                             NVARCHAR (128)   NOT NULL,
    [OldPasswordHash]                NVARCHAR (MAX)   NOT NULL,
    [intRowStatus]                   INT              CONSTRAINT [Def_ASPNetUserPreviousPasswords_intRowStatus] DEFAULT ((0)) NOT NULL,
    [rowguid]                        UNIQUEIDENTIFIER CONSTRAINT [DF_ASPNetUserPreviousPasswords__rowguid] DEFAULT (newid()) NOT NULL,
    [strMaintenanceFlag]             NVARCHAR (20)    NULL,
    [strReservedAttribute]           NVARCHAR (MAX)   NULL,
    [AuditCreateUser]                VARCHAR (100)    CONSTRAINT [DF__ASPNetUserPreviousPasswords__AudiCreateUser] DEFAULT (user_name()) NOT NULL,
    [AuditCreateDTM]                 DATETIME         CONSTRAINT [DF__ASPNetUserPreviousPasswords__AuditCreateDTM] DEFAULT (getdate()) NOT NULL,
    [AuditUpdateUser]                VARCHAR (100)    CONSTRAINT [DF__ASPNetUserPreviousPasswords__AuditUpdateUser] DEFAULT (user_name()) NOT NULL,
    [AuditUpdateDTM]                 DATETIME         CONSTRAINT [DF__ASPNetUserPreviousPasswords__AuditUpdateDTM] DEFAULT (getdate()) NOT NULL,
    [SourceSystemNameID]             BIGINT           CONSTRAINT [DEF_ASPNetUserPreviousPasswords_SourceSystemNameID] DEFAULT ((10519001)) NULL,
    [SourceSystemKeyValue]           NVARCHAR (MAX)   NULL,
    CONSTRAINT [tmp_ms_xx_constraint_XPKASPNetUserPreviousPasswords1] PRIMARY KEY CLUSTERED ([ASPNetUserPreviousPasswordsUID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[ASPNetUserPreviousPasswords])
    BEGIN
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_ASPNetUserPreviousPasswords] ON;
        INSERT INTO [dbo].[tmp_ms_xx_ASPNetUserPreviousPasswords] ([ASPNetUserPreviousPasswordsUID], [Id], [OldPasswordHash], [intRowStatus], [rowguid], [strMaintenanceFlag], [strReservedAttribute], [AuditCreateUser], [AuditCreateDTM], [AuditUpdateUser], [AuditUpdateDTM], [SourceSystemNameID], [SourceSystemKeyValue])
        SELECT   [ASPNetUserPreviousPasswordsUID],
                 [Id],
                 [OldPasswordHash],
                 [intRowStatus],
                 [rowguid],
                 [strMaintenanceFlag],
                 [strReservedAttribute],
                 [AuditCreateUser],
                 [AuditCreateDTM],
                 [AuditUpdateUser],
                 [AuditUpdateDTM],
                 [SourceSystemNameID],
                 [SourceSystemKeyValue]
        FROM     [dbo].[ASPNetUserPreviousPasswords]
        ORDER BY [ASPNetUserPreviousPasswordsUID] ASC;
        SET IDENTITY_INSERT [dbo].[tmp_ms_xx_ASPNetUserPreviousPasswords] OFF;
    END

DROP TABLE [dbo].[ASPNetUserPreviousPasswords];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_ASPNetUserPreviousPasswords]', N'ASPNetUserPreviousPasswords';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_XPKASPNetUserPreviousPasswords1]', N'XPKASPNetUserPreviousPasswords', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Unique Constraint [dbo].[UK_tlbPostalCode]...';


GO
ALTER TABLE [dbo].[tlbPostalCode]
    ADD CONSTRAINT [UK_tlbPostalCode] UNIQUE NONCLUSTERED ([strPostCode] ASC, [idfsLocation] ASC);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ASPNetUserPreviousPasswords_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] WITH NOCHECK
    ADD CONSTRAINT [FK_ASPNetUserPreviousPasswords_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_ASPNetUserPreviousPasswords_AspNetUsers_Id]...';


GO
ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] WITH NOCHECK
    ADD CONSTRAINT [FK_ASPNetUserPreviousPasswords_AspNetUsers_Id] FOREIGN KEY ([Id]) REFERENCES [dbo].[AspNetUsers] ([Id]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AccessRule_tflSiteGroup_GrantingActorSiteGroupID]...';


GO
ALTER TABLE [dbo].[AccessRule] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRule_tflSiteGroup_GrantingActorSiteGroupID] FOREIGN KEY ([GrantingActorSiteGroupID]) REFERENCES [dbo].[tflSiteGroup] ([idfSiteGroup]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AccessRule_trtBaseReference]...';


GO
ALTER TABLE [dbo].[AccessRule] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRule_trtBaseReference] FOREIGN KEY ([AccessRuleID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_AccessRule_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[AccessRule] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRule_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AccessRule_tstSite_GrantingActorSiteID]...';


GO
ALTER TABLE [dbo].[AccessRule] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRule_tstSite_GrantingActorSiteID] FOREIGN KEY ([GrantingActorSiteID]) REFERENCES [dbo].[tstSite] ([idfsSite]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResource_idfsResourceType]...';


GO
ALTER TABLE [dbo].[trtResource] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResource_idfsResourceType] FOREIGN KEY ([idfsResourceType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResource_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResource] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResource_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceSet_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceSet] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceSet_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceSetHierarchy_idfsResourceSet]...';


GO
ALTER TABLE [dbo].[trtResourceSetHierarchy] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceSetHierarchy_idfsResourceSet] FOREIGN KEY ([idfsResourceSet]) REFERENCES [dbo].[trtResourceSet] ([idfsResourceSet]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceSetHierarchy_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceSetHierarchy] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceSetHierarchy_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceSetToResource_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceSetToResource] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceSetToResource_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceSetTranslation_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceSetTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceSetTranslation_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_trtResourceTranslation_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[trtResourceTranslation] WITH NOCHECK
    ADD CONSTRAINT [FK_trtResourceTranslation_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_AppObj_ObjName]...';


GO
ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH NOCHECK
    ADD CONSTRAINT [FK_AppObj_ObjName] FOREIGN KEY ([AppObjectNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupEIDSSMenu_BaseRef_MenuID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenu] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupEIDSSMenu_BaseRef_MenuID] FOREIGN KEY ([EIDSSMenuID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupRoleSystemFunctionAccess_idfEmployee]...';


GO
ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupRoleSystemFunctionAccess_idfEmployee] FOREIGN KEY ([idfEmployee]) REFERENCES [dbo].[tlbEmployee] ([idfEmployee]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSession_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSession_gisLocation_idfsLocation] FOREIGN KEY ([idfsLocation]) REFERENCES [dbo].[gisLocation] ([idfsLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstGeoLocationFormat_gisLocation_idfsLocation]...';


GO
ALTER TABLE [dbo].[tstGeoLocationFormat] WITH NOCHECK
    ADD CONSTRAINT [FK_tstGeoLocationFormat_gisLocation_idfsLocation] FOREIGN KEY ([idfsCountry]) REFERENCES [dbo].[gisLocation] ([idfsLocation]) NOT FOR REPLICATION;


GO
PRINT N'Altering Trigger [dbo].[TR_gisLocation_UpdateDenormalizedHierarchy]...';


GO

-- =============================================
-- Author:		Steven Verner
-- Create date: 1/4/2021
-- Description:	Rebuilds gisLocationDenormalized when:
	-- 1.  When a new location is inserted.
	-- 2.  When a location is re-parented (moved)
	-- 3.  When the location is deleted (intRowStatus = 1)
-- History:
--	Date		Developer			Comments
--	03/17/2022	Steven Verner		Fixed the issue where the incorrect level type was specified.
--  10/27/2022  Mani Govindarajan   LevelType - to  ISNULL(lt.strTextString,[level]) - Temp Fix
-- =============================================
ALTER TRIGGER [dbo].[TR_gisLocation_UpdateDenormalizedHierarchy]
   ON  [dbo].[gisLocation] 
   AFTER INSERT,DELETE,UPDATE
AS 
BEGIN
	SET NOCOUNT ON;

		DECLARE 
			@current INT, 
			@max INT, 
			@languageId BIGINT, 
			@hi HIERARCHYID 

		DECLARE @t TABLE(
			L1ID BIGINT, L2ID BIGINT, L3ID BIGINT, L4ID BIGINT, L5ID BIGINT, L6ID BIGINT, L7ID BIGINT,
			L1NAME NVARCHAR(255),L2NAME NVARCHAR(255),L3NAME NVARCHAR(255),L4NAME NVARCHAR(255),L5NAME NVARCHAR(255),L6NAME NVARCHAR(255),L7NAME NVARCHAR(255),
			Node HIERARCHYID, 
			[Level] INT,
			idfsLocation BIGINT,
			LanguageId BIGINT )
		
		DECLARE @Languages TABLE(id INT IDENTITY, idfsLanguage BIGINT)
		INSERT INTO @Languages(idfsLanguage)
		SELECT idfsLanguage
		FROM dbo.gisLocationDenormalized ld
		GROUP BY idfsLanguage 
		
		DECLARE @idfsLocation BIGINT = NULL,
			@newParent HIERARCHYID,
			@oldParent HIERARCHYID,
			@newDeleted BIT,
			@oldDeleted BIT

			-- The following use cases must be captured:
			-- 1.  When a new location is inserted.
			-- 2.  When a location is re-parented (moved)
			-- 3.  When the location is deleted (intRowStatus = 1)
			-- 4.  When the location name changes...  (This use case cannot be captured here; it must be captured on the trtBaseReference table trigger...

	IF EXISTS(SELECT * FROM inserted) AND EXISTS (SELECT * FROM deleted) -- This is an update
	BEGIN

		--	====================================================
		--  Test to see if the location moved...
		--	====================================================
		SELECT 
		 @idfsLocation = idfsLocation
		,@newDeleted = CASE WHEN intRowStatus=1 THEN 1 ELSE 0 END
		,@newParent = NODE.GetAncestor(1)
		FROM Inserted 

		SELECT @oldDeleted = intRowStatus,  @oldParent = Node.GetAncestor(1) 
		FROM DELETED

		-- We always remove all references of the location in the gislocationDenormalized table,
		-- then generate a new entry...
		-- This handles both when a record was deleted (intRowStatus=1) and the need to remove the existing recordsprior to generating a new one for reparenting...

		-- When the location has moved or the record is reactivated (intRowStatus = 0)...
		IF(@newParent != @oldParent) 
		BEGIN 
			DELETE FROM gisLocationDenormalized WHERE idfsLocation = @idfsLocation
			GOTO GenerateNewReference
		END ELSE IF( @newDeleted = 1 )
			DELETE FROM gisLocationDenormalized WHERE idfsLocation = @idfsLocation

		ELSE IF(@oldDeleted =1 and @newDeleted = 0 )
			BEGIN
				DELETE FROM gisLocationDenormalized WHERE idfsLocation = @idfsLocation
				GOTO GenerateNewReference
			END

		GOTO Fini
	END

	IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS (SELECT * FROM deleted) -- This is an insert
	BEGIN
		-- New location was inserted...
		SELECT @idfsLocation = idfsLocation FROM inserted;
		GOTO GenerateNewReference
	END

	IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS(SELECT * FROM inserted) -- this is a delete
	BEGIN
		-- Location was deleted...
		SELECT @idfsLocation = idfsLocation FROM deleted;
		DELETE FROM dbo.gisLocationDenormalized WHERE idfsLocation = @idfsLocation
	END

	GOTO Fini
	/*
	--	====================================================
	GenerateNewReference:
	--	====================================================
		SELECT @current = 1, @max= COUNT(*) FROM @Languages
		
		-- Select the node for the inserted/updated location...
		SELECT @hi = Node FROM gisLocation l WHERE l.idfsLocation = @idfsLocation

		-- iterate thru all the languages and insert the hierarchy record for each...
		WHILE (@current <= @max)
		BEGIN
			
			--	Select a language...
			SELECT @languageId = idfsLanguage FROM @Languages WHERE id = @current

			-- Perform the insert...
			-- 1st into table variable...
			INSERT INTO @t(
						 L1ID
						,L2ID
						,L3ID
						,L4ID
						,L5ID
						,L6ID
						,L7ID
						,L1NAME
						,L2NAME
						,L3NAME
						,L4NAME
						,L5NAME
						,L6NAME
						,L7NAME
						,Node
						,[Level]
						,idfsLocation
						,LanguageId)

			-- PIVOT!!!!!
			-- Flatten the hierarchy and insert into gisLocationDenormalized...
			SELECT 
				-- LevelIDs 1 thru 7...
				MAX(CASE WHEN [Level]=1 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=2 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=3 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=4 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=5 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=6 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=7 THEN idfsLocation END ),
				-- LevelNames 1 thru 7...
				MAX(CASE WHEN [Level]=1 THEN LevelName END ),
				MAX(CASE WHEN [Level]=2 THEN LevelName END ),
				MAX(CASE WHEN [Level]=3 THEN LevelName END ),
				MAX(CASE WHEN [Level]=4 THEN LevelName END ),
				MAX(CASE WHEN [Level]=5 THEN LevelName END ),
				MAX(CASE WHEN [Level]=6 THEN LevelName END ),
				MAX(CASE WHEN [Level]=7 THEN LevelName END ),
				-- Node...
				MAX(Node),
				MAX(level),
				MAX(idfsLocation),
				@languageId
			FROM 
				(
				SELECT 
					l.Node.GetLevel() [Level]
					,COALESCE(snt.strTextString, b.strDefault) [LevelName]
					,b.strDefault [LevelNameDefault]
					,idfsLocation
					,Node
					--,LevelType.strTextString
					 ,rn=ROW_NUMBER() OVER (PARTITION BY 0 ORDER BY node.GetLevel())
				FROM gisLocation l
				JOIN gisBaseReference b ON b.idfsGISBaseReference = l.idfsLocation
				LEFT JOIN dbo.gisStringNameTranslation snt ON snt.idfsGISBaseReference = l.idfsLocation AND 
					snt.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@languageId)
				WHERE @hi.IsDescendantOf(node) = 1
				) a

				-- Reset...
				SET @current = @current+1
				SELECT @languageId = NULL
		END
		
		-- Finally, insert into gis table...
		INSERT INTO dbo.gisLocationDenormalized
			(
				Level1ID, 
				Level2ID, 
				Level3ID, 
				Level4ID, 
				Level5ID, 
				Level6ID, 
				Level7ID,
				Level1Name,
				Level2Name, 
				Level3Name, 
				Level4Name, 
				Level5Name, 
				Level6Name, 
				Level7Name,
				Node,
				Level,
				idfsLocation,
				LevelType,
				idfsLanguage
			)
		SELECT  L1ID,L2ID,L3ID,L4ID,L5ID,L6ID,L7ID,
				L1NAME,L2NAME,L3NAME,L4NAME,L5NAME,L6NAME,L7NAME,
				node,[level],l.idfsLocation,lt.strTextString,l.LanguageId
		FROM @t l
		JOIN gisBaseReference b ON b.idfsGISBaseReference = l.idfsLocation
		JOIN gisReferenceType t ON t.idfsGISReferenceType = b.idfsGISReferenceType
		JOIN dbo.trtStringNameTranslation lt ON 
		lt.idfsLanguage = l.LanguageId AND lt.idfsBaseReference = 
		CASE l.Node.GetLevel() 
			WHEN 1 THEN 10003001 
			WHEN 2 THEN 10003003
			WHEN 3 THEN 10003002 
			WHEN 4 THEN 10003004 
			WHEN 5 THEN 0
			WHEN 6 THEN 0
			WHEN 7 THEN 0
		ELSE 0 END

		GOTO Fini
	*/
	--	====================================================
	GenerateNewReference:  
	--	====================================================

		SELECT @current = 1, @max= COUNT(*) FROM @Languages
		
		SELECT @hi = Node FROM gisLocation l WHERE l.idfsLocation = @idfsLocation

		-- iterate thru all the languages and insert the hierarchy record for each...
		WHILE (@current <= @max)
		BEGIN
			
			--	Select a language...
			SELECT @languageId = idfsLanguage FROM @Languages WHERE id = @current

			-- Perform the insert...
			-- 1st into table variable...
			INSERT INTO @t(
						 L1ID
						,L2ID
						,L3ID
						,L4ID
						,L5ID
						,L6ID
						,L7ID
						,L1NAME
						,L2NAME
						,L3NAME
						,L4NAME
						,L5NAME
						,L6NAME
						,L7NAME
						,Node
						,[Level]
						--,idfsLocation
						,LanguageId)

			-- PIVOT!!!!!
			-- Flatten the hierarchy and insert into gisLocationDenormalized...
			SELECT 
				-- LevelIDs 1 thru 7...
				MAX(CASE WHEN [Level]=1 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=2 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=3 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=4 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=5 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=6 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=7 THEN idfsLocation END ),
				-- LevelNames 1 thru 7...
				MAX(CASE WHEN [Level]=1 THEN LevelName END ),
				MAX(CASE WHEN [Level]=2 THEN LevelName END ),
				MAX(CASE WHEN [Level]=3 THEN LevelName END ),
				MAX(CASE WHEN [Level]=4 THEN LevelName END ),
				MAX(CASE WHEN [Level]=5 THEN LevelName END ),
				MAX(CASE WHEN [Level]=6 THEN LevelName END ),
				MAX(CASE WHEN [Level]=7 THEN LevelName END ),
				-- Node...
				MAX(Node),
				MAX(level),
				--MAX(idfsLocation),
				@languageId
			FROM 
				(
				SELECT 
					l.Node.GetLevel() [Level]
					,COALESCE(snt.strTextString, b.strDefault) [LevelName]
					,b.strDefault [LevelNameDefault]
					,idfsLocation
					,Node
					--,LevelType.strTextString
					 ,rn=ROW_NUMBER() OVER (PARTITION BY 0 ORDER BY node.GetLevel())
				FROM gisLocation l
				JOIN gisBaseReference b ON b.idfsGISBaseReference = l.idfsLocation
				LEFT JOIN dbo.gisStringNameTranslation snt ON snt.idfsGISBaseReference = l.idfsLocation AND 
					snt.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@languageId)
				WHERE @hi.IsDescendantOf(node) = 1
				) a

				-- Reset...
				SET @current = @current+1
				SELECT @languageId = NULL
		END

		-- Update the idfsLocation...
		UPDATE @t 
		SET idfsLocation = 
			CASE level WHEN 1 THEN L1ID
			WHEN 2 THEN L2ID
			WHEN 3 THEN L3ID
			WHEN 4 THEN L4ID
			WHEN 5 THEN L5ID 
			WHEN 6 THEN L6ID
			WHEN 7 THEN L7ID END
		
		-- Finally, insert into gis table...
		INSERT INTO dbo.gisLocationDenormalized
			(
				Level1ID, 
				Level2ID, 
				Level3ID, 
				Level4ID, 
				Level5ID, 
				Level6ID, 
				Level7ID,
				Level1Name,
				Level2Name, 
				Level3Name, 
				Level4Name, 
				Level5Name, 
				Level6Name, 
				Level7Name,
				Node,
				Level,
				idfsLocation,
				LevelType,
				idfsLanguage
			)
		SELECT  L1ID,L2ID,L3ID,L4ID,L5ID,L6ID,L7ID,
				L1NAME,L2NAME,L3NAME,L4NAME,L5NAME,L6NAME,L7NAME,
				node,[level],l.idfsLocation,ISNULL(lt.strTextString,[level]),l.LanguageId
		FROM @t l
		JOIN gisBaseReference b ON b.idfsGISBaseReference = l.idfsLocation
		JOIN gisReferenceType t ON t.idfsGISReferenceType = b.idfsGISReferenceType
		JOIN dbo.trtStringNameTranslation lt ON 
		lt.idfsLanguage = l.LanguageId AND lt.idfsBaseReference = 
		CASE l.Node.GetLevel() 
			WHEN 1 THEN 10003001 
			WHEN 2 THEN 10003003
			WHEN 3 THEN 10003002 
			WHEN 4 THEN 10003004 
			WHEN 5 THEN 0
			WHEN 6 THEN 0
			WHEN 7 THEN 0
		ELSE 0 END



	Fini:
		-- Bye!
		RETURN

END
GO
PRINT N'Altering Function [dbo].[FN_VCTS_VSSESSION_DIAGNOSESIDS_GET]...';


GO
-- ================================================================================================
-- Name: FN_VCTS_VSSESSION_DIAGNOSESIDS_GET
--
-- Description: Gets a comma delimited list of disease ids for a vector surveillance session.
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     05/01/2022 Original
-- Mike Kornegay	05/26/2022 Added null reference checks to every query
-- Mike Kornegay	06/10/2022 Moved the semicolon separator to the end of the string
-- Stephen Long     09/29/2022 Fix to split out the diseases with a semi-colon in between.
-- Mike Kornegay	10/06/2022 Added where clauses to include only active records.
--
-- ================================================================================================
ALTER FUNCTION [dbo].[FN_VCTS_VSSESSION_DIAGNOSESIDS_GET]
(
	@idfVectorSurveillanceSession	AS BIGINT,
	@LangID							AS NVARCHAR(50)
)
RETURNS								NVARCHAR(1000)
AS
BEGIN
	DECLARE @strDiagnosesIDs		NVARCHAR(1000);
	
	IF @idfVectorSurveillanceSession IS NOT NULL OR @idfVectorSurveillanceSession <> ''
	BEGIN
		SELECT @strDiagnosesIDs = ISNULL(@strDiagnosesIDs + ';','') + CONVERT(NVARCHAR(1000), vs.idfsDiagnosis)
		FROM (
				SELECT DISTINCT			t.idfsDiagnosis
				FROM					dbo.tlbPensideTest t
				INNER JOIN				dbo.tlbMaterial m 
				ON						m.idfMaterial = t.idfMaterial
				AND						t.intRowStatus = 0
				INNER JOIN				dbo.trtPensideTestTypeToTestResult tr 
				ON						t.idfsPensideTestName = tr.idfsPensideTestName
				AND						t.idfsPensideTestResult = tr.idfsPensideTestResult
				AND						t.intRowStatus = 0
				AND						tr.intRowStatus = 0
				AND						tr.blnIndicative = 1
				WHERE					m.idfVectorSurveillanceSession = @idfVectorSurveillanceSession
				AND						t.idfsDiagnosis is not null

			UNION

				SELECT DISTINCT			t.idfsDiagnosis
				FROM					dbo.tlbTesting t
				INNER JOIN				dbo.tlbMaterial m 
				ON						m.idfMaterial = t.idfMaterial
				WHERE					m.idfVectorSurveillanceSession = @idfVectorSurveillanceSession
				AND						t.idfsDiagnosis is not null
				AND						t.intRowStatus = 0

			UNION

				SELECT DISTINCT			m.DiseaseID
				FROM					dbo.tlbMaterial m
				WHERE					m.idfVectorSurveillanceSession = @idfVectorSurveillanceSession
				AND						m.DiseaseID is not null
				AND						m.intRowStatus = 0

			UNION

				SELECT DISTINCT			vssd.idfsDiagnosis
				FROM					dbo.tlbVectorSurveillanceSessionSummary vss
				INNER JOIN				dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd 
				ON						vss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
				WHERE					vss.idfVectorSurveillanceSession = @idfVectorSurveillanceSession
				AND						vssd.idfsDiagnosis is not null
				AND						vssd.intRowStatus = 0

		  ) AS vs;
	END
	RETURN @strDiagnosesIDs;
END
GO
PRINT N'Altering Function [dbo].[FN_VCTS_VSSESSION_DIAGNOSESNAMES_GET]...';


GO

-- ================================================================================================
-- Name: FN_VCTS_VSSESSION_DIAGNOSESNAMES_GET
--
-- Description: Gets a comma delimited list of diagnosis names for a vector surveillance session
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     05/01/2022 Original
-- Mike Kornegay	05/26/2022 Added null reference checks to every query
-- Mike Kornegay	10/06/2022 Added where clauses to include only active records.
--
-- ================================================================================================

ALTER FUNCTION [dbo].[FN_VCTS_VSSESSION_DIAGNOSESNAMES_GET]
(
	@idfVectorSurveillanceSession AS BIGINT--##PARAM @idfVectorSurveillanceSession - AS session ID
	,@LangID AS NVARCHAR(50)--##PARAM @LangID - language ID
)
RETURNS NVARCHAR(1000)
AS
BEGIN
	DECLARE @strDiagnoses NVARCHAR(1000)
	DECLARE @idfsDiagnosises TABLE (idfsDiagnosis BIGINT NOT NULL PRIMARY KEY);
	IF @idfVectorSurveillanceSession IS NOT NULL OR @idfVectorSurveillanceSession <> ''
	BEGIN
		INSERT INTO @idfsDiagnosises
			SELECT 
				DISTINCT	Test.idfsDiagnosis
				FROM		dbo.tlbPensideTest Test
				INNER JOIN	dbo.tlbMaterial Material ON
							Material.idfMaterial = Test.idfMaterial
				AND			Material.intRowStatus = 0
				INNER JOIN	trtPensideTestTypeToTestResult tr ON
							Test.idfsPensideTestName = tr.idfsPensideTestName
				AND			Test.idfsPensideTestResult = tr.idfsPensideTestResult
				AND			tr.intRowStatus = 0
				AND			tr.blnIndicative = 1
				WHERE		test.intRowStatus = 0 
				AND Material.idfVectorSurveillanceSession = @idfVectorSurveillanceSession
				AND Test.idfsDiagnosis is not null

			UNION

				SELECT 
				DISTINCT	Test.idfsDiagnosis
				FROM		dbo.tlbTesting Test
				INNER JOIN	dbo.tlbMaterial Material ON
							Material.idfMaterial = Test.idfMaterial AND material.intRowStatus = 0
				WHERE		Test.intRowStatus = 0 
				AND Material.idfVectorSurveillanceSession = @idfVectorSurveillanceSession
				AND Test.idfsDiagnosis is not null
				
			UNION

				SELECT 
				DISTINCT	Material.DiseaseID
				FROM		dbo.tlbMaterial Material
				WHERE		Material.intRowStatus = 0 
				AND Material.idfVectorSurveillanceSession = @idfVectorSurveillanceSession
				AND Material.DiseaseID is not null

			UNION

				SELECT 
				DISTINCT	Vssd.[idfsDiagnosis] 
				FROM		dbo.tlbVectorSurveillanceSessionSummary Vss
				INNER JOIN	dbo.tlbVectorSurveillanceSessionSummaryDiagnosis Vssd ON
							Vss.[idfsVSSessionSummary] = Vssd.[idfsVSSessionSummary] AND Vssd.intRowStatus = 0
				WHERE		vss.intRowStatus = 0
				AND Vss.idfVectorSurveillanceSession = @idfVectorSurveillanceSession
				AND Vssd.idfsDiagnosis is not null
			
		SELECT @strDiagnoses = ISNULL(@strDiagnoses + '; ','') + ref_Diagnosis.[name]
		FROM @idfsDiagnosises VectorSession
		INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) ref_Diagnosis	ON 
				ref_Diagnosis.idfsReference = VectorSession.idfsDiagnosis
	END

	RETURN @strDiagnoses
END
GO
PRINT N'Creating Function [dbo].[FN_VAS_SESSION_SAMPLE_DIAGNOSESNAMES_GET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: FN_VAS_SESSION_SAMPLE_DIAGNOSESNAMES_GET
--
-- Description: Gets a comma delimited list of diagnosis names for a veterinary surveillance session and sample id.
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mike Kornegay	10/14/2022 Original 
--
-- ================================================================================================

CREATE FUNCTION [dbo].[FN_VAS_SESSION_SAMPLE_DIAGNOSESNAMES_GET]
(
	@MonitoringSessionID AS BIGINT,
	@LangID AS NVARCHAR(50),
	@SampleID AS BIGINT
)
RETURNS NVARCHAR(1000)
AS
BEGIN
	DECLARE @strDiagnoses NVARCHAR(1000)
	DECLARE @idfsDiagnosises TABLE (idfsDiagnosis BIGINT NOT NULL PRIMARY KEY);
	IF @MonitoringSessionID IS NOT NULL OR @MonitoringSessionID <> ''
	BEGIN
		INSERT INTO @idfsDiagnosises
			SELECT DISTINCT
				msm.idfsDisease AS DiseaseID
			FROM dbo.tlbMonitoringSessionToMaterial msm
			LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS disease
				ON disease.idfsReference = msm.idfsDisease
			WHERE msm.intRowStatus = 0
				AND msm.idfMonitoringSession IS NOT NULL 
				AND msm.idfMonitoringSession = @MonitoringSessionID
				AND msm.idfMaterial = @SampleID;
			
		SELECT @strDiagnoses = ISNULL(@strDiagnoses + '; ','') + ref_Diagnosis.[name]
		FROM @idfsDiagnosises SessionSampleDiseases
		INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) ref_Diagnosis	ON 
				ref_Diagnosis.idfsReference = SessionSampleDiseases.idfsDiagnosis
	END

	RETURN @strDiagnoses
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Function [Report].[FN_REP_NoOfLocationsWithFreezerLocations]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
--Select Char(2 + 64)

--select sqrt(25)
--SELECT Report.FN_REP_NoOfLocationsWithFreezerLocations(25)
-- Name             Date		Change Detail
-- Srini Goli		09/27/2022	Created to display Occupied Freezers
-- SELECT [Report].[FN_REP_NoOfLocationsWithFreezerLocations] (25,12429860001232)
CREATE FUNCTION [Report].[FN_REP_NoOfLocationsWithFreezerLocations] (@BoxSize int,@idfSubdivision BIGINT)
RETURNS VARCHAR(MAX)
AS
BEGIN

	DECLARE @tmp varchar(250),
			@count INT,
			@Loop INT,
			@StringRow varchar(MAX)='  ',
			@FinalStringRow varchar(MAX)='';
	DECLARE  @BoxDetails TABLE(BoxColumn NVARCHAR(5),BoxRow INT,AvailabilityIndicator NVARCHAR(2))
	SET @Loop=sqrt(@BoxSize)
	SET @count = 1

	WHILE @count<= @Loop
	BEGIN
	   SET @StringRow= @StringRow +' ' +Char(@count + 64)
	   SET @count = @count + 1
	END;


	SET @count = 1
	INSERT INTO @BoxDetails(BoxColumn,BoxRow,AvailabilityIndicator)
	SELECT 
		LEFT(BOX.[BoxLocation],1) AS BoxColumn,
		SUBSTRING(BOX.[BoxLocation],2,LEN(BOX.[BoxLocation])) AS BoxRow,
		IIF(BOX.[AvailabilityIndicator]='true','0','X') As AvailabilityIndicator
	FROM dbo.tlbFreezerSubdivision 
	CROSS APPLY OPENJSON(BoxPlaceAvailability) 
	WITH ( [BoxLocation] NVARCHAR(50),
	[AvailabilityIndicator] NVARCHAR(50)
	) As BOX
	WHERE idfSubdivision=@idfSubdivision


	WHILE @count<= @Loop
	BEGIN
	SET @tmp = ''
	select @tmp = @tmp + AvailabilityIndicator + ' ' 
	from @BoxDetails where BoxRow=@count order by BoxColumn

	   SET @FinalStringRow= @FinalStringRow + CAST(@count as Varchar(15) ) + ' ' +@tmp +IIF(@count<>@Loop,CHAR(10)+CHAR(13),'');
	   SET @count = @count + 1;
	   --INSERT INTO @TablenameList SELECT @FinalStringRow
	END;

 RETURN @StringRow+CHAR(10)+CHAR(13)+@FinalStringRow;

END;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Function [dbo].[FN_LAB_MONITORING_SESSION_DISEASES_GET]...';


GO
-- ================================================================================================
-- Name: FN_LAB_MONITORING_SESSION_DISEASES_GET
--
-- Description: Returns the delimited list of disease identifiers and names for a surveillance 
-- session.
--          
-- Author: Stephen Long
--
-- Revision History:
--		Name       Date       Change Detail
-- ------------------ ---------- -----------------------------------------------------------------
-- Stephen Long       02/08/2022 Initial release
-- Stephen Long       05/20/2022 Changed disease name split from comma to semi-colon.
-- Stephen Long       10/21/2022 Changed from semi-colon to pipe.
-- ================================================================================================
ALTER FUNCTION [dbo].[FN_LAB_MONITORING_SESSION_DISEASES_GET] (@LanguageID NVARCHAR(50))
RETURNS TABLE
AS
RETURN
(
    SELECT msd.idfMonitoringSession AS MonitoringSessionID,
           STRING_AGG(msd.idfsDiagnosis, ',') AS DiseaseID,
           STRING_AGG(name, '|') AS DiseaseName
    FROM
    (
        SELECT DISTINCT
            msd.idfMonitoringSession,
            msd.idfsDiagnosis,
            diseaseName.name, 
            diseaseName.name AS DisplayName 
        FROM dbo.tlbMonitoringSessionToDiagnosis msd
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = msd.idfsDiagnosis
        WHERE msd.intRowStatus = 0
    ) msd
    GROUP BY msd.idfMonitoringSession
);
GO
PRINT N'Altering Function [dbo].[fn_NextNumbers_SelectList]...';


GO
--##SUMMARY Selects list of numbering objects for NextNumbersList form

--##REMARKS Author: Zurin M.
--##REMARKS Create date: 24.11.2009

--##RETURNS Doesn't use
--Lamon Mitchell 3/3/2022
 --Added new column intPreviousNumberValue to store previous values in uniquenumberingschema
 -- Mani Govindarajan  10/04/2022 Added intNumberNextValue output
 -- Mani Govindaraan   10/06/2022 Added blnUseHACSCodeSite output
 
/*
--Example of a call of procedure:

SELECT * FROM fn_NextNumbers_SelectList('en')
*/








ALTER     function [dbo].[fn_NextNumbers_SelectList](
	@LangID as nvarchar(50)--##PARAM @LangID - language ID
)
returns table 
as
return

select		nn.[idfsNumberName], 
			nn.[strPrefix], 
			nn.[strSpecialChar],
 			intNumberValue =
			case IsNull(nn.blnUseAlphaNumericValue, 0)
				when 0 then cast(IsNull(nn.[intNumberValue], 0) as varchar(100))
				when 1 then dbo.fnAlphaNumeric(IsNull(nn.[intNumberValue], 0), ISNULL(intMinNumberLength,4))
			end,
			intNumberNextValue =
			case IsNull(nn.intPreviousNumberValue, 0)
				when 0 then dbo.fnAlphaNumeric(IsNull(nn.[intNumberValue], 0), ISNULL(intMinNumberLength,4))
				else dbo.fnAlphaNumeric(IsNull(nn.intPreviousNumberValue, 0), ISNULL(intMinNumberLength,4))			
			end,
			nn.intNumberValue as PreviousNumber,
			NextNumber = IsNull(nn.intPreviousNumberValue,nn.[intNumberValue]),-- Table has wrongName
			nn.[intMinNumberLength], 			
			fnReferenceRepair.[name] as strObjectName,
			strSuffix,
			blnUsePrefix,
			blnUseSiteID,
			blnUseYear,
			blnUseAlphaNumericValue,
			intPreviousNumberValue,
			blnUseHACSCodeSite

from		dbo.tstNextNumbers nn

left join	fnReferenceRepair(@LangID, 19000057/*rftNumberingType*/) 
on			fnReferenceRepair.idfsReference = nn.idfsNumberName
GO
PRINT N'Refreshing Function [dbo].[FN_VCTS_VSSESSION_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[FN_VCTS_VSSESSION_GetList]';


GO
PRINT N'Creating Function [dbo].[FN_AS_SAMPLE_DISEASES_GET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: FN_AS_SAMPLE_DISEASES_GET
--
-- Description: Returns the delimited list of disease identifiers and names for a surveillance 
-- session.
--          
-- Author: Stephen Long
--
-- Revision History:
--		Name       Date       Change Detail
-- ------------------ ---------- -----------------------------------------------------------------
-- Stephen Long       10/18/2022 Initial release
-- ================================================================================================
CREATE FUNCTION [dbo].[FN_AS_SAMPLE_DISEASES_GET] (@LanguageID NVARCHAR(50), @MonitoringSessionID BIGINT)
RETURNS TABLE
AS
RETURN
(
    SELECT msm.idfMaterial AS SampleID,
           STRING_AGG(msm.idfsDisease, ',') AS DiseaseID,
           STRING_AGG(name, ', ') AS DiseaseName
    FROM
    (
        SELECT msm.idfMaterial,
            msm.idfsDisease,
            diseaseName.name
        FROM dbo.tlbMonitoringSessionToMaterial msm
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = msm.idfsDisease
        WHERE msm.intRowStatus = 0 AND msm.idfMonitoringSession = @MonitoringSessionID
    ) msm
    GROUP BY msm.idfMaterial
);
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Function [dbo].[FN_LAB_MONITORING_SESSION_TO_SAMPLE_DISEASES_GET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: FN_LAB_MONITORING_SESSION_TO_SAMPLE_DISEASES_GET
--
-- Description: Returns the delimited list of disease identifiers and names for a surveillance 
-- session.
--          
-- Author: Stephen Long
--
-- Revision History:
--		Name       Date       Change Detail
-- ------------------ ---------- -----------------------------------------------------------------
-- Stephen Long       10/14/2022 Initial release
-- Stephen Long       10/18/2022 Corrected name in comments section.
-- ================================================================================================
CREATE FUNCTION [dbo].[FN_LAB_MONITORING_SESSION_TO_SAMPLE_DISEASES_GET] (@LanguageID NVARCHAR(50))
RETURNS TABLE
AS
RETURN
(
    SELECT msm.idfMaterial AS SampleID,
           STRING_AGG(msm.idfsDisease, ',') AS DiseaseID,
           STRING_AGG(name, '|') AS DiseaseName
    FROM
    (
        SELECT msm.idfMaterial,
            msm.idfsDisease,
            diseaseName.name
        FROM dbo.tlbMonitoringSessionToMaterial msm
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = msm.idfsDisease
        WHERE msm.intRowStatus = 0
    ) msm
    GROUP BY msm.idfMaterial
);
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USP_LAB_FAVORITE_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_FAVORITE_ADVANCED_SEARCH_GETList
--
-- Description:	Get laboratory favorites list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/21/2019 Initial release.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     01/15/2020 Added transfer ID to query.
-- Stephen Long     01/22/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/16/2020 Added sample and test list parameters and where clause criteria.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     06/06/2020 Added batch status type ID to the model.
-- Stephen Long     06/14/2020 Added action requested to the model.
-- Stephen Long     06/24/2020 Added test completed indicator to the model.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/30/2020 Removing unneeded joins.
-- Stephen Long     11/29/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Mark Wilson		08/16/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     11/18/2021 Added action requested ID and previous test status type to the 
--                             query.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     02/10/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     03/10/2022 Added note field to the query.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/11/2022 Removed show in lab list criteria.
-- Stephen Long     08/12/2022 Removed where criteria for surveillance type of both; de-activated 
--                             base reference record.  Changed group by on insert of final results.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     09/28/2022 Bug fix on item 5117.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_FAVORITE_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @SampleList VARCHAR(MAX) = NULL,
    @TestList VARCHAR(MAX) = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL,
    @Page INT = 1,
    @PageSize INT = 10,
    @SortColumn VARCHAR(200) = 'EIDSSLaboratorySampleID',
    @SortOrder VARCHAR(4) = 'DESC'
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL, 
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL 
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL, 
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL 
    );
    DECLARE @Results TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @Favorites XML,
            @FirstRecord INT = (@Page - 1) * @PageSize,
            @LastRecord INT = (@Page * @PageSize + 1);

    BEGIN TRY
        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames, 
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames 
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames, 
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames 
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfSendToOffice = @UserOrganizationID
                      OR @UserOrganizationID IS NULL
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  );

        -- =======================================================================================
        -- CONFIGURABLE SITE FILTRATION RULES
        -- 
        -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the default rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        INSERT INTO @FinalResults
        SELECT m.idfMaterial,
               t.idfTesting,
               CASE
                   WHEN EXISTS
                        (
                            SELECT ReadPermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT AccessToPersonalDataPermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT AccessToGenderAndAgeDataPermissionIndicator
                            FROM @Results
                            WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT WritePermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT DeletePermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE (
                  (m.idfMaterial IN (
                                        SELECT CAST([Value] AS BIGINT)
                                        FROM dbo.FN_GBL_SYS_SplitList(@SampleList, NULL, ',')
                                    )
                  )
                  OR (@SampleList IS NULL)
              )
              AND (
                      (t.idfTesting IN (
                                           SELECT CAST([Value] AS BIGINT)
                                           FROM dbo.FN_GBL_SYS_SplitList(@TestList, NULL, ',')
                                       )
                      )
                      OR (@TestList IS NULL)
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.blnAccessioned = @AccessionedIndicatorList
                              AND m.idfsAccessionCondition IS NULL
                          )
                          OR (
                                 @AccessionedIndicatorList IS NULL
                                 AND @SampleStatusTypeList IS NULL
                             )
                      )
                      OR (
                             (
                                 (m.idfsSampleStatus IN (
                                                            SELECT CAST([Value] AS BIGINT)
                                                            FROM dbo.FN_GBL_SYS_SplitList(
                                                                                             @SampleStatusTypeList,
                                                                                             NULL,
                                                                                             ','
                                                                                         )
                                                        )
                                 )
                                 OR (
                                        m.idfsAccessionCondition IN (
                                                                        SELECT CAST([Value] AS BIGINT)
                                                                        FROM dbo.FN_GBL_SYS_SplitList(
                                                                                                         @SampleStatusTypeList,
                                                                                                         NULL,
                                                                                                         ','
                                                                                                     )
                                                                    )
                                        AND (
                                                m.idfsSampleStatus IS NULL
                                                OR m.idfsSampleStatus = 10015007 --In Repository
                                            )
                                    )
                             )
                             OR (
                                    @SampleStatusTypeList IS NULL
                                    AND @AccessionedIndicatorList IS NULL
                                )
                         )
                  )
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IN (
                                           SELECT CAST([Value] AS BIGINT)
                                           FROM dbo.FN_GBL_SYS_SplitList(vsDiseases.DiseaseIdentifiers, NULL, ',')
                                       )
                      OR m.DiseaseID = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR (@EIDSSReportCampaignOrSessionID IS NULL)
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
        GROUP BY m.idfMaterial,
                 t.idfTesting;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        DECLARE @FavoriteCount AS INT = (
                                            SELECT COUNT(*)
                                            FROM @FinalResults
                                                INNER JOIN
                                                (
                                                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                                                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                                                ) f
                                                    ON ID = f.SampleID
                                        );

        SELECT SampleID,
               SiteID,
               CurrentSiteID,
               TestID,
               TransferID,
               EIDSSReportOrSessionID,
               PatientOrFarmOwnerName,
               SampleTypeID,
               SampleTypeName,
               DiseaseID,
               DiseaseName,
               DisplayDiseaseName, 
               RootSampleID,
               ParentSampleID,
               EIDSSLaboratorySampleID,
               EIDSSLocalOrFieldSampleID,
               CollectionDate,
               CollectedByPersonID,
               CollectedByOrganizationID,
               SentDate,
               SentToOrganizationID,
               TestNameTypeID,
               TestNameTypeName,
               TestStatusTypeID,
               TestStatusTypeName,
               StartedDate,
               TestResultTypeID,
               TestResultTypeName,
               ResultDate,
               TestCategoryTypeID,
               TestCategoryTypeName,
               AccessionIndicator,
               AccessionDate,
               FunctionalAreaID,
               FunctionalAreaName,
               FreezerSubdivisionID,
               StorageBoxPlace,
               EnteredDate,
               OutOfRepositoryDate,
               MarkedForDispositionByPersonID,
               ReadOnlyIndicator,
               AccessionConditionTypeID,
               SampleStatusTypeID,
               AccessionConditionOrSampleStatusTypeName,
               AccessionedInByPersonID,
               SampleStatusDate,
               AccessionComment,
               Comment,
               EIDSSAnimalID,
               BirdStatusTypeID,
               MainTestID,
               SampleKindTypeID,
               BatchStatusTypeID,
               TestAssignedIndicator,
               ActionRequestedID,
               ActionRequested,
               TestCompletedIndicator,
               PreviousSampleStatusTypeID,
               PreviousTestStatusTypeID,
               LabModuleSourceIndicator,
               HumanDiseaseReportID, 
               VeterinaryDiseaseReportID, 
               MonitoringSessionID,
               VectorSessionID, 
               VectorID, 
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
               RowAction,
               RowSelectionIndicator,
               CurrentPage,
               TotalRowCount,
               FavoriteCount
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedCaseID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedHumanName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedHumanName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strFieldBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strFieldBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.datAccession
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.datAccession
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       sampleType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       sampleType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DisplayDiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.DiseaseID IS NOT NULL THEN
                                                               diseaseName.name
                                                           WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                                               msDiseases.DisplayDiseaseNames
                                                           WHEN
                                                           (
                                                               m.DiseaseID IS NULL
                                                               AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                                                           ) THEN
                                                               vsDiseases.DisplayDiseaseNames
                                                           ELSE
                                                               ''
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DisplayDiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.DiseaseID IS NOT NULL THEN
                                                               diseaseName.name
                                                           WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                                               msDiseases.DisplayDiseaseNames
                                                           WHEN
                                                           (
                                                               m.DiseaseID IS NULL
                                                               AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                                                           ) THEN
                                                               vsDiseases.DisplayDiseaseNames
                                                           ELSE
                                                               ''
                                                       END
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testNameType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testNameType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testStatusType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testStatusType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStartedDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       t.datStartedDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStartedDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       t.datStartedDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testResultType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testResultType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       t.datConcludedDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       t.datConcludedDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestCategoryTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testCategoryType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestCategoryTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testCategoryType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'FunctionalAreaName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       functionalArea.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'FunctionalAreaName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       functionalArea.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSAnimalID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       a.strAnimalCode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSAnimalID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       a.strAnimalCode
                                               END DESC
                                     ) AS RowNum,
                   m.idfMaterial AS SampleID,
                   m.idfsSite AS SiteID,
                   m.idfsCurrentSite AS CurrentSiteID,
                   t.idfTesting AS TestID,
                   tom.idfTransferOut AS TransferID,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   m.strCalculatedHumanName AS PatientOrFarmOwnerName,
                   m.idfsSampleType AS SampleTypeID,
                   sampleType.name AS SampleTypeName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           CAST(m.DiseaseID AS NVARCHAR(MAX))
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseIdentifiers
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DiseaseIdentifiers
                       ELSE
                           ''
                   END AS DiseaseID,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseNames
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DiseaseNames
                       ELSE
                           ''
                   END AS DiseaseName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN 
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DisplayDiseaseNames
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DisplayDiseaseNames
                       ELSE
                           ''
                   END AS DisplayDiseaseName,
                   m.idfRootMaterial AS RootSampleID,
                   m.idfParentMaterial AS ParentSampleID,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   m.datFieldCollectionDate AS CollectionDate,
                   m.idfFieldCollectedByPerson AS CollectedByPersonID,
                   m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
                   m.datFieldSentDate AS SentDate,
                   m.idfSendToOffice AS SentToOrganizationID,
                   t.idfsTestName AS TestNameTypeID,
                   testNameType.name AS TestNameTypeName,
                   t.idfsTestStatus AS TestStatusTypeID,
                   testStatusType.name AS TestStatusTypeName,
                   t.datStartedDate AS StartedDate,
                   t.idfsTestResult AS TestResultTypeID,
                   testResultType.name AS TestResultTypeName,
                   t.datConcludedDate AS ResultDate,
                   t.idfsTestCategory AS TestCategoryTypeID,
                   testCategoryType.name AS TestCategoryTypeName,
                   m.blnAccessioned AS AccessionIndicator,
                   m.datAccession AS AccessionDate,
                   m.idfInDepartment AS FunctionalAreaID,
                   functionalArea.name AS FunctionalAreaName,
                   m.idfSubdivision AS FreezerSubdivisionID,
                   m.StorageBoxPlace,
                   m.datEnteringDate AS EnteredDate,
                   m.datOutOfRepositoryDate AS OutOfRepositoryDate,
                   m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
                   m.blnReadOnly AS ReadOnlyIndicator,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   (CASE
                        WHEN m.blnAccessioned = 0
                             AND m.idfsAccessionCondition IS NULL THEN
                            'Un-accessioned'
                        WHEN m.idfsSampleStatus IS NULL THEN
                            accessionConditionType.name
                        WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                            accessionConditionType.name
                        ELSE
                            sampleStatusType.name
                    END
                   ) AS AccessionConditionOrSampleStatusTypeName,
                   m.idfAccesionByPerson AS AccessionedInByPersonID,
                   m.datSampleStatusDate AS SampleStatusDate,
                   m.strCondition AS AccessionComment,
                   m.strNote AS Comment,
                   a.strAnimalCode AS EIDSSAnimalID,
                   m.idfsBirdStatus AS BirdStatusTypeID,
                   m.idfMainTest AS MainTestID,
                   m.idfsSampleKind AS SampleKindTypeID,
                   b.idfsBatchStatus AS BatchStatusTypeID,
                   ISNULL(   IIF(
                                (
                                    SELECT COUNT(t3.idfTesting)
                                    FROM dbo.tlbTesting t3
                                    WHERE t3.idfsTestStatus IN (   10001003,
                                                                            --In Progress
                                                                   10001004 --Preliminary
                                                               )
                                          AND t3.idfMaterial = m.idfMaterial
                                          AND t3.intRowStatus = 0
                                          AND t3.blnNonLaboratoryTest = 0
                                ) > 0,
                                1,
                                0),
                             0
                         ) AS TestAssignedIndicator,
                   CASE
                       WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
                   THEN
                           m.idfsSampleStatus
                       WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
                   THEN
                           m.idfsSampleStatus
                       WHEN t.idfsTestStatus = 10001004 --Preliminary
                   THEN
                           t.idfsTestStatus
                       WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
                   THEN
                           t.idfsTestStatus
                   END AS ActionRequestedID,
                   CASE
                       WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
                   THEN
                           'Sample Deletion'
                       WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
                   THEN
                           'Sample Destruction'
                       WHEN t.idfsTestStatus = 10001004 --Preliminary
                   THEN
                           'Validation'
                       WHEN t.idfsTestStatus = 19000502 --Marked for Deletion
                   THEN
                           'Test Deletion'
                   END AS ActionRequested,
                   ISNULL(   IIF(
                                (
                                    SELECT COUNT(t2.idfTesting)
                                    FROM dbo.tlbTesting t2
                                    WHERE t2.idfsTestStatus IN (   10001001,
                                                                            --Final
                                                                   10001006 --Amended
                                                               )
                                          AND t2.idfMaterial = m.idfMaterial
                                          AND t2.intRowStatus = 0
                                          AND t2.blnNonLaboratoryTest = 0
                                ) > 0,
                                1,
                                0),
                             0
                         ) AS TestCompletedIndicator,
                   m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
                   t.PreviousTestStatusID AS PreviousTestStatusTypeID,
                   m.LabModuleSourceIndicator,
                   m.idfHumanCase AS HumanDiseaseReportID, 
                   m.idfVetCase AS VeterinaryDiseaseReportID, 
                   m.idfMonitoringSession AS MonitoringSessionID, 
                   m.idfVectorSurveillanceSession AS VectorSessionID, 
                   m.idfVector AS VectorID, 
                   res.ReadPermissionIndicator,
                   res.AccessToPersonalDataPermissionIndicator,
                   res.AccessToGenderAndAgeDataPermissionIndicator,
                   res.WritePermissionIndicator,
                   res.DeletePermissionIndicator,
                   0 AS RowAction,
                   0 AS RowSelectionIndicator,
                   @Page AS CurrentPage,
                   COUNT(*) OVER () AS TotalRowCount,
                   @FavoriteCount AS FavoriteCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.SampleID
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfTesting = res.TestID
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfMaterial = m.idfMaterial
                       AND tom.intRowStatus = 0
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                    ON diseaseName.idfsReference = m.DiseaseID
                LEFT JOIN @MonitoringSessionDiseases msDiseases
                    ON msDiseases.ID = m.idfMonitoringSession
                LEFT JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
                LEFT JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                    ON functionalArea.idfsReference = d.idfsDepartmentName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
        ) AS x
        WHERE RowNum > @FirstRecord
              AND RowNum < @LastRecord
        ORDER BY RowNum;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_SAMPLE_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_SAMPLE_ADVANCED_SEARCH_GETList
--
-- Description:	Get sample advanced search list for the laboratory module use case LUC13.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     01/14/2019 Initial relase.
-- Stephen Long     01/30/2019 Added sample disease reference join, and removed the vector 
--                             surveillance session joins as they are not needed.
-- Stephen Long     02/11/2019 Changed sample status type ID from bigint to nvarchar(max).  Can 
--                             have multiple sample status types.
-- Stephen Long     02/21/2019 Renamed parameters to be consistent with other objects.
-- Stephen Long     03/28/2019 Removed test status 'Not Started' as criteria to pull back in the 
--                             test assigned indicator.
-- Stephen Long     07/01/2019 Corrected reference type on monitoring session category.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     08/29/2019 Added accession condition type field as one of the where clauses.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     11/04/2019 Corrected tlbSpecies join; joined to tlbMaterial instead of tlbHerd.
-- Stephen Long     01/16/2020 Corrected where clause on sample status type for defect 5699.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/08/2020 Added sample list parameter and where clause criteria.
-- Stephen Long     04/16/2020 Removed un-needed joins for farm, herd and species type.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     07/06/2020 Added lab module source indicator to the model.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/28/2020 Removed site left joins as not needed.
-- Stephen Long     10/30/2020 Remove test assigned indicator; use test assigned count instead.
--                             Added EIDSS freezer ID.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Stephen Long     02/10/2021 Remove unneeded joins and add check for blnShowInLabList.
-- Stephen Long     06/28/2021 Applied new pagination parameters.
-- Mark Wilson		08/11/2021 updated to join tlbMonitoringSessionToDiagnosis
-- Stephen Long     09/18/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/11/2021 Split out query to get initial results using required date range.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     02/08/2022 Removed unneeded joins.
-- Stephen Long     03/10/2022 Changed note to comment and transfer count to transferred count.
-- Stephen Long     03/24/2022 Removed primary key from results and final results table variables.
-- Stephen Long     03/30/2022 Remove show in lab list from where criteria.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/12/2022 Removed where criteria for surveillance type of both; de-activated 
--                             base reference record.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     09/28/2022 Bug fix on item 5117.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_SAMPLE_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @SampleList VARCHAR(MAX) = NULL,
    @TestUnassignedIndicator BIT = NULL,
    @TestCompletedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL,
    @Page INT = 1,
    @PageSize INT = 10,
    @SortColumn VARCHAR(200) = 'EIDSSLaboratorySampleID',
    @SortOrder VARCHAR(4) = 'ASC'
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        AccessionedIndicator BIT NOT NULL,
        AccessionConditionTypeID BIGINT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        AccessionedIndicator BIT NOT NULL,
        AccessionConditionTypeID BIGINT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @RecordCount AS INT = 0,
            @UnaccessionedCount AS INT = 0;
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL, 
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL 
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL, 
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL 
    );
    DECLARE @SampleListTable TABLE (ID BIGINT NOT NULL);
    DECLARE @Favorites XML,
            @FirstRecord INT = (@Page - 1) * @PageSize,
            @LastRecord INT = (@Page * @PageSize + 1),
            @LanguageCode BIGINT;

    IF @SampleList IS NOT NULL
        INSERT INTO @SampleListTable
        SELECT CAST([Value] AS BIGINT)
        FROM dbo.FN_GBL_SYS_SplitList(@SampleList, NULL, ',');

    DECLARE @SampleStatusTypeListTable TABLE (ID BIGINT NOT NULL);

    IF @SampleStatusTypeList IS NOT NULL
        INSERT INTO @SampleStatusTypeListTable
        SELECT CAST([Value] AS BIGINT)
        FROM dbo.FN_GBL_SYS_SplitList(@SampleStatusTypeList, NULL, ',');

    BEGIN TRY
        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames, 
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames 
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames, 
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames 
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND (
                      m.idfSendToOffice = @UserOrganizationID
                      OR @UserOrganizationID IS NULL
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                      OR 
                      (
                          m.datAccession IS NULL AND m.blnAccessioned = 0 
                          AND 
                          (
                              (m.datFieldCollectionDate IS NOT NULL AND m.datFieldCollectionDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                              OR (m.datEnteringDate IS NOT NULL AND m.datEnteringDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                          )
                      )
                  );

        -- =======================================================================================
        -- CONFIGURABLE SITE FILTRATION RULES
        -- 
        -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the default rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                      OR 
                      (
                          m.datAccession IS NULL AND m.blnAccessioned = 0 
                          AND 
                          (
                              (m.datFieldCollectionDate IS NOT NULL AND m.datFieldCollectionDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                              OR (m.datEnteringDate IS NOT NULL AND m.datEnteringDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                          )
                      )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                      OR 
                      (
                          m.datAccession IS NULL AND m.blnAccessioned = 0 
                          AND 
                          (
                              (m.datFieldCollectionDate IS NOT NULL AND m.datFieldCollectionDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                              OR (m.datEnteringDate IS NOT NULL AND m.datEnteringDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                          )
                      )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                      OR 
                      (
                          m.datAccession IS NULL AND m.blnAccessioned = 0 
                          AND 
                          (
                              (m.datFieldCollectionDate IS NOT NULL AND m.datFieldCollectionDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                              OR (m.datEnteringDate IS NOT NULL AND m.datEnteringDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                          )
                      )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                      OR 
                      (
                          m.datAccession IS NULL AND m.blnAccessioned = 0 
                          AND 
                          (
                              (m.datFieldCollectionDate IS NOT NULL AND m.datFieldCollectionDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                              OR (m.datEnteringDate IS NOT NULL AND m.datEnteringDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                          )
                      )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                      OR 
                      (
                          m.datAccession IS NULL AND m.blnAccessioned = 0 
                          AND 
                          (
                              (m.datFieldCollectionDate IS NOT NULL AND m.datFieldCollectionDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                              OR (m.datEnteringDate IS NOT NULL AND m.datEnteringDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                          )
                      )
                  )
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                      OR 
                      (
                          m.datAccession IS NULL AND m.blnAccessioned = 0 
                          AND 
                          (
                              (m.datFieldCollectionDate IS NOT NULL AND m.datFieldCollectionDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                              OR (m.datEnteringDate IS NOT NULL AND m.datEnteringDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                          )
                      )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                      OR 
                      (
                          m.datAccession IS NULL AND m.blnAccessioned = 0 
                          AND 
                          (
                              (m.datFieldCollectionDate IS NOT NULL AND m.datFieldCollectionDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                              OR (m.datEnteringDate IS NOT NULL AND m.datEnteringDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                          )
                      )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                      OR 
                      (
                          m.datAccession IS NULL AND m.blnAccessioned = 0 
                          AND 
                          (
                              (m.datFieldCollectionDate IS NOT NULL AND m.datFieldCollectionDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                              OR (m.datEnteringDate IS NOT NULL AND m.datEnteringDate BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo))))
                          )
                      )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        INSERT INTO @FinalResults
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator = 1
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN (10502002, 10502009) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Active
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.blnAccessioned = @AccessionedIndicatorList
                              AND m.idfsAccessionCondition IS NULL
                          )
                          OR (
                                 @AccessionedIndicatorList IS NULL
                                 AND @SampleStatusTypeList IS NULL
                             )
                      )
                      OR (
                             (
                                 (m.idfsSampleStatus IN (
                                                            SELECT ID FROM @SampleStatusTypeListTable
                                                        )
                                 )
                                 OR (
                                        m.idfsAccessionCondition IN (
                                                                        SELECT ID FROM @SampleStatusTypeListTable
                                                                    )
                                        AND (
                                                m.idfsSampleStatus IS NULL
                                                OR m.idfsSampleStatus = 10015007 --In Repository
                                            )
                                    )
                             )
                             OR (
                                    @SampleStatusTypeList IS NULL
                                    AND @AccessionedIndicatorList IS NULL
                                )
                         )
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR m.DiseaseID = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR @EIDSSReportCampaignOrSessionID IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
              AND (
                      (
                          m.TestUnassignedIndicator = 1
                          AND @TestUnassignedIndicator = 1
                      )
                      OR @TestUnassignedIndicator IS NULL
                  )
              AND (
                      (
                          m.TestCompletedIndicator = 1
                          AND @TestCompletedIndicator = 1
                      )
                      OR @TestCompletedIndicator IS NULL
                  )
        GROUP BY m.idfMaterial,
                 m.blnAccessioned,
                 m.idfsAccessionCondition,
                 ReadPermissionIndicator,
                 AccessToPersonalDataPermissionIndicator,
                 AccessToGenderAndAgeDataPermissionIndicator,
                 WritePermissionIndicator,
                 DeletePermissionIndicator;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SET @UnaccessionedCount =
        (
            SELECT COUNT(ID)
            FROM @FinalResults
            WHERE AccessionedIndicator = 0
                  AND AccessionConditionTypeID IS NULL
        );

        SELECT SampleID,
               EIDSSLaboratorySampleID,
               FavoriteIndicator,
               RootSampleID,
               ParentSampleID,
               SampleTypeID,
               SampleTypeName,
               HumanID,
               PatientOrFarmOwnerName,
               SpeciesID,
               AnimalID,
               EIDSSAnimalID,
               VectorID,
               MonitoringSessionID,
               VectorSessionID,
               HumanDiseaseReportID,
               VeterinaryDiseaseReportID,
               EIDSSReportOrSessionID,
               TestCompletedIndicator,
               DiseaseID,
               DiseaseName,
               DisplayDiseaseName, 
               FunctionalAreaID,
               FunctionalAreaName,
               FreezerSubdivisionID,
               StorageBoxPlace,
               CollectionDate,
               CollectedByPersonID,
               CollectedByOrganizationID,
               SentDate,
               SentToOrganizationID,
               SiteID,
               EIDSSLocalOrFieldSampleID,
               EnteredDate,
               OutOfRepositoryDate,
               MarkedForDispositionByPersonID,
               ReadOnlyIndicator,
               AccessionIndicator,
               AccessionDate,
               AccessionConditionTypeID,
               AccessionConditionOrSampleStatusTypeName,
               AccessionByPersonID,
               SampleStatusTypeID,
               SampleStatusDate,
               AccessionComment,
               DestructionMethodTypeID,
               DestructionDate,
               DestroyedByPersonID,
               TestAssignedCount,
               TransferredCount,
               Comment,
               CurrentSiteID,
               BirdStatusTypeID,
               MainTestID,
               SampleKindTypeID,
               PreviousSampleStatusTypeID,
               LabModuleSourceIndicator,
               RowStatus,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
               RowAction,
               RowSelectionIndicator,
               TotalRowCount,
               UnaccessionedSampleCount
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedCaseID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedHumanName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedHumanName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strFieldBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strFieldBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.datAccession
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.datAccession
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       sampleType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       sampleType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DisplayDiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.DiseaseID IS NOT NULL THEN 
                                                               diseaseName.name
                                                           WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                                               msDiseases.DisplayDiseaseNames
                                                           WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                                                               vsDiseases.DisplayDiseaseNames
                                                           ELSE
                                                               ''
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DisplayDiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.DiseaseID IS NOT NULL THEN 
                                                               diseaseName.name
                                                           WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                                               msDiseases.DisplayDiseaseNames
                                                           WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                                                               vsDiseases.DisplayDiseaseNames
                                                           ELSE
                                                               ''
                                                       END
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'FunctionalAreaName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       functionalArea.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'FunctionalAreaName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       functionalArea.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSAnimalID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       a.strAnimalCode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSAnimalID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       a.strAnimalCode
                                               END DESC
                                     ) AS RowNum,
                   m.idfMaterial AS SampleID,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   CASE
                       WHEN f.SampleID IS NULL THEN
                           0
                       ELSE
                           1
                   END AS FavoriteIndicator,
                   m.idfRootMaterial AS RootSampleID,
                   m.idfParentMaterial AS ParentSampleID,
                   m.idfsSampleType AS SampleTypeID,
                   sampleType.name AS SampleTypeName,
                   m.idfHuman AS HumanID,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                           '********'
                       ELSE
                           m.strCalculatedHumanName
                   END AS PatientOrFarmOwnerName,
                   m.idfSpecies AS SpeciesID,
                   m.idfAnimal AS AnimalID,
                   a.strAnimalCode AS EIDSSAnimalID,
                   m.idfVector AS VectorID,
                   m.idfMonitoringSession AS MonitoringSessionID,
                   m.idfVectorSurveillanceSession AS VectorSessionID,
                   m.idfHumanCase AS HumanDiseaseReportID,
                   m.idfVetCase AS VeterinaryDiseaseReportID,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   m.TestCompletedIndicator,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           CAST(m.DiseaseID AS NVARCHAR(MAX))
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseIdentifiers
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DiseaseIdentifiers
                       ELSE
                           '' 
                   END AS DiseaseID,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN 
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseNames
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DiseaseNames
                       ELSE
                           ''
                   END AS DiseaseName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN 
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DisplayDiseaseNames
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DisplayDiseaseNames
                       ELSE
                           ''
                   END AS DisplayDiseaseName,
                   m.idfInDepartment AS FunctionalAreaID,
                   functionalArea.name AS FunctionalAreaName,
                   m.idfSubdivision AS FreezerSubdivisionID,
                   m.StorageBoxPlace,
                   m.datFieldCollectionDate AS CollectionDate,
                   m.idfFieldCollectedByPerson AS CollectedByPersonID,
                   m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
                   m.datFieldSentDate AS SentDate,
                   m.idfSendToOffice AS SentToOrganizationID,
                   m.idfsSite AS SiteID,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   m.datEnteringDate AS EnteredDate,
                   m.datOutOfRepositoryDate AS OutOfRepositoryDate,
                   m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
                   m.blnReadOnly AS ReadOnlyIndicator,
                   m.blnAccessioned AS AccessionIndicator,
                   accessionConditionType.name AS AccessionConditionTypeName,
                   m.datAccession AS AccessionDate,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   (CASE
                        WHEN m.blnAccessioned = 0
                             AND m.idfsAccessionCondition IS NULL THEN
                            'Un-accessioned'
                        WHEN m.idfsSampleStatus IS NULL THEN
                            accessionConditionType.name
                        WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                            accessionConditionType.name
                        ELSE
                            sampleStatusType.name
                    END
                   ) AS AccessionConditionOrSampleStatusTypeName,
                   sampleStatusType.name AS SampleStatusTypeName,
                   m.idfAccesionByPerson AS AccessionByPersonID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   m.datSampleStatusDate AS SampleStatusDate,
                   m.strCondition AS AccessionComment,
                   m.idfsDestructionMethod AS DestructionMethodTypeID,
                   m.datDestructionDate AS DestructionDate,
                   m.idfDestroyedByPerson AS DestroyedByPersonID,
                   CASE
                       WHEN m.TestUnassignedIndicator = 1 THEN
                           0
                       ELSE
                           1
                   END AS TestAssignedCount,
                   m.TransferIndicator AS TransferredCount,
                   m.strNote AS Comment,
                   m.idfsCurrentSite AS CurrentSiteID,
                   m.idfsBirdStatus AS BirdStatusTypeID,
                   m.idfMainTest AS MainTestID,
                   m.idfsSampleKind AS SampleKindTypeID,
                   m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
                   m.LabModuleSourceIndicator,
                   m.intRowStatus AS RowStatus,
                   res.ReadPermissionIndicator,
                   res.AccessToPersonalDataPermissionIndicator,
                   res.AccessToGenderAndAgeDataPermissionIndicator,
                   res.WritePermissionIndicator,
                   res.DeletePermissionIndicator,
                   0 AS RowAction,
                   0 AS RowSelectionIndicator,
                   @Page AS CurrentPage,
                   COUNT(*) OVER () AS TotalRowCount,
                   @UnaccessionedCount AS UnaccessionedSampleCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.ID
                INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN
                (
                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                ) f
                    ON m.idfMaterial = f.SampleID
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                    ON diseaseName.idfsReference = m.DiseaseID
                LEFT JOIN @MonitoringSessionDiseases msDiseases
                    ON msDiseases.ID = m.idfMonitoringSession
                LEFT JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                    ON functionalArea.idfsReference = d.idfsDepartmentName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            GROUP BY m.idfMaterial,
                     m.strBarcode,
                     f.SampleID,
                     m.idfRootMaterial,
                     m.idfParentMaterial,
                     m.idfsSampleType,
                     sampleType.name,
                     m.idfHuman,
                     m.strCalculatedHumanName,
                     m.idfSpecies,
                     m.idfAnimal,
                     a.strAnimalCode,
                     m.idfVector,
                     m.idfMonitoringSession,
                     m.idfVectorSurveillanceSession,
                     m.idfHumanCase,
                     m.idfVetCase,
                     m.strCalculatedCaseID,
                     m.TestCompletedIndicator,
                     msDiseases.DiseaseIdentifiers,
                     vsDiseases.DiseaseIdentifiers,
                     m.DiseaseID,
                     diseaseName.name, 
                     msDiseases.DiseaseNames,
                     msDiseases.DisplayDiseaseNames, 
                     vsDiseases.DiseaseNames, 
                     vsDiseases.DisplayDiseaseNames, 
                     m.idfInDepartment,
                     functionalArea.name,
                     m.idfSubdivision,
                     m.StorageBoxPlace,
                     m.datFieldCollectionDate,
                     m.idfFieldCollectedByPerson,
                     m.idfFieldCollectedByOffice,
                     m.datFieldSentDate,
                     m.idfSendToOffice,
                     m.idfsSite,
                     m.strFieldBarcode,
                     m.datEnteringDate,
                     m.datOutOfRepositoryDate,
                     m.idfMarkedForDispositionByPerson,
                     m.blnReadOnly,
                     m.blnAccessioned,
                     accessionConditionType.name,
                     m.datAccession,
                     m.idfsAccessionCondition,
                     accessionConditionType.name,
                     sampleStatusType.name,
                     sampleStatusType.name,
                     m.idfAccesionByPerson,
                     m.idfsSampleStatus,
                     m.datSampleStatusDate,
                     m.strCondition,
                     m.idfsDestructionMethod,
                     m.datDestructionDate,
                     m.idfDestroyedByPerson,
                     m.TestUnassignedIndicator,
                     m.TransferIndicator,
                     m.strNote,
                     m.idfsCurrentSite,
                     m.idfsBirdStatus,
                     m.idfMainTest,
                     m.idfsSampleKind,
                     m.PreviousSampleStatusID,
                     m.LabModuleSourceIndicator,
                     m.intRowStatus,
                     res.ReadPermissionIndicator,
                     res.AccessToPersonalDataPermissionIndicator,
                     res.AccessToGenderAndAgeDataPermissionIndicator,
                     res.WritePermissionIndicator,
                     res.DeletePermissionIndicator
        ) AS x
        WHERE RowNum > @FirstRecord
              AND RowNum < @LastRecord
        ORDER BY RowNum
        OPTION (RECOMPILE);
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TRANSFER_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TRANSFER_ADVANCED_SEARCH_GETList
--
-- Description:	Get transferred advanced search list for the laboratory module use case LUC13.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/18/2019 Initial relase.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     10/21/2019 Added accession indicator and test status type ID to the list of 
--                             fields.
-- Stephen Long     01/22/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/07/2020 Added test name type ID to the model.
-- Stephen Long     04/15/2020 Changed select from table to tlbTransferOUT instead of tlbMaterial.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     05/06/2020 Added test started date and test category type name to the model.
-- Stephen Long     06/24/2020 Added external test check to the test left join.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/30/2020 Remove unneeded joins.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Mark Wilson		08/16/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     02/10/2022 Replaced joins for monitoring session and vector session
--                             disease references to improve performance.
-- Stephen Long     03/24/2022 Removed primary key from final results table variable.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/11/2022 Changed monitoring session disease join from inner to left.
-- Stephen Long     08/24/2022 Added test name type name parameter and where criteria against test 
--                             requested.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     10/14/2022 Changed monitoring session disease function to monitoring session
--                             to sample disease function.
-- Stephen Long     10/18/2022 Added test disease ID to the query.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TRANSFER_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @TestNameTypeName NVARCHAR(200) = NULL, 
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @TransferList VARCHAR(MAX) = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL,
    @Page INT = 1,
    @PageSize INT = 10,
    @SortColumn VARCHAR(200) = 'EIDSSTransferID',
    @SortOrder VARCHAR(4) = 'DESC'
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL, 
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL, 
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @Favorites XML,
            @FirstRecord INT = (@Page - 1) * @PageSize,
            @LastRecord INT = (@Page * @PageSize + 1);

    BEGIN TRY
        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT SampleID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_TO_SAMPLE_DISEASES_GET(@LanguageID)
        GROUP BY SampleID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, ';') AS DiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (tr.idfSendFromOffice = @UserOrganizationID OR tr.idfSendToOffice = @UserOrganizationID)
                      OR @UserOrganizationID IS NULL
                  )
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  );

        -- =======================================================================================
        -- CONFIGURABLE SITE FILTRATION RULES
        -- 
        -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the default rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND sgs.idfsSite = tr.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = tr.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = tr.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = tr.idfsSite;

        INSERT INTO @FinalResults
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               res.ReadPermissionIndicator,
               res.AccessToPersonalDataPermissionIndicator,
               res.AccessToGenderAndAgeDataPermissionIndicator,
               res.WritePermissionIndicator,
               res.DeletePermissionIndicator
        FROM @Results res
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = res.ID
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnExternalTest = 1
            LEFT JOIN dbo.tlbHumanCase hc
                ON hc.idfHumanCase = m.idfHumanCase
                   AND hc.intRowStatus = 0
            LEFT JOIN dbo.tlbVetCase vc
                ON vc.idfVetCase = m.idfVetCase
                   AND vc.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator = 1
              AND (
                      (tr.idfTransferOut IN (
                                                SELECT CAST([Value] AS BIGINT)
                                                FROM dbo.FN_GBL_SYS_SplitList(@TransferList, NULL, ',')
                                            )
                      )
                      OR (@TransferList IS NULL)
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN (10502002, 10502009) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.blnAccessioned = @AccessionedIndicatorList
                              AND m.idfsAccessionCondition IS NULL
                          )
                          OR (
                                 @AccessionedIndicatorList IS NULL
                                 AND @SampleStatusTypeList IS NULL
                             )
                      )
                      OR (
                             (
                                 (m.idfsSampleStatus IN (
                                                            SELECT CAST([Value] AS BIGINT)
                                                            FROM dbo.FN_GBL_SYS_SplitList(
                                                                                             @SampleStatusTypeList,
                                                                                             NULL,
                                                                                             ','
                                                                                         )
                                                        )
                                 )
                                 OR (
                                        m.idfsAccessionCondition IN (
                                                                        SELECT CAST([Value] AS BIGINT)
                                                                        FROM dbo.FN_GBL_SYS_SplitList(
                                                                                                         @SampleStatusTypeList,
                                                                                                         NULL,
                                                                                                         ','
                                                                                                     )
                                                                    )
                                        AND (
                                                m.idfsSampleStatus IS NULL
                                                OR m.idfsSampleStatus = 10015007 --In Repository
                                            )
                                    )
                             )
                             OR (
                                    @SampleStatusTypeList IS NULL
                                    AND @AccessionedIndicatorList IS NULL
                                )
                         )
                  )
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND (
                      tr.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                      OR tr.TestRequested LIKE '%' + @TestNameTypeName + '%' 
                      OR @TestNameTypeName IS NULL 
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IN (
                                SELECT CAST([Value] AS BIGINT)
                                FROM dbo.FN_GBL_SYS_SplitList(vsDiseases.DiseaseIdentifiers, NULL, ',')
                            )
                      OR m.DiseaseID = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR (@EIDSSReportCampaignOrSessionID IS NULL)
                  )
              AND (
                      (m.strCalculatedHumanName LIKE '%' + @PatientName + '%')
                      OR (@PatientName IS NULL)
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tr.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
        GROUP BY tr.idfTransferOut,
               m.idfMaterial,
               res.ReadPermissionIndicator,
               res.AccessToPersonalDataPermissionIndicator,
               res.AccessToGenderAndAgeDataPermissionIndicator,
               res.WritePermissionIndicator,
               res.DeletePermissionIndicator;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        DECLARE @InProgressCount INT = (SELECT COUNT(res.ID)
        FROM @FinalResults res
        INNER JOIN dbo.tlbTransferOUT tr ON tr.idfTransferOut = res.ID
        WHERE tr.idfsTransferStatus IN (   10001003, --In Progress
                                                10001006 --Amended
                                            ));

        SELECT TransferID,
               EIDSSTransferID,
               TransferredOutSampleID,
               TransferredInSampleID,
               FavoriteIndicator,
               EIDSSReportOrSessionID,
               PatientOrFarmOwnerName,
               EIDSSLaboratorySampleID,
               TransferredToOrganizationID,
               TransferredToOrganizationName,
               TransferredFromOrganizationID,
               TransferDate,
               TestRequested,
               TestID,
               TestNameTypeID,
               TestNameTypeName,
               TestResultTypeID,
               TestResultTypeName,
               TestStatusTypeID,
               TestStatusTypeName,
               TestCategoryTypeID,
               TestDiseaseID, 
               StartedDate,
               ResultDate,
               ContactPersonName,
               EIDSSLocalOrFieldSampleID,
               SampleTypeName,
               DiseaseID,
               DiseaseName,
               AccessionDate,
               FunctionalAreaID,
               FunctionalAreaName,
               AccessionIndicator,
               AccessionConditionTypeID,
               SampleStatusTypeID,
               AccessionConditionOrSampleStatusTypeName,
               AccessionComment,
               PurposeOfTransfer,
               TransferredFromOrganizationSiteID,
               SentToOrganizationID,
               SentByPersonID,
               TransferStatusTypeID,
               RowStatus,
               EIDSSAnimalID,
               TestAssignedIndicator,
               NonEIDSSLaboratoryIndicator,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
               RowAction,
               RowSelectionIndicator,
               CurrentPage,
               InProgressCount, 
               TotalRowCount
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedCaseID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedHumanName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedHumanName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSTransferID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       tr.strBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSTransferID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       tr.strBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TransferredToOrganizationName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       transferredToOrganization.FullName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TransferredToOrganizationName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       transferredToOrganization.FullName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TransferDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       tr.datSendDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TransferDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       tr.datSendDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestRequested'
                                                        AND @SortOrder = 'ASC' THEN
                                                       tr.TestRequested
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestRequested'
                                                        AND @SortOrder = 'DESC' THEN
                                                       tr.TestRequested
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testNameType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testNameType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testResultType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testResultType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       t.datConcludedDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       t.datConcludedDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PointOfContact'
                                                        AND @SortOrder = 'ASC' THEN
                                                       t.strContactPerson
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PointOfContact'
                                                        AND @SortOrder = 'DESC' THEN
                                                       t.strContactPerson
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strFieldBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strFieldBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       sampleType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       sampleType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.DiseaseID IS NOT NULL THEN 
                                                               diseaseName.name
                                                           WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                                               msDiseases.DiseaseNames
                                                           WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                                                               vsDiseases.DiseaseNames
                                                           ELSE
                                                               ''
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.DiseaseID IS NOT NULL THEN 
                                                               diseaseName.name
                                                           WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                                               msDiseases.DiseaseNames
                                                           WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                                                               vsDiseases.DiseaseNames
                                                           ELSE
                                                               ''
                                                       END
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.datAccession
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.datAccession
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END DESC
                                     ) AS RowNum,
                   tr.idfTransferOut AS TransferID,
                   tr.strBarcode AS EIDSSTransferID,
                   m.idfMaterial AS TransferredOutSampleID,
                   (
                       SELECT TOP 1
                           idfMaterial
                       FROM dbo.tlbMaterial
                       WHERE idfRootMaterial = m.idfMaterial
                             AND intRowStatus = 0
                             AND idfsSampleKind = 12675430000000 --Transferred in
                   ) AS TransferredInSampleID,
                   CASE
                       WHEN f.SampleID IS NULL THEN
                           0
                       ELSE
                           1
                   END AS FavoriteIndicator,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                           '********'
                       ELSE
                           m.strCalculatedHumanName
                   END AS PatientOrFarmOwnerName,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   tr.idfSendToOffice AS TransferredToOrganizationID,
                   transferredToOrganization.[FullName] AS TransferredToOrganizationName,
                   tr.idfSendFromOffice AS TransferredFromOrganizationID,
                   tr.datSendDate AS TransferDate,
                   tr.TestRequested,
                   t.idfTesting AS TestID,
                   t.idfsTestName AS TestNameTypeID,
                   testNameType.name AS TestNameTypeName,
                   t.idfsTestResult AS TestResultTypeID,
                   testResultType.name AS TestResultTypeName,
                   t.idfsTestStatus AS TestStatusTypeID,
                   testStatusType.name AS TestStatusTypeName,
                   t.idfsTestCategory AS TestCategoryTypeID,
                   t.idfsDiagnosis AS TestDiseaseID, 
                   t.datStartedDate AS StartedDate,
                   t.datConcludedDate AS ResultDate,
                   t.strContactPerson AS ContactPersonName,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   sampleType.name AS SampleTypeName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           CAST(m.DiseaseID AS NVARCHAR(MAX))
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseIdentifiers
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DiseaseIdentifiers
                       ELSE
                           '' 
                   END AS DiseaseID,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN 
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseNames
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DiseaseNames
                       ELSE
                           ''
                   END AS DiseaseName,
                   m.datAccession AS AccessionDate,
                   m.idfInDepartment AS FunctionalAreaID,
                   functionalArea.name AS FunctionalAreaName,
                   m.blnAccessioned AS AccessionIndicator,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   (CASE
                        WHEN m.blnAccessioned = 0
                             AND m.idfsAccessionCondition IS NULL THEN
                            'Un-accessioned'
                        WHEN m.idfsSampleStatus IS NULL THEN
                            accessionConditionType.name
                        WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                            accessionConditionType.name
                        ELSE
                            sampleStatusType.name
                    END
                   ) AS AccessionConditionOrSampleStatusTypeName,
                   m.strCondition AS AccessionComment,
                   tr.strNote AS PurposeOfTransfer,
                   tr.idfsSite AS TransferredFromOrganizationSiteID,
                   m.idfSendToOffice AS SentToOrganizationID,
                   tr.idfSendByPerson AS SentByPersonID,
                   tr.idfsTransferStatus AS TransferStatusTypeID,
                   tr.intRowStatus AS RowStatus,
                   a.strAnimalCode AS EIDSSAnimalID,
                   IIF(
                      (
                          SELECT COUNT(t2.idfTesting)
                          FROM dbo.tlbTesting t2
                          WHERE t2.idfsTestStatus IN (   10001003,
                                                                  --In Progress
                                                         10001004,
                                                                  --Preliminary
                                                         10001005 --Not Started
                                                     )
                                AND t2.idfMaterial = m.idfMaterial
                      ) > 0,
                      1,
                      0) AS TestAssignedIndicator,
                   (CASE
                        WHEN transferredToOrganization.idfsSite IS NULL THEN
                            1
                        ELSE
                            0
                    END
                   ) AS NonEIDSSLaboratoryIndicator,
                   res.ReadPermissionIndicator,
                   res.AccessToPersonalDataPermissionIndicator,
                   res.AccessToGenderAndAgeDataPermissionIndicator,
                   res.WritePermissionIndicator,
                   res.DeletePermissionIndicator,
                   0 AS RowAction,
                   0 AS RowSelectionIndicator,
                   @Page AS CurrentPage,
                   @InProgressCount AS InProgressCount, 
                   COUNT(*) OVER () AS TotalRowCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbTransferOUT tr
                    ON tr.idfTransferOut = res.ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.SampleID
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnExternalTest = 1
                LEFT JOIN
                (
                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                ) f
                    ON m.idfMaterial = f.SampleID
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN @MonitoringSessionDiseases msDiseases
                    ON msDiseases.ID = m.idfMaterial
                       AND m.idfMonitoringSession IS NOT NULL
                LEFT JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                    ON diseaseName.idfsReference = m.DiseaseID
                LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) transferredToOrganization
                    ON transferredToOrganization.idfOffice = tr.idfSendToOffice
                       AND transferredToOrganization.intRowStatus = 0
                LEFT JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                    ON functionalArea.idfsReference = d.idfsDepartmentName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
        ) AS x
        WHERE RowNum > @FirstRecord
              AND RowNum < @LastRecord
        ORDER BY RowNum;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_FAVORITE_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_FAVORITE_GETList
--
-- Description:	Get laboratory favorites list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     10/20/2018 Initial release.
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     01/25/2019 Added intRowStatus check to where clause.
-- Stephen Long     01/30/2019 Added sample disease reference join and removed the vector 
--                             surveillance session joins as they are no longer needed.
-- Stephen Long     02/20/2019 Added disease ID to the select list.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     09/14/2019 Added pagination set 0 to bring back "all" records.
-- Stephen Long     10/20/2019 Added test assigned indicator and test name type ID to the list of 
--                             fields.
-- Stephen Long     01/15/2020 Added transfer ID to query.
-- Stephen Long     01/22/2020 Cleaned up stored procedure.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     06/06/2020 Added batch status type ID to the model.
-- Stephen Long     06/14/2020 Added action requested to the model.
-- Stephen Long     06/24/2020 Added test completed indicator to the model.
-- Stephen Long     11/29/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Mark Wilson		08/16/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     11/10/2021 Added sample ID parameter and where criteria.
-- Stephen Long     11/16/2021 Changed to use select row over instead of with cte.
-- Stephen Long     11/18/2021 Added action requested ID and previous test status type to the 
--                  query.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     02/10/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     03/10/2022 Added note field to the query.
-- Stephen Long     04/15/2022 Added join for favorites to the filtration queries.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_FAVORITE_GETList]
		@LanguageID = N'en-US',
		@UserID = 161287150000872, --rykermase
		@UserEmployeeID = 420664190000872,
		@UserSiteID = 864,
		@UserOrganizationID = 758210000000,
		@UserSiteGroupID = NULL,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_FAVORITE_GETList]
(
    @LanguageID NVARCHAR(50),
    @SampleID BIGINT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL,
    @Page INT = 1,
    @PageSize INT = 10,
    @SortColumn VARCHAR(200) = 'EIDSSLaboratorySampleID',
    @SortOrder VARCHAR(4) = 'DESC'
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL, 
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL 
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL, 
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL 
    );
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @Favorites XML,
            @FirstRecord INT = (@Page - 1) * @PageSize,
            @LastRecord INT = (@Page * @PageSize + 1);

    BEGIN TRY
        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames, 
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames 
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames, 
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames 
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @Results
        SELECT m.idfMaterial,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  );

        -- =======================================================================================
        -- CONFIGURABLE SITE FILTRATION RULES
        -- 
        -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = @UserSiteGroupID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfSiteGroup = @UserSiteGroupID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        INSERT INTO @FinalResults
        SELECT ID, 
               CASE WHEN EXISTS (SELECT ReadPermissionIndicator FROM @Results WHERE ID = ID) THEN 1 ELSE 0 END, 
               CASE WHEN EXISTS (SELECT AccessToPersonalDataPermissionIndicator FROM @Results WHERE ID = ID) THEN 1 ELSE 0 END, 
               CASE WHEN EXISTS (SELECT AccessToGenderAndAgeDataPermissionIndicator FROM @Results WHERE ID = ID) THEN 1 ELSE 0 END, 
               CASE WHEN EXISTS (SELECT WritePermissionIndicator FROM @Results WHERE ID = ID) THEN 1 ELSE 0 END, 
               CASE WHEN EXISTS (SELECT DeletePermissionIndicator FROM @Results WHERE ID = ID) THEN 1 ELSE 0 END
        FROM @Results
        GROUP BY ID;

        DECLARE @FavoriteCount AS INT = (
                                            SELECT COUNT(*)
                                            FROM @Results
                                                INNER JOIN
                                                (
                                                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                                                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                                                ) f
                                                    ON ID = f.SampleID
                                        );

        SELECT SampleID,
               SiteID,
               CurrentSiteID,
               TestID,
               TransferID,
               EIDSSReportOrSessionID,
               PatientOrFarmOwnerName,
               SampleTypeID,
               SampleTypeName,
               DiseaseID,
               DiseaseName,
               DisplayDiseaseName, 
               RootSampleID,
               ParentSampleID,
               EIDSSLaboratorySampleID,
               EIDSSLocalOrFieldSampleID,
               CollectionDate,
               CollectedByPersonID,
               CollectedByOrganizationID,
               SentDate,
               SentToOrganizationID,
               TestNameTypeID,
               TestNameTypeName,
               TestStatusTypeID,
               TestStatusTypeName,
               StartedDate,
               TestResultTypeID,
               TestResultTypeName,
               ResultDate,
               TestCategoryTypeID,
               TestCategoryTypeName,
               AccessionIndicator,
               AccessionDate,
               FunctionalAreaID,
               FunctionalAreaName,
               FreezerSubdivisionID,
               StorageBoxPlace,
               EnteredDate,
               OutOfRepositoryDate,
               MarkedForDispositionByPersonID,
               ReadOnlyIndicator,
               AccessionConditionTypeID,
               SampleStatusTypeID,
               AccessionConditionOrSampleStatusTypeName,
               AccessionedInByPersonID,
               SampleStatusDate,
               AccessionComment,
               Comment,
               EIDSSAnimalID,
               BirdStatusTypeID,
               MainTestID,
               SampleKindTypeID,
               BatchStatusTypeID,
               TestAssignedIndicator,
               ActionRequestedID,
               ActionRequested,
               TestCompletedIndicator,
               PreviousSampleStatusTypeID,
               PreviousTestStatusTypeID,
               LabModuleSourceIndicator,
               HumanDiseaseReportID, 
               VeterinaryDiseaseReportID, 
               MonitoringSessionID,
               VectorSessionID, 
               VectorID, 
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
               RowAction,
               RowSelectionIndicator,
               CurrentPage,
               TotalRowCount,
               FavoriteCount
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedCaseID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedHumanName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedHumanName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strFieldBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strFieldBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.datAccession
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.datAccession
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       sampleType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       sampleType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DisplayDiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.DiseaseID IS NOT NULL THEN 
                                                               diseaseName.name
                                                           WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                                               msDiseases.DisplayDiseaseNames
                                                           WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                                                               vsDiseases.DisplayDiseaseNames
                                                           ELSE
                                                               ''
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DisplayDiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.DiseaseID IS NOT NULL THEN 
                                                               diseaseName.name
                                                           WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                                               msDiseases.DisplayDiseaseNames
                                                           WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                                                               vsDiseases.DisplayDiseaseNames
                                                           ELSE
                                                               ''
                                                       END
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testNameType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testNameType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testStatusType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testStatusType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStartedDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       t.datStartedDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStartedDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       t.datStartedDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testResultType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testResultType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       t.datConcludedDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       t.datConcludedDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestCategoryTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testCategoryType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestCategoryTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testCategoryType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'FunctionalAreaName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       functionalArea.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'FunctionalAreaName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       functionalArea.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSAnimalID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       a.strAnimalCode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSAnimalID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       a.strAnimalCode
                                               END DESC
                                     ) AS RowNum,
                   m.idfMaterial AS SampleID,
                   m.idfsSite AS SiteID,
                   m.idfsCurrentSite AS CurrentSiteID,
                   t.idfTesting AS TestID,
                   tom.idfTransferOut AS TransferID,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   m.strCalculatedHumanName AS PatientOrFarmOwnerName,
                   m.idfsSampleType AS SampleTypeID,
                   sampleType.name AS SampleTypeName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           CAST(m.DiseaseID AS NVARCHAR(MAX))
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseIdentifiers
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DiseaseIdentifiers
                       ELSE
                           '' 
                   END AS DiseaseID,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN 
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseNames
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DiseaseNames
                       ELSE
                           ''
                   END AS DiseaseName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN 
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DisplayDiseaseNames
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DisplayDiseaseNames
                       ELSE
                           ''
                   END AS DisplayDiseaseName,
                   m.idfRootMaterial AS RootSampleID,
                   m.idfParentMaterial AS ParentSampleID,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   m.datFieldCollectionDate AS CollectionDate,
                   m.idfFieldCollectedByPerson AS CollectedByPersonID,
                   m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
                   m.datFieldSentDate AS SentDate,
                   m.idfSendToOffice AS SentToOrganizationID,
                   t.idfsTestName AS TestNameTypeID,
                   testNameType.name AS TestNameTypeName,
                   t.idfsTestStatus AS TestStatusTypeID,
                   testStatusType.name AS TestStatusTypeName,
                   t.datStartedDate AS StartedDate,
                   t.idfsTestResult AS TestResultTypeID,
                   testResultType.name AS TestResultTypeName,
                   t.datConcludedDate AS ResultDate,
                   t.idfsTestCategory AS TestCategoryTypeID,
                   testCategoryType.name AS TestCategoryTypeName,
                   m.blnAccessioned AS AccessionIndicator,
                   m.datAccession AS AccessionDate,
                   m.idfInDepartment AS FunctionalAreaID,
                   functionalArea.name AS FunctionalAreaName,
                   m.idfSubdivision AS FreezerSubdivisionID,
                   m.StorageBoxPlace,
                   m.datEnteringDate AS EnteredDate,
                   m.datOutOfRepositoryDate AS OutOfRepositoryDate,
                   m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
                   m.blnReadOnly AS ReadOnlyIndicator,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   (CASE
                        WHEN m.blnAccessioned = 0
                             AND m.idfsAccessionCondition IS NULL THEN
                            'Un-accessioned'
                        WHEN m.idfsSampleStatus IS NULL THEN
                            accessionConditionType.name
                        WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                            accessionConditionType.name
                        ELSE
                            sampleStatusType.name
                    END
                   ) AS AccessionConditionOrSampleStatusTypeName,
                   m.idfAccesionByPerson AS AccessionedInByPersonID,
                   m.datSampleStatusDate AS SampleStatusDate,
                   m.strCondition AS AccessionComment,
                   m.strNote AS Comment, 
                   a.strAnimalCode AS EIDSSAnimalID,
                   m.idfsBirdStatus AS BirdStatusTypeID,
                   m.idfMainTest AS MainTestID,
                   m.idfsSampleKind AS SampleKindTypeID,
                   b.idfsBatchStatus AS BatchStatusTypeID,
                   ISNULL(   IIF(
                                (
                                    SELECT COUNT(t3.idfTesting)
                                    FROM dbo.tlbTesting t3
                                    WHERE t3.idfsTestStatus IN (   10001003,
                                                                            --In Progress
                                                                   10001004 --Preliminary
                                                               )
                                          AND t3.idfMaterial = m.idfMaterial
                                          AND t3.intRowStatus = 0
                                          AND t3.blnNonLaboratoryTest = 0
                                ) > 0,
                                1,
                                0),
                             0
                         ) AS TestAssignedIndicator,
                   CASE
                       WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
                   THEN
                           m.idfsSampleStatus
                       WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
                   THEN
                           m.idfsSampleStatus
                       WHEN t.idfsTestStatus = 10001004 --Preliminary
                   THEN
                           t.idfsTestStatus
                       WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
                   THEN
                           t.idfsTestStatus
                   END AS ActionRequestedID,
                   CASE
                       WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
                   THEN
                           'Sample Deletion'
                       WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
                   THEN
                           'Sample Destruction'
                       WHEN t.idfsTestStatus = 10001004 --Preliminary
                   THEN
                           'Validation'
                       WHEN t.idfsTestStatus = 19000502 --Marked for Deletion
                   THEN
                           'Test Deletion'
                   END AS ActionRequested,
                   ISNULL(   IIF(
                                (
                                    SELECT COUNT(t2.idfTesting)
                                    FROM dbo.tlbTesting t2
                                    WHERE t2.idfsTestStatus IN (   10001001,
                                                                            --Final
                                                                   10001006 --Amended
                                                               )
                                          AND t2.idfMaterial = m.idfMaterial
                                          AND t2.intRowStatus = 0
                                          AND t2.blnNonLaboratoryTest = 0
                                ) > 0,
                                1,
                                0),
                             0
                         ) AS TestCompletedIndicator,
                   m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
                   t.PreviousTestStatusID AS PreviousTestStatusTypeID,
                   m.LabModuleSourceIndicator,
                   m.idfHumanCase AS HumanDiseaseReportID, 
                   m.idfVetCase AS VeterinaryDiseaseReportID, 
                   m.idfMonitoringSession AS MonitoringSessionID, 
                   m.idfVectorSurveillanceSession AS VectorSessionID, 
                   m.idfVector AS VectorID, 
                   res.ReadPermissionIndicator,
                   res.AccessToPersonalDataPermissionIndicator,
                   res.AccessToGenderAndAgeDataPermissionIndicator,
                   res.WritePermissionIndicator,
                   res.DeletePermissionIndicator,
                   0 AS RowAction,
                   0 AS RowSelectionIndicator,
                   @Page AS CurrentPage,
                   COUNT(*) OVER () AS TotalRowCount,
                   @FavoriteCount AS FavoriteCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.ID
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfMaterial = m.idfMaterial
                       AND tom.intRowStatus = 0
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                    ON diseaseName.idfsReference = m.DiseaseID
                LEFT JOIN @MonitoringSessionDiseases msDiseases
                    ON msDiseases.ID = m.idfMonitoringSession
                LEFT JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
                LEFT JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                    ON functionalArea.idfsReference = d.idfsDepartmentName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
        ) AS x
        WHERE RowNum > @FirstRecord
              AND RowNum < @LastRecord
        ORDER BY RowNum;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TRANSFER_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TRANSFER_GETList
--
-- Description:	Get laboratory transfer list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     10/18/2018 Initial release.
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     01/25/2019 Added row selection indicator and corrected intRowStatus in where 
--                             clause to use sample table instead of testing table.
-- Stephen Long     01/30/2019 Added sample disease reference join, and removed the vector 
--                             surveillance session joins as they are no longer needed.
-- Stephen Long     02/09/2019 Added sample ID parameter.
-- Stephen Long     02/19/2019 Added test requested, disease ID and functional area to the select 
--                             list.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     08/19/2019 Added comma to sent by person name (last name ', ' first name).
-- Stephen Long     09/14/2019 Added pagination set 0 to bring back "all" records.
-- Stephen Long     10/21/2019 Added accession indicator and test status type ID to the list of 
--                             fields.
-- Stephen Long     01/22/2020 Added site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     03/17/2020 Removed declined transfer status from inclusion in the list.
-- Stephen Long     03/30/2020 Changed criteria on transferred in sample left join.
-- Stephen Long     04/07/2020 Added test name type ID to model, and corrected test assigned 
--                             indicator.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     05/06/2020 Added test started date and test category type name to the model.
-- Stephen Long     06/09/2020 Added intRowStatus check on transferred from organization.
-- Stephen Long     06/24/2020 Added external test check to the test left join.
-- Jason Li			09/24/2020 Remove blnExternalTest --AND t.blnExternalTest = 1 at line 224
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Mark Wilson		08/17/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     11/18/2021 Added test status type name to the query.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     02/03/2022 Corrected monitoring session to diagnosis join.
-- Stephen Long     02/10/2022 Replaced joins for monitoring session and vector session
--                             disease references to improve performance.
-- Stephen Long     03/24/2022 Added final results table variable to account for duplicates that 
--                             may return from filtration rules.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/12/2022 Changed default sort column to EIDSSTransferID.
-- Stephen Long     10/14/2022 Changed monitoring session disease function to monitoring session
--                             to sample disease function.
-- Stephen Long     10/18/2022 Added test disease ID to the query.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_TRANSFER_GETList]
		@LanguageID = N'en-US',
		@UserID = 161287150000872, --rykermase
		@UserEmployeeID = 420664190000872,
		@UserSiteID = 864,
		@UserOrganizationID = 758210000000,
		@UserSiteGroupID = NULL,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TRANSFER_GETList]
(
    @LanguageID NVARCHAR(50),
    @SampleID BIGINT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL,
    @Page INT = 1,
    @PageSize INT = 10,
    @SortColumn VARCHAR(200) = 'EIDSSTransferID',
    @SortOrder VARCHAR(4) = 'DESC'
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @Favorites XML,
            @FirstRecord INT = (@Page - 1) * @PageSize,
            @LastRecord INT = (@Page * @PageSize + 1);

    BEGIN TRY
        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT SampleID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_TO_SAMPLE_DISEASES_GET(@LanguageID)
        GROUP BY SampleID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, ';') AS DiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        IF @SampleID IS NULL
        BEGIN
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
            WHERE (
                      tr.idfSendFromOffice = @UserOrganizationID
                      OR tr.idfSendToOffice = @UserOrganizationID
                  )
                  AND (tr.idfsTransferStatus IN (   10001003,
                                                             --In Progress
                                                    10001006 --Amended
                                                )
                      )
                  AND tr.intRowStatus = 0;

            -- =======================================================================================
            -- CONFIGURABLE SITE FILTRATION RULES
            -- 
            -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the non-configurable rules.
            -- =======================================================================================
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = tr.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = @UserSiteGroupID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE tr.intRowStatus = 0
                  AND @UserSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = tr.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE tr.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = tr.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE tr.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = tr.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE tr.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfSiteGroup = @UserSiteGroupID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE tr.intRowStatus = 0
                  AND @UserSiteGroupID IS NOT NULL
                  AND sgs.idfsSite = tr.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRule ar
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbTransferOUT tr
                    ON tr.intRowStatus = 0
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND tr.idfsSite = ar.GrantingActorSiteID;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRule ar
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbTransferOUT tr
                    ON tr.intRowStatus = 0
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND tr.idfsSite = ar.GrantingActorSiteID;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @Results
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRule ar
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbTransferOUT tr
                    ON tr.intRowStatus = 0
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND tr.idfsSite = ar.GrantingActorSiteID;

            INSERT INTO @FinalResults
            SELECT res.ID,
                   res.SampleID,
                   CASE
                       WHEN EXISTS
        (
            SELECT ReadPermissionIndicator FROM @Results WHERE ID = ID
        )          THEN
                           1
                       ELSE
                           0
                   END,
                   CASE
                       WHEN EXISTS
        (
            SELECT AccessToPersonalDataPermissionIndicator FROM @Results WHERE ID = ID
        )          THEN
                           1
                       ELSE
                           0
                   END,
                   CASE
                       WHEN EXISTS
        (
            SELECT AccessToGenderAndAgeDataPermissionIndicator
            FROM @Results
            WHERE ID = ID
        )          THEN
                           1
                       ELSE
                           0
                   END,
                   CASE
                       WHEN EXISTS
        (
            SELECT WritePermissionIndicator FROM @Results WHERE ID = ID
        )          THEN
                           1
                       ELSE
                           0
                   END,
                   CASE
                       WHEN EXISTS
        (
            SELECT DeletePermissionIndicator FROM @Results WHERE ID = ID
        )          THEN
                           1
                       ELSE
                           0
                   END
            FROM @Results res
                INNER JOIN dbo.tlbTransferOUT tr
                    ON tr.idfTransferOut = res.ID
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
            WHERE (
                      tr.idfSendFromOffice = @UserOrganizationID
                      OR tr.idfSendToOffice = @UserOrganizationID
                  )
                  AND (
                          tom.idfMaterial = @SampleID
                          OR @SampleID IS NULL
                      )
                  AND (tr.idfsTransferStatus IN (   10001003,
                                                             --In Progress
                                                    10001006 --Amended
                                                )
                      )
                  AND tr.intRowStatus = 0
            GROUP BY ID,
                     SampleID;
        END
        ELSE
        BEGIN
            INSERT INTO @FinalResults
            SELECT tr.idfTransferOut,
                   tom.idfMaterial,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfTransferOut = tr.idfTransferOut
                       AND tom.intRowStatus = 0
            WHERE tom.idfMaterial = @SampleID
                  AND tr.intRowStatus = 0;
        END

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        DECLARE @InProgressCount INT = (SELECT COUNT(DISTINCT res.ID)
        FROM @FinalResults res
        INNER JOIN dbo.tlbTransferOUT tr ON tr.idfTransferOut = res.ID
        WHERE tr.idfsTransferStatus IN (   10001003, --In Progress
                                                10001006 --Amended
                                            ));

        SELECT TransferID,
               EIDSSTransferID,
               TransferredOutSampleID,
               TransferredInSampleID,
               FavoriteIndicator,
               EIDSSReportOrSessionID,
               PatientOrFarmOwnerName,
               EIDSSLaboratorySampleID,
               TransferredToOrganizationID,
               TransferredToOrganizationName,
               TransferredFromOrganizationID,
               TransferDate,
               TestRequested,
               TestID,
               TestNameTypeID,
               TestNameTypeName,
               TestResultTypeID,
               TestResultTypeName,
               TestStatusTypeID,
               TestStatusTypeName,
               TestCategoryTypeID,
               TestDiseaseID, 
               StartedDate,
               ResultDate,
               ContactPersonName,
               EIDSSLocalOrFieldSampleID,
               SampleTypeName,
               DiseaseID,
               DiseaseName,
               AccessionDate,
               FunctionalAreaID,
               FunctionalAreaName,
               AccessionIndicator,
               AccessionConditionTypeID,
               SampleStatusTypeID,
               AccessionConditionOrSampleStatusTypeName,
               AccessionComment,
               PurposeOfTransfer,
               TransferredFromOrganizationSiteID,
               TransferredToOrganizationSiteID,
               SentToOrganizationID,
               SentByPersonID,
               TransferStatusTypeID,
               RowStatus,
               EIDSSAnimalID,
               TestAssignedIndicator,
               NonEIDSSLaboratoryIndicator,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
               RowAction,
               RowSelectionIndicator,
               CurrentPage,
               InProgressCount, 
               TotalRowCount
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedCaseID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedHumanName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedHumanName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSTransferID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       tr.strBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSTransferID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       tr.strBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TransferredToOrganizationName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       transferredToOrganization.AbbreviatedName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TransferredToOrganizationName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       transferredToOrganization.AbbreviatedName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TransferDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       tr.datSendDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TransferDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       tr.datSendDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestRequested'
                                                        AND @SortOrder = 'ASC' THEN
                                                       tr.TestRequested
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestRequested'
                                                        AND @SortOrder = 'DESC' THEN
                                                       tr.TestRequested
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testNameType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testNameType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testResultType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testResultType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       t.datConcludedDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       t.datConcludedDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PointOfContact'
                                                        AND @SortOrder = 'ASC' THEN
                                                       t.strContactPerson
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PointOfContact'
                                                        AND @SortOrder = 'DESC' THEN
                                                       t.strContactPerson
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strFieldBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strFieldBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       sampleType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       sampleType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.DiseaseID IS NOT NULL THEN
                                                               diseaseName.name
                                                           WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                                               msDiseases.DiseaseNames
                                                           WHEN
                                                           (
                                                               m.DiseaseID IS NULL
                                                               AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                                                           ) THEN
                                                               vsDiseases.DiseaseNames
                                                           ELSE
                                                               ''
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.DiseaseID IS NOT NULL THEN
                                                               diseaseName.name
                                                           WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                                               msDiseases.DiseaseNames
                                                           WHEN
                                                           (
                                                               m.DiseaseID IS NULL
                                                               AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                                                           ) THEN
                                                               vsDiseases.DiseaseNames
                                                           ELSE
                                                               ''
                                                       END
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.datAccession
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.datAccession
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END DESC
                                     ) AS RowNum,
                   tr.idfTransferOut AS TransferID,
                   tr.strBarcode AS EIDSSTransferID,
                   m.idfMaterial AS TransferredOutSampleID,
                   (
                       SELECT TOP 1
                           idfMaterial
                       FROM dbo.tlbMaterial
                       WHERE idfRootMaterial = m.idfMaterial
                             AND intRowStatus = 0
                             AND idfsSampleKind = 12675430000000 --Transferred in
                   ) AS TransferredInSampleID,
                   CASE
                       WHEN f.SampleID IS NULL THEN
                           0
                       ELSE
                           1
                   END AS FavoriteIndicator,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   m.strCalculatedHumanName AS PatientOrFarmOwnerName,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   tr.idfSendToOffice AS TransferredToOrganizationID,
                   transferredToOrganization.AbbreviatedName AS TransferredToOrganizationName,
                   tr.idfSendFromOffice AS TransferredFromOrganizationID,
                   tr.datSendDate AS TransferDate,
                   tr.TestRequested,
                   t.idfTesting AS TestID,
                   t.idfsTestName AS TestNameTypeID,
                   testNameType.name AS TestNameTypeName,
                   t.idfsTestResult AS TestResultTypeID,
                   testResultType.name AS TestResultTypeName,
                   t.idfsTestStatus AS TestStatusTypeID,
                   testStatusType.name AS TestStatusTypeName,
                   t.idfsTestCategory AS TestCategoryTypeID,
                   t.idfsDiagnosis AS TestDiseaseID, 
                   t.datStartedDate AS StartedDate,
                   t.datConcludedDate AS ResultDate,
                   t.strContactPerson AS ContactPersonName,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   sampleType.name AS SampleTypeName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           CAST(m.DiseaseID AS NVARCHAR(MAX))
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseIdentifiers
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DiseaseIdentifiers
                       ELSE
                           ''
                   END AS DiseaseID,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseNames
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DiseaseNames
                       ELSE
                           ''
                   END AS DiseaseName,
                   m.datAccession AS AccessionDate,
                   m.idfInDepartment AS FunctionalAreaID,
                   functionalArea.name AS FunctionalAreaName,
                   m.blnAccessioned AS AccessionIndicator,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   CASE
                       WHEN m.blnAccessioned = 0
                            AND m.idfsAccessionCondition IS NULL THEN
                           'Un-accessioned'
                       WHEN m.idfsSampleStatus IS NULL THEN
                           accessionConditionType.name
                       WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                           accessionConditionType.name
                       ELSE
                           sampleStatusType.name
                   END AS AccessionConditionOrSampleStatusTypeName,
                   m.strCondition AS AccessionComment,
                   tr.strNote AS PurposeOfTransfer,
                   tr.idfsSite AS TransferredFromOrganizationSiteID,
                   transferredToOrganization.idfsSite AS TransferredToOrganizationSiteID,
                   m.idfSendToOffice AS SentToOrganizationID,
                   tr.idfSendByPerson AS SentByPersonID,
                   tr.idfsTransferStatus AS TransferStatusTypeID,
                   tr.intRowStatus AS RowStatus,
                   a.strAnimalCode AS EIDSSAnimalID,
                   CASE
                       WHEN m.TestUnassignedIndicator = 1 THEN
                           0
                       ELSE
                           1
                   END AS TestAssignedIndicator,
                   CASE
                       WHEN transferredToOrganization.idfsSite IS NULL THEN
                           1
                       ELSE
                           0
                   END AS NonEIDSSLaboratoryIndicator,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator,
                   0 AS RowAction,
                   0 AS RowSelectionIndicator,
                   @Page AS CurrentPage,
                   @InProgressCount AS InProgressCount, 
                   COUNT(*) OVER () AS TotalRowCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbTransferOUT tr
                    ON tr.idfTransferOut = res.ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.SampleID
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                INNER JOIN dbo.FN_GBL_Institution_Min(@LanguageID) transferredToOrganization
                    ON transferredToOrganization.idfOffice = tr.idfSendToOffice
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnExternalTest = 1
                LEFT JOIN
                (
                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                ) f
                    ON m.idfMaterial = f.SampleID
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN @MonitoringSessionDiseases msDiseases
                    ON msDiseases.ID = m.idfMaterial
                       AND m.idfMonitoringSession IS NOT NULL
                LEFT JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
                       AND m.idfVectorSurveillanceSession IS NOT NULL
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) diseaseName
                    ON diseaseName.idfsReference = m.DiseaseID
                LEFT JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                    ON functionalArea.idfsReference = d.idfsDepartmentName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
        ) AS x
        WHERE RowNum > @FirstRecord
              AND RowNum < @LastRecord
        ORDER BY RowNum;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_FAVORITE_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_FAVORITE_SEARCH_GETList
--
-- Description:	Get laboratory favorites list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/21/2019 Initial release.
-- Stephen Long     07/09/2019 Added disease to wildcard search.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     09/05/2019 Removed transfer where clause and organization ID check.
-- Stephen Long     01/15/2020 Added transfer ID to query.
-- Stephen Long     01/22/2020 Cleaned up stored procedure.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     06/06/2020 Added batch status type ID to the model.
-- Stephen Long     06/07/2020 Added additional search fields to the where clause.
-- Stephen Long     06/14/2020 Added action requested to the model.
-- Stephen Long     06/24/2020 Added test completed indicator to the model.
-- Stephen Long     11/29/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2021 Moved pagination to table variable insert.
-- Stephen Long     01/05/2021 Removed sent to organization where criteria.
-- Stephen Long     01/07/2021 Removed leading wildcard (%) as full table scans are performed even 
--                             with indices resulting in long query run times.  Recommend NOT 
--                             putting those back in.
-- Mark Wilson		08/16/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/20/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     11/18/2021 Added action requested ID and previous test status type to the 
--                  query.
-- Stephen Long     12/07/2021 Added group by on final results.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     02/10/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     03/10/2022 Added note field to the query.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     09/28/2022 Bug fix on item 5111, 5112, 5113 and 5114.
-- Stephen Long     10/17/2022 Bug fix on item 5018 - searching by dates.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     10/24/2022 Bug fix on GIT #464.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_FAVORITE_SEARCH_GETList]
		@LanguageID = N'en-US',
		@SearchString = N'COVID', -- Use 'Gnhnscvxb', 'Blood', 'XWEB00' as other tests.
		@TestUnassignedIndicator = NULL,
		@TestCompletedIndicator = NULL,
		@UserID = 161287150000872, -- rykermase
		@UserOrganizationID = 758210000000,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_FAVORITE_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @SearchString NVARCHAR(2000),
    @AccessionedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserOrganizationID BIGINT,
    @Page INT = 1,
    @PageSize INT = 10,
    @SortColumn VARCHAR(200) = 'EIDSSLaboratorySampleID',
    @SortOrder VARCHAR(4) = 'DESC'
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL, 
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL 
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL, 
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL 
    );
    DECLARE @InitialResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL
    );
    DECLARE @Results TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL,
        BatchStatusTypeID BIGINT NULL,
        TestNameTypeID BIGINT NULL,
        TestNameTypeName NVARCHAR(MAX) NULL,
        TestStatusTypeID BIGINT NULL,
        TestStatusTypeName NVARCHAR(MAX) NULL,
        StartedDate DATETIME NULL,
        TestResultTypeID BIGINT NULL,
        TestResultTypeName NVARCHAR(MAX) NULL,
        ResultDate DATETIME NULL,
        TestCategoryTypeID BIGINT NULL,
        TestCategoryTypeName NVARCHAR(MAX) NULL,
        PreviousTestStatusID BIGINT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL,
        BatchStatusTypeID BIGINT NULL,
        TestNameTypeID BIGINT NULL,
        TestNameTypeName NVARCHAR(MAX) NULL,
        TestStatusTypeID BIGINT NULL,
        TestStatusTypeName NVARCHAR(MAX) NULL,
        StartedDate DATETIME NULL,
        TestResultTypeID BIGINT NULL,
        TestResultTypeName NVARCHAR(MAX) NULL,
        ResultDate DATETIME NULL,
        TestCategoryTypeID BIGINT NULL,
        TestCategoryTypeName NVARCHAR(MAX) NULL,
        PreviousTestStatusID BIGINT NULL
    );
    DECLARE @SampleTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @SampleStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @AccessionConditionTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestNameTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestResultTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestCategoryTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @Diseases TABLE (ID BIGINT NOT NULL);
    DECLARE @FunctionalAreas TABLE (ID BIGINT NOT NULL);
    DECLARE @Favorites XML,
            @FirstRecord INT = (@Page - 1) * @PageSize,
            @LastRecord INT = (@Page * @PageSize + 1),
            @LanguageCode BIGINT;

    BEGIN TRY
        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);
        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames, 
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames 
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames, 
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames 
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @InitialResults
        SELECT m.idfMaterial,
               NULL
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
        WHERE m.intRowStatus = 0;

        INSERT INTO @SampleTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000087
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @SampleStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000015
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @AccessionConditionTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000110
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @Diseases
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000019
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestNameTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000097
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestResultTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000096
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestCategoryTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000095
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000001
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FunctionalAreas
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000164
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @Results
        SELECT SampleID,
               t.idfTesting,
               b.idfsBatchStatus,
               t.idfsTestName,
               testNameType.name,
               t.idfsTestStatus,
               testStatusType.name,
               t.datStartedDate,
               t.idfsTestResult,
               testResultType.name,
               t.datConcludedDate,
               t.idfsTestCategory,
               testCategoryType.name,
               t.PreviousTestStatusID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
            LEFT JOIN dbo.tlbTesting t 
                ON t.idfMaterial = m.idfMaterial 
                AND t.intRowStatus = 0
                AND t.blnNonLaboratoryTest = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
        WHERE (
                  m.blnAccessioned = @AccessionedIndicator
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND @AccessionedIndicator IS NOT NULL
              ) -- Un-accessioned samples
              OR (
                     CONVERT(NVARCHAR(MAX), FORMAT(m.datAccession, 'g', @LanguageID)) LIKE '%' + @SearchString + '%'
                     OR CONVERT(NVARCHAR(MAX), FORMAT(t.datStartedDate, 'd', @LanguageID)) LIKE '%' + @SearchString + '%'
                     OR CONVERT(NVARCHAR(MAX), FORMAT(t.datConcludedDate, 'd', @LanguageID)) LIKE '%' + @SearchString + '%'
                     OR (
                            m.strBarcode IS NOT NULL
                            AND m.strBarcode <> ''
                            AND m.strBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strFieldBarcode IS NOT NULL
                            AND m.strFieldBarcode <> ''
                            AND m.strFieldBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCondition IS NOT NULL
                            AND m.strCondition <> ''
                            AND m.strCondition LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedCaseID IS NOT NULL
                            AND m.strCalculatedCaseID <> ''
                            AND m.strCalculatedCaseID LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedHumanName IS NOT NULL
                            AND m.strCalculatedHumanName <> ''
                            AND m.strCalculatedHumanName LIKE '%' + @SearchString + '%'
                        )
                 );

        INSERT INTO @Results
        SELECT SampleID,
               t.idfTesting,
               b.idfsBatchStatus,
               t.idfsTestName,
               testNameType.name,
               t.idfsTestStatus,
               testStatusType.name,
               t.datStartedDate,
               t.idfsTestResult,
               testResultType.name,
               t.datConcludedDate,
               t.idfsTestCategory,
               testCategoryType.name,
               t.PreviousTestStatusID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
            INNER JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
                               LEFT JOIN dbo.tlbTesting t 
                ON t.idfMaterial = m.idfMaterial 
                AND t.intRowStatus = 0
                AND t.blnNonLaboratoryTest = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
        WHERE m.idfAnimal IS NOT NULL
              AND a.strAnimalCode LIKE '%' + @SearchString + '%';

        INSERT INTO @Results
        SELECT SampleID,
               TestID,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL
        FROM @InitialResults
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = SampleID
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
        WHERE tro.strBarcode LIKE '%' + @SearchString + '%';

        IF
        (
            SELECT COUNT(*) FROM @SampleTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t 
                    ON t.idfMaterial = m.idfMaterial 
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @SampleTypes WHERE m.idfsSampleType = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @SampleStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t 
                    ON t.idfMaterial = m.idfMaterial 
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @SampleStatusTypes WHERE m.idfsSampleStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @AccessionConditionTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t 
                    ON t.idfMaterial = m.idfMaterial 
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE (
                      m.idfsSampleStatus IS NULL
                      OR m.idfsSampleStatus = 10015007
                  ) --In Repository
                  AND EXISTS
            (
                SELECT ID
                FROM @AccessionConditionTypes
                WHERE m.idfsAccessionCondition = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestNameTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @TestNameTypes WHERE t.idfsTestName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestResultTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @TestResultTypes WHERE t.idfsTestResult = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestCategoryTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @TestCategoryTypes WHERE t.idfsTestCategory = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @TestStatusTypes WHERE t.idfsTestStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @FunctionalAreas
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                INNER JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.tlbTesting t 
                    ON t.idfMaterial = m.idfMaterial 
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE m.idfInDepartment IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @FunctionalAreas WHERE d.idfsDepartmentName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @Diseases
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t 
                    ON t.idfMaterial = m.idfMaterial 
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE m.DiseaseID IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE m.DiseaseID = ID
            );

            INSERT INTO @FinalResults
            SELECT ir.SampleID,
                   ir.TestID,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL
            FROM @InitialResults ir
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ir.SampleID
                INNER JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
            WHERE m.idfVectorSurveillanceSession IS NOT NULL
                  AND m.DiseaseID IS NULL
                  AND EXISTS
            (
                SELECT ID
                FROM @Diseases
                WHERE ID IN (
                                SELECT CAST([Value] AS BIGINT)
                                FROM dbo.FN_GBL_SYS_SplitList(vsDiseases.DiseaseIdentifiers, NULL, ',')
                            )
            );

            INSERT INTO @Results
            SELECT SampleID,
                   TestID,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                INNER JOIN dbo.tlbMonitoringSession ms
                    ON ms.idfMonitoringSession = m.idfMonitoringSession
                       AND ms.intRowStatus = 0
                INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                       AND msd.intRowStatus = 0
            WHERE m.idfMonitoringSession IS NOT NULL
                  AND m.DiseaseID IS NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE msd.idfsDiagnosis = ID
            );
        END;

        INSERT INTO @FinalResults
        SELECT SampleID,
               TestID,
               BatchStatusTypeID,
               TestNameTypeID,
               TestNameTypeName,
               TestStatusTypeID,
               TestStatusTypeName,
               StartedDate,
               TestResultTypeID,
               TestResultTypeName,
               ResultDate,
               TestCategoryTypeID,
               TestCategoryTypeName,
               PreviousTestStatusID
        FROM @Results
        GROUP BY SampleID,
                 TestID,
                 BatchStatusTypeID,
                 TestNameTypeID,
                 TestNameTypeName,
                 TestStatusTypeID,
                 TestStatusTypeName,
                 StartedDate,
                 TestResultTypeID,
                 TestResultTypeName,
                 ResultDate,
                 TestCategoryTypeID,
                 TestCategoryTypeName,
                 PreviousTestStatusID;

        DECLARE @FavoriteCount AS INT = (
                                            SELECT COUNT(*)
                                            FROM @Results r
                                                INNER JOIN
                                                (
                                                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                                                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                                                ) f
                                                    ON r.SampleID = f.SampleID
                                        );

        SELECT SampleID,
               SiteID,
               CurrentSiteID,
               TestID,
               TransferID,
               EIDSSReportOrSessionID,
               PatientOrFarmOwnerName,
               SampleTypeID,
               SampleTypeName,
               DiseaseID,
               DiseaseName,
               DisplayDiseaseName, 
               RootSampleID,
               ParentSampleID,
               EIDSSLaboratorySampleID,
               EIDSSLocalOrFieldSampleID,
               CollectionDate,
               CollectedByPersonID,
               CollectedByOrganizationID,
               SentDate,
               SentToOrganizationID,
               TestNameTypeID,
               TestNameTypeName,
               TestStatusTypeID,
               TestStatusTypeName,
               StartedDate,
               TestResultTypeID,
               TestResultTypeName,
               ResultDate,
               TestCategoryTypeID,
               TestCategoryTypeName,
               AccessionIndicator,
               AccessionDate,
               FunctionalAreaID,
               FunctionalAreaName,
               FreezerSubdivisionID,
               StorageBoxPlace,
               EnteredDate,
               OutOfRepositoryDate,
               MarkedForDispositionByPersonID,
               ReadOnlyIndicator,
               AccessionConditionTypeID,
               SampleStatusTypeID,
               AccessionConditionOrSampleStatusTypeName,
               AccessionedInByPersonID,
               SampleStatusDate,
               AccessionComment,
               Comment,
               EIDSSAnimalID,
               BirdStatusTypeID,
               MainTestID,
               SampleKindTypeID,
               BatchStatusTypeID,
               TestAssignedIndicator,
               ActionRequestedID,
               ActionRequested,
               TestCompletedIndicator,
               PreviousSampleStatusTypeID,
               PreviousTestStatusTypeID,
               LabModuleSourceIndicator,
               HumanDiseaseReportID, 
               VeterinaryDiseaseReportID, 
               MonitoringSessionID,
               VectorSessionID, 
               VectorID, 
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
               RowAction,
               RowSelectionIndicator,
               CurrentPage,
               TotalRowCount,
               FavoriteCount
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedCaseID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedHumanName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedHumanName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strFieldBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strFieldBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.datAccession
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.datAccession
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       sampleType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       sampleType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DisplayDiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.DiseaseID IS NOT NULL THEN
                                                               diseaseName.name
                                                           WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                                               msDiseases.DisplayDiseaseNames
                                                           WHEN
                                                           (
                                                               m.DiseaseID IS NULL
                                                               AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                                                           ) THEN
                                                               vsDiseases.DisplayDiseaseNames
                                                           ELSE
                                                               ''
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DisplayDiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.DiseaseID IS NOT NULL THEN
                                                               diseaseName.name
                                                           WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                                               msDiseases.DisplayDiseaseNames
                                                           WHEN
                                                           (
                                                               m.DiseaseID IS NULL
                                                               AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                                                           ) THEN
                                                               vsDiseases.DisplayDiseaseNames
                                                           ELSE
                                                               ''
                                                       END
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       TestNameTypeName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       TestNameTypeName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       TestStatusTypeName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       TestStatusTypeName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStartedDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       StartedDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStartedDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       StartedDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       TestResultTypeName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       TestResultTypeName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ResultDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ResultDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestCategoryTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       TestCategoryTypeName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestCategoryTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       TestCategoryTypeName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'FunctionalAreaName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       functionalArea.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'FunctionalAreaName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       functionalArea.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSAnimalID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       a.strAnimalCode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSAnimalID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       a.strAnimalCode
                                               END DESC
                                     ) AS RowNum,
                   m.idfMaterial AS SampleID,
                   m.idfsSite AS SiteID,
                   m.idfsCurrentSite AS CurrentSiteID,
                   res.TestID AS TestID,
                   tom.idfTransferOut AS TransferID,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   m.strCalculatedHumanName AS PatientOrFarmOwnerName,
                   m.idfsSampleType AS SampleTypeID,
                   sampleType.name AS SampleTypeName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           CAST(m.DiseaseID AS NVARCHAR(MAX))
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseIdentifiers
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DiseaseIdentifiers
                       ELSE
                           ''
                   END AS DiseaseID,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseNames
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DiseaseNames
                       ELSE
                           ''
                   END AS DiseaseName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN 
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DisplayDiseaseNames
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DisplayDiseaseNames
                       ELSE
                           ''
                   END AS DisplayDiseaseName,
                   m.idfRootMaterial AS RootSampleID,
                   m.idfParentMaterial AS ParentSampleID,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   m.datFieldCollectionDate AS CollectionDate,
                   m.idfFieldCollectedByPerson AS CollectedByPersonID,
                   m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
                   m.datFieldSentDate AS SentDate,
                   m.idfSendToOffice AS SentToOrganizationID,
                   TestNameTypeID,
                   TestNameTypeName,
                   TestStatusTypeID,
                   TestStatusTypeName,
                   StartedDate,
                   TestResultTypeID,
                   TestResultTypeName,
                   ResultDate,
                   TestCategoryTypeID,
                   TestCategoryTypeName,
                   m.blnAccessioned AS AccessionIndicator,
                   m.datAccession AS AccessionDate,
                   m.idfInDepartment AS FunctionalAreaID,
                   functionalArea.name AS FunctionalAreaName,
                   m.idfSubdivision AS FreezerSubdivisionID,
                   m.StorageBoxPlace,
                   m.datEnteringDate AS EnteredDate,
                   m.datOutOfRepositoryDate AS OutOfRepositoryDate,
                   m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
                   m.blnReadOnly AS ReadOnlyIndicator,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   (CASE
                        WHEN m.blnAccessioned = 0
                             AND m.idfsAccessionCondition IS NULL THEN
                            'Un-accessioned'
                        WHEN m.idfsSampleStatus IS NULL THEN
                            accessionConditionType.name
                        WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                            accessionConditionType.name
                        ELSE
                            sampleStatusType.name
                    END
                   ) AS AccessionConditionOrSampleStatusTypeName,
                   m.idfAccesionByPerson AS AccessionedInByPersonID,
                   m.datSampleStatusDate AS SampleStatusDate,
                   m.strCondition AS AccessionComment,
                   m.strNote AS Comment,
                   a.strAnimalCode AS EIDSSAnimalID,
                   m.idfsBirdStatus AS BirdStatusTypeID,
                   m.idfMainTest AS MainTestID,
                   m.idfsSampleKind AS SampleKindTypeID,
                   BatchStatusTypeID,
                   ISNULL(   IIF(
                                (
                                    SELECT COUNT(t3.idfTesting)
                                    FROM dbo.tlbTesting t3
                                    WHERE t3.idfsTestStatus IN (   10001003,
                                                                            --In Progress
                                                                   10001004 --Preliminary
                                                               )
                                          AND t3.idfMaterial = m.idfMaterial
                                          AND t3.intRowStatus = 0
                                          AND t3.blnNonLaboratoryTest = 0
                                ) > 0,
                                1,
                                0),
                             0
                         ) AS TestAssignedIndicator,
                   CASE
                       WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
                   THEN
                           m.idfsSampleStatus
                       WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
                   THEN
                           m.idfsSampleStatus
                       WHEN TestStatusTypeID = 10001004 --Preliminary
                   THEN
                           TestStatusTypeID
                       WHEN TestStatusTypeID = 10001008 --Marked for Deletion
                   THEN
                           TestStatusTypeID
                   END AS ActionRequestedID,
                   CASE
                       WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
                   THEN
                           'Sample Deletion'
                       WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
                   THEN
                           'Sample Destruction'
                       WHEN TestStatusTypeID = 10001004 --Preliminary
                   THEN
                           'Validation'
                       WHEN TestStatusTypeID = 19000502 --Marked for Deletion
                   THEN
                           'Test Deletion'
                   END AS ActionRequested,
                   ISNULL(   IIF(
                                (
                                    SELECT COUNT(t2.idfTesting)
                                    FROM dbo.tlbTesting t2
                                    WHERE t2.idfsTestStatus IN (   10001001,
                                                                            --Final
                                                                   10001006 --Amended
                                                               )
                                          AND t2.idfMaterial = m.idfMaterial
                                          AND t2.intRowStatus = 0
                                          AND t2.blnNonLaboratoryTest = 0
                                ) > 0,
                                1,
                                0),
                             0
                         ) AS TestCompletedIndicator,
                   m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
                   PreviousTestStatusID AS PreviousTestStatusTypeID,
                   m.LabModuleSourceIndicator,
                   m.idfHumanCase AS HumanDiseaseReportID, 
                   m.idfVetCase AS VeterinaryDiseaseReportID, 
                   m.idfMonitoringSession AS MonitoringSessionID, 
                   m.idfVectorSurveillanceSession AS VectorSessionID, 
                   m.idfVector AS VectorID, 
                   1 AS ReadPermissionIndicator,
                   1 AS AccessToPersonalDataPermissionIndicator,
                   1 AS AccessToGenderAndAgeDataPermissionIndicator,
                   1 AS WritePermissionIndicator,
                   1 AS DeletePermissionIndicator,
                   0 AS RowAction,
                   0 AS RowSelectionIndicator,
                   @Page AS CurrentPage,
                   COUNT(*) OVER () AS TotalRowCount,
                   @FavoriteCount AS FavoriteCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.SampleID
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfMaterial = m.idfMaterial
                       AND tom.intRowStatus = 0
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                    ON diseaseName.idfsReference = m.DiseaseID
                LEFT JOIN @MonitoringSessionDiseases msDiseases
                    ON msDiseases.ID = m.idfMonitoringSession
                LEFT JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
                LEFT JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                    ON functionalArea.idfsReference = d.idfsDepartmentName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
        ) AS x
        WHERE RowNum > @FirstRecord
              AND RowNum < @LastRecord
        ORDER BY RowNum;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TRANSFER_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TRANSFER_SEARCH_GETList
--
-- Description:	Get laboratory transfer list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/21/2019 Initial release.
-- Stephen Long     07/09/2019 Added disease to wildcard search.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/21/2019 Added accession indicator and test status type ID to the list of 
--                             fields.
-- Stephen Long     01/22/2020 Added site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/07/2020 Added test name type ID to the model.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     05/06/2020 Added test started date and test category type name to the model.
-- Stephen Long     06/07/2020 Added additional search fields to the where clause.
-- Stephen Long     06/24/2020 Added external test check to the test left join.
-- Stephen Long     11/29/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2021 Moved pagination to table variable insert.
-- Stephen Long     01/05/2021 Removed sent to organization where criteria.
-- Stephen Long     01/07/2021 Removed leading wildcard (%) as full table scans are performed even 
--                             with indices resulting in long query run times.  Recommend NOT 
--                             putting those back in.
-- Mark Wilson		08/17/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/23/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     02/10/2022 Replaced joins for monitoring session and vector session
--                             disease references to improve performance.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/04/2022 Add where criteria from the default sample listing, so only
--                             records for the simple search are filtered from the default set.
-- Stephen Long     09/28/2022 Bug fix on item 5111.
-- Stephen Long     10/14/2022 Changed monitoring session disease function to monitoring session
--                             to sample disease function.
-- Stephen Long     10/17/2022 Bug fix on item 5018 - searching by dates.
-- Stephen Long     10/18/2022 Added test disease ID to the query.
-- Stephen Long     10/24/2022 Fix for GIT item #46 - duplciate records comming back.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_TRANSFER_SEARCH_GETList]
		@LanguageID = N'en-US',
		@SearchString = N'COVID', -- Use 'Gnhnscvxb', 'Brucellosis', 'XWEB00' as other tests.
		@UserID = 161287150000872, -- rykermase
		@UserOrganizationID = 758210000000,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TRANSFER_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @SearchString NVARCHAR(2000),
    @AccessionedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserOrganizationID BIGINT,
    @Page INT = 1,
    @PageSize INT = 10,
    @SortColumn VARCHAR(200) = 'EIDSSLaboratorySampleID',
    @SortOrder VARCHAR(4) = 'DESC'
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @InitialResults TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL
    );
    DECLARE @DeduplicatedFinalResults TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL
    );
    DECLARE @SampleTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @SampleStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @AccessionConditionTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestNameTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestResultTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestCategoryTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @Diseases TABLE (ID BIGINT NOT NULL);
    DECLARE @FunctionalAreas TABLE (ID BIGINT NOT NULL);
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @Favorites XML,
            @FirstRecord INT = (@Page - 1) * @PageSize,
            @LastRecord INT = (@Page * @PageSize + 1),
            @LanguageCode BIGINT;

    BEGIN TRY
        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);
        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT SampleID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_TO_SAMPLE_DISEASES_GET(@LanguageID)
        GROUP BY SampleID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, ';') AS DiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @InitialResults
        SELECT tr.idfTransferOut,
               tom.idfMaterial
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
        WHERE (
                  tr.idfSendFromOffice = @UserOrganizationID
                  OR tr.idfSendToOffice = @UserOrganizationID
              )
              AND (tr.idfsTransferStatus IN (   10001003,
                                                         --In Progress
                                                10001006 --Amended
                                            )
                  )
              AND tr.intRowStatus = 0;

        INSERT INTO @SampleTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000087
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @SampleStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000015
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @AccessionConditionTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000110
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @Diseases
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000019
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestNameTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000097
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestResultTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000096
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FunctionalAreas
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000164
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
                   AND m.intRowStatus = 0
        WHERE (
                  m.blnAccessioned = @AccessionedIndicator
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND @AccessionedIndicator IS NOT NULL
              ) -- Un-accessioned samples
              OR (
                     CONVERT(NVARCHAR(MAX), FORMAT(m.datAccession, 'g', @LanguageID)) LIKE '%' + @SearchString + '%'
                     OR (
                            m.strBarcode IS NOT NULL
                            AND m.strBarcode <> ''
                            AND m.strBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strFieldBarcode IS NOT NULL
                            AND m.strFieldBarcode <> ''
                            AND m.strFieldBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCondition IS NOT NULL
                            AND m.strCondition <> ''
                            AND m.strCondition LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedCaseID IS NOT NULL
                            AND m.strCalculatedCaseID <> ''
                            AND m.strCalculatedCaseID LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedHumanName IS NOT NULL
                            AND m.strCalculatedHumanName <> ''
                            AND m.strCalculatedHumanName LIKE '%' + @SearchString + '%'
                        )
                 );

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnExternalTest = 1
        WHERE CONVERT(NVARCHAR(MAX), FORMAT(t.datConcludedDate, 'd', @LanguageID)) LIKE '%' + @SearchString + '%';


        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = ID
        WHERE CONVERT(NVARCHAR(MAX), FORMAT(tr.datSendDate, 'd', @LanguageID)) LIKE '%' + @SearchString + '%';

        IF
        (
            SELECT COUNT(*) FROM @SampleTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
            WHERE EXISTS
            (
                SELECT ID FROM @SampleTypes WHERE m.idfsSampleType = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @SampleStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
            WHERE (
                      m.idfsSampleStatus IS NULL
                      OR m.idfsSampleStatus = 10015007
                  ) --In Repository
                  AND EXISTS
            (
                SELECT ID FROM @SampleStatusTypes WHERE m.idfsSampleStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @AccessionConditionTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
            WHERE EXISTS
            (
                SELECT ID
                FROM @AccessionConditionTypes
                WHERE m.idfsAccessionCondition = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestNameTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnExternalTest = 1
            WHERE EXISTS
            (
                SELECT ID FROM @TestNameTypes WHERE t.idfsTestName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestResultTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnExternalTest = 1
            WHERE EXISTS
            (
                SELECT ID FROM @TestResultTypes WHERE t.idfsTestResult = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @FunctionalAreas
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
            WHERE m.idfInDepartment IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @FunctionalAreas WHERE d.idfsDepartmentName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @Diseases
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                       AND m.intRowStatus = 0
            WHERE m.DiseaseID IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE m.DiseaseID = ID
            );

            INSERT INTO @FinalResults
            SELECT ir.ID,
                   ir.SampleID
            FROM @InitialResults ir
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ir.SampleID
                INNER JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
            WHERE m.idfVectorSurveillanceSession IS NOT NULL
                  AND EXISTS
            (
                SELECT ID
                FROM @Diseases
                WHERE ID IN (
                                SELECT CAST([Value] AS BIGINT)
                                FROM dbo.FN_GBL_SYS_SplitList(vsDiseases.DiseaseIdentifiers, NULL, ',')
                            )
            );

            INSERT INTO @FinalResults
            SELECT ID,
                   SampleID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                INNER JOIN dbo.tlbMonitoringSession ms
                    ON ms.idfMonitoringSession = m.idfMonitoringSession
                       AND ms.intRowStatus = 0
                INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                       AND msd.intRowStatus = 0
            WHERE EXISTS
            (
                SELECT ID FROM @Diseases WHERE msd.idfsDiagnosis = ID
            );
        END

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
        WHERE m.idfAnimal IS NOT NULL
              AND a.strAnimalCode LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = ID
        WHERE tr.strBarcode LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = ID
        WHERE tr.TestRequested LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnExternalTest = 1
        WHERE t.strContactPerson LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = ID
            INNER JOIN dbo.FN_GBL_Institution_Min(@LanguageID) transferredFromOrganization
                ON transferredFromOrganization.idfOffice = tr.idfSendFromOffice
        WHERE transferredFromOrganization.AbbreviatedName LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID,
               SampleID
        FROM @InitialResults
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = ID
            INNER JOIN dbo.FN_GBL_Institution_Min(@LanguageID) transferredToOrganization
                ON transferredToOrganization.idfOffice = tr.idfSendToOffice
        WHERE transferredToOrganization.AbbreviatedName LIKE '%' + @SearchString + '%';

        INSERT INTO @DeduplicatedFinalResults
        SELECT ID,
               SampleID 
        FROM @FinalResults
        GROUP BY ID, 
                 SampleID;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        DECLARE @InProgressCount INT = (
                                           SELECT COUNT(DISTINCT res.ID)
                                           FROM @FinalResults res
                                               INNER JOIN dbo.tlbTransferOUT tr
                                                   ON tr.idfTransferOut = res.ID
                                           WHERE tr.idfsTransferStatus IN (   10001003, --In Progress
                                                                              10001006  --Amended
                                                                          )
                                       );

        SELECT TransferID,
               EIDSSTransferID,
               TransferredOutSampleID,
               TransferredInSampleID,
               FavoriteIndicator,
               EIDSSReportOrSessionID,
               PatientOrFarmOwnerName,
               EIDSSLaboratorySampleID,
               TransferredToOrganizationID,
               TransferredToOrganizationName,
               TransferredFromOrganizationID,
               TransferDate,
               TestRequested,
               TestID,
               TestNameTypeID,
               TestNameTypeName,
               TestResultTypeID,
               TestResultTypeName,
               TestStatusTypeID,
               TestStatusTypeName,
               TestCategoryTypeID,
               TestDiseaseID, 
               StartedDate,
               ResultDate,
               ContactPersonName,
               EIDSSLocalOrFieldSampleID,
               SampleTypeName,
               DiseaseID,
               DiseaseName,
               AccessionDate,
               FunctionalAreaID,
               FunctionalAreaName,
               AccessionIndicator,
               AccessionConditionTypeID,
               SampleStatusTypeID,
               AccessionConditionOrSampleStatusTypeName,
               AccessionComment,
               PurposeOfTransfer,
               TransferredFromOrganizationSiteID,
               SentToOrganizationID,
               SentByPersonID,
               TransferStatusTypeID,
               RowStatus,
               EIDSSAnimalID,
               TestAssignedIndicator,
               NonEIDSSLaboratoryIndicator,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
               RowAction,
               RowSelectionIndicator,
               CurrentPage,
               InProgressCount,
               TotalRowCount
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedCaseID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedHumanName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedHumanName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSTransferID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       tr.strBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSTransferID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       tr.strBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TransferredToOrganizationName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       transferredToOrganization.FullName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TransferredToOrganizationName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       transferredToOrganization.FullName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TransferDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       tr.datSendDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TransferDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       tr.datSendDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestRequested'
                                                        AND @SortOrder = 'ASC' THEN
                                                       tr.TestRequested
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestRequested'
                                                        AND @SortOrder = 'DESC' THEN
                                                       tr.TestRequested
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testNameType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testNameType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testResultType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testResultType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       t.datConcludedDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       t.datConcludedDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PointOfContact'
                                                        AND @SortOrder = 'ASC' THEN
                                                       t.strContactPerson
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PointOfContact'
                                                        AND @SortOrder = 'DESC' THEN
                                                       t.strContactPerson
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strFieldBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strFieldBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       sampleType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       sampleType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.DiseaseID IS NOT NULL THEN
                                                               diseaseName.name
                                                           WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                                               msDiseases.DiseaseNames
                                                           WHEN
                                                           (
                                                               m.DiseaseID IS NULL
                                                               AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                                                           ) THEN
                                                               vsDiseases.DiseaseNames
                                                           ELSE
                                                               ''
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.DiseaseID IS NOT NULL THEN
                                                               diseaseName.name
                                                           WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                                               msDiseases.DiseaseNames
                                                           WHEN
                                                           (
                                                               m.DiseaseID IS NULL
                                                               AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                                                           ) THEN
                                                               vsDiseases.DiseaseNames
                                                           ELSE
                                                               ''
                                                       END
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.datAccession
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.datAccession
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END DESC
                                     ) AS RowNum,
                   tr.idfTransferOut AS TransferID,
                   tr.strBarcode AS EIDSSTransferID,
                   m.idfMaterial AS TransferredOutSampleID,
                   (
                       SELECT TOP 1
                           idfMaterial
                       FROM dbo.tlbMaterial
                       WHERE idfRootMaterial = m.idfMaterial
                             AND intRowStatus = 0
                             AND idfsSampleKind = 12675430000000 --Transferred in
                   ) AS TransferredInSampleID,
                   CASE
                       WHEN f.SampleID IS NULL THEN
                           0
                       ELSE
                           1
                   END AS FavoriteIndicator,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   m.strCalculatedHumanName AS PatientOrFarmOwnerName,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   tr.idfSendToOffice AS TransferredToOrganizationID,
                   transferredToOrganization.[FullName] AS TransferredToOrganizationName,
                   tr.idfSendFromOffice AS TransferredFromOrganizationID,
                   tr.datSendDate AS TransferDate,
                   tr.TestRequested,
                   t.idfTesting AS TestID,
                   t.idfsTestName AS TestNameTypeID,
                   testNameType.name AS TestNameTypeName,
                   t.idfsTestResult AS TestResultTypeID,
                   testResultType.name AS TestResultTypeName,
                   t.idfsTestStatus AS TestStatusTypeID,
                   testStatusType.name AS TestStatusTypeName,
                   t.idfsTestCategory AS TestCategoryTypeID,
                   t.idfsDiagnosis AS TestDiseaseID, 
                   t.datStartedDate AS StartedDate,
                   t.datConcludedDate AS ResultDate,
                   t.strContactPerson AS ContactPersonName,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   sampleType.name AS SampleTypeName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           CAST(m.DiseaseID AS NVARCHAR(MAX))
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseIdentifiers
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DiseaseIdentifiers
                       ELSE
                           ''
                   END AS DiseaseID,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseNames
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DiseaseNames
                       ELSE
                           ''
                   END AS DiseaseName,
                   m.datAccession AS AccessionDate,
                   m.idfInDepartment AS FunctionalAreaID,
                   functionalArea.name AS FunctionalAreaName,
                   m.blnAccessioned AS AccessionIndicator,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   (CASE
                        WHEN m.blnAccessioned = 0
                             AND m.idfsAccessionCondition IS NULL THEN
                            'Un-accessioned'
                        WHEN m.idfsSampleStatus IS NULL THEN
                            accessionConditionType.name
                        WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                            accessionConditionType.name
                        ELSE
                            sampleStatusType.name
                    END
                   ) AS AccessionConditionOrSampleStatusTypeName,
                   m.strCondition AS AccessionComment,
                   tr.strNote AS PurposeOfTransfer,
                   tr.idfsSite AS TransferredFromOrganizationSiteID,
                   m.idfSendToOffice AS SentToOrganizationID,
                   tr.idfSendByPerson AS SentByPersonID,
                   tr.idfsTransferStatus AS TransferStatusTypeID,
                   tr.intRowStatus AS RowStatus,
                   a.strAnimalCode AS EIDSSAnimalID,
                   IIF(
                      (
                          SELECT COUNT(t2.idfTesting)
                          FROM dbo.tlbTesting t2
                          WHERE t2.idfsTestStatus IN (   10001003,
                                                                  --In Progress
                                                         10001004,
                                                                  --Preliminary
                                                         10001005 --Not Started
                                                     )
                                AND t2.idfMaterial = m.idfMaterial
                      ) > 0,
                      1,
                      0) AS TestAssignedIndicator,
                   (CASE
                        WHEN transferredToOrganization.idfsSite IS NULL THEN
                            1
                        ELSE
                            0
                    END
                   ) AS NonEIDSSLaboratoryIndicator,
                   1 AS ReadPermissionIndicator,
                   1 AS AccessToPersonalDataPermissionIndicator,
                   1 AS AccessToGenderAndAgeDataPermissionIndicator,
                   1 AS WritePermissionIndicator,
                   1 AS DeletePermissionIndicator,
                   0 AS RowAction,
                   0 AS RowSelectionIndicator,
                   @Page AS CurrentPage,
                   @InProgressCount AS InProgressCount,
                   COUNT(*) OVER () AS TotalRowCount
            FROM @DeduplicatedFinalResults res
                INNER JOIN dbo.tlbTransferOUT tr
                    ON tr.idfTransferOut = res.ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.SampleID
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                INNER JOIN dbo.FN_GBL_Institution(@LanguageID) transferredToOrganization
                    ON transferredToOrganization.idfOffice = tr.idfSendToOffice
                       AND transferredToOrganization.intRowStatus = 0
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnExternalTest = 1
                LEFT JOIN
                (
                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                ) f
                    ON m.idfMaterial = f.SampleID
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN @MonitoringSessionDiseases msDiseases
                    ON msDiseases.ID = m.idfMaterial
                       AND m.idfMonitoringSession IS NOT NULL
                LEFT JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                    ON diseaseName.idfsReference = m.DiseaseID
                LEFT JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                    ON functionalArea.idfsReference = d.idfsDepartmentName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
        ) AS x
        WHERE RowNum > @FirstRecord
              AND RowNum < @LastRecord
        ORDER BY RowNum;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_SAMPLE_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_SAMPLE_SEARCH_GETList
--
-- Description:	Get sample search list for the laboratory module use case LUC13.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     01/14/2019 Initial release.
-- Stephen Long     01/30/2019 Removed joins to vector surveillance session, and added reference 
--                             to the disease reference table for the sample table.
-- Stephen Long     02/21/2019 Added organization ID parameter to narrow search.
-- Stephen Long     07/01/2019 Corrected reference type on monitoring session category.
-- Stephen Long     07/09/2019 Added disease to the wildcard search.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     08/18/2019 Removed herd left join and modified species left join to material 
--                             table.
-- Stephen Long     01/21/2020 Added site list for site filtration.
-- Stephen Long     03/09/2020 Added additional search filters to match the default get.
-- Stephen Long     03/10/2020 Removed filter on sample disease, and added disease report and 
--                             monitoring session ones.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     05/05/2020 Added transfer status type ID of final when sample status type ID 
--                             is transferred out.
-- Stephen Long     06/07/2020 Added additional search fields to the where clause.
-- Stephen Long     07/06/2020 Added lab module source indicator to the model.
-- Stephen Long     10/27/2020 Removed test assigned indicator, and split out queries for better 
--                             performance.
-- Stephen Long     10/30/2020 Added test unassigned and test completed indicators.
-- Stephen Long     10/31/2020 Correct disease report/session query where criteria; prevent dups.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2021 Moved pagination to table variable insert.
-- Stephen Long     01/05/2021 Changed over missed functions for reference data.
-- Stephen Long     01/07/2021 Removed leading wildcard (%) as full table scans are performed even 
--                             with indices resulting in long query run times.  Recommend NOT 
--                             putting those back in.
-- Stephen Long     06/28/2021 Applied new pagination parameters.
-- Stephen Long     09/20/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     12/06/2021 Correction to EIDSSReportOrSessionID alias name.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     02/08/2022 Removed unneeded joins.
-- Stephen Long     02/17/2022 Fix on where criteria for test status types.
-- Stephen Long     03/10/2022 Changed note to comment and transfer count to transferred count.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     05/23/2022 Fix to show rejected samples on sample search.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/04/2022 Add where criteria from the default sample listing, so only
--                             records for the simple search are filtered from the default set.
-- Stephen Long     08/16/2022 Added null DaysFromAccessionDate to the where criteria.
-- Stephen Long     09/21/2022 Removed test status types of final and amended from the in 
--                             repository samples within the accession date window check.  Changed 
--                             rejected samples to use collection date or entered date against the 
--                             date window (number of days for samples to stay in the list).
-- Stephen Long     10/17/2022 Bug fix on item 5111 and 5018.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_SAMPLE_SEARCH_GETList]
		@LanguageID = N'en-US',
		@SearchString = N'COVID', -- Use 'Gnhnscvxb', 'Blood', 'XWEB00' as other tests.
		@TestUnassignedIndicator = NULL,
		@TestCompletedIndicator = NULL,
		@UserID = 161287150000872, -- rykermase
		@UserOrganizationID = 758210000000,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_SAMPLE_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @SearchString NVARCHAR(2000),
    @AccessionedIndicator BIT = NULL, 
    @TestUnassignedIndicator BIT = NULL,
    @TestCompletedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserOrganizationID BIGINT,
    @DaysFromAccessionDate INT = NULL, 
    @Page INT = 1,
    @PageSize INT = 10,
    @SortColumn VARCHAR(200) = 'EIDSSLaboratorySampleID',
    @SortOrder VARCHAR(4) = 'DESC'
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @InitialResults TABLE (ID BIGINT NOT NULL);
    DECLARE @FinalResults TABLE (ID BIGINT NOT NULL);
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL, 
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL 
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL, 
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL 
    );
    DECLARE @SampleTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @SampleStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @AccessionConditionTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @Diseases TABLE (ID BIGINT NOT NULL);
    DECLARE @FunctionalAreas TABLE (ID BIGINT NOT NULL);
    DECLARE @Favorites XML,
            @FirstRecord INT = (@Page - 1) * @PageSize,
            @LastRecord INT = (@Page * @PageSize + 1),
            @LanguageCode BIGINT;

    BEGIN TRY
        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames, 
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames 
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames, 
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames 
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @InitialResults
        SELECT m.idfMaterial --, 
               --m.datAccession
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
        WHERE m.intRowStatus = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND (
                          @UserOrganizationID IS NULL
                          OR m.idfSendToOffice = @UserOrganizationID
                      )
                  AND (
                          (
                              (GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession) OR @DaysFromAccessionDate IS NULL)
                              AND
                              (
                                  SELECT COUNT(*)
                                  FROM dbo.tlbTesting t
                                  WHERE t.idfMaterial = m.idfMaterial
                                        AND t.intRowStatus = 0
                                        AND t.blnNonLaboratoryTest = 0
                                        AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                              ) = 0
                              AND @TestUnassignedIndicator IS NOT NULL
                              AND m.blnAccessioned = 1
                              AND m.datAccession IS NOT NULL
                              AND m.idfsAccessionCondition IS NOT NULL
                              AND m.idfsSampleStatus = 10015007 -- In Repository
                          )
                          OR (
                                 (GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession) OR @DaysFromAccessionDate IS NULL)
                                 AND
                                 (
                                     SELECT COUNT(*)
                                     FROM dbo.tlbTesting t
                                     WHERE t.idfMaterial = m.idfMaterial
                                           AND t.intRowStatus = 0
                                           AND t.blnNonLaboratoryTest = 0
                                           AND t.idfsTestStatus IN ( 10001001, 10001006 ) -- Final and Amended
                                 ) > 0
                                 AND @TestCompletedIndicator IS NOT NULL
                             )
                          OR (
                                 m.blnAccessioned = 0
                                 AND m.idfsAccessionCondition IS NULL
                                 AND m.idfsSampleStatus IS NULL
                                 AND @TestCompletedIndicator IS NULL
                                 AND @TestUnassignedIndicator IS NULL
                             )
                          OR (
                                 (GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession) OR @DaysFromAccessionDate IS NULL)
                                 AND
                                 (
                                     SELECT COUNT(*)
                                     FROM dbo.tlbTesting t
                                     WHERE t.idfMaterial = m.idfMaterial
                                           AND t.intRowStatus = 0
                                           AND t.blnNonLaboratoryTest = 0
                                           AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                                 ) = 0
                                 AND m.idfsSampleStatus <> 10015010 -- Transferred Out
                                 AND @TestUnassignedIndicator IS NULL
                                 AND @TestCompletedIndicator IS NULL
                             )
                          OR (
                                (GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession) OR @DaysFromAccessionDate IS NULL)
								AND m.idfsSampleStatus = 10015010 -- Transferred Out
								AND
                                 (
                                     SELECT COUNT(tr.idfTransferOut)
                                     FROM dbo.tlbTransferOutMaterial tom
                                     INNER JOIN dbo.tlbTransferOUT tr ON tr.idfTransferOut = tom.idfTransferOut
                                     WHERE tom.idfMaterial = m.idfMaterial
                                           AND tr.intRowStatus = 0
                                           AND tr.idfsTransferStatus IN ( 10001003 ) -- Final
                                 ) = 0
								AND @TestCompletedIndicator IS NULL
								AND @TestUnassignedIndicator IS NULL
							) --Transferred Out and Final
                          OR (
                                 (
                                     (m.datFieldCollectionDate IS NOT NULL AND GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datFieldCollectionDate))
                                     OR (m.datEnteringDate IS NOT NULL AND GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datEnteringDate))
                                 )
                                 AND
                                 m.blnAccessioned = 0
                                 AND m.idfsAccessionCondition = 10108003 -- Rejected sample
                             )
                      )
        GROUP BY m.idfMaterial;

        INSERT INTO @SampleTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000087
              AND idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @SampleStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000015
              AND idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @AccessionConditionTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000110
              AND idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @Diseases
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000019
              AND idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FunctionalAreas
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000164
              AND idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FinalResults
        SELECT ID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = ID
        WHERE (m.blnAccessioned = @AccessionedIndicator AND m.idfsAccessionCondition IS NULL AND m.idfsSampleStatus IS NULL AND @AccessionedIndicator IS NOT NULL) -- Un-accessioned samples
        OR (
                  CONVERT(NVARCHAR(MAX), FORMAT(m.datAccession, 'g', @LanguageID)) LIKE '%' + @SearchString + '%'
                  OR (
                         m.strBarcode IS NOT NULL
                         AND m.strBarcode <> ''
                         AND m.strBarcode LIKE '%' + @SearchString + '%'
                     )
                  OR (
                         m.strFieldBarcode IS NOT NULL
                         AND m.strFieldBarcode <> ''
                         AND m.strFieldBarcode LIKE '%' + @SearchString + '%'
                     )
                  OR (
                         m.strCondition IS NOT NULL
                         AND m.strCondition <> ''
                         AND m.strCondition LIKE '%' + @SearchString + '%'
                     )
                  OR (
                         m.strCalculatedCaseID IS NOT NULL
                         AND m.strCalculatedCaseID <> ''
                         AND m.strCalculatedCaseID LIKE '%' + @SearchString + '%'
                     )
                  OR (
                         m.strCalculatedHumanName IS NOT NULL
                         AND m.strCalculatedHumanName <> ''
                         AND m.strCalculatedHumanName LIKE '%' + @SearchString + '%'
                     )
              );

        INSERT INTO @FinalResults
        SELECT ID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = ID
            INNER JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
        WHERE m.idfAnimal IS NOT NULL
              AND a.strAnimalCode LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = ID
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
        WHERE tro.strBarcode LIKE '%' + @SearchString + '%';

        IF
        (
            SELECT COUNT(*) FROM @SampleTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ID
            WHERE EXISTS
            (
                SELECT ID FROM @SampleTypes WHERE m.idfsSampleType = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @SampleStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ID
            WHERE EXISTS
            (
                SELECT ID FROM @SampleStatusTypes WHERE m.idfsSampleStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @AccessionConditionTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ID
            WHERE (m.idfsSampleStatus IS NULL OR m.idfsSampleStatus = 10015007) --In Repository
            AND EXISTS
            (
                SELECT ID
                FROM @AccessionConditionTypes
                WHERE m.idfsAccessionCondition = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @FunctionalAreas
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ID
                INNER JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
            WHERE m.idfInDepartment IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @FunctionalAreas WHERE d.idfsDepartmentName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @Diseases
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ID
            WHERE m.DiseaseID IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE m.DiseaseID = ID
            );

            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ID
                INNER JOIN dbo.tlbMonitoringSession ms
                    ON ms.idfMonitoringSession = m.idfMonitoringSession
                       AND ms.intRowStatus = 0
                INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                       AND msd.intRowStatus = 0
            WHERE m.idfMonitoringSession IS NOT NULL
                  AND m.DiseaseID IS NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE msd.idfsDiagnosis = ID
            );
        END

        DECLARE @UnaccessionedSampleCount AS INT = (
                                                       SELECT COUNT(m.idfMaterial)
                                                       FROM @FinalResults res
                                                           INNER JOIN dbo.tlbMaterial m
                                                               ON m.idfMaterial = res.ID
                                                       WHERE (
                                                                 m.blnAccessioned = 0
                                                                 AND m.idfsAccessionCondition IS NULL
                                                             )
                                                   );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SELECT SampleID,
               EIDSSLaboratorySampleID,
               FavoriteIndicator,
               RootSampleID,
               ParentSampleID,
               SampleTypeID,
               SampleTypeName,
               HumanID,
               PatientOrFarmOwnerName,
               SpeciesID,
               AnimalID,
               EIDSSAnimalID,
               VectorID,
               MonitoringSessionID,
               VectorSessionID,
               HumanDiseaseReportID,
               VeterinaryDiseaseReportID,
               EIDSSReportOrSessionID,
               TestCompletedIndicator,
               DiseaseID,
               DiseaseName,
               DisplayDiseaseName, 
               FunctionalAreaID,
               FunctionalAreaName,
               FreezerSubdivisionID,
               StorageBoxPlace,
               CollectionDate,
               CollectedByPersonID,
               CollectedByOrganizationID,
               SentDate,
               SentToOrganizationID,
               SiteID,
               EIDSSLocalOrFieldSampleID,
               EnteredDate,
               OutOfRepositoryDate,
               MarkedForDispositionByPersonID,
               ReadOnlyIndicator,
               AccessionIndicator,
               AccessionDate,
               AccessionConditionTypeID,
               AccessionConditionOrSampleStatusTypeName,
               AccessionByPersonID,
               SampleStatusTypeID,
               SampleStatusDate,
               AccessionComment,
               DestructionMethodTypeID,
               DestructionDate,
               DestroyedByPersonID,
               TestAssignedCount,
               TransferredCount,
               Comment,
               CurrentSiteID,
               BirdStatusTypeID,
               MainTestID,
               SampleKindTypeID,
               PreviousSampleStatusTypeID,
               LabModuleSourceIndicator,
               RowStatus,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
               RowAction,
               RowSelectionIndicator,
               CurrentPage,
               TotalRowCount,
               UnaccessionedSampleCount
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedCaseID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedHumanName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedHumanName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strFieldBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strFieldBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.datAccession
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.datAccession
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       sampleType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       sampleType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DisplayDiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.DiseaseID IS NOT NULL THEN 
                                                               diseaseName.name
                                                           WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                                               msDiseases.DisplayDiseaseNames
                                                           WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                                                               vsDiseases.DisplayDiseaseNames
                                                           ELSE
                                                               ''
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DisplayDiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.DiseaseID IS NOT NULL THEN 
                                                               diseaseName.name
                                                           WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                                               msDiseases.DisplayDiseaseNames
                                                           WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                                                               vsDiseases.DisplayDiseaseNames
                                                           ELSE
                                                               ''
                                                       END
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'FunctionalAreaName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       functionalArea.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'FunctionalAreaName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       functionalArea.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSAnimalID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       a.strAnimalCode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSAnimalID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       a.strAnimalCode
                                               END DESC
                                     ) AS RowNum,
                   m.idfMaterial AS SampleID,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   CASE
                       WHEN f.SampleID IS NULL THEN
                           0
                       ELSE
                           1
                   END AS FavoriteIndicator,
                   m.idfRootMaterial AS RootSampleID,
                   m.idfParentMaterial AS ParentSampleID,
                   m.idfsSampleType AS SampleTypeID,
                   sampleType.name AS SampleTypeName,
                   m.idfHuman AS HumanID,
                   m.strCalculatedHumanName AS PatientOrFarmOwnerName,
                   m.idfSpecies AS SpeciesID,
                   m.idfAnimal AS AnimalID,
                   a.strAnimalCode AS EIDSSAnimalID,
                   m.idfVector AS VectorID,
                   m.idfMonitoringSession AS MonitoringSessionID,
                   m.idfVectorSurveillanceSession AS VectorSessionID,
                   m.idfHumanCase AS HumanDiseaseReportID,
                   m.idfVetCase AS VeterinaryDiseaseReportID,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   ISNULL(   IIF(
                                (
                                    SELECT COUNT(t2.idfTesting)
                                    FROM dbo.tlbTesting t2
                                    WHERE t2.idfsTestStatus IN (   10001001,
                                                                            --Final
                                                                   10001006 --Amended
                                                               )
                                          AND t2.idfMaterial = m.idfMaterial
                                          AND t2.intRowStatus = 0
                                          AND t2.blnNonLaboratoryTest = 0
                                ) > 0,
                                1,
                                0),
                             0
                         ) AS TestCompletedIndicator,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           CAST(m.DiseaseID AS NVARCHAR(MAX))
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseIdentifiers
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DiseaseIdentifiers
                       ELSE
                           '' 
                   END AS DiseaseID,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN 
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseNames
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DiseaseNames
                       ELSE
                           ''
                   END AS DiseaseName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN 
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DisplayDiseaseNames
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DisplayDiseaseNames
                       ELSE
                           ''
                   END AS DisplayDiseaseName,
                   m.idfInDepartment AS FunctionalAreaID,
                   functionalArea.name AS FunctionalAreaName,
                   m.idfSubdivision AS FreezerSubdivisionID,
                   m.StorageBoxPlace,
                   m.datFieldCollectionDate AS CollectionDate,
                   m.idfFieldCollectedByPerson AS CollectedByPersonID,
                   m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
                   m.datFieldSentDate AS SentDate,
                   m.idfSendToOffice AS SentToOrganizationID,
                   m.idfsSite AS SiteID,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   m.datEnteringDate AS EnteredDate,
                   m.datOutOfRepositoryDate AS OutOfRepositoryDate,
                   m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
                   m.blnReadOnly AS ReadOnlyIndicator,
                   m.blnAccessioned AS AccessionIndicator,
                   m.datAccession AS AccessionDate,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   (CASE
                        WHEN m.blnAccessioned = 0
                             AND m.idfsAccessionCondition IS NULL THEN
                            'Un-accessioned'
                        WHEN m.idfsSampleStatus IS NULL THEN
                            accessionConditionType.name
                        WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                            accessionConditionType.name
                        ELSE
                            sampleStatusType.name
                    END
                   ) AS AccessionConditionOrSampleStatusTypeName,
                   m.idfAccesionByPerson AS AccessionByPersonID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   m.datSampleStatusDate AS SampleStatusDate,
                   m.strCondition AS AccessionComment,
                   m.idfsDestructionMethod AS DestructionMethodTypeID,
                   m.datDestructionDate AS DestructionDate,
                   m.idfDestroyedByPerson AS DestroyedByPersonID,
                   ISNULL(
                   (
                       SELECT COUNT(NULLIF(t4.idfTesting, 0))
                       FROM dbo.tlbTesting t4
                       WHERE t4.idfsTestStatus IN (   10001003,
                                                               --In Progress
                                                      10001004 --Preliminary
                                                  )
                             AND t4.idfMaterial = m.idfMaterial
                             AND t4.intRowStatus = 0
                             AND t4.blnNonLaboratoryTest = 0
                   ),
                   0
                         ) AS TestAssignedCount,
                   ISNULL(
                   (
                       SELECT COUNT(NULLIF(tom2.idfTransferOUT, 0))
                       FROM dbo.tlbTransferOutMaterial tom2
                       WHERE tom2.idfMaterial = m.idfMaterial
                             AND tom2.intRowStatus = 0
                   ),
                   0
                         ) AS TransferredCount,
                   m.strNote AS Comment,
                   m.idfsCurrentSite AS CurrentSiteID,
                   m.idfsBirdStatus AS BirdStatusTypeID,
                   m.idfMainTest AS MainTestID,
                   m.idfsSampleKind AS SampleKindTypeID,
                   m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
                   m.LabModuleSourceIndicator,
                   m.intRowStatus AS RowStatus,
                   1 AS ReadPermissionIndicator,
                   1 AS AccessToPersonalDataPermissionIndicator,
                   1 AS AccessToGenderAndAgeDataPermissionIndicator,
                   1 AS WritePermissionIndicator,
                   1 AS DeletePermissionIndicator,
                   0 AS RowAction,
                   0 AS RowSelectionIndicator,
                   @Page AS CurrentPage,
                   COUNT(*) OVER () AS TotalRowCount,
                   @UnaccessionedSampleCount AS UnaccessionedSampleCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.ID
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN
                (
                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                ) f
                    ON m.idfMaterial = f.SampleID
                LEFT JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfMaterial = m.idfMaterial
                       AND tom.intRowStatus = 0
                LEFT JOIN dbo.tlbTransferOUT tro
                    ON tro.idfTransferOut = tom.idfTransferOut
                       AND tro.intRowStatus = 0
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN @MonitoringSessionDiseases msDiseases
                    ON msDiseases.ID = m.idfMonitoringSession
                LEFT JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                    ON diseaseName.idfsReference = m.DiseaseID
                LEFT JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                    ON functionalArea.idfsReference = d.idfsDepartmentName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
        ) AS x
        WHERE RowNum > @FirstRecord
              AND RowNum < @LastRecord
        ORDER BY RowNum
        OPTION (RECOMPILE);
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_SAMPLE_GETDetail]...';


GO
-- ================================================================================================
-- Name: USP_LAB_SAMPLE_GETDetail
--
-- Description:	Get sample detail for the edit a sample use case LUC11.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     09/05/2018 Initial release.
-- Stephen Long     01/25/2019 Added previous sample status type.
-- Stephen Long     01/30/2019 Added sample disease reference join, and removed the vector 
--                             surveillance session joins as they are not needed.
-- Stephen Long     03/01/2019 Added return code and return message.
-- Stephen Long     07/01/2019 Corrected reference type on monitoring session category.
-- Stephen Long     01/22/2020 Cleaned up stored procedure.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     05/14/2020 Added favorite indicator to the model.
-- Stephen Long     07/06/2020 Added lab module source indicato to the model.
-- Stephen Long     09/22/2020 Added accession by person name to the model.
-- Stephen Long     10/27/2020 Added test assigned count and removed test count.  Corrected joins 
--                             on collected by and sent to organization name.
-- Stephen Long     09/25/2021 Removed return code and message in the catch portion to work with 
--                             POCO.
-- Stephen Long     02/07/2022 Removed unneeded joins and corrected conversion error on species 
--                             type.
-- Stephen Long     03/10/2022 Changed note to comment and transfer count to transferred count.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     06/21/2022 Added cast to nvarchar(max) on active surveillance session samples.
-- Stephen Long     10/18/2022 Changed patient/species/vector info from field vector ID to 
--                             vector ID.
-- Stephen Long     10/21/2022 Changed from semi-colon to pipe and replaced with commas on the 
--                             disease name.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_SAMPLE_GETDetail]
		@LanguageID = N'en-US',
		@SampleID = 1,
		@TestID = NULL

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_SAMPLE_GETDetail]
(
    @LanguageID NVARCHAR(50),
    @SampleID BIGINT = NULL,
    @UserID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @ReturnMessage VARCHAR(MAX) = 'SUCCESS',
            @ReturnCode INT = 0;
    DECLARE @Favorites XML;

    BEGIN TRY
        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        SELECT m.idfMaterial AS SampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               parentLabSample.strBarcode AS ParentLaboratorySampleEIDSSID,
               m.idfsSampleType AS SampleTypeID,
               sampleType.name AS SampleTypeName,
               m.idfHuman AS HumanID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               m.idfSpecies AS SpeciesID,
               m.idfAnimal AS AnimalID,
               a.strAnimalCode AS EIDSSAnimalID,
               m.idfVector AS VectorID,
               (CASE
                    WHEN
                    (
                        NOT ISNULL(m.idfMonitoringSession, '') = ''
                        AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                    ) THEN
                        m.strCalculatedHumanName
                    WHEN
                    (
                        NOT ISNULL(m.idfMonitoringSession, '') = ''
                        AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session (Avian and Livestock)
                    ) THEN
                        speciesType.name
                    WHEN (NOT ISNULL(m.idfHumanCase, '') = '') THEN
                        m.strCalculatedHumanName
                    WHEN (NOT ISNULL(m.idfVetCase, '') = '') THEN
                        speciesType.name
                    WHEN (NOT ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                        v.strVectorID + ' - ' + vectorType.name
                    ELSE
                        ''
                END
               ) AS PatientSpeciesVectorInformation,
               m.idfMonitoringSession AS MonitoringSessionID,
               m.idfVectorSurveillanceSession AS VectorSessionID,
               m.idfHumanCase AS HumanDiseaseReportID,
               m.idfVetCase AS VeterinaryDiseaseReportID,
               vc.idfsCaseType AS VeterinaryReportTypeID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               (CASE
                    WHEN
                    (
                        NOT ISNULL(m.idfMonitoringSession, '') = ''
                        AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                    ) THEN
                        'Human'
                    WHEN
                    (
                        NOT ISNULL(m.idfMonitoringSession, '') = ''
                        AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session (Avian and Livestock)
                    ) THEN
                        'Veterinary'
                    WHEN (NOT ISNULL(m.idfHumanCase, '') = '') THEN
                        'Human'
                    WHEN (NOT ISNULL(m.idfVetCase, '') = '') THEN
                        'Veterinary'
                    WHEN (NOT ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                        'Vector'
                    ELSE
                        ''
                END
               ) AS ReportSessionTypeName,
               IIF(
                  (
                      SELECT COUNT(t2.idfTesting)
                      FROM dbo.tlbTesting t2
                      WHERE (
                                t2.idfsTestStatus = 10001001 --Final
                                OR t2.idfsTestStatus = 10001006 --Amended
                            )
                            AND t2.idfMaterial = m.idfMaterial
                  ) IS NULL,
                  0,
                  1) AS TestCompletedIndicator,
               CASE
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       CAST(msDiseases.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                       CAST(vsDiseases.DiseaseID AS NVARCHAR(MAX))
                   ELSE
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
               END AS DiseaseID,
               CASE
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       REPLACE(STRING_AGG(msDiseases.DiseaseName, '|'), '|', ', ') 
                   WHEN (NOT ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                       REPLACE(STRING_AGG(vsDiseases.DiseaseName, '|'), '|', ', ') 
                   ELSE
                       diseaseName.name
               END AS DiseaseName,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.idfSubdivision AS FreezerSubdivisionID,
               m.StorageBoxPlace,
               m.datFieldCollectionDate AS CollectionDate,
               m.idfFieldCollectedByPerson AS CollectedByPersonID,
               ISNULL(collectedByPerson.strFamilyName, N'') + ISNULL(' ' + collectedByPerson.strFirstName, '')
               + ISNULL(' ' + collectedByPerson.strSecondName, '') AS CollectedByPersonName,
               m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
               collectedByOrganization.AbbreviatedName AS CollectedByOrganizationName,
               m.datFieldSentDate AS SentDate,
               m.idfSendToOffice AS SentToOrganizationID,
               sentToOrganization.AbbreviatedName AS SentToOrganizationName,
               m.idfsSite AS SiteID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               CASE
                   WHEN m.strBarcode IS NULL THEN
                       m.strFieldBarcode
                   ELSE
                       m.strBarcode
               END AS EIDSSLaboratoryOrLocalFieldSampleID,
               m.datEnteringDate AS EnteredDate,
               m.datOutOfRepositoryDate AS OutOfRepositoryDate,
               m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
               m.blnReadOnly AS ReadOnlyIndicator,
               m.blnAccessioned AS AccessionIndicator,
               m.datAccession AS AccessionDate,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0 THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               m.idfAccesionByPerson AS AccessionByPersonID,
               ISNULL(accessionByPerson.strFamilyName, N'') + ISNULL(' ' + accessionByPerson.strFirstName, N'')
               + ISNULL(' ' + accessionByPerson.strSecondName, N'') AS AccessionByPersonName,
               m.idfsSampleStatus AS SampleStatusTypeID,
               m.strCondition AS AccessionComment,
               m.idfsDestructionMethod AS DestructionMethodTypeID,
               destructionMethodType.name AS DestructionMethodTypeName,
               m.datDestructionDate AS DestructionDate,
               m.idfDestroyedByPerson AS DestroyedByPersonID,
               ISNULL(
               (
                   SELECT COUNT(NULLIF(t4.idfTesting, 0))
                   FROM dbo.tlbTesting t4
                   WHERE t4.idfsTestStatus IN (   10001003,
                                                           --In Progress
                                                  10001004 --Preliminary
                                              )
                         AND t4.idfMaterial = m.idfMaterial
                         AND t4.intRowStatus = 0
                         AND t4.blnNonLaboratoryTest = 0
               ),
               0
                     ) AS TestAssignedCount,
               COUNT(tom.idfMaterial) AS TransferredCount,
               m.strNote AS Comment,
               m.idfsCurrentSite AS CurrentSiteID,
               m.idfsBirdStatus AS BirdStatusTypeID,
               m.idfMainTest AS MainTestID,
               m.idfsSampleKind AS SampleKindTypeID,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               m.LabModuleSourceIndicator,
               m.intRowStatus AS RowStatus
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            LEFT JOIN dbo.tlbMaterial parentLabSample
                ON parentLabSample.idfMaterial = m.idfParentMaterial
                   AND parentLabSample.intRowStatus = 0
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tlbVetCase vc
                ON vc.idfVetCase = m.idfVetCase
                   AND vc.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID) msDiseases
                ON msDiseases.MonitoringSessionID = m.idfMonitoringSession
            LEFT JOIN dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID) vsDiseases
                ON vsDiseases.VectorSurveillanceSessionID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN dbo.tlbVector AS v
                ON v.idfVector = m.idfVector
                   AND v.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbFreezerSubdivision fs
                ON fs.idfSubdivision = m.idfSubdivision
                   AND fs.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson collectedByPerson
                ON collectedByPerson.idfPerson = m.idfFieldCollectedByPerson
                   AND collectedByPerson.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_Institution_Min(@LanguageID) collectedByOrganization
                ON collectedByOrganization.idfOffice = m.idfFieldCollectedByOffice
            LEFT JOIN dbo.FN_GBL_Institution_Min(@LanguageID) sentToOrganization
                ON sentToOrganization.idfOffice = m.idfSendToOffice
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson destroyedByPerson
                ON destroyedByPerson.idfPerson = m.idfDestroyedByPerson
                   AND destroyedByPerson.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson accessionByPerson
                ON accessionByPerson.idfPerson = m.idfAccesionByPerson
                   AND accessionByPerson.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson markedForDispositionByPerson
                ON markedForDispositionByPerson.idfPerson = m.idfMarkedForDispositionByPerson
                   AND markedForDispositionByPerson.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000157) destructionMethodType
                ON destructionMethodType.idfsReference = m.idfsDestructionMethod
            LEFT JOIN dbo.tlbSpecies AS species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000086) speciesType
                ON speciesType.idfsReference = species.idfsSpeciesType
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000140) vectorType
                ON vectorType.idfsReference = v.idfsVectorType
        WHERE m.idfMaterial = @SampleID
              AND m.intRowStatus = 0
        GROUP BY m.idfMaterial,
                 m.idfRootMaterial,
                 m.idfParentMaterial,
                 f.SampleID,
                 m.idfsSampleType,
                 sampleType.name,
                 parentLabSample.strBarcode,
                 m.idfMonitoringSession,
                 m.strFieldBarcode,
                 m.strCalculatedCaseID,
                 m.strCalculatedHumanName,
                 m.idfVectorSurveillanceSession,
                 m.idfHuman,
                 m.idfSpecies,
                 m.idfAnimal,
                 m.idfVector,
                 m.idfInDepartment,
                 functionalArea.name,
                 m.strBarcode,
                 m.idfHumanCase,
                 m.idfVetCase,
                 m.datFieldCollectionDate,
                 m.idfFieldCollectedByOffice,
                 collectedByOrganization.AbbreviatedName,
                 m.idfFieldCollectedByPerson,
                 collectedByPerson.strFamilyName,
                 collectedByPerson.strFirstName,
                 collectedByPerson.strSecondName,
                 m.datFieldSentDate,
                 m.idfSendToOffice,
                 sentToOrganization.AbbreviatedName,
                 m.datEnteringDate,
                 m.datDestructionDate,
                 m.datOutOfRepositoryDate,
                 m.idfMarkedForDispositionByPerson,
                 m.datAccession,
                 m.idfsAccessionCondition,
                 accessionConditionType.name,
                 m.idfsSampleStatus,
                 sampleStatusType.name,
                 m.strCondition,
                 m.idfsDestructionMethod,
                 destructionMethodType.name,
                 m.idfDestroyedByPerson,
                 m.idfAccesionByPerson,
                 accessionByPerson.strFamilyName,
                 accessionByPerson.strFirstName,
                 accessionByPerson.strSecondName,
                 m.idfSubdivision,
                 m.StorageBoxPlace,
                 a.strAnimalCode,
                 m.blnAccessioned,
                 m.blnReadOnly,
                 ms.idfMonitoringSession,
                 ms.SessionCategoryID,
                 m.strNote,
                 m.idfsSite,
                 m.idfsCurrentSite,
                 m.idfsBirdStatus,
                 m.idfMainTest,
                 m.idfsSampleKind,
                 m.PreviousSampleStatusID,
                 m.DiseaseID,
                 m.intRowStatus,
                 vc.idfsCaseType,
                 msDiseases.DiseaseID,
                 msDiseases.DiseaseName,
                 vsDiseases.DiseaseID,
                 vsDiseases.DiseaseName,
                 diseaseName.idfsReference,
                 diseaseName.name,
                 speciesType.name,
                 v.strVectorID,
                 vectorType.name,
                 m.LabModuleSourceIndicator;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_SAMPLE_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_SAMPLE_GETList
--
-- Description:	Get sample list for the laboratory module use case LUC01.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     07/18/2018 Initial release.
-- Stephen Long	    12/19/2018 Added pagination logic.
-- Stephen Long     01/14/2019 Split out search functionality (where conditions) for better 
--                             performance on this procedure.
-- Stephen Long     01/30/2019 Added sample disease reference join and removed the vector 
--                             surveillance session joins as they are no longer needed.
-- Stephen Long     02/11/2019 Fix to the value used for the test completed indicator.  It was 
--                             using the wrong base reference value.
-- Stephen Long     02/21/2019 Changed field collection and field sent to collection and sent to 
--                             be consistent on naming.  Added parent sample ID to support the 
--                             edit transfer use case.
-- Stephen Long     03/28/2019 Removed test status 'Not Started' as criteria for the test assigned 
--                             indicator and test assigned count.
-- Stephen Long     06/22/2019 Removal of herd join and joined species on the sample table.
-- Stephen Long     07/01/2019 Corrected reference type on monitoring session category.
-- Stephen Long     07/09/2019 Added human master ID to select as placeholder for model.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     07/17/2019 Added vector join and field vector ID to the patient/species/vector.
-- Stephen Long     07/28/2019 Corrected sample kind ID where clause for aliquots/derivatives.
-- Stephen Long     08/12/2019 Corrected parenthesis for POCO error on sample kind where clause.
-- Stephen Long     08/30/2019 Removed commented out IF ELSE for individual sample.
-- Stephen Long     09/11/2019 Added sample destroyed status to sample status where clause.  Added 
--                             pagination set 0 to bring back "all" records.
-- Stephen Long     09/26/2019 Added sample list parameter and where clause.
-- Stephen Long     10/03/2019 Added comma to split sample list delimeter.
-- Stephen Long     10/17/2019 Added intRowStatus and non-laboratory test check on test completed 
--                             and test assigned indicators, and test assigned count.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     02/19/2020 Corrected left joins needing intRowStatus = 0.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     03/16/2020 Added sample status type of transferred out to include in the list.
-- Stephen Long     04/16/2020 Correction on vector surveillance session disease ID's and names.
-- Stephen Long     04/20/2020 Added vector type ID and vector species type ID to the model.
-- Stephen Long     05/05/2020 Added transfer status type ID of final when sample status type ID 
--                             is transferred out.
-- Stephen Long     06/21/2020 Added additional criteria to show samples with a final or amended 
--                             test to be selected within the accession timeframe.
-- Stephen Long     06/30/2020 Added additional criteria to pull back transferred in records after
--                             accessioned in.
-- Stephen Long     07/06/2020 Added lab module source indicator to model.
-- Stephen Long     10/27/2020 Removed test assigned indicator, and split out queries for better 
--                             performance.
-- Stephen Long     10/29/2020 Added test unassigned and test completed parameters and where 
--                             criteria.
-- Stephen Long     10/31/2020 Correct disease report/session query where criteria; prevent dups.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/15/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Correct record and unaccessioned counts.
-- Stephen Long     01/21/2021 Change counts from distinct count to group by with sub-query.
-- Stephen Long     02/08/2021 Change where criteria to handle null organization for the central
--                             data repository.
-- Stephen Long     06/28/2021 Applied new pagination parameters.
-- Mark Wilson		08/11/2021 updated to join tlbMonitoringSessionToDiagnosis
-- Stephen Long     09/18/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     02/03/2022 Corrected monitoring session to diagnosis join.
-- Stephen Long     02/07/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     02/17/2022 Fix on where criteria for test status types.
-- Stephen Long     03/10/2022 Changed note to comment and transfer count to transferred count.
-- Stephen Long     03/24/2022 Added final results table variable to account for duplicates that 
--                             may return from filtration rules.
-- Stephen Long     04/15/2022 Fix to filtration query grouping.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     05/23/2022 Added check on testing table to only look for laboratory tests and
--                             rejected samples check within sample window.
-- Stephen Long     06/20/2022 Added row status check when looking for parent samples.
-- Stephen Long     06/28/2022 Added check to include transferred out samples only when the 
--                             transfer is final and within the accession date window.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/17/2022 Added collection and entered date to the default sort order.
-- Stephen Long     09/21/2022 Removed test status types of final and amended from the in 
--                             repository samples within the accession date window check.  Changed 
--                             rejected samples to use collection date or entered date against the 
--                             date window (number of days for samples to stay in the list).
-- Stephen Long     10/04/2022 Bug fix on item 5057; don't show marked for deletion or marked 
--                             for destruction in the default listing.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- 
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_SAMPLE_GETList]
		@LanguageID = N'en-US',
		@SampleID = NULL,
		@ParentSampleID = NULL,
		@DaysFromAccessionDate = 60,
		@SampleList = NULL,
		@TestUnassignedIndicator = NULL,
		@TestCompletedIndicator = NULL,
		@UserID = 161287150000872, --rykermase
		@UserEmployeeID = 420664190000872,
		@UserSiteID = 864,
		@UserOrganizationID = 758210000000,
		@UserSiteGroupID = NULL,
		@Page = 1,
		@PageSize = 100,
		@SortColumn = N'AccessionDate',
		@SortOrder = N'ASC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_SAMPLE_GETList]
(
    @LanguageID NVARCHAR(50),
    @SampleID BIGINT = NULL,
    @ParentSampleID BIGINT = NULL,
    @DaysFromAccessionDate INT,
    @SampleList VARCHAR(MAX) = NULL,
    @TestUnassignedIndicator BIT = NULL,
    @TestCompletedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL,
    @Page INT = 1,
    @PageSize INT = 10,
    @SortColumn VARCHAR(200) = 'Default',
    @SortOrder VARCHAR(4) = 'ASC'
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @UnaccessionedCount INT = 0,
            @TotalRowCount INT = 0;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        AccessionedIndicator BIT NOT NULL,
        AccessionConditionTypeID BIGINT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        AccessionedIndicator BIT NOT NULL,
        AccessionConditionTypeID BIGINT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL, 
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL 
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL, 
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL 
    );
    DECLARE @SampleListTable TABLE (ID BIGINT NOT NULL);
    DECLARE @Favorites XML;

    IF @SampleList IS NOT NULL
        INSERT INTO @SampleListTable
        SELECT CAST([Value] AS BIGINT)
        FROM dbo.FN_GBL_SYS_SplitList(@SampleList, NULL, ',')

    BEGIN TRY
        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames, 
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames 
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames, 
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames 
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        IF @SampleID IS NOT NULL
           OR @SampleList IS NOT NULL
           OR @ParentSampleID IS NOT NULL
        BEGIN
            INSERT INTO @FinalResults
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbMaterial m
            WHERE m.intRowStatus = 0 
                  AND (
                      @SampleList IS NULL
                      OR m.idfMaterial IN (
                                              SELECT ID FROM @SampleListTable
                                          )
                  )
                  AND (
                          @SampleID IS NULL
                          OR m.idfMaterial = @SampleID
                      )
                  AND (
                          @ParentSampleID IS NULL
                          OR m.idfParentMaterial = @ParentSampleID
                      );
        END
        ELSE
        BEGIN
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbMaterial m
            WHERE m.intRowStatus = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND (
                          @UserOrganizationID IS NULL
                          OR m.idfSendToOffice = @UserOrganizationID
                      )
                  AND (
                          (
                              GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                              AND
                              (
                                  SELECT COUNT(*)
                                  FROM dbo.tlbTesting t
                                  WHERE t.idfMaterial = m.idfMaterial
                                        AND t.intRowStatus = 0
                                        AND t.blnNonLaboratoryTest = 0
                                        AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                              ) = 0
                              AND @TestUnassignedIndicator IS NOT NULL
                              AND m.blnAccessioned = 1
                              AND m.datAccession IS NOT NULL
                              AND m.idfsAccessionCondition IS NOT NULL
                              AND m.idfsSampleStatus = 10015007 -- In Repository
                          )
                          OR (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND
                                 (
                                     SELECT COUNT(*)
                                     FROM dbo.tlbTesting t
                                     WHERE t.idfMaterial = m.idfMaterial
                                           AND t.intRowStatus = 0
                                           AND t.blnNonLaboratoryTest = 0
                                           AND t.idfsTestStatus IN ( 10001001, 10001006 ) -- Final and Amended
                                 ) > 0
                                 AND @TestCompletedIndicator IS NOT NULL
                             )
                          OR (
                                 m.blnAccessioned = 0
                                 AND m.idfsAccessionCondition IS NULL
                                 AND m.idfsSampleStatus IS NULL
                                 AND @TestCompletedIndicator IS NULL
                                 AND @TestUnassignedIndicator IS NULL
                             )
                          OR ( -- Accessioned In with no in progress, preliminary tests assigned, Deleted or Destroyed
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND
                                 (
                                     SELECT COUNT(*)
                                     FROM dbo.tlbTesting t
                                     WHERE t.idfMaterial = m.idfMaterial
                                           AND t.intRowStatus = 0
                                           AND t.blnNonLaboratoryTest = 0
                                           AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                                 ) = 0
                                 AND m.idfsSampleStatus IN (10015007, 10015008, 10015009) -- In Repository, Deleted, Destroyed
                                 AND @TestUnassignedIndicator IS NULL
                                 AND @TestCompletedIndicator IS NULL
                             )
                          OR (
                                GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
								AND m.idfsSampleStatus = 10015010 -- Transferred Out
								AND
                                 (
                                     SELECT COUNT(tr.idfTransferOut)
                                     FROM dbo.tlbTransferOutMaterial tom
                                     INNER JOIN dbo.tlbTransferOUT tr ON tr.idfTransferOut = tom.idfTransferOut
                                     WHERE tom.idfMaterial = m.idfMaterial
                                           AND tr.intRowStatus = 0
                                           AND tr.idfsTransferStatus IN ( 10001003 ) -- Final
                                 ) = 0
								AND @TestCompletedIndicator IS NULL
								AND @TestUnassignedIndicator IS NULL
							) --Transferred Out and Final
                          OR (
                                 (
                                     (m.datFieldCollectionDate IS NOT NULL AND GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datFieldCollectionDate))
                                     OR (m.datEnteringDate IS NOT NULL AND GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datEnteringDate))
                                 )
                                 AND
                                 m.blnAccessioned = 0
                                 AND m.idfsAccessionCondition = 10108003 -- Rejected sample
                             )
                      );
        END

        -- =======================================================================================
        -- CONFIGURABLE SITE FILTRATION RULES
        -- 
        -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        IF @UserOrganizationID IS NOT NULL --First-level sites (central data repository, general data repository, etc.) do not filter results.
        BEGIN
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = @UserSiteGroupID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND @UserSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfSiteGroup = @UserSiteGroupID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND @UserSiteGroupID IS NOT NULL
                  AND sgs.idfsSite = m.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRule ar
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbMaterial m
                    ON m.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND m.idfsSite = ar.GrantingActorSiteID;

            DECLARE @UserEmployeeGroupID BIGINT = (
                                                      SELECT TOP 1
                                                          egm.idfEmployeeGroup
                                                      FROM dbo.tlbEmployeeGroupMember egm
                                                      WHERE egm.idfEmployee = @UserEmployeeID
                                                            AND egm.intRowStatus = 0
                                                  );

            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRuleActor ara
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
                       AND ar.GrantingActorSiteID IS NOT NULL
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfsSite = ar.GrantingActorSiteID
                       AND m.intRowStatus = 0
            WHERE ara.ActorEmployeeGroupID = @UserEmployeeGroupID
                  AND ara.intRowStatus = 0;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRule ar
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbMaterial m
                    ON m.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND m.idfsSite = ar.GrantingActorSiteID;
        END;

        IF @SortColumn <> 'Query'
        BEGIN
        INSERT INTO @FinalResults
        SELECT ID,
               AccessionedIndicator,
               AccessionConditionTypeID,
               CASE
                   WHEN EXISTS
                        (
                            SELECT ReadPermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT AccessToPersonalDataPermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT AccessToGenderAndAgeDataPermissionIndicator
                            FROM @Results
                            WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT WritePermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT DeletePermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
        WHERE res.ReadPermissionIndicator = 1
              AND m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                          AND
                          (
                              SELECT COUNT(*)
                              FROM dbo.tlbTesting t
                              WHERE t.idfMaterial = m.idfMaterial
                                    AND t.intRowStatus = 0
                                    AND t.blnNonLaboratoryTest = 0
                                    AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                          ) = 0
                          AND @TestUnassignedIndicator IS NOT NULL
                          AND m.blnAccessioned = 1
                          AND m.datAccession IS NOT NULL
                          AND m.idfsAccessionCondition IS NOT NULL
                          AND m.idfsSampleStatus = 10015007 -- In Repository
                      )
                      OR (
                             GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                             AND
                             (
                                 SELECT COUNT(*)
                                 FROM dbo.tlbTesting t
                                 WHERE t.idfMaterial = m.idfMaterial
                                       AND t.intRowStatus = 0
                                       AND t.blnNonLaboratoryTest = 0
                                       AND t.idfsTestStatus IN ( 10001001, 10001006 ) -- Final and Amended
                             ) > 0
                             AND @TestCompletedIndicator IS NOT NULL
                         )
                      OR (
                             m.blnAccessioned = 0
                             AND m.idfsAccessionCondition IS NULL
                             AND m.idfsSampleStatus IS NULL
                             AND @TestCompletedIndicator IS NULL
                             AND @TestUnassignedIndicator IS NULL
                         )
                      OR (
                             GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                             AND
                             (
                                 SELECT COUNT(*)
                                 FROM dbo.tlbTesting t
                                 WHERE t.idfMaterial = m.idfMaterial
                                       AND t.intRowStatus = 0
                                       AND t.blnNonLaboratoryTest = 0
                                       AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                             ) = 0
                             AND m.idfsSampleStatus IN (10015007, 10015008, 10015009) -- In Repository, Deleted, Destroyed
                             AND @TestUnassignedIndicator IS NULL
                             AND @TestCompletedIndicator IS NULL
                         )
                      OR (
                             GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
							 AND m.idfsSampleStatus = 10015010 -- Transferred Out
							 AND
                             (
                                 SELECT COUNT(tr.idfTransferOut)
                                 FROM dbo.tlbTransferOutMaterial tom
                                 INNER JOIN dbo.tlbTransferOUT tr ON tr.idfTransferOut = tom.idfTransferOut
                                 WHERE tom.idfMaterial = m.idfMaterial
                                       AND tr.intRowStatus = 0
                                       AND tr.idfsTransferStatus IN ( 10001003 ) -- Final
                             ) = 0
							 AND @TestCompletedIndicator IS NULL
							 AND @TestUnassignedIndicator IS NULL
						 ) --Transferred Out and Final
                      OR (
                             (
                                 (m.datFieldCollectionDate IS NOT NULL AND GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datFieldCollectionDate))
                                 OR (m.datEnteringDate IS NOT NULL AND GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datEnteringDate))
                             )
                             AND
                             m.blnAccessioned = 0
                             AND m.idfsAccessionCondition = 10108003 -- Rejected sample
                         )
                  )
        GROUP BY ID,
                 AccessionedIndicator,
                 AccessionConditionTypeID;
        END

        SET @TotalRowCount =
        (
            SELECT COUNT(ID) FROM @FinalResults
        );
        SET @UnaccessionedCount =
        (
            SELECT COUNT(ID)
            FROM @FinalResults
            WHERE AccessionedIndicator = 0
                  AND AccessionConditionTypeID IS NULL
        );

        IF @SortColumn = 'Default' OR @SortColumn = 'Query'
        BEGIN
            SELECT m.idfMaterial AS SampleID,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   CASE
                       WHEN f.SampleID IS NULL THEN
                           0
                       ELSE
                           1
                   END AS FavoriteIndicator,
                   m.idfRootMaterial AS RootSampleID,
                   m.idfParentMaterial AS ParentSampleID,
                   m.idfsSampleType AS SampleTypeID,
                   sampleType.name AS SampleTypeName,
                   m.idfHuman AS HumanID,
                   m.strCalculatedHumanName AS PatientOrFarmOwnerName,
                   m.idfSpecies AS SpeciesID,
                   m.idfAnimal AS AnimalID,
                   a.strAnimalCode AS EIDSSAnimalID,
                   m.idfVector AS VectorID,
                   m.idfMonitoringSession AS MonitoringSessionID,
                   m.idfVectorSurveillanceSession AS VectorSessionID,
                   m.idfHumanCase AS HumanDiseaseReportID,
                   m.idfVetCase AS VeterinaryDiseaseReportID,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   '' AS ReportOrSessionTypeName,
                   m.TestCompletedIndicator,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           CAST(m.DiseaseID AS NVARCHAR(MAX))
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseIdentifiers
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DiseaseIdentifiers
                       ELSE
                           '' 
                   END AS DiseaseID,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN 
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseNames
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DiseaseNames
                       ELSE
                           ''
                   END AS DiseaseName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN 
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DisplayDiseaseNames
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DisplayDiseaseNames
                       ELSE
                           ''
                   END AS DisplayDiseaseName,
                   m.idfInDepartment AS FunctionalAreaID,
                   functionalArea.name AS FunctionalAreaName,
                   m.idfSubdivision AS FreezerSubdivisionID,
                   m.StorageBoxPlace,
                   m.datFieldCollectionDate AS CollectionDate,
                   m.idfFieldCollectedByPerson AS CollectedByPersonID,
                   m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
                   m.datFieldSentDate AS SentDate,
                   m.idfSendToOffice AS SentToOrganizationID,
                   m.idfsSite AS SiteID,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   m.datEnteringDate AS EnteredDate,
                   m.datOutOfRepositoryDate AS OutOfRepositoryDate,
                   m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
                   m.blnReadOnly AS ReadOnlyIndicator,
                   m.blnAccessioned AS AccessionIndicator,
                   m.datAccession AS AccessionDate,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   CASE
                       WHEN m.blnAccessioned = 0
                            AND m.idfsAccessionCondition IS NULL THEN
                           'Un-accessioned'
                       WHEN m.idfsSampleStatus IS NULL THEN
                           accessionConditionType.name
                       WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                           accessionConditionType.name
                       ELSE
                           sampleStatusType.name
                   END AS AccessionConditionOrSampleStatusTypeName,
                   m.idfAccesionByPerson AS AccessionByPersonID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   m.datSampleStatusDate AS SampleStatusDate,
                   m.strCondition AS AccessionComment,
                   m.idfsDestructionMethod AS DestructionMethodTypeID,
                   m.datDestructionDate AS DestructionDate,
                   m.idfDestroyedByPerson AS DestroyedByPersonID,
                   CASE
                       WHEN m.TestUnassignedIndicator = 1 THEN
                           0
                       ELSE
                           1
                   END AS TestAssignedCount,
                   m.TransferIndicator AS TransferredCount,
                   m.strNote AS Comment,
                   m.idfsCurrentSite AS CurrentSiteID,
                   m.idfsBirdStatus AS BirdStatusTypeID,
                   m.idfMainTest AS MainTestID,
                   m.idfsSampleKind AS SampleKindTypeID,
                   m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
                   m.LabModuleSourceIndicator,
                   m.intRowStatus AS RowStatus,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator,
                   0 AS RowAction,
                   0 AS RowSelectionIndicator,
                   @Page AS CurrentPage,
                   @TotalRowCount AS TotalRowCount,
                   @UnaccessionedCount AS UnaccessionedSampleCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.ID
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN
                (
                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                    FROM @favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                ) f
                    ON m.idfMaterial = f.SampleID
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                    ON diseaseName.idfsReference = m.DiseaseID
                LEFT JOIN @MonitoringSessionDiseases msDiseases
                    ON msDiseases.ID = m.idfMonitoringSession
                LEFT JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                    ON functionalArea.idfsReference = d.idfsDepartmentName
            ORDER BY m.blnAccessioned,
                     m.idfsSampleStatus DESC,
                     m.idfsAccessionCondition, 
                     m.datFieldCollectionDate DESC, 
                     m.datEnteringDate DESC OFFSET @PageSize * (@Page - 1) ROWS FETCH NEXT @PageSize ROWS ONLY
                     OPTION (RECOMPILE);
        END
        ELSE
        BEGIN
            SELECT m.idfMaterial AS SampleID,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   CASE
                       WHEN f.SampleID IS NULL THEN
                           0
                       ELSE
                           1
                   END AS FavoriteIndicator,
                   m.idfRootMaterial AS RootSampleID,
                   m.idfParentMaterial AS ParentSampleID,
                   m.idfsSampleType AS SampleTypeID,
                   sampleType.name AS SampleTypeName,
                   m.idfHuman AS HumanID,
                   m.strCalculatedHumanName AS PatientOrFarmOwnerName,
                   m.idfSpecies AS SpeciesID,
                   m.idfAnimal AS AnimalID,
                   a.strAnimalCode AS EIDSSAnimalID,
                   m.idfVector AS VectorID,
                   m.idfMonitoringSession AS MonitoringSessionID,
                   m.idfVectorSurveillanceSession AS VectorSessionID,
                   m.idfHumanCase AS HumanDiseaseReportID,
                   m.idfVetCase AS VeterinaryDiseaseReportID,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   '' AS ReportOrSessionTypeName,
                   m.TestCompletedIndicator,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           CAST(m.DiseaseID AS NVARCHAR(MAX))
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseIdentifiers
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DiseaseIdentifiers
                       ELSE
                           '' 
                   END AS DiseaseID,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN 
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseNames
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DiseaseNames
                       ELSE
                           ''
                   END AS DiseaseName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN 
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DisplayDiseaseNames
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DisplayDiseaseNames
                       ELSE
                           ''
                   END AS DisplayDiseaseName,
                   m.idfInDepartment AS FunctionalAreaID,
                   functionalArea.name AS FunctionalAreaName,
                   m.idfSubdivision AS FreezerSubdivisionID,
                   m.StorageBoxPlace,
                   m.datFieldCollectionDate AS CollectionDate,
                   m.idfFieldCollectedByPerson AS CollectedByPersonID,
                   m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
                   m.datFieldSentDate AS SentDate,
                   m.idfSendToOffice AS SentToOrganizationID,
                   m.idfsSite AS SiteID,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   m.datEnteringDate AS EnteredDate,
                   m.datOutOfRepositoryDate AS OutOfRepositoryDate,
                   m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
                   m.blnReadOnly AS ReadOnlyIndicator,
                   m.blnAccessioned AS AccessionIndicator,
                   m.datAccession AS AccessionDate,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   CASE
                       WHEN m.blnAccessioned = 0
                            AND m.idfsAccessionCondition IS NULL THEN
                           'Un-accessioned'
                       WHEN m.idfsSampleStatus IS NULL THEN
                           accessionConditionType.name
                       WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                           accessionConditionType.name
                       ELSE
                           sampleStatusType.name
                   END AS AccessionConditionOrSampleStatusTypeName,
                   m.idfAccesionByPerson AS AccessionByPersonID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   m.datSampleStatusDate AS SampleStatusDate,
                   m.strCondition AS AccessionComment,
                   m.idfsDestructionMethod AS DestructionMethodTypeID,
                   m.datDestructionDate AS DestructionDate,
                   m.idfDestroyedByPerson AS DestroyedByPersonID,
                   CASE
                       WHEN m.TestUnassignedIndicator = 1 THEN
                           0
                       ELSE
                           1
                   END AS TestAssignedCount,
                   m.TransferIndicator AS TransferredCount,
                   m.strNote AS Comment,
                   m.idfsCurrentSite AS CurrentSiteID,
                   m.idfsBirdStatus AS BirdStatusTypeID,
                   m.idfMainTest AS MainTestID,
                   m.idfsSampleKind AS SampleKindTypeID,
                   m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
                   m.LabModuleSourceIndicator,
                   m.intRowStatus AS RowStatus,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator,
                   0 AS RowAction,
                   0 AS RowSelectionIndicator,
                   @Page AS CurrentPage,
                   @TotalRowCount AS TotalRowCount,
                   @UnaccessionedCount AS UnaccessionedSampleCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.ID
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN
                (
                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                    FROM @favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                ) f
                    ON m.idfMaterial = f.SampleID
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                    ON diseaseName.idfsReference = m.DiseaseID
                LEFT JOIN @MonitoringSessionDiseases msDiseases
                    ON msDiseases.ID = m.idfMonitoringSession
                LEFT JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                    ON functionalArea.idfsReference = d.idfsDepartmentName
            ORDER BY CASE
                         WHEN @SortColumn = 'EIDSSReportOrSessionID'
                              AND @SortOrder = 'ASC' THEN
                             m.strCalculatedCaseID
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'EIDSSReportOrSessionID'
                              AND @SortOrder = 'DESC' THEN
                             m.strCalculatedCaseID
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'PatientOrFarmOwnerName'
                              AND @SortOrder = 'ASC' THEN
                             m.strCalculatedHumanName
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'PatientOrFarmOwnerName'
                              AND @SortOrder = 'DESC' THEN
                             m.strCalculatedHumanName
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                              AND @SortOrder = 'ASC' THEN
                             m.strFieldBarcode
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                              AND @SortOrder = 'DESC' THEN
                             m.strFieldBarcode
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'AccessionDate'
                              AND @SortOrder = 'ASC' THEN
                             m.datAccession
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'AccessionDate'
                              AND @SortOrder = 'DESC' THEN
                             m.datAccession
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'SampleTypeName'
                              AND @SortOrder = 'ASC' THEN
                             sampleType.name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'SampleTypeName'
                              AND @SortOrder = 'DESC' THEN
                             sampleType.name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'DisplayDiseaseName'
                              AND @SortOrder = 'ASC' THEN
                             CASE
                                 WHEN m.DiseaseID IS NOT NULL THEN 
                                     diseaseName.name
                                 WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                     msDiseases.DisplayDiseaseNames
                                 WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                                     vsDiseases.DisplayDiseaseNames
                                 ELSE
                                     ''
                             END
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'DisplayDiseaseName'
                              AND @SortOrder = 'DESC' THEN
                             CASE
                                 WHEN m.DiseaseID IS NOT NULL THEN 
                                     diseaseName.name
                                 WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                     msDiseases.DisplayDiseaseNames
                                 WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                                     vsDiseases.DisplayDiseaseNames
                                 ELSE
                                     ''
                             END
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                              AND @SortOrder = 'ASC' THEN
                             m.strBarcode
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                              AND @SortOrder = 'DESC' THEN
                             m.strBarcode
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                              AND @SortOrder = 'ASC' THEN
                             CASE
                                 WHEN m.blnAccessioned = 0
                                      AND m.idfsAccessionCondition IS NULL THEN
                                     'Un-accessioned'
                                 WHEN m.idfsSampleStatus IS NULL THEN
                                     accessionConditionType.name
                                 WHEN m.idfsSampleStatus = 10015007 --In Repository
                     THEN
                                     accessionConditionType.name
                                 ELSE
                                     sampleStatusType.name
                             END
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                              AND @SortOrder = 'DESC' THEN
                             CASE
                                 WHEN m.blnAccessioned = 0
                                      AND m.idfsAccessionCondition IS NULL THEN
                                     'Un-accessioned'
                                 WHEN m.idfsSampleStatus IS NULL THEN
                                     accessionConditionType.name
                                 WHEN m.idfsSampleStatus = 10015007 --In Repository
                     THEN
                                     accessionConditionType.name
                                 ELSE
                                     sampleStatusType.name
                             END
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'FunctionalAreaName'
                              AND @SortOrder = 'ASC' THEN
                             functionalArea.name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'FunctionalAreaName'
                              AND @SortOrder = 'DESC' THEN
                             functionalArea.name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'EIDSSAnimalID'
                              AND @SortOrder = 'ASC' THEN
                             a.strAnimalCode
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'EIDSSAnimalID'
                              AND @SortOrder = 'DESC' THEN
                             a.strAnimalCode
                     END DESC OFFSET @PageSize * (@Page - 1) ROWS FETCH NEXT @PageSize ROWS ONLY
           OPTION (RECOMPILE);
        END
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_APPROVAL_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_APPROVAL_ADVANCED_SEARCH_GETList
--
-- Description:	Get approval advanced search list for the laboratory module use case LUC13.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/27/2019 Initial relase.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/16/2020 Added sample and test list parameters and where clause criteria.
-- Stephen Long     04/20/2020 Removed farm and herd left joins.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/30/2020 Remove unneeded joins.
-- Stephen Long     11/30/2020 Changed site list to site ID and bigint and made required.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     11/18/2021 Added action requested ID to the query.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     01/03/2022 Corrected sample status type to use the correct field.
-- Stephen Long     02/10/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/11/2022 Changed monitoring session disease join from inner to left.
-- Stephen Long     08/12/2022 Removed where criteria for surveillance type of both; de-activated 
--                             base reference record.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     09/28/2022 Added translated value for action requested name.
-- Stephen Long     10/11/2022 Added check for closed batch test status to display test records 
--                             ready for validation.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     10/23/2022 Added check for non-laboratory test indicator of false.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_APPROVAL_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @SampleList VARCHAR(MAX) = NULL,
    @TestList VARCHAR(MAX) = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL,
    @Page INT = 1,
    @PageSize INT = 10,
    @SortColumn VARCHAR(200) = 'EIDSSLaboratorySampleID',
    @SortOrder VARCHAR(4) = 'DESC'
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL, 
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL 
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL, 
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL 
    );
    DECLARE @Results TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @FirstRecord INT = (@Page - 1) * @PageSize,
            @LastRecord INT = (@Page * @PageSize + 1),
            @LanguageCode BIGINT,
            @SampleDeletion NVARCHAR(MAX),
            @SampleDestruction NVARCHAR(MAX),
            @TestDeletion NVARCHAR(MAX),
            @Validation NVARCHAR(MAX);

    BEGIN TRY
        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);
        SET @SampleDeletion =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 812
        );
        SET @SampleDestruction =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 1040
        );
        SET @TestDeletion =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 4493
        );
        SET @Validation =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 4492
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames, 
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames 
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames, 
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames 
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfsSampleStatus = 10015002 --Marked for Deletion 
                      OR m.idfsSampleStatus = 10015003 --Marked for Destruction
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      m.idfSendToOffice = @UserOrganizationID
                      OR @UserOrganizationID IS NULL
                  )
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  );

        -- =======================================================================================
        -- CONFIGURABLE SITE FILTRATION RULES
        -- 
        -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the default rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        INSERT INTO @FinalResults
        SELECT m.idfMaterial,
               NULL,
               CASE
                   WHEN EXISTS
                        (
                            SELECT ReadPermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT AccessToPersonalDataPermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT AccessToGenderAndAgeDataPermissionIndicator
                            FROM @Results
                            WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT WritePermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT DeletePermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator = 1
              AND (
                      (m.idfMaterial IN (
                                            SELECT CAST([Value] AS BIGINT)
                                            FROM dbo.FN_GBL_SYS_SplitList(@SampleList, NULL, ',')
                                        )
                      )
                      OR (@SampleList IS NULL)
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.blnAccessioned = @AccessionedIndicatorList
                              AND m.idfsAccessionCondition IS NULL
                          )
                          OR (
                                 @AccessionedIndicatorList IS NULL
                                 AND @SampleStatusTypeList IS NULL
                             )
                      )
                      OR (
                             (
                                 (m.idfsSampleStatus IN (
                                                            SELECT CAST([Value] AS BIGINT)
                                                            FROM dbo.FN_GBL_SYS_SplitList(
                                                                                             @SampleStatusTypeList,
                                                                                             NULL,
                                                                                             ','
                                                                                         )
                                                        )
                                 )
                                 OR (
                                        m.idfsAccessionCondition IN (
                                                                        SELECT CAST([Value] AS BIGINT)
                                                                        FROM dbo.FN_GBL_SYS_SplitList(
                                                                                                         @SampleStatusTypeList,
                                                                                                         NULL,
                                                                                                         ','
                                                                                                     )
                                                                    )
                                        AND (
                                                m.idfsSampleStatus IS NULL
                                                OR m.idfsSampleStatus = 10015007 --In Repository
                                            )
                                    )
                             )
                             OR (
                                    @SampleStatusTypeList IS NULL
                                    AND @AccessionedIndicatorList IS NULL
                                )
                         )
                  )
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IN (
                                           SELECT CAST([Value] AS BIGINT)
                                           FROM dbo.FN_GBL_SYS_SplitList(vsDiseases.DiseaseIdentifiers, NULL, ',')
                                       )
                      OR m.DiseaseID = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR (@EIDSSReportCampaignOrSessionID IS NULL)
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      (m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%')
                      OR (@FarmOwnerName IS NULL)
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
        GROUP BY m.idfMaterial;

        DELETE FROM @Results;

        -- Test Approvals --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      m.idfSendToOffice = @UserOrganizationID
                      OR @UserOrganizationID IS NULL
                  )
              AND (
                      (
                          m.blnAccessioned = 1
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  );

        -- =======================================================================================
        -- CONFIGURABLE SITE FILTRATION RULES
        -- 
        -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the default rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.blnAccessioned = 1
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.blnAccessioned = 1
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.blnAccessioned = 1
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.blnAccessioned = 1
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.blnAccessioned = 1
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.blnAccessioned = 1
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.blnAccessioned = 1
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.blnAccessioned = 1
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.blnAccessioned = 0
                             AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        INSERT INTO @FinalResults
        SELECT m.idfMaterial,
               t.idfTesting,
               CASE
                   WHEN EXISTS
                        (
                            SELECT ReadPermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT AccessToPersonalDataPermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT AccessToGenderAndAgeDataPermissionIndicator
                            FROM @Results
                            WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT WritePermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT DeletePermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END
        FROM @Results res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.TestID
            INNER JOIN dbo.tlbMaterial m
                ON t.idfMaterial = m.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator = 1
              AND (
                      t.idfTesting IN (
                                          SELECT CAST([Value] AS BIGINT)
                                          FROM dbo.FN_GBL_SYS_SplitList(@TestList, NULL, ',')
                                      )
                      OR @TestList IS NULL
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.blnAccessioned = @AccessionedIndicatorList
                              AND m.idfsAccessionCondition IS NULL
                          )
                          OR (
                                 @AccessionedIndicatorList IS NULL
                                 AND @SampleStatusTypeList IS NULL
                             )
                      )
                      OR (
                             (
                                 (m.idfsSampleStatus IN (
                                                            SELECT CAST([Value] AS BIGINT)
                                                            FROM dbo.FN_GBL_SYS_SplitList(
                                                                                             @SampleStatusTypeList,
                                                                                             NULL,
                                                                                             ','
                                                                                         )
                                                        )
                                 )
                                 OR (
                                        m.idfsAccessionCondition IN (
                                                                        SELECT CAST([Value] AS BIGINT)
                                                                        FROM dbo.FN_GBL_SYS_SplitList(
                                                                                                         @SampleStatusTypeList,
                                                                                                         NULL,
                                                                                                         ','
                                                                                                     )
                                                                    )
                                        AND (
                                                m.idfsSampleStatus IS NULL
                                                OR m.idfsSampleStatus = 10015007 --In Repository
                                            )
                                    )
                             )
                             OR (
                                    @SampleStatusTypeList IS NULL
                                    AND @AccessionedIndicatorList IS NULL
                                )
                         )
                  )
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IN (
                                           SELECT CAST([Value] AS BIGINT)
                                           FROM dbo.FN_GBL_SYS_SplitList(vsDiseases.DiseaseIdentifiers, NULL, ',')
                                       )
                      OR m.DiseaseID = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND @TestResultDateTo
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR (@EIDSSReportCampaignOrSessionID IS NULL)
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
        GROUP BY t.idfTesting,
                 m.idfMaterial;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SELECT ActionRequestedID,
               ActionRequested,
               SampleID,
               EIDSSLaboratorySampleID,
               EIDSSReportOrSessionID,
               EIDSSAnimalID,
               PatientOrFarmOwnerName,
               SampleTypeName,
               DiseaseID,
               DiseaseName,
               DisplayDiseaseName, 
               TestID,
               TestNameTypeID,
               TestCategoryTypeID,
               TestResultTypeID,
               TestStatusTypeID,
               TestNameTypeName,
               TestStatusTypeName,
               TestResultTypeName,
               ResultEnteredByUserID,
               AccessionDate,
               SampleStatusTypeID,
               AccessionConditionOrSampleStatusTypeName,
               ResultDate,
               PreviousSampleStatusTypeID,
               PreviousTestStatusTypeID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
               RowStatus,
               RowAction,
               RowSelectionIndicator,
               CurrentPage,
               TotalRowCount
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'ActionRequested'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
                                          THEN
                                                               @SampleDeletion
                                                           WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
                                          THEN
                                                               @SampleDestruction
                                                           WHEN t.idfsTestStatus = 10001004 --Preliminary
                                          THEN
                                                               @Validation
                                                           WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
                                          THEN
                                                               @TestDeletion
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ActionRequested'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
                                               THEN
                                                               @SampleDeletion
                                                           WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
                                               THEN
                                                               @SampleDestruction
                                                           WHEN t.idfsTestStatus = 10001004 --Preliminary
                                               THEN
                                                               @Validation
                                                           WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
                                               THEN
                                                               @TestDeletion
                                                       END
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedCaseID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedHumanName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedHumanName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       sampleType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       sampleType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DisplayDiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.DiseaseID IS NOT NULL THEN
                                                               diseaseName.name
                                                           WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                                               msDiseases.DisplayDiseaseNames
                                                           WHEN
                                                           (
                                                               m.DiseaseID IS NULL
                                                               AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                                                           ) THEN
                                                               vsDiseases.DisplayDiseaseNames
                                                           ELSE
                                                               ''
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DisplayDiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.DiseaseID IS NOT NULL THEN
                                                               diseaseName.name
                                                           WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                                               msDiseases.DisplayDiseaseNames
                                                           WHEN
                                                           (
                                                               m.DiseaseID IS NULL
                                                               AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                                                           ) THEN
                                                               vsDiseases.DisplayDiseaseNames
                                                           ELSE
                                                               ''
                                                       END
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testNameType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testNameType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testStatusType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testStatusType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testResultType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testResultType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       t.datConcludedDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       t.datConcludedDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.datAccession
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.datAccession
                                               END DESC
                                     ) AS RowNum,
                   CASE
                       WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
                   THEN
                           m.idfsSampleStatus
                       WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
                   THEN
                           m.idfsSampleStatus
                       WHEN t.idfsTestStatus = 10001004 --Preliminary
                   THEN
                           t.idfsTestStatus
                       WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
                   THEN
                           t.idfsTestStatus
                   END AS ActionRequestedID,
                   CASE
                       WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
                   THEN
                           @SampleDeletion
                       WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
                   THEN
                           @SampleDestruction
                       WHEN t.idfsTestStatus = 10001004 --Preliminary
                   THEN
                           @Validation
                       WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
                   THEN
                           @TestDeletion
                   END AS ActionRequested,
                   m.idfMaterial AS SampleID,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   a.strAnimalCode AS EIDSSAnimalID,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                           '********'
                       ELSE
                           m.strCalculatedHumanName
                   END AS PatientOrFarmOwnerName,
                   sampleType.name AS SampleTypeName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           CAST(m.DiseaseID AS NVARCHAR(MAX))
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseIdentifiers
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DiseaseIdentifiers
                       ELSE
                           ''
                   END AS DiseaseID,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseNames
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DiseaseNames
                       ELSE
                           ''
                   END AS DiseaseName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN 
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DisplayDiseaseNames
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DisplayDiseaseNames
                       ELSE
                           ''
                   END AS DisplayDiseaseName,
                   t.idfTesting AS TestID,
                   t.idfsTestName AS TestNameTypeID,
                   t.idfsTestCategory AS TestCategoryTypeID,
                   t.idfsTestResult AS TestResultTypeID,
                   t.idfsTestStatus AS TestStatusTypeID,
                   testNameType.name AS TestNameTypeName,
                   testStatusType.name AS TestStatusTypeName,
                   testResultType.name AS TestResultTypeName,
                   u.idfUserID AS ResultEnteredByUserID,
                   m.datAccession AS AccessionDate,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   (CASE
                        WHEN m.blnAccessioned = 0
                             AND m.idfsAccessionCondition IS NULL THEN
                            'Un-accessioned'
                        WHEN m.idfsSampleStatus IS NULL THEN
                            accessionConditionType.name
                        WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                            accessionConditionType.name
                        ELSE
                            sampleStatusType.name
                    END
                   ) AS AccessionConditionOrSampleStatusTypeName,
                   t.datConcludedDate AS ResultDate,
                   m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
                   NULL AS PreviousTestStatusTypeID,
                   m.intRowStatus AS RowStatus,
                   res.ReadPermissionIndicator,
                   res.AccessToPersonalDataPermissionIndicator,
                   res.AccessToGenderAndAgeDataPermissionIndicator,
                   res.WritePermissionIndicator,
                   res.DeletePermissionIndicator,
                   0 AS RowAction,
                   0 AS RowSelectionIndicator,
                   @Page AS CurrentPage,
                   COUNT(*) OVER () AS TotalRowCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfTesting = res.TestID
                       AND t.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                    ON diseaseName.idfsReference = m.DiseaseID
                LEFT JOIN @MonitoringSessionDiseases msDiseases
                    ON msDiseases.ID = m.idfMonitoringSession
                LEFT JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN dbo.tstUserTable u
                    ON u.idfPerson = t.idfResultEnteredByPerson
                       AND u.intRowStatus = 0
        ) AS x
        WHERE RowNum > @FirstRecord
              AND RowNum < @LastRecord
        ORDER BY RowNum;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_APPROVAL_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_APPROVAL_GETList
--
-- Description:	Get laboratory approval list for the various lab use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     12/03/2018 Initial release.
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     01/25/2019 Added previous sample and test status types.
-- Stephen Long     01/30/2019 Added sample disease reference join and removed the vector 
--                             surveillance session joins as they are no longer needed.
-- Stephen Long     02/19/2019 Split out selects between sample and test and added test deletion 
--                             as one of the options.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     08/30/2019 Added organization ID parameter and where clause changes for site.
-- Stephen Long     09/14/2019 Added pagination set 0 to bring back "all" records.
-- Stephen Long     09/28/2019 Updated test deletion base reference value to newly added entry.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     09/04/2020 Updated reference value for marked for deletion test status.
-- Stephen Long     11/30/2020 Removed site ID parameter and updated where criteria to use 
--                             sent to organization ID.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     11/18/2021 Added sample ID and test ID parameters and action requested ID to 
--                             the query.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     01/03/2022 Corrected sample status type to use the correct field.
-- Stephen Long     01/10/2022 Corrected join on user table, removed identity column, and changed 
--                             default sort order.
-- Stephen Long     02/03/2022 Corrected monitoring session to diagnosis join.
-- Stephen Long     02/10/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to vector session diseases.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     09/28/2022 Added translated value for action requested name.
-- Stephen Long     10/11/2022 Added check for closed batch test status to display test records 
--                             ready for validation.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     10/23/2022 Added check for non-laboratory test indicator of false.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_APPROVAL_GETList]
(
    @LanguageID NVARCHAR(50),
    @SampleID BIGINT = NULL,
    @TestID BIGINT = NULL,
    @UserOrganizationID BIGINT,
    @Page INT = 1,
    @PageSize INT = 10,
    @SortColumn VARCHAR(200) = 'ActionRequested',
    @SortOrder VARCHAR(4) = 'DESC'
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Results TABLE
    (
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL
    );
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL, 
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL 
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL, 
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL 
    );
    DECLARE @FirstRecord INT = (@Page - 1) * @PageSize,
            @LastRecord INT = (@Page * @PageSize + 1),
            @TotalRowCount INT = 0,
            @LanguageCode BIGINT,
            @SampleDeletion NVARCHAR(MAX),
            @SampleDestruction NVARCHAR(MAX),
            @TestDeletion NVARCHAR(MAX),
            @Validation NVARCHAR(MAX);

    BEGIN TRY
        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);
        SET @SampleDeletion =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 812
        );
        SET @SampleDestruction =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 1040
        );
        SET @TestDeletion =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 4493
        );
        SET @Validation =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 4492
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames, 
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames 
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames, 
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames 
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND m.idfsSampleStatus IN (   10015002, --Marked for Deletion 
                                            10015003
                                        ) --Marked for Destruction
              AND m.idfSendToOffice = @UserOrganizationID
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  );

        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON t.idfMaterial = m.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfSendToOffice = @UserOrganizationID
              AND (
                      t.idfTesting = @TestID
                      OR @TestID IS NULL
                  );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SET @TotalRowCount =
        (
            SELECT COUNT(*) FROM @Results
        );

        SELECT ActionRequestedID,
               ActionRequested,
               SampleID,
               EIDSSLaboratorySampleID,
               EIDSSReportOrSessionID,
               EIDSSAnimalID,
               PatientOrFarmOwnerName,
               SampleTypeName,
               DiseaseID,
               DiseaseName,
               DisplayDiseaseName, 
               TestID,
               TestNameTypeID,
               TestCategoryTypeID,
               TestResultTypeID,
               TestStatusTypeID,
               TestNameTypeName,
               TestStatusTypeName,
               TestResultTypeName,
               ResultEnteredByUserID,
               AccessionDate,
               SampleStatusTypeID,
               AccessionConditionOrSampleStatusTypeName,
               ResultDate,
               PreviousSampleStatusTypeID,
               PreviousTestStatusTypeID,
               RowStatus,
               RowAction,
               RowSelectionIndicator,
               CurrentPage,
               TotalRowCount
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'ActionRequested'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
                                          THEN
                                                               @SampleDeletion
                                                           WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
                                          THEN
                                                               @SampleDestruction
                                                           WHEN t.idfsTestStatus = 10001004 --Preliminary
                                          THEN
                                                               @Validation
                                                           WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
                                          THEN
                                                               @TestDeletion
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ActionRequested'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
                                               THEN
                                                               @SampleDeletion
                                                           WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
                                               THEN
                                                               @SampleDestruction
                                                           WHEN t.idfsTestStatus = 10001004 --Preliminary
                                               THEN
                                                               @Validation
                                                           WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
                                               THEN
                                                               @TestDeletion
                                                       END
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedCaseID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedHumanName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedHumanName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       sampleType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       sampleType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DisplayDiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.DiseaseID IS NOT NULL THEN
                                                               diseaseName.name
                                                           WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                                               msDiseases.DisplayDiseaseNames
                                                           WHEN
                                                           (
                                                               m.DiseaseID IS NULL
                                                               AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                                                           ) THEN
                                                               vsDiseases.DisplayDiseaseNames
                                                           ELSE
                                                               ''
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DisplayDiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.DiseaseID IS NOT NULL THEN
                                                               diseaseName.name
                                                           WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                                               msDiseases.DisplayDiseaseNames
                                                           WHEN
                                                           (
                                                               m.DiseaseID IS NULL
                                                               AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                                                           ) THEN
                                                               vsDiseases.DisplayDiseaseNames
                                                           ELSE
                                                               ''
                                                       END
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testNameType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testNameType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testStatusType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testStatusType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testResultType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testResultType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       t.datConcludedDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       t.datConcludedDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.datAccession
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.datAccession
                                               END DESC
                                     ) AS RowNum,
                   CASE
                       WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
                   THEN
                           m.idfsSampleStatus
                       WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
                   THEN
                           m.idfsSampleStatus
                       WHEN t.idfsTestStatus = 10001004 --Preliminary
                   THEN
                           t.idfsTestStatus
                       WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
                   THEN
                           t.idfsTestStatus
                   END AS ActionRequestedID,
                   CASE
                       WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
                   THEN
                           @SampleDeletion
                       WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
                   THEN
                           @SampleDestruction
                       WHEN t.idfsTestStatus = 10001004 --Preliminary
                   THEN
                           @Validation
                       WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
                   THEN
                           @TestDeletion
                   END AS ActionRequested,
                   m.idfMaterial AS SampleID,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   a.strAnimalCode AS EIDSSAnimalID,
                   m.strCalculatedHumanName AS PatientOrFarmOwnerName,
                   sampleType.name AS SampleTypeName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           CAST(m.DiseaseID AS NVARCHAR(MAX))
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseIdentifiers
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DiseaseIdentifiers
                       ELSE
                           ''
                   END AS DiseaseID,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseNames
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DiseaseNames
                       ELSE
                           ''
                   END AS DiseaseName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN 
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DisplayDiseaseNames
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DisplayDiseaseNames
                       ELSE
                           ''
                   END AS DisplayDiseaseName,
                   t.idfTesting AS TestID,
                   t.idfsTestName AS TestNameTypeID,
                   t.idfsTestCategory AS TestCategoryTypeID,
                   t.idfsTestResult AS TestResultTypeID,
                   t.idfsTestStatus AS TestStatusTypeID,
                   testNameType.name AS TestNameTypeName,
                   testStatusType.name AS TestStatusTypeName,
                   testResultType.name AS TestResultTypeName,
                   u.idfUserID AS ResultEnteredByUserID,
                   m.datAccession AS AccessionDate,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   (CASE
                        WHEN m.blnAccessioned = 0
                             AND m.idfsAccessionCondition IS NULL THEN
                            'Un-accessioned'
                        WHEN m.idfsSampleStatus IS NULL THEN
                            accessionConditionType.name
                        WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                            accessionConditionType.name
                        ELSE
                            sampleStatusType.name
                    END
                   ) AS AccessionConditionOrSampleStatusTypeName,
                   t.datConcludedDate AS ResultDate,
                   m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
                   NULL AS PreviousTestStatusTypeID,
                   m.intRowStatus AS RowStatus,
                   0 AS RowAction,
                   0 AS RowSelectionIndicator,
                   @Page AS CurrentPage,
                   @TotalRowCount AS TotalRowCount
            FROM @Results res
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.SampleID
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfTesting = res.TestID
                       AND t.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                    ON diseaseName.idfsReference = m.DiseaseID
                LEFT JOIN @MonitoringSessionDiseases msDiseases
                    ON msDiseases.ID = m.idfMonitoringSession
                LEFT JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN dbo.tstUserTable u
                    ON u.idfPerson = t.idfResultEnteredByPerson
                       AND u.intRowStatus = 0
        ) AS x
        WHERE RowNum > @FirstRecord
              AND RowNum < @LastRecord
        ORDER BY RowNum;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_APPROVAL_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_APPROVAL_SEARCH_GETList
--
-- Description:	Get laboratory approval list for the various lab use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/21/2019 Initial release.
-- Stephen Long     07/09/2019 Added disease to search wildcard.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     06/07/2020 Added additional search fields to the where clause.
-- Stephen Long     09/04/2020 Updated reference value for marked for deletion test status.
-- Stephen Long     11/30/2020 Modified where clause to look at sent to organization and removed 
--                             user ID as a parameter.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2021 Moved pagination to table variable insert.
-- Stephen Long     01/05/2021 Changed where criteria strNote to strCondition.
-- Stephen Long     01/07/2021 Removed leading wildcard (%) as full table scans are performed even 
--                             with indices resulting in long query run times.  Recommend NOT 
--                             putting those back in.
-- Stephen Long     09/24/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     11/18/2021 Added action requested ID to the query.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/17/2021 Added group by to eliminate duplicate records.
-- Stephen Long     01/03/2022 Corrected sample status type to use the correct field.
-- Stephen Long     02/10/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     09/28/2022 Bug fix on item 5111, 5115 and 5116.
-- Stephen Long     10/11/2022 Added check for closed batch test status to display test records 
--                             ready for validation.
-- Stephen Long     10/17/2022 Bug fix on item 5018 - searching by dates.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     10/23/2022 Added check for non-laboratory test indicator of false.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_APPROVAL_SEARCH_GETList]
		@LanguageID = N'en-US',
		@SearchString = N'PCR', -- Use 'Gnhnscvxb', 'Brucellosis', 'SWAZ200GEDD' as other tests.
		@TestUnassignedIndicator = NULL,
		@TestCompletedIndicator = NULL,
		@UserID = 161287150000872, -- rykermase
		@UserOrganizationID = 758210000000,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_APPROVAL_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @SearchString NVARCHAR(2000),
    @AccessionedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserOrganizationID BIGINT,
    @Page INT = 1,
    @PageSize INT = 10,
    @SortColumn VARCHAR(200) = 'EIDSSLaboratorySampleID',
    @SortOrder VARCHAR(4) = 'DESC'
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL, 
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL 
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL, 
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL 
    );
    DECLARE @InitialResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        ActionRequested NVARCHAR(MAX) NOT NULL,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        ActionRequested NVARCHAR(MAX) NOT NULL,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL
    );
    DECLARE @FinalResultsDedup TABLE
    (
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL
    );
    DECLARE @SampleTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @SampleStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @AccessionConditionTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestNameTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestResultTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestCategoryTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @Diseases TABLE (ID BIGINT NOT NULL);
    DECLARE @FunctionalAreas TABLE (ID BIGINT NOT NULL);
    DECLARE @Favorites XML,
            @FirstRecord INT = (@Page - 1) * @PageSize,
            @LastRecord INT = (@Page * @PageSize + 1),
            @LanguageCode BIGINT,
            @TotalRowCount INT = 0,
            @SampleDeletion NVARCHAR(MAX),
            @SampleDestruction NVARCHAR(MAX),
            @TestDeletion NVARCHAR(MAX),
            @Validation NVARCHAR(MAX);
    BEGIN TRY
        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);
        SET @SampleDeletion =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 812
        );
        SET @SampleDestruction =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 1040
        );
        SET @TestDeletion =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 4493
        );
        SET @Validation =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 4492
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames, 
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames 
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames, 
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames 
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @InitialResults
        SELECT CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
            THEN
                       @SampleDeletion
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
            THEN
                       @SampleDestruction
               END,
               m.idfMaterial,
               NULL
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND (
                      m.idfsSampleStatus = 10015002 --Marked for Deletion 
                      OR m.idfsSampleStatus = 10015003 --Marked for Destruction
                  )
              AND m.idfSendToOffice = @UserOrganizationID;

        INSERT INTO @InitialResults
        SELECT CASE
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
            THEN
                       @Validation
                   WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
            THEN
                       @TestDeletion
               END,
               m.idfMaterial,
               t.idfTesting
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON t.idfMaterial = m.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND (
                      t.idfsTestStatus = 10001004 --Preliminary 
                      OR t.idfsTestStatus = 10001008 --Marked for Deletion 
                  )
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfSendToOffice = @UserOrganizationID;

        INSERT INTO @SampleTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000087
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @SampleStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000015
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @AccessionConditionTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000110
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @Diseases
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000019
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestNameTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000097
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestResultTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000096
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestCategoryTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000095
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000001
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FunctionalAreas
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000164
              AND idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FinalResults
        SELECT ActionRequested,
               SampleID,
               TestID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = SampleID
        WHERE (
                  m.blnAccessioned = @AccessionedIndicator
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND @AccessionedIndicator IS NOT NULL
              ) -- Un-accessioned samples
              OR (
                     CONVERT(NVARCHAR(MAX), FORMAT(m.datAccession, 'g', @LanguageID)) LIKE '%' + @SearchString + '%'
                     OR CONVERT(NVARCHAR(MAX), FORMAT(t.datStartedDate, 'd', @LanguageID)) LIKE '%' + @SearchString + '%'
                     OR CONVERT(NVARCHAR(MAX), FORMAT(t.datConcludedDate, 'd', @LanguageID)) LIKE '%' + @SearchString + '%'
                     OR (
                            m.strBarcode IS NOT NULL
                            AND m.strBarcode <> ''
                            AND m.strBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strFieldBarcode IS NOT NULL
                            AND m.strFieldBarcode <> ''
                            AND m.strFieldBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCondition IS NOT NULL
                            AND m.strCondition <> ''
                            AND m.strCondition LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedCaseID IS NOT NULL
                            AND m.strCalculatedCaseID <> ''
                            AND m.strCalculatedCaseID LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedHumanName IS NOT NULL
                            AND m.strCalculatedHumanName <> ''
                            AND m.strCalculatedHumanName LIKE '%' + @SearchString + '%'
                        )
                     OR (ActionRequested LIKE '%' + @SearchString + '%')
                 );

        INSERT INTO @FinalResults
        SELECT ActionRequested,
               SampleID,
               TestID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = SampleID
            INNER JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
        WHERE m.idfAnimal IS NOT NULL
              AND a.strAnimalCode LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ActionRequested,
               SampleID,
               TestID
        FROM @InitialResults
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = SampleID
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = SampleID
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
        WHERE tro.strBarcode LIKE '%' + @SearchString + '%';

        IF
        (
            SELECT COUNT(*) FROM @SampleTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
            WHERE EXISTS
            (
                SELECT ID FROM @SampleTypes WHERE m.idfsSampleType = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @SampleStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
            WHERE EXISTS
            (
                SELECT ID FROM @SampleStatusTypes WHERE m.idfsSampleStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @AccessionConditionTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
            WHERE (
                      m.idfsSampleStatus IS NULL
                      OR m.idfsSampleStatus = 10015007
                  ) --In Repository
                  AND EXISTS
            (
                SELECT ID
                FROM @AccessionConditionTypes
                WHERE m.idfsAccessionCondition = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @FunctionalAreas
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
                INNER JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
            WHERE m.idfInDepartment IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @FunctionalAreas WHERE d.idfsDepartmentName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @Diseases
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
            WHERE m.DiseaseID IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE m.DiseaseID = ID
            );

            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                INNER JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
            WHERE m.idfVectorSurveillanceSession IS NOT NULL
                  AND EXISTS
            (
                SELECT ID
                FROM @Diseases
                WHERE ID IN (
                                SELECT CAST([Value] AS BIGINT)
                                FROM dbo.FN_GBL_SYS_SplitList(vsDiseases.DiseaseIdentifiers, NULL, ',')
                            )
            );

            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                INNER JOIN dbo.tlbMonitoringSession ms
                    ON ms.idfMonitoringSession = m.idfMonitoringSession
                       AND ms.intRowStatus = 0
                INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                       AND msd.intRowStatus = 0
            WHERE m.idfMonitoringSession IS NOT NULL
                  AND m.DiseaseID IS NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE msd.idfsDiagnosis = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestNameTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = TestID
            WHERE EXISTS
            (
                SELECT ID FROM @TestNameTypes WHERE t.idfsTestName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestResultTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = TestID
            WHERE EXISTS
            (
                SELECT ID FROM @TestResultTypes WHERE t.idfsTestResult = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestCategoryTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = TestID
            WHERE EXISTS
            (
                SELECT ID FROM @TestCategoryTypes WHERE t.idfsTestCategory = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ActionRequested,
                   SampleID,
                   TestID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = TestID
            WHERE EXISTS
            (
                SELECT ID FROM @TestStatusTypes WHERE t.idfsTestStatus = ID
            );
        END;

        INSERT INTO @FinalResultsDedup
        SELECT SampleID,
               TestID
        FROM @FinalResults
        GROUP BY SampleID,
                 TestID;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SET @TotalRowCount =
        (
            SELECT COUNT(*) FROM @FinalResultsDedup
        );

        SELECT ActionRequestedID,
               ActionRequested,
               SampleID,
               EIDSSLaboratorySampleID,
               EIDSSReportOrSessionID,
               EIDSSAnimalID,
               PatientOrFarmOwnerName,
               SampleTypeName,
               DiseaseID,
               DiseaseName,
               DisplayDiseaseName, 
               TestID,
               TestNameTypeID,
               TestCategoryTypeID,
               TestResultTypeID,
               TestStatusTypeID,
               TestNameTypeName,
               TestStatusTypeName,
               TestResultTypeName,
               ResultEnteredByUserID,
               AccessionDate,
               SampleStatusTypeID,
               AccessionConditionOrSampleStatusTypeName,
               ResultDate,
               PreviousSampleStatusTypeID,
               PreviousTestStatusTypeID,
               RowStatus,
               RowAction,
               RowSelectionIndicator,
               CurrentPage,
               TotalRowCount
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'ActionRequested'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
                                          THEN
                                                               @SampleDeletion
                                                           WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
                                          THEN
                                                               @SampleDestruction
                                                           WHEN t.idfsTestStatus = 10001004 --Preliminary
                                          THEN
                                                               @Validation
                                                           WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
                                          THEN
                                                               @TestDeletion
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ActionRequested'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
                                               THEN
                                                               @SampleDeletion
                                                           WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
                                               THEN
                                                               @SampleDestruction
                                                           WHEN t.idfsTestStatus = 10001004 --Preliminary
                                               THEN
                                                               @Validation
                                                           WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
                                               THEN
                                                               @TestDeletion
                                                       END
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedCaseID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedHumanName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedHumanName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       sampleType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       sampleType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DisplayDiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.DiseaseID IS NOT NULL THEN
                                                               diseaseName.name
                                                           WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                                               msDiseases.DisplayDiseaseNames
                                                           WHEN
                                                           (
                                                               m.DiseaseID IS NULL
                                                               AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                                                           ) THEN
                                                               vsDiseases.DisplayDiseaseNames
                                                           ELSE
                                                               ''
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DisplayDiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.DiseaseID IS NOT NULL THEN
                                                               diseaseName.name
                                                           WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                                               msDiseases.DisplayDiseaseNames
                                                           WHEN
                                                           (
                                                               m.DiseaseID IS NULL
                                                               AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                                                           ) THEN
                                                               vsDiseases.DisplayDiseaseNames
                                                           ELSE
                                                               ''
                                                       END
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testNameType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testNameType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testStatusType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testStatusType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testResultType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testResultType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       t.datConcludedDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       t.datConcludedDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.datAccession
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.datAccession
                                               END DESC
                                     ) AS RowNum,
                   CASE
                       WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
                   THEN
                           m.idfsSampleStatus
                       WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
                   THEN
                           m.idfsSampleStatus
                       WHEN t.idfsTestStatus = 10001004 --Preliminary
                   THEN
                           t.idfsTestStatus
                       WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
                   THEN
                           t.idfsTestStatus
                   END AS ActionRequestedID,
                   CASE
                       WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
                   THEN
                           @SampleDeletion
                       WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
                   THEN
                           @SampleDestruction
                       WHEN t.idfsTestStatus = 10001004 --Preliminary
                   THEN
                           @Validation
                       WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
                   THEN
                           @TestDeletion
                   END AS ActionRequested,
                   m.idfMaterial AS SampleID,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   a.strAnimalCode AS EIDSSAnimalID,
                   m.strCalculatedHumanName AS PatientOrFarmOwnerName,
                   sampleType.name AS SampleTypeName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           CAST(m.DiseaseID AS NVARCHAR(MAX))
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseIdentifiers
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DiseaseIdentifiers
                       ELSE
                           ''
                   END AS DiseaseID,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseNames
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DiseaseNames
                       ELSE
                           ''
                   END AS DiseaseName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN 
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DisplayDiseaseNames
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DisplayDiseaseNames
                       ELSE
                           ''
                   END AS DisplayDiseaseName,
                   t.idfTesting AS TestID,
                   t.idfsTestName AS TestNameTypeID,
                   t.idfsTestCategory AS TestCategoryTypeID,
                   t.idfsTestResult AS TestResultTypeID,
                   t.idfsTestStatus AS TestStatusTypeID,
                   testNameType.name AS TestNameTypeName,
                   testStatusType.name AS TestStatusTypeName,
                   testResultType.name AS TestResultTypeName,
                   u.idfUserID AS ResultEnteredByUserID,
                   m.datAccession AS AccessionDate,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   (CASE
                        WHEN m.blnAccessioned = 0
                             AND m.idfsAccessionCondition IS NULL THEN
                            'Un-accessioned'
                        WHEN m.idfsSampleStatus IS NULL THEN
                            accessionConditionType.name
                        WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                            accessionConditionType.name
                        ELSE
                            sampleStatusType.name
                    END
                   ) AS AccessionConditionOrSampleStatusTypeName,
                   t.datConcludedDate AS ResultDate,
                   m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
                   NULL AS PreviousTestStatusTypeID,
                   m.intRowStatus AS RowStatus,
                   0 AS RowAction,
                   0 AS RowSelectionIndicator,
                   @Page AS CurrentPage,
                   @TotalRowCount AS TotalRowCount
            FROM @FinalResultsDedup res
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.SampleID
                       AND m.intRowStatus = 0
                INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfTesting = res.TestID
                       AND t.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                    ON diseaseName.idfsReference = m.DiseaseID
                LEFT JOIN @MonitoringSessionDiseases msDiseases
                    ON msDiseases.ID = m.idfMonitoringSession
                LEFT JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN dbo.tstUserTable u
                    ON u.idfPerson = t.idfResultEnteredByPerson
                       AND u.intRowStatus = 0
        ) AS x
        WHERE RowNum > @FirstRecord
              AND RowNum < @LastRecord
        ORDER BY RowNum;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_UNIQUENUMBERINGSCHEMA_GETLIST]...';


GO
--=============================================================================================== 
-- Name:  USP_CONF_UNIQUENUMBERINGSCHEMA_GETLIST
-- Description: Returns a list of unique numbering schema given a language
-- Author: Ricky Moss
--
-- History of Change
-- Name:					Date:			Description: 
-- Ricky Moss				8/26/2019		Initial Release
-- Doug Albanese			10/22/2020		Added unverisal searching
-- exec USP_CONF_UNIQUENUMBERINGSCHEMA_GETLIST 'en'
--Lamont Mitchell 3/36/22  Added new column intPreviousNumberValue to store previous values in uniquenumberingschema
-- Mani Govindarajan  10/04/2022 Added a few extra output columns
--=============================================================================================== 
ALTER PROCEDURE [dbo].[USP_CONF_UNIQUENUMBERINGSCHEMA_GETLIST]
(
	 @LangId			NVARCHAR(50)
	,@QuickSearch	NVARCHAR(200) = ''
	,@pageNo INT = 1
	,@pageSize INT = 10 
	,@sortColumn NVARCHAR(30) = 'strDefault' --"IntNextNumberValue"
	,@sortOrder NVARCHAR(4) = 'asc'
)
AS
BEGIN

	IF @sortColumn = 'IntNextNumberValue'
		BEGIN
			SET @sortColumn = 'intNumberValue'
		END

	DECLARE @firstRec INT
	DECLARE @lastRec INT
	DECLARE @t TABLE( 
			idfsNumberName bigint, 
			--strObjectName nvarchar(2000), 
			strDefault nvarchar(2000), 
			strName nvarchar(2000), 
			strPrefix nvarchar(50), 
			strSpecialChar nvarchar(2),
			intNumberValue nvarchar(50),
			intMinNumberLength int,
			strSuffix nvarchar(50),
			blnUsePrefix bit, 
			blnUseYear bit, 
			blnUseAlphaNumericValue bit, 
			blnUseSiteID bit,
			intPreviousNumberValue nvarchar(50),
			intNumberNextValue  nvarchar(50),
			PreviousNumber int,
			NextNumber int,
			blnUseHACSCodeSite bit
	)		
	BEGIN TRY

		DECLARE 
		@ErrorMessage NVARCHAR(400),
		@returnCode BIGINT = 0,
		@returnMsg  NVARCHAR(MAX) = 'Success' 

		IF @QuickSearch IS NULL	
			BEGIN
				SET @QuickSearch = ''
			END

		SET @firstRec = (@pageNo-1)* @pagesize
		SET @lastRec = (@pageNo*@pageSize+1)
		
		INSERT INTO @T
			SELECT 
				idfsNumberName, 
				--strObjectName, 
				r.strDefault,
				r.[name] as 'strName',
				strPrefix, 
				strSpecialChar,
				intNumberValue, 
				intMinNumberLength,
				strSuffix,
				blnUsePrefix, 
				blnUseYear, 
				blnUseAlphaNumericValue, 
				blnUseSiteID,
				intPreviousNumberValue,
				intNumberNextValue,
			    PreviousNumber,
			    NextNumber,
				blnUseHACSCodeSite
			FROM 
				fn_NextNumbers_SelectList(@LangId)
				JOIN dbo.FN_GBL_Reference_GETList(@langId,19000057) r on idfsNumberName = r.idfsReference
			WHERE
				--CAST(idfsNumberName AS NVARCHAR) like '%' + @QuickSearch + '%' OR
				strDefault like '%' + @QuickSearch + '%' OR
				r.[name] like '%' + @QuickSearch + '%' OR
				strPrefix like '%' + @QuickSearch + '%' OR
				CAST(intNumberValue AS NVARCHAR) like '%' + @QuickSearch + '%' OR
				CAST(intMinNumberLength AS NVARCHAR) like '%' + @QuickSearch + '%' OR
				strSuffix like '%' + @QuickSearch + '%' OR
				CAST(intPreviousNumberValue AS NVARCHAR) like '%' + @QuickSearch + '%' 
				

			;
		WITH CTEResults as
		(
			SELECT ROW_NUMBER() OVER ( ORDER BY 
				CASE WHEN @sortColumn = 'strDefault' AND @SortOrder = 'asc' THEN strDefault END ASC,
				CASE WHEN @sortColumn = 'strDefault' AND @SortOrder = 'desc' THEN strDefault END DESC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'asc' THEN strName END ASC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'desc' THEN strName END DESC,
				CASE WHEN @sortColumn = 'strPrefix' AND @SortOrder = 'asc' THEN strPrefix END ASC,
				CASE WHEN @sortColumn = 'strPrefix' AND @SortOrder = 'desc' THEN strPrefix END DESC,
				CASE WHEN @sortColumn = 'intNumberValue' AND @SortOrder = 'asc' THEN intNumberValue END ASC,
				CASE WHEN @sortColumn = 'intNumberValue' AND @SortOrder = 'desc' THEN intNumberValue END DESC,
				CASE WHEN @sortColumn = 'intMinNumberLength' AND @SortOrder = 'asc' THEN intMinNumberLength END ASC,
				CASE WHEN @sortColumn = 'intMinNumberLength' AND @SortOrder = 'desc' THEN intMinNumberLength END DESC,
					CASE WHEN @sortColumn = 'intPreviousNumberValue' AND @SortOrder = 'asc' THEN intPreviousNumberValue END ASC,
				CASE WHEN @sortColumn = 'intPreviousNumberValue' AND @SortOrder = 'desc' THEN intPreviousNumberValue END DESC
		) AS ROWNUM,
		COUNT(*) OVER () AS 
				TotalRowCount, 
				--strObjectName,
				idfsNumberName,
				strDefault,
				strName,
				strPrefix,
				strSpecialChar,
				intNumberValue,
				intMinNumberLength,
				strSuffix,
				blnUsePrefix, 
				blnUseYear,
				blnUseAlphaNumericValue, 
				blnUseSiteID,
				intPreviousNumberValue,
				intNumberNextValue,
			    PreviousNumber,
			    NextNumber,
				blnUseHACSCodeSite
			FROM @T
		)

			SELECT
				TotalRowCount, 
				--strObjectName,
				idfsNumberName,
				strDefault,
				strName,
				strPrefix,
				strSpecialChar,
				intNumberValue,
				intPreviousNumberValue,
				intMinNumberLength,
				strSuffix,
				blnUsePrefix, 
				blnUseYear, 
				blnUseAlphaNumericValue,
				blnUseSiteID,  
				intNumberNextValue,
			    PreviousNumber,
			    NextNumber,
				blnUseHACSCodeSite,
				TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
				CurrentPage = @pageNo 
		FROM CTEResults
		WHERE RowNum > @firstRec AND RowNum < @lastRec 
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;

		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_BarcodeNextNumber_GET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_Barcode_GETList
-- Description: Barcode Generator Module
--          
-- Author: Doug Albanese
-- 
-- Revision History:
-- Name				Date		Change Detail
-- ---------------- ----------	------------------------------------------------------------------
-- Doug Albanese	11/23/2020	Copy of USP_GBL_NextNumber_GET to be modified for the Barcode Generator Module
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_BarcodeNextNumber_GET] (
	@ObjectName							NVARCHAR(300),
	@NextNumberValue					NVARCHAR(200)	OUTPUT,
	@blnUsePrefix						BIT				= 0,
	@siteId								NVARCHAR(50)	= NULL,
	@blnUseYear							BIT				= 0
)
AS

	DECLARE @NextID						BIGINT
	DECLARE @Year						INT
	DECLARE @MinNumberLength			INT
	DECLARE @Suffix						NVARCHAR(50)
	DECLARE @Prefix						NVARCHAR(50)
	DECLARE @ShowPrefix					BIT
	DECLARE @ShowSiteID					BIT
	DECLARE @ShowYear					BIT
	DECLARE @ShowHASCCodeSite			BIT
	DECLARE @HASCCodeSite				NVARCHAR(200)
	DECLARE @strSiteID					NVARCHAR(10)
	DECLARE @ShowAlphaNumeric			BIT
	DECLARE @idfsNumberName				BIGINT
	DECLARE @returnCode					INT = 0
	DECLARE @returnMsg					NVARCHAR(MAX) = 'SUCCESS'
	DECLARE @CurrentID						BIGINT


	BEGIN
		IF @ObjectName IS NULL
			RETURN - 1

		IF @siteID IS NOT NULL
			BEGIN
				SELECT @HASCCodeSite = SUBSTRING(ISNULL(strHASCsiteID, N''), 3, 5),
					@strSiteID = strSiteID
				FROM tstSite
				WHERE idfsSite = @siteId
			END

		SET @HASCCodeSite = ISNULL(@HASCCodeSite, '')
		SET @strSiteID = ISNULL(@strSiteID, '')
		SET @Year = Year(getdate())

		SELECT @NextID = ISNULL(intPreviousNumberValue, 0),
			@CurrentID = ISNULL(intPreviousNumberValue, 0),
			@Suffix = ISNULL(strSuffix, N''),
			@Prefix = ISNULL(strPrefix, N''),
			@MinNumberLength = ISNULL(intMinNumberLength, 5),
			@ShowPrefix = ISNULL(blnUsePrefix, 0),
			@ShowSiteID = ISNULL(blnUseSiteID, 0),
			@ShowYear = ISNULL(blnUseYear, 0),
			@ShowHASCCodeSite = ISNULL(blnUseHACSCodeSite, 0),
			@ShowAlphaNumeric = ISNULL(blnUseAlphaNumericValue, 0),
			@idfsNumberName = ISNULL(idfsNumberName, 0)
		FROM dbo.tstNextNumbers a
		WHERE strDocumentName = @ObjectName

		IF @@ROWCOUNT = 0
		BEGIN
			SELECT @idfsNumberName = ISNULL(idfsBaseReference, 0)
			FROM dbo.trtBaseReference
			WHERE strDefault = @ObjectName

			IF @@ROWCOUNT = 0
			BEGIN
				SET @returnCode = - 1
				SET @returnMsg = 'Please have EIDSS Administrator generate a Unique Numbering Schema for ' + @ObjectName + '.'

				RETURN
			END
			ELSE
			BEGIN
				SET @Prefix = CASE 
						WHEN @ObjectName = 'Vet Aggregate Disease Report'
							THEN 'VAD'
						WHEN @ObjectName = 'Animal'
							THEN 'ANM'
						WHEN @ObjectName = 'Batch Test Barcode'
							THEN 'BTB'
						WHEN @ObjectName = 'Box Barcode'
							THEN 'BBC'
						WHEN @ObjectName = 'Farm'
							THEN 'FRM'
						WHEN @ObjectName = 'Freezer Barcode'
							THEN 'FBC'
						WHEN @ObjectName = 'Shelf Barcode'
							THEN 'SBC'
						WHEN @ObjectName = 'Rack Barcode'
							THEN 'RBC'
						WHEN @ObjectName = 'Animal Group'
							THEN 'AGP'
						WHEN @ObjectName = 'Human Disease Report'
							THEN 'HUM'
						WHEN @ObjectName = 'Outbreak Session'
							THEN 'OUT'
						WHEN @ObjectName = 'Sample Field Barcode'
							THEN 'SFB'
						WHEN @ObjectName = 'Sample'
							THEN 'SAD'
						WHEN @ObjectName = 'Pendide Test'
							THEN 'PEN'
						WHEN @ObjectName = 'Vet Disease Report'
							THEN 'VET'
						WHEN @ObjectName = 'Vet Case Field Accession Number'
							THEN 'VFN'
						WHEN @ObjectName = 'Sample Transfer Barcode'
							THEN 'STB'
						WHEN @ObjectName = 'Active Surveillance Campaign'
							THEN 'SCV'
						WHEN @ObjectName = 'Active Surveillance Session'
							THEN 'SSV'
						WHEN @ObjectName = 'Vector Surveillance Session'
							THEN 'VSS'
						WHEN @ObjectName = 'Vector Surveillance Vector'
							THEN 'VSR'
						WHEN @ObjectName = 'Vector Surveillance Summary Vector'
							THEN 'VSM'
						WHEN @ObjectName = 'Basic Syndromic Surveillance Form'
							THEN 'SSF'
						WHEN @ObjectName = 'Basic Syndromic Surveillance Aggregate Form'
							THEN 'SSA'
						WHEN @ObjectName = 'EIDSS Person'
							THEN 'PER'
						WHEN @ObjectName = 'Human Active Surveillance Campaign'
							THEN 'SCH'
						WHEN @ObjectName = 'Human Active Surveillance Session'
							THEN 'SSH'
						WHEN @ObjectName = 'Human Outbreak Case'
							THEN 'HOC'
						WHEN @ObjectName = 'Vet Outbreak Case'
							THEN 'VOC'
						WHEN @ObjectName = 'Weekly Reporting Form'
							THEN 'HWR'
						END

				EXECUTE dbo.USP_GBL_NextNumberInit_GET @idfsNumberName,
					@ObjectName,
					@Prefix,
					NULL,
					0,
					4,
					0

				SELECT @NextID= ISNULL(intPreviousNumberValue, 0),
			        @CurrentID = ISNULL(intNumberValue, 0),
					@Suffix = ISNULL(strSuffix, N''),
					@Prefix = ISNULL(strPrefix, N''),
					@MinNumberLength = ISNULL(intMinNumberLength, 5),
					@ShowPrefix = ISNULL(blnUsePrefix, 0),
					@ShowSiteID = ISNULL(blnUseSiteID, 0),
					@ShowYear = ISNULL(blnUseYear, 0),
					@ShowHASCCodeSite = ISNULL(blnUseHACSCodeSite, 0),
					@ShowAlphaNumeric = ISNULL(blnUseAlphaNumericValue, 0),
					@idfsNumberName = ISNULL(idfsNumberName, 0)
				FROM dbo.tstNextNumbers a
				WHERE strDocumentName = @ObjectName
			END
		END
		ELSE
		BEGIN
			--If system configuration is set to show, then check against the barcode module to see if it was requested to show as well
			IF @ShowYear = 1 AND @blnUseYear = 1
			BEGIN
				IF NOT EXISTS (
						SELECT *
						FROM dbo.tstNextNumbers
						WHERE idfsNumberName = @idfsNumberName
							AND intYear = @Year
						)
					UPDATE dbo.tstNextNumbers
					SET intNumberValue = 0,
						intPreviousNumberValue = 0,
						intYear = @Year
					WHERE idfsNumberName = @idfsNumberName
			END
		END

		BEGIN TRANSACTION

		BEGIN TRY
			RETRY:

			DECLARE @CheckNumber BIT
			DECLARE @AttemptCount INT

			SET @CheckNumber = 1
			SET @AttemptCount = 0

			SET @NextID = @NextID - 1

			--Restrict new unique next number search attempts by 1000 
			WHILE @CheckNumber = 1
				AND @AttemptCount < 1000
			BEGIN
				IF @AttemptCount = 0
					SET @NextID = @NextID + 1
				ELSE
					SET @NextID = @NextID + 100

				IF @ShowAlphaNumeric = 1
					SET @NextNumberValue = dbo.FN_GBL_AlphNumeric_GET(@NextID, @MinNumberLength)
				ELSE
					SET @NextNumberValue = CAST(@NextID AS VARCHAR(100))

				IF (@NextNumberValue IS NULL)
				BEGIN
					UPDATE dbo.tstNextNumbers
					SET intMinNumberLength = @MinNumberLength + 1,
						intNumberValue = 0
					WHERE idfsNumberName = @idfsNumberName

					SET @MinNumberLength = @MinNumberLength + 1
					SET @NextID = 0
					SET @CurrentID = 0


					GOTO retry
				END

				IF LEN(@NextNumberValue) > @MinNumberLength
				BEGIN
					SET @returnCode = - 1
					SET @returnMsg = 'Cannot generate new unique value.'

					RETURN
				END

				IF @MinNumberLength > 0
					AND LEN(@NextNumberValue) < @MinNumberLength
				BEGIN
					SET @NextNumberValue = REPLACE(SPACE(@MinNumberLength - LEN(@NextNumberValue)) + @NextNumberValue, N' ', 0)
				END

				SET @NextNumberValue = @NextNumberValue + @Suffix

				--If system configuration is set to show, then check against the barcode module to see if it was requested to show as well
				------------------------------START------------------------------
				IF @ShowYear = 1 AND @blnUseYear = 1
					BEGIN
						SET @NextNumberValue = RIGHT(@Year, 2) + @NextNumberValue
					END

				IF @ShowSiteID = 1 AND @siteId IS NOT NULL
					BEGIN
						IF @ShowHASCCodeSite = 1
							BEGIN
								SET @NextNumberValue = @HASCCodeSite + @NextNumberValue
							END
						ELSE
							BEGIN
								SET @NextNumberValue = @strSiteID + @NextNumberValue
							END
					END

				IF @ShowPrefix = 1 AND @blnUsePrefix = 1
					BEGIN
						SET @NextNumberValue = @Prefix + @NextNumberValue
					END
				------------------------------END------------------------------

				DECLARE @CNT INT

				----------------------- Specimen Field Barcode
				IF @idfsNumberName = 10057019
				BEGIN
					IF NOT EXISTS (
							SELECT idfMaterial
							FROM dbo.tlbMaterial
							WHERE strFieldBarcode = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbMaterial
				END
						----------------------- Container (specimen barcode is used for container)
				ELSE IF @idfsNumberName = 10057020
				BEGIN
					IF NOT EXISTS (
							SELECT idfMaterial
							FROM dbo.tlbMaterial
							WHERE strBarcode = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbMaterial
				END
						----------------------- Freezer
				ELSE IF @idfsNumberName = 10057011
				BEGIN
					IF NOT EXISTS (
							SELECT idfFreezer
							FROM dbo.tlbFreezer
							WHERE strBarcode = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbFreezer
				END
						----------------------- Freezer Box
				ELSE IF @idfsNumberName = 10057006
				BEGIN
					IF NOT EXISTS (
							SELECT idfSubdivision
							FROM dbo.tlbFreezerSubdivision
							WHERE strBarcode = @NextNumberValue
								AND idfsSubdivisionType = 39890000000
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbFreezerSubdivision
						WHERE idfsSubdivisionType = 39890000000
				END
						----------------------- Freezer Shelf
				ELSE IF @idfsNumberName = 10057012
				BEGIN
					IF NOT EXISTS (
							SELECT idfSubdivision
							FROM dbo.tlbFreezerSubdivision
							WHERE strBarcode = @NextNumberValue
								AND idfsSubdivisionType = 39900000000
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbFreezerSubdivision
						WHERE idfsSubdivisionType = 39900000000
				END
						----------------------- Freezer Rack
				ELSE IF @idfsNumberName = 10057039
				BEGIN
					IF NOT EXISTS (
							SELECT idfSubdivision
							FROM dbo.tlbFreezerSubdivision
							WHERE strBarcode = @NextNumberValue
								AND idfsSubdivisionType = 10093001
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbFreezerSubdivision
						WHERE idfsSubdivisionType = 10093001
				END
						----------------------- Human Disease Report
				ELSE IF @idfsNumberName = 10057014
				BEGIN
					IF NOT EXISTS (
							SELECT strCaseID
							FROM dbo.tlbHumanCase
							WHERE strCaseID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbHumanCase
				END
						----------------------- Human Aggregate Disease Report
				ELSE IF @idfsNumberName = 10057001
				BEGIN
					IF NOT EXISTS (
							SELECT idfAggrCase
							FROM dbo.tlbAggrCase
							WHERE strCaseID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbAggrCase
						WHERE idfsAggrCaseType = 0
				END
						----------------------- Veterinary Aggregate Action Report
				ELSE IF @idfsNumberName = 10057002
				BEGIN
					IF NOT EXISTS (
							SELECT idfAggrCase
							FROM dbo.tlbAggrCase
							WHERE strCaseID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbAggrCase
						WHERE idfsAggrCaseType = 0
				END
						----------------------- Veterinary Aggregate Disease Report
				ELSE IF @idfsNumberName = 10057003
				BEGIN
					IF NOT EXISTS (
							SELECT idfAggrCase
							FROM dbo.tlbAggrCase
							WHERE strCaseID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbAggrCase
						WHERE idfsAggrCaseType = 0
				END
						----------------------- Veterinary Disease Report
				ELSE IF @idfsNumberName = 10057024
				BEGIN
					IF NOT EXISTS (
							SELECT strCaseID
							FROM dbo.tlbVetCase
							WHERE strCaseID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbVetCase
				END
						----------------------- Veterinary Disease Report Field Accession ID
				ELSE IF @idfsNumberName = 10057025
				BEGIN
					IF NOT EXISTS (
							SELECT idfVetCase
							FROM dbo.tlbVetCase
							WHERE strFieldAccessionID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbVetCase
				END
						----------------------- Outbreak
				ELSE IF @idfsNumberName = 10057015
				BEGIN
					IF NOT EXISTS (
							SELECT idfOutbreak
							FROM dbo.tlbOutbreak
							WHERE strOutbreakID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM tlbOutbreak
				END
						----------------------- Outbreak Case Report (Human)
				ELSE IF @idfsNumberName = 10057037
				BEGIN
					IF NOT EXISTS (
							SELECT OutBreakCaseReportUID
							FROM dbo.OutbreakCaseReport
							WHERE strOutbreakCaseID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM OutbreakCaseReport
				END
						----------------------- Outbreak Case Report (Veterinary)
				ELSE IF @idfsNumberName = 10057038
				BEGIN
					IF NOT EXISTS (
							SELECT OutBreakCaseReportUID
							FROM dbo.OutbreakCaseReport
							WHERE strOutbreakCaseID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM OutbreakCaseReport
				END
						----------------------- Farm
				ELSE IF @idfsNumberName = 10057010
				BEGIN
					IF NOT EXISTS (
							SELECT idfFarm
							FROM dbo.tlbFarm
							WHERE strFarmCode = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM tlbFarm
				END
						----------------------- Batch Test
				ELSE IF @idfsNumberName = 10057005
				BEGIN
					IF NOT EXISTS (
							SELECT idfBatchTest
							FROM dbo.tlbBatchTest
							WHERE strBarcode = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbBatchTest
				END
						----------------------- Herd/Flock
				ELSE IF @idfsNumberName = 10057013
				BEGIN
					IF NOT EXISTS (
							SELECT idfHerd
							FROM dbo.tlbHerd
							WHERE strHerdCode = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbHerd
				END
						----------------------- Animal
				ELSE IF @idfsNumberName = 10057004
				BEGIN
					IF NOT EXISTS (
							SELECT idfAnimal
							FROM dbo.tlbAnimal
							WHERE strAnimalCode = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbAnimal
				END
						----------------------- Sample Transfer
				ELSE IF @idfsNumberName = 10057026
				BEGIN
					IF NOT EXISTS (
							SELECT idfTransferOut
							FROM dbo.tlbTransferOUT
							WHERE strBarcode = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbTransferOUT
				END
						----------------------- Active Surveillance Campaign
				ELSE IF @idfsNumberName = 10057027
				BEGIN
					IF NOT EXISTS (
							SELECT idfCampaign
							FROM dbo.tlbCampaign
							WHERE strCampaignID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbCampaign
				END
						----------------------- Active Surveillance Session
				ELSE IF @idfsNumberName = 10057028
				BEGIN
					IF NOT EXISTS (
							SELECT idfMonitoringSession
							FROM dbo.tlbMonitoringSession
							WHERE strMonitoringSessionID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbMonitoringSession
				END
						----------------------- Vector Surveillance Session
				ELSE IF @idfsNumberName = 10057029
				BEGIN
					IF NOT EXISTS (
							SELECT idfVectorSurveillanceSession
							FROM dbo.tlbVectorSurveillanceSession
							WHERE strSessionID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbVectorSurveillanceSession
				END
						----------------------- Vector Surveillance Vector
				ELSE IF @idfsNumberName = 10057030
				BEGIN
					IF NOT EXISTS (
							SELECT idfVector
							FROM dbo.tlbVector
							WHERE strVectorID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbVector
				END
						----------------------- Vector Surveillance Summary Vector
				ELSE IF @idfsNumberName = 10057031
				BEGIN
					IF NOT EXISTS (
							SELECT idfsVSSessionSummary
							FROM dbo.tlbVectorSurveillanceSessionSummary
							WHERE strVSSessionSummaryID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbVectorSurveillanceSessionSummary
				END
						----------------------- Basic Syndromic Surveillance Form
				ELSE IF @idfsNumberName = 10057032
				BEGIN
					IF NOT EXISTS (
							SELECT idfBasicSyndromicSurveillance
							FROM dbo.tlbBasicSyndromicSurveillance
							WHERE strFormID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbBasicSyndromicSurveillance
				END
						----------------------- Basic Syndromic Surveillance Aggregate Form
				ELSE IF @idfsNumberName = 10057033
				BEGIN
					IF NOT EXISTS (
							SELECT idfAggregateHeader
							FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader
							WHERE strFormID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader
				END
						----------------------- EIDSS Person ID
				ELSE IF @idfsNumberName = 10057034
				BEGIN
					IF NOT EXISTS (
							SELECT EIDSSPersonID
							FROM dbo.HumanActualAddlInfo
							WHERE EIDSSPersonID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.HumanActualAddlInfo
				END
				----------------------- Weekly Reporting Form
				ELSE IF @idfsNumberName = 10057040
				BEGIN
					IF NOT EXISTS (
							SELECT idfReportForm
							FROM dbo.tlbReportForm
							WHERE strReportFormID = @NextNumberValue
							)
						BREAK

					IF @AttemptCount = 0
						SELECT @CNT = COUNT(*)
						FROM dbo.tlbReportForm
				END
				ELSE
					SET @CheckNumber = 0

				IF @AttemptCount = 0
					AND NOT @CNT IS NULL
					SET @NextID = @CNT + 1
				SET @AttemptCount = @AttemptCount + 1
			END

			IF @AttemptCount < 1000
			BEGIN
				UPDATE dbo.tstNextNumbers
				SET intPreviousNumberValue = @NextID+1,
				intNumberValue = @CurrentID
				WHERE idfsNumberName = @idfsNumberName

				COMMIT TRAN

				RETURN
			END
		END TRY

		--
		BEGIN CATCH
			IF (XACT_STATE()) = - 1
			BEGIN
				PRINT N'The transaction is in an uncommittable state. ' + 'Rolling back transaction.'

				ROLLBACK TRAN;
			END
			ELSE IF (XACT_STATE()) = 1
			BEGIN
				IF @@TRANCOUNT < 2
					ROLLBACK TRAN
				ELSE
					COMMIT TRAN
			END

			IF @AttemptCount >= 100
			BEGIN
				SET @returnCode = - 1
				SET @returnMsg = 'Can''t generate new number'

				RETURN
			END
			ELSE
			BEGIN
				SET @returnCode = - 1
				SET @returnMsg = 'Unknown error during generating new number'

				RETURN
			END

			DECLARE @strNextNumberName AS VARCHAR(200)

			SET @strNextNumberName = CAST(@idfsNumberName AS VARCHAR)
			SET @returnCode = - 1
			SET @returnMsg = 'NumberType:%s'

			RETURN
		END CATCH
	END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_DEDUPLICATION_FARM_SET]...';


GO

-- ================================================================================================
-- Name: USP_ADMIN_DEDUPLICATION_FARM_SET
--
-- Description:	Deduplication for Farm record.
-- 
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mark Wilson		04/12/2022  initial version
-- Ann Xiong		04/12/2022  Updated superseded disease reports with the Survivor Farm information.
-- Mark Wilson		09/21/2022  re-write to use FarmActual as source
-- Ann Xiong		09/30/2022  Updated superseded disease reports with the Survivor Farm Owner information.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_DEDUPLICATION_FARM_SET]
(
	@FarmMasterID BIGINT,
	@SupersededFarmMasterID BIGINT,
	@AvianFarmTypeID BIGINT = NULL,
	@AvianProductionTypeID BIGINT = NULL,
	@FarmCategory BIGINT = NULL,
	@FarmOwnerID BIGINT = NULL,
	@FarmNationalName NVARCHAR(200) = NULL,
	@FarmInterNationalName NVARCHAR(200) = NULL,
	@EIDSSFarmID NVARCHAR(200) = NULL,
	@OwnershipStructureTypeID BIGINT = NULL,
	@Fax NVARCHAR(200) = NULL,
	@Email NVARCHAR(200) = NULL,
	@Phone NVARCHAR(200) = NULL,
	@FarmAddressID BIGINT = NULL,
	@ForeignAddressIndicator BIT = 0,
	@FarmAddressIdfsLocation BIGINT = NULL,
	@FarmAddressStreet NVARCHAR(200) = NULL,
	@FarmAddressApartment NVARCHAR(200) = NULL,
	@FarmAddressBuilding NVARCHAR(200) = NULL,
	@FarmAddressHouse NVARCHAR(200) = NULL,
	@FarmAddressPostalCode NVARCHAR(200) = NULL,
	@FarmAddressLatitude FLOAT = NULL,
	@FarmAddressLongitude FLOAT = NULL,
	@NumberOfBuildings INT = NULL,
	@NumberOfBirdsPerBuilding INT = NULL,
	@HerdsOrFlocks NVARCHAR(MAX) = NULL,
	@Species NVARCHAR(MAX) = NULL,
	@AuditUser NVARCHAR(100) = NULL
)
AS
BEGIN

	BEGIN TRY
		BEGIN TRANSACTION;

		DECLARE @ReturnCode INT = 0;
		DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';

		DECLARE @idfGeoLocationShared BIGINT = (SELECT idfFarmAddress FROM dbo.tlbFarmActual WHERE idfFarmActual = @FarmMasterID)

		DECLARE @Farm TABLE
		(
			idfFarm BIGINT
		)

		DECLARE @Location TABLE
		(
			idfGeoLocation BIGINT
		)

		INSERT INTO @Farm
		(
		    idfFarm
		)
		SELECT
			idfFarm
		FROM dbo.tlbFarm 
		WHERE idfFarmActual = @FarmMasterID

		INSERT INTO @Location
		(
		    idfGeoLocation
		)
		SELECT
			idfFarmAddress
		FROM dbo.tlbFarm
		WHERE idfFarmActual = @SupersededFarmMasterID;

--------------------------------------------------------------------------------------------------
-- update Surviving Farm address records
--------------------------------------------------------------------------------------------------
-- Farm Master Address update
		UPDATE T
		SET 
			T.idfsResidentType = S.idfsResidentType,
			T.idfsGroundType = S.idfsGroundType,
			T.idfsGeoLocationType = S.idfsGeoLocationType,
			T.idfsCountry = S.idfsCountry,
			T.idfsRegion = S.idfsRegion,
			T.idfsRayon = S.idfsRayon,
			T.idfsSettlement = S.idfsSettlement,
			T.idfsLocation = S.idfslocation,
			T.idfsSite = S.idfsSite,
			T.strPostCode = ISNULL(@FarmAddressPostalCode, S.strPostCode),
			T.strStreetName = ISNULL(@FarmAddressStreet, S.strStreetName),
			T.strHouse = ISNULL(@FarmAddressHouse, S.strHouse),
			T.strBuilding = ISNULL(@FarmAddressBuilding, S.strBuilding),
			T.strApartment = ISNULL(@FarmAddressApartment, S.strApartment),
			T.strDescription = S.strDescription,
			T.dblLongitude = ISNULL(@FarmAddressLongitude, S.dblLongitude),
			T.dblLatitude = ISNULL(@FarmAddressLatitude, S.dblLatitude),
			T.dblAccuracy = S.dblAccuracy,
			T.dblAlignment = S.dblAlignment,
			T.blnForeignAddress = ISNULL(@ForeignAddressIndicator, S.blnForeignAddress),
			T.strAddressString = S.strAddressString,
			T.strShortAddressString = S.strShortAddressString,
			T.AuditUpdateUser = @AuditUser,
			T.AuditUpdateDTM = GETDATE(),
			T.dblElevation = S.dblElevation

		FROM dbo.tlbGeoLocationShared T
		INNER JOIN dbo.tlbGeoLocationShared S ON S.idfGeoLocationShared = @idfGeoLocationShared
		WHERE T.idfGeoLocationShared = @idfGeoLocationShared

-- update Farm Master record
		UPDATE dbo.tlbFarmActual
		SET 
			idfsAvianFarmType = ISNULL(@AvianFarmTypeID, idfsAvianFarmType),
			idfsAvianProductionType = ISNULL(@AvianProductionTypeID, idfsAvianProductionType),
			idfsFarmCategory = ISNULL(@FarmCategory, idfsFarmCategory),
			idfsOwnershipStructure = ISNULL(@OwnershipStructureTypeID, idfsOwnershipStructure),
			idfsMovementPattern = idfsMovementPattern,
			idfsIntendedUse = idfsIntendedUse,
			idfsGrazingPattern = idfsGrazingPattern,
			idfsLivestockProductionType = idfsLivestockProductionType,
			idfHumanActual= @FarmOwnerID,
			idfFarmAddress= @FarmAddressID,
			strInternationalName = strInternationalName,
			strNationalName = strNationalName,
			strFarmCode = strFarmCode,
			strFax = strFax,
			strEmail = strEmail,
			strContactPhone = strContactPhone,
			--intLivestockTotalAnimalQty = ISNULL(@intLivestockTotalAnimalQty, intLivestockTotalAnimalQty),
			--intAvianTotalAnimalQty = ISNULL(@intAvianTotalAnimalQty, intAvianTotalAnimalQty),
			--intLivestockSickAnimalQty = ISNULL(@intLivestockSickAnimalQty, intLivestockSickAnimalQty),
			--intLivestockDeadAnimalQty = ISNULL(@intAvianTotalAnimalQty, intLivestockDeadAnimalQty),
			--intAvianDeadAnimalQty = ISNULL(@intLivestockDeadAnimalQty, intAvianDeadAnimalQty),
			intBuidings = ISNULL(@NumberOfBuildings, intBuidings),
			intBirdsPerBuilding = ISNULL(@NumberOfBirdsPerBuilding, intBirdsPerBuilding),
			--strNote = ISNULL(@strNote, strNote),
			--intHACode = ISNULL(@intHACode, intHACode),
			AuditUpdateUser = @AuditUser,
			AuditUpdateDTM = GETDATE()

		WHERE idfFarmActual = @FarmMasterID

-- disable superseded farm master record
		UPDATE dbo.tlbFarmActual
		SET intRowStatus = 1,
			AuditUpdateUser = @AuditUser,
			AuditUpdateDTM = GETDATE()

		WHERE idfFarmActual = @SupersededFarmMasterID

--------------------------------------------------------------------------------------------------
-- update Superseded Farm address records
--------------------------------------------------------------------------------------------------

		UPDATE T
		SET T.idfsResidentType = S.idfsResidentType,
			T.idfsGroundType = S.idfsGroundType,
			T.idfsGeoLocationType = S.idfsGeoLocationType,
			T.idfsCountry = S.idfsCountry,
			T.idfsRegion = S.idfsRegion,
			T.idfsRayon = S.idfsRayon,
			T.idfsSettlement = S.idfsSettlement,
			T.idfsLocation = S.idfslocation,
			T.idfsSite = S.idfsSite,
			T.strPostCode = S.strPostCode,
			T.strStreetName = S.strStreetName,
			T.strHouse = S.strHouse,
			T.strBuilding = S.strBuilding,
			T.strApartment = S.strApartment,
			T.strDescription = S.strDescription,
			T.dblLongitude = S.dblLongitude,
			T.dblLatitude = S.dblLatitude,
			T.dblAccuracy = S.dblAccuracy,
			T.dblAlignment = S.dblAlignment,
			T.blnForeignAddress = S.blnForeignAddress,
			T.strAddressString = S.strAddressString,
			T.strShortAddressString = S.strShortAddressString,
			T.strMaintenanceFlag = S.strMaintenanceFlag,
			T.strReservedAttribute = S.strReservedAttribute,
			T.SourceSystemNameID = S.SourceSystemNameID,
			T.SourceSystemKeyValue = S.SourceSystemKeyValue,
			T.AuditCreateUser = S.AuditCreateUser,
			T.AuditCreateDTM = S.AuditCreateDTM,
			T.AuditUpdateUser = S.AuditUpdateUser,
			T.AuditUpdateDTM = S.AuditUpdateDTM,
			T.dblElevation = S.dblElevation

		FROM dbo.tlbGeoLocation T
		INNER JOIN dbo.tlbGeoLocationShared S ON S.idfGeoLocationShared = @idfGeoLocationShared
		WHERE T.idfGeoLocation IN (SELECT idfGeoLocation FROM @Location)

--------------------------------------------------------------------------------------------------
-- update Superseded Farm records
--------------------------------------------------------------------------------------------------
		UPDATE T
		SET T.idfFarmActual = @FarmMasterID,
			T.idfsAvianFarmType = S.idfsAvianFarmType,
			T.idfsAvianProductionType = S.idfsAvianProductionType,
			T.idfsFarmCategory = S.idfsFarmCategory,
			T.idfsOwnershipStructure = S.idfsOwnershipStructure,
			T.idfsMovementPattern = S.idfsMovementPattern,
			T.idfsIntendedUse = S.idfsIntendedUse,
			T.idfsGrazingPattern = S.idfsGrazingPattern,
			T.idfsLivestockProductionType = S.idfsLivestockProductionType,
			--T.idfHuman = @FarmOwnerID,
			T.strInternationalName = S.strInternationalName,
			T.strNationalName = S.strNationalName,
			T.strFarmCode = S.strFarmCode,
			T.strFax = S.strFax,
			T.strEmail = S.strEmail,
			T.strContactPhone = S.strContactPhone,
			T.intLivestockTotalAnimalQty = S.intLivestockTotalAnimalQty,
			T.intAvianTotalAnimalQty = S.intAvianTotalAnimalQty,
			T.intLivestockSickAnimalQty = S.intLivestockSickAnimalQty,
			T.intLivestockDeadAnimalQty = S.intLivestockDeadAnimalQty,
			T.intAvianDeadAnimalQty = S.intAvianDeadAnimalQty,
			T.intBuidings = S.intBuidings,
			T.intBirdsPerBuilding = S.intBirdsPerBuilding,
			T.strNote = S.strNote,
			T.intHACode = S.intHACode,
			T.datModificationDate = S.datModificationDate,
			T.datModificationForArchiveDate = GETDATE(),
			T.AuditUpdateUser = @AuditUser,
			T.AuditUpdateDTM = GETDATE()

		FROM dbo.tlbFarm T
		INNER JOIN dbo.tlbFarmActual S ON S.idfFarmActual = @FarmMasterID
		WHERE T.idfFarmActual = @SupersededFarmMasterID

--------------------------------------------------------------------------------------------------
-- update Superseded Human records
--------------------------------------------------------------------------------------------------
		DECLARE @idfHumanActualSuperseded BIGINT = (SELECT idfHumanActual FROM dbo.tlbFarmActual WHERE idfFarmActual = @SupersededFarmMasterID)

		UPDATE dbo.tlbHuman
            SET idfHumanActual = @FarmOwnerID,
                idfsOccupationType = ha.idfsOccupationType,
                idfsNationality = ha.idfsNationality,
                idfsHumanGender = ha.idfsHumanGender,
                --idfCurrentResidenceAddress = ha.idfCurrentResidenceAddress,
                --idfEmployerAddress = ha.idfEmployerAddress,
                --idfRegistrationAddress = ha.idfRegistrationAddress,
                datDateofBirth = ha.datDateofBirth,
                datDateOfDeath = ha.datDateOfDeath,
                strLastName = ha.strLastName,
                strSecondName = ha.strSecondName,
                strFirstName = ha.strFirstName,
                strRegistrationPhone = ha.strRegistrationPhone,
                strEmployerName = ha.strEmployerName,
                strHomePhone = ha.strHomePhone,
                strWorkPhone = ha.strWorkPhone,
                idfsPersonIDType = ha.idfsPersonIDType,
                strPersonID = ha.strPersonID,
                datModIFicationDate = ha.datModIFicationDate
            FROM dbo.tlbHuman h
                INNER JOIN dbo.tlbHumanActual ha
                    ON ha.idfHumanActual = @FarmOwnerID
            WHERE h.idfHumanActual = @idfHumanActualSuperseded



--		EXEC dbo.USP_VET_FARM_MASTER_SET
--			@FarmMasterID = @FarmMasterID,
--			@AvianFarmTypeID = @AvianFarmTypeID,
--			@AvianProductionTypeID = @AvianProductionTypeID,
--			@FarmCategory = @FarmCategory,
--			@FarmOwnerID = @FarmOwnerID,
--			@FarmNationalName = @FarmNationalName,
--			@FarmInterNationalName = @FarmInterNationalName,
--			@EIDSSFarmID = @EIDSSFarmID,
--			@OwnershipStructureTypeID = @OwnershipStructureTypeID,
--			@Fax = @Fax,
--			@Email = @Email,
--			@Phone = @Phone,
--			@FarmAddressID = @FarmAddressID,
--			@ForeignAddressIndicator = @ForeignAddressIndicator,
--			@FarmAddressIdfsLocation = @FarmAddressIdfsLocation,
--			@FarmAddressStreet = @FarmAddressStreet,
--			@FarmAddressApartment = @FarmAddressApartment,
--			@FarmAddressBuilding = @FarmAddressBuilding,
--			@FarmAddressHouse = @FarmAddressHouse,
--			@FarmAddressPostalCode = @FarmAddressPostalCode,
--			@FarmAddressLatitude = @FarmAddressLatitude,
--			@FarmAddressLongitude = @FarmAddressLongitude,
--			@NumberOfBuildings = @NumberOfBuildings,
--			@NumberOfBirdsPerBuilding = @NumberOfBirdsPerBuilding,
--			@HerdsOrFlocks = @HerdsOrFlocks,
--			@Species = @Species,
--			@AuditUser = @AuditUser
		
----------------------------------------------------------------------------------------------------
---- replace Superseded farm ID with surviving Farm ID
----------------------------------------------------------------------------------------------------
--		DECLARE	@idfFarmAddressSurvivor	BIGINT
--		Select top 1 @idfFarmAddressSurvivor = idfFarmAddress
--		FROM	dbo.tlbFarm
--		WHERE	idfFarmActual = @FarmMasterID and intRowStatus = 0

--		IF @idfFarmAddressSurvivor IS NULL
--		BEGIN
--			UPDATE	dbo.tlbFarm
--			SET		idfFarmActual = @FarmMasterID,
--					strFarmCode = @EIDSSFarmID,
--					strNationalName = @FarmNationalName
--			WHERE	idfFarmActual = @SupersededFarmMasterID
--		END
--		ELSE
--		BEGIN
--			UPDATE	dbo.tlbFarm
--			SET		idfFarmActual = @FarmMasterID,
--					strFarmCode = @EIDSSFarmID,
--					strNationalName = @FarmNationalName,
--					idfFarmAddress = @idfFarmAddressSurvivor
--			WHERE	idfFarmActual = @SupersededFarmMasterID
--		END;
		
----------------------------------------------------------------------------------------------------
---- soft delete the old Farm Master relate records
----------------------------------------------------------------------------------------------------
--		EXEC dbo.USP_VET_FARM_MASTER_DEL 
--			@FarmMasterID = @SupersededFarmMasterID,
--			@DeduplicationIndicator = NULL -- bit
		 		
		IF @@TRANCOUNT > 0
			COMMIT TRANSACTION;

		SELECT @ReturnCode ReturnCode,
			@ReturnMessage ReturnMessage,
			@FarmMasterID SessionKey,
			@EIDSSFarmID SessionID;

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_EVENT_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USP_ADMIN_EVENT_SET
--
-- Description:	Inserts or updates the event table for SAUC55 and SAUC56.
-- 
-- Field Notes:
--
-- Object - ID of record such as human disease report
-- LoginSite - ID of organization login site where initial event that raise notification was 
-- created.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     07/06/2022 Initial release.
-- Stephen Long     07/11/2022 Added third party site alert events.
-- Stephen Long     07/12/2022 Added vector surveillance session third party site alerts.
-- Stephen Long     09/15/2022 Added note parameter.  Temporarily removed!
-- Stephen Long     10/05/2022 Fix for event type ID when third party site event is already passed 
--                             in, and where from site ID to login site ID on event users.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_EVENT_SET]
(
    @EventId BIGINT,
    @EventTypeId BIGINT,
    @UserId BIGINT,
    @ObjectId BIGINT = NULL,
    @DiseaseId BIGINT = NULL,
    @SiteId BIGINT = NULL,
    @InformationString NVARCHAR(MAX) = NULL,
    --@Note NVARCHAR(MAX) = NULL, 
    @LoginSiteId BIGINT = NULL,
    @LocationId BIGINT = NULL,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
                @NeighboringSiteId BIGINT = NULL,
                @EventUserId BIGINT = NULL,
                @EventSiteId BIGINT = NULL;
        DECLARE @EventUsers TABLE
        (
            UserId BIGINT NOT NULL,
            SiteId BIGINT NOT NULL
        );
        DECLARE @NeighboringSites TABLE
        (
            AccessRuleId BIGINT,
            SiteId BIGINT
        );
        DECLARE @SiteAccessRuleGrantee TABLE (AccessRuleId BIGINT);

        -- Get all users of the target site that have subscribed to the notification type.
        INSERT INTO @EventUsers
        SELECT u.idfUserID,
               u.idfsSite
        FROM dbo.tstUserTable u
            INNER JOIN dbo.EventSubscription e
                ON e.idfUserID = u.idfUserID
                   AND e.EventNameID = @EventTypeId
        WHERE u.idfsSite = @LoginSiteId
              AND u.intRowStatus = 0
              AND e.ReceiveAlertFlag = 1;

        -- Get all users of the target site's neighboring sites based on filtration rules.
        -- Logged in user site ID is a grantor, then get list of grantee sites.
        INSERT INTO @NeighboringSites
        SELECT ar.AccessRuleID,
               ara.ActorSiteID
        FROM dbo.AccessRule ar
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.AccessRuleID = ar.AccessRuleID
                   AND ara.intRowStatus = 0
        WHERE ar.intRowStatus = 0
              AND ar.BorderingAreaRuleIndicator = 1
              AND ar.GrantingActorSiteID = @LoginSiteId
              AND ara.ActorSiteID IS NOT NULL
              AND ara.ActorSiteID <> @LoginSiteId
        GROUP BY ara.ActorSiteID,
                 ar.AccessRuleID;

        -- Logged in user site ID access rules as a grantee.
        INSERT INTO @SiteAccessRuleGrantee
        SELECT ara.AccessRuleID
        FROM dbo.AccessRuleActor ara
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE ara.ActorSiteID = @LoginSiteId
              AND ara.intRowStatus = 0
              AND ar.BorderingAreaRuleIndicator = 1;

        -- Select all grantee sites that the site is also a grantee of.
        INSERT INTO @NeighboringSites
        SELECT sg.AccessRuleID,
               ara.ActorSiteID
        FROM @SiteAccessRuleGrantee sg
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.AccessRuleID = sg.AccessRuleID
                   AND ara.intRowStatus = 0
        WHERE ara.ActorSiteID <> @LoginSiteId
              AND ara.ActorSiteID IS NOT NULL
        GROUP BY ara.ActorSiteID,
                 sg.AccessRuleID;

        WHILE EXISTS (SELECT * FROM @NeighboringSites)
        BEGIN
            SELECT TOP 1
                @NeighboringSiteId = SiteId
            FROM @NeighboringSites;

            -- Get all users of the neighboring site.
            INSERT INTO @EventUsers
            SELECT u.idfUserID,
                   u.idfsSite
            FROM dbo.tstUserTable u
                INNER JOIN dbo.EventSubscription e
                    ON e.idfUserID = u.idfUserID
                       AND e.EventNameID = @EventTypeId
            WHERE u.idfsSite = @NeighboringSiteId
                  AND u.intRowStatus = 0
                  AND e.ReceiveAlertFlag = 1;

            DELETE FROM @NeighboringSites
            WHERE SiteID = @NeighboringSiteId;
        END

        WHILE EXISTS (SELECT * FROM @EventUsers)
        BEGIN
            SELECT TOP 1
                @EventUserId = UserId,
                @EventSiteId = SiteId
            FROM @EventUsers;

            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tstEvent', @EventId OUTPUT;

            -- Change to the third party site alert/event type id.
            IF @EventSiteId <> @SiteId
            BEGIN
                SET @EventTypeId = CASE WHEN @EventTypeId = 10025503 THEN
                    10025504
                WHEN @EventTypeId = 10025501 THEN
                    10025502
                WHEN @EventTypeId = 10025505 THEN
                    10025506
                WHEN @EventTypeId = 10025507 THEN
                    10025508
                WHEN @EventTypeId = 10025509 THEN
                    10025512
                WHEN @EventTypeId = 10025510 THEN
                    10025511
                WHEN @EventTypeId = 10025037 THEN
                    10025038
                WHEN @EventTypeId = 10025041 THEN
                    10025042
                WHEN @EventTypeId = 10025043 THEN
                    10025044
                WHEN @EventTypeId = 10025045 THEN
                    10025046
                WHEN @EventTypeId = 10025047 THEN
                    10025048
                WHEN @EventTypeId = 10025077 THEN
                    10025078
                WHEN @EventTypeId = 10025079 THEN
                    10025080
                WHEN @EventTypeId = 10025081 THEN
                    10025082
                WHEN @EventTypeId = 10025099 THEN
                    10025100
                WHEN @EventTypeId = 10025097 THEN
                    10025098
                WHEN @EventTypeId = 10025129 THEN
                    10025130
                WHEN @EventTypeId = 10025101 THEN
                    10025102
                WHEN @EventTypeId = 10025103 THEN
                    10025104
                WHEN @EventTypeId = 10025105 THEN
                    10025106
                WHEN @EventTypeId = 10025107 THEN
                    10025108
                WHEN @EventTypeId = 10025085 THEN
                    10025086
                WHEN @EventTypeId = 10025087 THEN
                    10025088
                WHEN @EventTypeId = 10025089 THEN
                    10025090
                WHEN @EventTypeId = 10025091 THEN
                    10025092
                WHEN @EventTypeId = 10025093 THEN
                    10025094
                WHEN @EventTypeId = 10025095 THEN
                    10025096
                WHEN @EventTypeId = 10025067 THEN
                    10025068
                WHEN @EventTypeId = 10025071 THEN
                    10025072
                WHEN @EventTypeId = 10025073 THEN
                    10025074
                WHEN @EventTypeId = 10025075 THEN
                    10025076
                WHEN @EventTypeId = 10025513 THEN
                    10025514
                WHEN @EventTypeId = 10025517 THEN
                    10025518
                WHEN @EventTypeId = 10025519 THEN
                    10025520
                WHEN @EventTypeId = 10025525 THEN
                    10025526
                WHEN @EventTypeId = 10025049 THEN
                    10025050
                WHEN @EventTypeId = 10025051 THEN
                    10025052
                WHEN @EventTypeId = 10025053 THEN
                    10025054
                WHEN @EventTypeId = 10025055 THEN
                    10025056
                WHEN @EventTypeId = 10025057 THEN
                    10025058
                WHEN @EventTypeId = 10025059 THEN
                    10025060
                WHEN @EventTypeId = 10025061 THEN
                    10025062
                WHEN @EventTypeId = 10025065 THEN
                    10025066
                WHEN @EventTypeId = 10025069 THEN
                    10025070
                WHEN @EventTypeId = 10025527 THEN
                    10025528
                WHEN @EventTypeId = 10025529 THEN
                    10025530
                WHEN @EventTypeId = 10025537 THEN
                    10025538
                WHEN @EventTypeId = 10025539 THEN
                    10025540
                WHEN @EventTypeId = 10025563 THEN
                    10025564
                ELSE
                    @EventTypeId
                END
            END

            INSERT INTO dbo.tstEvent
            (
                idfEventID,
                idfsEventTypeID,
                idfObjectID,
                strInformationString,
                --strNote, 
                datEventDatatime,
                idfUserID,
                intProcessed,
                idfsSite,
                idfsDiagnosis,
                idfsLoginSite,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateDTM,
                AuditCreateUser,
                idfsLocation
            )
            VALUES
            (@EventId,
             @EventTypeId,
             @ObjectId,
             @InformationString,
             --@Note, 
             GETDATE(),
             @EventUserId,
             0  ,
             @EventSiteId,
             @DiseaseId,
             @LoginSiteId,
             10519001,
             '[{"idfEventID":' + CAST(@EventId AS NVARCHAR(300)) + '}]',
             GETDATE(),
             @AuditUserName,
             @LocationId
            );

            DELETE FROM @EventUsers
            WHERE UserId = @EventUserId
                  AND SiteId = @EventSiteId;
        END;
    END TRY
    BEGIN CATCH
        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        THROW;
    END CATCH;

    SELECT @ReturnCode ReturnCode,
           @ReturnMessage ReturnMessage;
END;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USP_REF_MEASUREREFERENCE_SET]...';


GO
-- ================================================================================================
-- Name: USP_REF_MEASUREREFERENCE_SET
-- 
-- Description:	Get the measure list references for reference listings.
--                      
-- Author: Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		10/22/2018 Initial release.
-- Ricky Moss		01/18/2019 Remove return codes;
-- Ricky Moss		12/29/2019 Refactoring to check duplicates
-- Ricky Moss		05/12/2020 Updated Translated Value resolution
-- Leo Tracchia		07/07/2021 Removed 'INSERT INTO trtStringNameTranslation...' unnecessary 
-- Leo Tracchia		08/03/2021 Removed logic for checking duplicates on National value. Only 
--                             Default value is required for duplication check.
-- Leo Tracchia		08/09/2021 Fixed logic for duplication check.
-- Stephen Long     07/18/2022 Added site alert logic.
-- Ann Xiong     09/27/2022 Refactored to save the 'National Value' field.

-- exec USP_REF_MEASUREREFERENCE_SET NULL, 19000074, 'Test-1229', 'Test-1229', '', 0, 'en'
-- exec USP_REF_MEASUREREFERENCE_SET 58218970000309, 19000074, 'Test 1229', 'Test 1229', '3', 0, 'en'
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_MEASUREREFERENCE_SET]
    @idfsBaseReference BIGINT = NULL,
    @idfsReferenceType BIGINT,
    @strDefault VARCHAR(200),
    @strName NVARCHAR(200),
    @strActionCode NVARCHAR(200),
    @intOrder INT,
    @LangID NVARCHAR(50),
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
AS
DECLARE @ReturnMessage NVARCHAR(MAX) = N'SUCCESS',
        @ReturnCode BIGINT = 0,
        @existingDefault BIGINT,
        @existingName BIGINT;

DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage NVARCHAR(MAX)
);

BEGIN

    BEGIN TRY

        SELECT @existingDefault =
        (
            SELECT TOP 1
                (idfsReference)
            FROM dbo.fn_gbl_reference_getlist(@langId, @idfsReferenceType)
            WHERE strDefault = @strDefault
        );

        IF (
               @existingDefault IS NOT NULL
               AND @existingDefault <> @idfsBaseReference
           )
           OR (
                  @existingDefault IS NOT NULL
                  AND @idfsBaseReference IS NULL
              )
        BEGIN
            SELECT @ReturnMessage = 'DOES EXIST';
            --IF @existingDefault IS NOT NULL
            --    SELECT @idfsBaseReference = @existingDefault;
            --ELSE
            --    SELECT @idfsBaseReference = @existingName;
        END
		ELSE
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_BaseReference_SET @ReferenceID = @idfsBaseReference OUTPUT,
                                                  @ReferenceType = @idfsReferenceType,
                                                  @LangID = @LangID,
                                                  @DefaultName = @strDefault,
                                                  @NationalName = @strName,
                                                  @HACode = 32,
                                                  @Order = @intOrder,
                                                  @System = 0,
                                                  @User = @AuditUserName;
        --ELSE IF (
        --            (
        --                EXISTS
        --     (
        --         SELECT trtBaseReference.idfsBaseReference
        --         FROM dbo.trtBaseReference
        --         WHERE strDefault = @strDefault
        --               AND idfsReferenceType = @idfsReferenceType
        --               AND intRowStatus = 1
        --     )
        --                OR EXISTS
        --     (
        --         SELECT dbo.trtBaseReference.idfsBaseReference
        --         FROM dbo.trtBaseReference
        --             JOIN dbo.trtStringNameTranslation
        --                 ON dbo.trtBaseReference.idfsBaseReference = dbo.trtStringNameTranslation.idfsBaseReference
        --         WHERE strTextString = @strName
        --               AND idfsReferenceType = @idfsReferenceType
        --               AND dbo.trtBaseReference.intRowStatus = 1
        --     )
        --            )
        --            AND @idfsBaseReference is NULL
        --        )
        --BEGIN
        --    SELECT @idfsBaseReference =
        --    (
        --        SELECT trtBaseReference.idfsBaseReference
        --        FROM dbo.trtBaseReference
        --        WHERE strDefault = @strDefault
        --              AND idfsReferenceType = @idfsReferenceType
        --              AND intRowStatus = 1
        --    )

        --    IF @idfsBaseReference IS NULL
        --    BEGIN
        --        SELECT @idfsBaseReference =
        --        (
        --            SELECT dbo.trtBaseReference.idfsBaseReference
        --            FROM dbo.trtBaseReference
        --                JOIN dbo.trtStringNameTranslation
        --                    ON dbo.trtBaseReference.idfsBaseReference = dbo.trtStringNameTranslation.idfsBaseReference
        --            WHERE strTextString = @strName
        --                  AND idfsReferenceType = @idfsReferenceType
        --                  AND dbo.trtBaseReference.intRowStatus = 1
        --        );
        --    END

        --    IF @idfsReferenceType = 19000079 --SANITARY					
        --        UPDATE dbo.trtSanitaryAction
        --        SET strActionCode = @strActionCode,
        --            intRowStatus = 0,
        --            AuditUpdateDTM = GETDATE(),
        --            AuditUpdateUser = @AuditUserName
        --        WHERE idfsSanitaryAction = @idfsBaseReference;

        --    ELSE IF (@idfsReferenceType = 19000074) --PROPHYLACTIC 					
        --        UPDATE dbo.trtProphilacticAction
        --        SET strActionCode = @strActionCode,
        --            intRowStatus = 0,
        --            AuditUpdateDTM = GETDATE(),
        --            AuditUpdateUser = @AuditUserName
        --        WHERE idfsProphilacticAction = @idfsBaseReference;

        --    UPDATE dbo.trtBaseReference
        --    SET strDefault = @strDefault,
        --        intOrder = @intOrder,
        --        intRowStatus = 0,
        --        AuditUpdateDTM = GETDATE(),
        --        AuditUpdateUser = @AuditUserName
        --    WHERE idfsBaseReference = @idfsBaseReference;

        --    UPDATE dbo.trtStringNameTranslation
        --    SET strTextString = @strName,
        --        intRowStatus = 0,
        --        AuditUpdateDTM = GETDATE(),
        --        AuditUpdateUser = @AuditUserName
        --    WHERE idfsBaseReference = @idfsBaseReference
        --          AND idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LangID);

        --    INSERT INTO @SuppressSelect
        --    EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
        --                                   @EventTypeId,
        --                                   @UserId,
        --                                   @idfsBaseReference,
        --                                   NULL,
        --                                   @SiteId,
        --                                   NULL,
        --                                   @SiteId,
        --                                   @LocationId,
        --                                   @AuditUserName;
        --END
        --ELSE 
		IF @existingDefault IS NOT NULL
		--IF EXISTS
  --      (
  --          SELECT idfsBaseReference
  --          FROM dbo.trtBaseReference
  --          WHERE idfsBaseReference = @idfsBaseReference
  --                AND idfsReferenceType = @idfsReferenceType
  --                --AND intRowStatus = 0
  --      )
        BEGIN
            IF @idfsReferenceType = 19000079 --SANITARY		
                UPDATE dbo.trtSanitaryAction
                SET strActionCode = @strActionCode,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfsSanitaryAction = @idfsBaseReference;
            ELSE IF (@idfsReferenceType = 19000074) --PROPHYLACTIC 			
                UPDATE dbo.trtProphilacticAction
                SET strActionCode = @strActionCode,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfsProphilacticAction = @idfsBaseReference;

            --UPDATE dbo.trtBaseReference
            --SET strDefault = @strDefault,
            --    intOrder = @intOrder,
            --    AuditUpdateDTM = GETDATE(),
            --    AuditUpdateUser = @AuditUserName
            --WHERE idfsBaseReference = @idfsBaseReference;

            --UPDATE dbo.trtStringNameTranslation
            --SET strTextString = @strName,
            --    AuditUpdateDTM = GETDATE(),
            --    AuditUpdateUser = @AuditUserName
            --WHERE idfsBaseReference = @idfsBaseReference
            --      AND idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LangID);

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                           @EventTypeId,
                                           @UserId,
                                           @idfsBaseReference,
                                           NULL,
                                           @SiteId,
                                           NULL,
                                           @SiteId,
                                           @LocationId,
                                           @AuditUserName;
        END
        ELSE
        BEGIN
            --INSERT INTO @SuppressSelect
            --EXECUTE dbo.USP_GBL_BaseReference_SET @ReferenceID = @idfsBaseReference OUTPUT,
            --                                      @ReferenceType = @idfsReferenceType,
            --                                      @LangID = @LangID,
            --                                      @DefaultName = @strDefault,
            --                                      @NationalName = @strName,
            --                                      @HACode = 32,
            --                                      @Order = @intOrder,
            --                                      @System = 0,
            --                                      @User = @AuditUserName;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                           @EventTypeId,
                                           @UserId,
                                           @idfsBaseReference,
                                           NULL,
                                           @SiteId,
                                           NULL,
                                           @SiteId,
                                           @LocationId,
                                           @AuditUserName;

            IF @idfsReferenceType = 19000079 --SANITARY			
                INSERT INTO dbo.trtSanitaryAction
                (
                    idfsSanitaryAction,
                    strActionCode,
                    intRowStatus,
                    AuditCreateDTM,
                    AuditCreateUser
                )
                VALUES
                (@idfsBaseReference, @strActionCode, 0, GETDATE(), @AuditUserName);
            ELSE IF (@idfsReferenceType = 19000074) -- PROPHYLACTIC 
                INSERT INTO dbo.trtProphilacticAction
                (
                    idfsProphilacticAction,
                    strActionCode,
                    intRowStatus,
                    AuditCreateDTM,
                    AuditCreateUser
                )
                VALUES
                (@idfsBaseReference, @strActionCode, 0, GETDATE(), @AuditUserName);
        END

        SELECT @ReturnCode AS 'ReturnCode',
               @ReturnMessage AS 'ReturnMessage',
               @idfsBaseReference AS 'idfsBaseReference';
    END TRY
    BEGIN CATCH
        THROW
    END CATCH

END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_HumanAggregateCaseMatrixReport_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USP_CONF_HumanAggregateCaseMatrixReport_SET
--
-- Description: Saves Entries For Human Aggregate Case Matrix Report FROM A JSON STRING
-- 
-- Author: Lamont Mitchell
--
-- Revision History:
-- Name                         Date       Change Detail
-- ---------------------------- ---------- -------------------------------------------------------
-- Lamont Mitchell              03/04/2019 Initial Created
-- Stephen Long                 07/15/2022 Added site alert and renamed sproc to standard SET.
-- Leo Tracchia					10/24/2022 Removed select from @Disease for IdfVersion, replaced with @idfVersion
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_HumanAggregateCaseMatrixReport_SET]
     @idfAggrHumanCaseMTX BIGINT NULL,
    @idfVersion BIGINT NULL,
    @inJsonString VARCHAR(MAX) NULL,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
AS
BEGIN
    DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
            @ReturnCode BIGINT = 0,
            @idfsReferenceType BIGINT,
            @JsonString VARCHAR(MAX),
            @EventId BIGINT = -1,
            @EventSiteId BIGINT = @SiteId,
            @EventUserId BIGINT = @UserId,
            @EventDiseaseId BIGINT = NULL,
            @EventLocationId BIGINT = @LocationId,
            @EventInformationString NVARCHAR(MAX) = NULL,
            @EventLoginSiteId BIGINT = @SiteId;
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );
    DECLARE @Disease TABLE
    (
        IntNumRow INT,
        --IdfVersion BIGINT,
        IdfsDiagnosis BIGINT
    );

    SET NOCOUNT ON;

    BEGIN TRY
        SET @JsonString = @inJsonString;
        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbAggrHumanCaseMTX
            WHERE idfVersion = @idfVersion
        )
        BEGIN
            UPDATE dbo.tlbAggrHumanCaseMTX
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfVersion = @idfVersion;
        END

        INSERT INTO @Disease
        SELECT *
        FROM
            OPENJSON(@inJsonString)
            WITH
            (
                IntNumRow INT,
                --IdfVersion BIGINT,
                IdfsDiagnosis BIGINT
            );

        DECLARE @rowCount INT = 0;
        SET @rowCount =
        (
            SELECT MAX(IntNumRow) FROM @Disease
        );
        DECLARE @_int INT = 1;
        WHILE @_int <= @rowCount
        BEGIN
            IF EXISTS
            (
                SELECT *
                FROM dbo.tlbAggrHumanCaseMTX
                WHERE idfVersion = @idfVersion
                      AND idfsDiagnosis =
                      (
                          SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                      )
            )
            BEGIN
                DECLARE @aggHumanCaseMtxId BIGINT;
                SET @aggHumanCaseMtxId =
                (
                    SELECT idfAggrHumanCaseMTX
                    FROM dbo.tlbAggrHumanCaseMTX
                    WHERE idfVersion = @idfVersion
                          AND idfsDiagnosis =
                          (
                              SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                          )
                );

                UPDATE dbo.tlbAggrHumanCaseMTX
                SET intRowStatus = 0,
                    intNumRow = @_int,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfsDiagnosis =
                (
                    SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                )
                      AND idfVersion = @IdfVersion
                      --(
                      --    SELECT IdfVersion FROM @Disease WHERE IntNumRow = @_int
                      --)
                      AND idfAggrHumanCaseMTX = @aggHumanCaseMtxId;
            END
            ELSE
            BEGIN
                IF EXISTS (SELECT * FROM @Disease WHERE IntNumRow = @_int)
                BEGIN
                    INSERT INTO @SuppressSelect
                    EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbAggrHumanCaseMTX',
                                                   @idfAggrHumanCaseMTX OUTPUT;

                    INSERT INTO dbo.tlbAggrHumanCaseMTX
                    (
                        idfAggrHumanCaseMTX,
                        idfVersion,
                        idfsDiagnosis,
                        intNumRow,
                        intRowStatus,
                        AuditCreateDTM,
                        AuditCreateUser
                    )
                    SELECT @idfAggrHumanCaseMTX,
                           @IdfVersion,
                           IdfsDiagnosis,
                           IntNumRow,
                           0,
                           GETDATE(),
                           @AuditUserName
                    FROM @Disease
                    WHERE IntNumRow = @_int;
                END
            END

            SET @_int = @_int + 1;
        END

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                        @EventTypeId,
                                        @EventUserId,
                                        @idfAggrHumanCaseMTX,
                                        @EventDiseaseId,
                                        @EventSiteId,
                                        @EventInformationString,
                                        @EventLoginSiteId,
                                        @EventLocationId,
                                        @AuditUserName;

        SELECT @ReturnCode AS 'ReturnCode',
               @ReturnMessage AS 'ReturnMessage',
               @idfAggrHumanCaseMTX AS 'idfAggrHumanCaseMTX';
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USP_CONF_TESTTOTESTRESULTMATRIX_SET]...';


GO
-- ================================================================================================
-- Name: USP_CONF_TESTTOTESTRESULTMATRIX_SET
--
-- Description:	Creates a test to test result matrix
--                      
-- Author: Ricky Moss
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		03/11/2018 Initial release.
-- Stephen Long     07/13/2022 Added site alert logic.
--
-- exec USP_CONF_TESTTOTESTRESULTMATRIX_SET 803960000000, '807830000000, 807990000000, 808040000000', 0
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_TESTTOTESTRESULTMATRIX_SET]
(
    @idfsTestResultRelation BIGINT,
    @idfsTestName BIGINT,
    @idfsTestResult BIGINT,
    @blnIndicative BIT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
        @ReturnCode BIGINT = 0,
        @EventId BIGINT = -1,
        @EventSiteId BIGINT = @SiteId,
        @EventUserId BIGINT = @UserId,
        @EventDiseaseId BIGINT = NULL,
        @EventLocationId BIGINT = @LocationId,
        @EventInformationString NVARCHAR(MAX) = NULL,
        @EventLoginSiteId BIGINT = @SiteId;
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage NVARCHAR(MAX)
);
BEGIN
    BEGIN TRY
        IF @idfsTestResultRelation = 19000097
        BEGIN
            IF NOT EXISTS
            (
                SELECT idfsTestResult
                FROM dbo.trtTestTypeToTestResult
                WHERE idfsTestResult = @idfsTestResult
                      AND idfsTestName = @idfsTestName
            )
            BEGIN
                INSERT INTO dbo.trtTestTypeToTestResult
                (
                    idfsTestName,
                    idfsTestResult,
                    blnIndicative,
                    intRowStatus,
                    AuditCreateDTM,
                    AuditCreateUser
                )
                VALUES
                (@idfsTestName, @idfsTestResult, @blnIndicative, 0, GETDATE(), @AuditUserName);
            END
            ELSE IF EXISTS
            (
                SELECT idfsTestResult
                FROM dbo.trtTestTypeToTestResult
                WHERE idfsTestResult = @idfsTestResult
                      AND idfsTestName = @idfsTestName
            )
            BEGIN
                UPDATE dbo.trtTestTypeToTestResult
                SET intRowStatus = 0,
                    blnIndicative = @blnIndicative,
                    AuditUpdateDTM = GETDATE(), 
                    AuditUpdateUser = @AuditUserName
                WHERE idfsTestResult = @idfsTestResult
                      AND idfsTestName = @idfsTestName;
				set @ReturnCode = 6
				set @ReturnMessage = 'EXISTS'
            END
        END
        ELSE
        BEGIN
            --creates new test for disease
            IF NOT EXISTS
            (
                SELECT idfsPensideTestResult
                FROM dbo.trtPensideTestTypeToTestResult
                WHERE idfsPensideTestResult = @idfsTestResult
                      AND idfsPensideTestName = @idfsTestName
            )
            BEGIN
                INSERT INTO dbo.trtPensideTestTypeToTestResult
                (
                    idfsPensideTestName,
                    idfsPensideTestResult,
                    blnIndicative,
                    intRowStatus,
                    AuditCreateDTM,
                    AuditCreateUser
                )
                VALUES
                (@idfsTestName, @idfsTestResult, @blnIndicative, 0, GETDATE(), @AuditUserName);
            END
            ELSE IF EXISTS
            (
                SELECT idfsTestResult
                FROM dbo.trtTestTypeToTestResult
                WHERE idfsTestResult = @idfsTestResult
                      AND idfsTestName = @idfsTestName
            )
            BEGIN
                UPDATE dbo.trtTestTypeToTestResult
                SET intRowStatus = 0,
                    blnIndicative = @blnIndicative, 
                    AuditUpdateDTM = GETDATE(), 
                    AuditUpdateUser = @AuditUserName 
                WHERE idfsTestResult = @idfsTestResult
                      AND idfsTestName = @idfsTestName;
				set @ReturnCode = 6
				set @ReturnMessage = 'EXISTS'

            END
        END

        INSERT INTO @SuppressSelect 
        EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                        @EventTypeId,
                                        @EventUserId,
                                        @idfsTestName,
                                        @EventDiseaseId,
                                        @EventSiteId,
                                        @EventInformationString,
                                        @EventLoginSiteId,
                                        @EventLocationId,
                                        @AuditUserName;

        SELECT @ReturnCode AS 'ReturnCode',
               @ReturnMessage AS 'ReturnMessage',
               @idfsTestName AS 'idfsTestName';
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_VeterinaryAggregateCaseMatrixReport_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USP_CONF_VeterinaryAggregateCaseMatrixReport_SET
--
-- Description: Saves entries for veterinary aggregate case matrix report.
-- 
-- Author: Lamont Mitchell
--
-- Revision History:
-- Name                         Date       Change Detail
-- ---------------------------- ---------- -------------------------------------------------------
-- Lamont Mitchell              03/04/2019 Initial Created
-- Stephen Long                 07/15/2022 Added site alert and renamed sproc to standard SET.
-- Leo Tracchia					10/24/2022 Removed select from @Disease for IdfVersion, replaced with @idfVersion
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_VeterinaryAggregateCaseMatrixReport_SET]
    @idfAggrVetCaseMTX BIGINT NULL,
    @idfVersion BIGINT NULL,
    @inJsonString VARCHAR(MAX) NULL,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
AS
BEGIN
    DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
            @ReturnCode BIGINT = 0,
            @idfsReferenceType BIGINT,
            @JsonString VARCHAR(MAX),
            @EventId BIGINT = -1,
            @EventSiteId BIGINT = @SiteId,
            @EventUserId BIGINT = @UserId,
            @EventDiseaseId BIGINT = NULL,
            @EventLocationId BIGINT = @LocationId,
            @EventInformationString NVARCHAR(MAX) = NULL,
            @EventLoginSiteId BIGINT = @SiteId;
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );
    Declare @Disease Table
    (
        IntNumRow INT,
        IdfAggrVetCaseMTX BIGINT,
        --IdfVersion BIGINT,
        IdfsDiagnosis BIGINT,
        IdfsSpeciesType BIGINT
    );

    SET NOCOUNT ON;

    BEGIN TRY
        SET @JsonString = @inJsonString;
        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbAggrVetCaseMTX
            WHERE idfVersion = @idfVersion
        )
        BEGIN
            UPDATE dbo.tlbAggrVetCaseMTX
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfVersion = @idfVersion;

        END

        INSERT INTO @Disease
        (
            IdfAggrVetCaseMTX,
            --IdfVersion,
            IdfsDiagnosis,
            IdfsSpeciesType,
            IntNumRow
        )
        SELECT *
        FROM
            OPENJSON(@JsonString)
            WITH
            (
                IdfAggrVetCaseMTX BIGINT,
                --IdfVersion BIGINT,
                IdfsDiagnosis BIGINT,
                IdfsSpeciesType BIGINT,
                IntNumRow INT
            )
        DECLARE @rowCount INT = 0;
        SET @rowCount =
        (
            SELECT MAX(IntNumRow) FROM @Disease
        );
        DECLARE @_int INT = 1;
        WHILE @_int <= @rowCount
        BEGIN
            IF EXISTS
            (
                SELECT *
                FROM dbo.tlbAggrVetCaseMTX
                WHERE idfVersion = @idfVersion
					--(
					--	SELECT IdfVersion FROM @Disease WHERE IntNumRow = @_int
					--)
                      AND idfsDiagnosis =
                      (
                          SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                      )
                      AND idfsSpeciesType =
                      (
                          SELECT IdfsSpeciesType FROM @Disease WHERE IntNumRow = @_int
                      )
            )
            BEGIN
                DECLARE @aggVeterinaryCaseMtxId BIGINT;
                SET @aggVeterinaryCaseMtxId =
                (
                    SELECT idfAggrVetCaseMTX
                    FROM dbo.tlbAggrVetCaseMTX
                    WHERE idfVersion = @idfVersion
                          AND idfsDiagnosis =
                          (
                              SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                          )
                          AND idfsSpeciesType =
                          (
                              SELECT IdfsSpeciesType FROM @Disease WHERE IntNumRow = @_int
                          )
                )

                UPDATE dbo.tlbAggrVetCaseMTX
                SET intRowStatus = 0,
                    intNumRow = @_int,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfsDiagnosis =
                (
                    SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                )
                      AND idfVersion = @idfVersion
                      --(
                      --    SELECT IdfVersion FROM @Disease WHERE IntNumRow = @_int
                      --)
                      AND idfsSpeciesType =
                      (
                          SELECT IdfsSpeciesType FROM @Disease WHERE IntNumRow = @_int
                      );
            END
            ELSE
            BEGIN
                IF EXISTS (SELECT * FROM @Disease WHERE IntNumRow = @_int)
                BEGIN
                    INSERT INTO @SuppressSelect
                    EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbAggrVetCaseMTX',
                                                   @idfAggrVetCaseMTX OUTPUT;
                    INSERT INTO dbo.tlbAggrVetCaseMTX
                    (
                        idfAggrVetCaseMTX,
                        idfVersion,
                        idfsDiagnosis,
                        idfsSpeciesType,
                        intNumRow,
                        intRowStatus,
                        AuditCreateDTM,
                        AuditCreateUser
                    )
                    SELECT @idfAggrVetCaseMTX,
                           @IdfVersion,
                           IdfsDiagnosis,
                           IdfsSpeciesType,
                           IntNumRow,
                           0,
                           GETDATE(),
                           @AuditUserName
                    FROM @Disease
                    WHERE IntNumRow = @_int;
                END
            END

            SET @_int = @_int + 1;
        END

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                        @EventTypeId,
                                        @EventUserId,
                                        @idfAggrVetCaseMTX,
                                        @EventDiseaseId,
                                        @EventSiteId,
                                        @EventInformationString,
                                        @EventLoginSiteId,
                                        @EventLocationId,
                                        @AuditUserName;

        SELECT @ReturnCode AS 'ReturnCode',
               @ReturnMessage AS 'ReturnMessage',
               @idfAggrVetCaseMTX AS 'idfAggrVetCaseMTX';
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USP_CONF_VeterinaryDiagnosticInvestigationMatrixReport_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USP_CONF_VeterinaryDiagnosticInvestigationMatrixReport_SET
--
-- Description: Saves entries for veterinary aggregate action diagnostic investigation matrix.
-- 
-- Author: Lamont Mitchell
--
-- Revision History:
-- Name                         Date       Change Detail
-- ---------------------------- ---------- -------------------------------------------------------
-- Lamont Mitchell              03/04/2019 Initial Created
-- Stephen Long                 07/15/2022 Added site alert and renamed sproc to standard SET.
-- Leo Tracchia					10/24/2022 Removed select from @Disease for IdfVersion, replaced with @idfVersion
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_VeterinaryDiagnosticInvestigationMatrixReport_SET]
    @idfAggrDiagnosticActionMTX BIGINT NULL,
    @idfVersion BIGINT NULL,
    @inJsonString Varchar(Max) NULL,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
AS
BEGIN
    DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
            @ReturnCode BIGINT = 0,
            @idfsReferenceType BIGINT,
            @JsonString VARCHAR(MAX),
            @EventId BIGINT = -1,
            @EventSiteId BIGINT = @SiteId,
            @EventUserId BIGINT = @UserId,
            @EventDiseaseId BIGINT = NULL,
            @EventLocationId BIGINT = @LocationId,
            @EventInformationString NVARCHAR(MAX) = NULL,
            @EventLoginSiteId BIGINT = @SiteId;
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );
    DECLARE @Disease TABLE
    (
        IntNumRow INT,
        --IdfVersion BIGINT,
        IdfAggrDiagnosticActionMTX BIGINT,
        IdfsDiagnosticAction BIGINT,
        IdfsSpeciesType BIGINT,
        IdfsDiagnosis BIGINT
    );

    SET NOCOUNT ON;

    BEGIN TRY
        SET @JsonString = @inJsonString;
        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbAggrDiagnosticActionMTX
            WHERE idfVersion = @idfVersion
        )
        BEGIN
            UPDATE dbo.tlbAggrDiagnosticActionMTX
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfVersion = @idfVersion;
        END

        INSERT INTO @Disease
        (
            IntNumRow,
            --IdfVersion,
            IdfAggrDiagnosticActionMTX,
            IdfsDiagnosticAction,
            IdfsSpeciesType,
            IdfsDiagnosis
        )
        SELECT *
        FROM
            OPENJSON(@JsonString)
            WITH
            (
                IntNumRow INT,
                --IdfVersion BIGINT,
                IdfAggrDiagnosticActionMTX BIGINT,
                IdfsDiagnosticAction BIGINT,
                IdfsSpeciesType BIGINT,
                IdfsDiagnosis BIGINT
            )
        DECLARE @rowCount INT = 0;
        SET @rowCount =
        (
            SELECT MAX(IntNumRow) FROM @Disease
        );
        DECLARE @_int INT = 1;
        WHILE @_int <= @rowCount
        BEGIN
            IF EXISTS
            (
                SELECT *
                FROM dbo.tlbAggrDiagnosticActionMTX
                WHERE idfVersion = @idfVersion
                      AND idfsDiagnosis =
                      (
                          SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                      )
                      AND idfsSpeciesType =
                      (
                          SELECT IdfsSpeciesType FROM @Disease WHERE IntNumRow = @_int
                      )
                      AND idfsDiagnosticAction =
                      (
                          SELECT IdfsDiagnosticAction FROM @Disease WHERE IntNumRow = @_int
                      )
            )
            BEGIN
                DECLARE @aggCaseMtxId BIGINT;

                SET @aggCaseMtxId =
                (
                    SELECT idfAggrDiagnosticActionMTX
                    FROM dbo.tlbAggrDiagnosticActionMTX
                    WHERE idfVersion = @idfVersion
                          AND idfsDiagnosis =
                          (
                              SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                          )
                          AND idfsSpeciesType =
                          (
                              SELECT IdfsSpeciesType FROM @Disease WHERE IntNumRow = @_int
                          )
                          AND idfsDiagnosticAction =
                          (
                              SELECT IdfsDiagnosticAction FROM @Disease WHERE IntNumRow = @_int
                          )
                );

                UPDATE dbo.tlbAggrDiagnosticActionMTX
                SET intRowStatus = 0,
                    intNumRow = @_int,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfsDiagnosis =
                (
                    SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                )
                      AND idfsSpeciesType =
                      (
                          SELECT IdfsSpeciesType FROM @Disease WHERE IntNumRow = @_int
                      )
                      AND idfsDiagnosticAction =
                      (
                          SELECT IdfsDiagnosticAction FROM @Disease WHERE IntNumRow = @_int
                      )
                      AND idfVersion = @idfVersion
                      --(
                      --    SELECT IdfVersion FROM @Disease WHERE IntNumRow = @_int
                      --)
                      AND idfAggrDiagnosticActionMTX = @aggCaseMtxId;
            END
            ELSE
            BEGIN
                IF EXISTS (SELECT * FROM @Disease WHERE IntNumRow = @_int)
                BEGIN
                    INSERT INTO @SuppressSelect
                    EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbAggrDiagnosticActionMTX',
                                                   @idfAggrDiagnosticActionMTX OUTPUT;
                    INSERT INTO dbo.tlbAggrDiagnosticActionMTX
                    (
                        idfAggrDiagnosticActionMTX,
                        idfVersion,
                        idfsDiagnosis,
                        idfsSpeciesType,
                        idfsDiagnosticAction,
                        intNumRow,
                        intRowStatus,
                        AuditCreateDTM,
                        AuditCreateUser
                    )
                    SELECT @idfAggrDiagnosticActionMTX,
                           @idfVersion,
                           IdfsDiagnosis,
                           IdfsSpeciesType,
                           IdfsDiagnosticAction,
                           IntNumRow,
                           0,
                           GETDATE(),
                           @AuditUserName
                    FROM @Disease
                    WHERE IntNumRow = @_int;
                END
            END

            SET @_int = @_int + 1;
        END

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                        @EventTypeId,
                                        @EventUserId,
                                        @idfAggrDiagnosticActionMTX,
                                        @EventDiseaseId,
                                        @EventSiteId,
                                        @EventInformationString,
                                        @EventLoginSiteId,
                                        @EventLocationId,
                                        @AuditUserName;

        SELECT @ReturnCode AS 'ReturnCode',
               @ReturnMessage AS 'ReturnMessage',
               @idfAggrDiagnosticActionMTX AS 'idfAggrDiagnosticActionMTX'
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USP_CONF_VeterinaryProphylacticMatrixReport_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USP_CONF_VeterinaryProphylacticMatrixReport_SET
--
-- Description: Saves Entries For Veterinary Aggregate Case Matrix Report.
-- 
-- Author: Lamont Mitchell
--
-- Revision History:
-- Name                         Date       Change Detail
-- ---------------------------- ---------- -------------------------------------------------------
-- Lamont Mitchell              03/04/2019 Initial Created
-- Stephen Long                 07/15/2022 Added site alert and renamed sproc to standard SET.
-- Leo Tracchia                 10/06/2022 Fix for bug 5202 ADM 16 - Vet Prophylactic Measure Matrix #456 
-- Leo Tracchia					10/24/2022 Removed select from @Disease for IdfVersion, replaced with @idfVersion
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_VeterinaryProphylacticMatrixReport_SET]
     @idfAggrProphylacticActionMTX BIGINT NULL,
    @idfVersion BIGINT NULL,
    @inJsonString Varchar(Max) NULL,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
AS
BEGIN
    DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
            @ReturnCode BIGINT = 0,
            @idfsReferenceType BIGINT,
            @JsonString VARCHAR(MAX),
            @EventId BIGINT = -1,
            @EventSiteId BIGINT = @SiteId,
            @EventUserId BIGINT = @UserId,
            @EventDiseaseId BIGINT = NULL,
            @EventLocationId BIGINT = @LocationId,
            @EventInformationString NVARCHAR(MAX) = NULL,
            @EventLoginSiteId BIGINT = @SiteId;
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );
    DECLARE @Disease TABLE
    (
        IntNumRow INT,
        --IdfVersion BIGINT,
        IdfAggrProphylacticActionMTX BIGINT, 
        IdfsProphilacticAction BIGINT,
        IdfsSpeciesType BIGINT,
        IdfsDiagnosis BIGINT
    );

    SET NOCOUNT ON;

    BEGIN TRY
        SET @JsonString = @inJsonString;
        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbAggrProphylacticActionMTX
            WHERE idfVersion = @idfVersion
        )
        BEGIN
            UPDATE dbo.tlbAggrProphylacticActionMTX
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfVersion = @idfVersion;
        END

        INSERT INTO @Disease
        (
            IntNumRow,
            --IdfVersion,
            IdfAggrProphylacticActionMTX,
            IdfsProphilacticAction,
            IdfsSpeciesType,
            IdfsDiagnosis
        )
        SELECT *
        FROM
            OPENJSON(@JsonString)
            WITH
            (
                IntNumRow INT,
                --IdfVersion BIGINT,
                IdfAggrProphylacticActionMTX BIGINT, 
                IdfsProphilacticAction BIGINT,
                IdfsSpeciesType BIGINT,
                IdfsDiagnosis BIGINT
            );
        DECLARE @rowCount INT = 0;
        SET @rowCount =
        (
            SELECT MAX(IntNumRow) FROM @Disease
        );
        DECLARE @_int INT = 1;
        WHILE @_int <= @rowCount
        BEGIN
            IF EXISTS
            (
                SELECT *
                FROM dbo.tlbAggrProphylacticActionMTX
                WHERE idfVersion = @idfVersion
                      AND idfsDiagnosis =
                      (
                          SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                      )
                      AND idfsSpeciesType =
                      (
                          SELECT IdfsSpeciesType FROM @Disease WHERE IntNumRow = @_int
                      )
                      AND idfsProphilacticAction =
                      (
                          SELECT IdfsProphilacticAction FROM @Disease WHERE IntNumRow = @_int
                      )
            )
            BEGIN
                UPDATE dbo.tlbAggrProphylacticActionMTX
                SET intRowStatus = 0,
                    intNumRow = @_int,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfsDiagnosis =
                (
                    SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                )
                      AND idfVersion = @idfVersion
                      --(
                      --    SELECT IdfVersion FROM @Disease WHERE IntNumRow = @_int
                      --)
                      AND idfsSpeciesType =
                      (
                          SELECT IdfsSpeciesType FROM @Disease WHERE IntNumRow = @_int
                      )
                      AND idfsProphilacticAction =
                      (
                          SELECT IdfsProphilacticAction FROM @Disease WHERE IntNumRow = @_int
                      );
            END
            ELSE
            BEGIN
                IF EXISTS (SELECT * FROM @Disease WHERE IntNumRow = @_int)
                BEGIN
                    INSERT INTO @SuppressSelect
                    EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbAggrProphylacticActionMTX',
                                                   @idfAggrProphylacticActionMTX OUTPUT;

                    INSERT INTO dbo.tlbAggrProphylacticActionMTX
                    (
                        idfAggrProphylacticActionMTX,
                        idfVersion,
                        idfsDiagnosis,
                        idfsSpeciesType,
                        idfsProphilacticAction,
                        intNumRow,
                        intRowStatus,
                        AuditCreateDTM,
                        AuditCreateUser
                    )
                    SELECT @idfAggrProphylacticActionMTX,
                           --IdfVersion,
						   @idfVersion,
                           IdfsDiagnosis,
                           IdfsSpeciesType,
                           IdfsProphilacticAction,
                           IntNumRow,
                           0,
                           GETDATE(),
                           @AuditUserName
                    FROM @Disease
                    WHERE IntNumRow = @_int;
                END
            END

            SET @_int = @_int + 1;
        END

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                        @EventTypeId,
                                        @EventUserId,
                                        @idfAggrProphylacticActionMTX,
                                        @EventDiseaseId,
                                        @EventSiteId,
                                        @EventInformationString,
                                        @EventLoginSiteId,
                                        @EventLocationId,
                                        @AuditUserName;

        SELECT @ReturnCode AS 'ReturnCode',
               @ReturnMessage AS 'ReturnMessage',
               @idfAggrProphylacticActionMTX AS 'idfAggrProphylacticActionMTX'
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USP_CONF_VeterinarySanitaryActionMatrixReport_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USP_CONF_VeterinarySanitaryActionMatrixReport_SET
--
-- Description: Saves entries for veterinary aggregate action sanitary actions matrix.
-- 
-- Author: Lamont Mitchell
--
-- Revision History:
-- Name                         Date       Change Detail
-- ---------------------------- ---------- -------------------------------------------------------
-- Lamont Mitchell              03/04/2019 Initial Created
-- Stephen Long                 07/15/2022 Added site alert and renamed sproc to standard SET.
-- Leo Tracchia					10/24/2022 Removed select from @Disease for IdfVersion, replaced with @idfVersion
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_VeterinarySanitaryActionMatrixReport_SET]
    @idfAggrSanitaryActionMTX BIGINT NULL,
    @idfVersion BIGINT NULL,
    @inJsonString VARCHAR(MAX) NULL,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
AS
BEGIN
    DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
            @ReturnCode BIGINT = 0,
            @idfsReferenceType BIGINT,
            @JsonString VARCHAR(MAX),
            @EventId BIGINT = -1,
            @EventSiteId BIGINT = @SiteId,
            @EventUserId BIGINT = @UserId,
            @EventDiseaseId BIGINT = NULL,
            @EventLocationId BIGINT = @LocationId,
            @EventInformationString NVARCHAR(MAX) = NULL,
            @EventLoginSiteId BIGINT = @SiteId;
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );
    DECLARE @Disease TABLE
    (
        IntNumRow INT,
        --IdfVersion BIGINT,
        IdfAggrSanitaryActionMTX BIGINT,
        IdfsSanitaryAction BIGINT
    );

    SET NOCOUNT ON;

    BEGIN TRY
        SET @JsonString = @inJsonString;
        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbAggrSanitaryActionMTX
            WHERE idfVersion = @idfVersion
        )
        BEGIN
            UPDATE dbo.tlbAggrSanitaryActionMTX
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfVersion = @idfVersion;
        END

        INSERT INTO @Disease
        (
            IntNumRow,
            --IdfVersion,
            IdfAggrSanitaryActionMTX,
            IdfsSanitaryAction
        )
        SELECT *
        FROM
            OPENJSON(@JsonString)
            WITH
            (
                IntNumRow INT,
                --IdfVersion BIGINT,
                IdfAggrSanitaryActionMTX BIGINT,
                IdfsSanitaryAction BIGINT
            );
        DECLARE @rowCount INT = 0;
        SET @rowCount =
        (
            SELECT MAX(IntNumRow) FROM @Disease
        );
        DECLARE @_int INT = 0;
        WHILE @_int <= @rowCount
        BEGIN

            IF EXISTS
            (
                SELECT *
                FROM dbo.tlbAggrSanitaryActionMTX
                WHERE idfVersion = @idfVersion
                      AND idfsSanitaryAction =
                      (
                          SELECT IdfsSanitaryAction FROM @Disease WHERE IntNumRow = @_int
                      )
            )
            BEGIN
                DECLARE @aggCaseMtxId BIGINT;
                SET @aggCaseMtxId =
                (
                    SELECT idfAggrSanitaryActionMTX
                    FROM dbo.tlbAggrSanitaryActionMTX
                    WHERE idfVersion = @idfVersion
                          AND idfsSanitaryAction =
                          (
                              SELECT IdfsSanitaryAction FROM @Disease WHERE IntNumRow = @_int
                          )
                );

                UPDATE dbo.tlbAggrSanitaryActionMTX
                SET intRowStatus = 0,
                    intNumRow = @_int,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfsSanitaryAction =
                (
                    SELECT IdfsSanitaryAction FROM @Disease WHERE IntNumRow = @_int
                )
                      AND idfVersion = @idfVersion
                      --(
                      --    SELECT IdfVersion FROM @Disease WHERE IntNumRow = @_int
                      --)
                      AND idfAggrSanitaryActionMTX = @aggCaseMtxId;
            END
            ELSE
            BEGIN
                IF EXISTS (SELECT * FROM @Disease WHERE IntNumRow = @_int)
                BEGIN
                    INSERT INTO @SuppressSelect
                    EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbAggrSanitaryActionMTX',
                                                   @idfAggrSanitaryActionMTX OUTPUT;

                    INSERT INTO dbo.tlbAggrSanitaryActionMTX
                    (
                        idfAggrSanitaryActionMTX,
                        idfVersion,
                        idfsSanitaryAction,
                        intNumRow,
                        intRowStatus,
                        AuditCreateDTM,
                        AuditCreateUser
                    )
                    SELECT @idfAggrSanitaryActionMTX,
                           @idfVersion,
                           IdfsSanitaryAction,
                           IntNumRow,
                           0,
                           GETDATE(),
                           @AuditUserName
                    FROM @Disease
                    WHERE IntNumRow = @_int;
                END
            END

            SET @_int = @_int + 1;
        END

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                        @EventTypeId,
                                        @EventUserId,
                                        @idfAggrSanitaryActionMTX,
                                        @EventDiseaseId,
                                        @EventSiteId,
                                        @EventInformationString,
                                        @EventLoginSiteId,
                                        @EventLocationId,
                                        @AuditUserName;

        SELECT @ReturnCode AS 'ReturnCode',
               @ReturnMessage AS 'ReturnMessage',
               @idfAggrSanitaryActionMTX AS 'idfAggrSanitaryActionMTX';
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_ActivityParameters_GET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_ActivityParameters_GET
-- Description:	Retrieves the list of Activity Parameters 
--          
-- Revision History:
-- Name				Date		Change
-- ---------------	----------	--------------------------------------------------------------------
-- Kishore Kodru	11/28/2018	Initial release for new API.
-- Stephen Long		08/20/2019	Removed commit and rollback transaction statements.
-- Stephen Long		10/02/2019	Added parameter type to table variable.
-- Doug Albanese	07/29/2021	Added idfActivityParameters to the return list
-- Doug Albanese	08/12/2021	Had to reverse some of the changes that Mandar put in, because EF doesn't accept SQL_VARIANT datatypes
-- Mark Wilson		09/30/2021  removed the check for NULL LangID and also removed unused variables.  Added test code.
-- Doug Albanese	 10/04/2022	 Correction to a translation join to denote which type the data is from the SQL Variant field
-- Test code
/*

DECLARE @observationList NVARCHAR(MAX) = '34400000806;1639880000004;1685240000004;1690060000004'
EXEC dbo.USP_ADMIN_FF_ActivityParameters_GET
	@observationList = @observationList, 
	@LangID = 'en-US'

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_ActivityParameters_GET] 
(
	@observationList NVARCHAR(MAX),
	@LangID NVARCHAR(50) = NULL
)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE 
		@idfsLanguage BIGINT,
		@rowCount INT,
		@currentRow INT,
		@currentObservation BIGINT,
		@idfVersion BIGINT,
		@innerCurrentRow INT,
		@NumRow INT,
		@idfRow BIGINT,
		@CurrentIdfRow BIGINT,
		@type BIGINT,
		@innerRowCount INT,
		@idfsSection BIGINT,
		@idfsCurrentSection BIGINT,
		@OldType BIGINT = 0

	DECLARE @ResultTable TABLE (
		[idfActivityParameters] BIGINT,
		[idfObservation] BIGINT,
		[idfsFormTemplate] BIGINT,
		[idfsParameter] BIGINT,
		[idfsSection] BIGINT,
		[idfRow] BIGINT,
		[intNumRow] INT,
		[Type] BIGINT,
		[varValue] NVARCHAR(4000),
		[strNameValue] NVARCHAR(200),
		[numRow] INT,
		[ParameterType] BIGINT 
		)
	DECLARE @observationsTable TABLE (
		[idfObservation] BIGINT,
		[idfVersion] BIGINT,
		[intRowNumber] INT
		)
	DECLARE @MatrixInfo AS TABLE (
		[idfVersion] BIGINT,
		[idfsAggrCaseType] BIGINT,
		[idfAggregateCaseSection] BIGINT
		)
	DECLARE @matrixTable AS TABLE (
		idfVersion BIGINT,
		idfRow BIGINT,
		idfsParameter BIGINT,
		strDefaultParameterName NVARCHAR(400),
		idfsParameterValue NVARCHAR(MAX),
		NumRow INT,
		[strNameValue] NVARCHAR(200),
		[idfsSection] BIGINT,
		[langid] NVARCHAR(20)
		)

	BEGIN TRY
		SET @idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LangID);

		INSERT INTO @observationsTable (
			[idfObservation],
			[intRowNumber]
			)
		SELECT CAST([Value] AS BIGINT),
			ROW_NUMBER() OVER (
				ORDER BY [Value]
				)
		FROM [dbo].[FN_GBL_SYS_SplitList](@observationList, NULL, NULL)
		
		INSERT INTO @ResultTable 
		(
			idfActivityParameters,
			idfObservation,
			idfsFormTemplate,
			idfsParameter,
			idfsSection,
			idfRow,
			varValue,
			[Type],
			numRow, 
			[ParameterType]
		)
		SELECT 
			AP.idfActivityParameters,
			AP.idfObservation,
			O.idfsFormTemplate,
			AP.idfsParameter,
			P.idfsSection,
			AP.idfRow,
			CAST(AP.varValue AS NVARCHAR(MAX)),
			dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
			ROW_NUMBER() OVER (
				PARTITION BY AP.idfObservation ORDER BY AP.idfRow
				), 
			P.idfsParameterType
		FROM dbo.tlbActivityParameters AP
		LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
		INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
		WHERE AP.idfObservation IN (SELECT idfObservation FROM @observationsTable)
		AND AP.intRowStatus = 0
		AND O.intRowStatus = 0
		ORDER BY 
			AP.idfObservation,
			P.idfsSection,
			AP.idfRow

		SELECT @rowCount = MAX([intRowNumber])
		FROM @observationsTable

		SET @currentRow = 1;

		WHILE (@currentRow <= @rowCount)
		BEGIN
			SELECT @currentObservation = [idfObservation]
			FROM @observationsTable
			WHERE intRowNumber = @currentRow;

			DELETE
			FROM @MatrixInfo

			INSERT INTO @MatrixInfo
			EXEC dbo.USP_ADMIN_FF_AggregateObservationMatrixVersion_GET 
				@currentObservation

			SELECT TOP 1 @idfVersion = [idfVersion]
			FROM @MatrixInfo

			IF (@idfVersion IS NULL)
			BEGIN
				SELECT TOP 1 @idfVersion = [idfVersion]
				FROM dbo.tlbAggrMatrixVersionHeader
				WHERE idfsMatrixType IN (
						SELECT TOP 1 [idfAggregateCaseSection]
						FROM @MatrixInfo
						)
					AND [blnIsActive] = 1
				ORDER BY CAST(ISNULL(blnIsDefault, 0) AS INT) + CAST(ISNULL(blnIsActive, 0) AS INT) DESC,
					datStartDate DESC
			END;

			UPDATE @observationsTable
			SET [idfVersion] = @idfVersion
			WHERE intRowNumber = @currentRow;

			SELECT @innerRowCount = NULL

			SELECT @innerRowCount = MAX([numRow])
			FROM @ResultTable
			WHERE [Type] = 1
				AND [idfObservation] = @currentObservation

			IF (@innerRowCount > 0)
			BEGIN
				SELECT @NumRow = - 1,
					@CurrentIdfRow = 0,
					@innerCurrentRow = 1;

				DECLARE curs CURSOR LOCAL FORWARD_ONLY STATIC
				FOR
				SELECT [idfRow],
					[idfsSection]
				FROM @ResultTable
				WHERE [Type] = 1
					AND [idfObservation] = @currentObservation

				OPEN curs

				FETCH NEXT
				FROM curs
				INTO @idfRow,
					@idfsSection

				WHILE @@FETCH_STATUS = 0
				BEGIN
					IF (@idfsCurrentSection IS NULL)
						SET @idfsCurrentSection = @idfsSection;

					IF (@idfsCurrentSection <> @idfsSection)
					BEGIN
						SET @idfsCurrentSection = @idfsSection;
						SET @NumRow = - 1;
					END

					IF (@CurrentIdfRow <> @idfRow)
					BEGIN
						SET @CurrentIdfRow = @idfRow;
						SET @NumRow = @NumRow + 1;

						UPDATE @ResultTable
						SET [intNumRow] = @NumRow
						WHERE [idfRow] = @idfRow
							AND [idfObservation] = @currentObservation
					END

					FETCH NEXT
					FROM curs
					INTO @idfRow,
						@idfsSection
				END

				CLOSE curs

				DEALLOCATE curs
			END
			
			SELECT @innerRowCount = NULL

			SELECT @innerRowCount = MAX([numRow])
			FROM @ResultTable
			WHERE [Type] > 1
				AND [idfObservation] = @currentObservation

			IF (@innerRowCount > 0)
			BEGIN
				SELECT @NumRow = NULL,
					@idfRow = NULL,
					@innerCurrentRow = 1;

				DECLARE curs CURSOR LOCAL FORWARD_ONLY STATIC
				FOR
				SELECT [idfRow],
					[Type]
				FROM @ResultTable
				WHERE [Type] > 1
					AND [idfObservation] = @currentObservation

				OPEN curs

				FETCH NEXT
				FROM curs
				INTO @idfRow,
					@type

				WHILE @@FETCH_STATUS = 0
				BEGIN
					IF @OldType <> ISNULL(@type, - 1)
					BEGIN
						DELETE
						FROM @matrixTable

						INSERT INTO @matrixTable
						EXEC dbo.USP_ADMIN_FF_PredefinedStub_GET 
							@type,
							@idfVersion,
							@idfsLanguage

						SET @OldType = ISNULL(@type, 0)
					END

					SET @NumRow = NULL

					SELECT @NumRow = [NumRow]
					FROM @matrixTable
					WHERE [idfRow] = @idfRow

					UPDATE @ResultTable
					SET [intNumRow] = @NumRow
					WHERE [idfRow] = @idfRow
						AND [idfObservation] = @currentObservation;

					FETCH NEXT
					FROM curs
					INTO @idfRow,
						@type
				END

				CLOSE curs

				DEALLOCATE curs
			END

			SET @currentRow = @currentRow + 1;
		END
		
		UPDATE @ResultTable
		SET [intNumRow] = 0
		WHERE [Type] = 0
		
		UPDATE RT
		SET RT.[strNameValue] = ISNULL(SNT.[strTextString], BR.[strDefault])
		FROM @ResultTable AS RT
		INNER JOIN dbo.ffParameter P ON RT.idfsParameter = P.idfsParameter AND P.idfsEditor = 10067002 AND P.[intRowStatus] = 0
		INNER JOIN dbo.trtBaseReference BR ON BR.idfsBaseReference = CASE 
																		WHEN (SQL_VARIANT_PROPERTY(RT.varValue, 'BaseType') = 'bigint')
																			OR (
																				SQL_VARIANT_PROPERTY(RT.varValue, 'BaseType') = 'nvarchar'
																				AND ISNUMERIC(CAST(RT.varValue AS NVARCHAR)) = 1
																				)
																			THEN CAST(RT.varValue AS BIGINT)
																		ELSE - 1
																		END
		 LEFT JOIN dbo.trtStringNameTranslation SNT ON SNT.idfsBaseReference = CASE 
																		WHEN (SQL_VARIANT_PROPERTY(RT.varValue, 'BaseType') = 'bigint')
																			OR (
																				SQL_VARIANT_PROPERTY(RT.varValue, 'BaseType') = 'nvarchar'
																				AND ISNUMERIC(CAST(RT.varValue AS NVARCHAR)) = 1
																				)
																			THEN CAST(RT.varValue AS BIGINT)
																		ELSE - 1
																		END AND SNT.idfsLanguage = @idfsLanguage AND SNT.[intRowStatus] = 0
		
		SELECT 
			[idfActivityParameters],
			[idfObservation],
			[idfsFormTemplate],
			[idfsParameter],
			[idfsSection],
			[idfRow],
			[intNumRow],
			[Type],
			[varValue],
			[strNameValue],
			[numRow],
			0 AS [FakeField], 
			[ParameterType] 
		FROM @ResultTable
		ORDER BY [idfObservation],
			[idfsParameter],
			[idfRow]
			
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_ParameterTemplate_SET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_ParameterTemplate_SET
-- Description: Save the Parameter Template
--          
-- Revision History:
-- Name				Date		Change
-- ---------------	----------	--------------------------------------------------------------------
-- Kishore Kodru    11/28/2018	Initial release for new API.
-- Doug Albanese	4/3/2020	Changes to get it inline with the new designer
-- Doug Albanese	4/27/2020	Changes to correct errors with commit transaction
-- Doug Albanese	10/20/2020	Added Auditing information
-- Doug Albanese	01/19/2021	Added the psuedo function call parameter for use by other SPs
-- Mark Wilson		03/02/2022	Added the INSERT INTO @SuppressSelect, removed unneeded PRINT
--	Doug Albanese	06/02/2022	Remove the Suppress to allow functioncall = 0 to work correctly.
--	Doug Albanese	06/06/2022	Not sure how this was missed, but set the CopyOnly and FunctionCall to 0
--	Doug Albanese	06/07/2022	Rearranged the functioncall supression for USP_ADMIN_FF_ParameterDesignOptions_SET
--	Doug Albanese	06/10/2022	Corrected to prevent EF from blowing up the repository call for this SP
-- Doug Albanese	09/14/2022	 Further correction on USP_ADMIN_FF_ParameterDesignOptions_SET to remove supression for fucntion calling.
-- Doug Albanese	 10/06/2022	 Converted over to a API Call SP only, rather than being used from multiple locations
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_ParameterTemplate_SET] 
(
	@idfsParameter BIGINT
	,@idfsFormTemplate BIGINT
	,@LangID NVARCHAR(50) = NULL
	,@idfsEditMode BIGINT = NULL
	,@intLeft INT = NULL
	,@intTop INT = NULL
	,@intWidth INT = NULL
	,@intHeight INT = NULL
	,@intScheme INT = NULL
	,@intLabelSize INT = NULL
	,@intOrder INT = NULL
	,@blnFreeze BIT = NULL
	,@User NVARCHAR(50) = ''
	,@CopyOnly INT = 0
	,@FunctionCall INT = 0
)
AS
BEGIN
	SET NOCOUNT ON;	
	
	DECLARE 
		@returnCode BIGINT = 0,
		@returnMsg  NVARCHAR(MAX) = 'Success' 

	BEGIN TRY
		DECLARE @SupressSelect TABLE
		( 
			retrunCode INT,
			returnMsg NVARCHAR(200)
		)

		IF (@idfsEditMode IS NULL) SET @idfsEditMode = 10068001
		IF (@intLeft IS NULL) SET @intLeft = 0
		IF (@intTop IS NULL) SET @IntTop = 0
		IF (@intWidth IS NULL) SET @intWidth = 0
		IF (@intHeight IS NULL) SET @intHeight = 0
		IF (@intScheme IS NULL)	 SET @intScheme = 0
		IF (@blnFreeze IS NULL) SET @blnFreeze = 0
		
		IF (@intLabelSize IS NULL)
			BEGIN 
				IF (@intScheme = 0 OR @intScheme = 1)
					BEGIN
						SET @intLabelSize = @intWidth / 2
					END
			END
		ELSE
			BEGIN
				SET @intLabelSize = @intWidth
			END

		IF (@intOrder IS NULL) SET @intOrder = 0
			
		IF NOT EXISTS (SELECT TOP 1 1
					   FROM [dbo].[ffParameterForTemplate]
					   WHERE [idfsParameter] = @idfsParameter
							 AND [idfsFormTemplate] = @idfsFormTemplate)
			BEGIN
				INSERT INTO [dbo].[ffParameterForTemplate]
					(
           				[idfsParameter]
           				,[idfsFormTemplate]			  	   
						,[idfsEditMode]		
						,[blnFreeze]
						,AuditCreateDTM
						,AuditCreateUser
					)
				VALUES
					(
           				@idfsParameter
           				,@idfsFormTemplate
						,@idfsEditMode	
						,@blnFreeze	
						,GETDATE()
						,@User	
					)          
			END
		ELSE
			BEGIN
				UPDATE [dbo].[ffParameterForTemplate]
				SET [idfsEditMode] = @idfsEditMode
					,[blnFreeze] = @blnFreeze
					,[intRowStatus] = 0
					,AuditUpdateDTM = GETDATE()
					,AuditUpdateUser = @User
 				WHERE [idfsParameter] = @idfsParameter
					  AND [idfsFormTemplate] = @idfsFormTemplate 						
			END

			INSERT INTO @SupressSelect
			EXEC dbo.[USP_ADMIN_FF_ParameterDesignOptions_SET] 
			   @idfsParameter
			   ,@idfsFormTemplate
			   ,@intLeft
			   ,@intTop
			   ,@intWidth
			   ,@intHeight			
			   ,@intScheme
			   ,@intLabelSize
			   ,@intOrder
			   ,@LangID
			   ,@User
			   ,1

		 SELECT @returnCode AS ReturnCode, @returnMsg AS ReturnMessage

	END TRY
	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_NOTIFICATIONS_STATUS_SET]...';


GO

-- ================================================================================================
-- NAME						: [USP_ADMIN_NOTIFICATIONS_STATUS_SET]		
--
-- Description					: Update notification status
--
-- Author						: Mani Govindarajan
--
--Revision History
--			Name							Date								Change Detail
--			Mani Govindarajan				02/16/2022							Initial Created

-- ================================================================================================

ALTER PROCEDURE USP_ADMIN_NOTIFICATIONS_STATUS_SET
(	@SiteId BIGINT
    ,@UserId BIGINT
	,@NotificationId BIGINT = NULL
	,@StatusValue INT
	,@AuditUser VARCHAR(100)=NULL
)
AS
DECLARE @returnMsg VARCHAR(MAX) = 'Success'
DECLARE @returnCode BIGINT = 0 
BEGIN
	BEGIN TRY  
		BEGIN TRANSACTION
			IF (@NotificationId IS NOT NULL)
			BEGIN
				UPDATE dbo.tstNotificationStatus SET intProcessed =@StatusValue ,AuditUpdateUser= @AuditUser WHERE idfNotification =@NotificationId
			END
			ELSE
			BEGIN
				UPDATE  ns 
					SET ns.intProcessed =@StatusValue,AuditUpdateUser= @AuditUser 
				FROM dbo.tstNotificationStatus ns INNER JOIN
					dbo.tstNotification n ON n.idfNotification = ns.idfNotification
				WHERE 
					((
				(
				(n.idfsTargetSite =@SiteId) OR (n.idfsTargetSite IS  NULL AND n.idfsSite = @SiteId))) 
				OR
				((n.idfTargetUserID =@UserId) OR (n.idfTargetUserID IS  NULL AND n.idfUserID = @UserId) ))
				AND ns.intProcessed IN (0,1)
			
			END

			IF @@TRANCOUNT > 0 
				COMMIT  
		 SELECT @returnCode 'ReturnCode', @returnMsg 'RetunMessage'
	END TRY  
	BEGIN CATCH  
		IF @@TRANCOUNT > 0
			BEGIN
				ROLLBACK
			END;
		Throw
	END CATCH 
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_STAT_SET]...';


GO

--=================================================================================================================
-- Created by:				Joan Li
-- Last modified by:		
-- Joan Li					06/13/17	Created based on V6 spStatistic_Post:  V7 usp54 purpose: save records in tlbStatistic
-- Joan Li	                06/15/17	change action parameter
-- Lamont Mitchell			1/2/19		Added ReturnCode and ReturnMessage and changed @idfStatistic from output parameter added it to the Select output
-- Ricky Moss				3/12/20		Check for Duplicates and return a message and statistic id if record exists.
-- Ricky Moss				3/18/20		Added settlement parameter
-- Ricky Moss				3/23/20		Developed search for existing statistic data
-- LAMONT MITCHELL			6/7/2022	ADDED BULKINPORT PARAMETER TO DISTINGUISH BETWEEN BULK IMPORT AND SINGLE ENTERIES.. BULK IMPORT BYPASSES DUPLICATE CHECK
-- Leo Tracchia				9/6/2022	modified logic to handle duplicate data during bulk import
-- Leo Tracchia				10/26/2022	fix for GAT defect #472, DevOps 5259
--=================================================================================================================

ALTER PROCEDURE [dbo].[USP_ADMIN_STAT_SET]
	(
	 @idfStatistic						BIGINT		= NULL,	--##PARAM @idfStatistic - statistic record ID
	 @idfsStatisticDataType				BIGINT		= NULL,	--##PARAM @idfsStatisticDataType - statistic data Type
	 @idfsMainBaseReference				BIGINT		= NULL,	--##PARAM @idfsMainBaseReference - statistic base reference
 	 @idfsStatisticAreaType				BIGINT		= NULL,	--##PARAM @idfsStatisticAreaType - statistic Area Type
	 @idfsStatisticPeriodType			BIGINT		= NULL,	--##PARAM @idfsStatisticPeriodType - statistic period Type
	 @LocationUserControlidfsCountry	BIGINT		= NULL,	--##PARAM @idfsArea - statistic Area
	 @LocationUserControlidfsRegion		BIGINT		= NULL,	--##PARAM @idfsArea - statistic Area
	 @LocationUserControlidfsRayon 		BIGINT		= NULL,	--##PARAM @idfsArea - statistic Area
	 @LocationUserControlidfsSettlement	BIGINT		= NULL,	--##PARAM @idfsArea - statistic Area
	 @datStatisticStartDate				DATETIME	= NULL,	--##PARAM @datStatisticStartDate - start date
	 @datStatisticFinishDate			DATETIME	= NULL,	--##PARAM @datStatisticFinishDate - finish date 
	 @varValue							INT			= NULL,	--##PARAM @varValue - statistic content
	 @idfsStatisticalAgeGroup			BIGINT		= NULL,
	 @idfsParameterName					BIGINT		= NULL,
	 @bulkImport						Bit			= 0
	)
AS
DECLARE @returnCode					INT = 0 
DECLARE	@returnMsg					NVARCHAR(max) = 'SUCCESS' 
DECLARE @existingStatistic			BIGINT = null;
DECLARE @idfsArea					BIGINT
Declare @SupressSelect table
( 
	retrunCode int,
	returnMessage varchar(200)
)
BEGIN
	BEGIN TRY  	
		BEGIN TRANSACTION

			IF @LocationUserControlidfsSettlement IS NOT NULL
				SELECT @idfsArea = @LocationUserControlidfsSettlement
			ELSE IF @LocationUserControlidfsRayon IS NOT NULL 
				SELECT @idfsArea = @LocationUserControlidfsRayon
			ELSE IF @LocationUserControlidfsRegion IS NOT NULL
				SELECT @idfsArea = @LocationUserControlidfsRegion
			ELSE 
				SELECT @idfsArea = @LocationUserControlidfsCountry

			--SELECT @existingStatistic = (SELECT top 1(idfStatistic) from tlbStatistic WHERE idfsStatisticDataType = @idfsStatisticDataType AND idfsStatisticPeriodType = @idfsStatisticPeriodType AND ((idfsStatisticalAgeGroup = @idfsStatisticalAgeGroup) OR (idfsStatisticalAgeGroup IS NULL AND @idfsStatisticalAgeGroup IS NULL ))AND idfsStatisticAreaType = @idfsStatisticAreaType AND idfsArea = @idfsArea AND datStatisticStartDate = @datStatisticStartDate AND ((idfsMainBaseReference = @idfsMainBaseReference ) OR idfsMainBaseReference IS NULL AND @idfsMainBaseReference IS NULL) )
			--SELECT @existingStatistic =
			--	(SELECT top 1(idfStatistic) 
			--	FROM tlbStatistic 
			--	WHERE 
			--	idfsStatisticDataType = @idfsStatisticDataType 
			--	AND idfsStatisticAreaType = @idfsStatisticAreaType 
			--	AND idfsStatisticPeriodType = @idfsStatisticPeriodType 
			--	AND idfsArea = @idfsArea --Georgia?
			--	AND datStatisticStartDate = @datStatisticStartDate 
			--	AND datStatisticFinishDate = @datStatisticFinishDate 
			--	--AND varValue = @varValue
			--	AND idfsStatisticalAgeGroup = @idfsStatisticalAgeGroup)

			--IF(@existingStatistic IS NOT NULL AND @idfStatistic IS NULL) --AND @bulkImport = 0)
			--	BEGIN
			--		SELECT @returnMsg = 'DOES EXIST'
			--		SELECT @idfStatistic = @existingStatistic
			--	END
			--ELSE 

			-- if @idfStatistic is not passed in... (possibly a new record)
			IF NOT EXISTS (SELECT * FROM dbo.tlbStatistic WHERE  idfStatistic = @idfStatistic) 
				BEGIN

					--print 'getting existing statistic...'

					-- check if a row already exists with the same data
					SELECT @existingStatistic =
						(SELECT top 1(idfStatistic) 
						FROM tlbStatistic 
						WHERE 
						(idfsStatisticDataType = @idfsStatisticDataType or @idfsStatisticDataType is null)
						AND (idfsMainBaseReference = @idfsMainBaseReference or @idfsMainBaseReference is null)
						AND (idfsStatisticAreaType = @idfsStatisticAreaType or @idfsStatisticAreaType is null)
						AND (idfsStatisticPeriodType = @idfsStatisticPeriodType or @idfsStatisticPeriodType is null)
						AND (idfsArea = @idfsArea or @idfsArea is null)
						AND (datStatisticStartDate = @datStatisticStartDate or @datStatisticStartDate is null)
						AND (datStatisticFinishDate = @datStatisticFinishDate or @datStatisticFinishDate is null)
						--AND (varValue = @varValue or @varValue is null)
						AND (idfsStatisticalAgeGroup = @idfsStatisticalAgeGroup or @idfsStatisticalAgeGroup is null)
						AND intRowStatus = 0)

					print @existingStatistic

					-- if row doesn't exists, then insert new data
					IF(@existingStatistic IS NULL)
						BEGIN

							--print 'existing statistic is null, so insert'

							INSERT INTO @SupressSelect
							EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbStatistic', @idfStatistic OUTPUT

							INSERT INTO tlbStatistic
								(
									idfStatistic,
									idfsStatisticDataType,
									idfsMainBaseReference,
									idfsStatisticAreaType,
									idfsStatisticPeriodType,
									idfsArea,
									datStatisticStartDate,
									datStatisticFinishDate,
									varValue,
									idfsStatisticalAgeGroup
								)
							VALUES
								(
									@idfStatistic,
									@idfsStatisticDataType,
									@idfsMainBaseReference,
									@idfsStatisticAreaType,
									@idfsStatisticPeriodType,
									CASE ISNULL(@LocationUserControlidfsSettlement , '') 
									WHEN '' THEN
										CASE ISNULL(@LocationUserControlidfsRayon, '') 
										WHEN '' THEN
											CASE ISNULL(@LocationUserControlidfsRegion,'')
												WHEN '' THEN
													@LocationUserControlidfsCountry 
												ELSE 
													@LocationUserControlidfsRegion
												END
										ELSE 
												@LocationUserControlidfsRayon 
										END 
									ELSE 
										@LocationUserControlidfsSettlement  
									END,
									@datStatisticStartDate,
									@datStatisticFinishDate,
									CAST(@varValue AS INT),
									@idfsStatisticalAgeGroup
								)
						END
					-- else, just update it with @existingStatistic
					ELSE

						--print 'existing statistic is NOT null, so update'

						UPDATE	tlbStatistic
						SET		idfsStatisticDataType = @idfsStatisticDataType,
								idfsMainBaseReference = @idfsMainBaseReference,
								idfsStatisticAreaType = @idfsStatisticAreaType,
								idfsStatisticPeriodType = @idfsStatisticPeriodType,
								idfsArea = CASE ISNULL(@LocationUserControlidfsSettlement , '') 
									WHEN '' THEN
										CASE ISNULL(@LocationUserControlidfsRayon, '') 
										WHEN '' THEN
											CASE ISNULL(@LocationUserControlidfsRegion,'')
												WHEN '' THEN
													@LocationUserControlidfsCountry 
												ELSE 
													@LocationUserControlidfsRegion
												END
										ELSE 
												@LocationUserControlidfsRayon 
										END 
									ELSE 
										@LocationUserControlidfsSettlement  
									END,
								datStatisticStartDate = @datStatisticStartDate,
								datStatisticFinishDate = @datStatisticFinishDate,
								varValue = CAST(@varValue AS INT),
								idfsStatisticalAgeGroup = @idfsStatisticalAgeGroup
						 WHERE 	idfStatistic = @existingStatistic

				END

			-- update record with the passed in @idfStatistic (does not happen during bulk import)
			ELSE 

				--print '@idfStatistic was passed in (does not happen during bulk import)'

				UPDATE	tlbStatistic
				SET		idfsStatisticDataType = @idfsStatisticDataType,
						idfsMainBaseReference = @idfsMainBaseReference,
						idfsStatisticAreaType = @idfsStatisticAreaType,
						idfsStatisticPeriodType = @idfsStatisticPeriodType,
						idfsArea = CASE ISNULL(@LocationUserControlidfsSettlement , '') 
							WHEN '' THEN
								CASE ISNULL(@LocationUserControlidfsRayon, '') 
								WHEN '' THEN
									CASE ISNULL(@LocationUserControlidfsRegion,'')
										WHEN '' THEN
											@LocationUserControlidfsCountry 
										ELSE 
											@LocationUserControlidfsRegion
										END
								ELSE 
										@LocationUserControlidfsRayon 
								END 
							ELSE 
								@LocationUserControlidfsSettlement  
							END,
						datStatisticStartDate = @datStatisticStartDate,
						datStatisticFinishDate = @datStatisticFinishDate,
						varValue = CAST(@varValue AS INT),
						idfsStatisticalAgeGroup = @idfsStatisticalAgeGroup
				 WHERE 	idfStatistic = @idfStatistic

		-- Commit the transaction
		IF @@TRANCOUNT > 0
			COMMIT  
		
		Select @returnCode 'ReturnCode', @returnMsg 'ReturnMessage' , @idfStatistic 'idfStatistic'
	END TRY  

	BEGIN CATCH  

		-- Execute error retrieval routine. 
		IF @@TRANCOUNT > 0
			BEGIN
				ROLLBACK


			END;
			Throw;		
	END CATCH; 
END
GO
PRINT N'Altering Procedure [dbo].[USP_AGG_REPORT_GETList]...';


GO
-- ================================================================================================
-- Name:  USP_AGG_REPORT_GETList
--
-- Description:  Returns list of aggregate reports depending on aggregate report type.
--          
-- Revision History:
-- Name                Date       Change Detail
-- ------------------- ---------- ----------------------------------------------------------------
-- Stephen Long        07/01/2019 Initial release.
-- Stephen Long        07/09/2019 Updated gis string translation to sub selects instead of joins 
--                                for better performance.
-- Stephen Long        08/05/2019 Updated time period join, and changed the select all if/else. 
--                                Was throwing errors on POCO.
-- Stephen Long        08/08/2019 Added entered by person name.
-- Stephen Long        08/13/2019 Corrected administrative unit type id values.
-- Stephen Long        09/26/2019 Changed administrative where clause; reference TFS item
-- Stephen Long        01/22/2020 Added site list parameter for site filtration.
-- Stephen Long        02/18/2020 Added non-configurable site filtration rules.
-- Stephen Long        02/28/2020 Added "display" dates to handle different cultures.
-- Mark Wilson		   03/03/2020 Removed @DistinctIDs table parm and got rid of duplicates
-- Stephen Long        04/29/2020 Added organization statistical area type.
-- Stephen Long        06/30/2020 Made updates so POCO generator would better handle.
-- Stephen Long        07/06/2020 Added trim to EIDSS Report ID.
-- Stephen Long        09/18/2020 Added the four version ID's for the various matrices.
-- Stephen Long        09/21/2020 Added parameter administrative unit type ID and where 
--                                criteria.
-- Stephen Long        11/18/2020 Added site ID to the query.
-- Stephen Long        11/27/2020 Added configurable site filtration rules.
-- Stephen Long        12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long        04/04/2021 Added updated pagination and location hierarchy.
-- Ann Xiong	       10/23/2021 Fixed search by Organization issue
-- Stephen Long        05/17/2022 Added additional criteria for admin unit of organization.
-- Mike Kornegay	   05/19/2022 Updated to reflect new parameters.
-- Stephen Long        05/31/2022 Updated default rule for administrative level check, and added
--                                for organizations connected to the report.
-- Stephen Long        06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay	   08/01/2022 Changed CTE for paging and sorting because sorting was not correct.
-- Stephen Long        09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Ann Xiong		   09/27/2022 Added parameter LegacyReportID
--
-- Legends:
/*
	Aggregate disease report types:
    Human Aggregate = 10102001
    Veterinary Aggregate Disease = 10102002
    Veterinary Aggregate Action = 10102003

	Time interval types:
    None = 0
    Month = 10091001
    Day = 10091002
    Quarter = 10091003
    Week = 10091004
    Year = 10091005

	Administrative unit types:
    None = 0
    Country/Administrative Level 1 = 10089001
	Administrative Level 2 = 10089003
    Administrative Level 3 = 10089002
    Settlement = 10089004
	Organization = 10089005

	Testing Code:
	exec USP_AGG_REPORT_GETList 'en-US', 
	@AggregateReportTypeID=10102001, 
	@UserSiteID=864, 
	@UserOrganizationID=758210000000, 
	@UserEmployeeID=420664190000872
*/
--
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_AGG_REPORT_GETList] (
	@LanguageID AS NVARCHAR(50)
	,@AggregateReportTypeID AS BIGINT = NULL
	,@ReportID AS NVARCHAR(200) = NULL
	,@LegacyReportID NVARCHAR(200) = NULL
	,@AdministrativeUnitTypeID AS BIGINT = NULL
	,@TimeIntervalTypeID AS BIGINT = NULL
	,@StartDate AS DATETIME = NULL
	,@EndDate AS DATETIME = NULL
	,@AdministrativeUnitID AS BIGINT = NULL
	,@OrganizationID BIGINT = NULL
	,@SelectAllIndicator BIT = 0
	,@UserSiteID BIGINT
	,@UserOrganizationID BIGINT
	,@UserEmployeeID BIGINT
	,@ApplySiteFiltrationIndicator BIT = 0
	,@SortColumn NVARCHAR(30) = 'ReportID'
	,@SortOrder NVARCHAR(4) = 'DESC'
	,@PageNumber INT = 1
	,@PageSize INT = 10
	)
AS
BEGIN
	SET NOCOUNT ON;

	IF @SelectAllIndicator = 1
	BEGIN
		SET @PageSize = 100000;
		SET @PageNumber = 1;
	END;

	DECLARE @firstRec INT;
	DECLARE @lastRec INT;
	SET @firstRec = (@PageNumber-1)* @PageSize
	SET @lastRec = (@PageNumber*@PageSize+1);

	DECLARE @AdministrativeLevelNode AS HIERARCHYID;
	DECLARE @Results TABLE (
		ID BIGINT NOT NULL
		,ReadPermissionIndicator BIT NOT NULL
		,AccessToPersonalDataPermissionIndicator BIT NOT NULL
		,AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL
		,WritePermissionIndicator BIT NOT NULL
		,DeletePermissionIndicator BIT NOT NULL
		);

	BEGIN TRY
	    IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

		IF @AdministrativeUnitID IS NOT NULL
		BEGIN
			SELECT @AdministrativeLevelNode = node
			FROM dbo.gisLocation
			WHERE idfsLocation = @AdministrativeUnitID;
		END;

		-- ========================================================================================
		-- NO SITE FILTRATION RULES APPLIED
		--
		-- For first and second level sites, do not apply any site filtration rules.
		-- ========================================================================================
		IF @ApplySiteFiltrationIndicator = 0
		BEGIN
			INSERT INTO @Results
			SELECT ac.idfAggrCase
				,1
				,1
				,1
				,1
				,1
			FROM dbo.tlbAggrCase ac
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = ac.idfsAdministrativeUnit
			LEFT JOIN dbo.gisBaseReference br ON br.idfsGISBaseReference = ac.idfsAdministrativeUnit
			LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) OrganizationAdminUnit ON ac.idfOffice = OrganizationAdminUnit.idfOffice
			LEFT JOIN dbo.trtBaseReference AdminUnit ON AdminUnit.idfsBaseReference = CASE 
					WHEN ac.idfOffice IS NOT NULL
						THEN 10089005
					WHEN br.idfsGISReferenceType = 19000001
						THEN 10089001
					WHEN br.idfsGISReferenceType = 19000003
						THEN 10089003
					WHEN br.idfsGISReferenceType = 19000002
						THEN 10089002
					WHEN br.idfsGISReferenceType = 19000004
						THEN 10089004
					END
			LEFT JOIN dbo.trtStringNameTranslation AS per ON per.idfsBaseReference = CASE 
					WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091002 /* Day */
					WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 6
						THEN 10091004 /* Week - use datediff with day because datediff with week will return incorrect result if first day of the week in country differs from Sunday */
					WHEN DATEDIFF(MONTH, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091001 /* Month */
					WHEN DATEDIFF(QUARTER, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091003 /* Quarter */
					WHEN DATEDIFF(YEAR, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091005 /* Year */
					END
				AND per.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
			WHERE ac.intRowStatus = 0
				AND (
					ac.idfsAggrCaseType = @AggregateReportTypeID
					OR @AggregateReportTypeID IS NULL
					)
				AND (
					ac.idfOffice = @OrganizationID
					OR @OrganizationID IS NULL
					)
				AND (
					AdminUnit.idfsBaseReference = @AdministrativeUnitTypeID
					OR @AdministrativeUnitTypeID IS NULL
					)
				AND (
					per.idfsBaseReference = @TimeIntervalTypeID
					OR @TimeIntervalTypeID IS NULL
					)
				AND (
					ac.datStartDate >= @StartDate
					OR @StartDate IS NULL
					)
				AND (
					ac.datFinishDate <= @EndDate
					OR @EndDate IS NULL
					)
				AND (
					CASE 
						WHEN @AdministrativeUnitID IS NULL
							THEN 1
						WHEN g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
							OR (ac.idfOffice = @AdministrativeUnitID AND @AdministrativeUnitTypeID = 10089005)
							THEN 1
						ELSE 0
						END = 1
					)
				AND (
					ac.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
					OR @ReportID IS NULL
					)
				AND (
					ac.strCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
					OR @LegacyReportID IS NULL
					);
		END
		ELSE
		BEGIN
			DECLARE @FilteredResults TABLE (
				ID BIGINT NOT NULL
				,ReadPermissionIndicator BIT NOT NULL
				,AccessToPersonalDataPermissionIndicator BIT NOT NULL
				,AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL
				,WritePermissionIndicator BIT NOT NULL
				,DeletePermissionIndicator BIT NOT NULL
				,INDEX IDX_ID(ID)
				);
			-- =======================================================================================
			-- DEFAULT SITE FILTRATION RULES
			--
			-- Apply non-configurable site filtration rules for third level sites.
			-- =======================================================================================
			DECLARE @RuleActiveStatus INT = 0;
			DECLARE @AdministrativeLevelTypeID INT;
			DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
			DECLARE @DefaultAccessRules AS TABLE (
				AccessRuleID BIGINT NOT NULL
				,ActiveIndicator INT NOT NULL
				,ReadPermissionIndicator BIT NOT NULL
				,AccessToPersonalDataPermissionIndicator BIT NOT NULL
				,AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL
				,WritePermissionIndicator BIT NOT NULL
				,DeletePermissionIndicator BIT NOT NULL
				,AdministrativeLevelTypeID INT NULL
				);

			INSERT INTO @DefaultAccessRules
			SELECT AccessRuleID
			    ,a.intRowStatus
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
				,a.AdministrativeLevelTypeID
			FROM dbo.AccessRule a
			WHERE a.DefaultRuleIndicator = 1;

			--
			-- Human Aggregate Disease Report data shall be available to all sites' organizations 
			-- connected to the particular report.
			--
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
			WHERE AccessRuleID = 10537023;

			IF @RuleActiveStatus = 0
			BEGIN
				-- Entered by and notification received by and sent to organizations
				INSERT INTO @FilteredResults
				SELECT a.idfAggrCase
					,1
					,1
					,1
					,1
					,1
				FROM dbo.tlbAggrCase a
				WHERE a.intRowStatus = 0
					AND (
						a.idfEnteredByOffice = @UserOrganizationID
						OR a.idfReceivedByOffice = @UserOrganizationID
						OR a.idfSentByOffice = @UserOrganizationID
						);
			END;

			--
			-- Human Aggregate Disease Report data shall be available to all sites of the same 
			-- administrative level specified in the rule.
			--
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
			WHERE AccessRuleID = 10537005;

			IF @RuleActiveStatus = 0
			BEGIN
				SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
				FROM @DefaultAccessRules
				WHERE AccessRuleID = 10537005;

				SELECT @OrganizationAdministrativeLevelNode = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
				FROM dbo.tlbOffice o
				INNER JOIN dbo.tlbGeoLocationShared l ON l.idfGeoLocationShared = o.idfLocation
				INNER JOIN dbo.gisLocation g ON g.idfsLocation = l.idfsLocation
				WHERE o.idfOffice = @UserOrganizationID
					AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

				-- Administrative level specified in the rule of the report administrative unit.
				INSERT INTO @FilteredResults
				SELECT ac.idfAggrCase
					,1
					,1
					,1
					,1
					,1
				FROM dbo.tlbAggrCase ac
				INNER JOIN dbo.gisLocation g ON g.idfsLocation = ac.idfsAdministrativeUnit
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537005
				WHERE ac.intRowStatus = 0
				    AND ac.idfsAggrCaseType = 10102001 
					AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1
					AND ac.idfAggrCase NOT IN (
						SELECT ID
						FROM @FilteredResults
						);

				-- Administrative level of the settlement of the report administrative unit.
				INSERT INTO @FilteredResults
				SELECT ac.idfAggrCase
					,1
					,1
					,1
					,1
					,1
				FROM dbo.tlbAggrCase ac
				INNER JOIN dbo.gisLocation g ON g.idfsLocation = ac.idfsAdministrativeUnit
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537005
				WHERE ac.intRowStatus = 0
					AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1
					AND (
						ac.idfAggrCase NOT IN (
							SELECT ID
							FROM @FilteredResults
							)
						);
			END;

			--
			-- Veterinary Aggregate Disease/Action Report data shall be available to all sites' organizations 
			-- connected to the particular report.
			--
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
			WHERE AccessRuleID = 10537024;

			IF @RuleActiveStatus = 0
			BEGIN
				-- Entered by and notification received by and sent to organizations
				INSERT INTO @FilteredResults
				SELECT a.idfAggrCase
					,1
					,1
					,1
					,1
					,1
				FROM dbo.tlbAggrCase a
				WHERE a.intRowStatus = 0
					AND (
						a.idfEnteredByOffice = @UserOrganizationID
						OR a.idfReceivedByOffice = @UserOrganizationID
						OR a.idfSentByOffice = @UserOrganizationID
						);
			END;

			--
			-- Veterinary Aggregate Disease/Action Report data shall be available to all sites of the same 
			-- administrative level specified in the rule.
			--
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
			WHERE AccessRuleID = 10537014;

			IF @RuleActiveStatus = 0
			BEGIN
				SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
				FROM @DefaultAccessRules
				WHERE AccessRuleID = 10537014;

				SELECT @OrganizationAdministrativeLevelNode = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
				FROM dbo.tlbOffice o
				INNER JOIN dbo.tlbGeoLocationShared l ON l.idfGeoLocationShared = o.idfLocation
				INNER JOIN dbo.gisLocation g ON g.idfsLocation = l.idfsLocation
				WHERE o.idfOffice = @UserOrganizationID
					AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

				-- Administrative level specified in the rule of the report administrative unit.
				INSERT INTO @FilteredResults
				SELECT ac.idfAggrCase
					,1
					,1
					,1
					,1
					,1
				FROM dbo.tlbAggrCase ac
				INNER JOIN dbo.gisLocation g ON g.idfsLocation = ac.idfsAdministrativeUnit
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537014
				WHERE ac.intRowStatus = 0
				    AND ac.idfsAggrCaseType = 10102002 OR ac.idfAggrCase = 10102003 
					AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1
					AND ac.idfAggrCase NOT IN (
						SELECT ID
						FROM @FilteredResults
						);

				-- Administrative level of the settlement of the report administrative unit.
				INSERT INTO @FilteredResults
				SELECT ac.idfAggrCase
					,1
					,1
					,1
					,1
					,1
				FROM dbo.tlbAggrCase ac
				INNER JOIN dbo.gisLocation g ON g.idfsLocation = ac.idfsAdministrativeUnit
				INNER JOIN @DefaultAccessRules a ON a.AccessRuleID = 10537014
				WHERE ac.intRowStatus = 0
					AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1
					AND (
						ac.idfAggrCase NOT IN (
							SELECT ID
							FROM @FilteredResults
							)
						);
			END;

			-- =======================================================================================
			-- CONFIGURABLE SITE FILTRATION RULES
			-- 
			-- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
			-- overlap the non-configurable rules.
			-- =======================================================================================
			--
			-- Apply at the user's site group level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT ag.idfAggrCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbAggrCase ag
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = ag.idfsSite
			INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup ON userSiteGroup.idfsSite = @UserSiteID
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE ag.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			--
			-- Apply at the user's site level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT ag.idfAggrCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbAggrCase ag
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = ag.idfsSite
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteID = @UserSiteID
				AND ara.ActorEmployeeGroupID IS NULL
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE ag.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			-- 
			-- Apply at the user's employee group level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT ag.idfAggrCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbAggrCase ag
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = ag.idfsSite
			INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID
				AND egm.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE ag.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			-- 
			-- Apply at the user's ID level, granted by a site group.
			--
			INSERT INTO @FilteredResults
			SELECT ag.idfAggrCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbAggrCase ag
			INNER JOIN dbo.tflSiteToSiteGroup grantingSGS ON grantingSGS.idfsSite = ag.idfsSite
			INNER JOIN dbo.tstUserTable u ON u.idfPerson = @UserEmployeeID
				AND u.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorUserID = u.idfUserID
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE ag.intRowStatus = 0
				AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

			--
			-- Apply at the user's site group level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT ag.idfAggrCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbAggrCase ag
			INNER JOIN dbo.tflSiteToSiteGroup sgs ON sgs.idfsSite = @UserSiteID
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteGroupID = sgs.idfSiteGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE ag.intRowStatus = 0
				AND sgs.idfsSite = ag.idfsSite;

			-- 
			-- Apply at the user's site level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT ag.idfAggrCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbAggrCase ag
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorSiteID = @UserSiteID
				AND ara.ActorEmployeeGroupID IS NULL
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE ag.intRowStatus = 0
				AND a.GrantingActorSiteID = ag.idfsSite;

			-- 
			-- Apply at the user's employee group level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT ag.idfAggrCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbAggrCase ag
			INNER JOIN dbo.tlbEmployeeGroupMember egm ON egm.idfEmployee = @UserEmployeeID
				AND egm.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE ag.intRowStatus = 0
				AND a.GrantingActorSiteID = ag.idfsSite;

			-- 
			-- Apply at the user's ID level, granted by a site.
			--
			INSERT INTO @FilteredResults
			SELECT ag.idfAggrCase
				,a.ReadPermissionIndicator
				,a.AccessToPersonalDataPermissionIndicator
				,a.AccessToGenderAndAgeDataPermissionIndicator
				,a.WritePermissionIndicator
				,a.DeletePermissionIndicator
			FROM dbo.tlbAggrCase ag
			INNER JOIN dbo.tstUserTable u ON u.idfPerson = @UserEmployeeID
				AND u.intRowStatus = 0
			INNER JOIN dbo.AccessRuleActor ara ON ara.ActorUserID = u.idfUserID
				AND ara.intRowStatus = 0
			INNER JOIN dbo.AccessRule a ON a.AccessRuleID = ara.AccessRuleID
				AND a.intRowStatus = 0
				AND a.DefaultRuleIndicator = 0
			WHERE ag.intRowStatus = 0
				AND a.GrantingActorSiteID = ag.idfsSite;

			-- Copy filtered results to results and use search criteria
			INSERT INTO @Results
			SELECT ID
				,ReadPermissionIndicator
				,AccessToPersonalDataPermissionIndicator
				,AccessToGenderAndAgeDataPermissionIndicator
				,WritePermissionIndicator
				,DeletePermissionIndicator
			FROM @FilteredResults
			INNER JOIN dbo.tlbAggrCase ac ON ac.idfAggrCase = ID
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = ac.idfsAdministrativeUnit
			LEFT JOIN dbo.gisBaseReference br ON br.idfsGISBaseReference = ac.idfsAdministrativeUnit
			LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) OrganizationAdminUnit ON ac.idfOffice = OrganizationAdminUnit.idfOffice
			LEFT JOIN dbo.trtBaseReference AdminUnit ON AdminUnit.idfsBaseReference = CASE 
					WHEN ac.idfOffice IS NOT NULL
						THEN 10089005
					WHEN br.idfsGISReferenceType = 19000001
						THEN 10089001
					WHEN br.idfsGISReferenceType = 19000003
						THEN 10089003
					WHEN br.idfsGISReferenceType = 19000002
						THEN 10089002
					WHEN br.idfsGISReferenceType = 19000004
						THEN 10089004
					END
			LEFT JOIN dbo.trtStringNameTranslation AS per ON per.idfsBaseReference = CASE 
					WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091002 /* Day */
					WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 6
						THEN 10091004 /* Week - use datediff with day because datediff with week will return incorrect result if first day of the week in country differs from Sunday */
					WHEN DATEDIFF(MONTH, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091001 /* Month */
					WHEN DATEDIFF(QUARTER, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091003 /* Quarter */
					WHEN DATEDIFF(YEAR, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091005 /* Year */
					END
				AND per.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
			WHERE (
					ac.idfsAggrCaseType = @AggregateReportTypeID
					OR @AggregateReportTypeID IS NULL
					)
				AND (
					ac.idfSentByOffice = @OrganizationID
					OR @OrganizationID IS NULL
					)
				AND (
					AdminUnit.idfsBaseReference = @AdministrativeUnitTypeID
					OR @AdministrativeUnitTypeID IS NULL
					)
				AND (
					per.idfsBaseReference = @TimeIntervalTypeID
					OR @TimeIntervalTypeID IS NULL
					)
				AND (
					ac.datStartDate >= @StartDate
					OR @StartDate IS NULL
					)
				AND (
					ac.datFinishDate <= @EndDate
					OR @EndDate IS NULL
					)
				AND (
					CASE 
						WHEN @AdministrativeUnitID IS NULL
							THEN 1
						WHEN g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
							OR (ac.idfOffice = @AdministrativeUnitID AND @AdministrativeUnitTypeID = 10089005)
							THEN 1
						ELSE 0
						END = 1
					)
				AND (
					ac.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
					OR @ReportID IS NULL
					)
			GROUP BY ID
				,ReadPermissionIndicator
				,AccessToPersonalDataPermissionIndicator
				,AccessToGenderAndAgeDataPermissionIndicator
				,WritePermissionIndicator
				,DeletePermissionIndicator;
		END;

		-- ========================================================================================
		-- FINAL QUERY, PAGINATION AND COUNTS
		-- ========================================================================================
		WITH paging
		AS (
			SELECT ROW_NUMBER() OVER ( ORDER BY
				CASE WHEN @SortColumn = 'ReportID' AND @SortOrder = 'ASC' THEN ac.strCaseID END ASC,
				CASE WHEN @SortColumn = 'ReportID' AND @SortOrder = 'DESC' THEN ac.strCaseID END DESC,
				CASE WHEN @SortColumn = 'StartDate' AND @SortOrder = 'ASC' THEN ac.datStartDate END ASC,
				CASE WHEN @SortColumn = 'StartDate' AND @SortOrder = 'DESC' THEN ac.datStartDate END DESC,
				CASE WHEN @SortColumn = 'TimeIntervalUnitTypeName' AND @SortOrder = 'ASC' THEN per.strTextString END ASC,
				CASE WHEN @SortColumn = 'TimeIntervalUnitTypeName' AND @SortOrder = 'DESC' THEN per.strTextString END DESC,
				CASE WHEN @SortColumn = 'AdministrativeLevel1Name' AND @SortOrder = 'ASC' THEN LH.AdminLevel2Name END ASC,
				CASE WHEN @SortColumn = 'AdministrativeLevel1Name' AND @SortOrder = 'DESC' THEN LH.AdminLevel2Name END DESC,
				CASE WHEN @SortColumn = 'AdministrativeLevel2Name' AND @SortOrder = 'ASC' THEN LH.AdminLevel3Name END ASC,
				CASE WHEN @SortColumn = 'AdministrativeLevel2Name' AND @SortOrder = 'DESC' THEN LH.AdminLevel3Name END DESC,
				CASE WHEN @SortColumn = 'SettlementName' AND @SortOrder = 'ASC' THEN LH.AdminLevel4Name END ASC,
				CASE WHEN @SortColumn = 'SettlementName' AND @SortOrder = 'DESC' THEN LH.AdminLevel4Name END DESC,
				CASE WHEN @SortColumn = 'OrganizationAdministrativeName' AND @SortOrder = 'ASC' THEN organizationAdminUnit.name END ASC,
				CASE WHEN @SortColumn = 'OrganizationAdministrativeName' AND @SortOrder = 'DESC' THEN organizationAdminUnit.name END DESC 
			) AS ROWNUM,
			res.ID AS ReportKey
			,ac.strCaseID AS ReportID
			,receivedByOrganization.name AS ReceivedByOrganizationName
			,sentByOrganization.name AS SentByOrganizationName
			,enteredByOrganization.name AS EnteredByOrganizationName
			,ac.datReceivedByDate AS ReceivedByDate
			,ac.datSentByDate AS SentByDate
			,ac.datStartDate AS StartDate
			,ac.datFinishDate AS EndDate
			,AdminUnit.strDefault AS AdministrativeUnitTypeName
			,lh.AdminLevel2Name AS AdministrativeLevel1Name
			,lh.AdminLevel3Name AS AdministrativeLevel2Name
			,lh.AdminLevel4Name AS SettlementName
			,organizationAdminUnit.name AS OrganizationAdministrativeName
			,per.strTextString AS TimeIntervalUnitTypeName
			,ac.idfsSite AS SiteID
			,res.ReadPermissionIndicator AS ReadPermissionIndicator
			,res.AccessToPersonalDataPermissionIndicator AS AccessToPersonalDataPermissionIndicator
			,res.AccessToGenderAndAgeDataPermissionIndicator AS AccessToGenderAndAgeDataPermissionIndicator
			,res.WritePermissionIndicator AS WritePermissionIndicator
			,res.DeletePermissionIndicator AS DeletePermissionIndicator
			,0 AS RowSelectionIndicator
			,COUNT(*) OVER() AS RecordCount
			,(
				SELECT COUNT(*)
				FROM dbo.tlbAggrCase
				WHERE intRowStatus = 0
					AND idfsAggrCaseType = @AggregateReportTypeID
				) AS TotalCount
			FROM @Results res
			INNER JOIN dbo.tlbAggrCase ac ON ac.idfAggrCase = res.ID
			LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) receivedByOrganization ON ac.idfReceivedByOffice = receivedByOrganization.idfOffice
			LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) enteredByOrganization ON ac.idfEnteredByOffice = enteredByOrganization.idfOffice
			LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) sentByOrganization ON ac.idfSentByOffice = sentByOrganization.idfOffice
			LEFT JOIN dbo.gisLocation g ON g.idfsLocation = ac.idfsAdministrativeUnit
			INNER JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh ON lh.idfsLocation= ac.idfsAdministrativeUnit
			LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) organizationAdminUnit ON ac.idfOffice = organizationAdminUnit.idfOffice
			LEFT JOIN dbo.trtBaseReference adminUnit ON adminUnit.idfsBaseReference = CASE 
				WHEN NOT ac.idfOffice IS NULL
					THEN 10089005
				WHEN NOT lh.AdminLevel4ID IS NULL
					THEN 10089004
				WHEN NOT lh.AdminLevel3ID IS NULL
					THEN 10089002
				WHEN NOT lh.AdminLevel2ID IS NULL
					THEN 10089003
				WHEN NOT lh.AdminLevel1Id IS NULL
					THEN   10089001
				END
			LEFT JOIN dbo.trtStringNameTranslation per ON per.idfsBaseReference = CASE 
					WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091002 /* Day */
					WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 6
						THEN 10091004 /* Week - use datediff with day because datediff with week will return incorrect result if first day of the week in country differs from Sunday */
					WHEN DATEDIFF(MONTH, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091001 /* Month */
					WHEN DATEDIFF(QUARTER, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091003 /* Quarter */
					WHEN DATEDIFF(YEAR, ac.datStartDate, ac.datFinishDate) = 0
						THEN 10091005 /* Year */
					END
				AND per.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
			)
		SELECT	ReportKey,
				ReportID,
				ReceivedByOrganizationName,
				SentByOrganizationName,
				EnteredByOrganizationName,
				ReceivedByDate,
				SentByDate,
				StartDate,
				EndDate,
				AdministrativeUnitTypeName,
				AdministrativeLevel1Name,
				AdministrativeLevel2Name,
				SettlementName,
				OrganizationAdministrativeName,
				TimeIntervalUnitTypeName,
				SiteID,
				ReadPermissionIndicator,
				AccessToPersonalDataPermissionIndicator,
				AccessToGenderAndAgeDataPermissionIndicator,
				WritePermissionIndicator,
				DeletePermissionIndicator,
				RowSelectionIndicator,
				RecordCount,
				TotalCount,
				CurrentPage = @PageNumber,
				TotalPages = (RecordCount / @PageSize) + IIF(RecordCount % @PageSize > 0, 1, 0)
		FROM paging
		WHERE RowNum > @firstRec AND RowNum < @lastRec

	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_ASPNetUser_GetDetail]...';


GO
-- ================================================================================================
-- Author: Steven Verner
--
-- Create Date: 04.19.2019
-- 
-- Description:	Retrieves the ASPNet Users information along with all pertinent employee 
-- information
--
-- Revision History:
-- Name            Date       Change Detail
-- --------------- ---------- --------------------------------------------------------------------
-- Steven Verner   04/19/2019 Initial release
-- Stephen Long    12/26/2019 Changed to v7 function call on reference.
-- Stephen Long    03/25/2020 Added site type ID to support site filtration.
-- Stephen Long    11/24/2020 Added site group ID in the scenario a user's site is part of a group.
-- Steven Verner   01/15/2021 Added PasswordRequiresReset.
-- Mani			   01/25/2021 Added Organization Full Name
-- Mani			   01/26/2021 changed FN_GBL_ReferenceRepair('en', 19000046) from inner join to left join
-- Mani				10/07/2022 Added strHASCsiteID 
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ASPNetUser_GetDetail] @Id NVARCHAR(128)
AS
BEGIN
	SET NOCOUNT ON;

	SELECT u.Id
		,ut.idfsSite
		,u.idfUserID
		,u.Email
		,u.LockoutEnd
		,u.LockoutEnabled
		,u.AccessFailedCount
		,u.UserName
		,ut.idfPerson
		,p.strFirstName
		,p.strSecondName
		,p.strFamilyName
		,o.idfOffice
		,o.idfOffice Institution
		,ISNULL(oa.Name, oa.strDefault) OfficeAbbreviation
		,ISNULL(oaf.Name, oaf.strDefault) OfficeFullName
		,gs.idfsRegion
		,gs.idfsRayon
		,s.idfsSiteType
		,sgs.idfSiteGroup AS SiteGroupID
		,u.PasswordResetRequired,
		s.strHASCsiteID
	FROM dbo.AspNetUsers u
	JOIN dbo.tstUserTable ut ON ut.idfUserID = u.idfUserID
	LEFT JOIN dbo.tflSiteToSiteGroup AS sgs ON sgs.idfsSite = ut.idfsSite
	JOIN dbo.tlbPerson p ON p.idfPerson = ut.idfPerson
	JOIN dbo.tlbOffice o ON o.idfOffice = p.idfInstitution
	LEFT JOIN dbo.tstSite s ON s.idfsSite = ut.idfsSite
		AND s.intRowStatus = 0
	JOIN dbo.FN_GBL_ReferenceRepair('en', 19000045) oa ON oa.idfsReference = o.idfsOfficeAbbreviation
	LEFT JOIN dbo.FN_GBL_ReferenceRepair('en', 19000046) oaf ON oaf.idfsReference = o.idfsOfficeName
	JOIN dbo.tlbGeoLocationShared gs ON gs.idfGeoLocationShared = o.idfLocation
	WHERE u.id = @Id;
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GET]...';


GO

ALTER PROCEDURE [dbo].[USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GET] 
/*******************************************************
NAME						: [USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GET]		


Description					: Retreives List of Diseases For Vet Aggregate Case Matrix Version by version

Author						: Lamont Mitchell

Revision History
		
Name					Date				Change Detail
Lamont Mitchell			03/4/19				Initial Created
Mark Wilson				04/13/21			Added Translation
Mark Wilson				10/28/21			Added test code
Ann Xiong				10/04/22			Changed parameter @idfVersion BIGINT to @versionList NVARCHAR(MAX)

/* Test code

DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GET]
		@idfVersion = 115299280001056,
		@LangID = N'en-US'

SELECT	'Return Value' = @return_value

*/*******************************************************/
(
	@versionList NVARCHAR(MAX),
	--@idfVersion BIGINT,
	@LangID NVARCHAR(24)
)
AS

BEGIN

	BEGIN TRY 
		SELECT	 
				mtx.intNumRow,
				mtx.idfAggrVetCaseMTX AS idfAggrVetCaseMTX,
				mtx.idfsDiagnosis,
				mtx.idfsSpeciesType,
				D.[Name],
				D.strOIECode

		FROM dbo.tlbAggrVetCaseMTX mtx
		INNER JOIN dbo.FN_GBL_DiagnosisRepair(@LangID, 96, 10020002) D ON D.idfsDiagnosis = mtx.idfsDiagnosis  -- 2 = Human, use 10020002 for Aggregate cases

		--WHERE mtx.intRowStatus = 0 AND  mtx.idfVersion = @idfVersion
		WHERE mtx.intRowStatus = 0 AND  mtx.idfVersion IN (SELECT * FROM STRING_SPLIT(@versionList, ','))
		ORDER BY mtx.intNumRow ASC
		 

	END TRY

	BEGIN CATCH

			THROW;

	END CATCH

END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_UNIQUENUMBERINGSCHEMA_SET]...';


GO
/*
--Lamont Mitchell 3/36/22  Added new column intPreviousNumberValue to store previous values in uniquenumberingschema

*/
-- exec USP_CONF_UNIQUENUMBERINGSCHEMA_SET 10057013,'Animal Group','Animal Group','AGP',null,'-',343,'en'
ALTER PROCEDURE [dbo].[USP_CONF_UNIQUENUMBERINGSCHEMA_SET]
(
	@idfsNumberName BIGINT,
	--@strDefault NVARCHAR(400),
	@strName NVARCHAR(400),
	--@strPrefix NVARCHAR(10),
	@strSuffix NVARCHAR(10),
	@strSpecialCharacter NVARCHAR(10),
	@intNumberValue INT,
	@langId NVARCHAR(50),
	@intNextNumberValue INT=NULL

)
AS
	DECLARE @returnCode INT = 0 
	DECLARE @returnMsg NVARCHAR(50) = 'SUCCESS' 
BEGIN
	BEGIN TRY
		
		Declare @intPreviousNumberValue BIGINT;
		SELECT @intPreviousNumberValue = intNumberValue from tstNextNumbers where idfsNumberName = @idfsNumberName		

		if (@intNextNumberValue IS NULL)
				SELECT @intNextNumberValue = intNumberValue+1 from tstNextNumbers where idfsNumberName = @idfsNumberName		

		--DECLARE @count INT = 0;
		--SET @count = (SELECT count(*) FROM tstNextNumbers WHERE (strDocumentName = @strName OR intNumberValue = @intNumberValue) AND idfsNumberName <> @idfsNumberName)
		----print @count

		--IF @count > 0
		--	BEGIN
		--		SET @returnMsg = 'DOES EXIST'
		--	END
		--ELSE
			--BEGIN
			 
				--UPDATE trtBaseReference set strDefault = @strDefault where idfsBaseReference = @idfsNumberName

			UPDATE trtStringNameTranslation set strTextString = @strName where idfsBaseReference = @idfsNumberName AND idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@langId)
			
			UPDATE tstNextNumbers 
			SET 
				intNumberValue = @intNumberValue, 
				strSpecialChar = @strSpecialCharacter,
				strSuffix = @strSuffix, 
				intPreviousNumberValue = @intNextNumberValue
			WHERE idfsNumberName = @idfsNumberName

			--END
		SELECT @returnCode 'returnCode', @returnMsg 'returnMessage'

	END TRY

	BEGIN CATCH
		
		THROW

	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_BASE_REFERENCE_GETList]...';


GO



--*************************************************************************************************
-- Name: USP_GBL_BASE_REFERENCE_GETList
--
-- Description: List filered values from tlbBaseReference table.
--          
-- Revision History:
-- Name							Date		Change Detail
-- ---------------				----------	--------------------------------------------------------------------
-- Stephen Long					06/29/2019	Initial release.
-- Manickandan Govindarajan		11/24/2020	The IF query is getting the intHACode from basereference table but the
--											IntHACode is 0 for multiple records ex: 19000040 refrencetype
--											Updated the code to get intHACode from trtHACodeList table. It will help to filter in the app
--
-- Mark Wilson					12/16/2020  Updated to accept null HACode (when HACode is unnecessary)
-- Steven Verner				10/21/2022	Removed duplicate base reference types where there currently is an editor for those types
--											Like Age Group, Case Classification,etc.
--											This change fixes bugs 3865,4757,4756,4755,4750...

--
-- @intHACode Code List
-- 0	None
-- 2	Human
-- 4	Exophyte
-- 8	Plant
-- 16	Soil
-- 32	Livestock
-- 64	Avian
-- 128	Vector
-- 256	Syndromic
-- 510	All	
--
-- Testing code:
/*
	Exec USP_GBL_BASE_REFERENCE_GETList 'EN', 'Nationality List', 0
	Exec USP_GBL_BASE_REFERENCE_GETList 'EN', 'Case Status', 64
	Exec USP_GBL_BASE_REFERENCE_GETList 'EN', 'Diagnosis', 2
	EXEC USP_GBL_BASE_REFERENCE_GETList 'en','Personal ID Type', 0
	EXEC USP_GBL_BASE_REFERENCE_GETList 'en','Patient Location Type', 2
	EXEC USP_GBL_BASE_REFERENCE_GETList 'en','Organization Type', 482
	EXEC USP_GBL_BASE_REFERENCE_GETList 'en','Human Age Type', 2

*/
-- ************************************************************************************************
ALTER PROCEDURE [dbo].[USP_GBL_BASE_REFERENCE_GETList] 
(
	@LangID	NVARCHAR(50),
	@ReferenceTypeName VARCHAR(400) = NULL,
	@intHACode	BIGINT = NULL 
)
AS
	DECLARE @HACodeMax BIGINT = 510;
	DECLARE @ReturnMsg VARCHAR(MAX) = 'Success';
	DECLARE @ReturnCode BIGINT = 0;
	DECLARE @HAList TABLE(
		intHACode INT

	)

	IF @intHACode IS NOT NULL
	INSERT INTO @HAList
	(
	    intHACode
	)
	SELECT intHACode FROM dbo.FN_GBL_SplitHACode(@intHACode, @HACodeMax)

	BEGIN TRY

		SELECT 
			br.idfsBaseReference,
			br.idfsReferenceType,
			br.strBaseReferenceCode,
			br.strDefault,
			ISNULL(s.strTextString, br.strDefault) AS [name],
			br.intHACode,
			br.intOrder,
			br.intRowStatus,
			br.blnSystem,
			rt.intDefaultHACode,
			CASE WHEN ISNULL(@intHACode,0) = 0 THEN NULL ELSE dbo.FN_GBL_SPLITHACODEASSTRING(br.intHACode, 510) END AS strHACode 

		FROM dbo.trtBaseReference br
		INNER JOIN dbo.trtReferenceType AS rt ON rt.idfsReferenceType = br.idfsReferenceType
		LEFT JOIN dbo.trtStringNameTranslation AS s ON br.idfsBaseReference = s.idfsBaseReference AND s.idfsLanguage = dbo.FN_GBL_LanguageCode_Get(@LangID)
		LEFT JOIN dbo.trtHACodeList HA ON HA.intHACode = br.intHACode
		LEFT JOIN dbo.trtBaseReference HAR ON HAR.idfsBaseReference = HA.idfsCodeName
		
		WHERE 
			br.idfsBaseReference NOT IN (19000146,19000011,19000019,19000537,19000529,19000530,19000531,19000532,19000533,19000534,19000535,19000125,19000123,19000122,
												 19000143,19000050,19000126,19000121,19000075,19000124,19000012,19000164,19000019,19000503,19000530,19000510,19000506,19000505,
												 19000509,19000511,19000508,19000507,19000022,19000131,19000070,19000066,19000071,19000069,19000029,19000032,19000101,19000525,
												 19000033,19000532,19000534,19000533,19000152,19000056,19000060,19000109,19000062,19000045,19000046,19000516,19000074,19000147,
												 19000130,19000535,19000531,19000087,19000079,19000529,19000119,19000524,19000084,19000519,19000166,19000086,19000090,19000141,
												 19000140)
			AND	
			br.intRowStatus = 0	
			AND
		((EXISTS 
				(SELECT intHACode FROM dbo.FN_GBL_SplitHACode(@intHACode, @HACodeMax) 
				INTERSECT 
				SELECT intHACode FROM dbo.FN_GBL_SplitHACode(br.intHACode, @HACodeMax)) 
				OR @intHACode IS NULL OR @intHACode = 0 OR br.intHACode = @intHACode))
		AND rt.strReferenceTypeName = IIF(@ReferenceTypeName IS NOT NULL, @ReferenceTypeName, rt.strReferenceTypeName )
		
		ORDER BY 
			br.intOrder,
			[name]

	END TRY  

	BEGIN CATCH 

		THROW;

	END CATCH;
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_EMPLOYEESITE_GETDETAIL]...';


GO
--   ==================================================================================================--
--    Name: USP_GBL_EMPLOYEESITE_GETDETAIL
--    Description: Input: personid, languageid; Output: person list, group list
--          
--    Author: Ricky Moss
--
--    Revision History
--    Name            Date            Change Detail
--    Ricky Moss        11/14/2019        Initial Release
--  Ricky Moss        01/15/2020        Updated strAccountName field to use aspnetuser UserName field
--    Ricky Moss        01/28/2020        Added strIdentity field
--    Ann Xiong         09/24/2020        Added Locked, blnDisabled, strDisabledReason, strLockoutReason to the select
--    Ann Xiong         09/29/2020        Added UserGroupID and UserGroup to the select
--  Mani Govindarajan 10/18/2022    used SecurityPolicyConfiguration table to get passwordAge and lockTreshold.



--    exec USP_GBL_EMPLOYEESITE_GETDETAIL -447, 'en'
--====================================================================================================



--IF OBJECT_ID('[dbo].[USP_GBL_EMPLOYEESITE_GETDETAIL]', 'P') IS NOT NULL
--DROP PROC [dbo].[USP_GBL_EMPLOYEESITE_GETDETAIL]
--GO



--IF EXISTS ( SELECT *
--            FROM   sysobjects
--            WHERE  id = object_id(N'[dbo].[USP_GBL_EMPLOYEESITE_GETDETAIL]')
--                   and OBJECTPROPERTY(id, N'IsProcedure') = 1 )
--BEGIN
--    DROP PROCEDURE [dbo].[USP_GBL_EMPLOYEESITE_GETDETAIL]
--END
--GO
ALTER PROCEDURE [dbo].[USP_GBL_EMPLOYEESITE_GETDETAIL]
(
    @idfPerson AS BIGINT, --##PARAM @idfPerson - person ID
    @LangID NVARCHAR(50) --##PARAM @LangID - language ID
)
AS
BEGIN
    BEGIN TRY        



       DECLARE @lockTreshold int  
        DECLARE @passwordAge int  
        --SELECT @lockTreshold = intAccountTryCount, @passwordAge = intPasswordAge from dbo.fnPolicyValue()  



       select  @lockTreshold=LockoutThld ,  @passwordAge=MinPasswordAgeDays from SecurityPolicyConfiguration



       SELECT    UT.idfUserID,
                CAST(u.Id AS NVARCHAR(100)) as strIdentity,
                UT.idfPerson,
                UT.idfsSite,
                u.UserName as strAccountName,
                S.strSiteID,
                S.strSiteName,
                S.idfsSiteType,
                ISNULL(Rf.name, Rf.strDefault) AS strSiteType
                ,CASE WHEN u.LockoutEnabled = 1 and u.LockoutEnd IS Not NULL THEN 1 ELSE 0 END AS Locked
                ,u.blnDisabled
                ,u.strDisabledReason
                ,CASE    WHEN (u.LockoutEnabled = 1 and u.LockoutEnd IS Not NULL) AND (u.AccessFailedCount >= @lockTreshold ) THEN 'Locked'
                        WHEN (u.LockoutEnabled = 1 and u.LockoutEnd IS Not NULL) AND (datediff(d,isnull(u.datPasswordLastChanged,'2000-01-01T00:00:00'),getutcdate()) >= @passwordAge ) THEN 'Account is Locked'
                        WHEN (u.LockoutEnabled = 1 and u.LockoutEnd IS NULL) OR (u.LockoutEnabled = 0 ) THEN ''
                END AS 'strLockoutReason'
                ,STRING_AGG(g.idfEmployeeGroup, ', ') WITHIN GROUP (ORDER BY g.idfEmployeeGroup DESC ) AS UserGroupID
                ,STRING_AGG(g.strName, ', ') as UserGroup
                ,u.PasswordResetRequired
                ,u.DateDisabled
        FROM    dbo.tstUserTable UT
                INNER JOIN dbo.tstSite S ON
                    S.idfsSite = UT.idfsSite And S.intRowStatus = 0
                INNER JOIN AspNetUsers u ON
                    ut.idfUserID = u.idfUserID
                INNER JOIN dbo.fnReference(@LangID, 19000085/*Site Type*/) Rf ON
                    S.idfsSiteType = Rf.idfsReference
                LEFT JOIN    dbo.tlbEmployeeGroupMember m     
                    ON    m.idfEmployee = ut.idfPerson
                    AND    m.intRowStatus = 0
                LEFT JOIN    dbo.tlbEmployeeGroup g
                    ON    m.idfEmployeeGroup = g.idfEmployeeGroup
        WHERE    UT.idfPerson = @idfPerson    
                AND        UT.intRowStatus = 0
        GROUP BY UT.idfUserID, u.Id, UT.idfPerson, UT.idfsSite, u.UserName, S.strSiteID, S.strSiteName, S.idfsSiteType, (ISNULL(Rf.name, Rf.strDefault)),
                (CASE WHEN u.LockoutEnabled = 1 and u.LockoutEnd IS Not NULL THEN 1 ELSE 0 END), u.blnDisabled, u.strDisabledReason,
                (CASE    WHEN (u.LockoutEnabled = 1 and u.LockoutEnd IS Not NULL) AND (u.AccessFailedCount >= @lockTreshold ) THEN 'Locked'
                        WHEN (u.LockoutEnabled = 1 and u.LockoutEnd IS Not NULL) AND (datediff(d,isnull(u.datPasswordLastChanged,'2000-01-01T00:00:00'),getutcdate()) >= @passwordAge ) THEN 'Account is Locked'
                        WHEN (u.LockoutEnabled = 1 and u.LockoutEnd IS NULL) OR (u.LockoutEnabled = 0 ) THEN ''
                END),u.PasswordResetRequired,u.DateDisabled



   END TRY
    BEGIN CATCH
        THROW
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_LKUP_REFERENCETYPE_FILTERED_PAGED_GETLIST]...';


GO
--=================================================================================================
-- Name: USP_GBL_LKUP_REFERENCETYPE_FILTERED_PAGED_GETLIST
--
-- Description: Returns a list of base reference types WITH PAGING AND FILTERING
--
-- Author: Ricky Moss
--
-- Revision History:
-- Name				Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		06/20/2019	Initial Release
-- Stephen Long     12/26/2019	Replaced 'en' with @LangID on reference call.
-- Doug Albanese	9/4/2020	Added field to obtain language translation
-- Lamont Mitchell	7/16/2021	Added Paging and Filtering, copied from USP_GBL_LKUP_REFERENCETYPE_GETLIST
-- Michael Brown	03/16/2022	Bug #3127 Changed @sortColumn to 'name'. Added OR br.name... to WHERE clause
-- Steven Verner	10/21/2022	Removed duplicate base reference types where there currently is an editor for those types
--								Like Age Group, Case Classification,etc.
--								This change fixes bugs 3865,4757,4756,4755,4750...
--=================================================================================================
ALTER PROCEDURE [dbo].[USP_GBL_LKUP_REFERENCETYPE_FILTERED_PAGED_GETLIST] (
@LangId NVARCHAR(50),
@advancedSearch NVARCHAR(100) = NULL,
@pageNo INT = 1,
@pageSize INT = 10, 
@sortColumn NVARCHAR(30) = 'name', 
@sortOrder NVARCHAR(4) = 'asc'
)
AS
BEGIN
	BEGIN TRY

		DECLARE @firstRec INT
		DECLARE @lastRec INT
		DECLARE @t TABLE( 
			idfsBaseReference bigint,
			idfsReferenceType bigint, 
			strDefault nvarchar(2000), 
			strName nvarchar(2000), 
			intHACode int,
			intOrder int
			)
		SET @firstRec = (@pageNo-1)* @pagesize
		SET @lastRec = (@pageNo*@pageSize+1)
		IF( @advancedSearch IS NOT NULL)
		BEGIN
			INSERT INTO @T
			SELECT 
				br.idfsReference,
				trtReferenceType.idfsReferenceType,
				strDefault,
				br.name AS strName,
				intHACode,
				intOrder
			FROM dbo.FN_GBL_ReferenceRepairSplit(@LangId, '19000076,19000536') br
			INNER JOIN dbo.trtReferenceType
				ON trtReferenceType.idfsReferenceType = br.idfsReferenceType
			WHERE (intStandard & 4) <> 0
				AND br.idfsReference NOT IN (19000146,19000011,19000019,19000537,19000529,19000530,19000531,19000532,19000533,19000534,19000535,19000125,19000123,19000122,
											 19000143,19000050,19000126,19000121,19000075,19000124,19000012,19000164,19000019,19000503,19000530,19000510,19000506,19000505,
											 19000509,19000511,19000508,19000507,19000022,19000131,19000070,19000066,19000071,19000069,19000029,19000032,19000101,19000525,
											 19000033,19000532,19000534,19000533,19000152,19000056,19000060,19000109,19000062,19000045,19000046,19000516,19000074,19000147,
											 19000130,19000535,19000531,19000087,19000079,19000529,19000119,19000524,19000084,19000519,19000166,19000086,19000090,19000141,
											 19000140)

				AND trtReferenceType.intRowStatus = 0
				and (br.strDefault like '%' + @advancedSearch +'%' OR br.name like '%' + @advancedSearch +'%')
			ORDER BY strReferenceTypeName;
		
			WITH CTEResults AS
			(
				SELECT ROW_NUMBER() OVER ( ORDER BY 
					CASE WHEN @sortColumn = 'strdefault' AND @SortOrder = 'asc' THEN strdefault END ASC,
					CASE WHEN @sortColumn = 'strdefault' AND @SortOrder = 'desc' THEN strdefault END DESC,
					CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'asc' THEN strName END ASC,
					CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'desc' THEN strName END DESC,
					CASE WHEN @sortColumn = 'intHACode' AND @SortOrder = 'asc' THEN intHACode END ASC,
					CASE WHEN @sortColumn = 'intHACode' AND @SortOrder = 'desc' THEN intHACode END DESC,
					CASE WHEN @sortColumn = 'intorder' AND @SortOrder = 'asc' THEN intOrder END ASC,
					CASE WHEN @sortColumn = 'intorder' AND @SortOrder = 'desc' THEN intOrder END DESC
			) AS ROWNUM,
			COUNT(*) OVER () AS 
					TotalRowCount,
					idfsBaseReference,
					idfsReferenceType,
					strDefault,
					strName,
					intHACode,
					intOrder
				FROM @T
			)
			SELECT
					TotalRowCount, 
					idfsBaseReference 'BaseReferenceId',
					idfsReferenceType 'ReferenceId',
					strDefault 'Default',
					strName 'Name',	
					intOrder,
					intHACode,
					TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
					CurrentPage = @pageNo 
			FROM CTEResults
			WHERE RowNum > @firstRec AND RowNum < @lastRec 
		END
		ELSE
		BEGIN
		INSERT INTO @T
		SELECT 
			br.idfsReference,
			trtReferenceType.idfsReferenceType,
			strDefault,
			br.name AS strName,
			intHACode,
			intOrder
		FROM dbo.FN_GBL_ReferenceRepair(@LangId, 19000076) br
		INNER JOIN dbo.trtReferenceType
			ON trtReferenceType.idfsReferenceType = br.idfsReferenceType
		WHERE (intStandard & 4) <> 0
			AND br.idfsReference NOT IN (19000146,19000011,19000019,19000537,19000529,19000530,19000531,19000532,19000533,19000534,19000535,19000125,19000123,19000122,
										 19000143,19000050,19000126,19000121,19000075,19000124,19000012,19000164,19000019,19000503,19000530,19000510,19000506,19000505,
										 19000509,19000511,19000508,19000507,19000022,19000131,19000070,19000066,19000071,19000069,19000029,19000032,19000101,19000525,
										 19000033,19000532,19000534,19000533,19000152,19000056,19000060,19000109,19000062,19000045,19000046,19000516,19000074,19000147,
										 19000130,19000535,19000531,19000087,19000079,19000529,19000119,19000524,19000084,19000519,19000166,19000086,19000090,19000141,
										 19000140)
			AND trtReferenceType.intRowStatus = 0
		ORDER BY strReferenceTypeName;




		WITH CTEResults AS
		(
			SELECT ROW_NUMBER() OVER ( ORDER BY 
				CASE WHEN @sortColumn = 'strdefault' AND @SortOrder = 'asc' THEN strdefault END ASC,
				CASE WHEN @sortColumn = 'strdefault' AND @SortOrder = 'desc' THEN strdefault END DESC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'asc' THEN strName END ASC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'desc' THEN strName END DESC,
				CASE WHEN @sortColumn = 'intHACode' AND @SortOrder = 'asc' THEN intHACode END ASC,
				CASE WHEN @sortColumn = 'intHACode' AND @SortOrder = 'desc' THEN intHACode END DESC,
				CASE WHEN @sortColumn = 'intorder' AND @SortOrder = 'asc' THEN intOrder END ASC,
				CASE WHEN @sortColumn = 'intorder' AND @SortOrder = 'desc' THEN intOrder END DESC
		) AS ROWNUM,
		COUNT(*) OVER () AS 
				TotalRowCount, 
				idfsBaseReference,
				idfsReferenceType,
				strDefault,
				strName,
				intHACode,
				intOrder
			FROM @T
		)
		SELECT
				TotalRowCount,
				idfsBaseReference 'BaseReferenceId',
				idfsReferenceType 'ReferenceId',
				strDefault 'Default',
				strName 'Name',	
				intOrder,
				intHACode,
				TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
				CurrentPage = @pageNo 
		FROM CTEResults
		WHERE RowNum > @firstRec AND RowNum < @lastRec 

		END
	
	
	END TRY

	BEGIN CATCH
		THROW
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_LoginContext_SET]...';


GO

-- =============================================
-- Author:		Steven Verner
-- History:
-- Create date: 12/21/2021
-- 02/28/2022	Ensured that eventid is nulled out when called.  This SP is called during the logon process.

-- Description:	Sets the user's login context by adding a row into the tstLocalConnectionContext table.
-- =============================================
ALTER PROCEDURE [dbo].[USP_GBL_LoginContext_SET]
	 @UserID as bigint 
	,@userSite bigint 
	,@blnDiagnosisDenied  bit
	,@blnSiteDenied  bit
AS
	DECLARE @idfsDataAuditEvent BIGINT
	DECLARE @SupressSELECT TABLE
    (
		retrunCode INT,
		returnMessage VARCHAR(200)
    )

	IF Exists(SELECT * FROM tstLocalConnectionContext WHERE idfUserID = @UserID)
		UPDATE tstLocalConnectionContext      
		SET  
		  idfsSite=@userSite,      
		  datLastUsed=GETUTCDATE(),
		  blnDiagnosisDenied =  @blnDiagnosisDenied,
		  blnSiteDenied = @blnSiteDenied,
		  idfDataAuditEvent = NULL,
		  idfEventID = NULL
		WHERE idfUserID = @UserID
	ELSE
		INSERT INTO tstLocalConnectionContext(
			strConnectionContext,
			idfUserID,
			idfsSite,
			datLastUsed,
			blnDiagnosisDenied,
			blnSiteDenied
			)
		VALUES(
			NEWID(),
			@UserID,
			@userSite,
			GETUTCDATE(),
			@blnDiagnosisDenied,
			@blnSiteDenied
			)


RETURN 0
GO
PRINT N'Altering Procedure [dbo].[USP_HAS_DetailedInformation_GetList]...';


GO
--=====================================================================================================
-- Name: USP_HAS_DetailedInformation_GetList
-- Author:		Doug Albanese
-- Description:	Returns a list of "Detailed Information" for sample type/disease association
--
--							
-- Revision History:
--	Name            Date		Change Detail
--	--------------- ----------	-----------------------------------------------
--	Doug Albanese	12/20/2021	Initial Release
--	Doug Albanese	12/21/2021	Refactored for filtering and paging
--	Doug Albanese	12/30/2021	Added 'comment' field.
--	Doug Albanese	01/12/2022	Added 'idfsSampleType', 'idfSendToOffice', 'HumanMasterID' fields.
--	Doug Albanese	01/25/2022	Added missing logic to determine first and last record of the page
--	Doug Albanese	01/28/2022	Added Disease Id
--	Doug Albanese	02/01/2022	Changed source for comments to tlbMaterial strNote
--	Doug Albanese	02/03/2022	Fixed the person id return problem.
--	Doug Albanese	05/26/2022	Corrected mismatched Id, was idfMonitoringSession...should have been idfMaterial
--	Doug Albanese	07/13/2022	Duplicate "Samples" were being generated, due to missing join fields for tlbMonitoringSessionToDiagnosis, against tlbMaterial.DiseaseID and
--								MonitoringSessionToSampleType, against tlbMonitoringSessionToDiagnosis.idfsSampleType
--	Doug Albanese	07/18/2022	Add "Distinct" to eliminate all other conditions that produced duplicates
--	Doug Albanese	07/26/2022	Changed the join on MonitoringSessionToSampleType, to a LEFT join.
-- Stephen Long     08/13/2022  Added person's name field.
-- Doug Albanese	 10/11/2022	 Added intRowStatus check
-- Stephen Long     10/18/2022  Changed join to use tlbMonitoringSessionToMaterial.
--
-- Test Code:
-- EXEC USP_HAS_DetailedInformation_GetList @LanguageId='en', @idfMonitoringSession = 404
-- 
--=====================================================================================================
ALTER PROCEDURE [dbo].[USP_HAS_DetailedInformation_GetList]
(
    @LanguageId NVARCHAR(50),
    @idfMonitoringSession BIGINT,
    @advancedSearch NVARCHAR(100) = NULL,
    @pageNo INT = 1,
    @pageSize INT = 10,
    @sortColumn NVARCHAR(30) = 'ResultDate',
    @sortOrder NVARCHAR(4) = 'DESC'
)
AS
BEGIN
    BEGIN TRY
        DECLARE @firstRec INT
        DECLARE @lastRec INT

        SET @firstRec = (@pageNo - 1) * @pagesize
        SET @lastRec = (@pageNo * @pageSize + 1)

        DECLARE @MonitoringSessionDiseases TABLE
        (
            ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
            DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
            DiseaseNames NVARCHAR(MAX) NOT NULL
        );

        DECLARE @Results TABLE
        (
            ID BIGINT,
            HumanMasterID BIGINT,
            PersonID BIGINT,
            EIDSSPersonID NVARCHAR(200),
            PersonName NVARCHAR(MAX),
            PersonAddress NVARCHAR(200),
            FieldSampleID NVARCHAR(200),
            DiseaseID NVARCHAR(MAX),
            Disease NVARCHAR(MAX),
            idfsSampleType BIGINT,
            SampleType NVARCHAR(200),
            CollectionDate DATETIME,
            idfSendToOffice BIGINT,
            SentToOrganization NVARCHAR(200),
            Comment NVARCHAR(MAX)
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT SampleID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames
        FROM dbo.FN_AS_SAMPLE_DISEASES_GET(@LanguageID, @idfMonitoringSession)
        GROUP BY SampleID;

        INSERT INTO @Results
        SELECT DISTINCT
            M.idfMaterial AS ID,
            H.idfHumanActual AS HumanMasterID,
            M.idfHuman AS PersonID,
            HAI.EIDSSPersonID AS EIDSSPersonID,
            dbo.FN_GBL_ConcatFullName(H.strLastName, H.strFirstName, H.strSecondName) AS PersonName,
            GL.strAddressString AS PersonAddress,
            strFieldBarcode AS FieldSampleID,
            CASE WHEN m.DiseaseID IS NOT NULL THEN
                CONVERT(NVARCHAR(MAX), m.DiseaseID) 
            ELSE
                msDiseases.DiseaseIdentifiers
            END AS DiseaseID,
            CASE WHEN m.DiseaseID IS NOT NULL THEN
                diseaseName.name 
            ELSE
                msDiseases.DiseaseNames 
            END AS Disease,
            M.idfsSampleType,
            S.name AS SampleType,
            M.datFieldCollectionDate CollectionDate,
            M.idfSendToOffice,
            OFFICE.name AS SentToOrganization,
            M.strNote AS Comment
        FROM dbo.tlbMaterial M
            LEFT JOIN @MonitoringSessionDiseases msDiseases -- For monitoring session samples added via human, veterinary or laboratory modules
                ON msDiseases.ID = m.idfMaterial
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName -- For laboratory transferred samples
                ON diseaseName.idfsReference = m.DiseaseID
            INNER JOIN dbo.tlbHuman H
                ON H.idfHuman = M.idfHuman
            INNER JOIN dbo.tlbHumanActual HA
                ON HA.idfHumanActual = H.idfHumanActual
            INNER JOIN dbo.tlbGeoLocation GL
                ON GL.idfGeoLocation = H.idfCurrentResidenceAddress
            INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageId, 19000087) S
                ON S.idfsReference = M.idfsSampleType
            INNER JOIN dbo.tlbOffice O
                ON O.idfOffice = M.idfSendToOffice
            INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageId, 19000046) OFFICE
                ON OFFICE.idfsReference = O.idfsOfficeName
            INNER JOIN dbo.HumanActualAddlInfo HAI
                ON HAI.HumanActualAddlInfoUID = HA.idfHumanActual
        WHERE M.idfMonitoringSession = @idfMonitoringSession
              AND M.intRowStatus = 0;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        WITH CTEResults
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'ID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PersonID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       PersonID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PersonID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       PersonID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PersonAddress'
                                                        AND @SortOrder = 'ASC' THEN
                                                       PersonAddress
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PersonAddress'
                                                        AND @SortOrder = 'DESC' THEN
                                                       PersonAddress
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'FieldSampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       FieldSampleID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'FieldSampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       FieldSampleID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'Disease'
                                                        AND @SortOrder = 'ASC' THEN
                                                       Disease
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'Disease'
                                                        AND @SortOrder = 'DESC' THEN
                                                       Disease
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleType'
                                                        AND @SortOrder = 'ASC' THEN
                                                       SampleType
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleType'
                                                        AND @SortOrder = 'DESC' THEN
                                                       SampleType
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'CollectionDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CollectionDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'CollectionDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CollectionDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SentToOrganization'
                                                        AND @SortOrder = 'ASC' THEN
                                                       SentToOrganization
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SentToOrganization'
                                                        AND @SortOrder = 'DESC' THEN
                                                       SentToOrganization
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'Comment'
                                                        AND @SortOrder = 'ASC' THEN
                                                       Comment
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'Comment'
                                                        AND @SortOrder = 'DESC' THEN
                                                       Comment
                                               END DESC
                                     ) AS ROWNUM,
                   COUNT(*) OVER () AS TotalRowCount,
                   ID,
                   HumanMasterID,
                   PersonID,
                   EIDSSPersonID,
                   PersonName,
                   PersonAddress,
                   FieldSampleID,
                   DiseaseID,
                   Disease,
                   idfsSampleType,
                   SampleType,
                   CollectionDate,
                   idfSendToOffice,
                   SentToOrganization,
                   Comment
            FROM @Results
           )
        SELECT TotalRowCount,
               ID,
               HumanMasterID,
               PersonID,
               EIDSSPersonID,
               PersonName,
               PersonAddress,
               FieldSampleID,
               DiseaseID,
               Disease,
               idfsSampleType,
               SampleType,
               CollectionDate,
               idfSendToOffice,
               SentToOrganization,
               Comment,
               TotalPages = (TotalRowCount / @pageSize) + IIF(TotalRowCount % @pageSize > 0, 1, 0),
               CurrentPage = @pageNo
        FROM CTEResults
        WHERE RowNum > @firstRec
              AND RowNum < @lastRec;
    END TRY
    BEGIN CATCH

    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_HAS_Tests_GetList]...';


GO
--=====================================================================================================
-- Name: USP_HAS_Tests_GetList
-- Author:		Doug Albanese
-- Description:	Returns a list of "Tests"
--
--							
-- Revision History:
--	Name             Date		Change Detail
--	---------------- ----------	-----------------------------------------------
--	Doug Albanese	12/20/2021	Initial Release
--	Doug Albanese	12/21/2021	Refactored for filtering and paging
--	Doug Albanese	01/25/2022	Added missing first and last record number for page
--	Doug Albanese	01/29/2022	Added idfTesting as "ID" for detail return
--	Doug Albanese	01/29/2022	Added other missing fields that are used to support the displaying of the details
--	Doug Albanese	02/02/2022	Added idfMaterial as SampleID on return
--	Doug Albanese	02/03/2022	Fixed the person id return problem.
--	Doug Albanese	06/06/2022	Added HumanMasterId for use with "Linked" disease reports
--	Doug Albanese	06/15/2022	Changed TESTCATEGORY from inner to left join
--	Doug Albanese	06/16/2022	Added intRowStatus check
--	Stephen Long    07/12/2022  Added original test result type ID for site alerts.
--	Doug Albanese	07/18/2022	Added idfHumanCase so that the connected link can be disabled
--  Doug Albanese	 10/17/2022	 Added "Indicative" to provide information on logic to remove "Connected" link for HDRs
-- Doug Albanese	 10/17/2022	 Performance improvement
--	Test Code:
--	EXEC USP_HAS_Tests_GetList @LanguageId='en', @idfMonitoringSession = 404
-- 
--=====================================================================================================
ALTER PROCEDURE [dbo].[USP_HAS_Tests_GetList]
(
	@LanguageId				NVARCHAR(50),
	@idfMonitoringSession	BIGINT,
	@advancedSearch			NVARCHAR(100) = NULL,
	@pageNo					INT = 1,
	@pageSize				INT = 10 ,
	@sortColumn				NVARCHAR(30) = 'ResultDate',
	@sortOrder				NVARCHAR(4) = 'DESC'
)
AS
BEGIN
	BEGIN TRY
		DECLARE @firstRec INT
		DECLARE @lastRec INT

		SET @firstRec = (@pageNo-1)* @pagesize
		SET @lastRec = (@pageNo*@pageSize+1)

		DECLARE @Results TABLE (
			ID					BIGINT,
			LabSampleID			NVARCHAR(200),
			FieldSampleID		NVARCHAR(200),
			SampleType			NVARCHAR(200),
			SampleTypeID		BIGINT,
			SampleID			BIGINT,
			PersonID			BIGINT,
			HumanMasterID		BIGINT,
			EIDSSPersonID		NVARCHAR(200),
			TestName			NVARCHAR(200),
			TestNameID			BIGINT,
			Diagnosis			NVARCHAR(200),
			DiseaseID			BIGINT,
			TestCategory		NVARCHAR(200),
			TestCategoryID		BIGINT,
			TestResult			NVARCHAR(200),
			TestResultID		BIGINT,
			OriginalTestResultTypeID BIGINT, 
			TestStatus			NVARCHAR(200),
			TestStatusID		BIGINT,
			ResultDate			DATETIME,
			HumanCaseID			BIGINT,
			Indicative			BIT
		)

		INSERT INTO @Results
		SELECT
			T.idfTesting				AS ID,
			M.strBarcode				AS LabSampleID,
			M.strFieldBarcode			AS FieldSampleID,
			S.name						AS SampleType,
			S.idfsReference				AS SampleTypeID,
			M.idfMaterial				AS SampleID,
			M.idfHuman					AS PersonID,
			HA.idfHumanActual			AS HumanMasterID,
			HAI.EIDSSPersonID			AS EIDSSPersonID,
			TESTNAME.name				AS TestName,
			T.idfsTestName				AS TestNameID,
			DISEASE.name				AS Diagnosis,
			DISEASE.idfsReference		AS DiseaseID,
			TESTCATEGORY.name			AS TestCategory,
			TESTCATEGORY.idfsReference	AS TestCategoryID,
			TESTRESULT.name				AS TestResult,
			TESTRESULT.idfsReference	AS TestResultID,
			t.idfsTestResult            AS OriginalTestResultTypeID, 
			TESTSTATUS.name				AS TestStatus,
			TESTSTATUS.idfsReference	AS TestStatusID,
			T.datConcludedDate			AS ResultDate,
			T.idfHumanCase				AS HumanCaseID,
			TTR.blnIndicative		    AS Indicative
		FROM
			dbo.tlbTesting T
		INNER JOIN dbo.tlbMaterial M
			ON M.idfMaterial = T.idfMaterial
		INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageId, 19000087) S
			ON S.idfsReference = M.idfsSampleType
		INNER JOIN dbo.tlbHuman H
			ON H.idfHuman = M.idfHuman
		INNER JOIN dbo.tlbHumanActual HA
			ON HA.idfHumanActual = H.idfHumanActual
		INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageId, 19000097) TESTNAME
			ON TESTNAME.idfsReference = T.idfsTestName
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageId, 19000095) TESTCATEGORY
			ON TESTCATEGORY.idfsReference = T.idfsTestCategory
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageId, 19000096) TESTRESULT
			ON TESTRESULT.idfsReference = T.idfsTestResult
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageId, 19000001) TESTSTATUS
			ON TESTSTATUS.idfsReference = T.idfsTestStatus
		INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageId, 19000019) DISEASE
			ON DISEASE.idfsReference = t.idfsDiagnosis
		INNER JOIN dbo.HumanActualAddlInfo HAI
			ON HAI.HumanActualAddlInfoUID = HA.idfHumanActual
		INNER JOIN dbo.trtTestTypeToTestResult TTR
	  		ON TTR.idfsTestName = T.idfsTestName AND TTR.idfsTestResult = T.idfsTestResult
		WHERE
			M.idfMonitoringSession = @idfMonitoringSession AND
			T.intRowStatus = 0;

		-- ========================================================================================
		-- FINAL QUERY, PAGINATION AND COUNTS
		-- ========================================================================================
		WITH CTEResults AS
		(
			SELECT ROW_NUMBER() OVER ( ORDER BY 
				CASE WHEN @SortColumn = 'ID' AND @SortOrder = 'ASC' THEN ID END ASC
				,CASE WHEN @SortColumn = 'ID' AND @SortOrder = 'DESC' THEN ID END DESC
				,CASE WHEN @SortColumn = 'LabSampleID' AND @SortOrder = 'ASC' THEN LabSampleID END ASC
				,CASE WHEN @SortColumn = 'LabSampleID' AND @SortOrder = 'DESC' THEN LabSampleID END DESC
				,CASE WHEN @SortColumn = 'FieldSampleID' AND @SortOrder = 'ASC' THEN FieldSampleID END ASC
				,CASE WHEN @SortColumn = 'FieldSampleID' AND @SortOrder = 'DESC' THEN FieldSampleID END DESC
				,CASE WHEN @SortColumn = 'SampleType' AND @SortOrder = 'ASC' THEN SampleType END ASC
				,CASE WHEN @SortColumn = 'SampleType' AND @SortOrder = 'DESC' THEN SampleType END DESC
				,CASE WHEN @SortColumn = 'PersonID' AND @SortOrder = 'ASC' THEN PersonID END ASC
				,CASE WHEN @SortColumn = 'PersonID' AND @SortOrder = 'DESC' THEN PersonID END DESC
				,CASE WHEN @SortColumn = 'TestName' AND @SortOrder = 'ASC' THEN TestName END ASC
				,CASE WHEN @SortColumn = 'TestName' AND @SortOrder = 'DESC' THEN TestName END DESC
				,CASE WHEN @SortColumn = 'Diagnosis' AND @SortOrder = 'ASC' THEN Diagnosis END ASC
				,CASE WHEN @SortColumn = 'Diagnosis' AND @SortOrder = 'DESC' THEN Diagnosis END DESC
				,CASE WHEN @SortColumn = 'TestCategory' AND @SortOrder = 'ASC' THEN TestCategory END ASC
				,CASE WHEN @SortColumn = 'TestCategory' AND @SortOrder = 'DESC' THEN TestCategory END DESC
				,CASE WHEN @SortColumn = 'TestResult' AND @SortOrder = 'ASC' THEN TestResult END ASC
				,CASE WHEN @SortColumn = 'TestResult' AND @SortOrder = 'DESC' THEN TestResult END DESC
				,CASE WHEN @SortColumn = 'TestStatus' AND @SortOrder = 'ASC' THEN TestStatus END ASC
				,CASE WHEN @SortColumn = 'TestStatus' AND @SortOrder = 'DESC' THEN TestStatus END DESC
				,CASE WHEN @SortColumn = 'ResultDate' AND @SortOrder = 'ASC' THEN ResultDate END ASC
				,CASE WHEN @SortColumn = 'ResultDate' AND @SortOrder = 'DESC' THEN ResultDate END DESC
				--,IIF( @sortColumn = 'intOrder',intOrder,intOrder) ASC
		) AS ROWNUM,
		COUNT(*) OVER () AS 
				TotalRowCount, 
				ID,
				LabSampleID,
				FieldSampleID,
				SampleType,
				SampleTypeID,
				SampleID,
				PersonID,
				HumanMasterID,
				EIDSSPersonID,
				TestName,
				TestNameID,
				Diagnosis,
				DiseaseID,
				TestCategory,
				TestCategoryID,
				TestResult,
				TestResultID,
				OriginalTestResultTypeID, 
				TestStatus,
				TestStatusID,
				ResultDate,
				HumanCaseID,
			    Indicative
			FROM @Results
		)
		SELECT
				TotalRowCount, 
				ID,
				LabSampleID,
				FieldSampleID,
				SampleType,
				SampleTypeID,
				SampleID,
				PersonID,
				HumanMasterID,
				EIDSSPersonID,
				TestName,
				TestNameID,
				Diagnosis,
				DiseaseID,
				TestCategory,
				TestCategoryID,
				TestResult,
				TestResultID,
				OriginalTestResultTypeID, 
				TestStatus,
				TestStatusID,
				ResultDate,
				HumanCaseID,
			    Indicative,
				TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
				CurrentPage = @pageNo 
		FROM CTEResults
		WHERE RowNum > @firstRec AND RowNum < @lastRec;

	END TRY
	BEGIN CATCH
		
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_DISEASE_REPORT_GETList]...';


GO
-- ================================================================================================
-- Name: USP_HUM_DISEASE_REPORT_GETList
--
-- Description: Get a list of human disease reports for the human module.
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mandar Kulkarni             Initial release.
-- Stephen Long     03/26/2018 Added the person reported by name for the farm use case.
-- JWJ	            04/17/2018 Added extra col to return:  tlbHuman.idfHumanActual. Added alias 
--                             for region rayon to make them unique in results added report status 
--                             to results 
-- Harold Pryor     10/22/2018 Added input search parameters SearchStrPersonFirstName, 
--                             SearchStrPersonMiddleName, and SearchStrPersonLastName
-- Harold Pryor     10/31/2018 Added input search parameters SearchLegacyCaseID and	
--                             added strLocation (region, rayon) field to list result set
-- Harold Pryor     11/12/2018 Changed @SearchLegacyCaseID parameter from BIGINT to NVARCHAR(200)
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     07/07/2019 Added monitoring session ID to parameters and where clause.
-- Stephen Long     07/10/2019 Changed address join from exposure location to patient's current 
--                             residence address.
-- Stephen Long     07/19/2019 Corrected patient name and person entered by name ', '.
-- Stephen Long     02/26/2020 Added non-configurable site filtration rules.
-- Lamont Mitchell  03/03/2020 Modified all joins on human case and human to join on human actual.
-- Stephen Long     04/01/2020 Added if/else for first-level and second-level site types to bypass 
--                             non-configurable rules.
-- Stephen Long     05/18/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long     06/18/2020 Corrected the join on the rayon of the report current residence 
--                             address (human ID to human ID instead of human ID to human actual 
--                             ID).
-- Stephen Long     06/18/2020 Added where criteria to the query when no site filtration is 
--                             required.
-- Stephen Long     07/07/2020 Added trim to EIDSS identifier like criteria.
-- Doug Albanese	11/16/2020 Added Outbreak Tied filtering
-- Stephen Long     11/18/2020 Added site ID to the query.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long     12/24/2020 Modified join on disease filtration default role rule.
-- Stephen Long     12/29/2020 Changed function call on reference data for inactive records.
-- Stephen Long     01/04/2020 Added option recompile due to number of optional parameters for 
--                             better execution plan.
-- Stephen Long     04/04/2021 Added updated pagination and location hierarchy.
-- Mike Kornegay	09/23/2021 Added HospitalizationStatus field
-- Stephen Long     11/03/2021 Added disease ID field.
-- Mike Kornegay	11/16/2021 Fix hospitalization field for translations
-- Mike Kornegay	12/07/2021 Added back EnteredByPersonName 
-- Mike Kornegay	12/08/2021 Swapped out FN_GBL_GIS_ReferenceRepair for new flat hierarchy
-- Mike Kornegay	12/23/2021 Fixed YN hospitalization where clause
-- Manickandan Govindarajan 03/21/2022  Rename Param PageNumber to Page
-- Stephen Long     03/29/2022 Fix to site filtration to pull back a user's own site records.
-- Stephen Long     06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay    06/06/2022 Added parameter OutcomeID.
-- Mike Kornegay	06/13/2022 Changed inner joins to left joins in final query because result set 
--                             was incorrect.
-- Stephen Long     08/14/2022 Added additional criteria for outbreak cases for laboratory module.
--                             TODO: replace filter outbreak cases parameter, and just filter in 
--                             the initial query to avoid getting extra unneeded records; also just 
--                             make it a boolean value.
-- Mark Wilson      09/01/2022 update to use denormalized locations to work with site filtration.
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Mike Kornegay	10/11/2022 Move order by back to CTE row partition for performance and add LanguageID to 
--							   default filtration rule joins.
--
-- Testing code:
-- EXEC USP_HUM_DISEASE_REPORT_GETList 'en-US'
-- EXEC USP_HUM_DISEASE_REPORT_GETList 'en-US', @EIDSSReportID = 'H'
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_DISEASE_REPORT_GETList]
    @LanguageID NVARCHAR(50),
    @ReportKey BIGINT = NULL,
    @ReportID NVARCHAR(200) = NULL,
    @LegacyReportID NVARCHAR(200) = NULL,
    @SessionKey BIGINT = NULL,
    @PatientID BIGINT = NULL,
    @PersonID NVARCHAR(200) = NULL,
    @DiseaseID BIGINT = NULL,
    @ReportStatusTypeID BIGINT = NULL,
    @AdministrativeLevelID BIGINT = NULL,
    @DateEnteredFrom DATETIME = NULL,
    @DateEnteredTo DATETIME = NULL,
    @ClassificationTypeID BIGINT = NULL,
    @HospitalizationYNID BIGINT = NULL,
    @PatientFirstName NVARCHAR(200) = NULL,
    @PatientMiddleName NVARCHAR(200) = NULL,
    @PatientLastName NVARCHAR(200) = NULL,
    @SentByFacilityID BIGINT = NULL,
    @ReceivedByFacilityID BIGINT = NULL,
    @DiagnosisDateFrom DATETIME = NULL,
    @DiagnosisDateTo DATETIME = NULL,
    @LocalOrFieldSampleID NVARCHAR(200) = NULL,
    @DataEntrySiteID BIGINT = NULL,
    @DateOfSymptomsOnsetFrom DATETIME = NULL,
    @DateOfSymptomsOnsetTo DATETIME = NULL,
    @NotificationDateFrom DATETIME = NULL,
    @NotificationDateTo DATETIME = NULL,
    @DateOfFinalCaseClassificationFrom DATETIME = NULL,
    @DateOfFinalCaseClassificationTo DATETIME = NULL,
    @LocationOfExposureAdministrativeLevelID BIGINT = NULL,
    @OutcomeID BIGINT = NULL,
    @FilterOutbreakTiedReports INT = 0,
    @OutbreakCasesIndicator BIT = 0,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'ReportID',
    @SortOrder NVARCHAR(4) = 'DESC',
    @Page INT = 1,
    @PageSize INT = 10
AS
BEGIN
    SET NOCOUNT ON;

	DECLARE @firstRec INT;
	DECLARE @lastRec INT;
	SET @firstRec = (@Page-1)* @PageSize
	SET @lastRec = (@Page*@PageSize+1);

    DECLARE @AdministrativeLevelNode AS HIERARCHYID,
            @LocationOfExposureLevelNode AS HIERARCHYID;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                             ));
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );

    BEGIN TRY
        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        IF @AdministrativeLevelID IS NOT NULL
        BEGIN
            SELECT @AdministrativeLevelNode = node
            FROM dbo.gisLocation
            WHERE idfsLocation = @AdministrativeLevelID;
        END;

        IF @LocationOfExposureAdministrativeLevelID IS NOT NULL
        BEGIN
            SELECT @LocationOfExposureLevelNode = node
            FROM dbo.gisLocation
            WHERE idfsLocation = @LocationOfExposureAdministrativeLevelID;
        END;

        -- ========================================================================================
        -- NO SITE FILTRATION RULES APPLIED
        --
        -- For first and second level sites, do not apply any site filtration rules.
        -- ========================================================================================
        IF @ApplySiteFiltrationIndicator = 0
        BEGIN
            INSERT INTO @Results
            SELECT hc.idfHumanCase,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbHumanCase hc
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocation currentAddress
                    ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
--------------------------------------------------------------------------------------------------------------------
                LEFT JOIN dbo.gisLocationDenormalized g
                    ON g.idfsLocation = currentAddress.idfsLocation
					AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfHumanCase = hc.idfHumanCase
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation exposure
                    ON exposure.idfGeoLocation = hc.idfPointGeoLocation
                LEFT JOIN dbo.gisLocationDenormalized gExposure
                    ON gExposure.idfsLocation = exposure.idfsLocation
					AND gExposure.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
            WHERE hc.intRowStatus = 0
                  AND hc.idfsFinalDiagnosis IS NOT NULL
                  AND (
                          hc.idfHumanCase = @ReportKey
                          OR @ReportKey IS NULL
                      )
                  AND (
                          hc.idfParentMonitoringSession = @SessionKey
                          OR @SessionKey IS NULL
                      )
                  AND (
                          h.idfHumanActual = @PatientID
                          OR @PatientID IS NULL
                      )
                  AND (
                          h.strPersonId = @PersonID
                          OR @PersonID IS NULL
                      )
                  AND (
                          idfsFinalDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          idfsCaseProgressStatus = @ReportStatusTypeID
                          OR @ReportStatusTypeID IS NULL
                      )
                  AND (
                          g.Level1ID = @AdministrativeLevelID
						  OR g.Level2ID = @AdministrativeLevelID
						  OR g.Level3ID = @AdministrativeLevelID
						  OR g.Level4ID = @AdministrativeLevelID
						  OR g.Level5ID = @AdministrativeLevelID
						  OR g.Level6ID = @AdministrativeLevelID
						  OR g.Level7ID = @AdministrativeLevelID
						  OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (CAST(hc.datEnteredDate AS DATE)
                  BETWEEN @DateEnteredFrom AND @DateEnteredTo
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 OR @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalDiagnosisDate AS DATE)
                  BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                          )
                          OR (
                                 @DiagnosisDateFrom IS NULL
                                 OR @DiagnosisDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datNotificationDate AS DATE)
                  BETWEEN @NotificationDateFrom AND @NotificationDateTo
                          )
                          OR (
                                 @NotificationDateFrom IS NULL
                                 OR @NotificationDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datOnSetDate AS DATE)
                  BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                          )
                          OR (
                                 @DateOfSymptomsOnsetFrom IS NULL
                                 OR @DateOfSymptomsOnsetTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalCaseClassificationDate AS DATE)
                  BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                          )
                          OR (
                                 @DateOfFinalCaseClassificationFrom IS NULL
                                 OR @DateOfFinalCaseClassificationTo IS NULL
                             )
                      )
                  AND (
                          hc.idfReceivedByOffice = @ReceivedByFacilityID
                          OR @ReceivedByFacilityID IS NULL
                      )
                  AND (
                          hc.idfSentByOffice = @SentByFacilityID
                          OR @SentByFacilityID IS NULL
                      )
                  AND (
                          idfsFinalCaseStatus = @ClassificationTypeID
                          OR @ClassificationTypeID IS NULL
                      )
                  AND (
                          idfsYNHospitalization = @HospitalizationYNID
                          OR @HospitalizationYNID IS NULL
                      )
                  AND (
                          g.Level1ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
						  OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
                  AND (
                          (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                            WHEN '' THEN
                                                                ISNULL(h.strFirstName, '')
                                                            ELSE
                                                                @PatientFirstName
                                                        END
                          )
                          OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                             WHEN '' THEN
                                                                 ISNULL(h.strSecondName, '')
                                                             ELSE
                                                                 @PatientMiddleName
                                                         END
                          )
                          OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                           WHEN '' THEN
                                                               ISNULL(h.strLastName, '')
                                                           ELSE
                                                               @PatientLastName
                                                       END
                          )
                          OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                      )
                  AND (
                          hc.idfsSite = @DataEntrySiteID
                          OR @DataEntrySiteID IS NULL
                      )
                  AND (
					(
						hc.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						hc.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
                  AND (
                          hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
                  AND (
                          hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                          OR @LegacyReportID IS NULL
                      )
                  AND (
                          m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                          OR @LocalOrFieldSampleID IS NULL
                      )
                 AND  (
                          hc.idfsOutcome = @OutcomeID
                          OR @OutcomeID IS NULL
                      )
            GROUP BY hc.idfHumanCase
            OPTION (RECOMPILE);
        END
        ELSE
        BEGIN -- Site Filtration
            INSERT INTO @Results
            SELECT hc.idfHumanCase,
            1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbHumanCase hc
            INNER JOIN dbo.tlbHuman h ON h.idfHuman = hc.idfHuman AND h.intRowStatus = 0
            INNER JOIN dbo.tlbGeoLocation currentAddress ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
            LEFT JOIN dbo.gisLocationDenormalized g ON g.idfsLocation = currentAddress.idfsLocation AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
            LEFT JOIN dbo.tlbMaterial m ON m.idfHumanCase = hc.idfHumanCase AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation exposure ON exposure.idfGeoLocation = hc.idfPointGeoLocation
            LEFT JOIN dbo.gisLocationDenormalized gExposure ON gExposure.idfsLocation = exposure.idfsLocation AND gExposure.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)          
			WHERE hc.intRowStatus = 0
            AND hc.idfsSite = @UserSiteID
            AND hc.idfsFinalDiagnosis IS NOT NULL
            AND (hc.idfHumanCase = @ReportKey OR @ReportKey IS NULL)
            AND (hc.idfParentMonitoringSession = @SessionKey OR @SessionKey IS NULL)
            AND (h.idfHumanActual = @PatientID OR @PatientID IS NULL)
            AND (h.strPersonId = @PersonID OR @PersonID IS NULL)
            AND (idfsFinalDiagnosis = @DiseaseID OR @DiseaseID IS NULL)
            AND (idfsCaseProgressStatus = @ReportStatusTypeID OR @ReportStatusTypeID IS NULL)
            AND (
                    g.Level1ID = @AdministrativeLevelID
					OR g.Level2ID = @AdministrativeLevelID
					OR g.Level3ID = @AdministrativeLevelID
					OR g.Level4ID = @AdministrativeLevelID
					OR g.Level5ID = @AdministrativeLevelID
					OR g.Level6ID = @AdministrativeLevelID
					OR g.Level7ID = @AdministrativeLevelID
					OR @AdministrativeLevelID IS NULL
                )
            AND (
                    (CAST(hc.datEnteredDate AS DATE)
            BETWEEN @DateEnteredFrom AND @DateEnteredTo
                    )
                    OR (
                            @DateEnteredFrom IS NULL
                            OR @DateEnteredTo IS NULL
                        )
                )
            AND (
                    (CAST(hc.datFinalDiagnosisDate AS DATE)
            BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                    )
                    OR (
                            @DiagnosisDateFrom IS NULL
                            OR @DiagnosisDateTo IS NULL
                        )
                )
            AND (
                    (CAST(hc.datNotificationDate AS DATE)
            BETWEEN @NotificationDateFrom AND @NotificationDateTo
                    )
                    OR (
                            @NotificationDateFrom IS NULL
                            OR @NotificationDateTo IS NULL
                        )
                )
            AND (
                    (CAST(hc.datOnSetDate AS DATE)
            BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                    )
                    OR (
                            @DateOfSymptomsOnsetFrom IS NULL
                            OR @DateOfSymptomsOnsetTo IS NULL
                        )
                )
            AND (
                    (CAST(hc.datFinalCaseClassificationDate AS DATE)
            BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                    )
                    OR (
                            @DateOfFinalCaseClassificationFrom IS NULL
                            OR @DateOfFinalCaseClassificationTo IS NULL
                        )
                )
            AND (
                    hc.idfReceivedByOffice = @ReceivedByFacilityID
                    OR @ReceivedByFacilityID IS NULL
                )
            AND (
                    hc.idfSentByOffice = @SentByFacilityID
                    OR @SentByFacilityID IS NULL
                )
            AND (
                    idfsFinalCaseStatus = @ClassificationTypeID
                    OR @ClassificationTypeID IS NULL
                )
            AND (
                    idfsYNHospitalization = @HospitalizationYNID
                    OR @HospitalizationYNID IS NULL
                )
            AND (
                    g.Level1ID = @LocationOfExposureAdministrativeLevelID
					OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
					OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
					OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
					OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
					OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
					OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
					OR @LocationOfExposureAdministrativeLevelID IS NULL
                )
            AND (
                    (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                    WHEN '' THEN
                                                        ISNULL(h.strFirstName, '')
                                                    ELSE
                                                        @PatientFirstName
                                                END
                    )
                    OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                )
            AND (
                    (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                        WHEN '' THEN
                                                            ISNULL(h.strSecondName, '')
                                                        ELSE
                                                            @PatientMiddleName
                                                    END
                    )
                    OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                )
            AND (
                    (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                    WHEN '' THEN
                                                        ISNULL(h.strLastName, '')
                                                    ELSE
                                                        @PatientLastName
                                                END
                    )
                    OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                )
            AND (
                    hc.idfsSite = @DataEntrySiteID
                    OR @DataEntrySiteID IS NULL
                )
            AND (
			(
				hc.idfOutbreak IS NULL
				AND @OutbreakCasesIndicator = 0
				)
			OR (
				hc.idfOutbreak IS NOT NULL
				AND @OutbreakCasesIndicator = 1
				)
			OR (@OutbreakCasesIndicator IS NULL)
			)
            AND (
                    hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                    OR @ReportID IS NULL
                )
            AND (
                    hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                    OR @LegacyReportID IS NULL
                )
            AND (
                    m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                    OR @LocalOrFieldSampleID IS NULL
                )
            AND  (
                    hc.idfsOutcome = @OutcomeID
            OR @OutcomeID IS NULL
                )
            GROUP BY hc.idfHumanCase
            OPTION (RECOMPILE);

            DECLARE @FilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                                     ));

            -- =======================================================================================
            -- DEFAULT SITE FILTRATION RULES
            --
            -- Apply active default site filtration rules for third level sites.
            -- =======================================================================================
            DECLARE @RuleActiveStatus INT = 0;
            DECLARE @AdministrativeLevelTypeID INT;
            DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
            DECLARE @DefaultAccessRules AS TABLE
            (
                AccessRuleID BIGINT NOT NULL,
                ActiveIndicator INT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL,
                AdministrativeLevelTypeID INT NULL
            );

            INSERT INTO @DefaultAccessRules
            SELECT AccessRuleID,
                   a.intRowStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator,
                   a.AdministrativeLevelTypeID
            FROM dbo.AccessRule a
            WHERE DefaultRuleIndicator = 1;

            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537000;

            IF @RuleActiveStatus = 0
            BEGIN
                SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537000;
				
                SELECT @AdministrativeLevelNode = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                FROM dbo.tlbOffice o
                    INNER JOIN dbo.tlbGeoLocationShared AS l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
						AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                           --AND g.intRowStatus = 0
                WHERE o.idfOffice = @UserOrganizationID
                AND 
				(
					g.Level1ID = @AdministrativeLevelID OR
					g.Level2ID = @AdministrativeLevelID OR
					g.Level3ID = @AdministrativeLevelID OR
					g.Level4ID = @AdministrativeLevelID OR
					g.Level5ID = @AdministrativeLevelID OR
					g.Level6ID = @AdministrativeLevelID OR
					g.Level7ID = @AdministrativeLevelID OR
					@AdministrativeLevelID IS NULL 
				)


                -- Administrative level specified in the rule of the site where the report was created.
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tstSite s
                        ON h.idfsSite = s.idfsSite
                    INNER JOIN dbo.tlbOffice o
                        ON o.idfOffice = s.idfOffice
                           AND o.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g ON g.idfsLocation = l.idfsLocation  
								AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537000
                WHERE h.intRowStatus = 0
                AND 
				(
                    g.Level1ID = @AdministrativeLevelID
					OR g.Level2ID = @AdministrativeLevelID
					OR g.Level3ID = @AdministrativeLevelID
					OR g.Level4ID = @AdministrativeLevelID
					OR g.Level5ID = @AdministrativeLevelID
					OR g.Level6ID = @AdministrativeLevelID
					OR g.Level7ID = @AdministrativeLevelID
					OR @AdministrativeLevelID IS NULL
               )


                -- Administrative level specified in the rule of the report current residence address.
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbHuman hu
                        ON hu.idfHuman = h.idfHuman
                           AND hu.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = hu.idfCurrentResidenceAddress
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
							AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
					INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537000
                WHERE h.intRowStatus = 0
                AND 
				(
                    g.Level1ID = @AdministrativeLevelID
					OR g.Level2ID = @AdministrativeLevelID
					OR g.Level3ID = @AdministrativeLevelID
					OR g.Level4ID = @AdministrativeLevelID
					OR g.Level5ID = @AdministrativeLevelID
					OR g.Level6ID = @AdministrativeLevelID
					OR g.Level7ID = @AdministrativeLevelID
					OR @AdministrativeLevelID IS NULL
				)

                -- Administrative level specified in the rule of the report location of exposure, 
                -- if corresponding field was filled in.
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = h.idfPointGeoLocation
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
                           AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537000
                WHERE h.intRowStatus = 0
                  AND (
                          g.Level1ID = @AdministrativeLevelID
						  OR g.Level2ID = @AdministrativeLevelID
						  OR g.Level3ID = @AdministrativeLevelID
						  OR g.Level4ID = @AdministrativeLevelID
						  OR g.Level5ID = @AdministrativeLevelID
						  OR g.Level6ID = @AdministrativeLevelID
						  OR g.Level7ID = @AdministrativeLevelID
						  OR @AdministrativeLevelID IS NULL
                      )
            END;

            -- Report data shall be available to all sites' organizations connected to the particular report.
            -- Notification sent by, notification received by, facility where the patient first sought 
            -- care, hospital, and the conducting investigation organizations.
            SELECT @RuleActiveStatus = intRowStatus
            FROM dbo.AccessRule
            WHERE AccessRuleID = 10537001;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE h.intRowStatus = 0
                      AND (
                              h.idfSentByOffice = @UserOrganizationID
                              OR h.idfReceivedByOffice = @UserOrganizationID
                              OR h.idfSoughtCareFacility = @UserOrganizationID
                              OR h.idfHospital = @UserOrganizationID
                              OR h.idfInvestigatedByOffice = @UserOrganizationID
                          )
                ORDER BY h.idfHumanCase;

                -- Sample collected by and sent to organizations
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfHumanCase),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbHumanCase h
                        ON h.idfHumanCase = m.idfHumanCase
                           AND h.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE m.intRowStatus = 0
                      AND (
                              m.idfFieldCollectedByOffice = @UserOrganizationID
                              OR m.idfSendToOffice = @UserOrganizationID
                          )
                GROUP BY m.idfHumanCase,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;

                -- Sample transferred to organizations
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfHumanCase),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbHumanCase h
                        ON h.idfHumanCase = m.idfHumanCase
                           AND h.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOutMaterial tom
                        ON m.idfMaterial = tom.idfMaterial
                           AND tom.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOUT t
                        ON tom.idfTransferOut = t.idfTransferOut
                           AND t.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE m.intRowStatus = 0
                      AND t.idfSendToOffice = @UserOrganizationID
                GROUP BY m.idfHumanCase,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;
            END;

            --
            -- Report data shall be available to the sites with the connected outbreak, if the report 
            -- is the primary report/session for an outbreak.
            --
            SELECT @RuleActiveStatus = intRowStatus
            FROM dbo.AccessRule
            WHERE AccessRuleID = 10537002;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbOutbreak o
                        ON h.idfHumanCase = o.idfPrimaryCaseOrSession
                           AND o.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537002
                WHERE h.intRowStatus = 0
                      AND o.idfsSite = @UserSiteID;
            END;

            -- =======================================================================================
            -- CONFIGURABLE SITE FILTRATION RULES
            -- 
            -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the default rules.
            -- =======================================================================================
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND sgs.idfsSite = h.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                 AND a.GrantingActorSiteID = h.idfsSite;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- Copy filtered results to results and use search criteria
            INSERT INTO @Results
            SELECT ID,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator
            FROM @FilteredResults
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = ID
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbHumanActual ha
                    ON ha.idfHumanActual = h.idfHumanActual
                       AND ha.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocation currentAddress
                    ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocationDenormalized g
                    ON g.idfsLocation = currentAddress.idfsLocation
					AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfHumanCase = hc.idfHumanCase
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation exposure
                    ON exposure.idfGeoLocation = hc.idfPointGeoLocation
                LEFT JOIN dbo.gisLocationDenormalized gExposure
                    ON gExposure.idfsLocation = exposure.idfsLocation
					AND gExposure.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
            WHERE hc.intRowStatus = 0
                  AND hc.idfsFinalDiagnosis IS NOT NULL
                  AND (
                          hc.idfHumanCase = @ReportKey
                          OR @ReportKey IS NULL
                      )
                  AND (
                          hc.idfParentMonitoringSession = @SessionKey
                          OR @SessionKey IS NULL
                      )
                  AND (
                          ha.idfHumanActual = @PatientID
                          OR @PatientID IS NULL
                      )
                  AND (
                          h.strPersonId = @PersonID
                          OR @PersonID IS NULL
                      )
                  AND (
                          idfsFinalDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          idfsCaseProgressStatus = @ReportStatusTypeID
                          OR @ReportStatusTypeID IS NULL
                      )
                  AND (
                          g.Level1ID = @AdministrativeLevelID
						  OR g.Level2ID = @AdministrativeLevelID
						  OR g.Level3ID = @AdministrativeLevelID
						  OR g.Level4ID = @AdministrativeLevelID
						  OR g.Level5ID = @AdministrativeLevelID
						  OR g.Level6ID = @AdministrativeLevelID
						  OR g.Level7ID = @AdministrativeLevelID
						  OR @AdministrativeLevelID IS NULL
                      )

                  AND (
                          (CAST(hc.datEnteredDate AS DATE)
                  BETWEEN @DateEnteredFrom AND @DateEnteredTo
                          )
                          OR (
                                 @DateEnteredFrom IS NULL
                                 OR @DateEnteredTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalDiagnosisDate AS DATE)
                  BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                          )
                          OR (
                                 @DiagnosisDateFrom IS NULL
                                 OR @DiagnosisDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datNotificationDate AS DATE)
                  BETWEEN @NotificationDateFrom AND @NotificationDateTo
                          )
                          OR (
                                 @NotificationDateFrom IS NULL
                                 OR @NotificationDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datOnSetDate AS DATE)
                  BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                          )
                          OR (
                                 @DateOfSymptomsOnsetFrom IS NULL
                                 OR @DateOfSymptomsOnsetTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalCaseClassificationDate AS DATE)
                  BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                          )
                          OR (
                                 @DateOfFinalCaseClassificationFrom IS NULL
                                 OR @DateOfFinalCaseClassificationTo IS NULL
                             )
                      )
                  AND (
                          hc.idfReceivedByOffice = @ReceivedByFacilityID
                          OR @ReceivedByFacilityID IS NULL
                      )
                  AND (
                          hc.idfSentByOffice = @SentByFacilityID
                          OR @SentByFacilityID IS NULL
                      )
                  AND (
                          idfsFinalCaseStatus = @ClassificationTypeID
                          OR @ClassificationTypeID IS NULL
                      )
                  AND (
                          idfsYNHospitalization = @HospitalizationYNID
                          OR @HospitalizationYNID IS NULL
                      )
                  AND (
                          g.Level1ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
						  OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
                  AND (
                          (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                            WHEN '' THEN
                                                                ISNULL(h.strFirstName, '')
                                                            ELSE
                                                                @PatientFirstName
                                                        END
                          )
                          OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                             WHEN '' THEN
                                                                 ISNULL(h.strSecondName, '')
                                                             ELSE
                                                                 @PatientMiddleName
                                                         END
                          )
                          OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                           WHEN '' THEN
                                                               ISNULL(h.strLastName, '')
                                                           ELSE
                                                               @PatientLastName
                                                       END
                          )
                          OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                      )
                  AND (
                          hc.idfsSite = @DataEntrySiteID
                          OR @DataEntrySiteID IS NULL
                      )
                  AND (
					(
						hc.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						hc.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
                  AND (
                          hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
                  AND (
                          hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                          OR @LegacyReportID IS NULL
                      )
                  AND (
                          m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                          OR @LocalOrFieldSampleID IS NULL
                      )
                 AND  (
                          hc.idfsOutcome = @OutcomeID
                          OR @OutcomeID IS NULL
                      )
            GROUP BY ID,
                     ReadPermissionIndicator,
                     AccessToPersonalDataPermissionIndicator,
                     AccessToGenderAndAgeDataPermissionIndicator,
                     WritePermissionIndicator,
                     DeletePermissionIndicator
            OPTION (RECOMPILE);
        END;


        -- =======================================================================================
        -- Remove "Outbreak" tied disease reports, if filtering is needed
        -- =======================================================================================
        IF @FilterOutbreakTiedReports = 1
        BEGIN
            DELETE I
            FROM @Results I
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = I.ID
            WHERE hc.idfOutbreak IS NOT NULL;
        END;

        -- =======================================================================================
        -- DISEASE FILTRATION RULES
        --
        -- Apply disease filtration rules from use case SAUC62.
        -- =======================================================================================
        -- 
        -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
		
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT h.idfHumanCase
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = h.idfsFinalDiagnosis
                       AND oa.intRowStatus = 0
            WHERE oa.intPermission = 1
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = -506 -- Default role
        );

        --
        -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT hc.idfHumanCase,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbHumanCase hc
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tlbHuman h
                ON h.idfHuman = hc.idfHuman
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbGeoLocation currentAddress
                ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
            LEFT JOIN dbo.gisLocationDenormalized g
                ON g.idfsLocation = currentAddress.idfsLocation
				AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
            LEFT JOIN dbo.tlbMaterial m
                ON m.idfHumanCase = hc.idfHumanCase
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation exposure
                ON exposure.idfGeoLocation = hc.idfPointGeoLocation
            LEFT JOIN dbo.gisLocationDenormalized gExposure
                ON gExposure.idfsLocation = exposure.idfsLocation
				AND gExposure.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
        WHERE oa.intPermission = 2 -- Allow permission
              AND hc.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup
              AND hc.idfsFinalDiagnosis IS NOT NULL
              AND (
                      hc.idfHumanCase = @ReportKey
                      OR @ReportKey IS NULL
                  )
              AND (
                      hc.idfParentMonitoringSession = @SessionKey
                      OR @SessionKey IS NULL
                  )
              AND (
                      h.idfHumanActual = @PatientID
                      OR @PatientID IS NULL
                  )
              AND (
                      h.strPersonId = @PersonID
                      OR @PersonID IS NULL
                  )
              AND (
                      idfsFinalDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      idfsCaseProgressStatus = @ReportStatusTypeID
                      OR @ReportStatusTypeID IS NULL
                  )
              AND (
                          g.Level1ID = @AdministrativeLevelID
						  OR g.Level2ID = @AdministrativeLevelID
						  OR g.Level3ID = @AdministrativeLevelID
						  OR g.Level4ID = @AdministrativeLevelID
						  OR g.Level5ID = @AdministrativeLevelID
						  OR g.Level6ID = @AdministrativeLevelID
						  OR g.Level7ID = @AdministrativeLevelID
						  OR @AdministrativeLevelID IS NULL
                      )

              AND (
                      (CAST(hc.datEnteredDate AS DATE)
              BETWEEN @DateEnteredFrom AND @DateEnteredTo
                      )
                      OR (
                             @DateEnteredFrom IS NULL
                             OR @DateEnteredTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalDiagnosisDate AS DATE)
              BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                      )
                 OR (
                             @DiagnosisDateFrom IS NULL
                             OR @DiagnosisDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datNotificationDate AS DATE)
              BETWEEN @NotificationDateFrom AND @NotificationDateTo
                      )
                      OR (
                             @NotificationDateFrom IS NULL
                             OR @NotificationDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datOnSetDate AS DATE)
              BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                      )
                      OR (
                             @DateOfSymptomsOnsetFrom IS NULL
                             OR @DateOfSymptomsOnsetTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalCaseClassificationDate AS DATE)
              BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                      )
                      OR (
                             @DateOfFinalCaseClassificationFrom IS NULL
                             OR @DateOfFinalCaseClassificationTo IS NULL
                         )
                  )
              AND (
                      hc.idfReceivedByOffice = @ReceivedByFacilityID
                      OR @ReceivedByFacilityID IS NULL
                  )
              AND (
                      hc.idfSentByOffice = @SentByFacilityID
                      OR @SentByFacilityID IS NULL
                  )
              AND (
                      idfsFinalCaseStatus = @ClassificationTypeID
                      OR @ClassificationTypeID IS NULL
                  )
              AND (
                      idfsYNHospitalization = @HospitalizationYNID
                      OR @HospitalizationYNID IS NULL
                  )
                  AND (
                          g.Level1ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
						  OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
              AND (
                      (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                        WHEN '' THEN
                                                            ISNULL(h.strFirstName, '')
                                                        ELSE
                                                            @PatientFirstName
                                                    END
                      )
                      OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                         WHEN '' THEN
                                                             ISNULL(h.strSecondName, '')
                                                         ELSE
                                                             @PatientMiddleName
                                                     END
                      )
                      OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                       WHEN '' THEN
                                                           ISNULL(h.strLastName, '')
                                                       ELSE
                                                           @PatientLastName
                                                   END
                      )
                      OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                  )
              AND (
                      hc.idfsSite = @DataEntrySiteID
                      OR @DataEntrySiteID IS NULL
                  )
              AND (
					(
						hc.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						hc.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
              AND (
                      hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                      OR @ReportID IS NULL
                  )
              AND (
                      hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                      OR @LegacyReportID IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                      OR @LocalOrFieldSampleID IS NULL
                  )
             AND  (
                     hc.idfsOutcome = @OutcomeID
                     OR @OutcomeID IS NULL
                  )
        GROUP BY hc.idfHumanCase
        OPTION (RECOMPILE);

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbHumanCase hc
                ON hc.idfHumanCase = res.ID
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 1
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        --
        -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT hc.idfHumanCase,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbHumanCase hc
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbHuman h
                ON h.idfHuman = hc.idfHuman
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbGeoLocation currentAddress
                ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
            LEFT JOIN dbo.gisLocationDenormalized g
                ON g.idfsLocation = currentAddress.idfsLocation
				AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
            LEFT JOIN dbo.tlbMaterial m
                ON m.idfHumanCase = hc.idfHumanCase
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation exposure
                ON exposure.idfGeoLocation = hc.idfPointGeoLocation
            LEFT JOIN dbo.gisLocationDenormalized gExposure
                ON gExposure.idfsLocation = exposure.idfsLocation
				AND gExposure.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
        WHERE oa.intPermission = 2 -- Allow permission
              AND hc.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = @UserEmployeeID
              AND hc.idfsFinalDiagnosis IS NOT NULL
              AND (
                      hc.idfHumanCase = @ReportKey
                      OR @ReportKey IS NULL
                  )
              AND (
                      hc.idfParentMonitoringSession = @SessionKey
                      OR @SessionKey IS NULL
                  )
              AND (
                      h.idfHumanActual = @PatientID
                      OR @PatientID IS NULL
                  )
              AND (
                      h.strPersonId = @PersonID
                      OR @PersonID IS NULL
                  )
              AND (
                      idfsFinalDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      idfsCaseProgressStatus = @ReportStatusTypeID
                      OR @ReportStatusTypeID IS NULL
                  )
              AND (
                          g.Level1ID = @AdministrativeLevelID
						  OR g.Level2ID = @AdministrativeLevelID
						  OR g.Level3ID = @AdministrativeLevelID
						  OR g.Level4ID = @AdministrativeLevelID
						  OR g.Level5ID = @AdministrativeLevelID
						  OR g.Level6ID = @AdministrativeLevelID
						  OR g.Level7ID = @AdministrativeLevelID
						  OR @AdministrativeLevelID IS NULL
                      )
              AND (
                      (CAST(hc.datEnteredDate AS DATE)
              BETWEEN @DateEnteredFrom AND @DateEnteredTo
                      )
                      OR (
                             @DateEnteredFrom IS NULL
                             OR @DateEnteredTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalDiagnosisDate AS DATE)
              BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                      )
                      OR (
                             @DiagnosisDateFrom IS NULL
                             OR @DiagnosisDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datNotificationDate AS DATE)
              BETWEEN @NotificationDateFrom AND @NotificationDateTo
                      )
                      OR (
                             @NotificationDateFrom IS NULL
                             OR @NotificationDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datOnSetDate AS DATE)
              BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                      )
                      OR (
                             @DateOfSymptomsOnsetFrom IS NULL
                             OR @DateOfSymptomsOnsetTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalCaseClassificationDate AS DATE)
              BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                      )
                      OR (
                             @DateOfFinalCaseClassificationFrom IS NULL
                             OR @DateOfFinalCaseClassificationTo IS NULL
                         )
                  )
              AND (
                      hc.idfReceivedByOffice = @ReceivedByFacilityID
                      OR @ReceivedByFacilityID IS NULL
                  )
              AND (
                      hc.idfSentByOffice = @SentByFacilityID
                      OR @SentByFacilityID IS NULL
                  )
              AND (
                      idfsFinalCaseStatus = @ClassificationTypeID
                      OR @ClassificationTypeID IS NULL
                  )
              AND (
                      idfsYNHospitalization = @HospitalizationYNID
                      OR @HospitalizationYNID IS NULL
                  )
                  AND (
                          g.Level1ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
						  OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
						  OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
              AND (
                      (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                        WHEN '' THEN
                                                            ISNULL(h.strFirstName, '')
                                                        ELSE
                                                            @PatientFirstName
                                                    END
                      )
                      OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                         WHEN '' THEN
                                                             ISNULL(h.strSecondName, '')
                                                         ELSE
                                                             @PatientMiddleName
                                                     END
                      )
                      OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                  )
       AND (
                      (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                       WHEN '' THEN
                                                           ISNULL(h.strLastName, '')
                                                       ELSE
                                                           @PatientLastName
                                                   END
                      )
                      OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                  )
              AND (
                      hc.idfsSite = @DataEntrySiteID
                      OR @DataEntrySiteID IS NULL
                  )
              AND (
					(
						hc.idfOutbreak IS NULL
						AND @OutbreakCasesIndicator = 0
						)
					OR (
						hc.idfOutbreak IS NOT NULL
						AND @OutbreakCasesIndicator = 1
						)
					OR (@OutbreakCasesIndicator IS NULL)
					)
              AND (
                      hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                      OR @ReportID IS NULL
                  )
              AND (
                      hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                      OR @LegacyReportID IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                      OR @LocalOrFieldSampleID IS NULL
                  )
             AND  (
                      hc.idfsOutcome = @OutcomeID
                      OR @OutcomeID IS NULL
                  )
        GROUP BY hc.idfHumanCase
        OPTION (RECOMPILE);

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT hc.idfHumanCase
            FROM dbo.tlbHumanCase hc
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                       AND oa.intRowStatus = 0
            WHERE intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND idfActor = @UserEmployeeID
        );
		
        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator
        FROM @Results res
        WHERE res.ReadPermissionIndicator = 1
        GROUP BY ID,
                 ReadPermissionIndicator,
                 AccessToPersonalDataPermissionIndicator,
                 AccessToGenderAndAgeDataPermissionIndicator,
                 WritePermissionIndicator,
                 DeletePermissionIndicator;

		
        WITH paging
        AS (SELECT ROW_NUMBER() OVER ( ORDER BY 
		CASE WHEN @SortColumn = 'ReportID' AND @SortOrder = 'ASC' THEN hc.strCaseID END ASC,
        CASE
                         WHEN @SortColumn = 'ReportID'
                              AND @SortOrder = 'DESC' THEN
                             hc.strCaseID
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'EnteredDate'
                              AND @SortOrder = 'ASC' THEN
                             hc.datEnteredDate
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'EnteredDate'
                              AND @SortOrder = 'DESC' THEN
                             hc.datEnteredDate
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'DiseaseName'
                              AND @SortOrder = 'ASC' THEN
                             disease.name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'DiseaseName'
                              AND @SortOrder = 'DESC' THEN
                             disease.name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'PersonName'
                              AND @SortOrder = 'ASC' THEN
                             ISNULL(h.strLastName, N'') + ISNULL(', ' + h.strFirstName, N'')
                             + ISNULL(' ' + h.strSecondName, N'')
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'PersonName'
                              AND @SortOrder = 'DESC' THEN
                             ISNULL(h.strLastName, N'') + ISNULL(', ' + h.strFirstName, N'')
                             + ISNULL(' ' + h.strSecondName, N'')
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'PersonLocation'
                              AND @SortOrder = 'ASC' THEN
                     (LH.AdminLevel1Name + ', ' + LH.AdminLevel2Name)
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'PersonLocation'
                              AND @SortOrder = 'DESC' THEN
                     (LH.AdminLevel1Name + ', ' + LH.AdminLevel2Name)
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'ClassificationTypeName'
                              AND @SortOrder = 'ASC' THEN
                             finalClassification.name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'ClassificationTypeName'
                              AND @SortOrder = 'DESC' THEN
                             finalClassification.name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'ReportStatusTypeName'
                              AND @SortOrder = 'ASC' THEN
                             reportStatus.name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'ReportStatusTypeName'
                              AND @SortOrder = 'DESC' THEN
                             reportStatus.name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'LegacyReportID'
                              AND @SortOrder = 'ASC' THEN
                             hc.LegacyCaseID
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'LegacyReportID'
                              AND @SortOrder = 'DESC' THEN
                             hc.LegacyCaseID
					END DESC
		) AS ROWNUM,
        res.ID AS ReportKey,
               hc.strCaseId AS ReportID,
               hc.LegacyCaseID AS LegacyReportID,
               reportStatus.name AS ReportStatusTypeName,
               reportType.name AS ReportTypeName,
               hc.datTentativeDiagnosisDate AS TentativeDiagnosisDate,
               hc.datFinalDiagnosisDate AS FinalDiagnosisDate,
               ISNULL(finalClassification.name, initialClassification.name) AS ClassificationTypeName,
               finalClassification.name AS FinalClassificationTypeName,
               hc.datOnSetDate AS DateOfOnset,
               hc.idfsFinalDiagnosis AS DiseaseID,
               disease.Name AS DiseaseName,
               h.idfHumanActual AS PersonMasterID,
               hc.idfHuman AS PersonKey,
               haai.EIDSSPersonID AS PersonID,
               h.strPersonID AS PersonalID,
               dbo.FN_GBL_ConcatFullName(h.strLastName, h.strFirstName, h.strSecondName) AS PersonName,
               ISNULL(LH.AdminLevel1Name, '') + IIF(LH.AdminLevel2Name IS NULL, '', ', ')
               + ISNULL(LH.AdminLevel2Name, '') AS PersonLocation,
               ha.strEmployerName AS EmployerName,
               hc.datEnteredDate AS EnteredDate,
               ISNULL(p.strFamilyName, N'') + ISNULL(', ' + p.strFirstName, N'') + ISNULL(' ' + p.strSecondName, N'') AS EnteredByPersonName,
               hc.datModificationDate AS ModificationDate,
               ISNULL(hospitalization.name, hospitalization.strDefault) AS HospitalizationStatus,
               hc.idfsSite AS SiteID,
               res.ReadPermissionIndicator AS ReadPermissionIndicator,
               res.AccessToPersonalDataPermissionIndicator AS AccessToPersonalDataPermissionIndicator,
               res.AccessToGenderAndAgeDataPermissionIndicator AS AccessToGenderAndAgeDataPermissionIndicator,
               res.WritePermissionIndicator AS WritePermissionIndicator,
               res.DeletePermissionIndicator AS DeletePermissionIndicator,
               COUNT (*) OVER() AS RecordCount,
               (
					SELECT COUNT(*) FROM dbo.tlbHumanCase hc WHERE hc.intRowStatus = 0
               ) AS TotalCount,
               LH.AdminLevel2Name AS Region,
			   LH.AdminLevel3Name AS Rayon
        FROM @FinalResults res
            INNER JOIN dbo.tlbHumanCase hc
                ON hc.idfHumanCase = res.ID
            INNER JOIN dbo.tlbHuman h
                ON h.idfHuman = hc.idfHuman
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbHumanActual ha
                ON ha.idfHumanActual = h.idfHumanActual
                   AND ha.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation gl
                ON gl.idfGeoLocation = h.idfCurrentResidenceAddress
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = gl.idfsLocation
            LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
                ON LH.idfsLocation = gl.idfsLocation
            LEFT JOIN dbo.HumanActualAddlInfo haai
                ON haai.HumanActualAddlInfoUID = ha.idfHumanActual
                   AND haai.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                ON disease.idfsReference = hc.idfsFinalDiagnosis
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) initialClassification
                ON initialClassification.idfsReference = hc.idfsInitialCaseStatus
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) finalClassification
                ON finalClassification.idfsReference = hc.idfsFinalCaseStatus
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000111) reportStatus
                ON reportStatus.idfsReference = hc.idfsCaseProgressStatus
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000144) reportType
                ON reportType.idfsReference = hc.DiseaseReportTypeID
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000041) hospitalization
                ON hospitalization.idfsReference = idfsHospitalizationStatus
            LEFT JOIN dbo.tlbPerson p
                ON p.idfPerson = hc.idfPersonEnteredBy
                   AND p.intRowStatus = 0          
		)
        SELECT ReportKey,
               ReportID,
               LegacyReportID,
               ReportStatusTypeName,
               ReportTypeName,
               TentativeDiagnosisDate,
               FinalDiagnosisDate,
               ClassificationTypeName,
               FinalClassificationTypeName,
               DateOfOnset,
               DiseaseID,
               DiseaseName,
               PersonMasterID,
               PersonKey,
               PersonID,
               PersonalID,
               PersonName,
               PersonLocation,
               EmployerName,
               EnteredDate,
               EnteredByPersonName,
               ModificationDate,
               HospitalizationStatus,
               SiteID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
               RecordCount,
               TotalCount,
               TotalPages = (RecordCount / @PageSize) + IIF(RecordCount % @PageSize > 0, 1, 0),
               CurrentPage = @Page,
               Region,
			   Rayon
        FROM paging
        WHERE RowNum > @firstRec AND RowNum < @lastRec; 
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_HUMAN_MASTER_GETList]...';


GO
-- ================================================================================================
-- Name: USP_HUM_HUMAN_MASTER_GETList
--
-- Description: Get human actual list for human, laboratory and veterinary modules.
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mandar Kulkarni             Initial release.
-- Stephen Long     03/13/2018 Added additional address fields.
-- Stephen Long     08/23/2018 Added EIDSS person ID to list.
-- Stephen Long     09/26/2018 Added wildcard to the front of fields using the wildcard symbol, as 
--                             per use case.
-- Stephen Long		09/28/2018 Added order by and total records, as per use case.
-- Stephen Long     11/26/2018 Updated for the new API; removed returnCode and returnMsg. Total 
--                             records will need to be handled differently.
-- Stephen Long     12/14/2018 Added pagination set, page size and max pages per fetch parameters
--                             and fetch portion.
-- Stephen Long     12/30/2018 Renamed to master so the human get list stored procedure can query 
--                             the human table which is needed for the lab module instead of human 
--                             actual.
-- Stephen Long     01/18/2019 Changed date of birth to date of birth range, and duplicate check.
-- Stephen Long     04/08/2019 Changed full name from first name last name second name to last 
--                             name ', ' first name and then second name.
-- Stephen Long     07/07/2019 Added settlement ID and settlement name to select.
-- Ann Xiong	    10/29/2019 added PassportNumber to return
-- Ann Xiong		01/15/2020 Used humanAddress.strAddressString instead of 
--                             humanAddress.strForeignAddress for AddressString
-- Stephen Long     01/28/2021 Added order by clause to handle user selected sorting across 
--                             pagination sets.
-- Doug Albanese	06/11/2021 Refactored to conform to the new filtering requirements and return structure for our gridview.
-- Mark Wilson		10/05/2021 updated for changes to DOB rules, location udpates, etc...
-- Mark Wilson		10/26/2021 changed to nolock...
-- Ann Xiong		12/03/2021 Changed ha.datDateofBirth AS DateOfBirth to CONVERT(char(10), ha.datDateofBirth,126) AS DateOfBirth
-- Mike Kornegay	12/10/2021 Changed procedure to use denormailized location table function.
-- Mike Kornegay	01/12/2022 Swapped where condition referring to gisLocation for new flat location hierarchy and corrected ISNULL
--							   check on PersonalTypeID and fixed where statements on left joins.
-- Mike Kornegay	04/27/2022 Added AddressID and ContactPhoneNbrTypeID to revert fields after accidental alter.
-- Mike Kornegay	05/06/2022 Changed inner join to left join on FN_GBL_LocationHierarchy_Flattened so results return if location is not
--								in FN_GBL_LocationHierarchy_Flattened.
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Stephen Long     10/10/2022 Added monitoring session ID parameter and where criteria.
--
/*Test Code

EXEC dbo.USP_HUM_HUMAN_MASTER_GETList
	@LangID = 'en-US',
	@FirstOrGivenName = 'a',
--	@idfsLocation = 1344330000000 -- region = Baku
	@idfsLocation = 4720500000000  -- Rayon = Pirallahi (Baku)

EXEC dbo.USP_HUM_HUMAN_MASTER_GETList
	@LangID = 'en-US',
	@FirstOrGivenName = 'a',
    @DateOfBirthFrom = '2010-12-30 00:00:00.000',
    @DateOfBirthTo = '2012-12-30 00:00:00.000',
	--@idfsLocation = 1344330000000, -- region = Baku
	@idfsLocation = 1344380000000, -- Rayon = Khatai (Baku)
	@pageSize = 50000 
---------

DECLARE @return_value int

EXEC    @return_value = [dbo].[USP_HUM_HUMAN_MASTER_GETList]
        @LangID = N'en-US',
        @EIDSSPersonID = NULL,
        @PersonalIDType = NULL,
        @PersonalID = NULL,
        @FirstOrGivenName = 'a',
        @SecondName = NULL,
        @LastOrSurname = NULL,
        @DateOfBirthFrom = '1976-02-04 00:00:00.000',
        @DateOfBirthTo = '1980-02-04 00:00:00.000',
        @GenderTypeID = NULL,
		@idfsLocation = 1344330000000, -- region = Baku
        @pageNo = 1,
        @pageSize = 10,
        @sortColumn = N'EIDSSPersonID',
        @sortOrder = N'asc'

SELECT  @return_value
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_HUMAN_MASTER_GETList]
(
    @LangID NVARCHAR(50),
    @EIDSSPersonID NVARCHAR(200) = NULL,
    @PersonalIDType BIGINT = NULL,
    @PersonalID NVARCHAR(100) = NULL,
    @FirstOrGivenName NVARCHAR(200) = NULL,
    @SecondName NVARCHAR(200) = NULL,
    @LastOrSurname NVARCHAR(200) = NULL,
    @DateOfBirthFrom DATETIME = NULL,
    @DateOfBirthTo DATETIME = NULL,
    @GenderTypeID BIGINT = NULL,
    @idfsLocation BIGINT = NULL,
    @MonitoringSessionID BIGINT = NULL,
    @pageNo INT = 1,
    @pageSize INT = 10,
    @sortColumn NVARCHAR(30) = 'EIDSSPersonID',
    @sortOrder NVARCHAR(4) = 'DESC'
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @firstRec INT
        DECLARE @lastRec INT

        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        DECLARE @DOB DATETIME = NULL

        IF (@DateOfBirthTo IS NOT NULL AND @DateOfBirthTo = @DateOfBirthFrom)
            SET @DOB = @DateOfBirthFrom

        SET @firstRec = (@pageNo - 1) * @pagesize
        SET @lastRec = (@pageNo * @pageSize + 1);

        WITH CTEResults
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @sortColumn = 'EIDSSPersonID'
                                                        AND @SortOrder = 'asc' THEN
                                                       hai.EIDSSPersonID
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'EIDSSPersonID'
                                                        AND @SortOrder = 'desc' THEN
                                                       hai.EIDSSPersonID
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'LastOrSurname'
                                                        AND @SortOrder = 'asc' THEN
                                                       ha.strLastName
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'LastOrSurname'
                                                        AND @SortOrder = 'desc' THEN
                                                       ha.strLastName
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'FirstOrGivenName'
                                                        AND @SortOrder = 'asc' THEN
                                                       ha.strFirstName
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'FirstOrGivenName'
                                                        AND @SortOrder = 'desc' THEN
                                                       ha.strFirstName
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'PersonalID'
                                                        AND @SortOrder = 'asc' THEN
                                                       ha.strPersonID
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'PersonalID'
                                                        AND @SortOrder = 'desc' THEN
                                                       ha.strPersonID
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'PersonIDTypeName'
                                                        AND @SortOrder = 'asc' THEN
                                                       idType.name
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'PersonIDTypeName'
                                                        AND @SortOrder = 'desc' THEN
                                                       idType.name
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'PassportNumber'
                                                        AND @SortOrder = 'asc' THEN
                                                       hai.PassportNbr
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'PassportNumber'
                                                        AND @SortOrder = 'desc' THEN
                                                       hai.PassportNbr
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'GenderTypeName'
                                                        AND @SortOrder = 'asc' THEN
                                                       genderType.name
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'GenderTypeName'
                                                        AND @SortOrder = 'desc' THEN
                                                       genderType.name
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'RayonName'
                                                        AND @SortOrder = 'asc' THEN
                                                       LH.AdminLevel3Name
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'RayonName'
                                                        AND @SortOrder = 'desc' THEN
                                                       LH.AdminLevel3Name
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'DateOfBirth'
                                                        AND @SortOrder = 'asc' THEN
                                                       ha.datDateofBirth
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'DateOfBirth'
                                                        AND @SortOrder = 'desc' THEN
                                                       ha.datDateofBirth
                                               END DESC
                                     ) AS ROWNUM,
                   COUNT(*) OVER () AS TotalRowCount,
                   ha.idfHumanActual AS HumanMasterID,
                   hai.EIDSSPersonID AS EIDSSPersonID,
                   ha.idfCurrentResidenceAddress AS AddressID,
                   ha.strFirstName AS FirstOrGivenName,
                   ha.strSecondName AS SecondName,
                   ha.strLastName AS LastOrSurname,
                   dbo.FN_GBL_ConcatFullName(ha.strLastName, ha.strFirstName, ha.strSecondName) AS FullName,
                   CONVERT(CHAR(10), ha.datDateofBirth, 126) AS DateOfBirth,
                   ha.strPersonID AS PersonalID,
                   ISNULL(idType.[name], idType.strDefault) AS PersonIDTypeName,
                   humanAddress.strStreetName AS StreetName,
                   dbo.FN_GBL_CreateAddressString(
                                                     LH.AdminLevel1Name,
                                                     LH.AdminLevel2Name,
                                                     LH.AdminLevel3Name,
                                                     humanAddress.strPostCode,
                                                     '',
                                                     LH.AdminLevel4Name,
                                                     humanAddress.strStreetName,
                                                     humanAddress.strHouse,
                                                     humanAddress.strBuilding,
                                                     humanAddress.strApartment,
                                                     humanAddress.blnForeignAddress,
                                                     ''
                                                 ) AS AddressString,
                   (CONVERT(NVARCHAR(100), humanAddress.dblLatitude) + ', '
                    + CONVERT(NVARCHAR(100), humanAddress.dblLongitude)
                   ) AS LongitudeLatitude,
                   hai.ContactPhoneCountryCode AS ContactPhoneCountryCode,
                   hai.ContactPhoneNbr AS ContactPhoneNumber,
                   hai.ContactPhoneNbrTypeID AS ContactPhoneNbrTypeID,
                   hai.ReportedAge AS Age,
                   hai.PassportNbr AS PassportNumber,
                   ha.idfsNationality AS CitizenshipTypeID,
                   citizenshipType.[name] AS CitizenshipTypeName,
                   ha.idfsHumanGender AS GenderTypeID,
                   genderType.[name] AS GenderTypeName,
                   humanAddress.idfsCountry AS CountryID,
                   LH.AdminLevel1Name AS CountryName,
                   LH.AdminLevel2ID AS RegionID,
                   LH.AdminLevel2Name AS RegionName,
                   LH.AdminLevel3ID AS RayonID,
                   LH.AdminLevel3Name AS RayonName,
                   humanAddress.idfsSettlement AS SettlementID,
                   LH.AdminLevel4Name AS SettlementName,
                   dbo.FN_GBL_CreateAddressString(
                                                     LH.AdminLevel1Name,
                                                     LH.AdminLevel2Name,
                                                     LH.AdminLevel3Name,
                                                     '',
                                                     '',
                                                     '',
                                                     '',
                                                     '',
                                                     '',
                                                     '',
                                                     humanAddress.blnForeignAddress,
                                                     humanAddress.strForeignAddress
                                                 ) AS FormattedAddressString
            FROM dbo.tlbHumanActual AS ha WITH (NOLOCK)
                INNER JOIN dbo.HumanActualAddlInfo hai WITH (NOLOCK)
                    ON ha.idfHumanActual = hai.HumanActualAddlInfoUID
                       AND hai.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000043) AS genderType
                    ON ha.idfsHumanGender = genderType.idfsReference
                       AND genderType.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000148) AS idType
                    ON ha.idfsPersonIDType = idType.idfsReference
                       AND idType.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000054) AS citizenshipType
                    ON ha.idfsNationality = citizenshipType.idfsReference
                       AND citizenshipType.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocationShared humanAddress WITH (NOLOCK)
                    ON ha.idfCurrentResidenceAddress = humanAddress.idfGeoLocationShared
                       AND humanAddress.intRowStatus = 0
                INNER JOIN dbo.gisLocation L WITH (NOLOCK)
                    ON L.idfsLocation = humanAddress.idfsLocation
                INNER JOIN FN_GBL_LocationHierarchy_Flattened(@LangID) LH
                    ON LH.idfsLocation = L.idfsLocation
            WHERE (
                      ha.intRowStatus = 0
                      AND hai.intRowStatus = 0
                      AND (
                              (
                                  @idfsLocation IS NOT NULL
                                  AND (
                                          LH.AdminLevel1ID = @idfsLocation
                                          OR LH.AdminLevel2ID = @idfsLocation
                                          OR LH.AdminLevel3ID = @idfsLocation
                                          OR LH.AdminLevel4ID = @idfsLocation
                                          OR LH.AdminLevel5ID = @idfsLocation
                                          OR LH.AdminLevel6ID = @idfsLocation
                                          OR LH.AdminLevel7ID = @idfsLocation
                                      )
                              )
                              OR (@idfsLocation IS NULL)
                          )
                      AND (
                              @DOB = ha.datDateofBirth
                              OR @DateOfBirthFrom IS NULL
                              OR (ha.datDateofBirth
                  BETWEEN @DateOfBirthFrom AND @DateOfBirthTo
                                 )
                          )
                      AND (
                              (
                                  @EIDSSPersonID IS NOT NULL
                                  AND hai.EIDSSPersonID LIKE '%' + @EIDSSPersonID + '%'
                              )
                              OR (@EIDSSPersonID IS NULL)
                          )
                      AND (
                              (
                                  @PersonalID IS NOT NULL
                                  AND ha.strPersonID LIKE '%' + @PersonalID + '%'
                              )
                              OR (@PersonalID IS NULL)
                          )
                      AND (
                              (
                                  @FirstOrGivenName IS NOT NULL
                                  AND ha.strFirstName LIKE '%' + @FirstOrGivenName + '%'
                              )
                              OR (@FirstOrGivenName IS NULL)
                          )
                      AND (
                              (
                                  @SecondName IS NOT NULL
                                  AND ha.strSecondName LIKE '%' + @SecondName + '%'
                              )
                              OR (@SecondName IS NULL)
                          )
                      AND (
                              (
                                  @LastOrSurname IS NOT NULL
                                  AND ha.strLastName LIKE '%' + @LastOrSurname + '%'
                              )
                              OR (@LastOrSurname IS NULL)
                          )
                      AND (
                              (
                                  @PersonalIDType IS NOT NULL
                                  AND idType.idfsReference = @PersonalIDType
                              )
                              OR (@PersonalIDType IS NULL)
                          )
                      AND (
                              (
                                  @GenderTypeID IS NOT NULL
                                  AND genderType.idfsReference = @GenderTypeID
                              )
                              OR (@GenderTypeID IS NULL)
                          )
                      AND (
                              EXISTS
            (
                SELECT h.idfHuman
                FROM dbo.tlbHuman h 
				INNER JOIN dbo.tlbMaterial m ON m.idfHuman = h.idfHuman 
                WHERE h.idfHumanActual = ha.idfHumanActual
                      AND m.idfMonitoringSession = @MonitoringSessionID
            )
                              OR @MonitoringSessionID IS NULL
                          )
                  )
           )
        SELECT TotalRowCount,
               HumanMasterID,
               EIDSSPersonID,
               AddressID,
               FirstOrGivenName,
               SecondName,
               LastOrSurname,
               FullName,
               DateOfBirth,
               PersonalID,
               PersonIDTypeName,
               StreetName,
               AddressString,
               LongitudeLatitude,
               ContactPhoneCountryCode,
               ContactPhoneNumber,
               ContactPhoneNbrTypeID,
               Age,
               PassportNumber,
               CitizenshipTypeID,
               CitizenshipTypeName,
               GenderTypeID,
               GenderTypeName,
               CountryID,
               CountryName,
               RegionID,
               RegionName,
               RayonID,
               RayonName,
               SettlementID,
               SettlementName,
               FormattedAddressString,
               TotalPages = (TotalRowCount / @pageSize) + IIF(TotalRowCount % @pageSize > 0, 1, 0),
               CurrentPage = @pageNo
        FROM CTEResults
        WHERE RowNum > @firstRec
              AND RowNum < @lastRec
        OPTION (RECOMPILE);
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_TESTS_GetList]...';


GO
--*************************************************************
-- Name 				: USP_HUM_TESTS_GetList
-- Description			: List Human Disease Report TESTS by hcid
--          
-- Author               : JWJ
-- Revision History
--		Name		Date       Change Detail
-- ---------------- ---------- --------------------------------
-- JWJ				20180603		created 
-- HAP				20181105		Added strTestResult field to result set 
-- HAP              20181109		Added TestValidation fields to result set 
--LJM				20201230		Added strTestedByPerson and strTestedByOffice as output perameters
--LJM				20210105		Added strTestCategory and blnNonLaboratoryTest, idfInterpretedByPerson,idfValidatedByPerson as output perameters
-- Leo Tracchia		10/21/2022      fix for properly deleting tests for human disease report DevOps defect 5006
-- Testing code:
-- EXEC USP_HUM_TESTS_GetList 'en', @idfHumanCase=19  --10
--*************************************************************
ALTER PROCEDURE [dbo].[USP_HUM_TESTS_GetList] 
	@LangID							NVARCHAR(50) , --##PARAM @LangID - language ID
	@idfHumanCase					BIGINT = NULL,
	@SearchDiagnosis 				BIGINT = NULL
AS
Begin
	DECLARE @returnMsg				VARCHAR(MAX) = 'Success';
	DECLARE @returnCode				BIGINT = 0;
 
BEGIN TRY  
		SELECT		
					Samples.idfHumanCase
					,Samples.idfMaterial 
					,Samples.strBarcode -- Lab sample ID
					,Samples.strFieldBarcode -- Local Sample ID
					,Samples.idfsSampleType
					,SampleType.name AS strSampleTypeName

					,Samples.datFieldCollectionDate
					,Samples.idfSendToOffice
					,OfficeSendTo.[name] as strSendToOffice
					,Samples.idfFieldCollectedByOffice
					,CollectedByOffice.name as strFieldCollectedByOffice
					,Samples.datFieldSentDate
					----,Samples.strNote
					----,Samples.datAccession			--verify this is date received
					----,Samples.idfsAccessionCondition
					----,Samples.strCondition
					----,Location.idfsRegion as idfsRegion
					----,ISNULL(Region.[name], Region.strDefault) AS [strRegionName]
					----,Location.idfsRayon as idfsRayon
					----,ISNULL(Rayon.[name], Rayon.strDefault) AS [strRayonName]
					----,Samples.blnAccessioned
					----,'' as RecordAction
					,Samples.idfsSampleKind
					,sampleKind.name AS SampleKindTypeName
					--find stridfsSampleKind
					--find strTestDiagnosis and it's id
					,Samples.idfsSampleStatus
					,sampleStatus.name AS SampleStatusTypeName
					,Samples.idfFieldCollectedByPerson  
					--,find strFieldCollectedByPerson   --verify this is the employee
					,Samples.datSampleStatusDate   --verify this is the result date
					,Samples.rowGuid as sampleGuid

					, t.idfTesting
					, t.idfsTestName
					, t.idfsTestCategory
					,testCat.name as strTestCategory
					, t.idfsTestResult
					, t.idfsTestStatus
					, t.idfsDiagnosis
					, (select strDefault from trtbasereference where idfsbasereference = t.idfsDiagnosis) as 'strDiagnosis'
					, tstatus.name as strTestStatus
					, tresult.name as strTestResult

					, TestName.name
					, t.datReceivedDate
					, t.datConcludedDate
					, t.idfTestedByPerson
					, t.idfTestedByOffice
					, isnull(tv.datInterpretationDate, getDate()) as datInterpretedDate
					, tv.idfsInterpretedStatus
					,testinterpretedstatus.name as strInterpretedStatus
					, tv.strInterpretedComment
					, p.strFamilyName as strInterpretedBy
					, isnull(tv.datValidationDate, getDate()) as datValidationDate
					, isnull(tv.blnValidateStatus,0) as blnValidateStatus
					, tv.strValidateComment
					, p.strFamilyName as strValidatedBy
					, u.strAccountName
					, t.rowGuid as testGuid
					, t.intRowStatus,
					testedbyPerson.strFirstName + ' ' + isnull(testedbyPerson.strSecondName,'') + '  ' + testedbyPerson.strFamilyName as strTestedByPerson,
					testedByOffice.FullName as strTestedByOffice,
					isnull(t.blnNonLaboratoryTest,0) as blnNonLaboratoryTest	,
					tv.idfInterpretedByPerson,
					tv.idfValidatedByPerson,
					tv.idfTestValidation
		FROM		dbo.tlbMaterial Samples 
		INNER JOIN	dbo.tlbHumanCase as hc ON Samples.idfHumanCase  = hc.idfHumanCase 		 
		LEFT JOIN	dbo.tlbGeoLocation as Location	ON Location.idfGeoLocation = hc.idfPointGeoLocation
		LEFT JOIN	dbo.FN_GBL_REFERENCEREPAIR(@LangID,19000087) SampleType ON	SampleType.idfsReference = Samples.idfsSampleType
		LEFT JOIN	FN_GBL_GIS_Reference(@LangID,19000003) Region ON Region.idfsReference = Location.idfsRegion
		LEFT JOIN	FN_GBL_GIS_Reference(@LangID,19000002) Rayon ON	Rayon.idfsReference = Location.idfsRayon
		LEFT JOIN	tlbMaterial ParentSample ON	ParentSample.idfMaterial = Samples.idfParentMaterial AND ParentSample.intRowStatus = 0
		LEFT JOIN	dbo.FN_GBL_INSTITUTION(@LangID) AS CollectedByOffice ON CollectedByOffice.idfOffice = Samples.idfFieldCollectedByOffice
		LEFT JOIN	dbo.FN_GBL_INSTITUTION(@LangID) AS OfficeSendTo ON OfficeSendTo.idfOffice = Samples.idfSendToOffice
		LEFT JOIN	FN_GBL_ReferenceRepair(@LangID, 19000158) AS sampleKind	ON sampleKind.idfsReference = Samples.idfsSampleKind 
		LEFT JOIN	FN_GBL_ReferenceRepair(@LangID, 19000015) AS sampleStatus ON sampleStatus.idfsReference = Samples.idfsSampleStatus 

		LEFT JOIN	dbo.tlbTesting t ON t.idfMaterial = Samples.idfMaterial AND t.intRowStatus = 0
		LEFT JOIN	dbo.FN_GBL_REFERENCEREPAIR(@LangID,19000097) TestName ON	TestName.idfsReference = t.idfsTestName

		LEFT JOIN	FN_GBL_ReferenceRepair(@LangID, 19000001) tstatus
		ON			tstatus.idfsReference = t.idfsTestStatus
		LEFT JOIN	FN_GBL_ReferenceRepair(@LangID, 19000096) tresult		
		ON			tresult	.idfsReference = t.idfsTestResult
		LEFT JOIN   dbo.tlbTestValidation as tv on  tv.idfTesting = t.idfTesting AND tv.intRowStatus = 0
		LEFT JOIN   dbo.tstUserTable u on (tv.idfInterpretedByPerson = u.idfPerson or tv.idfValidatedByPerson = u.idfPerson) and u.intRowStatus = 0 
		LEFT JOIN   dbo.tlbPerson p on (p.idfPerson = tv.idfInterpretedByPerson or p.idfPerson = tv.idfValidatedByPerson) and p.intRowStatus = 0
		LEFT JOIN   dbo.tlbPerson testedbyPerson on (testedbyPerson.idfPerson = t.idfTestedByPerson ) 
		LEFT JOIN	dbo.FN_GBL_INSTITUTION(@LangID) AS testedByOffice ON testedByOffice.idfOffice = t.idfTestedByOffice
		LEFT JOIN	FN_GBL_ReferenceRepair(@LangID, 19000095) testCat on testCat.idfsReference = t.idfsTestCategory
		LEFT JOIN	FN_GBL_ReferenceRepair(@LangID, 19000106) testinterpretedstatus on testinterpretedstatus.idfsReference = tv.idfsInterpretedStatus
		
		
		
		WHERE		
		--Samples.blnShowInCaseOrSession = 1 
		--AND 
		Samples.idfHumanCase = @idfHumanCase
		AND	Samples.intRowStatus = 0
		and t.idfHumanCase is not null
		AND t.intRowStatus = 0
		--AND NOT	(ISNULL(Samples.idfsSampleKind,0) = 12675420000000/*derivative*/ 
		--AND (ISNULL(Samples.idfsSampleStatus,0) = 10015002 or ISNULL(Samples.idfsSampleStatus,0) = 10015008)/*deleted in lab module*/)
		--optional param, filter samples by diagnosis: @SearchDiagnosis
		--AND	((idfsFinalDiagnosis = @SearchDiagnosis) OR (@SearchDiagnosis is null))




		--SELECT	@returnCode, @returnMsg;



	END TRY  

	BEGIN CATCH 
		--BEGIN
		--	SET @returnCode = ERROR_NUMBER();
		--	SET @returnMsg = 
		--		'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) 
		--		+ ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY())
		--		+ ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE())
		--		+ ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '')
		--		+ ' ErrorLine: ' +  CONVERT(VARCHAR, ISNULL(ERROR_LINE(), ''))
		--		+ ' ErrorMessage: '+ ERROR_MESSAGE();

		--	SELECT @returnCode, @returnMsg;
		--END
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_BATCH_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_BATCH_ADVANCED_SEARCH_GETList
--
-- Description:	Get laboratory batch list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     03/25/2019 Initial release.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/25/2020 Added batch test list parameter and where clause criteria.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/30/2020 Remove unneeded joins.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Mark Wilson		08/16/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     02/10/2022 Removed unneeded joins.
-- Stephen Long     03/25/2022 Removed primary key from final results table variable.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Changed from repair to reference repair function.
-- Stephen Long     08/12/2022 Removed where criteria for surveillance type of both; de-activated 
--                             base reference record.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     10/24/2022 Moved where clause check on tests count to insert of final results.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_BATCH_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @BatchTestList VARCHAR(MAX),
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL,
    @Page INT = 1,
    @PageSize INT = 10,
    @SortColumn VARCHAR(200) = 'EIDSSLaboratorySampleID',
    @SortOrder VARCHAR(4) = 'DESC'
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        BatchStatusTypeID BIGINT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID INT NOT NULL,
        BatchStatusTypeID BIGINT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL, 
        TestsCount INT NOT NULL
    );
    DECLARE @Favorites XML,
            @FirstRecord INT = (@Page - 1) * @PageSize,
            @LastRecord INT = (@Page * @PageSize + 1),
            @InProgressCount INT = 0;

    BEGIN TRY
        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      m.idfSendToOffice = @UserOrganizationID
                      OR @UserOrganizationID IS NULL
                  )
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  );

        -- =======================================================================================
        -- CONFIGURABLE SITE FILTRATION RULES
        -- 
        -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the default rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND sgs.idfsSite = b.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = b.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = b.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE b.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = b.idfsSite;

        INSERT INTO @FinalResults
        SELECT b.idfBatchTest,
               res.BatchStatusTypeID,
               res.ReadPermissionIndicator,
               res.AccessToPersonalDataPermissionIndicator,
               res.AccessToGenderAndAgeDataPermissionIndicator,
               res.WritePermissionIndicator,
               res.DeletePermissionIndicator, 
               (
                       SELECT COUNT(idfTesting)
                       FROM dbo.tlbTesting
                       WHERE idfBatchTest = res.ID
                             AND intRowStatus = 0
                   ) AS TestsCount
        FROM @Results res
            INNER JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = res.ID
            INNER JOIN dbo.tlbTesting t
                ON t.idfBatchTest = b.idfBatchTest
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator = 1
              AND (
                      (b.idfBatchTest IN (
                                             SELECT CAST([Value] AS BIGINT)
                                             FROM dbo.FN_GBL_SYS_SplitList(@BatchTestList, NULL, ',')
                                         )
                      )
                      OR @BatchTestList IS NULL
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN (10502002, 10502009) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.blnAccessioned = @AccessionedIndicatorList
                              AND m.idfsAccessionCondition IS NULL
                          )
                          OR (
                                 @AccessionedIndicatorList IS NULL
                                 AND @SampleStatusTypeList IS NULL
                             )
                      )
                      OR (
                             (
                                 (m.idfsSampleStatus IN (
                                                            SELECT CAST([Value] AS BIGINT)
                                                            FROM dbo.FN_GBL_SYS_SplitList(
                                                                                             @SampleStatusTypeList,
                                                                                             NULL,
                                                                                             ','
                                                                                         )
                                                        )
                                 )
                                 OR (
                                        m.idfsAccessionCondition IN (
                                                                        SELECT CAST([Value] AS BIGINT)
                                                                        FROM dbo.FN_GBL_SYS_SplitList(
                                                                                                         @SampleStatusTypeList,
                                                                                                         NULL,
                                                                                                         ','
                                                                                                     )
                                                                    )
                                        AND (
                                                m.idfsSampleStatus IS NULL
                                                OR m.idfsSampleStatus = 10015007 --In Repository
                                            )
                                    )
                             )
                             OR (
                                    @SampleStatusTypeList IS NULL
                                    AND @AccessionedIndicatorList IS NULL
                                )
                         )
                  )
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
			  AND (
				      t.idfsDiagnosis = @DiseaseID
				      OR @DiseaseID IS NULL
				  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR (@EIDSSReportCampaignOrSessionID IS NULL)
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  );

        DELETE FROM @FinalResults 
        WHERE TestsCount = 0;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SET @InProgressCount =
        (
            SELECT IIF(
                       SUM(   CASE
                                  WHEN BatchStatusTypeID = 10001003 --In Progress
                              THEN
                                      1
                                  ELSE
                                      0
                              END
                          ) IS NULL,
                       0,
                       SUM(   CASE
                                  WHEN BatchStatusTypeID = 10001003 --In Progress
                              THEN
                                      1
                                  ELSE
                                      0
                              END
                          ))
            FROM @FinalResults res
                INNER JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = res.ID
        );

        SELECT BatchTestID,
               FavoriteIndicator,
               EIDSSBatchTestID,
               BatchStatusTypeID,
               BatchStatusTypeName,
               BatchTestPerformedByOrganizationID,
               BatchTestPerformedByPersonID,
               BatchTestTestNameTypeID,
               BatchTestTestNameTypeName,
               TestID,
               TestNameTypeID,
               TestCategoryTypeID,
               TestResultTypeID,
               TestStatusTypeID,
               DiseaseID,
               DiseaseName,
               SampleID,
               SentToOrganizationID,
               TestNumber,
               Note,
               StartedDate,
               ResultDate,
               TestedByOrganizationID,
               TestedByPersonID,
               ResultEnteredByOrganizationID,
               ResultEnteredByPersonID,
               ValidatedByOrganizationID,
               ValidatedByPersonID,
               ReadOnlyIndicator,
               NonLaboratoryTestIndicator,
               ExternalTestIndicator,
               PerformedByOrganizationID,
               ReceivedDate,
               ContactPersonName,
               EIDSSReportOrSessionID,
               PatientOrFarmOwnerName,
               SampleTypeName,
               EIDSSLaboratorySampleID,
               TestNameTypeName,
               TestStatusTypeName,
               TestResultTypeName,
               TestCategoryTypeName,
               AccessionDate,
               FunctionalAreaName,
               SampleStatusTypeID,
               AccessionConditionOrSampleStatusTypeName,
               AccessionComment,
               EIDSSAnimalID,
               TestRequested,
               ObservationID,
               PerformedByPersonID,
               PerformedDate,
               ValidationDate,
               SiteID,
               RowStatus,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
               RowAction,
               RowSelectionIndicator,
               CurrentPage,
               TotalRowCount,
               InProgressCount,
               TestsCount
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedCaseID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedHumanName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedHumanName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       sampleType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       sampleType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       disease.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       disease.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testNameType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testNameType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testStatusType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testStatusType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStartedDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       t.datStartedDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStartedDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       t.datStartedDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testResultType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testResultType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       t.datConcludedDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       t.datConcludedDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestCategoryTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testCategoryType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestCategoryTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testCategoryType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.datAccession
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.datAccession
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'FunctionalAreaName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       functionalArea.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'FunctionalAreaName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       functionalArea.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSAnimalID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       a.strAnimalCode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSAnimalID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       a.strAnimalCode
                                               END DESC
                                     ) AS RowNum,
                   b.idfBatchTest AS BatchTestID,
                   CASE
                       WHEN f.SampleID IS NULL THEN
                           0
                       ELSE
                           1
                   END AS FavoriteIndicator,
                   b.strBarcode AS EIDSSBatchTestID,
                   b.idfsBatchStatus AS BatchStatusTypeID,
                   batchStatusType.name AS BatchStatusTypeName,
                   b.idfPerformedByOffice AS BatchTestPerformedByOrganizationID,
                   b.idfPerformedByPerson AS BatchTestPerformedByPersonID,
                   b.idfsTestName AS BatchTestTestNameTypeID,
                   batchTestTestNameType.name AS BatchTestTestNameTypeName,
                   t.idfTesting AS TestID,
                   t.idfsTestName AS TestNameTypeID,
                   t.idfsTestCategory AS TestCategoryTypeID,
                   t.idfsTestResult AS TestResultTypeID,
                   t.idfsTestStatus AS TestStatusTypeID,
                   t.idfsDiagnosis AS DiseaseID,
                   disease.name AS DiseaseName,
                   m.idfMaterial AS SampleID,
                   m.idfSendToOffice AS SentToOrganizationID,
                   t.intTestNumber AS TestNumber,
                   t.strNote AS Note,
                   t.datStartedDate AS StartedDate,
                   t.datConcludedDate AS ResultDate,
                   t.idfTestedByOffice AS TestedByOrganizationID,
                   t.idfTestedByPerson AS TestedByPersonID,
                   t.idfResultEnteredByOffice AS ResultEnteredByOrganizationID,
                   t.idfResultEnteredByPerson AS ResultEnteredByPersonID,
                   t.idfValidatedByOffice AS ValidatedByOrganizationID,
                   t.idfValidatedByPerson AS ValidatedByPersonID,
                   t.blnReadOnly AS ReadOnlyIndicator,
                   t.blnNonLaboratoryTest AS NonLaboratoryTestIndicator,
                   t.blnExternalTest AS ExternalTestIndicator,
                   t.idfPerformedByOffice AS PerformedByOrganizationID,
                   t.datReceivedDate AS ReceivedDate,
                   t.strContactPerson AS ContactPersonName,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                           '**********'
                       ELSE
                           m.strCalculatedHumanName
                   END AS PatientOrFarmOwnerName,
                   sampleType.name AS SampleTypeName,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   testNameType.name AS TestNameTypeName,
                   testStatusType.name AS TestStatusTypeName,
                   testResultType.name AS TestResultTypeName,
                   testCategoryType.name AS TestCategoryTypeName,
                   m.datAccession AS AccessionDate,
                   functionalArea.name AS FunctionalAreaName,
                   m.idfsAccessionCondition AS SampleStatusTypeID,
                   (CASE
                        WHEN m.blnAccessioned = 0
                             AND m.idfsAccessionCondition IS NULL THEN
                            'Un-accessioned'
                        WHEN m.idfsSampleStatus IS NULL THEN
                            accessionConditionType.name
                        WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                            accessionConditionType.name
                        ELSE
                            sampleStatusType.name
                    END
                   ) AS AccessionConditionOrSampleStatusTypeName,
                   m.strCondition AS AccessionComment,
                   a.strAnimalCode AS EIDSSAnimalID,
                   b.TestRequested,
                   b.idfObservation AS ObservationID,
                   b.idfPerformedByPerson AS PerformedByPersonID,
                   b.datPerformedDate AS PerformedDate,
                   b.datValidatedDate AS ValidationDate,
                   b.idfsSite AS SiteID,
                   t.intRowStatus AS RowStatus,
                   res.ReadPermissionIndicator,
                   res.AccessToPersonalDataPermissionIndicator,
                   res.AccessToGenderAndAgeDataPermissionIndicator,
                   res.WritePermissionIndicator,
                   res.DeletePermissionIndicator,
                   0 AS RowAction,
                   0 AS RowSelectionIndicator,
                   @Page AS CurrentPage,
                   COUNT(*) OVER () AS TotalRowCount,
                   @InProgressCount AS InProgressCount,
                   res.TestsCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = res.ID
                INNER JOIN dbo.tlbTesting t
                    ON t.idfBatchTest = b.idfBatchTest
                       AND t.intRowStatus = 0
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) disease
                    ON disease.idfsReference = t.idfsDiagnosis
                INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN
                (
                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                ) f
                    ON m.idfMaterial = f.SampleID
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                    ON functionalArea.idfsReference = d.idfsDepartmentName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) batchTestTestNameType
                    ON batchTestTestNameType.idfsReference = b.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) batchStatusType
                    ON batchStatusType.idfsReference = b.idfsBatchStatus
        ) AS x
        WHERE RowNum > @FirstRecord
              AND RowNum < @LastRecord
        ORDER BY RowNum;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_BATCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_BATCH_GETList
--
-- Description:	Get laboratory batch list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     11/10/2018 Initial release.
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     01/25/2019 Changed where clause to look at batch test row status instead of 
--                             test.
-- Stephen Long     02/01/2019 Added sample disease reference join and removed the vector 
--                             surveillance session joins as they are no longer needed.
-- Stephen Long     02/19/2019 Removed positive and negative control and reagent lot numbers.
--                             Added organization ID parameter.
-- Stephen Long     03/25/2019 Added the overall batch test test name type ID and name.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     09/14/2019 Added pagination set 0 to bring back "all" records.
-- Stephen Long     01/22/2020 Added site list parameter for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Mark Wilson		08/16/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     04/21/2022 Added final results to remove duplicates from filtration.
-- Stephen Long     07/26/2022 Changed from repair to reference repair function.
-- Stephen Long     08/08/2022 Added where criteria to only return batches with tests.
-- Stephen Long     10/24/2022 Moved where clause check on tests count to insert of final results.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_BATCH_GETList]
		@LanguageID = N'en-US',
		@UserID = 161287150000872, --rykermase
		@UserEmployeeID = 420664190000872,
		@UserSiteID = 864,
		@UserOrganizationID = 758210000000,
		@UserSiteGroupID = NULL,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_BATCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteID BIGINT,
    @UserSiteGroupID BIGINT = NULL,
    @Page INT = 1,
    @PageSize INT = 10,
    @SortColumn VARCHAR(200) = 'EIDSSBatchID',
    @SortOrder VARCHAR(4) = 'DESC'
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        BatchStatusTypeID BIGINT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        BatchStatusTypeID BIGINT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL, 
        TestsCount INT NOT NULL
    );
    DECLARE @Favorites XML,
            @FirstRecord INT = (@Page - 1) * @PageSize,
            @LastRecord INT = (@Page * @PageSize + 1),
            @InProgressCount INT = 0;

    BEGIN TRY
        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbBatchTest b
        WHERE b.idfPerformedByOffice = @UserOrganizationID
              AND b.idfsSite = @UserSiteID
              AND b.intRowStatus = 0;

        -- =======================================================================================
        -- CONFIGURABLE SITE FILTRATION RULES
        -- 
        -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup AS grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tstUserTable AS u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor AS ara
                ON ara.ActorSiteGroupID = @UserSiteGroupID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule AS ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND @UserSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfSiteGroup = @UserSiteGroupID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND @UserSiteGroupID IS NOT NULL
              AND sgs.idfsSite = b.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.AccessRule ar
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.tlbBatchTest b
                ON b.intRowStatus = 0
        WHERE ar.GrantingActorSiteID IS NOT NULL
              AND b.idfsSite = ar.GrantingActorSiteID;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.AccessRule ar
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.tlbBatchTest b
                ON b.intRowStatus = 0
        WHERE ar.GrantingActorSiteID IS NOT NULL
              AND b.idfsSite = ar.GrantingActorSiteID;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest,
               b.idfsBatchStatus,
               ar.ReadPermissionIndicator,
               ar.AccessToPersonalDataPermissionIndicator,
               ar.AccessToGenderAndAgeDataPermissionIndicator,
               ar.WritePermissionIndicator,
               ar.DeletePermissionIndicator
        FROM dbo.AccessRule ar
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.tlbBatchTest b
                ON b.intRowStatus = 0
        WHERE ar.GrantingActorSiteID IS NOT NULL
              AND b.idfsSite = ar.GrantingActorSiteID;

        INSERT INTO @FinalResults
        SELECT ID,
               BatchStatusTypeID,
               CASE WHEN EXISTS (SELECT ReadPermissionIndicator FROM @Results WHERE ID = ID) THEN 1 ELSE 0 END, 
               CASE WHEN EXISTS (SELECT AccessToPersonalDataPermissionIndicator FROM @Results WHERE ID = ID) THEN 1 ELSE 0 END, 
               CASE WHEN EXISTS (SELECT AccessToGenderAndAgeDataPermissionIndicator FROM @Results WHERE ID = ID) THEN 1 ELSE 0 END, 
               CASE WHEN EXISTS (SELECT WritePermissionIndicator FROM @Results WHERE ID = ID) THEN 1 ELSE 0 END, 
               CASE WHEN EXISTS (SELECT DeletePermissionIndicator FROM @Results WHERE ID = ID) THEN 1 ELSE 0 END,
               (
                       SELECT COUNT(idfTesting)
                       FROM dbo.tlbTesting
                       WHERE idfBatchTest = res.ID
                             AND intRowStatus = 0
                   ) AS TestsCount
        FROM @Results res
        GROUP BY ID, 
            BatchStatusTypeID;

        DELETE FROM @FinalResults 
        WHERE TestsCount = 0;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SET @InProgressCount =
        (
            SELECT IIF(
                       SUM(   CASE
                                  WHEN BatchStatusTypeID = 10001003 --In Progress
                              THEN
                                      1
                                  ELSE
                                      0
                              END
                          ) IS NULL,
                       0,
                       SUM(   CASE
                                  WHEN BatchStatusTypeID = 10001003 --In Progress
                              THEN
                                      1
                                  ELSE
                                      0
                              END
                          ))
            FROM @FinalResults res
                INNER JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = res.ID
                       AND b.intRowStatus = 0
            WHERE b.idfPerformedByOffice = @UserOrganizationID
                  AND b.idfsSite = @UserSiteID
                  AND b.intRowStatus = 0
                  AND (SELECT COUNT(t.idfTesting) FROM dbo.tlbTesting t WHERE t.idfBatchTest = b.idfBatchTest) > 0
        );

        SELECT BatchTestID,
               EIDSSBatchTestID,
               BatchStatusTypeID,
               BatchStatusTypeName,
               PerformedByOrganizationID,
               PerformedByPersonID,
               ResultEnteredByOrganizationID,
               ResultEnteredByPersonID,
               ValidatedByOrganizationID,
               ValidatedByPersonID,
               BatchTestTestNameTypeID,
               BatchTestTestNameTypeName,
               TestRequested,
               ObservationID,
               PerformedDate,
               ValidationDate,
               SiteID,
               DiseaseID, 
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
               RowAction,
               RowSelectionIndicator,
               CurrentPage,
               TotalRowCount,
               InProgressCount,
               TestsCount
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'EIDSSBatchTestID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       b.strBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSBatchTestID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       b.strBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'BatchStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       batchStatusType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'BatchStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       batchStatusType.name
                                               END DESC
                                     ) AS RowNum,
                   b.idfBatchTest AS BatchTestID,
                   b.strBarcode AS EIDSSBatchTestID,
                   b.idfsBatchStatus AS BatchStatusTypeID,
                   batchStatusType.name AS BatchStatusTypeName,
                   b.idfPerformedByOffice AS PerformedByOrganizationID,
                   b.idfPerformedByPerson AS PerformedByPersonID,
                   b.idfResultEnteredByOffice AS ResultEnteredByOrganizationID,
                   b.idfResultEnteredByPerson AS ResultEnteredByPersonID,
                   b.idfValidatedByOffice AS ValidatedByOrganizationID,
                   b.idfValidatedByPerson AS ValidatedByPersonID,
                   b.idfsTestName AS BatchTestTestNameTypeID,
                   batchTestTestNameType.name AS BatchTestTestNameTypeName,
                   b.TestRequested,
                   b.idfObservation AS ObservationID,
                   b.datPerformedDate AS PerformedDate,
                   b.datValidatedDate AS ValidationDate,
                   b.idfsSite AS SiteID,
                   (
                       SELECT TOP 1 idfsDiagnosis 
                       FROM dbo.tlbTesting
                       WHERE idfBatchTest = b.idfBatchTest
                             AND intRowStatus = 0) AS DiseaseID, 
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator,
                   0 AS RowAction,
                   0 AS RowSelectionIndicator,
                   @Page AS CurrentPage,
                   COUNT(*) OVER () AS TotalRowCount,
                   @InProgressCount AS InProgressCount,
                   res.TestsCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = res.ID
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) batchTestTestNameType
                    ON batchTestTestNameType.idfsReference = b.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) batchStatusType
                    ON batchStatusType.idfsReference = b.idfsBatchStatus
        ) AS x
        WHERE RowNum > @FirstRecord
              AND RowNum < @LastRecord
        ORDER BY RowNum;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_SAMPLE_GROUP_ACCESSION_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_SAMPLE_GROUP_ACCESSION_GETList
--
-- Description:	Get sample group accession list for the laboratory module use case LUC01.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     12/15/2021 Initial relase.
-- Stephen Long     03/10/2022 Changed note to comment and transfer count to transferred count.
-- Stephen Long     05/24/2022 Removed read permission check and added group by on final results.
-- Stephen Long     07/28/2022 Added show in accession in form where criteria and removed unneeded
--                             joins.
-- Stephen Long     08/18/2022 Added/removed criteria to get only unaccessioned samples.
-- Stephen Long     09/29/2022 Bug fix on item 4778 and 4997.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_SAMPLE_GROUP_ACCESSION_GETList]
(
    @LanguageID NVARCHAR(50),
    @EIDSSLocalOrFieldSampleIDList NVARCHAR(MAX) = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL,
    @Page INT = 1,
    @PageSize INT = 10,
    @SortColumn VARCHAR(200) = 'EIDSSReportOrSessionID',
    @SortOrder VARCHAR(4) = 'DESC'
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        AccessionedIndicator BIT NOT NULL,
        AccessionConditionTypeID BIGINT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        AccessionedIndicator BIT NOT NULL,
        AccessionConditionTypeID BIGINT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @RecordCount AS INT = 0,
            @UnaccessionedCount AS INT = 0
    DECLARE @Favorites XML,
            @FirstRecord INT = (@Page - 1) * @PageSize,
            @LastRecord INT = (@Page * @PageSize + 1),
            @LanguageCode BIGINT;
    DECLARE @SampleListTable TABLE (ID NVARCHAR(200) NOT NULL);


    BEGIN TRY
        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        IF @EIDSSLocalOrFieldSampleIDList IS NOT NULL
            INSERT INTO @SampleListTable
            SELECT CAST([Value] AS NVARCHAR(200))
            FROM dbo.FN_GBL_SYS_SplitList(@EIDSSLocalOrFieldSampleIDList, NULL, ',');

        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND m.strFieldBarcode IN (
                                           SELECT ID FROM @SampleListTable
                                       )
              AND (
                      m.idfSendToOffice = @UserOrganizationID
                      OR @UserOrganizationID IS NULL
                  )
              AND m.idfsSampleType <> 10320001; --Unknown

        -- =======================================================================================
        -- CONFIGURABLE SITE FILTRATION RULES
        -- 
        -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the default rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.strFieldBarcode IN (
                                           SELECT ID FROM @SampleListTable
                                       )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.strFieldBarcode IN (
                                           SELECT ID FROM @SampleListTable
                                       )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.strFieldBarcode IN (
                                           SELECT ID FROM @SampleListTable
                                       )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.strFieldBarcode IN (
                                           SELECT ID FROM @SampleListTable
                                       )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.strFieldBarcode IN (
                                           SELECT ID FROM @SampleListTable
                                       )
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.strFieldBarcode IN (
                                           SELECT ID FROM @SampleListTable
                                       )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.strFieldBarcode IN (
                                           SELECT ID FROM @SampleListTable
                                       )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.strFieldBarcode IN (
                                           SELECT ID FROM @SampleListTable
                                       )
              AND a.GrantingActorSiteID = m.idfsSite;

        INSERT INTO @FinalResults
        SELECT ID,
               AccessionedIndicator,
               AccessionConditionTypeID,
               CASE
                   WHEN EXISTS
                        (
                            SELECT ReadPermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT AccessToPersonalDataPermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT AccessToGenderAndAgeDataPermissionIndicator
                            FROM @Results
                            WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT WritePermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT DeletePermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END
        FROM @Results
        GROUP BY ID,
                 AccessionedIndicator,
                 AccessionConditionTypeID;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SET @UnaccessionedCount =
        (
            SELECT COUNT(ID)
            FROM @FinalResults
            WHERE AccessionedIndicator = 0
                  AND AccessionConditionTypeID IS NULL
        );

        SELECT SampleID,
               EIDSSLaboratorySampleID,
               FavoriteIndicator,
               RootSampleID,
               ParentSampleID,
               SampleTypeID,
               SampleTypeName,
               HumanID,
               PatientOrFarmOwnerName,
               SpeciesID,
               AnimalID,
               EIDSSAnimalID,
               VectorID,
               MonitoringSessionID,
               VectorSessionID,
               HumanDiseaseReportID,
               VeterinaryDiseaseReportID,
               EIDSSReportOrSessionID,
               TestCompletedIndicator,
               DiseaseID,
               DiseaseName,
               FunctionalAreaID,
               FunctionalAreaName,
               FreezerSubdivisionID,
               StorageBoxPlace,
               CollectionDate,
               CollectedByPersonID,
               CollectedByOrganizationID,
               SentDate,
               SentToOrganizationID,
               SentToOrganizationName,
               SiteID,
               EIDSSLocalOrFieldSampleID,
               EnteredDate,
               OutOfRepositoryDate,
               MarkedForDispositionByPersonID,
               ReadOnlyIndicator,
               AccessionIndicator,
               AccessionDate,
               AccessionConditionTypeID,
               AccessionConditionOrSampleStatusTypeName,
               AccessionByPersonID,
               SampleStatusTypeID,
               SampleStatusDate,
               AccessionComment,
               DestructionMethodTypeID,
               DestructionDate,
               DestroyedByPersonID,
               TestAssignedCount,
               TransferredCount,
               Comment,
               CurrentSiteID,
               BirdStatusTypeID,
               MainTestID,
               SampleKindTypeID,
               PreviousSampleStatusTypeID,
               LabModuleSourceIndicator,
               RowStatus,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
               RowAction,
               RowSelectionIndicator,
               TotalRowCount,
               UnaccessionedSampleCount
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedCaseID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strFieldBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strFieldBarcode
                                               END DESC
                                     ) AS RowNum,
                   m.idfMaterial AS SampleID,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   CASE
                       WHEN f.SampleID IS NULL THEN
                           0
                       ELSE
                           1
                   END AS FavoriteIndicator,
                   m.idfRootMaterial AS RootSampleID,
                   m.idfParentMaterial AS ParentSampleID,
                   m.idfsSampleType AS SampleTypeID,
                   sampleType.name AS SampleTypeName,
                   m.idfHuman AS HumanID,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                           '**********'
                       ELSE
                           m.strCalculatedHumanName
                   END AS PatientOrFarmOwnerName,
                   m.idfSpecies AS SpeciesID,
                   m.idfAnimal AS AnimalID,
                   a.strAnimalCode AS EIDSSAnimalID,
                   m.idfVector AS VectorID,
                   m.idfMonitoringSession AS MonitoringSessionID,
                   m.idfVectorSurveillanceSession AS VectorSessionID,
                   m.idfHumanCase AS HumanDiseaseReportID,
                   m.idfVetCase AS VeterinaryDiseaseReportID,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   m.TestCompletedIndicator,
                   '' AS DiseaseID,
                   '' AS DiseaseName,
                   m.idfInDepartment AS FunctionalAreaID,
                   functionalArea.name AS FunctionalAreaName,
                   m.idfSubdivision AS FreezerSubdivisionID,
                   m.StorageBoxPlace,
                   m.datFieldCollectionDate AS CollectionDate,
                   m.idfFieldCollectedByPerson AS CollectedByPersonID,
                   m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
                   m.datFieldSentDate AS SentDate,
                   m.idfSendToOffice AS SentToOrganizationID,
                   sentToOrganization.AbbreviatedName AS SentToOrganizationName,
                   m.idfsSite AS SiteID,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   m.datEnteringDate AS EnteredDate,
                   m.datOutOfRepositoryDate AS OutOfRepositoryDate,
                   m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
                   m.blnReadOnly AS ReadOnlyIndicator,
                   m.blnAccessioned AS AccessionIndicator,
                   accessionConditionType.name AS AccessionConditionTypeName,
                   m.datAccession AS AccessionDate,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   (CASE
                        WHEN m.blnAccessioned = 0
                             AND m.idfsAccessionCondition IS NULL THEN
                            'Un-accessioned'
                        WHEN m.idfsSampleStatus IS NULL THEN
                            accessionConditionType.name
                        WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                            accessionConditionType.name
                        ELSE
                            sampleStatusType.name
                    END
                   ) AS AccessionConditionOrSampleStatusTypeName,
                   sampleStatusType.name AS SampleStatusTypeName,
                   m.idfAccesionByPerson AS AccessionByPersonID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   m.datSampleStatusDate AS SampleStatusDate,
                   m.strCondition AS AccessionComment,
                   m.idfsDestructionMethod AS DestructionMethodTypeID,
                   m.datDestructionDate AS DestructionDate,
                   m.idfDestroyedByPerson AS DestroyedByPersonID,
                   CASE
                       WHEN m.TestUnassignedIndicator = 1 THEN
                           0
                       ELSE
                           1
                   END AS TestAssignedCount,
                   m.TransferIndicator AS TransferredCount,
                   m.strNote AS Comment,
                   m.idfsCurrentSite AS CurrentSiteID,
                   m.idfsBirdStatus AS BirdStatusTypeID,
                   m.idfMainTest AS MainTestID,
                   m.idfsSampleKind AS SampleKindTypeID,
                   m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
                   m.LabModuleSourceIndicator,
                   m.intRowStatus AS RowStatus,
                   res.ReadPermissionIndicator,
                   res.AccessToPersonalDataPermissionIndicator,
                   res.AccessToGenderAndAgeDataPermissionIndicator,
                   res.WritePermissionIndicator,
                   res.DeletePermissionIndicator,
                   0 AS RowAction,
                   0 AS RowSelectionIndicator,
                   @Page AS CurrentPage,
                   COUNT(*) OVER () AS TotalRowCount,
                   @UnaccessionedCount AS UnaccessionedSampleCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.ID
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN
                (
                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                ) f
                    ON m.idfMaterial = f.SampleID
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Institution_Min(@LanguageID) sentToOrganization
                    ON sentToOrganization.idfOffice = m.idfSendToOffice
                LEFT JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000164) functionalArea
                    ON functionalArea.idfsReference = d.idfsDepartmentName
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
        ) AS x
        WHERE RowNum > @FirstRecord
              AND RowNum < @LastRecord
        ORDER BY RowNum;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TAB_COUNTS_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TAB_COUNTS_GETList
--
-- Description:	Gets a list of counts for each laboratory module tab: samples (un-accessioned), 
-- testing (in progress tests), transferred, my favorites, batches (in progress) and approvals.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     10/18/2021 Initial release.
-- Stephen Long     12/21/2021 Removed filtration rules as these are the default counts.
-- Stephen Long     02/10/2022 Added send to office on transfer count.
-- Stephen Long     04/15/2022 Fix to account for filtration counts.
-- Stephen Long     07/26/2022 Simplified where criteria on testing in progress count.
-- Stephen Long     08/10/2022 Corrected where criteria on batches in progress count; include only
--                             batches with at least one test.
-- Stephen Long     10/11/2022 Added check for closed batch test status to display test records 
--                             ready for validation.
-- Stephen Long     10/23/2022 Added non-laboratory test indicator to where criteria on test 
--                             records for approval.
-- 
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_TAB_COUNTS_GETList]
		@DaysFromAccessionDate = 60,
		@UserID = 161287150000872, --rykermase
		@UserEmployeeID = 420664190000872,
		@UserSiteID = 864,
		@UserOrganizationID = 758210000000,
		@UserSiteGroupID = NULL

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TAB_COUNTS_GETList]
(
    @DaysFromAccessionDate INT,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @SamplesUnaccessionedCount INT = 0,
            @TestingInProgressCount INT = 0,
            @TransferredCount INT = 0,
            @MyFavoritesCount INT = 0,
            @BatchesInProgressCount INT = 0,
            @ApprovalsCount INT = 0;
    DECLARE @Results TABLE (ID BIGINT NOT NULL);
    DECLARE @FinalResults TABLE (ID BIGINT NOT NULL);
    DECLARE @Favorites XML;
    DECLARE @UserEmployeeGroupID BIGINT = (
                                              SELECT TOP 1
                                                  egm.idfEmployeeGroup
                                              FROM dbo.tlbEmployeeGroupMember egm
                                              WHERE egm.idfEmployee = @UserEmployeeID
                                                    AND egm.intRowStatus = 0
                                          );

    BEGIN TRY
        -- =======================================================================================
        -- Samples Tab Unaccessioned Count
        -- =======================================================================================
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      @UserOrganizationID IS NULL
                      OR m.idfSendToOffice = @UserOrganizationID
                  )
              AND m.blnAccessioned = 0
              AND m.idfsAccessionCondition IS NULL
              AND m.idfsSampleStatus IS NULL;

        -- =======================================================================================
        -- CONFIGURABLE SITE FILTRATION RULES
        -- 
        -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        IF @UserOrganizationID IS NOT NULL --First-level sites (central data repository, general data repository, etc.) do not filter results.
        BEGIN
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = @UserSiteGroupID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND @UserSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfSiteGroup = @UserSiteGroupID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND @UserSiteGroupID IS NOT NULL
                  AND sgs.idfsSite = m.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.AccessRule ar
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbMaterial m
                    ON m.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND m.idfsSite = ar.GrantingActorSiteID;

            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.AccessRuleActor ara
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
                       AND ar.GrantingActorSiteID IS NOT NULL
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfsSite = ar.GrantingActorSiteID
                       AND m.intRowStatus = 0
            WHERE ara.ActorEmployeeGroupID = @UserEmployeeGroupID
                  AND ara.intRowStatus = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND m.idfsSite = ar.GrantingActorSiteID;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial
            FROM dbo.AccessRule ar
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbMaterial m
                    ON m.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND m.blnAccessioned = 0
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND m.idfsSite = ar.GrantingActorSiteID;
        END;

        INSERT INTO @FinalResults
        SELECT ID
        FROM @Results res
        GROUP BY ID;

        SET @SamplesUnaccessionedCount =
        (
            SELECT COUNT(*) FROM @FinalResults
        );

        -- =======================================================================================
        -- Testing Tab In Progress Count
        -- =======================================================================================
        SET @TestingInProgressCount =
        (
            SELECT COUNT(t.idfTesting)
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
            WHERE t.intRowStatus = 0
                  AND t.idfsTestName IS NOT NULL
                  AND t.idfsTestStatus = 10001003 --In Progress
                  AND t.blnNonLaboratoryTest = 0
                  AND (
                          m.idfSendToOffice = @UserOrganizationID
                          OR @UserOrganizationID IS NULL
                      )
                  AND (
                          GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                          OR @DaysFromAccessionDate IS NULL
                      )
                  AND (
                          t.idfBatchTest IS NULL
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001001 --Closed
                             )
                      )
        );

        -- =======================================================================================
        -- Transferred Tab Count
        -- =======================================================================================
        DELETE FROM @Results;
        DELETE FROM @FinalResults;

        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
        WHERE (
                  tr.idfSendFromOffice = @UserOrganizationID
                  OR tr.idfSendToOffice = @UserOrganizationID
              )
              AND (tr.idfsTransferStatus IN (   10001003, --In Progress
                                                10001006  --Amended
                                            )
                  )
              AND tr.intRowStatus = 0;

        -- =======================================================================================
        -- CONFIGURABLE SITE FILTRATION RULES
        -- 
        -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = @UserSiteGroupID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND @UserSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfSiteGroup = @UserSiteGroupID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND @UserSiteGroupID IS NOT NULL
              AND sgs.idfsSite = tr.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.AccessRule ar
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
        WHERE ar.GrantingActorSiteID IS NOT NULL
              AND tr.idfsSite = ar.GrantingActorSiteID;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.AccessRuleActor ara
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
                   AND ar.GrantingActorSiteID IS NOT NULL
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
        WHERE ara.ActorEmployeeGroupID = @UserEmployeeGroupID
              AND ara.intRowStatus = 0
              AND tr.idfsSite = ar.GrantingActorSiteID;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut
        FROM dbo.AccessRule ar
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
        WHERE ar.GrantingActorSiteID IS NOT NULL
              AND tr.idfsSite = ar.GrantingActorSiteID;

        INSERT INTO @FinalResults
        SELECT ID
        FROM @Results res
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = res.ID
        WHERE tr.intRowStatus = 0
              AND tr.idfsTransferStatus IN (   10001003, --In Progress
                                               10001006  --Amended
                                           )
        GROUP BY ID;

        SET @TransferredCount =
        (
            SELECT COUNT(*) FROM @FinalResults res
        );

        -- =======================================================================================
        -- My Favorites Tab Count
        -- =======================================================================================
        DELETE FROM @Results;
        DELETE FROM @FinalResults;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
        WHERE m.intRowStatus = 0;

        -- =======================================================================================
        -- CONFIGURABLE SITE FILTRATION RULES
        -- 
        -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = @UserSiteGroupID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfSiteGroup = @UserSiteGroupID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND a.GrantingActorSiteID = m.idfsSite;

        INSERT INTO @FinalResults
        SELECT ID
        FROM @Results
        GROUP BY ID;

        SET @MyFavoritesCount =
        (
            SELECT COUNT(*) FROM @FinalResults
        );

        -- =======================================================================================
        -- Batches Tab Count
        -- =======================================================================================
        DELETE FROM @Results;
        DELETE FROM @FinalResults;

        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.tlbBatchTest b
        WHERE b.idfPerformedByOffice = @UserOrganizationID
              AND b.idfsSite = @UserSiteID
              AND b.intRowStatus = 0
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0;

        -- =======================================================================================
        -- CONFIGURABLE SITE FILTRATION RULES
        -- 
        -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup AS grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tstUserTable AS u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor AS ara
                ON ara.ActorSiteGroupID = @UserSiteGroupID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule AS ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0
              AND @UserSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = b.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0
              AND ar.GrantingActorSiteGroupID IS NOT NULL
              AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.tlbBatchTest b
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfSiteGroup = @UserSiteGroupID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE b.intRowStatus = 0
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0
              AND @UserSiteGroupID IS NOT NULL
              AND sgs.idfsSite = b.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.AccessRule ar
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.tlbBatchTest b
                ON b.intRowStatus = 0
        WHERE ar.GrantingActorSiteID IS NOT NULL
              AND b.idfsSite = ar.GrantingActorSiteID
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.AccessRule ar
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.tlbBatchTest b
                ON b.intRowStatus = 0
        WHERE ar.GrantingActorSiteID IS NOT NULL
              AND b.idfsSite = ar.GrantingActorSiteID
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT b.idfBatchTest
        FROM dbo.AccessRule ar
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.tlbBatchTest b
                ON b.intRowStatus = 0
        WHERE ar.GrantingActorSiteID IS NOT NULL
              AND b.idfsSite = ar.GrantingActorSiteID
              AND
              (
                  SELECT COUNT(t.idfTesting)
                  FROM dbo.tlbTesting t
                  WHERE t.idfBatchTest = b.idfBatchTest
              ) > 0;

        INSERT INTO @FinalResults
        SELECT ID
        FROM @Results res
            INNER JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = res.ID
        WHERE b.idfsBatchStatus = 10001003 --In Progress
        GROUP BY ID;

        SET @BatchesInProgressCount =
        (
            SELECT COUNT(*) FROM @FinalResults
        );

        -- =======================================================================================
        -- Approvals Tab Count
        -- =======================================================================================
        DELETE FROM @Results;
        DELETE FROM @FinalResults;

        INSERT INTO @Results
        SELECT m.idfMaterial
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.idfsSampleStatus IN (   10015002, --Marked for Deletion 
                                            10015003
                                        ) --Marked for Destruction
              AND m.idfSendToOffice = @UserOrganizationID;

        INSERT INTO @Results
        SELECT t.idfTesting
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON t.idfMaterial = m.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion 
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfSendToOffice = @UserOrganizationID;

        SET @ApprovalsCount =
        (
            SELECT COUNT(ID) FROM @Results
        );

        SELECT @SamplesUnaccessionedCount AS SamplesTabCount,
               @TestingInProgressCount AS TestingTabCount,
               @TransferredCount AS TransferredTabCount,
               @MyFavoritesCount AS MyFavoritesTabCount,
               @BatchesInProgressCount AS BatchesTabCount,
               @ApprovalsCount AS ApprovalsTabCount;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TEST_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TEST_ADVANCED_SEARCH_GETList
--
-- Description:	Get laboratory tests list for the various lab use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/21/2019 Initial release.
-- Stephen Long     03/28/2019 Added EIDSS local/field sample ID field.
-- Stephen Long     04/27/2019 Added EIDSS batch ID, observation ID and batch status type name for 
--                             additional test information.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     01/22/2020 Converted site ID to site list for site filtration.
-- Stephen Long     02/03/2020 Added non-laboratory test indicator where clause.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/16/2020 Added test list parameter and where clause criteria.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     06/06/2020 Added batch status type ID to the model.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/30/2020 Remove unneeded joins.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Mark Wilson		08/20/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     03/24/2022 Removed primary key from final results table variable.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Changed from repair to reference repair function.
-- Stephen Long     08/09/2022 Added batch test association indicator parameter.
-- Stephen Long     08/12/2022 Removed where criteria for surveillance type of both; de-activated 
--                             base reference record.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     10/18/2022 Fix on external test indicator to use the field on the testing 
--                             table.
-- Stephen Long     10/21/2022 Added human disease report, veterinary disease report, monitoring 
--                             session and vector identifiers to the query.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TEST_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @TestList VARCHAR(MAX) = NULL,
    @BatchTestAssociationIndicator BIT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL,
    @Page INT = 1,
    @PageSize INT = 10,
    @SortColumn VARCHAR(200) = 'EIDSSLaboratorySampleID',
    @SortOrder VARCHAR(4) = 'ASC'
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @ReturnMessage VARCHAR(MAX) = 'SUCCESS',
            @ReturnCode INT = 0,
            @InProgressCount INT;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL INDEX IDX_1,
        TestStatusTypeID BIGINT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL INDEX IDX_1,
        TestStatusTypeID BIGINT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @Favorites XML,
            @FirstRecord INT = (@Page - 1) * @PageSize,
            @LastRecord INT = (@Page * @PageSize + 1);

    BEGIN TRY
        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  );

        -- =======================================================================================
        -- CONFIGURABLE SITE FILTRATION RULES
        -- 
        -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the default rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (m.datAccession IS NOT NULL AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (m.datAccession IS NULL AND m.blnAccessioned = 0 AND m.datEnteringDate 
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        INSERT INTO @FinalResults
        SELECT t.idfTesting,
               res.TestStatusTypeID,
               res.ReadPermissionIndicator,
               res.AccessToPersonalDataPermissionIndicator,
               res.AccessToGenderAndAgeDataPermissionIndicator,
               res.WritePermissionIndicator,
               res.DeletePermissionIndicator
        FROM @Results res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator = 1
              AND (
                      (
                          t.idfBatchTest IS NULL
                          AND t.idfsTestResult IS NULL
                          AND @BatchTestAssociationIndicator = 1
                      )
                      OR @BatchTestAssociationIndicator IS NULL
                  ) -- Adding a test to a batch, so should not currently be a batch test ID.
              AND (
                      (t.idfTesting IN (
                                           SELECT CAST([Value] AS BIGINT)
                                           FROM dbo.FN_GBL_SYS_SplitList(@TestList, NULL, ',')
                                       )
                      )
                      OR (@TestList IS NULL)
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.blnAccessioned = @AccessionedIndicatorList
                              AND m.idfsAccessionCondition IS NULL
                          )
                          OR (
                                 @AccessionedIndicatorList IS NULL
                                 AND @SampleStatusTypeList IS NULL
                             )
                      )
                      OR (
                             (
                                 (m.idfsSampleStatus IN (
                                                            SELECT CAST([Value] AS BIGINT)
                                                            FROM dbo.FN_GBL_SYS_SplitList(
                                                                                             @SampleStatusTypeList,
                                                                                             NULL,
                                                                                             ','
                                                                                         )
                                                        )
                                 )
                                 OR (
                                        m.idfsAccessionCondition IN (
                                                                        SELECT CAST([Value] AS BIGINT)
                                                                        FROM dbo.FN_GBL_SYS_SplitList(
                                                                                                         @SampleStatusTypeList,
                                                                                                         NULL,
                                                                                                         ','
                                                                                                     )
                                                                    )
                                        AND (
                                                m.idfsSampleStatus IS NULL
                                                OR m.idfsSampleStatus = 10015007 --In Repository
                                            )
                                    )
                             )
                             OR (
                                    @SampleStatusTypeList IS NULL
                                    AND @AccessionedIndicatorList IS NULL
                                )
                         )
                  )
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      t.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR @EIDSSReportCampaignOrSessionID IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  );

        SET @InProgressCount =
        (
            SELECT COUNT(*)
            FROM @FinalResults res
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = res.ID
                       AND t.intRowStatus = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
            WHERE t.idfsTestStatus = 10001003
                  AND t.idfsTestName IS NOT NULL
                  AND t.blnNonLaboratoryTest = 0
                  AND (
                          (
                              t.idfBatchTest IS NULL
                              AND (
                                      t.idfsTestStatus = 10001001 --Final
                                      OR t.idfsTestStatus = 10001003 --In Progress
                                      OR t.idfstestStatus = 10001006 --Amended
                                  )
                          )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001003 --In Progress
                                 AND (
                                         t.idfsTestStatus = 10001001 --Final 
                                         OR t.idfstestStatus = 10001006 --Amended
                                     )
                             )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001001 --Closed
                                 AND (
                                         t.idfsTestStatus = 10001001 --Final
                                         OR t.idfsTestStatus = 10001003 --In Progress
                                         OR t.idfsTestStatus = 10001004 --Preliminary
                                         OR t.idfstestStatus = 10001006 --Amended
                                     )
                             )
                      )
        );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SELECT TestID,
               FavoriteIndicator,
               SiteID,
               CurrentSiteID,
               TestNameTypeID,
               TestCategoryTypeID,
               TestResultTypeID,
               TestStatusTypeID,
               PreviousTestStatusTypeID,
               DiseaseID,
               SampleID,
               RootSampleID,
               ParentSampleID,
               SentToOrganizationID,
               BatchTestID,
               ObservationID,
               TestNumber,
               Note,
               StartedDate,
               ResultDate,
               TestedByOrganizationID,
               TestedByPersonID,
               ResultEnteredByOrganizationID,
               ResultEnteredByPersonID,
               ValidatedByOrganizationID,
               ValidatedByPersonID,
               ReadOnlyIndicator,
               NonLaboratoryTestIndicator,
               ExternalTestIndicator,
               PerformedByOrganizationID,
               ReceivedDate,
               ContactPersonName,
               EIDSSReportOrSessionID,
               PatientOrFarmOwnerName,
               SampleTypeName,
               DiseaseName,
               EIDSSLaboratorySampleID,
               EIDSSLocalOrFieldSampleID,
               TestNameTypeName,
               TestStatusTypeName,
               TestResultTypeName,
               TestCategoryTypeName,
               AccessionDate,
               FunctionalAreaName,
               AccessionConditionTypeID,
               SampleStatusTypeID,
               AccessionConditionOrSampleStatusTypeName,
               AccessionComment,
               EIDSSAnimalID,
               TransferCount,
               TransferID,
               HumanDiseaseReportID, 
               VeterinaryDiseaseReportID, 
               MonitoringSessionID, 
               VectorID, 
               RowStatus,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
               RowAction,
               RowSelectionIndicator,
               CurrentPage,
               TotalRowCount,
               InProgressCount
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedCaseID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedHumanName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedHumanName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       sampleType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       sampleType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       disease.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       disease.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testNameType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testNameType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testStatusType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testStatusType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStartedDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       t.datStartedDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStartedDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       t.datStartedDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testResultType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testResultType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       t.datConcludedDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       t.datConcludedDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestCategoryTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testCategoryType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestCategoryTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testCategoryType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.datAccession
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.datAccession
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'FunctionalAreaName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       functionalArea.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'FunctionalAreaName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       functionalArea.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSAnimalID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       a.strAnimalCode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSAnimalID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       a.strAnimalCode
                                               END DESC
                                     ) AS RowNum,
                   t.idfTesting AS TestID,
                   CASE
                       WHEN f.SampleID IS NULL THEN
                           0
                       ELSE
                           1
                   END AS FavoriteIndicator,
                   m.idfsSite AS SiteID,
                   m.idfsCurrentSite AS CurrentSiteID,
                   t.idfsTestName AS TestNameTypeID,
                   t.idfsTestCategory AS TestCategoryTypeID,
                   t.idfsTestResult AS TestResultTypeID,
                   t.idfsTestStatus AS TestStatusTypeID,
                   t.PreviousTestStatusID AS PreviousTestStatusTypeID,
                   t.idfsDiagnosis AS DiseaseID,
                   m.idfMaterial AS SampleID,
                   m.idfRootMaterial AS RootSampleID,
                   m.idfParentMaterial AS ParentSampleID,
                   m.idfSendToOffice AS SentToOrganizationID,
                   t.idfBatchTest AS BatchTestID,
                   t.idfObservation AS ObservationID,
                   t.intTestNumber AS TestNumber,
                   t.strNote AS Note,
                   t.datStartedDate AS StartedDate,
                   t.datConcludedDate AS ResultDate,
                   t.idfTestedByOffice AS TestedByOrganizationID,
                   t.idfTestedByPerson AS TestedByPersonID,
                   t.idfResultEnteredByOffice AS ResultEnteredByOrganizationID,
                   t.idfResultEnteredByPerson AS ResultEnteredByPersonID,
                   t.idfValidatedByOffice AS ValidatedByOrganizationID,
                   t.idfValidatedByPerson AS ValidatedByPersonID,
                   t.blnReadOnly AS ReadOnlyIndicator,
                   t.blnNonLaboratoryTest AS NonLaboratoryTestIndicator,
                   t.blnExternalTest AS ExternalTestIndicator,
                   t.idfPerformedByOffice AS PerformedByOrganizationID,
                   t.datReceivedDate AS ReceivedDate,
                   t.strContactPerson AS ContactPersonName,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                           '**********'
                       ELSE
                           m.strCalculatedHumanName
                   END AS PatientOrFarmOwnerName,
                   sampleType.name AS SampleTypeName,
                   disease.name AS DiseaseName,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   testNameType.name AS TestNameTypeName,
                   testStatusType.name AS TestStatusTypeName,
                   testResultType.name AS TestResultTypeName,
                   testCategoryType.name AS TestCategoryTypeName,
                   m.datAccession AS AccessionDate,
                   functionalArea.name AS FunctionalAreaName,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   (CASE
                        WHEN m.blnAccessioned = 0
                             AND m.idfsAccessionCondition IS NULL THEN
                            'Un-accessioned'
                        WHEN m.idfsSampleStatus IS NULL THEN
                            accessionConditionType.name
                        WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                            accessionConditionType.name
                        ELSE
                            sampleStatusType.name
                    END
                   ) AS AccessionConditionOrSampleStatusTypeName,
                   m.strCondition AS AccessionComment,
                   a.strAnimalCode AS EIDSSAnimalID,
                   ISNULL(
                   (
                       SELECT COUNT(NULLIF(tom2.idfTransferOUT, 0))
                       FROM dbo.tlbTransferOutMaterial tom2
                       WHERE tom2.idfMaterial = m.idfMaterial
                             AND tom2.intRowStatus = 0
                   ),
                   0
                         ) AS TransferCount,
                   tro.idfTransferOut AS TransferID,
                   t.idfHumanCase AS HumanDiseaseReportID, 
                   t.idfVetCase AS VeterinaryDiseaseReportID,
                   t.idfMonitoringSession AS MonitoringSessionID, 
                   t.idfVector AS VectorID, 
                   t.intRowStatus AS RowStatus,
                   res.ReadPermissionIndicator,
                   res.AccessToPersonalDataPermissionIndicator,
                   res.AccessToGenderAndAgeDataPermissionIndicator,
                   res.WritePermissionIndicator,
                   res.DeletePermissionIndicator,
                   0 AS RowAction,
                   0 AS RowSelectionIndicator,
                   @Page AS CurrentPage,
                   COUNT(*) OVER () AS TotalRowCount,
                   @InProgressCount AS InProgressCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = res.ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) disease
                    ON disease.idfsReference = t.idfsDiagnosis
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN
                (
                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                ) f
                    ON m.idfMaterial = f.SampleID
                LEFT JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfMaterial = m.idfMaterial
                       AND tom.intRowStatus = 0
                LEFT JOIN dbo.tlbTransferOUT tro
                    ON tro.idfTransferOut = tom.idfTransferOut
                       AND tro.intRowStatus = 0
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                    ON functionalArea.idfsReference = d.idfsDepartmentName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
        ) AS x
        WHERE RowNum > @FirstRecord
              AND RowNum < @LastRecord
        ORDER BY RowNum;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TEST_GETDetail]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TEST_GETDetail
--
-- Description:	Get test details for a specific laboratory test.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     09/26/2021 Initial release.
-- Stephen Long     09/30/2022 Added results entered by and validated by person name.
-- Stephen Long     10/18/2022 Fix on external test indicator to use the field on the testing 
--                             table.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_TEST_GETDetail]
		@LanguageID = N'en-US',
		@TestID = 1,
		@UserID = 161287150000872 --rykermase

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TEST_GETDetail]
(
    @LanguageID NVARCHAR(50),
    @TestID BIGINT,
    @UserID BIGINT
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @ReturnMessage VARCHAR(MAX) = 'SUCCESS',
            @ReturnCode INT = 0;

    BEGIN TRY
        SELECT t.idfTesting AS TestID,
               t.idfsTestName AS TestNameTypeID,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsTestResult AS TestResultTypeID,
               t.idfsTestStatus AS TestStatusTypeID,
               t.PreviousTestStatusID AS PreviousTestStatusTypeID,
               t.idfsDiagnosis AS DiseaseID,
               m.idfMaterial AS SampleID,
               t.idfBatchTest AS BatchTestID,
               t.idfObservation AS ObservationID,
               t.intTestNumber AS TestNumber,
               t.strNote AS Note,
               t.datStartedDate AS StartedDate,
               t.datConcludedDate AS ResultDate,
               t.idfTestedByOffice AS TestedByOrganizationID,
               t.idfTestedByPerson AS TestedByPersonID,
               t.idfResultEnteredByOffice AS ResultEnteredByOrganizationID,
               t.idfResultEnteredByPerson AS ResultEnteredByPersonID,
               ISNULL(resultsEnteredByPerson.strFamilyName, N'')
               + ISNULL(', ' + resultsEnteredByPerson.strFirstName, N'')
               + ISNULL(' ' + resultsEnteredByPerson.strSecondName, N'') AS ResultEnteredByPersonName,
               t.idfValidatedByOffice AS ValidatedByOrganizationID,
               t.idfValidatedByPerson AS ValidatedByPersonID,
               ISNULL(validatedByPerson.strFamilyName, N'') + ISNULL(', ' + validatedByPerson.strFirstName, N'')
               + ISNULL(' ' + validatedByPerson.strSecondName, N'') AS ValidatedByPersonName,
               t.blnReadOnly AS ReadOnlyIndicator,
               t.blnNonLaboratoryTest AS NonLaboratoryTestIndicator,
               t.blnExternalTest AS ExternalTestIndicator,
               t.idfPerformedByOffice AS PerformedByOrganizationID,
               t.datReceivedDate AS ReceivedDate,
               t.strContactPerson AS ContactPersonName,
               disease.name AS DiseaseName,
               testNameType.name AS TestNameTypeName,
               testStatusType.name AS TestStatusTypeName,
               testResultType.name AS TestResultTypeName,
               testCategoryType.name AS TestCategoryTypeName,
               tro.idfTransferOut AS TransferID,
               t.intRowStatus AS RowStatus
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                ON disease.idfsReference = t.idfsDiagnosis
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
            LEFT JOIN dbo.tlbPerson resultsEnteredByPerson
                ON resultsEnteredByPerson.idfPerson = t.idfResultEnteredByPerson
                   AND resultsEnteredByPerson.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson validatedByPerson
                ON validatedByPerson.idfPerson = t.idfValidatedByPerson
                   AND validatedByPerson.intRowStatus = 0
        WHERE t.idfTesting = @TestID;

        SELECT @ReturnCode,
               @ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TEST_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TEST_GETList
--
-- Description:	Get laboratory tests list for the various lab use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     10/18/2018 Initial release.
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     01/18/2019 Added row selection indicator.
-- Stephen Long     01/30/2019 Added sample disease reference join, and removed the vector 
--                             surveillance session joins as they are no longer needed.
-- Stephen Long     02/12/2019 Added sample ID parameter.
-- Stephen Long     02/21/2019 Added root and parent sample ID's to the select list.  Added 
--                             test status type ID, batch test ID, site ID and test ID parameters.
-- Stephen Long     03/28/2019 Added EIDSS local/field sample ID field.
--                             Changed batch test portion of the where clause to bring back test 
--                             records with a null batch test/in progress unless an actual 
--                             batch test records is specified.  The Testing grid on the labor-
--                             atory module should exclude tests associated with a batch.  These 
--                             display on the Batches tab.
-- Stephen Long     04/03/2019 Changed tests where clause to look at the performed by organization 
--                             instead of sample sent to organization.
-- Stephen Long     04/27/2019 Added EIDSS batch ID, observation ID and batch status type name for 
--                             additional test information.
-- Stephen Long     07/02/2019 Updated joins for sample type and test status type from left to 
--                             inner.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     07/29/2019 Correction on test status typeID where clause conditions.
-- Stephen Long     08/28/2019 Added @TestID null check on the test status type id where clause.
-- Stephen Long     09/03/2019 Added send to organization as part of the where clause.
-- Stephen Long     09/14/2019 Added pagination set 0 to bring back "all" records.
-- Stephen Long     09/26/2019 Added null OR portion on SiteID and OrganizationID where clauses.
-- Stephen Long     10/03/2019 Added test id parameter if/else.
-- Stephen Long     10/22/2019 Added test list parameter and where clause.
-- Stephen Long     01/22/2020 Converted site ID to site list for site filtration.
-- Stephen Long     02/03/2020 Added non-laboratory test indicator where clause.
-- Stephen Long     02/19/2020 Corrected left joins needing intRowStatus = 0.
-- Stephen Long     03/10/2020 Added additional test status types: amended and final and days from 
--                             accession date.
-- Stephen Long     04/07/2020 Added option of no pagination for batch tests.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     06/06/2020 Added batch status type ID to the model.
-- Stephen Long     06/11/2020 Correction on where clause criteria for batch tests in final or 
--                             amended status.
-- Stephen Long     09/16/2020 Removed test status type preliminary as these should only show in 
--                             the approvals query.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/21/2021 Change function on reference data to handle inactive records.
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     11/16/2021 Changed to use select row over instead of with cte.
-- Stephen Long     12/17/2021 Removed filtration rules; only apply on advanced search.
-- Stephen Long     12/18/2021 Changed left to inner join on accession condition and sample 
--                             status types.
-- Stephen Long     04/20/2022 Changed to include preliminary in the testing list for tests 
--                             not associated with a batch.
-- Stephen Long     05/24/2022 Added additional test status types for batch of in progress.
-- Stephen Long     05/25/2022 Fix for GIT item 326.
-- Stephen Long     07/25/2022 Removed option (recompile).
-- Stephen Long     08/12/2022 Removed preliminary from where criteria for default list.
-- Stephen Long     08/29/2012 Bug fix on DevOps item 4404.
-- Stephen Long     10/18/2022 Fix on external test indicator to use the field on the testing 
--                             table.
-- Stephen Long     10/21/2022 Added human disease report, veterinary disease report, monitoring 
--                             session and vector identifiers to the query.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_TEST_GETList]
		@LanguageID = N'en-US',
		@TestStatusTypeID = NULL,
		@SampleID = NULL,
		@TestID = NULL,
		@BatchTestID = NULL,
		@TestList = NULL,
		@DaysFromAccessionDate = 60,
		@UserID = 161287150000872, --rykermase
		@UserEmployeeID = 420664190000872,
		@UserSiteID = 864,
		@UserOrganizationID = 758210000000,
		@UserSiteGroupID = NULL,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TEST_GETList]
(
    @LanguageID NVARCHAR(50),
    @TestStatusTypeID BIGINT = NULL,
    @SampleID BIGINT = NULL,
    @TestID BIGINT = NULL,
    @BatchTestID BIGINT = NULL,
    @TestList VARCHAR(MAX) = NULL,
    @DaysFromAccessionDate INT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteID BIGINT,
    @UserSiteGroupID BIGINT = NULL,
    @Page INT = 1,
    @PageSize INT = 10,
    @SortColumn VARCHAR(200) = 'EIDSSLaboratorySampleID',
    @SortOrder VARCHAR(4) = 'DESC'
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        TestStatusTypeID BIGINT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        TestStatusTypeID BIGINT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @Favorites XML,
            @FirstRecord INT = (@Page - 1) * @PageSize,
            @LastRecord INT = (@Page * @PageSize + 1),
            @InProgressCount INT;

    BEGIN TRY
        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        IF @TestID IS NULL
           AND @TestList IS NULL
        BEGIN
            INSERT INTO @Results
            SELECT t.idfTesting,
                   t.idfsTestStatus,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                    ON disease.idfsReference = t.idfsDiagnosis
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
            WHERE t.intRowStatus = 0
                  AND t.idfsTestName IS NOT NULL
                  AND t.blnNonLaboratoryTest = 0
                  AND m.idfSendToOffice = @UserOrganizationID
                  AND (
                          GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                          OR @DaysFromAccessionDate IS NULL
                      )
                  AND (
                          t.idfsTestStatus = @TestStatusTypeID
                          OR @TestStatusTypeID IS NULL
                      )
                  AND (
                          (
                              t.idfBatchTest IS NULL
                              AND t.idfsTestStatus IN (10001001, --Final
                                      10001007, --Deleted
                                      10001003, --In Progress
                                      10001006) --Amended
                          )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001003 --In Progress
                                 AND t.idfsTestStatus IN (10001001, --Final 
										 10001003, -- In Progress
                                         10001004, --Preliminary
                                         10001006) --Amended
                             )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001001 --Closed
                                 AND t.idfsTestStatus IN (10001001, --Final 
										 10001003, -- In Progress
                                         10001004, --Preliminary
                                         10001006) --Amended
                             )
                      )
                  AND (
                          t.idfMaterial = @SampleID
                          OR @SampleID IS NULL
                      )
                  AND (
                          (t.idfBatchTest = @BatchTestID)
                          OR (
                                 t.idfBatchTest IS NULL
                                 AND @BatchTestID IS NULL
                             )
                      );

            INSERT INTO @FinalResults
            SELECT *
            FROM @Results
            GROUP BY ID,
                     TestStatusTypeID,
                     ReadPermissionIndicator,
                     AccessToPersonalDataPermissionIndicator,
                     AccessToGenderAndAgeDataPermissionIndicator,
                     WritePermissionIndicator,
                     DeletePermissionIndicator;
        END
        ELSE
        BEGIN
            INSERT INTO @FinalResults
            SELECT t.idfTesting,
                   t.idfsTestStatus,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbTesting t
            WHERE t.intRowStatus = 0
                  AND (
                          t.idfTesting = @TestID
                          OR @TestID IS NULL
                      )
                  AND (
                          t.idfTesting IN (
                                              SELECT CAST([Value] AS BIGINT)
                                              FROM dbo.FN_GBL_SYS_SplitList(@TestList, NULL, ',')
                                          )
                          OR @TestList IS NULL
                      );
        END;

        SET @InProgressCount =
        (
            SELECT COUNT(   CASE
                                WHEN TestStatusTypeID = 10001003 --In Progress
                            THEN
                                    ID
                                ELSE
                                    NULL
                            END
                        )
            FROM @FinalResults res
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = res.ID
                       AND t.intRowStatus = 0
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
            WHERE t.intRowStatus = 0
                  AND (
                          t.idfTesting = @TestID
                          OR @TestID IS NULL
                      )
                  AND t.idfsTestName IS NOT NULL
                  AND t.blnNonLaboratoryTest = 0
                  AND m.idfSendToOffice = @UserOrganizationID
                  AND (
                          GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                          OR @DaysFromAccessionDate IS NULL
                      )
                  AND (
                          t.idfTesting IN (
                                               SELECT CAST([Value] AS BIGINT)
                                               FROM dbo.FN_GBL_SYS_SplitList(@TestList, NULL, ',')
                                           )
                          
                          OR @TestList IS NULL
                      )
                  AND (
                          t.idfsTestStatus = @TestStatusTypeID
                          OR @TestStatusTypeID IS NULL
                      )
                  AND (
                          (
                              t.idfBatchTest IS NULL
                              AND t.idfsTestStatus IN (10001001, --Final
                                      10001003, --In Progress
                                      10001006) --Amended
                          )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001003 --In Progress
                                 AND t.idfsTestStatus IN (10001001, --Final 
                                         10001004, --Preliminary
                                         10001006 --Amended
                                     )
                             )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001001 --Closed
                                 AND t.idfsTestStatus IN (10001001, --Final 
										 10001003, -- In Progress
                                         10001004, --Preliminary
                                         10001006) --Amended
                             )
                      )
                  AND (
                          t.idfMaterial = @SampleID
                          OR @SampleID IS NULL
                      )
                  AND (
                          (t.idfBatchTest = @BatchTestID)
                          OR (
                                 t.idfBatchTest IS NULL
                                 AND @BatchTestID IS NULL
                             )
                      )
        );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SELECT TestID,
               FavoriteIndicator,
               SiteID,
               CurrentSiteID,
               TestNameTypeID,
               TestCategoryTypeID,
               TestResultTypeID,
               TestStatusTypeID,
               PreviousTestStatusTypeID,
               DiseaseID,
               SampleID,
               RootSampleID,
               ParentSampleID,
               SentToOrganizationID,
               BatchTestID,
               ObservationID,
               TestNumber,
               Note,
               StartedDate,
               ResultDate,
               TestedByOrganizationID,
               TestedByPersonID,
               ResultEnteredByOrganizationID,
               ResultEnteredByPersonID,
               ValidatedByOrganizationID,
               ValidatedByPersonID,
               ReadOnlyIndicator,
               NonLaboratoryTestIndicator,
               ExternalTestIndicator,
               PerformedByOrganizationID,
               ReceivedDate,
               ContactPersonName,
               EIDSSReportOrSessionID,
               PatientOrFarmOwnerName,
               SampleTypeName,
               DiseaseName,
               EIDSSLaboratorySampleID,
               EIDSSLocalOrFieldSampleID,
               TestNameTypeName,
               TestStatusTypeName,
               TestResultTypeName,
               TestCategoryTypeName,
               AccessionDate,
               FunctionalAreaName,
               AccessionConditionTypeID,
               SampleStatusTypeID,
               AccessionConditionOrSampleStatusTypeName,
               AccessionComment,
               EIDSSAnimalID,
               TransferCount,
               TransferID,
               HumanDiseaseReportID, 
               VeterinaryDiseaseReportID, 
               MonitoringSessionID, 
               VectorID, 
               RowStatus,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
               RowAction,
               RowSelectionIndicator,
               CurrentPage,
               TotalRowCount,
               InProgressCount
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedCaseID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedHumanName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedHumanName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       sampleType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       sampleType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       disease.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       disease.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testNameType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testNameType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testStatusType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testStatusType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStartedDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       t.datStartedDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStartedDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       t.datStartedDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testResultType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testResultType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       t.datConcludedDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       t.datConcludedDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestCategoryTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testCategoryType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestCategoryTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testCategoryType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.datAccession
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.datAccession
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'FunctionalAreaName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       functionalArea.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'FunctionalAreaName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       functionalArea.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSAnimalID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       a.strAnimalCode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSAnimalID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       a.strAnimalCode
                                               END DESC
                                     ) AS RowNum,
                   t.idfTesting AS TestID,
                   CASE
                       WHEN f.SampleID IS NULL THEN
                           0
                       ELSE
                           1
                   END AS FavoriteIndicator,
                   m.idfsSite AS SiteID,
                   m.idfsCurrentSite AS CurrentSiteID,
                   t.idfsTestName AS TestNameTypeID,
                   t.idfsTestCategory AS TestCategoryTypeID,
                   t.idfsTestResult AS TestResultTypeID,
                   t.idfsTestStatus AS TestStatusTypeID,
                   t.PreviousTestStatusID AS PreviousTestStatusTypeID,
                   t.idfsDiagnosis AS DiseaseID,
                   m.idfMaterial AS SampleID,
                   m.idfRootMaterial AS RootSampleID,
                   m.idfParentMaterial AS ParentSampleID,
                   m.idfSendToOffice AS SentToOrganizationID,
                   t.idfBatchTest AS BatchTestID,
                   t.idfObservation AS ObservationID,
                   t.intTestNumber AS TestNumber,
                   t.strNote AS Note,
                   t.datStartedDate AS StartedDate,
                   t.datConcludedDate AS ResultDate,
                   t.idfTestedByOffice AS TestedByOrganizationID,
                   t.idfTestedByPerson AS TestedByPersonID,
                   t.idfResultEnteredByOffice AS ResultEnteredByOrganizationID,
                   t.idfResultEnteredByPerson AS ResultEnteredByPersonID,
                   t.idfValidatedByOffice AS ValidatedByOrganizationID,
                   t.idfValidatedByPerson AS ValidatedByPersonID,
                   t.blnReadOnly AS ReadOnlyIndicator,
                   t.blnNonLaboratoryTest AS NonLaboratoryTestIndicator,
                   t.blnExternalTest AS ExternalTestIndicator,
                   t.idfPerformedByOffice AS PerformedByOrganizationID,
                   t.datReceivedDate AS ReceivedDate,
                   t.strContactPerson AS ContactPersonName,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   m.strCalculatedHumanName AS PatientOrFarmOwnerName,
                   sampleType.name AS SampleTypeName,
                   disease.name AS DiseaseName,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   testNameType.name AS TestNameTypeName,
                   testStatusType.name AS TestStatusTypeName,
                   testResultType.name AS TestResultTypeName,
                   testCategoryType.name AS TestCategoryTypeName,
                   m.datAccession AS AccessionDate,
                   functionalArea.name AS FunctionalAreaName,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   (CASE
                        WHEN m.blnAccessioned = 0
                             AND m.idfsAccessionCondition IS NULL THEN
                            'Un-accessioned'
                        WHEN m.idfsSampleStatus IS NULL THEN
                            accessionConditionType.name
                        WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                            accessionConditionType.name
                        ELSE
                            sampleStatusType.name
                    END
                   ) AS AccessionConditionOrSampleStatusTypeName,
                   m.strCondition AS AccessionComment,
                   a.strAnimalCode AS EIDSSAnimalID,
                   ISNULL(
                   (
                       SELECT COUNT(NULLIF(tom2.idfTransferOUT, 0))
                       FROM dbo.tlbTransferOutMaterial tom2
                       WHERE tom2.idfMaterial = m.idfMaterial
                             AND tom2.intRowStatus = 0
                   ),
                   0
                         ) AS TransferCount,
                   tro.idfTransferOut AS TransferID,
                   t.idfHumanCase AS HumanDiseaseReportID, 
                   t.idfVetCase AS VeterinaryDiseaseReportID,
                   t.idfMonitoringSession AS MonitoringSessionID, 
                   t.idfVector AS VectorID, 
                   t.intRowStatus AS RowStatus,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator,
                   0 AS RowAction,
                   0 AS RowSelectionIndicator,
                   @Page AS CurrentPage,
                   COUNT(*) OVER () AS TotalRowCount,
                   @InProgressCount AS InProgressCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = res.ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) disease
                    ON disease.idfsReference = t.idfsDiagnosis
                INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
                INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
                LEFT JOIN
                (
                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                ) f
                    ON m.idfMaterial = f.SampleID
                LEFT JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfMaterial = m.idfMaterial
                       AND tom.intRowStatus = 0
                LEFT JOIN dbo.tlbTransferOUT tro
                    ON tro.idfTransferOut = tom.idfTransferOut
                       AND tro.intRowStatus = 0
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                    ON functionalArea.idfsReference = d.idfsDepartmentName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
        ) AS x
        WHERE RowNum > @FirstRecord
              AND RowNum < @LastRecord
        ORDER BY RowNum;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TEST_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TEST_SEARCH_GETList
--
-- Description:	Get laboratory tests list for the various lab use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/21/2019 Initial release.
-- Stephen Long     03/28/2019 Added EIDSS local/field sample ID field.
-- Stephen Long     04/27/2019 Added EIDSS batch ID, observation ID and batch status type name for 
--                             additional test information.
-- Stephen Long     07/09/2019 Added disease to wildcard search.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     01/22/2020 Added site list parameter for site filtration.
-- Stephen Long     02/03/2020 Added non-laboratory test indicator where clause.
-- Stephen Long     03/10/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     06/06/2020 Added batch status type ID to the model.
-- Stephen Long     06/07/2020 Added additional search fields to the where clause.
-- Stephen Long     10/28/2020 Added where criteria from the test get list.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Moved pagination to table variable insert.
-- Stephen Long     01/05/2021 Removed sent to organization where criteria.
-- Stephen Long     01/07/2021 Removed leading wildcard (%) as full table scans are performed even 
--                             with indices resulting in long query run times.  Recommend NOT 
--                             putting those back in.
-- Stephen Long     09/24/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     12/08/2021 Changed pagination logic and removed optiont recompile.
-- Stephen Long     12/18/2021 Changed left to inner join on accession condition and sample 
--                             status types.
-- Stephen Long     07/26/2022 Changed from repair to reference repair function.
-- Stephen Long     08/04/2022 Add where criteria from the default testing listing, so only
--                             records for the simple search are filtered from the default set.
-- Stephen Long     09/28/2022 Bug fix on item 5111.
-- Stephen Long     10/17/2022 Bug fix on item 5018 - searching by dates.
-- Stephen Long     10/18/2022 Fix on external test indicator to use the field on the testing 
--                             table.
-- Stephen Long     10/21/2022 Added human disease report, veterinary disease report, monitoring 
--                             session and vector identifiers to the query.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_TEST_SEARCH_GETList]
		@LanguageID = N'en-US',
		@SearchString = N'PCR', -- Use 'Gnhnscvxb', 'Brucellosis', 'SWAZ200GEDD' as other tests.
		@TestUnassignedIndicator = NULL,
		@TestCompletedIndicator = NULL,
		@UserID = 161287150000872, -- rykermase
		@UserOrganizationID = 758210000000,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TEST_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @SearchString NVARCHAR(2000),
    @AccessionedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserOrganizationID BIGINT,
    @DaysFromAccessionDate INT = NULL,
    @Page INT = 1,
    @PageSize INT = 10,
    @SortColumn VARCHAR(200) = 'EIDSSLaboratorySampleID',
    @SortOrder VARCHAR(4) = 'DESC'
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @InProgressCount INT;
    DECLARE @InitialResults TABLE (ID BIGINT NOT NULL);
    DECLARE @FinalResults TABLE (ID BIGINT NOT NULL);
    DECLARE @FinalResultsDedup TABLE (ID BIGINT NOT NULL);
    DECLARE @SampleTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @SampleStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @AccessionConditionTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestNameTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestResultTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestCategoryTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @Diseases TABLE (ID BIGINT NOT NULL);
    DECLARE @FunctionalAreas TABLE (ID BIGINT NOT NULL);
    DECLARE @Favorites XML,
            @FirstRecord INT = (@Page - 1) * @PageSize,
            @LastRecord INT = (@Page * @PageSize + 1),
            @LanguageCode BIGINT;

    BEGIN TRY
        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);
        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @InitialResults
        SELECT t.idfTesting
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.idfsTestName IS NOT NULL
              AND t.blnNonLaboratoryTest = 0
              AND m.idfSendToOffice = @UserOrganizationID
              AND (
                      GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                      OR @DaysFromAccessionDate IS NULL
                  )
              AND (
                      (
                          t.idfBatchTest IS NULL
                          AND t.idfsTestStatus IN (   10001001, --Final
                                                      10001007, --Deleted
                                                      10001003, --In Progress
                                                      10001004, --Preliminary
                                                      10001006
                                                  ) --Amended
                      )
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001003 --In Progress
                             AND t.idfsTestStatus IN (   10001001, --Final 
                                                         10001003, -- In Progress
                                                         10001004, --Preliminary
                                                         10001006
                                                     ) --Amended
                         )
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001 --Closed
                             AND t.idfsTestStatus IN (   10001001, --Final 
                                                         10001003, -- In Progress
                                                         10001004, --Preliminary
                                                         10001006
                                                     ) --Amended
                         )
                  );

        INSERT INTO @SampleTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000087
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @SampleStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000015
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @AccessionConditionTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000110
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @Diseases
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000019
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestNameTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000097
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestResultTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000096
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestCategoryTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000095
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000001
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FunctionalAreas
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000164
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FinalResults
        SELECT ID
        FROM @InitialResults
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
        WHERE (
                  m.blnAccessioned = @AccessionedIndicator
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND @AccessionedIndicator IS NOT NULL
              ) -- Un-accessioned samples
              OR (
                     CONVERT(NVARCHAR(MAX), FORMAT(m.datAccession, 'g', @LanguageID)) LIKE '%' + @SearchString + '%'
                     OR CONVERT(NVARCHAR(MAX), FORMAT(t.datStartedDate, 'd', @LanguageID)) LIKE '%' + @SearchString + '%'
                     OR CONVERT(NVARCHAR(MAX), FORMAT(t.datConcludedDate, 'd', @LanguageID)) LIKE '%' + @SearchString + '%'
                     OR (
                            m.strBarcode IS NOT NULL
                            AND m.strBarcode <> ''
                            AND m.strBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strFieldBarcode IS NOT NULL
                            AND m.strFieldBarcode <> ''
                            AND m.strFieldBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCondition IS NOT NULL
                            AND m.strCondition <> ''
                            AND m.strCondition LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedCaseID IS NOT NULL
                            AND m.strCalculatedCaseID <> ''
                            AND m.strCalculatedCaseID LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedHumanName IS NOT NULL
                            AND m.strCalculatedHumanName <> ''
                            AND m.strCalculatedHumanName LIKE '%' + @SearchString + '%'
                        )
                 );

        INSERT INTO @FinalResults
        SELECT ID
        FROM @InitialResults
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
            INNER JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
        WHERE m.idfAnimal IS NOT NULL
              AND a.strAnimalCode LIKE '%' + @SearchString + '%';

        INSERT INTO @FinalResults
        SELECT ID
        FROM @InitialResults
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
        WHERE tro.strBarcode LIKE '%' + @SearchString + '%';

        IF
        (
            SELECT COUNT(*) FROM @SampleTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
            WHERE EXISTS
            (
                SELECT ID FROM @SampleTypes WHERE m.idfsSampleType = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @SampleStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
            WHERE (
                      m.idfsSampleStatus IS NULL
                      OR m.idfsSampleStatus = 10015007
                  ) --In Repository
                  AND EXISTS
            (
                SELECT ID FROM @SampleStatusTypes WHERE m.idfsSampleStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @AccessionConditionTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
            WHERE EXISTS
            (
                SELECT ID
                FROM @AccessionConditionTypes
                WHERE m.idfsAccessionCondition = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestNameTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
            WHERE EXISTS
            (
                SELECT ID FROM @TestNameTypes WHERE t.idfsTestName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestResultTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
            WHERE EXISTS
            (
                SELECT ID FROM @TestResultTypes WHERE t.idfsTestResult = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestCategoryTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
            WHERE EXISTS
            (
                SELECT ID FROM @TestCategoryTypes WHERE t.idfsTestCategory = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
            WHERE EXISTS
            (
                SELECT ID FROM @TestStatusTypes WHERE t.idfsTestStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @FunctionalAreas
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                INNER JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
            WHERE m.idfInDepartment IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @FunctionalAreas WHERE d.idfsDepartmentName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @Diseases
        ) > 0
        BEGIN
            INSERT INTO @FinalResults
            SELECT ID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = ID
            WHERE t.idfsDiagnosis IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE t.idfsDiagnosis = ID
            );
        END

        INSERT INTO @FinalResultsDedup
        SELECT *
        FROM @FinalResults;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SET @InProgressCount =
        (
            SELECT COUNT(*)
            FROM @FinalResults res
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = res.ID
                       AND t.intRowStatus = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
            WHERE (t.idfsTestStatus = 10001003)
                  AND (t.idfsTestName IS NOT NULL)
                  AND (t.blnNonLaboratoryTest = 0)
                  AND (
                          (
                              t.idfBatchTest IS NULL
                              AND (
                                      t.idfsTestStatus = 10001001 --Final
                                      OR t.idfsTestStatus = 10001003 --In Progress
                                      OR t.idfstestStatus = 10001006 --Amended
                                  )
                          )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001003 --In Progress
                                 AND (
                                         t.idfsTestStatus = 10001001 --Final 
                                         OR t.idfstestStatus = 10001006 --Amended
                                     )
                             )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001001 --Closed
                                 AND (
                                         t.idfsTestStatus = 10001001 --Final
                                         OR t.idfsTestStatus = 10001003 --In Progress
                                         OR t.idfsTestStatus = 10001004 --Preliminary
                                         OR t.idfstestStatus = 10001006 --Amended
                                     )
                             )
                      )
        );

        SELECT TestID,
               FavoriteIndicator,
               SiteID,
               CurrentSiteID,
               TestNameTypeID,
               TestCategoryTypeID,
               TestResultTypeID,
               TestStatusTypeID,
               PreviousTestStatusTypeID,
               DiseaseID,
               SampleID,
               RootSampleID,
               ParentSampleID,
               SentToOrganizationID,
               BatchTestID,
               ObservationID,
               TestNumber,
               Note,
               StartedDate,
               ResultDate,
               TestedByOrganizationID,
               TestedByPersonID,
               ResultEnteredByOrganizationID,
               ResultEnteredByPersonID,
               ValidatedByOrganizationID,
               ValidatedByPersonID,
               ReadOnlyIndicator,
               NonLaboratoryTestIndicator,
               ExternalTestIndicator,
               PerformedByOrganizationID,
               ReceivedDate,
               ContactPersonName,
               EIDSSReportOrSessionID,
               PatientOrFarmOwnerName,
               SampleTypeName,
               DiseaseName,
               EIDSSLaboratorySampleID,
               EIDSSLocalOrFieldSampleID,
               TestNameTypeName,
               TestStatusTypeName,
               TestResultTypeName,
               TestCategoryTypeName,
               AccessionDate,
               FunctionalAreaName,
               AccessionConditionTypeID,
               SampleStatusTypeID,
               AccessionConditionOrSampleStatusTypeName,
               AccessionComment,
               EIDSSAnimalID,
               TransferCount,
               TransferID,
               HumanDiseaseReportID, 
               VeterinaryDiseaseReportID, 
               MonitoringSessionID, 
               VectorID, 
               RowStatus,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
               RowAction,
               RowSelectionIndicator,
               CurrentPage,
               TotalRowCount,
               InProgressCount
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSReportOrSessionID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedCaseID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strCalculatedHumanName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PatientOrFarmOwnerName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strCalculatedHumanName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.strBarcode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.strBarcode
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       sampleType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SampleTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       sampleType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       disease.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       disease.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testNameType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestNameTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testNameType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testStatusType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testStatusType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStartedDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       t.datStartedDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestStartedDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       t.datStartedDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CASE
                                                           WHEN m.blnAccessioned = 0
                                                                AND m.idfsAccessionCondition IS NULL THEN
                                                               'Un-accessioned'
                                                           WHEN m.idfsSampleStatus IS NULL THEN
                                                               accessionConditionType.name
                                                           WHEN m.idfsSampleStatus = 10015007 --In Repository
                                               THEN
                                                               accessionConditionType.name
                                                           ELSE
                                                               sampleStatusType.name
                                                       END
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testResultType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestResultTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testResultType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       t.datConcludedDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ResultDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       t.datConcludedDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TestCategoryTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       testCategoryType.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TestCategoryTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       testCategoryType.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       m.datAccession
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AccessionDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       m.datAccession
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'FunctionalAreaName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       functionalArea.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'FunctionalAreaName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       functionalArea.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSAnimalID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       a.strAnimalCode
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSAnimalID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       a.strAnimalCode
                                               END DESC
                                     ) AS RowNum,
                   t.idfTesting AS TestID,
                   CASE
                       WHEN f.SampleID IS NULL THEN
                           0
                       ELSE
                           1
                   END AS FavoriteIndicator,
                   m.idfsSite AS SiteID,
                   m.idfsCurrentSite AS CurrentSiteID,
                   t.idfsTestName AS TestNameTypeID,
                   t.idfsTestCategory AS TestCategoryTypeID,
                   t.idfsTestResult AS TestResultTypeID,
                   t.idfsTestStatus AS TestStatusTypeID,
                   t.PreviousTestStatusID AS PreviousTestStatusTypeID,
                   t.idfsDiagnosis AS DiseaseID,
                   m.idfMaterial AS SampleID,
                   m.idfRootMaterial AS RootSampleID,
                   m.idfParentMaterial AS ParentSampleID,
                   m.idfSendToOffice AS SentToOrganizationID,
                   t.idfBatchTest AS BatchTestID,
                   t.idfObservation AS ObservationID,
                   t.intTestNumber AS TestNumber,
                   t.strNote AS Note,
                   t.datStartedDate AS StartedDate,
                   t.datConcludedDate AS ResultDate,
                   t.idfTestedByOffice AS TestedByOrganizationID,
                   t.idfTestedByPerson AS TestedByPersonID,
                   t.idfResultEnteredByOffice AS ResultEnteredByOrganizationID,
                   t.idfResultEnteredByPerson AS ResultEnteredByPersonID,
                   t.idfValidatedByOffice AS ValidatedByOrganizationID,
                   t.idfValidatedByPerson AS ValidatedByPersonID,
                   t.blnReadOnly AS ReadOnlyIndicator,
                   t.blnNonLaboratoryTest AS NonLaboratoryTestIndicator,
                   t.blnExternalTest AS ExternalTestIndicator,
                   t.idfPerformedByOffice AS PerformedByOrganizationID,
                   t.datReceivedDate AS ReceivedDate,
                   t.strContactPerson AS ContactPersonName,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   m.strCalculatedHumanName AS PatientOrFarmOwnerName,
                   sampleType.name AS SampleTypeName,
                   disease.name AS DiseaseName,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   testNameType.name AS TestNameTypeName,
                   testStatusType.name AS TestStatusTypeName,
                   testResultType.name AS TestResultTypeName,
                   testCategoryType.name AS TestCategoryTypeName,
                   m.datAccession AS AccessionDate,
                   functionalArea.name AS FunctionalAreaName,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   (CASE
                        WHEN m.blnAccessioned = 0
                             AND m.idfsAccessionCondition IS NULL THEN
                            'Un-accessioned'
                        WHEN m.idfsSampleStatus IS NULL THEN
                            accessionConditionType.name
                        WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                            accessionConditionType.name
                        ELSE
                            sampleStatusType.name
                    END
                   ) AS AccessionConditionOrSampleStatusTypeName,
                   m.strCondition AS AccessionComment,
                   a.strAnimalCode AS EIDSSAnimalID,
                   ISNULL(
                   (
                       SELECT COUNT(NULLIF(tom2.idfTransferOUT, 0))
                       FROM dbo.tlbTransferOutMaterial tom2
                       WHERE tom2.idfMaterial = m.idfMaterial
                             AND tom2.intRowStatus = 0
                   ),
                   0
                         ) AS TransferCount,
                   tro.idfTransferOut AS TransferID,
                   t.idfHumanCase AS HumanDiseaseReportID, 
                   t.idfVetCase AS VeterinaryDiseaseReportID,
                   t.idfMonitoringSession AS MonitoringSessionID, 
                   t.idfVector AS VectorID, 
                   t.intRowStatus AS RowStatus,
                   1 AS ReadPermissionIndicator,
                   1 AS AccessToPersonalDataPermissionIndicator,
                   1 AS AccessToGenderAndAgeDataPermissionIndicator,
                   1 AS WritePermissionIndicator,
                   1 AS DeletePermissionIndicator,
                   0 AS RowAction,
                   0 AS RowSelectionIndicator,
                   @Page AS CurrentPage,
                   COUNT(*) OVER () AS TotalRowCount,
                   @InProgressCount AS InProgressCount
            FROM @FinalResultsDedup res
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = res.ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) disease
                    ON disease.idfsReference = t.idfsDiagnosis
                INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
                INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
                LEFT JOIN
                (
                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                ) f
                    ON m.idfMaterial = f.SampleID
                LEFT JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfMaterial = m.idfMaterial
                       AND tom.intRowStatus = 0
                LEFT JOIN dbo.tlbTransferOUT tro
                    ON tro.idfTransferOut = tom.idfTransferOut
                       AND tro.intRowStatus = 0
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                    ON functionalArea.idfsReference = d.idfsDepartmentName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
        ) AS x
        WHERE RowNum > @FirstRecord
              AND RowNum < @LastRecord
        ORDER BY RowNum;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_OMM_Case_GetDetail]...';


GO
-- ================================================================================================
-- Name: USP_OMM_Case_GetDetail
--
-- Description: Gets details of an outbreak case summary.
--          
-- Author: Doug Albanese
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Doug Albanese	05/29/2010 Changes for OMUC07 (Vet Disease details)
-- Doug Albanese	07/01/2019 Changes for aligning the Human Disease Report for retreival
-- Stephen Long     04/25/2022 Cleaned up formatting and removed human disease report specific.
-- Stephen Long     06/23/2022 Added farm name to the query.
-- Doug Albanese	07/25/2022	 Changes 10012002 to 10012004. 10012002 wasn't a value that existed in the Base Reference for Avian.
--	Doug Albanese	07/26/2022	Add field CaseQuestionnaireTemplateId, to correctly identify a form that has been answered
-- Doug Albanese	 10/25/2022	 Refactored to provide the correct observation ID for Case Questionnaire.
-- Sample code
/*

EXEC dbo.USP_OMM_Case_GetDetail
	@LanguageID = 'en-US',
	@OutbreakCaseReportUID = 12

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_OMM_Case_GetDetail]
(
    @LanguageID NVARCHAR(50),
    @OutbreakCaseReportUID BIGINT = -1
)
AS
BEGIN
    BEGIN TRY
        SELECT ocr.OutBreakCaseReportUID AS CaseId,
               ocr.idfOutbreak AS OutbreakId,
               osp.OutbreakSpeciesTypeID AS CaseTypeId, 
               ocr.strOutbreakCaseID AS EIDSSCaseId,
               CAST(ocr.IsPrimaryCaseFlag AS BIT) AS PrimaryCaseIndicator,
               ocr.OutbreakCaseClassificationID AS ClassificationTypeId,
               ocr.OutbreakCaseStatusID AS StatusTypeId,
               ocr.idfHumanCase AS HumanDiseaseReportId,
               ocr.idfVetCase AS VeterinaryDiseaseReportId,
               CASE
                   WHEN f.strNationalName IS NULL THEN
                       f.strInternationalName
                   WHEN f.strNationalName = '' THEN
                       f.strInternationalName
                   ELSE
                       f.strNationalName
               END AS FarmName,
               ocr.OutbreakCaseObservationID AS CaseQuestionnaireObservationId,
               null AS CaseQuestionnaireObservationFormTypeId,
               ocr.CaseEPIObservationID,
               null AS CaseEPIObservationFormTypeId,
               ocr.AuditCreateDTM AS DateEntered,
               ocr.AuditUpdateDTM AS DateLastUpdated,
			   osp.CaseQuestionaireTemplateID AS CaseQuestionnaireTemplateId
        FROM dbo.OutbreakCaseReport ocr
            LEFT OUTER JOIN dbo.OutbreakSpeciesParameter osp
                ON osp.idfOutbreak = ocr.idfOutbreak
                   AND osp.intRowStatus = 0
            LEFT JOIN dbo.tlbVetCase vc 
                ON vc.idfVetCase = ocr.idfVetCase 
            LEFT JOIN dbo.tlbFarm f
                ON f.idfFarm = vc.idfFarm
        WHERE ocr.OutBreakCaseReportUID = @OutbreakCaseReportUID 
              AND (ocr.idfVetCase IS NOT NULL
                  AND (
                          vc.idfsCaseType = 10012004
                          AND osp.OutbreakSpeciesTypeID = 10514002
                      )
                  OR (
                         vc.idfsCaseType = 10012003
                         AND osp.OutbreakSpeciesTypeID = 10514003
                     ) OR ocr.idfVetCase IS NULL);
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_OMM_Case_GetList]...';


GO

-- ================================================================================================
-- Name: USP_OMM_Case_GetList
--
-- Description: Gets a list of outbreak cases.
--          
-- Author: Doug Albanese
-- Revision History:
-- Name            Date       Change Detail
-- --------------- ---------- --------------------------------------------------------------------
-- Doug Albanese   05/20/2019 Added capabilities for Vet Disease retrieval
-- Doug Albanese   01/11/2021 Changed the output for the Date Entered so that it can be converted, 
--                            when switching languages.
-- Doug Albanese   01/22/2021 Changed the OutbreakSpeciesParameter table to be joined via a LEFT 
--                            OUTER JOIN
-- Doug Albanese   02/09/2021 Correction to fix migrated data between eidss6.1 content and missing 
--                            EIDSS 7 data.
-- Doug Albanese   09/29/2021 Refactored to work with the MVC gridview taghelper
-- Doug Albanese   09/30/2021 Clean up of unecessary content that was confusing EF
-- Stephen Long    04/23/2022 Cleaned up formatting and changed over to location hierarchy.
-- Stephen Long    05/12/2022 Added distinct to remove duplicates on human and vet case.
-- Stephen Long    06/05/2022 Temporary hard-code for human outbreak type to handle convert contact
--                            to case, so application will navigate to correct case details view.
-- Doug Albanese   06/15/2022 I forgot to add a comment here, from about a week ago for the removal 
--                            for SpeciesTypeName...which was causing duplicate rows to show up in 
--                            the case listing.
-- Stephen Long    06/20/2022 Added human and veterinary disease report identifiers.
-- Stephen Long    07/23/2022 Added search term check on human and vet checks; otherwise lab module
--                            returns nothing, and disease ID and patient/farm owner name.
-- Doug Albanese   07/25/2022 Changes 10012002 to 10012004. 10012002 wasn't a value that existed 
--                            in the Base Reference for Avian.
-- Stephen Long    07/28/2022 Fix on veterinary case get where criteria; was puilling back records 
--                            for outbreak sessions that did not have any cases.
-- Doug Albanese  09/08/2022  Correction for Vet Case Listings
-- Stephen Long    10/25/2022 Fix to remove duplicate cases.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_OMM_Case_GetList]
(
    @LanguageID NVARCHAR(50),
    @OutbreakID BIGINT = NULL,
    @SearchTerm NVARCHAR(100) = NULL,
    @HumanMasterID BIGINT = NULL,
    @FarmMasterID BIGINT = NULL,
    @TodaysFollowUpsIndicator BIT = NULL,
    @Page INT = 1,
    @PageSize INT = 10,
    @SortColumn NVARCHAR(30) = 'EIDSSCaseID',
    @SortOrder NVARCHAR(4) = 'DESC'
)
AS
BEGIN
    DECLARE @FirstRec INT = (@Page - 1) * @Pagesize,
            @LastRec INT = (@Page * @PageSize + 1);

    BEGIN TRY
        DECLARE @InitialResults TABLE
        (
            OutbreakID BIGINT NOT NULL,
            EIDSSOutbreakID NVARCHAR(200) NOT NULL,
            CaseID BIGINT NOT NULL,
            EIDSSCaseID NVARCHAR(200) NOT NULL,
            HumanDiseaseReportID BIGINT NULL,
            VeterinaryDiseaseReportID BIGINT NULL,
            DiseaseID BIGINT NULL, 
            DiseaseName NVARCHAR(200) NULL,
            PatientOrFarmOwnerName NVARCHAR(MAX) NULL, 
            SpeciesTypeName NVARCHAR(200) NULL,
            CaseTypeName NVARCHAR(200) NOT NULL,
            StatusTypeName NVARCHAR(200) NULL,
            ClassificationTypeName NVARCHAR(200) NULL,
            CaseLocation NVARCHAR(200) NULL,
            DateEntered DATETIME NOT NULL,
            DateOfSymptomOnset DATETIME NULL,
            InvestigationDate DATETIME NULL,
            ReportedByPersonName NVARCHAR(200) NULL,
            InvestigatedByPersonName NVARCHAR(200) NULL,
            TotalSickAnimalQuantity INT NULL,
            TotalDeadAnimalQuantity INT NULL,
            PrimaryCaseIndicator INT NOT NULL,
            MonitoringDuration INT NULL,
            MonitoringFrequency INT NULL,
			OutbreakTypeID BIGINT NULL
        );

        DECLARE @FinalResults TABLE
        (
            OutbreakID BIGINT NOT NULL,
            EIDSSOutbreakID NVARCHAR(200) NOT NULL,
            CaseID BIGINT NOT NULL,
            EIDSSCaseID NVARCHAR(200) NOT NULL,
            HumanDiseaseReportID BIGINT NULL,
            VeterinaryDiseaseReportID BIGINT NULL,
            DiseaseID BIGINT NULL, 
            DiseaseName NVARCHAR(200) NULL,
            PatientOrFarmOwnerName NVARCHAR(MAX) NULL, 
            SpeciesTypeName NVARCHAR(200) NULL,
            CaseTypeName NVARCHAR(200) NOT NULL,
            StatusTypeName NVARCHAR(200) NULL,
            ClassificationTypeName NVARCHAR(200) NULL,
            CaseLocation NVARCHAR(200) NULL,
            DateEntered DATETIME NOT NULL,
            DateOfSymptomOnset DATETIME NULL,
            InvestigationDate DATETIME NULL,
            ReportedByPersonName NVARCHAR(200) NULL,
            InvestigatedByPersonName NVARCHAR(200) NULL,
            TotalSickAnimalQuantity INT NULL,
            TotalDeadAnimalQuantity INT NULL,
            PrimaryCaseIndicator INT NOT NULL,
            MonitoringDuration INT NULL,
            MonitoringFrequency INT NULL,
			OutbreakTypeID BIGINT NULL
        );

        IF (@OutbreakID IS NOT NULL OR @HumanMasterID IS NOT NULL OR @SearchTerm IS NOT NULL)
        BEGIN
            INSERT INTO @InitialResults
            SELECT DISTINCT
                ocr.idfOutbreak,
                o.strOutbreakID,
                ocr.OutBreakCaseReportUID,
                ocr.strOutbreakCaseID,
                ocr.idfHumanCase,
                NULL,
                disease.idfsReference, 
                disease.name,
                ISNULL(h.strLastName, N'') + ISNULL(', ' + h.strFirstName, '') + ISNULL(' ' + h.strSecondName, ''),
                outbreakSpeciesGroupType.name,
                caseType.name,
                statusType.name,
                classificationType.name,
                lh.AdminLevel2Name + ', ' + lh.AdminLevel1Name,
                hc.datEnteredDate,
                hc.datOnSetDate,
                hc.datInvestigationStartDate,
                NULL,
                NULL,
                NULL,
                NULL,
                COALESCE(IsPrimaryCaseFlag,0),
                osp.CaseMonitoringDuration,
                osp.CaseMonitoringFrequency,
				10513001 -- TODO - Handle convert to case for outbreak types of veterinary or zoonotic?
            FROM dbo.OutbreakCaseReport ocr
                INNER JOIN dbo.tlbOutbreak o
                    ON o.idfOutbreak = ocr.idfOutbreak
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = ocr.idfHumanCase
                LEFT JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                    ON disease.idfsReference = hc.idfsFinalDiagnosis
                LEFT OUTER JOIN dbo.OutbreakSpeciesParameter osp
                    ON osp.idfOutbreak = ocr.idfOutbreak
                       AND osp.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON gl.idfGeoLocation = h.idfCurrentResidenceAddress
                       AND gl.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000011) classificationType
                    ON classificationType.idfsReference = ocr.OutbreakCaseClassificationID
                LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000520) statusType
                    ON statusType.idfsReference = ocr.OutbreakCaseStatusID
                LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000513) caseType
                    ON caseType.idfsReference = 10513001 -- TODO - Handle convert to case for outbreak types of veterinary or zoonotic?
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000514) outbreakSpeciesGroupType
                    ON outbreakSpeciesGroupType.idfsReference = osp.OutbreakSpeciesTypeID
            WHERE ocr.idfHumanCase IS NOT NULL
   			      AND osp.OutbreakSpeciesTypeID IN (10514001)
                  AND ocr.intRowStatus = 0
                  AND (
                          ocr.idfOutbreak = @OutbreakID
                          OR @OutbreakID IS NULL
                      )
                  AND (
                          h.idfHumanActual = @HumanMasterID
                          OR @HumanMasterID IS NULL
                      );

			
        END

        IF (@OutbreakID IS NOT NULL OR @FarmMasterID IS NOT NULL OR @SearchTerm IS NOT NULL)
        BEGIN
            INSERT INTO @InitialResults
            SELECT DISTINCT ocr.idfOutbreak,
                   o.strOutbreakID,
                   ocr.OutBreakCaseReportUID,
                   ocr.strOutbreakCaseID,
                   NULL,
                   ocr.idfVetCase,
                   disease.idfsReference, 
                   disease.name,
                   ISNULL(h.strLastName, N'') + ISNULL(', ' + h.strFirstName, '') + ISNULL(' ' + h.strSecondName, ''),
                   --outbreakSpeciesGroupType.name,
				  osp.OutbreakSpeciesTypeID as name,
                   caseType.name,
                   statusType.name,
                   classificationType.name,
                   lh.AdminLevel2Name + ', ' + lh.AdminLevel1Name,
                   vc.datEnteredDate,
                   vc.datReportDate,
                   vc.datInvestigationDate,
                   ISNULL(personReportedBy.strFamilyName, N'') + ISNULL(', ' + personReportedBy.strFirstName, '')
                   + ISNULL(' ' + personReportedBy.strSecondName, ''),
                   ISNULL(personInvestigatedBy.strFamilyName, N'')
                   + ISNULL(', ' + personInvestigatedBy.strFirstName, '')
                   + ISNULL(' ' + personInvestigatedBy.strSecondName, ''),
                   (CASE
                        WHEN vc.idfsCaseType = 10012003 THEN
                            ISNULL(f.intLivestockSickAnimalQty, '0')
                        ELSE
                            ISNULL(f.intAvianSickAnimalQty, '0')
                    END
                   ),
                   (CASE
                        WHEN vc.idfsCaseType = 10012003 THEN
                            ISNULL(f.intLivestockDeadAnimalQty, '0')
                        ELSE
                            ISNULL(f.intAvianDeadAnimalQty, '0')
                    END
                   ),
                   IsPrimaryCaseFlag,
                   osp.CaseMonitoringDuration,
                   osp.CaseMonitoringFrequency,
				   caseType.idfsReference
            FROM dbo.OutbreakCaseReport ocr
                INNER JOIN dbo.tlbOutbreak o
                    ON o.idfOutbreak = ocr.idfOutbreak
                INNER JOIN dbo.tlbVetCase vc
                    ON vc.idfVetCase = ocr.idfVetCase
                LEFT JOIN dbo.tlbFarm f
                    ON f.idfFarm = vc.idfFarm
                LEFT JOIN dbo.tlbHuman h ON h.idfHuman = f.idfHuman
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                    ON disease.idfsReference = vc.idfsFinalDiagnosis
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON gl.idfGeoLocation = f.idfFarmAddress
                       AND gl.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = gl.idfsLocation
                LEFT OUTER JOIN dbo.OutbreakSpeciesParameter osp
                    ON osp.idfOutbreak = ocr.idfOutbreak
                       AND osp.intRowStatus = 0
                LEFT JOIN dbo.tlbPerson personInvestigatedBy
                    ON personInvestigatedBy.idfPerson = vc.idfPersonInvestigatedBy
                LEFT JOIN dbo.tlbPerson personReportedBy
                    ON personReportedBy.idfPerson = vc.idfPersonReportedBy
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000011) classificationType
                    ON classificationType.idfsReference = ocr.OutbreakCaseClassificationID
                LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000520) statusType
                    ON statusType.idfsReference = ocr.OutbreakCaseStatusID
                LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000513) caseType
                    ON caseType.idfsReference = 10513002
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000514) outbreakSpeciesGroupType
                    ON outbreakSpeciesGroupType.idfsReference = osp.OutbreakSpeciesTypeID
            WHERE ocr.idfVetCase IS NOT NULL
                  AND ((
                          vc.idfsCaseType = 10012004
                          AND osp.OutbreakSpeciesTypeID = 10514002
                      )
                  OR (
                         vc.idfsCaseType = 10012003
                         AND osp.OutbreakSpeciesTypeID = 10514003
                     ))
                  AND ocr.intRowStatus = 0
                  AND (
                      ocr.idfOutbreak = @OutbreakID
                      OR @OutbreakID IS NULL
                  )
                  AND (
                      f.idfFarmActual = @FarmMasterID
                      OR @FarmMasterID IS NULL
                  );
        END

        IF @TodaysFollowUpsIndicator = 1
        BEGIN
            DELETE FROM @InitialResults
            WHERE CaseID NOT IN (
                                    SELECT CaseID
                                    FROM @InitialResults
                                    WHERE DateEntered > DATEADD(DAY, -MonitoringDuration, GETDATE())
                                          AND DATEDIFF(DAY, DateEntered, GETDATE()) % MonitoringFrequency = 0
                                );
        END

        IF @SearchTerm IS NULL
        BEGIN
            INSERT INTO @FinalResults
            SELECT OutbreakID,
                   EIDSSOutbreakID,
                   CaseID,
                   EIDSSCaseID,
                   HumanDiseaseReportID,
                   VeterinaryDiseaseReportID,
                   DiseaseID,
                   DiseaseName,
                   PatientOrFarmOwnerName, 
                   SpeciesTypeName,
                   CaseTypeName,
                   StatusTypeName,
                   ClassificationTypeName,
                   CaseLocation,
                   DateEntered,
                   DateOfSymptomOnset,
                   InvestigationDate,
                   ReportedByPersonName,
                   InvestigatedByPersonName,
                   TotalSickAnimalQuantity,
                   TotalDeadAnimalQuantity,
                   PrimaryCaseIndicator,
                   MonitoringDuration,
                   MonitoringFrequency,
				   OutbreakTypeID
            FROM @InitialResults;
        END
        ELSE
        BEGIN
            INSERT INTO @FinalResults
            SELECT DISTINCT
                OutbreakID,
                EIDSSOutbreakID,
                CaseID,
                EIDSSCaseID,
                HumanDiseaseReportID,
                VeterinaryDiseaseReportID,
                DiseaseID,
                DiseaseName,
                PatientOrFarmOwnerName,
                SpeciesTypeName,
                CaseTypeName,
                StatusTypeName,
                ClassificationTypeName,
                CaseLocation,
                DateEntered,
                DateOfSymptomOnset,
                InvestigationDate,
                ReportedByPersonName,
                InvestigatedByPersonName,
                TotalSickAnimalQuantity,
                TotalDeadAnimalQuantity,
                PrimaryCaseIndicator,
                MonitoringDuration,
                MonitoringFrequency,
				OutbreakTypeID
            FROM @InitialResults
            WHERE EIDSSOutbreakID LIKE '%' + @SearchTerm + '%'
                  OR EIDSSCaseID LIKE '%' + @SearchTerm + '%'
                  OR HumanDiseaseReportID LIKE '%' + @SearchTerm + '%'
                  OR VeterinaryDiseaseReportID LIKE '%' + @SearchTerm + '%'
                  OR CaseTypeName LIKE '%' + @SearchTerm + '%'
                  OR StatusTypeName LIKE '%' + @SearchTerm + '%'
                  OR DateOfSymptomOnset LIKE '%' + @SearchTerm + '%'
                  OR ClassificationTypeName LIKE '%' + @SearchTerm + '%'
                  OR CaseLocation LIKE '%' + @SearchTerm + '%'
                  OR DateEntered LIKE '%' + @SearchTerm + '%'
        END;

        WITH CTEResults
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'EIDSSOutbreakID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       EIDSSOutbreakID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSOutbreakID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       EIDSSOutbreakID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSCaseID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       EIDSSCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EIDSSCaseID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       EIDSSCaseID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'CaseTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CaseTypeName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'CaseTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CaseTypeName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'StatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       StatusTypeName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'StatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       StatusTypeName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       DiseaseName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       DiseaseName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SpeciesTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       SpeciesTypeName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SpeciesTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       SpeciesTypeName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DateOfSymptomOnset'
                                                        AND @SortOrder = 'ASC' THEN
                                                       DateOfSymptomOnset
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DateOfSymptomOnset'
                                                        AND @SortOrder = 'DESC' THEN
                                                       DateOfSymptomOnset
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'InvestigationDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       InvestigationDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'InvestigationDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       InvestigationDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ClassificationTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ClassificationTypeName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ClassificationTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ClassificationTypeName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'CaseLocation'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CaseLocation
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'CaseLocation'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CaseLocation
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DateEntered'
                                                        AND @SortOrder = 'ASC' THEN
                                                       DateEntered
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DateEntered'
                                                        AND @SortOrder = 'DESC' THEN
                                                       DateEntered
                                               END DESC
                                     ) AS ROWNUM,
                   COUNT(*) OVER () AS [RowCount],
                   EIDSSOutbreakID,
                   CaseID,
                   EIDSSCaseID,
                   HumanDiseaseReportID, 
                   VeterinaryDiseaseReportID, 
                   DiseaseID,
                   DiseaseName,
                   PatientOrFarmOwnerName,
                   SpeciesTypeName,
                   CaseTypeName,
                   StatusTypeName,
                   ClassificationTypeName,
                   CaseLocation,
                   DateEntered,
                   DateOfSymptomOnset,
                   InvestigationDate,
                   ReportedByPersonName,
                   InvestigatedByPersonName,
                   TotalSickAnimalQuantity,
                   TotalDeadAnimalQuantity,
                   PrimaryCaseIndicator,
                   MonitoringDuration,
                   MonitoringFrequency,
				   OutbreakTypeID
            FROM @FinalResults
           )
        SELECT DISTINCT EIDSSOutbreakID,
               CaseID,
               EIDSSCaseID,
               HumanDiseaseReportID, 
               VeterinaryDiseaseReportID, 
               DiseaseID,
               DiseaseName,
               PatientOrFarmOwnerName,
               --SpeciesTypeName,
               CaseTypeName,
               StatusTypeName,
               ClassificationTypeName,
               CaseLocation,
               DateEntered,
               DateOfSymptomOnset,
               InvestigationDate,
               ReportedByPersonName,
               InvestigatedByPersonName,
               TotalSickAnimalQuantity,
               TotalDeadAnimalQuantity,
               PrimaryCaseIndicator,
               MonitoringDuration,
               MonitoringFrequency,
			   OutbreakTypeID,
               [RowCount],
               (
                   SELECT COUNT(*) FROM dbo.OutbreakCaseReport WHERE intRowStatus = 0
               ) AS TotalRowCount,
               CurrentPage = @Page,
               TotalPages = ([RowCount] / @PageSize) + IIF([RowCount] % @PageSize > 0, 1, 0)
        FROM CTEResults
        WHERE RowNum > @FirstRec
              AND RowNum < @LastRec;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_OMM_Contact_GetList]...';


GO
-- ================================================================================================
-- Name: USP_OMM_Contact_GetList
--
-- Description: Gets a list of contacts for a given outbreak case.
--          
-- Author: Doug Albanese
-- Revision History:
--	Name				Date		Change Detail
--	---------------	----------	--------------------------------------------------------------------
--	Doug Albanese	02/20/2019	Added Procedure to obtain list of contacts for given case
--	Doug Albanese	06/08/2020	Added phone number to the data return
--	Stephen Long	04/08/2022	Added new pagination and sorting parameters and logic.
--	Stephen Long	04/29/2022	Updated parameter names and corrected contact relationship type join.
--	Stephen Long	05/01/2022	Added age and citizenship type name fields and join.
--	Stephen Long	05/03/2022	Added additional rules for removing when today's followups is 
--								checked.
--	Doug Albanese	08/15/2022	Changed ContactStatusTypeID to ContactStatusID, and ContactStatusTypeName to ContactStatusName
--  Stephen Long    10/25/2022  Added additional criteria for outbreak species type eliminate 
--                              duplicates on outbreak sessions with multiple species checked.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_OMM_Contact_GetList]
(
    @LanguageID NVARCHAR(50),
    @PageNumber INT = 1,
    @PageSize INT = 10,
    @SortColumn NVARCHAR(30) = 'ContactName',
    @SortOrder NVARCHAR(4) = 'ASC',
    @CaseID BIGINT = NULL,
    @OutbreakID BIGINT = NULL,
    @SearchTerm NVARCHAR(100) = NULL,
    @TodaysFollowUpsIndicator BIT = NULL
)
AS
BEGIN
    DECLARE @ReturnCode INT = 0;
    DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
    DECLARE @FirstRec INT = (@PageNumber - 1) * @PageSize,
            @LastRec INT = (@PageNumber * @PageSize + 1),
            @TotalRowCount INT;

    DECLARE @Contacts AS TABLE
    (
        TotalRowCount BIGINT NULL,
        CaseContactID BIGINT NULL,
        CaseID BIGINT NULL, 
        OutbreakTypeID BIGINT, 
        DiseaseID BIGINT, 
        ContactedHumanCasePersonID BIGINT NULL,
        PersonalIDTypeID BIGINT NULL, 
        PersonalID NVARCHAR(200) NULL, 
        FirstName NVARCHAR(200) NULL, 
        SecondName NVARCHAR(200) NULL, 
        LastName NVARCHAR(200) NULL, 
        ContactName NVARCHAR(200) NULL,
        DateOfBirth DATETIME NULL, 
        Age INT NULL, 
        GenderTypeID BIGINT NULL, 
        GenderTypeName NVARCHAR(200) NULL,
        CitizenshipTypeID BIGINT NULL, 
        CitizenshipTypeName NVARCHAR(200) NULL, 
        AddressID BIGINT NULL, 
        LocationID BIGINT NULL, 
        AdministrativeLevel0ID BIGINT NULL, 
        AdministrativeLevel1ID BIGINT NULL, 
        AdministrativeLevel2ID BIGINT NULL, 
        SettlementTypeID BIGINT NULL, 
        SettlementID BIGINT NULL, 
        Apartment NVARCHAR(200) NULL, 
        Building NVARCHAR(200) NULL, 
        House NVARCHAR(200) NULL, 
        StreetID BIGINT NULL, 
        Street NVARCHAR(200) NULL,
        PostalCodeID BIGINT NULL, 
        PostalCode NVARCHAR(200) NULL,
        ForeignAddressString NVARCHAR(200) NULL, 
        DateOfLastContact DATETIME NULL,
        PlaceOfLastContact NVARCHAR(200) NULL,
        Comment NVARCHAR(500) NULL,
        ContactTypeID BIGINT NULL,
        ContactTypeName NVARCHAR(200) NULL,
        ContactStatusID BIGINT NULL,
        ContactStatusName NVARCHAR(200) NULL,
        ContactRelationshipTypeID BIGINT NULL,
        ContactRelationshipTypeName NVARCHAR(200) NULL,
        CurrentLocation NVARCHAR(200) NULL,
        ContactTracingObservationID BIGINT NULL,
        ContactTracingDuration INT NULL,
        ContactTracingFrequency INT NULL,
        VeterinaryDiseaseReportTypeID BIGINT NULL, 
        EIDSSPersonID NVARCHAR(50),
        HumanID BIGINT NULL, 
        HumanMasterID BIGINT,
        FarmMasterID BIGINT NULL, 
        ContactPhoneTypeID BIGINT NULL, 
        ContactPhoneCountryCode INT NULL, 
        ContactPhone NVARCHAR(50) NULL
    );

    DECLARE @OutbreakCaseReportUIDs AS TABLE (OutbreakCaseReportUID BIGINT);

    IF COALESCE(@OutbreakID, 0) > 0
    BEGIN
        INSERT INTO @OutbreakCaseReportUIDs
        SELECT OutbreakCaseReportUID
        FROM dbo.OutbreakCaseReport
        WHERE idfOutbreak = @OutbreakId;
    END

    IF COALESCE(@CaseID, 0) > 0
    BEGIN
        INSERT INTO @OutbreakCaseReportUIDs
        SELECT @CaseID;
    END

    IF @TodaysFollowUpsIndicator = 1 
    BEGIN
        SET @SortColumn = 'DateOfLastContact';
        SET @SortOrder = 'ASC';
    END

    BEGIN TRY
        IF COALESCE(@SearchTerm, '') = ''
        BEGIN
            --Get the count of records for pagination
            SELECT @TotalRowCount = COUNT(DISTINCT OutbreakCaseContactUID)
            FROM dbo.OutbreakCaseContact occ
                INNER JOIN @OutbreakCaseReportUIDs ocr
                    ON ocr.OutbreakCaseReportUID = occ.OutBreakCaseReportUID
            WHERE occ.intRowStatus = 0;

            INSERT INTO @Contacts
            (
                TotalRowCount,
                CaseContactID,
                CaseID,
                OutbreakTypeID, 
                DiseaseID, 
                ContactedHumanCasePersonID,
                PersonalIDTypeID,
                PersonalID, 
                FirstName, 
                SecondName, 
                LastName, 
                ContactName,
                DateOfBirth, 
                Age, 
                GenderTypeID,
                GenderTypeName,
                CitizenshipTypeID,
                CitizenshipTypeName, 
                AddressID, 
                LocationID, 
                AdministrativeLevel0ID, 
                AdministrativeLevel1ID, 
                AdministrativeLevel2ID,
                SettlementTypeID, 
                SettlementID, 
                Apartment, 
                Building, 
                House, 
                StreetID, 
                Street, 
                PostalCodeID, 
                PostalCode,
                ForeignAddressString, 
                DateOfLastContact,
                PlaceOfLastContact,
                Comment,
                ContactTypeID,
                ContactTypeName,
                ContactStatusID,
                ContactStatusName,
                ContactRelationshipTypeID,
                ContactRelationshipTypeName,
                CurrentLocation,
                ContactTracingObservationID, 
                ContactTracingDuration,
                ContactTracingFrequency,
                VeterinaryDiseaseReportTypeID, 
                EIDSSPersonID,
                HumanID, 
                HumanMasterID,
                FarmMasterID, 
                ContactPhoneTypeID, 
                ContactPhoneCountryCode,
                ContactPhone
            )
            SELECT 
                @TotalRowCount,
                occ.OutbreakCaseContactUID,
                occ.OutBreakCaseReportUID,
                o.OutbreakTypeID, 
                o.idfsDiagnosisOrDiagnosisGroup, 
                occ.ContactedHumanCasePersonID,
                h.idfsPersonIDType, 
                h.strPersonID, 
                h.strFirstName, 
                h.strSecondName, 
                h.strLastName, 
                h.strLastName + ', ' + h.strFirstName,
                h.datDateofBirth,
                haai.ReportedAge,
                h.idfsHumanGender,
                gender.name,
                h.idfsNationality,
                citizenshipType.name, 
                h.idfCurrentResidenceAddress, 
                geo.idfsLocation, 
                lh.AdminLevel1ID, 
                lh.AdminLevel2ID, 
                lh.AdminLevel3ID, 
                settlement.idfsType, 
                settlement.idfsLocation,
                geo.strApartment, 
                geo.strBuilding, 
                geo.strHouse, 
                st.idfStreet, 
                geo.strStreetName, 
                pc.idfPostalCode,
                geo.strPostCode, 
                geo.strForeignAddress, 
                occ.DateOfLastContact,
                occ.PlaceOfLastContact,
                occ.CommentText,
                occ.ContactTypeID,
                contactType.name,
                occ.ContactStatusID,
                contactStatusType.name,
                occ.ContactRelationshipTypeID,
                contactRelationshipType.name,
                lh.AdminLevel2Name + ' ' + lh.AdminLevel3Name,
                occ.ContactTracingObservationID, 
                osp.ContactTracingDuration,
                osp.ContactTracingFrequency,
                vc.idfsCaseType,
                haai.EIDSSPersonID,
                h.idfHuman, 
                h.idfHumanActual,
                f.idfFarmActual, 
                haai.ContactPhoneNbrTypeID, 
                haai.ContactPhoneCountryCode, 
                haai.ContactPhoneNbr
            FROM dbo.OutbreakCaseContact occ
                LEFT JOIN dbo.OutbreakCaseReport ocr
                    ON ocr.OutBreakCaseReportUID = occ.OutBreakCaseReportUID
                INNER JOIN dbo.tlbOutbreak o 
                    ON o.idfOutbreak = ocr.idfOutbreak
                LEFT JOIN dbo.tlbVetCase vc 
                    ON vc.idfVetCase = ocr.idfVetCase
                LEFT JOIN dbo.OutbreakSpeciesParameter osp
                    ON osp.idfOutbreak = ocr.idfOutbreak 
                LEFT JOIN dbo.tlbHuman h
                    ON h.idfHuman = occ.idfHuman
                LEFT JOIN dbo.HumanActualAddlInfo haai
                    ON haai.HumanActualAddlInfoUID = h.idfHumanActual
                LEFT JOIN dbo.tlbFarm f 
                    ON f.idfHuman = occ.idfHuman 
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000043) gender
                    ON gender.idfsReference = h.idfsHumanGender
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000054) citizenshipType
                    ON citizenshipType.idfsReference = h.idfsNationality
                LEFT JOIN dbo.tlbGeoLocation geo
                    ON h.idfCurrentResidenceAddress = geo.idfGeoLocation
                LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = geo.idfsLocation
                LEFT JOIN dbo.gisLocation settlement
                    ON settlement.idfsLocation = geo.idfsLocation AND settlement.idfsType IS NOT NULL
                LEFT JOIN dbo.tlbStreet st
                    ON st.strStreetName = geo.strStreetName
                LEFT JOIN dbo.tlbPostalCode pc
                    ON pc.strPostCode = geo.strPostCode
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000516) contactType
                    ON contactType.idfsReference = occ.ContactTypeID
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000517) contactStatusType
                    ON contactStatusType.idfsReference = occ.ContactStatusID
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000014) contactRelationshipType
                    ON contactRelationshipType.idfsReference = occ.ContactRelationshipTypeID
                INNER JOIN @OutbreakCaseReportUIDs ocru
                    ON ocru.OutbreakCaseReportUID = occ.OutBreakCaseReportUID
            WHERE occ.intRowStatus = 0
            AND ((ocr.idfVetCase IS NOT NULL AND (
                          vc.idfsCaseType = 10012004
                          AND osp.OutbreakSpeciesTypeID = 10514002
                      )
                  OR (
                         vc.idfsCaseType = 10012003
                         AND osp.OutbreakSpeciesTypeID = 10514003
                     ))
                  OR osp.OutbreakSpeciesTypeID = 10514001 AND ocr.idfHumanCase IS NOT NULL
                     );
        END
        ELSE
        BEGIN
            SELECT @TotalRowCount = COUNT(DISTINCT OutbreakCaseContactUID)
            FROM dbo.OutbreakCaseContact occ
                LEFT JOIN dbo.OutbreakCaseReport ocr
                    ON ocr.OutBreakCaseReportUID = occ.OutBreakCaseReportUID
                LEFT JOIN dbo.OutbreakSpeciesParameter osp
                    ON osp.idfOutbreak = ocr.idfOutbreak
                LEFT JOIN dbo.tlbVetCase vc 
                    ON vc.idfVetCase = ocr.idfVetCase
                LEFT JOIN dbo.tlbHuman h
                    ON h.idfHuman = occ.idfHuman
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000043) gender
                    ON gender.idfsReference = h.idfsHumanGender
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000054) citizenshipType
                    ON citizenshipType.idfsReference = h.idfsNationality
                LEFT JOIN dbo.tlbGeoLocation geo
                    ON h.idfCurrentResidenceAddress = geo.idfGeoLocation
                LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = geo.idfsLocation
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000517) contactStatusType
                    ON contactStatusType.idfsReference = occ.ContactStatusID
                INNER JOIN @OutbreakCaseReportUIDs ocru
                    ON ocru.OutbreakCaseReportUID = occ.OutBreakCaseReportUID
            WHERE occ.intRowStatus = 0
                        AND ((ocr.idfVetCase IS NOT NULL AND (
                          vc.idfsCaseType = 10012004
                          AND osp.OutbreakSpeciesTypeID = 10514002
                      )
                  OR (
                         vc.idfsCaseType = 10012003
                         AND osp.OutbreakSpeciesTypeID = 10514003
                     ))
                  OR osp.OutbreakSpeciesTypeID = 10514001 AND ocr.idfHumanCase IS NOT NULL
                     )
                  AND (
                          occ.OutbreakCaseContactUID LIKE '%' + @SearchTerm + '%'
                          OR occ.ContactedHumanCasePersonID LIKE '%' + @SearchTerm + '%'
                          OR h.strLastName LIKE '%' + @SearchTerm + '%'
                          OR h.strFirstName LIKE '%' + @SearchTerm + '%'
                          OR occ.DateOfLastContact LIKE '%' + @SearchTerm + '%'
                          OR contactStatusType.name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel2Name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel3Name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel4Name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel5Name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel6Name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel7Name LIKE '%' + @SearchTerm + '%'
                          OR gender.name LIKE '%' + @SearchTerm + '%'
                      );

            INSERT INTO @Contacts
            (
                TotalRowCount,
                CaseContactID,
                CaseID,
                OutbreakTypeID, 
                DiseaseID, 
                ContactedHumanCasePersonID,
                PersonalIDTypeID, 
                PersonalID, 
                FirstName, 
                SecondName, 
                LastName, 
                ContactName,
                DateOfBirth, 
                Age, 
                GenderTypeID,
                GenderTypeName,
                CitizenshipTypeID,
                CitizenshipTypeName, 
                AddressID, 
                LocationID, 
                AdministrativeLevel0ID, 
                AdministrativeLevel1ID, 
                AdministrativeLevel2ID, 
                SettlementTypeID, 
                SettlementID, 
                Apartment, 
                Building, 
                House, 
                StreetID, 
                Street, 
                PostalCodeID, 
                PostalCode,
                ForeignAddressString, 
                DateOfLastContact,
                PlaceOfLastContact,
                Comment,
                ContactTypeID,
                ContactTypeName,
                ContactStatusID,
                ContactStatusName,
                ContactRelationshipTypeID,
                ContactRelationshipTypeName,
                CurrentLocation,
                ContactTracingObservationID, 
                ContactTracingDuration,
                ContactTracingFrequency,
                VeterinaryDiseaseReportTypeID, 
                EIDSSPersonID,
                HumanID, 
                HumanMasterID,
                FarmMasterID, 
                ContactPhoneTypeID, 
                ContactPhoneCountryCode,
                ContactPhone
            )
            SELECT DISTINCT
                @TotalRowCount,
                occ.OutbreakCaseContactUID,
                occ.OutBreakCaseReportUID,
                o.OutbreakTypeID, 
                o.idfsDiagnosisOrDiagnosisGroup, 
                occ.ContactedHumanCasePersonID,
                h.idfsPersonIDType, 
                h.strPersonID, 
                h.strFirstName, 
                h.strSecondName, 
                h.strLastName, 
                h.strLastName + ', ' + h.strFirstName,
                h.datDateofBirth,
                haai.ReportedAge, 
                h.idfsHumanGender,
                gender.name,
                h.idfsNationality,
                citizenshipType.name,
                h.idfCurrentResidenceAddress, 
                geo.idfsLocation, 
                lh.AdminLevel1ID, 
                lh.AdminLevel2ID, 
                lh.AdminLevel3ID, 
                settlement.idfsType, 
                settlement.idfsLocation,
                geo.strApartment, 
                geo.strBuilding, 
                geo.strHouse, 
                st.idfStreet, 
                geo.strStreetName, 
                pc.idfPostalCode, 
                geo.strPostCode, 
                geo.strForeignAddress, 
                occ.DateOfLastContact,
                occ.PlaceOfLastContact,
                occ.CommentText,
                occ.ContactTypeID,
                contactType.name,
                occ.ContactStatusID,
                contactStatusType.name,
                occ.ContactRelationshipTypeID,
                contactRelationshipType.name,
                lh.AdminLevel2Name + ' ' + lh.AdminLevel3Name,
                occ.ContactTracingObservationID, 
                osp.ContactTracingDuration,
                osp.ContactTracingFrequency,
                vc.idfsCaseType,
                haai.EIDSSPersonID,
                h.idfHuman, 
                h.idfHumanActual,
                f.idfFarmActual, 
                haai.ContactPhoneNbrTypeID, 
                haai.ContactPhoneCountryCode, 
                haai.ContactPhoneNbr
            FROM dbo.OutbreakCaseContact occ
                LEFT JOIN dbo.OutbreakCaseReport ocr
                    ON ocr.OutBreakCaseReportUID = occ.OutBreakCaseReportUID
                LEFT JOIN dbo.tlbVetCase vc 
                    ON vc.idfVetCase = ocr.idfVetCase
                INNER JOIN dbo.tlbOutbreak o 
                    ON o.idfOutbreak = ocr.idfOutbreak
                LEFT JOIN dbo.OutbreakSpeciesParameter osp
                    ON osp.idfOutbreak = ocr.idfOutbreak
                LEFT JOIN dbo.tlbHuman h
                    ON h.idfHuman = occ.idfHuman
                LEFT JOIN dbo.HumanActualAddlInfo haai
                    ON haai.HumanActualAddlInfoUID = h.idfHumanActual
                LEFT JOIN dbo.tlbFarm f 
                    ON f.idfHuman = occ.idfHuman 
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000043) gender
                    ON gender.idfsReference = h.idfsHumanGender
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000054) citizenshipType
                    ON citizenshipType.idfsReference = h.idfsNationality
                LEFT JOIN dbo.tlbGeoLocation geo
                    ON h.idfCurrentResidenceAddress = geo.idfGeoLocation
                LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = geo.idfsLocation
                LEFT JOIN dbo.gisLocation settlement
                    ON settlement.idfsLocation = geo.idfsLocation AND settlement.idfsType IS NOT NULL
                LEFT JOIN dbo.tlbStreet st
                    ON st.strStreetName = geo.strStreetName
                LEFT JOIN dbo.tlbPostalCode pc
                    ON pc.strPostCode = geo.strPostCode
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000516) contactType
                    ON contactType.idfsReference = occ.ContactTypeID
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000517) contactStatusType
                    ON contactStatusType.idfsReference = occ.ContactStatusID
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000014) contactRelationshipType
                    ON contactRelationshipType.idfsReference = occ.ContactRelationshipTypeID
                INNER JOIN @OutbreakCaseReportUIDs ocru
                    ON ocru.OutbreakCaseReportUID = occ.OutBreakCaseReportUID
            WHERE occ.intRowStatus = 0
                        AND ((ocr.idfVetCase IS NOT NULL AND (
                          vc.idfsCaseType = 10012004
                          AND osp.OutbreakSpeciesTypeID = 10514002
                      )
                  OR (
                         vc.idfsCaseType = 10012003
                         AND osp.OutbreakSpeciesTypeID = 10514003
                     ))
                  OR osp.OutbreakSpeciesTypeID = 10514001 AND ocr.idfHumanCase IS NOT NULL
                     )
                  AND (
                          occ.OutbreakCaseContactUID LIKE '%' + @SearchTerm + '%'
                          OR occ.ContactedHumanCasePersonID LIKE '%' + @SearchTerm + '%'
                          OR h.strLastName LIKE '%' + @SearchTerm + '%'
                          OR h.strFirstName LIKE '%' + @SearchTerm + '%'
                          OR gender.name LIKE '%' + @SearchTerm + '%'
                          OR occ.DateOfLastContact LIKE '%' + @SearchTerm + '%'
                          OR contactStatusType.name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel2Name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel3Name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel4Name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel5Name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel6Name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel7Name LIKE '%' + @SearchTerm + '%'
                      );
        END

        IF @TodaysFollowUpsIndicator = 1
        BEGIN
            DELETE FROM @Contacts
            WHERE ContactTracingFrequency IS NULL
                  OR ContactTracingDuration IS NULL
                  OR ContactStatusID IN (10517002, 10517003, 10517004, 10517005);

            DELETE FROM @Contacts
            WHERE CaseContactID NOT IN (
                                                    SELECT CaseContactID
                                                    FROM @Contacts
                                                    WHERE (
                                                              DateOfLastContact > DATEADD(
                                                                                             DAY,
                                                                                             -ContactTracingDuration,
                                                                                             GETDATE()
                                                                                         )
                                                              AND DATEDIFF(DAY, DateOfLastContact, GETDATE())
                                                                  % ContactTracingFrequency = 0
                                                          )
                                                          OR ContactTracingFrequency IS NULL
                                                );
        END

        SELECT CaseContactID,
            CaseID, 
            OutbreakTypeID, 
            DiseaseID, 
            ContactedHumanCasePersonID,
            PersonalIDTypeID, 
            PersonalID, 
            FirstName, 
            SecondName, 
            LastName, 
            ContactName,
            DateOfBirth, 
            Age, 
            GenderTypeID,
            GenderTypeName,
            CitizenshipTypeID,
            CitizenshipTypeName, 
            AddressID, 
            LocationID, 
            AdministrativeLevel0ID, 
            AdministrativeLevel1ID, 
            AdministrativeLevel2ID,
            SettlementTypeID, 
            SettlementID, 
            Apartment, 
            Building, 
            House, 
            StreetID, 
            Street, 
            PostalCodeID, 
            PostalCode,
            ForeignAddressString, 
            DateOfLastContact,
            PlaceOfLastContact,
            Comment,
            ContactTypeID,
            ContactTypeName,
            ContactStatusID,
            ContactStatusName,
            ContactRelationshipTypeID,
            ContactRelationshipTypeName,
            CurrentLocation,
            ContactTracingObservationID, 
            ContactTracingDuration,
            ContactTracingFrequency,
            VeterinaryDiseaseReportTypeID, 
            EIDSSPersonID,
            HumanID, 
            HumanMasterID,
            FarmMasterID, 
            ContactPhoneTypeID, 
            ContactPhoneCountryCode,
            ContactPhone,
            RowAction,
            [RowCount],
            TotalRowCount,
            CurrentPage,
            TotalPages
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'ContactTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ContactTypeName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ContactTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ContactTypeName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ContactName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ContactName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ContactName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ContactName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ContactRelationTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ContactRelationshipTypeName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ContactRelationTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ContactRelationshipTypeName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DateOfLastContact'
                                                        AND @SortOrder = 'ASC' THEN
                                                       DateOfLastContact
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DateOfLastContact'
                                                        AND @SortOrder = 'DESC' THEN
                                                       DateOfLastContact
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PlaceOfLastContact'
                                                        AND @SortOrder = 'ASC' THEN
                                                       PlaceOfLastContact
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PlaceOfLastContact'
                                                        AND @SortOrder = 'DESC' THEN
                                                       PlaceOfLastContact
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'CurrentLocation'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CurrentLocation
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'CurrentLocation'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CurrentLocation
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'Gender'
                                                        AND @SortOrder = 'ASC' THEN
                                                       GenderTypeName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'Gender'
                                                        AND @SortOrder = 'DESC' THEN
                                                       GenderTypeName
                                               END DESC
                                     ) AS RowNum,
                   CaseContactID,
                   CaseID, 
                   OutbreakTypeID, 
                   DiseaseID, 
                   ContactedHumanCasePersonId,
                   PersonalIDTypeID, 
                   PersonalID, 
                   FirstName, 
                   SecondName, 
                   LastName, 
                   ContactName,
                   DateOfBirth, 
                   Age, 
                   GenderTypeID, 
                   GenderTypeName,
                   CitizenshipTypeID, 
                   CitizenshipTypeName, 
                   AddressID, 
                   LocationID, 
                   AdministrativeLevel0ID, 
                   AdministrativeLevel1ID, 
                   AdministrativeLevel2ID,
                   SettlementTypeID, 
                   SettlementID, 
                   Apartment, 
                   Building, 
                   House,
                   StreetID, 
                   Street, 
                   PostalCodeID, 
                   PostalCode, 
                   ForeignAddressString, 
                   DateOfLastContact,
                   PlaceOfLastContact,
                   Comment,
                   ContactTypeID,
                   ContactTypeName,
                   ContactStatusID,
                   ContactStatusName,
                   ContactRelationshipTypeID,
                   ContactRelationshipTypeName,
                   CurrentLocation,
                   ContactTracingObservationID, 
                   ContactTracingDuration,
                   ContactTracingFrequency,
                   VeterinaryDiseaseReportTypeID, 
                   EIDSSPersonID,
                   HumanID, 
                   HumanMasterID,
                   FarmMasterID, 
                   ContactPhoneTypeID, 
                   ContactPhoneCountryCode, 
                   ContactPhone,
                   0 AS RowAction,
                   COUNT(*) OVER () AS [RowCount],
                   @TotalRowCount AS TotalRowCount,
                   CurrentPage = @PageNumber,
                   TotalPages = (@TotalRowCount / @PageSize) + IIF(COUNT(*) % @PageSize > 0, 1, 0)
            FROM @Contacts
            GROUP BY CaseContactID,
                   CaseID,
                   OutbreakTypeID, 
                   DiseaseID, 
                   ContactedHumanCasePersonID,
                   PersonalIDTypeID, 
                   PersonalID, 
                   FirstName, 
                   SecondName, 
                   LastName, 
                   ContactName,
                   DateOfBirth, 
                   Age, 
                   GenderTypeID, 
                   GenderTypeName,
                   CitizenshipTypeID, 
                   CitizenshipTypeName, 
                   AddressID, 
                   LocationID, 
                   AdministrativeLevel0ID, 
                   AdministrativeLevel1ID, 
                   AdministrativeLevel2ID,
                   SettlementTypeID, 
                   SettlementID, 
                   Apartment, 
                   Building, 
                   House, 
                   StreetID, 
                   Street, 
                   PostalCodeID, 
                   PostalCode, 
                   ForeignAddressString, 
                   DateOfLastContact,
                   PlaceOfLastContact,
                   Comment,
                   ContactTypeID,
                   ContactTypeName,
                   ContactStatusID,
                   ContactStatusName,
                   ContactRelationshipTypeID,
                   ContactRelationshipTypeName,
                   CurrentLocation,
                   ContactTracingObservationID, 
                   ContactTracingDuration,
                   ContactTracingFrequency,
                   VeterinaryDiseaseReportTypeID, 
                   EIDSSPersonID,
                   HumanID, 
                   HumanMasterID,
                   FarmMasterID, 
                   ContactPhoneTypeID, 
                   ContactPhoneCountryCode, 
                   ContactPhone
        ) AS x
        WHERE RowNum > @FirstRec
              AND RowNum < @LastRec
        ORDER BY RowNum;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT = 1
            ROLLBACK;
        throw;
    END CATCH;

END;
GO
PRINT N'Altering Procedure [dbo].[USP_OMM_HUMAN_Case_GetDetail]...';


GO
--*************************************************************
-- Name: [USP_OMM_Case_GetDetail]
-- Description: Insert/Update for Campaign Monitoring Session
--
-- Author: Doug Albanese
-- Revision History
--	Name			Date		Change Detail
--	Doug Albanese	05/02/2022	New SP to separate request from common case details of USP_OMM_Case_GetDetail
--	Doug Albanese	05/03/2022	Added disease id
--	Doug Albanese	05/04/2022	Adding "Text" version for Offices and Persons, for Select2 popuation
--	Doug Albanese	05/04/2022	Changed over to Location Hierarchy
--	Doug Albanese	05/04/2022	idfHumanCase added for reference within the shared HDR View Component
--	Doug Albanese	05/05/2022	Added Text for Select2 objects in Outbreak Investigation (Organization/Person)
--	Doug Albanese	05/05/2022	Added Text for Outbreak Case Classification
--	Doug Albanese	05/05/2022	Corrected some Flex Form observations, and cleaned up output fields
--	Doug Albanese	05/06/2022	Added location information for Editing purposes
--	Doug Albanese	05/09/2022	Added OutbreakTypeId for Flex Form identification
-- Doug Albanese	 10/25/2022	 Swapped tlbHumanCase.idfEpiObservation with OutbreakCaseReport.OutbreakCaseObservationID
--*************************************************************
ALTER PROCEDURE [dbo].[USP_OMM_HUMAN_Case_GetDetail]
(
	@LangID NVARCHAR(50),
	@OutbreakCaseReportUID BIGINT = -1
)
AS
	BEGIN DECLARE @returnCode INT = 0;
		DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS'; BEGIN TRY
		DECLARE @Antimicrobials NVARCHAR(MAX)
		DECLARE @Vaccinations NVARCHAR(MAX)
		DECLARE @Contacts NVARCHAR(MAX)
		DECLARE @Samples NVARCHAR(MAX)
		DECLARE @Tests NVARCHAR(MAX)
		DECLARE @CaseMonitorings NVARCHAR(MAX) DECLARE @idfHumanCase BIGINT 

		SELECT
			@idfHumanCase = idfHumanCase
		FROM
			OutbreakCaseReport
		WHERE
			OutbreakCaseReportUID = @OutbreakCaseReportUID --Obtain listing of Vaccinations for Json object

		SET @Antimicrobials = (
		SELECT
			idfAntimicrobialTherapy,
			datFirstAdministeredDate AS FirstAdministeredDate,
			strAntimicrobialTherapyName AS AntimicrobialName,
			strDosage AS AntimicrobialDose
		FROM
			tlbAntimicrobialTherapy
		WHERE
			intRowStatus = 0 AND
			idfHumanCase = @idfHumanCase
		FOR JSON PATH) 
		
		--Obtain listing of Vaccinations for Json object
		SET @Vaccinations =
		(
			SELECT
			HumanDiseaseReportVaccinationUID,
			VaccinationName,
			VaccinationDate
			FROM
			HumanDiseaseReportVaccination
			WHERE
			intRowStatus = 0 AND
			idfHumanCase = @idfHumanCase
		FOR JSON PATH) 
		
		--Obtain listing of Contacts for Json object
		SET @Contacts =
		(
			SELECT
			CCP.idfContactedCasePerson, --tlbContactedCasePerson Identity
			OCC.OutbreakCaseContactUID, --OutbreakCaseContact Identity
			OCC.OutBreakCaseReportUID, --(OutbreakCaseReport Identity) OutBreakCaseReport: OutBreakCaseReportUID
			H.strFirstName + ' ' + H.strLastName AS ContactName, --tlbContactedCasePerson
			OCC.ContactTypeID, --"Contact Type" OutbreakCaseContact: ContactTypeID
			CT.Name As ContactType, --"Contact Type" Text only for display
			OCC.ContactRelationshipTypeID, --"Relation" OutbreakCaseContact: ContactRelationshipTypeID
			CCP.idfsPersonContactType, --"Relation" tlbContactedCasePerson: idfsPersonContactType
			Relation.Name AS Relation, --"Relation" Text only for display
			OCC.DateOfLastContact AS datDateOfLastContact, --"Date of Last Contact" OutbreakCaseContact: DateOfLastContact
			OCC.PlaceOfLastContact AS strPlaceInfo, --"Place of Last Contact" tlbContactedCasePerson: strPlaceInfo
			OCC.ContactStatusID, --"Contact Status" OutbreakCaseContact: ContactStatusID
			CS.name AS ContactStatus, --"Contact Status" Text only for display
			OCC.CommentText AS strComments, --"Comments" tlbContactedCasePerson: strComments
			H.idfHumanActual, --(Human Actual Identity) tlbHumanActual: idfHumanActual
			OCC.ContactTracingObservationId AS idfObservation, --Flex Form Observation Id
			ft.idfsFormType
		FROM
			OutbreakCaseContact OCC
			LEFT JOIN tlbHuman H
			ON H.idfHuman = OCC.idfHuman
			LEFT JOIN tlbContactedCasePerson CCP
			ON CCP.idfContactedCasePerson = OCC.ContactedHumanCasePersonID
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@langId, 19000014) Relation
			ON Relation.idfsReference = OCC.ContactRelationshipTypeID
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@langId, 19000517) CS
			ON CS.idfsReference = OCC.ContactStatusID
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@langId, 19000516) CT
			ON CT.idfsReference = OCC.ContactTypeID
			LEFT JOIN tlbObservation o
			ON o.idfObservation = occ.ContactTracingObservationID
			LEFT JOIN ffFormTemplate ft
			ON ft.idfsFormTemplate = o.idfsFormTemplate
			WHERE
			OutBreakCaseReportUID = @OutbreakCaseReportUID AND
			OCC.intRowStatus = 0
		FOR JSON PATH) 
		
		--Obtain listing of Samples for Json Object
		SET @Samples =(
			SELECT
			m.idfMaterial,
			m.idfsSampleType,
			R.Name AS SampleType,
			m.strFieldBarcode,
			m.datFieldCollectionDate,
			Coalesce(m.idfFieldCollectedByOffice, -1) AS idfFieldCollectedByOffice,
			CO.name As CollectedByOffice,
			--Coalesce(m.idfFieldCollectedByPerson,-1) AS idfFieldCollectedByPerson,
			m.idfFieldCollectedByPerson,
			Coalesce(prb.strFirstName + ' ' + prb.strFamilyName, '') As CollectedByPerson,
			Coalesce(m.idfSendToOffice, -1) AS idfSendToOffice,
			SO.name As SentToOffice,
			Coalesce(m.strNote, '') AS strNote,
			m.datFieldSentDate 
			FROM OutbreakCaseReport ocr
			LEFT JOIN tlbHumanCase hc
			ON hc.idfHumanCase = ocr.idfHumanCase
			LEFT JOIN tlbMaterial m
			ON m.idfHumanCase = hc.idfHumanCase
			LEFT JOIN tlbOffice rbo
			ON rbo.idfOffice = m.idfFieldCollectedByOffice
			LEFT JOIN tlbOffice rbo2
			ON rbo2.idfOffice = m.idfSendToOffice
			LEFT JOIN tlbPerson prb
			ON prb.idfPerson = m.idfFieldCollectedByPerson
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000046) CO
			ON CO.idfsReference = rbo.idfsOfficeName
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000046) SO
			ON SO.idfsReference = rbo2.idfsOfficeName
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000087) R
			ON R.idfsReference = m.idfsSampleType
			WHERE
			ocr.OutBreakCaseReportUID = @OutbreakCaseReportUID AND
			m.intRowStatus = 0
		FOR JSON PATH) 
		
		SET @Tests =(SELECT
			t.idfTesting,
			m.idfMaterial,
			m.idfsSampleType,
			m.strFieldBarcode,
			m.strBarcode,
			t.idfsTestName,
			t.idfsTestResult,
			t.idfsTestStatus,
			t.datConcludedDate,
			t.idfsTestCategory,
			tv.idfsInterpretedStatus,
			tv.strInterpretedComment,
			tv.datInterpretationDate,
			tv.idfInterpretedByPerson,
			case tv.blnValidateStatus when 1 then 1 else 0 end as blnValidateStatus,
			tv.strValidateComment,
			tv.datValidationDate,
			tv.idfValidatedByPerson,
			ST.name AS SampleType,
			TN.name AS TestName,
			TR.name AS TestResult,
			TS.name AS TestStatus,
			TC.name AS TestCategory,
			ITS.name AS InterpretedStatus,
			Coalesce(ibp.strFirstName + ' ' + ibp.strFamilyName, '') As InterpretedByPerson,
			Coalesce(vbp.strFirstName + ' ' + vbp.strFamilyName, '') As ValidatedByPerson
		FROM
			OutbreakCaseReport OCR
			LEFT JOIN tlbHumanCase hc
			ON hc.idfHumanCase = ocr.idfHumanCase
			LEFT JOIN tlbMaterial m
			ON m.idfHumanCase = hc.idfHumanCase
			LEFT JOIN tlbTesting t
			ON t.idfMaterial = m.idfMaterial
			LEFT JOIN tlbTestValidation tv
			ON tv.idfTesting = t.idfTesting
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000087) ST
			ON ST.idfsReference = m.idfsSampleType
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000097) TN
			ON TN.idfsReference = t.idfsTestName
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000096) TR
			ON TR.idfsReference = t.idfsTestResult
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000001) TS
			ON TS.idfsReference = t.idfsTestStatus
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000095) TC
			ON TC.idfsReference = t.idfsTestCategory
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000106) ITS
			ON ITS.idfsReference = tv.idfsInterpretedStatus
			LEFT JOIN tlbPerson ibp
			ON ibp.idfPerson = tv.idfInterpretedByPerson
			LEFT JOIN tlbPerson vbp
			ON vbp.idfPerson = tv.idfValidatedByPerson WHERE
			OCR.OutBreakCaseReportUID = @OutBreakCaseReportUID AND
			t.intRowStatus = 0
		FOR JSON PATH) 
		
		SET @CaseMonitorings =
		(SELECT
			ocm.idfOutbreakCaseMonitoring,
			ocm.idfObservation,
			ocm.datMonitoringdate,
			ocm.idfInvestigatedByOffice,
			fcboName.name AS InvestigatedByOffice,
			ocm.idfInvestigatedByPerson,
			CONCAT(P.strFirstName, ' ', P.strFamilyName) AS InvestigatedByPerson,
			ocm.strAdditionalComments,
			ocm.intRowStatus,
			ft.idfsFormType
		FROM
			tlbOutbreakCaseMonitoring ocm
			LEFT JOIN tlbOffice o
			ON o.idfOffice = ocm.idfInvestigatedByOffice
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000045) fcboName
			ON fcboName.idfsReference = o.idfsOfficeName
			LEFT JOIN tlbPerson P
			ON P.idfPerson = ocm.idfInvestigatedByPerson
			LEFT JOIN tlbObservation OB
			ON OB.idfObservation = ocm.idfObservation
			LEFT JOIN ffFormTemplate ft
			ON ft.idfsFormTemplate = OB.idfsFormTemplate
		WHERE
			idfHumanCase = @idfHumanCase AND
			ocm.intRowStatus = 0
		FOR JSON PATH) 
		
		SELECT
			DISTINCT
			--General
			ocr.idfOutbreak,
			h.idfHumanActual,
			--Notification
			hc.datNotificationDate,
			hc.idfSentByOffice,
			SentByOffice.name AS SentByOffice,
			hc.idfSentByPerson,
			SentByPerson.strFirstName + ' ' + SentByPerson.strFamilyName AS SentByPerson,
			hc.idfReceivedByOffice,
			ReceivedByOffice.name AS ReceivedByOffice,
			hc.idfReceivedByPerson,
			ReceivedByPerson.strFirstName + ' ' + ReceivedByPerson.strFamilyName AS ReceivedByPerson,
			--Case Locatiton
			geo.idfGeoLocation,
			geo.idfsLocation,
			lh.AdminLevel1ID AS AdminLevel0Value,
			lh.AdminLevel2ID AS AdminLevel1Value,
			lh.AdminLevel2Name AS AdminLevel1Text,
			lh.AdminLevel3ID AS AdminLevel2Value,
			lh.AdminLevel3Name AS AdminLevel2Text,
			lh.AdminLevel4ID AS AdminLevel3Value,
			lh.AdminLevel4Name AS AdminLevel3Text,
			geo.strStreetName,
			geo.strPostCode,
			geo.strBuilding,
			geo.strHouse,
			geo.strApartment,
			geo.dblLatitude,
			geo.dblLongitude,
			--Clinical Information
			ocr.OutbreakCaseStatusID,
			OutbreakCaseStatus.Name AS OutbreakCaseStatusName,
			hc.datOnSetDate,
			hc.datFinalDiagnosisDate,
			hc.idfHospital,
			hc.datHospitalizationDate,
			hc.datDischargeDate,
			hc.strClinicalNotes,
			hc.strNote,
			@Antimicrobials AS Antimicrobials,
			@Vaccinations AS Vaccinations,
			--Outbreak Investigation
			hc.idfInvestigatedByOffice,
			InvestigatedByOffice.name AS InvestigatedByOffice,
			hc.idfInvestigatedByPerson,
			InvestigatedByPerson.strFirstName + ' ' + InvestigatedByPerson.strFamilyName AS InvestigatedByPerson,
			hc.datInvestigationStartDate,
			OCR.OutbreakCaseClassificationID,
			OutbreakClassification.name AS OutbreakCaseClassificationName,
			OCR.IsPrimaryCaseFlag,
			--Case Monitoring
			@CaseMonitorings AS CaseMonitorings,
			--Contacts
			@Contacts AS Contacts,
			--Samples
			hc.idfsYNSpecimenCollected,
			@Samples AS Samples,
			--Tests
			hc.idfsYNTestsConducted,
			@Tests AS Tests,
			hc.idfsYNAntimicrobialTherapy,
			hc.idfsYNHospitalization,
			hc.idfsYNSpecificVaccinationAdministered,
			--Outbreak Flex Forms
			OCR.OutbreakCaseObservationID,
			OCOFT.idfsFormType AS OutbreakCaseObservationFormType,
			OCR.CaseEPIObservationID,
			OCMFT.idfsFormType AS CaseEPIObservationFormType,
			ocr.OutbreakCaseObservationID AS idfEpiObservation,
			hc.idfCSObservation,
			o.idfsDiagnosisOrDiagnosisGroup,
			ocr.idfHumanCase,
			o.OutbreakTypeID
		FROM
			OutbreakCaseReport ocr
		LEFT JOIN tlbHumanCase hc
		ON hc.idfHumanCase = ocr.idfHumanCase
		LEFT JOIN tlbHuman h
		ON h.idfHuman = hc.idfHuman
		LEFT JOIN tlbHumanActual ha
		ON ha.idfHumanActual = h.idfHumanActual
		LEFT JOIN HumanActualAddlInfo haai
		ON haai.HumanActualAddlInfoUID = ha.idfHumanActual
		LEFT JOIN tlbOutbreak o
		ON o.idfOutbreak = OCR.idfOutbreak
		LEFT JOIN dbo.tlbGeoLocation geo
        ON h.idfCurrentResidenceAddress = geo.idfGeoLocation
        LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lh
        ON lh.idfsLocation = geo.idfsLocation
		LEFT JOIN tlbAntimicrobialTherapy amt
		ON amt.idfHumanCase = ocr.idfHumanCase
		LEFT JOIN HumanDiseaseReportVaccination hdrv
		ON hdrv.idfHumanCase = ocr.idfHumanCase
		LEFT JOIN tlbObservation OCO
		ON OCO.idfObservation = OCR.OutbreakCaseObservationID
		LEFT JOIN tlbObservation CMO
		ON CMO.idfObservation = OCR.CaseEPIObservationID
		LEFT JOIN ffFormTemplate OCOFT
		ON OCOFT.idfsFormTemplate = OCO.idfsFormTemplate
		LEFT JOIN ffFormTemplate OCMFT
		ON OCMFT.idfsFormTemplate = CMO.idfsFormTemplate
		LEFT JOIN tlbOffice SBO
		ON SBO.idfOffice = hc.idfSentByOffice
		LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000046) SentByOffice
		ON SentByOffice.idfsReference = SBO.idfsOfficeName
		LEFT JOIN tlbOffice RBO
		ON RBO.idfOffice = hc.idfReceivedByOffice
		LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000046) ReceivedByOffice
		ON ReceivedByOffice.idfsReference = RBO.idfsOfficeName
		LEFT JOIN tlbPerson SentByPerson
		ON SentByPerson.idfPerson = hc.idfSentByPerson
		LEFT JOIN tlbPerson ReceivedByPerson
		ON ReceivedByPerson.idfPerson = hc.idfReceivedByPerson
		LEFT JOIN tlbOffice IBO
		ON IBO.idfOffice = hc.idfInvestigatedByOffice
		LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000046) InvestigatedByOffice
		ON InvestigatedByOffice.idfsReference = IBO.idfsOfficeName
		LEFT JOIN tlbPerson InvestigatedByPerson
		ON InvestigatedByPerson.idfPerson = hc.idfInvestigatedByPerson
		LEFT JOIN FN_GBL_Reference_GETList(@langId,19000011) OutbreakClassification
		ON OutbreakClassification.idfsReference = ocr.OutbreakCaseClassificationID
		LEFT JOIN FN_GBL_Reference_GETList(@langId,19000520) OutbreakCaseStatus
		ON OutbreakCaseStatus.idfsReference = ocr.OutbreakCaseStatusID
		WHERE
			OCR.OutBreakCaseReportUID = @OutbreakCaseReportUID
	END TRY
	BEGIN CATCH
		IF @@TRANCOUNT = 1
		ROLLBACK;
		THROW;
		END CATCH
	END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_AGEGROUP_DEL]...';


GO
-- ================================================================================================
-- Name: USP_REF_AGEGROUP_DEL
-- Description:	Removes the Age Group from the active reference listings.
--                      
-- Author: Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		10/03/2018 Initial release.
-- Ricky Moss		12/12/2018 Removed return codes
-- Ricky Moss		01/02/2019 Added deleteAnyway parameters and added return codes
-- Ricky Moss		01/03/2019 Refactor to determine if record is in use
-- Stephen Long     10/27/2022 Added site alert logic.
--
-- exec USP_REF_AGEGROUP_DEL 55615180000031, 0
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_AGEGROUP_DEL]
(
    @idfsAgeGroup BIGINT,
    @deleteAnyway BIT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );

        IF (
               NOT EXISTS
        (
            SELECT idfsDiagnosis
            FROM dbo.trtDiagnosisAgeGroupToDiagnosis
            WHERE idfsDiagnosisAgeGroup = @idfsAgeGroup
        )
               AND NOT EXISTS
        (
            SELECT idfsStatisticalAgeGroup
            FROM dbo.trtDiagnosisAgeGroupToStatisticalAgeGroup
            WHERE idfsDiagnosisAgeGroup = @idfsAgeGroup
        )
           )
           OR @deleteAnyway = 1
        BEGIN
            UPDATE dbo.trtDiagnosisAgeGroup
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsDiagnosisAgeGroup = @idfsAgeGroup
                  AND intRowStatus = 0

            UPDATE dbo.trtBaseReference
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @idfsAgeGroup
                  AND intRowStatus = 0;

            UPDATE dbo.trtStringNameTranslation
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @idfsAgeGroup;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                           @EventTypeId,
                                           @UserId,
                                           @idfsAgeGroup,
                                           NULL,
                                           @SiteId,
                                           NULL,
                                           @SiteId,
                                           @LocationId,
                                           @AuditUserName;
        END
        ELSE IF (
                    EXISTS
             (
                 SELECT idfsDiagnosis
                 FROM dbo.trtDiagnosisAgeGroupToDiagnosis
                 WHERE idfsDiagnosisAgeGroup = @idfsAgeGroup
             )
                    OR EXISTS
             (
                 SELECT idfsStatisticalAgeGroup
                 FROM dbo.trtDiagnosisAgeGroupToStatisticalAgeGroup
                 WHERE idfsDiagnosisAgeGroup = @idfsAgeGroup
             )
                )
        BEGIN
            SELECT @ReturnCode = -1;
            SELECT @ReturnMessage = 'IN USE';
        END

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_BASEREFERENCE_DEL]...';


GO
-- ================================================================================================
-- Name: USP_REF_BASEREFERENCE_DEL
-- Description:	Removes a base reference
--                      
-- Author: Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		02/10/2019 Initial release.
-- Ricky Moss		02/12/2019 Returns values.
-- LAMONT MITCHELL	06/17/2021 PROHIBITED DELETION FOR REFERENCE TYPES THAT ARE FOUND BASED ON 
--                             USE CASE DOCUMENT SAUC40
-- Stephen Long     10/26/2022 Added site alert for reference table change event.
--
-- exec USP_REF_BASEREFERENCE_DEL 55540680000289
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_BASEREFERENCE_DEL]
(
    @idfsBaseReference BIGINT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    BEGIN TRY
        DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
                @ReturnCode BIGINT = 0, 
                @Duplicate BIT = 0;
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );

        SELECT @Duplicate =
        (
            SELECT Top (1)
                Case
                    WHEN rt.idfsReferenceType = 19000001 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000003 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000004 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000007 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000012 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000013 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000015 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000016 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000017 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000018 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000020 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000023 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000025 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000028 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000030 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000031 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000034 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000036 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000039 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000040 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000041 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000042 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000043 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000049 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000057 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000059 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000063 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000067 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000068 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000076 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000080 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000081 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000082 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000085 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000089 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000091 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000093 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000094 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000095 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000100 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000102 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000103 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000106 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000108 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000110 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000111 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000112 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000113 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000114 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000115 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000117 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000128 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000129 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000133 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000151 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000155 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000158 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000160 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000163 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000504 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000512 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000513 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000514 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000526 THEN
                        1
                    WHEN rt.idfsReferenceType = 19000527 THEN
                        1
                    WHEN rt.idfsReferenceType IS NULL THEN
                        0
                    ELSE
                        0
                END
            FROM dbo.trtReferenceType rt
                JOIN dbo.trtBaseReference br
                    ON rt.idfsReferenceType = br.idfsReferenceType
            WHERE br.idfsBaseReference = @idfsBaseReference
        )

        IF @Duplicate = 0
        BEGIN
            UPDATE dbo.trtBaseReference
            SET intRowStatus = 1, 
                AuditUpdateUser = @AuditUserName, 
                AuditUpdateDTM = GETDATE()
            WHERE idfsBaseReference = @idfsBaseReference;

            UPDATE dbo.trtStringNameTranslation
            SET intRowStatus = 1, 
                AuditUpdateUser = @AuditUserName, 
                AuditUpdateDTM = GETDATE()
            WHERE idfsBaseReference = @idfsBaseReference;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                           @EventTypeId,
                                           @UserId,
                                           @idfsBaseReference,
                                           NULL,
                                           @SiteId,
                                           NULL,
                                           @SiteId,
                                           @LocationId,
                                           @AuditUserName;
        END
        ELSE
        BEGIN
            SELECT @ReturnMessage = 'CAN NOT DELETE';
        END
        SELECT @ReturnCode 'ReturnCode',
               @ReturnMessage 'ReturnMessage';
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_VAS_MONITORING_SESSION_GETDetail]...';


GO
-- ================================================================================================
-- Name: USP_VAS_MONITORING_SESSION_GETDetail
--
-- Description:	Get active surveillance monitoring session detail (one record) for the veterinary 
-- surveillance session edit/enter and other use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     05/02/2019 Initial release.
-- Stephen Long     04/27/2020 Corrected legacy session ID.
-- Stephen Long     08/22/2020 Corrected joins for person entered by site.
-- Mike Kornegay    12/16/2021 Added tlbMonitoringSessionToDiagnosis to all joins involving idfsDiagnosis and changed
--                             location hieararchy to use FN_GBL_LocationHierarchy_Flattened 
-- Mike Kornegay	01/19/2022 Added join to tlbVetCase and added idfCaseType
-- Mike Kornegay	01/26/2022 Added the disease identifiers and names fields to the query and added
--							   the strCampaign field as CampaignID and idfCampaign as CampaignKey.
-- Mike Kornegay	02/01/2022 Removed join to tlbVetCase and added join to MonitoringSessionToSampletypes to
--							   get if the report is Avian or Livestock
-- Mike Kornegay    02/15/2022 Changed SpeciesTypeID to ReportTypeID
-- Mike Kornegay	03/08/2022 Added LocationID
-- Mike Kornegay	06/13/2022 Changed ReportTypeID and ReportTypeName to point to the new SessionCategoryID - this
--							   field now stores the report type of the vet surveillance session so we do not depend 
--							   on the diagnosis list to determine type.
-- Mike Kornegay	10/20/2022 Changed ReportTypeID to point to the new idfsMonitoringSessionSpeciesType.
--
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VAS_MONITORING_SESSION_GETDetail] (
	@LanguageID NVARCHAR(50),
	@MonitoringSessionID BIGINT
	)
AS
BEGIN
	BEGIN TRY
		SET NOCOUNT ON;

		DECLARE @ReturnMessage VARCHAR(MAX) = 'SUCCESS';
		DECLARE @ReturnCode BIGINT = 0;

		SELECT ms.idfMonitoringSession AS VeterinaryMonitoringSessionID,
			ms.strMonitoringSessionID AS EIDSSSessionID,
			ms.idfsMonitoringSessionStatus AS SessionStatusTypeID,
			MonitoringSessionStatus.name AS SessionStatusTypeName,
			ms.idfsMonitoringSessionSpeciesType AS ReportTypeID,
			ISNULL(reportType.name, reportType.strDefault) as ReportTypeName,
			ms.datEnteredDate AS EnteredDate,
			ms.datStartDate AS StartDate,
			ms.datEndDate AS EndDate,
			diseaseIDs.diseaseIDs AS DiseaseIdentifiers,
            diseaseNames.diseaseNames AS DiseaseNames,
            ms.idfsCountry AS CountryID,
			ms.idfsRegion AS RegionID,
			LH.AdminLevel1Name AS RegionName,
			ms.idfsRayon AS RayonID,
			LH.AdminLevel2Name AS RayonName,
			ms.idfsSettlement AS SettlementID,
			LH.AdminLevel3Name AS SettlementName,
			LH.idfsLocation AS LocationID,
			ms.idfPersonEnteredBy AS EnteredByPersonID,
			ISNULL(p.strFamilyName, N'') + ISNULL(', ' + p.strFirstName, '') + ISNULL(' ' + p.strSecondName, '') AS EnteredByPersonName,
			ms.idfsSite AS SiteID,
			siteName.strSiteName AS SiteName,
			ms.LegacySessionID AS LegacyID,
			c.idfCampaign AS CampaignKey,
			c.strCampaignID AS CampaignID,
			c.strCampaignName AS CampaignName,
			c.idfsCampaignType AS CampaignTypeID,
			campaignType.name AS CampaignTypeName
		FROM dbo.tlbMonitoringSession ms
        LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd 
            ON msd.idfMonitoringSession = ms.idfMonitoringSession
		LEFT JOIN dbo.tlbCampaign AS c
			ON c.idfCampaign = ms.idfCampaign
				AND c.intRowStatus = 0
		LEFT JOIN dbo.MonitoringSessionToSampleType AS mss
			ON ms.idfMonitoringSession = mss.idfMonitoringSession
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000116) AS campaignType
			ON c.idfsCampaignType = campaignType.idfsReference
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000117) AS monitoringSessionStatus
			ON monitoringSessionStatus.idfsReference = ms.idfsMonitoringSessionStatus
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000538) AS reportType 
			ON reportType.idfsReference = ms.SessionCategoryID
        LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) AS LH 
			ON LH.idfsLocation = ms.idfsLocation
		LEFT JOIN dbo.tlbPerson p
			ON p.idfPerson = ms.idfPersonEnteredBy
				AND p.intRowStatus = 0
		LEFT JOIN dbo.tstUserTable u
			ON u.idfPerson = ms.idfPersonEnteredBy
				AND u.intRowStatus = 0
		LEFT JOIN dbo.tstSite AS SiteName
			ON siteName.idfsSite = ms.idfsSite 
			AND siteName.intRowStatus = 0
		CROSS APPLY (
            SELECT dbo.FN_GBL_SESSION_DISEASEIDS_GET(ms.idfMonitoringSession) diseaseIDs
            ) diseaseIDs
		CROSS APPLY (
            SELECT dbo.FN_GBL_SESSION_DISEASE_NAMES_GET(ms.idfMonitoringSession, @LanguageID) diseaseNames
            ) diseaseNames
		WHERE ms.idfMonitoringSession = @MonitoringSessionID
			AND ms.intRowStatus = 0;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_VAS_MONITORING_SESSION_SAMPLE_GETList]...';


GO
-- ================================================================================================
-- Name: USP_VAS_MONITORING_SESSION_SAMPLE_GETList
--
-- Description:	Gets sample records for veterinary surveillance session report use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mike	Kornegay 01/17/2022 Initial release (copied from USP_VET_SAMPLE_GETList)
-- Mike	Kornegay 09/30/2022 Correct species type to look at HACode instead of idfsBaseReference.
-- Mike Kornegay 10/10/2022 Add disease name to group by.
-- Mike Kornegay 10/16/2022 Correct test count to show 1 when tests exist.
--
-- EXEC	@return_value = [dbo].[USP_VCT_MONITORING_SESSION_SAMPLE_GETList]
		--@LanguageID = N'en-US',
		--@PageNumber = 1,
		--@PageSize = 10,
		--@SortColumn = NULL,
		--@SortOrder = NULL,
		--@MonitoringSessionID = 10,
		--@ParentSampleID = NULL,
		--@RootSampleID = NULL 
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VAS_MONITORING_SESSION_SAMPLE_GETList] (
	@LanguageID NVARCHAR(50)
	,@PageNumber INT = 1
	,@PageSize INT = 10
	,@SortColumn NVARCHAR(30) = 'SampleTypeName'
	,@SortOrder NVARCHAR(4) = 'ASC'
	,@MonitoringSessionID BIGINT = NULL
	,@ParentSampleID BIGINT = NULL
	,@RootSampleID BIGINT = NULL
	)
AS
BEGIN
	DECLARE @firstRec INT
		,@lastRec INT
		,@TotalRowCount INT = 0;
	DECLARE @Results TABLE (
		SampleID BIGINT NOT NULL
	);

	SET @firstRec = (@PageNumber - 1) * @PageSize;
	SET @lastRec = (@PageNumber * @PageSize + 1);
	SET NOCOUNT ON;

	BEGIN TRY
		INSERT INTO @Results
		SELECT
			m.idfMaterial 
		FROM dbo.tlbMaterial m
		WHERE m.intRowStatus = 0
			AND m.idfMonitoringSession IS NOT NULL 
			AND (m.idfMonitoringSession = @MonitoringSessionID OR @MonitoringSessionID IS NULL)
			AND (
				(
					m.idfParentMaterial = @ParentSampleID
					AND m.idfsSampleKind IS NOT NULL --Get any samples aliquoted or derived once.
					)
				OR (@ParentSampleID IS NULL)
				)
			AND (
				(
					m.idfRootMaterial = @RootSampleID
					AND m.idfsSampleKind IS NOT NULL
					AND m.idfParentMaterial IS NOT NULL
					) --Get any aliquots or derivatives for the root sample.
				OR (@RootSampleID IS NULL)
				);

		SELECT SampleID
			,SampleTypeID
			,SampleTypeName
			,RootSampleID
			,OriginalSampleID
			,HumanID
			,SpeciesID
			,SpeciesTypeID
			,SpeciesTypeName
			,AnimalID
			,EIDSSAnimalID
			,AnimalGenderTypeID
			,AnimalGenderTypeName
			,AnimalAgeTypeID
			,AnimalAgeTypeName
			,AnimalColor
			,AnimalName
			,MonitoringSessionID
			,CollectedByPersonID
			,CollectedByPersonName
			,CollectedByOrganizationID
			,CollectedByOrganizationName
			,MainTestID
			,CollectionDate
			,SentDate
			,EIDSSLocalOrFieldSampleID
			,EIDSSReportSessionID
			,PatientFarmOwnerName
			,VectorSessionID
			,VectorID
			,FreezerID
			,SampleStatusTypeID
			,SampleStatusTypeName
			,FunctionalAreaID
			,FunctionalAreaName
			,DestroyedByPersonID
			,EnteredDate
			,DestructionDate
			,EIDSSLaboratorySampleID
			,Comments
			,SiteID
			,SentToOrganizationID
			,SentToOrganizationName
			,ReadOnlyIndicator
			,BirdStatusTypeID
			,BirdStatusTypeName
			,HumanDiseaseReportID
			,VeterinaryDiseaseReportID
			,AccessionDate
			,AccessionConditionTypeID
			,AccessionConditionTypeName
			,AccessionComment
			,AccessionByPersonID
			,DestructionMethodTypeID
			,CurrentSiteID
			,SampleKindTypeID
			,SampleKindTypeName
			,AccessionedIndicator
			,ShowInReportSessionListIndicator
			,ShowInLaboratoryListIndicator
			,ShowInDispositionListIndicator
			,ShowInAccessionListIndicator
			,MarkedForDispositionByPersonID
			,OutOfRepositoryDate
			,SampleStatusDate
			,DiseaseID
			,EIDSSDiseaseID
			,TestsCount
			,FarmID
			,FarmMasterID
			,EIDSSFarmID
			,Species
			,EIDSSLaboratoryOrLocalFieldSampleID
			,LabModuleSourceIndicator
			,RowStatus 
			,RowAction
			,TotalRowCount
			,CurrentPage
			,TotalPages
		FROM (
			SELECT ROW_NUMBER() OVER (
					ORDER BY CASE 
							WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
								AND @SortOrder = 'ASC'
								THEN m.strFieldBarcode
							END ASC
						,CASE 
							WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
								AND @SortOrder = 'DESC'
								THEN m.strFieldBarcode
							END DESC
						,CASE 
							WHEN @SortColumn = 'SampleTypeName'
								AND @SortOrder = 'ASC'
								THEN sampleType.name
							END ASC
						,CASE 
							WHEN @SortColumn = 'SampleTypeName'
								AND @SortOrder = 'DESC'
								THEN sampleType.name
							END DESC
					) AS RowNum
			,m.idfMaterial AS SampleID
			,m.idfsSampleType AS SampleTypeID
			,sampleType.name AS SampleTypeName
			,m.idfRootMaterial AS RootSampleID
			,m.idfParentMaterial AS OriginalSampleID
			,m.idfHuman AS HumanID
			,m.idfSpecies AS SpeciesID
			,speciesType.idfsReference AS SpeciesTypeID
			,speciesType.name AS SpeciesTypeName
			,m.idfAnimal AS AnimalID
			,a.strAnimalCode AS EIDSSAnimalID
			,a.idfsAnimalGender AS AnimalGenderTypeID
			,animalSexType.name AS AnimalGenderTypeName
			,a.idfsAnimalAge AS AnimalAgeTypeID
			,animalAgeType.name AS AnimalAgeTypeName
			,a.strColor AS AnimalColor
			,a.strName AS AnimalName
			,m.idfMonitoringSession AS MonitoringSessionID
			,m.idfFieldCollectedByPerson AS CollectedByPersonID
			,ISNULL(collectedByPerson.strFamilyName, N'') + ISNULL(', ' + collectedByPerson.strFirstName, '') + ISNULL(' ' + collectedByPerson.strSecondName, '') AS CollectedByPersonName
			,m.idfFieldCollectedByOffice AS CollectedByOrganizationID
			,collectedByOrganization.name AS CollectedByOrganizationName
			,m.idfMainTest AS MainTestID
			,m.datFieldCollectionDate AS CollectionDate
			,m.datFieldSentDate AS SentDate
			,m.strFieldBarcode AS EIDSSLocalOrFieldSampleID
			,m.strCalculatedCaseID AS EIDSSReportSessionID
			,m.strCalculatedHumanName AS PatientFarmOwnerName
			,m.idfVectorSurveillanceSession AS VectorSessionID
			,m.idfVector AS VectorID
			,m.idfSubdivision AS FreezerID
			,m.idfsSampleStatus AS SampleStatusTypeID
			,sampleStatusType.name AS SampleStatusTypeName
			,m.idfInDepartment AS FunctionalAreaID
			,functionalArea.name AS FunctionalAreaName
			,m.idfDestroyedByPerson AS DestroyedByPersonID
			,m.datEnteringDate AS EnteredDate
			,m.datDestructionDate AS DestructionDate
			,m.strBarcode AS EIDSSLaboratorySampleID
			,m.strNote AS Comments
			,m.idfsSite AS SiteID
			,m.idfSendToOffice AS SentToOrganizationID
			,sentToOrganization.name AS SentToOrganizationName
			,m.blnReadOnly AS ReadOnlyIndicator
			,m.idfsBirdStatus AS BirdStatusTypeID
			,birdStatusType.name AS BirdStatusTypeName
			,m.idfHumanCase AS HumanDiseaseReportID
			,m.idfVetCase AS VeterinaryDiseaseReportID
			,m.datAccession AS AccessionDate
			,m.idfsAccessionCondition AS AccessionConditionTypeID
			,accessionConditionType.name AS AccessionConditionTypeName
			,m.strCondition AS AccessionComment
			,m.idfAccesionByPerson AS AccessionByPersonID
			,m.idfsDestructionMethod AS DestructionMethodTypeID
			,m.idfsCurrentSite AS CurrentSiteID
			,m.idfsSampleKind AS SampleKindTypeID
			,sampleKindType.name AS SampleKindTypeName
			,m.blnAccessioned AS AccessionedIndicator
			,m.blnShowInCaseOrSession AS ShowInReportSessionListIndicator
			,m.blnShowInLabList AS ShowInLaboratoryListIndicator
			,m.blnShowInDispositionList AS ShowInDispositionListIndicator
			,m.blnShowInAccessionInForm AS ShowInAccessionListIndicator
			,m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID
			,m.datOutOfRepositoryDate AS OutOfRepositoryDate
			,m.datSampleStatusDate AS SampleStatusDate
			,m.DiseaseID
			,diseaseName.[name] EIDSSDiseaseID
			,CASE WHEN (SELECT Count(*) FROM dbo.tlbTesting t WHERE t.idfMaterial = m.idfMaterial) = 0 THEN 0 ELSE 1 END AS TestsCount
			,f.idfFarm AS FarmID
			,f.idfFarmActual AS FarmMasterID
			,f.strFarmCode AS EIDSSFarmID
			,(
				CASE 
					WHEN ms.idfsMonitoringSessionSpeciesType = 129909620007070
						THEN 'Herd ' + hd.strHerdCode + ' - ' + speciesType.name
					ELSE 'Flock ' + hd.strHerdCode + ' - ' + speciesType.name
					END
				) AS Species
			,CASE 
				WHEN m.strBarcode IS NULL
					THEN m.strFieldBarcode
				ELSE m.strBarcode
				END AS EIDSSLaboratoryOrLocalFieldSampleID
			,m.LabModuleSourceIndicator
			,m.intRowStatus AS RowStatus
			,0 AS RowAction
			,COUNT(*) OVER () AS TotalRowCount
			,CurrentPage = @PageNumber
			,TotalPages = (@TotalRowCount / @PageSize) + IIF(COUNT(*) % @PageSize > 0, 1, 0)
		FROM @Results res
		INNER JOIN dbo.tlbMaterial m ON m.idfMaterial = res.SampleID 
		INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000087) sampleType ON sampleType.idfsReference = m.idfsSampleType
		INNER JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = m.idfMonitoringSession
			AND ms.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) collectedByOrganization ON collectedByOrganization.idfOffice = m.idfFieldCollectedByOffice
		LEFT JOIN dbo.tlbDepartment d ON d.idfDepartment = m.idfInDepartment
			AND d.intRowStatus = 0
		LEFT JOIN dbo.tlbOffice departmentOffice ON departmentOffice.idfOffice = d.idfOrganization
			AND departmentOffice.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000164) functionalArea ON functionalArea.idfsReference = d.idfsDepartmentName
		LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) sentToOrganization ON sentToOrganization.idfOffice = m.idfSendToOffice
		LEFT JOIN dbo.tlbPerson collectedByPerson ON collectedByPerson.idfPerson = m.idfFieldCollectedByPerson
			AND collectedByPerson.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000015) sampleStatusType ON sampleStatusType.idfsReference = m.idfsSampleStatus
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000006) birdStatusType ON birdStatusType.idfsReference = m.idfsBirdStatus
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000110) accessionConditionType ON accessionConditionType.idfsReference = m.idfsAccessionCondition
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000158) sampleKindType ON sampleKindType.idfsReference = m.idfsSampleKind
		LEFT JOIN dbo.tlbAnimal a ON a.idfAnimal = m.idfAnimal
			AND a.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000005) animalAgeType ON animalAgeType.idfsReference = a.idfsAnimalAge
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000007) animalSexType ON animalSexType.idfsReference = a.idfsAnimalGender
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName ON diseaseName.idfsReference = m.DiseaseID
		LEFT JOIN dbo.tlbSpecies s ON s.idfSpecies = CASE 
				WHEN m.idfAnimal IS NULL
					THEN m.idfSpecies
				ELSE a.idfSpecies
				END
			AND s.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000086) speciesType ON speciesType.idfsReference = s.idfsSpeciesType
		LEFT JOIN dbo.tlbHerd hd ON hd.idfHerd = s.idfHerd
			AND hd.intRowStatus = 0
		LEFT JOIN dbo.tlbFarm f ON f.idfFarm = hd.idfFarm
			AND f.intRowStatus = 0
		GROUP BY m.idfMaterial
			,m.idfsSampleType
			,sampleType.name
			,m.idfRootMaterial
			,m.idfParentMaterial
			,m.idfHuman
			,m.idfSpecies
			,speciesType.idfsReference
			,speciesType.name
			,m.idfAnimal
			,a.strAnimalCode
			,a.idfsAnimalGender
			,animalSexType.name
			,a.idfsAnimalAge
			,animalAgeType.name
			,a.strColor
			,a.strName
			,m.idfMonitoringSession
			,m.idfFieldCollectedByPerson
			,collectedByPerson.strFamilyName
			,collectedByPerson.strFirstName
			,collectedByPerson.strSecondName
			,m.idfFieldCollectedByOffice
			,collectedByOrganization.name
			,m.idfMainTest
			,m.datFieldCollectionDate
			,m.datFieldSentDate
			,m.strFieldBarcode
			,m.strCalculatedCaseID
			,m.strCalculatedHumanName
			,m.idfVectorSurveillanceSession
			,m.idfVector
			,m.idfSubdivision
			,m.idfsSampleStatus
			,sampleStatusType.name
			,m.idfInDepartment
			,functionalArea.name 
			,m.idfDestroyedByPerson
			,m.datEnteringDate
			,m.datDestructionDate
			,m.strBarcode
			,m.strNote
			,m.idfsSite
			,m.intRowStatus
			,m.idfSendToOffice
			,sentToOrganization.name
			,m.blnReadOnly
			,m.idfsBirdStatus
			,birdStatusType.name
			,m.idfHumanCase
			,m.idfVetCase
			,m.datAccession
			,m.idfsAccessionCondition
			,accessionConditionType.name
			,m.strCondition
			,m.idfAccesionByPerson
			,m.idfsDestructionMethod
			,m.idfsCurrentSite
			,m.idfsSampleKind
			,sampleKindType.name 
			,m.blnAccessioned 
			,m.blnShowInCaseOrSession 
			,m.blnShowInLabList 
			,m.blnShowInDispositionList 
			,m.blnShowInAccessionInForm 
			,m.idfMarkedForDispositionByPerson 
			,m.datOutOfRepositoryDate 
			,m.datSampleStatusDate 
			,m.DiseaseID
			,diseaseName.[name]
			,hd.strHerdCode
			,f.idfFarm 
			,f.idfFarmActual 
			,f.strFarmCode
			,ms.idfsMonitoringSessionSpeciesType
			,m.LabModuleSourceIndicator
		) AS x
		WHERE RowNum > @firstRec
			AND RowNum < @lastRec
		ORDER BY RowNum;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_VCTS_FIELDTEST_GetList]...';


GO
--*************************************************************
-- Name 				: USP_VCTS_FIELDTEST_GetList
-- Description			: Selects list of field tests related with specific Vector
-- Author               : Harold Pryor
-- Revision History
-- Name				Date		Change Detail
-- Harold Pryor		5/5/2018	Modified to retreive data from tlbTesting table
-- Harold Pryor		5/17/2018	Updated joins to FN_GBL_Reference_List_GET to get proper Vector data
-- Harold Pryor		5/18/2018	Updated to return strFieldBarcode from tlbMaterial table
-- Harold Pryor		5/24/2018	Modified to retrieve TestedByPerson
-- Doug Albanese	1/4/2021	Added parameter to denote Field Tests
-- Doug Albanese	01/29/2021	Changed to return non lab tests
-- Mike Kornegay	05/06/2022	Changed returned column names to match common field test model
-- Mike Kornegay	05/19/2022	Added TotalRowCount for populating grids
-- Mike Kornegay	07/22/2022	Added collection date
-- Doug Albanese	 10/272022	 Added blnNonLaboratoryTest to remove any lab created tests
-- Testing code:
--USP_VCTS_FIELDTEST_GetList @idfVector,'en'
--*************************************************************
ALTER  PROCEDURE [dbo].[USP_VCTS_FIELDTEST_GetList]
(
	@idfVector	BIGINT , --##PARAM
	@LangID		AS NVARCHAR(50) --##PARAM @LangID - language ID
)
AS
BEGIN
	DECLARE @returnMsg VARCHAR(MAX) = 'Success'
	DECLARE @returnCode BIGINT = 0

	BEGIN TRY  	
			SELECT		Test.idfTesting AS TestID,
			            M.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
						m.idfMaterial AS SampleID,
						m.idfsSampleType AS SampleTypeID,
						SampleType.name AS SampleTypeName,
						Test.idfsTestName AS TestNameTypeID,
						TestType.name AS TestNameTypeName,	
						Test.idfsTestCategory AS TestCategoryTypeID, 
						TestCategory.name AS TestCategoryTypeName,
						Test.idfTestedByOffice AS TestedByOrganizationID,
						Office.[Name] AS TestedByOrganizationName,
						Test.idfsTestResult AS TestResultTypeID,  
						TestResult.name AS TestResultTypeName,   
						Test.idfTestedByPerson AS TestedByPersonID, 
						ISNULL(TestedByPerson.strFamilyName, N'') + ISNULL(' ' + TestedByPerson.strFirstName, '') + ISNULL(' ' +TestedByPerson.strSecondName, '') AS TestedByPersonName,
						Test.idfsDiagnosis AS DiseaseID,
						Diagnosis.name AS DiseaseName,
						'' AS RecordAction,
						Test.datConcludedDate AS ConcludedDate,
						Test.datReceivedDate AS ReceivedDate,
						M.datFieldCollectionDate AS CollectionDate,
						Test.idfVector AS VectorID,
						Test.intRowStatus AS RowStatus,
						Test.blnNonLaboratoryTest AS NonLaboratoryTestIndicator,
						Test.blnExternalTest AS ExternalTestIndicator,
						TotalRowCount = COUNT(*) OVER(PARTITION BY 1)
		FROM			[dbo].[tlbTesting] Test
		LEFT JOIN		[dbo].[tlbMaterial] M on M.idfMaterial = Test.IdfMaterial 
		LEFT JOIN		dbo.FN_GBL_Reference_List_GET(@LangID,19000105) TestResult ON TestResult.idfsReference = Test.idfsTestResult     
		LEFT  JOIN		dbo.FN_GBL_Reference_List_GET(@LangID,19000104)  TestType ON TestType.idfsReference = Test.idfsTestName --Vector Type Test
		LEFT JOIN		dbo.FN_GBL_Reference_List_GET(@LangID,19000019) Diagnosis ON Diagnosis.idfsReference = Test.idfsDiagnosis 
		LEFT JOIN		dbo.FN_GBL_Reference_List_GET(@LangID,19000095) TestCategory ON TestCategory.idfsReference = Test.idfsTestCategory
		LEFT  JOIN		dbo.FN_GBL_Reference_List_GET(@LangID,19000087) SampleType ON m.idfsSampleType = SampleType.idfsReference
		LEFT JOIN	    FN_PERSON_SELECTLIST(@LangID) TestedByPerson ON TestedByPerson.idfEmployee = Test.idfTestedByPerson
		LEFT JOIN		dbo.FN_GBL_INSTITUTION(@LangID) Office ON Office.idfOffice = Test.idfTestedByOffice and Office.intRowStatus = 0
		LEFT JOIN		dbo.FN_GBL_Reference_List_GET(@LangID,19000045) CollectedByOffice	ON CollectedByOffice.idfsReference = Office.idfsOfficeName	

		WHERE Test.intRowStatus = 0
		--and M.idfVector = @idfVector
		and Test.idfVector = @idfVector
		--and M.idfMaterial is not null 
		--and M.intRowStatus = 0
		and Test.blnNonLaboratoryTest = 1
		
	END TRY  

	BEGIN CATCH 
	Throw;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_VCTS_LABTEST_GetList]...';


GO
--*************************************************************
-- Name 				: USP_VCTS_LABTEST_GetList
-- Description			: Get Vector Lab Tests List
--          
-- Author               : Harold Pryor
-- Revision History
--		Name       Date			Change Detail
--  Harold Pryor  08/20/2018	Creation
--	Mike Kornegay 05/08/2022	Added TotalRowCount and EIDSSLaboratorySampleID and removed selects for return code
-- Doug Albanese  10/27/2022	 Refactored to eliminate the extra content that is not needed, and to fix the problem where the joins eliminate the records we are seeking
-- Testing code:
/*
--Example of a call of procedure:
declare	@idfVector	bigint = 51
declare @idfVectorSurveillanceSession BIGINT = null
Declare @LangID AS VARCHAR(10) = 'en'

--select @idfVector = MAX(idfVector) from dbo.tlbVector

execute	USP_VCTS_LABTEST_GetList @idfVector, @idfVectorSurveillanceSession, @LangID
*/
--*************************************************************
ALTER PROCEDURE[dbo].[USP_VCTS_LABTEST_GetList]
(		
	@idfVector BIGINT,--##PARAM @idfVector - AS vector ID
	@idfVectorSurveillanceSession BIGINT,--##PARAM @idfVectorSurveillanceSession - AS session ID
	@LangID AS nvarchar(10)--##PARAM @LangID - language ID
)
AS
BEGIN
	DECLARE @returnMsg VARCHAR(MAX) = 'Success'
	DECLARE @returnCode BIGINT = 0

	BEGIN TRY  	

	  SELECT
		 t.idfTesting,
		 m.strBarcode	  AS EIDSSLaboratorySampleID,
		 m.strFieldBarcode as strFieldSampleID,
		 sampleType.name AS strSampleTypeName,
		 SpeciesName.name AS strSpeciesName,
		 testName.name AS strTestName,
		 testResult.name AS strTestResultName,
		 t.datConcludedDate,
		 disease.name AS strDiseaseName,
		 TotalRowCount = COUNT(*) OVER(PARTITION BY 1)
	  FROM
		 tlbTesting T
	  INNER JOIN tlbMaterial M
	  ON M.idfMaterial = T.idfMaterial AND M.intRowStatus = 0
	  LEFT JOIN FN_GBL_ReferenceRepair(@LangID, 19000087) AS sampleType
	  ON sampleType.idfsReference = m.idfsSampleType
	  LEFT JOIN FN_GBL_REFERENCEREPAIR(@LangID,19000086) SpeciesName 
	  ON SpeciesName.idfsReference=m.idfSpecies
	  LEFT JOIN FN_GBL_ReferenceRepair(@LangID, 19000097) AS testName
	  ON testName.idfsReference = t.idfsTestName 
	  LEFT JOIN FN_GBL_ReferenceRepair(@LangID, 19000096) AS testResult
	  ON testResult.idfsReference = t.idfsTestResult
	  LEFT JOIN FN_GBL_ReferenceRepair(@LangID, 19000019) AS disease
	  ON disease.idfsReference = m.DiseaseID
	  --WHERE
		 --T.idfVector = @idfVector AND
		 --T.blnNonLaboratoryTest = 0 AND
		 --T.intRowStatus = 0
	  WHERE
		 M.idfVector = @idfVector
		AND ((M.idfVectorSurveillanceSession = @idfVectorSurveillanceSession) OR (@idfVectorSurveillanceSession IS NULL)) 
		AND T.intRowStatus = 0
		AND M.intRowStatus = 0
		AND (M.idfVectorSurveillanceSession IS NOT NULL AND T.blnNonLaboratoryTest = 0) 

	END TRY  

	BEGIN CATCH 
		THROW;
	END CATCH; 
		
END
GO
PRINT N'Altering Procedure [dbo].[USP_VCTS_SURVEILLANCE_SESSION_GetList]...';


GO
-- ================================================================================================
-- Name: USP_VCTS_SURVEILLANCE_SESSION_GetList
--
-- Description: Gets a list of vector surveillance sessions filtered by various criteria.
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     12/31/2018 Added additional search parameters
-- Maheshwar Deo	03/08/2019 Fixed filter for @DiseaseID
-- Stephen Long     07/19/2019 Added summary disease ID and join.
-- Stephen Long     01/22/2020 Converted site ID to site list for site filtration.
-- Stephen Long     02/19/2020 Added non-configurable site filtration rules.
-- Stephen Long     02/26/2020 Corrected all criteria where clauses; returned incorrect results.
-- Stephen Long     03/25/2020 Added if/else for first-level and second-level site types to bypass 
--                             non-configurable rules.
-- Stephen Long     05/18/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long     06/18/2020 Added where criteria to the query when no site filtration is 
--                             required.
-- Stephen Long     07/07/2020 Added trim to EIDSS identifier like criteria.
-- Doug Albanese	10/16/2020 Added Outbreak's EIDSS ID
-- Doug Albanese	10/16/2020 Added Outbreak's Session Start Date
-- Doug Albanese	11/11/2020 Modified secondary filtering
-- Doug Albanese	11/20/2020 Added dblAlignment (Direction)
-- Stephen Long     11/27/2020 Added configurable site filtration rules.
-- Stephen Long     12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long     12/24/2020 Modified join on disease filtration default role rule.
-- Stephen Long     12/29/2020 Added intRowStatus check on disease filtration insert rules.
-- Doug Albanese	01/21/2021 Change the WHERE claus to detect shared vector types so that it is 
--                             no so strict on records being returned.
-- Stephen Long     04/02/2021 Added updated pagination and location hierarchy.
-- Mike Kornegay	11/05/2021 Added group by surveillance session id to filtration 
--							   intermediate results so final cte join is correct.
-- Stephen Long     11/05/2021 Added vector type ID's and disease ID's to the query.
-- Stephen Long     06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay	07/04/2022 Fixed sorting by pointing to correct location tables in final query.
-- Mike Kornegay	07/05/2022 Fixed search by disease and vector type.
-- Mike Kornegay	08/03/2022 Add order by in final select and change location tables back to inner join.
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Mike Kornegay	10/06/2022 Move order by back to CTE row number partition for performance and correct date clauses.
--
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VCTS_SURVEILLANCE_SESSION_GetList]
(
    @LanguageID NVARCHAR(50),
    @SessionID NVARCHAR(200) = NULL,
    @FieldSessionID NVARCHAR(200) = NULL,
    @StatusTypeID BIGINT = NULL,
    @VectorTypeID NVARCHAR(MAX) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @DiseaseGroupID NVARCHAR(MAX) = NULL,
    @AdministrativeLevelID BIGINT = NULL,
    @StartDateFrom DATETIME = NULL,
    @StartDateTo DATETIME = NULL,
    @EndDateFrom DATETIME = NULL,
    @EndDateTo DATETIME = NULL,
    @OutbreakKey BIGINT = NULL,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'SessionID',
    @SortOrder NVARCHAR(4) = 'DESC',
    @PageNumber INT = 1,
    @PageSize INT = 10
)
AS
BEGIN
    SET NOCOUNT ON;

	DECLARE @firstRec INT;
	DECLARE @lastRec INT;
	SET @firstRec = (@PageNumber-1)* @PageSize
	SET @lastRec = (@PageNumber*@PageSize+1);

    DECLARE @AdministrativeLevelNode AS HIERARCHYID;

	DECLARE @FinalResults TABLE
	(
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
		
    );

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL,
		INDEX IDX_ID(ID)
    );

    BEGIN TRY
        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        IF @AdministrativeLevelID IS NOT NULL
        BEGIN
            SELECT @AdministrativeLevelNode = node
            FROM dbo.gisLocation
            WHERE idfsLocation = @AdministrativeLevelID;
        END;

        -- ========================================================================================
        -- NO SITE FILTRATION RULES APPLIED
        --
        -- For first and second level sites, do not apply any site filtration rules.
        -- ========================================================================================
        IF @ApplySiteFiltrationIndicator = 0
        BEGIN
            INSERT INTO @Results
            SELECT vss.idfVectorSurveillanceSession,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbVectorSurveillanceSession vss
                LEFT JOIN tlbGeoLocation gl
                    ON gl.idfGeoLocation = vss.idfLocation
                       AND gl.intRowStatus = 0
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
				CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPEIDS_GET(vss.idfVectorSurveillanceSession) vectorTypeIDs) vectorTypeIDs
                LEFT JOIN dbo.tlbVector v
                    ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                       AND v.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000141) vectorSubType
                    ON vectorSubType.idfsReference = v.idfsVectorSubType
				CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESIDS_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseaseIDs) diseaseIDs
            WHERE vss.intRowStatus = 0
                  AND (
                          vss.idfsVectorSurveillanceStatus = @StatusTypeID
                          OR @StatusTypeID IS NULL
                      )
                  AND (
                          CHARINDEX(@VectorTypeID, vectorTypeIDs) > 0
                          OR @VectorTypeID IS NULL
                      )
                  AND (
                          vectorSubType.idfsReference = @SpeciesTypeID
                          OR @SpeciesTypeID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          vss.idfOUtBreak = @OutbreakKey
                          OR @OutbreakKey IS NULL
                      )
                  AND (	
						((CAST(vss.datStartDate AS DATE) >= @StartDateFrom AND @StartDateTo IS NULL)
						OR
						(CAST(vss.datStartDate AS DATE) <= @StartDateTo AND @StartDateFrom IS NULL)
						OR
						(CAST(vss.datStartDate AS DATE) BETWEEN @StartDateFrom AND @StartDateTo))
						OR (@StartDateFrom IS NULL AND @StartDateTo IS NULL)
					  )
                  AND (
						((CAST(vss.datCloseDate AS DATE) >= @EndDateFrom AND @EndDateTo IS NULL)
						OR
						(CAST(vss.datCloseDate AS DATE) <= @EndDateTo AND @EndDateFrom IS NULL)
						OR
						(CAST(vss.datCloseDate AS DATE) BETWEEN @EndDateFrom AND @EndDateTo))
						OR 
						(@EndDateFrom IS NULL AND @EndDateTo IS NULL)
					  ) 
                  AND (
                          vss.strSessionID LIKE '%' + TRIM(@SessionID) + '%'
                          OR @SessionID IS NULL
                      )
                  AND (
                          vss.strFieldSessionID LIKE '%' + TRIM(@FieldSessionID) + '%'
                          OR @FieldSessionID IS NULL
                      )
                  AND (
                          CHARINDEX(CAST(@DiseaseID AS NVARCHAR(2000)), diseaseIDs) > 0
                          OR @DiseaseID IS NULL
                      )
            GROUP BY vss.idfVectorSurveillanceSession;
        END
        ELSE
        BEGIN
            DECLARE @FilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID));
            -- =======================================================================================
            -- DEFAULT SITE FILTRATION RULES
            --
            -- Apply non-configurable site filtration rules for third level sites.
            -- =======================================================================================
            DECLARE @RuleActiveStatus INT = 0;
            DECLARE @AdministrativeLevelTypeID INT;
            DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
            DECLARE @DefaultAccessRules AS TABLE
            (
                AccessRuleID BIGINT NOT NULL,
                ActiveIndicator INT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL,
                AdministrativeLevelTypeID INT NULL
            );

            INSERT INTO @DefaultAccessRules
            SELECT AccessRuleID,
                   a.intRowStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator,
                   a.AdministrativeLevelTypeID
            FROM dbo.AccessRule a
            WHERE DefaultRuleIndicator = 1;

            --
            -- Session data shall be available to all sites' organizations connected to the particular 
            -- session.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537019;

            IF @RuleActiveStatus = 0
            BEGIN
                -- Collected and identified by organizations for any vectors/pools
                INSERT INTO @FilteredResults
                SELECT vss.idfVectorSurveillanceSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tlbVector v
                        ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                           AND v.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537019
                WHERE vss.intRowStatus = 0
                      AND (
                              v.idfCollectedByOffice = @UserOrganizationID
                              OR v.idfIdentifiedByOffice = @UserOrganizationID
                          );

                -- Collected by and sent to organizations for any samples
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfVectorSurveillanceSession),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbVectorSurveillanceSession vss
                        ON vss.idfVectorSurveillanceSession = m.idfVectorSurveillanceSession
                           AND vss.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537019
                WHERE m.intRowStatus = 0
                      AND (
                              m.idfFieldCollectedByOffice = @UserOrganizationID
                              OR m.idfSendToOffice = @UserOrganizationID
                          )
                GROUP BY m.idfVectorSurveillanceSession,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;

                -- Tested by organization for any laboratory test
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfVectorSurveillanceSession),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbVectorSurveillanceSession vss
                        ON vss.idfVectorSurveillanceSession = m.idfVectorSurveillanceSession
                           AND vss.intRowStatus = 0
                    INNER JOIN dbo.tlbTesting t
                        ON t.idfMaterial = m.idfMaterial
                           AND t.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537019
                WHERE m.intRowStatus = 0
                      AND t.idfTestedByOffice = @UserOrganizationID
                GROUP BY m.idfVectorSurveillanceSession,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;

                -- Tested by organization for any field test
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfVectorSurveillanceSession),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbVectorSurveillanceSession vss
                        ON vss.idfVectorSurveillanceSession = m.idfVectorSurveillanceSession
                           AND vss.intRowStatus = 0
                    INNER JOIN dbo.tlbPensideTest p
                        ON p.idfMaterial = m.idfMaterial
                           AND p.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537019
                WHERE m.intRowStatus = 0
                      AND p.idfTestedByOffice = @UserOrganizationID
                GROUP BY m.idfVectorSurveillanceSession,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;
            END;

            --
            -- Sent to organizations for any sample transfers
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537021;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT MAX(vss.idfVectorSurveillanceSession),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tlbMaterial m
                        ON vss.idfVectorSurveillanceSession = m.idfVectorSurveillanceSession
                           AND m.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOutMaterial toutm
                        ON m.idfMaterial = toutm.idfMaterial
                           AND toutm.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOUT tout
                        ON toutm.idfTransferOut = tout.idfTransferOut
                           AND tout.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537021
                WHERE vss.intRowStatus = 0
                      AND tout.idfSendToOffice = @UserOrganizationID
                GROUP BY vss.idfVectorSurveillanceSession,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;
            END;

            --
            -- Session data shall be available to all sites of the same administrative level.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537018;

            IF @RuleActiveStatus = 0
            BEGIN
                SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537018;

                SELECT @OrganizationAdministrativeLevelNode
                    = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                FROM dbo.tlbOffice o
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                WHERE o.idfOffice = @UserOrganizationID
                      AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

                -- Administrative level specified in the rule of the site where the session was created.
                INSERT INTO @FilteredResults
                SELECT vss.idfVectorSurveillanceSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tstSite s
                        ON vss.idfsSite = s.idfsSite
                    INNER JOIN dbo.tlbOffice o
                        ON o.idfOffice = s.idfOffice
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537018
                WHERE vss.intRowStatus = 0
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

                -- Administrative level specified in the rule of the session location, if completed
                INSERT INTO @FilteredResults
                SELECT vss.idfVectorSurveillanceSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = vss.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537018
                WHERE vss.intRowStatus = 0
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

                -- Administrative level specified in the rule of any vector location, if completed.
                INSERT INTO @FilteredResults
                SELECT vss.idfVectorSurveillanceSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tlbVector v
                        ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                           AND v.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = v.idfLocation
                    INNER JOIN dbo.gisLocation g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537018
                WHERE vss.intRowStatus = 0
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;

                -- Administration level specified in the rule of the location of any session summary record, if completed.
                INSERT INTO @FilteredResults
                SELECT vss.idfVectorSurveillanceSession,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbVectorSurveillanceSession vss
                    INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                        ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                           AND vsss.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocation AS l
                        ON l.idfGeoLocation = vsss.idfGeoLocation
                    INNER JOIN dbo.gisLocation AS g
                        ON g.idfsLocation = l.idfsLocation
                    INNER JOIN @DefaultAccessRules AS a
                        ON a.AccessRuleID = 10537018
                WHERE vss.intRowStatus = 0
                      AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;
            END;

            -- =======================================================================================
            -- CONFIGURABLE SITE FILTRATION RULES
            -- 
            -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the non-configurable rules.
            -- =======================================================================================
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = vss.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = vss.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = vss.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = vss.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND sgs.idfsSite = vss.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteID = vss.idfsSite;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteID = vss.idfsSite;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT vss.idfVectorSurveillanceSession,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbVectorSurveillanceSession vss
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE vss.intRowStatus = 0
                  AND a.GrantingActorSiteID = vss.idfsSite;

            -- Copy filtered results to results and use search criteria
            INSERT INTO @Results
            SELECT ID,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator
            FROM @FilteredResults
                INNER JOIN dbo.tlbVectorSurveillanceSession vss
                    ON vss.idfVectorSurveillanceSession = ID
                LEFT JOIN tlbGeoLocation gl
                    ON gl.idfGeoLocation = vss.idfLocation
                       AND gl.intRowStatus = 0
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
                CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPEIDS_GET(vss.idfVectorSurveillanceSession) vectorTypeIds) vectorTypeIds
                LEFT JOIN dbo.tlbVector v
                    ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                       AND v.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000141) vectorSubType
                    ON vectorSubType.idfsReference = v.idfsVectorSubType
                CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESIDS_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseaseIDs) diseaseIDs
            WHERE (
                      vss.idfsVectorSurveillanceStatus = @StatusTypeID
                      OR @StatusTypeID IS NULL
                  )
                  AND (
                          CHARINDEX(@VectorTypeID, vectorTypeIds) > 0
                          OR @VectorTypeID IS NULL
                      )
                  AND (
                          vectorSubType.idfsReference = @SpeciesTypeID
                          OR @SpeciesTypeID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          vss.idfOUtBreak = @OutbreakKey
                          OR @OutbreakKey IS NULL
                      )
				  AND (	
						((CAST(vss.datStartDate AS DATE) >= @StartDateFrom AND @StartDateTo IS NULL)
						OR
						(CAST(vss.datStartDate AS DATE) <= @StartDateTo AND @StartDateFrom IS NULL)
						OR
						(CAST(vss.datStartDate AS DATE) BETWEEN @StartDateFrom AND @StartDateTo))
						OR (@StartDateFrom IS NULL AND @StartDateTo IS NULL)
					  )
                  AND (
						((CAST(vss.datCloseDate AS DATE) >= @EndDateFrom AND @EndDateTo IS NULL)
						OR
						(CAST(vss.datCloseDate AS DATE) <= @EndDateTo AND @EndDateFrom IS NULL)
						OR
						(CAST(vss.datCloseDate AS DATE) BETWEEN @EndDateFrom AND @EndDateTo))
						OR 
						(@EndDateFrom IS NULL AND @EndDateTo IS NULL)
					  ) 
                  AND (
                          vss.strSessionID LIKE '%' + TRIM(@SessionID) + '%'
                          OR @SessionID IS NULL
                      )
                  AND (
                          vss.strFieldSessionID LIKE '%' + TRIM(@FieldSessionID) + '%'
                          OR @FieldSessionID IS NULL
                      )
                   AND (
                          CHARINDEX(CAST(@DiseaseID AS NVARCHAR(2000)), diseaseIDs) > 0
                          OR @DiseaseID IS NULL
                      )
            GROUP BY ID,
                     ReadPermissionIndicator,
                     AccessToPersonalDataPermissionIndicator,
                     AccessToGenderAndAgeDataPermissionIndicator,
                     WritePermissionIndicator,
                     DeletePermissionIndicator;
        END;

        -- =======================================================================================
        -- DISEASE FILTRATION RULES
        --
        -- Apply disease filtration rules from use case SAUC62.
        -- =======================================================================================
        -- 
        -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE ID IN (
                        SELECT vss.idfVectorSurveillanceSession
                        FROM dbo.tlbVectorSurveillanceSession vss
                            INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                                   AND vsss.intRowStatus = 0
                            INNER JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                                   AND vssd.intRowStatus = 0
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = vssd.idfsDiagnosis
                                   AND oa.intRowStatus = 0
                        WHERE oa.intPermission = 1
                              AND oa.idfActor = -506 -- Default role
                    );

        --
        -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT vss.idfVectorSurveillanceSession,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbVectorSurveillanceSession vss
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                   AND vsss.intRowStatus = 0
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                   AND vssd.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = vssd.idfsDiagnosis
                   AND oa.intRowStatus = 0
            LEFT JOIN tlbGeoLocation gl
                ON gl.idfGeoLocation = vss.idfLocation
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = gl.idfsLocation
            CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPEIDS_GET(vss.idfVectorSurveillanceSession) vectorTypeIDs) vectorTypeIDs
            LEFT JOIN dbo.tlbVector v
                ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                   AND v.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000141) vectorSubType
                ON vectorSubType.idfsReference = v.idfsVectorSubType
			CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESIDS_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseaseIDs) diseaseIDs
        WHERE oa.intPermission = 2 -- Allow permission
              AND vss.intRowStatus = 0
              AND oa.idfActor = egm.idfEmployeeGroup
              AND (
                      vss.idfsVectorSurveillanceStatus = @StatusTypeID
                      OR @StatusTypeID IS NULL
                  )
              AND (
                      CHARINDEX(@VectorTypeID, vectorTypeIDs) > 0
                      OR @VectorTypeID IS NULL
                  )
              AND (
                      vectorSubType.idfsReference = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                      OR @AdministrativeLevelID IS NULL
                  )
              AND (
                      vss.idfOUtBreak = @OutbreakKey
                      OR @OutbreakKey IS NULL
                  )
			  AND (	
					((CAST(vss.datStartDate AS DATE) >= @StartDateFrom AND @StartDateTo IS NULL)
					OR
					(CAST(vss.datStartDate AS DATE) <= @StartDateTo AND @StartDateFrom IS NULL)
					OR
					(CAST(vss.datStartDate AS DATE) BETWEEN @StartDateFrom AND @StartDateTo))
					OR (@StartDateFrom IS NULL AND @StartDateTo IS NULL)
					)
			  AND (
					((CAST(vss.datCloseDate AS DATE) >= @EndDateFrom AND @EndDateTo IS NULL)
					OR
					(CAST(vss.datCloseDate AS DATE) <= @EndDateTo AND @EndDateFrom IS NULL)
					OR
					(CAST(vss.datCloseDate AS DATE) BETWEEN @EndDateFrom AND @EndDateTo))
					OR 
					(@EndDateFrom IS NULL AND @EndDateTo IS NULL)
					) 
              AND (
                      vss.strSessionID LIKE '%' + TRIM(@SessionID) + '%'
                      OR @SessionID IS NULL
                  )
              AND (
                      vss.strFieldSessionID LIKE '%' + TRIM(@FieldSessionID) + '%'
                      OR @FieldSessionID IS NULL
                  )
			 AND (
						CHARINDEX(CAST(@DiseaseID AS NVARCHAR(2000)), diseaseIDs) > 0
						OR @DiseaseID IS NULL
				  );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbVectorSurveillanceSession vss
                ON vss.idfVectorSurveillanceSession = ID
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                   AND vsss.intRowStatus = 0
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                   AND vssd.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = vssd.idfsDiagnosis
                   AND oa.intRowStatus = 0
        WHERE intPermission = 1 -- Deny permission
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        --
        -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT vss.idfVectorSurveillanceSession,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbVectorSurveillanceSession vss
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                   AND vsss.intRowStatus = 0
            INNER JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                   AND vssd.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = vssd.idfsDiagnosis
                   AND oa.intRowStatus = 0
            LEFT JOIN tlbGeoLocation gl
                ON gl.idfGeoLocation = vss.idfLocation
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = gl.idfsLocation
			CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPEIDS_GET(vss.idfVectorSurveillanceSession) vectorTypeIDs) vectorTypeIDs
            LEFT JOIN dbo.tlbVector v
                ON v.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                   AND v.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000141) vectorSubType
                ON vectorSubType.idfsReference = v.idfsVectorSubType
            CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESIDS_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseaseIDs ) diseaseIDs
        WHERE oa.intPermission = 2 -- Allow permission
              AND vss.intRowStatus = 0
              AND oa.idfActor = @UserEmployeeID
              AND (
                      vss.idfsVectorSurveillanceStatus = @StatusTypeID
                      OR @StatusTypeID IS NULL
                  )
              AND (
                      CHARINDEX(@VectorTypeID, vectorTypeIDs) > 0
                      OR @VectorTypeID IS NULL
                  )
              AND (
                      vectorSubType.idfsReference = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                      OR @AdministrativeLevelID IS NULL
                  )
              AND (
                      vss.idfOUtBreak = @OutbreakKey
                      OR @OutbreakKey IS NULL
                  )
			  AND (	
					((CAST(vss.datStartDate AS DATE) >= @StartDateFrom AND @StartDateTo IS NULL)
					OR
					(CAST(vss.datStartDate AS DATE) <= @StartDateTo AND @StartDateFrom IS NULL)
					OR
					(CAST(vss.datStartDate AS DATE) BETWEEN @StartDateFrom AND @StartDateTo))
					OR (@StartDateFrom IS NULL AND @StartDateTo IS NULL)
					)
			  AND (
					((CAST(vss.datCloseDate AS DATE) >= @EndDateFrom AND @EndDateTo IS NULL)
					OR
					(CAST(vss.datCloseDate AS DATE) <= @EndDateTo AND @EndDateFrom IS NULL)
					OR
					(CAST(vss.datCloseDate AS DATE) BETWEEN @EndDateFrom AND @EndDateTo))
					OR 
					(@EndDateFrom IS NULL AND @EndDateTo IS NULL)
					) 
              AND (
                      vss.strSessionID LIKE '%' + TRIM(@SessionID) + '%'
                      OR @SessionID IS NULL
                  )
              AND (
                      vss.strFieldSessionID LIKE '%' + TRIM(@FieldSessionID) + '%'
                      OR @FieldSessionID IS NULL
                  )
             AND (
					  CHARINDEX(CAST(@DiseaseID AS NVARCHAR(2000)), diseaseIDs) > 0
					  OR @DiseaseID IS NULL
                 );

        DELETE FROM @Results
        WHERE ID IN (
                        SELECT vss.idfVectorSurveillanceSession
                        FROM dbo.tlbVectorSurveillanceSession vss
                            INNER JOIN dbo.tlbVectorSurveillanceSessionSummary vsss
                                ON vsss.idfVectorSurveillanceSession = vss.idfVectorSurveillanceSession
                                   AND vsss.intRowStatus = 0
                            INNER JOIN dbo.tlbVectorSurveillanceSessionSummaryDiagnosis vssd
                                ON vsss.idfsVSSessionSummary = vssd.idfsVSSessionSummary
                                   AND vssd.intRowStatus = 0
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = vssd.idfsDiagnosis
                                   AND oa.intRowStatus = 0
                        WHERE intPermission = 1 -- Deny permission
                              AND idfActor = @UserEmployeeID
                    );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator
        FROM @Results res
        WHERE res.ReadPermissionIndicator = 1
        GROUP BY ID,
                 ReadPermissionIndicator,
                 AccessToPersonalDataPermissionIndicator,
                 AccessToGenderAndAgeDataPermissionIndicator,
                 WritePermissionIndicator,
                 DeletePermissionIndicator;

        
		WITH paging
        AS (SELECT ROW_NUMBER() OVER (ORDER BY
				CASE WHEN @SortColumn = 'SessionID' AND @SortOrder = 'ASC' THEN vss.strSessionID END ASC,
                CASE WHEN @SortColumn = 'SessionID' AND @SortOrder = 'DESC' THEN vss.strSessionID END DESC,
                CASE WHEN @SortColumn = 'SessionStatusTypeName' AND @SortOrder = 'ASC' THEN sessionStatusType.name END ASC,
                CASE WHEN @SortColumn = 'SessionStatusTypeName' AND @SortOrder = 'DESC' THEN sessionStatusType.name END DESC,
                CASE WHEN @SortColumn = 'StartDate' AND @SortOrder = 'ASC' THEN vss.datStartDate END ASC,
                CASE WHEN @SortColumn = 'StartDate' AND @SortOrder = 'DESC' THEN vss.datStartDate END DESC,
                CASE WHEN @SortColumn = 'CloseDate' AND @SortOrder = 'ASC' THEN vss.datCloseDate END ASC,
                CASE WHEN @SortColumn = 'CloseDate' AND @SortOrder = 'DESC' THEN vss.datCloseDate END DESC,
                CASE WHEN @SortColumn = 'AdministrativeLevel1Name' AND @SortOrder = 'ASC' THEN lh.AdminLevel2Name END ASC,
                CASE WHEN @SortColumn = 'AdministrativeLevel1Name' AND @SortOrder = 'DESC' THEN lh.AdminLevel2Name END DESC,
                CASE WHEN @SortColumn = 'AdministrativeLevel2Name' AND @SortOrder = 'ASC' THEN lh.AdminLevel3Name END ASC,
                CASE WHEN @SortColumn = 'AdministrativeLevel2Name' AND @SortOrder = 'DESC' THEN lh.AdminLevel3Name END DESC,
                CASE WHEN @SortColumn = 'VectorType' AND @SortOrder = 'ASC' THEN vectorTypes.vectorTypes END ASC,
                CASE WHEN @SortColumn = 'VectorType' AND @SortOrder = 'DESC' THEN vectorTypes.vectorTypes END DESC,
                CASE WHEN @SortColumn = 'Disease' AND @SortOrder = 'ASC' THEN diseases.diseases END ASC,
                CASE WHEN @SortColumn = 'Disease' AND @SortOrder = 'DESC' THEN diseases.diseases END DESC 
			) AS ROWNUM,
			idfVectorSurveillanceSession AS SessionKey,
            strSessionID AS SessionID,
            vss.strFieldSessionID AS FieldSessionID,
            vss.idfOUtBreak AS OutbreakKey,
            o.strOutbreakID AS OutbreakID,
            o.datStartDate AS OutbreakStartDate,
            vectorTypeIDs.vectorTypeIDs AS VectorTypeIDs,
            vectorTypes.vectorTypes AS Vectors,
            diseaseIDs.diseaseIDs AS DiseaseIDs,
            diseases.diseases AS Diseases,
            statusType.name AS StatusTypeName,
            lh.AdminLevel2Name AS AdministrativeLevel1Name,
            lh.AdminLevel3Name AS AdministrativeLevel2Name,
            lh.AdminLevel4Name AS SettlementName,
            gl.dblLatitude AS Latitude,
            gl.dblLongitude AS Longitude,
            vss.datStartDate AS StartDate,
            vss.datCloseDate AS CloseDate,
            vss.idfsSite AS SiteID,
            res.ReadPermissionIndicator,
            res.AccessToPersonalDataPermissionIndicator,
            res.AccessToGenderAndAgeDataPermissionIndicator,
            res.WritePermissionIndicator,
            res.DeletePermissionIndicator,
			COUNT(*) OVER() AS RecordCount,
            (SELECT COUNT(*) FROM dbo.tlbVectorSurveillanceSession WHERE intRowStatus = 0 ) AS TotalCount
            FROM @FinalResults res
            INNER JOIN dbo.tlbVectorSurveillanceSession vss ON vss.idfVectorSurveillanceSession = res.ID
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000133) sessionStatusType ON sessionStatusType.idfsReference = vss.idfsVectorSurveillanceStatus
            LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = vss.idfLocation
            INNER JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
			INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh ON lh.idfsLocation = g.idfsLocation
            CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESNAMES_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseases) diseases
			CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPENAMES_GET(vss.idfVectorSurveillanceSession, @LanguageID) vectorTypes) vectorTypes
			CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_DIAGNOSESIDS_GET(vss.idfVectorSurveillanceSession, @LanguageID) diseaseIDs ) diseaseIDs
			CROSS APPLY (SELECT dbo.FN_VCTS_VSSESSION_VECTORTYPEIDS_GET(vss.idfVectorSurveillanceSession) vectorTypeIDs ) vectorTypeIDs
			LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000133) statusType ON statusType.idfsReference = vss.idfsVectorSurveillanceStatus
			LEFT JOIN dbo.tlbOutbreak o ON o.idfOutbreak = vss.idfOutbreak AND o.intRowStatus = 0
		)

		SELECT SessionKey,
               SessionID,
               FieldSessionID,
               OutbreakKey,
               OutbreakID,
               OutbreakStartDate,
               VectorTypeIDs,
               Vectors,
               DiseaseIDs,
               Diseases,
               StatusTypeName,
               AdministrativeLevel1Name,
               AdministrativeLevel2Name,
               SettlementName,
               Latitude,
               Longitude,
               StartDate,
               CloseDate,
               SiteID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
			   RecordCount,
               TotalCount,
               CurrentPage = @PageNumber,
               TotalPages = (RecordCount / @PageSize) + IIF(RecordCount % @PageSize > 0, 1, 0)
        FROM paging 
		WHERE RowNum > @firstRec AND RowNum < @lastRec
		ORDER BY 
				CASE WHEN @SortColumn = 'SessionID' AND @SortOrder = 'ASC' THEN SessionID END ASC,
                CASE WHEN @SortColumn = 'SessionID' AND @SortOrder = 'DESC' THEN SessionID END DESC,
                CASE WHEN @SortColumn = 'SessionStatusTypeName' AND @SortOrder = 'ASC' THEN StatusTypeName END ASC,
                CASE WHEN @SortColumn = 'SessionStatusTypeName' AND @SortOrder = 'DESC' THEN StatusTypeName END DESC,
                CASE WHEN @SortColumn = 'StartDate' AND @SortOrder = 'ASC' THEN StartDate END ASC,
                CASE WHEN @SortColumn = 'StartDate' AND @SortOrder = 'DESC' THEN StartDate END DESC,
                CASE WHEN @SortColumn = 'CloseDate' AND @SortOrder = 'ASC' THEN CloseDate END ASC,
                CASE WHEN @SortColumn = 'CloseDate' AND @SortOrder = 'DESC' THEN CloseDate END DESC,
                CASE WHEN @SortColumn = 'AdministrativeLevel1Name' AND @SortOrder = 'ASC' THEN AdministrativeLevel2Name END ASC,
                CASE WHEN @SortColumn = 'AdministrativeLevel1Name' AND @SortOrder = 'DESC' THEN AdministrativeLevel2Name END DESC,
                CASE WHEN @SortColumn = 'AdministrativeLevel2Name' AND @SortOrder = 'ASC' THEN SettlementName END ASC,
                CASE WHEN @SortColumn = 'AdministrativeLevel2Name' AND @SortOrder = 'DESC' THEN SettlementName END DESC,
                CASE WHEN @SortColumn = 'VectorType' AND @SortOrder = 'ASC' THEN Vectors END ASC,
                CASE WHEN @SortColumn = 'VectorType' AND @SortOrder = 'DESC' THEN Vectors END DESC,
                CASE WHEN @SortColumn = 'Disease' AND @SortOrder = 'ASC' THEN Diseases END ASC,
                CASE WHEN @SortColumn = 'Disease' AND @SortOrder = 'DESC' THEN Diseases END DESC;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_VCTS_VSSESSION_New_GetDetail]...';


GO
--*************************************************************
-- Name 				: [USP_VCTS_VSSESSION_NEW_GetDetail]
-- Description			: Get Vector Surveillance Session data for session id
--          
-- Author               : Lamont Mitchell
-- Revision History
--		Name		Date       Change Detail
-- Harold Pryor	 4/23/2018	Initial Creation
-- Harold Pryor  6/7/2018   Updated to return idfsGeoLocationType
--
-- Doug Albanese	03-10-2020	Changes Defect 6212
-- Doug Albanese	10-16-2020	Added Outbreak's EIDSS ID
-- Doug Albanese	11-20-2020	Added dblAlignment (Direction)
-- Lamont Mitchell	11-11-2021	Added AdminLevels
-- Lamont Mitchell  12-12-2021  Added Location Hiarchy and missing fields, renamed SP added the work New to identify the new SP
-- Mike Kornegay	10-05-2022  Correct idfsSite to pull from the tlbVectorSurveillanceSession and not tlbGeoLocation.
-- Testing code:
-- EXEC USP_VCTS_VSSESSION_GetDetail(1, 'en')
--*************************************************************

ALTER PROCEDURE [dbo].[USP_VCTS_VSSESSION_New_GetDetail]
(
	@idfVectorSurveillanceSession AS BIGINT ,--##PARAM @idfVectorSurveillanceSession - AS session ID
	@LangID AS nvarchar(50)--##PARAM @LangID - language ID
)
AS
BEGIN
	DECLARE @ReturnMsg VARCHAR(MAX)
	SELECT	@ReturnMsg = ''
	DECLARE @ReturnCode BIGINT

	BEGIN TRY  	
  SELECT		vss.idfVectorSurveillanceSession,
				vss.strSessionID,
				ISNULL([dbo].[FN_VCTS_VSSESSION_VECTORTYPENAMES_GET](vss.idfVectorSurveillanceSession, @LangID),'') AS [strVectors],  
				ISNULL([dbo].[FN_VCTS_VSSESSION_VECTORTYPEIDS_GET](vss.idfVectorSurveillanceSession),'') AS [strVectorTypeIds],
				ISNULL([dbo].[FN_VCTS_VSSESSION_DIAGNOSESNAMES_GET](vss.idfVectorSurveillanceSession, @LangID), '') AS [strDiagnoses],
				ISNULL([dbo].[FN_VCTS_VSSESSION_DIAGNOSESIDS_GET](vss.idfVectorSurveillanceSession, @LangID), '') AS [strDiagnosesIDs],
				vss.strFieldSessionID,
				VSStatus.name strVSStatus,
				vss.idfsVectorSurveillanceStatus,  
				vss.intCollectionEffort,
				vss.strDescription,
				vss.datStartDate,
				vss.datCloseDate,  
				o.idfOutbreak,
			 	vss.idfLocation as idfGeoLocation,
				g.AdminLevel1Name strCountry,
				gl.idfsCountry,
				g.AdminLevel2Name strRegion,
				g.AdminLevel2ID idfsRegion,
				g.AdminLevel3Name strRayon,
				g.AdminLevel3ID idfsRayon,
				g.AdminLevel4ID idfsSettlement,
				g.AdminLevel4Name strSettlement, 
				gl.dblLatitude,
				gl.dblLongitude,
				vss.idfsSite,
				gl.strForeignAddress,
				gl.idfsGroundType,
				gl.dblDistance,
				gl.idfsGeoLocationType,
				gl.idfsLocation,
				gl.strStreetName,
				gl.strHouse,
				gl.strBuilding,
				gl.strApartment,
				gl.strAddressString,
				gl.strPostCode,
				gl.dblAccuracy,
				gl.strDescription LocationDescription,
				o.strOutbreakID,
				o.datStartDate OutbreakStartDate,
				gl.dblAlignment As dblDirection,
				g.AdminLevel1ID   AdminLevel0Value,
				g.AdminLevel1Name  AS AdminLevel0Text,
				g.AdminLevel2ID   AS AdminLevel1Value,
				g.AdminLevel2Name  AS AdminLevel1Text,
				g.AdminLevel3ID   AS AdminLevel2Value,
				g.AdminLevel3Name AS AdminLevel2Text,
				g.AdminLevel4ID   AS AdminLevel3Value,
				g.AdminLevel4Name  AS AdminLevel3Text,
				g.AdminLevel5ID   AS AdminLevel4Value,
				g.AdminLevel5Name  AS AdminLevel4Text,
				g.AdminLevel6ID   AS AdminLevel5Value,
				g.AdminLevel6Name  AS AdminLevel5Text,
				g.AdminLevel7ID   AS AdminLevel6Value,
				g.AdminLevel7Name  AS AdminLevel6Text
			FROM tlbVectorSurveillanceSession Vss
			LEFT JOIN	dbo.tlbGeoLocation gl ON Vss.idfLocation = gl.idfGeoLocation
			LEFT JOIN fn_gbl_locationHierarchy_Flattened(@LangID) g ON g.idfsLocation = gl.idfsLocation
			LEFT JOIN	tlbOutbreak O ON O.idfOutbreak = VSS.idfOutbreak
			Left JOIN FN_GBL_ReferenceRepair(@LangID,19000133) VSStatus On Vss.idfsVectorSurveillanceStatus = VSStatus.idfsReference
		WHERE	idfVectorSurveillanceSession = @idfVectorSurveillanceSession

	END TRY  
		BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_VET_FARM_MASTER_GETList]...';


GO
-- ================================================================================================
-- Name: USP_VET_FARM_MASTER_GETList
--
-- Description:	Get farm actual list for farm search and other use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     04/05/2019 Initial release.
-- Stephen Long     04/27/2019 Correction to where clause; added row status check.
-- Stephen Long     05/22/2019 Added additional farm address fields to the select.
-- Stephen Long     06/22/2019 Fix to the farm address logic (building, apartment, house IIF's 
--                             to case statements).
-- Stephen Long     07/18/2019 Added check for farms marked as both avian and livestock to return 
--                             when avian or livestock are sent in as criteria.
-- Ann Xiong        10/17/2019 Added one additional field and modified one field to the select, 
--                             added a parameter @EIDSSFarmOwnerID NVARCHAR(100) = NULL.
-- Mandar Kulkarni  06/18/2020 Since the data for idfsCategory in 6.1 is not populated, added code 
--                             to determine farm type based on intHACode.
-- Stephen Long     07/06/2020 Added leading wildcard character on like criteria.
-- Stephen Long     08/03/2020 Added EIDSS legacy ID to the parameters and where criteria.
-- Stephen Long     09/16/2020 Changed default sort order to descending.
-- Stephen Long     10/12/2020 Added elevation to the query.
-- Stephen Long     12/23/2020 Corrected where criteria for farm type when both avian and 
--                             livestock.
-- Stephen Long     01/25/2021 Added order by parameter to handle when a user selected a specific 
--                             column to sort by.
-- Stephen Long     01/27/2021 Fix for order by; alias will not work on order by with case.
-- Mike Kornegay	02/17/2022 Changed paging to match standard CTE paging structure and added various
--							   sorting options.
-- Mike Kornegay	02/18/2022 Improvement recommendations from Mandar Kulkarni - remove left join 
--							   to gisSettlement and replace with sub query.
-- Mike Kornegay	03/10/2022 Added subquery to get the FarmId from tlbFarm if it exists.
-- Michael Brown    03/27/2022 Added parameter @FarmTypesName to filter based on the actual FarmTypeID 
--							   of the farm (LiceStock, Avian, or All (both). The assumption is that we 
--							   we will only get the values 10040007, 10040003, or 10040001.
-- Michael Brown    03/30/2022 Had to change SP because a NULL value could be passed for the 
--							   FarmTypeID. Also the @FarmName, @FarmOwnerFirstName, and 
--							   @FarmOwnerLastName were changed to NULL as opposed to '' empty strings.
-- Stephen Long     05/11/2022 Corrected farm type ID and to use translated value.  Set farm ID 
--                             to null instead of sub-query; field no longer needed.
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.  Removed farm 
--                             ID field.
-- Stephen Long     10/10/2022 Added monitoring session ID parameter and where criteria.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VET_FARM_MASTER_GETList]
(
    @LanguageID NVARCHAR(20),
    @FarmMasterID BIGINT = NULL,
    @EIDSSFarmID NVARCHAR(200) = NULL,
    @LegacyFarmID NVARCHAR(200) = NULL,
    @FarmTypeID BIGINT = NULL,
    @FarmName NVARCHAR(200) = NULL,
    @FarmOwnerFirstName NVARCHAR(200) = NULL,
    @FarmOwnerLastName NVARCHAR(200) = NULL,
    @EIDSSPersonID NVARCHAR(100) = NULL,
    @EIDSSFarmOwnerID NVARCHAR(100) = NULL,
    @FarmOwnerID BIGINT = NULL,
    @idfsLocation BIGINT = NULL,
    @SettlementTypeID BIGINT = NULL,
    @MonitoringSessionID BIGINT = NULL,
    @sortColumn NVARCHAR(100) = 'EIDSSFarmID',
    @sortOrder NVARCHAR(4) = 'DESC',
    @pageNo INT = 1,
    @pageSize INT = 10
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @FarmTypesName NVARCHAR(200) = NULL;
        DECLARE @ReturnMessage VARCHAR(MAX) = 'SUCCESS';
        DECLARE @ReturnCode BIGINT = 0;
        DECLARE @FarmTypes TABLE
        (
            FarmTypeID BIGINT,
            FarmTypeName NVARCHAR(200)
        );

        -- 06/18/2020 - Based on the parameter value passed farm type field, set the intHACode value to look for in v6.1 data
        DECLARE @AccessoryCode INT,
                @LanguageCode BIGINT = dbo.FN_GBL_LanguageCode_Get(@LanguageID);

        DECLARE @LocationNode HIERARCHYID = (
                                                SELECT node FROM dbo.gisLocation WHERE idfsLocation = @idfsLocation
                                            )

        DECLARE @firstRec INT;
        DECLARE @lastRec INT;

        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        SET @firstRec = (@pageNo - 1) * @pagesize;
        SET @lastRec = (@pageNo * @pageSize + 1);

        INSERT INTO @FarmTypes
        SELECT snt.idfsBaseReference,
               snt.strTextString
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE idfsReferenceType = 19000040
              AND idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        IF @FarmTypeID = 10040007 -- Livestock
        BEGIN
            SET @AccessoryCode = 32;
            SET @FarmTypesName =
            (
                SELECT FarmTypeName FROM @FarmTypes WHERE FarmTypeID = 10040007
            );
        END;
        ELSE IF @FarmTypeID = 10040003 -- Avian
        BEGIN
            SET @AccessoryCode = 64;
            SET @FarmTypesName =
            (
                SELECT FarmTypeName FROM @FarmTypes WHERE FarmTypeID = 10040003
            );
        END;
        ELSE IF @FarmTypeID = 10040001 -- All (both)
        BEGIN
            SET @AccessoryCode = NULL;
            --SET @FarmTypeID = NULL;	
            SET @FarmTypesName =
            (
                SELECT FarmTypeName FROM @FarmTypes WHERE FarmTypeID = 10040001
            );
        END;
        ELSE
        BEGIN
            SET @AccessoryCode = NULL;
            SET @FarmTypeID = NULL;
            SET @FarmTypesName = '';
        END;

        ;WITH CTEIntermediate
        AS (SELECT fa.idfFarmActual AS FarmMasterID,

                   -- 06/18/2020 - Made changes to look for intHACode if idfsCategory column is not populated for v6.1 data.
                   --			fa.idfsFarmCategory AS FarmTypeID,
                   --			farmType.name AS FarmTypeName,
                   (CASE
                        WHEN idfsFarmCategory = 10040007
                             OR (
                                    fa.intHACode = 32
                                    AND fa.idfsFarmCategory IS NULL
                                ) THEN
                            10040007
                        WHEN idfsFarmCategory = 10040003
                             OR (
                                    fa.intHACode = 64
                                    AND fa.idfsFarmCategory IS NULL
                                ) THEN
                            10040003
                        ELSE
                            10040001
                    END
                   ) AS FarmTypeID,
                   (CASE
                        WHEN idfsFarmCategory = 10040007
                             OR (
                                    fa.intHACode = 32
                                    AND fa.idfsFarmCategory IS NULL
                                ) THEN
                        (
                            SELECT FarmTypeName FROM @FarmTypes WHERE FarmTypeID = 10040007
                        )
                        WHEN idfsFarmCategory = 10040003
                             OR (
                                    fa.intHACode = 64
                                    AND fa.idfsFarmCategory IS NULL
                                ) THEN
                        (
                            SELECT FarmTypeName FROM @FarmTypes WHERE FarmTypeID = 10040003
                        )
                        ELSE
                    (
                        SELECT FarmTypeName FROM @FarmTypes WHERE FarmTypeID = 10040001
                    )
                    END
                   ) AS FarmTypeName,
                   fa.idfHumanActual AS FarmOwnerID,
                   fa.idfFarmAddress AS FarmAddressID,
                   fa.strNationalName AS FarmName,
                   fa.strFarmCode AS EIDSSFarmID,
                   fa.strFax AS Fax,
                   fa.strEmail AS Email,
                   fa.strContactPhone AS Phone,
                   fa.intLivestockTotalAnimalQty AS TotalLivestockAnimalQuantity,
                   fa.intAvianTotalAnimalQty AS TotalAvianAnimalQuantity,
                   fa.intLivestockSickAnimalQty AS SickLivestockAnimalQuantity,
                   fa.intAvianSickAnimalQty AS SickAvianAnimalQuantity,
                   fa.intLivestockDeadAnimalQty AS DeadLivestockAnimalQuantity,
                   fa.intAvianDeadAnimalQty AS DeadAvianAnimalQuantity,
                   fa.intRowStatus AS RowStatus,
                   lh.AdminLevel1ID AS CountryID,
                   lh.AdminLevel2ID AS RegionID,
                   lh.AdminLevel2Name AS RegionName,
                   lh.AdminLevel3ID AS RayonID,
                   lh.AdminLevel3Name AS RayonName,
                   settlement.idfsLocation AS SettlementID,
                   settlementName.name AS SettlementName,
                   gls.strApartment AS Apartment,
                   gls.strBuilding AS Building,
                   gls.strHouse AS House,
                   gls.strPostCode AS PostalCode,
                   gls.strStreetName AS Street,
                   gls.dblLatitude AS Latitude,
                   gls.dblLongitude AS Longitude,
                   gls.dblElevation AS Elevation,
                   ha.strPersonID AS EIDSSFarmOwnerID,
                   haai.EIDSSPersonID,
                   (CASE
                        WHEN ha.strFirstName IS NULL THEN
                            ''
                        WHEN ha.strFirstName = '' THEN
                            ''
                        ELSE
                            ha.strFirstName
                    END + CASE
                              WHEN ha.strSecondName IS NULL THEN
                                  ''
                              WHEN ha.strSecondName = '' THEN
                                  ''
                              ELSE
                                  ' ' + ha.strSecondName
                          END + CASE
                                    WHEN ha.strLastName IS NULL THEN
                                        ''
                                    WHEN ha.strLastName = '' THEN
                                        ''
                                    ELSE
                                        ' ' + ha.strLastName
                                END
                   ) AS FarmOwnerName,
                   ha.strFirstName AS FarmOwnerFirstName,
                   ha.strLastName AS FarmOwnerLastName,
                   ha.strSecondName AS FarmOwnerSecondName
            FROM dbo.tlbFarmActual fa
                LEFT JOIN dbo.tlbHumanActual ha
                    ON ha.idfHumanActual = fa.idfHumanActual
                LEFT JOIN dbo.HumanActualAddlInfo haai
                    ON haai.HumanActualAddlInfoUID = ha.idfHumanActual
                LEFT JOIN dbo.tlbGeoLocationShared gls
                    ON gls.idfGeoLocationShared = fa.idfFarmAddress
                       AND gls.intRowStatus = 0
                INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = gls.idfsLocation
                LEFT JOIN dbo.gisLocation settlement
                    ON settlement.idfsLocation = gls.idfsLocation
                       AND settlement.idfsType IS NOT NULL
                LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000004) settlementName
                    ON settlementName.idfsReference = settlement.idfsLocation
            WHERE fa.intRowStatus = 0
                  AND (
                          (fa.idfFarmActual = @FarmMasterID)
                          OR (@FarmMasterID IS NULL)
                      )
                  AND (
                          -- 06/18/2020 - Added condition also to look for intHACode values as idfsCategory column is not populated in v6.1 data.
                          (
                              fa.idfsFarmCategory = @FarmTypeID
                              OR fa.idfsFarmCategory = 10040001
                          ) --10040001 = both avian and livestock
                          OR (@FarmTypeID IS NULL)
                          OR (fa.intHACode = @AccessoryCode)
                          OR (@AccessoryCode IS NULL)
                      )
                  AND (
                          (ha.idfHumanActual = @FarmOwnerID)
                          OR (@FarmOwnerID IS NULL)
                      )
                  AND (
                          lh.AdminLevel2ID = @idfsLocation
                          OR @LocationNode.IsDescendantOf(lh.Node) = 1
                          OR lh.Node.IsDescendantOf(@LocationNode) = 1
                          OR @idfsLocation IS NULL
                      )
                  AND (
                          lh.AdminLevel3ID = @idfsLocation
                          OR @LocationNode.IsDescendantOf(lh.Node) = 1
                          OR lh.Node.IsDescendantOf(@LocationNode) = 1
                          OR @idfsLocation IS NULL
                      )
                  AND (
                          lh.AdminLevel4ID = @idfsLocation
                          OR @LocationNode.IsDescendantOf(lh.Node) = 1
                          OR lh.Node.IsDescendantOf(@LocationNode) = 1
                          OR @idfsLocation IS NULL
                      )
                  AND (
                          @SettlementTypeID IS NOT NULL
                          AND EXISTS
            (
                SELECT idfsSettlementType
                FROM dbo.gisSettlement
                WHERE idfsSettlementType = @SettlementTypeID
            )
                          OR @SettlementTypeID IS NULL
                      )
                  AND (
                          (fa.strFarmCode LIKE '%' + TRIM(@EIDSSFarmID) + '%')
                          OR (@EIDSSFarmID IS NULL)
                      )
                  AND (
                          (
                              fa.strFarmCode LIKE '%' + TRIM(@LegacyFarmID) + '%'
                              AND fa.SourceSystemNameID = 10519002
                          ) --EIDSS version 6.1 record source (migrated record)
                          OR (@LegacyFarmID IS NULL)
                      )
                  AND (
                          (fa.strNationalName LIKE '%' + @FarmName + '%')
                          OR (@FarmName IS NULL)
                      )
                  AND (
                          (ha.strFirstName LIKE '%' + @FarmOwnerFirstName + '%')
                          OR (@FarmOwnerFirstName IS NULL)
                      )
                  AND (
                          (ha.strLastName LIKE '%' + @FarmOwnerLastName + '%')
                          OR (@FarmOwnerLastName IS NULL)
                      )
                  AND (
                          (haai.EIDSSPersonID LIKE '%' + TRIM(@EIDSSPersonID) + '%')
                          OR (@EIDSSPersonID IS NULL)
                      )
                  AND (
                          (ha.strPersonID LIKE '%' + TRIM(@EIDSSFarmOwnerID) + '%')
                          OR (@EIDSSFarmOwnerID IS NULL)
                      )
                  AND (
                          EXISTS
            (
                SELECT idfFarm
                FROM dbo.tlbFarm
                WHERE idfFarmActual = fa.idfFarmActual
                      AND idfMonitoringSession = @MonitoringSessionID
            )
                          OR @MonitoringSessionID IS NULL
                      )
           ),
              CTEResults
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @sortColumn = 'FarmMasterID'
                                                        AND @SortOrder = 'asc' THEN
                                                       FarmMasterID
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'FarmMasterID'
                                                        AND @SortOrder = 'desc' THEN
                                                       FarmMasterID
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'FarmTypeID'
                                                        AND @SortOrder = 'asc' THEN
                                                       FarmTypeID
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'FarmTypeID'
                                                        AND @SortOrder = 'desc' THEN
                                                       FarmTypeID
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'FarmTypeName'
                                                        AND @SortOrder = 'asc' THEN
                                                       FarmTypeName
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'FarmTypeName'
                                                        AND @SortOrder = 'desc' THEN
                                                       FarmTypeName
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'FarmOwnerID'
                                                        AND @SortOrder = 'asc' THEN
                                                       FarmOwnerID
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'FarmOwnerID'
                                                        AND @SortOrder = 'desc' THEN
                                                       FarmOwnerID
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'FarmAddressID'
                                                        AND @SortOrder = 'asc' THEN
                                                       FarmAddressID
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'FarmAddressID'
                                                        AND @SortOrder = 'desc' THEN
                                                       FarmAddressID
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'FarmName'
                                                        AND @SortOrder = 'asc' THEN
                                                       FarmName
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'FarmName'
                                                        AND @SortOrder = 'desc' THEN
                                                       FarmName
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'EIDSSFarmID'
                                                        AND @SortOrder = 'asc' THEN
                                                       EIDSSFarmID
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'EIDSSFarmID'
                                                        AND @SortOrder = 'desc' THEN
                                                       EIDSSFarmID
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'Fax'
                                                        AND @SortOrder = 'asc' THEN
                                                       Fax
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'Fax'
                                                        AND @SortOrder = 'desc' THEN
                                                       Fax
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'Email'
                                                        AND @SortOrder = 'asc' THEN
                                                       Email
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'Email'
                                                        AND @SortOrder = 'desc' THEN
                                                       Email
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'Phone'
                                                        AND @SortOrder = 'asc' THEN
                                                       Phone
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'Phone'
                                                        AND @SortOrder = 'desc' THEN
                                                       Phone
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'TotalLivestockAnimalQuantity'
                                                        AND @SortOrder = 'asc' THEN
                                                       TotalLivestockAnimalQuantity
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'TotalLivestockAnimalQuantity'
                                                        AND @SortOrder = 'desc' THEN
                                                       TotalLivestockAnimalQuantity
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'TotalAvianAnimalQuantity'
                                                        AND @SortOrder = 'asc' THEN
                                                       TotalAvianAnimalQuantity
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'TotalAvianAnimalQuantity'
                                                        AND @SortOrder = 'desc' THEN
                                                       TotalAvianAnimalQuantity
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'SickLivestockAnimalQuantity'
                                                        AND @SortOrder = 'asc' THEN
                                                       SickLivestockAnimalQuantity
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'SickLivestockAnimalQuantity'
                                                        AND @SortOrder = 'desc' THEN
                                                       SickLivestockAnimalQuantity
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'SickAvianAnimalQuantity'
                                                        AND @SortOrder = 'asc' THEN
                                                       SickAvianAnimalQuantity
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'SickAvianAnimalQuantity'
                                                        AND @SortOrder = 'desc' THEN
                                                       SickAvianAnimalQuantity
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'DeadLivestockAnimalQuantity'
                                                        AND @SortOrder = 'asc' THEN
                                                       DeadLivestockAnimalQuantity
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'DeadLivestockAnimalQuantity'
                                                        AND @SortOrder = 'desc' THEN
                                                       DeadLivestockAnimalQuantity
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'DeadAvianAnimalQuantity'
                                                        AND @SortOrder = 'asc' THEN
                                                       DeadAvianAnimalQuantity
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'DeadAvianAnimalQuantity'
                                                        AND @SortOrder = 'desc' THEN
                                                       DeadAvianAnimalQuantity
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'RowStatus'
                                                        AND @SortOrder = 'asc' THEN
                                                       RowStatus
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'RowStatus'
                                                        AND @SortOrder = 'desc' THEN
                                                       RowStatus
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'CountryID'
                                                        AND @SortOrder = 'asc' THEN
                                                       CountryID
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'CountryID'
                                                        AND @SortOrder = 'desc' THEN
                                                       CountryID
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'RegionID'
                                                        AND @SortOrder = 'asc' THEN
                                                       RegionID
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'RegionID'
                                                        AND @SortOrder = 'desc' THEN
                                                       RegionID
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'RegionName'
                                                        AND @SortOrder = 'asc' THEN
                                                       RegionName
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'RegionName'
                                                        AND @SortOrder = 'desc' THEN
                                                       RegionName
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'RayonName'
                                                        AND @SortOrder = 'asc' THEN
                                                       RayonName
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'RayonName'
                                                        AND @SortOrder = 'desc' THEN
                                                       RayonName
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'SettlementID'
                                                        AND @SortOrder = 'asc' THEN
                                                       SettlementID
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'SettlementID'
                                                        AND @SortOrder = 'desc' THEN
                                                       SettlementID
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'SettlementName'
                                                        AND @SortOrder = 'asc' THEN
                                                       SettlementName
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'SettlementName'
                                                        AND @SortOrder = 'desc' THEN
                                                       SettlementName
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'Apartment'
                                                        AND @SortOrder = 'asc' THEN
                                                       Apartment
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'Apartment'
                                                        AND @SortOrder = 'desc' THEN
                                                       Apartment
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'Building'
                                                        AND @SortOrder = 'asc' THEN
                                                       Building
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'Building'
                                                        AND @SortOrder = 'desc' THEN
                                                       Building
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'House'
                                                        AND @SortOrder = 'asc' THEN
                                                       House
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'House'
                                                        AND @SortOrder = 'desc' THEN
                                                       House
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'PostalCode'
                                                        AND @SortOrder = 'asc' THEN
                                                       PostalCode
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'PostalCode'
                                                        AND @SortOrder = 'desc' THEN
                                                       PostalCode
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'Street'
                                                        AND @SortOrder = 'asc' THEN
                                                       Street
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'Street'
                                                        AND @SortOrder = 'desc' THEN
                                                       Street
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'Latitude'
                                                        AND @SortOrder = 'asc' THEN
                                                       Latitude
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'Latitude'
                                                        AND @SortOrder = 'desc' THEN
                                                       Latitude
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'Longitude'
                                                        AND @SortOrder = 'asc' THEN
                                                       Longitude
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'Longitude'
                                                        AND @SortOrder = 'desc' THEN
                                                       Longitude
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'EIDSSPersonID'
                                                        AND @SortOrder = 'asc' THEN
                                                       EIDSSPersonID
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'EIDSSPersonID'
                                                        AND @SortOrder = 'desc' THEN
                                                       EIDSSPersonID
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'EIDSSFarmOwnerID'
                                                        AND @SortOrder = 'asc' THEN
                                                       EIDSSFarmOwnerID
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'EIDSSFarmOwnerID'
                                                        AND @SortOrder = 'desc' THEN
                                                       EIDSSFarmOwnerID
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'FarmOwnerName'
                                                        AND @SortOrder = 'asc' THEN
                                                       FarmOwnerID
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'FarmOwnerName'
                                                        AND @SortOrder = 'desc' THEN
                                                       FarmOwnerID
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'FarmOwnerFirstName'
                                                        AND @SortOrder = 'asc' THEN
                                                       FarmOwnerFirstName
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'FarmOwnerFirstName'
                                                        AND @SortOrder = 'desc' THEN
                                                       FarmOwnerFirstName
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'FarmOwnerLastName'
                                                        AND @SortOrder = 'asc' THEN
                                                       FarmOwnerLastName
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'FarmOwnerLastName'
                                                        AND @SortOrder = 'desc' THEN
                                                       FarmOwnerLastName
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'FarmOwnerSecondName'
                                                        AND @SortOrder = 'asc' THEN
                                                       FarmOwnerSecondName
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'FarmOwnerSecondName'
                                                        AND @SortOrder = 'desc' THEN
                                                       FarmOwnerSecondName
                                               END DESC
                                     ) AS ROWNUM,
                   COUNT(*) OVER () AS RecordCount,
                   FarmMasterID,
                   FarmTypeID,
                   FarmTypeName,
                   FarmOwnerID,
                   FarmAddressID,
                   FarmName,
                   EIDSSFarmID,
                   Fax,
                   Email,
                   Phone,
                   TotalLivestockAnimalQuantity,
                   TotalAvianAnimalQuantity,
                   SickLivestockAnimalQuantity,
                   SickAvianAnimalQuantity,
                   DeadLivestockAnimalQuantity,
                   DeadAvianAnimalQuantity,
                   RowStatus,
                   CountryID,
                   RegionID,
                   RegionName,
                   RayonID,
                   RayonName,
                   SettlementID,
                   SettlementName,
                   Apartment,
                   Building,
                   House,
                   PostalCode,
                   Street,
                   Latitude,
                   Longitude,
                   Elevation,
                   EIDSSPersonID,
                   EIDSSFarmOwnerID,
                   FarmOwnerName,
                   FarmOwnerFirstName,
                   FarmOwnerLastName,
                   FarmOwnerSecondName
            FROM CTEIntermediate
            WHERE (@FarmTypeID IS NULL)
                  OR FarmTypeName = @FarmTypesName
           )
        SELECT RecordCount,
               FarmMasterID,
               FarmTypeID,
               FarmTypeName,
               FarmOwnerID,
               FarmAddressID,
               FarmName,
               EIDSSFarmID,
               Fax,
               Email,
               Phone,
               TotalLivestockAnimalQuantity,
               TotalAvianAnimalQuantity,
               SickLivestockAnimalQuantity,
               SickAvianAnimalQuantity,
               DeadLivestockAnimalQuantity,
               DeadAvianAnimalQuantity,
               RowStatus,
               CountryID,
               RegionID,
               RegionName,
               RayonID,
               RayonName,
               SettlementID,
               SettlementName,
               Apartment,
               Building,
               House,
               PostalCode,
               Street,
               Latitude,
               Longitude,
               Elevation,
               EIDSSPersonID,
               EIDSSFarmOwnerID,
               FarmOwnerName,
               FarmOwnerFirstName,
               FarmOwnerLastName,
               FarmOwnerSecondName,
               TotalPages = (RecordCount / @pageSize) + IIF(RecordCount % @pageSize > 0, 1, 0),
               CurrentPage = @pageNo
        FROM CTEResults
        WHERE RowNum > @firstRec
              AND RowNum < @lastRec;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USSP_GBL_DataAuditEvent_GET]...';


GO
-- =============================================
-- Author:		Steven Verner
-- Create date: 2.2.2022
-- Description:	Gets the audit event for the given user
-- =============================================
ALTER PROCEDURE [dbo].[USSP_GBL_DataAuditEvent_GET] 
	-- Add the parameters for the stored procedure here
	@idfUserId BIGINT = NULL, 
	@event BIGINT OUTPUT

AS
BEGIN

	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @officeid BIGINT
	DECLARE @siteid BIGINT 
	DECLARE @aspnetUserId UNIQUEIDENTIFIER

	-- Get the user's siteid...
	SELECT @aspnetUserId = ID FROM aspnetUsers WHERE idfUserID = @idfUserId
	SELECT @officeid = idfInstitution FROM EmployeeToInstitution eti WHERE eti.aspNetUserId = @aspnetUserId AND eti.IsDefault = 1
	SELECT @siteid = idfsSite FROM tstsite WHERE idfOffice = @officeid

	SELECT @event = idfDataAuditEvent 
	FROM tstLocalConnectionContext lcc 
	WHERE @idfUserId = @idfUserId

	IF @event is null
	BEGIN
		EXEC USP_GBL_NEXTKEYID_GET 'tauDataAuditEvent', @event OUTPUT

		INSERT INTO [tauDataAuditEvent] (
			[idfDataAuditEvent],
			[idfsDataAuditObjectType],
			[idfsDataAuditEventType],
			[idfMainObject],
			[idfMainObjectTable],
			[idfUserID],
			[idfsSite],
			[datEnteringDate]
		) 
		values
			(@event,
			NULL,
			10016003, 
			null,
			null,
			@idfUserId,
			@siteid,
			GETDATE()
			)

			UPDATE tstLocalConnectionContext
			SET idfDataAuditEvent = @event
			WHERE idfUserID = @idfUserId
	END 
END
GO
PRINT N'Altering Procedure [dbo].[USSP_GBL_TEST_SET]...';


GO
-- ================================================================================================
-- Name: USSP_GBL_TEST_SET
--
-- Description:	Inserts or updates laboratory and field test records for various use cases.
--
-- Revision History:
-- Name  Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     04/17/2019 Initial release.
-- Stephen Long     12/20/2020 Added monitoring session, vector session, human disease report and 
--                  veterinary disease report identifier parameters.
-- Stephen Long     01/19/2022 Added row action check of 1 to sync up with row action type enum.
-- Leo Tracchia		10/21/2022 fix for properly deleting tests for human disease report DevOps defect 5006
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_GBL_TEST_SET]
(
    @LanguageID NVARCHAR(50),
    @TestID BIGINT OUTPUT,
    @TestNameTypeID BIGINT = NULL,
    @TestCategoryTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestStatusTypeID BIGINT,
    @DiseaseID BIGINT,
    @SampleID BIGINT = NULL,
    @BatchTestID BIGINT = NULL,
    @ObservationID BIGINT,
    @TestNumber INT = NULL,
    @Comments NVARCHAR(500) = NULL,
    @RowStatus INT = NULL,
    @StartedDate DATETIME = NULL,
    @ResultDate DATETIME = NULL,
    @TestedByOrganizationID BIGINT = NULL,
    @TestedByPersonID BIGINT = NULL,
    @ResultEnteredByOrganizationID BIGINT = NULL,
    @ResultEnteredByPersonID BIGINT = NULL,
    @ValidatedByOrganizationID BIGINT = NULL,
    @ValidatedByPersonID BIGINT = NULL,
    @ReadOnlyIndicator BIT,
    @NonLaboratoryTestIndicator BIT,
    @ExternalTestIndicator BIT = NULL,
    @PerformedByOrganizationID BIGINT = NULL,
    @ReceivedDate DATETIME = NULL,
    @ContactPerson NVARCHAR(200) = NULL,
    @MonitoringSessionID BIGINT = NULL,
    @VectorSessionID BIGINT = NULL,
    @HumanDiseaseReportID BIGINT = NULL,
    @VeterinaryDiseaseReportID BIGINT = NULL,
    @AuditUserName NVARCHAR(200),
    @RowAction CHAR
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        IF @RowAction = 'I'
           OR @RowAction = '1' -- Insert
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbTesting', @TestID OUTPUT;

            INSERT INTO dbo.tlbTesting
            (
                idfTesting,
                idfsTestName,
                idfsTestCategory,
                idfsTestResult,
                idfsTestStatus,
                idfsDiagnosis,
                idfMaterial,
                idfBatchTest,
                idfObservation,
                intTestNumber,
                strNote,
                intRowStatus,
                datStartedDate,
                datConcludedDate,
                idfTestedByOffice,
                idfTestedByPerson,
                idfResultEnteredByOffice,
                idfResultEnteredByPerson,
                idfValidatedByOffice,
                idfValidatedByPerson,
                blnReadOnly,
                blnNonLaboratoryTest,
                blnExternalTest,
                idfPerformedByOffice,
                datReceivedDate,
                strContactPerson,
                idfMonitoringSession,
                idfVector,
                idfHumanCase,
                idfVetCase,
                AuditCreateUser,
                SourceSystemNameID,
                SourceSystemKeyValue
            )
            VALUES
            (@TestID,
             @TestNameTypeID,
             @TestCategoryTypeID,
             @TestResultTypeID,
             @TestStatusTypeID,
             @DiseaseID,
             @SampleID,
             @BatchTestID,
             @ObservationID,
             @TestNumber,
             @Comments,
             @RowStatus,
             @StartedDate,
             @ResultDate,
             @TestedByOrganizationID,
             @TestedByPersonID,
             @ResultEnteredByOrganizationID,
             @ResultEnteredByPersonID,
             @ValidatedByOrganizationID,
             @ValidatedByPersonID,
             @ReadOnlyIndicator,
             @NonLaboratoryTestIndicator,
             @ExternalTestIndicator,
             @PerformedByOrganizationID,
             @ReceivedDate,
             @ContactPerson,
             @MonitoringSessionID,
             @VectorSessionID,
             @HumanDiseaseReportID,
             @VeterinaryDiseaseReportID,
             @AuditUserName,
             10519001,
             '[{"idfTesting":' + CAST(@TestID AS NVARCHAR(300)) + '}]'
            );
        END
        ELSE
        BEGIN
            UPDATE dbo.tlbTesting
            SET idfsTestName = @TestNameTypeID,
                idfsTestCategory = @TestCategoryTypeID,
                idfsTestResult = @TestResultTypeID,
                idfsTestStatus = @TestStatusTypeID,
                idfsDiagnosis = @DiseaseID,
                idfMaterial = @SampleID,
                idfBatchTest = @BatchTestID,
                idfObservation = @ObservationID,
                intTestNumber = @TestNumber,
                strNote = @Comments,
                intRowStatus = @RowStatus,
                datStartedDate = @StartedDate,
                datConcludedDate = @ResultDate,
                idfTestedByOffice = @TestedByOrganizationID,
                idfTestedByPerson = @TestedByPersonID,
                idfResultEnteredByOffice = @ResultEnteredByOrganizationID,
                idfResultEnteredByPerson = @ResultEnteredByPersonID,
                idfValidatedByOffice = @ValidatedByOrganizationID,
                idfValidatedByPerson = @ValidatedByPersonID,
                blnReadOnly = @ReadOnlyIndicator,
                blnNonLaboratoryTest = @NonLaboratoryTestIndicator,
                blnExternalTest = @ExternalTestIndicator,
                idfPerformedByOffice = @PerformedByOrganizationID,
                datReceivedDate = @ReceivedDate,
                strContactPerson = @ContactPerson,
                idfMonitoringSession = @MonitoringSessionID,
                idfVector = @VectorSessionID,
                idfHumanCase = @HumanDiseaseReportID,
                idfVetCase = @VeterinaryDiseaseReportID,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = getdate()
            WHERE idfTesting = @TestID;
        END
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USSP_HUMAN_DISEASE_VACCINATIONS_SET]...';


GO
--*************************************************************
-- Name 				: USSP_HUMAN_DISEASE_VACCINATIONS_SET
-- Description			: add update delete Human Disease Report Vaccinations
--          
-- Author               : HAP
-- Revision History
--		Name		Date       Change Detail
-- ---------------- ---------- --------------------------------
-- HAP				20190104     Created
-- HAP				20190109    Update delete of temp table
-- Leo Tracchia		20221011	updated field names on json string - for bug fix 3871
--
-- Testing code:
-- exec USSP_HUMAN_DISEASE_VACCINATIONS_SET null
--*************************************************************
ALTER PROCEDURE [dbo].[USSP_HUMAN_DISEASE_VACCINATIONS_SET] 
  @idfHumanCase						BIGINT = NULL,
	@VaccinationsParameters				NVARCHAR(MAX) = NULL,
	@outbreakCall						INT = 0,
	@User								NVARCHAR(100) = ''
AS
Begin
	SET NOCOUNT ON;
		Declare @SupressSelect table
			( retrunCode int,
			  returnMessage varchar(200)
			)
	DECLARE

	@HumanDiseaseReportVaccinationUID	BIGINT, -- HumanDiseaseReportVaccination.HumanDiseaseReportVaccinationUID Primary Key
	@VaccinationName					nvarchar(200), -- HumanDiseaseReportVaccination.VaccinationName
	@VaccinationDate					DATETIME = NULL, --HumanDiseaseReportVaccination.VaccinationDate 
	@intRowStatus						INT = 0,
	@RowAction							NVARCHAR(1),
	@RowID								BIGINT

	DECLARE @returnCode	INT = 0;
	DECLARE	@returnMsg	NVARCHAR(MAX) = 'SUCCESS';

	DECLARE  @VaccinationsTemp TABLE (				
					[HumanDiseaseReportVaccinationUID] [bigint] NULL,
					[idfHumanCase] [bigint] NULL,
					[VaccinationName] [nvarchar](200) NULL,
					[VaccinationDate] [datetime2] NULL,
					[RowAction] [nvarchar] NULL
			)

	INSERT INTO	@VaccinationsTemp 
	SELECT * FROM OPENJSON(@VaccinationsParameters) 
			WITH (
					[humanDiseaseReportVaccinationUID] [bigint],
					[idfHumanCase] [bigint],
					[vaccinationName] [nvarchar](200),
					[vaccinationDate] [datetime2],
					[rowAction] [nvarchar](1)
				)
	BEGIN TRY  
		WHILE EXISTS (SELECT * FROM @VaccinationsTemp)
			BEGIN
				SELECT TOP 1
					@RowID=humanDiseaseReportVaccinationUID,
					@HumanDiseaseReportVaccinationUID=humanDiseaseReportVaccinationUID,
					@VaccinationName	= vaccinationName,
					@VaccinationDate	= vaccinationDate,
					@RowAction			= rowAction
				FROM @VaccinationsTemp

				IF NOT EXISTS(SELECT HumanDiseaseReportVaccinationUID from HumanDiseaseReportVaccination WHERE HumanDiseaseReportVaccinationUID = @HumanDiseaseReportVaccinationUID)
				BEGIN
						IF @outbreakCall = 1
							BEGIN
								EXEC dbo.USP_GBL_NEXTKEYID_GET 'HumanDiseaseReportVaccination',  @HumanDiseaseReportVaccinationUID OUTPUT;
							END
						ELSE
							BEGIN
								INSERT INTO @SupressSelect
								EXEC dbo.USP_GBL_NEXTKEYID_GET 'HumanDiseaseReportVaccination',  @HumanDiseaseReportVaccinationUID OUTPUT;
							END

						INSERT INTO	dbo.HumanDiseaseReportVaccination
									(
									 HumanDiseaseReportVaccinationUID,
									 idfHumanCase,		
									 VaccinationName,
									 VaccinationDate,				
									 intRowStatus,
									 AuditCreateUser,
									 AuditCreateDTM	
									)
							VALUES (
									 @HumanDiseaseReportVaccinationUID,
									 @idfHumanCase,		
									 @VaccinationName,
									 @VaccinationDate,
									 0, --Always 0, because this is a new record
									 @User,
									 Getdate()	
									)
					END
				ELSE
					BEGIN
						IF @RowAction = 'D' 
							BEGIN
								SET @intRowStatus = 1
							END
						ELSE
							BEGIN
								SET @intRowStatus = 0
							END

						UPDATE dbo.HumanDiseaseReportVaccination
							SET			
									 VaccinationName  = @VaccinationName,
									 VaccinationDate  = @VaccinationDate,				
									 intRowStatus	  = @intRowStatus,
									 AuditUpdateUser  = @User,
									 AuditUpdateDTM	  =  Getdate()	

							WHERE	HumanDiseaseReportVaccinationUID = @HumanDiseaseReportVaccinationUID
					END

						SET ROWCOUNT 1
					DELETE FROM @VaccinationsTemp
					SET ROWCOUNT 0
			END		

	END TRY
	BEGIN CATCH
		THROW;
		
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USSP_LAB_SAMPLE_SET]...';


GO
-- ================================================================================================
-- Name: USSP_LAB_SAMPLE_SET
--
-- Description:	Inserts or updates sample records for various laboratory module use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     11/08/2018 Initial release.
-- Stephen Long		01/24/2019 Added storage box place to support the location in the freezer 
--                             subdivision.  Changed freezer ID to freezer subdivision ID.
-- Stephen Long     01/30/2019 Added disease ID parameter and to insert/update statements.
-- Stephen Long     02/21/2019 Added root sample ID and sample kind type ID.
-- Stephen Long     03/08/2019 Added row action 'D' for aliquot/derivative, so new lab sample ID 
--                             is not created, rather a number or country decides on a customized 
--                             method.
-- Stephen Long     03/28/2019 Added parameter @EIDSSLaboratorySampleID for aliquots/derivatives. 
--                             These are assigned in the EIDSS application from the derived off of
--                             the original (parent) sample ID.
-- Stephen Long     04/16/2019 Added copy of human master to human for new sample records.
-- Stephen Long     07/09/2019 Added human master ID parameter.  Updated human copy call.
-- Stephen Long     08/29/2019 Corrected root sample ID on insert portion.
-- Stephen Long     11/05/2019 Set root sample ID to sample ID when aliquot/derivative action.
-- Stephen Long     03/11/2020 Changed entered date to use GETDATE on insert.
-- Stephen Long     03/17/2020 Added logic to process transferred out sample's status.
-- Stephen Long     03/18/2020 Added logic to mark transfer final when sample accessioned in or 
--                             rejected at the receiving laboratory.
-- Stephen Long     03/30/2020 Added set of audit update time and user on record inserts/updates.
--                             Removed setting of root sample ID to sample ID of parent when 
--                             aliquot/derivative row action.  Root sample ID set to parent sample 
--                             ID in the application.
-- Stephen Long     04/17/2020 Renamed original sample ID to parent sample ID to be inline with the
--                             business terminology. Root is more along the line of original.  Also
--                             changed not to set the parent sample ID unless it is an aliquot/
--                             derivative which is handled in the app.
-- Stephen Long     05/05/2020 Removed update of transfer sample out record.  Handled in the 
--                             application.
-- Stephen Long     07/06/2020 Add set of lab module source indicator.
-- Stephen Long     09/03/2020 Removal of laboratory sample ID next number get call for 
--                             samples being accessioned and saved.  The laboratory sample ID get
--                             call has been moved to occur prior to save.
-- Stephen Long     09/24/2021 Removed language ID parameter as it is not needed.
-- Stephen Long     01/07/2022 Removed copy human actual to human; moved to parent stored 
--                             procedure.
-- Stephen Long     01/31/2022 Added source system name and key value update on insert.
-- Stephen Long     05/23/2022 Commented out update of disease ID; should never happen in the lab 
--                             module.
-- Stephen Long     10/01/2022 Changed to set EIDSS lab sample ID on a rejected sample.  Business 
--                             requirement retained from 6.1.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_LAB_SAMPLE_SET]
(
    @SampleID BIGINT OUTPUT,
    @SampleTypeID BIGINT,
    @RootSampleID BIGINT = NULL,
    @ParentSampleID BIGINT = NULL,
    @HumanMasterID BIGINT = NULL,
    @HumanID BIGINT = NULL,
    @SpeciesID BIGINT = NULL,
    @AnimalID BIGINT = NULL,
    @VectorID BIGINT = NULL,
    @MonitoringSessionID BIGINT = NULL,
    @VectorSessionID BIGINT = NULL,
    @HumanDiseaseReportID BIGINT = NULL,
    @VeterinaryDiseaseReportID BIGINT = NULL,
    @CollectionDate DATETIME = NULL,
    @CollectedByPersonID BIGINT = NULL,
    @CollectedByOrganizationID BIGINT = NULL,
    @SentDate DATETIME = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SiteID BIGINT,
    @FunctionalAreaID BIGINT = NULL,
    @FreezerSubdivisionID BIGINT = NULL,
    @StorageBoxPlace NVARCHAR(200) = NULL,
    @EnteredDate DATETIME = NULL,
    @OutOfRepositoryDate DATETIME = NULL,
    @MarkedForDispositionByPersonID BIGINT = NULL,
    @DestructionDate DATETIME = NULL,
    @DestructionMethodTypeID BIGINT = NULL,
    @DestroyedByPersonID BIGINT = NULL,
    @ReadOnlyIndicator BIT,
    @AccessionDate DATETIME = NULL,
    @AccessionConditionTypeID BIGINT = NULL,
    @AccessionByPersonID BIGINT = NULL,
    @SampleStatusTypeID BIGINT = NULL,
    @PreviousSampleStatusTypeID BIGINT = NULL,
    @AccessionComment NVARCHAR(200) = NULL,
    @Note NVARCHAR(500) = NULL,
    @CurrentSiteID BIGINT = NULL,
    @SampleKindTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @RowStatus INT,
    @RowAction INT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';

        IF @RowAction = 1 -- Standard insert
           OR @RowAction = 5 -- Insert and accession (LUC01)
           OR @RowAction = 6 -- Create aliquot/derivative and accession (LUC02)
           OR @RowAction = 7 -- Create transfer in sample and do not accession (LUC03)
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = N'tlbMaterial',
                                              @idfsKey = @SampleID OUTPUT;

            IF @RowAction <> 6
               AND @RowAction <> 7
            BEGIN
                SET @RootSampleID = @SampleID;
            END

            --Local/field sample EIDSS ID. Only system assign when user leaves blank.
            IF @RowAction = 1
            BEGIN
                IF @EIDSSLocalOrFieldSampleID IS NULL
                   OR @EIDSSLocalOrFieldSampleID = ''
                BEGIN
                    EXECUTE dbo.USP_GBL_NextNumber_GET @ObjectName = N'Sample Field Barcode',
                                                       @NextNumberValue = @EIDSSLocalOrFieldSampleID OUTPUT,
                                                       @InstallationSite = NULL;
                END
            END

            INSERT INTO dbo.tlbMaterial
            (
                idfMaterial,
                idfsSampleType,
                idfRootMaterial,
                idfParentMaterial,
                idfHuman,
                idfSpecies,
                idfAnimal,
                idfVector,
                idfMonitoringSession,
                idfVectorSurveillanceSession,
                idfHumanCase,
                idfVetCase,
                datFieldCollectionDate,
                idfFieldCollectedByPerson,
                idfFieldCollectedByOffice,
                datFieldSentDate,
                idfSendToOffice,
                strFieldBarcode,
                strBarcode,
                idfsSite,
                idfInDepartment,
                idfSubdivision,
                StorageBoxPlace,
                datEnteringDate,
                datOutOfRepositoryDate,
                idfMarkedForDispositionByPerson,
                datDestructionDate,
                idfsDestructionMethod,
                idfDestroyedByPerson,
                blnReadOnly,
                datAccession,
                idfsAccessionCondition,
                idfAccesionByPerson,
                idfsSampleStatus,
                strCondition,
                strNote,
                idfsCurrentSite,
                idfsSampleKind,
                PreviousSampleStatusID,
                DiseaseID,
                LabModuleSourceIndicator,
                intRowStatus,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser
            )
            VALUES
            (@SampleID,
             @SampleTypeID,
             @RootSampleID,
             @ParentSampleID,
             @HumanID,
             @SpeciesID,
             @AnimalID,
             @VectorID,
             @MonitoringSessionID,
             @VectorSessionID,
             @HumanDiseaseReportID,
             @VeterinaryDiseaseReportID,
             @CollectionDate,
             @CollectedByPersonID,
             @CollectedByOrganizationID,
             @SentDate,
             @SentToOrganizationID,
             @EIDSSLocalOrFieldSampleID,
             @EIDSSLaboratorySampleID,
             @SiteID,
             @FunctionalAreaID,
             @FreezerSubdivisionID,
             @StorageBoxPlace,
             GETDATE(),
             @OutOfRepositoryDate,
             @MarkedForDispositionByPersonID,
             @DestructionDate,
             @DestructionMethodTypeID,
             @DestroyedByPersonID,
             @ReadOnlyIndicator,
             @AccessionDate,
             @AccessionConditionTypeID,
             @AccessionByPersonID,
             @SampleStatusTypeID,
             @AccessionComment,
             @Note,
             @CurrentSiteID,
             @SampleKindTypeID,
             @PreviousSampleStatusTypeID,
             @DiseaseID,
             1  ,
             0  ,
             10519001,
             '[{"idfMaterial":' + CAST(@SampleID AS NVARCHAR(300)) + '}]',
             @AuditUserName
            );
        END;
        ELSE
        BEGIN
            --Sample is being accessioned, so get the next lab sample code allowing the user the option to print the barcode.
            IF @RowAction = 4
               OR @RowAction = 8 --Update and accession (LUC01)
            BEGIN
                --Transferred in sample accessioned in, so update the transfer record's transfer status type ID to final. 
                IF @RowAction = 8
                BEGIN
                    UPDATE t
                    SET t.idfsTransferStatus = 10001001,
                        --Final
                        t.AuditUpdateUser = @AuditUserName,
                        t.AuditUpdateDTM = GETDATE()
                    FROM dbo.tlbTransferOUT AS t
                        INNER JOIN dbo.tlbTransferOutMaterial AS tom
                            ON tom.idfTransferOut = t.idfTransferOut
                    WHERE tom.idfMaterial = @RootSampleID;
                END;

                UPDATE dbo.tlbMaterial
                SET idfsSampleType = @SampleTypeID,
                    idfRootMaterial = @RootSampleID,
                    idfParentMaterial = @ParentSampleID,
                    idfHuman = @HumanID,
                    idfSpecies = @SpeciesID,
                    idfAnimal = @AnimalID,
                    idfMonitoringSession = @MonitoringSessionID,
                    idfFieldCollectedByPerson = @CollectedByPersonID,
                    idfFieldCollectedByOffice = @CollectedByOrganizationID,
                    datFieldCollectionDate = @CollectionDate,
                    datFieldSentDate = @SentDate,
                    strFieldBarcode = @EIDSSLocalOrFieldSampleID,
                    idfVectorSurveillanceSession = @VectorSessionID,
                    idfVector = @VectorID,
                    idfSubdivision = @FreezerSubdivisionID,
                    StorageBoxPlace = @StorageBoxPlace,
                    idfsSampleStatus = @SampleStatusTypeID,
                    idfInDepartment = @FunctionalAreaID,
                    idfDestroyedByPerson = @DestroyedByPersonID,
                    datEnteringDate = @EnteredDate,
                    datDestructionDate = @DestructionDate,
                    strBarcode = @EIDSSLaboratorySampleID,
                    strNote = @Note,
                    idfsSite = @SiteID,
                    idfsCurrentSite = @CurrentSiteID,
                    idfsSampleKind = @SampleKindTypeID,
                    intRowStatus = @RowStatus,
                    idfSendToOffice = @SentToOrganizationID,
                    blnReadOnly = @ReadOnlyIndicator,
                    idfHumanCase = @HumanDiseaseReportID,
                    idfVetCase = @VeterinaryDiseaseReportID,
                    datAccession = @AccessionDate,
                    idfsAccessionCondition = @AccessionConditionTypeID,
                    strCondition = @AccessionComment,
                    idfAccesionByPerson = @AccessionByPersonID,
                    idfsDestructionMethod = @DestructionMethodTypeID,
                    idfMarkedForDispositionByPerson = @MarkedForDispositionByPersonID,
                    datOutOfRepositoryDate = @OutOfRepositoryDate,
                    PreviousSampleStatusID = @PreviousSampleStatusTypeID,
                    --DiseaseID = @DiseaseID,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE idfMaterial = @SampleID;
            END
            ELSE
            BEGIN
                --Transferred in sample rejected, so update the transferred out sample's status to transferred out. 
                IF @RowAction = 9
                BEGIN
                    UPDATE dbo.tlbMaterial
                    SET idfsSampleStatus = 10015010,
                        --Transferred Out
                        AuditUpdateUser = @AuditUserName,
                        AuditUpdateDTM = GETDATE()
                    WHERE idfMaterial = @RootSampleID;

                    UPDATE t
                    SET t.idfsTransferStatus = 10001001,
                        --Final 
                        AuditUpdateUser = @AuditUserName,
                        AuditUpdateDTM = GETDATE()
                    FROM dbo.tlbTransferOUT AS t
                        INNER JOIN dbo.tlbTransferOutMaterial AS tom
                            ON tom.idfTransferOut = t.idfTransferOut
                    WHERE tom.idfMaterial = @RootSampleID;
                END;

                IF @RowAction = 2
                   AND @AccessionConditionTypeID = 10108003 -- Rejected
                BEGIN
                    -- Set EIDSS laboratory sample ID as the rejected sample is in the laboratory's custody.
                    UPDATE dbo.tlbMaterial
                    SET idfsSampleType = @SampleTypeID,
                        idfRootMaterial = @RootSampleID,
                        idfParentMaterial = @ParentSampleID,
                        idfHuman = @HumanID,
                        idfSpecies = @SpeciesID,
                        idfAnimal = @AnimalID,
                        idfMonitoringSession = @MonitoringSessionID,
                        idfFieldCollectedByPerson = @CollectedByPersonID,
                        idfFieldCollectedByOffice = @CollectedByOrganizationID,
                        datFieldCollectionDate = @CollectionDate,
                        datFieldSentDate = @SentDate,
                        strBarcode = @EIDSSLaboratorySampleID,
                        strFieldBarcode = @EIDSSLocalOrFieldSampleID,
                        idfVectorSurveillanceSession = @VectorSessionID,
                        idfVector = @VectorID,
                        idfSubdivision = @FreezerSubdivisionID,
                        StorageBoxPlace = @StorageBoxPlace,
                        idfsSampleStatus = @SampleStatusTypeID,
                        idfInDepartment = @FunctionalAreaID,
                        idfDestroyedByPerson = @DestroyedByPersonID,
                        datEnteringDate = @EnteredDate,
                        datDestructionDate = @DestructionDate,
                        strNote = @Note,
                        idfsSite = @SiteID,
                        idfsCurrentSite = @CurrentSiteID,
                        idfsSampleKind = @SampleKindTypeID,
                        intRowStatus = @RowStatus,
                        idfSendToOffice = @SentToOrganizationID,
                        blnReadOnly = @ReadOnlyIndicator,
                        idfHumanCase = @HumanDiseaseReportID,
                        idfVetCase = @VeterinaryDiseaseReportID,
                        datAccession = @AccessionDate,
                        idfsAccessionCondition = @AccessionConditionTypeID,
                        strCondition = @AccessionComment,
                        idfAccesionByPerson = @AccessionByPersonID,
                        idfsDestructionMethod = @DestructionMethodTypeID,
                        idfMarkedForDispositionByPerson = @MarkedForDispositionByPersonID,
                        datOutOfRepositoryDate = @OutOfRepositoryDate,
                        PreviousSampleStatusID = @PreviousSampleStatusTypeID,
                        AuditUpdateUser = @AuditUserName,
                        AuditUpdateDTM = GETDATE()
                    WHERE idfMaterial = @SampleID;
                END
                ELSE
                BEGIN
                    UPDATE dbo.tlbMaterial
                    SET idfsSampleType = @SampleTypeID,
                        idfRootMaterial = @RootSampleID,
                        idfParentMaterial = @ParentSampleID,
                        idfHuman = @HumanID,
                        idfSpecies = @SpeciesID,
                        idfAnimal = @AnimalID,
                        idfMonitoringSession = @MonitoringSessionID,
                        idfFieldCollectedByPerson = @CollectedByPersonID,
                        idfFieldCollectedByOffice = @CollectedByOrganizationID,
                        datFieldCollectionDate = @CollectionDate,
                        datFieldSentDate = @SentDate,
                        strFieldBarcode = @EIDSSLocalOrFieldSampleID,
                        idfVectorSurveillanceSession = @VectorSessionID,
                        idfVector = @VectorID,
                        idfSubdivision = @FreezerSubdivisionID,
                        StorageBoxPlace = @StorageBoxPlace,
                        idfsSampleStatus = @SampleStatusTypeID,
                        idfInDepartment = @FunctionalAreaID,
                        idfDestroyedByPerson = @DestroyedByPersonID,
                        datEnteringDate = @EnteredDate,
                        datDestructionDate = @DestructionDate,
                        strNote = @Note,
                        idfsSite = @SiteID,
                        idfsCurrentSite = @CurrentSiteID,
                        idfsSampleKind = @SampleKindTypeID,
                        intRowStatus = @RowStatus,
                        idfSendToOffice = @SentToOrganizationID,
                        blnReadOnly = @ReadOnlyIndicator,
                        idfHumanCase = @HumanDiseaseReportID,
                        idfVetCase = @VeterinaryDiseaseReportID,
                        datAccession = @AccessionDate,
                        idfsAccessionCondition = @AccessionConditionTypeID,
                        strCondition = @AccessionComment,
                        idfAccesionByPerson = @AccessionByPersonID,
                        idfsDestructionMethod = @DestructionMethodTypeID,
                        idfMarkedForDispositionByPerson = @MarkedForDispositionByPersonID,
                        datOutOfRepositoryDate = @OutOfRepositoryDate,
                        PreviousSampleStatusID = @PreviousSampleStatusTypeID,
                        AuditUpdateUser = @AuditUserName,
                        AuditUpdateDTM = GETDATE()
                    WHERE idfMaterial = @SampleID;
                END
            END;
        END;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USSP_LAB_TEST_SET]...';


GO
-- ================================================================================================
-- Name: USSP_LAB_TEST_SET
--
-- Description:	Inserts or updates test records for various laboratory module 
-- USE cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long		01/24/2019 Initial release.
-- Stephen Long     02/01/2019 Added null to the observation ID parameter.
-- Stephen Long     03/30/2020 Added set of audit update time and user on record inserts/updates.
-- Stephen Long     10/28/2020 Changed record action from nchar to char.
-- Stephen Long     02/11/2021 Add logic to set test unassigned and test completed indicators.
-- Stephen Long     09/24/2021 Removed language ID parameter as it is not needed.
-- Stephen Long     01/31/2022 Added source system name and key value update on insert.
-- Leo Tracchia		10/21/2022 Fix for properly deleting tests for human disease report DevOps 
--                  defect 5006.
-- Stephen Long     10/21/2022 Added veterinary disease report, monitoring session and vector 
--                             identifiers to the USSP_LAB_TEST_SET call.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_LAB_TEST_SET]
(
    @TestID BIGINT,
    @TestNameTypeID BIGINT = NULL,
    @TestCategoryTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestStatusTypeID BIGINT,
    @PreviousTestStatusTypeID BIGINT = NULL,
    @DiseaseID BIGINT,
    @SampleID BIGINT = NULL,
    @BatchTestID BIGINT = NULL,
    @ObservationID BIGINT = NULL,
    @TestNumber INT = NULL,
    @Note NVARCHAR(500) = NULL,
    @RowStatus INT = NULL,
    @StartedDate DATETIME = NULL,
    @ConcludedDate DATETIME = NULL,
    @TestedByOrganizationID BIGINT = NULL,
    @TestedByPersonID BIGINT = NULL,
    @ResultEnteredByOrganizationID BIGINT = NULL,
    @ResultEnteredByPersonID BIGINT = NULL,
    @ValidatedByOrganizationID BIGINT = NULL,
    @ValidatedByPersonID BIGINT = NULL,
    @ReadOnlyIndicator BIT,
    @NonLaboratoryTestIndicator BIT,
    @ExternalTestIndicator BIT = NULL,
    @PerformedByOrganizationID BIGINT = NULL,
    @ReceivedDate DATETIME = NULL,
    @ContactPerson NVARCHAR(200) = NULL,
   	@HumanDiseaseReportID BIGINT = NULL, 
    @VeterinaryDiseaseReportID BIGINT = NULL, 
    @MonitoringSessionID BIGINT = NULL, 
    @VectorID BIGINT = NULL, 
    @RowAction INT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @TestAssignedCount AS INT = 0;

        IF @TestStatusTypeID = 10001003
           OR @TestStatusTypeID = 10001004
        BEGIN
            UPDATE dbo.tlbMaterial
            SET TestUnassignedIndicator = 0,
                TestCompletedIndicator = 0
            WHERE idfMaterial = @SampleID;
        END;
        ELSE IF @TestStatusTypeID = 10001001
                OR @TestStatusTypeID = 10001006
        BEGIN
            SELECT @TestAssignedCount = COUNT(idfTesting)
            FROM dbo.tlbTesting
            WHERE idfMaterial = @SampleID
                  AND intRowStatus = 0
                  AND idfsTestStatus IN ( 10001003, 10001004 );

            IF @TestAssignedCount = 0
            BEGIN
                UPDATE dbo.tlbMaterial
                SET TestCompletedIndicator = 1,
                    TestUnassignedIndicator = 0
                WHERE idfMaterial = @SampleID;
            END
            ELSE
            BEGIN
                UPDATE dbo.tlbMaterial
                SET TestCompletedIndicator = 0,
                    TestUnassignedIndicator = 1
                WHERE idfMaterial = @SampleID;
            END;
        END;

        IF @RowAction = 1 -- Insert
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = N'tlbTesting',
                                              @idfsKey = @TestID OUTPUT;

            INSERT INTO dbo.tlbTesting
            (
                idfTesting,
                idfsTestName,
                idfsTestCategory,
                idfsTestResult,
                idfsTestStatus,
                PreviousTestStatusID,
                idfsDiagnosis,
                idfMaterial,
                idfBatchTest,
                idfObservation,
                intTestNumber,
                strNote,
                intRowStatus,
                datStartedDate,
                datConcludedDate,
                idfTestedByOffice,
                idfTestedByPerson,
                idfResultEnteredByOffice,
                idfResultEnteredByPerson,
                idfValidatedByOffice,
                idfValidatedByPerson,
                blnReadOnly,
                blnNonLaboratoryTest,
                blnExternalTest,
                idfPerformedByOffice,
                datReceivedDate,
                strContactPerson,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
				idfHumanCase, 
                idfVetCase,
                idfMonitoringSession, 
                idfVector 
            )
            VALUES
            (@TestID,
             @TestNameTypeID,
             @TestCategoryTypeID,
             @TestResultTypeID,
             @TestStatusTypeID,
             @PreviousTestStatusTypeID,
             @DiseaseID,
             @SampleID,
             @BatchTestID,
             @ObservationID,
             @TestNumber,
             @Note,
             @RowStatus,
             @StartedDate,
             @ConcludedDate,
             @TestedByOrganizationID,
             @TestedByPersonID,
             @ResultEnteredByOrganizationID,
             @ResultEnteredByPersonID,
             @ValidatedByOrganizationID,
             @ValidatedByPersonID,
             @ReadOnlyIndicator,
             @NonLaboratoryTestIndicator,
             @ExternalTestIndicator,
             @PerformedByOrganizationID,
             @ReceivedDate,
             @ContactPerson,
             10519001,
             '[{"idfTesting":' + CAST(@TestID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
			 @HumanDiseaseReportID, 
             @VeterinaryDiseaseReportID, 
             @MonitoringSessionID, 
             @VectorID
            );
        END;
        ELSE
        BEGIN
            UPDATE dbo.tlbTesting
            SET idfsTestName = @TestNameTypeID,
                idfsTestCategory = @TestCategoryTypeID,
                idfsTestResult = @TestResultTypeID,
                idfsTestStatus = @TestStatusTypeID,
                PreviousTestStatusID = @PreviousTestStatusTypeID,
                idfsDiagnosis = @DiseaseID,
                idfMaterial = @SampleID,
                idfBatchTest = @BatchTestID,
                idfObservation = @ObservationID,
                intTestNumber = @TestNumber,
                strNote = @Note,
                intRowStatus = @RowStatus,
                datStartedDate = @StartedDate,
                datConcludedDate = @ConcludedDate,
                idfTestedByOffice = @TestedByOrganizationID,
                idfTestedByPerson = @TestedByPersonID,
                idfResultEnteredByOffice = @ResultEnteredByOrganizationID,
                idfResultEnteredByPerson = @ResultEnteredByPersonID,
                idfValidatedByOffice = @ValidatedByOrganizationID,
                idfValidatedByPerson = @ValidatedByPersonID,
                blnReadOnly = @ReadOnlyIndicator,
                blnNonLaboratoryTest = @NonLaboratoryTestIndicator,
                blnExternalTest = @ExternalTestIndicator,
                idfPerformedByOffice = @PerformedByOrganizationID,
                datReceivedDate = @ReceivedDate,
                strContactPerson = @ContactPerson,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE(),
				idfHumanCase = @HumanDiseaseReportID, 
                idfVetCase = @VeterinaryDiseaseReportID, 
                idfMonitoringSession = @MonitoringSessionID, 
                idfVector = @VectorID 
            WHERE idfTesting = @TestID;
        END;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USSP_OMM_CONTACT_SET]...';


GO
-- ================================================================================================
-- Name: USSP_OMM_CONTACT_SET
--
-- Description: Adds or updates outbreak contacts.
--          
-- Author: Doug Albanese
--
-- Revision History:
-- Name                Date		Change Detail
-- ------------------	----------	-----------------------------------------------------------
-- Doug Albanese		08/07/2019	Initial release 
-- Stephen Long        04/12/2022	Cleaned up formatting, and updated Source fields.
-- Doug Albanese		04/30/2022	Corrected case senstive characters for the JSON blob for 
--                                  contact information.
-- Stephen Long         06/06/2022  Corrected casing on Human Master ID to Human Master Id.
-- Stephen Long         06/23/2022  Corrected name of tracing observation ID to match JSON.
-- Stephen Long         06/27/2022  Changed insert from 0 to 1 to match app enumeration.
-- Doug Albanese		08/12/2022	Case Sensitivity changes for "Id" to "ID", so that the JSON 
--                                  data can be picked up
-- Doug Albanese		08/12/2022	Changed OutbreakCaseContactID to CaseContactID, to keep 
--                                  consistent between Vet Case and Human Case
-- Stephen Long         09/20/2022  Made all identifiers use "ID".  Some fields were not saving 
--                                  correctly with the case sensitivity.
-- Stephen Long         10/25/2022  Added logic to add a farm copy when creating a veterinary 
--                                  case contact.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_OMM_CONTACT_SET]
(
    @HumanDiseaseReportId BIGINT = NULL,
    @ContactsParameters NVARCHAR(MAX) = NULL,
    @User NVARCHAR(200) = NULL,
    @OutBreakCaseReportUID BIGINT = NULL,
    @FunctionCall INT = 0
)
AS
BEGIN
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage VARCHAR(200)
    );

    DECLARE @ContactedHumanCasePersonID BIGINT = NULL,
            @ContactTypeID BIGINT = NULL,
            @HumanMasterID BIGINT = NULL,
            @HumanID BIGINT = NULL,
			@FarmMasterID BIGINT = NULL, 
            @DateOfLastContact DATETIME2 = NULL,
            @PlaceOfLastContact NVARCHAR(200) = NULL,
            @Comments NVARCHAR(200) = NULL,
            @ContactRelationshipTypeID BIGINT = NULL,
            @ContactStatusTypeID BIGINT = NULL,
            @RowStatus INT = NULL,
            @RowAction INT = NULL,
            @OutbreakCaseContactUID BIGINT = NULL,
            @TracingObservationID BIGINT = NULL,
            @ReturnMessage NVARCHAR(MAX) = 'Success',
            @ReturnCode BIGINT = 0;
			
    DECLARE @ContactsTemp TABLE
    (
        ContactedHumanCasePersonID BIGINT NULL,
        ContactTypeID BIGINT NULL,
        HumanMasterID BIGINT NULL,
		HumanID BIGINT NULL, 
		FarmMasterID BIGINT NULL, 
        DateOfLastContact DATETIME2 NULL,
        PlaceOfLastContact NVARCHAR(200),
		RowStatus INT NULL,
		RowAction INT NULL,
		Comment NVARCHAR(200),
		ContactTracingObservationID BIGINT NULL,
		ContactRelationshipTypeID BIGINT NULL,
		ContactStatusID BIGINT NULL,
		CaseContactID BIGINT NULL
    );
	
    INSERT INTO @ContactsTemp
    SELECT *
    FROM
        OPENJSON(@ContactsParameters)
        WITH
        (
            ContactedHumanCasePersonID BIGINT,
            ContactTypeID BIGINT,
            HumanMasterID BIGINT,
			HumanID BIGINT, 
			FarmMasterID BIGINT, 
			DateOfLastContact DATETIME2,
            PlaceOfLastContact NVARCHAR(200),
			RowStatus INT,
			RowAction INT,
            Comment NVARCHAR(200),
			ContactTracingObservationID BIGINT,
			ContactRelationshipTypeID BIGINT,
			ContactStatusID BIGINT,
			CaseContactID BIGINT
        );
	
	BEGIN TRY
        WHILE EXISTS (SELECT * FROM @ContactsTemp)
        BEGIN
            SELECT TOP 1
                @ContactedHumanCasePersonID = ContactedHumanCasePersonID,
                @ContactTypeID = ContactTypeID,
                @HumanMasterID = HumanMasterID,
				@HumanID = HumanID, 
				@FarmMasterID = FarmMasterID, 
                @DateOfLastContact = DateOfLastContact,
                @PlaceOfLastContact = PlaceOfLastContact,
                @Comments = Comment,
                @ContactRelationshipTypeID = ContactRelationshipTypeID,
                @ContactStatusTypeID = ContactStatusID,
                @RowStatus = RowStatus,
                @RowAction = RowAction,
                @OutbreakCaseContactUID = CaseContactID,
                @TracingObservationID = ContactTracingObservationID
            FROM @ContactsTemp;

			IF @RowAction = 1 --Insert
			BEGIN
	            IF @FarmMasterID IS NULL
				BEGIN
				    INSERT INTO @SuppressSelect
                    EXECUTE dbo.USP_HUM_COPYHUMANACTUALTOHUMAN @HumanMasterID,
                                                               @HumanID OUTPUT,
                                                               @ReturnCode OUTPUT,
                                                               @ReturnMessage OUTPUT;
				END
				ELSE
				BEGIN
				    DECLARE @FarmID BIGINT;
				    INSERT INTO @SuppressSelect
                    EXECUTE dbo.USSP_VET_FARM_COPY @User,
                                                   @FarmMasterID,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   @HumanMasterID,
                                                   @FarmID OUTPUT,
                                                   @HumanID OUTPUT;
				END
			END;
				
            IF @HumanDiseaseReportId IS NOT NULL
            BEGIN
                IF NOT EXISTS
                (
                    SELECT idfContactedCasePerson
                    FROM dbo.tlbContactedCasePerson
                    WHERE idfContactedCasePerson = @ContactedHumanCasePersonID
                          AND intRowStatus = 0
                )
					BEGIN
						IF @FunctionCall = 0
							BEGIN
								EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbContactedCasePerson', @ContactedHumanCasePersonID OUTPUT;
							END
						ELSE
							BEGIN
								INSERT INTO @SuppressSelect
								EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbContactedCasePerson', @ContactedHumanCasePersonID OUTPUT;
							END
							
						INSERT INTO dbo.tlbContactedCasePerson
						(
							idfContactedCasePerson,
							idfsPersonContactType,
							idfHuman,
							idfHumanCase,
							datDateOfLastContact,
							strPlaceInfo,
							intRowStatus,
							strComments,
							SourceSystemKeyValue,
							SourceSystemNameID,
							AuditCreateUser,
							AuditCreateDTM
						)
						VALUES
						(
							@ContactedHumanCasePersonID,
							@ContactTypeID,
							@HumanID,
							@HumanDiseaseReportID,
							@DateOfLastContact,
							@PlaceOfLastContact,
							@RowStatus,
							@Comments,
							'[{"idfContactedCasePerson":' + CAST(@ContactedHumanCasePersonID AS NVARCHAR(300)) + '}]',
							10519001,
							@User,
							GETDATE()
						)
					END
                ELSE
					BEGIN
						IF @RowAction = 3 -- Delete
						BEGIN
							SET @RowStatus = 1
						END
						ELSE
						BEGIN
							SET @RowStatus = 0
						END

						UPDATE dbo.tlbContactedCasePerson
						SET idfsPersonContactType = @ContactTypeID,
							idfHuman = @HumanID,
							idfHumanCase = @HumanDiseaseReportID,
							datDateOfLastContact = @DateOfLastContact,
							strPlaceInfo = @PlaceOfLastContact,
							intRowStatus = @RowStatus,
							rowguid = NEWID(),
							strComments = @Comments,
							strMaintenanceFlag = '',
							strReservedAttribute = '',
							AuditUpdateUser = @User,
							AuditCreateDTM = GETDATE()
						WHERE idfContactedCasePerson = @ContactedHumanCasePersonID
							  AND intRowStatus = 0;
					END
            END
			
            IF NOT EXISTS
            (
                SELECT OutbreakCaseContactUID
                FROM dbo.OutbreakCaseContact
                WHERE OutbreakCaseContactUID = @OutbreakCaseContactUID
                      AND intRowStatus = 0
            )
            BEGIN
                IF @FunctionCall = 0
					BEGIN
						EXEC dbo.USP_GBL_NEXTKEYID_GET 'OutbreakCaseContact',
													   @OutbreakCaseContactUID OUTPUT;
					END
                ELSE
					BEGIN
						INSERT INTO @SuppressSelect
						EXEC dbo.USP_GBL_NEXTKEYID_GET 'OutbreakCaseContact',
													   @OutbreakCaseContactUID OUTPUT;
					END

					INSERT INTO OutbreakCaseContact
					(
						OutbreakCaseContactUID,
						OutbreakCaseReportUID,
						ContactTypeID,
						ContactedHumanCasePersonID,
						idfHuman,
						ContactRelationshipTypeID,
						DateOfLastContact,
						PlaceOfLastContact,
						CommentText,
						ContactStatusID,
						ContactTracingObservationID,
						intRowStatus,
						SourceSystemNameID,
						SourceSystemKeyValue,
						AuditCreateUser,
						AuditCreateDTM
					)
					VALUES
					(
						@OutbreakCaseContactUID,
						@OutBreakCaseReportUID,
						@ContactTypeID,
						@ContactedHumanCasePersonID,
						@HumanID,
						@ContactRelationshipTypeID,
						@DateOfLastContact,
						@PlaceOfLastContact,
						@Comments,
						@ContactStatusTypeID,
						@TracingObservationID,
						@RowStatus,
						10519001,
						'[{"OutbreakCaseContactUID":' + CAST(@OutbreakCaseContactUID AS NVARCHAR(300)) + '}]',
						@User,
						GETDATE()
					);
				END
            ELSE
				BEGIN
					IF @RowAction = 3 -- Delete
					BEGIN
						SET @RowStatus = 1;
					END
					ELSE
					BEGIN
						SET @RowStatus = 0;
					END

					UPDATE dbo.OutbreakCaseContact
					SET ContactTypeID = @ContactTypeID,
						ContactRelationshipTypeID = @ContactRelationshipTypeID,
						DateOfLastContact = @DateOfLastContact,
						PlaceOfLastContact = @PlaceOfLastContact,
						CommentText = @Comments,
						ContactStatusID = @ContactStatusTypeID,
						ContactTracingObservationID = @TracingObservationID,
						intRowStatus = @RowStatus,
						AuditUpdateUser = @User,
						AuditUpdateDTM = GETDATE()
					WHERE OutbreakCaseContactUID = @OutbreakCaseContactUID;
				END
			
            SET ROWCOUNT 1;
            DELETE FROM @ContactsTemp;
            SET ROWCOUNT 0;
        END
    END TRY
    BEGIN CATCH
        THROW
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USSP_OMM_HUMAN_TESTS_SET]...';


GO
--**************************************************************************************************************************
-- Name 				: USSP_OMM_HUMAN_TESTS_SET
-- Description			: add update delete Human Case Tests
--          
-- Author               : RDA
-- Revision History
--	Name			 Date		 Change Detail
--	--------------	 ----------	 --------------------------------
--	Doug Albanese	 07/09/2019	 Created
--	Doug Albanese	 04/27/2022	 Refactored to include relative fields only
--  Doug Albanese	 10/04/2022	 Corrected the usage of RowAction to using the numbering system
-- Doug Albanese	 10/24/2022	 Added the idfHumanCase field so that "USP_HUM_Test_GetList" could operate for both Human Disease Report and Labratory
--**************************************************************************************************************************
ALTER PROCEDURE [dbo].[USSP_OMM_HUMAN_TESTS_SET]
	@idfsDiagnosis				BIGINT,
	@idfHumanActual				BIGINT,
	@idfHumanCase				BIGINT,
	@TestsParameters			NVARCHAR(MAX) = NULL,
	@User						NVARCHAR(100) = NULL
AS
Begin
	SET NOCOUNT ON;

	DECLARE
		
		@idfHuman				BIGINT = NULL,
		@TestID					BIGINT = NULL,			--(Test Identity), tlbTesting: TestID
		@idfTestValidation		BIGINT = NULL,
		@SampleID				BIGINT = NULL,			--(Sample Identity), tlbMaterial: SampleID			
		@strFieldBarcode		NVARCHAR(200) = NULL,	--"Field Sample ID", tlbMaterial: strFieldBarcode
		@strBarcode				NVARCHAR(200) = NULL,	--"Lab Sample ID", tlbMaterial: strBarCode
		@TestNameTypeID			BIGINT = NULL,			--"Test Name", tlbTesting: TestNameTypeID
		@TestResultTypeID		BIGINT = NULL,			--"Test Result", tlbTesting: TestResultTypeID
		@TestStatusTypeID		BIGINT = NULL,			--"Test Status", tlbTesting: TestStatusTypeID
		@TestCategoryTypeID		BIGINT = NULL,			--"Test Category", tlbTesting: TestNameTypeID
		@idfsInterpretedStatus	BIGINT = NULL,			--"Rule In / Rule Out", tlbTestValidation: idfsInterpretedStatus
		@strInterpretedComment	NVARCHAR(200) = NULL,	--"Comments", tlbTestValidation: strInterpretedComment
		@datInterpretationDate	DATETIME2 = NULL,		--"Date Interpreted", tlbTestValidation: datInterpretationDate
		@idfInterpretedByPerson	BIGINT = NULL,			--"Interpreted By", tlbTestValidation: idfInterpretedByPerson
		@blnValidateStatus		INT = NULL,				--"Validated (Y/N)", tlbTestValidation: blnValidateStatus
		@strValidateComment		NVARCHAR(200) = NULL,	--"Comments", tlbTestValidation: strValidateComment
		@datValidationDate		DATETIME2 = NULL,		--"Date Validated", tlbTestValidation: datValidationDate
		@idfValidatedByPerson	BIGINT = NULL,			--"Validated By", tlbTestValidation: idfValidatedByPerson
		@RowAction				INT = NULL,				--(Row Action), Designation for record manipulation... Delete, Read Only, Insert
		@intRowStatus			INT	= NULL				--(Row Status), Designation to indicate a deleted record (1 = Deleted, 0 = Active)

		SELECT
				TOP 1
				@idfHuman = idfHuman
		FROM
				tlbHuman
		WHERE
				idfHumanActual = @idfHumanActual
		ORDER BY 
				AuditCreateDTM DESC

	DECLARE  @TestsTemp TABLE (	
				TestID					BIGINT NULL,
				SampleID				BIGINT NULL,
				strFieldBarcode			NVARCHAR(200) NULL,
				strBarcode				NVARCHAR(200) NULL,
				TestNameTypeID			BIGINT NULL,
				TestResultTypeID		BIGINT NULL,
				TestStatusTypeID		BIGINT NULL,
				TestCategoryTypeID		BIGINT NULL,
				idfsInterpretedStatus	BIGINT NULL,
				strInterpretedComment	NVARCHAR(200) NULL,
				datInterpretationDate	DATETIME2 NULL,
				idfInterpretedByPerson	BIGINT NULL,
				blnValidateStatus		INT NULL,
				strValidateComment		NVARCHAR(200) NULL,
				datValidationDate		DATETIME2 NULL,
				idfValidatedByPerson	BIGINT NULL,
				RowAction				INT NULL
	)
	
	INSERT INTO	@TestsTemp 
	SELECT * FROM OPENJSON(@TestsParameters) 
			WITH (
				TestID					BIGINT,
				SampleID				BIGINT,
				strFieldBarcode			NVARCHAR(200),
				strBarcode				NVARCHAR(200),
				TestNameTypeID			BIGINT,
				TestResultTypeID		BIGINT,
				TestStatusTypeID		BIGINT,
				TestCategoryTypeID		BIGINT,
				idfsInterpretedStatus	BIGINT,
				strInterpretedComment	NVARCHAR(200),
				datInterpretationDate	DATETIME2,
				idfInterpretedByPerson	BIGINT,
				blnValidateStatus		INT,
				strValidateComment		NVARCHAR(200),
				datValidationDate		DATETIME2,
				idfValidatedByPerson	BIGINT,
				RowAction				INT				
				);


	BEGIN TRY  
	  
		WHILE EXISTS (SELECT * FROM @TestsTemp)
			BEGIN
				SELECT TOP 1
					@TestID = TestID,
					@SampleID = SampleID,
					@strFieldBarcode = strFieldBarcode,
					@strBarcode = strBarcode,
					@TestNameTypeID = TestNameTypeID,
					@TestResultTypeID = TestResultTypeID,
					@TestStatusTypeID = TestStatusTypeID,
					@TestCategoryTypeID = TestCategoryTypeID,
					@idfsInterpretedStatus = idfsInterpretedStatus,
					@strInterpretedComment = strInterpretedComment,
					@datInterpretationDate = datInterpretationDate,
					@idfInterpretedByPerson = idfInterpretedByPerson,
					@blnValidateStatus = blnValidateStatus,
					@strValidateComment = strValidateComment,
					@datValidationDate = datValidationDate,
					@idfValidatedByPerson = idfValidatedByPerson,
					@RowAction = RowAction			
				FROM @TestsTemp
				
				--Because of different App-Side usage, the following will force the upcoming record existence test to abide by the negative number test
				IF @RowAction = 1 --INSERT
				  BEGIN
					 SET @TestID = -1
				  END

				IF NOT EXISTS(SELECT TOP 1 idfTesting FROM tlbTesting WHERE idfTesting = @TestID)
					BEGIN
						
						--New records will require information from the tlbMaterial table.
						--We use strFieldBarCode of this "Test" batch, to obtain the id of the previously added Samples (SampleID)
						if (@SampleID IS NULL)
							BEGIN
								SELECT 
									TOP 1
									@SampleID = idfMaterial
								FROM
									tlbMaterial
								WHERE
									strFieldBarcode = @strFieldBarcode
								ORDER BY idfMaterial desc
							END

						EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbTesting', @TestID OUTPUT;
						
						INSERT INTO tlbTesting (
							idfTesting,
							idfsTestName,
							idfsTestCategory,
							idfsTestResult,
							idfsTestStatus,
							idfsDiagnosis,
							idfHumanCase,
							idfMaterial,
							intRowStatus,
							rowguid,
							AuditCreateDTM,
							AuditCreateUser
							)
						VALUES (
							@TestID,
							@TestNameTypeID,
							@TestCategoryTypeID,
							@TestResultTypeID,
							@TestStatusTypeID,
							@idfsDiagnosis,
							@idfHumanCase,
							@SampleID,
							0,
							NewID(),
							GETDATE(),
							@User
						)

						EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbTestValidation', @idfTestValidation OUTPUT;

						INSERT INTO tlbTestValidation (
							idfTestValidation,
							idfTesting,
							idfsDiagnosis,
							idfsInterpretedStatus,
							strInterpretedComment,
							datInterpretationDate,
							idfInterpretedByPerson,
							blnValidateStatus,
							strValidateComment,
							datValidationDate,
							idfValidatedByPerson,
							intRowStatus,
							rowguid,
							AuditCreateDTM,
							AuditCreateUser
						)
						VALUES(
							@idfTestValidation,
							@TestID,
							@idfsDiagnosis,
							@idfsInterpretedStatus,
							@strInterpretedComment,
							@datInterpretationDate,
							@idfInterpretedByPerson,
							@blnValidateStatus,
							@strValidateComment,
							@datValidationDate,
							@idfValidatedByPerson,
							0,
							NewID(),
							GETDATE(),
							@User
						)
					END
				ELSE
					BEGIN
						IF @RowAction = 3 --DELETE
							BEGIN
								SET @intRowStatus = 1
							END
						ELSE
							BEGIN
								SET @intRowStatus = 0
							END

						UPDATE dbo.tlbTesting
						SET 
							idfsTestName = @TestNameTypeID,
							idfsTestCategory = @TestCategoryTypeID,
							idfsTestResult = @TestResultTypeID,
							idfsTestStatus = @TestStatusTypeID,
							idfsDiagnosis = @idfsDiagnosis,
							idfMaterial = @SampleID,
							intRowStatus = @intRowStatus,
							AuditUpdateDTM = GETDATE(),
							AuditUpdateUser = @User
						WHERE	
							idfTesting = @TestID

						UPDATE tlbTestValidation
						SET
							idfsInterpretedStatus = @idfsInterpretedStatus,
							strInterpretedComment = @strInterpretedComment,
							datInterpretationDate = @datInterpretationDate,
							idfInterpretedByPerson = @idfInterpretedByPerson,
							blnValidateStatus = @blnValidateStatus,
							strValidateComment = @strValidateComment,
							datValidationDate = @datValidationDate,
							idfValidatedByPerson = @idfValidatedByPerson,
							AuditUpdateDTM = GETDATE(),
							AuditUpdateUser = @User
						WHERE
							idfTestValidation = @idfTestValidation

					END
				
					SET ROWCOUNT 1						
					DELETE FROM @TestsTemp
					SET ROWCOUNT 0
			END	

	END TRY
	BEGIN CATCH
		THROW;
		
	END CATCH
END
GO
PRINT N'Altering Procedure [Report].[USP_LAB_FREEZER_SUBDIVISION_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_FREEZER_SUBDIVISION_GETList
--
-- Description:	Get freezer subdivision list (shelf, rack, box) for a specific freezer.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     01/19/2019 Initial release.
-- Stephen Long     03/01/2019 Added return code and return message.
-- Stephen Long     01/06/2021 Updated where criteria on site ID to look at freezer site ID only.
-- Leo Tracchia     09/15/2020 Removed return message and return code and change on joins
-- Srini Goli		10/03/2020 Used function fn_NoOfLocationsWithFreezerLocations to disply occupied Freezers
-- ================================================================================================
ALTER PROCEDURE [Report].[USP_LAB_FREEZER_SUBDIVISION_GETList] (
	@LanguageID NVARCHAR(50)
	,@FreezerID BIGINT = NULL
	,@SiteID BIGINT = NULL
	)
AS
BEGIN
	DECLARE @ReturnCode INT = 0;
	DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';

	BEGIN TRY
		SET NOCOUNT ON;

		SELECT fs.idfSubdivision AS FreezerSubdivisionID
			,fs.idfsSubdivisionType AS SubdivisionTypeID
			,subdivisionType.name AS SubdivisionTypeName
			,fs.idfFreezer AS FreezerID
			,f.strFreezerName AS FreezerName
			,f.LocBuildingName AS Building
			,f.strNote AS FreezerNote
			,f.idfsStorageType AS StorageTypeID
			,f.strBarcode AS FreezerBarCode
			,f.LocRoom AS Room
			,fs.idfParentSubdivision AS ParentFreezerSubdivisionID
			,fs.idfsSite AS OrganizationID
			,fs.strBarcode AS EIDSSFreezerSubdivisionID
			,fs.strNameChars AS FreezerSubdivisionName
			,fs.strNote AS SubdivisionNote
			,fs.intCapacity AS NumberOfLocations
			,fs.BoxSizeID AS BoxSizeTypeID
			,boxSizeType.name AS BoxSizeTypeName
			,fs.BoxPlaceAvailability
			,(
				SELECT COUNT(m.idfMaterial)
				FROM dbo.tlbMaterial m
				WHERE m.idfSubdivision = fs.idfSubdivision
					AND m.intRowStatus = 0
					AND (
						m.idfsSampleStatus <> 10015008
						AND m.idfsSampleStatus <> 10015009
						)
				) AS SampleCount
			,fs.intRowStatus AS RowStatus
			,'R' AS RowAction into #temp
		FROM dbo.tlbFreezerSubdivision fs
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000093) AS subdivisionType ON fs.idfsSubdivisionType = subdivisionType.idfsReference AND subdivisionType.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000512) AS boxSizeType ON fs.BoxSizeID = boxSizeType.idfsReference  AND boxSizeType.intRowStatus = 0
		LEFT JOIN dbo.tlbFreezer AS f ON f.idfFreezer = fs.idfFreezer AND f.intRowStatus = 0
		WHERE (
				(@FreezerID IS NOT NULL AND fs.idfFreezer = @FreezerID)
				OR (@FreezerID IS NULL)
				)
			AND (
				(@SiteID IS NOT NULL AND f.idfsSite = @SiteID)
				OR (@SiteID IS NULL)
				)
			AND fs.intRowStatus = 0
		ORDER BY fs.idfParentSubdivision;


WITH  cte1 AS (
  SELECT    FreezerSubdivisionID,
        SubdivisionTypeName,
		FreezerName,
		Building,
		Room,
		FreezerBarCode,
		FreezerNote,
		FreezerSubdivisionName,
		EIDSSFreezerSubdivisionID,
		NumberOfLocations,
		BoxSizeTypeName,
		CAST(FreezerSubdivisionID AS VARCHAR(255)) AS PATH,
        1 As LEVEL
  FROM #temp
  WHERE ParentFreezerSubdivisionID IS NULL
     
  UNION ALL
     
  SELECT    t.FreezerSubdivisionID,
            t.SubdivisionTypeName,
			t.FreezerName,
			t.Building,
			t.Room,
			t.FreezerBarCode,
			t.FreezerNote,
			t.FreezerSubdivisionName,
			t.EIDSSFreezerSubdivisionID,
			t.NumberOfLocations,
			t.BoxSizeTypeName,
			CAST(PATH + '.' + CAST(t.FreezerSubdivisionID AS VARCHAR(255)) AS VARCHAR(255)),
            --t.ParentFreezerSubdivisionID + '.'+t.FreezerSubdivisionID,
            th.LEVEL+1
  FROM #temp t
  INNER JOIN cte1 th
  ON th.FreezerSubdivisionID = t.ParentFreezerSubdivisionID
  WHERE t.ParentFreezerSubdivisionID IS NOT NULL
)
SELECT    FreezerSubdivisionID,
        SubdivisionTypeName,
		FreezerName,
		Building,
		Room,
		FreezerBarCode,
		FreezerNote,
		FreezerSubdivisionName,
		EIDSSFreezerSubdivisionID,
		IIF(LEVEL=3,Report.FN_REP_NoOfLocationsWithFreezerLocations(NumberOfLocations,FreezerSubdivisionID),CAST(NumberOfLocations AS VARCHAR)) AS NumberOfLocations,
		BoxSizeTypeName,
		PATH,
        LEVEL,
		IIF(CHARINDEX('.',PATH)=0,PATH,SUBSTRING(PATH,0,CHARINDEX('.',PATH))) as ReportGroup
FROM cte1 ORDER BY ReportGroup,Level;

	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;

	--SELECT @ReturnCode
	--	,@ReturnMessage;
END;
GO
PRINT N'Altering Procedure [Report].[USP_REP_Human_Aggregate_Disease_Summary_Report_Detail]...';


GO
-- ================================================================================================
-- Name: USP_REP_Human_Aggregate_Disease_Summary_Report_Detail
-- Description: PrintedForm Human Aggregate Report
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Srini Goli		08/24/2022	Initial release for Human Aggregate Report.
-- Srini Goli		10/07/2022  used Sql Veriant data type.
-- Mike Kornegay	10/17/2022	Remove temp table (not compatible with EF Power Tools)
/*

EXEC    [Report].[USP_REP_Human_Aggregate_Disease_Summary_Report_Detail]
        @LangID = N'en-US',
        @idfsAggrCaseType = 10102001,
        @idfAggrCaseList = '155564770001958;155564770001956'

*/
-- ================================================================================================
ALTER PROCEDURE [Report].[USP_REP_Human_Aggregate_Disease_Summary_Report_Detail] (
	@LangID AS NVARCHAR(50)
	,@idfsAggrCaseType AS  BIGINT= NULL
	,@idfAggrCaseList AS  NVARCHAR(MAX)= NULL
	)
AS
BEGIN
	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

	DECLARE @AggrCaseTable TABLE (
		[idfAggrCase] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpMatrix AS TABLE (
		intNumRow INT
		,idfAggrHumanCaseMTX BIGINT
		,idfsDiagnosis BIGINT
		,strDefault NVARCHAR(2000)
		,strIDC10 NVARCHAR(100)
		)

   DECLARE @tempFlexForm TABLE (
		idfsParentSection BIGINT
		,idfsSection BIGINT
		,idfsParameter BIGINT
		,SectionName NVARCHAR(2000)
		,ParameterName NVARCHAR(500)
		,parameterType NVARCHAR(100)
		,idfsParameterType BIGINT
		,idfsReferenceType BIGINT
		,idfsEditor BIGINT
		,SectionOrder INT
		,ParameterOrder INT
		,blnGrid BIT
		,blnFixedRowSet BIT
		,idfsEditMode BIGINT
		,idfsFormTemplate BIGINT
		)

	DECLARE @observationsTable TABLE (
		[idfObservation] BIGINT,
		[idfVersion] BIGINT,
		[idfsCaseFormTemplate] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpActivityParameters TABLE (
		[idfActivityParameters] BIGINT,
		[idfObservation] BIGINT,
		[idfsFormTemplate] BIGINT,
		[idfsParameter] BIGINT,
		[idfsSection] BIGINT,
		[idfRow] BIGINT,
		--[intNumRow] INT,
		[Type] BIGINT,
		[varValue] sql_variant,
		--[strNameValue] NVARCHAR(200),
		[numRow] INT,
		--[FakeField ] INT,
		[ParameterType]  BIGINT
		)

	DECLARE @tmpDetails TABLE (
		idfCaseObservation BIGINT,
		idfsCaseFormTemplate BIGINT,
		idfVersion BIGINT
	)

	BEGIN TRY
			BEGIN

			--Get Selected Agg Cases
			INSERT INTO @AggrCaseTable (
					[idfAggrCase],
					[intRowNumber]
					)
				SELECT CAST([Value] AS BIGINT),
					ROW_NUMBER() OVER (
						ORDER BY [Value]
						)
				FROM [dbo].[FN_GBL_SYS_SplitList](@idfAggrCaseList, NULL, NULL)

				--Get this SQl from [dbo].[USP_AGG_CASE_GETDETAIL]
				INSERT INTO @tmpDetails
				SELECT 
					a.idfCaseObservation
					,CaseObs.idfsFormTemplate AS idfsCaseFormTemplate
					,a.idfVersion
				--INTO #tmpDetails
				FROM dbo.tlbAggrCase a	
				LEFT JOIN dbo.tlbObservation CaseObs ON idfCaseObservation = CaseObs.idfObservation
				WHERE a.intRowStatus = 0
				AND a.idfAggrCase IN (SELECT idfAggrCase FROM @AggrCaseTable)
				--AND (@idfAggrCase IS NULL OR a.idfAggrCase = @idfAggrCase)
				--	AND (
				--		CASE 
				--			WHEN @idfsAggrCaseType IS NULL
				--				THEN 1
				--			WHEN ISNULL(a.idfsAggrCaseType, '') = @idfsAggrCaseType
				--				THEN 1
				--			ELSE 0
				--			END = 1
				--		)
				--	AND (
				--		CASE 
				--			WHEN @idfAggrCase IS NULL
				--				THEN 1
				--			WHEN ISNULL(a.idfAggrCase, '') = @idfAggrCase
				--				THEN 1
				--			ELSE 0
				--			END = 1
				--		);
				
				DECLARE @idfsFormTemplate BIGINT,
						@idfVersion BIGINT

				INSERT INTO @observationsTable (
					[idfObservation],
					[idfVersion],
					[idfsCaseFormTemplate],
					[intRowNumber]
					)
				SELECT [idfCaseObservation],
					[idfVersion],
					[idfsCaseFormTemplate],
					ROW_NUMBER() OVER (
						ORDER BY [idfCaseObservation]
						)
				FROM @tmpDetails

				SELECT @idfsFormTemplate=idfsCaseFormTemplate, 
						@idfVersion= idfVersion
				FROM @observationsTable


				--Get this SQL from dbo.USP_CONF_ADMIN_AggregateHumanCaseMatrixReport_GET
				INSERT INTO @tmpMatrix
				SELECT	 
					mtx.intNumRow as intNumRow,
					mtx.idfAggrHumanCaseMTX,
					mtx.idfsDiagnosis,
					D.name AS strDefault,
					D.strIDC10

				FROM dbo.tlbAggrHumanCaseMTX mtx
				INNER JOIN dbo.FN_GBL_DiagnosisRepair(@LangID, 2, 10020002) D ON D.idfsDiagnosis = mtx.idfsDiagnosis  -- 2 = Human, use 10020002 for Aggregate cases
		
				WHERE mtx.intRowStatus = 0 AND mtx.idfVersion = @idfVersion

				--Get Flex Form header details
				INSERT INTO @tempFlexForm
				EXEC [dbo].[USP_ADMIN_FF_FlexForm_Get] 
						@LangID =@LangID, 
						@idfsDiagnosis= NULL, 
						@idfsFormType = 10034012, 
						@idfsFormTemplate=@idfsFormTemplate

				--Get Activity Parameters
				--INSERT INTO @tmpActivityParameters
				--EXEC dbo.USP_ADMIN_FF_ActivityParameters_GET
				--		@observationList = @observationList, 
				--		@LangID = @LangID
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[varValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					--CAST(AP.varValue AS NVARCHAR(MAX)),
					AP.varValue,
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfObservation FROM @observationsTable)
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0
				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow


				--Report
				SELECT	ff.ParameterName
						,ff.idfsParameter
						,ff.ParameterOrder
						,m.idfsDiagnosis
						,m.strDefault
						,m.strIDC10
						,m.intNumRow
						,ap.varValue as varValue--ap.idfRow,m.idfAggrHumanCaseMTX as idfRow
				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter and m.idfAggrHumanCaseMTX=ap.idfRow
				ORDER BY intNumRow

				--Test
				--Dynamic Pivot
				--DECLARE @ColumnToPivot  NVARCHAR(255),
				--		@ListToPivot    NVARCHAR(255),
				--		@SqlStatement NVARCHAR(MAX)
				--SET @ColumnToPivot='ParameterName'
				--SELECT @ListToPivot= COALESCE(@ListToPivot + ',','') +  N'[' + CAST(ff.ParameterName AS varchar(100)) + ']'
				--FROM @tempFlexForm ff
				--ORDER BY ParameterOrder

				----SELECT @ListToPivot
				----EXEC dbo.USP_ADMIN_DynamicPivotTableInSql @ColumnToPivot,@ListToPivot

				--  SET @SqlStatement = N'
				--	SELECT * FROM (
				--	  SELECT
				--	    [intNumRow],
				--		[strDefault],
				--		[strIDC10],
				--		[ParameterName],
				--		[varValue]
				--	  FROM #tempReport
				--	) Results
				--	PIVOT (
				--	  MAX([varValue])
				--	  FOR ['+@ColumnToPivot+']
				--	  IN (
				--		'+@ListToPivot+'
				--	  )
				--	) AS PivotTable
				--	ORDER BY intNumRow
				--  ';

			END

		--DROP TABLE IF EXISTS #tmpDetails;

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT = 1
			ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [Report].[USP_REP_HumCaseForm_GET]...';


GO
--*************************************************************************
-- Name 				: report.USP_REP_HumCaseForm_GET
-- DescriptiON			: Select data for Human Case Investigation report.
--          
-- Author               : Mark Wilson
-- Revision History
-- Name			   Date			Change Detail
-- Mark Wilson	   03-23-2022	Initial E7 version
-- Srini Goli	   10/20/2022	Updated SentByOffice
-- Testing code:
/*

--Example of a call of procedure:

exec report.USP_REP_HumCaseForm_GET @LangID=N'en-US',@ObjID=121490

*/

ALTER  PROCEDURE [Report].[USP_REP_HumCaseForm_GET]
	(
		@LangID AS NVARCHAR(10),
		@ObjID	AS BIGINT = NULL
	)
AS	
	SELECT 
		HC.idfCase									AS idfCase,
		HC.strLocalIdentifier						AS LocalID,
		SentByOfficeRef.LongName					AS OrgSentNotification,
		InvestigatedByOfficeRef.LongName			AS OrgConductInv,
		LRegistration.AdminLevel2Name				AS RegRegion,
		LRegistration.AdminLevel3Name				AS RegRayon,	
		LRegistration.AdminLevel4Name				AS RegVillage,
		tRegistratedLocation.strStreetName			AS RegStreet,
		tRegistratedLocation.strPostCode			AS RegPostalCode,
		tRegistratedLocation.strBuilding			AS RegBuld,
		tRegistratedLocation.strHouse				AS RegHouse,
		tRegistratedLocation.strApartment			AS RegApp,
		HC.strRegistrationPhone						AS RegPhone,
		CASE 
			WHEN tRegistratedLocation.blnForeignAddress =1 THEN	tRegistratedLocation.strAddressString
			ELSE ''
		END											AS RegForeignAddress,
		tRegistratedLocation.dblLongitude			AS RegLongitude,
		tRegistratedLocation.dblLatitude			AS RegLatitude,
		---- Employer Address---
		LEmployer.AdminLevel1Name					AS EmpCountry,
		LEmployer.AdminLevel2Name						AS EmpRegion,
		LEmployer.AdminLevel3Name						AS EmpRayon,
		LEmployer.AdminLevel4Name					AS EmpVillage,
		tEmployerLocation.strStreetName				AS EmpStreet,
		HC.strWorkPhone								AS EmpPhone,
		tEmployerLocation.strPostCode				AS EmpPostalCode,
		tEmployerLocation.strBuilding				AS EmpBuild,
		tEmployerLocation.strHouse					AS EmpHouse,
		tEmployerLocation.strApartment				AS EmpApp,

		---
		rfInitialCaseStatus.[name]					AS InitCaseStatus,
		HC.datNotificationDate						AS DateFromHealthCareProvider, -- dbo.Activity.datReportDate
		HC.strCaseID								AS CaseIdentifier,
		HC.datInvestigationStartDate				AS StartingDateOfInvestigation,
		HC.datCompletionPaperFormDate				AS CompletionPaperFormDate,
		HC.strPatientFullName						AS NameOfPatient,
		HC.datDateofBirth							AS DOB,
		HC.strPersonID								AS strPersonID,
		HC.strPersonIDType							AS strPersonIDType,	
		HC.strPatientAgeType						AS AgeType,
		HC.intPatientAge							AS Age,
		HC.strPatientGender							AS Sex,
		rfNationality.[name]						AS Citizenship,
		LCurrent.AdminLevel2Name					AS Region,
		LCurrent.AdminLevel3Name					AS Rayon,	
		LCurrent.AdminLevel4Name					AS City,
		tCurrentLocation.strStreetName				AS Street,
		tCurrentLocation.strPostCode				AS strPost_Code,
		HC.strHomePhone								AS PhoneNumber,
		rfOccupationType.[name]						AS Occupation,
		tCurrentLocation.strBuilding				AS BuildingNum,
		tCurrentLocation.strHouse					AS HouseNum,
		tCurrentLocation.strApartment				AS AptNum,
		tCurrentLocation.dblLongitude				AS Longitude,
		tCurrentLocation.dblLatitude				AS Latitude,
		rfHospitalizationStatus.[name]				AS strCurrentLocationStatus,
		HC.strEmployerName							AS NameOfEmployer,
		HC.datFacilityLastVisit						AS datFacilityLastVisit,
		HC.datExposureDate							AS DateOfExposure,
		HC.datOnSetDate								AS DateofSymptomsOnset,
		HC.datFirstSoughtCareDate					AS DateOfFirstSoughtCare,
		SoughtCareFacility.FullName					AS FacilityOfPatientSoughtCare,
		CurrentLocationOffice.[name]				AS CurrentLocationOfficeName,
		HC.datHospitalizationDate					AS HospitalizationDate,
		HC.datDischargeDate							AS DateOfDischarged,
		HC.strHospitalizationPlace					AS PlaceOfHospitalization,
		rfHospitalisationYN.[name]					AS Hospitalization,
		HC.strClinicalNotes							AS ClinicalComments,
		--rfCaseStatus.[name]							AS FinalCaseClassification,
		(SELECT strDefault FROM trtbasereference WHERE idfsBaseReference = hc.idfsCaseStatus) AS FinalCaseClassification,
		HC.datFinalCaseClassificationDate	AS FinalCaseClassificationDate,
		rfCaseStatus.[name]					AS CaseProgerssStatus,
		ISNULL(HC.strFinalDiagnosis, HC.strTentetiveDiagnosis) AS FinalDiagnosis,
		ISNULL(HC.datFinalDiagnosisDate, HC.datTentativeDiagnosisDate) AS FinalDiagDate,
		HC.strTentetiveDiagnosis			AS InitialDiagnosis,
		HC.datTentativeDiagnosisDate		AS InitialDiagDate,
		HC.strClinicalDiagnosis			AS ClinicalDiagnosis,
		rfSpecimenCollectedYN.[name]				AS SpeciemenCollected,
		HC.strNotCollectedReason			AS ReasonForNotCollectingSpeciemens,
		tHumanCase.strSampleNotes					AS strSampleNotes,
		rfTherapyYN.[name]							AS Antibiotics,
		ISNULL(tHumanCase.blnClinicalDiagBasis,0)	AS blnClinicalDiagBasis,
		ISNULL(tHumanCase.blnLabDiagBasis,0)		AS blnLabDiagBasis,
		ISNULL(tHumanCase.blnEpiDiagBasis,0)		AS blnEpiDiagBasis,
		rfOutcome.[name]							AS Outcome,
		HC.datDateOfDeath					AS DateOfDeath,
		rfRelatedToOutbreakYN.[name]				AS RelatedToOutbreak,
		tOutbreak.strOutbreakID						AS OutbreakID,
		HC.strSummaryNotes					AS SummaryComments,
		HC.strEpidemiologistsName			AS EpiName,
		HC.strGeoLocation					AS strGeoLocation,
		HC.strFinalState					AS strFinalState,
		HC.strNote							AS strClinicalInformationComments
	

	FROM report.FN_REP_HumanCaseProperties_GET(@LangID) AS HC
	-- Get Current ADDRESS 
	 LEFT JOIN	dbo.tlbGeoLocation tCurrentLocation ON HC.idfCurrentResidenceAddress = tCurrentLocation.idfGeoLocation
 	 LEFT JOIN	dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) LCurrent ON LCurrent.idfsLocation = tCurrentLocation.idfsLocation
	-- Get registration location 
	 LEFT JOIN	dbo.tlbGeoLocation tRegistratedLocation ON HC.idfRegistrationAddress = tRegistratedLocation.idfGeoLocation
 	 LEFT JOIN	dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) LRegistration ON LRegistration.idfsLocation = tRegistratedLocation.idfsLocation
	-- Get Employer ADDRESS 
	 LEFT JOIN	dbo.tlbGeoLocation tEmployerLocation ON HC.idfEmployerAddress = tEmployerLocation.idfGeoLocation
 	 LEFT JOIN	dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) LEmployer ON LEmployer.idfsLocation = tEmployerLocation.idfsLocation
	-- Get sent by office name
	 --LEFT JOIN  dbo.FN_GBL_InstitutionRepair(@LangID) AS SendByOffice ON SendByOffice.idfOffice = HC.idfSentByOffice
	 LEFT JOIN dbo.tlbOffice SBO ON SBO.idfOffice = hc.idfSentByOffice
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) SentByOfficeRef ON SentByOfficeRef.idfsReference = SBO.idfsOfficeAbbreviation
	-- Get investigated by office name
	 --LEFT JOIN  dbo.FN_GBL_InstitutionRepair(@LangID) AS InvestigatedByOffice ON InvestigatedByOffice.idfOffice = HC.idfInvestigatedByOffice
	 LEFT JOIN dbo.tlbOffice IBO ON IBO.idfOffice = hc.idfInvestigatedByOffice
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) InvestigatedByOfficeRef ON InvestigatedByOfficeRef.idfsReference = IBO.idfsOfficeAbbreviation
	-- Get investigated by office name
	 LEFT JOIN  dbo.FN_GBL_InstitutionRepair(@LangID) AS SoughtCareFacility ON SoughtCareFacility.idfOffice = HC.idfSoughtCareFacility
	-- Get investigated by office name
	 LEFT JOIN  dbo.FN_GBL_InstitutionRepair(@LangID) AS CurrentLocationOffice ON CurrentLocationOffice.idfOffice = HC.idfHospital
	-- Get Case status
	 LEFT JOIN  dbo.FN_GBL_Reference_GETList(@LangID, 19000111) AS rfCaseStatus ON rfCaseStatus.idfsReference = HC.idfsCaseProgressStatus
	-- Get Case classification
	 --LEFT JOIN  dbo.FN_GBL_Reference_GETList(@LangID, 19000111) AS rfInitialCaseStatus ON rfInitialCaseStatus.idfsReference = HC.idfsInitialCaseStatus
	 LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000011) AS rfInitialCaseStatus ON rfInitialCaseStatus.idfsReference = hc.idfsInitialCaseStatus
	-- Get Nationality
	 LEFT JOIN	dbo.FN_GBL_Reference_GETList(@LangID, 19000054) AS rfNationality ON rfNationality.idfsReference = HC.idfsNationality
	-- Get HospitalizationStatus
	 LEFT JOIN	dbo.FN_GBL_Reference_GETList(@LangID, 19000041) AS rfHospitalizationStatus ON rfHospitalizationStatus.idfsReference = HC.idfsHospitalizationStatus
	-- Get OcupationType
	 LEFT JOIN	dbo.FN_GBL_Reference_GETList(@LangID, 19000061) AS rfOccupationType ON rfOccupationType.idfsReference = HC.idfsOccupationType
	-- Get is Hospitalisation
	 LEFT JOIN	dbo.FN_GBL_Reference_GETList(@LangID, 19000100) AS rfHospitalisationYN ON rfHospitalisationYN.idfsReference = HC.idfsYNHospitalization
	-- Get is SpecimenCollected
	 LEFT JOIN	dbo.FN_GBL_Reference_GETList(@LangID, 19000100) AS rfSpecimenCollectedYN ON rfSpecimenCollectedYN.idfsReference=HC.idfsYNSpecimenCollected
	-- Get is AntimicrobialTherapy
	 LEFT JOIN	dbo.FN_GBL_Reference_GETList(@LangID, 19000100) AS rfTherapyYN ON rfTherapyYN.idfsReference=HC.idfsYNAntimicrobialTherapy
	-- Get is RelatedToOutbreak
	 LEFT JOIN	dbo.FN_GBL_Reference_GETList(@LangID, 19000100) AS rfRelatedToOutbreakYN ON rfRelatedToOutbreakYN.idfsReference=HC.idfsYNRelatedToOutbreak
	-- Get is Outcome
	 LEFT JOIN	dbo.FN_GBL_Reference_GETList(@LangID, 19000064) AS rfOutcome ON rfOutcome.idfsReference=HC.idfsOutcome
	-- Get Outbreak
	 LEFT JOIN	dbo.tlbOutbreak AS tOutbreak ON tOutbreak.idfOutbreak = HC.idfOutbreak
	 LEFT JOIN	dbo.tlbHumanCase AS tHumanCase ON tHumanCase.idfHumanCase = @ObjID
	
	-- Filter condition
		WHERE	@ObjID = HC.idfCase 
		OR @ObjID IS NULL
GO
PRINT N'Altering Procedure [Report].[USP_REP_HumCaseFormContacts_GET]...';


GO
--##SUMMARY Select Contacts data for Human report.
--##REMARKS Author: Srini Goli.
--##REMARKS Create date: 03/22/2022
--Srini Goli 10/20/2022 Updated to get Relation_Type 


--##RETURNS Doesn't use

/*
--Example of a call of procedure:

exec report.USP_REP_HumCaseFormContacts_GET @LangID=N'en-US',@ObjID=90723


*/

ALTER  Procedure [Report].[USP_REP_HumCaseFormContacts_GET]
    (
        @LangID as nvarchar(10),
        @ObjID	as bigint
    )
as
begin
	
	select 
	dbo.fnConcatFullName(tHuman.strLastName, 
							tHuman.strFirstName, 
							tHuman.strSecondName) as ContactName,
	rfContactType.[name]			as Relation_Type,
	datDateOfLastContact			as ContactDate,
	tContacted.strPlaceInfo			as PlaceOfContact,
	(
		IsNull(dbo.FN_GBL_AddressString(@LangID, tHuman.idfCurrentResidenceAddress) + ', ', '') + 
		IsNull(tHuman.strHomePhone, '')
	)								as ContactInformation,
	dbo.FN_GBL_AddressStringDenyRigths(@LangID, tHuman.idfCurrentResidenceAddress, 1)		
									as ContactInformationDenyRightsSettlement,
	dbo.FN_GBL_AddressStringDenyRigths(@LangID, tHuman.idfCurrentResidenceAddress, 0)		
									as ContactInformationDenyRightsDetailed		,
	tContacted.strComments			as Comments

	from		dbo.tlbContactedCasePerson	as tContacted
	 inner join	dbo.tlbHuman				as tHuman
			on	tHuman.idfHuman	= tContacted.idfHuman
				AND tHuman.intRowStatus = 0
	 LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000014) AS rfContactType ON rfContactType.idfsReference = tContacted.idfsPersonContactType
	 --left join	dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000014 /*rftPartyRelationType */) as rfContactType
		--	on	rfContactType.idfsReference = tContacted.idfsPersonContactType
		 where	tContacted.idfHumanCase = @ObjID

end
GO
PRINT N'Altering Procedure [Report].[USP_REP_HumNotificationForm_GET]...';


GO
-- ================================================================================================
-- Name: USP_REP_Lim_Sample_GET
--
-- Description:	Select data for Container details report.
--                      
-- Revision History:
-- Name             Date		Change Detail
-- Srini Goli		10/20/2022	Changed Facility Names to Match Application 
-- ---------------- ---------- -------------------------------------------------------------------
-- 

/*
--Example of a call of procedure:

exec report.[USP_REP_HumNotificationForm_GET] 'en-US', 90723

exec report.[USP_REP_HumNotificationForm_GET] 'en-US', 90724

*/


ALTER  Procedure [Report].[USP_REP_HumNotificationForm_GET]
	(
		@LangID as nvarchar(10),
		@ObjID	as bigint
	)
AS	
	select 
		idfCase,
		rfHumanCase.strLocalIdentifier				as FieldCaseID,
		rfHumanCase.datCompletionPaperFormDate		as DateOfCompletionForm,
		rfHumanCase.strCaseID						as CaseIdentifier,
		rfHumanCase.strTentetiveDiagnosis			as Diagnosis,
		rfHumanCase.datTentativeDiagnosisDate		as DateOfDiagnosis,
		rfHumanCase.strPatientFullName				as NameOfPatient,
		rfHumanCase.datDateofBirth					as DOB,
		rfHumanCase.strPersonID						as strPersonID,
		rfHumanCase.strPersonIDType					as strPersonIDType,
		rfHumanCase.strPatientAgeType				as AgeType,
		rfHumanCase.intPatientAge					as Age,
		rfHumanCase.strPatientGender				as Sex,
		rfCurrentRegion.[name]						as Region,
		rfCurrentRayon.[name]						as Rayon,	
		rfCurrentSettlement.[name]					as City,
		tCurrentLocation.strPostCode				as PostalCode,
		tCurrentLocation.strStreetName				as Street,
		rfHumanCase.strHomePhone					as PhoneNumber,
		rfHumanCase.strEmployerName					as NameOfEmployer,
		rfHumanCase.datFacilityLastVisit			as DateofLastVisitToEmployer,
		tCurrentLocation.strBuilding				as BuildingNum,
		tCurrentLocation.strHouse					as HouseNum,
		tCurrentLocation.strApartment				as AptNum,
		rfNationality.[name]						as Nationality,
		dbo.FN_GBL_AddressString(@LangID, rfHumanCase.idfEmployerAddress) AS AddressOfEmployerOrChildrenFacility ,
			---- Employer Address---
		rfEmployerRegion.[name]						as EmpRegion,
		rfEmployerRayon.[name]						as EmpRayon,
		rfEmployerSettlement.[name]					as EmpVillage,
		tEmployerLocation.strStreetName				as EmpStreet,
		rfHumanCase.strWorkPhone					as EmpPhone,
		tEmployerLocation.strPostCode				as EmpPostalCode,
		tEmployerLocation.strBuilding				as EmpBuild,
		tEmployerLocation.strHouse					as EmpHouse,
		tEmployerLocation.strApartment				as EmpApp,
	
		rfHumanCase.datOnSetDate					as DateofSymptomsOnset,
		rfHumanCase.strFinalState					as SatusOfThePatient,
		rfHumanCase.strFinalDiagnosis				as ChangedDiagnosis,
		rfHumanCase.datFinalDiagnosisDate			as DateOfChangedDiagnosis,
		rfHumanCase.idfsHospitalizationStatus		as HomeHospitalOther,
		--CASE WHEN rfHumanCase.idfsHospitalizationStatus = 5360000000 THEN HospitalRef.LongName --Hospital
		--	 WHEN rfHumanCase.idfsHospitalizationStatus = 5360000000 THEN rfHumanCase.strCurrentLocation --Other
		--	 ELSE N'' END							as HospitalName,
		HospitalRef.LongName						as HospitalName,
		rfHumanCase.strNote							as Comments,
		rfHumanCase.datNotificationDate				as NotificationDate,
		rfHumanCase.datNotificationDate				as NotificationTime,
		rfHumanCase.strSentByFullName				as SentByName,
		--rfSendByOffice.[name]						as SentbyFacility,
		rfHumanCase.strReceivedByFullName			as ReceivedbyName,
		--rfReceivedByOffice.[name]					as ReceivedFacility
		SentByOfficeRef.LongName					as SentbyFacility,
		ReceivedByOfficeRef.LongName				as ReceivedFacility
	from		dbo.FN_REP_HumanCaseProperties_GET(@LangID) as rfHumanCase
	-- Get HOME ADDRESS 
	 left join	dbo.tlbGeoLocation tCurrentLocation
			on	rfHumanCase.idfCurrentResidenceAddress = tCurrentLocation.idfGeoLocation
 	 left join	dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001 /*'rftCountry'*/) rfCurrentCountry 
			on	rfCurrentCountry.idfsReference = tCurrentLocation.idfsCountry
	 left join	dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003 /*'rftRegion'*/)  rfCurrentRegion 
			on	rfCurrentRegion.idfsReference = tCurrentLocation.idfsRegion
	 left join	dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000002 /*'rftRayon'*/)   rfCurrentRayon 
			on	rfCurrentRayon.idfsReference = tCurrentLocation.idfsRayon
	 left join	dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000004 /*'rftSettlement'*/) rfCurrentSettlement
			on	rfCurrentSettlement.idfsReference = tCurrentLocation.idfsSettlement
	 left join	dbo.FN_GBL_ReferenceRepair_GET(@LangID, 19000054 /*'rftNationality'*/) as rfNationality
			on	rfNationality.idfsReference=rfHumanCase.idfsNationality
	 left join	dbo.tlbGeoLocation tEmployerLocation
			on	rfHumanCase.idfEmployerAddress = tEmployerLocation.idfGeoLocation
 	 left join	dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001 /*'rftCountry'*/) rfEmployerCountry 
			on	rfEmployerCountry.idfsReference = tEmployerLocation.idfsCountry
	 left join	dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003 /*'rftRegion'*/)  rfEmployerRegion 
			on	rfEmployerRegion.idfsReference = tEmployerLocation.idfsRegion
	 left join	dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000002 /*'rftRayon'*/)   rfEmployerRayon 
			on	rfEmployerRayon.idfsReference = tEmployerLocation.idfsRayon
	 left join	dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000004 /*'rftSettlement'*/) rfEmployerSettlement
			on	rfEmployerSettlement.idfsReference = tEmployerLocation.idfsSettlement
	-- Get office name
	left join dbo.tlbOffice SBO ON SBO.idfOffice = rfHumanCase.idfSentByOffice
		left join dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) SentByOfficeRef ON SentByOfficeRef.idfsReference = SBO.idfsOfficeAbbreviation
	left join dbo.tlbOffice RBO ON RBO.idfOffice = rfHumanCase.idfReceivedByOffice
		left join dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) ReceivedByOfficeRef ON ReceivedByOfficeRef.idfsReference = RBO.idfsOfficeAbbreviation
	left join dbo.tlbOffice Hospital on Hospital.idfOffice = rfHumanCase.idfHospital
		left join dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) HospitalRef ON HospitalRef.idfsReference = Hospital.idfsOfficeAbbreviation
	-- Filter condition
	where	@ObjID = idfCase
GO
PRINT N'Altering Procedure [Report].[USP_REP_VET_ActiveSurveillance]...';


GO
-- ================================================================================================
-- Name: USP_REP_VET_ActiveSurveillance
--
-- Description: Generate dataset for the Active Surveillance Report.
--          
-- Revision History:
-- Name             Date       Change Detail
-- Mark Wilson		10/25/2021 Original code to revert back to multi disease
-- Mark Wilson		08/09/2022 updated to return # Samples as Sampled #
-- Mark Wilson		10/07/2022 updated to return # Samples root
-- Mani Govindarajan 10/17/2022 Added distct in the DetailCount 
/*
--Example of a call of procedure:

exec report.USP_REP_VET_ActiveSurveillance  'en-US', '2021'

*/

ALTER  PROCEDURE [Report].[USP_REP_VET_ActiveSurveillance]
(
	@LangID NVARCHAR(10),
    @Year INT,
    @UseArchiveData	AS BIT = 0 --if User selected Use Archive Data then 1
)
AS
BEGIN
	IF OBJECT_ID('tempdb.dbo.#ReportTable') IS NOT NULL
	DROP TABLE #ReportTable
	
	CREATE TABLE #ReportTable	
	(	
		idfReportRow	BIGINT IDENTITY(1, 1) NOT NULL PRIMARY KEY,
		idfsDiagnosis	BIGINT NOT NULL,
		strDiagnosis	NVARCHAR(2000) COLLATE database_default NULL,
		idfsSpeciesType	BIGINT NOT NULL,
		strSpeciesType	NVARCHAR(2000) COLLATE database_default NULL,
		intPlanned		BIGINT NULL,
		intSampled		BIGINT NULL
	)

	IF ((ISNULL(@Year, 0) >= 1900) AND (ISNULL(@Year, 0) <= YEAR(GETDATE()) + 1))
	BEGIN

		DECLARE @Campaigns	TABLE
		(	
			idfCampaign BIGINT NOT NULL PRIMARY KEY
		)
		
		DECLARE	@Sessions TABLE
		(	
			idfMonitoringSession BIGINT NOT NULL PRIMARY KEY
		)
		
		declare	@SampledValuesFromSummary	table
		(	
			idfReportRow BIGINT NOT NULL PRIMARY KEY,
			idfsDisease	BIGINT,
			idfsSpecies BIGINT,
			intSampled BIGINT NOT NULL
		)
		
		DECLARE @SampledValuesFromDetail TABLE
		(	
			idfReportRow BIGINT NOT NULL PRIMARY KEY,
			idfsDisease	BIGINT,
			idfsSpecies BIGINT,
			intSampled BIGINT NOT NULL
		)

		INSERT INTO @Campaigns	
		(
			idfCampaign
		)
		SELECT
			c.idfCampaign
		FROM dbo.tlbCampaign c
		WHERE ((c.datCampaignDateStart IS NOT NULL AND c.datCampaignDateEnd IS NOT NULL AND YEAR(dateadd(ss, datediff(ss, c.datCampaignDateStart, c.datCampaignDateEnd) / 2, c.datCampaignDateStart)) = @Year)
						OR (c.datCampaignDateStart IS NOT NULL AND c.datCampaignDateEnd IS NULL AND YEAR(c.datCampaignDateStart) = @Year)
						OR (c.datCampaignDateStart IS NULL AND c.datCampaignDateEnd IS NOT NULL AND YEAR(c.datCampaignDateEnd) = @Year))
		AND c.intRowStatus = 0
		AND c.CampaignCategoryID in (10501002)


		INSERT INTO	@Sessions	(idfMonitoringSession)
		SELECT
			ms.idfMonitoringSession
		FROM dbo.tlbMonitoringSession ms
		INNER JOIN dbo.tlbCampaign c ON c.idfCampaign = ms.idfCampaign AND c.intRowStatus = 0
		INNER JOIN @Campaigns c_selected ON c_selected.idfCampaign = ms.idfCampaign
		WHERE ms.intRowStatus = 0
		AND ms.SessionCategoryID in (10502002,10502009)


		INSERT INTO	@Sessions (idfMonitoringSession)
		SELECT
			ms.idfMonitoringSession
		FROM dbo.tlbMonitoringSession ms
		LEFT JOIN dbo.tlbCampaign c ON c.idfCampaign = ms.idfCampaign AND c.intRowStatus = 0 AND c.CampaignCategoryID = 10501002
		WHERE ((ms.datStartDate IS NOT NULL AND	ms.datEndDate IS NOT NULL AND YEAR(DATEADD(ss, DATEDIFF(ss, ms.datStartDate, ms.datEndDate) / 2, ms.datStartDate)) = @Year)
						OR (ms.datStartDate IS NOT NULL AND	ms.datEndDate IS NULL AND YEAR(ms.datStartDate) = @Year)
						OR (ms.datStartDate IS NULL AND ms.datEndDate IS NOT NULL AND YEAR(ms.datEndDate) = @Year))
		AND ms.intRowStatus = 0
		AND c.idfCampaign IS NULL
        AND ms.SessionCategoryID in (10502002,10502009)

		insert into	#ReportTable
		(	
			idfsDiagnosis,
			strDiagnosis,
			idfsSpeciesType,
			strSpeciesType,
			intPlanned
		)
		SELECT
			cd.idfsDiagnosis,
			ISNULL(d.[name], N''),
			st.idfsReference,
			ISNULL(st.[name], N''),
			SUM(ISNULL(cd.intPlannedNumber, 0))

		FROM dbo.tlbCampaignToDiagnosis cd
		INNER JOIN dbo.tlbCampaign c ON c.idfCampaign = cd.idfCampaign AND c.intRowStatus = 0
		INNER JOIN @Campaigns c_selected ON c_selected.idfCampaign = c.idfCampaign
		INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) d ON d.idfsReference = cd.idfsDiagnosis
		INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000086) st ON st.idfsReference = cd.idfsSpeciesType
		WHERE cd.intRowStatus = 0
		GROUP BY
			cd.idfsDiagnosis,
			ISNULL(d.[name], N''),
			st.idfsReference,
			ISNULL(st.[name], N'')

		UPDATE rt
		SET rt.intPlanned = NULL
        FROM #ReportTable rt
		left join (	dbo.tlbCampaignToDiagnosis cd
					INNER JOIN dbo.tlbCampaign c ON c.idfCampaign = cd.idfCampaign AND c.intRowStatus = 0
					INNER JOIN @Campaigns c_selected ON c_selected.idfCampaign = c.idfCampaign
					INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) d ON d.idfsReference = cd.idfsDiagnosis
					INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000086) st ON st.idfsReference = cd.idfsSpeciesType
					) ON cd.idfsDiagnosis = rt.idfsDiagnosis
					and ISNULL(st.idfsReference, 0) = ISNULL(rt.idfsSpeciesType, 0)
					and cd.intRowStatus = 0
					and cd.intPlannedNumber IS NOT NULL
		WHERE cd.idfCampaignToDiagnosis IS NULL


		INSERT INTO #ReportTable
		(	
			idfsDiagnosis,
			strDiagnosis,
			idfsSpeciesType,
			strSpeciesType,
			intPlanned,
			intSampled
		)
		SELECT 
			DISTINCT msd.idfsDiagnosis,
			ISNULL(d.[name], N''),
			st.idfsReference,
			ISNULL(st.[name], N''),
			NULL,
			NULL

		FROM dbo.tlbMonitoringSessionToDiagnosis msd
		INNER JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = msd.idfMonitoringSession AND ms.intRowStatus = 0
		INNER JOIN @Sessions s_selected ON s_selected.idfMonitoringSession = ms.idfMonitoringSession
		INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) d ON d.idfsReference = msd.idfsDiagnosis
		INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000086) st ON st.idfsReference = msd.idfsSpeciesType
		LEFT JOIN #ReportTable rt ON rt.idfsDiagnosis = msd.idfsDiagnosis AND ISNULL(rt.idfsSpeciesType, 0) = ISNULL(st.idfsReference, 0)
		WHERE msd.intRowStatus = 0
		AND rt.idfReportRow is null

		-- aggregate numbers
		INSERT INTO @SampledValuesFromSummary
		(	
			idfReportRow,
			idfsDisease,
			idfsSpecies,
			intSampled
			
		)
		SELECT	
			rt.idfReportRow,
			rt.idfsDiagnosis,
			rt.idfsSpeciesType,
			SUM(ISNULL(mss.intSamplesQty, 0))

		FROM dbo.tlbMonitoringSessionToDiagnosis msd
		INNER JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = msd.idfMonitoringSession AND ms.intRowStatus = 0
		INNER JOIN @Sessions s_selected ON s_selected.idfMonitoringSession = ms.idfMonitoringSession
		INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) d ON d.idfsReference = msd.idfsDiagnosis
		INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000086) st	ON st.idfsReference = msd.idfsSpeciesType
		INNER JOIN #ReportTable rt ON rt.idfsDiagnosis = msd.idfsDiagnosis AND ISNULL(rt.idfsSpeciesType, 0) = ISNULL(st.idfsReference, 0)
		INNER JOIN dbo.tlbMonitoringSessionSummary mss
				INNER JOIN dbo.tlbSpecies s ON s.idfSpecies = ISNULL(mss.idfSpecies, 0) AND s.intRowStatus = 0
				INNER JOIN dbo.tlbHerd h ON h.idfHerd = s.idfHerd AND h.idfFarm = mss.idfFarm AND h.intRowStatus = 0
				INNER JOIN dbo.tlbFarm f ON f.idfFarm = h.idfFarm AND f.intRowStatus = 0
				ON mss.idfMonitoringSession = ms.idfMonitoringSession AND s.idfsSpeciesType = ISNULL(rt.idfsSpeciesType, 0)
				AND mss.intRowStatus = 0 AND mss.intSampledAnimalsQty IS NOT NULL
		WHERE msd.intRowStatus = 0
		GROUP BY rt.idfReportRow,rt.idfsDiagnosis,rt.idfsSpeciesType

		INSERT INTO	@SampledValuesFromDetail
		(	
			idfReportRow,
			idfsDisease,
			idfsSpecies,
			intSampled
		)
		SELECT
			rt.idfReportRow,
			rt.idfsDiagnosis,
			rt.idfsSpeciesType,
			COUNT(distinct M.idfMaterial)

		FROM dbo.tlbMonitoringSessionToDiagnosis msd
		INNER JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = msd.idfMonitoringSession AND ms.intRowStatus = 0
		INNER JOIN @Sessions s_selected ON s_selected.idfMonitoringSession = ms.idfMonitoringSession
		INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) d ON d.idfsReference = msd.idfsDiagnosis
		INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000086) st ON st.idfsReference = msd.idfsSpeciesType
		INNER JOIN #ReportTable rt ON rt.idfsDiagnosis = msd.idfsDiagnosis AND rt.idfsSpeciesType = st.idfsReference
		INNER JOIN dbo.tlbMaterial M ON M.idfMonitoringSession = ms.idfMonitoringSession AND M.idfParentMaterial IS NULL AND M.intRowStatus = 0 AND M.idfsSampleType = msd.idfsSampleType
		INNER JOIN dbo.tlbSpecies S ON S.idfSpecies = M.idfSpecies AND S.idfsSpeciesType = RT.idfsSpeciesType AND S.intRowStatus = 0
		
		WHERE msd.intRowStatus = 0
		
		GROUP BY rt.idfReportRow, rt.idfsDiagnosis, rt.idfsSpeciesType

		UPDATE rt
		SET rt.intSampled = sv_s.intSampled
		FROM #ReportTable rt
		INNER JOIN @SampledValuesFromSummary sv_s ON sv_s.idfReportRow = rt.idfReportRow


		UPDATE rt
		SET rt.intSampled = rt.intSampled + sv_d.intSampled
		FROM #ReportTable rt
		INNER JOIN @SampledValuesFromDetail sv_d ON sv_d.idfReportRow = rt.idfReportRow
		WHERE rt.intSampled IS NOT NULL


		UPDATE rt
		SET rt.intSampled = sv_d.intSampled
		FROM #ReportTable rt
		INNER JOIN @SampledValuesFromDetail sv_d ON sv_d.idfReportRow = rt.idfReportRow
		WHERE rt.intSampled IS NULL

	END


	SELECT
		idfsDiagnosis,
		strDiagnosis,
		idfsSpeciesType,
		strSpeciesType,
		ISNULL(intPlanned,0) intPlanned,
		ISNULL(intSampled,0) intSampled

	FROM #ReportTable

	ORDER BY
		strDiagnosis,
		idfsDiagnosis,
		strSpeciesType,
		idfsSpeciesType
				
END
GO
PRINT N'Altering Procedure [Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail
-- Description: PrintedForm Veterinary Aggregate Report
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Srini Goli		08/10/2022	Initial release for Veterinary Aggregate Report.
-- Srini Goli		10/07/2022  used Sql Veriant data type.
-- Srini Goli		10/12/2022  Without Templete also have to display Report.
-- Mike Kornegay	10/17/2022	Remove temp table (not compatible with EF Power Tools) and correct final query
-- Mark Wilson		10/18/2022	updated to concatenate string fields
-- Mike Kornegay	10/18/2022	Change numRow field in final query to intNumRow

/*

EXEC    [Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail]
        @LangID = N'en-US',
        @idfsAggrCaseType = 10102002,
        @idfAggrCaseList = N'155564770002071;155564770002070'

*/
-- ================================================================================================
ALTER PROCEDURE [Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail] (
	@LangID AS NVARCHAR(50)
	,@idfsAggrCaseType AS  BIGINT= NULL
	,@idfAggrCaseList AS  NVARCHAR(MAX)= NULL
	)
AS
BEGIN
	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

	DECLARE @AggrCaseTable TABLE (
		[idfAggrCase] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpMatrix AS TABLE (
		intNumRow INT
		,idfAggrVetCaseMTX BIGINT
		,idfsDiagnosis BIGINT
		,idfsSpeciesType BIGINT
		,strDefault NVARCHAR(2000)
		,strOIECode NVARCHAR(100)
		)

   DECLARE @tempFlexForm TABLE (
		idfsParentSection BIGINT
		,idfsSection BIGINT
		,idfsParameter BIGINT
		,SectionName NVARCHAR(2000)
		,ParameterName NVARCHAR(500)
		,parameterType NVARCHAR(100)
		,idfsParameterType BIGINT
		,idfsReferenceType BIGINT
		,idfsEditor BIGINT
		,SectionOrder INT
		,ParameterOrder INT
		,blnGrid BIT
		,blnFixedRowSet BIT
		,idfsEditMode BIGINT
		,idfsFormTemplate BIGINT
		)

	DECLARE @observationsTable TABLE (
		[idfObservation] BIGINT,
		[idfVersion] BIGINT,
		[idfsCaseFormTemplate] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpActivityParameters TABLE (
		[idfActivityParameters] BIGINT,
		[idfObservation] BIGINT,
		[idfsFormTemplate] BIGINT,
		[idfsParameter] BIGINT,
		[idfsSection] BIGINT,
		[idfRow] BIGINT,
		[Type] BIGINT,
		intValue INT,
		[varValue] sql_variant, --NVARCHAR(MAX),
		[numRow] INT,
		[ParameterType]  BIGINT
		)

	DECLARE @tmpSpeciesList TABLE (
		[idfBaseReference] BIGINT,
		strDefault NVARCHAR(2000),
		strSpecies NVARCHAR(100),
		[intRowNumber] INT
		--idfsReferenceType BIGINT
		)
	
	DECLARE @tmpDetails TABLE (
		idfCaseObservation BIGINT,
		idfsCaseFormTemplate BIGINT,
		idfVersion BIGINT
	)

	DECLARE @FinalReportTable TABLE 
	(
		ParameterName NVARCHAR(300),
		strSpecies NVARCHAR(300),
		idfsParameter BIGINT,
		ParameterOrder INT,
		idfsDiagnosis BIGINT,
		strDefault NVARCHAR(300),
		strOIECode NVARCHAR(300),
		numRow INT,
		intValue INT,
		varValue SQL_VARIANT
	)

	BEGIN TRY
			BEGIN

			--Get Selected Agg Cases
			INSERT INTO @AggrCaseTable (
					[idfAggrCase],
					[intRowNumber]
					)
				SELECT CAST([Value] AS BIGINT),
					ROW_NUMBER() OVER (
						ORDER BY [Value]
						)
				FROM [dbo].[FN_GBL_SYS_SplitList](@idfAggrCaseList, NULL, NULL)

				--Get this SQl from [dbo].[USP_AGG_CASE_GETDETAIL]
				INSERT INTO @tmpDetails
				SELECT 
					a.idfCaseObservation
					,CaseObs.idfsFormTemplate AS idfsCaseFormTemplate
					,a.idfVersion
				--INTO #tmpDetails
				FROM dbo.tlbAggrCase a	
				LEFT JOIN dbo.tlbObservation CaseObs ON idfCaseObservation = CaseObs.idfObservation
				WHERE a.intRowStatus = 0
				AND a.idfAggrCase IN (SELECT idfAggrCase FROM @AggrCaseTable)
				
				DECLARE @idfsFormTemplate BIGINT,
						@idfVersion BIGINT

				INSERT INTO @observationsTable (
					[idfObservation],
					[idfVersion],
					[idfsCaseFormTemplate],
					[intRowNumber]
					)
				SELECT [idfCaseObservation],
					[idfVersion],
					[idfsCaseFormTemplate],
					ROW_NUMBER() OVER (
						ORDER BY [idfCaseObservation]
						)
				FROM @tmpDetails

				SELECT @idfsFormTemplate=idfsCaseFormTemplate, 
						@idfVersion= idfVersion
				FROM @observationsTable
				--SELECT * FROM @observationsTable

				--Get this SQL from USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GET -- dbo.USP_CONF_ADMIN_AggregateHumanCaseMatrixReport_GET
				INSERT INTO @tmpMatrix
				SELECT	 
					mtx.intNumRow as intNumRow,
					mtx.idfAggrVetCaseMTX,
					mtx.idfsDiagnosis,
					mtx.idfsSpeciesType,
					D.name AS strDefault,
					D.strOIECode

				FROM dbo.tlbAggrVetCaseMTX mtx
				INNER JOIN dbo.FN_GBL_DiagnosisRepair(@LangID, 96, 10020002) D ON D.idfsDiagnosis = mtx.idfsDiagnosis  -- 2 = Human, use 10020002 for Aggregate cases

				WHERE mtx.intRowStatus = 0 AND  mtx.idfVersion = @idfVersion
				--ORDER BY mtx.intNumRow ASC

				--SpicesList
				INSERT INTO @tmpSpeciesList
				EXEC dbo.USP_CONF_GetSpeciesList_GET 
						@idfsBaseReference= 19000086,
						@intHACode=96,
						@strLanguageID=@LangID --@idfVersion=19000086
				
				--Get Flex Form header details
				IF @idfsFormTemplate IS NOT NULL 
				BEGIN
					INSERT INTO @tempFlexForm
					EXEC [dbo].[USP_ADMIN_FF_FlexForm_Get] 
							@LangID =@LangID, 
							@idfsDiagnosis= NULL, 
							@idfsFormType = 10034012, 
							@idfsFormTemplate=@idfsFormTemplate
				END 
				--Get numeric values Activity Parameters
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[intValue],
						[Type],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					SUM(CAST(AP.varValue AS INT)),
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfObservation FROM @observationsTable)
				AND ISNUMERIC(CAST(ap.varValue AS NVARCHAR)) = 1
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0

				GROUP BY
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					P.idfsParameterType
				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow

				--Get non-numeric values
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[varValue],
						[Type],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					AP.varValue,
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfObservation FROM @observationsTable)
				AND ISNUMERIC(CAST(ap.varValue AS NVARCHAR)) = 0
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0

				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow

				--Report
					
				INSERT INTO @FinalReportTable
				(
				    ParameterName,
				    strSpecies,
				    idfsParameter,
				    ParameterOrder,
				    idfsDiagnosis,
				    strDefault,
				    strOIECode,
				    numRow,
				    intValue
				)

				SELECT	
					ff.ParameterName
					,sl.strSpecies
					,ff.idfsParameter
					,ff.ParameterOrder
					,m.idfsDiagnosis
					,m.strDefault
					,m.strOIECode
					,m.intNumRow
					,SUM(intValue)
					--,ap.varValue AS varValue--ap.idfRow,m.idfAggrHumanCaseMTX as idfRow
				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter AND m.idfAggrVetCaseMTX=ap.idfRow
				LEFT JOIN @tmpSpeciesList sl ON sl.idfBaseReference=m.idfsSpeciesType
				GROUP BY 
					ff.ParameterName,
					sl.strSpecies,
					ff.idfsParameter,
					ff.ParameterOrder,
					m.idfsDiagnosis,
					m.strDefault,
					m.strOIECode,
					m.intNumRow
				ORDER BY intNumRow


				INSERT INTO @FinalReportTable
				(
				    ParameterName,
				    strSpecies,
				    idfsParameter,
				    ParameterOrder,
				    idfsDiagnosis,
				    strDefault,
				    strOIECode,
				    numRow,
				    varValue
				)

				SELECT	
					ff.ParameterName
					,sl.strSpecies
					,ff.idfsParameter
					,ff.ParameterOrder
					,m.idfsDiagnosis
					,m.strDefault
					,m.strOIECode
					,m.intNumRow
					,ap.varValue
				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter AND m.idfAggrVetCaseMTX=ap.idfRow
				LEFT JOIN @tmpSpeciesList sl ON sl.idfBaseReference=m.idfsSpeciesType
				WHERE ap.varValue IS NOT NULL

				ORDER BY intNumRow

				SELECT 
				
					ParameterName,
					strSpecies,
					idfsParameter,
					ParameterOrder,
					idfsDiagnosis,
					strDefault,
					strOIECode,
					numRow AS intNumRow,
					CAST(intValue AS NVARCHAR(300)) AS varValue
					
				FROM @FinalReportTable
				WHERE varValue IS NULL

				UNION ALL 

				SELECT
					DISTINCT t.ParameterName,
					t.strSpecies,
					t.idfsParameter,
					t.ParameterOrder,
					t.idfsDiagnosis,
					t.strDefault,
					t.strOIECode,
					t.numRow AS intNumRow,
					STUFF((SELECT distinct ', ' + CAST(t1.varValue AS NVARCHAR(300))
						 FROM @FinalReportTable t1
						 WHERE t.ParameterName = t1.ParameterName
						 AND t.strSpecies = t1.strSpecies
						 AND t.idfsParameter = t1.idfsParameter
						 AND t.ParameterOrder = t1.ParameterOrder
						 AND t.idfsDiagnosis = t1.idfsDiagnosis
						 AND t.strDefault = t1.strDefault
						 AND t.strOIECode = t1.strOIECode
						 FOR XML PATH(''), TYPE
							).value('.', 'NVARCHAR(MAX)') 
						,1,2,'') varValue
				from @FinalReportTable t
				WHERE t.varValue IS NOT NULL;				

			END

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT = 1
			ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [Report].[USP_VET_ASSession_Summary_GET]...';


GO
-- ============================================================================
-- Name: report.USP_VET_ASSession_Summary_GET
-- Description:	Get Summary information for Session.
--                      
-- Author: Mark Wilson
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -----------------------------------------------
-- Mark Wilson		07/14/2022 Initial release
-- Mike Kornegay	09/28/2022 Changed HA code for strDiagnosis from 32 (livestock) to 96 (livestock and avian)
--							   and removed blnChecked = 1 from where on diagnosis concat.
--
/*

--Example of a call of procedure:

EXEC report.USP_VET_ASSession_Summary_GET 155415660001456,'en-US'

*/
ALTER  PROCEDURE [Report].[USP_VET_ASSession_Summary_GET]
(
	@idfCase BIGINT,
	@LangID NVARCHAR(20)
)
AS

BEGIN

	DECLARE 
		@intTotalSamples INT,
		@intTotalPositive INT,
		@intTotalAnimalsSampled INT

	SELECT
		@intTotalSamples = SUM(MSS.intSamplesQty),
		@intTotalPositive = SUM(MSS.intPositiveAnimalsQty),
		@intTotalAnimalsSampled = SUM(MSS.intSampledAnimalsQty)
	
	FROM dbo.tlbMonitoringSessionSummary MSS
	WHERE MSS.intRowStatus = 0
	AND MSS.idfMonitoringSession = @idfCase		

	SELECT   
		MSS.idfMonitoringSessionSummary AS idfsKey,
		F.strFarmCode AS strFarmCode,
		F.idfFarm AS idfFarm,
		dbo.FN_GBL_ConcatFullName(H.strLastName, H.strFirstName, H.strSecondName) AS strOwnerName,
		dbo.FN_GBL_GeoLocationString(@LangID,F.idfFarmAddress,NULL) AS strFarmAddress,
		spt.[name] AS strSpecies,
		G.[name] AS strSex,
		MSS.intSampledAnimalsQty AS intAnimalSampled,
		STUFF((SELECT ', ' +  st.name AS [text()]		
				FROM dbo.tlbMonitoringSessionSummarySample ss
				INNER JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID, 19000087) st ON ss.idfsSampleType = st.idfsReference
				WHERE ss.idfMonitoringSessionSummary = MSS.idfMonitoringSessionSummary
				AND ss.blnChecked = 1
				FOR XML PATH ('')),1,2,'')	AS strSampleType,
		MSS.intSamplesQty AS intNumberOfSamples,
		MSS.datCollectionDate AS datCollectionDate,
		MSS.intPositiveAnimalsQty AS intPositiveNumber,
		STUFF((SELECT   ', ' + D.name AS [text()]
				FROM dbo.tlbMonitoringSessionSummaryDiagnosis MSD
				INNER JOIN dbo.FN_GBL_DiagnosisRepair(@LangID, 96, 10020001) D ON MSD.idfsDiagnosis = D.idfsDiagnosis
				WHERE MSD.idfMonitoringSessionSummary = MSS.idfMonitoringSessionSummary --AND MSD.blnChecked = 1
				FOR XML PATH ('')),1,2,'') AS strDiagnosis,
		@intTotalSamples AS intTotalSamples,
		@intTotalPositive AS intTotalPositive,
		@intTotalAnimalsSampled AS intTotalAnimalsSampled
			
	FROM dbo.tlbMonitoringSessionSummary MSS
	INNER JOIN
	(	
		dbo.tlbFarm F
		LEFT JOIN dbo.tlbHuman H ON F.idfHuman = H.idfHuman  AND H.intRowStatus = 0
	) ON F.idfFarm = MSS.idfFarm AND F.intRowStatus = 0
			
	INNER JOIN	
	(	
		dbo.tlbSpecies S
		INNER JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID,19000086) AS spt ON spt.idfsReference = S.idfsSpeciesType
	) ON S.idfSpecies  = MSS.idfSpecies AND S.intRowStatus = 0			
			
	LEFT JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID,19000007) AS G ON G.idfsReference = MSS.idfsAnimalSex

		
	WHERE MSS.intRowStatus = 0
	AND MSS.idfMonitoringSession = @idfCase			

END
GO
PRINT N'Altering Procedure [Report].[USP_VET_ASSessionCases_GET]...';


GO
--=================================================================================================
-- Name: report.USP_VET_ASSessionCases_GET
--
-- Description: Returns dataset for monitoring session details report
--
-- Author: Mark Wilson
--
-- Revision History:
-- Name				Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mark Wilson		07/14/2022 initial release
-- Mike Kornegay	10/20/2022 Corrected joins for disease, farm address, and farm location.
--
--=================================================================================================

/*
--Example of a call of procedure:
exec report.USP_VET_ASSessionCases_GET  155415660001312, 'en-US'
exec report.USP_VET_ASSessionCases_GET  155415660001386, 'en-US'
*/


ALTER PROCEDURE [Report].[USP_VET_ASSessionCases_GET]
(
	@idfCase BIGINT,
	@LangID NVARCHAR(20)
)
AS	

BEGIN

	DECLARE @intTotalCases int

	SELECT
		@intTotalCases = COUNT (VC.idfVetCase)
	FROM dbo.tlbVetCase VC
	WHERE VC.idfParentMonitoringSession = @idfCase
	AND VC.intRowStatus = 0		 

	SELECT  VC.idfVetCase				AS	idfsKey,
			VC.strCaseID				AS	strCaseID,
			ISNULL(VC.datInvestigationDate, ISNULL(
													(
														SELECT MAX(s1.dat) FROM 
														(
															SELECT 
																VC1.datTentativeDiagnosisDate AS dat
															FROM dbo.tlbVetCase AS VC1 
															WHERE VC1.idfVetCase = VC.idfVetCase
							
															UNION ALL
							
															SELECT 
																VC1.datTentativeDiagnosis1Date AS dat
															FROM dbo.tlbVetCase AS VC1 
															WHERE VC1.idfVetCase = VC.idfVetCase

															UNION ALL

															SELECT 
																VC1.datTentativeDiagnosis2Date AS dat
															FROM dbo.tlbVetCase AS VC1 
															WHERE VC1.idfVetCase = VC.idfVetCase
							
															UNION ALL
															SELECT 
																VC1.datFinalDiagnosisDate AS dat
															FROM dbo.tlbVetCase AS VC1 
															WHERE VC1.idfVetCase = VC.idfVetCase

													) s1),
				ISNULL(VC.datReportDate, VC.datEnteredDate))) AS datCaseDate,
			CaseStatus.name AS	strCaseClassification,
			ISNULL(finalDiagnosis.[name], VC.strDefaultDisplayDiagnosis) AS	strDiagnosis,
			(lh.AdminLevel1Name + ', ' + lh.AdminLevel2Name) AS strLocation,
			dbo.FN_GBL_CreateAddressString	(lh.AdminLevel1Name, lh.AdminLevel2Name, lh.AdminLevel3Name, '', '', lh.AdminLevel4Name, '', '', '', '',0,'') AS strAddress,
			--dbo.FN_GBL_GeoLocationString(@LangID,F.idfFarmAddress,NULL) AS	strLocation,
			--dbo.FN_GBL_AddressString(@LangID,F.idfFarmAddress)				AS	strAddress,
			@intTotalCases				AS  intTotalCases
	FROM dbo.tlbVetCase  VC
	--LEFT JOIN dbo.tlbVetCaseDisplayDiagnosis D ON VC.idfVetCase = D.idfVetCase AND D.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LangID)
	LEFT JOIN dbo.FN_GBL_Repair(@LangID, 19000019) finalDiagnosis ON finalDiagnosis.idfsReference = VC.idfsFinalDiagnosis
	LEFT JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID,19000011) AS CaseStatus ON VC.idfsCaseClassification = CaseStatus.idfsReference
	LEFT JOIN dbo.tlbFarm F ON	F.idfFarm  = VC.idfFarm AND	F.intRowStatus = 0
	LEFT JOIN dbo.tlbGeoLocation gl ON gl.idfGeoLocation = F.idfFarmAddress
	LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gl.idfsLocation
	LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lh ON lh.idfsLocation = g.idfsLocation

	WHERE VC.idfParentMonitoringSession = @idfCase
	AND VC.intRowStatus = 0		 

END
GO
PRINT N'Altering Procedure [Report].[USP_VET_ASSessionFarm_GET]...';


GO
-- ============================================================================
-- Name: report.USP_VET_ASSessionFarm_GET
-- Description:	Get list of farms, heards, species amd animals related with specific monitoring session for report.
--                      
-- Author: Mark Wilson
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -----------------------------------------------
-- Mark Wilson		07/14/2022 Initial release
-- Srini Goli		09/07/2022 To get intRowStatus = 0 from tlbMaterial
-- Srini Goli		10/04/2022 Added strDiagnosis field
-- Mike Kornegay	10/19/2022 Remove inner joins on animals because a sample may not have an animal
--								and correct strDiagnosis to be concatenated list
-- Mike Kornegay	10/22/2022 Corrected problem where multiple farms or animals would cause duplicate samples.
--
/*

select * FROM dbo.tlbMonitoringSession where SessionCategoryID IN (10502009,10502002)  -- Avian, Livestock

--Example of a call of procedure:

EXEC report.USP_VET_ASSessionFarm_GET 155415660001540,'en-US'

*/

ALTER PROCEDURE [Report].[USP_VET_ASSessionFarm_GET]
(
	@idfCase BIGINT,
	@LangID NVARCHAR(20)
)
AS
BEGIN
	DECLARE @intTotalSamples INT
	DECLARE @intTotalAnimalSampled INT

	SELECT
		@intTotalSamples = COUNT(M.idfMaterial), 
		@intTotalAnimalSampled = COUNT(DISTINCT A.idfAnimal)
	FROM dbo.tlbMonitoringSession MS
	INNER JOIN dbo.tlbMaterial as  M ON M.idfMonitoringSession = MS.idfMonitoringSession AND M.intRowStatus = 0
	INNER JOIN
				(
					SELECT		farm.idfFarm, 
								farm.idfMonitoringSession, 
								farm.intRowStatus,
								m.idfMaterial
					FROM		tlbFarm farm 
					inner join	tlbHerd h ON h.idfFarm = farm.idfFarm and h.intRowStatus = 0
					inner join	tlbSpecies s ON s.idfHerd = h.idfHerd and s.intRowStatus = 0
					inner join	tlbMaterial m ON m.idfSpecies = s.idfSpecies
					WHERE		farm.idfMonitoringSession = @idfCase
					AND			m.idfMaterial = M.idfMaterial

				) 
				F ON F.idfMonitoringSession = MS.idfMonitoringSession
					AND F.idfMaterial = M.idfMaterial
					AND F.intRowStatus = 0
	INNER JOIN	dbo.tlbSpecies S ON S .idfSpecies = M.idfSpecies AND S.intRowStatus = 0
	LEFT JOIN	(
					SELECT		a.idfAnimal,
								a.intRowStatus,
								a.idfSpecies,
								m.idfMaterial
					FROM		tlbAnimal a 
					INNER JOIN 	tlbMaterial m ON m.idfAnimal = a.idfAnimal
					WHERE		m.idfMaterial = M.idfMaterial								
				) A ON A.idfSpecies  = S.idfSpecies 
					AND A.idfMaterial = M.idfMaterial
					AND A.intRowStatus = 0

	WHERE MS.idfMonitoringSession = @idfCase
	AND MS.intRowStatus = 0
	
	SELECT 

		A.idfAnimal AS idfKey,
		F.idfFarm	 AS idfFarm,
		F.strFarmCode AS strFarmCode,
		dbo.FN_GBL_ConcatFullName(Hu.strLastName, Hu.strFirstName, Hu.strSecondName) 
							AS strOwnerName,
		dbo.FN_GBL_GeoLocationString(@LangID,F.idfFarmAddress,NULL) 
							AS strFarmAddress,
		A.strAnimalCode	AS strAnimalID,
		spt.[name] AS strSpecies,
		A.strAge,
		A.strColor AS strColor,
		A.strName AS strName,
		A.strSex AS strSex,
		M.datFieldCollectionDate AS datCollectionDate,				
		M.strFieldBarcode AS strSampleID,
		samt.[name]	AS strSampleType,
		@intTotalSamples AS intTotalSamples,
		@intTotalAnimalSampled AS intTotalAnimalSampled,
		dbo.FN_VAS_SESSION_SAMPLE_DIAGNOSESNAMES_GET(@idfCase, @LangID, M.idfMaterial) AS strDiagnosis
		
	FROM dbo.tlbMonitoringSession MS
	
	INNER JOIN dbo.tlbMaterial AS M ON M.idfMonitoringSession = MS.idfMonitoringSession AND M.intRowStatus = 0
		LEFT JOIN	dbo.FN_GBL_ReferenceRepair_GET(@LangID,19000087) samt ON samt.idfsReference = M.idfsSampleType
		LEFT JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID, 19000019) D ON D.idfsReference = M.DiseaseID
	
	INNER JOIN	(	
					dbo.tlbSpecies S
					INNER JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID,19000086) AS spt ON spt.idfsReference = S.idfsSpeciesType
				) ON S .idfSpecies = M.idfSpecies AND S.intRowStatus = 0
        
	LEFT JOIN	(
					SELECT		a.idfAnimal,
								a.idfSpecies,
								a.strAnimalCode, 
								Age.[name] as strAge,
								A.strColor AS strColor,
								A.strName AS strName,
								G.[name] as strSex,
								a.intRowStatus,
								m.idfMaterial
					FROM		tlbAnimal a 
					INNER JOIN 	tlbMaterial m ON m.idfAnimal = a.idfAnimal
					LEFT JOIN	dbo.FN_GBL_ReferenceRepair_GET(@LangID,19000007) AS G ON G.idfsReference = A.idfsAnimalGender
					LEFT JOIN	dbo.FN_GBL_ReferenceRepair_GET(@LangID,19000005) AS Age ON Age.idfsReference = A.idfsAnimalAge
					WHERE		m.idfMaterial = M.idfMaterial								
				) A ON A.idfSpecies  = S.idfSpecies 
					AND A.idfMaterial = M.idfMaterial
					AND A.intRowStatus = 0

	INNER JOIN
				(
					SELECT		farm.idfFarm, 
								farm.strFarmCode, 
								farm.idfFarmAddress, 
								farm.idfMonitoringSession, 
								farm.idfHuman,
								farm.intRowStatus,
								m.idfMaterial
					FROM		tlbFarm farm 
					inner join	tlbHerd h ON h.idfFarm = farm.idfFarm and h.intRowStatus = 0
					inner join	tlbSpecies s ON s.idfHerd = h.idfHerd and s.intRowStatus = 0
					inner join	tlbMaterial m ON m.idfSpecies = s.idfSpecies
					WHERE		farm.idfMonitoringSession = @idfCase
					AND			m.idfMaterial = M.idfMaterial

				) 
				F ON F.idfMonitoringSession = MS.idfMonitoringSession
					AND F.idfMaterial = M.idfMaterial
					AND F.intRowStatus = 0

	LEFT JOIN dbo.tlbHuman Hu ON F.idfHuman = Hu.idfHuman AND Hu.intRowStatus = 0
				
	WHERE MS.idfMonitoringSession = @idfCase
	AND MS.intRowStatus = 0
	
END
GO
PRINT N'Creating Procedure [dbo].[USP_ADMIN_FF_ParameterTemplateCopyOnly_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_ParameterTemplateCopyOnly_SET
-- Description: Save the Parameter Template, for the use of the Copy process of an entire flex form
--          
-- Revision History:
-- Name				Date		Change
-- ---------------	----------	--------------------------------------------------------------------
-- Doug Albanese	 10/06/2022	 Create this "Stand Alone" SP to get around POCO issue
--
-- ================================================================================================
CREATE PROCEDURE [dbo].[USP_ADMIN_FF_ParameterTemplateCopyOnly_SET] 
(
	@idfsParameter BIGINT
	,@idfsFormTemplate BIGINT
	,@LangID NVARCHAR(50) = NULL
	,@idfsEditMode BIGINT = NULL
	,@intLeft INT = NULL
	,@intTop INT = NULL
	,@intWidth INT = NULL
	,@intHeight INT = NULL
	,@intScheme INT = NULL
	,@intLabelSize INT = NULL
	,@intOrder INT = NULL
	,@blnFreeze BIT = NULL
	,@User NVARCHAR(50) = ''
	,@CopyOnly INT = 0
	,@FunctionCall INT = 0
)
AS
BEGIN
	SET NOCOUNT ON;	

	DECLARE 
		@returnCode BIGINT = 0,
		@returnMsg  NVARCHAR(MAX) = 'Success' 

	BEGIN TRY
		DECLARE @SupressSelect TABLE
		( 
			retrunCode INT,
			returnMsg NVARCHAR(200)
		)

		IF (@idfsEditMode IS NULL) SET @idfsEditMode = 10068001
		IF (@intLeft IS NULL) SET @intLeft = 0
		IF (@intTop IS NULL) SET @IntTop = 0
		IF (@intWidth IS NULL) SET @intWidth = 0
		IF (@intHeight IS NULL) SET @intHeight = 0
		IF (@intScheme IS NULL)	 SET @intScheme = 0
		IF (@blnFreeze IS NULL) SET @blnFreeze = 0
		
		IF (@intLabelSize IS NULL)
			BEGIN 
				IF (@intScheme = 0 OR @intScheme = 1)
					BEGIN
						SET @intLabelSize = @intWidth / 2
					END
			END
		ELSE
			BEGIN
				SET @intLabelSize = @intWidth
			END

		IF (@intOrder IS NULL) SET @intOrder = 0
			
		IF NOT EXISTS (SELECT TOP 1 1
					   FROM [dbo].[ffParameterForTemplate]
					   WHERE [idfsParameter] = @idfsParameter
							 AND [idfsFormTemplate] = @idfsFormTemplate)
			BEGIN
				INSERT INTO [dbo].[ffParameterForTemplate]
					(
           				[idfsParameter]
           				,[idfsFormTemplate]			  	   
						,[idfsEditMode]		
						,[blnFreeze]
						,AuditCreateDTM
						,AuditCreateUser
					)
				VALUES
					(
           				@idfsParameter
           				,@idfsFormTemplate
						,@idfsEditMode	
						,@blnFreeze	
						,GETDATE()
						,@User	
					)          
			END
		ELSE
			BEGIN
				UPDATE [dbo].[ffParameterForTemplate]
				SET [idfsEditMode] = @idfsEditMode
					,[blnFreeze] = @blnFreeze
					,[intRowStatus] = 0
					,AuditUpdateDTM = GETDATE()
					,AuditUpdateUser = @User
 				WHERE [idfsParameter] = @idfsParameter
					  AND [idfsFormTemplate] = @idfsFormTemplate 						
			END

		IF @FunctionCall = 0
			BEGIN
				--INSERT INTO @SupressSelect
				EXEC dbo.[USP_ADMIN_FF_ParameterDesignOptions_SET] 
					 @idfsParameter
					 ,@idfsFormTemplate
					 ,@intLeft
					 ,@intTop
					 ,@intWidth
					 ,@intHeight			
					 ,@intScheme
					 ,@intLabelSize
					 ,@intOrder
					 ,@LangID
					 ,@User
					 ,1
			END
		ELSE
			BEGIN
				INSERT INTO @SupressSelect
				EXEC dbo.[USP_ADMIN_FF_ParameterDesignOptions_SET] 
					 @idfsParameter
					 ,@idfsFormTemplate
					 ,@intLeft
					 ,@intTop
					 ,@intWidth
					 ,@intHeight			
					 ,@intScheme
					 ,@intLabelSize
					 ,@intOrder
					 ,@LangID
					 ,@User
					 ,@CopyOnly
			END

		IF @CopyOnly = 0
			BEGIN
				SELECT @returnCode AS ReturnCode, @returnMsg AS ReturnMessage
			END

	END TRY
	BEGIN CATCH
		THROW;
	END CATCH

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Procedure [dbo].[USP_HAS_DISEASE_REPORT_GETList]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USP_HAS_DISEASE_REPORT_GETList
--
-- Description: Get a list of human disease reports for the Human Active Surveillance module.
--          
-- Revision History:
-- Name				 Date		 Change Detail
-- ----------------	 ----------	 -------------------------------------------------------------------
-- Doug Albanese	 09/28/2022  Initial release.
--
-- Testing code:
-- EXEC USP_HUM_DISEASE_REPORT_GETList 'en-US'
-- EXEC USP_HUM_DISEASE_REPORT_GETList 'en-US', @EIDSSReportID = 'H'
-- ================================================================================================
CREATE PROCEDURE [dbo].[USP_HAS_DISEASE_REPORT_GETList]
   @LanguageID NVARCHAR(50),
   @SessionKey BIGINT = NULL,
   @ApplySiteFiltrationIndicator BIT = 0,
   @UserSiteID BIGINT,
   @UserOrganizationID BIGINT,
   @UserEmployeeID BIGINT,
   @SortColumn NVARCHAR(30) = 'ReportID',
   @SortOrder NVARCHAR(4) = 'DESC',
   @Page INT = 1,
   @PageSize INT = 10
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @AdministrativeLevelNode AS HIERARCHYID,
            @LocationOfExposureLevelNode AS HIERARCHYID;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID)
   );

    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );

    BEGIN TRY
        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        -- ========================================================================================
        -- NO SITE FILTRATION RULES APPLIED
        --
        -- For first and second level sites, do not apply any site filtration rules.
        -- ========================================================================================
        IF @ApplySiteFiltrationIndicator = 0
		   BEGIN
			   INSERT INTO @Results
			   SELECT hc.idfHumanCase,
					  1,
					  1,
					  1,
					  1,
					  1
			   FROM dbo.tlbHumanCase hc
				   INNER JOIN dbo.tlbHuman h
					   ON h.idfHuman = hc.idfHuman
						  AND h.intRowStatus = 0
				   INNER JOIN dbo.tlbGeoLocation currentAddress
					   ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
   --------------------------------------------------------------------------------------------------------------------
				   LEFT JOIN dbo.gisLocationDenormalized g
					   ON g.idfsLocation = currentAddress.idfsLocation
				   LEFT JOIN dbo.tlbMaterial m
					   ON m.idfHumanCase = hc.idfHumanCase
						  AND m.intRowStatus = 0
				   LEFT JOIN dbo.tlbGeoLocation exposure
					   ON exposure.idfGeoLocation = hc.idfPointGeoLocation
				   LEFT JOIN dbo.gisLocationDenormalized gExposure
					   ON gExposure.idfsLocation = exposure.idfsLocation
			   WHERE hc.intRowStatus = 0
					 AND hc.idfsFinalDiagnosis IS NOT NULL
					 AND (
							 hc.idfParentMonitoringSession = @SessionKey
							 OR @SessionKey IS NULL
						 )
			   GROUP BY hc.idfHumanCase
			   OPTION (RECOMPILE);
		   END
        ELSE
		   BEGIN -- Site Filtration
			   
			   INSERT INTO @Results
			   SELECT hc.idfHumanCase,
				  1,
				  1,
				  1,
				  1,
				  1
			   FROM dbo.tlbHumanCase hc
			   INNER JOIN dbo.tlbHuman h ON h.idfHuman = hc.idfHuman AND h.intRowStatus = 0
			   INNER JOIN dbo.tlbGeoLocation currentAddress ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
			   LEFT JOIN dbo.gisLocationDenormalized g ON g.idfsLocation = currentAddress.idfsLocation
			   LEFT JOIN dbo.tlbMaterial m ON m.idfHumanCase = hc.idfHumanCase AND m.intRowStatus = 0
			   LEFT JOIN dbo.tlbGeoLocation exposure ON exposure.idfGeoLocation = hc.idfPointGeoLocation
			   LEFT JOIN dbo.gisLocationDenormalized gExposure ON gExposure.idfsLocation = exposure.idfsLocation
            
			   WHERE hc.intRowStatus = 0
			   AND hc.idfsSite = @UserSiteID
			   AND hc.idfsFinalDiagnosis IS NOT NULL
			   AND (hc.idfParentMonitoringSession = @SessionKey OR @SessionKey IS NULL)
			   GROUP BY hc.idfHumanCase
			   OPTION (RECOMPILE);

			   DECLARE @FilteredResults TABLE
			   (
				   ID BIGINT NOT NULL,
				   ReadPermissionIndicator BIT NOT NULL,
				   AccessToPersonalDataPermissionIndicator BIT NOT NULL,
				   AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
				   WritePermissionIndicator BIT NOT NULL,
				   DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID)
			   );

			   -- =======================================================================================
			   -- DEFAULT SITE FILTRATION RULES
			   --
			   -- Apply active default site filtration rules for third level sites.
			   -- =======================================================================================
			   DECLARE @RuleActiveStatus INT = 0;
			   DECLARE @AdministrativeLevelTypeID INT;
			   DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
			   DECLARE @DefaultAccessRules AS TABLE
			   (
				   AccessRuleID BIGINT NOT NULL,
				   ActiveIndicator INT NOT NULL,
				   ReadPermissionIndicator BIT NOT NULL,
				   AccessToPersonalDataPermissionIndicator BIT NOT NULL,
				   AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
				   WritePermissionIndicator BIT NOT NULL,
				   DeletePermissionIndicator BIT NOT NULL,
				   AdministrativeLevelTypeID INT NULL
			   );

			   INSERT INTO @DefaultAccessRules
			   SELECT AccessRuleID,
					  a.intRowStatus,
					  a.ReadPermissionIndicator,
					  a.AccessToPersonalDataPermissionIndicator,
					  a.AccessToGenderAndAgeDataPermissionIndicator,
					  a.WritePermissionIndicator,
					  a.DeletePermissionIndicator,
					  a.AdministrativeLevelTypeID
			   FROM dbo.AccessRule a
			   WHERE DefaultRuleIndicator = 1;

			   SELECT @RuleActiveStatus = ActiveIndicator
			   FROM @DefaultAccessRules
			   WHERE AccessRuleID = 10537000;

			   IF @RuleActiveStatus = 0
			   BEGIN
				   SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
				   FROM @DefaultAccessRules
				   WHERE AccessRuleID = 10537000;
				
				   SELECT @AdministrativeLevelNode = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
				   FROM dbo.tlbOffice o
					   INNER JOIN dbo.tlbGeoLocationShared AS l
						   ON l.idfGeoLocationShared = o.idfLocation
					   INNER JOIN dbo.gisLocationDenormalized g
						   ON g.idfsLocation = l.idfsLocation
				   WHERE o.idfOffice = @UserOrganizationID

				   -- Administrative level specified in the rule of the site where the report was created.
				   INSERT INTO @FilteredResults
				   SELECT h.idfHumanCase,
						  a.ReadPermissionIndicator,
						  a.AccessToPersonalDataPermissionIndicator,
						  a.AccessToGenderAndAgeDataPermissionIndicator,
						  a.WritePermissionIndicator,
						  a.DeletePermissionIndicator
				   FROM dbo.tlbHumanCase h
					   INNER JOIN dbo.tstSite s
						   ON h.idfsSite = s.idfsSite
					   INNER JOIN dbo.tlbOffice o
						   ON o.idfOffice = s.idfOffice
							  AND o.intRowStatus = 0
					   INNER JOIN dbo.tlbGeoLocationShared l
						   ON l.idfGeoLocationShared = o.idfLocation
							  AND l.intRowStatus = 0
					   INNER JOIN dbo.gisLocationDenormalized g ON g.idfsLocation = l.idfsLocation
					   INNER JOIN @DefaultAccessRules a
						   ON a.AccessRuleID = 10537000
				   WHERE h.intRowStatus = 0 and h.idfParentMonitoringSession = @SessionKey

				   -- Administrative level specified in the rule of the report current residence address.
				   INSERT INTO @FilteredResults
				   SELECT h.idfHumanCase,
						  a.ReadPermissionIndicator,
						  a.AccessToPersonalDataPermissionIndicator,
						  a.AccessToGenderAndAgeDataPermissionIndicator,
						  a.WritePermissionIndicator,
						  a.DeletePermissionIndicator
				   FROM dbo.tlbHumanCase h
					   INNER JOIN dbo.tlbHuman hu
						   ON hu.idfHuman = h.idfHuman
							  AND hu.intRowStatus = 0
					   INNER JOIN dbo.tlbGeoLocation l
						   ON l.idfGeoLocation = hu.idfCurrentResidenceAddress
							  AND l.intRowStatus = 0
					   INNER JOIN dbo.gisLocationDenormalized g
						   ON g.idfsLocation = l.idfsLocation
					   INNER JOIN @DefaultAccessRules a
						   ON a.AccessRuleID = 10537000
				   WHERE h.intRowStatus = 0 and h.idfParentMonitoringSession = @SessionKey

				   -- Administrative level specified in the rule of the report location of exposure, 
				   -- if corresponding field was filled in.
				   INSERT INTO @FilteredResults
				   SELECT h.idfHumanCase,
						  a.ReadPermissionIndicator,
						  a.AccessToPersonalDataPermissionIndicator,
						  a.AccessToGenderAndAgeDataPermissionIndicator,
						  a.WritePermissionIndicator,
						  a.DeletePermissionIndicator
				   FROM dbo.tlbHumanCase h
					   INNER JOIN dbo.tlbGeoLocation l
						   ON l.idfGeoLocation = h.idfPointGeoLocation
							  AND l.intRowStatus = 0
					   INNER JOIN dbo.gisLocationDenormalized g
						   ON g.idfsLocation = l.idfsLocation
					   INNER JOIN @DefaultAccessRules a
						   ON a.AccessRuleID = 10537000
				   WHERE h.intRowStatus = 0 and h.idfParentMonitoringSession = @SessionKey
				  
			   END;

            -- Report data shall be available to all sites' organizations connected to the particular report.
            -- Notification sent by, notification received by, facility where the patient first sought 
            -- care, hospital, and the conducting investigation organizations.
            SELECT @RuleActiveStatus = intRowStatus
            FROM dbo.AccessRule
            WHERE AccessRuleID = 10537001;


            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE h.intRowStatus = 0
                      AND (
                              h.idfSentByOffice = @UserOrganizationID
                              OR h.idfReceivedByOffice = @UserOrganizationID
                              OR h.idfSoughtCareFacility = @UserOrganizationID
                              OR h.idfHospital = @UserOrganizationID
                              OR h.idfInvestigatedByOffice = @UserOrganizationID
                          )
                ORDER BY h.idfHumanCase;

                -- Sample collected by and sent to organizations
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfHumanCase),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbHumanCase h
                        ON h.idfHumanCase = m.idfHumanCase
                           AND h.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE m.intRowStatus = 0
                      AND (
                              m.idfFieldCollectedByOffice = @UserOrganizationID
                              OR m.idfSendToOffice = @UserOrganizationID
                          )
                GROUP BY m.idfHumanCase,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;

                -- Sample transferred to organizations
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfHumanCase),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbHumanCase h
                        ON h.idfHumanCase = m.idfHumanCase
                           AND h.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOutMaterial tom
                        ON m.idfMaterial = tom.idfMaterial
                           AND tom.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOUT t
                        ON tom.idfTransferOut = t.idfTransferOut
                           AND t.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE m.intRowStatus = 0
                      AND t.idfSendToOffice = @UserOrganizationID
                GROUP BY m.idfHumanCase,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;
            END;

            -- Report data shall be available to the sites with the connected outbreak, if the report 
            -- is the primary report/session for an outbreak.
            SELECT @RuleActiveStatus = intRowStatus
            FROM dbo.AccessRule
            WHERE AccessRuleID = 10537002;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbOutbreak o
                        ON h.idfHumanCase = o.idfPrimaryCaseOrSession
                           AND o.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537002
                WHERE h.intRowStatus = 0
                      AND o.idfsSite = @UserSiteID;
            END;

            -- =======================================================================================
            -- CONFIGURABLE SITE FILTRATION RULES
            -- 
            -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the default rules.
            -- =======================================================================================
            -- Apply at the user's site group level, granted by a site group.
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- Apply at the user's site level, granted by a site group.
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- Apply at the user's employee group level, granted by a site group.
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- Apply at the user's ID level, granted by a site group.
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- Apply at the user's site group level, granted by a site.
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND sgs.idfsSite = h.idfsSite;

            -- Apply at the user's site level, granted by a site.
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                 AND a.GrantingActorSiteID = h.idfsSite;

            -- Apply at the user's employee group level, granted by a site.
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- Apply at the user's ID level, granted by a site.
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- Copy filtered results to results and use search criteria
            INSERT INTO @Results
            SELECT ID,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator
            FROM @FilteredResults
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = ID
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbHumanActual ha
                    ON ha.idfHumanActual = h.idfHumanActual
                       AND ha.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocation currentAddress
                    ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocationDenormalized g
                    ON g.idfsLocation = currentAddress.idfsLocation
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfHumanCase = hc.idfHumanCase
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation exposure
                    ON exposure.idfGeoLocation = hc.idfPointGeoLocation
                LEFT JOIN dbo.gisLocationDenormalized gExposure
                    ON gExposure.idfsLocation = exposure.idfsLocation
            WHERE hc.intRowStatus = 0
                  AND hc.idfsFinalDiagnosis IS NOT NULL
                  AND (
                          hc.idfParentMonitoringSession = @SessionKey
                          OR @SessionKey IS NULL
                      )
            GROUP BY ID,
                     ReadPermissionIndicator,
                     AccessToPersonalDataPermissionIndicator,
                     AccessToGenderAndAgeDataPermissionIndicator,
                     WritePermissionIndicator,
                     DeletePermissionIndicator
            OPTION (RECOMPILE);
			
        END;


        -- =======================================================================================
        -- Remove "Outbreak" tied disease reports, if filtering is needed
        -- =======================================================================================
        --IF @FilterOutbreakTiedReports = 1
        --BEGIN
        --    DELETE I
        --    FROM @Results I
        --        INNER JOIN dbo.tlbHumanCase hc
        --            ON hc.idfHumanCase = I.ID
        --    WHERE hc.idfOutbreak IS NOT NULL;
        --END;

        -- =======================================================================================
        -- DISEASE FILTRATION RULES
        --
        -- Apply disease filtration rules from use case SAUC62.
        -- =======================================================================================
        -- 
        -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
		
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT h.idfHumanCase
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = h.idfsFinalDiagnosis
                       AND oa.intRowStatus = 0
            WHERE oa.intPermission = 1
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = -506 -- Default role
        );

        -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        INSERT INTO @Results
        SELECT hc.idfHumanCase,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbHumanCase hc
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tlbHuman h
                ON h.idfHuman = hc.idfHuman
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbGeoLocation currentAddress
                ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
            LEFT JOIN dbo.gisLocationDenormalized g
                ON g.idfsLocation = currentAddress.idfsLocation
            LEFT JOIN dbo.tlbMaterial m
                ON m.idfHumanCase = hc.idfHumanCase
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation exposure
                ON exposure.idfGeoLocation = hc.idfPointGeoLocation
            LEFT JOIN dbo.gisLocationDenormalized gExposure
                ON gExposure.idfsLocation = exposure.idfsLocation
        WHERE oa.intPermission = 2 -- Allow permission
              AND hc.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup
              AND hc.idfsFinalDiagnosis IS NOT NULL
              AND (
                      hc.idfParentMonitoringSession = @SessionKey
                      OR @SessionKey IS NULL
                  )
        GROUP BY hc.idfHumanCase
        OPTION (RECOMPILE);

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbHumanCase hc
                ON hc.idfHumanCase = res.ID
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 1
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        INSERT INTO @Results
        SELECT hc.idfHumanCase,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbHumanCase hc
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbHuman h
                ON h.idfHuman = hc.idfHuman
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbGeoLocation currentAddress
                ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
            LEFT JOIN dbo.gisLocationDenormalized g
                ON g.idfsLocation = currentAddress.idfsLocation
            LEFT JOIN dbo.tlbMaterial m
                ON m.idfHumanCase = hc.idfHumanCase
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation exposure
                ON exposure.idfGeoLocation = hc.idfPointGeoLocation
            LEFT JOIN dbo.gisLocationDenormalized gExposure
                ON gExposure.idfsLocation = exposure.idfsLocation
        WHERE oa.intPermission = 2 -- Allow permission
              AND hc.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = @UserEmployeeID
              AND hc.idfsFinalDiagnosis IS NOT NULL
              AND (
                      hc.idfParentMonitoringSession = @SessionKey
                      OR @SessionKey IS NULL
                  )
        GROUP BY hc.idfHumanCase
        OPTION (RECOMPILE);

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT hc.idfHumanCase
            FROM dbo.tlbHumanCase hc
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                       AND oa.intRowStatus = 0
            WHERE intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND idfActor = @UserEmployeeID
        );
		
        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator
        FROM @Results res
        WHERE res.ReadPermissionIndicator = 1
        GROUP BY ID,
                 ReadPermissionIndicator,
                 AccessToPersonalDataPermissionIndicator,
                 AccessToGenderAndAgeDataPermissionIndicator,
                 WritePermissionIndicator,
                 DeletePermissionIndicator;

		
        WITH paging
        AS (SELECT ID,
                   c = COUNT(*) OVER ()
            FROM @FinalResults res
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = res.ID
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON gl.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
                LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
                    ON LH.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                    ON disease.idfsReference = hc.idfsFinalDiagnosis
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) finalClassification
                    ON finalClassification.idfsReference = hc.idfsFinalCaseStatus
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000111) reportStatus
                    ON reportStatus.idfsReference = hc.idfsCaseProgressStatus
            ORDER BY CASE
                         WHEN @SortColumn = 'ReportID'
                              AND @SortOrder = 'ASC' THEN
                             hc.strCaseID
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'ReportID'
                              AND @SortOrder = 'DESC' THEN
                             hc.strCaseID
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'EnteredDate'
                              AND @SortOrder = 'ASC' THEN
                             hc.datEnteredDate
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'EnteredDate'
                              AND @SortOrder = 'DESC' THEN
                             hc.datEnteredDate
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'DiseaseName'
                              AND @SortOrder = 'ASC' THEN
                             disease.name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'DiseaseName'
                              AND @SortOrder = 'DESC' THEN
                             disease.name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'PersonLocation'
                              AND @SortOrder = 'ASC' THEN
                     (LH.AdminLevel1Name + ', ' + LH.AdminLevel2Name)
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'PersonLocation'
                              AND @SortOrder = 'DESC' THEN
                     (LH.AdminLevel1Name + ', ' + LH.AdminLevel2Name)
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'ClassificationTypeName'
                              AND @SortOrder = 'ASC' THEN
                             finalClassification.name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'ClassificationTypeName'
                              AND @SortOrder = 'DESC' THEN
                             finalClassification.name
                     END DESC OFFSET @PageSize * (@Page - 1) ROWS FETCH NEXT @PageSize ROWS ONLY
     )
        SELECT res.ID AS ReportKey,
               hc.strCaseId AS ReportID,
               ISNULL(finalClassification.name, initialClassification.name) AS ClassificationTypeName,
               disease.Name AS DiseaseName,
               ISNULL(LH.AdminLevel1Name, '') + IIF(LH.AdminLevel2Name IS NULL, '', ', ')
               + ISNULL(LH.AdminLevel2Name, '') AS PersonLocation,
               res.AccessToPersonalDataPermissionIndicator,
               res.AccessToGenderAndAgeDataPermissionIndicator,
               res.WritePermissionIndicator,
               res.DeletePermissionIndicator,
               c AS RecordCount,
               (
                   SELECT COUNT(*) FROM dbo.tlbHumanCase hc WHERE hc.intRowStatus = 0
               ) AS TotalCount,
               TotalPages = (c / @PageSize) + IIF(c % @PageSize > 0, 1, 0),
               CurrentPage = @Page
        FROM @FinalResults res
            INNER JOIN paging
                ON paging.ID = res.ID
            INNER JOIN dbo.tlbHumanCase hc
                ON hc.idfHumanCase = res.ID
            INNER JOIN dbo.tlbHuman h
                ON h.idfHuman = hc.idfHuman
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbHumanActual ha
                ON ha.idfHumanActual = h.idfHumanActual
                   AND ha.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation gl
                ON gl.idfGeoLocation = h.idfCurrentResidenceAddress
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = gl.idfsLocation
            LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
                ON LH.idfsLocation = gl.idfsLocation
            LEFT JOIN dbo.HumanActualAddlInfo haai
                ON haai.HumanActualAddlInfoUID = ha.idfHumanActual
                   AND haai.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                ON disease.idfsReference = hc.idfsFinalDiagnosis
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) initialClassification
                ON initialClassification.idfsReference = hc.idfsInitialCaseStatus
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) finalClassification
                ON finalClassification.idfsReference = hc.idfsFinalCaseStatus
            LEFT JOIN dbo.tlbPerson p
                ON p.idfPerson = hc.idfPersonEnteredBy
                   AND p.intRowStatus = 0
        OPTION (RECOMPILE);


    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Procedure [dbo].[USP_VCTS_DetailedCollections_Copy]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
--*************************************************************
-- Name 				: USP_VCTS_DetailedCollections_Copy
-- Description			: Create replicas of the given idfVector ids
--          
-- Author               : Doug Albanese
-- Revision History
--	Name			Date			Change Detail
--  Doug Albanese	01/21/2020		Initial Creation
-- Doug Albanese	11/5/2020		Re-worked to get the copy to associate samples and tests for the new vector.
-- Doug Albanese	 10/20/2022		Create parameters to denote which parts of a vector, needs to be copyied.
--									Also changed the SP name to conform to standards
--*************************************************************

CREATE PROCEDURE [dbo].[USP_VCTS_DetailedCollections_Copy]
(
    @idfVector							  BIGINT,
	@VectorData							  BIT = 0,
	@Samples							  BIT = 0,
	@Tests								  BIT = 0
)

AS 

BEGIN
	DECLARE @returnCode						INT = 200
	DECLARE	@returnMsg						NVARCHAR(max) = 'SUCCESS' 
	DECLARE @idfVectorNew					BIGINT

	DECLARE @SupressSelect TABLE
	( retrunCode INT,
		returnMsg NVARCHAR(200)
	)

	DECLARE @idfMaterials TABLE (
		idfMaterial BIGINT
	);

	DECLARE @idfTestings TABLE (
		idfTesting BIGINT,
		idfMaterial BIGINT
	);

	IF @Samples = 1
	  BEGIN
		 INSERT INTO @idfMaterials
			SELECT
			   DISTINCT idfMaterial
			FROM
			   tlbMaterial
			WHERE
			   idfVector = @idfVector
	  
		 IF @Tests = 1
			BEGIN
			   INSERT INTO @idfTestings
				  SELECT
					 DISTINCT idfTesting, idfMaterial
				  FROM
					 tlbTesting
				  WHERE
					 idfMaterial IN (
						   SELECT
							  idfMaterial
						   FROM
							  @idfMaterials
					 )
			END
	  END

	DECLARE @rowId							BIGINT
	DECLARE @idfMaterial					BIGINT
	DECLARE @idfMaterialNew					BIGINT
	DECLARE @idfVectorSurveillanceSession	BIGINT
	DECLARE @idfHostVector					BIGINT = NULL
	DECLARE @strVectorID					NVARCHAR(50)
	DECLARE @strFieldVectorID				NVARCHAR(50) = NULL
	DECLARE @idfLocation					BIGINT = NULL
	DECLARE @intElevation					BIGINT = NULL
	DECLARE @idfsSurrounding				BIGINT = NULL
	DECLARE @strGEOReferenceSources			NVARCHAR(500) = NULL
	DECLARE @idfCollectedByOffice			BIGINT
	DECLARE @idfCollectedByPerson			BIGINT = NULL
	DECLARE @datCollectionDateTime			DATETIME
	DECLARE @idfsCollectionMethod			BIGINT = NULL
	DECLARE @idfsBasisOfRecord				BIGINT = NULL
	DECLARE @idfsVectorType					BIGINT
	DECLARE @idfsVectorSubType				BIGINT
	DECLARE @intQuantity					INT
	DECLARE @idfsSex						BIGINT = NULL
	DECLARE @idfIdentIFiedByOffice			BIGINT = NULL
	DECLARE @idfIdentIFiedByPerson			BIGINT = NULL
	DECLARE @datIdentIFiedDateTime			DATETIME = NULL
	DECLARE @idfsIdentIFicationMethod		BIGINT = NULL
	DECLARE @idfObservation					BIGINT = NULL
	DECLARE @idfsDayPeriod					BIGINT = NULL
	DECLARE @strComment						NVARCHAR(500) = NULL
	DECLARE @idfsEctoparASitesCollected		BIGINT = NULL

	DECLARE @idfsSampleType 				BIGINT
	DECLARE @idfRootMaterial 				BIGINT = NULL
	DECLARE @idfParentMaterial 				BIGINT = NULL
	DECLARE @idfHuman 						BIGINT = NULL
	DECLARE @idfSpecies 					BIGINT = NULL
	DECLARE @idfAnimal 						BIGINT = NULL
	DECLARE @idfMonitoringSession 			BIGINT = NULL
	DECLARE @idfFieldCollectedByPerson 		BIGINT = NULL
	DECLARE @idfFieldCollectedByOffice 		BIGINT = NULL
	DECLARE @idfMainTest 					BIGINT = NULL
	DECLARE @datFieldCollectionDate 		DATETIME = NULL
	DECLARE @datFieldSentDate 				DATETIME = NULL
	DECLARE @strFieldBarcode 				NVARCHAR(200) = NULL
	DECLARE @strCalculatedCaseID 			NVARCHAR(200) = NULL
	DECLARE @strCalculatedHumanName 		NVARCHAR(700) = NULL
	DECLARE @idfSubdivision 				BIGINT = NULL	
	DECLARE @idfsSampleStatus 				BIGINT = NULL
	DECLARE @idfInDepartment 				BIGINT = NULL
	DECLARE @idfDestroyedByPerson 			BIGINT = NULL
	DECLARE @datEnteringDate 				DATETIME = NULL
	DECLARE @datDestructionDate 			DATETIME = NULL
	DECLARE @strBarcode 					NVARCHAR(200) = NULL
	DECLARE @strNote 						NVARCHAR(500) = NULL
	DECLARE @idfsSite 						BIGINT
	DECLARE @intRowStatus 					INT = 0
	DECLARE @idfSendToOffice 				BIGINT = NULL
	DECLARE @blnReadOnly 					BIT
	DECLARE @idfsBirdStatus 				BIGINT = NULL
	DECLARE @idfHumanCase 					BIGINT = NULL
	DECLARE @idfVetCase 					BIGINT = NULL
	DECLARE @datAccession 					DATETIME = NULL
	DECLARE @idfsAccessionCondition 		BIGINT = NULL
	DECLARE @strCondition 					NVARCHAR(200) = NULL
	DECLARE @idfAccesionByPerson 			BIGINT = NULL
	DECLARE @idfsDestructionMethod 			BIGINT = NULL
	DECLARE @idfsCurrentSite 				BIGINT = NULL
	DECLARE @idfsSampleKind 				BIGINT = NULL
	DECLARE @idfMarkedForDispositionByPerson BIGINT = NULL
	DECLARE @datOutOfRepositoryDate 		DATETIME = NULL
	DECLARE @strMaintenanceFlag 			NVARCHAR(20) = NULL

	DECLARE @idfTesting						BIGINT
	DECLARE @idfTestingNew					BIGINT
	DECLARE @idfsTestName					BIGINT = NULL
	DECLARE @idfsTestCategory				BIGINT = NULL
	DECLARE @idfsTestResult					BIGINT = NULL
	DECLARE @idfsTestStatus					BIGINT
	DECLARE @idfsDiagnosis					BIGINT
	DECLARE @idfBatchTest					BIGINT = NULL
	DECLARE @intTestNumber					INT = NULL
	DECLARE @datStartedDate					DATETIME = NULL
	DECLARE @datConcludedDate				DATETIME = NULL
	DECLARE @idfTestedByOffice				BIGINT = NULL
	DECLARE @idfTestedByPerson				BIGINT = NULL
	DECLARE @idfResultEnteredByOffice		BIGINT = NULL
	DECLARE @idfResultEnteredByPerson		BIGINT = NULL
	DECLARE @idfValidatedByOffice			BIGINT = NULL
	DECLARE @idfValidatedByPerson			BIGINT = NULL
	DECLARE @blnNonLaboratoryTest			BIT
	DECLARE @blnExternalTest				BIT = NULL
	DECLARE @idfPerformedByOffice			BIGINT = NULL
	DECLARE @datReceivedDate				DATETIME = NULL
	DECLARE @strContactPerson				NVARCHAR(200) = NULL

	BEGIN TRY
		 BEGIN
			   SELECT
					 @idfVectorSurveillanceSession = idfVectorSurveillanceSession, 
					 @idfHostVector = idfHostVector, 
					 @strFieldVectorID = strFieldVectorID, 
					 @idfLocation = idfLocation, 
					 @intElevation = intElevation, 
					 @idfsSurrounding = idfsSurrounding, 
					 @strGEOReferenceSources = strGEOReferenceSources, 
					 @idfCollectedByOffice = idfCollectedByOffice, 
					 @idfCollectedByPerson = idfCollectedByPerson, 
					 @datCollectionDateTime = datCollectionDateTime, 
					 @idfsCollectionMethod = idfsCollectionMethod, 
					 @idfsBASisOfRecord = idfsBASisOfRecord, 
					 @idfsVectorType = idfsVectorType, 
					 @idfsVectorSubType = idfsVectorSubType, 
					 @intQuantity = intQuantity, 
					 @idfsSex = idfsSex, 
					 @idfIdentIFiedByOffice = idfIdentIFiedByOffice, 
					 @idfIdentIFiedByPerson = idfIdentIFiedByPerson, 
					 @datIdentIFiedDateTime = datIdentIFiedDateTime, 
					 @idfsIdentIFicationMethod = idfsIdentIFicationMethod, 
					 @idfObservation = idfObservation,
					 @idfsDayPeriod = idfsDayPeriod,
					 @strComment = strComment,
					 @idfsEctoparASitesCollected = idfsEctoparASitesCollected
			   FROM
				  tlbVector
			   WHERE
					 idfVector = @idfVector

			   INSERT INTO @SupressSelect
			   EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbVector', @idfVectorNew OUTPUT

			   INSERT INTO @SupressSelect
			   EXEC dbo.USP_GBL_NextNumber_GET 'Vector Surveillance Vector', @strVectorID OUTPUT , NULL --N'AS Session'

			   INSERT INTO dbo.tlbVector
				  (
						idfVector, 
						idfVectorSurveillanceSession, 
						idfHostVector, 
						strVectorID, 
						strFieldVectorID, 
						idfLocation, 
						intElevation, 
						idfsSurrounding, 
						strGEOReferenceSources, 
						idfCollectedByOffice, 
						idfCollectedByPerson, 
						datCollectionDateTime, 
						idfsCollectionMethod, 
						idfsBasisOfRecord, 
						idfsVectorType, 
						idfsVectorSubType, 
						intQuantity, 
						idfsSex, 
						idfIdentIFiedByOffice, 
						idfIdentIFiedByPerson, 
						datIdentIFiedDateTime, 
						idfsIdentIFicationMethod, 
						idfObservation
						,idfsDayPeriod
						,strComment
						,idfsEctoparASitesCollected
				  )
			   VALUES
				  (
						@idfVectorNew, 
						@idfVectorSurveillanceSession, 
						@idfHostVector, 
						@strVectorID, 
						@strFieldVectorID, 
						@idfLocation, 
						@intElevation, 
						@idfsSurrounding, 
						@strGEOReferenceSources, 
						@idfCollectedByOffice, 
						@idfCollectedByPerson, 
						@datCollectionDateTime, 
						@idfsCollectionMethod, 
						@idfsBasisOfRecord, 
						@idfsVectorType, 
						@idfsVectorSubType, 
						@intQuantity, 
						@idfsSex, 
						@idfIdentifiedByOffice, 
						@idfIdentIFiedByPerson, 
						@datIdentIFiedDateTime, 
						@idfsIdentIFicationMethod, 
						@idfObservation,
						@idfsDayPeriod,
						@strComment,
						@idfsEctoparASitesCollected
			   )
		 END;
		
		 IF @Samples = 1
			BEGIN
			   WHILE EXISTS ( SELECT * FROM @idfMaterials )
				  BEGIN
					 SELECT
						TOP 1
						@rowId = idfMaterial
					 FROM 
						@idfMaterials

					 SELECT
						@idfsSampleType = idfsSampleType, 
						@idfRootMaterial = idfRootMaterial, 
						@idfParentMaterial = idfParentMaterial, 
						@idfHuman = idfHuman, 
						@idfSpecies = idfSpecies, 
						@idfAnimal = idfAnimal, 
						@idfMonitoringSession = idfMonitoringSession, 
						@idfFieldCollectedByPerson = idfFieldCollectedByPerson, 
						@idfFieldCollectedByOffice = idfFieldCollectedByOffice, 
						@idfMainTest = idfMainTest, 
						@datFieldCollectionDate = datFieldCollectionDate, 
						@datFieldSentDate = datFieldSentDate, 
						@strFieldBarcode = strFieldBarcode, 
						@strCalculatedCaseID = strCalculatedCaseID, 
						@strCalculatedHumanName = strCalculatedHumanName, 
						@idfVectorSurveillanceSession = idfVectorSurveillanceSession, 
						@idfVector = @idfVectorNew, 
						@idfSubdivision = idfSubdivision, 
						@idfsSampleStatus = idfsSampleStatus, 
						@idfInDepartment = idfInDepartment, 
						@idfDestroyedByPerson = idfDestroyedByPerson, 
						@datEnteringDate = datEnteringDate, 
						@datDestructionDate = datDestructionDate, 
						@strBarcode = strBarcode, 
						@strNote = strNote, 
						@idfsSite = idfsSite, 
						@intRowStatus = intRowStatus, 
						@idfSendToOffice = idfSendToOffice, 
						@blnReadOnly = blnReadOnly, 
						@idfsBirdStatus = idfsBirdStatus, 
						@idfHumanCase = idfHumanCase, 
						@idfVetCase = idfVetCase, 
						@datAccession = datAccession, 
						@idfsAccessionCondition = idfsAccessionCondition, 
						@strCondition = strCondition, 
						@idfAccesionByPerson = idfAccesionByPerson, 
						@idfsDestructionMethod = idfsDestructionMethod, 
						@idfsCurrentSite = idfsCurrentSite, 
						@idfsSampleKind = idfsSampleKind, 
						@idfMarkedForDispositionByPerson = idfMarkedForDispositionByPerson, 
						@datOutOfRepositoryDate = datOutOfRepositoryDate, 
						@strMaintenanceFlag = strMaintenanceFlag 
					 FROM
						tlbMaterial
					 WHERE
						idfMaterial = @rowId

					 INSERT INTO @SupressSelect
					 EXEC	dbo.USP_GBL_NEXTKEYID_GET 'tlbMaterial', @idfMaterialNew OUTPUT;

					 INSERT INTO @SupressSelect
					 EXEC	dbo.USP_GBL_NextNumber_GET 'Sample Field Barcode', @strBarcode OUTPUT, NULL 

					 --Update the temp table so that we will have the association between the new material and tests
					 UPDATE @idfTestings
					 SET idfMaterial = @idfMaterialNew
					 WHERE 
						idfMaterial = @rowid

					 INSERT INTO	dbo.tlbMaterial
						(						
								 idfMaterial, 
								 idfsSampleType, 
								 idfRootMaterial, 
								 idfParentMaterial, 
								 idfHuman, 
								 idfSpecies, 
								 idfAnimal, 
								 idfMonitoringSession, 
								 idfFieldCollectedByPerson, 
								 idfFieldCollectedByOffice, 
								 idfMainTest, 
								 datFieldCollectionDate, 
								 datFieldSentDate, 
								 strFieldBarcode, 
								 strCalculatedCaseID, 
								 strCalculatedHumanName, 
								 idfVectorSurveillanceSession, 
								 idfVector, 
								 idfSubdivision, 
								 idfsSampleStatus, 
								 idfInDepartment, 
								 idfDestroyedByPerson, 
								 datEnteringDate, 
								 datDestructionDate, 
								 strBarcode, 
								 strNote, 
								 idfsSite, 
								 intRowStatus, 
								 idfSendToOffice, 
								 blnReadOnly, 
								 idfsBirdStatus, 
								 idfHumanCase, 
								 idfVetCase, 
								 datAccession, 
								 idfsAccessionCondition, 
								 strCondition, 
								 idfAccesionByPerson, 
								 idfsDestructionMethod, 
								 idfsCurrentSite, 
								 idfsSampleKind, 
								 idfMarkedForDispositionByPerson, 
								 datOutOfRepositoryDate, 
								 strMaintenanceFlag 
						)
						VALUES
						(
								 @idfMaterialNew, 
								 @idfsSampleType, 
								 @idfRootMaterial, 
								 @idfParentMaterial, 
								 @idfHuman, 
								 @idfSpecies, 
								 @idfAnimal, 
								 @idfMonitoringSession, 
								 @idfFieldCollectedByPerson, 
								 @idfFieldCollectedByOffice, 
								 @idfMainTest, 
								 @datFieldCollectionDate, 
								 @datFieldSentDate, 
								 @strFieldBarcode, 
								 @strCalculatedCaseID, 
								 @strCalculatedHumanName, 
								 @idfVectorSurveillanceSession, 
								 @idfVectorNew, 
								 @idfSubdivision, 
								 @idfsSampleStatus, 
								 @idfInDepartment, 
								 @idfDestroyedByPerson, 
								 @datEnteringDate, 
								 @datDestructionDate, 
								 @strBarcode, 
								 @strNote, 
								 @idfsSite, 
								 @intRowStatus, 
								 @idfSendToOffice, 
								 @blnReadOnly, 
								 @idfsBirdStatus, 
								 @idfHumanCase, 
								 @idfVetCase, 
								 @datAccession, 
								 @idfsAccessionCondition, 
								 @strCondition, 
								 @idfAccesionByPerson, 
								 @idfsDestructionMethod, 
								 @idfsCurrentSite, 
								 @idfsSampleKind, 
								 @idfMarkedForDispositionByPerson, 
								 @datOutOfRepositoryDate, 
								 @strMaintenanceFlag 
						);
					
					 DELETE FROM @idfMaterials
					 WHERE idfMaterial = @rowId
				  END;
				  IF @Tests = 1
					 BEGIN
						WHILE EXISTS ( SELECT * FROM @idfTestings )
						   BEGIN
								 SELECT
									TOP 1
									@rowId = idfTesting
								 FROM 
									@idfTestings

								 SELECT
									@idfsTestName = idfsTestName, 
									@idfsTestCategory = idfsTestCategory, 
									@idfsTestResult = idfsTestResult, 
									@idfsTestStatus = idfsTestStatus, 
									@idfsDiagnosis = idfsDiagnosis, 
									@idfBatchTest = idfBatchTest, 
									@idfObservation = idfObservation, 
									@intTestNumber = intTestNumber, 
									@strNote = strNote, 
									@intRowStatus = intRowStatus, 
									@datStartedDate = datStartedDate, 
									@datConcludedDate = datConcludedDate, 
									@idfTestedByOffice = idfTestedByOffice, 
									@idfTestedByPerson = idfTestedByPerson, 
									@idfResultEnteredByOffice = idfResultEnteredByOffice, 
									@idfResultEnteredByPerson = idfResultEnteredByPerson, 
									@idfValidatedByOffice = idfValidatedByOffice, 
									@idfValidatedByPerson = idfValidatedByPerson, 
									@blnReadOnly = blnReadOnly, 
									@blnNonLaboratoryTest = blnNonLaboratoryTest, 
									@blnExternalTest = blnExternalTest, 
									@idfPerformedByOffice = idfPerformedByOffice, 
									@datReceivedDate = datReceivedDate, 
									@strContactPerson = strContactPerson, 
									@strMaintenanceFlag = strMaintenanceFlag
								 FROM
									tlbTesting
								 WHERE
									idfTesting = @rowId

								 INSERT INTO @SupressSelect
								 EXEC	dbo.USP_GBL_NEXTKEYID_GET 'tlbTesting', @idfTestingNew OUTPUT;

								 SELECT
									@idfMaterialNew = idfMaterial
								 FROM
									@idfTestings
								 WHERE
									idfTesting = @rowId

								 INSERT INTO	dbo.tlbTesting
								 (						
									   idfTesting, 
									   idfsTestName, 
									   idfsTestCategory, 
									   idfsTestResult, 
									   idfsTestStatus, 
									   idfsDiagnosis, 
									   idfMaterial, 
									   idfBatchTest, 
									   idfObservation, 
									   intTestNumber, 
									   strNote, 
									   intRowStatus, 
									   datStartedDate, 
									   datConcludedDate, 
									   idfTestedByOffice, 
									   idfTestedByPerson, 
									   idfResultEnteredByOffice, 
									   idfResultEnteredByPerson, 
									   idfValidatedByOffice, 
									   idfValidatedByPerson, 
									   blnReadOnly, 
									   blnNonLaboratoryTest, 
									   blnExternalTest, 
									   idfPerformedByOffice, 
									   datReceivedDate, 
									   strContactPerson, 
									   strMaintenanceFlag
								 )
								 VALUES
								 (
									   @idfTestingNew, 
									   @idfsTestName, 
									   @idfsTestCategory, 
									   @idfsTestResult, 
									   @idfsTestStatus, 
									   @idfsDiagnosis, 
									   @idfMaterialNew, 
									   @idfBatchTest, 
									   @idfObservation, 
									   @intTestNumber, 
									   @strNote, 
									   @intRowStatus, 
									   @datStartedDate, 
									   @datConcludedDate, 
									   @idfTestedByOffice, 
									   @idfTestedByPerson, 
									   @idfResultEnteredByOffice, 
									   @idfResultEnteredByPerson, 
									   @idfValidatedByOffice, 
									   @idfValidatedByPerson, 
									   @blnReadOnly, 
									   @blnNonLaboratoryTest, 
									   @blnExternalTest, 
									   @idfPerformedByOffice, 
									   @datReceivedDate, 
									   @strContactPerson, 
									   @strMaintenanceFlag
								 );
				
								 DELETE FROM @idfTestings
								 WHERE idfTesting = @rowId
						   END;
					 END
		 END
											
		IF @@TRANCOUNT > 0 AND @returnCode =0
			COMMIT
	END TRY

	BEGIN CATCH
			IF @@Trancount > 0
				ROLLBACK
				SET @returnCode = ERROR_NUMBER()
				SET @returnMsg = 
			   'ErrorNumber: ' + convert(varchar, ERROR_NUMBER() ) 
			   + ' ErrorSeverity: ' + convert(varchar, ERROR_SEVERITY() )
			   + ' ErrorState: ' + convert(varchar,ERROR_STATE())
			   + ' ErrorProcedure: ' + isnull(ERROR_PROCEDURE() ,'')
			   + ' ErrorLine: ' +  convert(varchar,isnull(ERROR_LINE() ,''))
			   + ' ErrorMessage: '+ ERROR_MESSAGE();
			   THROW;

	END CATCH

	SELECT 
		@returnCode AS ReturnCode
		,@returnMsg AS ReturnMsg

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Procedure [dbo].[USSP_AS_SAMPLE_TO_DISEASE_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USSP_AS_SAMPLE_TO_DISEASE_SET
--
-- Description:	Inserts or updates disease records for a particular sample for the human and  
-- veterinary active surveillance session use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     10/17/2022 Initial release.
-- ================================================================================================
CREATE PROCEDURE [dbo].[USSP_AS_SAMPLE_TO_DISEASE_SET]
(
    @AuditUserName NVARCHAR(100) = NULL,
    @MonitoringSessionToMaterialID BIGINT,
	@MonitoringSessionID BIGINT,
	@SampleID BIGINT,
	@DiseaseID BIGINT,
    @SampleTypeID BIGINT,
    @RowStatus INT,
    @RowAction INT
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
     
        IF @RowAction = 1 --Insert
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = N'tlbMonitoringSessionToMaterial',
                                              @idfsKey = @MonitoringSessionToMaterialID OUTPUT;

            INSERT INTO dbo.tlbMonitoringSessionToMaterial
            (
				idfMonitoringSessionToMaterial,
                idfMaterial,
                idfsSampleType,
                idfMonitoringSession,
                idfsDisease,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                AuditCreateDTM,
                AuditUpdateUser,
                AuditUpdateDTM,
				intRowStatus
            )
            VALUES
            (   
				@MonitoringSessionToMaterialID,
				@SampleID,
				@SampleTypeID,
				@MonitoringSessionID,
				@DiseaseID,
				10519001,
				'[{"idfMonitoringSessionToMaterial":' + CAST(@MonitoringSessionToMaterialID AS NVARCHAR(300)) + '}]',
				@AuditUserName,
				GETDATE(),
				@AuditUserName,
				GETDATE(),
				0
			);
        END;
        ELSE
        BEGIN
            UPDATE dbo.tlbMonitoringSessionToMaterial
            SET idfMaterial = @SampleID,
                idfsSampleType = @SampleTypeID,
                idfMonitoringSession = @MonitoringSessionID,
                idfsDisease = @DiseaseID,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE(),
				intRowStatus = @RowStatus
			WHERE idfMonitoringSessionToMaterial = @MonitoringSessionToMaterialID;
        END;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Procedure [Report].[USP_REP_Avion_FF_ActivityParameters_GET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USP_REP_Avion_FF_ActivityParameters_GET
-- Description: Avion Report
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Srini Goli		10/07/2022  Created Intitial Version
/*
		--Use below codes for idfsFormType
        AvionFarmFarmEpidemiologicalInfo = 10034007,
        AvionSpeciesClinicalInvestigation = 10034008

--EPI
EXEC    [Report].[USP_REP_Avion_FF_ActivityParameters_GET]
        @LangID = N'en-US',  --ka-GE,
        @idfsFormType = 10034007,
        @ObjID = '5672'

--Species
EXEC    [Report].[USP_REP_Avion_FF_ActivityParameters_GET]
        @LangID = N'en-US',  --ka-GE,
        @idfsFormType = 10034008,
        @ObjID = '5672'
*/
-- ================================================================================================
CREATE PROCEDURE [Report].[USP_REP_Avion_FF_ActivityParameters_GET] (
	@LangID AS NVARCHAR(50)
	,@idfsFormType AS  BIGINT= NULL
	,@ObjID AS BIGINT= NULL --idfVetCase
	)
AS
BEGIN
	DECLARE @idfsCountry AS BIGINT,
			@idfsLanguage BIGINT = dbo.FN_GBL_LanguageCode_GET(@LangID),
			@idfsEnglish BIGINT = dbo.FN_GBL_LanguageCode_GET('en-US')
	DECLARE @tmpTemplate AS TABLE (
		idfsFormTemplate BIGINT
		,IsUNITemplate BIT
		)

	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

   DECLARE @tempFlexForm TABLE (
		idfsParentSection BIGINT
		,idfsSection BIGINT
		,idfsParameter BIGINT
		,SectionNameDefault NVARCHAR(2000)
		,SectionName NVARCHAR(2000)
		,ParameterName NVARCHAR(2000)
		,parameterType NVARCHAR(1000)
		,idfsParameterType BIGINT
		,idfsReferenceType BIGINT
		,idfsEditor BIGINT
		,SectionOrder INT
		,ParameterOrder INT
		,blnGrid BIT
		,blnFixedRowSet BIT
		,idfsEditMode BIGINT
		,idfsFormTemplate BIGINT
		)

	DECLARE @tmpActivityParameters TABLE (
		[idfActivityParameters] BIGINT,
		[idfObservation] BIGINT,
		[idfsFormTemplate] BIGINT,
		[idfsParameter] BIGINT,
		[idfsSection] BIGINT,
		[idfRow] BIGINT,
		[Type] BIGINT,
		[varValue] sql_variant,
		[numRow] INT,
		[ParameterType]  BIGINT
		)

	DECLARE @observationsTable TABLE (
		[idfsFormType] BIGINT,
		[idfObservation] BIGINT
		)

	BEGIN TRY
			BEGIN
				DECLARE @idfsFormTemplate BIGINT,
						@idfObservation BIGINT

				--Get this logic from dbo.USP_ADMIN_FF_FlexForm_Get
				IF @idfsFormTemplate IS NULL
					BEGIN
						--Obtain idfsFormTemplate, via given parameters of idfsDiagnosis and idfsFormType
						---------------------------------------------------------------------------------
						SET @idfsCountry = dbo.FN_GBL_CurrentCountry_GET()

						INSERT INTO @tmpTemplate
						EXECUTE dbo.USP_ADMIN_FF_ActualTemplate_GET 
							@idfsCountry,
							@ObjID,
							@idfsFormType

						SELECT TOP 1 @idfsFormTemplate = idfsFormTemplate
						FROM @tmpTemplate

						IF @idfsFormTemplate = - 1
							SET @idfsFormTemplate = NULL

						---------------------------------------------------------------------------------
					END

				--Get Flex Form header details
				INSERT INTO @tempFlexForm
				SELECT 
					s.idfsParentSection
					,COALESCE(p.idfsSection,0) AS idfsSection
					,p.idfsParameter
					,RF.strDefault AS SectionNameDefault
					,RF.Name AS SectionName
					,PN.Name AS ParameterName
					,PTR.Name AS parameterType
					,p.idfsParameterType
					,pt.idfsReferenceType
					,p.idfsEditor
					,sdo.intOrder	AS SectionOrder
					,ISNULL(PDO.intOrder,PDOE.intOrder)	AS ParameterOrder
					,s.blnGrid
					,s.blnFixedRowSet
					,PFT.idfsEditMode
					,pft.idfsFormTemplate
				FROM dbo.ffParameter p
				LEFT JOIN dbo.ffParameterForTemplate PFT ON PFT.idfsParameter = p.idfsParameter AND PFT.intRowStatus = 0
				LEFT JOIN dbo.ffSection s ON s.idfsSection = p.idfsSection
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000101) RF ON S.idfsSection = RF.idfsReference
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000071) PTR ON PTR.idfsReference = P.idfsParameterType
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000066) PN ON PN.idfsReference = P.idfsParameter
				LEFT JOIN dbo.ffParameterDesignOption PDO ON PFT.idfsParameter = PDO.idfsParameter
					AND PFT.idfsFormTemplate = PDO.idfsFormTemplate
					AND PDO.idfsLanguage = @idfsLanguage
					AND PDO.intRowStatus = 0
				LEFT JOIN dbo.ffParameterDesignOption PDOE ON PFT.idfsParameter = PDOE.idfsParameter
					AND PFT.idfsFormTemplate = PDOE.idfsFormTemplate
					AND PDOE.idfsLanguage = @idfsEnglish
					AND PDOE.intRowStatus = 0
				LEFT JOIN dbo.ffSectionDesignOption sdo ON sdo.idfsSection = s.idfsSection 
					AND sdo.idfsFormTemplate = @idfsFormTemplate 
					AND sdo.idfsLanguage = @idfsLanguage
					AND sdo.intRowStatus = 0
				LEFT JOIN dbo.ffParameterType PT
					ON pt.idfsParameterType = p.idfsParameterType
				WHERE PFT.idfsFormTemplate = @idfsFormTemplate
				ORDER BY  sdo.intOrder
					,pdo.intOrder
				
				--To Get Correct ObservationID	
				INSERT INTO @observationsTable(idfsFormType,idfObservation)
				SELECT 
					@idfsFormType as idfsFormType,
					CASE 
						 WHEN @idfsFormType=10034007 THEN f.idfObservation --For EPI
						 WHEN @idfsFormType=10034008 THEN s.idfObservation --For SpeciesClinicalInvestigation
					END as idfObservation
				FROM dbo.tlbVetCase a	
				LEFT JOIN dbo.tlbFarm f ON a.idfFarm=f.idfFarm --EPI
				LEFT JOIN dbo.tlbHerd h ON h.idfFarm=f.idfFarm
				LEFT JOIN dbo.tlbMaterial m on m.idfVetCase=a.idfVetCase
				LEFT JOIN dbo.tlbSpecies s on s.idfHerd =h.idfHerd   --Mutiple rows(more than one idfObservation for Species)
				LEFT JOIN dbo.tlbAnimal ani ON ani.idfSpecies=s.idfSpecies --Mutiple rows(more than one idfObservation for Animal)
				WHERE a.intRowStatus = 0
				AND a.idfVetCase = @ObjID

				--Get Activity Parameters (dbo.USP_ADMIN_FF_ActivityParameters_GET)
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[varValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					AP.varValue,
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
				
				WHERE AP.idfObservation IN (SELECT DISTINCT idfObservation FROM @observationsTable WHERE idfsFormType=@idfsFormType)
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0
				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow

				--Report
				SELECT ParameterName
						,SectionName
						,SectionNameDefault
						,idfActivityParameters
						,idfRow
						,idfsParameter
						,Type
						,ParameterOrder
						,IIF(strNameValue IS NULL,varValue,strNameValue) AS varValue
						,strNameValue
						,idfsFormType
						,idfObservation
				FROM
				(
				SELECT	DISTINCT 
						ff.ParameterName
						,ff.SectionName
						,ff.SectionNameDefault
						,ap.idfActivityParameters
						,ap.idfRow
						--,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType') AS varValueType
						,ff.idfsParameter
						,ap.Type
						,ff.ParameterOrder
						,ap.varValue AS varValue
						,CASE SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType') 
							WHEN 'nvarchar' THEN CAST(ap.varValue AS NVARCHAR(3000)) 
							ELSE ISNULL(SNT.strTextString, BR.strDefault) END AS strNameValue
						,@idfsFormType AS idfsFormType
						,ot.idfObservation
				FROM @tempFlexForm ff 
				CROSS JOIN @observationsTable ot 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter AND ot.idfObservation=ap.idfObservation
				LEFT JOIN dbo.ffParameter P ON ap.idfsParameter = P.idfsParameter AND P.idfsEditor = 10067002 AND P.intRowStatus = 0
				--LEFT JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID, 19000066) FFP ON FFP.idfsReference = CASE WHEN CAST(SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType') AS NVARCHAR(10)) = 'bigint'																			 
				--																							 THEN CAST(ap.varValue AS BIGINT)
				--																								--ELSE -1
				--																								END 
				
				LEFT JOIN dbo.trtBaseReference BR ON BR.idfsBaseReference = CASE WHEN CAST(SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType') AS NVARCHAR(10)) = 'bigint'																			 
																				 THEN CAST(ap.varValue AS BIGINT)
																			--ELSE - 1
																			END 
				LEFT JOIN dbo.trtStringNameTranslation SNT ON SNT.idfsBaseReference = CASE WHEN (SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType') = 'bigint')																				 
																				 THEN CAST(ap.varValue AS BIGINT)
																			--ELSE - 1
																			END 
															AND SNT.idfsLanguage = @idfsLanguage AND SNT.intRowStatus = 0
				) A
				ORDER BY 12,8 --ap.idfObservation,ff.ParameterOrder
			END

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT = 1
			ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Procedure [Report].[USP_REP_HUM_FF_ActivityParameters_GET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USP_REP_HUM_FF_ActivityParameters_GET
-- Description: Human Report
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Srini Goli		10/23/2022	Initial release for Human Disease Report.
-- Srini Goli		10/24/2022	Added IIF caluse for strNameValue

/*
--Use below codes for idfsFormType
Clinical Information-Symptoms = 10034010,
Case Investigation: Risk Factors = 10034011

--Clinical Information-Symptoms
EXEC    [Report].[USP_REP_HUM_FF_ActivityParameters_GET]
        @LangID = N'en-US',  --ka-GE
		@idfsDiagnosis ='9842460000000',
        @idfsFormType = 10034010,
        @ObjID = '121488' --@idfHumanCase

--Case Investigation: Risk Factors
EXEC    [Report].[USP_REP_HUM_FF_ActivityParameters_GET]
        @LangID = N'en-US',  --ka-GE
		@idfsDiagnosis ='9842460000000',
        @idfsFormType = 10034011,
        @ObjID = '121488' --@idfHumanCase


*/
-- ================================================================================================
CREATE PROCEDURE [Report].[USP_REP_HUM_FF_ActivityParameters_GET] (
	@LangID AS NVARCHAR(50)
	,@idfsDiagnosis				BIGINT 
	,@idfsFormType AS  BIGINT
	,@ObjID AS BIGINT  
	)
AS
BEGIN
	DECLARE @idfsCountry AS BIGINT,
			@idfsLanguage BIGINT = dbo.FN_GBL_LanguageCode_GET(@LangID),
			@idfsEnglish BIGINT = dbo.FN_GBL_LanguageCode_GET('en-US')
	DECLARE @tmpTemplate AS TABLE (
		idfsFormTemplate BIGINT
		,IsUNITemplate BIT
		)

	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

   DECLARE @tempFlexForm TABLE (
		idfsParentSection BIGINT
		,idfsSection BIGINT
		,idfsParameter BIGINT
		,SectionNameDefault NVARCHAR(2000)
		,SectionName NVARCHAR(2000)
		,ParameterName NVARCHAR(2000)
		,parameterType NVARCHAR(1000)
		,idfsParameterType BIGINT
		,idfsReferenceType BIGINT
		,idfsEditor BIGINT
		,SectionOrder INT
		,ParameterOrder INT
		,blnGrid BIT
		,blnFixedRowSet BIT
		,idfsEditMode BIGINT
		,idfsFormTemplate BIGINT
		)

	DECLARE @tmpActivityParameters TABLE (
		[idfActivityParameters] BIGINT,
		[idfObservation] BIGINT,
		[idfsFormTemplate] BIGINT,
		[idfsParameter] BIGINT,
		[idfsSection] BIGINT,
		[idfRow] BIGINT,
		[Type] BIGINT,
		[varValue] sql_variant,
		[numRow] INT,
		[ParameterType]  BIGINT
		)

	DECLARE @observationsTable TABLE (
		[idfsFormType] BIGINT,
		[idfObservation] BIGINT
		)

	BEGIN TRY
			BEGIN
				DECLARE @idfsFormTemplate BIGINT,
						@idfObservation BIGINT

				--Get this logic from dbo.USP_ADMIN_FF_FlexForm_Get
				IF @idfsFormTemplate IS NULL
					BEGIN
						--Obtain idfsFormTemplate, via given parameters of idfsDiagnosis and idfsFormType
						---------------------------------------------------------------------------------
						SET @idfsCountry = dbo.FN_GBL_CurrentCountry_GET()

						INSERT INTO @tmpTemplate
						EXECUTE dbo.USP_ADMIN_FF_ActualTemplate_GET 
							@idfsCountry,
							@idfsDiagnosis,
							@idfsFormType

						SELECT TOP 1 @idfsFormTemplate = idfsFormTemplate
						FROM @tmpTemplate

						IF @idfsFormTemplate = - 1
							SET @idfsFormTemplate = NULL

						---------------------------------------------------------------------------------
					END

				--Get Flex Form header details
				INSERT INTO @tempFlexForm
				SELECT 
					s.idfsParentSection
					,COALESCE(p.idfsSection,0) AS idfsSection
					,p.idfsParameter
					,RF.strDefault AS SectionNameDefault
					,RF.Name AS SectionName
					,PN.Name AS ParameterName
					,PTR.Name AS parameterType
					,p.idfsParameterType
					,pt.idfsReferenceType
					,p.idfsEditor
					,sdo.intOrder	AS SectionOrder
					,ISNULL(PDO.intOrder,PDOE.intOrder)	AS ParameterOrder
					,s.blnGrid
					,s.blnFixedRowSet
					,PFT.idfsEditMode
					,pft.idfsFormTemplate
				FROM dbo.ffParameter p
				LEFT JOIN dbo.ffParameterForTemplate PFT ON PFT.idfsParameter = p.idfsParameter AND PFT.intRowStatus = 0
				LEFT JOIN dbo.ffSection s ON s.idfsSection = p.idfsSection
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000101) RF ON S.idfsSection = RF.idfsReference
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000071) PTR ON PTR.idfsReference = P.idfsParameterType
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000066) PN ON PN.idfsReference = P.idfsParameter
				LEFT JOIN dbo.ffParameterDesignOption PDO ON PFT.idfsParameter = PDO.idfsParameter
					AND PFT.idfsFormTemplate = PDO.idfsFormTemplate
					AND PDO.idfsLanguage = @idfsLanguage
					AND PDO.intRowStatus = 0
				LEFT JOIN dbo.ffParameterDesignOption PDOE ON PFT.idfsParameter = PDOE.idfsParameter
					AND PFT.idfsFormTemplate = PDOE.idfsFormTemplate
					AND PDOE.idfsLanguage = @idfsEnglish
					AND PDOE.intRowStatus = 0
				LEFT JOIN dbo.ffSectionDesignOption sdo ON sdo.idfsSection = s.idfsSection 
					AND sdo.idfsFormTemplate = @idfsFormTemplate 
					AND sdo.idfsLanguage = @idfsLanguage
					AND sdo.intRowStatus = 0
				LEFT JOIN dbo.ffParameterType PT
					ON pt.idfsParameterType = p.idfsParameterType
				WHERE PFT.idfsFormTemplate = @idfsFormTemplate
				ORDER BY  sdo.intOrder
					,pdo.intOrder
	
				--To Get Correct ObservationID	
				INSERT INTO @observationsTable(idfsFormType,idfObservation)
				SELECT 
					@idfsFormType as idfsFormType,
					CASE WHEN @idfsFormType=10034010 THEN a.idfCSObservation --For AnimalClinicalSigns
						 WHEN @idfsFormType=10034011 THEN a.idfEpiObservation --For ControlMeasures
					END as idfObservation
				FROM dbo.tlbHumanCase a	
				--LEFT JOIN dbo.tlbFarm f ON a.idfHuman=f.idfFarm --EPI
				--LEFT JOIN dbo.tlbHerd h ON h.idfFarm=f.idfFarm
				--LEFT JOIN dbo.tlbMaterial m on m.idfVetCase=a.idfVetCase
				--LEFT JOIN dbo.tlbSpecies s on s.idfHerd =h.idfHerd   --Mutiple rows(more than one idfObservation for Species)
				--LEFT JOIN dbo.tlbAnimal ani ON ani.idfSpecies=s.idfSpecies --Mutiple rows(more than one idfObservation for Animal)
				WHERE a.intRowStatus = 0
				AND a.idfHumanCase = @ObjID

				--Get Activity Parameters (dbo.USP_ADMIN_FF_ActivityParameters_GET)
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[varValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					AP.varValue,
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
				
				WHERE AP.idfObservation IN (SELECT DISTINCT idfObservation FROM @observationsTable WHERE idfsFormType=@idfsFormType)
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0
				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow

				--Report
				SELECT	DISTINCT 
						ff.ParameterName
						,ff.SectionName
						,ff.SectionNameDefault
						,ap.idfActivityParameters
						,ap.idfRow
						--,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType') AS varValueType
						,ff.idfsParameter
						,ap.Type
						,ff.ParameterOrder
						,ap.varValue AS varValue
						,IIF(ap.varValue=-1,'',CASE SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType') 
							WHEN 'nvarchar' THEN CAST(ap.varValue AS NVARCHAR(300)) 
							ELSE ISNULL(SNT.strTextString, BR.strDefault) END) AS strNameValue
						,@idfsFormType AS idfsFormType
						,ot.idfObservation
				FROM @tempFlexForm ff 
				CROSS JOIN @observationsTable ot 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter AND ot.idfObservation=ap.idfObservation
				LEFT JOIN dbo.ffParameter P ON ap.idfsParameter = P.idfsParameter AND P.idfsEditor = 10067002 AND P.intRowStatus = 0
				--LEFT JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID, 19000066) FFP ON FFP.idfsReference = CASE WHEN CAST(SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType') AS NVARCHAR(10)) = 'bigint'																			 
				--																							 THEN CAST(ap.varValue AS BIGINT)
				--																								--ELSE -1
				--																								END 
				
				LEFT JOIN dbo.trtBaseReference BR ON BR.idfsBaseReference = CASE WHEN CAST(SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType') AS NVARCHAR(10)) = 'bigint'																			 
																				 THEN CAST(ap.varValue AS BIGINT)
																			--ELSE - 1
																			END 
				LEFT JOIN dbo.trtStringNameTranslation SNT ON SNT.idfsBaseReference = CASE WHEN (SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType') = 'bigint')																				 
																				 THEN CAST(ap.varValue AS BIGINT)
																			--ELSE - 1
																			END 
															AND SNT.idfsLanguage = @idfsLanguage AND SNT.intRowStatus = 0

				ORDER BY 12,8 --ap.idfObservation,ff.ParameterOrder

			END

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT = 1
			ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Procedure [Report].[USP_REP_Veterinary_Aggregate_Action_Summary_Report_Header]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USP_REP_Veterinary_Aggregate_Action_Summary_Report_Header
-- Description: PrintedForm Veterinary Aggregate Action Report
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Srini Goli		10/12/2022	Initial release for Veterinary Aggregate Action Summary Report.
--
-- Testing code:
--
-- Legends
/*
	Case Type
	HumanAggregateCase = 10102001
	VetAggregateCase = 10102002
	VetAggregateAction = 10102003

	TEST Code

	EXEC Report.USP_REP_Veterinary_Aggregate_Action_Summary_Report_Header 'en-US', @idfsAggrCaseType=10102002, @idfAggrCaseList = '155564770001956;155564770001955'

*/
-- ================================================================================================
CREATE PROCEDURE [Report].[USP_REP_Veterinary_Aggregate_Action_Summary_Report_Header] (
	@LangID AS NVARCHAR(50)
	,@idfsAggrCaseType AS BIGINT = NULL
	,@idfAggrCaseList AS  NVARCHAR(MAX)= NULL
	)
AS
BEGIN
DECLARE @returnCode INT = 0;
DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

DECLARE @AggrCaseTable TABLE (
	[idfAggrCase] BIGINT,
	[intRowNumber] INT
	)

	BEGIN TRY
		--Get Selected Agg Cases
		INSERT INTO @AggrCaseTable (
				[idfAggrCase],
				[intRowNumber]
				)
		SELECT CAST([Value] AS BIGINT),
			ROW_NUMBER() OVER (
				ORDER BY [Value]
				)
		FROM [dbo].[FN_GBL_SYS_SplitList](@idfAggrCaseList, NULL, NULL)

		--Get the necessary columns from [dbo].[USP_AGG_CASE_GETDETAIL]
		SELECT datStartDate
			,datFinishDate
			,strCaseID
			,strRegion
			,strRayon
			,strSettlement
			,CONCAT(ISNULL(strCountry,''),IIF(ISNULL(strRegion,'')!='',', ',''),ISNULL(strRegion,''),IIF(ISNULL(strRayon,'')!='',', ',''),ISNULL(strRayon,''),IIF(ISNULL(strSettlement,'')!='',', ',''),ISNULL(strSettlement,'')) As strLocation
		FROM
		(
		SELECT 
			a.datStartDate
			,a.datFinishDate
			,a.strCaseID
			--,ISNULL(Country.idfsReference, '') AS idfsCountry
			,ISNULL(Country.[name], '') AS strCountry
			--,ISNULL(Region.idfsReference, '') AS idfsRegion
			,ISNULL(Region.[name], '') AS strRegion
			--,ISNULL(Rayon.idfsReference, '') AS idfsRayon
			,ISNULL(Rayon.[name], '') AS strRayon
			--,ISNULL(Settlement.idfsReference, '') AS idfsSettlement
			,ISNULL(Settlement.[name], '') AS strSettlement
		FROM dbo.tlbAggrCase a
		LEFT JOIN dbo.tlbOffice RBO ON RBO.idfOffice = a.idfReceivedByOffice
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) RBON ON RBON.idfsReference = RBO.idfsOfficeAbbreviation

		LEFT JOIN dbo.tlbOffice EBO ON EBO.idfOffice = a.idfEnteredByOffice
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) EBON ON EBON.idfsReference = EBO.idfsOfficeAbbreviation

		LEFT JOIN dbo.tlbOffice SBO ON SBO.idfOffice = a.idfSentByOffice
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) SBON ON SBON.idfsReference = SBO.idfsOfficeAbbreviation
		
		LEFT JOIN dbo.tlbPerson ReceivedByPerson ON a.idfReceivedByPerson = ReceivedByPerson.idfPerson
		LEFT JOIN dbo.tlbPerson EnteredByPerson ON a.idfEnteredByPerson = EnteredByPerson.idfPerson
		LEFT JOIN dbo.tlbPerson SentByPerson ON a.idfSentByPerson = SentByPerson.idfPerson
		
		INNER JOIN dbo.gisLocation AUL ON AUL.idfsLocation = a.idfsAdministrativeUnit
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001) AS Country ON AUL.node.IsDescendantOf(Country.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003) AS Region ON AUL.node.IsDescendantOf(Region.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000002) AS Rayon ON AUL.node.IsDescendantOf(Rayon.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000004) AS Settlement ON AUL.node.IsDescendantOf(Settlement.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS LocType ON LocType.idfsReference = Settlement.idfsType
		
		LEFT JOIN dbo.trtStringNameTranslation Period ON Period.idfsBaseReference = CASE 
				WHEN DATEDIFF(DAY, a.datStartDate, a.datFinishDate) = 0
					THEN 10091002 /*day*/
				WHEN DATEDIFF(DAY, a.datStartDate, a.datFinishDate) = 6
					THEN 10091004 /*week - use datediff with day because datediff with week will return incorrect result if first day of week in country differ from sunday*/
				WHEN DATEDIFF(MONTH, a.datStartDate, a.datFinishDate) = 0
					THEN 10091001 /*month*/
				WHEN DATEDIFF(QUARTER, a.datStartDate, a.datFinishDate) = 0
					THEN 10091003 /*quarter*/
				WHEN DATEDIFF(YEAR, a.datStartDate, a.datFinishDate) = 0
					THEN 10091005 /*year*/
				END
			AND Period.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LangID)
		--LEFT JOIN dbo.tlbObservation CaseObs ON idfCaseObservation = CaseObs.idfObservation
		--LEFT JOIN dbo.tlbObservation DiagnosticObs ON idfDiagnosticObservation = DiagnosticObs.idfObservation
		--LEFT JOIN dbo.tlbObservation ProphylacticObs ON idfProphylacticObservation = ProphylacticObs.idfObservation
		--LEFT JOIN dbo.tlbObservation SanitaryObs ON idfSanitaryObservation = SanitaryObs.idfObservation
		--LEFT JOIN dbo.FN_GBL_Institution(@LangID) AS organizationAdminUnit ON a.idfOffice = organizationAdminUnit.idfOffice
		WHERE a.intRowStatus = 0
		AND a.idfAggrCase IN (SELECT idfAggrCase FROM @AggrCaseTable)
		--AND (@idfAggrCase IS NULL OR a.idfAggrCase = @idfAggrCase)
		--	AND (
		--		CASE 
		--			WHEN @idfsAggrCaseType IS NULL
		--				THEN 1
		--			WHEN ISNULL(a.idfsAggrCaseType, '') = @idfsAggrCaseType
		--				THEN 1
		--			ELSE 0
		--			END = 1
		--		)
		--	AND (
		--		CASE 
		--			WHEN @idfAggrCase IS NULL
		--				THEN 1
		--			WHEN ISNULL(a.idfAggrCase, '') = @idfAggrCase
		--				THEN 1
		--			ELSE 0
		--			END = 1
		--		) 
			) A;


	END TRY

	BEGIN CATCH
		THROW;
	END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Procedure [Report].[USP_REP_Veterinary_Aggregate_DiagnosticAction_Summary_Report_Detail]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USP_REP_Veterinary_Aggregate_DiagnosticAction_Summary_Report_Detail
-- Description: PrintedForm Veterinary Aggregate Report
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Mark Wilson		10/11/2022  initial cut.
-- Mike Kornegay	10/17/2022	Remove temp table (not compatible with EF Power Tools)
--
/*

EXEC    [Report].[USP_REP_Veterinary_Aggregate_DiagnosticAction_Summary_Report_Detail]
        @LangID = N'en-US',
        @idfAggrCaseList = 155564770001982

*/
-- ================================================================================================
CREATE PROCEDURE [Report].[USP_REP_Veterinary_Aggregate_DiagnosticAction_Summary_Report_Detail] 
(
	@LangID AS NVARCHAR(50),
	@idfAggrCaseList AS  NVARCHAR(MAX)= NULL
)
AS
BEGIN
	DROP TABLE IF EXISTS #tmpDetails;

	DECLARE @idfsCountry AS BIGINT,
			@idfsLanguage BIGINT = dbo.FN_GBL_LanguageCode_GET(@LangID);

	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

	DECLARE @AggrCaseTable TABLE (
		[idfAggrCase] BIGINT,
		[intRowNumber] INT
		)

	--Get Selected Agg Cases
	INSERT INTO @AggrCaseTable (
			[idfAggrCase],
			[intRowNumber]
			)
	SELECT CAST([Value] AS BIGINT),
		ROW_NUMBER() OVER (
			ORDER BY [Value]
			)
	FROM [dbo].[FN_GBL_SYS_SplitList](@idfAggrCaseList, NULL, NULL)

	DECLARE @tmpMatrix AS TABLE (
		intNumRow INT
		,idfAggrVetCaseMTX BIGINT
		,idfsDiagnosis BIGINT
		,idfsSpeciesType BIGINT
		,strDefault NVARCHAR(2000)
		,strOIECode NVARCHAR(100)
		,strAction NVARCHAR(300)
		)

   DECLARE @tempFlexForm TABLE (
		idfsParentSection BIGINT
		,idfsSection BIGINT
		,idfsParameter BIGINT
		,SectionName NVARCHAR(2000)
		,ParameterName NVARCHAR(500)
		,parameterType NVARCHAR(100)
		,idfsParameterType BIGINT
		,idfsReferenceType BIGINT
		,idfsEditor BIGINT
		,SectionOrder INT
		,ParameterOrder INT
		,blnGrid BIT
		,blnFixedRowSet BIT
		,idfsEditMode BIGINT
		,idfsFormTemplate BIGINT
		)

	DECLARE @observationsTable TABLE (
		[idfDiagnosticObservation] BIGINT,
		[idfDiagnosticVersion] BIGINT,
		[idfsCaseFormTemplate] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpActivityParameters TABLE (
		[idfActivityParameters] BIGINT,
		[idfObservation] BIGINT,
		[idfsFormTemplate] BIGINT,
		[idfsParameter] BIGINT,
		[idfsSection] BIGINT,
		[idfRow] BIGINT,
		--[intNumRow] INT,
		[Type] BIGINT,
		[varValue] sql_variant, --NVARCHAR(MAX),
		[numRow] INT,
		[ParameterType]  BIGINT
		)

	DECLARE @tmpSpeciesList TABLE (
		[idfBaseReference] BIGINT,
		strDefault NVARCHAR(2000),
		strSpecies NVARCHAR(100),
		[intRowNumber] INT
		--idfsReferenceType BIGINT
		)

	DECLARE @tmpDetails TABLE (
		idfDiagnosticObservation BIGINT,
		idfsCaseFormTemplate BIGINT,
		idfDiagnosticVersion BIGINT
	)

	BEGIN TRY

			BEGIN


				--Get this SQl from [dbo].[USP_AGG_CASE_GETDETAIL]
				INSERT INTO @tmpDetails (
					idfDiagnosticObservation,
					idfsCaseFormTemplate,
					idfDiagnosticVersion
				)
				SELECT 
					a.idfDiagnosticObservation
					,CaseObs.idfsFormTemplate AS idfsCaseFormTemplate
					,a.idfDiagnosticVersion
				--INTO #tmpDetails
				FROM dbo.tlbAggrCase a	
				LEFT JOIN dbo.tlbObservation CaseObs ON a.idfDiagnosticObservation = CaseObs.idfObservation
				WHERE a.intRowStatus = 0
				AND a.idfAggrCase IN (SELECT idfAggrCase FROM @AggrCaseTable)

				DECLARE @idfsFormTemplate BIGINT,
						@idfVersion BIGINT

				INSERT INTO @observationsTable (
					[idfDiagnosticObservation],
					[idfDiagnosticVersion],
					[idfsCaseFormTemplate],
					[intRowNumber]
					)
				SELECT [idfDiagnosticObservation],
					idfDiagnosticVersion,
					idfsCaseFormTemplate,
					ROW_NUMBER() OVER (
						ORDER BY [idfDiagnosticObservation]
						)
				FROM @tmpDetails

				SELECT @idfsFormTemplate=idfsCaseFormTemplate, 
						@idfVersion= idfDiagnosticVersion
				FROM @observationsTable
				--SELECT * FROM @observationsTable

				--Get this SQL from USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GET -- dbo.USP_CONF_ADMIN_AggregateHumanCaseMatrixReport_GET
				INSERT INTO @tmpMatrix
				SELECT	 
					mtx.intNumRow as intNumRow,
					mtx.idfAggrDiagnosticActionMTX,
					mtx.idfsDiagnosis,
					mtx.idfsSpeciesType,
					D.name AS strDefault,
					D.strOIECode,
					DA.name AS strAction

				FROM dbo.tlbAggrDiagnosticActionMTX mtx
				INNER JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID, 19000021) DA ON DA.idfsReference = mtx.idfsDiagnosticAction
				INNER JOIN dbo.FN_GBL_DiagnosisRepair(@LangID, 96, 10020002) D ON D.idfsDiagnosis = mtx.idfsDiagnosis  -- 2 = Human, use 10020002 for Aggregate cases

				WHERE mtx.intRowStatus = 0 AND  mtx.idfVersion = @idfVersion
				--ORDER BY mtx.intNumRow ASC

--------------------------------------------------------------------------------------------------------------------------------
				--SpicesList
				INSERT INTO @tmpSpeciesList
				EXEC dbo.USP_CONF_GetSpeciesList_GET 
						@idfsBaseReference= 19000086,
						@intHACode=96,
						@strLanguageID=@LangID --@idfVersion=19000086
				
				--Get Flex Form for Diagnostic Actions details
				INSERT INTO @tempFlexForm
				SELECT 
					s.idfsParentSection
					,COALESCE(p.idfsSection,0) AS idfsSection
					,p.idfsParameter
					,RF.Name AS SectionName
					,PN.Name AS ParameterName
					,PTR.Name AS parameterType
					,p.idfsParameterType
					,pt.idfsReferenceType
					,p.idfsEditor
					,sdo.intOrder	AS SectionOrder
					,PDO.intOrder	AS ParameterOrder
					,s.blnGrid
					,s.blnFixedRowSet
					,PFT.idfsEditMode
					,pft.idfsFormTemplate
				FROM dbo.ffParameter p
				LEFT JOIN dbo.ffParameterForTemplate PFT ON PFT.idfsParameter = p.idfsParameter AND PFT.intRowStatus = 0
				LEFT JOIN dbo.ffSection s ON s.idfsSection = p.idfsSection
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000101) RF ON S.idfsSection = RF.idfsReference
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000071) PTR ON PTR.idfsReference = P.idfsParameterType
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000066) PN ON PN.idfsReference = P.idfsParameter
				LEFT JOIN dbo.ffParameterDesignOption PDO ON PFT.idfsParameter = PDO.idfsParameter
					AND PFT.idfsFormTemplate = PDO.idfsFormTemplate
					AND PDO.idfsLanguage = @idfsLanguage
					AND PDO.intRowStatus = 0
				LEFT JOIN dbo.ffSectionDesignOption sdo ON sdo.idfsSection = s.idfsSection 
					AND sdo.idfsFormTemplate = @idfsFormTemplate 
					AND sdo.idfsLanguage = @idfsLanguage
					AND sdo.intRowStatus = 0
				LEFT JOIN dbo.ffParameterType PT
					ON pt.idfsParameterType = p.idfsParameterType
				WHERE PFT.idfsFormTemplate = @idfsFormTemplate


				--EXEC [dbo].[USP_ADMIN_FF_FlexForm_Get] 
				--		@LangID =@LangID, 
				--		@idfsDiagnosis= NULL, 
				--		@idfsFormType = 10034023, 
				--		@idfsFormTemplate=@idfsFormTemplate

--				SELECT * FROM @tempFlexForm

				--Get Activity Parameters
				--INSERT INTO @tmpActivityParameters
				--EXEC dbo.USP_ADMIN_FF_ActivityParameters_GET
				--		@observationList = @observationList, 
				--		@LangID = @LangID
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[varValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					AP.varValue,
					--CAST(AP.varValue AS NVARCHAR(MAX)),
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfDiagnosticObservation FROM @observationsTable)
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0
				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow


				--Report
				SELECT	ff.ParameterName
						,sl.strSpecies
						,ff.idfsParameter
						,ff.ParameterOrder
						,m.idfsDiagnosis
						,m.strDefault
						,m.strOIECode
						,m.strAction
						,m.intNumRow
						,SUM(CAST(ap.varValue AS INT)) AS varValue--ap.idfRow,m.idfAggrHumanCaseMTX as idfRow
						,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')

				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter AND m.idfAggrVetCaseMTX=ap.idfRow
				LEFT JOIN @tmpSpeciesList sl ON sl.idfBaseReference=m.idfsSpeciesType
				GROUP BY
					ff.ParameterName
					,sl.strSpecies
					,ff.idfsParameter
					,ff.ParameterOrder
					,m.idfsDiagnosis
					,m.strDefault
					,m.strOIECode
					,m.strAction
					,m.intNumRow
					,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')
				ORDER BY intNumRow

			END

		--DROP TABLE IF EXISTS #tmpDetails;

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT = 1
			ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Procedure [Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Header]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO

-- ================================================================================================
-- Name: USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Header
-- Description: PrintedForm Veterinary Aggregate Report
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Srini Goli		09/04/2022	Initial release for Veterinary Aggregate Report.
--
-- Testing code:
--
-- Legends
/*
	Case Type
	HumanAggregateCase = 10102001
	VetAggregateCase = 10102002
	VetAggregateAction = 10102003

	TEST Code

	EXEC Report.USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Header 'en-US', @idfsAggrCaseType=10102002, @idfAggrCaseList = '155564770001956;155564770001955'

*/
-- ================================================================================================
CREATE PROCEDURE [Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Header] (
	@LangID AS NVARCHAR(50)
	,@idfsAggrCaseType AS BIGINT = NULL
	,@idfAggrCaseList AS  NVARCHAR(MAX)= NULL
	)
AS
BEGIN
DECLARE @returnCode INT = 0;
DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

DECLARE @AggrCaseTable TABLE (
	[idfAggrCase] BIGINT,
	[intRowNumber] INT
	)

	BEGIN TRY
		--Get Selected Agg Cases
		INSERT INTO @AggrCaseTable (
				[idfAggrCase],
				[intRowNumber]
				)
		SELECT CAST([Value] AS BIGINT),
			ROW_NUMBER() OVER (
				ORDER BY [Value]
				)
		FROM [dbo].[FN_GBL_SYS_SplitList](@idfAggrCaseList, NULL, NULL)

		--Get the necessary columns from [dbo].[USP_AGG_CASE_GETDETAIL]
		SELECT datStartDate
			,datFinishDate
			,strCaseID
			,strRegion
			,strRayon
			,strSettlement
			,CONCAT(ISNULL(strCountry,''),IIF(ISNULL(strRegion,'')!='',', ',''),ISNULL(strRegion,''),IIF(ISNULL(strRayon,'')!='',', ',''),ISNULL(strRayon,''),IIF(ISNULL(strSettlement,'')!='',', ',''),ISNULL(strSettlement,'')) AS strLocation
		FROM
		(
		SELECT 
			a.datStartDate
			,a.datFinishDate
			,a.strCaseID
			--,ISNULL(Country.idfsReference, '') AS idfsCountry
			,ISNULL(Country.[name], '') AS strCountry
			--,ISNULL(Region.idfsReference, '') AS idfsRegion
			,ISNULL(Region.[name], '') AS strRegion
			--,ISNULL(Rayon.idfsReference, '') AS idfsRayon
			,ISNULL(Rayon.[name], '') AS strRayon
			--,ISNULL(Settlement.idfsReference, '') AS idfsSettlement
			,ISNULL(Settlement.[name], '') AS strSettlement
		FROM dbo.tlbAggrCase a
		LEFT JOIN dbo.tlbOffice RBO ON RBO.idfOffice = a.idfReceivedByOffice
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) RBON ON RBON.idfsReference = RBO.idfsOfficeAbbreviation

		LEFT JOIN dbo.tlbOffice EBO ON EBO.idfOffice = a.idfEnteredByOffice
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) EBON ON EBON.idfsReference = EBO.idfsOfficeAbbreviation

		LEFT JOIN dbo.tlbOffice SBO ON SBO.idfOffice = a.idfSentByOffice
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) SBON ON SBON.idfsReference = SBO.idfsOfficeAbbreviation
		
		LEFT JOIN dbo.tlbPerson ReceivedByPerson ON a.idfReceivedByPerson = ReceivedByPerson.idfPerson
		LEFT JOIN dbo.tlbPerson EnteredByPerson ON a.idfEnteredByPerson = EnteredByPerson.idfPerson
		LEFT JOIN dbo.tlbPerson SentByPerson ON a.idfSentByPerson = SentByPerson.idfPerson
		
		INNER JOIN dbo.gisLocation AUL ON AUL.idfsLocation = a.idfsAdministrativeUnit
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001) AS Country ON AUL.node.IsDescendantOf(Country.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003) AS Region ON AUL.node.IsDescendantOf(Region.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000002) AS Rayon ON AUL.node.IsDescendantOf(Rayon.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000004) AS Settlement ON AUL.node.IsDescendantOf(Settlement.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS LocType ON LocType.idfsReference = Settlement.idfsType
		
		LEFT JOIN dbo.trtStringNameTranslation Period ON Period.idfsBaseReference = CASE 
				WHEN DATEDIFF(DAY, a.datStartDate, a.datFinishDate) = 0
					THEN 10091002 /*day*/
				WHEN DATEDIFF(DAY, a.datStartDate, a.datFinishDate) = 6
					THEN 10091004 /*week - use datediff with day because datediff with week will return incorrect result if first day of week in country differ from sunday*/
				WHEN DATEDIFF(MONTH, a.datStartDate, a.datFinishDate) = 0
					THEN 10091001 /*month*/
				WHEN DATEDIFF(QUARTER, a.datStartDate, a.datFinishDate) = 0
					THEN 10091003 /*quarter*/
				WHEN DATEDIFF(YEAR, a.datStartDate, a.datFinishDate) = 0
					THEN 10091005 /*year*/
				END
			AND Period.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LangID)
		--LEFT JOIN dbo.tlbObservation CaseObs ON idfCaseObservation = CaseObs.idfObservation
		--LEFT JOIN dbo.tlbObservation DiagnosticObs ON idfDiagnosticObservation = DiagnosticObs.idfObservation
		--LEFT JOIN dbo.tlbObservation ProphylacticObs ON idfProphylacticObservation = ProphylacticObs.idfObservation
		--LEFT JOIN dbo.tlbObservation SanitaryObs ON idfSanitaryObservation = SanitaryObs.idfObservation
		--LEFT JOIN dbo.FN_GBL_Institution(@LangID) AS organizationAdminUnit ON a.idfOffice = organizationAdminUnit.idfOffice
		WHERE a.intRowStatus = 0
		AND a.idfAggrCase IN (SELECT idfAggrCase FROM @AggrCaseTable)
		--AND (@idfAggrCase IS NULL OR a.idfAggrCase = @idfAggrCase)
		--	AND (
		--		CASE 
		--			WHEN @idfsAggrCaseType IS NULL
		--				THEN 1
		--			WHEN ISNULL(a.idfsAggrCaseType, '') = @idfsAggrCaseType
		--				THEN 1
		--			ELSE 0
		--			END = 1
		--		)
		--	AND (
		--		CASE 
		--			WHEN @idfAggrCase IS NULL
		--				THEN 1
		--			WHEN ISNULL(a.idfAggrCase, '') = @idfAggrCase
		--				THEN 1
		--			ELSE 0
		--			END = 1
		--		) 
			) A;


	END TRY

	BEGIN CATCH
		THROW;
	END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Procedure [Report].[USP_REP_Veterinary_Aggregate_ProphylacticAction_Summary_Report_Detail]...';


GO
-- ================================================================================================
-- Name: USP_REP_Veterinary_Aggregate_ProphylacticAction_Summary_Report_Detail
-- Description: PrintedForm Veterinary Aggregate Report
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Mark Wilson		10/11/2022  initial cut.
-- Mike Kornegay	10/17/2022	Remove temp table (not compatible with EF Power Tools)
-- Mike Kornegay	10/25/2022  Separate numerical results from string results
/*

EXEC    [Report].[USP_REP_Veterinary_Aggregate_ProphylacticAction_Summary_Report_Detail]
        @LangID = N'en-US',
        @idfAggrCaseList = '128822070001294;127398630001294;121195250001294'

*/
-- ================================================================================================
CREATE PROCEDURE [Report].[USP_REP_Veterinary_Aggregate_ProphylacticAction_Summary_Report_Detail] 
(
	@LangID AS NVARCHAR(50),
	@idfAggrCaseList AS  NVARCHAR(MAX)= NULL
)
AS
BEGIN
	DROP TABLE IF EXISTS #tmpDetails;

	DECLARE @idfsCountry AS BIGINT,
			@idfsLanguage BIGINT = dbo.FN_GBL_LanguageCode_GET(@LangID);

	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

	DECLARE @AggrCaseTable TABLE (
		[idfAggrCase] BIGINT,
		[intRowNumber] INT
		)

	--Get Selected Agg Cases
	INSERT INTO @AggrCaseTable (
			[idfAggrCase],
			[intRowNumber]
			)
	SELECT CAST([Value] AS BIGINT),
		ROW_NUMBER() OVER (
			ORDER BY [Value]
			)
	FROM [dbo].[FN_GBL_SYS_SplitList](@idfAggrCaseList, NULL, NULL)

	DECLARE @tmpMatrix AS TABLE (
		intNumRow INT
		,idfAggrVetCaseMTX BIGINT
		,idfsDiagnosis BIGINT
		,idfsSpeciesType BIGINT
		,strDefault NVARCHAR(2000)
		,strOIECode NVARCHAR(100)
		,strActionCode NVARCHAR(200)
		,strAction NVARCHAR(300)
		)

   DECLARE @tempFlexForm TABLE (
		idfsParentSection BIGINT
		,idfsSection BIGINT
		,idfsParameter BIGINT
		,SectionName NVARCHAR(2000)
		,ParameterName NVARCHAR(500)
		,parameterType NVARCHAR(100)
		,idfsParameterType BIGINT
		,idfsReferenceType BIGINT
		,idfsEditor BIGINT
		,SectionOrder INT
		,ParameterOrder INT
		,blnGrid BIT
		,blnFixedRowSet BIT
		,idfsEditMode BIGINT
		,idfsFormTemplate BIGINT
		)

	DECLARE @observationsTable TABLE (
		[idfProphylacticObservation] BIGINT,
		[idfProphylacticVersion] BIGINT,
		[idfsCaseFormTemplate] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpActivityParameters TABLE (
		[idfActivityParameters] BIGINT,
		[idfObservation] BIGINT,
		[idfsFormTemplate] BIGINT,
		[idfsParameter] BIGINT,
		[idfsSection] BIGINT,
		[idfRow] BIGINT,
		[Type] BIGINT,
		[intValue] INT,
		[varValue] sql_variant, --NVARCHAR(MAX),
		[numRow] INT,
		[ParameterType]  BIGINT
		)

	DECLARE @tmpSpeciesList TABLE (
		[idfBaseReference] BIGINT,
		strDefault NVARCHAR(2000),
		strSpecies NVARCHAR(100),
		[intRowNumber] INT
		)

	DECLARE @tmpDetails TABLE (
		idfProphylacticObservation BIGINT,
		idfsCaseFormTemplate BIGINT,
		idfProphylacticVersion BIGINT
	)

	DECLARE @FinalReportTable TABLE 
	(
		ParameterName NVARCHAR(300),
		strSpecies NVARCHAR(300),
		idfsParameter BIGINT,
		ParameterOrder INT,
		idfsDiagnosis BIGINT,
		strDefault NVARCHAR(300),
		strOIECode NVARCHAR(300),
		numRow INT,
		intValue INT,
		varValue SQL_VARIANT,
		strActionCode NVARCHAR(300),
		strAction NVARCHAR(300)
	)

	BEGIN TRY

			BEGIN


				--Get this SQl from [dbo].[USP_AGG_CASE_GETDETAIL]
				INSERT INTO @tmpDetails
				SELECT 
					a.idfProphylacticObservation
					,CaseObs.idfsFormTemplate AS idfsCaseFormTemplate
					,a.idfProphylacticVersion
				--INTO #tmpDetails
				FROM dbo.tlbAggrCase a	
				LEFT JOIN dbo.tlbObservation CaseObs ON a.idfProphylacticObservation = CaseObs.idfObservation
				WHERE a.intRowStatus = 0
				AND a.idfAggrCase IN (SELECT idfAggrCase FROM @AggrCaseTable)

				DECLARE @idfsFormTemplate BIGINT,
						@idfVersion BIGINT

				INSERT INTO @observationsTable (
					[idfProphylacticObservation],
					[idfProphylacticVersion],
					[idfsCaseFormTemplate],
					[intRowNumber]
					)
				SELECT [idfProphylacticObservation],
					idfProphylacticVersion,
					idfsCaseFormTemplate,
					ROW_NUMBER() OVER (
						ORDER BY [idfProphylacticObservation]
						)
				FROM @tmpDetails

				SELECT @idfsFormTemplate=idfsCaseFormTemplate, 
						@idfVersion= idfProphylacticVersion
				FROM @observationsTable
				--SELECT * FROM @observationsTable

				--Get this SQL from USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GET -- dbo.USP_CONF_ADMIN_AggregateHumanCaseMatrixReport_GET
				INSERT INTO @tmpMatrix
				SELECT	 
					mtx.intNumRow as intNumRow,
					mtx.idfAggrProphylacticActionMTX,
					mtx.idfsDiagnosis,
					mtx.idfsSpeciesType,
					D.name AS strDefault,
					D.strOIECode,
					PAC.strActionCode,
					PA.name AS strAction

				FROM dbo.tlbAggrProphylacticActionMTX mtx
				INNER JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID, 19000074) PA ON PA.idfsReference = mtx.idfsProphilacticAction
				INNER JOIN dbo.trtProphilacticAction PAC ON PAC.idfsProphilacticAction = PA.idfsReference
				INNER JOIN dbo.FN_GBL_DiagnosisRepair(@LangID, 96, 10020002) D ON D.idfsDiagnosis = mtx.idfsDiagnosis  -- 2 = Human, use 10020002 for Aggregate cases

				WHERE mtx.intRowStatus = 0 AND  mtx.idfVersion = @idfVersion
				ORDER BY mtx.intNumRow ASC

--------------------------------------------------------------------------------------------------------------------------------
				--SpicesList
				INSERT INTO @tmpSpeciesList
				EXEC dbo.USP_CONF_GetSpeciesList_GET 
						@idfsBaseReference= 19000086,
						@intHACode=96,
						@strLanguageID=@LangID --@idfVersion=19000086
				
				--Get Flex Form for Prophylactic Actions details
				INSERT INTO @tempFlexForm
				SELECT 
					s.idfsParentSection
					,COALESCE(p.idfsSection,0) AS idfsSection
					,p.idfsParameter
					,RF.Name AS SectionName
					,PN.Name AS ParameterName
					,PTR.Name AS parameterType
					,p.idfsParameterType
					,pt.idfsReferenceType
					,p.idfsEditor
					,sdo.intOrder	AS SectionOrder
					,PDO.intOrder	AS ParameterOrder
					,s.blnGrid
					,s.blnFixedRowSet
					,PFT.idfsEditMode
					,pft.idfsFormTemplate
				FROM dbo.ffParameter p
				LEFT JOIN dbo.ffParameterForTemplate PFT ON PFT.idfsParameter = p.idfsParameter AND PFT.intRowStatus = 0
				LEFT JOIN dbo.ffSection s ON s.idfsSection = p.idfsSection
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000101) RF ON S.idfsSection = RF.idfsReference
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000071) PTR ON PTR.idfsReference = P.idfsParameterType
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000066) PN ON PN.idfsReference = P.idfsParameter
				LEFT JOIN dbo.ffParameterDesignOption PDO ON PFT.idfsParameter = PDO.idfsParameter
					AND PFT.idfsFormTemplate = PDO.idfsFormTemplate
					AND PDO.idfsLanguage = @idfsLanguage
					AND PDO.intRowStatus = 0
				LEFT JOIN dbo.ffSectionDesignOption sdo ON sdo.idfsSection = s.idfsSection 
					AND sdo.idfsFormTemplate = @idfsFormTemplate 
					AND sdo.idfsLanguage = @idfsLanguage
					AND sdo.intRowStatus = 0
				LEFT JOIN dbo.ffParameterType PT
					ON pt.idfsParameterType = p.idfsParameterType
				WHERE PFT.idfsFormTemplate = @idfsFormTemplate


				--EXEC [dbo].[USP_ADMIN_FF_FlexForm_Get] 
				--		@LangID =@LangID, 
				--		@idfsDiagnosis= NULL, 
				--		@idfsFormType = 10034023, 
				--		@idfsFormTemplate=@idfsFormTemplate

--				SELECT * FROM @tempFlexForm

				--Get Activity Parameters
				--INSERT INTO @tmpActivityParameters
				--EXEC dbo.USP_ADMIN_FF_ActivityParameters_GET
				--		@observationList = @observationList, 
				--		@LangID = @LangID

				--Get numeric values activity parameters
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[intValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					SUM(CAST(AP.varValue AS INT)),
					--CAST(AP.varValue AS NVARCHAR(MAX)),
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfProphylacticObservation FROM @observationsTable)
				AND ISNUMERIC(CAST(AP.varValue AS NVARCHAR)) = 1
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0

				GROUP BY
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					P.idfsParameterType
				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow

				--Get non-numeric values activity parameters
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[varValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					AP.varValue,
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfProphylacticObservation FROM @observationsTable)
				AND ISNUMERIC(CAST(AP.varValue AS NVARCHAR)) = 0
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0

				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow

				--Report
				--numeric items
				INSERT INTO @FinalReportTable
				(
					ParameterName,
				    strSpecies,
				    idfsParameter,
				    ParameterOrder,
				    idfsDiagnosis,
				    strDefault,
				    strOIECode,
				    numRow,
				    strActionCode,
					strAction,
					intValue
				)

				SELECT	ff.ParameterName
						,sl.strSpecies
						,ff.idfsParameter
						,ff.ParameterOrder
						,m.idfsDiagnosis
						,m.strDefault
						,m.strOIECode
						,m.intNumRow
						,m.strActionCode
						,m.strAction
						,SUM(intValue)
						--,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')

				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter AND m.idfAggrVetCaseMTX=ap.idfRow
				LEFT JOIN @tmpSpeciesList sl ON sl.idfBaseReference=m.idfsSpeciesType
				GROUP BY
					ff.ParameterName
					,sl.strSpecies
					,ff.idfsParameter
					,ff.ParameterOrder
					,m.idfsDiagnosis
					,m.strDefault
					,m.strOIECode
					,m.intNumRow
					,m.strActionCode
					,m.strAction
					--,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')
				ORDER BY intNumRow

				--non numeric items
				INSERT INTO @FinalReportTable
				(
					ParameterName,
				    strSpecies,
				    idfsParameter,
				    ParameterOrder,
				    idfsDiagnosis,
				    strDefault,
				    strOIECode,
				    numRow,
				    strActionCode,
					strAction,
					varValue
				)

				SELECT	ff.ParameterName
						,sl.strSpecies
						,ff.idfsParameter
						,ff.ParameterOrder
						,m.idfsDiagnosis
						,m.strDefault
						,m.strOIECode
						,m.intNumRow
						,m.strActionCode
						,m.strAction
						,ap.varValue
						--,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')

				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter AND m.idfAggrVetCaseMTX=ap.idfRow
				LEFT JOIN @tmpSpeciesList sl ON sl.idfBaseReference=m.idfsSpeciesType
				WHERE ap.varValue IS NOT NULL
				
				ORDER BY intNumRow

				--final query
				SELECT 
					ParameterName,
					strSpecies,
					idfsParameter,
					ParameterOrder,
					idfsDiagnosis,
					strDefault,
					strOIECode,
					numRow AS intNumRow,
					strAction,
					strActionCode,
					CAST(intValue AS NVARCHAR(300)) AS varValue
					
				FROM @FinalReportTable
				WHERE varValue IS NULL

				UNION ALL 

				SELECT
					DISTINCT t.ParameterName,
					t.strSpecies,
					t.idfsParameter,
					t.ParameterOrder,
					t.idfsDiagnosis,
					t.strDefault,
					t.strOIECode,
					t.numRow AS intNumRow,
					strAction,
					strActionCode,
					STUFF((SELECT distinct ', ' + CAST(t1.varValue AS NVARCHAR(300))
						 FROM @FinalReportTable t1
						 WHERE t.ParameterName = t1.ParameterName
						 AND t.strSpecies = t1.strSpecies
						 AND t.idfsParameter = t1.idfsParameter
						 AND t.ParameterOrder = t1.ParameterOrder
						 AND t.idfsDiagnosis = t1.idfsDiagnosis
						 AND t.strDefault = t1.strDefault
						 AND t.strOIECode = t1.strOIECode
						 FOR XML PATH(''), TYPE
							).value('.', 'NVARCHAR(MAX)') 
						,1,2,'') varValue
				from @FinalReportTable t
				WHERE t.varValue IS NOT NULL;				
			END

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT = 1
			ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
PRINT N'Creating Procedure [Report].[USP_REP_Veterinary_Aggregate_SanitaryAction_Summary_Report_Detail]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USP_REP_Veterinary_Aggregate_SanitaryAction_Summary_Report_Detail
-- Description: PrintedForm Veterinary Aggregate Report
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Mark Wilson		10/11/2022  initial cut.
-- Mike Kornegay	10/17/2022	Remove temp table (not compatible with EF Power Tools)
/*

EXEC    [Report].[USP_REP_Veterinary_Aggregate_SanitaryAction_Summary_Report_Detail]
        @LangID = N'en-US',
        @idfAggrCaseList = '128822070001294;127398630001294;121195250001294'

*/
-- ================================================================================================
CREATE PROCEDURE [Report].[USP_REP_Veterinary_Aggregate_SanitaryAction_Summary_Report_Detail] 
(
	@LangID AS NVARCHAR(50),
	@idfAggrCaseList AS  NVARCHAR(MAX)= NULL
)
AS
BEGIN
	DROP TABLE IF EXISTS #tmpDetails;

	DECLARE @idfsCountry AS BIGINT,
			@idfsLanguage BIGINT = dbo.FN_GBL_LanguageCode_GET(@LangID);

	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

	DECLARE @AggrCaseTable TABLE (
		[idfAggrCase] BIGINT,
		[intRowNumber] INT
		)

	--Get Selected Agg Cases
	INSERT INTO @AggrCaseTable (
			[idfAggrCase],
			[intRowNumber]
			)
	SELECT CAST([Value] AS BIGINT),
		ROW_NUMBER() OVER (
			ORDER BY [Value]
			)
	FROM [dbo].[FN_GBL_SYS_SplitList](@idfAggrCaseList, NULL, NULL)

	DECLARE @tmpMatrix AS TABLE (
		intNumRow INT
		,idfAggrVetCaseMTX BIGINT
		,strActionCode NVARCHAR(200)
		,strAction NVARCHAR(300)
		)

   DECLARE @tempFlexForm TABLE (
		idfsParentSection BIGINT
		,idfsSection BIGINT
		,idfsParameter BIGINT
		,SectionName NVARCHAR(2000)
		,ParameterName NVARCHAR(500)
		,parameterType NVARCHAR(100)
		,idfsParameterType BIGINT
		,idfsReferenceType BIGINT
		,idfsEditor BIGINT
		,SectionOrder INT
		,ParameterOrder INT
		,blnGrid BIT
		,blnFixedRowSet BIT
		,idfsEditMode BIGINT
		,idfsFormTemplate BIGINT
		)

	DECLARE @observationsTable TABLE (
		[idfSanitaryObservation] BIGINT,
		[idfSanitaryVersion] BIGINT,
		[idfsCaseFormTemplate] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpActivityParameters TABLE (
		[idfActivityParameters] BIGINT,
		[idfObservation] BIGINT,
		[idfsFormTemplate] BIGINT,
		[idfsParameter] BIGINT,
		[idfsSection] BIGINT,
		[idfRow] BIGINT,
		[Type] BIGINT,
		[varValue] sql_variant, --NVARCHAR(MAX),
		[numRow] INT,
		[ParameterType]  BIGINT
		)

	DECLARE @tmpDetails TABLE (
		idfSanitaryObservation BIGINT,
		idfsCaseFormTemplate BIGINT,
		idfSanitaryVersion BIGINT
	)

	BEGIN TRY

			BEGIN


				--Get this SQl from [dbo].[USP_AGG_CASE_GETDETAIL]
				INSERT INTO @tmpDetails
				SELECT 
					a.idfSanitaryObservation
					,CaseObs.idfsFormTemplate AS idfsCaseFormTemplate
					,a.idfSanitaryVersion
				--INTO #tmpDetails
				FROM dbo.tlbAggrCase a	
				LEFT JOIN dbo.tlbObservation CaseObs ON a.idfSanitaryObservation = CaseObs.idfObservation
				WHERE a.intRowStatus = 0
				AND a.idfAggrCase IN (SELECT idfAggrCase FROM @AggrCaseTable)

				DECLARE @idfsFormTemplate BIGINT,
						@idfVersion BIGINT

				INSERT INTO @observationsTable (
					[idfSanitaryObservation],
					[idfSanitaryVersion],
					[idfsCaseFormTemplate],
					[intRowNumber]
					)
				SELECT [idfSanitaryObservation],
					idfSanitaryVersion,
					idfsCaseFormTemplate,
					ROW_NUMBER() OVER (
						ORDER BY [idfSanitaryObservation]
						)
				FROM @tmpDetails

				SELECT @idfsFormTemplate=idfsCaseFormTemplate, 
						@idfVersion= idfSanitaryVersion
				FROM @observationsTable
				--SELECT * FROM @observationsTable

				--Get this SQL from USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GET -- dbo.USP_CONF_ADMIN_AggregateHumanCaseMatrixReport_GET
				INSERT INTO @tmpMatrix
				SELECT	 
					mtx.intNumRow as intNumRow,
					mtx.idfAggrSanitaryActionMTX,
					SAC.strActionCode,
					SA.name AS strAction

				FROM dbo.tlbAggrSanitaryActionMTX mtx
				INNER JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID, 19000079) SA ON SA.idfsReference = mtx.idfsSanitaryAction
				INNER JOIN dbo.trtSanitaryAction SAC ON SAC.idfsSanitaryAction = SA.idfsReference

				WHERE mtx.intRowStatus = 0 AND  mtx.idfVersion = @idfVersion
				--ORDER BY mtx.intNumRow ASC

--------------------------------------------------------------------------------------------------------------------------------		
				--Get Flex Form for Sanitary Actions details
				INSERT INTO @tempFlexForm
				SELECT 
					s.idfsParentSection
					,COALESCE(p.idfsSection,0) AS idfsSection
					,p.idfsParameter
					,RF.Name AS SectionName
					,PN.Name AS ParameterName
					,PTR.Name AS parameterType
					,p.idfsParameterType
					,pt.idfsReferenceType
					,p.idfsEditor
					,sdo.intOrder	AS SectionOrder
					,PDO.intOrder	AS ParameterOrder
					,s.blnGrid
					,s.blnFixedRowSet
					,PFT.idfsEditMode
					,pft.idfsFormTemplate
				FROM dbo.ffParameter p
				LEFT JOIN dbo.ffParameterForTemplate PFT ON PFT.idfsParameter = p.idfsParameter AND PFT.intRowStatus = 0
				LEFT JOIN dbo.ffSection s ON s.idfsSection = p.idfsSection
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000101) RF ON S.idfsSection = RF.idfsReference
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000071) PTR ON PTR.idfsReference = P.idfsParameterType
				LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000066) PN ON PN.idfsReference = P.idfsParameter
				LEFT JOIN dbo.ffParameterDesignOption PDO ON PFT.idfsParameter = PDO.idfsParameter
					AND PFT.idfsFormTemplate = PDO.idfsFormTemplate
					AND PDO.idfsLanguage = @idfsLanguage
					AND PDO.intRowStatus = 0
				LEFT JOIN dbo.ffSectionDesignOption sdo ON sdo.idfsSection = s.idfsSection 
					AND sdo.idfsFormTemplate = @idfsFormTemplate 
					AND sdo.idfsLanguage = @idfsLanguage
					AND sdo.intRowStatus = 0
				LEFT JOIN dbo.ffParameterType PT
					ON pt.idfsParameterType = p.idfsParameterType
				WHERE PFT.idfsFormTemplate = @idfsFormTemplate

				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[varValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					AP.varValue,
					--CAST(AP.varValue AS NVARCHAR(MAX)),
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfSanitaryObservation FROM @observationsTable)
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0
				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow


				--Report
				SELECT	ff.ParameterName
						,ff.idfsParameter
						,ff.ParameterOrder
						,m.intNumRow
						,m.strActionCode
						,m.strAction
						,SUM(CAST(ap.varValue AS INT)) AS varValue--ap.idfRow,m.idfAggrHumanCaseMTX as idfRow
						,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')

				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter AND m.idfAggrVetCaseMTX=ap.idfRow

				GROUP BY
				ff.ParameterName
						,ff.idfsParameter
						,ff.ParameterOrder
						,m.intNumRow
						,m.strActionCode
						,m.strAction
						,SQL_VARIANT_PROPERTY(ap.varValue, 'BaseType')
				ORDER BY intNumRow

			END

		--DROP TABLE IF EXISTS #tmpDetails;

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT = 1
			ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USP_HAS_MONITORING_SESSION_SET]...';


GO
-- ================================================================================================
-- Name: USP_HAS_MONITORING_SESSION_SET
--
-- Description: Insert/update for monitoring session records for the human module.
--          
-- Revision History:
-- Name				Date	   Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long		07/06/2019 Initial release.
-- Ann Xiong		01/17/2020 Fixed an issue in Persons & Samples grid where saving a new row 
--                             will change the Person ID of several previous rows to be the same 
--                             as the newly added row.
-- Stephen Long		03/09/2020 Added current site ID to the update sample set call.
-- Ann Xiong		03/20/2020 Added the following information from the AS Session to the new 
--								Disease Report:
--								Disease Report field “Report Status” – “In progress”	
--								Disease Report field “Case classification” field - <blank>
--								Disease Report field “Report Type” – “Active”
--								Disease Report field “Entered by Name” with the user name who 
--                              created this Disease Report
--								Disease Report field “Date Entered” with the current date when 
--                              this Disease Report was created
-- Ann Xiong		03/30/2020 Update SET idfHumanCase in tlbMaterial and set 
--							   idfsYNSpecimenCollected and idfsYNTestsConducted.
-- Ann Xiong		04/14/2020 Changed to use "SSH" prefix instead of SSV for Human Active 
--							   Surveillance Session.
-- Stephen Long		12/20/2020 Updated USSP_GBL_TEST_SET call with four new parameters.
-- Doug Albanese	01/12/2022 Refactored, due to table change for storing multiple disease 
--                             against a session.  Added supress to an EXECUTE statement that was 
--                             preventing EF from generating a return model
-- Doug Albanese	01/13/2022 Refactored to use new location hierarchy
-- Doug Albanese	01/14/2022 Refactoring json conversion tables to not require PKs, until 
--                             automatically generated
-- Doug Albanese	01/18/2022 Clean up of "collections" to include required fields for foreign 
--                             records
-- Doug Albanese	01/24/2022 Final refactoring for successful save from the app.
-- Doug Albanese	02/02/2022 Minor refactoring to save SampleId to Tests collection
-- Doug Albanese	03/25/2022 Updated to make use of "RowAction" on the disease combination
-- Doug Albanese	05/23/2022 Removed idfsCurrentSite, to prevent clashing with lab.
-- Doug Albanese	06/16/2022 Changed out the value used for NonLaboratoryTestIndicator from 0 to 
--                             1
-- Doug Albanese	06/16/2022 Added "Notifications" for processing, and User ID for auditing 
--                             purposes
-- Stephen Long     07/06/2022 Updates for site alerts to call new stored procedure.
--	Doug Albanese	07/19/2022	Corrected the enumeration of multiple site alerts
--	Doug Albanese	08/01/2022	Added a replacement feature of the word "New", to have the EIDSS Session ID, in place.
--	Doug Albanese	08/26/2022	Adjusted supression, because of changes made to USSP_GBL_SAMPLE_SET
-- Doug Albanese	 10/17/2022	 Added a condition to pick up any idfHumancase ids that belong to an existing Test to maintain the "Connected" status.
-- Stephen Long     10/18/2022 Added samples to diseases parameter and logic.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HAS_MONITORING_SESSION_SET]
(
    @LanguageID NVARCHAR(50),
    @MonitoringSessionID BIGINT = NULL,
    @MonitoringSessionStatusTypeID BIGINT = NULL,
    @idfsLocation BIGINT = NULL,
    @EnteredByPersonID BIGINT = NULL,
    @CampaignID BIGINT = NULL,
    @SiteID BIGINT,
    @EIDSSSessionID NVARCHAR(50) = NULL,
    @StartDate DATETIME = NULL,
    @EndDate DATETIME = NULL,
    @SessionCategoryTypeID BIGINT = NULL,
    @RowStatus INT,
    @CreateDiseaseReportHumanID BIGINT = NULL,
    @AuditUserName NVARCHAR(200),
    @DiseaseCombinations NVARCHAR(MAX),
    @SampleTypeCombinations NVARCHAR(MAX),
    @Samples NVARCHAR(MAX),
    @SamplesToDiseases NVARCHAR(MAX) = NULL,
    @Tests NVARCHAR(MAX),
    @Actions NVARCHAR(MAX),
    @Events NVARCHAR(MAX) = NULL,
    @UserId BIGINT
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @NewHumanID BIGINT = NULL,
                @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
                @EventId BIGINT,
                @EventTypeId BIGINT = NULL,
                @EventSiteId BIGINT = NULL,
                @EventObjectId BIGINT = NULL,
                @EventUserId BIGINT = NULL,
                @EventDiseaseId BIGINT = NULL,
                @EventLocationId BIGINT = NULL,
                @EventInformationString NVARCHAR(MAX) = NULL,
                @EventLoginSiteId BIGINT = NULL;

		/* Get an 'On-The-Fly' translation for the word "New". To be used, to replace the "New" indicator on Samples / Tests.*/
		DECLARE @Translated_New NVARCHAR(50)

		DECLARE @ExecReturn TABLE (
			strDefault NVARCHAR(200),
			name NVARCHAR(200),
			LongName NVARCHAR(200)
		)

		INSERT INTO @ExecReturn
		EXEC [dbo].[USP_GBL_BaseReferenceTranslation_Get] @LanguageId = 'en-us', @idfsBaseReference = 10140000

		SELECT @Translated_New = [name] FROM @ExecReturn
		/*End 'On-The-Fly' translation.*/

        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage VARCHAR(200)
        );

        DECLARE @CampaignName NVARCHAR(50)
        DECLARE @CampaignTypeID BIGINT = NULL
        DECLARE @CampaignStartDate DATETIME = NULL
        DECLARE @CampaignEndDate DATETIME = NULL

        IF @CampaignID IS NOT NULL
        BEGIN
            SELECT @CampaignTypeID = idfsCampaignType,
                   @CampaignName = strCampaignname,
                   @CampaignStartDate = datCampaignDateStart,
                   @CampaignEndDate = datCampaignDateEnd
            FROM tlbCampaign
            WHERE idfCampaign = @CampaignID
        END

        DECLARE @RowID BIGINT = NULL,
                @RowAction NCHAR = NULL,
                @MonitoringSessionToDiseaseID BIGINT,
                @MonitoringSessionToSampleTypeID BIGINT,
                @OrderNumber INT,
                @SampleID BIGINT,
                @SampleTypeID BIGINT = NULL,
                @HumanID BIGINT,
                @HumanMasterID BIGINT = NULL,
                @CollectedByPersonID BIGINT = NULL,
                @CollectedByOrganizationID BIGINT = NULL,
                @CollectionDate DATETIME = NULL,
                @SentDate DATETIME = NULL,
                @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
                @SampleStatusTypeID BIGINT = NULL,
                @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
                @SentToOrganizationID BIGINT = NULL,
                @ReadOnlyIndicator BIT = NULL,
                @AccessionDate DATETIME = NULL,
                @AccessionConditionTypeID BIGINT = NULL,
                @AccessionComment NVARCHAR(200) = NULL,
                @AccessionByPersonID BIGINT = NULL,
                --,@CurrentSiteID BIGINT = NULL
                @TestID BIGINT,
                @TestNameTypeID BIGINT = NULL,
                @TestCategoryTypeID BIGINT = NULL,
                @TestResultTypeID BIGINT = NULL,
                @TestStatusTypeID BIGINT,
                @BatchTestID BIGINT = NULL,
                @TestNumber INT = NULL,
                @StartedDate DATETIME2 = NULL,
                @ResultDate DATETIME2 = NULL,
                @TestedByPersonID BIGINT = NULL,
                @TestedByOrganizationID BIGINT = NULL,
                @ResultEnteredByOrganizationID BIGINT = NULL,
                @ResultEnteredByPersonID BIGINT = NULL,
                @ValidatedByOrganizationID BIGINT = NULL,
                @ValidatedByPersonID BIGINT = NULL,
                @NonLaboratoryTestIndicator BIT,
                @ExternalTestIndicator BIT = NULL,
                @PerformedByOrganizationID BIGINT = NULL,
                @ReceivedDate DATETIME2 = NULL,
                @ContactPersonName NVARCHAR(200) = NULL,
                @TestMonitoringSessionID BIGINT = NULL,
                @TestInterpretationID BIGINT,
                @InterpretedStatusTypeID BIGINT = NULL,
                @InterpretedByOrganizationID BIGINT = NULL,
                @InterpretedByPersonID BIGINT = NULL,
                @TestingInterpretations BIGINT,
                @ValidatedStatusIndicator BIT = NULL,
                @ReportSessionCreatedIndicator BIT = NULL,
                @ValidatedComment NVARCHAR(200) = NULL,
                @InterpretedComment NVARCHAR(200) = NULL,
                @ValidatedDate DATETIME = NULL,
                @InterpretedDate DATETIME = NULL,
                @MonitoringSessionActionID BIGINT,
                @ActionTypeID BIGINT,
                @ActionStatusTypeID BIGINT,
                @ActionDate DATETIME = NULL,
                @Comments NVARCHAR(500) = NULL,
                @DiseaseID BIGINT,
                @idfMonitoringSessionToDiagnosis BIGINT,
                @DateEntered DATETIME = GETDATE(),
				@idfHumanCase_Test BIGINT = NULL,
                @MonitoringSessionToMaterialID BIGINT = NULL;

        DECLARE @DiseaseCombinationsTemp TABLE
        (
            MonitoringSessionToDiseaseID BIGINT NULL,
            DiseaseID BIGINT NOT NULL,
            OrderNumber INT NOT NULL,
            SampleTypeID BIGINT NULL,
            Comments NVARCHAR(MAX),
            RowStatus INT NOT NULL,
            RowAction CHAR(1)
        );

        DECLARE @SampleTypeCombinationsTemp TABLE
        (
            MonitoringSessionToSampleTypeID BIGINT NOT NULL,
            SampleTypeID BIGINT NULL,
            OrderNumber INT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction CHAR(1)
        );

        DECLARE @SamplesTemp TABLE
        (
            SampleID BIGINT NOT NULL,
            SampleTypeID BIGINT NULL,
            SampleStatusTypeID BIGINT NULL,
            CollectionDate DATETIME2 NULL,
            CollectedByOrganizationID BIGINT NULL,
            CollectedByPersonID BIGINT NULL,
            SentDate DATETIME2 NULL,
            SentToOrganizationID BIGINT NULL,
            EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
            Comments NVARCHAR(200) NULL,
            SiteID BIGINT NOT NULL,
            --,CurrentSiteID BIGINT NULL
            DiseaseID BIGINT NULL,
            ReadOnlyIndicator BIT NULL,
            HumanID BIGINT NULL,
            HumanMasterID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction CHAR(1) NULL
        );

        DECLARE @SamplesToDiseasesTemp TABLE
        (
            MonitoringSessionToMaterialID BIGINT NOT NULL,
            MonitoringSessionID BIGINT NULL,
			SampleID BIGINT NOT NULL,
			SampleTypeID BIGINT NULL,
            DiseaseID BIGINT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );

        DECLARE @TestsTemp TABLE
        (
            TestID BIGINT NOT NULL,
            TestNameTypeID BIGINT NULL,
            TestCategoryTypeID BIGINT NULL,
            TestResultTypeID BIGINT NULL,
            TestStatusTypeID BIGINT NOT NULL,
            DiseaseID BIGINT NULL,
            SampleID BIGINT NULL,
            BatchTestID BIGINT NULL,
            ObservationID BIGINT NULL,
            TestNumber INT NULL,
            Comments NVARCHAR NULL,
            StartedDate DATETIME2 NULL,
            ResultDate DATETIME2 NULL,
            TestedByOrganizationID BIGINT NULL,
            TestedByPersonID BIGINT NULL,
            ResultEnteredByOrganizationID BIGINT NULL,
            ResultEnteredByPersonID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            ReadOnlyIndicator BIT NOT NULL,
            NonLaboratoryTestIndicator BIT NOT NULL,
            ExternalTestIndicator BIT NULL,
            PerformedByOrganizationID BIGINT NULL,
            ReceivedDate DATETIME2 NULL,
            ContactPersonName NVARCHAR(200) NULL,
            RowStatus INT NOT NULL,
            RowAction CHAR(1) NULL
        );

        DECLARE @ActionsTemp TABLE
        (
            MonitoringSessionActionID BIGINT NOT NULL,
            EnteredByPersonID BIGINT NULL,
            ActionTypeID BIGINT NULL,
            ActionStatusTypeID BIGINT NULL,
            ActionDate DATETIME2 NULL,
            Comments NVARCHAR(500) NULL,
            RowStatus INT NOT NULL,
            RowAction CHAR(1) NULL
        );

        DECLARE @EventsTemp TABLE
        (
            EventId BIGINT NOT NULL,
            EventTypeId BIGINT NULL,
            UserId BIGINT NULL,
            SiteId BIGINT NULL,
            LoginSiteId BIGINT NULL,
            ObjectId BIGINT NULL,
            DiseaseId BIGINT NULL,
            LocationId BIGINT NULL,
            InformationString NVARCHAR(MAX) NULL
        );

        --BEGIN TRANSACTION;

        SET @DiseaseCombinations = REPLACE(@DiseaseCombinations, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @DiseaseCombinationsTemp
        SELECT *
        FROM
            OPENJSON(@DiseaseCombinations)
            WITH
            (
                MonitoringSessionToDiseaseID BIGINT,
                DiseaseID BIGINT,
                OrderNumber INT,
                SampleTypeID BIGINT,
                Comments NVARCHAR(MAX),
                RowStatus INT,
                RowAction CHAR(1)
            );

        SET @SampleTypeCombinations = REPLACE(@SampleTypeCombinations, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @SampleTypeCombinationsTemp
        SELECT *
        FROM
            OPENJSON(@SampleTypeCombinations)
            WITH
            (
                MonitoringSessionToSampleTypeID BIGINT,
                SampleTypeID BIGINT,
                OrderNumber INT,
                RowStatus INT,
                RowAction CHAR(1)
            );

        SET @Samples = REPLACE(@Samples, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@Samples)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                SampleStatusTypeID BIGINT,
                CollectionDate DATETIME2,
                CollectedByOrganizationID BIGINT,
                CollectedByPersonID BIGINT,
                SentDate DATETIME2,
                SentToOrganizationID BIGINT,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                Comments NVARCHAR(200),
                SiteID BIGINT,
                --,CurrentSiteID BIGINT
                DiseaseID BIGINT,
                ReadOnlyIndicator BIT,
                HumanID BIGINT,
                HumanMasterID BIGINT,
                RowStatus INT,
                RowAction CHAR(1)
            );

        INSERT INTO @SamplesToDiseasesTemp
		SELECT *
		FROM
			OPENJSON(@SamplesToDiseases)
			WITH
			(
				MonitoringSessionToMaterialID BIGINT,
				MonitoringSessionID BIGINT,
				SampleID BIGINT,
				SampleTypeID BIGINT,
				DiseaseID BIGINT,
				RowStatus INT,
				RowAction INT
			);

        SET @Tests = REPLACE(@Tests, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @TestsTemp
        SELECT *
        FROM
            OPENJSON(@Tests)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Comments NVARCHAR(500),
                StartedDate DATETIME2,
                ResultDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                RowStatus INT,
                RowAction CHAR(1)
            );


        SET @Actions = REPLACE(@Actions, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @ActionsTemp
        SELECT *
        FROM
            OPENJSON(@Actions)
            WITH
            (
                MonitoringSessionActionID BIGINT,
                EnteredByPersonID BIGINT,
                ActionTypeID BIGINT,
                ActionStatusTypeID BIGINT,
                ActionDate DATETIME2,
                Comments NVARCHAR(500),
                RowStatus INT,
                RowAction CHAR(1)
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbMonitoringSession
            WHERE idfMonitoringSession = @MonitoringSessionID
        )
        BEGIN
            UPDATE dbo.tlbMonitoringSession
            SET idfsMonitoringSessionStatus = @MonitoringSessionStatusTypeID,
                idfsLocation = @idfsLocation,
                idfPersonEnteredBy = @EnteredByPersonID,
                idfCampaign = @CampaignID,
                idfsSite = @SiteID,
                datEnteredDate = GETDATE(),
                datStartDate = @StartDate,
                datEndDate = @EndDate,
                SessionCategoryID = @SessionCategoryTypeID,
                AuditUpdateUser = @AuditUserName
            WHERE idfMonitoringSession = @MonitoringSessionID;

            UPDATE dbo.tlbCampaign
            SET strCampaignName = @CampaignName,
                idfsCampaignType = @CampaignTypeID,
                datCampaignDateStart = @CampaignStartDate,
                datCampaignDateEnd = @CampaignEndDate
            WHERE idfCampaign = @CampaignID

            UPDATE @EventsTemp
            SET ObjectId = @MonitoringSessionID
            WHERE ObjectId = 0;

        END
        ELSE
        BEGIN
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbMonitoringSession',
                                              @MonitoringSessionID OUTPUT;

            EXECUTE dbo.USP_GBL_NextNumber_GET 'Human Active Surveillance Session',
                                               @EIDSSSessionID OUTPUT,
                                               NULL;

            INSERT INTO dbo.tlbMonitoringSession
            (
                idfMonitoringSession,
                idfsMonitoringSessionStatus,
                idfsLocation,
                idfPersonEnteredBy,
                idfCampaign,
                idfsSite,
                datEnteredDate,
                strMonitoringSessionID,
                datStartDate,
                datEndDate,
                SessionCategoryID,
                intRowStatus,
                AuditCreateUser
            )
            VALUES
            (
				@MonitoringSessionID,
				@MonitoringSessionStatusTypeID,
				@idfsLocation,
				@EnteredByPersonID,
				@CampaignID,
				@SiteID,
				GETDATE(),
				@EIDSSSessionID,
				@StartDate,
				@EndDate,
				@SessionCategoryTypeID,
				0  ,
				@AuditUserName
            );
        END

        WHILE EXISTS (SELECT * FROM @DiseaseCombinationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionToDiseaseID,
                @DiseaseID = DiseaseID,
                @SampleTypeID = SampleTypeID,
                @OrderNumber = OrderNumber,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @DiseaseCombinationsTemp;

            SET @idfMonitoringSessionToDiagnosis = @RowID

            INSERT INTO @SuppressSelect
            EXECUTE USSP_HAS_MonitoringSessionToDiagnosis_SET @LanguageID,
                                                              @idfMonitoringSessionToDiagnosis OUTPUT,
                                                              @MonitoringSessionID,
                                                              @DiseaseID,
                                                              @OrderNumber,
                                                              NULL,
                                                              @SampleTypeID,
                                                              @Comments,
                                                              @AuditUserName,
                                                              @RowAction;

            DELETE FROM @DiseaseCombinationsTemp
            WHERE MonitoringSessionToDiseaseID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @SampleTypeCombinationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionToSampleTypeID,
                @MonitoringSessionToSampleTypeID = MonitoringSessionToSampleTypeID,
                @OrderNumber = OrderNumber,
                @RowStatus = RowStatus,
                @SampleTypeID = SampleTypeID,
                @RowAction = RowAction
            FROM @SampleTypeCombinationsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_HAS_MONITORING_SESSION_TO_SAMPLE_TYPE_SET @LanguageID,
                                                                       @MonitoringSessionToSampleTypeID,
                                                                       @MonitoringSessionID,
                                                                       @OrderNumber,
                                                                       @RowStatus,
                                                                       @SampleTypeID,
                                                                       @RowAction,
                                                                       @AuditUserName;

            DELETE FROM @SampleTypeCombinationsTemp
            WHERE MonitoringSessionToSampleTypeID = @RowID;
        END;


        WHILE EXISTS (SELECT * FROM @SamplesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SampleID,
                @SampleID = SampleID,
                @SampleTypeID = SampleTypeID,
                @CollectedByPersonID = CollectedByPersonID,
                @CollectedByOrganizationID = CollectedByOrganizationID,
                @CollectionDate = CAST(CollectionDate AS DATETIME),
                @SentDate = CAST(SentDate AS DATETIME),
                @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                @SampleStatusTypeID = SampleStatusTypeID,
                @Comments = Comments,
                @SiteID = SiteID,
                --,@CurrentSiteID = CurrentSiteID
                @RowStatus = RowStatus,
                @SentToOrganizationID = SentToOrganizationID,
                @DiseaseID = DiseaseID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @HumanID = HumanID,
                @HumanMasterID = HumanMasterID,
                @RowAction = RowAction
            FROM @SamplesTemp;

			SET @EIDSSLocalOrFieldSampleID = REPLACE(@EIDSSLocalOrFieldSampleID, @Translated_New + '-', @EIDSSSessionID + '-');

            IF @RowAction = 'I'
            BEGIN
                DECLARE @idfNewHuman BIGINT = NULL
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_HUM_COPYHUMANACTUALTOHUMAN @HumanMasterID,
                                                           @idfNewHuman OUTPUT,
                                                           @ReturnCode OUTPUT,
                                                           @ReturnMessage OUTPUT;

                SELECT @HumanID = @idfNewHuman
            END;

            --INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_SAMPLE_SET 
											@AuditUserName = @AuditUserName,
											@SampleID = @SampleID OUTPUT,
                                            @SampleTypeID = @SampleTypeID,
                                            @RootSampleID = NULL,
                                            @ParentSampleID = NULL,
                                            @HumanID = @HumanID,
											@SpeciesID = NULL,
                                            @AnimalID = NULL,
                                            @VectorID = NULL,
                                            @MonitoringSessionID = @MonitoringSessionID,
                                            @VectorSessionID = NULL,
                                            @HumanDiseaseReportID = NULL,
                                            @VeterinaryDiseaseReportID = NULL,
                                            @CollectionDate = @CollectionDate,
                                            @CollectedByPersonID = @CollectedByPersonID,
                                            @CollectedByOrganizationID = @CollectedByOrganizationID,
                                            @SentDate = @SentDate,
											@SentToOrganizationID = @SentToOrganizationID,
                                            @EIDSSLocalFieldSampleID = @EIDSSLocalOrFieldSampleID,
                                            @SiteID = @SiteID,
                                            @EnteredDate = @DateEntered,
                                            @ReadOnlyIndicator = @ReadOnlyIndicator,
                                            @SampleStatusTypeID = @SampleStatusTypeID,
                                            @Comments = @Comments,
                                            @CurrentSiteID = NULL,
                                            @DiseaseID = @DiseaseID,
                                            @BirdStatusTypeID = NULL,
                                            @RowStatus = @RowStatus,
                                            @RowAction = @RowAction;

            UPDATE @SamplesToDiseasesTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            UPDATE @TestsTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            DELETE FROM @SamplesTemp
            WHERE SampleID = @RowID;

            DELETE FROM dbo.tlbMonitoringSessionToMaterial
            WHERE idfMaterial = @SampleID;
        END;

        WHILE EXISTS (SELECT * FROM @SamplesToDiseasesTemp)
		BEGIN
			SELECT TOP 1
				@RowID = MonitoringSessionToMaterialID,
				@MonitoringSessionToMaterialID = MonitoringSessionToMaterialID,
				@SampleID = SampleID,
				@SampleTypeID = SampleTypeID,
				@DiseaseID = DiseaseID,
				@RowAction = RowAction,
				@RowStatus = RowStatus
			FROM @SamplesToDiseasesTemp;

			--insert or update the diseases for this sample
			INSERT INTO @SuppressSelect
			EXECUTE dbo.USSP_AS_SAMPLE_TO_DISEASE_SET
										@AuditUserName,
                                        @MonitoringSessionToMaterialID,
										@MonitoringSessionID,
										@SampleID,
										@DiseaseID,
                                        @SampleTypeID,
                                        @RowStatus,
                                        @RowAction;

			DELETE FROM @SamplesToDiseasesTemp
			WHERE MonitoringSessionToMaterialID = @RowID;
		END;

        WHILE EXISTS (SELECT * FROM @TestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestID,
                @TestID = TestID,
                @TestNameTypeID = TestNameTypeID,
                @TestCategoryTypeID = TestCategoryTypeID,
                @TestResultTypeID = TestResultTypeID,
                @TestStatusTypeID = TestStatusTypeID,
                @DiseaseID = DiseaseID,
                @SampleID = SampleID,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @StartedDate = StartedDate,
                @ResultDate = ResultDate,
                @TestedByOrganizationID = TestedByOrganizationID,
                @TestedByPersonID = TestedByPersonID,
                @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                @ResultEnteredByPersonID = ResultEnteredByPersonID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
                @ExternalTestIndicator = ExternalTestIndicator,
                @PerformedByOrganizationID = PerformedByOrganizationID,
                @ReceivedDate = ReceivedDate,
                @ContactPersonName = ContactPersonName,
                @RowAction = RowAction
            FROM @TestsTemp;

			SELECT
			   @idfHumanCase_Test = idfHumanCase
			FROM
			   tlbTesting
			WHERE
			   idfTesting = @TestID

			SET @EIDSSLocalOrFieldSampleID = REPLACE(@EIDSSLocalOrFieldSampleID, @Translated_New + '-', @EIDSSSessionID + '-');

            --If record is being soft-deleted, then check if the test record was originally created 
            --in the laboaratory module.  If it was, then disassociate the test record from the 
            --human monitoring session, so that the test record remains in the laboratory module 
            --for further action.
            IF @RowStatus = 1
               AND @NonLaboratoryTestIndicator = 1
            BEGIN
                SET @RowStatus = 0;
                SET @TestMonitoringSessionID = NULL;
            END
            ELSE
            BEGIN
                SET @TestMonitoringSessionID = @MonitoringSessionID;
            END;


            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TEST_SET @LanguageID,
                                          @TestID OUTPUT,
                                          @TestNameTypeID,
                                          @TestCategoryTypeID,
                                          @TestResultTypeID,
                                          @TestStatusTypeID,
                                          @DiseaseID,
                                          @SampleID,
                                          NULL,
                                          NULL,
                                          NULL,
                                          @Comments,
                                          @RowStatus,
                                          @StartedDate,
                                          @ResultDate,
                                          @TestedByOrganizationID,
                                          @TestedByPersonID,
                                          @ResultEnteredByOrganizationID,
                                          @ResultEnteredByPersonID,
                                          @ValidatedByOrganizationID,
                                          @ValidatedByPersonID,
                                          @ReadOnlyIndicator,
                                          @NonLaboratoryTestIndicator,
                                          @ExternalTestIndicator,
                                          @PerformedByOrganizationID,
                                          @ReceivedDate,
                                          @ContactPersonName,
                                          @TestMonitoringSessionID,
                                          NULL,
                                          @idfHumanCase_Test,
                                          NULL,
                                          @AuditUserName,
                                          @RowAction;

            DELETE FROM @TestsTemp
            WHERE TestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @ActionsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionActionID,
                @MonitoringSessionActionID = MonitoringSessionActionID,
                @EnteredByPersonID = EnteredByPersonID,
                @ActionTypeID = ActionTypeID,
                @ActionStatusTypeID = ActionStatusTypeID,
                @ActionDate = ActionDate,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @ActionsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_HAS_MONITORING_SESSION_ACTION_SET @LanguageID,
                                                               @MonitoringSessionActionID OUTPUT,
                                                               @MonitoringSessionID,
                                                               @EnteredByPersonID,
                                                               @ActionTypeID,
                                                               @ActionStatusTypeID,
                                                               @ActionDate,
                                                               @Comments,
                                                               @RowStatus,
                                                               @RowAction,
                                                               @AuditUserName

            DELETE FROM @ActionsTemp
            WHERE MonitoringSessionActionID = @RowID;
        END;


        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                            @EventTypeId,
                                            @EventUserId,
                                            @EventObjectId,
                                            @EventDiseaseId,
                                            @EventSiteId,
                                            @EventInformationString,
                                            @EventLoginSiteId,
                                            @EventLocationId,
                                            @AuditUserName;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        DECLARE @HumanDiseaseReportID BIGINT = NULL;
        DECLARE @EIDSSReportID NVARCHAR(200) = NULL;

        IF (@CreateDiseaseReportHumanID IS NOT NULL)
        BEGIN
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbHumanCase',
                                              @HumanDiseaseReportID OUTPUT;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NextNumber_GET 'Human Disease Report',
                                               @EIDSSReportID OUTPUT,
                                               NULL;

            DECLARE @PersonID NVARCHAR(50) = NULL;
            DECLARE @Name NVARCHAR(200) = NULL;

            INSERT INTO dbo.tlbHumanCase
            (
                idfHumanCase,
                strCaseID,
                idfHuman,
                idfParentMonitoringSession,
                idfsFinalDiagnosis,
                idfsSite,
                idfsCaseProgressStatus,
                idfsInitialCaseStatus,
                idfsFinalCaseStatus,
                DiseaseReportTypeID,
                idfPersonEnteredBy,
                idfsYNSpecimenCollected,
                idfsYNTestsConducted,
                datEnteredDate
            )
            VALUES
            (   @HumanDiseaseReportID,
                @EIDSSReportID,
                @CreateDiseaseReportHumanID,
                @MonitoringSessionID,
                NULL, --@DiseaseID
                @SiteID,
                10109001,
                NULL,
                NULL,
                4578940000001,
                @EnteredByPersonID,
                10100001,
                10100001,
                GETDATE()
            );

            UPDATE dbo.tlbMaterial
            SET idfHumanCase = @HumanDiseaseReportID
            WHERE idfMonitoringSession = @MonitoringSessionID
                  AND idfHuman = @CreateDiseaseReportHumanID;
        END;

        IF @@TRANCOUNT > 0
            COMMIT TRANSACTION;

    END TRY
    BEGIN CATCH
        IF @@Trancount > 0
            ROLLBACK TRANSACTION;

        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        THROW;
    END CATCH

    SELECT @ReturnCode AS ReturnCode,
           @ReturnMessage AS ReturnMessage,
           @MonitoringSessionID AS MonitoringSessionID,
           @EIDSSSessionID AS EIDSSSessionID,
           @HumanDiseaseReportID AS HumanDiseaseReportID;
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_HUMAN_DISEASE_SET]...';


GO
--*************************************************************
-- Name 				:	USP_HUM_HUMAN_DISEASE_SET
-- Description			:	Insert OR UPDATE human disease record
--          
-- Author               :	Mandar Kulkarni
-- Revision History
--	Name			Date		Change Detail
--	JWJ				04/03/2018	Added new param to end for ReportStatus
--	Harold Pryor	08/01/2018  Added new @DiseaseReportTypeID input paramenter
--	Harold Pryor	11/30/2018  Added new @blnClinicalDiagBasis, @blnLabDiagBasis, @blnEpiDiagBasis input parameters for Basis of Diagnosis 
--                  			and new @DateofClassification input parameter 
--	Harold Pryor	12/05/2018	Added new @StartDateofInvestigation input parameter. Corrected @idfSoughtCareFacility input parameter spelling.	
--	Harold Pryor	12/06/2018	Removed updating Primary Key column for tlbHumanCase UPDATE.
--	Harold Pryor	12/13/2018	Removed @VaccinationName and @VaccinationDate input paramenters
--	Harold Pryor	12/21/2018	Changed @Sample as tlbHdrMaterialGetListSPType and @Tests as tlbHdrTestGetListSPType parameters and replaced as NVARCHAR
--	Harold Pryor	12/27/2018	Changed @Sample parameter to @SampleParameters and changed parameter @Tests to @TestsParameters. 
--	Lamont Mitchell	01/02/2018	Changed @idfHumanCase FROM OutputParameter and added to SELECT Statement
--	Harold Pryor	01/04/2018	Added new input paramters @AntiviralTherapiesParameters and @VaccinationsParameters	
--	Lamont Mitchell	01/11/2019	SUPRESSED Result Sets in  ALL STORED PROCS
--	Harold Pryor	01/21/2019	Added @ContactsParameters input parameter 
--	Harold Pryor	01/27/2019	Added @strSummaryNotes input parameter
--	Harold Pryor	02/10/2019	Added @idfEpiObservation and @idfCSObservation	input paremeters for Flex Forms integration. 
--	Harold Pryor	03/22/2019	UPDATEd to include @idfHuman and @DiseaseID to call to USSP_HUMAN_DISEASE_SAMPLES_SET stored proc 
--	Harold Pryor	04/08/2019	UPDATEd to include @idfHumanCaseRelatedTo imput parameter for Changed Diagnosis Human Disease Report functionality
--	Harold Pryor	04/09/2019	For Smart key generation reference data change for V7 UPDATEd call to USP_GBL_NextNumber using a V6 strDocumentName ('Human Case') 
--                  			input parameter and replaced with V7 trDocumentName ('Human Disease Report') input parameter value instead.  
--	Harold Pryor	04/28/2019	Updated to properly save contacts 
--	Harold Pryor	05/28/2019	Updated to include paramter @idfHuman in call to USSP_HUMAN_DISEASE_CONTACT_SET
--	Harold Pryor	06/04/2019	Updated to include @strEpidemiologistsName input parameter
--	Harold Pryor	06/05/2019	Updated to include @idfsNotCollectedReason input parameter 
--	Harold Pryor	06/18/2019	Updated to include @idfsGeoLocationType input parameter
--	Harold Pryor	06/19/2019	Updated to include @intElevation and @strForeignAddress input parameters
--	Harold Pryor	06/19/2019	Updated to include @intLocationDirection input parameter
--	Lamont Mitchell	04/21/2020	UPDATEd tlbGeolocation Output Parameter
--	Lamont Mitchell	06/07/2020	Modified adding Connected Human disease Report
--	Lamont Mitchell	08/04/2020  ADDED Property @idfInvestigatedByPerson and modified insert and UPDATE Statments to include parameter
--	Lamont Mitchell	08/04/2000	Added SITE ID Property
--	Lamont Mitchell	11/02/2020	Added strNotCollectedReason to property list and add and UPDATE
--	Mandar Kulkani	01/18/2022	Removed two input parameters for relative latitude and longitude
--	Minal Shah		01/24/2022	Added strLocalIdentifier to the request
--	Minal Shah		04/04/2022	Added Site Alert Notifications
--	Doug Albanese	04/19/2022	Added tag to denote refactoring to Location Hierarchy
--	Doug Albanese	05/24/2022	Added idfParentMonitoringSession to connect a Human Active Surveillance to a Disease
--	Mark Wilson		06/02/2022	set @AuditUser = ISNULL(@AuditUser, '') to make sure no nulls
--	Mark Wilson		06/08/2022	defined all parameters for USSP_GBL_SAMPLE_SET
--  Stephen Long    07/06/2022  Updates for site alerts to call new stored procedure.
--	Doug Albanese	07/18/2022	Add @ConnectedTestId, so that HDR can make the association, after obtaining the new idfHumanCase value.
-- Doug Albanese	 09/12/2022	 Linked up the "Monitoring Session ID" to Samples and Tests
-- Doug Albanese	 10/17/2022	 Corrected the "Connected Test" to update all records for the existing monitoring session that have the same person and disease combination
-- Leo Tracchia		10/21/2022 fix for properly deleting tests for human disease report DevOps defect 5006
--	Testing code:
--  exec USP_HUM_HUMAN_DISEASE_SET  null, 27, null, '(new)',784050000000

ALTER PROCEDURE [dbo].[USP_HUM_HUMAN_DISEASE_SET]
(
    @LanguageID NVARCHAR(50),
    @idfHumanCase BIGINT = NULL,                          -- tlbHumanCase.idfHumanCase Primary Key
    @idfHumanCaseRelatedTo BIGINT = NULL,
    @idfHuman BIGINT = NULL,                              -- tlbHumanCase.idfHuman
    @idfHumanActual BIGINT,                               -- tlbHumanActual.idfHumanActual
    @strHumanCaseId NVARCHAR(200) = '(new)',
    @idfsFinalDiagnosis BIGINT,                           -- tlbhumancase.idfsTentativeDiagnosis/idfsFinalDiagnosis
    @datDateOfDiagnosis DATETIME = NULL,                  --tlbHumanCase.datTentativeDiagnosisDate/datFinalDiagnosisDate
    @datNotificationDate DATETIME = NULL,                 --tlbHumanCase.DatNotIFicationDate
    @idfsFinalState BIGINT = NULL,                        --tlbHumanCase.idfsFinalState
    @strLocalIdentifier NVARCHAR(200) = NULL,
    @idfSentByOffice BIGINT = NULL,                       -- tlbHumanCase.idfSentByOffice
    @strSentByFirstName NVARCHAR(200) = NULL,             --tlbHumanCase.strSentByFirstName
    @strSentByPatronymicName NVARCHAR(200) = NULL,        --tlbHumancase.strSentByPatronymicName
    @strSentByLastName NVARCHAR(200) = NULL,              --tlbHumanCase.strSentByLastName
    @idfSentByPerson BIGINT = NULL,                       --tlbHumcanCase.idfSentByPerson

    @idfReceivedByOffice BIGINT = NULL,                   -- tlbHumanCase.idfReceivedByOffice
    @strReceivedByFirstName NVARCHAR(200) = NULL,         --tlbHumanCase.strReceivedByFirstName
    @strReceivedByPatronymicName NVARCHAR(200) = NULL,    --tlbHumanCase.strReceivedByPatronymicName
    @strReceivedByLastName NVARCHAR(200) = NULL,          --tlbHuanCase.strReceivedByLastName
    @idfReceivedByPerson BIGINT = NULL,                   -- tlbHumanCase.idfReceivedByPerson

    @idfsHospitalizationStatus BIGINT = NULL,             -- tlbHumanCase.idfsHospitalizationStatus
    @idfHospital BIGINT = NULL,                           -- tlbHumanCase.idfHospital
    @strCurrentLocation NVARCHAR(200) = NULL,             -- tlbHumanCase.strCurrentLocation
    @datOnSetDate DATETIME = NULL,                        -- tlbHumanCase.datOnSetDate
                                                          --@idfsInitialCaseClassification		BIGINT = NULL, -- tlbHumanCase.idfsInitialCaseStatus 
    @idfsInitialCaseStatus BIGINT = NULL,                 -- tlbHumanCase.idfsInitialCaseStatus
                                                          --@strComments							NVARCHAR(MAX)= NULL, --strClinicalNotes
    @idfsYNPreviouslySoughtCare BIGINT = NULL,            --idfsYNPreviouslySoughtCare
    @datFirstSoughtCareDate DATETIME = NULL,              --tlbHumanCase.datFirstSoughtCareDate

    @idfSoughtCareFacility BIGINT = NULL,                 --tlbHumanCase.idfSoughtCareFacility
    @idfsNonNotIFiableDiagnosis BIGINT = NULL,            --tlbHumanCase.idfsNonNotIFiableDiagnosis
    @idfsYNHospitalization BIGINT = NULL,                 -- tlbHumanCase.idfsYNHospitalization
    @datHospitalizationDate DATETIME = NULL,              --tlbHumanCase.datHospitalizationDate 
    @datDischargeDate DATETIME = NULL,                    -- tlbHumanCase.datDischargeDate
    @strHospitalName NVARCHAR(200) = NULL,                --tlbHumanCase.strHospitalizationPlace  
    @idfsYNAntimicrobialTherapy BIGINT = NULL,            --  tlbHumanCase.idfsYNAntimicrobialTherapy 
    @strAntibioticName NVARCHAR(200) = NULL,              -- tlbHumanCase.strAntimicrobialTherapyName
    @strDosage NVARCHAR(200) = NULL,                      --tlbHumanCase.strDosage
                                                          --(idfs		)DoseMeasurements			BIGINT, --??
    @datFirstAdministeredDate DATETIME = NULL,            -- tlbHumanCase.datFirstAdministeredDate
    @strAntibioticComments NVARCHAR(MAX) = NULL,          -- tlbHumanCase.strClinicalNotes , or strSummaryNotes
    @idfsYNSpecIFicVaccinationAdministered BIGINT = NULL, --  tlbHumanCase.idfsYNSpecIFicVaccinationAdministered
                                                          --@VaccinationName						NVARCHAR(200) = NULL,  --tlbHumanCase.VaccinationName
                                                          --@VaccinationDate						DATETIME = NULL, --tlbHumanCase.VaccinationDate
    @idfInvestigatedByOffice BIGINT = NULL,               -- tlbHumanCase.idfInvestigatedByOffice 
    @StartDateofInvestigation DATETIME = NULL,            -- tlbHumanCase.datInvestigationStartDate
    @idfsYNRelatedToOutbreak BIGINT = NULL,               -- tlbHumanCase.idfsYNRelatedToOutbreak
    @idfOutbreak BIGINT = NULL,                           --idfOutbreak  
    @idfsYNExposureLocationKnown BIGINT = NULL,           --tlbHumanCase.idfsYNExposureLocationKnown
    @idfPointGeoLocation BIGINT = NULL,                   --tlbHumanCase.idfPointGeoLocation
    @datExposureDate DATETIME = NULL,                     -- tlbHumanCase.datExposureDate 
    @idfsGeoLocationType BIGINT = NULL,                   --tlbGeolocation.idfsGeoLocationType
    @strLocationDescription NVARCHAR(MAX) = NULL,         --tlbGeolocation.Description
    @idfsLocationCountry BIGINT = NULL,                   --tlbGeolocation.idfsCountry 
    @idfsLocationRegion BIGINT = NULL,                    --tlbGeolocation.idfsRegion
    @idfsLocationRayon BIGINT = NULL,                     --tlbGeolocation.idfsRayon
    @idfsLocationSettlement BIGINT = NULL,                --tlbGeolocation.idfsSettlement
    @intLocationLatitude FLOAT = NULL,                    --tlbGeolocation.Latittude
    @intLocationLongitude FLOAT = NULL,                   --tlbGeolocation.Longitude
    @intElevation BIGINT = NULL,                          --GISSettlement.intElevation
    @idfsLocationGroundType BIGINT = NULL,                --tlbGeolocation.GroundType
    @intLocationDistance FLOAT = NULL,                    --tlbGeolocation.Distance
    @intLocationDirection FLOAT = NULL,                   --tlbGeolocation.Alignment	
    @strForeignAddress NVARCHAR(MAX) = NULL,              --tlbGeolocation.strForeignAddress 
    @strNote NVARCHAR(MAX) = NULL,                        --tlbhumancase.strNote
                                                          --@idfsFinalClassIFication				BIGINT = NULL, --tlbHuanCase.idfsFinalCaseStatus
    @idfsFinalCaseStatus BIGINT = NULL,                   --tlbHuanCase.idfsFinalCaseStatus 
    @idfsOutcome BIGINT = NULL,                           -- --tlbHumanCase.idfsOutcome 
    @datDateofDeath DATETIME = NULL,                      -- tlbHumanCase.datDateOfDeath 
    @idfsCaseProgressStatus BIGINT = 10109001,            --	tlbHumanCase.reportStatus, default = In-process
    @idfPersonEnteredBy BIGINT = NULL,
    @strClinicalNotes NVARCHAR(2000) = NULL,
    @idfsYNSpecimenCollected BIGINT = NULL,
    @idfsYNTestsConducted BIGINT = NULL,
    @DiseaseReportTypeID BIGINT = NULL,
    @blnClinicalDiagBasis BIT = NULL,
    @blnLabDiagBasis BIT = NULL,
    @blnEpiDiagBasis BIT = NULL,
    @DateofClassification DATETIME = NULL,
    @strSummaryNotes NVARCHAR(MAX) = NULL,
    @idfEpiObservation BIGINT = NULL,
    @idfCSObservation BIGINT = NULL,
    @idfInvestigatedByPerson BIGINT = NULL,
    @strEpidemiologistsName NVARCHAR(MAX) = NULL,
    @idfsNotCollectedReason BIGINT = NULL,
    @strNotCollectedReason NVARCHAR(200) = NULL,
    @SamplesParameters NVARCHAR(MAX) = NULL,
    @TestsParameters NVARCHAR(MAX) = NULL,
    @TestsInterpretationParameters NVARCHAR(MAX) = NULL,
    @AntiviralTherapiesParameters NVARCHAR(MAX) = NULL,
    @VaccinationsParameters NVARCHAR(MAX) = NULL,
    @ContactsParameters NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL,
    @idfsHumanAgeType BIGINT = NULL,
    @intPatientAge INT = NULL,
    @datCompletionPaperFormDate DATETIME = NULL,
    @RowStatus INT,
    @idfsSite BIGINT = NULL,
    @AuditUser NVARCHAR(100) = '',
    @idfParentMonitoringSession BIGINT = NULL,
	@ConnectedTestId BIGINT = NULL
--@Samples						tlbHdrMaterialGetListSPType READONLY, 
--@Tests							tlbHdrTestGetListSPType READONLY
--, 
--@Contacts						tlbHdrContactGetListSPType READONLY

)
AS
DECLARE @returnCode INT = 0
DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS'
DECLARE @RowID BIGINT = NULL,
        @RowAction NCHAR = NULL,
        @OrderNumber INT,
        @SampleID BIGINT,
        @SampleTypeID BIGINT = NULL,
        @HumanID BIGINT,
        @HumanMasterID BIGINT = NULL,
        @CollectedByPersonID BIGINT = NULL,
        @CollectedByOrganizationID BIGINT = NULL,
        @CollectionDate DATETIME = NULL,
        @SentDate DATETIME = NULL,
        @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
        @SampleStatusTypeID BIGINT = NULL,
        @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
        @SentToOrganizationID BIGINT = NULL,
        @ReadOnlyIndicator BIT = NULL,
        @AccessionDate DATETIME = NULL,
        @AccessionConditionTypeID BIGINT = NULL,
        @AccessionComment NVARCHAR(200) = NULL,
        @AccessionByPersonID BIGINT = NULL,
        @CurrentSiteID BIGINT = NULL,
        @TestID BIGINT,
        @TestNameTypeID BIGINT = NULL,
        @TestCategoryTypeID BIGINT = NULL,
        @TestResultTypeID BIGINT = NULL,
        @TestStatusTypeID BIGINT,
        @BatchTestID BIGINT = NULL,
        @TestNumber INT = NULL,
        @StartedDate DATETIME2 = NULL,
        @ResultDate DATETIME2 = NULL,
        @TestedByPersonID BIGINT = NULL,
        @TestedByOrganizationID BIGINT = NULL,
        @ResultEnteredByOrganizationID BIGINT = NULL,
        @ResultEnteredByPersonID BIGINT = NULL,
        @ValidatedByOrganizationID BIGINT = NULL,
        @ValidatedByPersonID BIGINT = NULL,
        @NonLaboratoryTestIndicator BIT,
        @ExternalTestIndicator BIT = NULL,
        @PerformedByOrganizationID BIGINT = NULL,
        @ReceivedDate DATETIME2 = NULL,
        @ContactPersonName NVARCHAR(200) = NULL,
        @TestHumanCaseID BIGINT = NULL,
        @TestInterpretationID BIGINT,
        @InterpretedStatusTypeID BIGINT = NULL,
        @InterpretedByOrganizationID BIGINT = NULL,
        @InterpretedByPersonID BIGINT = NULL,
        @TestingInterpretations BIGINT,
        @ValidatedStatusIndicator BIT = NULL,
        @ReportSessionCreatedIndicator BIT = NULL,
        @ValidatedComment NVARCHAR(200) = NULL,
        @InterpretedComment NVARCHAR(200) = NULL,
        @ValidatedDate DATETIME = NULL,
        @InterpretedDate DATETIME = NULL,
        @EventId BIGINT,
        @EventTypeId BIGINT = NULL,
        @EventSiteId BIGINT = NULL,
        @EventObjectId BIGINT = NULL,
        @EventUserId BIGINT = NULL,
        @EventDiseaseId BIGINT = NULL,
        @EventLocationId BIGINT = NULL,
        @EventInformationString NVARCHAR(MAX) = NULL,
        @EventLoginSiteId BIGINT = NULL,
        @MonitoringSessionActionID BIGINT,
        @ActionTypeID BIGINT,
        @ActionStatusTypeID BIGINT,
        @ActionDate DATETIME = NULL,
        @Comments NVARCHAR(500) = NULL,
        @DiseaseID BIGINT,
        @idfMonitoringSessionToDiagnosis BIGINT,
        @DateEntered DATETIME = GETDATE(),
		@idfMaterial BIGINT


SET @AuditUser = ISNULL(@AuditUser, '')

DECLARE @SamplesTemp TABLE
(
    SampleID BIGINT NOT NULL,
    SampleTypeID BIGINT NULL,
    SampleStatusTypeID BIGINT NULL,
    CollectionDate DATETIME2 NULL,
    CollectedByOrganizationID BIGINT NULL,
    CollectedByPersonID BIGINT NULL,
    SentDate DATETIME2 NULL,
    SentToOrganizationID BIGINT NULL,
    EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
    Comments NVARCHAR(200) NULL,
    SiteID BIGINT NOT NULL,
    CurrentSiteID BIGINT NULL,
    DiseaseID BIGINT NULL,
    ReadOnlyIndicator BIT NULL,
    HumanID BIGINT NULL,
    HumanMasterID BIGINT NULL,
    RowStatus INT NOT NULL,
    RowAction CHAR(1) NULL
);

DECLARE @TestsTemp TABLE
(
    TestID BIGINT NOT NULL,
    TestNameTypeID BIGINT NULL,
    TestCategoryTypeID BIGINT NULL,
    TestResultTypeID BIGINT NULL,
    TestStatusTypeID BIGINT NOT NULL,
    DiseaseID BIGINT NULL,
    SampleID BIGINT NULL,
    BatchTestID BIGINT NULL,
    ObservationID BIGINT NULL,
    TestNumber INT NULL,
    Comments NVARCHAR NULL,
    StartedDate DATETIME2 NULL,
    ResultDate DATETIME2 NULL,
    TestedByOrganizationID BIGINT NULL,
    TestedByPersonID BIGINT NULL,
    ResultEnteredByOrganizationID BIGINT NULL,
    ResultEnteredByPersonID BIGINT NULL,
    ValidatedByOrganizationID BIGINT NULL,
    ValidatedByPersonID BIGINT NULL,
    ReadOnlyIndicator BIT NOT NULL,
    NonLaboratoryTestIndicator BIT NOT NULL,
    ExternalTestIndicator BIT NULL,
    PerformedByOrganizationID BIGINT NULL,
    ReceivedDate DATETIME2 NULL,
    ContactPersonName NVARCHAR(200) NULL,
    RowStatus INT NOT NULL,
    RowAction CHAR(1) NULL
);

DECLARE @TestsInterpretationParametersTemp TABLE
(
    TestInterpretationID BIGINT NOT NULL,
    DiseaseID BIGINT NULL,
    InterpretedStatusTypeID BIGINT NULL,
    ValidatedByOrganizationID BIGINT NULL,
    ValidatedByPersonID BIGINT NULL,
    InterpretedByOrganizationID BIGINT NULL,
    InterpretedByPersonID BIGINT NULL,
    TestID BIGINT NOT NULL,
    ValidatedStatusIndicator BIT NULL,
    ReportSessionCreatedIndicator BIT NULL,
    ValidatedComment NVARCHAR(200) NULL,
    InterpretedComment NVARCHAR(200) NULL,
    ValidatedDate DATETIME NULL,
    InterpretedDate DATETIME NULL,
    ReadOnlyIndicator BIT NOT NULL,
    RowStatus INT NOT NULL,
    RowAction INT NULL
);
DECLARE @EventsTemp TABLE
(
    EventId BIGINT NOT NULL,
    EventTypeId BIGINT NULL,
    UserId BIGINT NULL,
    SiteId BIGINT NULL,
    LoginSiteId BIGINT NULL,
    ObjectId BIGINT NULL,
    DiseaseId BIGINT NULL,
    LocationId BIGINT NULL,
    InformationString NVARCHAR(MAX) NULL
);
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200)
);

BEGIN
    BEGIN TRY
        SET @SamplesParameters = REPLACE(@SamplesParameters, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@SamplesParameters)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                SampleStatusTypeID BIGINT,
                CollectionDate DATETIME2,
                CollectedByOrganizationID BIGINT,
                CollectedByPersonID BIGINT,
                SentDate DATETIME2,
                SentToOrganizationID BIGINT,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                Comments NVARCHAR(200),
                SiteID BIGINT,
                CurrentSiteID BIGINT,
                DiseaseID BIGINT,
                ReadOnlyIndicator BIT,
                HumanID BIGINT,
                HumanMasterID BIGINT,
                RowStatus INT,
                RowAction CHAR(1)
            );

        SET @TestsParameters = REPLACE(@TestsParameters, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @TestsTemp
        SELECT *
        FROM
            OPENJSON(@TestsParameters)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Comments NVARCHAR(500),
                StartedDate DATETIME2,
                ResultDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                RowStatus INT,
                RowAction CHAR(1)
            );



        INSERT INTO @TestsInterpretationParametersTemp
        SELECT *
        FROM
            OPENJSON(@TestsInterpretationParameters)
            WITH
            (
                TestInterpretationID BIGINT,
                DiseaseID BIGINT,
                InterpretedStatusTypeID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                InterpretedByOrganizationID BIGINT,
                InterpretedByPersonID BIGINT,
                TestID BIGINT,
                ValidatedStatusIndicator BIT,
                ReportSessionCreatedIndicator BIT,
                ValidatedComment NVARCHAR(200),
                InterpretedComment NVARCHAR(200),
                ValidatedDate DATETIME2,
                InterpretedDate DATETIME2,
                ReadOnlyIndicator BIT,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        BEGIN TRANSACTION

        DECLARE @SupressSELECT TABLE
        (
            retrunCode INT,
            returnMessage VARCHAR(200)
        )
        DECLARE @SupressSELECTHumanCase TABLE
        (
            retrunCode INT,
            returnMessage VARCHAR(200) --,
        -- idfHumanCase BIGINT
        )
        DECLARE @SupressSELECTHuman TABLE
        (
            retrunCode INT,
            returnMessage VARCHAR(200),
            idfHuman BIGINT
        )

        DECLARE @SupressSELECTGeoLocation TABLE
        (
            returnCode INT,
            returnMsg VARCHAR(200),
            idfGeoLocation BIGINT
        )


        SET @DiseaseID = @idfsFinalDiagnosis

        DECLARE @HumanDiseasereportRelnUID BIGINT

        DECLARE @COPYHUMANACTUALTOHUMAN_ReturnCode INT = 0

        -- Create a human record FROM Human Actual if not already present
        IF @idfHumanActual IS NOT NULL -- AND @idfHumanCase IS  NULL
        BEGIN
            --INSERT INTO @SuppressSelect
            INSERT INTO @SupressSELECTHumanCase
            EXEC USP_HUM_COPYHUMANACTUALTOHUMAN @idfHumanActual,
                                                @idfHuman OUTPUT,
                                                @returnCode OUTPUT,
                                                @returnMsg OUTPUT
            --SET @COPYHUMANACTUALTOHUMAN_ReturnCode = dbo.FN_COPYHUMANACTUALTOHUMAN(@idfHumanActual, @idfHuman)
            IF @returnCode <> 0
            BEGIN
                --SELECT @returnCode, @returnMsg
                RETURN
            END
        END

        --TODO: Needs to be refactored to use Hierarchy
        -- Insert or update geolocation record if any of the information is provided
        IF @idfsLocationGroundType IS NOT NULL
           OR @idfsGeoLocationType IS NOT NULL
           OR @idfsLocationCountry IS NOT NULL
           OR @idfsLocationRegion IS NOT NULL
           OR @idfsLocationRayon IS NOT NULL
           OR @idfsLocationSettlement IS NOT NULL
           OR @strLocationDescription IS NOT NULL
           OR @intLocationLatitude IS NOT NULL
           OR @intLocationLongitude IS NOT NULL
           OR @intLocationDistance IS NOT NULL
           OR @intLocationDirection IS NOT NULL
           OR @strForeignAddress IS NOT NULL
           OR @intElevation IS NOT NULL
        BEGIN
            -- Set geo location 
            IF @idfPointGeoLocation IS NULL
            BEGIN
                INSERT INTO @SupressSELECT
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbGeoLocation',
                                               @idfPointGeoLocation OUTPUT
            END

            BEGIN
                INSERT INTO @SupressSELECTGeoLocation
                EXECUTE [dbo].[USP_HUMAN_DISEASE_GEOLOCATION_SET] @idfPointGeoLocation,
                                                                  @idfsLocationGroundType,
                                                                  @idfsGeoLocationType,
                                                                  @idfsLocationCountry,
                                                                  @idfsLocationRegion,
                                                                  @idfsLocationRayon,
                                                                  @idfsLocationSettlement,
                                                                  @strLocationDescription,
                                                                  @intLocationLatitude,
                                                                  @intLocationLongitude,
                                                                  NULL,
                                                                  @intLocationDistance,
                                                                  @intLocationDirection,
                                                                  @strForeignAddress,
                                                                  1,
                                                                  @intElevation,
                                                                  @AuditUser
            END
        END
        --			SET @idfPointGeoLocation =(SELECT idfGeoLocation FROM @SupressSELECTGeoLocation) 

        IF NOT EXISTS
        (
            SELECT idfHumanCase
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase
                  AND intRowStatus = 0
        )
        BEGIN
            -- Get next key value
            INSERT INTO @SupressSELECT
            EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbHumanCase', @idfHumanCase OUTPUT

            -- Create a stringId for Human Case
            IF LEFT(ISNULL(@strHumanCaseID, '(new'), 4) = '(new'
            BEGIN
                INSERT INTO @SupressSELECT
                EXEC dbo.USP_GBL_NextNumber_GET 'Human Disease Report',
                                                @strHumanCaseID OUTPUT,
                                                NULL --N'AS Session'
            END

            INSERT INTO dbo.tlbHumanCase
            (
                idfHumanCase,
                idfHuman,
                strCaseId,
                idfsFinalDiagnosis,
                datTentativeDiagnosisDate,
                datNotIFicationDate,
                idfsFinalState,
                strLocalIdentifier,
                idfSentByOffice,
                strSentByFirstName,
                strSentByPatronymicName,
                strSentByLastName,
                idfSentByPerson,
                idfReceivedByOffice,
                strReceivedByFirstName,
                strReceivedByPatronymicName,
                strReceivedByLastName,
                idfReceivedByPerson,
                idfsHospitalizationStatus,
                idfHospital,
                strCurrentLocation,
                datOnSetDate,
                idfsInitialCaseStatus,
                idfsYNPreviouslySoughtCare,
                datFirstSoughtCareDate,
                idfSoughtCareFacility,
                idfsNonNotIFiableDiagnosis,
                idfsYNHospitalization,
                datHospitalizationDate,
                datDischargeDate,
                strHospitalizationPlace,
                idfsYNAntimicrobialTherapy,
                strClinicalNotes,
                idfsYNSpecIFicVaccinationAdministered,
                idfInvestigatedByOffice,
                datInvestigationStartDate,
                idfsYNRelatedToOutbreak,
                idfOutbreak,
                idfPointGeoLocation,
                idfsYNExposureLocationKnown,
                datExposureDate,
                strNote,
                idfsFinalCaseStatus,
                idfsOutcome,
                intRowStatus,
                idfsCaseProgressStatus,
                datModificationDate,
                datEnteredDate,
                idfPersonEnteredBy,
                idfsYNSpecimenCollected,
                idfsYNTestsConducted,
                DiseaseReportTypeID,
                blnClinicalDiagBasis,
                blnLabDiagBasis,
                blnEpiDiagBasis,
                datFinalCaseClassificationDate,
                strsummarynotes,
                idfEpiObservation,
                idfCSObservation,
                idfInvestigatedByPerson,
                strEpidemiologistsName,
                idfsNotCollectedReason,
                strNotCollectedReason,
                idfsHumanAgeType,
                intPatientAge,
                datCompletionPaperFormDate,
                idfsSite,
                AuditCreateUser,
                idfParentMonitoringSession
            --datDateOfDeath,
            --@strCaseInvestigationOutbreakID, 
            --VaccinationName,
            --VaccinationDate,
            --@strComments,	
            )
            VALUES
            (   @idfHumanCase,
                @idfHuman,
                @strHumanCaseId,
                @idfsFinalDiagnosis,
                @datDateOfDiagnosis,
                @datNotificationDate,
                @idfsFinalState,
                @strLocalIdentifier,
                @idfSentByOffice,
                @strSentByFirstName,
                @strSentByPatronymicName,
                @strSentByLastName,
                @idfSentByPerson,
                @idfReceivedByOffice,
                @strReceivedByFirstName,
                @strReceivedByPatronymicName,
                @strReceivedByLastName,
                @idfReceivedByPerson,
                @idfsHospitalizationStatus,
                @idfHospital,
                @strCurrentLocation,
                @datOnSetDate,
                @idfsInitialCaseStatus,
                @idfsYNPreviouslySoughtCare,
                @datFirstSoughtCareDate,
                @idfSoughtCareFacility,
                @idfsNonNotIFiableDiagnosis,
                @idfsYNHospitalization,
                @datHospitalizationDate,
                @datDischargeDate,
                @strHospitalName,
                @idfsYNAntimicrobialTherapy,
                @strClinicalNotes,
                @idfsYNSpecIFicVaccinationAdministered,
                @idfInvestigatedByOffice,
                @StartDateofInvestigation,
                @idfsYNRelatedToOutbreak,
                @idfOutbreak,
                @idfPointGeoLocation,
                @idfsYNExposureLocationKnown,
                @datExposureDate,
                @strNote,
                @idfsFinalCaseStatus,
                @idfsOutcome,
                0,
                @idfsCaseProgressStatus,
                GETDATE(), --datModificationDate	
                GETDATE(), --datEnteredDate		
                @idfPersonEnteredBy,
                @idfsYNSpecimenCollected,
                @idfsYNTestsConducted,
                @DiseaseReportTypeID,
                @blnClinicalDiagBasis,
                @blnLabDiagBasis,
                @blnEpiDiagBasis,
                @DateofClassification,
                @strSummaryNotes,
                @idfEpiObservation,
                @idfCSObservation,
                @idfInvestigatedByPerson,
                @strEpidemiologistsName,
                @idfsNotCollectedReason,
                @strNotCollectedReason,
                @idfsHumanAgeType,
                @intPatientAge,
                @datCompletionPaperFormDate,
                @idfsSite,
                @AuditUser,
                @idfParentMonitoringSession
            --@datDateofDeath,
            --@idfsFinalClassIFication,
            --@strCaseInvestigationOutbreakID,
            --@VaccinationName,
            --@VaccinationDate, 
            --@strComments,
            --@idfsInitialCaseClassIFication,
            )

            DECLARE @RelatedToRoot BIGINT


            IF @idfHumanCaseRelatedTo IS NOT NULL
            BEGIN

                --EStablish the Root
                IF NOT EXISTS
                (
                    SELECT *
                    FROM dbo.HumanDiseaseReportRelationship
                    WHERE (HumanDiseaseReportID = @idfHumanCaseRelatedTo)
                          AND (RelatedToHumanDiseaseReportIdRoot IS NOT NULL)
                          AND (intRowStatus = 0)
                )
                BEGIN
                    SET @RelatedToRoot = @idfHumanCaseRelatedTo
                END
                ELSE
                BEGIN
                    SELECT @RelatedToRoot = RelatedToHumanDiseaseReportIdRoot
                    FROM dbo.HumanDiseaseReportRelationship
                    WHERE (HumanDiseaseReportID = @idfHumanCaseRelatedTo)
                          AND (RelatedToHumanDiseaseReportIdRoot IS NOT NULL)
                          AND (intRowStatus = 0)
                END
                --End establishing the Root

                INSERT INTO @SupressSELECT
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'HumanDiseaseReportRelationship',
                                               @HumanDiseasereportRelnUID OUTPUT;

                INSERT INTO dbo.HumanDiseaseReportRelationship
                (
                    HumanDiseasereportRelnUID,
                    HumanDiseaseReportID,
                    RelateToHumanDiseaseReportID,
                    RelatedToHumanDiseaseReportIdRoot,
                    RelationshipTypeID,
                    intRowStatus,
                    AuditCreateUser,
                    AuditCreateDTM,
                    rowguid
                )
                VALUES
                (   @HumanDiseasereportRelnUID,
                    @idfHumanCase,
                    @idfHumanCaseRelatedTo,
                    @RelatedToRoot,
                    10503001, --Linked Copy Parent
                    0,
                    @AuditUser,
                    GETDATE(),
                    NEWID()
                )
            END
        END
        ELSE
        BEGIN
            UPDATE dbo.tlbHumanCase
            SET strCaseId = @strHumanCaseId,
                idfsTentativeDiagnosis = @idfsFinalDiagnosis,
                idfsFinalDiagnosis = @idfsFinalDiagnosis,
                datTentativeDiagnosisDate = @datDateOfDiagnosis,
                datFinalDiagnosisDate = @datDateOfDiagnosis,
                datNotIFicationDate = @datNotificationDate,
                idfsFinalState = @idfsFinalState,
                idfSentByOffice = @idfSentByOffice,
                strSentByFirstName = @strSentByFirstName,
                strSentByPatronymicName = @strSentByPatronymicName,
                strSentByLastName = @strSentByLastName,
                --idfSentByPerson =  @idfSentByPerson,
                idfSentByPerson = @idfSentByPerson,
                idfReceivedByOffice = @idfReceivedByOffice,
                strReceivedByFirstName = @strReceivedByFirstName,
                strReceivedByPatronymicName = @strReceivedByPatronymicName,
                strReceivedByLastName = @strReceivedByLastName,
                --idfRecdByPerson =  @idfRecdByPerson,
                idfReceivedByPerson = @idfReceivedByPerson,
                strLocalIdentifier = @strLocalIdentifier,
                idfsHospitalizationStatus = @idfsHospitalizationStatus,
                idfHospital = @idfHospital,
                strCurrentLocation = @strCurrentLocation,
                datOnSetDate = @datOnSetDate,
                idfsInitialCaseStatus = @idfsInitialCaseStatus,
                --@strComments =  --@strComments,
                idfsYNPreviouslySoughtCare = @idfsYNPreviouslySoughtCare,
                datFirstSoughtCareDate = @datFirstSoughtCareDate,
                idfSoughtCareFacility = @idfSoughtCareFacility,
                idfsNonNotIFiableDiagnosis = @idfsNonNotIFiableDiagnosis,
                idfsYNHospitalization = @idfsYNHospitalization,
                datHospitalizationDate = @datHospitalizationDate,
                datDischargeDate = @datDischargeDate,
                strHospitalizationPlace = @strHospitalName,
                idfsYNAntimicrobialTherapy = @idfsYNAntimicrobialTherapy,
                --strClinicalNotes =  @strAntibioticComments,
                --strClinicalNotes = @strClinicalNotes + ' ' + @strAntibioticComments,
                strClinicalNotes = @strClinicalNotes,
                --VaccinationName = @VaccinationName,
                --VaccinationDate = @VaccinationDate,
                idfsYNSpecIFicVaccinationAdministered = @idfsYNSpecIFicVaccinationAdministered,
                idfInvestigatedByOffice = @idfInvestigatedByOffice,
                datInvestigationStartDate = @StartDateofInvestigation,
                idfsYNRelatedToOutbreak = @idfsYNRelatedToOutbreak,
                idfOutbreak = @idfOutbreak,
                idfsYNExposureLocationKnown = @idfsYNExposureLocationKnown,
                idfPointGeoLocation = @idfPointGeoLocation,
                datExposureDate = @datExposureDate,
                strNote = @strNote,
                --idfsFinalCaseStatus  =  @idfsFinalClassIFication,			--finalCaseStatus is the classification
                idfsFinalCaseStatus = @idfsFinalCaseStatus,
                idfsOutcome = @idfsOutcome,
                --datDateOfDeath =  @datDateofDeath,
                idfsCaseProgressStatus = @idfsCaseProgressStatus,
                datModificationDate = GETDATE(),
                idfsYNSpecimenCollected = @idfsYNSpecimenCollected,
                idfsYNTestsConducted = @idfsYNTestsConducted,
                DiseaseReportTypeID = @DiseaseReportTypeID,
                blnClinicalDiagBasis = @blnClinicalDiagBasis,
                blnLabDiagBasis = @blnLabDiagBasis,
                blnEpiDiagBasis = @blnEpiDiagBasis,
                datFinalCaseClassificationDate = @DateofClassification,
                strsummarynotes = @strSummaryNotes,
                idfEpiObservation = @idfEpiObservation,
                idfCSObservation = @idfCSObservation,
                strEpidemiologistsName = @strEpidemiologistsName,
                idfsNotCollectedReason = @idfsNotCollectedReason,
                strNotCollectedReason = @strNotCollectedReason,
                idfsHumanAgeType = @idfsHumanAgeType,
                intPatientAge = @intPatientAge,
                datCompletionPaperFormDate = @datCompletionPaperFormDate,
                idfInvestigatedByPerson = @idfInvestigatedByPerson,
                idfPersonEnteredBy = @idfPersonEnteredBy,
                idfsSite = @idfsSite,
                AuditUpdateUser = @AuditUser,
                idfParentMonitoringSession = @idfParentMonitoringSession
            WHERE idfHumanCase = @idfHumanCase
                  AND intRowStatus = 0

        END

        ----set Samples for this idfHumanCase	
        IF @SamplesParameters IS NOT NULL
        BEGIN

            WHILE EXISTS (SELECT * FROM @SamplesTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = SampleID,
                    @SampleID = SampleID,
                    @SampleTypeID = SampleTypeID,
                    @CollectedByPersonID = CollectedByPersonID,
                    @CollectedByOrganizationID = CollectedByOrganizationID,
                    @CollectionDate = CAST(CollectionDate AS DATETIME),
                    @SentDate = CAST(SentDate AS DATETIME),
                    @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                    @SampleStatusTypeID = SampleStatusTypeID,
                    @Comments = Comments,
                    @idfsSite = SiteID,
                    @CurrentSiteID = CurrentSiteID,
                    @RowStatus = RowStatus,
                    @SentToOrganizationID = SentToOrganizationID,
                    @DiseaseID = DiseaseID,
                    @ReadOnlyIndicator = ReadOnlyIndicator,
                    @HumanID = HumanID,
                    @HumanMasterID = HumanMasterID,
                    @RowAction = RowAction
                FROM @SamplesTemp;

                INSERT INTO @SuppressSelect

                EXECUTE dbo.USSP_GBL_SAMPLE_SET @AuditUserName = @AuditUser,
                                                @SampleID = @SampleID OUTPUT,
                                                @SampleTypeID = @SampleTypeID,
                                                @RootSampleID = NULL,
                                                @ParentSampleID = NULL,
                                                @HumanID = @idfHuman,
                                                @SpeciesID = NULL,
                                                @AnimalID = NULL,
                                                @VectorID = NULL,
                                                @MonitoringSessionID = @idfParentMonitoringSession,
                                                @VectorSessionID = NULL,
                                                @HumanDiseaseReportID = @idfHumanCase,
                                                @VeterinaryDiseaseReportID = NULL,
                                                @CollectionDate = @CollectionDate,
                                                @CollectedByPersonID = @CollectedByPersonID,
                                                @CollectedByOrganizationID = @CollectedByOrganizationID,
                                                @SentDate = @SentDate,
                                                @SentToOrganizationID = @SentToOrganizationID,
                                                @EIDSSLocalFieldSampleID = @EIDSSLocalOrFieldSampleID,
                                                @SiteID = @idfsSite,
                                                @EnteredDate = @DateEntered,
                                                @ReadOnlyIndicator = @ReadOnlyIndicator,
                                                @SampleStatusTypeID = @SampleStatusTypeID,
                                                @Comments = @Comments,
                                                @CurrentSiteID = @CurrentSiteID,
                                                @DiseaseID = @DiseaseID,
                                                @BirdStatusTypeID = NULL,
                                                @RowStatus = @RowStatus,
                                                @RowAction = @RowAction

                UPDATE @TestsTemp
                SET SampleID = @SampleID
                WHERE SampleID = @RowID

                DELETE FROM @SamplesTemp
                WHERE SampleID = @RowID
            END
        END
        IF @TestsParameters IS NOT NULL
        BEGIN
            WHILE EXISTS (SELECT * FROM @TestsTemp)
				BEGIN
					SELECT TOP 1
						@RowID = TestID,
						@TestID = TestID,
						@TestNameTypeID = TestNameTypeID,
						@TestCategoryTypeID = TestCategoryTypeID,
						@TestResultTypeID = TestResultTypeID,
						@TestStatusTypeID = TestStatusTypeID,
						@DiseaseID = DiseaseID,
						@SampleID = SampleID,
						@Comments = Comments,
						@RowStatus = RowStatus,
						@StartedDate = StartedDate,
						@ResultDate = ResultDate,
						@TestedByOrganizationID = TestedByOrganizationID,
						@TestedByPersonID = TestedByPersonID,
						@ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
						@ResultEnteredByPersonID = ResultEnteredByPersonID,
						@ValidatedByOrganizationID = ValidatedByOrganizationID,
						@ValidatedByPersonID = ValidatedByPersonID,
						@ReadOnlyIndicator = ReadOnlyIndicator,
						@NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
						@ExternalTestIndicator = ExternalTestIndicator,
						@PerformedByOrganizationID = PerformedByOrganizationID,
						@ReceivedDate = ReceivedDate,
						@ContactPersonName = ContactPersonName,
						@RowAction = RowAction
					FROM @TestsTemp;


					--If record is being soft-deleted, then check if the test record was originally created 
					--in the laboaratory module.  If it was, then disassociate the test record from the 
					--human monitoring session, so that the test record remains in the laboratory module 
					--for further action.

					set @TestHumanCaseID = @idfHumanCase;

					--if deleted and it's an HDR test, then just delete test as normal
					IF @RowStatus = 1 AND @NonLaboratoryTestIndicator = 1
						BEGIN
							SET @RowStatus = 1;
							--SET @TestHumanCaseID = null;
						END

					-- if deleted and it's a Lab test, then don't delete (just disassociate from HDR)
					ELSE IF (@RowStatus = 1 AND @NonLaboratoryTestIndicator = 0)
						BEGIN
							SET @RowStatus = 0;
							SET @TestHumanCaseID = null; --@idfHumanCase;
						END;


					------set Tests for this idfHumanCase
					INSERT INTO @SuppressSelect

					EXECUTE dbo.USSP_GBL_TEST_SET @LanguageID = @LanguageID,
												  @TestID = @TestID OUTPUT,
												  @TestNameTypeID = @TestNameTypeID,
												  @TestCategoryTypeID = @TestCategoryTypeID,
												  @TestResultTypeID = @TestResultTypeID,
												  @TestStatusTypeID = @TestStatusTypeID,
												  @DiseaseID = @DiseaseID,
												  @SampleID = @SampleID,
												  @BatchTestID = NULL,
												  @ObservationID = NULL,
												  @TestNumber = NULL,
												  @Comments = @Comments,
												  @RowStatus = @RowStatus,
												  @StartedDate = @StartedDate,
												  @ResultDate = @ResultDate,
												  @TestedByOrganizationID = @TestedByOrganizationID,
												  @TestedByPersonID = @TestedByPersonID,
												  @ResultEnteredByOrganizationID = @ResultEnteredByOrganizationID,
												  @ResultEnteredByPersonID = @ResultEnteredByPersonID,
												  @ValidatedByOrganizationID = @ValidatedByOrganizationID,
												  @ValidatedByPersonID = @ValidatedByPersonID,
												  @ReadOnlyIndicator = @ReadOnlyIndicator,
												  @NonLaboratoryTestIndicator = @NonLaboratoryTestIndicator,
												  @ExternalTestIndicator = @ExternalTestIndicator,
												  @PerformedByOrganizationID = @PerformedByOrganizationID,
												  @ReceivedDate = @ReceivedDate,
												  @ContactPerson = @ContactPersonName,
												  @MonitoringSessionID = @idfParentMonitoringSession,
												  @VectorSessionID = NULL,
												  @HumanDiseaseReportID = @TestHumanCaseID,
												  @VeterinaryDiseaseReportID = NULL,
												  @AuditUserName = @AuditUser,
												  @RowAction = @RowAction;

					UPDATE @TestsInterpretationParametersTemp
					SET TestID = @TestID
					WHERE TestID = @RowID

					DELETE FROM @TestsTemp
					WHERE TestID = @RowID;
            END;
        END


        Declare @sampleCount int
        Set @sampleCount =
        (
            SELECT Count(*)
            FROM dbo.tlbMaterial
            WHERE intRowStatus = 0
                  and idfHumanCase = @idfHumanCase
        )

        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase
                  AND idfsYNSpecimenCollected = 10100002
        )
        Begin
            UPDATE dbo.tlbMaterial
            SET intRowStatus = 1,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @idfHumanCase
        END
        ELSE IF EXISTS
        (
            SELECT *
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase
                  AND idfsYNSpecimenCollected = 10100003
        )
        BEGIN
            UPDATE dbo.tlbHumanCase
            Set idfsNotCollectedReason = NULL,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @idfHumanCase;

            UPDATE dbo.tlbMaterial
            SET intRowStatus = 1,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @idfHumanCase;

        END
        ELSE IF EXISTS
        (
            SELECT *
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase
                  AND idfsYNSpecimenCollected = 10100001
        )
        BEGIN
            UPDATE dbo.tlbHumanCase
            SET idfsNotCollectedReason = NULL,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @idfHumanCase
            IF (@sampleCount = 0)
            BEGIN
                UPDATE dbo.tlbHumanCase
                SET idfsYNSpecimenCollected = NULL,
                    AuditUpdateUser = @AuditUser
                WHERE idfHumanCase = @idfHumanCase
            END

        END

        IF @TestsInterpretationParameters IS NOT NULL
        BEGIN
            WHILE EXISTS (SELECT * FROM @TestsInterpretationParametersTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = TestInterpretationID,
                    @TestInterpretationID = TestInterpretationID,
                    @DiseaseID = DiseaseID,
                    @InterpretedStatusTypeID = InterpretedStatusTypeID,
                    @ValidatedByOrganizationID = ValidatedByOrganizationID,
                    @ValidatedByPersonID = ValidatedByPersonID,
                    @InterpretedByOrganizationID = InterpretedByOrganizationID,
                    @InterpretedByPersonID = InterpretedByPersonID,
                    @TestID = TestID,
                    @ValidatedStatusIndicator = ValidatedStatusIndicator,
                    @ReportSessionCreatedIndicator = ReportSessionCreatedIndicator,
                    @ValidatedComment = ValidatedComment,
                    @InterpretedComment = InterpretedComment,
                    @ValidatedDate = ValidatedDate,
                    @InterpretedDate = InterpretedDate,
                    @RowStatus = RowStatus,
                    @ReadOnlyIndicator = ReadOnlyIndicator,
                    @RowAction = RowAction
                FROM @TestsInterpretationParametersTemp;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_TEST_INTERPRETATION_SET @AuditUser,
                                                             @TestInterpretationID OUTPUT,
                                                             @DiseaseID,
                                                             @InterpretedStatusTypeID,
                                                             @ValidatedByOrganizationID,
                                                             @ValidatedByPersonID,
                                                             @InterpretedByOrganizationID,
                                                             @InterpretedByPersonID,
                                                             @TestID,
                                                             @ValidatedStatusIndicator,
                                                             @ReportSessionCreatedIndicator,
                                                             @ValidatedComment,
                                                             @InterpretedComment,
                                                             @ValidatedDate,
                                                             @InterpretedDate,
                                                             @RowStatus,
                                                             @ReadOnlyIndicator,
                                                             @RowAction;

                DELETE FROM @TestsInterpretationParametersTemp
                WHERE TestInterpretationID = @RowID;
            END;
        END

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                            @EventTypeId,
                                            @EventUserId,
                                            @EventObjectId,
                                            @EventDiseaseId,
                                            @EventSiteId,
                                            @EventInformationString,
                                            @EventLoginSiteId,
                                            @EventLocationId,
                                            @AuditUser;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        --------set AntiviralTherapies for this idfHumanCase
        IF @AntiviralTherapiesParameters IS NOT NULL
        BEGIN

            EXEC dbo.USSP_HUMAN_DISEASE_ANTIVIRALTHERAPIES_SET @idfHumanCase = @idfHumanCase,
                                                               @AntiviralTherapiesParameters = @AntiviralTherapiesParameters,
                                                               @outbreakCall = 0,
                                                               @User = @AuditUser
        END
        --------set Vaccinations for this idfHumanCase
        IF @VaccinationsParameters IS NOT NULL
        BEGIN
            EXEC dbo.USSP_HUMAN_DISEASE_VACCINATIONS_SET @idfHumanCase = @idfHumanCase,
                                                         @VaccinationsParameters = @VaccinationsParameters,
                                                         @outbreakCall = 0,
                                                         @User = @AuditUser
        END

        IF @ContactsParameters IS NOT NULL
        BEGIN
            EXEC USSP_GBL_CONTACT_SET @Contacts = @ContactsParameters,
                                      @SiteID = @CurrentSiteID,
                                      @AuditUSerName = @AuditUser,
                                      @idfHumanCase = @idfHumanCase
        END

        ------ UPDATE tlbHuman IF datDateofDeath is provided.
        IF @datDateofDeath IS NOT NULL
        BEGIN
            UPDATE dbo.tlbHuman
            SET datDateofDeath = @datDateofDeath,
                AuditUpdateUser = @AuditUser
            WHERE idfHuman = @idfHuman
        END

		--Update Test, if @ConnectedTestId is provided
		IF @ConnectedTestId IS NOT NULL
		   BEGIN
			   SELECT
				  @DiseaseID = T.idfsDiagnosis,
				  @HumanMasterID = HA.idfHumanActual,
				  @idfMaterial = T.idfMaterial
			   FROM
				  tlbTesting T
			   INNER JOIN tlbMaterial M
			   ON M.idfMaterial = T.idfMaterial
			   INNER JOIN dbo.tlbHuman H
				  ON H.idfHuman = M.idfHuman
			   INNER JOIN dbo.tlbHumanActual HA
				  ON HA.idfHumanActual = H.idfHumanActual
			   WHERE
				  T.idfTesting = @ConnectedTestId

			   UPDATE tlbTesting
			   SET tlbTesting.idfHumanCase = @idfHumanCase
			   FROM
				  tlbTesting T
			   INNER JOIN tlbMaterial M
			   ON M.idfMaterial = T.idfMaterial
			   INNER JOIN dbo.tlbHuman H
				  ON H.idfHuman = M.idfHuman
			   INNER JOIN dbo.tlbHumanActual HA
				  ON HA.idfHumanActual = H.idfHumanActual
			   WHERE
				  T.idfsDiagnosis = @DiseaseID AND
				  HA.idfHumanActual = @HumanMasterID AND
				  T.idfMaterial = @idfMaterial
		   END

        IF @@TRANCOUNT > 0
            COMMIT TRAN

        SELECT @returnCode 'ReturnCode',
               @returnMsg 'ReturnMessage',
               @idfHumanCase 'idfHumanCase',
               @strHumanCaseID 'strHumanCaseID',
               @idfHuman 'idfHuman'

    END TRY
    BEGIN CATCH
        SELECT @returnCode 'ReturnCode',
               @returnMsg 'ReturnMessage',
               @idfHumanCase 'idfHumanCase',
               @strHumanCaseID 'strHumanCaseID',
               @idfHuman 'idfHuman'
        IF @@Trancount > 0
            ROLLBACK TRAN;

        THROW;

    END CATCH

END
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_SET]...';


GO
-- ================================================================================================
-- Name: USP_LAB_SET
--
-- Description:	Inserts or updates samples, tests, test amendments, test interpretations, 
-- transfers, batches and approvals for the laboratory module use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     07/19/2018 Initial release.
-- Stephen Long		10/31/2018 Added the test amendments and transfers - LUC03 and LUC07.
-- Stephen Long		01/24/2019 Added box place availabilities parameter and updates.
-- Stephen Long     02/06/2019 Removed UserPreferenceID parameter; retrieved in the stored 
--                             procedure.  Replace temporary sample ID with the database ID 
--                             on new sample record that was also marked as a favorite. 
-- Stephen Long     02/09/2019 Corrected the JSON table name for EIDSSFieldSampleID to EIDSSLocal 
--                             FieldSampleID.
-- Stephen Long     02/19/2019 Modified for removed parameters from USSP_GBL_BATCH_TEST_SET and 
--                             added parameter to USSP_LAB_TRANSFER_SET.  Removed test 
--                             interpretation parameter.
-- Stephen Long     03/10/2019 Changed temp table field names for test amendement to sync up with 
--                             the API parameter names (LUC07).
-- Stephen Long     03/20/2019 Added row action on the batch test select from JSON variable. 
--                             Added check on Favorites parameter to only process if not null.
-- Stephen Long     04/17/2019 Update to use human master ID when registering new samples, and 
--                             copy over to human (similiar to how human disease report works).
-- Stephen Long     07/09/2019 Added human master ID parameter for call to sample set.
-- Stephen Long     08/29/2019 Corrected root sample ID on call to USSP_LAB_SAMPLE_SET.
-- Stephen Long     03/30/2020 Added audit user name parameter.
-- Stephen Long     04/20/2020 Changes for LUC10 vector type and species type ID's additions.
-- Stephen Long     10/28/2020 Changed row action from nchar to char.
-- Stephen Long     09/24/2021 Removed language parameter as it is not needed.
-- Stephen Long     01/03/2022 Changed login site to NVARCHAR(20).
-- Stephen Long     01/07/2022 Added copy of human actual to human stored procedure call.
-- Stephen Long     01/25/2022 Added logic to add farm, herd and species for samples having no
--                             disease report or monitoring session association.
-- Stephen Long     03/10/2022 Changed note to comment on samples table variable.
-- Stephen Long     03/25/2022 Updated suppress select table variables for adding of vet samples.
-- Stephen Long     03/29/2022 Fix on suppress select of species.
-- Stephen Long     03/30/2022 Fix on suppress select of human copy.
-- Stephen Long     04/20/2022 Changed observation ID on batch test table variable to nullable.
-- Stephen Long     05/18/2022 Added notification processing on new transfer records.
-- Stephen Long     05/24/2022 Fix to check vector ID less than zero and not -1.
-- Stephen Long     07/06/2022 Updates for site alerts to call new stored procedure.
-- Stephen Long     10/10/2022 Added monitoring session ID check when farm or human master ID is 
--                             not null for registering new samples.
-- Stephen Long     10/11/2022 Added insert to tlbMonitoringSessionToMaterial to pick up the 
--                             correct disease on an active surveillance session.
-- Stephen Long     10/18/2022 Fix to account for human active surveillance session diseases and 
--                             transferred samples for an active surveillance session.
-- Leo Tracchia		10/21/2022 Fix for properly deleting tests for human disease report DevOps 
--                             defect 5006.
-- Stephen Long     10/21/2022 Added veterinary disease report, monitoring session and vector 
--                             identifiers to the USSP_LAB_TEST_SET call.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_SET]
( 
    @Samples NVARCHAR(MAX) = NULL,
    @BatchTests NVARCHAR(MAX) = NULL,
    @Tests NVARCHAR(MAX) = NULL,
    @TestAmendments NVARCHAR(MAX) = NULL,
    @Transfers NVARCHAR(MAX) = NULL,
    @FreezerBoxLocationAvailabilities NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL,
    @UserID BIGINT,
    @Favorites XML = NULL,
    @AuditUserName NVARCHAR(200)
)
AS
DECLARE @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
        @KeyId BIGINT = 0;
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage NVARCHAR(MAX),
    ID BIGINT NULL
);
DECLARE @SuppressSelect2 TABLE
(
    ReturnCode INT,
    ReturnMessage NVARCHAR(MAX)
);
DECLARE @RowID BIGINT,
        @RowStatus INT,
        @RowAction CHAR(1),
        @SampleID BIGINT,
        @SampleTypeID BIGINT,
        @RootSampleID BIGINT = NULL,
        @ParentSampleID BIGINT = NULL,
        @HumanMasterID BIGINT = NULL,
        @HumanID BIGINT = NULL,
        @FarmMasterID BIGINT = NULL,
        @FarmID BIGINT = NULL,
        @SpeciesID BIGINT = NULL,
        @AnimalID BIGINT = NULL,
        @VectorID BIGINT = NULL,
        @MonitoringSessionID BIGINT = NULL,
        @VectorSessionID BIGINT = NULL,
        @HumanDiseaseReportID BIGINT = NULL,
        @VeterinaryDiseaseReportID BIGINT = NULL,
        @FunctionalAreaID BIGINT = NULL,
        @FreezerSubdivisionID BIGINT = NULL,
        @StorageBoxPlace NVARCHAR(200) = NULL,
        @CollectionDate DATETIME2 = NULL,
        @CollectedByPersonID BIGINT = NULL,
        @CollectedByOrganizationID BIGINT = NULL,
        @SentDate DATETIME2 = NULL,
        @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
        @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
        @EnteredDate DATETIME2 = NULL,
        @OutOfRepositoryDate DATETIME2 = NULL,
        @MarkedForDispositionByPersonID BIGINT = NULL,
        @SentToOrganizationID BIGINT = NULL,
        @SiteID BIGINT = NULL,
        @CurrentSiteID BIGINT = NULL,
        @SampleKindTypeID BIGINT = NULL,
        @ReadOnlyIndicator BIT = NULL,
        @AccessionDate DATETIME2 = NULL,
        @AccessionConditionTypeID BIGINT = NULL,
        @AccessionByPersonID BIGINT = NULL,
        @SampleStatusTypeID BIGINT = NULL,
        @PreviousSampleStatusTypeID BIGINT = NULL,
        @AccessionComment NVARCHAR(200) = NULL,
        @DestructionMethodTypeID BIGINT = NULL,
        @DestructionDate DATETIME2 = NULL,
        @DestroyedByPersonID BIGINT = NULL,
        @Note NVARCHAR(500) = NULL,
        @Comment NVARCHAR(500) = NULL,
        @BatchTestID BIGINT,
        @TestNameTypeID BIGINT = NULL,
        @BatchStatusTypeID BIGINT = NULL,
        @PerformedByOrganizationID BIGINT = NULL,
        @PerformedByPersonID BIGINT = NULL,
        @ValidatedByOrganizationID BIGINT = NULL,
        @ValidatedByPersonID BIGINT = NULL,
        @ObservationID BIGINT = NULL,
        @PerformedDate DATETIME2 = NULL,
        @ValidationDate DATETIME2 = NULL,
        @EIDSSBatchTestID NVARCHAR(200) = NULL,
        @ResultEnteredByPersonID BIGINT = NULL,
        @ResultEnteredByOrganizationID BIGINT = NULL,
        @TestRequested NVARCHAR(200) = NULL,
        @TestID BIGINT,
        @TestCategoryTypeID BIGINT = NULL,
        @TestResultTypeID BIGINT = NULL,
        @TestStatusTypeID BIGINT,
        @PreviousTestStatusTypeID BIGINT = NULL,
        @TestNumber INT = NULL,
        @StartedDate DATETIME2 = NULL,
        @ConcludedDate DATETIME2 = NULL,
        @TestedByPersonID BIGINT = NULL,
        @TestedByOrganizationID BIGINT = NULL,
        @NonLaboratoryTestIndicator BIT,
        @ExternalTestIndicator BIT = NULL,
        @ReceivedDate DATETIME2 = NULL,
        @ContactPersonName NVARCHAR(200) = NULL,
        @DiseaseID BIGINT = NULL,
        @FavoriteIndicator INT = NULL,
        @TestAmendmentID BIGINT,
        @AmendedByOrganizationID BIGINT = NULL,
        @AmendedByPersonID BIGINT = NULL,
        @AmendmentDate DATETIME2 = NULL,
        @OldTestResultTypeID BIGINT = NULL,
        @ChangedTestResultTypeID BIGINT = NULL,
        @OldNote NVARCHAR(500) = NULL,
        @ChangedNote NVARCHAR(500) = NULL,
        @ReasonForAmendment NVARCHAR(500),
        @TransferID BIGINT,
        @EIDSSTransferID NVARCHAR(200) = NULL,
        @TransferStatusTypeID BIGINT = NULL,
        @TransferredFromOrganizationID BIGINT = NULL,
        @TransferredToOrganizationID BIGINT = NULL,
        @SentByPersonID BIGINT = NULL,
        @TransferDate DATETIME2 = NULL,
        @BoxPlaceAvailability NVARCHAR(MAX),
        @EventId BIGINT,
        @EventTypeId BIGINT = NULL,
        @EventSiteId BIGINT = NULL,
        @EventObjectId BIGINT = NULL,
        @EventUserId BIGINT = NULL,
        @EventDiseaseId BIGINT = NULL,
        @EventLocationId BIGINT = NULL,
        @EventInformationString NVARCHAR(MAX) = NULL,
        @EventLoginSiteId BIGINT = NULL,
        @NewHumanID BIGINT = NULL,
        @VectorTypeID BIGINT = NULL,
        @SpeciesTypeID BIGINT = NULL,
        @EIDSSVectorID NVARCHAR(50) = NULL,
        @MonitoringSessionToMaterialID BIGINT = NULL;

DECLARE @SamplesTemp TABLE
(
    SampleID BIGINT NOT NULL,
    SampleTypeID BIGINT NOT NULL,
    RootSampleID BIGINT NULL,
    ParentSampleID BIGINT NULL,
    HumanMasterID BIGINT NULL,
    HumanID BIGINT NULL,
    FarmMasterID BIGINT NULL,
    FarmID BIGINT NULL,
    SpeciesID BIGINT NULL,
    AnimalID BIGINT NULL,
    MonitoringSessionID BIGINT NULL,
    CollectedByPersonID BIGINT NULL,
    CollectedByOrganizationID BIGINT NULL,
    MainTestID BIGINT NULL,
    CollectionDate DATETIME2 NULL,
    SentDate DATETIME2 NULL,
    EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
    VectorSessionID BIGINT NULL,
    VectorID BIGINT NULL,
    FreezerSubdivisionID BIGINT NULL,
    StorageBoxPlace NVARCHAR(200) NULL,
    SampleStatusTypeID BIGINT NULL,
    PreviousSampleStatusTypeID BIGINT NULL,
    FunctionalAreaID BIGINT NULL,
    DestroyedByPersonID BIGINT NULL,
    EnteredDate DATETIME2 NULL,
    DestructionDate DATETIME2 NULL,
    EIDSSLaboratorySampleID NVARCHAR(200) NULL,
    Comment NVARCHAR(500) NULL,
    SiteID BIGINT NULL,
    RowStatus INT NOT NULL,
    SentToOrganizationID BIGINT NULL,
    ReadOnlyIndicator BIT NOT NULL,
    BirdStatusTypeID BIGINT NULL,
    HumanDiseaseReportID BIGINT NULL,
    VeterinaryDiseaseReportID BIGINT NULL,
    AccessionDate DATETIME2 NULL,
    AccessionConditionTypeID BIGINT NULL,
    AccessionComment NVARCHAR(200) NULL,
    AccessionByPersonID BIGINT NULL,
    DestructionMethodTypeID BIGINT NULL,
    CurrentSiteID BIGINT NULL,
    SampleKindTypeID BIGINT NULL,
    MarkedForDispositionByPersonID BIGINT NULL,
    OutOfRepositoryDate DATETIME2 NULL,
    DiseaseID BIGINT NULL,
    VectorTypeID BIGINT NULL,
    SpeciesTypeID BIGINT NULL,
    FavoriteIndicator BIT NOT NULL,
    RowAction INT NULL
);
DECLARE @BatchTestsTemp TABLE
(
    BatchTestID BIGINT NOT NULL,
    TestNameTypeID BIGINT NULL,
    BatchStatusTypeID BIGINT NULL,
    PerformedByOrganizationID BIGINT NULL,
    PerformedByPersonID BIGINT NULL,
    ValidatedByOrganizationID BIGINT NULL,
    ValidatedByPersonID BIGINT NULL,
    ObservationID BIGINT NULL,
    SiteID BIGINT NOT NULL,
    PerformedDate DATETIME2 NULL,
    ValidationDate DATETIME2 NULL,
    EIDSSBatchTestID NVARCHAR(200) NULL,
    RowStatus INT NOT NULL,
    ResultEnteredByPersonID BIGINT NULL,
    ResultEnteredByOrganizationID BIGINT NULL,
    TestRequested NVARCHAR(200) NULL,
    RowAction INT NULL
);
DECLARE @TestsTemp TABLE
(
    TestID BIGINT NOT NULL,
    TestNameTypeID BIGINT NULL,
    TestCategoryTypeID BIGINT NULL,
    TestResultTypeID BIGINT NULL,
    TestStatusTypeID BIGINT NOT NULL,
    PreviousTestStatusTypeID BIGINT NULL,
    DiseaseID BIGINT NOT NULL,
    SampleID BIGINT NULL,
    BatchTestID BIGINT NULL,
    ObservationID BIGINT NULL,
    TestNumber INT NULL,
    Note NVARCHAR(500) NULL,
    RowStatus INT NOT NULL,
    StartedDate DATETIME2 NULL,
    ConcludedDate DATETIME2 NULL,
    TestedByOrganizationID BIGINT NULL,
    TestedByPersonID BIGINT NULL,
    ResultEnteredByOrganizationID BIGINT NULL,
    ResultEnteredByPersonID BIGINT NULL,
    ValidatedByOrganizationID BIGINT NULL,
    ValidatedByPersonID BIGINT NULL,
    ReadOnlyIndicator BIT NOT NULL,
    NonLaboratoryTestIndicator BIT NOT NULL,
    ExternalTestIndicator BIT NULL,
    PerformedByOrganizationID BIGINT NULL,
    ReceivedDate DATETIME2 NULL,
    ContactPersonName NVARCHAR(200) NULL,
   	HumanDiseaseReportID BIGINT NULL, 
    VeterinaryDiseaseReportID BIGINT NULL, 
    MonitoringSessionID BIGINT NULL, 
    VectorID BIGINT NULL,
    RowAction INT NULL
);
DECLARE @TestAmendmentsTemp TABLE
(
    TestAmendmentID BIGINT NOT NULL,
    TestID BIGINT NOT NULL,
    AmendedByOrganizationID BIGINT NULL,
    AmendedByPersonID BIGINT NULL,
    AmendmentDate DATETIME2 NULL,
    OldTestResultTypeID BIGINT NULL,
    ChangedTestResultTypeID BIGINT NULL,
    OldNote NVARCHAR(500) NULL,
    ChangedNote NVARCHAR(500) NULL,
    ReasonForAmendment NVARCHAR(500) NOT NULL,
    RowStatus INT NOT NULL,
    RowAction INT NULL
);
DECLARE @TransfersTemp TABLE
(
    TransferID BIGINT NOT NULL,
    SampleID BIGINT NOT NULL,
    EIDSSTransferID NVARCHAR(200) NULL,
    TransferStatusTypeID BIGINT NULL,
    TransferredFromOrganizationID BIGINT NULL,
    TransferredToOrganizationID BIGINT NULL,
    SentByPersonID BIGINT NULL,
    TransferDate DATETIME2 NULL,
    PurposeOfTransfer NVARCHAR(200) NULL,
    SiteID BIGINT NOT NULL,
    TestRequested NVARCHAR(200) NULL,
    RowStatus INT NOT NULL,
    RowAction INT NULL
);
DECLARE @FreezerBoxLocationAvailabilitiesTemp TABLE
(
    FreezerSubdivisionID BIGINT NOT NULL,
    BoxPlaceAvailability NVARCHAR(MAX) NOT NULL
);
DECLARE @EventsTemp TABLE
(
    EventId BIGINT NOT NULL,
    EventTypeId BIGINT NULL,
    UserId BIGINT NULL,
    SiteId BIGINT NULL,
    LoginSiteId BIGINT NULL,
    ObjectId BIGINT NULL,
    DiseaseId BIGINT NULL,
    LocationId BIGINT NULL,
    InformationString NVARCHAR(MAX) NULL
);
DECLARE @FavoritesString VARCHAR(MAX);

BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        BEGIN TRANSACTION;

        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@Samples)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                RootSampleID BIGINT,
                ParentSampleID BIGINT,
                HumanMasterID BIGINT,
                HumanID BIGINT,
                FarmMasterID BIGINT,
                FarmID BIGINT,
                SpeciesID BIGINT,
                AnimalID BIGINT,
                MonitoringSessionID BIGINT,
                CollectedByPersonID BIGINT,
                CollectedByOrganizationID BIGINT,
                MainTestID BIGINT,
                CollectionDate DATETIME2,
                SentDate DATETIME2,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                VectorSessionID BIGINT,
                VectorID BIGINT,
                FreezerSubdivisionID BIGINT,
                StorageBoxPlace NVARCHAR(200),
                SampleStatusTypeID BIGINT,
                PreviousSampleStatusTypeID BIGINT,
                FunctionalAreaID BIGINT,
                DestroyedByPersonID BIGINT,
                EnteredDate DATETIME2,
                DestructionDate DATETIME2,
                EIDSSLaboratorySampleID NVARCHAR(200),
                Comment NVARCHAR(500),
                SiteID BIGINT,
                RowStatus INT,
                SentToOrganizationID BIGINT,
                ReadOnlyIndicator BIT,
                BirdStatusTypeID BIGINT,
                HumanDiseaseReportID BIGINT,
                VeterinaryDiseaseReportID BIGINT,
                AccessionDate DATETIME2,
                AccessionConditionTypeID BIGINT,
                AccessionComment NVARCHAR(200),
                AccessionByPersonID BIGINT,
                DestructionMethodTypeID BIGINT,
                CurrentSiteID BIGINT,
                SampleKindTypeID BIGINT,
                MarkedForDispositionByPersonID BIGINT,
                OutOfRepositoryDate DATETIME2,
                DiseaseID BIGINT,
                VectorTypeID BIGINT,
                SpeciesTypeID BIGINT,
                FavoriteIndicator BIT,
                RowAction INT
            );

        INSERT INTO @BatchTestsTemp
        SELECT *
        FROM
            OPENJSON(@BatchTests)
            WITH
            (
                BatchTestID BIGINT,
                TestNameTypeID BIGINT,
                BatchStatusTypeID BIGINT,
                PerformedByOrganizationID BIGINT,
                PerformedByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ObservationID BIGINT,
                SiteID BIGINT,
                PerformedDate DATETIME2,
                ValidationDate DATETIME2,
                EIDSSBatchTestID NVARCHAR(200),
                RowStatus INT,
                ResultEnteredByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                TestRequested NVARCHAR(200),
                RowAction INT
            );

        INSERT INTO @TestsTemp
        SELECT *
        FROM
            OPENJSON(@Tests)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                PreviousTestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Note NVARCHAR(500),
                RowStatus INT,
                StartedDate DATETIME2,
                ConcludedDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                HumanDiseaseReportID BIGINT, 
                VeterinaryDiseaseReportID BIGINT, 
                MonitoringSessionID BIGINT, 
                VectorID BIGINT,
                RowAction INT
            );

        INSERT INTO @TestAmendmentsTemp
        SELECT *
        FROM
            OPENJSON(@TestAmendments)
            WITH
            (
                TestAmendmentID BIGINT,
                TestID BIGINT,
                AmendedByOrganizationID BIGINT,
                AmendedByPersonID BIGINT,
                AmendmentDate DATETIME2,
                OldTestResultTypeID BIGINT,
                ChangedTestResultTypeID BIGINT,
                OldNote NVARCHAR(500),
                ChangedNote NVARCHAR(500),
                ReasonForAmendment NVARCHAR(500),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @TransfersTemp
        SELECT *
        FROM
            OPENJSON(@Transfers)
            WITH
            (
                TransferID BIGINT,
                SampleID BIGINT,
                EIDSSTransferID NVARCHAR(200),
                TransferStatusTypeID BIGINT,
                TransferredFromOrganizationID BIGINT,
                TransferredToOrganizationID BIGINT,
                SentByPersonID BIGINT,
                TransferDate DATETIME2,
                PurposeOfTransfer NVARCHAR(200),
                SiteID BIGINT,
                TestRequested NVARCHAR(200),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @FreezerBoxLocationAvailabilitiesTemp
        SELECT *
        FROM
            OPENJSON(@FreezerBoxLocationAvailabilities)
            WITH
            (
                FreezerSubdivisionID BIGINT,
                BoxPlaceAvailability NVARCHAR(MAX)
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        SET @FavoritesString = CONVERT(NVARCHAR(MAX), @Favorites, 1);

        WHILE EXISTS (SELECT * FROM @SamplesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SampleID,
                @SampleID = SampleID,
                @SampleTypeID = SampleTypeID,
                @RootSampleID = RootSampleID,
                @ParentSampleID = ParentSampleID,
                @HumanMasterID = HumanMasterID,
                @HumanID = HumanID,
                @FarmMasterID = FarmMasterID,
                @FarmID = FarmID,
                @SpeciesID = SpeciesID,
                @AnimalID = AnimalID,
                @VectorID = VectorID,
                @MonitoringSessionID = MonitoringSessionID,
                @VectorSessionID = VectorSessionID,
                @HumanDiseaseReportID = HumanDiseaseReportID,
                @VeterinaryDiseaseReportID = VeterinaryDiseaseReportID,
                @CollectionDate = CollectionDate,
                @CollectedByPersonID = CollectedByPersonID,
                @CollectedByOrganizationID = CollectedByOrganizationID,
                @SentDate = SentDate,
                @SentToOrganizationID = SentToOrganizationID,
                @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                @EIDSSLaboratorySampleID = EIDSSLaboratorySampleID,
                @SiteID = SiteID,
                @FunctionalAreaID = FunctionalAreaID,
                @FreezerSubdivisionID = FreezerSubdivisionID,
                @StorageBoxPlace = StorageBoxPlace,
                @EnteredDate = EnteredDate,
                @OutOfRepositoryDate = OutOfRepositoryDate,
                @DestructionDate = DestructionDate,
                @DestructionMethodTypeID = DestructionMethodTypeID,
                @DestroyedByPersonID = DestroyedByPersonID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @AccessionDate = AccessionDate,
                @AccessionConditionTypeID = AccessionConditionTypeID,
                @AccessionByPersonID = AccessionByPersonID,
                @SampleStatusTypeID = SampleStatusTypeID,
                @PreviousSampleStatusTypeID = PreviousSampleStatusTypeID,
                @AccessionComment = AccessionComment,
                @Comment = Comment,
                @CurrentSiteID = CurrentSiteID,
                @SampleKindTypeID = SampleKindTypeID,
                @MarkedForDispositionByPersonID = MarkedForDispositionByPersonID,
                @DiseaseID = DiseaseID,
                @VectorTypeID = VectorTypeID,
                @SpeciesTypeID = SpeciesTypeID,
                @FavoriteIndicator = FavoriteIndicator,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @SamplesTemp;

            IF @RowAction = 1
               OR @RowAction = 5
            BEGIN
                IF @FarmMasterID IS NOT NULL -- Registering new veterinary sample with either no disease report or possibly no monitoring session.
                BEGIN
                    IF @FarmID IS NULL
                    BEGIN
                        DECLARE @NewFarmOwnerID BIGINT,
                                @FlockOrHerdID BIGINT;

                        INSERT INTO @SuppressSelect2
                        EXECUTE dbo.USSP_VET_FARM_COPY @AuditUserName,
                                                       @FarmMasterID,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       NULL,
                                                       @HumanMasterID,
                                                       @FarmID OUTPUT,
                                                       @NewFarmOwnerID OUTPUT;

                        IF @MonitoringSessionID IS NOT NULL -- New farm added to the veterinary active surveillance session.
                        BEGIN
                            UPDATE dbo.tlbFarm
                            SET idfMonitoringSession = @MonitoringSessionID
                            WHERE idfFarm = @FarmID;
                        END

                        SET @HumanID = @NewFarmOwnerID;
                        SET @HumanMasterID = NULL;
                    END

                    IF @SpeciesID IS NULL -- Adding new flock or herd and species to an existing farm.
                    BEGIN
                        INSERT INTO @SuppressSelect2
                        EXECUTE dbo.USSP_VET_HERD_SET @AuditUserName,
                                                      @FlockOrHerdID OUTPUT,
                                                      NULL,
                                                      @FarmID,
                                                      NULL,
                                                      NULL,
                                                      NULL,
                                                      NULL,
                                                      NULL,
                                                      0,
                                                      1;

                        INSERT INTO @SuppressSelect
                        EXECUTE dbo.USSP_VET_SPECIES_SET @AuditUserName,
                                                         @SpeciesID OUTPUT,
                                                         NULL,
                                                         @SpeciesTypeID,
                                                         @FlockOrHerdID,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         0,
                                                         1;
                    END
                END
                ELSE
                BEGIN
                    IF @HumanMasterID IS NOT NULL -- Registering new human sample with either no disease report or possibly no active surveillance session.
                    BEGIN
                        INSERT INTO @SuppressSelect2
                        EXECUTE dbo.USP_HUM_COPYHUMANACTUALTOHUMAN @HumanMasterID,
                                                                   @HumanID OUTPUT,
                                                                   @ReturnCode OUTPUT,
                                                                   @ReturnMessage OUTPUT;

                        IF @MonitoringSessionID IS NOT NULL -- New person added to the human active surveillance session.
                        BEGIN
                            UPDATE dbo.tlbHuman
                            SET idfMonitoringSession = @MonitoringSessionID
                            WHERE idfHuman = @HumanID;
                        END
                    END
                END
            END;

            IF @VectorID < 0
               AND @SpeciesTypeID IS NOT NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbVector', @VectorID OUTPUT;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NextNumber_GET 'Vector Surveillance Vector',
                                                   @EIDSSVectorID OUTPUT,
                                                   NULL;

                INSERT INTO dbo.tlbVector
                (
                    idfVector,
                    strVectorID,
                    idfCollectedByOffice,
                    idfCollectedByPerson,
                    datCollectionDateTime,
                    idfsVectorType,
                    idfsVectorSubType,
                    intQuantity,
                    intRowStatus,
                    AuditCreateDTM,
                    AuditCreateUser
                )
                VALUES
                (@VectorID,
                 @EIDSSVectorID,
                 @CollectedByOrganizationID,
                 @CollectedByPersonID,
                 @CollectionDate,
                 @VectorTypeID,
                 @SpeciesTypeID,
                 1  ,
                 0  ,
                 GETDATE(),
                 @AuditUserName
                );
            END;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_LAB_SAMPLE_SET @SampleID OUTPUT,
                                            @SampleTypeID,
                                            @RootSampleID,
                                            @ParentSampleID,
                                            @HumanMasterID,
                                            @HumanID,
                                            @SpeciesID,
                                            @AnimalID,
                                            @VectorID,
                                            @MonitoringSessionID,
                                            @VectorSessionID,
                                            @HumanDiseaseReportID,
                                            @VeterinaryDiseaseReportID,
                                            @CollectionDate,
                                            @CollectedByPersonID,
                                            @CollectedByOrganizationID,
                                            @SentDate,
                                            @SentToOrganizationID,
                                            @EIDSSLocalOrFieldSampleID,
                                            @EIDSSLaboratorySampleID,
                                            @SiteID,
                                            @FunctionalAreaID,
                                            @FreezerSubdivisionID,
                                            @StorageBoxPlace,
                                            @EnteredDate,
                                            @OutOfRepositoryDate,
                                            @MarkedForDispositionByPersonID,
                                            @DestructionDate,
                                            @DestructionMethodTypeID,
                                            @DestroyedByPersonID,
                                            @ReadOnlyIndicator,
                                            @AccessionDate,
                                            @AccessionConditionTypeID,
                                            @AccessionByPersonID,
                                            @SampleStatusTypeID,
                                            @PreviousSampleStatusTypeID,
                                            @AccessionComment,
                                            @Comment,
                                            @CurrentSiteID,
                                            @SampleKindTypeID,
                                            @DiseaseID,
                                            @RowStatus,
                                            @RowAction,
                                            @AuditUserName;

            IF (
                   @RowAction = 1 -- Register new sample
                   OR @RowAction = 5 -- Insert accession
               )
               AND @MonitoringSessionID IS NOT NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_AS_SAMPLE_TO_DISEASE_SET @AuditUserName,
                                                          0,
                                                          @MonitoringSessionID,
                                                          @SampleID,
                                                          @DiseaseID,
                                                          @SampleTypeID,
                                                          0,
                                                          1;
            END
            ELSE IF @RowAction = 7
                    AND @MonitoringSessionID IS NOT NULL -- Transfer a sample (creates a new sample record)
            BEGIN
                DECLARE @SamplesToDiseaseRowID BIGINT;
                DECLARE @SamplesToDiseasesTemp TABLE
                (
                    MonitoringSessionToMaterialID BIGINT NOT NULL,
                    MonitoringSessionID BIGINT NULL,
                    SampleID BIGINT NOT NULL,
                    SampleTypeID BIGINT NULL,
                    DiseaseID BIGINT NOT NULL
                );

                INSERT INTO @SamplesToDiseasesTemp
                SELECT idfMonitoringSessionToMaterial,
                       idfMonitoringSession,
                       idfMaterial,
                       idfsSampleType,
                       idfsDisease
                FROM dbo.tlbMonitoringSessionToMaterial
                WHERE idfMaterial = @RootSampleID
                      AND intRowStatus = 0;

                WHILE EXISTS (SELECT * FROM @SamplesToDiseasesTemp)
                BEGIN
                    SELECT TOP 1
                        @SamplesToDiseaseRowID = MonitoringSessionToMaterialID,
                        @MonitoringSessionToMaterialID = MonitoringSessionToMaterialID,
                        @DiseaseID = DiseaseID
                    FROM @SamplesToDiseasesTemp;

                    INSERT INTO @SuppressSelect
                    EXECUTE dbo.USSP_AS_SAMPLE_TO_DISEASE_SET @AuditUserName,
                                                              @MonitoringSessionToMaterialID,
                                                              @MonitoringSessionID,
                                                              @SampleID,
                                                              @DiseaseID,
                                                              @SampleTypeID,
                                                              0,
                                                              1;

                    DELETE FROM @SamplesToDiseasesTemp
                    WHERE MonitoringSessionToMaterialID = @SamplesToDiseaseRowID;
                END;
            END

            UPDATE @TestsTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            UPDATE @TransfersTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            IF @FavoriteIndicator = 1
                SELECT @FavoritesString = REPLACE(@FavoritesString, @RowID, @SampleID);

            --POCO does not like the XML modify command; used string and replace for now.
            --SELECT @Favorites = @Favorites.modify('replace value of (/Favorites/Favorite/@SampleID[.=sql:variable("@RowID")])[1] with sql:variable("@SampleID")');
            IF @SampleID <> @RootSampleID
               AND (
                       @RowAction = 4
                       OR @RowAction = 5
                   )
            BEGIN
                DECLARE @TransferIDTemp AS BIGINT;

                SELECT @TransferIDTemp = tro.idfTransferOut
                FROM dbo.tlbTransferOutMaterial tom
                    INNER JOIN dbo.tlbTransferOUT AS tro
                        ON tro.idfTransferOut = tom.idfTransferOut
                WHERE tom.idfMaterial = @RootSampleID;

                UPDATE dbo.tlbTransferOUT
                SET idfsTransferStatus = 10001001,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE idfTransferOut = @TransferIDTemp;
            END;

            DELETE FROM @SamplesTemp
            WHERE SampleID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @BatchTestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = BatchTestID,
                @BatchTestID = BatchTestID,
                @TestNameTypeID = TestNameTypeID,
                @BatchStatusTypeID = BatchStatusTypeID,
                @PerformedByOrganizationID = PerformedByOrganizationID,
                @PerformedByPersonID = PerformedByPersonID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @ObservationID = ObservationID,
                @SiteID = SiteID,
                @PerformedDate = PerformedDate,
                @ValidationDate = ValidationDate,
                @EIDSSBatchTestID = EIDSSBatchTestID,
                @RowStatus = RowStatus,
                @ResultEnteredByPersonID = ResultEnteredByPersonID,
                @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                @TestRequested = TestRequested,
                @RowAction = RowAction
            FROM @BatchTestsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_BATCH_TEST_SET @BatchTestID OUTPUT,
                                                @TestNameTypeID,
                                                @BatchStatusTypeID,
                                                @PerformedByOrganizationID,
                                                @PerformedByPersonID,
                                                @ValidatedByOrganizationID,
                                                @ValidatedByPersonID,
                                                @ObservationID,
                                                @SiteID,
                                                @PerformedDate,
                                                @ValidationDate,
                                                @EIDSSBatchTestID,
                                                @RowStatus,
                                                @ResultEnteredByPersonID,
                                                @ResultEnteredByOrganizationID,
                                                @TestRequested,
                                                @RowAction,
                                                @AuditUserName;

            UPDATE @TestsTemp
            SET BatchTestID = @BatchTestID
            WHERE BatchTestID = @RowID;

            DELETE FROM @BatchTestsTemp
            WHERE BatchTestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @TestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestID,
                @TestID = TestID,
                @TestNameTypeID = TestNameTypeID,
                @TestCategoryTypeID = TestCategoryTypeID,
                @TestResultTypeID = TestResultTypeID,
                @TestStatusTypeID = TestStatusTypeID,
                @PreviousTestStatusTypeID = PreviousTestStatusTypeID,
                @DiseaseID = DiseaseID,
                @SampleID = SampleID,
                @BatchTestID = BatchTestID,
                @ObservationID = ObservationID,
                @TestNumber = TestNumber,
                @Note = Note,
                @RowStatus = RowStatus,
                @StartedDate = StartedDate,
                @ConcludedDate = ConcludedDate,
                @TestedByOrganizationID = TestedByOrganizationID,
                @TestedByPersonID = TestedByPersonID,
                @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                @ResultEnteredByPersonID = ResultEnteredByPersonID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
                @ExternalTestIndicator = ExternalTestIndicator,
                @PerformedByOrganizationID = PerformedByOrganizationID,
                @ReceivedDate = ReceivedDate,
                @ContactPersonName = ContactPersonName,
   				@HumanDiseaseReportID = HumanDiseaseReportID,
                @VeterinaryDiseaseReportID = VeterinaryDiseaseReportID,
                @MonitoringSessionID = MonitoringSessionID, 
                @VectorID = VectorID,
                @RowAction = RowAction
            FROM @TestsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_LAB_TEST_SET @TestID,
                                          @TestNameTypeID,
                                          @TestCategoryTypeID,
                                          @TestResultTypeID,
                                          @TestStatusTypeID,
                                          @PreviousTestStatusTypeID,
                                          @DiseaseID,
                                          @SampleID,
                                          @BatchTestID,
                                          @ObservationID,
                                          @TestNumber,
                                          @Note,
                                          @RowStatus,
                                          @StartedDate,
                                          @ConcludedDate,
                                          @TestedByOrganizationID,
                                          @TestedByPersonID,
                                          @ResultEnteredByOrganizationID,
                                          @ResultEnteredByPersonID,
                                          @ValidatedByOrganizationID,
                                          @ValidatedByPersonID,
                                          @ReadOnlyIndicator,
                                          @NonLaboratoryTestIndicator,
                                          @ExternalTestIndicator,
                                          @PerformedByOrganizationID,
                                          @ReceivedDate,
                                          @ContactPersonName,
                                          @HumanDiseaseReportID, 
                                          @VeterinaryDiseaseReportID,
                                          @MonitoringSessionID, 
                                          @VectorID, 
                                          @RowAction,
                                          @AuditUserName;

            UPDATE @TestAmendmentsTemp
            SET TestID = @TestID
            WHERE TestID = @RowID;

            DELETE FROM @TestsTemp
            WHERE TestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @TestAmendmentsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestAmendmentID,
                @TestAmendmentID = TestAmendmentID,
                @TestID = TestID,
                @AmendedByOrganizationID = AmendedByOrganizationID,
                @AmendedByPersonID = AmendedByPersonID,
                @AmendmentDate = AmendmentDate,
                @OldTestResultTypeID = OldTestResultTypeID,
                @ChangedTestResultTypeID = ChangedTestResultTypeID,
                @OldNote = OldNote,
                @ChangedNote = ChangedNote,
                @ReasonForAmendment = ReasonForAmendment,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @TestAmendmentsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TEST_AMENDMENT_SET @TestAmendmentID,
                                                    @TestID,
                                                    @AmendedByOrganizationID,
                                                    @AmendedByPersonID,
                                                    @AmendmentDate,
                                                    @OldTestResultTypeID,
                                                    @ChangedTestResultTypeID,
                                                    @OldNote,
                                                    @ChangedNote,
                                                    @ReasonForAmendment,
                                                    @RowStatus,
                                                    @RowAction,
                                                    @AuditUserName;

            DELETE FROM @TestAmendmentsTemp
            WHERE TestAmendmentID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @TransfersTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TransferID,
                @TransferID = TransferID,
                @SampleID = SampleID,
                @EIDSSTransferID = EIDSSTransferID,
                @TransferStatusTypeID = TransferStatusTypeID,
                @TransferredFromOrganizationID = TransferredFromOrganizationID,
                @TransferredToOrganizationID = TransferredToOrganizationID,
                @SentByPersonID = SentByPersonID,
                @TransferDate = TransferDate,
                @Note = PurposeOfTransfer,
                @SiteID = SiteID,
                @TestRequested = TestRequested,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @TransfersTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_LAB_TRANSFER_SET @TransferID,
                                              @SampleID,
                                              @EIDSSTransferID,
                                              @TransferStatusTypeID,
                                              @TransferredFromOrganizationID,
                                              @TransferredToOrganizationID,
                                              @SentByPersonID,
                                              @TransferDate,
                                              @Note,
                                              @SiteID,
                                              @TestRequested,
                                              @RowStatus,
                                              @RowAction,
                                              @AuditUserName;

            IF @RowAction = 1
            BEGIN
                UPDATE @EventsTemp
                SET ObjectId = @TransferID
                WHERE ObjectId = @RowID;
            END;

            DELETE FROM @TransfersTemp
            WHERE TransferID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @FreezerBoxLocationAvailabilitiesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FreezerSubdivisionID,
                @FreezerSubdivisionID = FreezerSubdivisionID,
                @BoxPlaceAvailability = BoxPlaceAvailability
            FROM @FreezerBoxLocationAvailabilitiesTemp;

            UPDATE dbo.tlbFreezerSubdivision
            SET BoxPlaceAvailability = @BoxPlaceAvailability,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfSubdivision = @FreezerSubdivisionID;

            DELETE FROM @FreezerBoxLocationAvailabilitiesTemp
            WHERE FreezerSubdivisionID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect2
            EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                            @EventTypeId,
                                            @EventUserId,
                                            @EventObjectId,
                                            @EventDiseaseId,
                                            @EventSiteId,
                                            @EventInformationString,
                                            @EventLoginSiteId,
                                            @EventLocationId,
                                            @AuditUserName;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        IF @Favorites IS NOT NULL
        BEGIN
            DECLARE @UserPreferenceID AS BIGINT;

            SELECT @UserPreferenceID =
            (
                SELECT UserPreferenceUID
                FROM dbo.UserPreference
                WHERE idfUserID = @UserID
                      AND ModuleConstantID = 10508006
                      AND intRowStatus = 0
            );

            IF @UserPreferenceID IS NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NEXTKEYID_GET N'UserPreference',
                                                  @UserPreferenceID OUTPUT;

                INSERT INTO dbo.UserPreference
                (
                    UserPreferenceUID,
                    idfUserID,
                    ModuleConstantID,
                    PreferenceDetail,
                    intRowStatus,
                    AuditCreateUser,
                    AuditCreateDTM
                )
                VALUES
                (@UserPreferenceID, @UserID, 10508006, @FavoritesString, 0, @AuditUserName, GETDATE());
            END
            ELSE
            BEGIN
                UPDATE dbo.UserPreference
                SET idfUserID = @UserID,
                    PreferenceDetail = @FavoritesString,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE UserPreferenceUID = @UserPreferenceID;
            END
        END;

        IF @@TRANCOUNT > 0
            COMMIT;

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage,
               @KeyId AS KeyId,
               'Labratory' AS KeyName;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK;

        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_VAS_MONITORING_SESSION_SET]...';


GO
-- ================================================================================================
-- Name: USP_VAS_MONITORING_SESSION_SET
--
-- Description:	Inserts or updates veterinary surveillance session for the veterinary active surveillance 
-- session use cases.
--                      
-- Revision History:
-- Name					Date       Change Detail
-- ---------------		---------- -------------------------------------------------------------------
-- Mike Kornegay		02/02/2022 Initial release. (Copied from USP_VET_DISEASE_REPORT_SET).
-- Mike Kornegay		02/14/2022 Correct problem with saving actions - retrieve monitoring session id first.
-- Mike Kornegay		02/15/2022 Removed @SpeciesTypeID because this was the same as @ReportTypeID
-- Mike Kornegay		02/16/2022 Added back the animals temp to add or update animals 
--							  before samples are written.
-- Mike Kornegay		02/26/2022 Fixed FlockOrHerd section not passing the FarmID.
-- Mike Kornegay		03/08/2022 Removed MonitoringSessionID from samples - should come from new or update key
--							  and added @LocationID
-- Mike Kornegay		03/11/2022 Refactored Aggregate Info sections.
-- Mike Kornegay		03/18/2022 Corrected parameters for USSP_VCT_MONITORING_SESSION_SUMMARY_SET.
-- Mike Kornegay		03/19/2022 Corrected issue with farm copy for aggregate farms and saving of aggregate diseases.
-- Mike Kornegay		03/21/2022 Corrected defect in reading aggregate summary temp table.
-- Mani Govindarajan	05/26/2022 Disassociate MonitoringSession with Farm in tlbFarm Table  search for comment -- disassociate farm with session
-- Mike Kornegay		06/02/2022 Add notifications save routine.
-- Mike Kornegay		06/13/2022 Changed references for @ReportTypeID to point to the new SessionCategoryID fields.
-- Stephen Long         07/06/2022 Updates for site alerts to call new stored procedure.
-- Mike Kornegay		07/08/2022 Correct logic for removing aggregate farms from monitoring session.
-- Mike Kornegay		08/18/2022 Added logic for storing multiple diseases per sample.
-- Mike Kornegay        08/19/2022 Correct error on SampleToDisease temp table.
-- Mike Kornegay		09/05/2022 Fixed error where MonitoringSessionToDiagnosisID was not set correctly.
-- Mike Kornegay		09/30/2022 Add saving of idfsMonitoringSessionSpeciesType and correct farm save for new type.
-- Mike Kornegay		10/07/2022 Defect #5140 - EIDSSLocalOrFieldSampleID not generating correctly.
--
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VAS_MONITORING_SESSION_SET]
(
    @MonitoringSessionID BIGINT = NULL,
    @SessionID NVARCHAR(200) = NULL,
    @SessionStartDate DATETIME = NULL,
    @SessionEndDate DATETIME = NULL,
    @SessionStatusTypeID BIGINT = NULL,
    @SessionCategoryID BIGINT = NULL,
    @SiteID BIGINT = NULL,
    @LegacySessionID NVARCHAR(200) = NULL,
    @CountryID BIGINT = NULL,
    @RegionID BIGINT = NULL,
    @RayonID BIGINT = NULL,
    @SettlementID BIGINT = NULL,
    @CampaignKey BIGINT = NULL,
    @CampaignID NVARCHAR(200) = NULL,
    @DateEntered DATETIME = NULL,
    @EnteredByPersonID BIGINT = NULL,
    @RowStatus INT,
    @ReportTypeID BIGINT = NULL,
    @AuditUserName NVARCHAR(200),
    @FlocksOrHerds NVARCHAR(MAX) = NULL,
    @DiseaseSpeciesSamples NVARCHAR(MAX) = NULL,
    @Species NVARCHAR(MAX) = NULL,
    @Animals NVARCHAR(MAX) = NULL,
    @Farms NVARCHAR(MAX) = NULL,
    @Samples NVARCHAR(MAX) = NULL,
	@SamplesToDiseases NVARCHAR(MAX) = NULL,
    @LaboratoryTests NVARCHAR(MAX) = NULL,
    @LaboratoryTestInterpretations NVARCHAR(MAX) = NULL,
    @Actions NVARCHAR(MAX) = NULL,
    @AggregateSummaryInfo NVARCHAR(MAX) = NULL,
    @AggregateSummaryDiseases NVARCHAR(MAX) = NULL,
    @FarmsAggregate NVARCHAR(MAX) = NULL,
    @FlocksOrHerdsAggregate NVARCHAR(MAX) = NULL,
    @SpeciesAggregate NVARCHAR(MAX) = NULL,
    @DiseaseReports NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL,
    @UserID BIGINT,
    @LocationID BIGINT = NULL,
	@LinkLocalOrFieldSampleIDToReportID BIT = 0
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT = 0;
        DECLARE @ReturnMessage NVARCHAR(MAX) = N'SUCCESS';
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );
        DECLARE @RowAction INT = NULL,
                @RowID BIGINT,
				@ChildRowID BIGINT,
				@Iteration INT = 0,
                @NewFarmOwnerID BIGINT = NULL,
                @FarmID BIGINT = NULL,
                @FarmMasterID BIGINT = NULL,
                @FarmOwnerID BIGINT = NULL,
                @Latitude FLOAT = NULL,
                @Longitude FLOAT = NULL,
                @FlockOrHerdID BIGINT = NULL,
                @FlockOrHerdMasterID BIGINT = NULL,
                @EIDSSFlockOrHerdID NVARCHAR(200) = NULL,
                @SickAnimalQuantity INT = NULL,
                @TotalAnimalQuantity INT = NULL,
                @DeadAnimalQuantity INT = NULL,
                @Comments NVARCHAR(2000) = NULL,
                @SpeciesID BIGINT = NULL,
                @SpeciesMasterID BIGINT = NULL,
                @InternalSpeciesTypeID BIGINT = NULL,
                @StartOfSignsDate DATETIME = NULL,
                @AverageAge NVARCHAR(200) = NULL,
                @ObservationID BIGINT = NULL,
                @AnimalID BIGINT = NULL,
                @SexTypeID BIGINT = NULL,
                @DiseaseID BIGINT = NULL,
                @ConditionTypeID BIGINT = NULL,
                @AgeTypeID BIGINT = NULL,
                @EIDSSAnimalID NVARCHAR(200) = NULL,
                @AnimalName NVARCHAR(200) = NULL,
                @Color NVARCHAR(200) = NULL,
                @AnimalDescription NVARCHAR(200) = NULL,
                @ClinicalSignsIndicator BIGINT = NULL,
                @VaccinationID BIGINT,
                @VaccinationTypeID BIGINT = NULL,
                @RouteTypeID BIGINT = NULL,
                @VaccinationDate DATETIME = NULL,
                @Manufacturer NVARCHAR(200) = NULL,
                @LotNumber NVARCHAR(200) = NULL,
                @NumberVaccinated INT = NULL,
                @SampleID BIGINT,
                @SampleTypeID BIGINT = NULL,
                @RootSampleID BIGINT = NULL,
                @ParentSampleID BIGINT = NULL,
                @CollectedByPersonID BIGINT = NULL,
                @CollectedByOrganizationID BIGINT = NULL,
                @CollectionDate DATETIME = NULL,
                @SentDate DATETIME = NULL,
                @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
                @SampleStatusTypeID BIGINT = NULL,
                @SpeciesTypeID BIGINT = NULL,
                @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
                @SentToOrganizationID BIGINT = NULL,
                @ReadOnlyIndicator BIT = NULL,
                @CurrentSiteID BIGINT = NULL,
                @BirdStatusTypeID BIGINT = NULL,
                @PensideTestID BIGINT = NULL,
                @PensideTestResultTypeID BIGINT = NULL,
                @PensideTestNameTypeID BIGINT = NULL,
                @TestedByPersonID BIGINT = NULL,
                @TestedByOrganizationID BIGINT = NULL,
                @TestDate DATETIME = NULL,
                @PensideTestCategoryTypeID BIGINT = NULL,
                @TestID BIGINT = NULL,
                @TestNameTypeID BIGINT = NULL,
                @TestCategoryTypeID BIGINT = NULL,
                @TestResultTypeID BIGINT = NULL,
                @TestStatusTypeID BIGINT,
                @BatchTestID BIGINT = NULL,
                @StartedDate DATETIME = NULL,
                @ResultDate DATETIME = NULL,
                @ResultEnteredByOrganizationID BIGINT = NULL,
                @ResultEnteredByPersonID BIGINT = NULL,
                @ValidatedByOrganizationID BIGINT = NULL,
                @ValidatedByPersonID BIGINT = NULL,
                @NonLaboratoryTestIndicator BIT,
                @ExternalTestIndicator BIT = NULL,
                @PerformedByOrganizationID BIGINT = NULL,
                @ReceivedDate DATETIME = NULL,
                @ContactPersonName NVARCHAR(200) = NULL,
                @TestMonitoringSesssionID BIGINT = NULL,
                @TestInterpretationID BIGINT,
                @InterpretedStatusTypeID BIGINT = NULL,
                @InterpretedByOrganizationID BIGINT = NULL,
                @InterpretedByPersonID BIGINT = NULL,
                @TestingInterpretations BIGINT,
                @ValidatedStatusIndicator BIT = NULL,
                @ReportSessionCreatedIndicator BIT = NULL,
                @ValidatedComment NVARCHAR(200) = NULL,
                @InterpretedComment NVARCHAR(200) = NULL,
                @ValidatedDate DATETIME = NULL,
                @InterpretedDate DATETIME = NULL,
                @CaseLogID BIGINT,
                @LogStatusTypeID BIGINT = NULL,
                @LoggedByPersonID BIGINT = NULL,
                @LogDate DATETIME = NULL,
                @ActionRequired NVARCHAR(200) = NULL,
                @VeterinaryDiseaseReportRelationshipID BIGINT = NULL,
                @RelatedToSpeciesID BIGINT = NULL,
                @RelatedToAnimalID BIGINT = NULL,
                @RelatedToObservationID BIGINT = NULL,
                @FormTemplateID BIGINT,
                @ObservationSiteID BIGINT,
                @ActivityID BIGINT = NULL,
                @ActivityIDNew BIGINT = NULL,
                @ParameterID BIGINT = NULL,
                @ParameterValue SQL_VARIANT = NULL,
                @ParameterRowID BIGINT = NULL,
                @EventId BIGINT,
                @EventTypeId BIGINT = NULL,
                @EventSiteId BIGINT = NULL,
                @EventObjectId BIGINT = NULL,
                @EventUserId BIGINT = NULL,
                @EventDiseaseId BIGINT = NULL,
                @EventLocationId BIGINT = NULL,
                @EventInformationString NVARCHAR(MAX) = NULL,
                @EventLoginSiteId BIGINT = NULL,
                @MonitoringSessionActionID BIGINT = NULL,
                @MonitoringSessionActionStatusTypeID BIGINT = NULL,
                @MonitoringSessionActionTypeID BIGINT = NULL,
                @MonitoringSessionToDiagnosis BIGINT = NULL,
                @MonitoringSessionSummaryID BIGINT = NULL,
				@MonitoringSessionToMaterialID BIGINT = NULL,
                @ActionDate DATETIME = NULL,
                @SampledAnimalsQuantity INT = NULL,
                @SamplesQuantity INT = NULL,
                @PositiveAnimalsQuantity INT = NULL,
                @Order INT = NULL;


        DECLARE @DiseaseSpeciesSampleTemp TABLE
        (
            MonitoringSessionToDiagnosisID BIGINT NOT NULL,
            DiseaseID BIGINT NOT NULL,
            [Order] INT NOT NULL,
            SpeciesTypeID BIGINT NULL,
            SampleTypeID BIGINT NULL,
            RowStatus INT NULL,
            RowAction INT NULL
        );
        DECLARE @FarmsTemp TABLE
        (
            FarmMasterID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            TotalAnimalQuantity INT NULL,
            Latitude FLOAT NULL,
            Longitude FLOAT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @FlocksOrHerdsTemp TABLE
        (
            FlockOrHerdID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            FarmMasterID BIGINT NULL,
            FlockOrHerdMasterID BIGINT NULL,
            EIDSSFlockOrHerdID NVARCHAR(200) NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            RowStatus INT NULL,
            RowAction INT NULL
        );
        DECLARE @SpeciesTemp TABLE
        (
            SpeciesID BIGINT NOT NULL,
            SpeciesMasterID BIGINT NULL,
            FlockOrHerdID BIGINT NOT NULL,
            SpeciesTypeID BIGINT NOT NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            StartOfSignsDate DATETIME NULL,
            AverageAge NVARCHAR(200) NULL,
            ObservationID BIGINT NULL,
            Comments NVARCHAR(2000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToSpeciesID BIGINT NULL,
            RelatedToObservationID BIGINT NULL
        );
        DECLARE @AnimalsTemp TABLE
        (
            AnimalID BIGINT NOT NULL,
            SexTypeID BIGINT NULL,
            ConditionTypeID BIGINT NULL,
            AgeTypeID BIGINT NULL,
            SpeciesID BIGINT NULL,
            ObservationID BIGINT NULL,
            EIDSSAnimalID NVARCHAR(200) NULL,
            AnimalName NVARCHAR(200) NULL,
            Color NVARCHAR(200) NULL,
            AnimalDescription NVARCHAR(200) NULL,
            ClinicalSignsIndicator BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToAnimalID BIGINT NULL,
            RelatedToObservationID BIGINT NULL
        );
        DECLARE @SamplesTemp TABLE
        (
            SampleID BIGINT NOT NULL,
            SampleTypeID BIGINT NULL,
            RootSampleID BIGINT NULL,
            ParentSampleID BIGINT NULL,
            SpeciesID BIGINT NULL,
            AnimalID BIGINT NULL,
            MonitoringSessionID BIGINT NULL,
            SampleStatusTypeID BIGINT NULL,
            CollectionDate DATETIME NULL,
            CollectedByOrganizationID BIGINT NULL,
            CollectedByPersonID BIGINT NULL,
            SentDate DATETIME NULL,
            SentToOrganizationID BIGINT NULL,
            EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
            Comments NVARCHAR(200) NULL,
            SiteID BIGINT NOT NULL,
            CurrentSiteID BIGINT NULL,
            EnteredDate DATETIME NULL,
            DiseaseID BIGINT NULL,
            BirdStatusTypeID BIGINT NULL,
            ReadOnlyIndicator BIT NULL,
            FarmID BIGINT NULL,
            FarmMasterID BIGINT NULL,
            FarmOwnerID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
		DECLARE @SamplesToDiseasesTemp TABLE
        (
            MonitoringSessionToMaterialID BIGINT NOT NULL,
            MonitoringSessionID BIGINT NOT NULL,
			SampleID BIGINT NOT NULL,
			SampleTypeID BIGINT NULL,
            DiseaseID BIGINT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @LaboratoryTestsTemp TABLE
        (
            TestID BIGINT NOT NULL,
            TestNameTypeID BIGINT NULL,
            TestCategoryTypeID BIGINT NULL,
            TestResultTypeID BIGINT NULL,
            TestStatusTypeID BIGINT NOT NULL,
            DiseaseID BIGINT NOT NULL,
            SampleID BIGINT NULL,
            BatchTestID BIGINT NULL,
            ObservationID BIGINT NULL,
            TestNumber INT NULL,
            Comments NVARCHAR NULL,
            StartedDate DATETIME NULL,
            ResultDate DATETIME NULL,
            TestedByOrganizationID BIGINT NULL,
            TestedByPersonID BIGINT NULL,
            ResultEnteredByOrganizationID BIGINT NULL,
            ResultEnteredByPersonID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            ReadOnlyIndicator BIT NOT NULL,
            NonLaboratoryTestIndicator BIT NOT NULL,
            ExternalTestIndicator BIT NULL,
            PerformedByOrganizationID BIGINT NULL,
            ReceivedDate DATETIME NULL,
            ContactPersonName NVARCHAR(200) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @LaboratoryTestInterpretationsTemp TABLE
        (
            TestInterpretationID BIGINT NOT NULL,
            DiseaseID BIGINT NULL,
            InterpretedStatusTypeID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            InterpretedByOrganizationID BIGINT NULL,
            InterpretedByPersonID BIGINT NULL,
            TestID BIGINT NOT NULL,
            ValidatedStatusIndicator BIT NULL,
            ReportSessionCreatedIndicator BIT NULL,
            ValidatedComment NVARCHAR(200) NULL,
            InterpretedComment NVARCHAR(200) NULL,
            ValidatedDate DATETIME NULL,
            InterpretedDate DATETIME NULL,
            ReadOnlyIndicator BIT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @ActionsTemp TABLE
        (
            MonitoringSessionActionID BIGINT NOT NULL,
            MonitoringSessionActionStatusTypeID BIGINT NULL,
            MonitoringSessionActionTypeID BIGINT NULL,
            EnteredByPersonID BIGINT NULL,
            ActionDate DATETIME NULL,
            Comments NVARCHAR(1000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @AggregateSummaryInfoTemp TABLE
        (
            MonitoringSessionSummaryID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            FarmMasterID BIGINT NULL,
            SpeciesID BIGINT NULL,
            AnimalSexID BIGINT NULL,
            SampleAnimalsQty INT NULL,
            SamplesQty INT NULL,
            CollectionDate DATETIME NULL,
            CollectedByPersonID BIGINT NULL,
            PositiveAnimalsQty INT NULL,
            DiseaseID BIGINT NULL,
            SampleTypeID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @AggregateSummaryDiseasesTemp TABLE
        (
            MonitoringSessionSummaryID BIGINT NULL,
            DiseaseID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @FarmsAggregateTemp TABLE
        (
            FarmMasterID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            TotalAnimalQuantity INT NULL,
            Latitude FLOAT NULL,
            Longitude FLOAT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @FlocksOrHerdsAggregateTemp TABLE
        (
            FlockOrHerdID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            FarmMasterID BIGINT NULL,
            FlockOrHerdMasterID BIGINT NULL,
            EIDSSFlockOrHerdID NVARCHAR(200) NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            RowStatus INT NULL,
            RowAction INT NULL
        );
        DECLARE @SpeciesAggregateTemp TABLE
        (
            SpeciesID BIGINT NOT NULL,
            SpeciesMasterID BIGINT NULL,
            FlockOrHerdID BIGINT NOT NULL,
            SpeciesTypeID BIGINT NOT NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            StartOfSignsDate DATETIME NULL,
            AverageAge NVARCHAR(200) NULL,
            ObservationID BIGINT NULL,
            Comments NVARCHAR(2000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToSpeciesID BIGINT NULL,
            RelatedToObservationID BIGINT NULL
        );
        DECLARE @EventsTemp TABLE
        (
            EventId BIGINT NOT NULL,
            EventTypeId BIGINT NULL,
            UserId BIGINT NULL,
            SiteId BIGINT NULL,
            LoginSiteId BIGINT NULL,
            ObjectId BIGINT NULL,
            DiseaseId BIGINT NULL,
            LocationId BIGINT NULL,
            InformationString NVARCHAR(MAX) NULL
        );

        BEGIN TRANSACTION;

        INSERT INTO @DiseaseSpeciesSampleTemp
        SELECT *
        FROM
            OPENJSON(@DiseaseSpeciesSamples)
            WITH
            (
                MonitoringSessionToDiagnosisID BIGINT,
                DiseaseID BIGINT,
                [Order] INT,
                SpeciesTypeID BIGINT,
                SampleTypeID BIGINT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @FarmsTemp
        SELECT *
        FROM
            OPENJSON(@Farms)
            WITH
            (
                FarmMasterID BIGINT,
                FarmID BIGINT,
                TotalAnimalQuantity INT,
                Latitude FLOAT,
                Longitude FLOAT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @FlocksOrHerdsTemp
        SELECT *
        FROM
            OPENJSON(@FlocksOrHerds)
            WITH
            (
                FlockOrHerdID BIGINT,
                FarmID BIGINT,
                FarmMasterID BIGINT,
                FlockOrHerdMasterID BIGINT,
                EIDSSFlockOrHerdID NVARCHAR(200),
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @SpeciesTemp
        SELECT *
        FROM
            OPENJSON(@Species)
            WITH
            (
                SpeciesID BIGINT,
                SpeciesMasterID BIGINT,
                FlockOrHerdID BIGINT,
                SpeciesTypeID BIGINT,
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                StartOfSignsDate DATETIME,
                AverageAge NVARCHAR(200),
                ObservationID BIGINT,
                Comments NVARCHAR(2000),
                RowStatus INT,
                RowAction INT,
                RelatedToSpeciesID BIGINT,
                RelatedToObservationID BIGINT
            );
        INSERT INTO @AnimalsTemp
        SELECT *
        FROM
            OPENJSON(@Animals)
            WITH
            (
                AnimalID BIGINT,
                SexTypeID BIGINT,
                ConditionTypeID BIGINT,
                AgeTypeID BIGINT,
                SpeciesID BIGINT,
                ObservationID BIGINT,
                EIDSSAnimalID NVARCHAR(200),
                AnimalName NVARCHAR(200),
                Color NVARCHAR(200),
                AnimalDescription NVARCHAR(200),
                ClinicalSignsIndicator BIGINT,
                RowStatus INT,
                RowAction INT,
                RelatedToAnimalID BIGINT,
                RelatedToObservationID BIGINT
            );
        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@Samples)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                RootSampleID BIGINT,
                ParentSampleID BIGINT,
                SpeciesID BIGINT,
                AnimalID BIGINT,
                MonitoringSessionID BIGINT,
                SampleStatusTypeID BIGINT,
                CollectionDate DATETIME2,
                CollectedByOrganizationID BIGINT,
                CollectedByPersonID BIGINT,
                SentDate DATETIME2,
                SentToOrganizationID BIGINT,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                Comments NVARCHAR(200),
                SiteID BIGINT,
                CurrentSiteID BIGINT,
                EnteredDate DATETIME2,
                DiseaseID BIGINT,
                BirdStatusTypeID BIGINT,
                ReadOnlyIndicator BIT,
                FarmID BIGINT,
                FarmMasterID BIGINT,
                FarmOwnerID BIGINT,
                RowStatus INT,
                RowAction INT
            );
		INSERT INTO @SamplesToDiseasesTemp
		SELECT *
		FROM
			OPENJSON(@SamplesToDiseases)
			WITH
			(
				MonitoringSessionToMaterialID BIGINT,
				MonitoringSessionID BIGINT,
				SampleID BIGINT,
				SampleTypeID BIGINT,
				DiseaseID BIGINT,
				RowStatus INT,
				RowAction INT
			);
        INSERT INTO @LaboratoryTestsTemp
        SELECT *
        FROM
            OPENJSON(@LaboratoryTests)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Comments NVARCHAR(500),
                StartedDate DATETIME2,
                ResultDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @LaboratoryTestInterpretationsTemp
        SELECT *
        FROM
            OPENJSON(@LaboratoryTestInterpretations)
            WITH
            (
                TestInterpretationID BIGINT,
                DiseaseID BIGINT,
                InterpretedStatusTypeID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                InterpretedByOrganizationID BIGINT,
                InterpretedByPersonID BIGINT,
                TestID BIGINT,
                ValidatedStatusIndicator BIT,
                ReportSessionCreatedIndicator BIT,
                ValidatedComment NVARCHAR(200),
                InterpretedComment NVARCHAR(200),
                ValidatedDate DATETIME2,
                InterpretedDate DATETIME2,
                ReadOnlyIndicator BIT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @ActionsTemp
        SELECT *
        FROM
            OPENJSON(@Actions)
            WITH
            (
                MonitoringSessionActionID BIGINT,
                MonitoringSessionActionStatusTypeID BIGINT,
                MonitoringSessionActionTypeID BIGINT,
                EnteredByPersonID BIGINT,
                ActionDate DATETIME,
                Comments NVARCHAR(1000),
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @AggregateSummaryInfoTemp
        SELECT *
        FROM
            OPENJSON(@AggregateSummaryInfo)
            WITH
            (
                MonitoringSessionSummaryID BIGINT,
                FarmID BIGINT,
                FarmMasterID BIGINT,
                SpeciesID BIGINT,
                AnimalSexID BIGINT,
                SampleAnimalsQty INT,
                SamplesQty INT,
                CollectionDate DATETIME,
                CollectedByPersonID BIGINT,
                PositiveAnimalsQty INT,
                DiseaseID BIGINT,
                SampleTypeID BIGINT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @AggregateSummaryDiseasesTemp
        SELECT *
        FROM
            OPENJSON(@AggregateSummaryDiseases)
            WITH
            (
                MonitoringSessionSummaryID BIGINT,
                DiseaseID BIGINT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @FarmsAggregateTemp
        SELECT *
        FROM
            OPENJSON(@FarmsAggregate)
            WITH
            (
                FarmMasterID BIGINT,
                FarmID BIGINT,
                TotalAnimalQuantity INT,
                Latitude FLOAT,
                Longitude FLOAT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @FlocksOrHerdsAggregateTemp
        SELECT *
        FROM
            OPENJSON(@FlocksOrHerdsAggregate)
            WITH
            (
                FlockOrHerdID BIGINT,
                FarmID BIGINT,
                FarmMasterID BIGINT,
                FlockOrHerdMasterID BIGINT,
                EIDSSFlockOrHerdID NVARCHAR(200),
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @SpeciesAggregateTemp
        SELECT *
        FROM
            OPENJSON(@SpeciesAggregate)
            WITH
            (
                SpeciesID BIGINT,
                SpeciesMasterID BIGINT,
                FlockOrHerdID BIGINT,
                SpeciesTypeID BIGINT,
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                StartOfSignsDate DATETIME,
                AverageAge NVARCHAR(200),
                ObservationID BIGINT,
                Comments NVARCHAR(2000),
                RowStatus INT,
                RowAction INT,
                RelatedToSpeciesID BIGINT,
                RelatedToObservationID BIGINT
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        IF NOT EXISTS
        (
            SELECT *
            FROM dbo.tlbMonitoringSession
            WHERE idfMonitoringSession = @MonitoringSessionID
                  AND intRowStatus = 0
        )
        BEGIN

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbMonitoringSession',
                                              @MonitoringSessionID OUTPUT;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NextNumber_GET 'Vet Active Surveillance Session',
                                               @SessionID OUTPUT,
                                               NULL;

            INSERT INTO dbo.tlbMonitoringSession
            (
                [idfMonitoringSession],
                [idfsMonitoringSessionStatus],
                [idfsCountry],
                [idfsRegion],
                [idfsRayon],
                [idfsSettlement],
                [idfPersonEnteredBy],
                [idfCampaign],
                [idfsSite],
                [datEnteredDate],
                [strMonitoringSessionID],
                [intRowStatus],
                [datStartDate],
                [datEndDate],
                [SessionCategoryID],
                [LegacySessionID],
                [AuditCreateUser],
                [SourceSystemNameID],
                [SourceSystemKeyValue],
                [idfsLocation],
				[idfsMonitoringSessionSpeciesType]
            )
            VALUES
            (@MonitoringSessionID,
             @SessionStatusTypeID,
             @CountryID,
             @RegionID,
             @RayonID,
             @SettlementID,
             @EnteredByPersonID,
             @CampaignKey,
             @SiteID,
             @DateEntered,
             @SessionID,
             0  ,
             @SessionStartDate,
             @SessionEndDate,
             @SessionCategoryID,
             @LegacySessionID,
             @AuditUserName,
             10519001,
             '[{"idfMonitoringSessionID":' + CAST(@MonitoringSessionID AS NVARCHAR(300)) + '}]',
             @LocationID,
			 @ReportTypeID
            );

            UPDATE @EventsTemp
            SET ObjectId = @MonitoringSessionID
            WHERE ObjectId = 0;
        END
        ELSE
        BEGIN
            UPDATE [dbo].[tlbMonitoringSession]
            SET [idfsMonitoringSessionStatus] = @SessionStatusTypeID,
                [idfsCountry] = @CountryID,
                [idfsRegion] = @RegionID,
                [idfsRayon] = @RayonID,
                [idfsSettlement] = @SettlementID,
                [idfPersonEnteredBy] = @EnteredByPersonID,
                [idfCampaign] = @CampaignKey,
                [idfsSite] = @SiteID,
                [datEnteredDate] = @DateEntered,
                [strMonitoringSessionID] = @SessionID,
                [intRowStatus] = 0,
                [datStartDate] = @SessionStartDate,
                [datEndDate] = @SessionEndDate,
                [SessionCategoryID] = @SessionCategoryID,
                [LegacySessionID] = @LegacySessionID,
                [AuditUpdateUser] = @AuditUserName,
                [idfsLocation] = @LocationID,
				[idfsMonitoringSessionSpeciesType] = @ReportTypeID
            WHERE idfMonitoringSession = @MonitoringSessionID
        END;

        WHILE EXISTS (SELECT * FROM @DiseaseSpeciesSampleTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionToDiagnosisID,
				@MonitoringSessionToDiagnosis = MonitoringSessionToDiagnosisID,
                @DiseaseID = DiseaseID,
                @SpeciesTypeID = SpeciesTypeID,
                @SampleTypeID = SampleTypeID,
                @Order = [Order],
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @DiseaseSpeciesSampleTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VAS_MONITORING_SESSION_TO_DIAGNOSIS_SPECIES_SAMPLE_SET @MonitoringSessionToDiagnosis OUTPUT,
                                                                                    @MonitoringSessionID,
                                                                                    @DiseaseID,
                                                                                    @SpeciesTypeID,
                                                                                    @SampleTypeID,
                                                                                    @Order,
                                                                                    @RowStatus,
                                                                                    @RowAction,
                                                                                    @AuditUserName;

            DELETE FROM @DiseaseSpeciesSampleTemp
            WHERE MonitoringSessionToDiagnosisID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @FarmsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FarmMasterID,
                @FarmMasterID = FarmMasterID,
                @FarmID = FarmID,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @Latitude = Latitude,
                @Longitude = Longitude,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @FarmsTemp;



            IF @ReportTypeID = 129909620007069 --Avian
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_FARM_COPY @AuditUserName,
                                               @RowID,
                                               @TotalAnimalQuantity,
                                               NULL,
                                               NULL,
                                               NULL,
                                               NULL,
                                               NULL,
                                               @Latitude,
                                               @Longitude,
                                               @MonitoringSessionID,
                                               NULL,
                                               @FarmOwnerID,
                                               @FarmID OUTPUT,
                                               @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;

                UPDATE @FlocksOrHerdsTemp
                SET FarmID = @FarmID
                WHERE FarmMasterID = @RowID;

                UPDATE @SamplesTemp
                SET FarmID = @FarmID
                WHERE FarmMasterID = @RowID;

            END
            ELSE --Livestock
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_FARM_COPY @AuditUserName,
                                               @RowID,
                                               NULL,
                                               NULL,
                                               NULL,
                                               @TotalAnimalQuantity,
                                               NULL,
                                               NULL,
                                               @Latitude,
                                               @Longitude,
                                               @MonitoringSessionID,
                                               NULL,
                                               @FarmOwnerID,
                                               @FarmID OUTPUT,
                                               @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;

                UPDATE @FlocksOrHerdsTemp
                SET FarmID = @FarmID
                WHERE FarmMasterID = @RowID;

                UPDATE @SamplesTemp
                SET FarmID = @FarmID
                WHERE FarmMasterID = @RowID;
            END

            -- disassociate farm with session 
            if ((@MonitoringSessionID IS NOT NULL) AND (@RowStatus = 1))
            BEGIN
                UPDATE dbo.tlbFarm
                set idfMonitoringSession = null
                where idfFarm = @FarmID
                      and idfMonitoringSession = @MonitoringSessionID;
            END;


            DELETE FROM @FarmsTemp
            WHERE FarmMasterID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @FlocksOrHerdsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FlockOrHerdID,
                @FlockOrHerdID = FlockOrHerdID,
                @FarmID = FarmID,
                @FarmMasterID = FarmMasterID,
                @FlockOrHerdMasterID = FlockOrHerdMasterID,
                @EIDSSFlockOrHerdID = EIDSSFlockOrHerdID,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @FlocksOrHerdsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_HERD_SET @AuditUserName,
                                          @FlockOrHerdID OUTPUT,
                                          @FlockOrHerdMasterID,
                                          @FarmID,
                                          @EIDSSFlockOrHerdID,
                                          @SickAnimalQuantity,
                                          @TotalAnimalQuantity,
                                          @DeadAnimalQuantity,
                                          NULL,
                                          @RowStatus,
                                          @RowAction;

            UPDATE @SpeciesTemp
            SET FlockOrHerdID = @FlockOrHerdID
            WHERE FlockOrHerdID = @RowID;

            DELETE FROM @FlocksOrHerdsTemp
            WHERE FLockOrHerdID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @SpeciesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SpeciesID,
                @SpeciesID = SpeciesID,
                @SpeciesMasterID = SpeciesMasterID,
                @SpeciesTypeID = SpeciesTypeID,
                @FlockOrHerdID = FlockOrHerdID,
                @StartOfSignsDate = StartOfSignsDate,
                @AverageAge = AverageAge,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @Comments = Comments,
                @ObservationID = ObservationID,
                @RowStatus = RowStatus,
                @RowAction = RowAction,
                @RelatedToSpeciesID = RelatedToSpeciesID,
                @RelatedToObservationID = RelatedToObservationID
            FROM @SpeciesTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_SPECIES_SET @AuditUserName,
                                             @SpeciesID OUTPUT,
                                             @SpeciesMasterID,
                                             @SpeciesTypeID,
                                             @FlockOrHerdID,
                                             @ObservationID,
                                             @StartOfSignsDate,
                                             @AverageAge,
                                             @SickAnimalQuantity,
                                             @TotalAnimalQuantity,
                                             @DeadAnimalQuantity,
                                             @Comments,
                                             @RowStatus,
                                             @RowAction;

            UPDATE @AnimalsTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            UPDATE @SamplesTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            DELETE FROM @SpeciesTemp
            WHERE SpeciesID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @AnimalsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = AnimalID,
                @AnimalID = AnimalID,
                @SexTypeID = SexTypeID,
                @ConditionTypeID = ConditionTypeID,
                @AgeTypeID = AgeTypeID,
                @SpeciesID = SpeciesID,
                @ObservationID = ObservationID,
                @AnimalDescription = AnimalDescription,
                @EIDSSAnimalID = EIDSSAnimalID,
                @AnimalName = AnimalName,
                @Color = Color,
                @ClinicalSignsIndicator = ClinicalSignsIndicator,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @AnimalsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_ANIMAL_SET @AuditUserName,
                                            @AnimalID OUTPUT,
                                            @SexTypeID,
                                            @ConditionTypeID,
                                            @AgeTypeID,
                                            @SpeciesID,
                                            @ObservationID,
                                            @AnimalDescription,
                                            @EIDSSAnimalID,
                                            @AnimalName,
                                            @Color,
                                            @ClinicalSignsIndicator,
                                            @RowStatus,
                                            @RowAction;

            UPDATE @SamplesTemp
            SET AnimalID = @AnimalID
            WHERE AnimalID = @RowID;

            DELETE FROM @AnimalsTemp
            WHERE AnimalID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @SamplesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SampleID,
                @SampleID = SampleID,
                @SampleTypeID = SampleTypeID,
                @RootSampleID = RootSampleID,
                @ParentSampleID = ParentSampleID,
                @SpeciesID = SpeciesID,
                @AnimalID = AnimalID,
                @CollectedByPersonID = CollectedByPersonID,
                @CollectedByOrganizationID = CollectedByOrganizationID,
                @CollectionDate = CollectionDate,
                @SentDate = SentDate,
                @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                @SampleStatusTypeID = SampleStatusTypeID,
                @FarmID = FarmID,
                @FarmMasterID = FarmMasterID,
                @DiseaseID = DiseaseID,
                @DateEntered = EnteredDate,
                @Comments = Comments,
                @SiteID = SiteID,
                @CurrentSiteID = CurrentSiteID,
                @RowStatus = RowStatus,
                @SentToOrganizationID = SentToOrganizationID,
                @BirdStatusTypeID = BirdStatusTypeID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @RowAction = RowAction
            FROM @SamplesTemp;

			--Format the EIDSSLocalOrFieldSampleID according to system preferences.
			IF (
				@EIDSSLocalOrFieldSampleID IS NULL
				OR @EIDSSLocalOrFieldSampleID = ''
               )
               AND @LinkLocalOrFieldSampleIDToReportID = 1
            BEGIN
                SET @Iteration = @Iteration + 1;
                IF @Iteration < 10
                BEGIN
                    SET @EIDSSLocalOrFieldSampleID = @SessionID + '-0' + CONVERT(NVARCHAR(4), @Iteration);
                END
                ELSE
                BEGIN
                    SET @EIDSSLocalOrFieldSampleID = @SessionID + '-' + CONVERT(NVARCHAR(4), @Iteration);
                END;
            END;

			INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_SAMPLE_SET @AuditUserName,
                                            @SampleID OUTPUT,
                                            @SampleTypeID,
                                            @RootSampleID,
                                            @ParentSampleID,
                                            @FarmOwnerID,
                                            @SpeciesID,
                                            @AnimalID,
                                            NULL,
                                            @MonitoringSessionID,
                                            NULL,
                                            NULL,
                                            NULL,
                                            @CollectionDate,
                                            @CollectedByPersonID,
                                            @CollectedByOrganizationID,
                                            @SentDate,
                                            @SentToOrganizationID,
                                            @EIDSSLocalOrFieldSampleID,
                                            @SiteID,
                                            @DateEntered,
                                            @ReadOnlyIndicator,
                                            @SampleStatusTypeID,
                                            @Comments,
                                            @CurrentSiteID,
                                            @DiseaseID,
                                            @BirdStatusTypeID,
                                            @RowStatus,
                                            @RowAction;

		
       	   		 
            UPDATE @LaboratoryTestsTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

			UPDATE @SamplesToDiseasesTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            DELETE FROM @SamplesTemp
            WHERE SampleID = @RowID;
        END;

		WHILE EXISTS (SELECT * FROM @SamplesToDiseasesTemp)
		BEGIN
			SELECT TOP 1
				@RowID = MonitoringSessionToMaterialID,
				@MonitoringSessionToMaterialID = MonitoringSessionToMaterialID,
				@MonitoringSessionID = @MonitoringSessionID,
				@SampleID = SampleID,
				@SampleTypeID = SampleTypeID,
				@DiseaseID = DiseaseID,
				@RowAction = RowAction,
				@RowStatus = RowStatus
			FROM @SamplesToDiseasesTemp;

			--insert or update the diseases for this sample
			INSERT INTO @SuppressSelect
			EXECUTE dbo.USSP_VAS_SAMPLE_TO_DISEASE_SET
										@AuditUserName,
                                        @MonitoringSessionToMaterialID,
										@MonitoringSessionID,
										@SampleID,
										@DiseaseID,
                                        @SampleTypeID,
                                        @RowStatus,
                                        @RowAction;

			DELETE FROM @SamplesToDiseasesTemp
			WHERE MonitoringSessionToMaterialID = @RowID;
		END;

        WHILE EXISTS (SELECT * FROM @LaboratoryTestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestID,
                @TestID = TestID,
                @TestNameTypeID = TestNameTypeID,
                @TestCategoryTypeID = TestCategoryTypeID,
                @TestResultTypeID = TestResultTypeID,
                @TestStatusTypeID = TestStatusTypeID,
                @DiseaseID = DiseaseID,
                @SampleID = SampleID,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @StartedDate = StartedDate,
                @ResultDate = ResultDate,
                @TestedByOrganizationID = TestedByOrganizationID,
                @TestedByPersonID = TestedByPersonID,
                @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                @ResultEnteredByPersonID = ResultEnteredByPersonID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
                @ExternalTestIndicator = ExternalTestIndicator,
                @PerformedByOrganizationID = PerformedByOrganizationID,
                @ReceivedDate = ReceivedDate,
                @ContactPersonName = ContactPersonName,
                @RowAction = RowAction
            FROM @LaboratoryTestsTemp;

            --If record is being soft-deleted, then check if the test record was originally created 
            --in the laboaratory module.  If it was, then disassociate the test record from the 
            --veterinary surveillance session, so that the test record remains in the laboratory module 
            --for further action.
            IF @RowStatus = 1
               AND @NonLaboratoryTestIndicator = 0
            BEGIN
                SET @RowStatus = 0;
                SET @TestMonitoringSesssionID = NULL;
            END
            ELSE
            BEGIN
                SET @TestMonitoringSesssionID = @MonitoringSessionID;
            END;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TEST_SET @AuditUserName,
                                          @TestID OUTPUT,
                                          @TestNameTypeID,
                                          @TestCategoryTypeID,
                                          @TestResultTypeID,
                                          @TestStatusTypeID,
                                          @DiseaseID,
                                          @SampleID,
                                          NULL,
                                          NULL,
                                          NULL,
                                          @Comments,
                                          @RowStatus,
                                          @StartedDate,
                                          @ResultDate,
                                          @TestedByOrganizationID,
                                          @TestedByPersonID,
                                          @ResultEnteredByOrganizationID,
                                          @ResultEnteredByPersonID,
                                          @ValidatedByOrganizationID,
                                          @ValidatedByPersonID,
                                          @ReadOnlyIndicator,
                                          @NonLaboratoryTestIndicator,
                                          @ExternalTestIndicator,
                                          @PerformedByOrganizationID,
                                          @ReceivedDate,
                                          @ContactPersonName,
                                          @MonitoringSessionID,
                                          NULL,
                                          NULL,
                                          NULL,
                                          @AuditUserName,
                                          @RowAction;

            UPDATE @LaboratoryTestInterpretationsTemp
            SET TestID = @TestID
            WHERE TestID = @RowID;

            DELETE FROM @LaboratoryTestsTemp
            WHERE TestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @LaboratoryTestInterpretationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestInterpretationID,
                @TestInterpretationID = TestInterpretationID,
                @DiseaseID = DiseaseID,
                @InterpretedStatusTypeID = InterpretedStatusTypeID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @InterpretedByOrganizationID = InterpretedByOrganizationID,
                @InterpretedByPersonID = InterpretedByPersonID,
                @TestID = TestID,
                @ValidatedStatusIndicator = ValidatedStatusIndicator,
                @ReportSessionCreatedIndicator = ReportSessionCreatedIndicator,
                @ValidatedComment = ValidatedComment,
                @InterpretedComment = InterpretedComment,
                @ValidatedDate = ValidatedDate,
                @InterpretedDate = InterpretedDate,
                @RowStatus = RowStatus,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @RowAction = RowAction
            FROM @LaboratoryTestInterpretationsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TEST_INTERPRETATION_SET @AuditUserName,
                                                         @TestInterpretationID OUTPUT,
                                                         @DiseaseID,
                                                         @InterpretedStatusTypeID,
                                                         @ValidatedByOrganizationID,
                                                         @ValidatedByPersonID,
                                                         @InterpretedByOrganizationID,
                                                         @InterpretedByPersonID,
                                                         @TestID,
                                                         @ValidatedStatusIndicator,
                                                         @ReportSessionCreatedIndicator,
                                                         @ValidatedComment,
                                                         @InterpretedComment,
                                                         @ValidatedDate,
                                                         @InterpretedDate,
                                                         @RowStatus,
                                                         @ReadOnlyIndicator,
                                                         @RowAction;

            DELETE FROM @LaboratoryTestInterpretationsTemp
            WHERE TestInterpretationID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @ActionsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionActionID,
                @MonitoringSessionActionTypeID = MonitoringSessionActionTypeID,
                @MonitoringSessionActionStatusTypeID = MonitoringSessionActionStatusTypeID,
                @EnteredByPersonID = EnteredByPersonID,
                @ActionDate = ActionDate,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @ActionsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VAS_MONITORING_SESSION_ACTION_SET @MonitoringSessionActionID,
                                                               @MonitoringSessionID,
                                                               @EnteredByPersonID,
                                                               @MonitoringSessionActionTypeID,
                                                               @MonitoringSessionActionStatusTypeID,
                                                               @ActionDate,
                                                               @Comments,
                                                               @RowStatus,
                                                               @RowAction,
                                                               @AuditUserName;

            DELETE FROM @ActionsTemp
            WHERE MonitoringSessionActionID = @RowID;
        END;

        /* Aggregate Information Section */

        WHILE EXISTS (SELECT * FROM @FarmsAggregateTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FarmMasterID,
                @FarmMasterID = FarmMasterID,
                @FarmID = FarmID,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @Latitude = Latitude,
                @Longitude = Longitude,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @FarmsAggregateTemp;

            IF @ReportTypeID = 129909620007069 --Avian
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_FARM_COPY @AuditUserName,
                                               @RowID,
                                               @TotalAnimalQuantity,
                                               NULL,
                                               NULL,
                                               NULL,
                                               NULL,
                                               NULL,
                                               @Latitude,
                                               @Longitude,
                                               NULL,
                                               NULL,
                                               @FarmOwnerID,
                                               @FarmID OUTPUT,
                                               @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;

            END
            ELSE --Livestock
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_FARM_COPY @AuditUserName,
                                               @RowID,
                                               NULL,
                                               NULL,
                                               NULL,
                                               @TotalAnimalQuantity,
                                               NULL,
                                               NULL,
                                               @Latitude,
                                               @Longitude,
                                               NULL,
                                               NULL,
                                               @FarmOwnerID,
                                               @FarmID OUTPUT,
                                               @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;

            END

            UPDATE @FlocksOrHerdsAggregateTemp
            SET FarmID = @FarmID
            WHERE FarmMasterID = @RowID;

            UPDATE @AggregateSummaryInfoTemp
            SET FarmID = @FarmID
            WHERE FarmMasterID = @RowID;

			/*farm is being removed from aggregate monitoring session*/
			IF ((@MonitoringSessionID IS NOT NULL) AND (@RowStatus = 1))
			BEGIN
				UPDATE dbo.tlbFarm 
				SET  idfMonitoringSession = null
					,intRowStatus = @RowStatus
				WHERE idfFarm = @FarmID;
			END;

            DELETE FROM @FarmsAggregateTemp
            WHERE FarmMasterID = @RowID;

        END;

        WHILE EXISTS (SELECT * FROM @FlocksOrHerdsAggregateTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FlockOrHerdID,
                @FlockOrHerdID = FlockOrHerdID,
                @FarmID = FarmID,
                @FarmMasterID = FarmMasterID,
                @FlockOrHerdMasterID = FlockOrHerdMasterID,
                @EIDSSFlockOrHerdID = EIDSSFlockOrHerdID,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @FlocksOrHerdsAggregateTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_HERD_SET @AuditUserName,
                                          @FlockOrHerdID OUTPUT,
                                          @FlockOrHerdMasterID,
                                          @FarmID,
                                          @EIDSSFlockOrHerdID,
                                          @SickAnimalQuantity,
                                          @TotalAnimalQuantity,
                                          @DeadAnimalQuantity,
                                          NULL,
                                          @RowStatus,
                                          @RowAction;

            UPDATE @SpeciesAggregateTemp
            SET FlockOrHerdID = @FlockOrHerdID
            WHERE FlockOrHerdID = @RowID;

            DELETE FROM @FlocksOrHerdsAggregateTemp
            WHERE FLockOrHerdID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @SpeciesAggregateTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SpeciesID,
                @SpeciesID = SpeciesID,
                @SpeciesMasterID = SpeciesMasterID,
                @SpeciesTypeID = SpeciesTypeID,
                @FlockOrHerdID = FlockOrHerdID,
                @StartOfSignsDate = StartOfSignsDate,
                @AverageAge = AverageAge,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @Comments = Comments,
                @ObservationID = ObservationID,
                @RowStatus = RowStatus,
                @RowAction = RowAction,
                @RelatedToSpeciesID = RelatedToSpeciesID,
                @RelatedToObservationID = RelatedToObservationID
            FROM @SpeciesAggregateTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_SPECIES_SET @AuditUserName,
                                             @SpeciesID OUTPUT,
                                             @SpeciesMasterID,
                                             @SpeciesTypeID,
                                             @FlockOrHerdID,
                                             @ObservationID,
                                             @StartOfSignsDate,
                                             @AverageAge,
                                             @SickAnimalQuantity,
                                             @TotalAnimalQuantity,
                                             @DeadAnimalQuantity,
                                             @Comments,
                                             @RowStatus,
                                             @RowAction;

            UPDATE @AggregateSummaryInfoTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            DELETE FROM @SpeciesAggregateTemp
            WHERE SpeciesID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @AggregateSummaryInfoTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionSummaryID,
                @MonitoringSessionSummaryID = MonitoringSessionSummaryID,
                @SpeciesID = SpeciesID,
                @SampledAnimalsQuantity = SampleAnimalsQty,
                @SamplesQuantity = SamplesQty,
                @CollectionDate = CollectionDate,
                @CollectedByPersonID = CollectedByPersonID,
                @PositiveAnimalsQuantity = PositiveAnimalsQty,
                @SexTypeID = AnimalSexID,
                @FarmID = FarmID,
                @FarmMasterID = FarmMasterID,
                @DiseaseID = DiseaseID,
                @SampleTypeID = SampleTypeID,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @AggregateSummaryInfoTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VCT_MONITORING_SESSION_SUMMARY_SET @MonitoringSessionSummaryID OUTPUT,
                                                                @MonitoringSessionID,
                                                                @FarmID,
                                                                @SpeciesID,
                                                                @SexTypeID,
                                                                @SampledAnimalsQuantity,
                                                                @SamplesQuantity,
                                                                @CollectionDate,
                                                                @PositiveAnimalsQuantity,
                                                                @RowStatus,
                                                                @DiseaseID,
                                                                @SampleTypeID,
                                                                @RowAction,
                                                                @AuditUserName;

            UPDATE @AggregateSummaryDiseasesTemp
            SET MonitoringSessionSummaryID = @MonitoringSessionSummaryID
            WHERE MonitoringSessionSummaryID = @RowID

            DELETE FROM @AggregateSummaryInfoTemp
            WHERE MonitoringSessionSummaryID = @RowID;

            PRINT @RowID
        END;

        WHILE EXISTS (SELECT * FROM @AggregateSummaryDiseasesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionSummaryID,
                @MonitoringSessionSummaryID = MonitoringSessionSummaryID,
                @DiseaseID = DiseaseID,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @AggregateSummaryDiseasesTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VCT_MONITORING_SESSION_SUMMARY_DIAGNOSIS_SET @MonitoringSessionSummaryID,
                                                                          @RowStatus,
                                                                          @DiseaseID,
                                                                          @RowAction,
                                                                          @AuditUserName;


            DELETE FROM @AggregateSummaryDiseasesTemp
            WHERE @MonitoringSessionSummaryID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                            @EventTypeId,
                                            @EventUserId,
                                            @EventObjectId,
                                            @EventDiseaseId,
                                            @EventSiteId,
                                            @EventInformationString,
                                            @EventLoginSiteId,
                                            @EventLocationId,
                                            @AuditUserName;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        IF @@TRANCOUNT > 0
            COMMIT TRANSACTION;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @MonitoringSessionID SessionKey,
               @SessionID SessionID;
    END TRY
    BEGIN CATCH
        IF @@Trancount > 0
            ROLLBACK TRANSACTION;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_DataAuditEvent_SET]...';


GO
-- =============================================
-- Author:		Steven Verner
-- Create date: 02/28/2022
-- Description:	
-- Create an entry into the tauDataAuditDetailCreate table if one doesn't exist or updates an audit 
-- event in the tauDataAuditDetailUpdate table.
-- =============================================
ALTER PROCEDURE [dbo].[USP_GBL_DataAuditEvent_SET]
	-- Add the parameters for the stored procedure here
	 @userName nvarchar(2576)
	,@JSONUpdates NVARCHAR(MAX)
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @idfDataAuditEvent BIGINT 
	DECLARE @returnMsg	VARCHAR(MAX) = 'SUCCESS';
	DECLARE @returnCode	BIGINT = 0;
	DECLARE @idfUserID BIGINT
	DECLARE @idfSiteID BIGINT 
	DECLARE @strValue SQL_VARIANT
	DECLARE @strOldValue SQL_VARIANT
	DECLARE @ID INT 
	DECLARE @max INT
	DECLARE @idfsObjectType BIGINT
	DECLARE @idfsDataAuditEventType BIGINT
	DECLARE @idfObject BIGINT
	DECLARE @idfObjectTable BIGINT
	DECLARE @idfColumn BIGINT


	DECLARE @Input TABLE( 
		 ID INT IDENTITY(1,1)
		,idfsObjectType BIGINT	
		,idfsDataAuditEventType BIGINT
		,idfsObjectTable BIGINT
		,idfColumn BIGINT
		,idfObject BIGINT
		,idfObjectDetail BIGINT
		,strValue nvarchar(4000))

	BEGIN TRY

		SELECT @idfUserID = a.idfUserId, @idfSiteID = lcc.idfsSite --, @event = lcc.idfDataAuditEvent
		FROM aspnetusers a 
		LEFT JOIN tstLocalConnectionContext lcc ON lcc.idfUserID = a.idfUserID
		WHERE a.username = @username

		-- If the json object is null, there's nothing to do...
		IF(@JSONUpdates IS NULL ) RETURN 0

		-- Get the current event id for this user from the local context table...
		EXEC USSP_GBL_DataAuditEvent_GET @idfUserID, @idfDataAuditEvent OUTPUT

		-- insert json
		INSERT INTO @input
		SELECT idfsObjectType, idfEventType, idfsObjectTable,idfColumn,idfObject,idfObjectDetail, AuditValue
		FROM OPENJSON(@JSONUpdates)
		WITH(
			idfsObjectType BIGINT,
			idfEventType BIGINT,
			idfsObjectTable BIGINT,
			idfColumn BIGINT,
			idfObject BIGINT,
			idfObjectDetail BIGINT,
			AuditValue NVARCHAR(4000) )
		
		SET @ID = 1	
		SELECT @Max = COUNT(*) FROM @Input

		WHILE ( @ID <= @Max )
		BEGIN
			SELECT 
				 @idfsObjectType = idfsObjectType
				,@idfsDataAuditEventType = idfsDataAuditEventType
				,@idfObject = idfObject
				,@idfObjectTable = idfsObjectTable
				,@strValue = strValue
				,@idfColumn  = idfColumn
			FROM @Input
			WHERE ID =@ID
			
				-- Create the audit create record if it isn't already there...
				IF( NOT EXISTS(
					SELECT idfDataAuditEvent 
					FROM tauDataAuditDetailCreate ac
					WHERE ac.idfDataAuditEvent = @idfDataAuditEvent AND ac.idfObjectTable = @idfObjectTable AND ac.idfObject = @idfObject))

					INSERT INTO dbo.tauDataAuditDetailCreate( idfDataAuditEvent, idfObjectTable, idfObject)
					VALUES( @idfDataAuditEvent, @idfObjectTable, @idfObject )
		
				-- Old value...
				SELECT TOP 1 @strOldValue = strNewValue
				FROM tauDataAuditDetailUpdate 
				WHERE idfObjectTable = @idfObjectTable AND idfObject = @idfObject AND IdfColumn = @idfColumn
				ORDER BY AuditCreateDTM DESC

				-- Create the update record...
				INSERT INTO tauDataAuditDetailUpdate(idfDataAuditEvent,idfObjectTable, idfColumn,idfObject,strOldValue, strNewValue )
				VALUES(@idfDataAuditEvent,@idfObjectTable, @idfColumn, @idfObject, @strOldValue, @strValue)

			SELECT @ID = @ID+1

		END

		SELECT @returnCode 'ReturnCode', @returnMsg 'ReturnMessage';
	END TRY
	BEGIN CATCH
		SET @returnCode = ERROR_NUMBER()
		SET @returnMsg = 
		'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) 
		+ ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY())
		+ ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE())
		+ ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '')
		+ ' ErrorLine: ' +  CONVERT(VARCHAR, ISNULL(ERROR_LINE(), ''))
		+ ' ErrorMessage: '+ ERROR_MESSAGE()

		SELECT @returnCode 'ReturnCode', @returnMsg 'ReturnMessage'
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_DataAuditEvent_Update]...';


GO
-- =============================================
-- Author:		Steven Verner
-- Create date: 02/28/2022
-- Description:	Inserts update events in the tauDataAuditDetailUpdate table.
-- =============================================
ALTER PROCEDURE USP_GBL_DataAuditEvent_Update
	-- Add the parameters for the stored procedure here
	 @idfUserID BIGINT
	,@JSONUpdates NVARCHAR(MAX)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @returnMsg					VARCHAR(MAX) = 'SUCCESS';
	DECLARE @returnCode					BIGINT = 0;
	DECLARE @event BIGINT 

	BEGIN TRY
		-- If the json object is null, there's nothing to do...
		IF(@JSONUpdates IS NULL ) RETURN 0

		-- Get the current event id for this user from the local context table...
		EXEC USSP_GBL_DataAuditEvent_GET @idfUserID, @event OUTPUT
	
		-- insert the update records to the data audit update table...
		INSERT INTO tauDataAuditDetailUpdate(idfDataAuditEvent,idfObjectTable, idfColumn,idfObject,idfObjectDetail, strNewValue )
		SELECT @event, idfObjectTable,idfColumn,idfObject,idfObjectDetail, strValue
		FROM OPENJSON(@JSONUpdates)
		WITH(
			idfObjectTable BIGINT,
			idfColumn BIGINT,
			idfObject BIGINT,
			idfObjectDetail BIGINT,
			strValue NVARCHAR(4000) )

		SELECT @returnCode 'ReturnCode', @returnMsg 'ReturnMessage';
	END TRY
	BEGIN CATCH
		SET @returnCode = ERROR_NUMBER()
		SET @returnMsg = 
		'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) 
		+ ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY())
		+ ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE())
		+ ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '')
		+ ' ErrorLine: ' +  CONVERT(VARCHAR, ISNULL(ERROR_LINE(), ''))
		+ ' ErrorMessage: '+ ERROR_MESSAGE()

		SELECT @returnCode 'ReturnCode', @returnMsg 'ReturnMessage'
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USSP_OMM_HUMAN_SAMPLES_SET]...';


GO
--******************************************************************************************************************************
-- Name 				: USSP_OMM_HUMAN_SAMPLES_SET
-- Description			: add update delete Human Disease Report Samples
--          
-- Author               : JWJ
-- Revision History
--	Name			 Date		 Change Detail
--	--------------	 ----------	 -----------------------------------------------------------------------------------------------
--	Doug Albanese	 07/09/2019	 Created
--	Doug Albanese	 04/27/2022	 Refactored to include relative fields only
--	Doug Albanese	 10/04/2022	 Made corrections for RowAction to use the new numbering system
-- Doug Albanese	 10/25/2022	 Assignment of idfMaterialTemp was corrected to use SampleID
--******************************************************************************************************************************

ALTER PROCEDURE [dbo].[USSP_OMM_HUMAN_SAMPLES_SET]
	@idfHumanActual					BIGINT,
	@idfHumanCase					BIGINT,
	@SamplesParameters				NVARCHAR(MAX) = NULL,
	@TestsParameters				NVARCHAR(MAX) = NULL,
	@idfsFinalDiagnosis				BIGINT = NULL,
	@User							NVARCHAR(100) = NULL
AS
Begin
	SET NOCOUNT ON;
	
	DECLARE @idfMaterialTemp		BIGINT = NULL /*Temporary transfer when the insert occurs so that NEW tests are updated with the correct id*/

	/*This section is a copy from the USSP_OMM_HUMAN_TESTS_SET so that the idfMaterial, when created as a new ID, can be tied to the tests associated with it.*/
	DECLARE
		@idfHuman				BIGINT = NULL,
		@idfTesting				BIGINT = NULL,			--(Test Identity), tlbTesting: idfTesting
		@idfTestValidation		BIGINT = NULL,
		@idfMaterial			BIGINT = NULL,			--(Sample Identity), tlbMaterial: idfMaterial			
		@idfsSampleType			BIGINT = NULL,			--"Sample Type", tlbMaterial: idfsSampleType
		@strFieldBarcode		NVARCHAR(200) = NULL,	--"Field Sample ID", tlbMaterial: strFieldBarcode
		@strBarcode				NVARCHAR(200) = NULL,	--"Lab Sample ID", tlbMaterial: strBarCode
		@idfsTestName			BIGINT = NULL,			--"Test Name", tlbTesting: idfsTestName
		@idfsTestResult			BIGINT = NULL,			--"Test Result", tlbTesting: idfsTestResult
		@idfsTestStatus			BIGINT = NULL,			--"Test Status", tlbTesting: idfsTestStatus
		@datConcludedDate		DATETIME2 = NULL,		--"Test Name", tlbTesting: idfsTestName
		@idfsTestCategory		BIGINT = NULL,			--"Test Category", tlbTesting: idfsTestName
		@idfsInterpretedStatus	BIGINT = NULL,			--"Rule In / Rule Out", tlbTestValidation: idfsInterpretedStatus
		@strInterpretedComment	NVARCHAR(200) = NULL,	--"Comments", tlbTestValidation: strInterpretedComment
		@datInterpretationDate	DATETIME2 = NULL,		--"Date Interpreted", tlbTestValidation: datInterpretationDate
		@idfInterpretedByPerson	BIGINT = NULL,			--"Interpreted By", tlbTestValidation: idfInterpretedByPerson
		@blnValidateStatus		INT = NULL,				--"Validated (Y/N)", tlbTestValidation: blnValidateStatus
		@strValidateComment		NVARCHAR(200) = NULL,	--"Comments", tlbTestValidation: strValidateComment
		@datValidationDate		DATETIME2 = NULL,		--"Date Validated", tlbTestValidation: datValidationDate
		@idfValidatedByPerson	BIGINT = NULL,			--"Validated By", tlbTestValidation: idfValidatedByPerson
		@RowAction				INT = NULL,				--(Row Action), Designation for record manipulation... Delete, Read Only, Insert
		@intRowStatus			INT	= NULL				--(Row Status), Designation to indicate a deleted record (1 = Deleted, 0 = Active)

		SELECT
				TOP 1
				@idfHuman = idfHuman
		FROM
				tlbHuman
		WHERE
				idfHumanActual = @idfHumanActual
		ORDER BY 
				AuditCreateDTM DESC
		
		DECLARE  @TestsTemp TABLE (	
				TestID					BIGINT NULL, --
				SampleID				BIGINT NULL, --
				strFieldBarcode			NVARCHAR(200) NULL,
				strBarcode				NVARCHAR(200) NULL,
				TestNameTypeID			BIGINT NULL, --
				TestResultTypeID		BIGINT NULL, --
				TestStatusTypeID		BIGINT NULL,
				TestCategoryTypeID		BIGINT NULL,
				idfsInterpretedStatus	BIGINT NULL,
				strInterpretedComment	NVARCHAR(200) NULL,
				datInterpretationDate	DATETIME2 NULL,
				idfInterpretedByPerson	BIGINT NULL,
				blnValidateStatus		INT NULL,
				strValidateComment		NVARCHAR(200) NULL,
				datValidationDate		DATETIME2 NULL,
				idfValidatedByPerson	BIGINT NULL,
				RowAction				INT NULL
	)
	
	INSERT INTO	@TestsTemp 
	SELECT * FROM OPENJSON(@TestsParameters) 
			WITH (
				TestID					BIGINT, --
				SampleID				BIGINT, --
				strFieldBarcode			NVARCHAR(200),
				strBarcode				NVARCHAR(200),
				TestNameTypeID			BIGINT, --
				TestResultTypeID		BIGINT, --
				TestStatusTypeID		BIGINT, --
				TestCategoryTypeID		BIGINT,
				idfsInterpretedStatus	BIGINT,
				strInterpretedComment	NVARCHAR(200),
				datInterpretationDate	DATETIME2,
				idfInterpretedByPerson	BIGINT,
				blnValidateStatus		INT,
				strValidateComment		NVARCHAR(200),
				datValidationDate		DATETIME2,
				idfValidatedByPerson	BIGINT,
				RowAction				INT				
				);
   
	DECLARE
		@datFieldCollectionDate		DATETIME2 = NULL,
		@CollectedByOffice			NVARCHAR(200) = NULL,
		@idfFieldCollectedByOffice	BIGINT = NULL,
		@CollectedByPerson			NVARCHAR(200) = NULL,
		@idfFieldCollectedByPerson	BIGINT = NULL,
		@datFieldSentDate			DATETIME2 = NULL,
		@idfSendToOffice			BIGINT = NULL,
		@SentToOffice				NVARCHAR(200) = NULL,
		@strNote					NVARCHAR(500) = NULL
	
		SELECT
				TOP 1
				@idfHuman = idfHuman
		FROM
				tlbHuman
		WHERE
				idfHumanActual = @idfHumanActual
		ORDER BY 
				AuditCreateDTM DESC
		
	DECLARE  @SamplesTemp TABLE (	
			SampleID					BIGINT,
			SampleTypeID				BIGINT,
			EIDSSLocalOrFieldSampleID	NVARCHAR(200),
			CollectionDate				DATETIME2,
			CollectedByOrganizationID	BIGINT,
			CollectedByPersonID			BIGINT,
			SentDate					DATETIME2,
			SentToOrganizationID		BIGINT,
			Comments					NVARCHAR(500),
			RowStatus					INT,
			RowAction					INT			
	)
	
	INSERT INTO	@SamplesTemp 
	SELECT * FROM OPENJSON(@SamplesParameters) 
			WITH (
					SampleID					BIGINT,
					SampleTypeID				BIGINT,
					EIDSSLocalOrFieldSampleID	NVARCHAR(200),
					CollectionDate				DATETIME2,
					CollectedByOrganizationID	BIGINT,
					CollectedByPersonID			BIGINT,
					SentDate					DATETIME2,
					SentToOrganizationID		BIGINT,
					Comments					NVARCHAR(500),
					RowStatus					INT,
					RowAction					INT	
				);
	BEGIN TRY  
		WHILE EXISTS (SELECT * FROM @SamplesTemp)
			BEGIN
				SELECT TOP 1
					@idfMaterial = SampleID,
					@idfMaterialTemp = SampleID,
					@idfsSampleType = SampleTypeID,
					@strFieldBarcode = EIDSSLocalOrFieldSampleID,
					@datFieldCollectionDate = CollectionDate,
					@idfFieldCollectedByOffice = CollectedByOrganizationID,
					@idfFieldCollectedByPerson = CollectedByPersonID,
					@datFieldSentDate = SentDate,
					@idfSendToOffice = SentToOrganizationID,
					@strNote = Comments,
					@intRowStatus = RowStatus,
					@RowAction = RowAction					
				FROM @SamplesTemp

				--Because of different App-Side usage, the following will force the upcoming record existence test to abide by the negative number test
				IF @RowAction = 1 --INSERT
				  BEGIN
					 SET @idfMaterial = -1
				  END

				IF NOT EXISTS(SELECT TOP 1 idfMaterial FROM tlbMaterial WHERE idfMaterial = @idfMaterial)
					BEGIN
						EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbMaterial', @idfMaterial OUTPUT;

						/*Update any associated new Test with the  new Sample being inserted*/
						UPDATE @TestsTemp
						SET SampleID = @idfMaterial
						WHERE SampleID = @idfMaterialTemp

						INSERT INTO		dbo.tlbMaterial
						(						
							idfHumanCase,
							idfHuman,
							idfMaterial,
							idfsSampleType,
							strFieldBarcode,
							datFieldCollectionDate,
							idfFieldCollectedByOffice,
							idfFieldCollectedByPerson,
							datFieldSentDate,
							idfSendToOffice,
							strNote,
							intRowStatus,
							AuditCreateUser,
							AuditCreateDTM
						)
						VALUES
						(					
							@idfHumanCase,
							@idfHuman,
							@idfMaterial,
							@idfsSampleType,
							@strFieldBarcode,
							@datFieldCollectionDate,
							@idfFieldCollectedByOffice,
							@idfFieldCollectedByPerson,
							@datFieldSentDate,
							@idfSendToOffice,
							@strNote,
							@intRowStatus,
							@User,
							GETDATE()
						)
					END
				ELSE
					BEGIN
						IF @RowAction = 3 --DELETE
							BEGIN
								SET @intRowStatus = 1
							END
						ELSE
							BEGIN
								SET @intRowStatus = 0
							END

						UPDATE dbo.tlbMaterial
						SET 
							idfsSampleType = @idfsSampleType,
							strFieldBarcode = @strFieldBarcode,
							datFieldCollectionDate = @datFieldCollectionDate,
							idfFieldCollectedByOffice = @idfFieldCollectedByOffice,
							idfFieldCollectedByPerson = @idfFieldCollectedByPerson,
							datFieldSentDate = @datFieldSentDate,
							idfSendToOffice = @idfSendToOffice,
							strNote = @strNote,
							intRowStatus = @intRowStatus,
							AuditUpdateUser = @User,
							AuditUpdateDTM = GETDATE()
						WHERE	
							idfMaterial = @idfMaterial
					END
					
					SET ROWCOUNT 1						
					DELETE FROM @SamplesTemp
					SET ROWCOUNT 0
			END	

		SET @TestsParameters =
			(SELECT
				TestID,
				SampleID,
				strFieldBarcode,
				strBarcode,
				TestNameTypeID,
				TestResultTypeID,
				TestStatusTypeID,
				TestCategoryTypeID,
				idfsInterpretedStatus,
				strInterpretedComment,
				datInterpretationDate,
				idfInterpretedByPerson,
				blnValidateStatus,
				strValidateComment,
				datValidationDate,
				idfValidatedByPerson,
				RowAction
			FROM
				@TestsTemp
			FOR JSON PATH)

		If @TestsParameters IS NOT NULL
			EXEC USSP_OMM_HUMAN_TESTS_SET @idfsFinalDiagnosis, @idfHumanActual, @idfHumanCase,@TestsParameters, @User = @User;

	END TRY
	BEGIN CATCH
		THROW;
		
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USSP_OMM_CONVERT_CONTACT_Set]...';


GO
-- ================================================================================================
-- Name: USSP_OMM_CONVERT_CONTACT_Set
-- Description: Inserts a new case for a contact being converted to a case.
--          
-- Revision History:
-- Name                    Date       Change Detail
-- ----------------------- ---------- ------------------------------------------------------------
-- Stephen Long            06/05/2022 Initial release
-- Stephen Long            10/25/2022 Added logic to convert veterinary contact to a veterinary 
--                                    case.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_OMM_CONVERT_CONTACT_Set]
(
    @OutbreakID BIGINT = NULL,
    @CaseContactID BIGINT, 
    @HumanMasterID BIGINT,
    @HumanID BIGINT, 
    @FarmMasterID BIGINT = NULL, 
    @GeolocationID BIGINT = NULL,
    @LocationID BIGINT = NULL,
    @Street NVARCHAR(200) = NULL,
    @Apartment NVARCHAR(200) = NULL,
    @Building NVARCHAR(200) = NULL,
    @House NVARCHAR(200) = NULL,
    @PostalCode NVARCHAR(200) = NULL,
    @Latitude FLOAT = NULL,
    @Longitude FLOAT = NULL,
    @Elevation FLOAT = NULL,
    @CaseStatusTypeID BIGINT = NULL,
    @CaseClassificationTypeID BIGINT = NULL,
    @AuditUserName NVARCHAR(100) = NULL
)
AS
BEGIN
    DECLARE @ReturnCode INT = 0,
            @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
            @CaseID BIGINT = NULL,
            @EIDSSCaseID NVARCHAR(50) = NULL,
            @DiseaseReportID BIGINT = NULL;

    BEGIN TRY
        IF @FarmMasterID IS NULL
        BEGIN
            EXEC dbo.USP_GBL_NEXTKEYID_GET 'OutbreakCaseReport', @CaseID OUTPUT;

            EXEC dbo.USP_GBL_NextNumber_GET 'Human Outbreak Case',
                                            @EIDSSCaseID OUTPUT,
                                            NULL;

            EXEC dbo.USP_OMM_HUMAN_DISEASE_SET @DiseaseReportID OUTPUT,
                                               @idfHuman = @HumanID, 
                                               @strHumanCaseId = @EIDSSCaseID,
                                               @OutbreakCaseReportUID = @CaseID,
                                               @idfHumanActual = @HumanMasterID,
                                               @idfsFinalDiagnosis = NULL,
                                               @datDateOfDiagnosis = NULL,
                                               @datNotificationDate = NULL,
                                               @idfsFinalState = NULL,
                                               @idfSentByOffice = NULL,
                                               @idfSentByPerson = NULL,
                                               @idfReceivedByOffice = NULL,
                                               @idfReceivedByPerson = NULL,
                                               @idfHospital = NULL,
                                               @datOnSetDate = NULL,
                                               @idfsYNHospitalization = NULL,
                                               @datHospitalizationDate = NULL,
                                               @datDischargeDate = NULL,
                                               @strHospitalName = NULL,
                                               @idfsYNAntimicrobialTherapy = NULL,
                                               @strClinicalNotes = NULL,
                                               @strNote = NULL,
                                               @idfsYNSpecIFicVaccinationAdministered = NULL,
                                               @idfInvestigatedByOffice = NULL,
                                               @idfInvestigatedByPerson = NULL,
                                               @StartDateofInvestigation = NULL,
                                               @idfOutbreak = @OutbreakID,
                                               @CaseGeoLocationID = @GeolocationID,
                                               @CaseidfsLocation = @LocationID,
                                               @CasestrStreetName = @Street,
                                               @CasestrApartment = @Apartment,
                                               @CasestrBuilding = @Building,
                                               @CasestrHouse = @House,
                                               @CaseidfsPostalCode = @PostalCode,
                                               @CasestrLatitude = @Latitude,
                                               @CasestrLongitude = @Longitude,
                                               @CasestrElevation = @Elevation,
                                               @SamplesParameters = NULL,
                                               @idfsYNSpecimenCollected = NULL,
                                               @idfsYNTestsConducted = NULL,
                                               @TestsParameters = NULL,
                                               @AntiviralTherapiesParameters = NULL,
                                               @VaccinationsParameters = NULL,
                                               @CaseMonitoringsParameters = NULL,
                                               @User = @AuditUserName,
                                               @idfEpiObservation = NULL,
                                               @idfCSObservation = NULL;

            INSERT INTO dbo.OutbreakCaseReport
            (
                OutBreakCaseReportUID,
                idfOutbreak,
                strOutbreakCaseID,
                idfHumanCase,
                idfVetCase,
                OutbreakCaseStatusID,
                OutbreakCaseClassificationID,
                IsPrimaryCaseFlag,
                intRowStatus,
                AuditCreateUser,
                AuditCreateDTM,
                AuditUpdateUser,
                AuditUpdateDTM
            )
            VALUES
            (@CaseID,
             @OutbreakID,
             @EIDSSCaseID,
             @DiseaseReportID,
             NULL,
             @CaseStatusTypeID,
             @CaseClassificationTypeID,
             0  ,
             0  ,
             @AuditUserName,
             GETDATE(),
             NULL,
             NULL
            );
        END
        ELSE
        BEGIN
            DECLARE @SiteID BIGINT = (SELECT idfsSite FROM dbo.tlbOutbreak WHERE idfOutbreak = @OutbreakID);
            DECLARE @DiseaseID BIGINT = (SELECT idfsDiagnosisOrDiagnosisGroup FROM dbo.tlbOutbreak WHERE idfOutbreak = @OutbreakID);
            DECLARE @ReportTypeID BIGINT = (SELECT vc.idfsCaseType FROM dbo.OutbreakCaseContact occ
                INNER JOIN dbo.OutbreakCaseReport ocr 
                    ON ocr.OutBreakCaseReportUID = occ.OutBreakCaseReportUID 
                INNER JOIN dbo.tlbVetCase vc 
                    ON vc.idfVetCase = ocr.idfVetCase 
                WHERE occ.OutbreakCaseContactUID = @CaseContactID);
            DECLARE @EnteredDate DATETIME = GETDATE();

            EXEC dbo.USP_VET_DISEASE_REPORT_SET @DiseaseReportID = -1,
                                                @EIDSSReportID = NULL,
                                                @FarmID = NULL,
                                                @FarmMasterID = @FarmMasterID,
                                                @FarmOwnerID = NULL,
                                                @MonitoringSessionID = NULL,
                                                @OutbreakID = @OutbreakID,
                                                @RelatedToDiseaseReportID = NULL,
                                                @EIDSSFieldAccessionID = NULL,
                                                @DiseaseID = @DiseaseID,
                                                @EnteredByPersonID = NULL,
                                                @ReportedByOrganizationID = NULL,
                                                @ReportedByPersonID = NULL,
                                                @InvestigatedByOrganizationID = NULL,
                                                @InvestigatedByPersonID = NULL,
                                                @ReceivedByOrganizationID = NULL,
                                                @ReceivedByPersonID = NULL,
                                                @SiteID = @SiteID,
                                                @DiagnosisDate = NULL,
                                                @EnteredDate = @EnteredDate, 
                                                @ReportDate = NULL,
                                                @AssignedDate = NULL,
                                                @InvestigationDate = NULL,
                                                @RowStatus = 0,
                                                @ReportTypeID = NULL,
                                                @ClassificationTypeID = NULL,
                                                @StatusTypeID = 10109001, -- In Progress
                                                @ReportCategoryTypeID = @ReportTypeID, -- Avian or Livestock
                                                @FarmTotalAnimalQuantity = NULL,
                                                @FarmSickAnimalQuantity = NULL,
                                                @FarmDeadAnimalQuantity = NULL,
                                                @FarmLatitude = NULL,
                                                @FarmLongitude = NULL,
                                                @FarmEpidemiologicalObservationID = NULL,
                                                @ControlMeasuresObservationID = NULL,
                                                @TestsConductedIndicator = NULL,
                                                @AuditUserName = @AuditUserName,
                                                @FlocksOrHerds = NULL,
                                                @Species = NULL,
                                                @Animals = NULL,
                                                @Vaccinations = NULL,
                                                @Samples = NULL,
                                                @PensideTests = NULL,
                                                @LaboratoryTests = NULL,
                                                @LaboratoryTestInterpretations = NULL,
                                                @CaseLogs = NULL,
                                                @ClinicalInformation = NULL,
                                                @Contacts = NULL,
                                                @CaseMonitorings = NULL,
                                                @Events = NULL,
                                                @UserID = 0,
                                                @LinkLocalOrFieldSampleIDToReportID = 0,
                                                @OutbreakCaseIndicator = 1,
                                                @OutbreakCaseReportUID = NULL,
                                                @OutbreakCaseStatusTypeID = NULL,
                                                @OutbreakCaseQuestionnaireObservationID = NULL,
                                                @PrimaryCaseIndicator = 0;
        END;

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_OMM_Case_Set]...';


GO
-- ================================================================================================
-- Name: [USP_OMM_Case_Set]
-- Description: Insert/Update for Outbreak Case
--          
-- Author: Doug Albanese
-- Revision History
--	Name			Date		Change Detail
--  Doug Albanese	5/21/2020	Moved the Case Monitoring SP call to this SP from USP_OMM_HUMAN_DISEASE_SET
--	Doug Albanese	10/12/2020	Corrected Audit information
--	Doug Albanese	10/01/2021	Cleaned up and prepped for EF
--	Doug Albanese	04/19/2022	Refactored to use location hierarchy
--	Doug Albanese	04/21/2022	Formatted and some refactoring
--	Doug Albanese	04/27/2022	Refactored paramters to eliminate unused 
--	Doug Albanese	04/28/2022	Further Clean up to align with json array detection
--	Doug Albanese	04/30/2022	Added idfHumanCase to contacts USSP
--	Doug Albanese	05/02/2022	Refactored Antimicrobial
--	Doug Albanese	05/06/2022	Corrected "Start Date of Investigation"...wrong parameter used previously
--	Doug Albanese	05/06/2022	Corrected Street/Postalcode data types
--  Stephen Long    05/21/2022  Fix to idfsSite on call to USP_ADMIN_FF_COPY_OBSERVATION.
--                              Added begin transaction and commit transaction.
--	Doug Albanese	05/23/2022	Supression on USSP_OMM_CONTACT_SET was nested too deep. Using Functional Call only to get around
--	Doug Albanese	06/01/2022	Removal of transaction block to allow nested calls to function properly.
--	Doug Albanese	07/01/2022	Changes to fix the Copy process of an observation and flex form template for use within an outbreak case
-- Stephen Long     07/18/2022  Added site alert logic.
-- Doug Albanese  09/22/2022  Removed supression on USP_ADMIN_FF_Copy_Observation
-- Doug Albanese  10/19/2022  Corrected the "@StartDateofInvestigation" to have the right parameter passed.
-- Doug Albanese  10/25/2022  Put the Case Questionnnaire in the right location on the Outbreak Case Report side.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_OMM_Case_Set]
(
    @LangID NVARCHAR(50),
    @intRowStatus INT = 0,
    @User NVARCHAR(100) = NULL,

    --Outbreak Case Details
    @OutbreakCaseReportUID BIGINT = -1,
    @idfOutbreak BIGINT = NULL,
    @idfHumanCase BIGINT = -1,
    @idfVetCase BIGINT = NULL,
    @OutbreakCaseObservationID BIGINT = NULL,

    --Human Disease related items for creation
    @idfHumanActual BIGINT = -1,
    @idfsDiagnosisOrDiagnosisGroup BIGINT = -1,

    --Notification
    @datNotificationDate DATETIME = NULL,
    @idfSentByOffice BIGINT = NULL,
    @idfSentByPerson BIGINT = NULL,
    @idfReceivedByOffice BIGINT = NULL,
    @idfReceivedByPerson BIGINT = NULL,

    --Case Location
    @CaseGeoLocationID BIGINT = NULL,
    @CaseidfsLocation BIGINT = NULL,
    @CasestrStreetName NVARCHAR(200) = NULL,
    @CasestrApartment NVARCHAR(200) = NULL,
    @CasestrBuilding NVARCHAR(200) = NULL,
    @CasestrHouse NVARCHAR(200) = NULL,
    @CaseidfsPostalCode NVARCHAR(200) = NULL,
    @CasestrLatitude FLOAT = NULL,
    @CasestrLongitude FLOAT = NULL,
    @CasestrElevation FLOAT = NULL,

    --Clinical Information
    @CaseStatusID BIGINT = NULL,
    @datOnSetDate DATETIME = NULL,
    @datFinalDiagnosisDate DATETIME = NULL,
    @idfHospital BIGINT = NULL,
    @datHospitalizationDate DATETIME = NULL,
    @datDischargeDate DATETIME = NULL,
    @Antimicrobials NVARCHAR(MAX) = NULL,
    @vaccinations NVARCHAR(MAX) = NULL,
    @strClinicalNotes NVARCHAR(500) = NULL,
    @idfsYNHospitalization BIGINT = NULL,
    @idfsYNAntimicrobialTherapy BIGINT = NULL,
    @idfsYNSpecIFicVaccinationAdministered BIGINT = NULL,
    @StartDateofInvestigation DATETIME = NULL,
    @idfCSObservation BIGINT = NULL,

    --Outbreak Investigation
    @OutbreakCaseClassificationID BIGINT = NULL,
    @idfInvestigatedByOffice BIGINT = NULL,
    @idfInvestigatedByPerson BIGINT = NULL,
    @datInvestigationStartDate DATETIME = NULL,
    @IsPrimaryCaseFlag NVARCHAR(1) = NULL,
    @strNote NVARCHAR(500) = NULL,
    @idfEpiObservation BIGINT = NULL,

    --Case Monitoring
    @CaseMonitorings NVARCHAR(MAX) = NULL,

    --Contacts
    @CaseContacts NVARCHAR(MAX) = NULL,

    --Samples
    @idfsYNSpecimenCollected BIGINT = NULL,
    @CaseSamples NVARCHAR(MAX) = NULL,

    --Tests
    @idfsYNTestsConducted BIGINT = NULL,
    @CaseTests NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL
)
AS
BEGIN
    DECLARE @returnCode INT = 0
    DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS'
    DECLARE @SiteID BIGINT = (
                                 SELECT idfsSite FROM dbo.tlbOutbreak WHERE idfOutbreak = @idfOutbreak
                             )
    DECLARE @outbreakLocation BIGINT = NULL
    DECLARE @strHospitalizationPlace NVARCHAR(200)
    DECLARE @idfHuman BIGINT = NULL
    DECLARE @strHumanCaseId NVARCHAR(200)
    DECLARE @idfsFinalState BIGINT = NULL

    DECLARE @idfContactCasePerson BIGINT
    DECLARE @ContactRelationshipTypeID BIGINT
    DECLARE @DateOfLastContact DATETIME
    DECLARE @datDateOfLastContact DATETIME2
    DECLARE @PlaceOfLastContact NVARCHAR(200)
    DECLARE @ContactStatusID BIGINT
    DECLARE @DateOfLastContact2 VARCHAR(10)
    DECLARE @idfsPersonContactType BIGINT
    DECLARE @idfContactedCasePerson BIGINT
    DECLARE @SQL VARCHAR(MAX)
    DECLARE @RowID BIGINT = NULL
    DECLARE @OutbreakCaseContactUID BIGINT = NULL
    DECLARE @ContactComments NVARCHAR(200) = NULL
    DECLARE @ContactTypeID BIGINT = NULL

    DECLARE @PrepCollections INT = 0
    DECLARE @ExecuteHumanSP INT = 0
    DECLARE @CreateOutbreakCase INT = 0
    DECLARE @ExecuteVetSP INT = 0
    DECLARE @HumanSamplesTemp NVARCHAR(MAX) = NULL
    DECLARE @HumanContactsTemp NVARCHAR(MAX) = NULL

    DECLARE @idfsFormTemplate BIGINT
    DECLARE @idfsFormTemplateNew BIGINT

    DECLARE @strCaseID NVARCHAR(50) = NULL
    DECLARE @idfObservation BIGINT = NULL

    DECLARE @EventId BIGINT,
            @EventTypeId BIGINT = NULL,
            @EventSiteId BIGINT = NULL,
            @EventObjectId BIGINT = NULL,
            @EventUserId BIGINT = NULL,
            @EventDiseaseId BIGINT = NULL,
            @EventLocationId BIGINT = NULL,
            @EventInformationString NVARCHAR(MAX) = NULL,
            @EventLoginSiteId BIGINT = NULL;

    DECLARE @EventsTemp TABLE
    (
        EventId BIGINT NOT NULL,
        EventTypeId BIGINT NULL,
        UserId BIGINT NULL,
        SiteId BIGINT NULL,
        LoginSiteId BIGINT NULL,
        ObjectId BIGINT NULL,
        DiseaseId BIGINT NULL,
        LocationId BIGINT NULL,
        InformationString NVARCHAR(MAX) NULL
    );

    SET NOCOUNT ON

    BEGIN TRY
        --BEGIN TRANSACTION;

        if (@idfCSObservation = 0)
            SET @idfCSObservation = NULL

        --Because of the JSON Table data being passed, the value of NULL is converted to a string. In these cases, they must be set to a True NULL
        IF (@Antimicrobials = 'NULL' OR @Antimicrobials = '[]')
            SET @Antimicrobials = NULL
        IF (@vaccinations = 'NULL' OR @vaccinations = '[]')
            SET @vaccinations = NULL
        IF (@CaseMonitorings = 'NULL' OR @CaseMonitorings = '[]')
            SET @CaseMonitorings = NULL
        IF (@CaseContacts = 'NULL' OR @CaseContacts = '[]')
            SET @CaseContacts = NULL
        IF (@CaseSamples = 'NULL' OR @CaseSamples = '[]')
            SET @CaseSamples = NULL
        IF (@CaseTests = 'NULL' OR @CaseTests = '[]')
            SET @CaseTests = NULL

        --Table calls for NCHAR, but we are going to need an integer to convert into boolean
        IF (@IsPrimaryCaseFlag = 't')
        BEGIN
            SET @IsPrimaryCaseFlag = 1
        END
        ELSE
        BEGIN
            SET @IsPrimaryCaseFlag = 0
        END

        Declare @SupressSelect table
        (
            retrunCode int,
            returnMsg varchar(200)
        )

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        --This condition was added later, after I found out that I created a bad architecture
        IF @idfVetCase IS NOT NULL
        BEGIN
            SET @ExecuteVetSP = 1

            IF EXISTS
            (
                SELECT OutBreakCaseReportUID
                FROM dbo.OutbreakCaseReport
                WHERE OutBreakCaseReportUID = @OutBreakCaseReportUID
            )
            BEGIN
                --Case is already created
                --This can only be an update of information across the outbreak and human case elements.
                UPDATE dbo.OutbreakCaseReport
                SET idfOutbreak = @idfOutbreak,
                    OutbreakCaseObservationID = @OutbreakCaseObservationID,
                    OutbreakCaseStatusID = @CaseStatusID,
                    OutbreakCaseClassificationID = @OutbreakCaseClassificationID,
                    IsPrimaryCaseFlag = @IsPrimaryCaseFlag,
                    intRowStatus = @intRowStatus,
                    AuditUpdateUser = @User,
                    AuditUpdateDTM = GETDATE()
                WHERE OutBreakCaseReportUID = @OutBreakCaseReportUID

            END
            ELSE
            BEGIN
                --At this point, the outbreak case doesn't exist.
                --This means, it could be an import or a creation from the outbreak side.
                --regardless of this situation, we need to get an idea for the Outbreak case being created.
                INSERT INTO @SupressSelect
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'OutbreakCaseReport',
                                               @OutBreakCaseReportUID OUTPUT;

                DECLARE @strOutbreakCaseID NVARCHAR(200)

                --If a human case id was passed, we are performing an import
                IF @idfVetCase IS NOT NULL
                   AND @idfVetCase <> -1
                BEGIN
                    --To keep duplicate imports from occuring, check to make sure a record doesn't already exist within the case listing of the outbreak session
                    IF NOT EXISTS
                    (
                        SELECT OutBreakCaseReportUID
                        FROM dbo.OutbreakCaseReport
                        WHERE idfOutbreak = @idfOutbreak
                              AND idfVetCase = @idfVetCase
                              AND intRowStatus = 0
                    )
                    BEGIN
                        INSERT INTO @SupressSelect
                        EXEC dbo.USP_GBL_NextNumber_GET 'Vet Outbreak Case',
                                                        @strOutbreakCaseID OUTPUT,
                                                        NULL;

                        INSERT INTO dbo.OutbreakCaseReport
                        (
                            OutbreakCaseReportUID,
                            idfOutbreak,
                            strOutbreakCaseID,
                            --idfHumanCase,
                            idfVetCase,
                            OutbreakCaseObservationId,
                            OutbreakCaseStatusId,
                            OutbreakCaseClassificationID,
                            isPrimaryCaseFlag,
                            introwStatus,
                            AuditCreateUser,
                            AuditCreateDTM,
                            AuditUpdateUser,
                            AuditUpdateDTM
                        )
                        VALUES
                        (   @OutBreakCaseReportUID,
                            @idfOutbreak,
                            @strOutbreakCaseID,
                            --NULL,
                            @idfVetCase,
                            @idfEpiObservation,
                            @CaseStatusID,
                            @OutbreakCaseClassificationID,
                            @IsPrimaryCaseFlag,
                            0,
                            @User,
                            GETDATE(),
                            NULL,
                            NULL
                        )
                    END
                    --Tie the outbreak case and the human case together, using the outbreak session id (idfOutbreak)
                    --This will complete the import process, as all information pertain to the case will now be
                    --joined in a "getdetails", when retrieved on the outbreak side.
                    UPDATE dbo.tlbVetCase
                    SET idfOutbreak = @idfOutbreak
                    WHERE idfVetCase = @idfVetCase

                    SELECT @idfObservation = idfObservation
                    FROM dbo.tlbVetCase
                    WHERE idfVetCase = @idfVetCase

                    --INSERT INTO @SupressSelect
                    EXEC dbo.USP_ADMIN_FF_Copy_Observation @idfObservation = @idfObservation,
                                                           @User = @User,
                                                           @idfsSite = @SiteID
                    UPDATE dbo.OutbreakCaseReport
                    SET OutbreakCaseObservationID = @idfObservation
                    WHERE OutBreakCaseReportUID = @OutBreakCaseReportUID
                END
            END
        END
        ELSE
        BEGIN
            IF EXISTS
            (
                SELECT OutBreakCaseReportUID
                FROM dbo.OutbreakCaseReport
                WHERE OutBreakCaseReportUID = @OutBreakCaseReportUID
            )
            BEGIN
                --Case is already created
                --This can only be an update of information across the outbreak and human case elements.
                UPDATE dbo.OutbreakCaseReport
                SET idfOutbreak = @idfOutbreak,
                    OutbreakCaseObservationID = @OutbreakCaseObservationID,
                    OutbreakCaseStatusID = @CaseStatusID,
                    OutbreakCaseClassificationID = @OutbreakCaseClassificationID,
                    IsPrimaryCaseFlag = @IsPrimaryCaseFlag,
                    intRowStatus = @intRowStatus,
                    AuditUpdateUser = @User,
                    AuditUpdateDTM = GETDATE()
                WHERE OutBreakCaseReportUID = @OutBreakCaseReportUID

                SET @PrepCollections = 1
                SET @ExecuteHumanSP = 1
            END
            ELSE
            BEGIN
                --At this point, the outbreak case doesn't exist.
                --This means, it could be an import or a creation from the outbreak side.

                --regardless of this situation, we need to get an id for the Outbreak case being created.
                INSERT INTO @SupressSelect
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'OutbreakCaseReport',
                                               @OutBreakCaseReportUID OUTPUT;

                --If a human case id was passed, we are performing an import
                IF @idfHumanCase IS NOT NULL
                   AND @idfHumanCase <> -1
                BEGIN
                    --To keep duplicate imports from occuring, check to make sure a record doesn't already exist within the case listing of the outbreak session
                    IF NOT EXISTS
                    (
                        SELECT OutBreakCaseReportUID
                        FROM OutbreakCaseReport
                        WHERE idfOutbreak = @idfOutbreak
                              AND idfHumanCase = @idfHumanCase
                              AND intRowStatus = 0
                    )
                    BEGIN
                        --It doesn't exist, so we need to create a case "smart id", on the outbreak side, for the item being imported.
                        INSERT INTO @SupressSelect
                        EXEC dbo.USP_GBL_NextNumber_GET 'Human Outbreak Case',
                                                        @strOutbreakCaseID OUTPUT,
                                                        NULL;

                        --Generate a shell record in the case table to denote the item from the human case being imported
                        --Below is the minimal amount of fields needed to create the case. All other information will be entered
                        --during the editing phase
                        INSERT INTO dbo.OutbreakCaseReport
                        (
                            OutBreakCaseReportUID,
                            idfOutbreak,
                            strOutbreakCaseID,
                            idfHumanCase,
                            intRowStatus,
                            AuditCreateUser,
                            AuditCreateDTM,
                            AuditUpdateUser,
                            AuditUpdateDTM
                        )
                        VALUES
                        (@OutBreakCaseReportUID,
                         @idfOutbreak,
                         @strOutbreakCaseID,
                         @idfHumanCase,
                         0  ,
                         @User,
                         GETDATE(),
                         NULL,
                         NULL
                        )

                        /*Temp solution??? To tie in datFinalDiagnosisDate with datTentativeDiagnosisDate*/
                        UPDATE dbo.tlbHumanCase
                        SET datFinalDiagnosisDate = datTentativeDiagnosisDate,
                            AuditUpdateUser = @User
                        WHERE idfHumanCase = @idfHumanCase
                              AND datFinalDiagnosisDate IS NULL

                        UPDATE dbo.tlbHumanCase
                        SET idfOutbreak = @idfOutbreak,
                            AuditUpdateUser = @User
                        WHERE idfHumanCase = @idfHumanCase

                        SELECT @idfEPIObservation = idfEPIObservation,
                               @idfCSObservation = idfCSObservation
                        FROM dbo.tlbHumanCase
                        WHERE idfHumanCase = @idfHumanCase

                        IF COALESCE(@idfEpiObservation, 0) > 0
                        BEGIN
                            SELECT @idfsFormTemplate = idfsFormTemplate
                            FROM tlbObservation
                            WHERE idfObservation = @idfEPIObservation

                            EXEC dbo.USP_ADMIN_FF_Copy_Observation @idfObservation = @idfEPIObservation OUTPUT,
                                                                   @User = @User,
                                                                   @idfsSite = @SiteID

                            EXEC USP_OMM_FF_Copy_Template @LangId = @LangId,
                                                          @idfsFormTemplate = @idfsFormTemplate,
                                                          @User = @User,
                                                          @idfsSite = @SiteID,
                                                          @idfsNewFormType = 10034501

                            SELECT @idfsFormTemplateNew = idfsFormTemplate
                            FROM ffFormTemplate
                            WHERE AuditCreateUser = @User
                                  AND idfsFormType = 10034501
                                  AND idfsFormTemplate = @idfsFormTemplate

                            UPDATE tlbObservation
                            SET idfsFormTemplate = @idfsFormTemplateNew
                            WHERE idfObservation = @idfObservation
                                  AND idfsFormTemplate = @idfsFormTemplate
                        END

                        IF COALESCE(@idfCSObservation, 0) > 0
                        BEGIN
                            INSERT INTO @SupressSelect
                            EXEC dbo.USP_ADMIN_FF_Copy_Observation @idfObservation = @idfCSObservation,
                                                                   @User = @User,
                                                                   @idfsSite = @SiteID

                            UPDATE dbo.OutbreakCaseReport
                            SET OutbreakCaseObservationID = @idfCSObservation,
                                AuditUpdateUser = @User
                            WHERE OutBreakCaseReportUID = @OutBreakCaseReportUID
                        END
                    END
                END
                ELSE
                BEGIN
                    --At this point, the data being passed is only pertaining to the manual creation of
                    --a Human Case from the outbreak side.
                    SET @CreateOutbreakCase = 1
                    SET @PrepCollections = 1
                    SET @ExecuteHumanSP = 1

                END
            END
        END

		
        IF @ExecuteHumanSP = 1
        BEGIN
            INSERT INTO @SupressSelect
            EXEC dbo.USP_OMM_HUMAN_DISEASE_SET @idfHumanCase OUTPUT,
                                               @strHumanCaseId = @strHumanCaseId,
                                               @OutbreakCaseReportUID = @OutbreakCaseReportUID,
                                               @idfHumanActual = @idfHumanActual,
                                               @idfsFinalDiagnosis = @idfsDiagnosisOrDiagnosisGroup,
                                               @datDateOfDiagnosis = @datFinalDiagnosisDate,
                                               @datNotificationDate = @datNotificationDate,
                                               @idfsFinalState = @idfsFinalState,
                                               @idfSentByOffice = @idfSentByOffice,
                                               @idfSentByPerson = @idfSentByPerson,
                                               @idfReceivedByOffice = @idfReceivedByOffice,
                                               @idfReceivedByPerson = @idfReceivedByPerson,
                                               @idfHospital = @idfHospital,
                                               @datOnSetDate = @datOnSetDate,
                                               @idfsYNHospitalization = @idfsYNHospitalization,
                                               @datHospitalizationDate = @datHospitalizationDate,
                                               @datDischargeDate = @datDischargeDate,
                                               @strHospitalName = @strHospitalizationPlace,
                                               @idfsYNAntimicrobialTherapy = @idfsYNAntimicrobialTherapy,
                                               @strClinicalNotes = @strClinicalNotes,
                                               @strNote = @strNote,
                                               @idfsYNSpecIFicVaccinationAdministered = @idfsYNSpecIFicVaccinationAdministered,
                                               @idfInvestigatedByOffice = @idfInvestigatedByOffice,
                                               @idfInvestigatedByPerson = @idfInvestigatedByPerson,
                                               @StartDateofInvestigation = @StartDateofInvestigation,
                                               @idfOutbreak = @idfOutbreak,
                                               @CaseGeoLocationID = @CaseGeoLocationID,
                                               @CaseidfsLocation = @CaseidfsLocation,
                                               @CasestrStreetName = @CasestrStreetName,
                                               @CasestrApartment = @CasestrApartment,
                                               @CasestrBuilding = @CasestrBuilding,
                                               @CasestrHouse = @CasestrHouse,
                                               @CaseidfsPostalCode = @CaseidfsPostalCode,
                                               @CasestrLatitude = @CasestrLatitude,
                                               @CasestrLongitude = @CasestrLongitude,
                                               @CasestrElevation = @CasestrElevation,
                                               @SamplesParameters = @CaseSamples,
                                               @idfsYNSpecimenCollected = @idfsYNSpecimenCollected,
                                               @idfsYNTestsConducted = @idfsYNTestsConducted,
                                               @TestsParameters = @CaseTests,
                                               @AntiviralTherapiesParameters = @Antimicrobials,
                                               @VaccinationsParameters = @vaccinations,
                                               @CaseMonitoringsParameters = @CaseMonitorings,
                                               @User = @User,
                                               @idfEpiObservation = @idfEpiObservation,
                                               @idfCSObservation = @idfCSObservation

            INSERT INTO @SupressSelect
            EXEC dbo.USSP_OMM_CASE_MONITORING_SET @CaseMonitorings = @CaseMonitorings,
                                                  @HumanDiseaseReportID = @idfHumanCase,
                                                  @User = @User

            --Update the tblHumanCase with the Outbreak Id related by the import process.
            UPDATE tlbHumanCase
            SET idfOutbreak = @idfOutbreak,
                AuditUpdateUser = @User
            WHERE idfHumanCase = @idfHumanCase
        END

        IF @CreateOutbreakCase = 1
        BEGIN
            --Create the outbreak case, with full information
            INSERT INTO @SupressSelect
            EXEC dbo.USP_GBL_NextNumber_GET 'Human Outbreak Case',
                                            @strOutbreakCaseID OUTPUT,
                                            NULL;

            INSERT INTO dbo.OutbreakCaseReport
            (
                OutBreakCaseReportUID,
                idfOutbreak,
                strOutbreakCaseID,
                idfHumanCase,
                idfVetCase,
                OutbreakCaseStatusID,
                OutbreakCaseClassificationID,
                IsPrimaryCaseFlag,
                intRowStatus,
                AuditCreateUser,
                AuditCreateDTM,
                AuditUpdateUser,
                AuditUpdateDTM
            )
            VALUES
            (@OutBreakCaseReportUID,
             @idfOutbreak,
             @strOutbreakCaseID,
             @idfHumanCase,
             @idfVetCase,
             @CaseStatusID,
             @OutbreakCaseClassificationID,
             @IsPrimaryCaseFlag,
             COALESCE(@intRowStatus, 0),
             @User,
             GETDATE(),
             NULL,
             NULL
            )
        END

        --Add/Update any contacts
        IF @CaseContacts IS NOT NULL
        BEGIN
            --INSERT INTO @SupressSelect
            EXEC dbo.USSP_OMM_CONTACT_SET @idfHumanCase,
                                          @CaseContacts,
                                          @User = @User,
                                          @OutbreakCaseReportUID = @OutbreakCaseReportUID,
                                          @FunctionCall = 1;
        END

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SupressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                            @EventTypeId,
                                            @EventUserId,
                                            @EventObjectId,
                                            @EventDiseaseId,
                                            @EventSiteId,
                                            @EventInformationString,
                                            @EventLoginSiteId,
                                            @EventLocationId,
                                            @User;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        SELECT @returnCode AS ReturnCode,
               @returnMsg AS ReturnMessage,
               @strOutbreakCaseID AS strOutbreakCaseId,
               @OutbreakCaseReportUID AS OutbreakCaseReportUID;
    END TRY
    BEGIN CATCH

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_OMM_Contact_Set]...';


GO
-- ================================================================================================
-- Name: USP_OMM_Contact_Set
-- Description: Inserts or updates an outbreak contact.
--          
-- Author: Doug Albanese
-- Revision History:
-- Name             Date		Change Detail
-- ----------------	----------	----------------------------------------------------------
-- Doug Albanese    05/29/2020	Correction to create copy of contact after it has been 
--								updated.
-- Stephen Long     05/02/2022	Updated parameters to use admin levels.
-- Stephen Long     06/05/2022	Added logic to handle convert to case status.
-- Stephen Long     06/23/2022	Added contact tracing observation identifier to the update.
-- Stephen Long     06/27/2022	Set classification type to Suspect on contact conversion.
-- Doug Albanese	08/15/2022	Changed OutbreakCaseContactId to CaseContactID
-- Doug Albanese	08/24/2022	Converted HumanId to HumanID, HumanMasterId to HumanMasterID, for 
--                              the json blob conversion to a table.
-- Doug Albanese	08/24/2022	Change the Case Status to "Convert To Case", when creating a new 
--                              case.
-- Stephen Long     09/20/2022  Made all identifiers use "ID".  Some fields were not saving 
--                              correctly with the case sensitivity.
-- Stephen Long     10/25/2022  Added farm master ID and case contact ID fields.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_OMM_Contact_Set]
(
    @Contacts NVARCHAR(MAX),
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
                @AddressID BIGINT = NULL,
                @ForeignAddressIndicator BIT = 0,
                @OutbreakID BIGINT = NULL,
                @HumanMasterID BIGINT = NULL,
                @HumanID BIGINT = NULL,
                @FarmMasterID BIGINT = NULL, 
                @CaseContactID BIGINT,
                @OutbreakCaseReportUID BIGINT = NULL,
                @ContactRelationshipTypeID BIGINT = NULL,
                @DateOfLastContact DATETIME = NULL,
                @LocationID BIGINT = NULL,
                @Street NVARCHAR(200) = NULL,
                @PostalCode NVARCHAR(200) = NULL,
                @Building NVARCHAR(200) = NULL,
                @House NVARCHAR(200) = NULL,
                @Apartment NVARCHAR(200) = NULL,
                @ForeignAddressString NVARCHAR(200) = NULL,
                @ContactPhone NVARCHAR(200) = NULL,
                @PlaceOfLastContact NVARCHAR(200) = NULL,
                @Comment NVARCHAR(500) = NULL,
                @ContactStatusID BIGINT = NULL,
                @RowStatus INT = 0,
                @ContactTracingObservationID BIGINT = NULL;

        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT NULL,
            ReturnMessage NVARCHAR(MAX) NULL
        );
        DECLARE @ContactsTemp TABLE
        (
            CaseContactID BIGINT NOT NULL,
            OutbreakCaseReportUID BIGINT NULL,
            ContactRelationshipTypeID BIGINT NULL,
            OutbreakID BIGINT NULL,
            HumanMasterID BIGINT NULL,
            HumanID BIGINT NULL,
            FarmMasterID BIGINT NULL, 
            DateOfLastContact DATETIME NULL,
            AddressID BIGINT NULL,
            LocationID BIGINT NULL,
            Street NVARCHAR(200) NULL,
            PostalCode NVARCHAR(200) NULL,
            Building NVARCHAR(200) NULL,
            House NVARCHAR(200) NULL,
            Apartment NVARCHAR(200) NULL,
            ForeignAddressString NVARCHAR(200) NULL,
            ContactPhone NVARCHAR(200) NULL,
            PlaceOfLastContact NVARCHAR(200) NULL,
            Comment NVARCHAR(500) NULL,
            ContactStatusID BIGINT NULL,
            ContactTracingObservationID BIGINT NULL,
            RowStatus INT NOT NULL
        );

        BEGIN TRANSACTION;

        INSERT INTO @ContactsTemp
        SELECT *
        FROM
            OPENJSON(@Contacts)
            WITH
            (
                CaseContactID BIGINT,
                OutbreakCaseReportUID BIGINT,
                ContactRelationshipTypeID BIGINT,
                OutbreakID BIGINT,
                HumanMasterID BIGINT,
                HumanID BIGINT,
                FarmMasterID BIGINT, 
                DateOfLastContact DATETIME2,
                AddressID BIGINT,
                LocationID BIGINT,
                Street NVARCHAR(200),
                PostalCode NVARCHAR(200),
                Building NVARCHAR(200),
                House NVARCHAR(200),
                Apartment NVARCHAR(200),
                ForeignAddressString NVARCHAR(200),
                ContactPhone NVARCHAR(200),
                PlaceOfLastContact NVARCHAR(200),
                Comment NVARCHAR(500),
                ContactStatusID BIGINT,
                ContactTracingObservationID BIGINT,
                RowStatus INT
            );

        WHILE EXISTS (SELECT * FROM @ContactsTemp)
        BEGIN
            SELECT TOP 1
                @CaseContactID = CaseContactID,
                @OutbreakCaseReportUID = OutbreakCaseReportUID,
                @ContactRelationshipTypeID = ContactRelationshipTypeID,
                @OutbreakID = OutbreakID,
                @HumanMasterID = HumanMasterID,
                @HumanID = HumanID,
                @FarmMasterID = FarmMasterID, 
                @DateOfLastContact = DateOfLastContact,
                @AddressID = AddressID,
                @LocationID = LocationID,
                @Street = Street,
                @PostalCode = PostalCode,
                @Building = Building,
                @House = House,
                @Apartment = Apartment,
                @ForeignAddressString = ForeignAddressString,
                @ContactPhone = ContactPhone,
                @PlaceOfLastContact = PlaceOfLastContact,
                @Comment = Comment,
                @ContactStatusID = ContactStatusID,
                @ContactTracingObservationID = ContactTracingObservationID,
                @RowStatus = RowStatus
            FROM @ContactsTemp;

            IF @ForeignAddressString IS NOT NULL
            BEGIN
                SET @ForeignAddressIndicator = 1;
            END

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_ADDRESS_SET @AddressID OUTPUT,
                                             NULL,
                                             NULL,
                                             NULL,
                                             @LocationID,
                                             @Apartment,
                                             @Building,
                                             @Street,
                                             @House,
                                             @PostalCode,
                                             NULL,
                                             NULL,
                                             NULL,
                                             NULL,
                                             NULL,
                                             NULL,
                                             NULL,
                                             @ForeignAddressIndicator,
                                             @ForeignAddressString,
                                             0, --@blnGeoLocationShared
                                             @AuditUserName,
                                             @ReturnCode OUTPUT,
                                             @ReturnMessage OUTPUT;

            UPDATE dbo.OutbreakCaseContact
            SET ContactRelationshipTypeID = @ContactRelationshipTypeID,
                DateOfLastContact = @DateOfLastContact,
                PlaceOfLastContact = @PlaceOfLastContact,
                idfHuman = @HumanID,
                CommentText = @Comment,
                ContactStatusID = @ContactStatusID,
                ContactTracingObservationID = @ContactTracingObservationID, 
                intRowStatus = @RowStatus,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE OutbreakCaseContactUID = @CaseContactID;

            UPDATE dbo.tlbHuman
            SET idfCurrentResidenceAddress = @AddressID,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfHuman = @HumanID;

            UPDATE dbo.HumanAddlInfo
            SET ContactPhoneNbr = @ContactPhone,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE HumanAdditionalInfo = @HumanID;

            -- Convert to case, then create a human or veterinary case.
            IF @ContactStatusID = 10517002
            BEGIN
                --INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_OMM_CONVERT_CONTACT_Set @OutbreakID,
                                                         @CaseContactID, 
                                                         @HumanMasterID,
                                                         @HumanID, 
                                                         @FarmMasterID, 
                                                         @AddressID,
                                                         @LocationID,
                                                         @Street,
                                                         @Apartment,
                                                         @Building,
                                                         @House,
                                                         @PostalCode,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         10109001, -- In Process
														 --10517002, --Convert To Case
                                                         380000000, -- Suspect
                                                         @AuditUserName;
            END

            SET ROWCOUNT 1;
            DELETE FROM @ContactsTemp;
            SET ROWCOUNT 0;
        END;

        IF @@TRANCOUNT > 0
            COMMIT TRANSACTION;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        THROW;
    END CATCH
END
GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_Barcode_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_Barcode_GetList]';


GO
PRINT N'Refreshing Procedure [Report].[USP_ADMIN_Barcode_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_ADMIN_Barcode_GetList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_Determinant_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_Determinant_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_Template_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_Template_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_AGG_REPORT_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_AGG_REPORT_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_AS_CAMPAIGN_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_AS_CAMPAIGN_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_AGEGROUPSTATISTICALAGEGROUPMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_AGEGROUPSTATISTICALAGEGROUPMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_AggregateSetting_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_AggregateSetting_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_CUSTOMREPORT_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_CUSTOMREPORT_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_DISEASEGROUPDISEASEMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_DISEASEGROUPDISEASEMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_DISEASEHUMANGENDERMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_DISEASEHUMANGENDERMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_HumanAggregateCaseMatrixVersion_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_HumanAggregateCaseMatrixVersion_SET]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_PERSONALIDTYPEMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_PERSONALIDTYPEMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_REPORTDISEASEGROUPDISEASEMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_REPORTDISEASEGROUPDISEASEMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_SPECIESTYPEANIMALAGEMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_SPECIESTYPEANIMALAGEMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_VECTORTYPECOLLECTIONMETHODMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_VECTORTYPECOLLECTIONMETHODMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_VECTORTYPEFIELDTESTMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_VECTORTYPEFIELDTESTMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_VECTORTYPESAMPLETYPEMATRIX_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_VECTORTYPESAMPLETYPEMATRIX_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ILI_Aggregate_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ILI_Aggregate_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_Case_QuickSet]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_Case_QuickSet]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_Session_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_Session_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_AGEGROUP_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_AGEGROUP_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_BASEREFERENCE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_BASEREFERENCE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_CASECLASSIFICATION_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_CASECLASSIFICATION_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_DIAGNOSISREFERENCE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_DIAGNOSISREFERENCE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_REPORTDIAGNOSISGROUP_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_REPORTDIAGNOSISGROUP_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_SAMPLETYPEREFERENCE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_SAMPLETYPEREFERENCE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_SPECIESTYPE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_SPECIESTYPE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_STATISTICDATATYPE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_STATISTICDATATYPE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_VectorSubType_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_VectorSubType_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_VECTORTYPEREFERENCE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_VECTORTYPEREFERENCE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_SecurityConfiguration_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_SecurityConfiguration_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_Copy_Template]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_Copy_Template]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_FF_Copy_Template]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_FF_Copy_Template]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ASPNetUserSetSessionContext]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ASPNetUserSetSessionContext]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_GBL_DataAuditEvent_Delete]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_GBL_DataAuditEvent_Delete]';


GO
PRINT N'Refreshing Procedure [dbo].[USSP_VCTS_DETAILEDCOLLECTIONS_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_VCTS_DETAILEDCOLLECTIONS_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_VETERINARY_DISEASE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_VETERINARY_DISEASE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_Vector_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_Vector_GetList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VCTS_VSSESSION_GetDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VCTS_VSSESSION_GetDetail]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_DAS_MYCOLLECTIONS_GETCOUNT]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_DAS_MYCOLLECTIONS_GETCOUNT]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_DAS_MYCOLLECTIONS_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_DAS_MYCOLLECTIONS_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VCTS_VSSESSION_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VCTS_VSSESSION_GetList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_DEDUPLICATION_HUMAN_DISEASE_Report_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_DEDUPLICATION_HUMAN_DISEASE_Report_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VCTS_SURVEILLANCE_SESSION_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VCTS_SURVEILLANCE_SESSION_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VET_DISEASE_REPORT_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VET_DISEASE_REPORT_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_HUMAN_DISEASE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_HUMAN_DISEASE_SET]';


GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] WITH CHECK CHECK CONSTRAINT [FK_ASPNetUserPreviousPasswords_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[ASPNetUserPreviousPasswords] WITH CHECK CHECK CONSTRAINT [FK_ASPNetUserPreviousPasswords_AspNetUsers_Id];

ALTER TABLE [dbo].[AccessRule] WITH CHECK CHECK CONSTRAINT [FK_AccessRule_tflSiteGroup_GrantingActorSiteGroupID];

ALTER TABLE [dbo].[AccessRule] WITH CHECK CHECK CONSTRAINT [FK_AccessRule_trtBaseReference];

ALTER TABLE [dbo].[AccessRule] WITH CHECK CHECK CONSTRAINT [FK_AccessRule_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[AccessRule] WITH CHECK CHECK CONSTRAINT [FK_AccessRule_tstSite_GrantingActorSiteID];

ALTER TABLE [dbo].[trtResource] WITH CHECK CHECK CONSTRAINT [FK_trtResource_idfsResourceType];

ALTER TABLE [dbo].[trtResource] WITH CHECK CHECK CONSTRAINT [FK_trtResource_SourceSystemNameID];

ALTER TABLE [dbo].[trtResourceSet] WITH CHECK CHECK CONSTRAINT [FK_trtResourceSet_SourceSystemNameID];

ALTER TABLE [dbo].[trtResourceSetHierarchy] WITH CHECK CHECK CONSTRAINT [FK_trtResourceSetHierarchy_idfsResourceSet];

ALTER TABLE [dbo].[trtResourceSetHierarchy] WITH CHECK CHECK CONSTRAINT [FK_trtResourceSetHierarchy_SourceSystemNameID];

ALTER TABLE [dbo].[trtResourceSetToResource] WITH CHECK CHECK CONSTRAINT [FK_trtResourceSetToResource_SourceSystemNameID];

ALTER TABLE [dbo].[trtResourceSetTranslation] WITH CHECK CHECK CONSTRAINT [FK_trtResourceSetTranslation_SourceSystemNameID];

ALTER TABLE [dbo].[trtResourceTranslation] WITH CHECK CHECK CONSTRAINT [FK_trtResourceTranslation_SourceSystemNameID];

ALTER TABLE [dbo].[LkupEIDSSAppObject] WITH CHECK CHECK CONSTRAINT [FK_AppObj_ObjName];

ALTER TABLE [dbo].[LkupEIDSSMenu] WITH CHECK CHECK CONSTRAINT [FK_LkupEIDSSMenu_BaseRef_MenuID];

ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] WITH CHECK CHECK CONSTRAINT [FK_LkupRoleSystemFunctionAccess_idfEmployee];

ALTER TABLE [dbo].[tlbMonitoringSession] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSession_gisLocation_idfsLocation];

ALTER TABLE [dbo].[tstGeoLocationFormat] WITH CHECK CHECK CONSTRAINT [FK_tstGeoLocationFormat_gisLocation_idfsLocation];


GO
PRINT N'Update complete.';


GO
