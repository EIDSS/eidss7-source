/*
Deployment script for EIDSS7_GG

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;
GO

PRINT N'Altering Trigger [dbo].[TR_gisLocation_UpdateDenormalizedHierarchy]...';


GO

-- =============================================
-- Author:		Steven Verner
-- Create date: 1/4/2021
-- Description:	Rebuilds gisLocationDenormalized when:
	-- 1.  When a new location is inserted.
	-- 2.  When a location is re-parented (moved)
	-- 3.  When the location is deleted (intRowStatus = 1)
-- History:
--	Date		Developer			Comments
--	03/17/2022	Steven Verner		Fixed the issue where the incorrect level type was specified.
--  10/31/2022  Mani Govindarajan   Update the idfsLocation based on location Node and Node.ToString(), Updated the Final Insert-Selct Condition.
--  01/09/2023  Steven Verner		Modified gisStringNameTranslation joins to use left joins.
-- =============================================
ALTER TRIGGER [dbo].[TR_gisLocation_UpdateDenormalizedHierarchy]
   ON  [dbo].[gisLocation] 
   AFTER INSERT,DELETE,UPDATE
AS
BEGIN
	SET NOCOUNT ON;

		DECLARE 
			@current INT, 
			@max INT, 
			@languageId BIGINT, 
			@hi HIERARCHYID ,
			@hiString varchar(255);


		DECLARE @t TABLE(
			L1ID BIGINT, L2ID BIGINT, L3ID BIGINT, L4ID BIGINT, L5ID BIGINT, L6ID BIGINT, L7ID BIGINT,
			L1NAME NVARCHAR(255),L2NAME NVARCHAR(255),L3NAME NVARCHAR(255),L4NAME NVARCHAR(255),L5NAME NVARCHAR(255),L6NAME NVARCHAR(255),L7NAME NVARCHAR(255),
			Node HIERARCHYID, 
			[Level] INT,
			idfsLocation BIGINT,
			LanguageId BIGINT )
		
		DECLARE @Languages TABLE(id INT IDENTITY, idfsLanguage BIGINT)
		INSERT INTO @Languages(idfsLanguage)
		SELECT idfsLanguage
		FROM dbo.gisLocationDenormalized ld
		GROUP BY idfsLanguage 
		
		DECLARE @idfsLocation BIGINT = NULL,
			@newParent HIERARCHYID,
			@oldParent HIERARCHYID,
			@newDeleted BIT,
			@oldDeleted BIT

			-- The following use cases must be captured:
			-- 1.  When a new location is inserted.
			-- 2.  When a location is re-parented (moved)
			-- 3.  When the location is deleted (intRowStatus = 1)
			-- 4.  When the location name changes...  (This use case cannot be captured here; it must be captured on the trtBaseReference table trigger...

	IF EXISTS(SELECT * FROM inserted) AND EXISTS (SELECT * FROM deleted) -- This is an update
	BEGIN

		--	====================================================
		--  Test to see if the location moved...
		--	====================================================
		SELECT 
		 @idfsLocation = idfsLocation
		,@newDeleted = CASE WHEN intRowStatus=1 THEN 1 ELSE 0 END
		,@newParent = NODE.GetAncestor(1)
		FROM Inserted 

		SELECT @oldDeleted = intRowStatus,  @oldParent = Node.GetAncestor(1) 
		FROM DELETED

		-- We always remove all references of the location in the gislocationDenormalized table,
		-- then generate a new entry...
		-- This handles both when a record was deleted (intRowStatus=1) and the need to remove the existing recordsprior to generating a new one for reparenting...

		-- When the location has moved or the record is reactivated (intRowStatus = 0)...
		IF(@newParent != @oldParent) 
		BEGIN 
			DELETE FROM gisLocationDenormalized WHERE idfsLocation = @idfsLocation
			GOTO GenerateNewReference
		END ELSE IF( @newDeleted = 1 )
			DELETE FROM gisLocationDenormalized WHERE idfsLocation = @idfsLocation

		ELSE IF(@oldDeleted =1 and @newDeleted = 0 )
			BEGIN
				DELETE FROM gisLocationDenormalized WHERE idfsLocation = @idfsLocation
				GOTO GenerateNewReference
			END

		GOTO Fini
	END

	IF EXISTS (SELECT * FROM inserted) AND NOT EXISTS (SELECT * FROM deleted) -- This is an insert
	BEGIN
		-- New location was inserted...
		SELECT @idfsLocation = idfsLocation FROM inserted;
		GOTO GenerateNewReference
	END

	IF EXISTS (SELECT * FROM deleted) AND NOT EXISTS(SELECT * FROM inserted) -- this is a delete
	BEGIN
		-- Location was deleted...
		SELECT @idfsLocation = idfsLocation FROM deleted;
		DELETE FROM dbo.gisLocationDenormalized WHERE idfsLocation = @idfsLocation
	END

	GOTO Fini
	
	GenerateNewReference:  
	--	====================================================


		SELECT @current = 1, @max= COUNT(*) FROM @Languages
		
		SELECT @hi = Node, @hiString=Node.ToString()  FROM gisLocation l WHERE l.idfsLocation = @idfsLocation


		-- iterate thru all the languages and insert the hierarchy record for each...
		WHILE (@current <= @max)
		BEGIN
			
			--	Select a language...
			SELECT @languageId = idfsLanguage FROM @Languages WHERE id = @current

			-- Perform the insert...
			-- 1st into table variable...
			INSERT INTO @t(
						 L1ID
						,L2ID
						,L3ID
						,L4ID
						,L5ID
						,L6ID
						,L7ID
						,L1NAME
						,L2NAME
						,L3NAME
						,L4NAME
						,L5NAME
						,L6NAME
						,L7NAME
						,Node
						,[Level]
						--,idfsLocation
						,LanguageId)

			-- PIVOT!!!!!
			-- Flatten the hierarchy and insert into gisLocationDenormalized...
			SELECT 
				-- LevelIDs 1 thru 7...
				MAX(CASE WHEN [Level]=1 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=2 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=3 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=4 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=5 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=6 THEN idfsLocation END ),
				MAX(CASE WHEN [Level]=7 THEN idfsLocation END ),
				-- LevelNames 1 thru 7...
				MAX(CASE WHEN [Level]=1 THEN LevelName END ),
				MAX(CASE WHEN [Level]=2 THEN LevelName END ),
				MAX(CASE WHEN [Level]=3 THEN LevelName END ),
				MAX(CASE WHEN [Level]=4 THEN LevelName END ),
				MAX(CASE WHEN [Level]=5 THEN LevelName END ),
				MAX(CASE WHEN [Level]=6 THEN LevelName END ),
				MAX(CASE WHEN [Level]=7 THEN LevelName END ),
				-- Node...
				MAX(Node),
				MAX(level),
				--MAX(idfsLocation),
				@languageId
			FROM 
				(
				SELECT 
					l.Node.GetLevel() [Level]
					,COALESCE(snt.strTextString, b.strDefault) [LevelName]
					,b.strDefault [LevelNameDefault]
					,idfsLocation
					,Node
					--,LevelType.strTextString
					 ,rn=ROW_NUMBER() OVER (PARTITION BY 0 ORDER BY node.GetLevel())
				FROM gisLocation l
				JOIN gisBaseReference b ON b.idfsGISBaseReference = l.idfsLocation
				LEFT JOIN dbo.gisStringNameTranslation snt ON snt.idfsGISBaseReference = l.idfsLocation AND 
					snt.idfsLanguage = @languageId
				WHERE @hi.IsDescendantOf(node) = 1
				) a

				-- Reset...
				SET @current = @current+1
				SELECT @languageId = NULL
		END

		-- Update the idfsLocation...
		UPDATE @t 
		SET idfsLocation = 
		CASE
			WHEN level =1 AND  Node =@hiString THEN L1ID
			WHEN level =2 AND  Node =@hiString THEN L2ID
			WHEN level =3 AND  Node =@hiString THEN L3ID
			WHEN level =4 AND  Node =@hiString THEN  L4ID
			WHEN level =5 AND  Node =@hiString THEN   L5ID 
			WHEN level =6 AND  Node =@hiString THEN   L6ID
			WHEN level =7 AND  Node =@hiString THEN   L7ID 
		END
		

		-- Finally, insert into gis table...
		INSERT INTO dbo.gisLocationDenormalized
			(
				Level1ID, 
				Level2ID, 
				Level3ID, 
				Level4ID, 
				Level5ID, 
				Level6ID, 
				Level7ID,
				Level1Name,
				Level2Name, 
				Level3Name, 
				Level4Name, 
				Level5Name, 
				Level6Name, 
				Level7Name,
				Node,
				Level,
				idfsLocation,
				LevelType,
				idfsLanguage
			)
		SELECT  L1ID,L2ID,L3ID,L4ID,L5ID,L6ID,L7ID,
				L1NAME,L2NAME,L3NAME,L4NAME,L5NAME,L6NAME,L7NAME,
				node,[level],l.idfsLocation,COALESCE(lt.strTextString, T.strGISReferenceTypeName),l.LanguageId
		FROM @t l
		JOIN gisBaseReference b ON b.idfsGISBaseReference = l.idfsLocation
		JOIN gisReferenceType t ON t.idfsGISReferenceType = b.idfsGISReferenceType
		LEFT JOIN dbo.trtStringNameTranslation lt ON 
		lt.idfsLanguage = l.LanguageId AND lt.idfsBaseReference = 
		case l.level
			WHEN 1 THEN 10003001 
			WHEN 2 THEN 10003003
			WHEN 3 THEN 10003002 
			WHEN 4 THEN 10003004 
			WHEN 5 THEN 0
			WHEN 6 THEN 0
			WHEN 7 THEN 0
		ELSE 0 END



	Fini:
		-- Bye!
		RETURN

END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_FlexForm_Get]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_FlexForm_Get
-- Description: Gets list of the Parameters.
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Doug Albabese	01/06/2020	Initial release for new API.
-- Doug Albanese	07/02/2020	Added field blnGrid to denote the displaying of data in a table format
-- Doug Albanese	09/30/2020	Added filtering for language on the Design Option Tables
-- Doug Albanese	01/06/2021	Added idfsEditMode to clarify if the parameter is required or not.
-- Doug Albanese	02/02/2021	Found a static value for English in this procedure.
-- Doug Albanese	08/01/2021	Added idfsFormTemplate for ease of access
-- Mark Wilson		09/29/2021	Updated to remove E7 FN_FF_DesignLanguageForParameter_GET, 
--								removed unused parameters
-- Doug Albanese	03/17/2022	Added a "commented out" section to replace, when development is not happening during core hours
--	Doug Albanese	08/02/2022	Fix for IGAT #400. Extra parameters showing up that didn't belong to questionnnaire on matrix.
-- Doug Albanese	 01/0/2023	 Changed up a join to see if the displayed labeling will work better for the customer.
/*
DECLARE    @return_value int

 

EXEC    @return_value = [dbo].[USP_ADMIN_FF_FlexForm_Get]
        @LangID = N'en-US',
        @idfsDiagnosis = 7719020000000,
        @idfsFormType = 10034010,
        @idfsFormTemplate = NULL

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_FlexForm_Get] (
	@LangID						NVARCHAR(50) = NULL
	,@idfsDiagnosis				BIGINT = NULL
	,@idfsFormType				BIGINT = NULL
	,@idfsFormTemplate			BIGINT = NULL
	)
AS
BEGIN
	DECLARE @idfsCountry AS BIGINT,
			@idfsLanguage BIGINT = dbo.FN_GBL_LanguageCode_GET(@LangID)
	DECLARE @tmpTemplate AS TABLE (
		idfsFormTemplate BIGINT
		,IsUNITemplate BIT
		)
	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

	BEGIN TRY
		IF @idfsFormTemplate IS NULL
			BEGIN
				--Obtain idfsFormTemplate, via given parameters of idfsDiagnosis and idfsFormType
				---------------------------------------------------------------------------------
				SET @idfsCountry = dbo.FN_GBL_CurrentCountry_GET()

				INSERT INTO @tmpTemplate
				EXECUTE dbo.USP_ADMIN_FF_ActualTemplate_GET 
					@idfsCountry,
					@idfsDiagnosis,
					@idfsFormType

				SELECT TOP 1 @idfsFormTemplate = idfsFormTemplate
				FROM @tmpTemplate

				IF @idfsFormTemplate = - 1
					SET @idfsFormTemplate = NULL

				---------------------------------------------------------------------------------
			END

		SELECT 
			s.idfsParentSection
			,COALESCE(p.idfsSection,0) AS idfsSection
			,p.idfsParameter
			,RF.Name AS SectionName
			,PN.Name AS ParameterName
			,PTR.Name AS parameterType
			,p.idfsParameterType
			,pt.idfsReferenceType
			,p.idfsEditor
			,sdo.intOrder	AS SectionOrder
			,PDO.intOrder	AS ParameterOrder
			,s.blnGrid
			,s.blnFixedRowSet
			,PFT.idfsEditMode
			,pft.idfsFormTemplate
		FROM dbo.ffParameter p
		LEFT JOIN dbo.ffParameterForTemplate PFT ON PFT.idfsParameter = p.idfsParameter AND PFT.intRowStatus = 0
		LEFT JOIN dbo.ffSection s ON s.idfsSection = p.idfsSection
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000101) RF ON S.idfsSection = RF.idfsReference
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000071) PTR ON PTR.idfsReference = P.idfsParameterType
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000070) PN ON PN.idfsReference = P.idfsParameterCaption
		LEFT JOIN dbo.ffParameterDesignOption PDO ON PFT.idfsParameter = PDO.idfsParameter
			AND PFT.idfsFormTemplate = PDO.idfsFormTemplate
			AND PDO.idfsLanguage = @idfsLanguage
			AND PDO.intRowStatus = 0
		LEFT JOIN dbo.ffSectionDesignOption sdo ON sdo.idfsSection = s.idfsSection 
			AND sdo.idfsFormTemplate = @idfsFormTemplate 
			AND sdo.idfsLanguage = @idfsLanguage
			AND sdo.intRowStatus = 0
		LEFT JOIN dbo.ffParameterType PT
			ON pt.idfsParameterType = p.idfsParameterType
		WHERE PFT.idfsFormTemplate = @idfsFormTemplate
		ORDER BY  sdo.intOrder
			,pdo.intOrder
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT = 1
			ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_SITE_ACTOR_GETList]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_SITE_ACTOR_GETList
--
-- Description:	Get actor list for a specific site.  Used in permissions for site filtration of the 
-- administration module - SAUC29.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     12/20/2022 Initial release.
-- Stephen Long     01/10/2023 Fix to null out employee group ID for an internal employee actor.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_SITE_ACTOR_GETList]
(
    @LanguageID NVARCHAR(50),
    @PageNumber INT = 1,
    @PageSize INT = 10,
    @SortColumn NVARCHAR(30) = 'ActorName',
    @SortOrder NVARCHAR(4) = 'ASC',
    @SiteID BIGINT = NULL,
    @EmployeeGroupIndicator BIT = 1
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @FirstRecord INT,
                @LastRecord INT,
                @TotalRowCount INT = 0;
        DECLARE @Results TABLE
        (
            ActorID BIGINT NOT NULL,
            ActorTypeID BIGINT NOT NULL,
            ActorTypeName VARCHAR(MAX) NOT NULL,
            ActorName NVARCHAR(MAX) NULL,
            EmployeeGroupID BIGINT NULL, 
            ExternalActorIndicator BIT NOT NULL,
            DefaultEmployeeGroupIndicator BIT NOT NULL 
        );

        -- External employee group actors
        INSERT INTO @Results
        SELECT oa.idfActor,
               10023001,
               actorType.name,
               employeeGroupName.name,
               NULL, 
               1,
               0
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroup eg
                ON eg.idfEmployeeGroup = oa.idfActor
                   AND eg.intRowStatus = 0
            INNER JOIN dbo.tlbEmployee e
                ON eg.idfEmployeeGroup = e.idfEmployee
                   AND e.intRowStatus = 0
            INNER JOIN FN_GBL_ReferenceRepair(@LanguageID, 19000022) employeeGroupName
                ON employeeGroupName.idfsReference = eg.idfsEmployeeGroupName
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000023) actorType
                ON e.idfsEmployeeType = actorType.idfsReference
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND eg.idfsSite <> @SiteID
              AND oa.idfsOnSite = @SiteID;

        -- External employee actors
        INSERT INTO @Results
        SELECT oa.idfActor,
               10023002,
               actorType.name,
               dbo.FN_GBL_ConcatFullName(p.strFamilyName, p.strFirstName, p.strSecondName),
               egm.idfEmployeeGroup,
               1 AS ExternalActorIndicator,
               0
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployee e
                ON e.idfEmployee = oa.idfActor
                   AND e.intRowStatus = 0
            LEFT JOIN dbo.tlbEmployeeGroupMember egm 
                ON egm.idfEmployee = e.idfEmployee
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tlbPerson p
                ON p.idfPerson = e.idfEmployee
                   AND p.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000023) actorType
                ON e.idfsEmployeeType = actorType.idfsReference
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND e.idfsSite <> @SiteID
              AND oa.idfsOnSite = @SiteID;

        -- Internal employee group actors
        INSERT INTO @Results
        SELECT eg.idfEmployeeGroup,
               10023001,
               actorType.name,
               employeeGroupName.name,
               NULL, 
               0,
               CASE WHEN br.blnSystem = 1 THEN 1 ELSE 0 END 
        FROM dbo.tlbEmployeeGroup eg 
            INNER JOIN dbo.tstObjectAccess oa 
                ON eg.idfEmployeeGroup = oa.idfActor 
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployee e
                ON eg.idfEmployeeGroup = e.idfEmployee
                   AND e.intRowStatus = 0
            INNER JOIN FN_GBL_ReferenceRepair(@LanguageID, 19000022) employeeGroupName
                ON employeeGroupName.idfsReference = eg.idfsEmployeeGroupName
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000023) actorType
                ON e.idfsEmployeeType = actorType.idfsReference
            INNER JOIN dbo.trtBaseReference br 
                ON br.idfsBaseReference = eg.idfsEmployeeGroupName 
                   AND br.intRowStatus = 0
        WHERE eg.intRowStatus = 0
              AND eg.idfsSite = @SiteID
              AND oa.idfsObjectType = 10060011 -- Site
        GROUP BY eg.idfEmployeeGroup, 
              actorType.name,
              employeeGroupName.name, 
              br.blnSystem;

        -- Internal employee actors
        INSERT INTO @Results
        SELECT e.idfEmployee,
               10023002,
               actorType.name,
               dbo.FN_GBL_ConcatFullName(p.strFamilyName, p.strFirstName, p.strSecondName),
               NULL,
               0,
               0
        FROM dbo.tlbEmployee e
            INNER JOIN dbo.tstObjectAccess oa
                ON e.idfEmployee = oa.idfActor
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = e.idfEmployee
                   AND u.intRowStatus = 0
            LEFT JOIN dbo.tlbEmployeeGroupMember egm 
                ON egm.idfEmployee = e.idfEmployee
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tlbPerson p
                ON p.idfPerson = u.idfPerson
                   AND p.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000023) actorType
                ON e.idfsEmployeeType = actorType.idfsReference
        WHERE e.intRowStatus = 0
              AND e.idfsSite = @SiteID 
              AND oa.idfsObjectType = 10060011 -- Site
        GROUP BY e.idfEmployee, 
                 actorType.name,
                 p.strFamilyName, 
                 p.strFirstName, 
                 p.strSecondName,
                 egm.idfEmployeeGroup;

        SET @FirstRecord = (@PageNumber - 1) * @PageSize;
        SET @LastRecord = (@PageNumber * @PageSize + 1);
        SET @TotalRowCount =
        (
            SELECT COUNT(*) FROM @Results WHERE (@EmployeeGroupIndicator = 1 AND EmployeeGroupID IS NULL) OR (@EmployeeGroupIndicator = 0 AND EmployeeGroupID IS NOT NULL)
        );

        SELECT ActorID,
               ActorTypeID,
               ActorTypeName,
               ActorName,
               EmployeeGroupID,
               ExternalActorIndicator,
               DefaultEmployeeGroupIndicator,
               RowAction,
               [RowCount],
               TotalRowCount,
               CurrentPage,
               TotalPages
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'ActorName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ActorName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ActorName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ActorName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ActorTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ActorTypeName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ActorTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ActorTypeName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ExternalActorIndicator'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ExternalActorIndicator
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ExternalActorIndicator'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ExternalActorIndicator
                                               END DESC
                                     ) AS RowNum,
                   ActorID,
                   ActorTypeID,
                   ActorTypeName,
                   ActorName,
                   EmployeeGroupID,
                   ExternalActorIndicator,
                   DefaultEmployeeGroupIndicator,
                   0 AS RowAction,
                   COUNT(*) OVER () AS [RowCount],
                   @TotalRowCount AS TotalRowCount,
                   CurrentPage = @PageNumber,
                   TotalPages = (@TotalRowCount / @PageSize) + IIF(COUNT(*) % @PageSize > 0, 1, 0)
            FROM @Results
            WHERE (@EmployeeGroupIndicator = 1 AND EmployeeGroupID IS NULL) OR (@EmployeeGroupIndicator = 0 AND EmployeeGroupID IS NOT NULL)
            GROUP BY ActorID,
                     ActorTypeID,
                     ActorTypeName,
                     ActorName,
                     EmployeeGroupID,
                     ExternalActorIndicator,
                     DefaultEmployeeGroupIndicator
        ) AS x
        WHERE RowNum > @FirstRecord
              AND RowNum < @LastRecord
        ORDER BY RowNum;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_SITE_SET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_SITE_SET
--
-- Description:	Inserts or updates an EIDSS site for SAUC29.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/14/2022 Initial release.
-- Stephen Long     03/14/2022 Added additional columns to suppress select for employee group set.
-- Stephen Long     05/17/2022 Added insert for a new organization association to a site.
-- Stephen Long     07/15/2022 Comment out access rule name field; need to add base reference 
--                             logic for the name.
-- Stephen Long     12/22/2022 Fixed site permissions to use new stored procedure for object 
--                             access set, and logic for the default employee group for new sites.
-- Stephen Long     01/10/2023 Fix to add default employee group for existing sites when it does 
--                             not exist.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_SITE_SET]
(
    @LanguageID NVARCHAR(50),
    @SiteID BIGINT = NULL,
    @CustomizationPackageID BIGINT = NULL,
    @EIDSSSiteID NVARCHAR(36) = NULL,
    @ParentSiteID BIGINT = NULL,
    @SiteTypeID BIGINT = NULL,
    @SiteName NVARCHAR(200) = NULL,
    @SiteOrganizationID BIGINT = NULL,
    @HASCSiteID NVARCHAR(50) = NULL,
    @RowStatus INT,
    @Permissions NVARCHAR(MAX) = NULL,
    @Organizations NVARCHAR(MAX) = NULL,
    @UserName NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT
            = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
                @RowAction CHAR = NULL,
                @RowID BIGINT = NULL,
                @OrganizationID BIGINT = NULL,
                @DefaultEmployeeGroupActorID BIGINT = -506, -- Default group for an EIDSS installation; not actually used for users/employees, but only as a template for other sites.
                @ObjectAccessID BIGINT = NULL,
                @ObjectOperationTypeID BIGINT = NULL,
                @ObjectTypeID BIGINT = NULL,
                @ObjectID BIGINT = NULL,
                @ActorID BIGINT = NULL,
                @PermissionTypeID INT = NULL;

        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );
        DECLARE @OrganizationsTemp TABLE
        (
            OrganizationID BIGINT NOT NULL,
            RowAction INT NOT NULL
        );
        DECLARE @ObjectAccessRecordsTemp TABLE
        (
            ObjectAccessID BIGINT NOT NULL,
            ObjectOperationTypeID BIGINT NOT NULL,
            ObjectTypeID BIGINT NOT NULL,
            ObjectID BIGINT NOT NULL,
            ActorID BIGINT NOT NULL,
            DefaultEmployeeGroupIndicator BIT NOT NULL,
            SiteID BIGINT NOT NULL,
            PermissionTypeID INT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction CHAR(1) NULL
        );

        BEGIN TRANSACTION;

        INSERT INTO @OrganizationsTemp
        SELECT *
        FROM
            OPENJSON(@Organizations)
            WITH
            (
                OrganizationID BIGINT,
                RowAction INT
            );

        INSERT INTO @ObjectAccessRecordsTemp
        SELECT *
        FROM
            OPENJSON(@Permissions)
            WITH
            (
                ObjectAccessID BIGINT,
                ObjectOperationTypeID BIGINT,
                ObjectTypeID BIGINT,
                ObjectID BIGINT,
                ActorID BIGINT,
                DefaultEmployeeGroupIndicator BIT,
                SiteID BIGINT,
                PermissionTypeID INT,
                RowStatus INT,
                RowAction CHAR(1)
            );

        IF (
               ISNULL(@EIDSSSiteID, N'') <> N''
               AND EXISTS
        (
            SELECT strSiteID
            FROM dbo.tstSite
            WHERE strSiteID = @EIDSSSiteID
        )
               AND @SiteID IS NULL
           )
        BEGIN
            SELECT @ReturnMessage = 'SITE ID DOES EXIST';

            SELECT @ReturnCode = 1;
        END

        IF @ReturnCode = 0
           AND (
                   ISNULL(@HASCSiteID, N'') <> N''
                   AND EXISTS
        (
            SELECT strHASCsiteID
            FROM dbo.tstSite
            WHERE strHASCsiteID = @HASCSiteID
        )
                   AND @SiteID IS NULL
               )
        BEGIN
            SELECT @ReturnMessage = 'HASC SITE ID DOES EXIST';

            SELECT @ReturnCode = 2;
        END

        IF @ReturnCode = 0
        BEGIN
            -- Create the Default Employee Group for the new site
            DECLARE @LanguageCode BIGINT = dbo.FN_GBL_LanguageCode_Get(@LanguageID),
                    @NewDefaultEmployeeGroupActorID BIGINT = NULL,
                    @NewDefaultEmployeeGroupNameID BIGINT = NULL;
            DECLARE @DefaultEmployeeGroupDefaultName NVARCHAR(200)
                =   (
                        SELECT strDefault
                        FROM dbo.trtBaseReference
                        WHERE idfsBaseReference = @DefaultEmployeeGroupActorID
                    ),
                    @DefaultEmployeeGroupNationalName NVARCHAR(200) = (
                                                                          SELECT strTextString
                                                                          FROM dbo.trtStringNameTranslation
                                                                          WHERE idfsBaseReference = @DefaultEmployeeGroupActorID
                                                                                AND idfsLanguage = @LanguageCode
                                                                      ),
                    @DefaultEmployeeGroupDescription NVARCHAR(200) = (
                                                                         SELECT strDescription
                                                                         FROM dbo.tlbEmployeeGroup
                                                                         WHERE idfEmployeeGroup = @DefaultEmployeeGroupActorID
                                                                     );

            IF NOT EXISTS
            (
                SELECT *
                FROM dbo.tstSite
                WHERE idfsSite = @SiteID
                      AND intRowStatus = 0
            )
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = N'tstSite',
                                                  @idfsKey = @SiteID OUTPUT;

                IF @CustomizationPackageID IS NULL
                BEGIN
                    SET @CustomizationPackageID = dbo.FN_GBL_CustomizationPackage_GET();
                END

                INSERT INTO dbo.tstSite
                (
                    idfsSite,
                    idfsParentSite,
                    idfsSiteType,
                    idfCustomizationPackage,
                    idfOffice,
                    strSiteName,
                    strHASCsiteID,
                    strSiteID,
                    blnIsWEB,
                    intRowStatus,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser
                )
                VALUES
                (@SiteID,
                 @ParentSiteID,
                 @SiteTypeID,
                 @CustomizationPackageID,
                 @SiteOrganizationID,
                 @SiteName,
                 @HASCSiteID,
                 @EIDSSSiteID,
                 0  ,
                 0  ,
                 10519001,
                 '[{"idfsSite":' + CAST(@SiteID AS NVARCHAR(300)) + '}]',
                 @UserName
                );

                SET @NewDefaultEmployeeGroupActorID =
                (
                    SELECT MIN(idfEmployee) - 1 FROM dbo.tlbEmployee
                );

                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_BaseReference_SET @ReferenceID = @NewDefaultEmployeeGroupNameID OUTPUT,
                                                   @ReferenceType = 19000022,
                                                   @LangID = @LanguageID,
                                                   @DefaultName = @DefaultEmployeeGroupDefaultName,
                                                   @NationalName = @DefaultEmployeeGroupNationalName,
                                                   @HACode = 226,
                                                   @Order = 0,
                                                   @System = 1,
                                                   @User = @UserName;

                INSERT INTO dbo.tlbEmployee
                (
                    idfEmployee,
                    idfsEmployeeType,
                    idfsSite,
                    intRowStatus,
                    AuditCreateDTM,
                    AuditCreateUser
                )
                VALUES
                (@NewDefaultEmployeeGroupActorID, 10023001, @SiteID, 0, GETDATE(), @UserName);

                INSERT INTO dbo.tlbEmployeeGroup
                (
                    idfEmployeeGroup,
                    idfsEmployeeGroupName,
                    idfsSite,
                    strName,
                    strDescription,
                    intRowStatus,
                    AuditCreateDTM,
                    AuditCreateUser
                )
                VALUES
                (@NewDefaultEmployeeGroupActorID,
                 @NewDefaultEmployeeGroupNameID,
                 @SiteID,
                 @DefaultEmployeeGroupNationalName,
                 @DefaultEmployeeGroupDescription,
                 0  ,
                 GETDATE(),
                 @UserName
                );

                UPDATE @ObjectAccessRecordsTemp
                SET ActorID = @NewDefaultEmployeeGroupActorID
                WHERE DefaultEmployeeGroupIndicator = 1;
            END
            ELSE
            BEGIN
                UPDATE dbo.tstSite
                SET idfsSiteType = @SiteTypeID,
                    idfsParentSite = @ParentSiteID,
                    idfCustomizationPackage = @CustomizationPackageID,
                    idfOffice = @SiteOrganizationID,
                    strSiteName = @SiteName,
                    strHASCsiteID = @HASCSiteID,
                    strSiteID = @EIDSSSiteID,
                    intRowStatus = @RowStatus,
                    AuditUpdateUser = @UserName,
                    AuditUpdateDTM = GETDATE()
                WHERE idfsSite = @SiteID;

                IF EXISTS
                (
                    SELECT *
                    FROM @ObjectAccessRecordsTemp
                    WHERE DefaultEmployeeGroupIndicator = 1
                          AND RowAction = 'I'
                          AND RowStatus = 0
                )
                BEGIN
                    SET @NewDefaultEmployeeGroupActorID =
                    (
                        SELECT MIN(idfEmployee) - 1 FROM dbo.tlbEmployee
                    );

                    INSERT INTO @SuppressSelect
                    EXEC dbo.USP_GBL_BaseReference_SET @ReferenceID = @NewDefaultEmployeeGroupNameID OUTPUT,
                                                       @ReferenceType = 19000022,
                                                       @LangID = @LanguageID,
                                                       @DefaultName = @DefaultEmployeeGroupDefaultName,
                                                       @NationalName = @DefaultEmployeeGroupNationalName,
                                                       @HACode = 226,
                                                       @Order = 0,
                                                       @System = 1,
                                                       @User = @UserName;

                    INSERT INTO dbo.tlbEmployee
                    (
                        idfEmployee,
                        idfsEmployeeType,
                        idfsSite,
                        intRowStatus,
                        AuditCreateDTM,
                        AuditCreateUser
                    )
                    VALUES
                    (@NewDefaultEmployeeGroupActorID, 10023001, @SiteID, 0, GETDATE(), @UserName);

                    INSERT INTO dbo.tlbEmployeeGroup
                    (
                        idfEmployeeGroup,
                        idfsEmployeeGroupName,
                        idfsSite,
                        strName,
                        strDescription,
                        intRowStatus,
                        AuditCreateDTM,
                        AuditCreateUser
                    )
                    VALUES
                    (@NewDefaultEmployeeGroupActorID,
                     @NewDefaultEmployeeGroupNameID,
                     @SiteID,
                     @DefaultEmployeeGroupNationalName,
                     @DefaultEmployeeGroupDescription,
                     0  ,
                     GETDATE(),
                     @UserName
                    );

                    UPDATE @ObjectAccessRecordsTemp
                    SET ActorID = @NewDefaultEmployeeGroupActorID
                    WHERE DefaultEmployeeGroupIndicator = 1;
                END
            END;

            WHILE EXISTS (SELECT * FROM @OrganizationsTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = OrganizationID,
                    @OrganizationID = OrganizationID,
                    @RowAction = RowAction
                FROM @OrganizationsTemp;

                IF @RowAction = 1 -- Insert
                   OR @RowAction = 2 -- Update
                BEGIN
                    UPDATE dbo.tlbOffice
                    SET idfsSite = @SiteID,
                        AuditUpdateDTM = GETDATE(),
                        AuditUpdateUser = @UserName
                    WHERE idfOffice = @OrganizationID;
                END
                ELSE
                BEGIN
                    UPDATE dbo.tlbOffice
                    SET idfsSite = NULL,
                        AuditUpdateDTM = GETDATE(),
                        AuditUpdateUser = @UserName
                    WHERE idfOffice = @OrganizationID;
                END;

                DELETE FROM @OrganizationsTemp
                WHERE @OrganizationID = @RowID;
            END

            WHILE EXISTS (SELECT * FROM @ObjectAccessRecordsTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = ObjectAccessID,
                    @ObjectAccessID = ObjectAccessID,
                    @ObjectOperationTypeID = ObjectOperationTypeID,
                    @ObjectTypeID = ObjectTypeID,
                    @ObjectID = @SiteID,
                    @ActorID = ActorID,
                    @PermissionTypeID = PermissionTypeID,
                    @RowStatus = RowStatus,
                    @RowAction = RowAction
                FROM @ObjectAccessRecordsTemp;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_ADMIN_OBJECT_ACCESS_SET @ObjectAccessID,
                                                         @ObjectOperationTypeID,
                                                         @ObjectTypeID,
                                                         @ObjectID,
                                                         @ActorID,
                                                         @SiteID,
                                                         @PermissionTypeID,
                                                         @RowStatus,
                                                         @UserName;

                DELETE FROM @ObjectAccessRecordsTemp
                WHERE ObjectAccessID = @RowID;
            END;
        END

        IF @@TRANCOUNT > 0
            COMMIT;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @SiteID KeyId,
               'SiteID' KeyIdName,
               @CustomizationPackageID AdditionalKeyId,
               'CustomizationPackageID' AdditionalKeyName;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_GIS_Location_ChildLevel_Get]...';


GO
-- *************************************************************************************************
-- Name: USP_GBL_GIS_Location_Level_Get
--
-- Description: To get the Administrative Child Level List for the selected Parent List.
--
-- Revision History:
-- Name				Date		Change Detail
-- ---------------	----------	--------------------------------------------------------------------
-- Srini Goli		03/31/2021	Initial release.
-- Mark Wilson		10/04/2021	Changed to dbo functions
--  Mani			01/20/2022	added order by
--  Mani			01/05/2023 added introwstatus =0 condition
-- Testing code:
/*
EXEC USP_GBL_GIS_Location_ChildLevel_Get 'en-US', 0										-- If You select zero(Nothing) in parenet level return zero
EXEC USP_GBL_GIS_Location_ChildLevel_Get 'en-US' 											-- Administrative Level 1 --Region --Default Setup Country
EXEC USP_GBL_GIS_Location_ChildLevel_Get 'en-US','170000000'								-- Administrative Level 1 --Region --Default Setup Country
EXEC USP_GBL_GIS_Location_ChildLevel_Get 'ru-RU', '1344330000000'							-- Administrative Level 2 --Rayon
EXEC USP_GBL_GIS_Location_ChildLevel_Get 'en-US', '1344330000000,1344340000000'			-- Administrative Level 2 --Rayon
EXEC USP_GBL_GIS_Location_ChildLevel_Get 'az-Latn-AZ', 1344490000000							-- Administrative Level 3 --Settlement
EXEC USP_GBL_GIS_Location_ChildLevel_Get 'en-US', 1344490000000							-- Administrative Level 3 --Settlement

 Administrative Levels 5, 6, and 7 have not been integrated.

*/
-- ************************************************************************************************

ALTER PROCEDURE [dbo].[USP_GBL_GIS_Location_ChildLevel_Get]
(
	@LangID NVARCHAR(10),
	@Parent_idfsReference AS NVARCHAR(MAX) = NULL
)
AS
	DECLARE @CountryNode HIERARCHYID,
			@ParentNode HIERARCHYID,
			@Country_idfsLocation AS BIGINT
			
	DECLARE @Parent_idfsReferenceTable	TABLE
		(
				idfsReference BIGINT		
		)

	DECLARE @Parent_NodeTable	TABLE
			(
					node HIERARCHYID		
			)
	SELECT	
		@CountryNode = node,
		@Country_idfsLocation=idfsLocation 
	FROM dbo.gisLocation 
	WHERE idfsLocation = dbo.FN_GBL_CURRENTCOUNTRY_GET() and intRowStatus=0
	
	IF (@Parent_idfsReference IS NULL) SET @Parent_idfsReference = CAST(@Country_idfsLocation AS NVARCHAR(50))
		

	INSERT INTO @Parent_idfsReferenceTable 
	SELECT CAST([Value] AS BIGINT) FROM dbo.FN_GBL_SYS_SplitList(@Parent_idfsReference,1,',')

	INSERT INTO @Parent_nodeTable 
	SELECT l.node AS ParentNode
	FROM dbo.gisLocation l
	INNER JOIN dbo.gisBaseReference br ON br.idfsGISBaseReference=l.idfsLocation
	WHERE idfsGISBaseReference IN (SELECT idfsReference FROM @Parent_idfsReferenceTable) and br.intRowStatus=0
	
	IF @Parent_idfsReference='0' 
		SELECT TOP 1
			l.node.GetLevel() AS Level,
			br.idfsGISReferenceType, 
			ISNULL(lang.Name,rt.strGISReferenceTypeName) AS strGISReferenceTypeName,
			br.idfsGISBaseReference AS idfsReference,
			ISNULL(snt.strTextString, br.strDefault) [Name],
			--l.Node,
			l.node.ToString() strNode,
			l.strHASC,
			l.strCode,
			l.idfsType LevelType

		FROM dbo.gisBaseReference AS br 
		INNER JOIN dbo.gisStringNameTranslation AS snt ON snt.idfsGISBaseReference = br.idfsGISBaseReference AND snt.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LangID)
		INNER JOIN dbo.gisLocation l ON l.idfsLocation = br.idfsGISBaseReference
		INNER JOIN dbo.gisReferenceType rt ON rt.idfsGISReferenceType = br.idfsGISReferenceType
		LEFT JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID,19000003) lang ON lang.strDefault=rt.strGISReferenceTypeName
		WHERE 1=2 and  br.intRowStatus=0 and rt.intRowStatus =0
	ELSE
		SELECT
			l.node.GetLevel() AS Level,
			br.idfsGISReferenceType, 
			ISNULL(lang.Name,rt.strGISReferenceTypeName) AS strGISReferenceTypeName,
			br.idfsGISBaseReference AS idfsReference,
			ISNULL(snt.strTextString, br.strDefault) [Name],
			--l.Node,
			l.node.ToString() strNode,
			l.strHASC,
			l.strCode,
			l.idfsType LevelType
		FROM dbo.gisBaseReference AS br 
		INNER JOIN dbo.gisStringNameTranslation AS snt ON snt.idfsGISBaseReference = br.idfsGISBaseReference AND snt.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LangID)
		INNER JOIN dbo.gisLocation l ON l.idfsLocation = br.idfsGISBaseReference
		INNER JOIN dbo.gisReferenceType rt ON rt.idfsGISReferenceType = br.idfsGISReferenceType
		LEFT JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID,19000003) lang ON lang.strDefault=rt.strGISReferenceTypeName
		INNER JOIN @Parent_nodeTable pn  ON pn.node=l.node.GetAncestor(1)
		where  br.intRowStatus=0 and rt.intRowStatus =0
		ORDER BY Name
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_GIS_Location_CurrentLevel_Get]...';


GO


--*************************************************************************************************
-- Name: USP_GBL_GIS_Location_CurrentLevel_Get
--
-- Description: To get the Administrative level List for the required level
--
-- Revision History:
-- Name Date Change Detail
-- --------------- ---------- --------------------------------------------------------------------
-- Srini Goli 03/31/2021 Initial release.
-- Mark Wilson 07/16/2021 updated to use dbo objects
-- Mani 01/20/2022 Added Order By
-- Srini Goli Updated to Retrive data for All Contries also
-- Testing code:
/*
--For Current Country
EXEC USP_GBL_GIS_Location_CurrentLevel_Get 'ru', 0					-- Administrative Level 0 --Country
EXEC USP_GBL_GIS_Location_CurrentLevel_Get 'en-US', 1				-- Administrative Level 1 --Region
EXEC USP_GBL_GIS_Location_CurrentLevel_Get 'ru', 2					-- Administrative Level 2 --Rayon
EXEC USP_GBL_GIS_Location_CurrentLevel_Get 'az-Latn-AZ', 3			-- Administrative Level 3 --Settlement

--For ALL Contries
EXEC USP_GBL_GIS_Location_CurrentLevel_Get 'en-US', 0,1					-- Administrative Level 0 --Country
EXEC USP_GBL_GIS_Location_CurrentLevel_Get 'en-US', 1,1					-- Administrative Level 1 --Region
EXEC USP_GBL_GIS_Location_CurrentLevel_Get 'en-US', 2,1					-- Administrative Level 2 --Rayon
EXEC USP_GBL_GIS_Location_CurrentLevel_Get 'az-Latn-AZ', 3,1			-- Administrative Level 3 --Settlement

 Administrative Levels 5, 6, and 7 have not been integrated.

*/
-- ************************************************************************************************

ALTER PROCEDURE [dbo].[USP_GBL_GIS_Location_CurrentLevel_Get]
(
	@LangID NVARCHAR(10),
	@CurrentLevel INT,
	@AllCountries BIT = NULL  --Null for Specific Country, 1 for all Conuntries
)
AS
	DECLARE @CountryNodes TABLE(CountryNode HIERARCHYID)
	DECLARE		@idfsGISReferenceType BIGINT

	IF ISNUll(@AllCountries,0)=0
	BEGIN
		INSERT INTO @CountryNodes(CountryNode)
		SELECT node FROM gisLocation WHERE idfsLocation = dbo.FN_GBL_CURRENTCOUNTRY_GET()
	END
	ELSE
	BEGIN
		INSERT INTO @CountryNodes(CountryNode)
		SELECT node FROM gisLocation WHERE idfsLocation in  (SELECT  DISTINCT tcp1.idfsCountry
																FROM dbo.tstSite ts
																JOIN dbo.tstCustomizationPackage tcp1 
																ON tcp1.idfCustomizationPackage = ts.idfCustomizationPackage)
	END

	--SELECT CountryNode FROM @CountryNodes

	SELECT
			l.node.GetLevel() AS Level,
			br.idfsGISReferenceType, 
			ISNULL(lang.Name,rt.strGISReferenceTypeName) AS strGISReferenceTypeName,
			br.idfsGISBaseReference AS idfsReference,
			ISNULL(snt.strTextString, br.strDefault) [Name],
			--l.Node,
			l.node.ToString() strNode,
			strHASC,
			strCode
		FROM dbo.gisBaseReference AS br 
		INNER JOIN dbo.gisStringNameTranslation AS snt ON snt.idfsGISBaseReference = br.idfsGISBaseReference AND snt.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LangID)
		INNER JOIN dbo.gisLocation l ON l.idfsLocation = br.idfsGISBaseReference
		INNER JOIN dbo.gisReferenceType rt ON rt.idfsGISReferenceType = br.idfsGISReferenceType
		LEFT JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID,19000003) lang ON lang.strDefault=rt.strGISReferenceTypeName
	--WHERE l.node.GetLevel()=@CurrentLevel
	WHERE l.node.GetAncestor(@CurrentLevel) IN (SELECT CountryNode FROM @CountryNodes) and br.intRowStatus=0 and rt.intRowStatus =0
	ORDER BY Name
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_GIS_Location_LevelDetails_Get]...';


GO
--*************************************************************************************************
-- Name: USP_GBL_GIS_Location_Levels_Get
--
-- Description: To get the available levels
--
-- Revision History:
-- Name Date Change Detail
-- --------------- ---------- --------------------------------------------------------------------
-- Srini Goli 02/25/2021 Initial release.
-- Mark Wilson 07/16/2021 updated to use dbo artifacts
-- Mani 01/20/2022 Added order by

-- Testing code
/*
Exec [dbo].[USP_GBL_GIS_Location_LevelDetails_Get] 'en-US'
Exec [dbo].[USP_GBL_GIS_Location_LevelDetails_Get] 'en-US'

*/
-- ************************************************************************************************

ALTER PROCEDURE [dbo].[USP_GBL_GIS_Location_LevelDetails_Get](@LangID NVARCHAR(50))
AS
BEGIN
DECLARE @CountryNode HIERARCHYID
SELECT @CountryNode = node FROM gisLocation WHERE idfsLocation = dbo.FN_GBL_CURRENTCOUNTRY_GET()	
	
SELECT
			l.node.GetLevel() as Level,
			br.idfsGISReferenceType, 
			ISNULL(lang.Name,rt.strGISReferenceTypeName) as strGISReferenceTypeName,
			br.idfsGISBaseReference AS idfsReference,
			ISNULL(snt.strTextString, br.strDefault) [Name],
			--l.Node,
			l.node.ToString() strNode,
			strHASC,
			strCode
		FROM dbo.gisBaseReference AS br 
		INNER JOIN dbo.gisStringNameTranslation AS snt ON snt.idfsGISBaseReference = br.idfsGISBaseReference AND snt.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LangID)
		INNER JOIN dbo.gisLocation l ON l.idfsLocation = br.idfsGISBaseReference
		INNER JOIN dbo.gisReferenceType rt ON rt.idfsGISReferenceType = br.idfsGISReferenceType
		LEFT JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID,19000003) lang ON lang.strDefault=rt.strGISReferenceTypeName
WHERE  l.node.IsDescendantOf(@CountryNode) = 1 and br.intRowStatus=0 and rt.intRowStatus =0
order by name
END
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_GIS_Location_Levels_Get]...';


GO





--*************************************************************************************************
-- Name: USP_GBL_GIS_Location_Levels_Get
--
-- Description: To get the available levels
--
-- Revision History:
-- Name Date Change Detail
-- --------------- ---------- --------------------------------------------------------------------
-- Srini Goli 02/25/2021 Initial release.

-- Testing code
/*
Exec [dbo].[USP_GBL_GIS_Location_Levels_Get] 'en'
Exec [dbo].[USP_GBL_GIS_Location_Levels_Get] 'ru'
Exec [dbo].[USP_GBL_GIS_Location_Levels_Get] 'az-l'
*/
-- ************************************************************************************************

ALTER PROCEDURE [dbo].[USP_GBL_GIS_Location_Levels_Get] (@LangID AS NVARCHAR(10))
AS
BEGIN
DECLARE @CountryNode HIERARCHYID
SELECT @CountryNode = node FROM gisLocation WHERE idfsLocation = dbo.FN_GBL_CURRENTCOUNTRY_GET()	
	
SELECT DISTINCT
	l.node.GetLevel() AS Level,
	br.idfsGISReferenceType, 
	rt.strGISReferenceTypeName AS strDefault,
	ISNULL(lang.Name,rt.strGISReferenceTypeName) AS Name

FROM dbo.gisBaseReference AS br 
INNER JOIN dbo.gisLocation l ON l.idfsLocation = br.idfsGISBaseReference
INNER JOIN dbo.gisReferenceType rt ON rt.idfsGISReferenceType = br.idfsGISReferenceType
LEFT JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID,19000003) lang ON lang.strDefault=rt.strGISReferenceTypeName
WHERE  l.node.IsDescendantOf(@CountryNode) = 1 and br.intRowStatus=0 and rt.intRowStatus =0
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_HUMAN_MASTER_GETList]...';


GO
-- ================================================================================================
-- Name: USP_HUM_HUMAN_MASTER_GETList
--
-- Description: Get human actual list for human, laboratory and veterinary modules.
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mandar Kulkarni             Initial release.
-- Stephen Long     03/13/2018 Added additional address fields.
-- Stephen Long     08/23/2018 Added EIDSS person ID to list.
-- Stephen Long     09/26/2018 Added wildcard to the front of fields using the wildcard symbol, as 
--                             per use case.
-- Stephen Long		09/28/2018 Added order by and total records, as per use case.
-- Stephen Long     11/26/2018 Updated for the new API; removed returnCode and returnMsg. Total 
--                             records will need to be handled differently.
-- Stephen Long     12/14/2018 Added pagination set, page size and max pages per fetch parameters
--                             and fetch portion.
-- Stephen Long     12/30/2018 Renamed to master so the human get list stored procedure can query 
--                             the human table which is needed for the lab module instead of human 
--                             actual.
-- Stephen Long     01/18/2019 Changed date of birth to date of birth range, and duplicate check.
-- Stephen Long     04/08/2019 Changed full name from first name last name second name to last 
--                             name ', ' first name and then second name.
-- Stephen Long     07/07/2019 Added settlement ID and settlement name to select.
-- Ann Xiong	    10/29/2019 added PassportNumber to return
-- Ann Xiong		01/15/2020 Used humanAddress.strAddressString instead of 
--                             humanAddress.strForeignAddress for AddressString
-- Stephen Long     01/28/2021 Added order by clause to handle user selected sorting across 
--                             pagination sets.
-- Doug Albanese	06/11/2021 Refactored to conform to the new filtering requirements and return structure for our gridview.
-- Mark Wilson		10/05/2021 updated for changes to DOB rules, location udpates, etc...
-- Mark Wilson		10/26/2021 changed to nolock...
-- Ann Xiong		12/03/2021 Changed ha.datDateofBirth AS DateOfBirth to CONVERT(char(10), ha.datDateofBirth,126) AS DateOfBirth
-- Mike Kornegay	12/10/2021 Changed procedure to use denormailized location table function.
-- Mike Kornegay	01/12/2022 Swapped where condition referring to gisLocation for new flat location hierarchy and corrected ISNULL
--							   check on PersonalTypeID and fixed where statements on left joins.
-- Mike Kornegay	04/27/2022 Added AddressID and ContactPhoneNbrTypeID to revert fields after accidental alter.
-- Mike Kornegay	05/06/2022 Changed inner join to left join on FN_GBL_LocationHierarchy_Flattened so results return if location is not
--								in FN_GBL_LocationHierarchy_Flattened.
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Stephen Long     10/10/2022 Added monitoring session ID parameter and where criteria.
-- Ann Xiong		11/10/2022 Added SettlementTypeID parameter and where criteria. 
--
/*Test Code

EXEC dbo.USP_HUM_HUMAN_MASTER_GETList
	@LangID = 'en-US',
	@FirstOrGivenName = 'a',
--	@idfsLocation = 1344330000000 -- region = Baku
	@idfsLocation = 4720500000000  -- Rayon = Pirallahi (Baku)

EXEC dbo.USP_HUM_HUMAN_MASTER_GETList
	@LangID = 'en-US',
	@FirstOrGivenName = 'a',
    @DateOfBirthFrom = '2010-12-30 00:00:00.000',
    @DateOfBirthTo = '2012-12-30 00:00:00.000',
	--@idfsLocation = 1344330000000, -- region = Baku
	@idfsLocation = 1344380000000, -- Rayon = Khatai (Baku)
	@pageSize = 50000 
---------

DECLARE @return_value int

EXEC    @return_value = [dbo].[USP_HUM_HUMAN_MASTER_GETList]
        @LangID = N'en-US',
        @EIDSSPersonID = NULL,
        @PersonalIDType = NULL,
        @PersonalID = NULL,
        @FirstOrGivenName = 'a',
        @SecondName = NULL,
        @LastOrSurname = NULL,
        @DateOfBirthFrom = '1976-02-04 00:00:00.000',
        @DateOfBirthTo = '1980-02-04 00:00:00.000',
        @GenderTypeID = NULL,
		@idfsLocation = 1344330000000, -- region = Baku
        @pageNo = 1,
        @pageSize = 10,
        @sortColumn = N'EIDSSPersonID',
        @sortOrder = N'asc'

SELECT  @return_value
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_HUMAN_MASTER_GETList]
(
    @LangID NVARCHAR(50),
    @EIDSSPersonID NVARCHAR(200) = NULL,
    @PersonalIDType BIGINT = NULL,
    @PersonalID NVARCHAR(100) = NULL,
    @FirstOrGivenName NVARCHAR(200) = NULL,
    @SecondName NVARCHAR(200) = NULL,
    @LastOrSurname NVARCHAR(200) = NULL,
    @DateOfBirthFrom DATETIME = NULL,
    @DateOfBirthTo DATETIME = NULL,
    @GenderTypeID BIGINT = NULL,
    @idfsLocation BIGINT = NULL,
    @MonitoringSessionID BIGINT = NULL,
    @SettlementTypeID BIGINT = NULL,
    @pageNo INT = 1,
    @pageSize INT = 10,
    @sortColumn NVARCHAR(30) = 'EIDSSPersonID',
    @sortOrder NVARCHAR(4) = 'DESC'
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @firstRec INT
        DECLARE @lastRec INT

        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        DECLARE @DOB DATETIME = NULL

        IF (@DateOfBirthTo IS NOT NULL AND @DateOfBirthTo = @DateOfBirthFrom)
            SET @DOB = @DateOfBirthFrom

        SET @firstRec = (@pageNo - 1) * @pagesize
        SET @lastRec = (@pageNo * @pageSize + 1);

        WITH CTEResults
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @sortColumn = 'EIDSSPersonID'
                                                        AND @SortOrder = 'asc' THEN
                                                       hai.EIDSSPersonID
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'EIDSSPersonID'
                                                        AND @SortOrder = 'desc' THEN
                                                       hai.EIDSSPersonID
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'LastOrSurname'
                                                        AND @SortOrder = 'asc' THEN
                                                       ha.strLastName
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'LastOrSurname'
                                                        AND @SortOrder = 'desc' THEN
                                                       ha.strLastName
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'FirstOrGivenName'
                                                        AND @SortOrder = 'asc' THEN
                                                       ha.strFirstName
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'FirstOrGivenName'
                                                        AND @SortOrder = 'desc' THEN
                                                       ha.strFirstName
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'PersonalID'
                                                        AND @SortOrder = 'asc' THEN
                                                       ha.strPersonID
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'PersonalID'
                                                        AND @SortOrder = 'desc' THEN
                                                       ha.strPersonID
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'PersonIDTypeName'
                                                        AND @SortOrder = 'asc' THEN
                                                       idType.name
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'PersonIDTypeName'
                                                        AND @SortOrder = 'desc' THEN
                                                       idType.name
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'PassportNumber'
                                                        AND @SortOrder = 'asc' THEN
                                                       hai.PassportNbr
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'PassportNumber'
                                                        AND @SortOrder = 'desc' THEN
                                                       hai.PassportNbr
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'GenderTypeName'
                                                        AND @SortOrder = 'asc' THEN
                                                       genderType.name
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'GenderTypeName'
                                                        AND @SortOrder = 'desc' THEN
                                                       genderType.name
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'RayonName'
                                                        AND @SortOrder = 'asc' THEN
                                                       LH.AdminLevel3Name
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'RayonName'
                                                        AND @SortOrder = 'desc' THEN
                                                       LH.AdminLevel3Name
                                               END DESC,
                                               CASE
                                                   WHEN @sortColumn = 'DateOfBirth'
                                                        AND @SortOrder = 'asc' THEN
                                                       ha.datDateofBirth
                                               END ASC,
                                               CASE
                                                   WHEN @sortColumn = 'DateOfBirth'
                                                        AND @SortOrder = 'desc' THEN
                                                       ha.datDateofBirth
                                               END DESC
                                     ) AS ROWNUM,
                   COUNT(*) OVER () AS TotalRowCount,
                   ha.idfHumanActual AS HumanMasterID,
                   hai.EIDSSPersonID AS EIDSSPersonID,
                   ha.idfCurrentResidenceAddress AS AddressID,
                   ha.strFirstName AS FirstOrGivenName,
                   ha.strSecondName AS SecondName,
                   ha.strLastName AS LastOrSurname,
                   dbo.FN_GBL_ConcatFullName(ha.strLastName, ha.strFirstName, ha.strSecondName) AS FullName,
                   CONVERT(CHAR(10), ha.datDateofBirth, 126) AS DateOfBirth,
                   ha.strPersonID AS PersonalID,
                   ISNULL(idType.[name], idType.strDefault) AS PersonIDTypeName,
                   humanAddress.strStreetName AS StreetName,
                   dbo.FN_GBL_CreateAddressString(
                                                     LH.AdminLevel1Name,
                                                     LH.AdminLevel2Name,
                                                     LH.AdminLevel3Name,
                                                     humanAddress.strPostCode,
                                                     '',
                                                     LH.AdminLevel4Name,
                                                     humanAddress.strStreetName,
                                                     humanAddress.strHouse,
                                                     humanAddress.strBuilding,
                                                     humanAddress.strApartment,
                                                     humanAddress.blnForeignAddress,
                                                     ''
                                                 ) AS AddressString,
                   (CONVERT(NVARCHAR(100), humanAddress.dblLatitude) + ', '
                    + CONVERT(NVARCHAR(100), humanAddress.dblLongitude)
                   ) AS LongitudeLatitude,
                   hai.ContactPhoneCountryCode AS ContactPhoneCountryCode,
                   hai.ContactPhoneNbr AS ContactPhoneNumber,
                   hai.ContactPhoneNbrTypeID AS ContactPhoneNbrTypeID,
                   hai.ReportedAge AS Age,
                   hai.PassportNbr AS PassportNumber,
                   ha.idfsNationality AS CitizenshipTypeID,
                   citizenshipType.[name] AS CitizenshipTypeName,
                   ha.idfsHumanGender AS GenderTypeID,
                   genderType.[name] AS GenderTypeName,
                   humanAddress.idfsCountry AS CountryID,
                   LH.AdminLevel1Name AS CountryName,
                   LH.AdminLevel2ID AS RegionID,
                   LH.AdminLevel2Name AS RegionName,
                   LH.AdminLevel3ID AS RayonID,
                   LH.AdminLevel3Name AS RayonName,
                   humanAddress.idfsSettlement AS SettlementID,
                   LH.AdminLevel4Name AS SettlementName,
                   dbo.FN_GBL_CreateAddressString(
                                                     LH.AdminLevel1Name,
                                                     LH.AdminLevel2Name,
                                                     LH.AdminLevel3Name,
                                                     '',
                                                     '',
                                                     '',
                                                     '',
                                                     '',
                                                     '',
                                                     '',
                                                     humanAddress.blnForeignAddress,
                                                     humanAddress.strForeignAddress
                                                 ) AS FormattedAddressString
            FROM dbo.tlbHumanActual AS ha WITH (NOLOCK)
                INNER JOIN dbo.HumanActualAddlInfo hai WITH (NOLOCK)
                    ON ha.idfHumanActual = hai.HumanActualAddlInfoUID
                       AND hai.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000043) AS genderType
                    ON ha.idfsHumanGender = genderType.idfsReference
                       AND genderType.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000148) AS idType
                    ON ha.idfsPersonIDType = idType.idfsReference
                       AND idType.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000054) AS citizenshipType
                    ON ha.idfsNationality = citizenshipType.idfsReference
                       AND citizenshipType.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocationShared humanAddress WITH (NOLOCK)
                    ON ha.idfCurrentResidenceAddress = humanAddress.idfGeoLocationShared
                       AND humanAddress.intRowStatus = 0
                LEFT JOIN dbo.gisLocation L WITH (NOLOCK)
                    ON L.idfsLocation = humanAddress.idfsLocation
                LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LangID) LH
                    ON LH.idfsLocation = L.idfsLocation
            WHERE (
                      ha.intRowStatus = 0
                      AND hai.intRowStatus = 0
                      AND (
                              (
                                  @idfsLocation IS NOT NULL
                                  AND (
                                          LH.AdminLevel1ID = @idfsLocation
                                          OR LH.AdminLevel2ID = @idfsLocation
                                          OR LH.AdminLevel3ID = @idfsLocation
                                          OR LH.AdminLevel4ID = @idfsLocation
                                          OR LH.AdminLevel5ID = @idfsLocation
                                          OR LH.AdminLevel6ID = @idfsLocation
                                          OR LH.AdminLevel7ID = @idfsLocation
                                      )
                              )
                              OR (@idfsLocation IS NULL)
                          )
                      AND (
                              (
                                  @SettlementTypeID IS NOT NULL
                                  AND L.idfsType = @SettlementTypeID
                              )
                              OR (@SettlementTypeID IS NULL)
                          )
                      AND (
                              @DOB = ha.datDateofBirth
                              OR @DateOfBirthFrom IS NULL
                              OR (ha.datDateofBirth
                  BETWEEN @DateOfBirthFrom AND @DateOfBirthTo
                                 )
                          )
                      AND (
                              (
                                  @EIDSSPersonID IS NOT NULL
                                  AND hai.EIDSSPersonID LIKE '%' + @EIDSSPersonID + '%'
                              )
                              OR (@EIDSSPersonID IS NULL)
                          )
                      AND (
                              (
                                  @PersonalID IS NOT NULL
                                  AND ha.strPersonID LIKE '%' + @PersonalID + '%'
                              )
                              OR (@PersonalID IS NULL)
                          )
                      AND (
                              (
                                  @FirstOrGivenName IS NOT NULL
                                  AND ha.strFirstName LIKE '%' + @FirstOrGivenName + '%'
                              )
                              OR (@FirstOrGivenName IS NULL)
                          )
                      AND (
                              (
                                  @SecondName IS NOT NULL
                                  AND ha.strSecondName LIKE '%' + @SecondName + '%'
                              )
                              OR (@SecondName IS NULL)
                          )
                      AND (
                              (
                                  @LastOrSurname IS NOT NULL
                                  AND ha.strLastName LIKE '%' + @LastOrSurname + '%'
                              )
                              OR (@LastOrSurname IS NULL)
                          )
                      AND (
                              (
                                  @PersonalIDType IS NOT NULL
                                  AND idType.idfsReference = @PersonalIDType
                              )
                              OR (@PersonalIDType IS NULL)
                          )
                      AND (
                              (
                                  @GenderTypeID IS NOT NULL
                                  AND genderType.idfsReference = @GenderTypeID
                              )
                              OR (@GenderTypeID IS NULL)
                          )
                      AND (
                              EXISTS
            (
                SELECT h.idfHuman
                FROM dbo.tlbHuman h 
				INNER JOIN dbo.tlbMaterial m ON m.idfHuman = h.idfHuman 
                WHERE h.idfHumanActual = ha.idfHumanActual
                      AND m.idfMonitoringSession = @MonitoringSessionID
            )
                              OR @MonitoringSessionID IS NULL
                          )
                  )
           )
        SELECT TotalRowCount,
               HumanMasterID,
               EIDSSPersonID,
               AddressID,
               FirstOrGivenName,
               SecondName,
               LastOrSurname,
               FullName,
               DateOfBirth,
               PersonalID,
               PersonIDTypeName,
               StreetName,
               AddressString,
               LongitudeLatitude,
               ContactPhoneCountryCode,
               ContactPhoneNumber,
               ContactPhoneNbrTypeID,
               Age,
               PassportNumber,
               CitizenshipTypeID,
               CitizenshipTypeName,
               GenderTypeID,
               GenderTypeName,
               CountryID,
               CountryName,
               RegionID,
               RegionName,
               RayonID,
               RayonName,
               SettlementID,
               SettlementName,
               FormattedAddressString,
               TotalPages = (TotalRowCount / @pageSize) + IIF(TotalRowCount % @pageSize > 0, 1, 0),
               CurrentPage = @pageNo
        FROM CTEResults
        WHERE RowNum > @firstRec
              AND RowNum < @lastRec
        OPTION (RECOMPILE);
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_TESTS_GetList]...';


GO
-- ================================================================================================
-- Name: USP_HUM_TESTS_GetList
--
-- Description: List human disease report tests by human disease report identifier.
--          
-- Author: JWJ
--
-- Revision History:
-- Name	            Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- JWJ				20180603   created 
-- HAP				2018110    Added strTestResult field to result set 
-- HAP              20181109   Added TestValidation fields to result set 
-- LJM				20201230   Added strTestedByPerson and strTestedByOffice as output 
--                             parameters
-- LJM				20210105   Added strTestCategory and blnNonLaboratoryTest, 
--                             idfInterpretedByPerson,idfValidatedByPerson as output parameters.
-- Leo Tracchia		10/21/2022 Fix for properly deleting tests for human disease report DevOps 
--                             defect 5006
-- Stephen Long     01/04/2023 Added check for deleted test status.  Fixed main table to be
--                             tlbTesting and not the material table.  Changed to join.
-- Doug Albanese    01/06/2023 Removed the coalescing of null values on Interpreted and Validated 
--                             dates. They have to be done on the application side.
-- Stephen Long     01/09/2023 Fix to show the validated by person from tlbTesting when the test 
--                             record was created and updated from the laboratory module.
--
-- Testing code:
-- EXEC USP_HUM_TESTS_GetList 'en', @idfHumanCase=19  --10
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_TESTS_GetList]
    @LangID NVARCHAR(50),
    @idfHumanCase BIGINT = NULL,
    @SearchDiagnosis BIGINT = NULL
AS
BEGIN
    BEGIN TRY
        SELECT Samples.idfHumanCase,
               Samples.idfMaterial,
               Samples.strBarcode,          -- Lab sample ID
               Samples.strFieldBarcode,     -- Local Sample ID
               Samples.idfsSampleType,
               SampleType.name AS strSampleTypeName,
               Samples.datFieldCollectionDate,
               Samples.idfSendToOffice,
               OfficeSendTo.[name] AS strSendToOffice,
               Samples.idfFieldCollectedByOffice,
               CollectedByOffice.name AS strFieldCollectedByOffice,
               Samples.datFieldSentDate,
               Samples.idfsSampleKind,
               sampleKind.name AS SampleKindTypeName,
               Samples.idfsSampleStatus,
               sampleStatus.name AS SampleStatusTypeName,
               Samples.idfFieldCollectedByPerson,
               Samples.datSampleStatusDate, --verify this is the result date
               Samples.rowGuid AS sampleGuid,
               t.idfTesting,
               t.idfsTestName,
               t.idfsTestCategory,
               testCat.name AS strTestCategory,
               t.idfsTestResult,
               t.idfsTestStatus,
               t.idfsDiagnosis,
               (
                   select strDefault
                   from trtbasereference
                   where idfsbasereference = t.idfsDiagnosis
               ) AS 'strDiagnosis',
               tstatus.name AS strTestStatus,
               tresult.name AS strTestResult,
               TestName.name,
               t.datReceivedDate,
               t.datConcludedDate,
               t.idfTestedByPerson,
               t.idfTestedByOffice,
               --ISNULL(tv.datInterpretationDate, GETDATE()) AS datInterpretedDate, --can't assigg a value here. It's to be determined on the application side
			   tv.datInterpretationDate AS datInterpretedDate,
               tv.idfsInterpretedStatus,
               testinterpretedstatus.name AS strInterpretedStatus,
               tv.strInterpretedComment,
               p.strFamilyName AS strInterpretedBy,
               --ISNULL(tv.datValidationDate, GETDATE()) AS datValidationDate, --can't assigg a value here. It's to be determined on the application side
               CASE WHEN t.blnNonLaboratoryTest = 0 THEN
                   t.datConcludedDate
               ELSE
    			   tv.datValidationDate END AS datValidationDate,
               CASE WHEN t.blnNonLaboratoryTest = 0 THEN
                   CASE WHEN t.datConcludedDate IS NOT NULL THEN
                       CONVERT(BIT, 1)
                   ELSE CONVERT(BIT, 0)
 
                   END
               ELSE
                   ISNULL(tv.blnValidateStatus, 0) END AS blnValidateStatus,
               tv.strValidateComment,
               CASE WHEN t.blnNonLaboratoryTest = 0 THEN
                   ISNULL(validatedByPerson.strFamilyName, N'') + ISNULL(', ' + validatedByPerson.strFirstName, N'')
                   + ISNULL(' ' + validatedByPerson.strSecondName, N'')
               ELSE
                   p.strFamilyName END AS strValidatedBy,
               u.strAccountName,
               t.rowGuid AS testGuid,
               t.intRowStatus,
               testedbyPerson.strFirstName + ' ' + ISNULL(testedbyPerson.strSecondName, '') + '  '
               + testedbyPerson.strFamilyName AS strTestedByPerson,
               testedByOffice.FullName AS strTestedByOffice,
               ISNULL(t.blnNonLaboratoryTest, 0) AS blnNonLaboratoryTest,
               tv.idfInterpretedByPerson,
               CASE WHEN t.blnNonLaboratoryTest = 0 THEN
                   t.idfValidatedByPerson
                ELSE 
               tv.idfValidatedByPerson END AS idfValidatedByPerson,
               tv.idfTestValidation
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial Samples
                ON Samples.idfMaterial = t.idfMaterial
            INNER JOIN dbo.tlbHumanCase hc
                ON Samples.idfHumanCase = hc.idfHumanCase
            INNER JOIN dbo.FN_GBL_REFERENCEREPAIR(@LangID, 19000087) SampleType
                ON SampleType.idfsReference = Samples.idfsSampleType
            LEFT JOIN dbo.tlbGeoLocation Location
                ON Location.idfGeoLocation = hc.idfPointGeoLocation
            LEFT JOIN FN_GBL_GIS_Reference(@LangID, 19000003) Region
                ON Region.idfsReference = Location.idfsRegion
            LEFT JOIN FN_GBL_GIS_Reference(@LangID, 19000002) Rayon
                ON Rayon.idfsReference = Location.idfsRayon
            LEFT JOIN tlbMaterial ParentSample
                ON ParentSample.idfMaterial = Samples.idfParentMaterial
                   AND ParentSample.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_INSTITUTION(@LangID) CollectedByOffice
                ON CollectedByOffice.idfOffice = Samples.idfFieldCollectedByOffice
            LEFT JOIN dbo.FN_GBL_INSTITUTION(@LangID) OfficeSendTo
                ON OfficeSendTo.idfOffice = Samples.idfSendToOffice
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000158) sampleKind
                ON sampleKind.idfsReference = Samples.idfsSampleKind
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000015) sampleStatus
                ON sampleStatus.idfsReference = Samples.idfsSampleStatus
            LEFT JOIN dbo.FN_GBL_REFERENCEREPAIR(@LangID, 19000097) TestName
                ON TestName.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000001) tstatus
                ON tstatus.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000096) tresult
                ON tresult.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.tlbTestValidation tv
                ON tv.idfTesting = t.idfTesting
                   AND tv.intRowStatus = 0
            LEFT JOIN dbo.tstUserTable u
                ON (
                       tv.idfInterpretedByPerson = u.idfPerson
                       or tv.idfValidatedByPerson = u.idfPerson
                   )
                   and u.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson p
                ON (
                       p.idfPerson = tv.idfInterpretedByPerson
                       or p.idfPerson = tv.idfValidatedByPerson
                   )
                   and p.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson testedbyPerson
                ON (testedbyPerson.idfPerson = t.idfTestedByPerson)
            LEFT JOIN dbo.FN_GBL_INSTITUTION(@LangID) testedByOffice
                ON testedByOffice.idfOffice = t.idfTestedByOffice
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000095) testCat
                ON testCat.idfsReference = t.idfsTestCategory
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000106) testinterpretedstatus
                ON testinterpretedstatus.idfsReference = tv.idfsInterpretedStatus
            LEFT JOIN dbo.tlbPerson validatedByPerson
                ON (validatedByPerson.idfPerson = t.idfValidatedByPerson)
        WHERE Samples.idfHumanCase = @idfHumanCase
              AND Samples.intRowStatus = 0
              and t.idfHumanCase is not null
              AND t.intRowStatus = 0
              AND t.idfsTestStatus <> 10001007; -- Deleted
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_OMM_Case_Set]...';


GO
-- ================================================================================================
-- Name: [USP_OMM_Case_Set]
-- Description: Insert/Update for Outbreak Case
--          
-- Author: Doug Albanese
-- Revision History
--	Name			Date		Change Detail
--  Doug Albanese	5/21/2020	Moved the Case Monitoring SP call to this SP from USP_OMM_HUMAN_DISEASE_SET
--	Doug Albanese	10/12/2020	Corrected Audit information
--	Doug Albanese	10/01/2021	Cleaned up and prepped for EF
--	Doug Albanese	04/19/2022	Refactored to use location hierarchy
--	Doug Albanese	04/21/2022	Formatted and some refactoring
--	Doug Albanese	04/27/2022	Refactored paramters to eliminate unused 
--	Doug Albanese	04/28/2022	Further Clean up to align with json array detection
--	Doug Albanese	04/30/2022	Added idfHumanCase to contacts USSP
--	Doug Albanese	05/02/2022	Refactored Antimicrobial
--	Doug Albanese	05/06/2022	Corrected "Start Date of Investigation"...wrong parameter used previously
--	Doug Albanese	05/06/2022	Corrected Street/Postalcode data types
--  Stephen Long    05/21/2022  Fix to idfsSite on call to USP_ADMIN_FF_COPY_OBSERVATION.
--                              Added begin transaction and commit transaction.
--	Doug Albanese	05/23/2022	Supression on USSP_OMM_CONTACT_SET was nested too deep. Using Functional Call only to get around
--	Doug Albanese	06/01/2022	Removal of transaction block to allow nested calls to function properly.
--	Doug Albanese	07/01/2022	Changes to fix the Copy process of an observation and flex form template for use within an outbreak case
-- Stephen Long     07/18/2022  Added site alert logic.
-- Doug Albanese    09/22/2022  Removed supression on USP_ADMIN_FF_Copy_Observation
-- Doug Albanese    10/19/2022  Corrected the "@StartDateofInvestigation" to have the right parameter passed.
-- Doug Albanese    10/25/2022  Put the Case Questionnnaire in the right location on the Outbreak Case Report side.
-- Doug Albanese    12/29/2022  Added Return Message to denote the use of an imported diseased report to an outbreak.
-- Doug Albanese    01/06/2023  Removed the copy process for the "clinical signs" flex form for the moment. It is causing POCO issues
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_OMM_Case_Set]
(
    @LangID NVARCHAR(50),
    @intRowStatus INT = 0,
    @User NVARCHAR(100) = NULL,

    --Outbreak Case Details
    @OutbreakCaseReportUID BIGINT = -1,
    @idfOutbreak BIGINT = NULL,
    @idfHumanCase BIGINT = -1,
    @idfVetCase BIGINT = NULL,
    @OutbreakCaseObservationID BIGINT = NULL,

    --Human Disease related items for creation
    @idfHumanActual BIGINT = -1,
    @idfsDiagnosisOrDiagnosisGroup BIGINT = -1,

    --Notification
    @datNotificationDate DATETIME = NULL,
    @idfSentByOffice BIGINT = NULL,
    @idfSentByPerson BIGINT = NULL,
    @idfReceivedByOffice BIGINT = NULL,
    @idfReceivedByPerson BIGINT = NULL,

    --Case Location
    @CaseGeoLocationID BIGINT = NULL,
    @CaseidfsLocation BIGINT = NULL,
    @CasestrStreetName NVARCHAR(200) = NULL,
    @CasestrApartment NVARCHAR(200) = NULL,
    @CasestrBuilding NVARCHAR(200) = NULL,
    @CasestrHouse NVARCHAR(200) = NULL,
    @CaseidfsPostalCode NVARCHAR(200) = NULL,
    @CasestrLatitude FLOAT = NULL,
    @CasestrLongitude FLOAT = NULL,
    @CasestrElevation FLOAT = NULL,

    --Clinical Information
    @CaseStatusID BIGINT = NULL,
    @datOnSetDate DATETIME = NULL,
    @datFinalDiagnosisDate DATETIME = NULL,
    @idfHospital BIGINT = NULL,
    @datHospitalizationDate DATETIME = NULL,
    @datDischargeDate DATETIME = NULL,
    @Antimicrobials NVARCHAR(MAX) = NULL,
    @vaccinations NVARCHAR(MAX) = NULL,
    @strClinicalNotes NVARCHAR(500) = NULL,
    @idfsYNHospitalization BIGINT = NULL,
    @idfsYNAntimicrobialTherapy BIGINT = NULL,
    @idfsYNSpecIFicVaccinationAdministered BIGINT = NULL,
    @StartDateofInvestigation DATETIME = NULL,
    @idfCSObservation BIGINT = NULL,

    --Outbreak Investigation
    @OutbreakCaseClassificationID BIGINT = NULL,
    @idfInvestigatedByOffice BIGINT = NULL,
    @idfInvestigatedByPerson BIGINT = NULL,
    @datInvestigationStartDate DATETIME = NULL,
    @IsPrimaryCaseFlag NVARCHAR(1) = NULL,
    @strNote NVARCHAR(500) = NULL,
    @idfEpiObservation BIGINT = NULL,

    --Case Monitoring
    @CaseMonitorings NVARCHAR(MAX) = NULL,

    --Contacts
    @CaseContacts NVARCHAR(MAX) = NULL,

    --Samples
    @idfsYNSpecimenCollected BIGINT = NULL,
    @CaseSamples NVARCHAR(MAX) = NULL,

    --Tests
    @idfsYNTestsConducted BIGINT = NULL,
    @CaseTests NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL
)
AS
BEGIN
    DECLARE @returnCode INT = 0
    DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS'
    DECLARE @SiteID BIGINT = (
                                 SELECT idfsSite FROM dbo.tlbOutbreak WHERE idfOutbreak = @idfOutbreak
                             )
    DECLARE @outbreakLocation BIGINT = NULL
    DECLARE @strHospitalizationPlace NVARCHAR(200)
    DECLARE @idfHuman BIGINT = NULL
    DECLARE @strHumanCaseId NVARCHAR(200)
    DECLARE @idfsFinalState BIGINT = NULL

    DECLARE @idfContactCasePerson BIGINT
    DECLARE @ContactRelationshipTypeID BIGINT
    DECLARE @DateOfLastContact DATETIME
    DECLARE @datDateOfLastContact DATETIME2
    DECLARE @PlaceOfLastContact NVARCHAR(200)
    DECLARE @ContactStatusID BIGINT
    DECLARE @DateOfLastContact2 VARCHAR(10)
    DECLARE @idfsPersonContactType BIGINT
    DECLARE @idfContactedCasePerson BIGINT
    DECLARE @SQL VARCHAR(MAX)
    DECLARE @RowID BIGINT = NULL
    DECLARE @OutbreakCaseContactUID BIGINT = NULL
    DECLARE @ContactComments NVARCHAR(200) = NULL
    DECLARE @ContactTypeID BIGINT = NULL

    DECLARE @PrepCollections INT = 0
    DECLARE @ExecuteHumanSP INT = 0
    DECLARE @CreateOutbreakCase INT = 0
    DECLARE @ExecuteVetSP INT = 0
    DECLARE @HumanSamplesTemp NVARCHAR(MAX) = NULL
    DECLARE @HumanContactsTemp NVARCHAR(MAX) = NULL

    DECLARE @idfsFormTemplate BIGINT
    DECLARE @idfsFormTemplateNew BIGINT

    DECLARE @strCaseID NVARCHAR(50) = NULL
    DECLARE @idfObservation BIGINT = NULL

    DECLARE @EventId BIGINT,
            @EventTypeId BIGINT = NULL,
            @EventSiteId BIGINT = NULL,
            @EventObjectId BIGINT = NULL,
            @EventUserId BIGINT = NULL,
            @EventDiseaseId BIGINT = NULL,
            @EventLocationId BIGINT = NULL,
            @EventInformationString NVARCHAR(MAX) = NULL,
            @EventLoginSiteId BIGINT = NULL;

    DECLARE @EventsTemp TABLE
    (
        EventId BIGINT NOT NULL,
        EventTypeId BIGINT NULL,
        UserId BIGINT NULL,
        SiteId BIGINT NULL,
        LoginSiteId BIGINT NULL,
        ObjectId BIGINT NULL,
        DiseaseId BIGINT NULL,
        LocationId BIGINT NULL,
        InformationString NVARCHAR(MAX) NULL
    );

    SET NOCOUNT ON

    BEGIN TRY
        --BEGIN TRANSACTION;

        if (@idfCSObservation = 0)
            SET @idfCSObservation = NULL

        --Because of the JSON Table data being passed, the value of NULL is converted to a string. In these cases, they must be set to a True NULL
        IF (@Antimicrobials = 'NULL' OR @Antimicrobials = '[]')
            SET @Antimicrobials = NULL
        IF (@vaccinations = 'NULL' OR @vaccinations = '[]')
            SET @vaccinations = NULL
        IF (@CaseMonitorings = 'NULL' OR @CaseMonitorings = '[]')
            SET @CaseMonitorings = NULL
        IF (@CaseContacts = 'NULL' OR @CaseContacts = '[]')
            SET @CaseContacts = NULL
        IF (@CaseSamples = 'NULL' OR @CaseSamples = '[]')
            SET @CaseSamples = NULL
        IF (@CaseTests = 'NULL' OR @CaseTests = '[]')
            SET @CaseTests = NULL

        --Table calls for NCHAR, but we are going to need an integer to convert into boolean
        IF (@IsPrimaryCaseFlag = 't')
        BEGIN
            SET @IsPrimaryCaseFlag = 1
        END
        ELSE
        BEGIN
            SET @IsPrimaryCaseFlag = 0
        END

        Declare @SupressSelect table
        (
            retrunCode int,
            returnMsg varchar(200)
        )

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        --This condition was added later, after I found out that I created a bad architecture
        IF @idfVetCase IS NOT NULL
        BEGIN
            SET @ExecuteVetSP = 1

            IF EXISTS
            (
                SELECT OutBreakCaseReportUID
                FROM dbo.OutbreakCaseReport
                WHERE OutBreakCaseReportUID = @OutBreakCaseReportUID
            )
            BEGIN
                --Case is already created
                --This can only be an update of information across the outbreak and human case elements.
                UPDATE dbo.OutbreakCaseReport
                SET idfOutbreak = @idfOutbreak,
                    OutbreakCaseObservationID = @OutbreakCaseObservationID,
                    OutbreakCaseStatusID = @CaseStatusID,
                    OutbreakCaseClassificationID = @OutbreakCaseClassificationID,
                    IsPrimaryCaseFlag = @IsPrimaryCaseFlag,
                    intRowStatus = @intRowStatus,
                    AuditUpdateUser = @User,
                    AuditUpdateDTM = GETDATE()
                WHERE OutBreakCaseReportUID = @OutBreakCaseReportUID

            END
            ELSE
            BEGIN
                --At this point, the outbreak case doesn't exist.
                --This means, it could be an import or a creation from the outbreak side.
                --regardless of this situation, we need to get an idea for the Outbreak case being created.
                INSERT INTO @SupressSelect
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'OutbreakCaseReport',
                                               @OutBreakCaseReportUID OUTPUT;

                DECLARE @strOutbreakCaseID NVARCHAR(200)

                --If a human case id was passed, we are performing an import
                IF @idfVetCase IS NOT NULL
                   AND @idfVetCase <> -1
                BEGIN
                    --To keep duplicate imports from occuring, check to make sure a record doesn't already exist within the case listing of the outbreak session
                    IF NOT EXISTS
                    (
                        SELECT OutBreakCaseReportUID
                        FROM dbo.OutbreakCaseReport
                        WHERE idfOutbreak = @idfOutbreak
                              AND idfVetCase = @idfVetCase
                              AND intRowStatus = 0
                    )
                    BEGIN
                        INSERT INTO @SupressSelect
                        EXEC dbo.USP_GBL_NextNumber_GET 'Vet Outbreak Case',
                                                        @strOutbreakCaseID OUTPUT,
                                                        NULL;

                        INSERT INTO dbo.OutbreakCaseReport
                        (
                            OutbreakCaseReportUID,
                            idfOutbreak,
                            strOutbreakCaseID,
                            --idfHumanCase,
                            idfVetCase,
                            OutbreakCaseObservationId,
                            OutbreakCaseStatusId,
                            OutbreakCaseClassificationID,
                            isPrimaryCaseFlag,
                            introwStatus,
                            AuditCreateUser,
                            AuditCreateDTM,
                            AuditUpdateUser,
                            AuditUpdateDTM
                        )
                        VALUES
                        (   @OutBreakCaseReportUID,
                            @idfOutbreak,
                            @strOutbreakCaseID,
                            --NULL,
                            @idfVetCase,
                            @idfEpiObservation,
                            @CaseStatusID,
                            @OutbreakCaseClassificationID,
                            @IsPrimaryCaseFlag,
                            0,
                            @User,
                            GETDATE(),
                            NULL,
                            NULL
                        )
                    END
                    --Tie the outbreak case and the human case together, using the outbreak session id (idfOutbreak)
                    --This will complete the import process, as all information pertain to the case will now be
                    --joined in a "getdetails", when retrieved on the outbreak side.
                    UPDATE dbo.tlbVetCase
                    SET idfOutbreak = @idfOutbreak
                    WHERE idfVetCase = @idfVetCase

                    SELECT @idfObservation = idfObservation
                    FROM dbo.tlbVetCase
                    WHERE idfVetCase = @idfVetCase

                    --INSERT INTO @SupressSelect
                    EXEC dbo.USP_ADMIN_FF_Copy_Observation @idfObservation = @idfObservation,
                                                           @User = @User,
                                                           @idfsSite = @SiteID
                    UPDATE dbo.OutbreakCaseReport
                    SET OutbreakCaseObservationID = @idfObservation
                    WHERE OutBreakCaseReportUID = @OutBreakCaseReportUID
                END
            END
        END
        ELSE
        BEGIN
            IF EXISTS
            (
                SELECT OutBreakCaseReportUID
                FROM dbo.OutbreakCaseReport
                WHERE OutBreakCaseReportUID = @OutBreakCaseReportUID
            )
            BEGIN
                --Case is already created
                --This can only be an update of information across the outbreak and human case elements.
                UPDATE dbo.OutbreakCaseReport
                SET idfOutbreak = @idfOutbreak,
                    OutbreakCaseObservationID = @OutbreakCaseObservationID,
                    OutbreakCaseStatusID = @CaseStatusID,
                    OutbreakCaseClassificationID = @OutbreakCaseClassificationID,
                    IsPrimaryCaseFlag = @IsPrimaryCaseFlag,
                    intRowStatus = @intRowStatus,
                    AuditUpdateUser = @User,
                    AuditUpdateDTM = GETDATE()
                WHERE OutBreakCaseReportUID = @OutBreakCaseReportUID

                SET @PrepCollections = 1
                SET @ExecuteHumanSP = 1
            END
            ELSE
            BEGIN
                --At this point, the outbreak case doesn't exist.
                --This means, it could be an import or a creation from the outbreak side.

                --regardless of this situation, we need to get an id for the Outbreak case being created.
                INSERT INTO @SupressSelect
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'OutbreakCaseReport',
                                               @OutBreakCaseReportUID OUTPUT;

                --If a human case id was passed, we are performing an import
                IF @idfHumanCase IS NOT NULL
                   AND @idfHumanCase <> -1
                BEGIN
                    IF EXISTS
                    (
						SELECT
						   1
						FROM 
						   tlbHumanCase
						WHERE 
						   (idfOutbreak IS NULL OR idfOutbreak = NULL) AND
						   idfHumanCase = @idfHumanCase
                    )
					   BEGIN
						   --It doesn't exist, so we need to create a case "smart id", on the outbreak side, for the item being imported.
						   INSERT INTO @SupressSelect
						   EXEC dbo.USP_GBL_NextNumber_GET 'Human Outbreak Case',
														   @strOutbreakCaseID OUTPUT,
														   NULL;

						   --Generate a shell record in the case table to denote the item from the human case being imported
						   --Below is the minimal amount of fields needed to create the case. All other information will be entered
						   --during the editing phase
						   INSERT INTO dbo.OutbreakCaseReport
						   (
							   OutBreakCaseReportUID,
							   idfOutbreak,
							   strOutbreakCaseID,
							   idfHumanCase,
							   intRowStatus,
							   AuditCreateUser,
							   AuditCreateDTM,
							   AuditUpdateUser,
							   AuditUpdateDTM
						   )
						   VALUES
						   (@OutBreakCaseReportUID,
							@idfOutbreak,
							@strOutbreakCaseID,
							@idfHumanCase,
							0  ,
							@User,
							GETDATE(),
							NULL,
							NULL
						   )

						   /*Temp solution??? To tie in datFinalDiagnosisDate with datTentativeDiagnosisDate*/
						   UPDATE dbo.tlbHumanCase
						   SET datFinalDiagnosisDate = datTentativeDiagnosisDate,
							   AuditUpdateUser = @User
						   WHERE idfHumanCase = @idfHumanCase
								 AND datFinalDiagnosisDate IS NULL

						   UPDATE dbo.tlbHumanCase
						   SET idfOutbreak = @idfOutbreak,
							   AuditUpdateUser = @User
						   WHERE idfHumanCase = @idfHumanCase

						   SELECT @idfEPIObservation = idfEPIObservation,
								  @idfCSObservation = idfCSObservation
						   FROM dbo.tlbHumanCase
						   WHERE idfHumanCase = @idfHumanCase

						   --IF COALESCE(@idfEpiObservation, 0) > 0
						   --BEGIN
							  -- SELECT @idfsFormTemplate = idfsFormTemplate
							  -- FROM tlbObservation
							  -- WHERE idfObservation = @idfEPIObservation

							  -- INSERT INTO @SupressSelect
							  -- EXEC dbo.USP_ADMIN_FF_Copy_Observation @idfObservation = @idfEPIObservation OUTPUT,
									--								  @User = @User,
									--								  @idfsSite = @SiteID

							  -- EXEC USP_OMM_FF_Copy_Template @LangId = @LangId,
									--						 @idfsFormTemplate = @idfsFormTemplate,
									--						 @User = @User,
									--						 @idfsSite = @SiteID,
									--						 @idfsNewFormType = 10034501

							  -- SELECT @idfsFormTemplateNew = idfsFormTemplate
							  -- FROM ffFormTemplate
							  -- WHERE AuditCreateUser = @User
									-- AND idfsFormType = 10034501
									-- AND idfsFormTemplate = @idfsFormTemplate

							  -- UPDATE tlbObservation
							  -- SET idfsFormTemplate = @idfsFormTemplateNew
							  -- WHERE idfObservation = @idfObservation
									-- AND idfsFormTemplate = @idfsFormTemplate
						   --END

						   IF COALESCE(@idfCSObservation, 0) > 0
						   BEGIN
							   INSERT INTO @SupressSelect
							   EXEC dbo.USP_ADMIN_FF_Copy_Observation @idfObservation = @idfCSObservation,
																	  @User = @User,
																	  @idfsSite = @SiteID

							   UPDATE dbo.OutbreakCaseReport
							   SET OutbreakCaseObservationID = @idfCSObservation,
								   AuditUpdateUser = @User
							   WHERE OutBreakCaseReportUID = @OutBreakCaseReportUID
						   END
					   END
					ELSE
						BEGIN
						   SET @returnMsg = 'EXISTING_OUTBREAK_CASE'
						END
                END
                ELSE
                BEGIN
                    --At this point, the data being passed is only pertaining to the manual creation of
                    --a Human Case from the outbreak side.
                    SET @CreateOutbreakCase = 1
                    SET @PrepCollections = 1
                    SET @ExecuteHumanSP = 1

                END
            END
        END

		
        IF @ExecuteHumanSP = 1
        BEGIN
            INSERT INTO @SupressSelect
            EXEC dbo.USP_OMM_HUMAN_DISEASE_SET @idfHumanCase OUTPUT,
                                               @strHumanCaseId = @strHumanCaseId,
                                               @OutbreakCaseReportUID = @OutbreakCaseReportUID,
                                               @idfHumanActual = @idfHumanActual,
                                               @idfsFinalDiagnosis = @idfsDiagnosisOrDiagnosisGroup,
                                               @datDateOfDiagnosis = @datFinalDiagnosisDate,
                                               @datNotificationDate = @datNotificationDate,
                                               @idfsFinalState = @idfsFinalState,
                                               @idfSentByOffice = @idfSentByOffice,
                                               @idfSentByPerson = @idfSentByPerson,
                                               @idfReceivedByOffice = @idfReceivedByOffice,
                                               @idfReceivedByPerson = @idfReceivedByPerson,
                                               @idfHospital = @idfHospital,
                                               @datOnSetDate = @datOnSetDate,
                                               @idfsYNHospitalization = @idfsYNHospitalization,
                                               @datHospitalizationDate = @datHospitalizationDate,
                                               @datDischargeDate = @datDischargeDate,
                                               @strHospitalName = @strHospitalizationPlace,
                                               @idfsYNAntimicrobialTherapy = @idfsYNAntimicrobialTherapy,
                                               @strClinicalNotes = @strClinicalNotes,
                                               @strNote = @strNote,
                                               @idfsYNSpecIFicVaccinationAdministered = @idfsYNSpecIFicVaccinationAdministered,
                                               @idfInvestigatedByOffice = @idfInvestigatedByOffice,
                                               @idfInvestigatedByPerson = @idfInvestigatedByPerson,
                                               @StartDateofInvestigation = @StartDateofInvestigation,
                                               @idfOutbreak = @idfOutbreak,
                                               @CaseGeoLocationID = @CaseGeoLocationID,
                                               @CaseidfsLocation = @CaseidfsLocation,
                                               @CasestrStreetName = @CasestrStreetName,
                                               @CasestrApartment = @CasestrApartment,
                                               @CasestrBuilding = @CasestrBuilding,
                                               @CasestrHouse = @CasestrHouse,
                                               @CaseidfsPostalCode = @CaseidfsPostalCode,
                                               @CasestrLatitude = @CasestrLatitude,
                                               @CasestrLongitude = @CasestrLongitude,
                                               @CasestrElevation = @CasestrElevation,
                                               @SamplesParameters = @CaseSamples,
                                               @idfsYNSpecimenCollected = @idfsYNSpecimenCollected,
                                               @idfsYNTestsConducted = @idfsYNTestsConducted,
                                               @TestsParameters = @CaseTests,
                                               @AntiviralTherapiesParameters = @Antimicrobials,
                                               @VaccinationsParameters = @vaccinations,
                                               @CaseMonitoringsParameters = @CaseMonitorings,
                                               @User = @User,
                                               @idfEpiObservation = @idfEpiObservation,
                                               @idfCSObservation = @idfCSObservation

            INSERT INTO @SupressSelect
            EXEC dbo.USSP_OMM_CASE_MONITORING_SET @CaseMonitorings = @CaseMonitorings,
                                                  @HumanDiseaseReportID = @idfHumanCase,
                                                  @User = @User

            --Update the tblHumanCase with the Outbreak Id related by the import process.
            UPDATE tlbHumanCase
            SET idfOutbreak = @idfOutbreak,
                AuditUpdateUser = @User
            WHERE idfHumanCase = @idfHumanCase
        END

        IF @CreateOutbreakCase = 1
        BEGIN
            --Create the outbreak case, with full information
            INSERT INTO @SupressSelect
            EXEC dbo.USP_GBL_NextNumber_GET 'Human Outbreak Case',
                                            @strOutbreakCaseID OUTPUT,
                                            NULL;

            INSERT INTO dbo.OutbreakCaseReport
            (
                OutBreakCaseReportUID,
                idfOutbreak,
                strOutbreakCaseID,
                idfHumanCase,
                idfVetCase,
                OutbreakCaseStatusID,
                OutbreakCaseClassificationID,
                IsPrimaryCaseFlag,
                intRowStatus,
                AuditCreateUser,
                AuditCreateDTM,
                AuditUpdateUser,
                AuditUpdateDTM
            )
            VALUES
            (@OutBreakCaseReportUID,
             @idfOutbreak,
             @strOutbreakCaseID,
             @idfHumanCase,
             @idfVetCase,
             @CaseStatusID,
             @OutbreakCaseClassificationID,
             @IsPrimaryCaseFlag,
             COALESCE(@intRowStatus, 0),
             @User,
             GETDATE(),
             NULL,
             NULL
            )
        END

        --Add/Update any contacts
        IF @CaseContacts IS NOT NULL
        BEGIN
            --INSERT INTO @SupressSelect
            EXEC dbo.USSP_OMM_CONTACT_SET @idfHumanCase,
                                          @CaseContacts,
                                          @User = @User,
                                          @OutbreakCaseReportUID = @OutbreakCaseReportUID,
                                          @FunctionCall = 1;
        END

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SupressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                            @EventTypeId,
                                            @EventUserId,
                                            @EventObjectId,
                                            @EventDiseaseId,
                                            @EventSiteId,
                                            @EventInformationString,
                                            @EventLoginSiteId,
                                            @EventLocationId,
                                            @User;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        SELECT @returnCode AS ReturnCode,
               @returnMsg AS ReturnMessage,
               @strOutbreakCaseID AS strOutbreakCaseId,
               @OutbreakCaseReportUID AS OutbreakCaseReportUID;
    END TRY
    BEGIN CATCH

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USSP_GBL_TESTS_SET]...';


GO
-- ================================================================================================
-- Name: USSP_GBL_TESTS_SET
--
-- Description:	Inserts or updates laboratory and field test records for various use cases.
--
-- Revision History:
-- Name                Date       Change Detail
-- ------------------- ---------- ----------------------------------------------------------------
-- Stephen Long        11/21/2022 Initial release with data audit logic for SAUC30 and 31.
-- Stephen Long        11/29/2022 Added delete data audit logic.
-- Stephen Long        12/09/2022 Added EIDSSObjectID parameter to insert for strObject.
-- Stephen Long        01/09/2023 Added check to not update test fields when non-laboratory test is 
--                                false; only done from the laboratory module.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_GBL_TESTS_SET]
(
    @TestID BIGINT OUTPUT,
    @TestNameTypeID BIGINT = NULL,
    @TestCategoryTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestStatusTypeID BIGINT,
    @DiseaseID BIGINT,
    @SampleID BIGINT = NULL,
    @BatchTestID BIGINT = NULL,
    @ObservationID BIGINT,
    @TestNumber INT = NULL,
    @Comments NVARCHAR(500) = NULL,
    @RowStatus INT = NULL,
    @StartedDate DATETIME = NULL,
    @ResultDate DATETIME = NULL,
    @TestedByOrganizationID BIGINT = NULL,
    @TestedByPersonID BIGINT = NULL,
    @ResultEnteredByOrganizationID BIGINT = NULL,
    @ResultEnteredByPersonID BIGINT = NULL,
    @ValidatedByOrganizationID BIGINT = NULL,
    @ValidatedByPersonID BIGINT = NULL,
    @ReadOnlyIndicator BIT,
    @NonLaboratoryTestIndicator BIT,
    @ExternalTestIndicator BIT = NULL,
    @PerformedByOrganizationID BIGINT = NULL,
    @ReceivedDate DATETIME = NULL,
    @ContactPerson NVARCHAR(200) = NULL,
    @MonitoringSessionID BIGINT = NULL,
    @VectorSessionID BIGINT = NULL,
    @HumanDiseaseReportID BIGINT = NULL,
    @VeterinaryDiseaseReportID BIGINT = NULL,
    @AuditUserName NVARCHAR(200),
    @DataAuditEventID BIGINT = NULL,
    @EIDSSObjectID NVARCHAR(200) = NULL,
    @RowAction CHAR
)
AS
DECLARE @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectID BIGINT = @TestID,
        @ObjectTableID BIGINT = 75740000000; -- tlbTesting
DECLARE @TestBeforeEdit TABLE
(
    TestID BIGINT,
    TestNameTypeID BIGINT,
    TestCategoryTypeID BIGINT,
    TestResultTypeID BIGINT,
    TestStatusTypeID BIGINT,
    DiseaseID BIGINT,
    SampleID BIGINT,
    BatchTestID BIGINT,
    ObservationID BIGINT,
    TestNumber INT,
    Note NVARCHAR(500),
    StartedDate DATETIME,
    ConcludedDate DATETIME,
    TestedByOfficeID BIGINT,
    TestedByPersonID BIGINT,
    ResultEnteredByOfficeID BIGINT,
    ResultEnteredByPersonID BIGINT,
    ValidatedByOfficeID BIGINT,
    ValidatedByPersonID BIGINT,
    ReadOnlyIndicator BIT,
    NonLaboratoryTestIndicator BIT,
    ExternalTestIndicator BIT,
    PerformedByOfficeID BIGINT,
    ReceivedDate DATETIME,
    ContactPerson NVARCHAR(200),
    RowStatus INT
);
DECLARE @TestAfterEdit TABLE
(
    TestID BIGINT,
    TestNameTypeID BIGINT,
    TestCategoryTypeID BIGINT,
    TestResultTypeID BIGINT,
    TestStatusTypeID BIGINT,
    DiseaseID BIGINT,
    SampleID BIGINT,
    BatchTestID BIGINT,
    ObservationID BIGINT,
    TestNumber INT,
    Note NVARCHAR(500),
    StartedDate DATETIME,
    ConcludedDate DATETIME,
    TestedByOfficeID BIGINT,
    TestedByPersonID BIGINT,
    ResultEnteredByOfficeID BIGINT,
    ResultEnteredByPersonID BIGINT,
    ValidatedByOfficeID BIGINT,
    ValidatedByPersonID BIGINT,
    ReadOnlyIndicator BIT,
    NonLaboratoryTestIndicator BIT,
    ExternalTestIndicator BIT,
    PerformedByOfficeID BIGINT,
    ReceivedDate DATETIME,
    ContactPerson NVARCHAR(200),
    RowStatus INT
);
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        IF @RowAction = 'I'
           OR @RowAction = '1' -- Insert
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbTesting', @TestID OUTPUT;

            INSERT INTO dbo.tlbTesting
            (
                idfTesting,
                idfsTestName,
                idfsTestCategory,
                idfsTestResult,
                idfsTestStatus,
                idfsDiagnosis,
                idfMaterial,
                idfBatchTest,
                idfObservation,
                intTestNumber,
                strNote,
                intRowStatus,
                datStartedDate,
                datConcludedDate,
                idfTestedByOffice,
                idfTestedByPerson,
                idfResultEnteredByOffice,
                idfResultEnteredByPerson,
                idfValidatedByOffice,
                idfValidatedByPerson,
                blnReadOnly,
                blnNonLaboratoryTest,
                blnExternalTest,
                idfPerformedByOffice,
                datReceivedDate,
                strContactPerson,
                idfMonitoringSession,
                idfVector,
                idfHumanCase,
                idfVetCase,
                AuditCreateUser,
                SourceSystemNameID,
                SourceSystemKeyValue
            )
            VALUES
            (@TestID,
             @TestNameTypeID,
             @TestCategoryTypeID,
             @TestResultTypeID,
             @TestStatusTypeID,
             @DiseaseID,
             @SampleID,
             @BatchTestID,
             @ObservationID,
             @TestNumber,
             @Comments,
             @RowStatus,
             @StartedDate,
             @ResultDate,
             @TestedByOrganizationID,
             @TestedByPersonID,
             @ResultEnteredByOrganizationID,
             @ResultEnteredByPersonID,
             @ValidatedByOrganizationID,
             @ValidatedByPersonID,
             @ReadOnlyIndicator,
             @NonLaboratoryTestIndicator,
             @ExternalTestIndicator,
             @PerformedByOrganizationID,
             @ReceivedDate,
             @ContactPerson,
             @MonitoringSessionID,
             @VectorSessionID,
             @HumanDiseaseReportID,
             @VeterinaryDiseaseReportID,
             @AuditUserName,
             10519001,
             '[{"idfTesting":' + CAST(@TestID AS NVARCHAR(300)) + '}]'
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @TestID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @EIDSSObjectID
            );
        -- End data audit
        END
        ELSE
        BEGIN
            INSERT INTO @TestBeforeEdit
            (
                TestID,
                TestNameTypeID,
                TestCategoryTypeID,
                TestResultTypeID,
                TestStatusTypeID,
                DiseaseID,
                SampleID,
                BatchTestID,
                ObservationID,
                TestNumber,
                Note,
                StartedDate,
                ConcludedDate,
                TestedByOfficeID,
                TestedByPersonID,
                ResultEnteredByOfficeID,
                ResultEnteredByPersonID,
                ValidatedByOfficeID,
                ValidatedByPersonID,
                ReadOnlyIndicator,
                NonLaboratoryTestIndicator,
                ExternalTestIndicator,
                PerformedByOfficeID,
                ReceivedDate,
                ContactPerson,
                RowStatus
            )
            SELECT idfTesting,
                   idfsTestName,
                   idfsTestCategory,
                   idfsTestResult,
                   idfsTestStatus,
                   idfsDiagnosis,
                   idfMaterial,
                   idfBatchTest,
                   idfObservation,
                   intTestNumber,
                   strNote,
                   datStartedDate,
                   datConcludedDate,
                   idfTestedByOffice,
                   idfTestedByPerson,
                   idfResultEnteredByOffice,
                   idfResultEnteredByPerson,
                   idfValidatedByOffice,
                   idfValidatedByPerson,
                   blnReadOnly,
                   blnNonLaboratoryTest,
                   blnExternalTest,
                   idfPerformedByOffice,
                   datReceivedDate,
                   strContactPerson,
                   intRowStatus
            FROM dbo.tlbTesting
            WHERE idfTesting = @TestID;

            IF @NonLaboratoryTestIndicator = 1
            BEGIN
                UPDATE dbo.tlbTesting
                SET idfsTestName = @TestNameTypeID,
                    idfsTestCategory = @TestCategoryTypeID,
                    idfsTestResult = @TestResultTypeID,
                    idfsTestStatus = @TestStatusTypeID,
                    idfsDiagnosis = @DiseaseID,
                    idfMaterial = @SampleID,
                    idfBatchTest = @BatchTestID,
                    idfObservation = @ObservationID,
                    intTestNumber = @TestNumber,
                    strNote = @Comments,
                    intRowStatus = @RowStatus,
                    datStartedDate = @StartedDate,
                    datConcludedDate = @ResultDate,
                    idfTestedByOffice = @TestedByOrganizationID,
                    idfTestedByPerson = @TestedByPersonID,
                    idfResultEnteredByOffice = @ResultEnteredByOrganizationID,
                    idfResultEnteredByPerson = @ResultEnteredByPersonID,
                    idfValidatedByOffice = @ValidatedByOrganizationID,
                    idfValidatedByPerson = @ValidatedByPersonID,
                    blnReadOnly = @ReadOnlyIndicator,
                    blnNonLaboratoryTest = @NonLaboratoryTestIndicator,
                    blnExternalTest = @ExternalTestIndicator,
                    idfPerformedByOffice = @PerformedByOrganizationID,
                    datReceivedDate = @ReceivedDate,
                    strContactPerson = @ContactPerson,
                    idfMonitoringSession = @MonitoringSessionID,
                    idfVector = @VectorSessionID,
                    idfHumanCase = @HumanDiseaseReportID,
                    idfVetCase = @VeterinaryDiseaseReportID,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE idfTesting = @TestID;
            END
            ELSE
            BEGIN
                UPDATE dbo.tlbTesting
                SET idfsTestName = @TestNameTypeID,
                    idfsTestCategory = @TestCategoryTypeID,
                    idfsTestResult = @TestResultTypeID,
                    idfsTestStatus = @TestStatusTypeID,
                    idfsDiagnosis = @DiseaseID,
                    idfMaterial = @SampleID,
                    idfBatchTest = @BatchTestID,
                    idfObservation = @ObservationID,
                    intTestNumber = @TestNumber,
                    strNote = @Comments,
                    intRowStatus = @RowStatus,
                    datStartedDate = @StartedDate,
                    datConcludedDate = @ResultDate,
                    idfTestedByOffice = @TestedByOrganizationID,
                    idfTestedByPerson = @TestedByPersonID,
                    idfResultEnteredByOffice = @ResultEnteredByOrganizationID,
                    idfResultEnteredByPerson = @ResultEnteredByPersonID,
                    blnReadOnly = @ReadOnlyIndicator,
                    blnExternalTest = @ExternalTestIndicator,
                    idfPerformedByOffice = @PerformedByOrganizationID,
                    datReceivedDate = @ReceivedDate,
                    strContactPerson = @ContactPerson,
                    idfMonitoringSession = @MonitoringSessionID,
                    idfVector = @VectorSessionID,
                    idfHumanCase = @HumanDiseaseReportID,
                    idfVetCase = @VeterinaryDiseaseReportID,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE idfTesting = @TestID;
            END

            INSERT INTO @TestAfterEdit
            (
                TestID,
                TestNameTypeID,
                TestCategoryTypeID,
                TestResultTypeID,
                TestStatusTypeID,
                DiseaseID,
                SampleID,
                BatchTestID,
                ObservationID,
                TestNumber,
                Note,
                StartedDate,
                ConcludedDate,
                TestedByOfficeID,
                TestedByPersonID,
                ResultEnteredByOfficeID,
                ResultEnteredByPersonID,
                ValidatedByOfficeID,
                ValidatedByPersonID,
                ReadOnlyIndicator,
                NonLaboratoryTestIndicator,
                ExternalTestIndicator,
                PerformedByOfficeID,
                ReceivedDate,
                ContactPerson,
                RowStatus
            )
            SELECT idfTesting,
                   idfsTestName,
                   idfsTestCategory,
                   idfsTestResult,
                   idfsTestStatus,
                   idfsDiagnosis,
                   idfMaterial,
                   idfBatchTest,
                   idfObservation,
                   intTestNumber,
                   strNote,
                   datStartedDate,
                   datConcludedDate,
                   idfTestedByOffice,
                   idfTestedByPerson,
                   idfResultEnteredByOffice,
                   idfResultEnteredByPerson,
                   idfValidatedByOffice,
                   idfValidatedByPerson,
                   blnReadOnly,
                   blnNonLaboratoryTest,
                   blnExternalTest,
                   idfPerformedByOffice,
                   datReceivedDate,
                   strContactPerson,
                   intRowStatus
            FROM dbo.tlbTesting
            WHERE idfTesting = @TestID;

            IF @RowStatus = 0
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       49545430000000,
                       a.TestID,
                       NULL,
                       b.TestNameTypeID,
                       a.TestNameTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.TestNameTypeID <> b.TestNameTypeID)
                      OR (
                             a.TestNameTypeID IS NOT NULL
                             AND b.TestNameTypeID IS NULL
                         )
                      OR (
                             a.TestNameTypeID IS NULL
                             AND b.TestNameTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       49545440000000,
                       a.TestID,
                       NULL,
                       b.TestCategoryTypeID,
                       a.TestCategoryTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.TestCategoryTypeID <> b.TestCategoryTypeID)
                      OR (
                             a.TestCategoryTypeID IS NOT NULL
                             AND b.TestCategoryTypeID IS NULL
                         )
                      OR (
                             a.TestCategoryTypeID IS NULL
                             AND b.TestCategoryTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80510000000,
                       a.TestID,
                       NULL,
                       b.TestResultTypeID,
                       a.TestResultTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.TestResultTypeID <> b.TestResultTypeID)
                      OR (
                             a.TestResultTypeID IS NOT NULL
                             AND b.TestResultTypeID IS NULL
                         )
                      OR (
                             a.TestResultTypeID IS NULL
                             AND b.TestResultTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572510000000,
                       a.TestID,
                       NULL,
                       b.TestStatusTypeID,
                       a.TestStatusTypeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.TestStatusTypeID <> b.TestStatusTypeID)
                      OR (
                             a.TestStatusTypeID IS NOT NULL
                             AND b.TestStatusTypeID IS NULL
                         )
                      OR (
                             a.TestStatusTypeID IS NULL
                             AND b.TestStatusTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572520000000,
                       a.TestID,
                       NULL,
                       b.DiseaseID,
                       a.DiseaseID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.DiseaseID <> b.DiseaseID)
                      OR (
                             a.DiseaseID IS NOT NULL
                             AND b.DiseaseID IS NULL
                         )
                      OR (
                             a.DiseaseID IS NULL
                             AND b.DiseaseID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4576430000000,
                       a.TestID,
                       NULL,
                       b.SampleID,
                       a.SampleID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.SampleID <> b.SampleID)
                      OR (
                             a.SampleID IS NOT NULL
                             AND b.SampleID IS NULL
                         )
                      OR (
                             a.SampleID IS NULL
                             AND b.SampleID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80470000000,
                       a.TestID,
                       NULL,
                       b.BatchTestID,
                       a.BatchTestID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.BatchTestID <> b.BatchTestID)
                      OR (
                             a.BatchTestID IS NOT NULL
                             AND b.BatchTestID IS NULL
                         )
                      OR (
                             a.BatchTestID IS NULL
                             AND b.BatchTestID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80500000000,
                       a.TestID,
                       NULL,
                       b.ObservationID,
                       a.ObservationID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ObservationID <> b.ObservationID)
                      OR (
                             a.ObservationID IS NOT NULL
                             AND b.ObservationID IS NULL
                         )
                      OR (
                             a.ObservationID IS NULL
                             AND b.ObservationID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80540000000,
                       a.TestID,
                       NULL,
                       b.TestNumber,
                       a.TestNumber,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.TestNumber <> b.TestNumber)
                      OR (
                             a.TestNumber IS NOT NULL
                             AND b.TestNumber IS NULL
                         )
                      OR (
                             a.TestNumber IS NULL
                             AND b.TestNumber IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572540000000,
                       a.TestID,
                       NULL,
                       b.Note,
                       a.Note,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.Note <> b.Note)
                      OR (
                             a.Note IS NOT NULL
                             AND b.Note IS NULL
                         )
                      OR (
                             a.Note IS NULL
                             AND b.Note IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578540000000,
                       a.TestID,
                       NULL,
                       b.StartedDate,
                       a.StartedDate,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.StartedDate <> b.StartedDate)
                      OR (
                             a.StartedDate IS NOT NULL
                             AND b.StartedDate IS NULL
                         )
                      OR (
                             a.StartedDate IS NULL
                             AND b.StartedDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578550000000,
                       a.TestID,
                       NULL,
                       b.ConcludedDate,
                       a.ConcludedDate,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ConcludedDate <> b.ConcludedDate)
                      OR (
                             a.ConcludedDate IS NOT NULL
                             AND b.ConcludedDate IS NULL
                         )
                      OR (
                             a.ConcludedDate IS NULL
                             AND b.ConcludedDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578560000000,
                       a.TestID,
                       NULL,
                       b.TestedByOfficeID,
                       a.TestedByOfficeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.TestedByOfficeID <> b.TestedByOfficeID)
                      OR (
                             a.TestedByOfficeID IS NOT NULL
                             AND b.TestedByOfficeID IS NULL
                         )
                      OR (
                             a.TestedByOfficeID IS NULL
                             AND b.TestedByOfficeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578570000000,
                       a.TestID,
                       NULL,
                       b.TestedByPersonID,
                       a.TestedByPersonID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.TestedByPersonID <> b.TestedByPersonID)
                      OR (
                             a.TestedByPersonID IS NOT NULL
                             AND b.TestedByPersonID IS NULL
                         )
                      OR (
                             a.TestedByPersonID IS NULL
                             AND b.TestedByPersonID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578580000000,
                       a.TestID,
                       NULL,
                       b.ResultEnteredByOfficeID,
                       a.ResultEnteredByOfficeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ResultEnteredByOfficeID <> b.ResultEnteredByOfficeID)
                      OR (
                             a.ResultEnteredByOfficeID IS NOT NULL
                             AND b.ResultEnteredByOfficeID IS NULL
                         )
                      OR (
                             a.ResultEnteredByOfficeID IS NULL
                             AND b.ResultEnteredByOfficeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578590000000,
                       a.TestID,
                       NULL,
                       b.ResultEnteredByPersonID,
                       a.ResultEnteredByPersonID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ResultEnteredByPersonID <> b.ResultEnteredByPersonID)
                      OR (
                             a.ResultEnteredByPersonID IS NOT NULL
                             AND b.ResultEnteredByPersonID IS NULL
                         )
                      OR (
                             a.ResultEnteredByPersonID IS NULL
                             AND b.ResultEnteredByPersonID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578600000000,
                       a.TestID,
                       NULL,
                       b.ValidatedByOfficeID,
                       a.ValidatedByOfficeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ValidatedByOfficeID <> b.ValidatedByOfficeID)
                      OR (
                             a.ValidatedByOfficeID IS NOT NULL
                             AND b.ValidatedByOfficeID IS NULL
                         )
                      OR (
                             a.ValidatedByOfficeID IS NULL
                             AND b.ValidatedByOfficeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578610000000,
                       a.TestID,
                       NULL,
                       b.ValidatedByPersonID,
                       a.ValidatedByPersonID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ValidatedByPersonID <> b.ValidatedByPersonID)
                      OR (
                             a.ValidatedByPersonID IS NOT NULL
                             AND b.ValidatedByPersonID IS NULL
                         )
                      OR (
                             a.ValidatedByPersonID IS NULL
                             AND b.ValidatedByPersonID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578740000000,
                       a.TestID,
                       NULL,
                       b.ReadOnlyIndicator,
                       a.ReadOnlyIndicator,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ReadOnlyIndicator <> b.ReadOnlyIndicator)
                      OR (
                             a.ReadOnlyIndicator IS NOT NULL
                             AND b.ReadOnlyIndicator IS NULL
                         )
                      OR (
                             a.ReadOnlyIndicator IS NULL
                             AND b.ReadOnlyIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578760000000,
                       a.TestID,
                       NULL,
                       b.NonLaboratoryTestIndicator,
                       a.NonLaboratoryTestIndicator,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.NonLaboratoryTestIndicator <> b.NonLaboratoryTestIndicator)
                      OR (
                             a.NonLaboratoryTestIndicator IS NOT NULL
                             AND b.NonLaboratoryTestIndicator IS NULL
                         )
                      OR (
                             a.NonLaboratoryTestIndicator IS NULL
                             AND b.NonLaboratoryTestIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       50815850000000,
                       a.TestID,
                       NULL,
                       b.ExternalTestIndicator,
                       a.ExternalTestIndicator,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ExternalTestIndicator <> b.ExternalTestIndicator)
                      OR (
                             a.ExternalTestIndicator IS NOT NULL
                             AND b.ExternalTestIndicator IS NULL
                         )
                      OR (
                             a.ExternalTestIndicator IS NULL
                             AND b.ExternalTestIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       50815860000000,
                       a.TestID,
                       NULL,
                       b.PerformedByOfficeID,
                       a.PerformedByOfficeID,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.PerformedByOfficeID <> b.PerformedByOfficeID)
                      OR (
                             a.PerformedByOfficeID IS NOT NULL
                             AND b.PerformedByOfficeID IS NULL
                         )
                      OR (
                             a.PerformedByOfficeID IS NULL
                             AND b.PerformedByOfficeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       50815870000000,
                       a.TestID,
                       NULL,
                       b.ReceivedDate,
                       a.ReceivedDate,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ReceivedDate <> b.ReceivedDate)
                      OR (
                             a.ReceivedDate IS NOT NULL
                             AND b.ReceivedDate IS NULL
                         )
                      OR (
                             a.ReceivedDate IS NULL
                             AND b.ReceivedDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       50815880000000,
                       a.TestID,
                       NULL,
                       b.ContactPerson,
                       a.ContactPerson,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ContactPerson <> b.ContactPerson)
                      OR (
                             a.ContactPerson IS NOT NULL
                             AND b.ContactPerson IS NULL
                         )
                      OR (
                             a.ContactPerson IS NULL
                             AND b.ContactPerson IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailRestore
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    idfObjectDetail,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       a.TestID,
                       NULL,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                where a.RowStatus = 0
                      AND b.RowStatus = 1;
            END
            ELSE
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                VALUES
                (@DataAuditEventid, @ObjectTableID, @TestID, @AuditUserName, @EIDSSObjectID);
            END
        END
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [Report].[USP_GBL_GIS_Location_ChildLevel_Get]...';


GO


--*************************************************************************************************
-- Name: USP_GBL_GIS_Location_Level_Get
--
-- Description: To get the Administrative Child Level List for the selected Parent List.
--
-- Revision History:
-- Name Date Change Detail
-- --------------- ---------- --------------------------------------------------------------------
-- Srini Goli 03/31/2021 Initial release.
-- Mani 01/05/2023 added introwstatus =0 condition

-- Testing code:
/*
EXEC Report.USP_GBL_GIS_Location_ChildLevel_Get 'en' 										-- Administrative Level 1 --Region --Default Setup Country
EXEC Report.USP_GBL_GIS_Location_ChildLevel_Get 'en-US', '170000000'							-- Administrative Level 1 --Region
EXEC Report.USP_GBL_GIS_Location_ChildLevel_Get 'en-US', '1344330000000'						-- Administrative Level 2 --Rayon
EXEC Report.USP_GBL_GIS_Location_ChildLevel_Get 'az-1', '1344350000000'						-- Administrative Level 2 --Rayon
EXEC Report.USP_GBL_GIS_Location_ChildLevel_Get 'az-1', '1344330000000,1344350000000'		-- Administrative Level 2 --Rayon
EXEC Report.USP_GBL_GIS_Location_ChildLevel_Get 'az-l', '1344490000000'						-- Administrative Level 3 --Settlement

 Administrative Levels 5, 6, and 7 have not been integrated.

*/
-- ************************************************************************************************

ALTER PROCEDURE [Report].[USP_GBL_GIS_Location_ChildLevel_Get]
(
	@LangID NVARCHAR(50),
	@Parent_idfsReference AS NVARCHAR(MAX) = NULL
)
AS
	DECLARE @CountryNode HIERARCHYID,
			@ParentNode HIERARCHYID,
			@Country_idfsLocation AS BIGINT
	
	SELECT @CountryNode = node,@Country_idfsLocation=idfsLocation 
	FROM gisLocation 
	WHERE idfsLocation = dbo.FN_GBL_CURRENTCOUNTRY_GET()
	
	IF (@Parent_idfsReference='0' or @Parent_idfsReference IS NULL) SET @Parent_idfsReference = CAST(@Country_idfsLocation AS NVARCHAR(50))
		
	DECLARE @Parent_idfsReferenceTable	TABLE
			(
					idfsReference BIGINT		
			)	
		
	INSERT INTO @Parent_idfsReferenceTable 
	SELECT CAST([Value] AS BIGINT) FROM report.FN_GBL_SYS_SplitList(@Parent_idfsReference,1,',')

	SELECT l.node as ParentNode
	INTO #ParentNodes
	FROM dbo.gisLocation l
	INNER JOIN dbo.gisBaseReference br ON br.idfsGISBaseReference=l.idfsLocation
	WHERE idfsGISBaseReference IN (SELECT idfsReference FROM @Parent_idfsReferenceTable) and br.intRowStatus =0

	SELECT 
		0 as idfsReference
		,'' as [Name]
	UNION ALL
	SELECT
    	br.idfsGISBaseReference AS idfsReference
		,ISNULL(snt.strTextString, br.strDefault) [Name]
	FROM dbo.gisBaseReference AS br 
	INNER JOIN dbo.gisStringNameTranslation AS snt ON snt.idfsGISBaseReference = br.idfsGISBaseReference AND snt.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LangID)
	INNER JOIN dbo.gisLocation l ON l.idfsLocation = br.idfsGISBaseReference
	INNER JOIN dbo.gisReferenceType rt ON rt.idfsGISReferenceType = br.idfsGISReferenceType
	WHERE l.node.GetAncestor(1) IN (SELECT ParentNode FROM #ParentNodes) and br.intRowStatus =0 and rt.intRowStatus =0
	ORDER BY 2
GO
PRINT N'Altering Procedure [Report].[USP_GBL_GIS_Location_CurrentLevel_Get]...';


GO


--*************************************************************************************************
-- Name: USP_GBL_GIS_Location_CurrentLevel_Get
--
-- Description: To get the Administrative level List for the required level
--
-- Revision History:
-- Name Date Change Detail
-- --------------- ---------- --------------------------------------------------------------------
-- Srini Goli 03/31/2021 Initial release.
-- Mani 01/05/2023 added introwstatus =0 condition

-- Testing code:
/*
EXEC Report.USP_GBL_GIS_Location_CurrentLevel_Get 'az-1', 0						-- Administrative Level 0 --Country
EXEC Report.USP_GBL_GIS_Location_CurrentLevel_Get 'en-US', 1						-- Administrative Level 1 --Region
EXEC Report.USP_GBL_GIS_Location_CurrentLevel_Get 'en-US', 2						-- Administrative Level 2 --Rayon
EXEC Report.USP_GBL_GIS_Location_CurrentLevel_Get 'ru', 3					    -- Administrative Level 3 --Settlement

 Administrative Levels 5, 6, and 7 have not been integrated.

*/
-- ************************************************************************************************

ALTER PROCEDURE [Report].[USP_GBL_GIS_Location_CurrentLevel_Get]
(
	@LangID NVARCHAR(50),
	@CurrentLevel INT = 0
)
AS
	DECLARE @CountryNode HIERARCHYID,
			@idfsGISReferenceType BIGINT

	SELECT @CountryNode = node FROM gisLocation WHERE idfsLocation = dbo.FN_GBL_CURRENTCOUNTRY_GET()	   
	
	SELECT 
		0 as idfsReference
		,'' as [Name]
	UNION ALL
	SELECT
		br.idfsGISBaseReference AS idfsReference
		,ISNULL(snt.strTextString, br.strDefault) [Name]
	FROM dbo.gisBaseReference AS br 
	INNER JOIN dbo.gisStringNameTranslation AS snt ON snt.idfsGISBaseReference = br.idfsGISBaseReference AND snt.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LangID)
	INNER JOIN dbo.gisLocation l ON l.idfsLocation = br.idfsGISBaseReference
	INNER JOIN dbo.gisReferenceType rt ON rt.idfsGISReferenceType = br.idfsGISReferenceType
	WHERE l.node.GetAncestor(@CurrentLevel) = @CountryNode and br.intRowStatus =0 and rt.intRowStatus =0
	ORDER BY 2
GO
PRINT N'Refreshing Procedure [Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_Human_Aggregate_Disease_Summary_Report_Detail]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_Human_Aggregate_Disease_Summary_Report_Detail]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_HAS_MONITORING_SESSION_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HAS_MONITORING_SESSION_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_HUM_HUMAN_DISEASE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HUM_HUMAN_DISEASE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VAS_MONITORING_SESSION_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VAS_MONITORING_SESSION_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VET_DISEASE_REPORT_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VET_DISEASE_REPORT_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USSP_OMM_CONVERT_CONTACT_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_OMM_CONVERT_CONTACT_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_Contact_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_Contact_Set]';


GO
PRINT N'Update complete.';


GO
