/*
Deployment script for EIDSS7_GG

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
PRINT N'Altering Table [dbo].[tstAggrSetting]...';


GO
ALTER TABLE [dbo].[tstAggrSetting]
    ADD [idfsSite] BIGINT NULL;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstAggrSetting_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] WITH NOCHECK
    ADD CONSTRAINT [FK_tstAggrSetting_tstSite_idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Altering Trigger [dbo].[TR_trtBaseReference_I_Delete]...';


GO
ENABLE TRIGGER [dbo].[TR_trtBaseReference_I_Delete]
    ON [dbo].[trtBaseReference];


GO
PRINT N'Refreshing Function [Report].[FN_AggregateSettings_GET]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[FN_AggregateSettings_GET]';


GO
PRINT N'Refreshing Function [dbo].[fnAggregateSettings]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnAggregateSettings]';


GO
PRINT N'Refreshing Function [Report].[FN_GBL_AggregateSettings_GET]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[FN_GBL_AggregateSettings_GET]';


GO
PRINT N'Altering Function [dbo].[fn_DataAudit_SelectList]...';


GO


--##SUMMARY Returns list of data audit events.

--##REMARKS Author: Zurin M.
--##REMARKS Create date: 12.04.2010

--##RETURNS Returns list of data audit events.
-- Manickandan Govindarajan 01/24/2023 Added more columns



/*
Example of function call:

SELECT * FROM fn_DataAudit_SelectList ('en') 

*/


ALTER   FUNCTION [dbo].[fn_DataAudit_SelectList](
	@LangID as nvarchar(50) --##PARAM @LangID - language ID
)
returns table 
as
return

SELECT idfDataAuditEvent
	  ,idfsDataAuditObjectType AS idfsObjectType
      ,ObjectType.name AS ObjectType
      ,tauDataAuditEvent.idfsDataAuditEventType AS idfsActionName
      ,EventType.name AS ActionName
      ,tstSite.idfsSite
      ,tstSite.idfOffice
      ,tstSite.strSiteID
      ,datEnteringDate
      ,dbo.tauDataAuditEvent.idfMainObject
      ,dbo.tauDataAuditEvent.idfMainObjectTable
      ,tauDataAuditEvent.idfUserID
      ,tlbPerson.idfPerson
	  ,dbo.fnConcatFullName(strFamilyName, strFirstName, strSecondName)  AS strPersonName,
	  tauDataAuditEvent.idfsDataAuditEventType,
	  tauDataAuditEvent.idfsDataAuditObjectType,
	  tauDataAuditEvent.strMainObject,
	  tstSite.strSiteName,
	  tlbPerson.strFirstName,
	  tlbPerson.strFamilyName,
	  tlbPerson.strSecondName


FROM			dbo.tauDataAuditEvent
INNER JOIN		fnReferenceRepair(@LangID,19000016) AS EventType --'rftDataAuditEventType'
		ON		tauDataAuditEvent.idfsDataAuditEventType = EventType.idfsReference
				
INNER JOIN		fnReferenceRepair(@LangID,19000017) AS ObjectType --'rftDataAuditObjectType'
		ON		tauDataAuditEvent.idfsDataAuditObjectType = ObjectType.idfsReference
				
LEFT OUTER JOIN	(
							tstUserTable 
				INNER JOIN	tlbPerson 
					ON		tlbPerson.idfPerson = tstUserTable.idfPerson
				)
		ON		tstUserTable.idfUserID = tauDataAuditEvent.idfUserID

INNER JOIN		tstSite
		ON		tauDataAuditEvent.idfsSite = tstSite.idfsSite
GO
PRINT N'Creating Function [dbo].[FN_GBL_CONFIGURABLE_FILTRATION_GETList]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: FN_GBL_CONFIGURABLE_FILTRATION_GETList
--
-- Description: Returns a table of permissions based on configurable filtration rules. 
--          
-- Author: Stephen Long
--
-- Revision History:
-- Name               Date       Change Detail
-- ------------------ ---------- -----------------------------------------------------------------
-- Stephen Long       01/24/2023 Initial release
-- ================================================================================================
CREATE FUNCTION [dbo].[FN_GBL_CONFIGURABLE_FILTRATION_GETList]
(
    @ObjectSiteID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT
)
RETURNS @T TABLE
(
    SiteID BIGINT NOT NULL, 
    ReadPermissionIndicator INT NOT NULL,
    AccessToPersonalDataPermissionIndicator INT NOT NULL,
    AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
    WritePermissionIndicator INT NOT NULL,
    DeletePermissionIndicator INT NOT NULL
)
AS
BEGIN
    --
    -- Apply at the user's site group level, granted by a site group.
    --
    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.tflSiteToSiteGroup grantingSGS
        INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
            ON userSiteGroup.idfsSite = @UserSiteID
        INNER JOIN dbo.AccessRuleActor ara
            ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
               AND ara.intRowStatus = 0
        INNER JOIN dbo.AccessRule a
            ON a.AccessRuleID = ara.AccessRuleID
               AND a.intRowStatus = 0
               AND a.DefaultRuleIndicator = 0
    WHERE grantingSGS.idfsSite = @ObjectSiteID
          AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.tflSiteToSiteGroup userSiteGroup
        INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
            ON grantingSGS.idfsSite = @ObjectSiteID
        INNER JOIN dbo.AccessRuleActor ara
            ON ara.ActorSiteGroupID = grantingSGS.idfSiteGroup
               AND ara.intRowStatus = 0
        INNER JOIN dbo.AccessRule a
            ON a.AccessRuleID = ara.AccessRuleID
               AND a.intRowStatus = 0
               AND a.ReciprocalRuleIndicator = 1
    WHERE userSiteGroup.idfsSite = @UserSiteID
          AND a.GrantingActorSiteGroupID = userSiteGroup.idfSiteGroup;

    --
    -- Apply at the user's site level, granted by a site group.
    --
    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.tflSiteToSiteGroup grantingSGS
        INNER JOIN dbo.AccessRuleActor ara
            ON ara.ActorSiteID = @UserSiteID
               AND ara.ActorEmployeeGroupID IS NULL
               AND ara.intRowStatus = 0
        INNER JOIN dbo.AccessRule a
            ON a.AccessRuleID = ara.AccessRuleID
               AND a.intRowStatus = 0
               AND a.DefaultRuleIndicator = 0
    WHERE grantingSGS.idfsSite = @ObjectSiteID
          AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.AccessRuleActor ara
        INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
            ON grantingSGS.idfsSite = @UserSiteID
        INNER JOIN dbo.AccessRule a
            ON a.AccessRuleID = ara.AccessRuleID
               AND a.intRowStatus = 0
               AND a.ReciprocalRuleIndicator = 1
    WHERE ara.ActorSiteID = @ObjectSiteID
          AND ara.ActorEmployeeGroupID IS NULL
          AND ara.intRowStatus = 0
          AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

    -- 
    -- Apply at the user's employee group level, granted by a site group.
    --
    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.tflSiteToSiteGroup grantingSGS
        INNER JOIN dbo.tlbEmployeeGroupMember egm
            ON egm.idfEmployee = @UserEmployeeID
               AND egm.intRowStatus = 0
        INNER JOIN dbo.AccessRuleActor ara
            ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
               AND ara.intRowStatus = 0
        INNER JOIN dbo.AccessRule a
            ON a.AccessRuleID = ara.AccessRuleID
               AND a.intRowStatus = 0
               AND a.DefaultRuleIndicator = 0
    WHERE grantingSGS.idfsSite = @ObjectSiteID
          AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.tflSiteToSiteGroup grantingSGS
        INNER JOIN dbo.tlbEmployeeGroup eg 
            ON eg.idfsSite = @ObjectSiteID 
               AND eg.intRowStatus = 0
        INNER JOIN dbo.AccessRuleActor ara
            ON ara.ActorEmployeeGroupID = eg.idfEmployeeGroup
               AND ara.intRowStatus = 0
        INNER JOIN dbo.AccessRule a
            ON a.AccessRuleID = ara.AccessRuleID
               AND a.intRowStatus = 0
               AND a.ReciprocalRuleIndicator = 1
    WHERE grantingSGS.idfsSite = @UserSiteID
          AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

    -- 
    -- Apply at the user's ID level, granted by a site group.
    --
    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.tflSiteToSiteGroup grantingSGS
        INNER JOIN dbo.tstUserTable u
            ON u.idfPerson = @UserEmployeeID
               AND u.intRowStatus = 0
        INNER JOIN dbo.AccessRuleActor ara
            ON ara.ActorUserID = u.idfUserID
               AND ara.intRowStatus = 0
        INNER JOIN dbo.AccessRule a
            ON a.AccessRuleID = ara.AccessRuleID
               AND a.intRowStatus = 0
               AND a.DefaultRuleIndicator = 0
    WHERE grantingSGS.idfsSite = @ObjectSiteID
          AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.tflSiteToSiteGroup grantingSGS
        INNER JOIN dbo.tlbEmployee e 
            ON e.idfsSite = @ObjectSiteID
        INNER JOIN dbo.tstUserTable u
            ON u.idfPerson = e.idfEmployee 
               AND u.intRowStatus = 0
        INNER JOIN dbo.AccessRuleActor ara
            ON ara.ActorUserID = u.idfUserID
               AND ara.intRowStatus = 0
        INNER JOIN dbo.AccessRule a
            ON a.AccessRuleID = ara.AccessRuleID
               AND a.intRowStatus = 0
               AND a.ReciprocalRuleIndicator = 1
    WHERE grantingSGS.idfsSite = @UserSiteID
          AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

    --
    -- Apply at the user's site group level, granted by a site.
    --
    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.tflSiteToSiteGroup sgs
        INNER JOIN dbo.AccessRuleActor ara
            ON ara.ActorSiteGroupID = sgs.idfSiteGroup
               AND ara.intRowStatus = 0
        INNER JOIN dbo.AccessRule a
            ON a.AccessRuleID = ara.AccessRuleID
               AND a.intRowStatus = 0
               AND a.DefaultRuleIndicator = 0
    WHERE a.GrantingActorSiteID = @UserSiteID
          AND sgs.idfsSite = @ObjectSiteID;

    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.tflSiteToSiteGroup sgs
        INNER JOIN dbo.AccessRuleActor ara
            ON ara.ActorSiteGroupID = sgs.idfSiteGroup
               AND ara.intRowStatus = 0
        INNER JOIN dbo.AccessRule a
            ON a.AccessRuleID = ara.AccessRuleID
               AND a.intRowStatus = 0
               AND a.ReciprocalRuleIndicator = 1
    WHERE sgs.idfsSite = @UserSiteID
          AND a.GrantingActorSiteID = @ObjectSiteID;

    -- 
    -- Apply at the user's site level, granted by a site.
    --
    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.AccessRule a
        INNER JOIN dbo.AccessRuleActor ara
            ON ara.ActorSiteID = @UserSiteID
               AND ara.ActorEmployeeGroupID IS NULL
               AND ara.intRowStatus = 0
               AND a.AccessRuleID = ara.AccessRuleID
    WHERE a.intRowStatus = 0
          AND a.DefaultRuleIndicator = 0
          AND a.GrantingActorSiteID = @ObjectSiteID;

    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.AccessRuleActor ara
        INNER JOIN dbo.AccessRule a
            ON a.AccessRuleID = ara.AccessRuleID
               AND a.intRowStatus = 0
               AND a.ReciprocalRuleIndicator = 1
    WHERE ara.ActorSiteID = @ObjectSiteID
          AND ara.ActorEmployeeGroupID IS NULL
          AND ara.intRowStatus = 0
          AND a.GrantingActorSiteID = @UserSiteID;

    -- 
    -- Apply at the user's employee group level, granted by a site.
    --
    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.AccessRule a
        INNER JOIN dbo.tlbEmployeeGroupMember egm
            ON egm.idfEmployee = @UserEmployeeID
               AND egm.intRowStatus = 0
        INNER JOIN dbo.AccessRuleActor ara
            ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
               AND ara.intRowStatus = 0
               AND a.AccessRuleID = ara.AccessRuleID
    WHERE a.intRowStatus = 0
          AND a.DefaultRuleIndicator = 0
          AND a.GrantingActorSiteID = @ObjectSiteID;

    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.tlbEmployeeGroup eg
        INNER JOIN dbo.AccessRuleActor ara
            ON ara.ActorEmployeeGroupID = eg.idfEmployeeGroup
               AND ara.intRowStatus = 0
        INNER JOIN dbo.AccessRule a
            ON a.AccessRuleID = ara.AccessRuleID
               AND a.intRowStatus = 0
               AND a.ReciprocalRuleIndicator = 1
    WHERE eg.idfsSite = @ObjectSiteID
          AND eg.intRowStatus = 0
          AND a.GrantingActorSiteID = @UserSiteID;

    -- 
    -- Apply at the user's ID level, granted by a site.
    ----
    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.AccessRule a
        INNER JOIN dbo.tstUserTable u
            ON u.idfPerson = @UserEmployeeID
               AND u.intRowStatus = 0
        INNER JOIN dbo.AccessRuleActor ara
            ON ara.ActorUserID = u.idfUserID
               AND ara.intRowStatus = 0
               AND a.AccessRuleID = ara.AccessRuleID
    WHERE a.intRowStatus = 0
          AND a.DefaultRuleIndicator = 0
          AND a.GrantingActorSiteID = @ObjectSiteID;

    INSERT INTO @T
    SELECT @ObjectSiteID, 
           a.ReadPermissionIndicator,
           a.AccessToPersonalDataPermissionIndicator,
           a.AccessToGenderAndAgeDataPermissionIndicator,
           a.WritePermissionIndicator,
           a.DeletePermissionIndicator
    FROM dbo.tlbEmployee e
        INNER JOIN dbo.tstUserTable u
            ON u.idfPerson = e.idfEmployee
               AND u.intRowStatus = 0
        INNER JOIN dbo.AccessRuleActor ara
            ON ara.ActorUserID = u.idfUserID
               AND ara.intRowStatus = 0
        INNER JOIN dbo.AccessRule a
            ON a.AccessRuleID = ara.AccessRuleID
               AND a.intRowStatus = 0
               AND a.ReciprocalRuleIndicator = 1
    WHERE e.idfsSite = @ObjectSiteID
          AND e.intRowStatus = 0
          AND a.GrantingActorSiteID = @UserSiteID;

    RETURN;
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USP_CONF_AggregateSetting_GetList_WithName]...';


GO
-- ================================================================================================
-- Name: USP_CONF_AggregateSetting_GetList_WithName		
--
-- Description: Retreives Entries from [tstAggrSetting] based on Customization Package
-- 
-- Author: Lamont Mitchell
-- 
-- Revision History:
-- Name                     Date       Change Detail
-- ------------------------ ---------- -----------------------------------------------------------
-- Lamont Mitchell          11/27/2018 Initial Created
-- Lamont Mitchell          01/10/2019 Added check for IntrowStatus = 0 in Where Clause
-- Steven Verner            05/16/2021 Paging enabled
-- Stephen Long             08/23/2021 Added to TFS.  Changed base reference calls to use 
--                                     reference get list to get correct language translations, 
--                                     and added language ID parameter.
-- Ann Xiong				01/19/2022 Added idfsSite parameter
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_AggregateSetting_GetList_WithName] (
	@LanguageID NVARCHAR(50)
	,@idfCustomizationPackage BIGINT
	,@idfsSite BIGINT = NULL
	,@pageNo INT = 1
	,@pageSize INT = 10
	,@sortColumn NVARCHAR(30) = 'idfsAggrCaseType'
	,@sortOrder NVARCHAR(4) = 'asc'
	)
AS
BEGIN
	DECLARE @returnMsg VARCHAR(MAX) = 'SUCCESS';
	DECLARE @returnCode BIGINT = 0;
	DECLARE @idfsReferenceType BIGINT;

	SET NOCOUNT ON;

	BEGIN TRY
		DECLARE @firstRec INT
		DECLARE @lastRec INT
		DECLARE @t TABLE (
			idfsAggrCaseType BIGINT
			,idfCustomizationPackage BIGINT
			,idfsSite BIGINT
			,idfsStatisticAreaType BIGINT
			,idfsStatisticPeriodType BIGINT
			,StrCaseType NVARCHAR(4000)
			,StrAreaType NVARCHAR(4000)
			,StrPeriodType NVARCHAR(4000)
			);

		SET @firstRec = (@pageNo - 1) * @pagesize;
		SET @lastRec = (@pageNo * @pageSize + 1);

		INSERT INTO @T
		SELECT AGR.[idfsAggrCaseType]
			,AGR.[idfCustomizationPackage]
			,AGR.[idfsSite]
			,AGR.[idfsStatisticAreaType]
			,AGR.[idfsStatisticPeriodType]
			,AGRC.[name] AS StrCaseType
			,ART.[name] AS StrAreaType
			,PRT.[name] AS StrPeriodType
		FROM dbo.tstAggrSetting AS AGR
		LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000102) AGRC ON AGRC.idfsReference = AGR.idfsAggrCaseType
		LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000089) ART ON ART.idfsReference = AGR.idfsStatisticAreaType
		LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000091) PRT ON PRT.idfsReference = AGR.idfsStatisticPeriodType
		WHERE	AGR.[idfCustomizationPackage] = @idfCustomizationPackage
				AND (AGR.[idfsSite] = @idfsSite or AGR.[idfsSite] is null)
				AND AGR.intRowStatus = 0;

		WITH CTEResults
		AS (
			SELECT ROW_NUMBER() OVER (
					ORDER BY CASE 
							WHEN @sortColumn = 'idfsAggrCaseType'
								AND @SortOrder = 'asc'
								THEN idfsAggrCaseType
							END ASC
						,CASE 
							WHEN @sortColumn = 'idfsAggrCaseType'
								AND @SortOrder = 'desc'
								THEN idfsAggrCaseType
							END DESC
						,CASE 
							WHEN @sortColumn = 'idfCustomizationPackage'
								AND @SortOrder = 'asc'
								THEN idfCustomizationPackage
							END ASC
						,CASE 
							WHEN @sortColumn = 'idfCustomizationPackage'
								AND @SortOrder = 'desc'
								THEN idfCustomizationPackage
							END DESC
						,CASE 
							WHEN @sortColumn = 'idfsSite'
								AND @SortOrder = 'asc'
								THEN idfsSite
							END ASC
						,CASE 
							WHEN @sortColumn = 'idfsSite'
								AND @SortOrder = 'desc'
								THEN idfsSite
							END DESC
						,CASE 
							WHEN @sortColumn = 'idfsStatisticAreaType'
								AND @SortOrder = 'asc'
								THEN idfsStatisticAreaType
							END ASC
						,CASE 
							WHEN @sortColumn = 'idfsStatisticAreaType'
								AND @SortOrder = 'desc'
								THEN idfsStatisticAreaType
							END DESC
						,CASE 
							WHEN @sortColumn = 'idfsStatisticPeriodType'
								AND @SortOrder = 'asc'
								THEN idfsStatisticPeriodType
							END ASC
						,CASE 
							WHEN @sortColumn = 'idfsStatisticPeriodType'
								AND @SortOrder = 'desc'
								THEN idfsStatisticPeriodType
							END DESC
						,CASE 
							WHEN @sortColumn = 'StrCaseType'
								AND @SortOrder = 'asc'
								THEN StrCaseType
							END ASC
						,CASE 
							WHEN @sortColumn = 'StrCaseType'
								AND @SortOrder = 'desc'
								THEN StrCaseType
							END DESC
						,CASE 
							WHEN @sortColumn = 'StrAreaType'
								AND @SortOrder = 'asc'
								THEN StrAreaType
							END ASC
						,CASE 
							WHEN @sortColumn = 'StrAreaType'
								AND @SortOrder = 'desc'
								THEN StrAreaType
							END DESC
						,CASE 
							WHEN @sortColumn = 'StrPeriodType'
								AND @SortOrder = 'asc'
								THEN StrPeriodType
							END ASC
						,CASE 
							WHEN @sortColumn = 'StrPeriodType'
								AND @SortOrder = 'desc'
								THEN StrPeriodType
							END DESC
					) AS ROWNUM
				,COUNT(*) OVER () AS TotalRowCount
				,idfsAggrCaseType
				,idfCustomizationPackage
				,idfsStatisticAreaType
				,idfsStatisticPeriodType
				,StrCaseType
				,StrAreaType
				,StrPeriodType
			FROM @T
			)
		SELECT TotalRowCount
			,idfsAggrCaseType
			,idfCustomizationPackage
			,idfsStatisticAreaType
			,idfsStatisticPeriodType
			,StrCaseType
			,StrAreaType
			,StrPeriodType
			,TotalPages = (TotalRowCount / @pageSize) + IIF(TotalRowCount % @pageSize > 0, 1, 0)
			,CurrentPage = @pageNo
		FROM CTEResults
		WHERE RowNum > @firstRec
			AND RowNum < @lastRec;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_AggregateSetting_SET]...';


GO
-- ================================================================================================
-- Name: USP_CONF_AggregateSetting_SET		
--
-- Description: Creates and updates entries for aggregate settings.
-- 
-- Author: Lamont Mitchell
-- 
-- Revision History:
-- Name							Date       Change Detail
-- ---------------------------- ---------- -------------------------------------------------------
-- Lamont Mitchell              11/27/2018 Initial Created
-- Stephen Long                 07/08/2022 Added site alert and audit logic.
-- Ann Xiong					01/19/2022 Added scripts to allow each site to define its own Aggregate Settings
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_AggregateSetting_SET]
    @AggregateSettingRecords NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL,
    @AuditUserName NVARCHAR(200)
AS
BEGIN
    DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
            @ReturnCode BIGINT = 0,
            @AggregateDiseaseReportTypeId BIGINT = NULL,
            @CustomizationPackageId BIGINT = NULL,
			@SiteId BIGINT = NULL,
            @StatisticalAreaTypeId BIGINT = NULL,
            @StatisticalPeriodTypeId BIGINT = NULL,
            @idfsReferenceType BIGINT,
            @EventId BIGINT,
            @EventTypeId BIGINT = NULL,
            @EventSiteId BIGINT = NULL,
            @EventObjectId BIGINT = NULL,
            @EventUserId BIGINT = NULL,
            @EventDiseaseId BIGINT = NULL,
            @EventLocationId BIGINT = NULL,
            @EventInformationString NVARCHAR(MAX) = NULL,
            @EventLoginSiteId BIGINT = NULL;
    DECLARE @AggregateSettingRecordsTemp TABLE
    (
        AggregateDiseaseReportTypeId BIGINT NOT NULL,
        CustomizationPackageId BIGINT NOT NULL,
		SiteId BIGINT NULL,
        StatisticalAreaTypeId BIGINT NOT NULL,
        StatisticalPeriodTypeId BIGINT NOT NULL
    );
    DECLARE @EventsTemp TABLE
    (
        EventId BIGINT NOT NULL,
        EventTypeId BIGINT NULL,
        UserId BIGINT NULL,
        SiteId BIGINT NULL,
        LoginSiteId BIGINT NULL,
        ObjectId BIGINT NULL,
        DiseaseId BIGINT NULL,
        LocationId BIGINT NULL,
        InformationString NVARCHAR(MAX) NULL
    );
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );

    SET NOCOUNT ON;

    BEGIN TRY
        INSERT INTO @AggregateSettingRecordsTemp
        SELECT *
        FROM
            OPENJSON(@AggregateSettingRecords)
            WITH
            (
                AggregateDiseaseReportTypeId BIGINT,
                CustomizationPackageId BIGINT,
				SiteId BIGINT,
                StatisticalAreaTypeId BIGINT,
                StatisticalPeriodTypeId BIGINT
            );


        WHILE EXISTS (SELECT * FROM @AggregateSettingRecordsTemp)
        BEGIN
            SELECT TOP 1
                @AggregateDiseaseReportTypeId = AggregateDiseaseReportTypeId,
                @CustomizationPackageId = CustomizationPackageId,
				@SiteId = SiteId,
                @StatisticalAreaTypeId = StatisticalAreaTypeId,
                @StatisticalPeriodTypeId = StatisticalPeriodTypeId
            FROM @AggregateSettingRecordsTemp;

            IF EXISTS
            (
                SELECT idfsAggrCaseType,
                       idfCustomizationPackage,
					   idfsSite,
                       idfsStatisticAreaType,
                       idfsStatisticPeriodType
                FROM dbo.tstAggrSetting
                WHERE idfsAggrCaseType = @AggregateDiseaseReportTypeId
                      AND idfCustomizationPackage = @CustomizationPackageId
					  --AND idfsSite = @SiteId
                      AND intRowStatus = 0
            )
            BEGIN
                UPDATE dbo.tstAggrSetting
                SET idfsStatisticAreaType = @StatisticalAreaTypeId,
                    idfsStatisticPeriodType = @StatisticalPeriodTypeId,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfsAggrCaseType = @AggregateDiseaseReportTypeId
                      AND idfCustomizationPackage = @CustomizationPackageId
					  --AND idfsSite = @SiteId
                      AND intRowStatus = 0;
            END
            ELSE
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tstAggrSetting',
                                                  @AggregateDiseaseReportTypeId OUTPUT;

                INSERT INTO dbo.tstAggrSetting
                (
                    idfsAggrCaseType,
                    idfCustomizationPackage,
					--idfsSite,
                    idfsStatisticAreaType,
                    idfsStatisticPeriodType,
                    AuditCreateDTM,
                    AuditCreateUser,
                    SourceSystemKeyValue,
                    SourceSystemNameID
                )
                VALUES
                (@AggregateDiseaseReportTypeId,
                 @CustomizationPackageId,
				 --@SiteId,
                 @StatisticalAreaTypeId,
                 @StatisticalPeriodTypeId,
                 GETDATE(),
                 @AuditUserName,
                 '[{"idfsAggrCaseType":' + CAST(@AggregateDiseaseReportTypeId AS NVARCHAR(300))
                 + ',"idfCustomizationPackage":' + CAST(@CustomizationPackageId AS NVARCHAR(300)) + '}]',
                 10519001
                );

                UPDATE @EventsTemp
                SET ObjectId = @AggregateDiseaseReportTypeId
                WHERE ObjectId = 0;
            END

            DELETE FROM @AggregateSettingRecordsTemp
            WHERE AggregateDiseaseReportTypeId = @AggregateDiseaseReportTypeId;
        END

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                            @EventTypeId,
                                            @EventUserId,
                                            @EventObjectId,
                                            @EventDiseaseId,
                                            @EventSiteId,
                                            @EventInformationString,
                                            @EventLoginSiteId,
                                            @EventLocationId,
                                            @AuditUserName;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        SELECT @ReturnCode 'ReturnCode',
               @ReturnMessage 'ReturnMessage';
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_DATAAUDITLOG_GETList]...';


GO

-- =============================================
-- Author:		Manickandan Govindarajan
-- Create date: 06/20/2022
-- Description:	Gets the audit event list for the given parameters
-- Manickandan Govidarajan 11/22/2022 - Added additional out columns
-- Manickandan Govindarajan 11/3/2022 - Updated condition
-- Manickandan Govindarajan 01/24/2023  - Added logic to searcg @idfObjectId in related tables

-- =============================================
ALTER PROCEDURE [dbo].[USP_ADMIN_DATAAUDITLOG_GETList]
	@languageId AS NVARCHAR(50),
	@startDate DateTime = NULL,
	@endDate DateTime = NULL,
	@idfUserId BIGINT = NULL,
	@idfSiteId BIGINT = NULL, 
	@idfActionId BIGINT = NULL, 
	@idfObjetType BIGINT = NULL, 
	@idfObjectId NVARCHAR(50) =NULL,
	@SortColumn NVARCHAR(30) = 'TransactionDate',
	@SortOrder NVARCHAR(4) = 'DESC',
	@Page INT = 1,
	@PageSize INT = 10
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @firstRec INT;
	DECLARE @lastRec INT;

	BEGIN TRY
		SET @firstRec = (@Page-1)* @pagesize
		SET @lastRec = (@Page*@pageSize+1);

		if (@idfObjetType in (10017073, 10017006, 10017005, 10017062, 10017069,  10017077  ,10017074,10017075, 10017078 ,10017080 ,10017081 ,10017004, 10017088, 10017085, 10017059, 10017061,10017063) and @idfObjectId  is NOT NULL AND @idfObjectId ! = '')  
		BEGIN
			WITH CTEResults AS
			(
				SELECT ROW_NUMBER() OVER ( ORDER BY
				CASE WHEN @sortColumn = 'TransactionDate' AND @SortOrder = 'ASC' THEN ae.datEnteringDate END ASC,
				CASE WHEN @sortColumn = 'TransactionDate' AND @SortOrder = 'DESC' THEN ae.datEnteringDate END DESC,
				CASE WHEN @sortColumn = 'siteName' AND @SortOrder = 'ASC' THEN ae.idfsSite   END ASC,
				CASE WHEN @sortColumn = 'siteName' AND @SortOrder = 'DESC' THEN ae.idfsSite END DESC,
				CASE WHEN @sortColumn = 'UserName' AND @SortOrder = 'ASC' THEN ae.idfUserID   END ASC,
				CASE WHEN @sortColumn = 'UserName' AND @SortOrder = 'DESC' THEN ae.idfUserID END DESC,
				CASE WHEN @sortColumn = 'ActionName' AND @SortOrder = 'ASC' THEN ae.idfsDataAuditEventType   END ASC,
				CASE WHEN @sortColumn = 'ActionName' AND @SortOrder = 'DESC' THEN ae.idfsDataAuditEventType END DESC,
				CASE WHEN @sortColumn = 'ObjectType' AND @SortOrder = 'ASC' THEN ae.idfsDataAuditObjectType  END ASC,
				CASE WHEN @sortColumn = 'ObjectType' AND @SortOrder = 'DESC' THEN ae.idfsDataAuditObjectType END DESC,
				CASE WHEN @sortColumn = 'StrObject' AND @SortOrder = 'ASC' THEN ae.strMainObject  END ASC,
				CASE WHEN @sortColumn = 'StrObject' AND @SortOrder = 'DESC' THEN ae.strMainObject END DESC
				)  AS ROWNUM,
						ae.strSiteName siteName,
						ae.idfsSite siteId,
						ae.idfUserID userId,
						ae.strFirstName userFirstName,
						ae.strFamilyName userFamilyName,
						ae.datEnteringDate TransactionDate,
						ae.ActionName,
						ae.idfsDataAuditEventType actionTypeId,
						ae.ObjectType,
						ae.idfsDataAuditObjectType ObjectTypeId,
						ae.idfMainObjectTable ObjectTable,
						ae.idfMainObject ObjectId,
						ae.idfDataAuditEvent auditEventId,
						tt.strName tableName,
						ae.strMainObject,
						COUNT(*) OVER () AS TotalRowCount
					from dbo.fn_DataAudit_SelectList(@languageId) ae
					INNER join tauTable tt 
					on tt.idfTable = ae.idfMainObjectTable
					LEFT JOIN	tlbHumanCase
					ON			tlbHumanCase.idfHumanCase = ae.idfMainObject
					LEFT JOIN	tlbVetCase
					ON			tlbVetCase.idfVetCase = ae.idfMainObject
					LEFT JOIN	tlbOutbreak
					ON			tlbOutbreak.idfOutbreak = ae.idfMainObject
					LEFT JOIN	tlbCampaign
					ON			tlbCampaign.idfCampaign = ae.idfMainObject
					LEFT JOIN	tlbMonitoringSession
					ON			tlbMonitoringSession.idfMonitoringSession = ae.idfMainObject
					LEFT JOIN	tlbAggrCase
					ON			tlbAggrCase.idfAggrCase = ae.idfMainObject
					LEFT JOIN	tlbVectorSurveillanceSession
					ON			tlbVectorSurveillanceSession.idfVectorSurveillanceSession =ae.idfMainObject
					LEFT JOIN	tlbBasicSyndromicSurveillance
					ON			tlbBasicSyndromicSurveillance.idfBasicSyndromicSurveillance = ae.idfMainObject
					LEFT JOIN	tlbBasicSyndromicSurveillanceAggregateHeader
					ON			tlbBasicSyndromicSurveillanceAggregateHeader.idfAggregateHeader = ae.idfMainObject
					LEFT JOIN	tlbReportForm
					ON			tlbReportForm.idfReportForm = ae.idfMainObject
					where 0=0 and
						(ae.idfsSite = @idfSiteId OR @idfSiteId IS NULL) 
						AND (ae.idfUserID = @idfUserId OR @idfUserId IS NULL) 
						AND (ae.idfsDataAuditEventType = @idfActionId OR @idfActionId IS NULL) 
						AND (ae.idfsDataAuditObjectType = @idfObjetType OR @idfObjetType IS NULL) 
						AND
						((@startdate is null and @enddate is null)
							or
							(@startdate is null and @enddate is not null and cast(ae.datEnteringDate as date) <= cast(@enddate as date) )
							or
							(@startdate is not null and @enddate is null and cast(ae.datEnteringDate as date) >= cast(@startdate as date) )
							or
							(@startdate is not null and @enddate is not null and cast(ae.datEnteringDate as date) BETWEEN  cast(@startdate as date)  AND  cast(@enddate as date)))
						AND (CASE tt.strName	
										WHEN 'tlbVetCase' THEN tlbVetCase.strCaseID	-- Vet Disease Report
										WHEN 'tlbHumanCase'	THEN tlbHumanCase.strCaseID	 -- Humand Disease Report
										WHEN 'tlbOutbreak'	THEN tlbOutbreak.strOutbreakID	 -- OutBreak Session
										WHEN 'tlbCampaign'	THEN tlbCampaign.strCampaignID  -- Vet and Human Campaign
										WHEN 'tlbMonitoringSession'	THEN tlbMonitoringSession.strMonitoringSessionID  -- Vet and Human ASS
										WHEN 'tlbVectorSurveillanceSession'	THEN tlbVectorSurveillanceSession.strSessionID  -- Vector Surveillance Session
										WHEN 'tlbAggrCase'	THEN tlbAggrCase.strCaseID   -- Human and Vet Aggregate Case
										WHEN 'tlbBasicSyndromicSurveillance'	THEN tlbBasicSyndromicSurveillance.strFormID  -- 
										WHEN 'tlbBasicSyndromicSurveillanceAggregateHeader'	THEN tlbBasicSyndromicSurveillanceAggregateHeader.strFormID --ILI
										WHEN 'tlbReportForm'	THEN tlbReportForm.strReportFormID  -- Weekly Reporting Form

							END Like '%'+trim(@idfObjectId)+'%')

			)
			SELECT 	auditEventId, 
					siteName,	
					siteId,
					userId,
					userFirstName,
					userFamilyName,
					TransactionDate,
					ActionName,
					actionTypeId,
					ObjectType,
					ObjectTypeId,
					ObjectTable,
					ObjectId,
					tableName,
					strMainObject,
					TotalRowCount,
				TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
				CurrentPage = @Page
			FROM CTEResults WHERE RowNum > @firstRec AND RowNum < @lastRec
		END
		ELSE
		BEGIN
		WITH CTEResults AS
			(
				SELECT ROW_NUMBER() OVER ( ORDER BY
				CASE WHEN @sortColumn = 'TransactionDate' AND @SortOrder = 'ASC' THEN ae.datEnteringDate END ASC,
				CASE WHEN @sortColumn = 'TransactionDate' AND @SortOrder = 'DESC' THEN ae.datEnteringDate END DESC,
				CASE WHEN @sortColumn = 'siteName' AND @SortOrder = 'ASC' THEN ae.idfsSite   END ASC,
				CASE WHEN @sortColumn = 'siteName' AND @SortOrder = 'DESC' THEN ae.idfsSite END DESC,
				CASE WHEN @sortColumn = 'UserName' AND @SortOrder = 'ASC' THEN ae.idfUserID   END ASC,
				CASE WHEN @sortColumn = 'UserName' AND @SortOrder = 'DESC' THEN ae.idfUserID END DESC,
				CASE WHEN @sortColumn = 'ActionName' AND @SortOrder = 'ASC' THEN ae.idfsDataAuditEventType   END ASC,
				CASE WHEN @sortColumn = 'ActionName' AND @SortOrder = 'DESC' THEN ae.idfsDataAuditEventType END DESC,
				CASE WHEN @sortColumn = 'ObjectType' AND @SortOrder = 'ASC' THEN ae.idfsDataAuditObjectType  END ASC,
				CASE WHEN @sortColumn = 'ObjectType' AND @SortOrder = 'DESC' THEN ae.idfsDataAuditObjectType END DESC,
				CASE WHEN @sortColumn = 'StrObject' AND @SortOrder = 'ASC' THEN ae.strMainObject  END ASC,
				CASE WHEN @sortColumn = 'StrObject' AND @SortOrder = 'DESC' THEN ae.strMainObject END DESC
				)  AS ROWNUM,
						ae.strSiteName siteName,
						ae.idfsSite siteId,
						ae.idfUserID userId,
						ae.strFirstName userFirstName,
						ae.strFamilyName userFamilyName,
						ae.datEnteringDate TransactionDate,
						ae.ActionName,
						ae.idfsDataAuditEventType actionTypeId,
						ae.ObjectType,
						ae.idfsDataAuditObjectType ObjectTypeId,
						ae.idfMainObjectTable ObjectTable,
						ae.idfMainObject ObjectId,
						ae.idfDataAuditEvent auditEventId,
						tt.strName tableName,
						ae.strMainObject,
						COUNT(*) OVER () AS TotalRowCount
					from dbo.fn_DataAudit_SelectList(@languageId) ae
					INNER join tauTable tt 
					on tt.idfTable = ae.idfMainObjectTable
					where 0=0 and
						(ae.idfsSite = @idfSiteId OR @idfSiteId IS NULL) 
						AND (ae.idfUserID = @idfUserId OR @idfUserId IS NULL) 
						AND (ae.idfsDataAuditEventType = @idfActionId OR @idfActionId IS NULL) 
						AND (ae.idfsDataAuditObjectType = @idfObjetType OR @idfObjetType IS NULL) 
					--	AND (ae.idfMainObject = @idfObjectId OR @idfObjectId IS NULL)
						AND
						((@startdate is null and @enddate is null)
							or
							(@startdate is null and @enddate is not null and cast(ae.datEnteringDate as date) <= cast(@enddate as date) )
							or
							(@startdate is not null and @enddate is null and cast(ae.datEnteringDate as date) >= cast(@startdate as date) )
							or
							(@startdate is not null and @enddate is not null and cast(ae.datEnteringDate as date) BETWEEN  cast(@startdate as date)  AND  cast(@enddate as date)))
							)
			SELECT 	auditEventId, 
					siteName,	
					siteId,
					userId,
					userFirstName,
					userFamilyName,
					TransactionDate,
					ActionName,
					actionTypeId,
					ObjectType,
					ObjectTypeId,
					ObjectTable,
					ObjectId,
					tableName,
					strMainObject,
					TotalRowCount,
				TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
				CurrentPage = @Page
			FROM CTEResults WHERE RowNum > @firstRec AND RowNum < @lastRec
						
		END
		



END TRY

	BEGIN CATCH
		
		THROW;
	END CATCH;

	
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_ParameterDesignOptions_SET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_ParameterDesignOptions_SET
-- Description:	Save the ParameterDesignOptions
--          
-- Revision History:
-- Name            Date       Change
-- --------------- ---------- --------------------------------------------------------------------
-- Kishore Kodru    11/28/2018 Initial release for new API.
-- Doug Albanese	01/19/2021	Added the "Copy Only" feature, for use with the Copy Template SP
-- Doug Albanese	01/19/2021	Added "Begin Transaction"
-- Doug Albanese	07/01/2021	LangId Correction
-- Doug Albanese	03/02/2022	Removed all EIDSS 6 key id SP
-- Doug Albanese	06/02/2022	Removed debugging information that was left over. :(
-- Doug Albanese	01/21/2023	Alter SP to work with POCO. Remove return values, since they are not sued by any method
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_ParameterDesignOptions_SET] 
(	
	@idfsParameter		BIGINT
	,@idfsFormTemplate	BIGINT
	,@intLeft			INT
	,@intTop			INT
    ,@intWidth			INT
    ,@intHeight			INT    
    ,@intScheme			INT
    ,@intLabelSize		INT
    ,@intOrder			INT
    ,@LangID			NVARCHAR(50)  
	,@User				NVARCHAR(50) = ''
	,@CopyOnly			INT = 0
)	
AS
BEGIN	
	SET NOCOUNT ON;
	

	Declare
		@langid_int BIGINT,
		@LangID_intEN BIGINT,
		@idfParameterDesignOption BIGINT,
		@idfParameterDesignOptionEN BIGINT,
		@returnCode BIGINT = 0,
		@returnMsg  NVARCHAR(MAX) = 'Success' 

	Declare @SupressSelect table
		( ReturnCode int,
			ReturnMessage varchar(200)
		)

	BEGIN TRY
		BEGIN TRANSACTION

		SET @langid_int = dbo.FN_GBL_LanguageCode_GET(@LangID);
		SET @LangID_intEN = dbo.FN_GBL_LanguageCode_GET(@LangID); 
	
	
		IF (@idfsFormTemplate IS NULL)
			BEGIN
				SELECT @idfParameterDesignOption = [idfParameterDesignOption]
				FROM dbo.ffParameterDesignOption
				WHERE [idfsParameter] = @idfsParameter
					  AND idfsFormTemplate IS NULL
					  AND [idfsLanguage] = @langid_int
					  AND [intRowStatus] = 0
			END
		ELSE
			BEGIN	         	
				SELECT @idfParameterDesignOption = [idfParameterDesignOption]
				FROM dbo.ffParameterDesignOption
				WHERE [idfsParameter] = @idfsParameter
					  AND [idfsFormTemplate] = @idfsFormTemplate
					  AND [idfsLanguage] = @langid_int
					  AND [intRowStatus] = 0    	
			END

--		SELECT @idfParameterDesignOption

		IF (@idfParameterDesignOption IS NULL)
			BEGIN
				
				--EXEC dbo.[usp_sysGetNewID] @idfParameterDesignOption OUTPUT
				INSERT INTO @SupressSelect
				EXEC	dbo.USP_GBL_NEXTKEYID_GET 'ffParameterDesignOption', @idfParameterDesignOption OUTPUT;
				INSERT [dbo].[ffParameterDesignOption]
					(
				   		[idfParameterDesignOption]
					    ,[intLeft]
					    ,[intTop]
					    ,[intWidth]
					    ,[intHeight]					   
					    ,[intScheme]
					    ,[intLabelSize]					 
					    ,[idfsParameter]
					    ,[idfsLanguage]
					    ,[idfsFormTemplate]
					    ,[intOrder]
						,strMaintenanceFlag
						,SourceSystemNameID
						,SourceSystemKeyValue
						,AuditCreateDTM
						,AuditCreateUser
				   )
				VALUES
				   (
				   		@idfParameterDesignOption
						,@intLeft
						,@intTop
					    ,@intWidth
					    ,@intHeight					   
					    ,@intScheme
					    ,@intLabelSize					  
					    ,@idfsParameter
					    ,@langid_int
					    ,@idfsFormTemplate
					    ,@intOrder
						,'V7 Reference. FF'
						,10519001
						,'[{"idfParameterDesignOption":' + CAST(@idfParameterDesignOption AS NVARCHAR(24)) + '}]'
						,GETDATE()
						,@User
				   )
				   
	
				IF (@LangID <> 'en-US')
					BEGIN
				
						IF (@idfsFormTemplate IS NULL)
							BEGIN
								SELECT @idfParameterDesignOptionEN = [idfParameterDesignOption]
								FROM dbo.ffParameterDesignOption
								WHERE [idfsParameter] = @idfsParameter
									  AND idfsFormTemplate IS NULL
									  AND [idfsLanguage] = @LangID_intEN 
									  AND intRowStatus = 0
							END
						ELSE
							BEGIN	         	
								SELECT @idfParameterDesignOptionEN = [idfParameterDesignOption]
								FROM dbo.ffParameterDesignOption
								WHERE [idfsParameter] = @idfsParameter
									  AND [idfsFormTemplate] = @idfsFormTemplate
									  AND [idfsLanguage] = @LangID_intEN 
									  AND intRowStatus = 0  	
							END
							
				
						IF (@idfParameterDesignOptionEN IS NULL)
							BEGIN
								--EXEC dbo.[usp_sysGetNewID] @idfParameterDesignOptionEN OUTPUT
								INSERT INTO @SupressSelect
								EXEC	dbo.USP_GBL_NEXTKEYID_GET 'ffParameterDesignOption', @idfParameterDesignOption OUTPUT;
								
								INSERT [dbo].[ffParameterDesignOption]
									(
				   						[idfParameterDesignOption]
										,[intLeft]
										,[intTop]
										,[intWidth]
										,[intHeight]					  
										,[intScheme]
										,[intLabelSize]						 
										,[idfsParameter]
										,[idfsLanguage]
										,[idfsFormTemplate]
										,[intOrder]
										,strMaintenanceFlag
										,SourceSystemNameID
										,SourceSystemKeyValue
										,AuditCreateDTM
										,AuditCreateUser
									)
								VALUES
									(
				   						@idfParameterDesignOptionEN
										,@intLeft
										,@intTop
										,@intWidth
										,@intHeight					   
										,@intScheme
										,@intLabelSize					 
										,@idfsParameter
										,@LangID_intEN
										,@idfsFormTemplate
										,@intOrder
										,'V7 Reference. FF'
										,10519001
										,'[{"idfParameterDesignOption":' + CAST(@idfParameterDesignOption AS NVARCHAR(24)) + '}]'
										,GETDATE()
										,@User
									)			                     	
							END
					END
			END
		ELSE
			BEGIN
	         	UPDATE [dbo].[ffParameterDesignOption]
				SET [intLeft] = @intLeft				
					,[intTop] = @intTop
					,[intWidth] = @intWidth
					,[intHeight] = @intHeight						  
					,[intScheme] = @intScheme
					,[intLabelSize] = @intLabelSize
					,[intOrder] = @intOrder
					,[intRowStatus] = 0	
					,AuditUpdateDTM = GETDATE()
					,AuditUpdateUser = @User					
				WHERE [idfParameterDesignOption] = @idfParameterDesignOption
			END	

		--IF @CopyOnly = 0
		--	BEGIN
		--		SELECT @returnCode, @returnMsg
		--	END

		COMMIT TRANSACTION;
	END TRY 
	BEGIN CATCH   
	
		IF @@TRANCOUNT > 0 AND @CopyOnly = 0
			ROLLBACK TRANSACTION;

		THROW;
	END CATCH;
   
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_ParameterTemplateForCopy_SET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_ParameterTemplate_SET
-- Description: Save the Parameter Template
--          
-- Revision History:
-- Name				Date		Change
-- ---------------	----------	--------------------------------------------------------------------
-- Doug Albanese    11/28/2018	Initial release for new API.
-- Doug Albanese	01/20/2023	Removal of "function Call" suppression
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_ParameterTemplateForCopy_SET] 
(
	@idfsParameter BIGINT
	,@idfsFormTemplate BIGINT
	,@LangID NVARCHAR(50) = NULL
	,@idfsEditMode BIGINT = NULL
	,@intLeft INT = NULL
	,@intTop INT = NULL
	,@intWidth INT = NULL
	,@intHeight INT = NULL
	,@intScheme INT = NULL
	,@intLabelSize INT = NULL
	,@intOrder INT = NULL
	,@blnFreeze BIT = NULL
	,@User NVARCHAR(50) = ''
	,@CopyOnly INT = 0
	,@FunctionCall INT = 0
)
AS
BEGIN
	SET NOCOUNT ON;	
	
	DECLARE 
		@returnCode BIGINT = 0,
		@returnMsg  NVARCHAR(MAX) = 'Success' 

	BEGIN TRY
		DECLARE @SupressSelect TABLE
		( 
			retrunCode INT,
			returnMsg NVARCHAR(200)
		)

		IF (@idfsEditMode IS NULL) SET @idfsEditMode = 10068001
		IF (@intLeft IS NULL) SET @intLeft = 0
		IF (@intTop IS NULL) SET @IntTop = 0
		IF (@intWidth IS NULL) SET @intWidth = 0
		IF (@intHeight IS NULL) SET @intHeight = 0
		IF (@intScheme IS NULL)	 SET @intScheme = 0
		IF (@blnFreeze IS NULL) SET @blnFreeze = 0
		
		IF (@intLabelSize IS NULL)
			BEGIN 
				IF (@intScheme = 0 OR @intScheme = 1)
					BEGIN
						SET @intLabelSize = @intWidth / 2
					END
			END
		ELSE
			BEGIN
				SET @intLabelSize = @intWidth
			END

		IF (@intOrder IS NULL) SET @intOrder = 0
			
		IF NOT EXISTS (SELECT TOP 1 1
					   FROM [dbo].[ffParameterForTemplate]
					   WHERE [idfsParameter] = @idfsParameter
							 AND [idfsFormTemplate] = @idfsFormTemplate)
			BEGIN
				INSERT INTO [dbo].[ffParameterForTemplate]
					(
           				[idfsParameter]
           				,[idfsFormTemplate]			  	   
						,[idfsEditMode]		
						,[blnFreeze]
						,AuditCreateDTM
						,AuditCreateUser
					)
				VALUES
					(
           				@idfsParameter
           				,@idfsFormTemplate
						,@idfsEditMode	
						,@blnFreeze	
						,GETDATE()
						,@User	
					)          
			END
		ELSE
			BEGIN
				UPDATE [dbo].[ffParameterForTemplate]
				SET [idfsEditMode] = @idfsEditMode
					,[blnFreeze] = @blnFreeze
					,[intRowStatus] = 0
					,AuditUpdateDTM = GETDATE()
					,AuditUpdateUser = @User
 				WHERE [idfsParameter] = @idfsParameter
					  AND [idfsFormTemplate] = @idfsFormTemplate 						
			END

		IF @FunctionCall = 1
			BEGIN
				--INSERT INTO @SupressSelect
				EXEC dbo.[USP_ADMIN_FF_ParameterDesignOptions_SET] 
					 @idfsParameter
					 ,@idfsFormTemplate
					 ,@intLeft
					 ,@intTop
					 ,@intWidth
					 ,@intHeight			
					 ,@intScheme
					 ,@intLabelSize
					 ,@intOrder
					 ,@LangID
					 ,@User
					 ,1
			END
		ELSE
			BEGIN
				--INSERT INTO @SupressSelect
				EXEC dbo.[USP_ADMIN_FF_ParameterDesignOptions_SET] 
					 @idfsParameter
					 ,@idfsFormTemplate
					 ,@intLeft
					 ,@intTop
					 ,@intWidth
					 ,@intHeight			
					 ,@intScheme
					 ,@intLabelSize
					 ,@intOrder
					 ,@LangID
					 ,@User
					 ,@CopyOnly
			END

		IF @CopyOnly = 0
			BEGIN
				SELECT @returnCode AS ReturnCode, @returnMsg AS ReturnMessage
			END

	END TRY
	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_Templates_GET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_Templates_GET
-- Description: Return list of Templates
--          
-- Revision History:
-- Name            Date			Change
-- --------------- ----------	--------------------------------------------------------------------
-- Kishore Kodru    11/28/2018	Initial release for new API.
-- Stephen Long     10/02/2019	Removed commit transaction.
-- Doug Albanese	09/21/2021	Added Disease Id for filtering by Outbreak/FFD connection
-- Doug Albanese	09/29/2021	Corrected the joins to return query by idfsFormType
-- Mark Wilson		09/30/2021	Updated to use FN_GBL_ReferenceRepair_GET
-- Doug Albanese	10/28/2021	Removed disease query
-- Doug Albanese	01/20/2023	Added the determinate value on return
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_Templates_GET]
(
	@LangID								NVARCHAR(50)
	,@idfsFormTemplate					BIGINT = NULL
	,@idfsFormType						BIGINT = NULL
)	
AS
BEGIN	
	SET NOCOUNT ON;

	BEGIN TRY

		SELECT 
			FT.idfsFormTemplate,
			FT.idfsFormType,
			FT.blnUNI,
			FT.rowguid,
			FT.intRowStatus,
			FT.strNote,
			RF.strDefault AS DefaultName,
			RF.[name] AS NationalName,
			RF.[LongName] AS NationalLongName,
			DV.idfsBaseReference AS idfsDiagnosisOrDiagnosisGroup
		
		FROM [dbo].[ffFormTemplate] FT
		LEFT JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID, 19000033) RF ON FT.idfsFormTemplate = RF.idfsReference
		LEFT JOIN dbo.ffDeterminantValue DV ON DV.idfsFormTemplate = FT.idfsFormTemplate
		WHERE ((FT.idfsFormTemplate = @idfsFormTemplate ) OR (@idfsFormTemplate IS NULL))
		AND ((FT.idfsFormType  = @idfsFormType) OR (@idfsFormType  IS NULL))	  
		AND (FT.intRowStatus = 0)
		
		ORDER BY NationalName;

	END TRY 
	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_ORG_DEL]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_ORG_DEL
--
-- Description:	Set an organization record to inactive.
--                      
-- Author: Ricky Moss
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		06/14/2019 Initial release.
-- Ricky Moss		06/11/2020 Set References of organization names to inactive.
-- Stephen Long     04/24/2021 Added dbo prefix.
-- Stephen Long     06/18/2021 Added check for site association; return 1 when site ID is not null.
--
-- Testing Code:
--
-- EXEC USP_ADMIN_ORG_DEL, 1
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_ORG_DEL] (@OrganizationKey BIGINT)
AS
DECLARE @ReturnCode INT = 0
	,@ReturnMessage NVARCHAR(MAX) = 'SUCCESS'
	,@OrganizationAbbreviatedNameID BIGINT
	,@OrganizationFullNameID BIGINT;

BEGIN
	BEGIN TRY
		DECLARE @SiteID BIGINT = NULL;

		SELECT @SiteID = (
				SELECT s.idfsSite
				FROM dbo.tlbOffice o
				INNER JOIN dbo.tstSite s ON s.idfOffice = o.idfOffice
				WHERE o.idfOffice = @OrganizationKey
				);

		IF @SiteID IS NULL
		BEGIN
			SELECT @OrganizationAbbreviatedNameID = (
					SELECT idfsOfficeAbbreviation
					FROM dbo.tlbOffice
					WHERE idfOffice = @OrganizationKey
					);

			SELECT @OrganizationFullNameID = (
					SELECT idfsOfficeName
					FROM dbo.tlbOffice
					WHERE idfOffice = @OrganizationKey
					);

			UPDATE dbo.trtBaseReference
			SET intRowStatus = 1
			WHERE idfsBaseReference IN (
					@OrganizationAbbreviatedNameID
					,@OrganizationFullNameID
					);

			UPDATE dbo.trtStringNameTranslation
			SET intRowStatus = 1
			WHERE idfsBaseReference IN (
					@OrganizationAbbreviatedNameID
					,@OrganizationFullNameID
					);

			UPDATE dbo.tlbOffice
			SET intRowStatus = 1
			WHERE idfOffice = @OrganizationKey;
		END
		ELSE
		BEGIN
			SET @ReturnCode = 1;
			SET @ReturnMessage = 'IN USE';
		END;

		SELECT @ReturnCode 'ReturnCode'
			,@ReturnMessage 'ReturnMessage';
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_SITE_ACTOR_GETList]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_SITE_ACTOR_GETList
--
-- Description:	Get actor list for a specific site.  Used in permissions for site filtration of the 
-- administration module - SAUC29.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     12/20/2022 Initial release.
-- Stephen Long     01/10/2023 Fix to null out employee group ID for an internal employee actor.
-- Stephen Long     01/17/2023 Added site ID to the model and removed employee group indicator 
--                             parameter.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_SITE_ACTOR_GETList]
(
    @LanguageID NVARCHAR(50),
    @PageNumber INT = 1,
    @PageSize INT = 10,
    @SortColumn NVARCHAR(30) = 'ActorName',
    @SortOrder NVARCHAR(4) = 'ASC',
    @SiteID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @FirstRecord INT,
                @LastRecord INT,
                @TotalRowCount INT = 0;
        DECLARE @Results TABLE
        (
            ActorID BIGINT NOT NULL,
            ActorTypeID BIGINT NOT NULL,
            ActorTypeName VARCHAR(MAX) NOT NULL,
            ActorName NVARCHAR(MAX) NULL,
            SiteID BIGINT NOT NULL,
            ExternalActorIndicator BIT NOT NULL,
            DefaultEmployeeGroupIndicator BIT NOT NULL
        );

        DECLARE @FinalResults TABLE
        (
            ActorID BIGINT NOT NULL,
            ActorTypeID BIGINT NOT NULL,
            ActorTypeName VARCHAR(MAX) NOT NULL,
            ActorName NVARCHAR(MAX) NULL,
            SiteID BIGINT NOT NULL,
            ExternalActorIndicator BIT NOT NULL,
            DefaultEmployeeGroupIndicator BIT NOT NULL
        );

        -- External employee group actors
        INSERT INTO @Results
        SELECT oa.idfActor,
               10023001,
               actorType.name,
               employeeGroupName.name,
               eg.idfsSite,
               1,
               0
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroup eg
                ON eg.idfEmployeeGroup = oa.idfActor
                   AND eg.intRowStatus = 0
            INNER JOIN dbo.tlbEmployee e
                ON eg.idfEmployeeGroup = e.idfEmployee
                   AND e.intRowStatus = 0
            INNER JOIN FN_GBL_ReferenceRepair(@LanguageID, 19000022) employeeGroupName
                ON employeeGroupName.idfsReference = eg.idfsEmployeeGroupName
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000023) actorType
                ON e.idfsEmployeeType = actorType.idfsReference
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND eg.idfsSite <> @SiteID
              AND oa.idfsOnSite = @SiteID;

        -- External employee actors
        INSERT INTO @Results
        SELECT oa.idfActor,
               10023002,
               actorType.name,
               dbo.FN_GBL_ConcatFullName(p.strFamilyName, p.strFirstName, p.strSecondName),
               e.idfsSite,
               1 AS ExternalActorIndicator,
               0
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployee e
                ON e.idfEmployee = oa.idfActor
                   AND e.intRowStatus = 0
            INNER JOIN dbo.tlbPerson p
                ON p.idfPerson = e.idfEmployee
                   AND p.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000023) actorType
                ON e.idfsEmployeeType = actorType.idfsReference
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND e.idfsSite <> @SiteID
              AND e.idfsEmployeeType = 10023002 -- Employee
              AND oa.idfsOnSite = @SiteID;

        -- Internal employee group actors
        INSERT INTO @Results
        SELECT eg.idfEmployeeGroup,
               10023001,
               actorType.name,
               employeeGroupName.name,
               eg.idfsSite,
               0,
               CASE
                   WHEN br.blnSystem = 1 THEN
                       1
                   ELSE
                       0
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroup eg
                ON eg.idfEmployeeGroup = oa.idfActor
                   AND eg.intRowStatus = 0
            INNER JOIN dbo.tlbEmployee e
                ON e.idfEmployee = eg.idfEmployeeGroup
                   AND e.intRowStatus = 0
            INNER JOIN FN_GBL_ReferenceRepair(@LanguageID, 19000022) employeeGroupName
                ON employeeGroupName.idfsReference = eg.idfsEmployeeGroupName
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000023) actorType
                ON e.idfsEmployeeType = actorType.idfsReference
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = eg.idfsEmployeeGroupName
                   AND br.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND eg.idfsSite = @SiteID
              AND oa.idfsOnSite = @SiteID
              AND oa.idfsObjectType = 10060011; -- Site

        -- Internal employee actors
        INSERT INTO @Results
        SELECT e.idfEmployee,
               10023002,
               actorType.name,
               dbo.FN_GBL_ConcatFullName(p.strFamilyName, p.strFirstName, p.strSecondName),
               e.idfsSite,
               0,
               0
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployee e
                ON e.idfEmployee = oa.idfActor
                   AND e.intRowStatus = 0
            INNER JOIN dbo.tlbPerson p
                ON p.idfPerson = e.idfEmployee
                   AND p.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000023) actorType
                ON e.idfsEmployeeType = actorType.idfsReference
        WHERE oa.intRowStatus = 0
              AND e.idfsSite = @SiteID
              AND oa.idfsOnSite = @SiteID
              AND oa.idfsObjectType = 10060011; -- Site

        INSERT INTO @FinalResults
        SELECT *
        FROM @Results
        GROUP BY ActorID,
                 ActorTypeID,
                 ActorTypeName,
                 ActorName,
                 SiteID,
                 ExternalActorIndicator,
                 DefaultEmployeeGroupIndicator;

        SET @FirstRecord = (@PageNumber - 1) * @PageSize;
        SET @LastRecord = (@PageNumber * @PageSize + 1);
        SET @TotalRowCount =
        (
            SELECT COUNT(*) FROM @FinalResults
        );

        SELECT ActorID,
               ActorTypeID,
               ActorTypeName,
               ActorName,
               SiteID,
               ExternalActorIndicator,
               DefaultEmployeeGroupIndicator,
               RowAction,
               [RowCount],
               TotalRowCount,
               CurrentPage,
               TotalPages
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'ActorName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ActorName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ActorName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ActorName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ActorTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ActorTypeName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ActorTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ActorTypeName
                                               END DESC
                                     ) AS RowNum,
                   ActorID,
                   ActorTypeID,
                   ActorTypeName,
                   ActorName,
                   SiteID,
                   ExternalActorIndicator,
                   DefaultEmployeeGroupIndicator,
                   0 AS RowAction,
                   COUNT(*) OVER () AS [RowCount],
                   @TotalRowCount AS TotalRowCount,
                   CurrentPage = @PageNumber,
                   TotalPages = (@TotalRowCount / @PageSize) + IIF(COUNT(*) % @PageSize > 0, 1, 0)
            FROM @FinalResults
            GROUP BY ActorID,
                     ActorTypeID,
                     ActorTypeName,
                     ActorName,
                     SiteID,
                     ExternalActorIndicator,
                     DefaultEmployeeGroupIndicator
        ) AS x
        WHERE RowNum > @FirstRecord
              AND RowNum < @LastRecord
        ORDER BY RowNum;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_HAS_DISEASE_REPORT_GETList]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USP_HAS_DISEASE_REPORT_GETList
--
-- Description: Get a list of human disease reports for the Human Active Surveillance module.
--          
-- Revision History:
-- Name				 Date		 Change Detail
-- ----------------	 ----------	 -------------------------------------------------------------------
-- Doug Albanese	 09/28/2022  Initial release.
-- Mike Kornegay	 01/23/2022	 Changed FETCH NEXT to record paging.
--
-- Testing code:
-- EXEC USP_HUM_DISEASE_REPORT_GETList 'en-US'
-- EXEC USP_HUM_DISEASE_REPORT_GETList 'en-US', @EIDSSReportID = 'H'
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HAS_DISEASE_REPORT_GETList]
   @LanguageID NVARCHAR(50),
   @SessionKey BIGINT = NULL,
   @ApplySiteFiltrationIndicator BIT = 0,
   @UserSiteID BIGINT,
   @UserOrganizationID BIGINT,
   @UserEmployeeID BIGINT,
   @SortColumn NVARCHAR(30) = 'ReportID',
   @SortOrder NVARCHAR(4) = 'DESC',
   @Page INT = 1,
   @PageSize INT = 10
AS
BEGIN
    SET NOCOUNT ON;

	DECLARE @firstRec INT;
    DECLARE @lastRec INT;
    SET @firstRec = (@Page - 1) * @PageSize
    SET @lastRec = (@Page * @PageSize + 1);

    DECLARE @AdministrativeLevelNode AS HIERARCHYID,
            @LocationOfExposureLevelNode AS HIERARCHYID;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID)
   );

    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );

    BEGIN TRY
        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        -- ========================================================================================
        -- NO SITE FILTRATION RULES APPLIED
        --
        -- For first and second level sites, do not apply any site filtration rules.
        -- ========================================================================================
        IF @ApplySiteFiltrationIndicator = 0
		   BEGIN
			   INSERT INTO @Results
			   SELECT hc.idfHumanCase,
					  1,
					  1,
					  1,
					  1,
					  1
			   FROM dbo.tlbHumanCase hc
				   INNER JOIN dbo.tlbHuman h
					   ON h.idfHuman = hc.idfHuman
						  AND h.intRowStatus = 0
				   INNER JOIN dbo.tlbGeoLocation currentAddress
					   ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
   --------------------------------------------------------------------------------------------------------------------
				   LEFT JOIN dbo.gisLocationDenormalized g
					   ON g.idfsLocation = currentAddress.idfsLocation
				   LEFT JOIN dbo.tlbMaterial m
					   ON m.idfHumanCase = hc.idfHumanCase
						  AND m.intRowStatus = 0
				   LEFT JOIN dbo.tlbGeoLocation exposure
					   ON exposure.idfGeoLocation = hc.idfPointGeoLocation
				   LEFT JOIN dbo.gisLocationDenormalized gExposure
					   ON gExposure.idfsLocation = exposure.idfsLocation
			   WHERE hc.intRowStatus = 0
					 AND hc.idfsFinalDiagnosis IS NOT NULL
					 AND (
							 hc.idfParentMonitoringSession = @SessionKey
							 OR @SessionKey IS NULL
						 )
			   GROUP BY hc.idfHumanCase
			   OPTION (RECOMPILE);
		   END
        ELSE
		   BEGIN -- Site Filtration
			   
			   INSERT INTO @Results
			   SELECT hc.idfHumanCase,
				  1,
				  1,
				  1,
				  1,
				  1
			   FROM dbo.tlbHumanCase hc
			   INNER JOIN dbo.tlbHuman h ON h.idfHuman = hc.idfHuman AND h.intRowStatus = 0
			   INNER JOIN dbo.tlbGeoLocation currentAddress ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
			   LEFT JOIN dbo.gisLocationDenormalized g ON g.idfsLocation = currentAddress.idfsLocation
			   LEFT JOIN dbo.tlbMaterial m ON m.idfHumanCase = hc.idfHumanCase AND m.intRowStatus = 0
			   LEFT JOIN dbo.tlbGeoLocation exposure ON exposure.idfGeoLocation = hc.idfPointGeoLocation
			   LEFT JOIN dbo.gisLocationDenormalized gExposure ON gExposure.idfsLocation = exposure.idfsLocation
            
			   WHERE hc.intRowStatus = 0
			   AND hc.idfsSite = @UserSiteID
			   AND hc.idfsFinalDiagnosis IS NOT NULL
			   AND (hc.idfParentMonitoringSession = @SessionKey OR @SessionKey IS NULL)
			   GROUP BY hc.idfHumanCase
			   OPTION (RECOMPILE);

			   DECLARE @FilteredResults TABLE
			   (
				   ID BIGINT NOT NULL,
				   ReadPermissionIndicator BIT NOT NULL,
				   AccessToPersonalDataPermissionIndicator BIT NOT NULL,
				   AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
				   WritePermissionIndicator BIT NOT NULL,
				   DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID)
			   );

			   -- =======================================================================================
			   -- DEFAULT SITE FILTRATION RULES
			   --
			   -- Apply active default site filtration rules for third level sites.
			   -- =======================================================================================
			   DECLARE @RuleActiveStatus INT = 0;
			   DECLARE @AdministrativeLevelTypeID INT;
			   DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
			   DECLARE @DefaultAccessRules AS TABLE
			   (
				   AccessRuleID BIGINT NOT NULL,
				   ActiveIndicator INT NOT NULL,
				   ReadPermissionIndicator BIT NOT NULL,
				   AccessToPersonalDataPermissionIndicator BIT NOT NULL,
				   AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
				   WritePermissionIndicator BIT NOT NULL,
				   DeletePermissionIndicator BIT NOT NULL,
				   AdministrativeLevelTypeID INT NULL
			   );

			   INSERT INTO @DefaultAccessRules
			   SELECT AccessRuleID,
					  a.intRowStatus,
					  a.ReadPermissionIndicator,
					  a.AccessToPersonalDataPermissionIndicator,
					  a.AccessToGenderAndAgeDataPermissionIndicator,
					  a.WritePermissionIndicator,
					  a.DeletePermissionIndicator,
					  a.AdministrativeLevelTypeID
			   FROM dbo.AccessRule a
			   WHERE DefaultRuleIndicator = 1;

			   SELECT @RuleActiveStatus = ActiveIndicator
			   FROM @DefaultAccessRules
			   WHERE AccessRuleID = 10537000;

			   IF @RuleActiveStatus = 0
			   BEGIN
				   SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
				   FROM @DefaultAccessRules
				   WHERE AccessRuleID = 10537000;
				
				   SELECT @AdministrativeLevelNode = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
				   FROM dbo.tlbOffice o
					   INNER JOIN dbo.tlbGeoLocationShared AS l
						   ON l.idfGeoLocationShared = o.idfLocation
					   INNER JOIN dbo.gisLocationDenormalized g
						   ON g.idfsLocation = l.idfsLocation
				   WHERE o.idfOffice = @UserOrganizationID

				   -- Administrative level specified in the rule of the site where the report was created.
				   INSERT INTO @FilteredResults
				   SELECT h.idfHumanCase,
						  a.ReadPermissionIndicator,
						  a.AccessToPersonalDataPermissionIndicator,
						  a.AccessToGenderAndAgeDataPermissionIndicator,
						  a.WritePermissionIndicator,
						  a.DeletePermissionIndicator
				   FROM dbo.tlbHumanCase h
					   INNER JOIN dbo.tstSite s
						   ON h.idfsSite = s.idfsSite
					   INNER JOIN dbo.tlbOffice o
						   ON o.idfOffice = s.idfOffice
							  AND o.intRowStatus = 0
					   INNER JOIN dbo.tlbGeoLocationShared l
						   ON l.idfGeoLocationShared = o.idfLocation
							  AND l.intRowStatus = 0
					   INNER JOIN dbo.gisLocationDenormalized g ON g.idfsLocation = l.idfsLocation
					   INNER JOIN @DefaultAccessRules a
						   ON a.AccessRuleID = 10537000
				   WHERE h.intRowStatus = 0 and h.idfParentMonitoringSession = @SessionKey

				   -- Administrative level specified in the rule of the report current residence address.
				   INSERT INTO @FilteredResults
				   SELECT h.idfHumanCase,
						  a.ReadPermissionIndicator,
						  a.AccessToPersonalDataPermissionIndicator,
						  a.AccessToGenderAndAgeDataPermissionIndicator,
						  a.WritePermissionIndicator,
						  a.DeletePermissionIndicator
				   FROM dbo.tlbHumanCase h
					   INNER JOIN dbo.tlbHuman hu
						   ON hu.idfHuman = h.idfHuman
							  AND hu.intRowStatus = 0
					   INNER JOIN dbo.tlbGeoLocation l
						   ON l.idfGeoLocation = hu.idfCurrentResidenceAddress
							  AND l.intRowStatus = 0
					   INNER JOIN dbo.gisLocationDenormalized g
						   ON g.idfsLocation = l.idfsLocation
					   INNER JOIN @DefaultAccessRules a
						   ON a.AccessRuleID = 10537000
				   WHERE h.intRowStatus = 0 and h.idfParentMonitoringSession = @SessionKey

				   -- Administrative level specified in the rule of the report location of exposure, 
				   -- if corresponding field was filled in.
				   INSERT INTO @FilteredResults
				   SELECT h.idfHumanCase,
						  a.ReadPermissionIndicator,
						  a.AccessToPersonalDataPermissionIndicator,
						  a.AccessToGenderAndAgeDataPermissionIndicator,
						  a.WritePermissionIndicator,
						  a.DeletePermissionIndicator
				   FROM dbo.tlbHumanCase h
					   INNER JOIN dbo.tlbGeoLocation l
						   ON l.idfGeoLocation = h.idfPointGeoLocation
							  AND l.intRowStatus = 0
					   INNER JOIN dbo.gisLocationDenormalized g
						   ON g.idfsLocation = l.idfsLocation
					   INNER JOIN @DefaultAccessRules a
						   ON a.AccessRuleID = 10537000
				   WHERE h.intRowStatus = 0 and h.idfParentMonitoringSession = @SessionKey
				  
			   END;

            -- Report data shall be available to all sites' organizations connected to the particular report.
            -- Notification sent by, notification received by, facility where the patient first sought 
            -- care, hospital, and the conducting investigation organizations.
            SELECT @RuleActiveStatus = intRowStatus
            FROM dbo.AccessRule
            WHERE AccessRuleID = 10537001;


            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE h.intRowStatus = 0
                      AND (
                              h.idfSentByOffice = @UserOrganizationID
                              OR h.idfReceivedByOffice = @UserOrganizationID
                              OR h.idfSoughtCareFacility = @UserOrganizationID
                              OR h.idfHospital = @UserOrganizationID
                              OR h.idfInvestigatedByOffice = @UserOrganizationID
                          )
                ORDER BY h.idfHumanCase;

                -- Sample collected by and sent to organizations
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfHumanCase),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbHumanCase h
                        ON h.idfHumanCase = m.idfHumanCase
                           AND h.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE m.intRowStatus = 0
                      AND (
                              m.idfFieldCollectedByOffice = @UserOrganizationID
                              OR m.idfSendToOffice = @UserOrganizationID
                          )
                GROUP BY m.idfHumanCase,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;

                -- Sample transferred to organizations
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfHumanCase),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbHumanCase h
                        ON h.idfHumanCase = m.idfHumanCase
                           AND h.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOutMaterial tom
                        ON m.idfMaterial = tom.idfMaterial
                           AND tom.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOUT t
                        ON tom.idfTransferOut = t.idfTransferOut
                           AND t.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE m.intRowStatus = 0
                      AND t.idfSendToOffice = @UserOrganizationID
                GROUP BY m.idfHumanCase,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;
            END;

            -- Report data shall be available to the sites with the connected outbreak, if the report 
            -- is the primary report/session for an outbreak.
            SELECT @RuleActiveStatus = intRowStatus
            FROM dbo.AccessRule
            WHERE AccessRuleID = 10537002;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbOutbreak o
                        ON h.idfHumanCase = o.idfPrimaryCaseOrSession
                           AND o.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537002
                WHERE h.intRowStatus = 0
                      AND o.idfsSite = @UserSiteID;
            END;

            -- =======================================================================================
            -- CONFIGURABLE SITE FILTRATION RULES
            -- 
            -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the default rules.
            -- =======================================================================================
            -- Apply at the user's site group level, granted by a site group.
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- Apply at the user's site level, granted by a site group.
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- Apply at the user's employee group level, granted by a site group.
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- Apply at the user's ID level, granted by a site group.
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- Apply at the user's site group level, granted by a site.
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND sgs.idfsSite = h.idfsSite;

            -- Apply at the user's site level, granted by a site.
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                 AND a.GrantingActorSiteID = h.idfsSite;

            -- Apply at the user's employee group level, granted by a site.
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- Apply at the user's ID level, granted by a site.
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- Copy filtered results to results and use search criteria
            INSERT INTO @Results
            SELECT ID,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator
            FROM @FilteredResults
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = ID
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbHumanActual ha
                    ON ha.idfHumanActual = h.idfHumanActual
                       AND ha.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocation currentAddress
                    ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocationDenormalized g
                    ON g.idfsLocation = currentAddress.idfsLocation
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfHumanCase = hc.idfHumanCase
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation exposure
                    ON exposure.idfGeoLocation = hc.idfPointGeoLocation
                LEFT JOIN dbo.gisLocationDenormalized gExposure
                    ON gExposure.idfsLocation = exposure.idfsLocation
            WHERE hc.intRowStatus = 0
                  AND hc.idfsFinalDiagnosis IS NOT NULL
                  AND (
                          hc.idfParentMonitoringSession = @SessionKey
                          OR @SessionKey IS NULL
                      )
            GROUP BY ID,
                     ReadPermissionIndicator,
                     AccessToPersonalDataPermissionIndicator,
                     AccessToGenderAndAgeDataPermissionIndicator,
                     WritePermissionIndicator,
                     DeletePermissionIndicator
            OPTION (RECOMPILE);
			
        END;


        -- =======================================================================================
        -- Remove "Outbreak" tied disease reports, if filtering is needed
        -- =======================================================================================
        --IF @FilterOutbreakTiedReports = 1
        --BEGIN
        --    DELETE I
        --    FROM @Results I
        --        INNER JOIN dbo.tlbHumanCase hc
        --            ON hc.idfHumanCase = I.ID
        --    WHERE hc.idfOutbreak IS NOT NULL;
        --END;

        -- =======================================================================================
        -- DISEASE FILTRATION RULES
        --
        -- Apply disease filtration rules from use case SAUC62.
        -- =======================================================================================
        -- 
        -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
		
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT h.idfHumanCase
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = h.idfsFinalDiagnosis
                       AND oa.intRowStatus = 0
            WHERE oa.intPermission = 1
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = -506 -- Default role
        );

        -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        INSERT INTO @Results
        SELECT hc.idfHumanCase,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbHumanCase hc
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tlbHuman h
                ON h.idfHuman = hc.idfHuman
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbGeoLocation currentAddress
                ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
            LEFT JOIN dbo.gisLocationDenormalized g
                ON g.idfsLocation = currentAddress.idfsLocation
            LEFT JOIN dbo.tlbMaterial m
                ON m.idfHumanCase = hc.idfHumanCase
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation exposure
                ON exposure.idfGeoLocation = hc.idfPointGeoLocation
            LEFT JOIN dbo.gisLocationDenormalized gExposure
                ON gExposure.idfsLocation = exposure.idfsLocation
        WHERE oa.intPermission = 2 -- Allow permission
              AND hc.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup
              AND hc.idfsFinalDiagnosis IS NOT NULL
              AND (
                      hc.idfParentMonitoringSession = @SessionKey
                      OR @SessionKey IS NULL
                  )
        GROUP BY hc.idfHumanCase
        OPTION (RECOMPILE);

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbHumanCase hc
                ON hc.idfHumanCase = res.ID
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 1
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        INSERT INTO @Results
        SELECT hc.idfHumanCase,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbHumanCase hc
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbHuman h
                ON h.idfHuman = hc.idfHuman
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbGeoLocation currentAddress
                ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
            LEFT JOIN dbo.gisLocationDenormalized g
                ON g.idfsLocation = currentAddress.idfsLocation
            LEFT JOIN dbo.tlbMaterial m
                ON m.idfHumanCase = hc.idfHumanCase
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation exposure
                ON exposure.idfGeoLocation = hc.idfPointGeoLocation
            LEFT JOIN dbo.gisLocationDenormalized gExposure
                ON gExposure.idfsLocation = exposure.idfsLocation
        WHERE oa.intPermission = 2 -- Allow permission
              AND hc.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = @UserEmployeeID
              AND hc.idfsFinalDiagnosis IS NOT NULL
              AND (
                      hc.idfParentMonitoringSession = @SessionKey
                      OR @SessionKey IS NULL
                  )
        GROUP BY hc.idfHumanCase
        OPTION (RECOMPILE);

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT hc.idfHumanCase
            FROM dbo.tlbHumanCase hc
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                       AND oa.intRowStatus = 0
            WHERE intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND idfActor = @UserEmployeeID
        );
		
        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator
        FROM @Results res
        WHERE res.ReadPermissionIndicator = 1
        GROUP BY ID,
                 ReadPermissionIndicator,
                 AccessToPersonalDataPermissionIndicator,
                 AccessToGenderAndAgeDataPermissionIndicator,
                 WritePermissionIndicator,
                 DeletePermissionIndicator;

		
     --   WITH paging
     --   AS (SELECT ID,
     --              c = COUNT(*) OVER ()
     --       FROM @FinalResults res
     --           INNER JOIN dbo.tlbHumanCase hc
     --               ON hc.idfHumanCase = res.ID
     --           INNER JOIN dbo.tlbHuman h
     --               ON h.idfHuman = hc.idfHuman
     --                  AND h.intRowStatus = 0
     --           LEFT JOIN dbo.tlbGeoLocation gl
     --               ON gl.idfGeoLocation = h.idfCurrentResidenceAddress
     --           LEFT JOIN dbo.gisLocation g
     --               ON g.idfsLocation = gl.idfsLocation
     --           LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
     --               ON LH.idfsLocation = gl.idfsLocation
     --           LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
     --               ON disease.idfsReference = hc.idfsFinalDiagnosis
     --           LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) finalClassification
     --               ON finalClassification.idfsReference = hc.idfsFinalCaseStatus
     --           LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000111) reportStatus
     --               ON reportStatus.idfsReference = hc.idfsCaseProgressStatus
     --       ORDER BY CASE
     --                    WHEN @SortColumn = 'ReportID'
     --                         AND @SortOrder = 'ASC' THEN
     --                        hc.strCaseID
     --                END ASC,
     --                CASE
     --                    WHEN @SortColumn = 'ReportID'
     --                         AND @SortOrder = 'DESC' THEN
     --                        hc.strCaseID
     --                END DESC,
     --                CASE
     --                    WHEN @SortColumn = 'EnteredDate'
     --                         AND @SortOrder = 'ASC' THEN
     --                        hc.datEnteredDate
     --                END ASC,
     --                CASE
     --                    WHEN @SortColumn = 'EnteredDate'
     --                         AND @SortOrder = 'DESC' THEN
     --                        hc.datEnteredDate
     --                END DESC,
     --                CASE
     --                    WHEN @SortColumn = 'DiseaseName'
     --                         AND @SortOrder = 'ASC' THEN
     --                        disease.name
     --                END ASC,
     --                CASE
     --                    WHEN @SortColumn = 'DiseaseName'
     --                         AND @SortOrder = 'DESC' THEN
     --                        disease.name
     --                END DESC,
     --                CASE
     --                    WHEN @SortColumn = 'PersonLocation'
     --                         AND @SortOrder = 'ASC' THEN
     --                (LH.AdminLevel1Name + ', ' + LH.AdminLevel2Name)
     --                END ASC,
     --                CASE
     --                    WHEN @SortColumn = 'PersonLocation'
     --                         AND @SortOrder = 'DESC' THEN
     --                (LH.AdminLevel1Name + ', ' + LH.AdminLevel2Name)
     --                END DESC,
     --                CASE
     --                    WHEN @SortColumn = 'ClassificationTypeName'
     --                         AND @SortOrder = 'ASC' THEN
     --                        finalClassification.name
     --                END ASC,
     --                CASE
     --                    WHEN @SortColumn = 'ClassificationTypeName'
     --                         AND @SortOrder = 'DESC' THEN
     --                        finalClassification.name
					--END DESC
					--OFFSET CAST((@PageSize * (@Page - 1)) AS INT) ROWS FETCH NEXT CAST(@PageSize AS INT) ROWS ONLY)
     --   SELECT res.ID AS ReportKey,
     --          hc.strCaseId AS ReportID,
     --          ISNULL(finalClassification.name, initialClassification.name) AS ClassificationTypeName,
     --          disease.Name AS DiseaseName,
     --          ISNULL(LH.AdminLevel1Name, '') + IIF(LH.AdminLevel2Name IS NULL, '', ', ')
     --          + ISNULL(LH.AdminLevel2Name, '') AS PersonLocation,
     --          res.AccessToPersonalDataPermissionIndicator,
     --          res.AccessToGenderAndAgeDataPermissionIndicator,
     --          res.WritePermissionIndicator,
     --          res.DeletePermissionIndicator,
     --          c AS RecordCount,
     --          (
     --              SELECT COUNT(*) FROM dbo.tlbHumanCase hc WHERE hc.intRowStatus = 0
     --          ) AS TotalCount,
     --          TotalPages = (c / @PageSize) + IIF(c % @PageSize > 0, 1, 0),
     --          CurrentPage = @Page
     --   FROM @FinalResults res
     --       INNER JOIN paging
     --           ON paging.ID = res.ID
     --       INNER JOIN dbo.tlbHumanCase hc
     --           ON hc.idfHumanCase = res.ID
     --       INNER JOIN dbo.tlbHuman h
     --           ON h.idfHuman = hc.idfHuman
     --              AND h.intRowStatus = 0
     --       INNER JOIN dbo.tlbHumanActual ha
     --           ON ha.idfHumanActual = h.idfHumanActual
     --              AND ha.intRowStatus = 0
     --       LEFT JOIN dbo.tlbGeoLocation gl
     --           ON gl.idfGeoLocation = h.idfCurrentResidenceAddress
     --       LEFT JOIN dbo.gisLocation g
     --           ON g.idfsLocation = gl.idfsLocation
     --       LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
     --           ON LH.idfsLocation = gl.idfsLocation
     --       LEFT JOIN dbo.HumanActualAddlInfo haai
     --           ON haai.HumanActualAddlInfoUID = ha.idfHumanActual
     --              AND haai.intRowStatus = 0
     --       LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
     --           ON disease.idfsReference = hc.idfsFinalDiagnosis
     --       LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) initialClassification
     --           ON initialClassification.idfsReference = hc.idfsInitialCaseStatus
     --       LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) finalClassification
     --           ON finalClassification.idfsReference = hc.idfsFinalCaseStatus
     --       LEFT JOIN dbo.tlbPerson p
     --           ON p.idfPerson = hc.idfPersonEnteredBy
     --              AND p.intRowStatus = 0
     --   OPTION (RECOMPILE);

	    WITH paging
        AS (SELECT ROW_NUMBER() OVER (
		    ORDER BY CASE
                         WHEN @SortColumn = 'ReportID'
                              AND @SortOrder = 'ASC' THEN
                             hc.strCaseID
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'ReportID'
                              AND @SortOrder = 'DESC' THEN
                             hc.strCaseID
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'EnteredDate'
                              AND @SortOrder = 'ASC' THEN
                             hc.datEnteredDate
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'EnteredDate'
                              AND @SortOrder = 'DESC' THEN
                             hc.datEnteredDate
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'DiseaseName'
                              AND @SortOrder = 'ASC' THEN
                             disease.name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'DiseaseName'
                              AND @SortOrder = 'DESC' THEN
                             disease.name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'PersonLocation'
                              AND @SortOrder = 'ASC' THEN
                     (LH.AdminLevel1Name + ', ' + LH.AdminLevel2Name)
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'PersonLocation'
                              AND @SortOrder = 'DESC' THEN
                     (LH.AdminLevel1Name + ', ' + LH.AdminLevel2Name)
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'ClassificationTypeName'
                              AND @SortOrder = 'ASC' THEN
                             finalClassification.name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'ClassificationTypeName'
                              AND @SortOrder = 'DESC' THEN
                             finalClassification.name
					END DESC
		) AS ROWNUM,
        COUNT(*) OVER () AS RecordCount,
		res.ID AS ReportKey,
        hc.strCaseId AS ReportID,
		hc.datEnteredDate as EnteredDate,
        ISNULL(finalClassification.name, initialClassification.name) AS ClassificationTypeName,
        disease.Name AS DiseaseName,
        ISNULL(LH.AdminLevel1Name, '') + IIF(LH.AdminLevel2Name IS NULL, '', ', ')
        + ISNULL(LH.AdminLevel2Name, '') AS PersonLocation,
        res.AccessToPersonalDataPermissionIndicator AS AccessToPersonalDataPermissionIndicator,
        res.AccessToGenderAndAgeDataPermissionIndicator AS AccessToGenderAndAgeDataPermissionIndicator,
        res.WritePermissionIndicator AS WritePermissionIndicator,
        res.DeletePermissionIndicator AS DeletePermissionIndicator,
        (
            SELECT COUNT(*) FROM dbo.tlbHumanCase hc WHERE hc.intRowStatus = 0
        ) AS TotalCount
        FROM @FinalResults res
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = res.ID
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON gl.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
                LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
                    ON LH.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                    ON disease.idfsReference = hc.idfsFinalDiagnosis
				LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) initialClassification
					ON initialClassification.idfsReference = hc.idfsInitialCaseStatus
				LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) finalClassification
                    ON finalClassification.idfsReference = hc.idfsFinalCaseStatus
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000111) reportStatus
                    ON reportStatus.idfsReference = hc.idfsCaseProgressStatus
		)
        SELECT ReportKey,
               ReportID,
			   EnteredDate,
               ClassificationTypeName,
               DiseaseName,
               PersonLocation,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
               RecordCount,
               (
                   SELECT COUNT(*) FROM dbo.tlbHumanCase hc WHERE hc.intRowStatus = 0
               ) AS TotalCount,
               TotalPages = (RecordCount / @PageSize) + IIF(RecordCount % @PageSize > 0, 1, 0),
               CurrentPage = @Page
        FROM paging
		WHERE RowNum > @firstRec
            AND RowNum < @lastRec
		ORDER BY CASE
						WHEN @SortColumn = 'ReportID'
							AND @SortOrder = 'ASC' THEN
							ReportID
					END ASC,
					CASE
						WHEN @SortColumn = 'ReportID'
							AND @SortOrder = 'DESC' THEN
							ReportID
					END DESC,
					CASE
						WHEN @SortColumn = 'EnteredDate'
							AND @SortOrder = 'ASC' THEN
							EnteredDate
					END ASC,
					CASE
						WHEN @SortColumn = 'EnteredDate'
							AND @SortOrder = 'DESC' THEN
							EnteredDate
					END DESC,
					CASE
						WHEN @SortColumn = 'DiseaseName'
							AND @SortOrder = 'ASC' THEN
							DiseaseName
					END ASC,
					CASE
						WHEN @SortColumn = 'DiseaseName'
							AND @SortOrder = 'DESC' THEN
							DiseaseName
					END DESC,
					CASE
						WHEN @SortColumn = 'PersonLocation'
							AND @SortOrder = 'ASC' THEN
							PersonLocation
					END ASC,
					CASE
						WHEN @SortColumn = 'PersonLocation'
							AND @SortOrder = 'DESC' THEN
							PersonLocation
					END DESC,
					CASE
						WHEN @SortColumn = 'ClassificationTypeName'
							AND @SortOrder = 'ASC' THEN
							ClassificationTypeName
					END ASC,
					CASE
						WHEN @SortColumn = 'ClassificationTypeName'
							AND @SortOrder = 'DESC' THEN
							ClassificationTypeName
				END DESC

   

    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USP_LAB_FAVORITE_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_FAVORITE_ADVANCED_SEARCH_GETList
--
-- Description:	Get laboratory favorites list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/21/2019 Initial release.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     01/15/2020 Added transfer ID to query.
-- Stephen Long     01/22/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/16/2020 Added sample and test list parameters and where clause criteria.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     06/06/2020 Added batch status type ID to the model.
-- Stephen Long     06/14/2020 Added action requested to the model.
-- Stephen Long     06/24/2020 Added test completed indicator to the model.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/30/2020 Removing unneeded joins.
-- Stephen Long     11/29/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Mark Wilson		08/16/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     11/18/2021 Added action requested ID and previous test status type to the 
--                             query.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     02/10/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     03/10/2022 Added note field to the query.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/11/2022 Removed show in lab list criteria.
-- Stephen Long     08/12/2022 Removed where criteria for surveillance type of both; de-activated 
--                             base reference record.  Changed group by on insert of final results.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     09/28/2022 Bug fix on item 5117.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/12/2023 Updated for site filtration queries.
-- Stephen Long     01/23/2023 Updated default sort order.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_FAVORITE_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @SampleList VARCHAR(MAX) = NULL,
    @TestList VARCHAR(MAX) = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @Results TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfSendToOffice = @UserOrganizationID
                      OR @UserOrganizationID IS NULL
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  );

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
        WHERE m.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = m.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
        WHERE m.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  );

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT m.idfMaterial,
               t.idfTesting,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator)
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      (m.idfMaterial IN (
                                            SELECT CAST([Value] AS BIGINT)
                                            FROM dbo.FN_GBL_SYS_SplitList(@SampleList, NULL, ',')
                                        )
                      )
                      OR (@SampleList IS NULL)
                  )
              AND (
                      (t.idfTesting IN (
                                           SELECT CAST([Value] AS BIGINT)
                                           FROM dbo.FN_GBL_SYS_SplitList(@TestList, NULL, ',')
                                       )
                      )
                      OR (@TestList IS NULL)
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.blnAccessioned = @AccessionedIndicatorList
                              AND m.idfsAccessionCondition IS NULL
                          )
                          OR (
                                 @AccessionedIndicatorList IS NULL
                                 AND @SampleStatusTypeList IS NULL
                             )
                      )
                      OR (
                             (
                                 (m.idfsSampleStatus IN (
                                                            SELECT CAST([Value] AS BIGINT)
                                                            FROM dbo.FN_GBL_SYS_SplitList(
                                                                                             @SampleStatusTypeList,
                                                                                             NULL,
                                                                                             ','
                                                                                         )
                                                        )
                                 )
                                 OR (
                                        m.idfsAccessionCondition IN (
                                                                        SELECT CAST([Value] AS BIGINT)
                                                                        FROM dbo.FN_GBL_SYS_SplitList(
                                                                                                         @SampleStatusTypeList,
                                                                                                         NULL,
                                                                                                         ','
                                                                                                     )
                                                                    )
                                        AND (
                                                m.idfsSampleStatus IS NULL
                                                OR m.idfsSampleStatus = 10015007 --In Repository
                                            )
                                    )
                             )
                             OR (
                                    @SampleStatusTypeList IS NULL
                                    AND @AccessionedIndicatorList IS NULL
                                )
                         )
                  )
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IN (
                                           SELECT CAST([Value] AS BIGINT)
                                           FROM dbo.FN_GBL_SYS_SplitList(vsDiseases.DiseaseIdentifiers, NULL, ',')
                                       )
                      OR m.DiseaseID = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR (@EIDSSReportCampaignOrSessionID IS NULL)
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
        GROUP BY m.idfMaterial,
                 t.idfTesting;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        DECLARE @FavoriteCount AS INT = (
                                            SELECT COUNT(*)
                                            FROM @FinalResults
                                                INNER JOIN
                                                (
                                                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                                                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                                                ) f
                                                    ON ID = f.SampleID
                                        );

        SELECT m.idfMaterial AS SampleID,
               m.idfsSite AS SiteID,
               m.idfsCurrentSite AS CurrentSiteID,
               t.idfTesting AS TestID,
               tom.idfTransferOut AS TransferID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               m.idfsSampleType AS SampleTypeID,
               sampleType.name AS SampleTypeName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               m.datFieldCollectionDate AS CollectionDate,
               m.idfFieldCollectedByPerson AS CollectedByPersonID,
               m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
               m.datFieldSentDate AS SentDate,
               m.idfSendToOffice AS SentToOrganizationID,
               t.idfsTestName AS TestNameTypeID,
               testNameType.name AS TestNameTypeName,
               t.idfsTestStatus AS TestStatusTypeID,
               testStatusType.name AS TestStatusTypeName,
               t.datStartedDate AS StartedDate,
               t.idfsTestResult AS TestResultTypeID,
               testResultType.name AS TestResultTypeName,
               t.datConcludedDate AS ResultDate,
               t.idfsTestCategory AS TestCategoryTypeID,
               testCategoryType.name AS TestCategoryTypeName,
               m.blnAccessioned AS AccessionIndicator,
               m.datAccession AS AccessionDate,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.idfSubdivision AS FreezerSubdivisionID,
               m.StorageBoxPlace,
               m.datEnteringDate AS EnteredDate,
               m.datOutOfRepositoryDate AS OutOfRepositoryDate,
               m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
               m.blnReadOnly AS ReadOnlyIndicator,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               m.idfAccesionByPerson AS AccessionedInByPersonID,
               m.datSampleStatusDate AS SampleStatusDate,
               m.strCondition AS AccessionComment,
               m.strNote AS Comment,
               a.strAnimalCode AS EIDSSAnimalID,
               m.idfsBirdStatus AS BirdStatusTypeID,
               m.idfMainTest AS MainTestID,
               m.idfsSampleKind AS SampleKindTypeID,
               b.idfsBatchStatus AS BatchStatusTypeID,
               ISNULL(   IIF(
                            (
                                SELECT COUNT(t3.idfTesting)
                                FROM dbo.tlbTesting t3
                                WHERE t3.idfsTestStatus IN (   10001003,
                                                                        --In Progress
                                                               10001004 --Preliminary
                                                           )
                                      AND t3.idfMaterial = m.idfMaterial
                                      AND t3.intRowStatus = 0
                                      AND t3.blnNonLaboratoryTest = 0
                            ) > 0,
                            1,
                            0),
                         0
                     ) AS TestAssignedIndicator,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       m.idfsSampleStatus
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       m.idfsSampleStatus
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
               THEN
                       t.idfsTestStatus
                   WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
               THEN
                       t.idfsTestStatus
               END AS ActionRequestedID,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       'Sample Deletion'
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       'Sample Destruction'
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
               THEN
                       'Validation'
                   WHEN t.idfsTestStatus = 19000502 --Marked for Deletion
               THEN
                       'Test Deletion'
               END AS ActionRequested,
               ISNULL(   IIF(
                            (
                                SELECT COUNT(t2.idfTesting)
                                FROM dbo.tlbTesting t2
                                WHERE t2.idfsTestStatus IN (   10001001,
                                                                        --Final
                                                               10001006 --Amended
                                                           )
                                      AND t2.idfMaterial = m.idfMaterial
                                      AND t2.intRowStatus = 0
                                      AND t2.blnNonLaboratoryTest = 0
                            ) > 0,
                            1,
                            0),
                         0
                     ) AS TestCompletedIndicator,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               t.PreviousTestStatusID AS PreviousTestStatusTypeID,
               m.LabModuleSourceIndicator,
               m.idfHumanCase AS HumanDiseaseReportID,
               m.idfVetCase AS VeterinaryDiseaseReportID,
               m.idfMonitoringSession AS MonitoringSessionID,
               m.idfVectorSurveillanceSession AS VectorSessionID,
               m.idfVector AS VectorID,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @FavoriteCount AS FavoriteCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN dbo.tlbTesting t
                ON t.idfTesting = res.TestID
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            ORDER BY m.blnAccessioned,
                 m.idfsSampleStatus DESC,
                 m.idfsAccessionCondition;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_FAVORITE_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_FAVORITE_GETList
--
-- Description:	Get laboratory favorites list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     10/20/2018 Initial release.
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     01/25/2019 Added intRowStatus check to where clause.
-- Stephen Long     01/30/2019 Added sample disease reference join and removed the vector 
--                             surveillance session joins as they are no longer needed.
-- Stephen Long     02/20/2019 Added disease ID to the select list.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     09/14/2019 Added pagination set 0 to bring back "all" records.
-- Stephen Long     10/20/2019 Added test assigned indicator and test name type ID to the list of 
--                             fields.
-- Stephen Long     01/15/2020 Added transfer ID to query.
-- Stephen Long     01/22/2020 Cleaned up stored procedure.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     06/06/2020 Added batch status type ID to the model.
-- Stephen Long     06/14/2020 Added action requested to the model.
-- Stephen Long     06/24/2020 Added test completed indicator to the model.
-- Stephen Long     11/29/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Mark Wilson		08/16/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     11/10/2021 Added sample ID parameter and where criteria.
-- Stephen Long     11/16/2021 Changed to use select row over instead of with cte.
-- Stephen Long     11/18/2021 Added action requested ID and previous test status type to the 
--                  query.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     02/10/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     03/10/2022 Added note field to the query.
-- Stephen Long     04/15/2022 Added join for favorites to the filtration queries.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/12/2023 Updated for site filtration queries.
-- Stephen Long     01/23/2023 Updated default sort order.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_FAVORITE_GETList]
		@LanguageID = N'en-US',
		@UserID = 161287150000872, --rykermase
		@UserEmployeeID = 420664190000872,
		@UserSiteID = 864,
		@UserOrganizationID = 758210000000,
		@UserSiteGroupID = NULL,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_FAVORITE_GETList]
(
    @LanguageID NVARCHAR(50),
    @SampleID BIGINT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @Results
        SELECT m.idfMaterial,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  );

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = @UserSiteGroupID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfSiteGroup = @UserSiteGroupID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfMaterial = @SampleID
                      OR @SampleID IS NULL
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS (
                              SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
              );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT res.ID,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator)
        FROM @Results res
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
        GROUP BY res.ID;

        DECLARE @FavoriteCount AS INT = (
                                            SELECT COUNT(*)
                                            FROM @FinalResults
                                                INNER JOIN
                                                (
                                                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                                                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                                                ) f
                                                    ON ID = f.SampleID
                                        );

        SELECT m.idfMaterial AS SampleID,
               m.idfsSite AS SiteID,
               m.idfsCurrentSite AS CurrentSiteID,
               t.idfTesting AS TestID,
               tom.idfTransferOut AS TransferID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               m.idfsSampleType AS SampleTypeID,
               sampleType.name AS SampleTypeName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               m.datFieldCollectionDate AS CollectionDate,
               m.idfFieldCollectedByPerson AS CollectedByPersonID,
               m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
               m.datFieldSentDate AS SentDate,
               m.idfSendToOffice AS SentToOrganizationID,
               t.idfsTestName AS TestNameTypeID,
               testNameType.name AS TestNameTypeName,
               t.idfsTestStatus AS TestStatusTypeID,
               testStatusType.name AS TestStatusTypeName,
               t.datStartedDate AS StartedDate,
               t.idfsTestResult AS TestResultTypeID,
               testResultType.name AS TestResultTypeName,
               t.datConcludedDate AS ResultDate,
               t.idfsTestCategory AS TestCategoryTypeID,
               testCategoryType.name AS TestCategoryTypeName,
               m.blnAccessioned AS AccessionIndicator,
               m.datAccession AS AccessionDate,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.idfSubdivision AS FreezerSubdivisionID,
               m.StorageBoxPlace,
               m.datEnteringDate AS EnteredDate,
               m.datOutOfRepositoryDate AS OutOfRepositoryDate,
               m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
               m.blnReadOnly AS ReadOnlyIndicator,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               m.idfAccesionByPerson AS AccessionedInByPersonID,
               m.datSampleStatusDate AS SampleStatusDate,
               m.strCondition AS AccessionComment,
               m.strNote AS Comment,
               a.strAnimalCode AS EIDSSAnimalID,
               m.idfsBirdStatus AS BirdStatusTypeID,
               m.idfMainTest AS MainTestID,
               m.idfsSampleKind AS SampleKindTypeID,
               b.idfsBatchStatus AS BatchStatusTypeID,
               ISNULL(   IIF(
                            (
                                SELECT COUNT(t3.idfTesting)
                                FROM dbo.tlbTesting t3
                                WHERE t3.idfsTestStatus IN (   10001003,
                                                                        --In Progress
                                                               10001004 --Preliminary
                                                           )
                                      AND t3.idfMaterial = m.idfMaterial
                                      AND t3.intRowStatus = 0
                                      AND t3.blnNonLaboratoryTest = 0
                            ) > 0,
                            1,
                            0),
                         0
                     ) AS TestAssignedIndicator,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       m.idfsSampleStatus
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       m.idfsSampleStatus
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
               THEN
                       t.idfsTestStatus
                   WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
               THEN
                       t.idfsTestStatus
               END AS ActionRequestedID,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       'Sample Deletion'
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       'Sample Destruction'
                   WHEN t.idfsTestStatus = 10001004 --Preliminary
               THEN
                       'Validation'
                   WHEN t.idfsTestStatus = 19000502 --Marked for Deletion
               THEN
                       'Test Deletion'
               END AS ActionRequested,
               ISNULL(   IIF(
                            (
                                SELECT COUNT(t2.idfTesting)
                                FROM dbo.tlbTesting t2
                                WHERE t2.idfsTestStatus IN (   10001001,
                                                                        --Final
                                                               10001006 --Amended
                                                           )
                                      AND t2.idfMaterial = m.idfMaterial
                                      AND t2.intRowStatus = 0
                                      AND t2.blnNonLaboratoryTest = 0
                            ) > 0,
                            1,
                            0),
                         0
                     ) AS TestCompletedIndicator,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               t.PreviousTestStatusID AS PreviousTestStatusTypeID,
               m.LabModuleSourceIndicator,
               m.idfHumanCase AS HumanDiseaseReportID,
               m.idfVetCase AS VeterinaryDiseaseReportID,
               m.idfMonitoringSession AS MonitoringSessionID,
               m.idfVectorSurveillanceSession AS VectorSessionID,
               m.idfVector AS VectorID,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @FavoriteCount AS FavoriteCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            ORDER BY m.blnAccessioned,
                 m.idfsSampleStatus DESC,
                 m.idfsAccessionCondition;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_FAVORITE_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_FAVORITE_SEARCH_GETList
--
-- Description:	Get laboratory favorites list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/21/2019 Initial release.
-- Stephen Long     07/09/2019 Added disease to wildcard search.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     09/05/2019 Removed transfer where clause and organization ID check.
-- Stephen Long     01/15/2020 Added transfer ID to query.
-- Stephen Long     01/22/2020 Cleaned up stored procedure.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     06/06/2020 Added batch status type ID to the model.
-- Stephen Long     06/07/2020 Added additional search fields to the where clause.
-- Stephen Long     06/14/2020 Added action requested to the model.
-- Stephen Long     06/24/2020 Added test completed indicator to the model.
-- Stephen Long     11/29/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2021 Moved pagination to table variable insert.
-- Stephen Long     01/05/2021 Removed sent to organization where criteria.
-- Stephen Long     01/07/2021 Removed leading wildcard (%) as full table scans are performed even 
--                             with indices resulting in long query run times.  Recommend NOT 
--                             putting those back in.
-- Mark Wilson		08/16/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/20/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     11/18/2021 Added action requested ID and previous test status type to the 
--                  query.
-- Stephen Long     12/07/2021 Added group by on final results.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     02/10/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     03/10/2022 Added note field to the query.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     09/28/2022 Bug fix on item 5111, 5112, 5113 and 5114.
-- Stephen Long     10/17/2022 Bug fix on item 5018 - searching by dates.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     10/24/2022 Bug fix on GIT #464.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/14/2023 Updated for site filtration queries.
-- Stephen Long     01/23/2023 Updated default sort order.
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_FAVORITE_SEARCH_GETList]
		@LanguageID = N'en-US',
		@SearchString = N'COVID', -- Use 'Gnhnscvxb', 'Blood', 'XWEB00' as other tests.
		@TestUnassignedIndicator = NULL,
		@TestCompletedIndicator = NULL,
		@UserID = 161287150000872, -- rykermase
		@UserOrganizationID = 758210000000,
		@Page = 1,
		@PageSize = 10,
		@SortColumn = N'EIDSSLaboratorySampleID',
		@SortOrder = N'DESC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_FAVORITE_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @SearchString NVARCHAR(2000),
    @AccessionedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT, 
    @UserOrganizationID BIGINT,
    @UserSiteID BIGINT 
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @InitialResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL
    );
    DECLARE @Results TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL,
        BatchStatusTypeID BIGINT NULL,
        TestNameTypeID BIGINT NULL,
        TestNameTypeName NVARCHAR(MAX) NULL,
        TestStatusTypeID BIGINT NULL,
        TestStatusTypeName NVARCHAR(MAX) NULL,
        StartedDate DATETIME NULL,
        TestResultTypeID BIGINT NULL,
        TestResultTypeName NVARCHAR(MAX) NULL,
        ResultDate DATETIME NULL,
        TestCategoryTypeID BIGINT NULL,
        TestCategoryTypeName NVARCHAR(MAX) NULL,
        PreviousTestStatusID BIGINT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL,
        TestID BIGINT NULL,
        BatchStatusTypeID BIGINT NULL,
        TestNameTypeID BIGINT NULL,
        TestNameTypeName NVARCHAR(MAX) NULL,
        TestStatusTypeID BIGINT NULL,
        TestStatusTypeName NVARCHAR(MAX) NULL,
        StartedDate DATETIME NULL,
        TestResultTypeID BIGINT NULL,
        TestResultTypeName NVARCHAR(MAX) NULL,
        ResultDate DATETIME NULL,
        TestCategoryTypeID BIGINT NULL,
        TestCategoryTypeName NVARCHAR(MAX) NULL,
        PreviousTestStatusID BIGINT NULL
    );
    DECLARE @SampleTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @SampleStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @AccessionConditionTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestNameTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestResultTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestCategoryTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @TestStatusTypes TABLE (ID BIGINT NOT NULL);
    DECLARE @Diseases TABLE (ID BIGINT NOT NULL);
    DECLARE @FunctionalAreas TABLE (ID BIGINT NOT NULL);
    DECLARE @Favorites XML,
            @LanguageCode BIGINT;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);
        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @InitialResults
        SELECT m.idfMaterial,
               NULL
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
        WHERE m.intRowStatus = 0;

        INSERT INTO @SampleTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000087
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @SampleStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000015
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @AccessionConditionTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000110
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @Diseases
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000019
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestNameTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000097
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestResultTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000096
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestCategoryTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000095
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @TestStatusTypes
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000001
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @FunctionalAreas
        SELECT snt.idfsBaseReference
        FROM dbo.trtStringNameTranslation snt
            INNER JOIN dbo.trtBaseReference br
                ON br.idfsBaseReference = snt.idfsBaseReference
        WHERE strTextString LIKE '%' + @SearchString + '%'
              AND idfsReferenceType = 19000164
              AND snt.idfsLanguage = @LanguageCode
              AND br.intRowStatus = 0;

        INSERT INTO @Results
        SELECT SampleID,
               t.idfTesting,
               b.idfsBatchStatus,
               t.idfsTestName,
               testNameType.name,
               t.idfsTestStatus,
               testStatusType.name,
               t.datStartedDate,
               t.idfsTestResult,
               testResultType.name,
               t.datConcludedDate,
               t.idfsTestCategory,
               testCategoryType.name,
               t.PreviousTestStatusID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
        WHERE (
                  m.blnAccessioned = @AccessionedIndicator
                  AND m.idfsAccessionCondition IS NULL
                  AND m.idfsSampleStatus IS NULL
                  AND @AccessionedIndicator IS NOT NULL
              ) -- Un-accessioned samples
              OR (
                     CONVERT(NVARCHAR(MAX), FORMAT(m.datAccession, 'g', @LanguageID)) LIKE '%' + @SearchString + '%'
                     OR CONVERT(NVARCHAR(MAX), FORMAT(t.datStartedDate, 'd', @LanguageID)) LIKE '%' + @SearchString
                                                                                                + '%'
                     OR CONVERT(NVARCHAR(MAX), FORMAT(t.datConcludedDate, 'd', @LanguageID)) LIKE '%' + @SearchString
                                                                                                  + '%'
                     OR (
                            m.strBarcode IS NOT NULL
                            AND m.strBarcode <> ''
                            AND m.strBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strFieldBarcode IS NOT NULL
                            AND m.strFieldBarcode <> ''
                            AND m.strFieldBarcode LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCondition IS NOT NULL
                            AND m.strCondition <> ''
                            AND m.strCondition LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedCaseID IS NOT NULL
                            AND m.strCalculatedCaseID <> ''
                            AND m.strCalculatedCaseID LIKE '%' + @SearchString + '%'
                        )
                     OR (
                            m.strCalculatedHumanName IS NOT NULL
                            AND m.strCalculatedHumanName <> ''
                            AND m.strCalculatedHumanName LIKE '%' + @SearchString + '%'
                        )
                 );

        INSERT INTO @Results
        SELECT SampleID,
               t.idfTesting,
               b.idfsBatchStatus,
               t.idfsTestName,
               testNameType.name,
               t.idfsTestStatus,
               testStatusType.name,
               t.datStartedDate,
               t.idfsTestResult,
               testResultType.name,
               t.datConcludedDate,
               t.idfsTestCategory,
               testCategoryType.name,
               t.PreviousTestStatusID
        FROM @InitialResults
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = SampleID
            INNER JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
        WHERE m.idfAnimal IS NOT NULL
              AND a.strAnimalCode LIKE '%' + @SearchString + '%';

        INSERT INTO @Results
        SELECT SampleID,
               TestID,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL,
               NULL
        FROM @InitialResults
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = SampleID
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
        WHERE tro.strBarcode LIKE '%' + @SearchString + '%';

        IF
        (
            SELECT COUNT(*) FROM @SampleTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @SampleTypes WHERE m.idfsSampleType = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @SampleStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @SampleStatusTypes WHERE m.idfsSampleStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @AccessionConditionTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE (
                      m.idfsSampleStatus IS NULL
                      OR m.idfsSampleStatus = 10015007
                  ) --In Repository
                  AND EXISTS
            (
                SELECT ID
                FROM @AccessionConditionTypes
                WHERE m.idfsAccessionCondition = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestNameTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @TestNameTypes WHERE t.idfsTestName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestResultTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @TestResultTypes WHERE t.idfsTestResult = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestCategoryTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @TestCategoryTypes WHERE t.idfsTestCategory = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @TestStatusTypes
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbTesting t
                    ON t.idfMaterial = SampleID
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE EXISTS
            (
                SELECT ID FROM @TestStatusTypes WHERE t.idfsTestStatus = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @FunctionalAreas
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                INNER JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE m.idfInDepartment IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @FunctionalAreas WHERE d.idfsDepartmentName = ID
            );
        END

        IF
        (
            SELECT COUNT(*) FROM @Diseases
        ) > 0
        BEGIN
            INSERT INTO @Results
            SELECT SampleID,
                   t.idfTesting,
                   b.idfsBatchStatus,
                   t.idfsTestName,
                   testNameType.name,
                   t.idfsTestStatus,
                   testStatusType.name,
                   t.datStartedDate,
                   t.idfsTestResult,
                   testResultType.name,
                   t.datConcludedDate,
                   t.idfsTestCategory,
                   testCategoryType.name,
                   t.PreviousTestStatusID
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnNonLaboratoryTest = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
            WHERE m.DiseaseID IS NOT NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE m.DiseaseID = ID
            );

            INSERT INTO @FinalResults
            SELECT ir.SampleID,
                   ir.TestID,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL
            FROM @InitialResults ir
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = ir.SampleID
                INNER JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
            WHERE m.idfVectorSurveillanceSession IS NOT NULL
                  AND m.DiseaseID IS NULL
                  AND EXISTS
            (
                SELECT ID
                FROM @Diseases
                WHERE ID IN (
                                SELECT CAST([Value] AS BIGINT)
                                FROM dbo.FN_GBL_SYS_SplitList(vsDiseases.DiseaseIdentifiers, NULL, ',')
                            )
            );

            INSERT INTO @Results
            SELECT SampleID,
                   TestID,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL,
                   NULL
            FROM @InitialResults
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = SampleID
                INNER JOIN dbo.tlbMonitoringSession ms
                    ON ms.idfMonitoringSession = m.idfMonitoringSession
                       AND ms.intRowStatus = 0
                INNER JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                    ON msd.idfMonitoringSession = ms.idfMonitoringSession
                       AND msd.intRowStatus = 0
            WHERE m.idfMonitoringSession IS NOT NULL
                  AND m.DiseaseID IS NULL
                  AND EXISTS
            (
                SELECT ID FROM @Diseases WHERE msd.idfsDiagnosis = ID
            );
        END;

        INSERT INTO @FinalResults
        SELECT SampleID,
               TestID,
               BatchStatusTypeID,
               TestNameTypeID,
               TestNameTypeName,
               TestStatusTypeID,
               TestStatusTypeName,
               StartedDate,
               TestResultTypeID,
               TestResultTypeName,
               ResultDate,
               TestCategoryTypeID,
               TestCategoryTypeName,
               PreviousTestStatusID
        FROM @Results
        GROUP BY SampleID,
                 TestID,
                 BatchStatusTypeID,
                 TestNameTypeID,
                 TestNameTypeName,
                 TestStatusTypeID,
                 TestStatusTypeName,
                 StartedDate,
                 TestResultTypeID,
                 TestResultTypeName,
                 ResultDate,
                 TestCategoryTypeID,
                 TestCategoryTypeName,
                 PreviousTestStatusID;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @FinalResults
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS (
                              SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
              );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @FinalResults
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        DECLARE @FavoriteCount AS INT = (
                                            SELECT COUNT(*)
                                            FROM @FinalResults r
                                                INNER JOIN
                                                (
                                                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                                                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                                                ) f
                                                    ON r.SampleID = f.SampleID
                                        );

        SELECT m.idfMaterial AS SampleID,
               m.idfsSite AS SiteID,
               m.idfsCurrentSite AS CurrentSiteID,
               res.TestID AS TestID,
               tom.idfTransferOut AS TransferID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               m.idfsSampleType AS SampleTypeID,
               sampleType.name AS SampleTypeName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               m.datFieldCollectionDate AS CollectionDate,
               m.idfFieldCollectedByPerson AS CollectedByPersonID,
               m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
               m.datFieldSentDate AS SentDate,
               m.idfSendToOffice AS SentToOrganizationID,
               TestNameTypeID,
               TestNameTypeName,
               TestStatusTypeID,
               TestStatusTypeName,
               StartedDate,
               TestResultTypeID,
               TestResultTypeName,
               ResultDate,
               TestCategoryTypeID,
               TestCategoryTypeName,
               m.blnAccessioned AS AccessionIndicator,
               m.datAccession AS AccessionDate,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.idfSubdivision AS FreezerSubdivisionID,
               m.StorageBoxPlace,
               m.datEnteringDate AS EnteredDate,
               m.datOutOfRepositoryDate AS OutOfRepositoryDate,
               m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
               m.blnReadOnly AS ReadOnlyIndicator,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               m.idfAccesionByPerson AS AccessionedInByPersonID,
               m.datSampleStatusDate AS SampleStatusDate,
               m.strCondition AS AccessionComment,
               m.strNote AS Comment,
               a.strAnimalCode AS EIDSSAnimalID,
               m.idfsBirdStatus AS BirdStatusTypeID,
               m.idfMainTest AS MainTestID,
               m.idfsSampleKind AS SampleKindTypeID,
               BatchStatusTypeID,
               ISNULL(   IIF(
                            (
                                SELECT COUNT(t3.idfTesting)
                                FROM dbo.tlbTesting t3
                                WHERE t3.idfsTestStatus IN (   10001003,
                                                                        --In Progress
                                                               10001004 --Preliminary
                                                           )
                                      AND t3.idfMaterial = m.idfMaterial
                                      AND t3.intRowStatus = 0
                                      AND t3.blnNonLaboratoryTest = 0
                            ) > 0,
                            1,
                            0),
                         0
                     ) AS TestAssignedIndicator,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       m.idfsSampleStatus
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       m.idfsSampleStatus
                   WHEN TestStatusTypeID = 10001004 --Preliminary
               THEN
                       TestStatusTypeID
                   WHEN TestStatusTypeID = 10001008 --Marked for Deletion
               THEN
                       TestStatusTypeID
               END AS ActionRequestedID,
               CASE
                   WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
               THEN
                       'Sample Deletion'
                   WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
               THEN
                       'Sample Destruction'
                   WHEN TestStatusTypeID = 10001004 --Preliminary
               THEN
                       'Validation'
                   WHEN TestStatusTypeID = 19000502 --Marked for Deletion
               THEN
                       'Test Deletion'
               END AS ActionRequested,
               ISNULL(   IIF(
                            (
                                SELECT COUNT(t2.idfTesting)
                                FROM dbo.tlbTesting t2
                                WHERE t2.idfsTestStatus IN (   10001001,
                                                                        --Final
                                                               10001006 --Amended
                                                           )
                                      AND t2.idfMaterial = m.idfMaterial
                                      AND t2.intRowStatus = 0
                                      AND t2.blnNonLaboratoryTest = 0
                            ) > 0,
                            1,
                            0),
                         0
                     ) AS TestCompletedIndicator,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               PreviousTestStatusID AS PreviousTestStatusTypeID,
               m.LabModuleSourceIndicator,
               m.idfHumanCase AS HumanDiseaseReportID,
               m.idfVetCase AS VeterinaryDiseaseReportID,
               m.idfMonitoringSession AS MonitoringSessionID,
               m.idfVectorSurveillanceSession AS VectorSessionID,
               m.idfVector AS VectorID,
               1 AS ReadPermissionIndicator,
               1 AS AccessToPersonalDataPermissionIndicator,
               1 AS AccessToGenderAndAgeDataPermissionIndicator,
               1 AS WritePermissionIndicator,
               1 AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @FavoriteCount AS FavoriteCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            ORDER BY m.blnAccessioned,
                 m.idfsSampleStatus DESC,
                 m.idfsAccessionCondition;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_SAMPLE_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_SAMPLE_ADVANCED_SEARCH_GETList
--
-- Description:	Get sample advanced search list for the laboratory module use case LUC13.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     01/14/2019 Initial relase.
-- Stephen Long     01/30/2019 Added sample disease reference join, and removed the vector 
--                             surveillance session joins as they are not needed.
-- Stephen Long     02/11/2019 Changed sample status type ID from bigint to nvarchar(max).  Can 
--                             have multiple sample status types.
-- Stephen Long     02/21/2019 Renamed parameters to be consistent with other objects.
-- Stephen Long     03/28/2019 Removed test status 'Not Started' as criteria to pull back in the 
--                             test assigned indicator.
-- Stephen Long     07/01/2019 Corrected reference type on monitoring session category.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     08/29/2019 Added accession condition type field as one of the where clauses.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     11/04/2019 Corrected tlbSpecies join; joined to tlbMaterial instead of tlbHerd.
-- Stephen Long     01/16/2020 Corrected where clause on sample status type for defect 5699.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/08/2020 Added sample list parameter and where clause criteria.
-- Stephen Long     04/16/2020 Removed un-needed joins for farm, herd and species type.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     07/06/2020 Added lab module source indicator to the model.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/28/2020 Removed site left joins as not needed.
-- Stephen Long     10/30/2020 Remove test assigned indicator; use test assigned count instead.
--                             Added EIDSS freezer ID.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Stephen Long     02/10/2021 Remove unneeded joins and add check for blnShowInLabList.
-- Stephen Long     06/28/2021 Applied new pagination parameters.
-- Mark Wilson		08/11/2021 updated to join tlbMonitoringSessionToDiagnosis
-- Stephen Long     09/18/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/11/2021 Split out query to get initial results using required date range.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     02/08/2022 Removed unneeded joins.
-- Stephen Long     03/10/2022 Changed note to comment and transfer count to transferred count.
-- Stephen Long     03/24/2022 Removed primary key from results and final results table variables.
-- Stephen Long     03/30/2022 Remove show in lab list from where criteria.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/12/2022 Removed where criteria for surveillance type of both; de-activated 
--                             base reference record.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     09/28/2022 Bug fix on item 5117.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     12/16/2022 Fix on initial query to use sent to organization and not user 
--                             organization.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/11/2023 Updated for site filtration queries for SAUC29.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_SAMPLE_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @SampleList VARCHAR(MAX) = NULL,
    @TestUnassignedIndicator BIT = NULL,
    @TestCompletedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        AccessionedIndicator BIT NOT NULL,
        AccessionConditionTypeID BIGINT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        AccessionedIndicator BIT NOT NULL,
        AccessionConditionTypeID BIGINT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @RecordCount AS INT = 0,
            @UnaccessionedCount AS INT = 0;
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @SampleListTable TABLE (ID BIGINT NOT NULL);
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML,
            @LanguageCode BIGINT;

    IF @SampleList IS NOT NULL
        INSERT INTO @SampleListTable
        SELECT CAST([Value] AS BIGINT)
        FROM dbo.FN_GBL_SYS_SplitList(@SampleList, NULL, ',');

    DECLARE @SampleStatusTypeListTable TABLE (ID BIGINT NOT NULL);

    IF @SampleStatusTypeList IS NOT NULL
        INSERT INTO @SampleStatusTypeListTable
        SELECT CAST([Value] AS BIGINT)
        FROM dbo.FN_GBL_SYS_SplitList(@SampleStatusTypeList, NULL, ',');

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               1,
               CASE
                   WHEN m.idfsSite = @UserSiteID THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID THEN
                       1
                   ELSE
                       0
               END
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  );

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the default rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  )
              AND a.GrantingActorSiteID = m.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = m.idfsSite
        )
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               m.blnAccessioned,
               m.idfsAccessionCondition,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = m.idfsSite
        )
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          m.datAccession IS NOT NULL
                          AND m.datAccession
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                      )
                      OR (
                             m.datAccession IS NULL
                             AND m.blnAccessioned = 0
                             AND (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND m.datFieldCollectionDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND m.datEnteringDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
                                        )
                                 )
                         )
                  );

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT res.ID,
               res.AccessionedIndicator,
               MAX(res.AccessionConditionTypeID),
               1,
               MAX(AccessToPersonalDataPermissionIndicator),
               MAX(AccessToGenderAndAgeDataPermissionIndicator),
               MAX(WritePermissionIndicator),
               MAX(DeletePermissionIndicator)
        FROM @Results res
            LEFT JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Active
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.blnAccessioned = @AccessionedIndicatorList
                              AND m.idfsAccessionCondition IS NULL
                              AND m.datDestructionDate IS NULL 
                          )
                          OR (
                                 @AccessionedIndicatorList IS NULL
                                 AND @SampleStatusTypeList IS NULL
                             )
                      )
                      OR (
                             (
                                 (m.idfsSampleStatus IN (
                                                            SELECT ID FROM @SampleStatusTypeListTable
                                                        )
                                 )
                                 OR (
                                        m.idfsAccessionCondition IN (
                                                                        SELECT ID FROM @SampleStatusTypeListTable
                                                                    )
                                        AND (
                                                m.idfsSampleStatus IS NULL
                                                OR m.idfsSampleStatus = 10015007 --In Repository
                                            )
                                    )
                             )
                             OR (
                                    @SampleStatusTypeList IS NULL
                                    AND @AccessionedIndicatorList IS NULL
                                )
                         )
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR m.DiseaseID = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR @EIDSSReportCampaignOrSessionID IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
              AND (
                      (
                          m.TestUnassignedIndicator = 1
                          AND @TestUnassignedIndicator = 1
                      )
                      OR @TestUnassignedIndicator IS NULL
                  )
              AND (
                      (
                          m.TestCompletedIndicator = 1
                          AND @TestCompletedIndicator = 1
                      )
                      OR @TestCompletedIndicator IS NULL
                  )
        GROUP BY res.ID,
                 res.AccessionedIndicator
        OPTION (RECOMPILE);

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SET @UnaccessionedCount =
        (
            SELECT COUNT(ID)
            FROM @FinalResults
            WHERE AccessionedIndicator = 0
                  AND AccessionConditionTypeID IS NULL
        );

        SELECT m.idfMaterial AS SampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.idfsSampleType AS SampleTypeID,
               sampleType.name AS SampleTypeName,
               m.idfHuman AS HumanID,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                       '********'
                   ELSE
                       m.strCalculatedHumanName
               END AS PatientOrFarmOwnerName,
               m.idfSpecies AS SpeciesID,
               m.idfAnimal AS AnimalID,
               a.strAnimalCode AS EIDSSAnimalID,
               m.idfVector AS VectorID,
               m.idfMonitoringSession AS MonitoringSessionID,
               m.idfVectorSurveillanceSession AS VectorSessionID,
               m.idfHumanCase AS HumanDiseaseReportID,
               m.idfVetCase AS VeterinaryDiseaseReportID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               m.TestCompletedIndicator,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.idfSubdivision AS FreezerSubdivisionID,
               m.StorageBoxPlace,
               m.datFieldCollectionDate AS CollectionDate,
               m.idfFieldCollectedByPerson AS CollectedByPersonID,
               m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
               m.datFieldSentDate AS SentDate,
               m.idfSendToOffice AS SentToOrganizationID,
               m.idfsSite AS SiteID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               m.datEnteringDate AS EnteredDate,
               m.datOutOfRepositoryDate AS OutOfRepositoryDate,
               m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
               m.blnReadOnly AS ReadOnlyIndicator,
               m.blnAccessioned AS AccessionIndicator,
               accessionConditionType.name AS AccessionConditionTypeName,
               m.datAccession AS AccessionDate,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               sampleStatusType.name AS SampleStatusTypeName,
               m.idfAccesionByPerson AS AccessionByPersonID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               m.datSampleStatusDate AS SampleStatusDate,
               m.strCondition AS AccessionComment,
               m.idfsDestructionMethod AS DestructionMethodTypeID,
               m.datDestructionDate AS DestructionDate,
               m.idfDestroyedByPerson AS DestroyedByPersonID,
               CASE
                   WHEN m.TestUnassignedIndicator = 1 THEN
                       0
                   ELSE
                       1
               END AS TestAssignedCount,
               m.TransferIndicator AS TransferredCount,
               m.strNote AS Comment,
               m.idfsCurrentSite AS CurrentSiteID,
               m.idfsBirdStatus AS BirdStatusTypeID,
               m.idfMainTest AS MainTestID,
               m.idfsSampleKind AS SampleKindTypeID,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               m.LabModuleSourceIndicator,
               m.intRowStatus AS RowStatus,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @UnaccessionedCount AS UnaccessionedSampleCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            OPTION (RECOMPILE);
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_SAMPLE_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_SAMPLE_GETList
--
-- Description:	Get sample list for the laboratory module use case LUC01.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     07/18/2018 Initial release.
-- Stephen Long	    12/19/2018 Added pagination logic.
-- Stephen Long     01/14/2019 Split out search functionality (where conditions) for better 
--                             performance on this procedure.
-- Stephen Long     01/30/2019 Added sample disease reference join and removed the vector 
--                             surveillance session joins as they are no longer needed.
-- Stephen Long     02/11/2019 Fix to the value used for the test completed indicator.  It was 
--                             using the wrong base reference value.
-- Stephen Long     02/21/2019 Changed field collection and field sent to collection and sent to 
--                             be consistent on naming.  Added parent sample ID to support the 
--                             edit transfer use case.
-- Stephen Long     03/28/2019 Removed test status 'Not Started' as criteria for the test assigned 
--                             indicator and test assigned count.
-- Stephen Long     06/22/2019 Removal of herd join and joined species on the sample table.
-- Stephen Long     07/01/2019 Corrected reference type on monitoring session category.
-- Stephen Long     07/09/2019 Added human master ID to select as placeholder for model.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     07/17/2019 Added vector join and field vector ID to the patient/species/vector.
-- Stephen Long     07/28/2019 Corrected sample kind ID where clause for aliquots/derivatives.
-- Stephen Long     08/12/2019 Corrected parenthesis for POCO error on sample kind where clause.
-- Stephen Long     08/30/2019 Removed commented out IF ELSE for individual sample.
-- Stephen Long     09/11/2019 Added sample destroyed status to sample status where clause.  Added 
--                             pagination set 0 to bring back "all" records.
-- Stephen Long     09/26/2019 Added sample list parameter and where clause.
-- Stephen Long     10/03/2019 Added comma to split sample list delimeter.
-- Stephen Long     10/17/2019 Added intRowStatus and non-laboratory test check on test completed 
--                             and test assigned indicators, and test assigned count.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     02/19/2020 Corrected left joins needing intRowStatus = 0.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     03/16/2020 Added sample status type of transferred out to include in the list.
-- Stephen Long     04/16/2020 Correction on vector surveillance session disease ID's and names.
-- Stephen Long     04/20/2020 Added vector type ID and vector species type ID to the model.
-- Stephen Long     05/05/2020 Added transfer status type ID of final when sample status type ID 
--                             is transferred out.
-- Stephen Long     06/21/2020 Added additional criteria to show samples with a final or amended 
--                             test to be selected within the accession timeframe.
-- Stephen Long     06/30/2020 Added additional criteria to pull back transferred in records after
--                             accessioned in.
-- Stephen Long     07/06/2020 Added lab module source indicator to model.
-- Stephen Long     10/27/2020 Removed test assigned indicator, and split out queries for better 
--                             performance.
-- Stephen Long     10/29/2020 Added test unassigned and test completed parameters and where 
--                             criteria.
-- Stephen Long     10/31/2020 Correct disease report/session query where criteria; prevent dups.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/15/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Correct record and unaccessioned counts.
-- Stephen Long     01/21/2021 Change counts from distinct count to group by with sub-query.
-- Stephen Long     02/08/2021 Change where criteria to handle null organization for the central
--                             data repository.
-- Stephen Long     06/28/2021 Applied new pagination parameters.
-- Mark Wilson		08/11/2021 updated to join tlbMonitoringSessionToDiagnosis
-- Stephen Long     09/18/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     02/03/2022 Corrected monitoring session to diagnosis join.
-- Stephen Long     02/07/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     02/17/2022 Fix on where criteria for test status types.
-- Stephen Long     03/10/2022 Changed note to comment and transfer count to transferred count.
-- Stephen Long     03/24/2022 Added final results table variable to account for duplicates that 
--                             may return from filtration rules.
-- Stephen Long     04/15/2022 Fix to filtration query grouping.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     05/23/2022 Added check on testing table to only look for laboratory tests and
--                             rejected samples check within sample window.
-- Stephen Long     06/20/2022 Added row status check when looking for parent samples.
-- Stephen Long     06/28/2022 Added check to include transferred out samples only when the 
--                             transfer is final and within the accession date window.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/17/2022 Added collection and entered date to the default sort order.
-- Stephen Long     09/21/2022 Removed test status types of final and amended from the in 
--                             repository samples within the accession date window check.  Changed 
--                             rejected samples to use collection date or entered date against the 
--                             date window (number of days for samples to stay in the list).
-- Stephen Long     10/04/2022 Bug fix on item 5057; don't show marked for deletion or marked 
--                             for destruction in the default listing.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     11/03/2022 Added date to the table variable to store the collection date, if 
--                             available, otherwise entered date.  Sort order for default base on 
--                             this new date field.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/03/2023 Added check for user's site identifier when the sent to organization 
--                             is not present.
-- Stephen Long     01/10/2023 Updated for site filtration queries.
-- 
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_SAMPLE_GETList]
		@LanguageID = N'en-US',
		@SampleID = NULL,
		@ParentSampleID = NULL,
		@DaysFromAccessionDate = 60,
		@SampleList = NULL,
		@TestUnassignedIndicator = NULL,
		@TestCompletedIndicator = NULL,
		@UserID = 161287150000872, --rykermase
		@UserEmployeeID = 420664190000872,
		@UserSiteID = 864,
		@UserOrganizationID = 758210000000,
		@UserSiteGroupID = NULL,
		@Page = 1,
		@PageSize = 100,
		@SortColumn = N'AccessionDate',
		@SortOrder = N'ASC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_SAMPLE_GETList]
(
    @LanguageID NVARCHAR(50),
    @SampleID BIGINT = NULL,
    @ParentSampleID BIGINT = NULL,
    @DaysFromAccessionDate INT,
    @SampleList VARCHAR(MAX) = NULL,
    @TestUnassignedIndicator BIT = NULL,
    @TestCompletedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL,
    @SortColumn VARCHAR(200) = 'Default'
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @UnaccessionedCount INT = 0,
            @TotalRowCount INT = 0;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        AccessionedIndicator BIT NOT NULL,
        AccessionConditionTypeID BIGINT NULL,
        DestructionDate DATETIME NULL, 
        SortDate DATETIME NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        AccessionedIndicator BIT NOT NULL,
        AccessionConditionTypeID BIGINT NULL,
        DestructionDate DATETIME NULL, 
        SortDate DATETIME NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @SampleListTable TABLE (ID BIGINT NOT NULL);
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML;

    IF @SampleList IS NOT NULL
        INSERT INTO @SampleListTable
        SELECT CAST([Value] AS BIGINT)
        FROM dbo.FN_GBL_SYS_SplitList(@SampleList, NULL, ',')

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        IF @SampleID IS NOT NULL
           OR @SampleList IS NOT NULL
           OR @ParentSampleID IS NOT NULL
        BEGIN
            INSERT INTO @FinalResults
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   CASE
                       WHEN m.datFieldCollectionDate IS NULL THEN
                           m.datEnteringDate
                       ELSE
                           m.datFieldCollectionDate
                   END,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbMaterial m
            WHERE m.intRowStatus = 0
                  AND (
                          @SampleList IS NULL
                          OR m.idfMaterial IN (
                                                  SELECT ID FROM @SampleListTable
                                              )
                      )
                  AND (
                          @SampleID IS NULL
                          OR m.idfMaterial = @SampleID
                      )
                  AND (
                          @ParentSampleID IS NULL
                          OR m.idfParentMaterial = @ParentSampleID
                      );
        END
        ELSE
        BEGIN
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   CASE
                       WHEN m.datFieldCollectionDate IS NULL THEN
                           m.datEnteringDate
                       ELSE
                           m.datFieldCollectionDate
                   END,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbMaterial m
            WHERE m.intRowStatus = 0
                  AND m.blnReadOnly = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND (
                          (
                              m.idfSendToOffice = @UserOrganizationID
                              AND m.idfSendToOffice IS NOT NULL
                          )
                          OR (
                                 m.idfsSite = @UserSiteID
                                 AND m.idfSendToOffice IS NULL
                             )
                      )
                  AND (
                          (
                              GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                              AND
                              (
                                  SELECT COUNT(*)
                                  FROM dbo.tlbTesting t
                                  WHERE t.idfMaterial = m.idfMaterial
                                        AND t.intRowStatus = 0
                                        AND t.blnNonLaboratoryTest = 0
                                        AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                              ) = 0
                              AND @TestUnassignedIndicator IS NOT NULL
                              AND m.blnAccessioned = 1
                              AND m.datAccession IS NOT NULL
                              AND m.idfsAccessionCondition IS NOT NULL
                              AND m.idfsSampleStatus = 10015007 -- In Repository
                          )
                          OR (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND
                                 (
                                     SELECT COUNT(*)
                                     FROM dbo.tlbTesting t
                                     WHERE t.idfMaterial = m.idfMaterial
                                           AND t.intRowStatus = 0
                                           AND t.blnNonLaboratoryTest = 0
                                           AND t.idfsTestStatus IN ( 10001001, 10001006 ) -- Final and Amended
                                 ) > 0
                                 AND @TestCompletedIndicator IS NOT NULL
                             )
                          OR (
                                 m.blnAccessioned = 0
                                 AND m.idfsAccessionCondition IS NULL
                                 AND m.idfsSampleStatus IS NULL
                                 AND @TestCompletedIndicator IS NULL
                                 AND @TestUnassignedIndicator IS NULL
                             )
                          OR ( -- Accessioned In with no in progress, preliminary tests assigned, Deleted or Destroyed
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND
                                 (
                                     SELECT COUNT(*)
                                     FROM dbo.tlbTesting t
                                     WHERE t.idfMaterial = m.idfMaterial
                                           AND t.intRowStatus = 0
                                           AND t.blnNonLaboratoryTest = 0
                                           AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                                 ) = 0
                                 AND m.idfsSampleStatus IN ( 10015007, 10015008, 10015009 ) -- In Repository, Deleted, Destroyed
                                 AND @TestUnassignedIndicator IS NULL
                                 AND @TestCompletedIndicator IS NULL
                             )
                          OR (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND m.idfsSampleStatus = 10015010 -- Transferred Out
                                 AND
                                 (
                                     SELECT COUNT(tr.idfTransferOut)
                                     FROM dbo.tlbTransferOutMaterial tom
                                         INNER JOIN dbo.tlbTransferOUT tr
                                             ON tr.idfTransferOut = tom.idfTransferOut
                                     WHERE tom.idfMaterial = m.idfMaterial
                                           AND tr.intRowStatus = 0
                                           AND tr.idfsTransferStatus IN ( 10001003 ) -- Final
                                 ) = 0
                                 AND @TestCompletedIndicator IS NULL
                                 AND @TestUnassignedIndicator IS NULL
                             ) --Transferred Out and Final
                          OR (
                                 (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datFieldCollectionDate)
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datEnteringDate)
                                        )
                                 )
                                 AND m.blnAccessioned = 0
                                 AND m.idfsAccessionCondition = 10108003 -- Rejected sample
                             )
                      );
        END

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        IF @UserOrganizationID IS NOT NULL --First-level sites (central data repository, general data repository, etc.) do not filter results.
        BEGIN
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   CASE
                       WHEN m.datFieldCollectionDate IS NULL THEN
                           m.datEnteringDate
                       ELSE
                           m.datFieldCollectionDate
                   END,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = @UserSiteGroupID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND @UserSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   CASE
                       WHEN m.datFieldCollectionDate IS NULL THEN
                           m.datEnteringDate
                       ELSE
                           m.datFieldCollectionDate
                   END,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   CASE
                       WHEN m.datFieldCollectionDate IS NULL THEN
                           m.datEnteringDate
                       ELSE
                           m.datFieldCollectionDate
                   END,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   CASE
                       WHEN m.datFieldCollectionDate IS NULL THEN
                           m.datEnteringDate
                       ELSE
                           m.datFieldCollectionDate
                   END,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   CASE
                       WHEN m.datFieldCollectionDate IS NULL THEN
                           m.datEnteringDate
                       ELSE
                           m.datFieldCollectionDate
                   END,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfSiteGroup = @UserSiteGroupID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND @UserSiteGroupID IS NOT NULL
                  AND sgs.idfsSite = m.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   CASE
                       WHEN m.datFieldCollectionDate IS NULL THEN
                           m.datEnteringDate
                       ELSE
                           m.datFieldCollectionDate
                   END,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRule ar
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbMaterial m
                    ON m.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND m.idfsSite = ar.GrantingActorSiteID;

            DECLARE @UserEmployeeGroupID BIGINT = (
                                                      SELECT TOP 1
                                                          egm.idfEmployeeGroup
                                                      FROM dbo.tlbEmployeeGroupMember egm
                                                      WHERE egm.idfEmployee = @UserEmployeeID
                                                            AND egm.intRowStatus = 0
                                                  );

            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   CASE
                       WHEN m.datFieldCollectionDate IS NULL THEN
                           m.datEnteringDate
                       ELSE
                           m.datFieldCollectionDate
                   END,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRuleActor ara
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
                       AND ar.GrantingActorSiteID IS NOT NULL
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfsSite = ar.GrantingActorSiteID
                       AND m.intRowStatus = 0
            WHERE ara.ActorEmployeeGroupID = @UserEmployeeGroupID
                  AND ara.intRowStatus = 0;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   CASE
                       WHEN m.datFieldCollectionDate IS NULL THEN
                           m.datEnteringDate
                       ELSE
                           m.datFieldCollectionDate
                   END,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRule ar
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbMaterial m
                    ON m.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND m.idfsSite = ar.GrantingActorSiteID;
        END;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS (
                              SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
              );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        IF @SortColumn <> 'Query'
        BEGIN
            INSERT INTO @FinalResults
            SELECT res.ID,
                   res.AccessionedIndicator,
                   MAX(res.AccessionConditionTypeID),
                   MAX(res.DestructionDate), 
                   MAX(res.SortDate),
                   MAX(res.ReadPermissionIndicator),
                   MAX(res.AccessToPersonalDataPermissionIndicator),
                   MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
                   MAX(res.WritePermissionIndicator),
                   MAX(res.DeletePermissionIndicator)
            FROM @Results res
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.ID
                                      AND m.intRowStatus = 0
            WHERE (res.ReadPermissionIndicator IN ( 1, 3, 5 )
                  AND m.blnReadOnly = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND (
                          (
                              GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                              AND
                              (
                                  SELECT COUNT(*)
                                  FROM dbo.tlbTesting t
                                  WHERE t.idfMaterial = m.idfMaterial
                                        AND t.intRowStatus = 0
                                        AND t.blnNonLaboratoryTest = 0
                                        AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                              ) = 0
                              AND @TestUnassignedIndicator IS NOT NULL
                              AND m.blnAccessioned = 1
                              AND m.datAccession IS NOT NULL
                              AND m.idfsAccessionCondition IS NOT NULL
                              AND m.idfsSampleStatus = 10015007 -- In Repository
                          )
                          OR (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND
                                 (
                                     SELECT COUNT(*)
                                     FROM dbo.tlbTesting t
                                     WHERE t.idfMaterial = m.idfMaterial
                                           AND t.intRowStatus = 0
                                           AND t.blnNonLaboratoryTest = 0
                                           AND t.idfsTestStatus IN ( 10001001, 10001006 ) -- Final and Amended
                                 ) > 0
                                 AND @TestCompletedIndicator IS NOT NULL
                             )
                          OR (
                                 m.blnAccessioned = 0
                                 AND m.idfsAccessionCondition IS NULL
                                 AND m.idfsSampleStatus IS NULL
                                 AND @TestCompletedIndicator IS NULL
                                 AND @TestUnassignedIndicator IS NULL
                             )
                          OR (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND
                                 (
                                     SELECT COUNT(*)
                                     FROM dbo.tlbTesting t
                                     WHERE t.idfMaterial = m.idfMaterial
                                           AND t.intRowStatus = 0
                                           AND t.blnNonLaboratoryTest = 0
                                           AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                                 ) = 0
                                 AND m.idfsSampleStatus IN ( 10015007, 10015008, 10015009 ) -- In Repository, Deleted, Destroyed
                                 AND @TestUnassignedIndicator IS NULL
                                 AND @TestCompletedIndicator IS NULL
                             )
                          OR (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND m.idfsSampleStatus = 10015010 -- Transferred Out
                                 AND
                                 (
                                     SELECT COUNT(tr.idfTransferOut)
                                     FROM dbo.tlbTransferOutMaterial tom
                                         INNER JOIN dbo.tlbTransferOUT tr
                                             ON tr.idfTransferOut = tom.idfTransferOut
                                     WHERE tom.idfMaterial = m.idfMaterial
                                           AND tr.intRowStatus = 0
                                           AND tr.idfsTransferStatus IN ( 10001003 ) -- Final
                                 ) = 0
                                 AND @TestCompletedIndicator IS NULL
                                 AND @TestUnassignedIndicator IS NULL
                             ) --Transferred Out and Final
                          OR (
                                 (
                                     (
                                         m.datFieldCollectionDate IS NOT NULL
                                         AND GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datFieldCollectionDate)
                                     )
                                     OR (
                                            m.datEnteringDate IS NOT NULL
                                            AND GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datEnteringDate)
                                        )
                                 )
                                 AND m.blnAccessioned = 0
                                 AND m.idfsAccessionCondition = 10108003 -- Rejected sample
                             )
                      )
                      )
            GROUP BY res.ID, 
                     res.AccessionedIndicator;
        END

        SET @TotalRowCount =
        (
            SELECT COUNT(ID) FROM @FinalResults
        );
        SET @UnaccessionedCount =
        (
            SELECT COUNT(ID)
            FROM @FinalResults
            WHERE AccessionedIndicator = 0
                  AND AccessionConditionTypeID IS NULL
                  AND DestructionDate IS NULL 
        );

        SELECT m.idfMaterial AS SampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.idfsSampleType AS SampleTypeID,
               sampleType.name AS SampleTypeName,
               m.idfHuman AS HumanID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               m.idfSpecies AS SpeciesID,
               m.idfAnimal AS AnimalID,
               a.strAnimalCode AS EIDSSAnimalID,
               m.idfVector AS VectorID,
               m.idfMonitoringSession AS MonitoringSessionID,
               m.idfVectorSurveillanceSession AS VectorSessionID,
               m.idfHumanCase AS HumanDiseaseReportID,
               m.idfVetCase AS VeterinaryDiseaseReportID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               '' AS ReportOrSessionTypeName,
               m.TestCompletedIndicator,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.idfSubdivision AS FreezerSubdivisionID,
               m.StorageBoxPlace,
               m.datFieldCollectionDate AS CollectionDate,
               m.idfFieldCollectedByPerson AS CollectedByPersonID,
               m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
               m.datFieldSentDate AS SentDate,
               m.idfSendToOffice AS SentToOrganizationID,
               m.idfsSite AS SiteID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               m.datEnteringDate AS EnteredDate,
               m.datOutOfRepositoryDate AS OutOfRepositoryDate,
               m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
               m.blnReadOnly AS ReadOnlyIndicator,
               m.blnAccessioned AS AccessionIndicator,
               m.datAccession AS AccessionDate,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               CASE
                   WHEN m.blnAccessioned = 0
                        AND m.idfsAccessionCondition IS NULL THEN
                       'Un-accessioned'
                   WHEN m.idfsSampleStatus IS NULL THEN
                       accessionConditionType.name
                   WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                       accessionConditionType.name
                   ELSE
                       sampleStatusType.name
               END AS AccessionConditionOrSampleStatusTypeName,
               m.idfAccesionByPerson AS AccessionByPersonID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               m.datSampleStatusDate AS SampleStatusDate,
               m.strCondition AS AccessionComment,
               m.idfsDestructionMethod AS DestructionMethodTypeID,
               m.datDestructionDate AS DestructionDate,
               m.idfDestroyedByPerson AS DestroyedByPersonID,
               CASE
                   WHEN m.TestUnassignedIndicator = 1 THEN
                       0
                   ELSE
                       1
               END AS TestAssignedCount,
               m.TransferIndicator AS TransferredCount,
               m.strNote AS Comment,
               m.idfsCurrentSite AS CurrentSiteID,
               m.idfsBirdStatus AS BirdStatusTypeID,
               m.idfMainTest AS MainTestID,
               m.idfsSampleKind AS SampleKindTypeID,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               m.LabModuleSourceIndicator,
               m.intRowStatus AS RowStatus,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               @TotalRowCount AS TotalRowCount,
               @UnaccessionedCount AS UnaccessionedSampleCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
        ORDER BY m.blnAccessioned,
                 m.idfsSampleStatus DESC,
                 m.idfsAccessionCondition,
                 res.SortDate DESC;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_REF_BASEREFERENCE_Filtered_GETList]...';


GO
-- ============================================================================
-- Name: USP_REF_BASEREFERENCE_Filtered_GETList
--
-- Description:	Get the reference types for Base Reference Editor.
--
-- Author: Mark Wilson
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -----------------------------------------------
-- Mark Wilson		07/15/2022 new sp based on USP_REF_BASEREFERENCE_GETList
-- Doug Albanese	12/01/2022 Added LOINC on the return
-- Stephen Long     01/18/2023 Fix so _ and % characters will return in the 
--                             filter.
--
/*

exec USP_REF_BASEREFERENCE_Filtered_GETList 19000076, 'en-US', @PageSize=200

*/
-- ============================================================================
ALTER PROCEDURE [dbo].[USP_REF_BASEREFERENCE_Filtered_GETList]
	 @idfsReferenceType	   BIGINT
	,@langID			   NVARCHAR(50)
	,@advancedSearch	   NVARCHAR(100) = NULL
	,@pageNo			   INT = 1
	,@pageSize			   INT = 10 
	,@sortColumn		   NVARCHAR(30) = 'strName' 
	,@sortOrder			   NVARCHAR(4) = 'asc'

AS
BEGIN	
	BEGIN TRY
		DECLARE @firstRec INT
		DECLARE @lastRec INT
		DECLARE @t TABLE
		( 
			idfsBaseReference BIGINT, 
			idfsReferenceType BIGINT, 
			strDefault		  NVARCHAR(2000), 
			strName			  NVARCHAR(2000),
			intHACode		  INT,
			strHACode		  NVARCHAR(4000),
			strHACodeNames	  NVARCHAR(4000),
			intOrder		  INT,
			LOINC			  NVARCHAR(200)
		)

		SET @firstRec = (@pageNo-1)* @pagesize
		SET @lastRec = (@pageNo*@pageSize+1)
		
		IF( @advancedSearch IS NOT NULL )
		BEGIN
			SET @advancedSearch = REPLACE(@advancedSearch, '%', '[%]');
			SET @advancedSearch = REPLACE(@advancedSearch, '_', '[_]');

			INSERT INTO @T
			SELECT * FROM
			(
			   SELECT 
				  br.idfsBaseReference, 
				  br.idfsReferenceType, 
				  br.strDefault, 
				  brs.[name] AS strName,
				  br.intHACode, 
				  dbo.FN_GBL_HACode_ToCSV(@LangID,br.intHACode) AS strHACode,			
				  dbo.FN_GBL_HACodeNames_ToCSV(@LangID,br.intHACode) AS strHACodeNames,
				  br.intOrder,
				  LCM.LOINC_NUM AS LOINC
			   FROM  dbo.trtBaseReference br
			   JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @idfsReferenceType) brS ON br.idfsBaseReference = brs.idfsReference 
			   LEFT JOIN LOINCEidssMapping LCM ON LCM.idfsBaseReference = br.idfsBaseReference
			   WHERE 
				   br.intRowStatus = 0 AND brs.intRowStatus = 0 
				   AND br.idfsBaseReference NOT IN (19000146,19000011,19000019,19000537,19000529,19000530,19000531,19000532,19000533,19000534,19000535,19000125,19000123,19000122,
													19000143,19000050,19000126,19000121,19000075,19000124,19000012,19000164,19000019,19000503,19000530,19000510,19000506,19000505,
													19000509,19000511,19000508,19000507,19000022,19000131,19000070,19000066,19000071,19000069,19000029,19000032,19000101,19000525,
													19000033,19000532,19000534,19000533,19000152,19000056,19000060,19000109,19000062,19000045,19000046,19000516,19000074,19000147,
													19000130,19000535,19000531,19000087,19000079,19000529,19000119,19000524,19000084,19000519,19000166,19000086,19000090,19000141,
													19000140)
				
			) AS S
			WHERE 
			( 
				strDefault LIKE '%' + @advancedSearch + '%' OR
				strName LIKE '%' + @advancedSearch + '%' OR
				strHACode LIKE '%' + @advancedSearch + '%' OR 
				strHACodeNames LIKE '%' + @advancedSearch + '%' 
			)
		END ELSE
			INSERT INTO @T
			SELECT 
				br.[idfsBaseReference], 
				br.[idfsReferenceType], 
				br.[strDefault], 
				brs.name AS strName,
				br.[intHACode], 
				dbo.FN_GBL_HACode_ToCSV(@LangID,br.[intHACode]) AS strHACode,			
				dbo.FN_GBL_HACodeNames_ToCSV(@LangID,br.[intHACode]) AS strHACodeNames,
				br.[intOrder],
				LCM.LOINC_NUM AS LOINC
			FROM  dbo.trtBaseReference br
			JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @idfsReferenceType) brS ON br.idfsBaseReference = brs.idfsReference 
			LEFT JOIN LOINCEidssMapping LCM ON LCM.idfsBaseReference = br.idfsBaseReference
			WHERE br.[idfsReferenceType] = @idfsReferenceType 
			   AND br.intRowStatus = 0 
			   AND brs.intRowStatus = 0 
			   AND br.idfsBaseReference NOT IN (19000146,19000011,19000019,19000537,19000529,19000530,19000531,19000532,19000533,19000534,19000535,19000125,19000123,19000122,
												 19000143,19000050,19000126,19000121,19000075,19000124,19000012,19000164,19000019,19000503,19000530,19000510,19000506,19000505,
												 19000509,19000511,19000508,19000507,19000022,19000131,19000070,19000066,19000071,19000069,19000029,19000032,19000101,19000525,
												 19000033,19000532,19000534,19000533,19000152,19000056,19000060,19000109,19000062,19000045,19000046,19000516,19000074,19000147,
												 19000130,19000535,19000531,19000087,19000079,19000529,19000119,19000524,19000084,19000519,19000166,19000086,19000090,19000141,
												 19000140);

		WITH CTEResults AS
		(
			SELECT ROW_NUMBER() OVER ( ORDER BY 
				CASE WHEN @sortColumn = 'idfsBaseReference' AND @SortOrder = 'asc' THEN idfsBaseReference END ASC,
				CASE WHEN @sortColumn = 'idfsBaseReference' AND @SortOrder = 'desc' THEN idfsBaseReference END DESC,
				CASE WHEN @sortColumn = 'idfsReferenceType' AND @SortOrder = 'asc' THEN idfsReferenceType END ASC,
				CASE WHEN @sortColumn = 'idfsReferenceType' AND @SortOrder = 'desc' THEN idfsReferenceType END DESC,
				CASE WHEN @sortColumn = 'strdefault' AND @SortOrder = 'asc' THEN strdefault END ASC,
				CASE WHEN @sortColumn = 'strdefault' AND @SortOrder = 'desc' THEN strdefault END DESC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'asc' THEN strName END ASC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'desc' THEN strName END DESC,
				CASE WHEN @sortColumn = 'intHACode' AND @SortOrder = 'asc' THEN intHACode END ASC,
				CASE WHEN @sortColumn = 'intHACode' AND @SortOrder = 'desc' THEN intHACode END DESC,
				CASE WHEN @sortColumn = 'strHACode' AND @SortOrder = 'asc' THEN strHACode END ASC,
				CASE WHEN @sortColumn = 'strHACode' AND @SortOrder = 'desc' THEN strHACode END DESC,
				CASE WHEN @sortColumn = 'strHACodeNames' AND @SortOrder = 'asc' THEN strHACodeNames END ASC,
				CASE WHEN @sortColumn = 'strHACodeNames' AND @SortOrder = 'desc' THEN strHACodeNames END DESC,
				CASE WHEN @sortColumn = 'intorder' AND @SortOrder = 'asc' THEN intOrder END ASC,
				CASE WHEN @sortColumn = 'intorder' AND @SortOrder = 'desc' THEN intOrder END DESC,
				CASE WHEN @sortColumn = 'LOINC' AND @SortOrder = 'asc' THEN LOINC END ASC,
				CASE WHEN @sortColumn = 'LOINC' AND @SortOrder = 'desc' THEN LOINC END DESC
				,IIF( @sortColumn = 'intOrder',strName,NULL) ASC
		) AS ROWNUM,		
		COUNT(*) OVER () AS 
				TotalRowCount,
				idfsBaseReference, 
				idfsReferenceType, 
				strDefault, 
				strName,
				intHACode, 
				strHACode,			
				strHACodeNames,
				intOrder,
				LOINC
			FROM @T
		)
			SELECT
				TotalRowCount,
				idfsBaseReference, 
				idfsReferenceType, 
				strDefault, 
				strName,
				intHACode, 
				strHACode,			
				strHACodeNames,
				intOrder,
				LOINC,
				TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
				CurrentPage = @pageNo 
		FROM CTEResults
		WHERE RowNum > @firstRec AND RowNum < @lastRec 	
	END TRY
	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [Report].[USP_REP_LIM_CaseTestValidation]...';


GO
-- ================================================================================================
-- Name: report.USP_REP_LIM_CaseTestValidation
--
-- Description: Select Disease Report Test validation details
--						
-- Author: Mark Wilson
--
-- Revision History:
--		Name       Date       Change Detail
-- --------------- ---------- --------------------------------------------------------------------
-- Mark Wilson    07/07/2022  Initial version, Converted to E7 standards.
-- Sri Goli       01/16/2023  Added Column strRuleStatus
-- Testing code:

/*
--Example of a call of procedure:

select * FROM dbo.tlbVetCase where introwstatus = 0
select * FROM dbo.tlbHumanCase where introwstatus = 0

exec report.USP_REP_LIM_CaseTestValidation @LangID=N'en-US',@ObjID=5587
exec report.USP_REP_LIM_CaseTestValidation @LangID=N'en-US',@ObjID=80643


*/

ALTER PROCEDURE [Report].[USP_REP_LIM_CaseTestValidation]
(
    @ObjID	AS BIGINT,
    @LangID AS NVARCHAR(10)
)
AS
BEGIN

	DECLARE @cYes AS NVARCHAR(20)
	DECLARE @cNo AS NVARCHAR(20)
	
	SELECT
		@cYes=[name] 
	FROM dbo.FN_GBL_ReferenceRepair_GET(@LangID,19000100)
	WHERE idfsReference=10100001 /*'ynvYes'*/

	SELECT
		@cNo=[name] 
	FROM dbo.FN_GBL_ReferenceRepair_GET(@LangID,19000100) where idfsReference=10100002 /*'ynvNo'*/

	SELECT  
		D.[name] AS Diagnosis,
		TT.[name] AS TestName,
		TD.[name] AS TestType,
		TV.idfsInterpretedStatus AS intRuleStatus,
		interpretedStatusType.name AS strRuleStatus,
		TV.strInterpretedComment AS strRuleComment,
		TV.datInterpretationDate AS interpretedDate,
		dbo.FN_GBL_ConcatFullName(tInterpretedBy.strFamilyName, tInterpretedBy.strFirstName, tInterpretedBy.strSecondName) AS InterpretedBy,
		CASE TV.blnValidateStatus 
			WHEN 0 THEN @cNo
			WHEN 1 THEN @cYes
			ELSE @cNo
		END AS intValidateStatus,
		--dbo.FN_GBL_ConcatFullName(tInterpretedBy.strFamilyName, tInterpretedBy.strFirstName, tInterpretedBy.strSecondName) AS InterpretedBy,
		TV.strValidateComment AS strValidateComment,
		dbo.FN_GBL_ConcatFullName(tValidatedBy.strFamilyName, tValidatedBy.strFirstName, tValidatedBy.strSecondName) AS ValidatedBy,
		TV.datValidationDate AS validatedDate
		
	FROM dbo.tlbTesting T
	LEFT JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID, 19000097) TT ON TT.idfsReference = T.idfsTestName
	LEFT JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID,19000095) AS TD ON T.idfsTestCategory = TD.idfsReference
	INNER JOIN dbo.tlbTestValidation AS TV ON T.idfTesting = TV.idfTesting AND T.intRowStatus = 0 AND TV.intRowStatus = 0
	LEFT JOIN dbo.tlbPerson AS tValidatedBy ON TV.idfValidatedByPerson = tValidatedBy.idfPerson
	LEFT JOIN dbo.tlbPerson AS tInterpretedBy ON TV.idfInterpretedByPerson = tInterpretedBy.idfPerson
	LEFT JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID, 19000019) AS D ON D.idfsReference = TV.idfsDiagnosis
	INNER JOIN dbo.tlbMaterial M ON	M.idfMaterial = T.idfMaterial AND M.intRowStatus = 0 AND (M.idfHumanCase = @ObjID OR M.idfVetCase = @ObjID OR M.idfMonitoringSession = @ObjID)
	LEFT JOIN dbo.FN_GBL_Repair(@LangID, 19000106) interpretedStatusType ON interpretedStatusType.idfsReference = tv.idfsInterpretedStatus
	WHERE	T.intRowStatus = 0
			
END
GO

PRINT N'Altering Procedure [dbo].[USP_HAS_MONITORING_SESSION_SET]...';
GO
-- ================================================================================================
-- Name: USP_HAS_MONITORING_SESSION_SET
--
-- Description: Insert/update for monitoring session records for the human module.
--          
-- Revision History:
-- Name				Date	   Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long		07/06/2019 Initial release.
-- Ann Xiong		01/17/2020 Fixed an issue in Persons & Samples grid where saving a new row 
--                             will change the Person ID of several previous rows to be the same 
--                             as the newly added row.
-- Stephen Long		03/09/2020 Added current site ID to the update sample set call.
-- Ann Xiong		03/20/2020 Added the following information from the AS Session to the new 
--								Disease Report:
--								Disease Report field “Report Status” – “In progress”	
--								Disease Report field “Case classification” field - <blank>
--								Disease Report field “Report Type” – “Active”
--								Disease Report field “Entered by Name” with the user name who 
--                              created this Disease Report
--								Disease Report field “Date Entered” with the current date when 
--                              this Disease Report was created
-- Ann Xiong		03/30/2020 Update SET idfHumanCase in tlbMaterial and set 
--							   idfsYNSpecimenCollected and idfsYNTestsConducted.
-- Ann Xiong		04/14/2020 Changed to use "SSH" prefix instead of SSV for Human Active 
--							   Surveillance Session.
-- Stephen Long		12/20/2020 Updated USSP_GBL_TEST_SET call with four new parameters.
-- Doug Albanese	01/12/2022 Refactored, due to table change for storing multiple disease 
--                             against a session.  Added supress to an EXECUTE statement that was 
--                             preventing EF from generating a return model
-- Doug Albanese	01/13/2022 Refactored to use new location hierarchy
-- Doug Albanese	01/14/2022 Refactoring json conversion tables to not require PKs, until 
--                             automatically generated
-- Doug Albanese	01/18/2022 Clean up of "collections" to include required fields for foreign 
--                             records
-- Doug Albanese	01/24/2022 Final refactoring for successful save from the app.
-- Doug Albanese	02/02/2022 Minor refactoring to save SampleId to Tests collection
-- Doug Albanese	03/25/2022 Updated to make use of "RowAction" on the disease combination
-- Doug Albanese	05/23/2022 Removed idfsCurrentSite, to prevent clashing with lab.
-- Doug Albanese	06/16/2022 Changed out the value used for NonLaboratoryTestIndicator from 0 to 
--                             1
-- Doug Albanese	06/16/2022 Added "Notifications" for processing, and User ID for auditing 
--                             purposes
-- Stephen Long     07/06/2022 Updates for site alerts to call new stored procedure.
--	Doug Albanese	07/19/2022	Corrected the enumeration of multiple site alerts
--	Doug Albanese	08/01/2022	Added a replacement feature of the word "New", to have the EIDSS Session ID, in place.
--	Doug Albanese	08/26/2022	Adjusted supression, because of changes made to USSP_GBL_SAMPLE_SET
-- Doug Albanese	 10/17/2022	 Added a condition to pick up any idfHumancase ids that belong to an existing Test to maintain the "Connected" status.
-- Stephen Long     10/18/2022 Added samples to diseases parameter and logic.
-- Leo Tracchia		12/5/2022 Added statements for Audit logging 
-- Leo Tracchia		12/6/2022 Added fix for auditing logic
-- Stephen Long     12/09/2022 Added EIDSSObjectID parameter to to samples, tests and test 
--                             interpretations calls.
-- Doug Albanese	 12/23/2022	  Corrected the overwriting of @idfNewHuman with @HumanID for new Sample Inserts
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HAS_MONITORING_SESSION_SET]
(
    @LanguageID NVARCHAR(50),
    @MonitoringSessionID BIGINT = NULL,
    @MonitoringSessionStatusTypeID BIGINT = NULL,
    @idfsLocation BIGINT = NULL,
    @EnteredByPersonID BIGINT = NULL,
    @CampaignID BIGINT = NULL,
    @SiteID BIGINT,
    @EIDSSSessionID NVARCHAR(50) = NULL,
    @StartDate DATETIME = NULL,
    @EndDate DATETIME = NULL,
    @SessionCategoryTypeID BIGINT = NULL,
    @RowStatus INT,
    @CreateDiseaseReportHumanID BIGINT = NULL,
    @AuditUserName NVARCHAR(200),
    @DiseaseCombinations NVARCHAR(MAX),
    @SampleTypeCombinations NVARCHAR(MAX),
    @Samples NVARCHAR(MAX),
    @SamplesToDiseases NVARCHAR(MAX) = NULL,
    @Tests NVARCHAR(MAX),
    @Actions NVARCHAR(MAX),
    @Events NVARCHAR(MAX) = NULL,
    @UserId BIGINT
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @NewHumanID BIGINT = NULL,
                @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
                @EventId BIGINT,
                @EventTypeId BIGINT = NULL,
                @EventSiteId BIGINT = NULL,
                @EventObjectId BIGINT = NULL,
                @EventUserId BIGINT = NULL,
                @EventDiseaseId BIGINT = NULL,
                @EventLocationId BIGINT = NULL,
                @EventInformationString NVARCHAR(MAX) = NULL,
                @EventLoginSiteId BIGINT = NULL;

        /* Get an 'On-The-Fly' translation for the word "New". To be used, to replace the "New" indicator on Samples / Tests.*/
        DECLARE @Translated_New NVARCHAR(50)

        DECLARE @ExecReturn TABLE
        (
            strDefault NVARCHAR(200),
            name NVARCHAR(200),
            LongName NVARCHAR(200)
        )

        INSERT INTO @ExecReturn
        EXEC [dbo].[USP_GBL_BaseReferenceTranslation_Get] @LanguageId = 'en-us',
                                                          @idfsBaseReference = 10140000

        SELECT @Translated_New = [name]
        FROM @ExecReturn
        /*End 'On-The-Fly' translation.*/

        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage VARCHAR(200)
        );

        DECLARE @CampaignName NVARCHAR(50)
        DECLARE @CampaignTypeID BIGINT = NULL
        DECLARE @CampaignStartDate DATETIME = NULL
        DECLARE @CampaignEndDate DATETIME = NULL

        IF @CampaignID IS NOT NULL
        BEGIN
            SELECT @CampaignTypeID = idfsCampaignType,
                   @CampaignName = strCampaignname,
                   @CampaignStartDate = datCampaignDateStart,
                   @CampaignEndDate = datCampaignDateEnd
            FROM tlbCampaign
            WHERE idfCampaign = @CampaignID
        END

        DECLARE @RowID BIGINT = NULL,
                @RowAction NCHAR = NULL,
                @MonitoringSessionToDiseaseID BIGINT,
                @MonitoringSessionToSampleTypeID BIGINT,
                @OrderNumber INT,
                @SampleID BIGINT,
                @SampleTypeID BIGINT = NULL,
                @HumanID BIGINT,
                @HumanMasterID BIGINT = NULL,
                @CollectedByPersonID BIGINT = NULL,
                @CollectedByOrganizationID BIGINT = NULL,
                @CollectionDate DATETIME = NULL,
                @SentDate DATETIME = NULL,
                @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
                @SampleStatusTypeID BIGINT = NULL,
                @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
                @SentToOrganizationID BIGINT = NULL,
                @ReadOnlyIndicator BIT = NULL,
                @AccessionDate DATETIME = NULL,
                @AccessionConditionTypeID BIGINT = NULL,
                @AccessionComment NVARCHAR(200) = NULL,
                @AccessionByPersonID BIGINT = NULL,
                --,@CurrentSiteID BIGINT = NULL
                @TestID BIGINT,
                @TestNameTypeID BIGINT = NULL,
                @TestCategoryTypeID BIGINT = NULL,
                @TestResultTypeID BIGINT = NULL,
                @TestStatusTypeID BIGINT,
                @BatchTestID BIGINT = NULL,
                @TestNumber INT = NULL,
                @StartedDate DATETIME2 = NULL,
                @ResultDate DATETIME2 = NULL,
                @TestedByPersonID BIGINT = NULL,
                @TestedByOrganizationID BIGINT = NULL,
                @ResultEnteredByOrganizationID BIGINT = NULL,
                @ResultEnteredByPersonID BIGINT = NULL,
                @ValidatedByOrganizationID BIGINT = NULL,
                @ValidatedByPersonID BIGINT = NULL,
                @NonLaboratoryTestIndicator BIT,
                @ExternalTestIndicator BIT = NULL,
                @PerformedByOrganizationID BIGINT = NULL,
                @ReceivedDate DATETIME2 = NULL,
                @ContactPersonName NVARCHAR(200) = NULL,
                @TestMonitoringSessionID BIGINT = NULL,
                @TestInterpretationID BIGINT,
                @InterpretedStatusTypeID BIGINT = NULL,
                @InterpretedByOrganizationID BIGINT = NULL,
                @InterpretedByPersonID BIGINT = NULL,
                @TestingInterpretations BIGINT,
                @ValidatedStatusIndicator BIT = NULL,
                @ReportSessionCreatedIndicator BIT = NULL,
                @ValidatedComment NVARCHAR(200) = NULL,
                @InterpretedComment NVARCHAR(200) = NULL,
                @ValidatedDate DATETIME = NULL,
                @InterpretedDate DATETIME = NULL,
                @MonitoringSessionActionID BIGINT,
                @ActionTypeID BIGINT,
                @ActionStatusTypeID BIGINT,
                @ActionDate DATETIME = NULL,
                @Comments NVARCHAR(500) = NULL,
                @DiseaseID BIGINT,
                @idfMonitoringSessionToDiagnosis BIGINT,
                @DateEntered DATETIME = GETDATE(),
                @idfHumanCase_Test BIGINT = NULL,
                @MonitoringSessionToMaterialID BIGINT = NULL;

        DECLARE @DiseaseCombinationsTemp TABLE
        (
            MonitoringSessionToDiseaseID BIGINT NULL,
            DiseaseID BIGINT NOT NULL,
            OrderNumber INT NOT NULL,
            SampleTypeID BIGINT NULL,
            Comments NVARCHAR(MAX),
            RowStatus INT NOT NULL,
            RowAction CHAR(1)
        );

        DECLARE @SampleTypeCombinationsTemp TABLE
        (
            MonitoringSessionToSampleTypeID BIGINT NOT NULL,
            SampleTypeID BIGINT NULL,
            OrderNumber INT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction CHAR(1)
        );

        DECLARE @SamplesTemp TABLE
        (
            SampleID BIGINT NOT NULL,
            SampleTypeID BIGINT NULL,
            SampleStatusTypeID BIGINT NULL,
            CollectionDate DATETIME2 NULL,
            CollectedByOrganizationID BIGINT NULL,
            CollectedByPersonID BIGINT NULL,
            SentDate DATETIME2 NULL,
            SentToOrganizationID BIGINT NULL,
            EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
            Comments NVARCHAR(200) NULL,
            SiteID BIGINT NOT NULL,
            --,CurrentSiteID BIGINT NULL
            DiseaseID BIGINT NULL,
            ReadOnlyIndicator BIT NULL,
            HumanID BIGINT NULL,
            HumanMasterID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction CHAR(1) NULL
        );

        DECLARE @SamplesToDiseasesTemp TABLE
        (
            MonitoringSessionToMaterialID BIGINT NOT NULL,
            MonitoringSessionID BIGINT NULL,
            SampleID BIGINT NOT NULL,
            SampleTypeID BIGINT NULL,
            DiseaseID BIGINT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );

        DECLARE @TestsTemp TABLE
        (
            TestID BIGINT NOT NULL,
            TestNameTypeID BIGINT NULL,
            TestCategoryTypeID BIGINT NULL,
            TestResultTypeID BIGINT NULL,
            TestStatusTypeID BIGINT NOT NULL,
            DiseaseID BIGINT NULL,
            SampleID BIGINT NULL,
            BatchTestID BIGINT NULL,
            ObservationID BIGINT NULL,
            TestNumber INT NULL,
            Comments NVARCHAR NULL,
            StartedDate DATETIME2 NULL,
            ResultDate DATETIME2 NULL,
            TestedByOrganizationID BIGINT NULL,
            TestedByPersonID BIGINT NULL,
            ResultEnteredByOrganizationID BIGINT NULL,
            ResultEnteredByPersonID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            ReadOnlyIndicator BIT NOT NULL,
            NonLaboratoryTestIndicator BIT NOT NULL,
            ExternalTestIndicator BIT NULL,
            PerformedByOrganizationID BIGINT NULL,
            ReceivedDate DATETIME2 NULL,
            ContactPersonName NVARCHAR(200) NULL,
            RowStatus INT NOT NULL,
            RowAction CHAR(1) NULL
        );

        DECLARE @ActionsTemp TABLE
        (
            MonitoringSessionActionID BIGINT NOT NULL,
            EnteredByPersonID BIGINT NULL,
            ActionTypeID BIGINT NULL,
            ActionStatusTypeID BIGINT NULL,
            ActionDate DATETIME2 NULL,
            Comments NVARCHAR(500) NULL,
            RowStatus INT NOT NULL,
            RowAction CHAR(1) NULL
        );

        DECLARE @EventsTemp TABLE
        (
            EventId BIGINT NOT NULL,
            EventTypeId BIGINT NULL,
            UserId BIGINT NULL,
            SiteId BIGINT NULL,
            LoginSiteId BIGINT NULL,
            ObjectId BIGINT NULL,
            DiseaseId BIGINT NULL,
            LocationId BIGINT NULL,
            InformationString NVARCHAR(MAX) NULL
        );

        --Data Audit--

        DECLARE @idfUserId BIGINT = NULL;
        DECLARE @idfSiteId BIGINT = NULL;
        DECLARE @idfsDataAuditEventType bigint = NULL;
        DECLARE @idfsObjectType bigint = 10017063; --select * from trtBaseReference where idfsBaseReference = 10017063
        DECLARE @idfObject bigint = @MonitoringSessionID;
        DECLARE @idfObjectTable_tlbMonitoringSession bigint = 707040000000;
        DECLARE @idfObjectTable_tlbCampaign bigint = 706900000000;
        DECLARE @idfDataAuditEvent bigint = NULL;

        DECLARE @tlbMonitoringSession_BeforeEdit TABLE
        (
            idfMonitoringSession bigint,
            idfsMonitoringSessionStatus bigint,
            idfsLocation bigint,
            idfPersonEnteredBy bigint,
            idfCampaign bigint,
            idfsSite bigint,
            datEnteredDate datetime,
            datStartDate datetime,
            datEndDate datetime,
            SessionCategoryID bigint,
            AuditUpdateUser nvarchar(200)
        )

        DECLARE @tlbMonitoringSession_AfterEdit TABLE
        (
            idfMonitoringSession bigint,
            idfsMonitoringSessionStatus bigint,
            idfsLocation bigint,
            idfPersonEnteredBy bigint,
            idfCampaign bigint,
            idfsSite bigint,
            datEnteredDate datetime,
            datStartDate datetime,
            datEndDate datetime,
            SessionCategoryID bigint,
            AuditUpdateUser nvarchar(200)
        )

        DECLARE @tlbCampaign_BeforeEdit TABLE
        (
            idfCampaign bigint,
            strCampaignName nvarchar(200),
            idfsCampaignType bigint,
            datCampaignDateStart datetime,
            datCampaignDateEnd datetime
        )

        DECLARE @tlbCampaign_AfterEdit TABLE
        (
            idfCampaign bigint,
            strCampaignName nvarchar(200),
            idfsCampaignType bigint,
            datCampaignDateStart datetime,
            datCampaignDateEnd datetime
        )

        --Data Audit--

        --BEGIN TRANSACTION;

        SET @DiseaseCombinations = REPLACE(@DiseaseCombinations, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @DiseaseCombinationsTemp
        SELECT *
        FROM
            OPENJSON(@DiseaseCombinations)
            WITH
            (
                MonitoringSessionToDiseaseID BIGINT,
                DiseaseID BIGINT,
                OrderNumber INT,
                SampleTypeID BIGINT,
                Comments NVARCHAR(MAX),
                RowStatus INT,
                RowAction CHAR(1)
            );

        SET @SampleTypeCombinations = REPLACE(@SampleTypeCombinations, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @SampleTypeCombinationsTemp
        SELECT *
        FROM
            OPENJSON(@SampleTypeCombinations)
            WITH
            (
                MonitoringSessionToSampleTypeID BIGINT,
                SampleTypeID BIGINT,
                OrderNumber INT,
                RowStatus INT,
                RowAction CHAR(1)
            );

        SET @Samples = REPLACE(@Samples, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@Samples)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                SampleStatusTypeID BIGINT,
                CollectionDate DATETIME2,
                CollectedByOrganizationID BIGINT,
                CollectedByPersonID BIGINT,
                SentDate DATETIME2,
                SentToOrganizationID BIGINT,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                Comments NVARCHAR(200),
                SiteID BIGINT,
                --,CurrentSiteID BIGINT
                DiseaseID BIGINT,
                ReadOnlyIndicator BIT,
                HumanID BIGINT,
                HumanMasterID BIGINT,
                RowStatus INT,
                RowAction CHAR(1)
            );

        INSERT INTO @SamplesToDiseasesTemp
        SELECT *
        FROM
            OPENJSON(@SamplesToDiseases)
            WITH
            (
                MonitoringSessionToMaterialID BIGINT,
                MonitoringSessionID BIGINT,
                SampleID BIGINT,
                SampleTypeID BIGINT,
                DiseaseID BIGINT,
                RowStatus INT,
                RowAction INT
            );

        SET @Tests = REPLACE(@Tests, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @TestsTemp
        SELECT *
        FROM
            OPENJSON(@Tests)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Comments NVARCHAR(500),
                StartedDate DATETIME2,
                ResultDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                RowStatus INT,
                RowAction CHAR(1)
            );


        SET @Actions = REPLACE(@Actions, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @ActionsTemp
        SELECT *
        FROM
            OPENJSON(@Actions)
            WITH
            (
                MonitoringSessionActionID BIGINT,
                EnteredByPersonID BIGINT,
                ActionTypeID BIGINT,
                ActionStatusTypeID BIGINT,
                ActionDate DATETIME2,
                Comments NVARCHAR(500),
                RowStatus INT,
                RowAction CHAR(1)
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        --Data Audit--
        -- Get and Set UserId and SiteId
        --SELECT @idfUserId = userInfo.UserId, @idfSiteId = UserInfo.SiteId FROM dbo.FN_UserSiteInformation(@UserId) userInfo

        select @idfUserId = tu.idfUserID,
               @idfSiteId = tu.idfsSite
        from AspNetUsers u
            inner join tstUserTable tu
                on u.idfUserID = tu.idfUserID
        where u.idfUserID = @UserId

        --Data Audit--

        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbMonitoringSession
            WHERE idfMonitoringSession = @MonitoringSessionID
        )
        BEGIN

            --  tauDataAuditEvent  Event Type - Edit 
            set @idfsDataAuditEventType = 10016003;

            -- insert record into tauDataAuditEvent - 
            INSERT INTO @SuppressSelect
            EXEC USSP_GBL_DataAuditEvent_GET @idfUserId,
                                             @idfSiteId,
                                             @idfsDataAuditEventType,
                                             @idfsObjectType,
                                             @idfObject,
                                             @idfObjectTable_tlbMonitoringSession,
                                             @idfDataAuditEvent OUTPUT

            INSERT INTO @tlbMonitoringSession_BeforeEdit
            (
                idfMonitoringSession,
                idfsMonitoringSessionStatus,
                idfsLocation,
                idfPersonEnteredBy,
                idfCampaign,
                idfsSite,
                datEnteredDate,
                datStartDate,
                datEndDate,
                SessionCategoryID,
                AuditUpdateUser
            )
            SELECT idfMonitoringSession,
                   idfsMonitoringSessionStatus,
                   idfsLocation,
                   idfPersonEnteredBy,
                   idfCampaign,
                   idfsSite,
                   datEnteredDate,
                   datStartDate,
                   datEndDate,
                   SessionCategoryID,
                   AuditUpdateUser
            FROM tlbMonitoringSession
            WHERE idfMonitoringSession = @MonitoringSessionID;

            UPDATE dbo.tlbMonitoringSession
            SET idfsMonitoringSessionStatus = @MonitoringSessionStatusTypeID,
                idfsLocation = @idfsLocation,
                idfPersonEnteredBy = @EnteredByPersonID,
                idfCampaign = @CampaignID,
                idfsSite = @SiteID,
                datEnteredDate = GETDATE(),
                datStartDate = @StartDate,
                datEndDate = @EndDate,
                SessionCategoryID = @SessionCategoryTypeID,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfMonitoringSession = @MonitoringSessionID;

            INSERT INTO @tlbMonitoringSession_AfterEdit
            (
                idfMonitoringSession,
                idfsMonitoringSessionStatus,
                idfsLocation,
                idfPersonEnteredBy,
                idfCampaign,
                idfsSite,
                datEnteredDate,
                datStartDate,
                datEndDate,
                SessionCategoryID,
                AuditUpdateUser
            )
            SELECT idfMonitoringSession,
                   idfsMonitoringSessionStatus,
                   idfsLocation,
                   idfPersonEnteredBy,
                   idfCampaign,
                   idfsSite,
                   datEnteredDate,
                   datStartDate,
                   datEndDate,
                   SessionCategoryID,
                   AuditUpdateUser
            FROM tlbMonitoringSession
            WHERE idfMonitoringSession = @MonitoringSessionID;

            --idfsMonitoringSessionStatus
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbMonitoringSession,
                   707060000000,
                   a.idfMonitoringSession,
                   null,
                   a.idfsMonitoringSessionStatus,
                   b.idfsMonitoringSessionStatus
            from @tlbMonitoringSession_BeforeEdit a
                inner join @tlbMonitoringSession_AfterEdit b
                    on a.idfMonitoringSession = b.idfMonitoringSession
            where (a.idfsMonitoringSessionStatus <> b.idfsMonitoringSessionStatus)
                  or (
                         a.idfsMonitoringSessionStatus is not null
                         and b.idfsMonitoringSessionStatus is null
                     )
                  or (
                         a.idfsMonitoringSessionStatus is null
                         and b.idfsMonitoringSessionStatus is not null
                     )

            --idfPersonEnteredBy
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbMonitoringSession,
                   707110000000,
                   a.idfMonitoringSession,
                   null,
                   a.idfPersonEnteredBy,
                   b.idfPersonEnteredBy
            from @tlbMonitoringSession_BeforeEdit a
                inner join @tlbMonitoringSession_AfterEdit b
                    on a.idfMonitoringSession = b.idfMonitoringSession
            where (a.idfPersonEnteredBy <> b.idfPersonEnteredBy)
                  or (
                         a.idfPersonEnteredBy is not null
                         and b.idfPersonEnteredBy is null
                     )
                  or (
                         a.idfPersonEnteredBy is null
                         and b.idfPersonEnteredBy is not null
                     )

            --idfCampaign
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbMonitoringSession,
                   707120000000,
                   a.idfMonitoringSession,
                   null,
                   a.idfCampaign,
                   b.idfCampaign
            from @tlbMonitoringSession_BeforeEdit a
                inner join @tlbMonitoringSession_AfterEdit b
                    on a.idfMonitoringSession = b.idfMonitoringSession
            where (a.idfCampaign <> b.idfCampaign)
                  or (
                         a.idfCampaign is not null
                         and b.idfCampaign is null
                     )
                  or (
                         a.idfCampaign is null
                         and b.idfCampaign is not null
                     )

            --datEnteredDate
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbMonitoringSession,
                   707130000000,
                   a.idfMonitoringSession,
                   null,
                   a.datEnteredDate,
                   b.datEnteredDate
            from @tlbMonitoringSession_BeforeEdit a
                inner join @tlbMonitoringSession_AfterEdit b
                    on a.idfMonitoringSession = b.idfMonitoringSession
            where (a.datEnteredDate <> b.datEnteredDate)
                  or (
                         a.datEnteredDate is not null
                         and b.datEnteredDate is null
                     )
                  or (
                         a.datEnteredDate is null
                         and b.datEnteredDate is not null
                     )

            --datStartDate
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbMonitoringSession,
                   4578670000000,
                   a.idfMonitoringSession,
                   null,
                   a.datStartDate,
                   b.datStartDate
            from @tlbMonitoringSession_BeforeEdit a
                inner join @tlbMonitoringSession_AfterEdit b
                    on a.idfMonitoringSession = b.idfMonitoringSession
            where (a.datStartDate <> b.datStartDate)
                  or (
                         a.datStartDate is not null
                         and b.datStartDate is null
                     )
                  or (
                         a.datStartDate is null
                         and b.datStartDate is not null
                     )

            --datEndDate
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbMonitoringSession,
                   4578680000000,
                   a.idfMonitoringSession,
                   null,
                   a.datEndDate,
                   b.datEndDate
            from @tlbMonitoringSession_BeforeEdit a
                inner join @tlbMonitoringSession_AfterEdit b
                    on a.idfMonitoringSession = b.idfMonitoringSession
            where (a.datEndDate <> b.datEndDate)
                  or (
                         a.datEndDate is not null
                         and b.datEndDate is null
                     )
                  or (
                         a.datEndDate is null
                         and b.datEndDate is not null
                     )


            INSERT INTO @tlbCampaign_BeforeEdit
            (
                idfCampaign,
                strCampaignName,
                idfsCampaignType,
                datCampaignDateStart,
                datCampaignDateEnd
            )
            SELECT idfCampaign,
                   strCampaignName,
                   idfsCampaignType,
                   datCampaignDateStart,
                   datCampaignDateEnd
            FROM tlbCampaign
            WHERE idfCampaign = @CampaignID;

            UPDATE dbo.tlbCampaign
            SET strCampaignName = @CampaignName,
                idfsCampaignType = @CampaignTypeID,
                datCampaignDateStart = @CampaignStartDate,
                datCampaignDateEnd = @CampaignEndDate
            WHERE idfCampaign = @CampaignID

            INSERT INTO @tlbCampaign_AfterEdit
            (
                idfCampaign,
                strCampaignName,
                idfsCampaignType,
                datCampaignDateStart,
                datCampaignDateEnd
            )
            SELECT idfCampaign,
                   strCampaignName,
                   idfsCampaignType,
                   datCampaignDateStart,
                   datCampaignDateEnd
            FROM tlbCampaign
            WHERE idfCampaign = @CampaignID;

            --strCampaignName
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbCampaign,
                   706970000000,
                   a.idfCampaign,
                   null,
                   a.strCampaignName,
                   b.strCampaignName
            from @tlbCampaign_BeforeEdit a
                inner join @tlbCampaign_AfterEdit b
                    on a.idfCampaign = b.idfCampaign
            where (a.strCampaignName <> b.strCampaignName)
                  or (
                         a.strCampaignName is not null
                         and b.strCampaignName is null
                     )
                  or (
                         a.strCampaignName is null
                         and b.strCampaignName is not null
                     )

            --idfsCampaignType
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbCampaign,
                   706920000000,
                   a.idfCampaign,
                   null,
                   a.idfsCampaignType,
                   b.idfsCampaignType
            from @tlbCampaign_BeforeEdit a
                inner join @tlbCampaign_AfterEdit b
                    on a.idfCampaign = b.idfCampaign
            where (a.idfsCampaignType <> b.idfsCampaignType)
                  or (
                         a.idfsCampaignType is not null
                         and b.idfsCampaignType is null
                     )
                  or (
                         a.idfsCampaignType is null
                         and b.idfsCampaignType is not null
                     )

            --datCampaignDateStart
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbCampaign,
                   706940000000,
                   a.idfCampaign,
                   null,
                   a.datCampaignDateStart,
                   b.datCampaignDateStart
            from @tlbCampaign_BeforeEdit a
                inner join @tlbCampaign_AfterEdit b
                    on a.idfCampaign = b.idfCampaign
            where (a.datCampaignDateStart <> b.datCampaignDateStart)
                  or (
                         a.datCampaignDateStart is not null
                         and b.datCampaignDateStart is null
                     )
                  or (
                         a.datCampaignDateStart is null
                         and b.datCampaignDateStart is not null
                     )

            --datCampaignDateEnd
            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbCampaign,
                   706950000000,
                   a.idfCampaign,
                   null,
                   a.datCampaignDateEnd,
                   b.datCampaignDateEnd
            from @tlbCampaign_BeforeEdit a
                inner join @tlbCampaign_AfterEdit b
                    on a.idfCampaign = b.idfCampaign
            where (a.datCampaignDateEnd <> b.datCampaignDateEnd)
                  or (
                         a.datCampaignDateEnd is not null
                         and b.datCampaignDateEnd is null
                     )
                  or (
                         a.datCampaignDateEnd is null
                         and b.datCampaignDateEnd is not null
                     )


            UPDATE @EventsTemp
            SET ObjectId = @MonitoringSessionID
            WHERE ObjectId = 0;

        END
        ELSE
        BEGIN
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbMonitoringSession',
                                              @MonitoringSessionID OUTPUT;

            EXECUTE dbo.USP_GBL_NextNumber_GET 'Human Active Surveillance Session',
                                               @EIDSSSessionID OUTPUT,
                                               NULL;

            INSERT INTO dbo.tlbMonitoringSession
            (
                idfMonitoringSession,
                idfsMonitoringSessionStatus,
                idfsLocation,
                idfPersonEnteredBy,
                idfCampaign,
                idfsSite,
                datEnteredDate,
                strMonitoringSessionID,
                datStartDate,
                datEndDate,
                SessionCategoryID,
                intRowStatus,
                AuditCreateUser
            )
            VALUES
            (@MonitoringSessionID,
             @MonitoringSessionStatusTypeID,
             @idfsLocation,
             @EnteredByPersonID,
             @CampaignID,
             @SiteID,
             GETDATE(),
             @EIDSSSessionID,
             @StartDate,
             @EndDate,
             @SessionCategoryTypeID,
             0  ,
             @AuditUserName
            );

            --Data Audit--

            -- tauDataAuditEvent Event Type - Create 
            set @idfsDataAuditEventType = 10016001;

            -- insert record into tauDataAuditEvent - 
            INSERT INTO @SuppressSelect
            EXEC USSP_GBL_DataAuditEvent_GET @idfUserId,
                                             @idfSiteId,
                                             @idfsDataAuditEventType,
                                             @idfsObjectType,
                                             @MonitoringSessionID,
                                             @idfObjectTable_tlbMonitoringSession,
                                             @idfDataAuditEvent OUTPUT

            INSERT INTO tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject
            )
            VALUES
            (@idfDataAuditEvent, @idfObjectTable_tlbMonitoringSession, @MonitoringSessionID)

        --Data Audit--

        END

        WHILE EXISTS (SELECT * FROM @DiseaseCombinationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionToDiseaseID,
                @DiseaseID = DiseaseID,
                @SampleTypeID = SampleTypeID,
                @OrderNumber = OrderNumber,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @DiseaseCombinationsTemp;

            SET @idfMonitoringSessionToDiagnosis = @RowID

            INSERT INTO @SuppressSelect
            EXECUTE USSP_HAS_MonitoringSessionToDiagnosis_SET @LanguageID,
                                                              @idfDataAuditEvent,
                                                              @idfMonitoringSessionToDiagnosis OUTPUT,
                                                              @MonitoringSessionID,
                                                              @DiseaseID,
                                                              @OrderNumber,
                                                              NULL,
                                                              @SampleTypeID,
                                                              @Comments,
                                                              @AuditUserName,
                                                              @RowAction;

            DELETE FROM @DiseaseCombinationsTemp
            WHERE MonitoringSessionToDiseaseID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @SampleTypeCombinationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionToSampleTypeID,
                @MonitoringSessionToSampleTypeID = MonitoringSessionToSampleTypeID,
                @OrderNumber = OrderNumber,
                @RowStatus = RowStatus,
                @SampleTypeID = SampleTypeID,
                @RowAction = RowAction
            FROM @SampleTypeCombinationsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_HAS_MONITORING_SESSION_TO_SAMPLE_TYPE_SET @LanguageID,
                                                                       @idfDataAuditEvent,
                                                                       @MonitoringSessionToSampleTypeID,
                                                                       @MonitoringSessionID,
                                                                       @OrderNumber,
                                                                       @RowStatus,
                                                                       @SampleTypeID,
                                                                       @RowAction,
                                                                       @AuditUserName;

            DELETE FROM @SampleTypeCombinationsTemp
            WHERE MonitoringSessionToSampleTypeID = @RowID;
        END;


        WHILE EXISTS (SELECT * FROM @SamplesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SampleID,
                @SampleID = SampleID,
                @SampleTypeID = SampleTypeID,
                @CollectedByPersonID = CollectedByPersonID,
                @CollectedByOrganizationID = CollectedByOrganizationID,
                @CollectionDate = CAST(CollectionDate AS DATETIME),
                @SentDate = CAST(SentDate AS DATETIME),
                @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                @SampleStatusTypeID = SampleStatusTypeID,
                @Comments = Comments,
                @SiteID = SiteID,
                --,@CurrentSiteID = CurrentSiteID
                @RowStatus = RowStatus,
                @SentToOrganizationID = SentToOrganizationID,
                @DiseaseID = DiseaseID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @HumanID = HumanID,
                @HumanMasterID = HumanMasterID,
                @RowAction = RowAction
            FROM @SamplesTemp;

            SET @EIDSSLocalOrFieldSampleID
                = REPLACE(@EIDSSLocalOrFieldSampleID, @Translated_New + '-', @EIDSSSessionID + '-');

            IF @RowAction = 'I'
            BEGIN
                DECLARE @idfNewHuman BIGINT = NULL;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_HUM_COPY_HUMAN_SET @HumanMasterID,
                                                    @idfDataAuditEvent,
                                                    @AuditUserName,
                                                    @idfNewHuman OUTPUT,
                                                    @ReturnCode OUTPUT,
                                                    @ReturnMessage OUTPUT;

                SELECT @HumanID = @idfNewHuman;
            END;

            EXECUTE dbo.USSP_GBL_SAMPLES_SET @AuditUserName = @AuditUserName,
                                             @DataAuditEventID = @idfDataAuditEvent,
                                             @EIDSSObjectID = @EIDSSSessionID,
                                             @SampleID = @SampleID OUTPUT,
                                             @SampleTypeID = @SampleTypeID,
                                             @RootSampleID = NULL,
                                             @ParentSampleID = NULL,
                                             @HumanID = @HumanID,
                                             @SpeciesID = NULL,
                                             @AnimalID = NULL,
                                             @VectorID = NULL,
                                             @MonitoringSessionID = @MonitoringSessionID,
                                             @VectorSessionID = NULL,
                                             @HumanDiseaseReportID = NULL,
                                             @VeterinaryDiseaseReportID = NULL,
                                             @CollectionDate = @CollectionDate,
                                             @CollectedByPersonID = @CollectedByPersonID,
                                             @CollectedByOrganizationID = @CollectedByOrganizationID,
                                             @SentDate = @SentDate,
                                             @SentToOrganizationID = @SentToOrganizationID,
                                             @EIDSSLocalFieldSampleID = @EIDSSLocalOrFieldSampleID,
                                             @SiteID = @SiteID,
                                             @EnteredDate = @DateEntered,
                                             @ReadOnlyIndicator = @ReadOnlyIndicator,
                                             @SampleStatusTypeID = @SampleStatusTypeID,
                                             @Comments = @Comments,
                                             @CurrentSiteID = NULL,
                                             @DiseaseID = @DiseaseID,
                                             @BirdStatusTypeID = NULL,
                                             @RowStatus = @RowStatus,
                                             @RowAction = @RowAction;

            UPDATE @SamplesToDiseasesTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            UPDATE @TestsTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            DELETE FROM @SamplesTemp
            WHERE SampleID = @RowID;

            DELETE FROM dbo.tlbMonitoringSessionToMaterial
            WHERE idfMaterial = @SampleID;
        END;

        WHILE EXISTS (SELECT * FROM @SamplesToDiseasesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionToMaterialID,
                @MonitoringSessionToMaterialID = MonitoringSessionToMaterialID,
                @SampleID = SampleID,
                @SampleTypeID = SampleTypeID,
                @DiseaseID = DiseaseID,
                @RowAction = RowAction,
                @RowStatus = RowStatus
            FROM @SamplesToDiseasesTemp;

            --insert or update the diseases for this sample
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_AS_SAMPLE_TO_DISEASE_SET @AuditUserName,
                                                      @idfDataAuditEvent,
                                                      @MonitoringSessionToMaterialID,
                                                      @MonitoringSessionID,
                                                      @SampleID,
                                                      @DiseaseID,
                                                      @SampleTypeID,
                                                      @RowStatus,
                                                      @RowAction;

            DELETE FROM @SamplesToDiseasesTemp
            WHERE MonitoringSessionToMaterialID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @TestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestID,
                @TestID = TestID,
                @TestNameTypeID = TestNameTypeID,
                @TestCategoryTypeID = TestCategoryTypeID,
                @TestResultTypeID = TestResultTypeID,
                @TestStatusTypeID = TestStatusTypeID,
                @DiseaseID = DiseaseID,
                @SampleID = SampleID,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @StartedDate = StartedDate,
                @ResultDate = ResultDate,
                @TestedByOrganizationID = TestedByOrganizationID,
                @TestedByPersonID = TestedByPersonID,
                @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                @ResultEnteredByPersonID = ResultEnteredByPersonID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
                @ExternalTestIndicator = ExternalTestIndicator,
                @PerformedByOrganizationID = PerformedByOrganizationID,
                @ReceivedDate = ReceivedDate,
                @ContactPersonName = ContactPersonName,
                @RowAction = RowAction
            FROM @TestsTemp;

            SELECT @idfHumanCase_Test = idfHumanCase
            FROM tlbTesting
            WHERE idfTesting = @TestID

            SET @EIDSSLocalOrFieldSampleID
                = REPLACE(@EIDSSLocalOrFieldSampleID, @Translated_New + '-', @EIDSSSessionID + '-');

            --If record is being soft-deleted, then check if the test record was originally created 
            --in the laboaratory module.  If it was, then disassociate the test record from the 
            --human monitoring session, so that the test record remains in the laboratory module 
            --for further action.
            IF @RowStatus = 1
               AND @NonLaboratoryTestIndicator = 1
            BEGIN
                SET @RowStatus = 0;
                SET @TestMonitoringSessionID = NULL;
            END
            ELSE
            BEGIN
                SET @TestMonitoringSessionID = @MonitoringSessionID;
            END;


            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TESTS_SET @TestID OUTPUT,
                                           @TestNameTypeID,
                                           @TestCategoryTypeID,
                                           @TestResultTypeID,
                                           @TestStatusTypeID,
                                           @DiseaseID,
                                           @SampleID,
                                           NULL,
                                           NULL,
                                           NULL,
                                           @Comments,
                                           @RowStatus,
                                           @StartedDate,
                                           @ResultDate,
                                           @TestedByOrganizationID,
                                           @TestedByPersonID,
                                           @ResultEnteredByOrganizationID,
                                           @ResultEnteredByPersonID,
                                           @ValidatedByOrganizationID,
                                           @ValidatedByPersonID,
                                           @ReadOnlyIndicator,
                                           @NonLaboratoryTestIndicator,
                                           @ExternalTestIndicator,
                                           @PerformedByOrganizationID,
                                           @ReceivedDate,
                                           @ContactPersonName,
                                           @TestMonitoringSessionID,
                                           NULL,
                                           @idfHumanCase_Test,
                                           NULL,
                                           @AuditUserName,
                                           @idfDataAuditEvent,
                                           @EIDSSSessionID,
                                           @RowAction;

            DELETE FROM @TestsTemp
            WHERE TestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @ActionsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionActionID,
                @MonitoringSessionActionID = MonitoringSessionActionID,
                @EnteredByPersonID = EnteredByPersonID,
                @ActionTypeID = ActionTypeID,
                @ActionStatusTypeID = ActionStatusTypeID,
                @ActionDate = ActionDate,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @ActionsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_HAS_MONITORING_SESSION_ACTION_SET @LanguageID,
                                                               @idfDataAuditEvent,
                                                               @MonitoringSessionActionID OUTPUT,
                                                               @MonitoringSessionID,
                                                               @EnteredByPersonID,
                                                               @ActionTypeID,
                                                               @ActionStatusTypeID,
                                                               @ActionDate,
                                                               @Comments,
                                                               @RowStatus,
                                                               @RowAction,
                                                               @AuditUserName

            DELETE FROM @ActionsTemp
            WHERE MonitoringSessionActionID = @RowID;
        END;


        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                            @EventTypeId,
                                            @EventUserId,
                                            @EventObjectId,
                                            @EventDiseaseId,
                                            @EventSiteId,
                                            @EventInformationString,
                                            @EventLoginSiteId,
                                            @EventLocationId,
                                            @AuditUserName;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        DECLARE @HumanDiseaseReportID BIGINT = NULL;
        DECLARE @EIDSSReportID NVARCHAR(200) = NULL;

        IF (@CreateDiseaseReportHumanID IS NOT NULL)
        BEGIN
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbHumanCase',
                                              @HumanDiseaseReportID OUTPUT;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NextNumber_GET 'Human Disease Report',
                                               @EIDSSReportID OUTPUT,
                                               NULL;

            DECLARE @PersonID NVARCHAR(50) = NULL;
            DECLARE @Name NVARCHAR(200) = NULL;

            INSERT INTO dbo.tlbHumanCase
            (
                idfHumanCase,
                strCaseID,
                idfHuman,
                idfParentMonitoringSession,
                idfsFinalDiagnosis,
                idfsSite,
                idfsCaseProgressStatus,
                idfsInitialCaseStatus,
                idfsFinalCaseStatus,
                DiseaseReportTypeID,
                idfPersonEnteredBy,
                idfsYNSpecimenCollected,
                idfsYNTestsConducted,
                datEnteredDate
            )
            VALUES
            (   @HumanDiseaseReportID,
                @EIDSSReportID,
                @CreateDiseaseReportHumanID,
                @MonitoringSessionID,
                NULL, --@DiseaseID
                @SiteID,
                10109001,
                NULL,
                NULL,
                4578940000001,
                @EnteredByPersonID,
                10100001,
                10100001,
                GETDATE()
            );

            UPDATE dbo.tlbMaterial
            SET idfHumanCase = @HumanDiseaseReportID
            WHERE idfMonitoringSession = @MonitoringSessionID
                  AND idfHuman = @CreateDiseaseReportHumanID;
        END;

        IF @@TRANCOUNT > 0
            COMMIT TRANSACTION;

    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        THROW;
    END CATCH

    SELECT @ReturnCode AS ReturnCode,
           @ReturnMessage AS ReturnMessage,
           @MonitoringSessionID AS MonitoringSessionID,
           @EIDSSSessionID AS EIDSSSessionID,
           @HumanDiseaseReportID AS HumanDiseaseReportID;
END
GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_AggregateSetting_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_AggregateSetting_GetList]';

GO

PRINT N'Refreshing Procedure [dbo].[USP_HAS_MONITORING_SESSION_SET]...';
GO

EXECUTE sp_refreshsqlmodule N'[dbo].[USP_HAS_MONITORING_SESSION_SET]';

GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_MonthlyInfectiousDiseaseV6]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_MonthlyInfectiousDiseaseV6]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_MonthlyInfectiousDiseaseNew]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_MonthlyInfectiousDiseaseNew]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_AnnualInfectiousDisease]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_AnnualInfectiousDisease]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_VET_Form1ADiagnosticInvestigationsAZ]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_VET_Form1ADiagnosticInvestigationsAZ]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_VET_Form1ASanitaryMeasuresAZ]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_VET_Form1ASanitaryMeasuresAZ]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_VET_Form1AVaccinationMeasuresAZ]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_VET_Form1AVaccinationMeasuresAZ]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_VET_SummaryAggregateActionsAZ]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_VET_SummaryAggregateActionsAZ]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_Comparative_Calculations]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_Comparative_Calculations]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_ExternalComparative_Calculations]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_ExternalComparative_Calculations]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_MonthlyInfectiousDiseaseV61]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_MonthlyInfectiousDiseaseV61]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_ComparativeTwoYears_Calculations]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_ComparativeTwoYears_Calculations]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_BorderRayonsComparativeReport_Calculations]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_BorderRayonsComparativeReport_Calculations]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_Hum_ComparativeGG_Calculations]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_Hum_ComparativeGG_Calculations]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_ComparativeSeveralYearsByMonthsGG_Calculations]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_ComparativeSeveralYearsByMonthsGG_Calculations]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_MonthlyInfectiousDisease]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_MonthlyInfectiousDisease]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_MonthlyInfectiousDiseaseFatal]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_MonthlyInfectiousDiseaseFatal]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_FormN1InfectiousDiseases]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_FormN1InfectiousDiseases]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_FormN1InfectiousDiseases_IntrahospitalInfections]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_FormN1InfectiousDiseases_IntrahospitalInfections]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_CasesByRayonAndDiseaseSummary]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_CasesByRayonAndDiseaseSummary]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_Comparative]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_Comparative]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_ExternalComparative]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_ExternalComparative]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_ComparativeTwoYears]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_ComparativeTwoYears]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_ComparativeTwoYears_Graph]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_ComparativeTwoYears_Graph]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_Hum_ComparativeGG]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_Hum_ComparativeGG]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_ComparativeSeveralYearsByMonthsGG]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_ComparativeSeveralYearsByMonthsGG]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_MatrixSeed_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_MatrixSeed_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_ParameterTemplate_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_ParameterTemplate_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_ParameterTemplateCopyOnly_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_ParameterTemplateCopyOnly_SET]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_Copy_Template]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_Copy_Template]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_FF_Copy_Template]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_FF_Copy_Template]';


GO
PRINT N'Checking existing data against newly created constraints';

GO
ALTER TABLE [dbo].[tstAggrSetting] WITH CHECK CHECK CONSTRAINT [FK_tstAggrSetting_tstSite_idfsSite];


GO
PRINT N'Update complete.';


GO
