/*
Deployment script for EIDSS7_GG

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO

USE [EIDSS_GG];


GO

PRINT N'Altering Procedure [dbo].[USP_LAB_SAMPLE_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_SAMPLE_GETList
--
-- Description:	Get sample list for the laboratory module use case LUC01.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     07/18/2018 Initial release.
-- Stephen Long	    12/19/2018 Added pagination logic.
-- Stephen Long     01/14/2019 Split out search functionality (where conditions) for better 
--                             performance on this procedure.
-- Stephen Long     01/30/2019 Added sample disease reference join and removed the vector 
--                             surveillance session joins as they are no longer needed.
-- Stephen Long     02/11/2019 Fix to the value used for the test completed indicator.  It was 
--                             using the wrong base reference value.
-- Stephen Long     02/21/2019 Changed field collection and field sent to collection and sent to 
--                             be consistent on naming.  Added parent sample ID to support the 
--                             edit transfer use case.
-- Stephen Long     03/28/2019 Removed test status 'Not Started' as criteria for the test assigned 
--                             indicator and test assigned count.
-- Stephen Long     06/22/2019 Removal of herd join and joined species on the sample table.
-- Stephen Long     07/01/2019 Corrected reference type on monitoring session category.
-- Stephen Long     07/09/2019 Added human master ID to select as placeholder for model.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     07/17/2019 Added vector join and field vector ID to the patient/species/vector.
-- Stephen Long     07/28/2019 Corrected sample kind ID where clause for aliquots/derivatives.
-- Stephen Long     08/12/2019 Corrected parenthesis for POCO error on sample kind where clause.
-- Stephen Long     08/30/2019 Removed commented out IF ELSE for individual sample.
-- Stephen Long     09/11/2019 Added sample destroyed status to sample status where clause.  Added 
--                             pagination set 0 to bring back "all" records.
-- Stephen Long     09/26/2019 Added sample list parameter and where clause.
-- Stephen Long     10/03/2019 Added comma to split sample list delimeter.
-- Stephen Long     10/17/2019 Added intRowStatus and non-laboratory test check on test completed 
--                             and test assigned indicators, and test assigned count.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     02/19/2020 Corrected left joins needing intRowStatus = 0.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     03/16/2020 Added sample status type of transferred out to include in the list.
-- Stephen Long     04/16/2020 Correction on vector surveillance session disease ID's and names.
-- Stephen Long     04/20/2020 Added vector type ID and vector species type ID to the model.
-- Stephen Long     05/05/2020 Added transfer status type ID of final when sample status type ID 
--                             is transferred out.
-- Stephen Long     06/21/2020 Added additional criteria to show samples with a final or amended 
--                             test to be selected within the accession timeframe.
-- Stephen Long     06/30/2020 Added additional criteria to pull back transferred in records after
--                             accessioned in.
-- Stephen Long     07/06/2020 Added lab module source indicator to model.
-- Stephen Long     10/27/2020 Removed test assigned indicator, and split out queries for better 
--                             performance.
-- Stephen Long     10/29/2020 Added test unassigned and test completed parameters and where 
--                             criteria.
-- Stephen Long     10/31/2020 Correct disease report/session query where criteria; prevent dups.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/15/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Correct record and unaccessioned counts.
-- Stephen Long     01/21/2021 Change counts from distinct count to group by with sub-query.
-- Stephen Long     02/08/2021 Change where criteria to handle null organization for the central
--                             data repository.
-- Stephen Long     06/28/2021 Applied new pagination parameters.
-- Mark Wilson		08/11/2021 updated to join tlbMonitoringSessionToDiagnosis
-- Stephen Long     09/18/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     02/03/2022 Corrected monitoring session to diagnosis join.
-- Stephen Long     02/07/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     02/17/2022 Fix on where criteria for test status types.
-- Stephen Long     03/10/2022 Changed note to comment and transfer count to transferred count.
-- Stephen Long     03/24/2022 Added final results table variable to account for duplicates that 
--                             may return from filtration rules.
-- Stephen Long     04/15/2022 Fix to filtration query grouping.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     05/23/2022 Added check on testing table to only look for laboratory tests and
--                             rejected samples check within sample window.
-- Stephen Long     06/20/2022 Added row status check when looking for parent samples.
-- Stephen Long     06/28/2022 Added check to include transferred out samples only when the 
--                             transfer is final and within the accession date window.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/17/2022 Added collection and entered date to the default sort order.
-- Stephen Long     09/21/2022 Removed test status types of final and amended from the in 
--                             repository samples within the accession date window check.  Changed 
--                             rejected samples to use collection date or entered date against the 
--                             date window (number of days for samples to stay in the list).
-- Stephen Long     10/04/2022 Bug fix on item 5057; don't show marked for deletion or marked 
--                             for destruction in the default listing.
-- 
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_SAMPLE_GETList]
		@LanguageID = N'en-US',
		@SampleID = NULL,
		@ParentSampleID = NULL,
		@DaysFromAccessionDate = 60,
		@SampleList = NULL,
		@TestUnassignedIndicator = NULL,
		@TestCompletedIndicator = NULL,
		@UserID = 161287150000872, --rykermase
		@UserEmployeeID = 420664190000872,
		@UserSiteID = 864,
		@UserOrganizationID = 758210000000,
		@UserSiteGroupID = NULL,
		@Page = 1,
		@PageSize = 100,
		@SortColumn = N'AccessionDate',
		@SortOrder = N'ASC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_SAMPLE_GETList]
(
    @LanguageID NVARCHAR(50),
    @SampleID BIGINT = NULL,
    @ParentSampleID BIGINT = NULL,
    @DaysFromAccessionDate INT,
    @SampleList VARCHAR(MAX) = NULL,
    @TestUnassignedIndicator BIT = NULL,
    @TestCompletedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL,
    @Page INT = 1,
    @PageSize INT = 10,
    @SortColumn VARCHAR(200) = 'Default',
    @SortOrder VARCHAR(4) = 'ASC'
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @UnaccessionedCount INT = 0,
            @TotalRowCount INT = 0;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        AccessionedIndicator BIT NOT NULL,
        AccessionConditionTypeID BIGINT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        AccessionedIndicator BIT NOT NULL,
        AccessionConditionTypeID BIGINT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @SampleListTable TABLE (ID BIGINT NOT NULL);
    DECLARE @Favorites XML;

    IF @SampleList IS NOT NULL
        INSERT INTO @SampleListTable
        SELECT CAST([Value] AS BIGINT)
        FROM dbo.FN_GBL_SYS_SplitList(@SampleList, NULL, ',')

    BEGIN TRY
        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, ';') AS DiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, ';') AS DiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        IF @SampleID IS NOT NULL
           OR @SampleList IS NOT NULL
           OR @ParentSampleID IS NOT NULL
        BEGIN
            INSERT INTO @FinalResults
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbMaterial m
            WHERE m.intRowStatus = 0 
                  AND (
                      @SampleList IS NULL
                      OR m.idfMaterial IN (
                                              SELECT ID FROM @SampleListTable
                                          )
                  )
                  AND (
                          @SampleID IS NULL
                          OR m.idfMaterial = @SampleID
                      )
                  AND (
                          @ParentSampleID IS NULL
                          OR m.idfParentMaterial = @ParentSampleID
                      );
        END
        ELSE
        BEGIN
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbMaterial m
            WHERE m.intRowStatus = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND (
                          @UserOrganizationID IS NULL
                          OR m.idfSendToOffice = @UserOrganizationID
                      )
                  AND (
                          (
                              GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                              AND
                              (
                                  SELECT COUNT(*)
                                  FROM dbo.tlbTesting t
                                  WHERE t.idfMaterial = m.idfMaterial
                                        AND t.intRowStatus = 0
                                        AND t.blnNonLaboratoryTest = 0
                                        AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                              ) = 0
                              AND @TestUnassignedIndicator IS NOT NULL
                              AND m.blnAccessioned = 1
                              AND m.datAccession IS NOT NULL
                              AND m.idfsAccessionCondition IS NOT NULL
                              AND m.idfsSampleStatus = 10015007 -- In Repository
                          )
                          OR (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND
                                 (
                                     SELECT COUNT(*)
                                     FROM dbo.tlbTesting t
                                     WHERE t.idfMaterial = m.idfMaterial
                                           AND t.intRowStatus = 0
                                           AND t.blnNonLaboratoryTest = 0
                                           AND t.idfsTestStatus IN ( 10001001, 10001006 ) -- Final and Amended
                                 ) > 0
                                 AND @TestCompletedIndicator IS NOT NULL
                             )
                          OR (
                                 m.blnAccessioned = 0
                                 AND m.idfsAccessionCondition IS NULL
                                 AND m.idfsSampleStatus IS NULL
                                 AND @TestCompletedIndicator IS NULL
                                 AND @TestUnassignedIndicator IS NULL
                             )
                          OR ( -- Accessioned In with no in progress, preliminary tests assigned, Deleted or Destroyed
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND
                                 (
                                     SELECT COUNT(*)
                                     FROM dbo.tlbTesting t
                                     WHERE t.idfMaterial = m.idfMaterial
                                           AND t.intRowStatus = 0
                                           AND t.blnNonLaboratoryTest = 0
                                           AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                                 ) = 0
                                 AND m.idfsSampleStatus IN (10015007, 10015008, 10015009) -- In Repository, Deleted, Destroyed
                                 AND @TestUnassignedIndicator IS NULL
                                 AND @TestCompletedIndicator IS NULL
                             )
                          OR (
                                GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
								AND m.idfsSampleStatus = 10015010 -- Transferred Out
								AND
                                 (
                                     SELECT COUNT(tr.idfTransferOut)
                                     FROM dbo.tlbTransferOutMaterial tom
                                     INNER JOIN dbo.tlbTransferOUT tr ON tr.idfTransferOut = tom.idfTransferOut
                                     WHERE tom.idfMaterial = m.idfMaterial
                                           AND tr.intRowStatus = 0
                                           AND tr.idfsTransferStatus IN ( 10001003 ) -- Final
                                 ) = 0
								AND @TestCompletedIndicator IS NULL
								AND @TestUnassignedIndicator IS NULL
							) --Transferred Out and Final
                          OR (
                                 (
                                     (m.datFieldCollectionDate IS NOT NULL AND GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datFieldCollectionDate))
                                     OR (m.datEnteringDate IS NOT NULL AND GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datEnteringDate))
                                 )
                                 AND
                                 m.blnAccessioned = 0
                                 AND m.idfsAccessionCondition = 10108003 -- Rejected sample
                             )
                      );
        END

        -- =======================================================================================
        -- CONFIGURABLE SITE FILTRATION RULES
        -- 
        -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        IF @UserOrganizationID IS NOT NULL --First-level sites (central data repository, general data repository, etc.) do not filter results.
        BEGIN
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = @UserSiteGroupID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND @UserSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfSiteGroup = @UserSiteGroupID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND @UserSiteGroupID IS NOT NULL
                  AND sgs.idfsSite = m.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRule ar
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbMaterial m
                    ON m.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND m.idfsSite = ar.GrantingActorSiteID;

            DECLARE @UserEmployeeGroupID BIGINT = (
                                                      SELECT TOP 1
                                                          egm.idfEmployeeGroup
                                                      FROM dbo.tlbEmployeeGroupMember egm
                                                      WHERE egm.idfEmployee = @UserEmployeeID
                                                            AND egm.intRowStatus = 0
                                                  );

            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRuleActor ara
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
                       AND ar.GrantingActorSiteID IS NOT NULL
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfsSite = ar.GrantingActorSiteID
                       AND m.intRowStatus = 0
            WHERE ara.ActorEmployeeGroupID = @UserEmployeeGroupID
                  AND ara.intRowStatus = 0;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRule ar
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbMaterial m
                    ON m.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND m.idfsSite = ar.GrantingActorSiteID;
        END;

        IF @SortColumn <> 'Query'
        BEGIN
        INSERT INTO @FinalResults
        SELECT ID,
               AccessionedIndicator,
               AccessionConditionTypeID,
               CASE
                   WHEN EXISTS
                        (
                            SELECT ReadPermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT AccessToPersonalDataPermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT AccessToGenderAndAgeDataPermissionIndicator
                            FROM @Results
                            WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT WritePermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN EXISTS
                        (
                            SELECT DeletePermissionIndicator FROM @Results WHERE ID = ID
                        ) THEN
                       1
                   ELSE
                       0
               END
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
        WHERE res.ReadPermissionIndicator = 1
              AND m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      (
                          GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                          AND
                          (
                              SELECT COUNT(*)
                              FROM dbo.tlbTesting t
                              WHERE t.idfMaterial = m.idfMaterial
                                    AND t.intRowStatus = 0
                                    AND t.blnNonLaboratoryTest = 0
                                    AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                          ) = 0
                          AND @TestUnassignedIndicator IS NOT NULL
                          AND m.blnAccessioned = 1
                          AND m.datAccession IS NOT NULL
                          AND m.idfsAccessionCondition IS NOT NULL
                          AND m.idfsSampleStatus = 10015007 -- In Repository
                      )
                      OR (
                             GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                             AND
                             (
                                 SELECT COUNT(*)
                                 FROM dbo.tlbTesting t
                                 WHERE t.idfMaterial = m.idfMaterial
                                       AND t.intRowStatus = 0
                                       AND t.blnNonLaboratoryTest = 0
                                       AND t.idfsTestStatus IN ( 10001001, 10001006 ) -- Final and Amended
                             ) > 0
                             AND @TestCompletedIndicator IS NOT NULL
                         )
                      OR (
                             m.blnAccessioned = 0
                             AND m.idfsAccessionCondition IS NULL
                             AND m.idfsSampleStatus IS NULL
                             AND @TestCompletedIndicator IS NULL
                             AND @TestUnassignedIndicator IS NULL
                         )
                      OR (
                             GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                             AND
                             (
                                 SELECT COUNT(*)
                                 FROM dbo.tlbTesting t
                                 WHERE t.idfMaterial = m.idfMaterial
                                       AND t.intRowStatus = 0
                                       AND t.blnNonLaboratoryTest = 0
                                       AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                             ) = 0
                             AND m.idfsSampleStatus IN (10015007, 10015008, 10015009) -- In Repository, Deleted, Destroyed
                             AND @TestUnassignedIndicator IS NULL
                             AND @TestCompletedIndicator IS NULL
                         )
                      OR (
                             GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
							 AND m.idfsSampleStatus = 10015010 -- Transferred Out
							 AND
                             (
                                 SELECT COUNT(tr.idfTransferOut)
                                 FROM dbo.tlbTransferOutMaterial tom
                                 INNER JOIN dbo.tlbTransferOUT tr ON tr.idfTransferOut = tom.idfTransferOut
                                 WHERE tom.idfMaterial = m.idfMaterial
                                       AND tr.intRowStatus = 0
                                       AND tr.idfsTransferStatus IN ( 10001003 ) -- Final
                             ) = 0
							 AND @TestCompletedIndicator IS NULL
							 AND @TestUnassignedIndicator IS NULL
						 ) --Transferred Out and Final
                      OR (
                             (
                                 (m.datFieldCollectionDate IS NOT NULL AND GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datFieldCollectionDate))
                                 OR (m.datEnteringDate IS NOT NULL AND GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datEnteringDate))
                             )
                             AND
                             m.blnAccessioned = 0
                             AND m.idfsAccessionCondition = 10108003 -- Rejected sample
                         )
                  )
        GROUP BY ID,
                 AccessionedIndicator,
                 AccessionConditionTypeID;
        END

        SET @TotalRowCount =
        (
            SELECT COUNT(ID) FROM @FinalResults
        );
        SET @UnaccessionedCount =
        (
            SELECT COUNT(ID)
            FROM @FinalResults
            WHERE AccessionedIndicator = 0
                  AND AccessionConditionTypeID IS NULL
        );

        IF @SortColumn = 'Default' OR @SortColumn = 'Query'
        BEGIN
            SELECT m.idfMaterial AS SampleID,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   CASE
                       WHEN f.SampleID IS NULL THEN
                           0
                       ELSE
                           1
                   END AS FavoriteIndicator,
                   m.idfRootMaterial AS RootSampleID,
                   m.idfParentMaterial AS ParentSampleID,
                   m.idfsSampleType AS SampleTypeID,
                   sampleType.name AS SampleTypeName,
                   m.idfHuman AS HumanID,
                   m.strCalculatedHumanName AS PatientOrFarmOwnerName,
                   m.idfSpecies AS SpeciesID,
                   m.idfAnimal AS AnimalID,
                   a.strAnimalCode AS EIDSSAnimalID,
                   m.idfVector AS VectorID,
                   m.idfMonitoringSession AS MonitoringSessionID,
                   m.idfVectorSurveillanceSession AS VectorSessionID,
                   m.idfHumanCase AS HumanDiseaseReportID,
                   m.idfVetCase AS VeterinaryDiseaseReportID,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   '' AS ReportOrSessionTypeName,
                   m.TestCompletedIndicator,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           CAST(m.DiseaseID AS NVARCHAR(MAX))
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseIdentifiers
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DiseaseIdentifiers
                       ELSE
                           '' 
                   END AS DiseaseID,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN 
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseNames
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DiseaseNames
                       ELSE
                           ''
                   END AS DiseaseName,
                   m.idfInDepartment AS FunctionalAreaID,
                   functionalArea.name AS FunctionalAreaName,
                   m.idfSubdivision AS FreezerSubdivisionID,
                   m.StorageBoxPlace,
                   m.datFieldCollectionDate AS CollectionDate,
                   m.idfFieldCollectedByPerson AS CollectedByPersonID,
                   m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
                   m.datFieldSentDate AS SentDate,
                   m.idfSendToOffice AS SentToOrganizationID,
                   m.idfsSite AS SiteID,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   m.datEnteringDate AS EnteredDate,
                   m.datOutOfRepositoryDate AS OutOfRepositoryDate,
                   m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
                   m.blnReadOnly AS ReadOnlyIndicator,
                   m.blnAccessioned AS AccessionIndicator,
                   m.datAccession AS AccessionDate,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   CASE
                       WHEN m.blnAccessioned = 0
                            AND m.idfsAccessionCondition IS NULL THEN
                           'Un-accessioned'
                       WHEN m.idfsSampleStatus IS NULL THEN
                           accessionConditionType.name
                       WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                           accessionConditionType.name
                       ELSE
                           sampleStatusType.name
                   END AS AccessionConditionOrSampleStatusTypeName,
                   m.idfAccesionByPerson AS AccessionByPersonID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   m.datSampleStatusDate AS SampleStatusDate,
                   m.strCondition AS AccessionComment,
                   m.idfsDestructionMethod AS DestructionMethodTypeID,
                   m.datDestructionDate AS DestructionDate,
                   m.idfDestroyedByPerson AS DestroyedByPersonID,
                   CASE
                       WHEN m.TestUnassignedIndicator = 1 THEN
                           0
                       ELSE
                           1
                   END AS TestAssignedCount,
                   m.TransferIndicator AS TransferredCount,
                   m.strNote AS Comment,
                   m.idfsCurrentSite AS CurrentSiteID,
                   m.idfsBirdStatus AS BirdStatusTypeID,
                   m.idfMainTest AS MainTestID,
                   m.idfsSampleKind AS SampleKindTypeID,
                   m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
                   m.LabModuleSourceIndicator,
                   m.intRowStatus AS RowStatus,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator,
                   0 AS RowAction,
                   0 AS RowSelectionIndicator,
                   @Page AS CurrentPage,
                   @TotalRowCount AS TotalRowCount,
                   @UnaccessionedCount AS UnaccessionedSampleCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.ID
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN
                (
                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                    FROM @favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                ) f
                    ON m.idfMaterial = f.SampleID
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                    ON diseaseName.idfsReference = m.DiseaseID
                LEFT JOIN @MonitoringSessionDiseases msDiseases
                    ON msDiseases.ID = m.idfMonitoringSession
                LEFT JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                    ON functionalArea.idfsReference = d.idfsDepartmentName
            ORDER BY m.blnAccessioned,
                     m.idfsSampleStatus DESC,
                     m.idfsAccessionCondition, 
                     m.datFieldCollectionDate DESC, 
                     m.datEnteringDate DESC OFFSET @PageSize * (@Page - 1) ROWS FETCH NEXT @PageSize ROWS ONLY
                     OPTION (RECOMPILE);
        END
        ELSE
        BEGIN
            SELECT m.idfMaterial AS SampleID,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   CASE
                       WHEN f.SampleID IS NULL THEN
                           0
                       ELSE
                           1
                   END AS FavoriteIndicator,
                   m.idfRootMaterial AS RootSampleID,
                   m.idfParentMaterial AS ParentSampleID,
                   m.idfsSampleType AS SampleTypeID,
                   sampleType.name AS SampleTypeName,
                   m.idfHuman AS HumanID,
                   m.strCalculatedHumanName AS PatientOrFarmOwnerName,
                   m.idfSpecies AS SpeciesID,
                   m.idfAnimal AS AnimalID,
                   a.strAnimalCode AS EIDSSAnimalID,
                   m.idfVector AS VectorID,
                   m.idfMonitoringSession AS MonitoringSessionID,
                   m.idfVectorSurveillanceSession AS VectorSessionID,
                   m.idfHumanCase AS HumanDiseaseReportID,
                   m.idfVetCase AS VeterinaryDiseaseReportID,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   '' AS ReportOrSessionTypeName,
                   m.TestCompletedIndicator,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           CAST(m.DiseaseID AS NVARCHAR(MAX))
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseIdentifiers
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DiseaseIdentifiers
                       ELSE
                           '' 
                   END AS DiseaseID,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN 
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseNames
                       WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                           vsDiseases.DiseaseNames
                       ELSE
                           ''
                   END AS DiseaseName,
                   m.idfInDepartment AS FunctionalAreaID,
                   functionalArea.name AS FunctionalAreaName,
                   m.idfSubdivision AS FreezerSubdivisionID,
                   m.StorageBoxPlace,
                   m.datFieldCollectionDate AS CollectionDate,
                   m.idfFieldCollectedByPerson AS CollectedByPersonID,
                   m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
                   m.datFieldSentDate AS SentDate,
                   m.idfSendToOffice AS SentToOrganizationID,
                   m.idfsSite AS SiteID,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   m.datEnteringDate AS EnteredDate,
                   m.datOutOfRepositoryDate AS OutOfRepositoryDate,
                   m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
                   m.blnReadOnly AS ReadOnlyIndicator,
                   m.blnAccessioned AS AccessionIndicator,
                   m.datAccession AS AccessionDate,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   CASE
                       WHEN m.blnAccessioned = 0
                            AND m.idfsAccessionCondition IS NULL THEN
                           'Un-accessioned'
                       WHEN m.idfsSampleStatus IS NULL THEN
                           accessionConditionType.name
                       WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                           accessionConditionType.name
                       ELSE
                           sampleStatusType.name
                   END AS AccessionConditionOrSampleStatusTypeName,
                   m.idfAccesionByPerson AS AccessionByPersonID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   m.datSampleStatusDate AS SampleStatusDate,
                   m.strCondition AS AccessionComment,
                   m.idfsDestructionMethod AS DestructionMethodTypeID,
                   m.datDestructionDate AS DestructionDate,
                   m.idfDestroyedByPerson AS DestroyedByPersonID,
                   CASE
                       WHEN m.TestUnassignedIndicator = 1 THEN
                           0
                       ELSE
                           1
                   END AS TestAssignedCount,
                   m.TransferIndicator AS TransferredCount,
                   m.strNote AS Comment,
                   m.idfsCurrentSite AS CurrentSiteID,
                   m.idfsBirdStatus AS BirdStatusTypeID,
                   m.idfMainTest AS MainTestID,
                   m.idfsSampleKind AS SampleKindTypeID,
                   m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
                   m.LabModuleSourceIndicator,
                   m.intRowStatus AS RowStatus,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator,
                   0 AS RowAction,
                   0 AS RowSelectionIndicator,
                   @Page AS CurrentPage,
                   @TotalRowCount AS TotalRowCount,
                   @UnaccessionedCount AS UnaccessionedSampleCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.ID
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN
                (
                    SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                    FROM @favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                ) f
                    ON m.idfMaterial = f.SampleID
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                    ON diseaseName.idfsReference = m.DiseaseID
                LEFT JOIN @MonitoringSessionDiseases msDiseases
                    ON msDiseases.ID = m.idfMonitoringSession
                LEFT JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                    ON functionalArea.idfsReference = d.idfsDepartmentName
            ORDER BY CASE
                         WHEN @SortColumn = 'EIDSSReportOrSessionID'
                              AND @SortOrder = 'ASC' THEN
                             m.strCalculatedCaseID
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'EIDSSReportOrSessionID'
                              AND @SortOrder = 'DESC' THEN
                             m.strCalculatedCaseID
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'PatientOrFarmOwnerName'
                              AND @SortOrder = 'ASC' THEN
                             m.strCalculatedHumanName
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'PatientOrFarmOwnerName'
                              AND @SortOrder = 'DESC' THEN
                             m.strCalculatedHumanName
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                              AND @SortOrder = 'ASC' THEN
                             m.strFieldBarcode
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                              AND @SortOrder = 'DESC' THEN
                             m.strFieldBarcode
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'AccessionDate'
                              AND @SortOrder = 'ASC' THEN
                             m.datAccession
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'AccessionDate'
                              AND @SortOrder = 'DESC' THEN
                             m.datAccession
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'SampleTypeName'
                              AND @SortOrder = 'ASC' THEN
                             sampleType.name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'SampleTypeName'
                              AND @SortOrder = 'DESC' THEN
                             sampleType.name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'DiseaseName'
                              AND @SortOrder = 'ASC' THEN
                             CASE
                                 WHEN m.DiseaseID IS NOT NULL THEN 
                                     diseaseName.name
                                 WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                     msDiseases.DiseaseNames
                                 WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                                     vsDiseases.DiseaseNames
                                 ELSE
                                     ''
                             END
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'DiseaseName'
                              AND @SortOrder = 'DESC' THEN
                             CASE
                                 WHEN m.DiseaseID IS NOT NULL THEN 
                                     diseaseName.name
                                 WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                                     msDiseases.DiseaseNames
                                 WHEN (m.DiseaseID IS NULL AND ISNULL(m.idfVectorSurveillanceSession, '') = '') THEN
                                     vsDiseases.DiseaseNames
                                 ELSE
                                     ''
                             END
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                              AND @SortOrder = 'ASC' THEN
                             m.strBarcode
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'EIDSSLaboratorySampleID'
                              AND @SortOrder = 'DESC' THEN
                             m.strBarcode
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                              AND @SortOrder = 'ASC' THEN
                             CASE
                                 WHEN m.blnAccessioned = 0
                                      AND m.idfsAccessionCondition IS NULL THEN
                                     'Un-accessioned'
                                 WHEN m.idfsSampleStatus IS NULL THEN
                                     accessionConditionType.name
                                 WHEN m.idfsSampleStatus = 10015007 --In Repository
                     THEN
                                     accessionConditionType.name
                                 ELSE
                                     sampleStatusType.name
                             END
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'AccessionConditionOrSampleStatusTypeName'
                              AND @SortOrder = 'DESC' THEN
                             CASE
                                 WHEN m.blnAccessioned = 0
                                      AND m.idfsAccessionCondition IS NULL THEN
                                     'Un-accessioned'
                                 WHEN m.idfsSampleStatus IS NULL THEN
                                     accessionConditionType.name
                                 WHEN m.idfsSampleStatus = 10015007 --In Repository
                     THEN
                                     accessionConditionType.name
                                 ELSE
                                     sampleStatusType.name
                             END
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'FunctionalAreaName'
                              AND @SortOrder = 'ASC' THEN
                             functionalArea.name
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'FunctionalAreaName'
                              AND @SortOrder = 'DESC' THEN
                             functionalArea.name
                     END DESC,
                     CASE
                         WHEN @SortColumn = 'EIDSSAnimalID'
                              AND @SortOrder = 'ASC' THEN
                             a.strAnimalCode
                     END ASC,
                     CASE
                         WHEN @SortColumn = 'EIDSSAnimalID'
                              AND @SortOrder = 'DESC' THEN
                             a.strAnimalCode
                     END DESC OFFSET @PageSize * (@Page - 1) ROWS FETCH NEXT @PageSize ROWS ONLY
           OPTION (RECOMPILE);
        END
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USSP_OMM_HUMAN_TESTS_SET]...';


GO
--**************************************************************************************************************************
-- Name 				: USSP_OMM_HUMAN_TESTS_SET
-- Description			: add update delete Human Case Tests
--          
-- Author               : RDA
-- Revision History
--	Name			 Date		 Change Detail
--	--------------	 ----------	 --------------------------------
--	Doug Albanese	 07/09/2019	 Created
--	Doug Albanese	 04/27/2022	 Refactored to include relative fields only
--  Doug Albanese	 10/04/2022	 Corrected the usage of RowAction to using the numbering system
--**************************************************************************************************************************
ALTER PROCEDURE [dbo].[USSP_OMM_HUMAN_TESTS_SET]
	@idfsDiagnosis				BIGINT,
	@idfHumanActual				BIGINT,
	@idfHumanCase				BIGINT,
	@TestsParameters			NVARCHAR(MAX) = NULL,
	@User						NVARCHAR(100) = NULL
AS
Begin
	SET NOCOUNT ON;

	DECLARE
		
		@idfHuman				BIGINT = NULL,
		@TestID					BIGINT = NULL,			--(Test Identity), tlbTesting: TestID
		@idfTestValidation		BIGINT = NULL,
		@SampleID				BIGINT = NULL,			--(Sample Identity), tlbMaterial: SampleID			
		@strFieldBarcode		NVARCHAR(200) = NULL,	--"Field Sample ID", tlbMaterial: strFieldBarcode
		@strBarcode				NVARCHAR(200) = NULL,	--"Lab Sample ID", tlbMaterial: strBarCode
		@TestNameTypeID			BIGINT = NULL,			--"Test Name", tlbTesting: TestNameTypeID
		@TestResultTypeID		BIGINT = NULL,			--"Test Result", tlbTesting: TestResultTypeID
		@TestStatusTypeID		BIGINT = NULL,			--"Test Status", tlbTesting: TestStatusTypeID
		@TestCategoryTypeID		BIGINT = NULL,			--"Test Category", tlbTesting: TestNameTypeID
		@idfsInterpretedStatus	BIGINT = NULL,			--"Rule In / Rule Out", tlbTestValidation: idfsInterpretedStatus
		@strInterpretedComment	NVARCHAR(200) = NULL,	--"Comments", tlbTestValidation: strInterpretedComment
		@datInterpretationDate	DATETIME2 = NULL,		--"Date Interpreted", tlbTestValidation: datInterpretationDate
		@idfInterpretedByPerson	BIGINT = NULL,			--"Interpreted By", tlbTestValidation: idfInterpretedByPerson
		@blnValidateStatus		INT = NULL,				--"Validated (Y/N)", tlbTestValidation: blnValidateStatus
		@strValidateComment		NVARCHAR(200) = NULL,	--"Comments", tlbTestValidation: strValidateComment
		@datValidationDate		DATETIME2 = NULL,		--"Date Validated", tlbTestValidation: datValidationDate
		@idfValidatedByPerson	BIGINT = NULL,			--"Validated By", tlbTestValidation: idfValidatedByPerson
		@RowAction				INT = NULL,				--(Row Action), Designation for record manipulation... Delete, Read Only, Insert
		@intRowStatus			INT	= NULL				--(Row Status), Designation to indicate a deleted record (1 = Deleted, 0 = Active)

		SELECT
				TOP 1
				@idfHuman = idfHuman
		FROM
				tlbHuman
		WHERE
				idfHumanActual = @idfHumanActual
		ORDER BY 
				AuditCreateDTM DESC

	DECLARE  @TestsTemp TABLE (	
				TestID					BIGINT NULL,
				SampleID				BIGINT NULL,
				strFieldBarcode			NVARCHAR(200) NULL,
				strBarcode				NVARCHAR(200) NULL,
				TestNameTypeID			BIGINT NULL,
				TestResultTypeID		BIGINT NULL,
				TestStatusTypeID		BIGINT NULL,
				TestCategoryTypeID		BIGINT NULL,
				idfsInterpretedStatus	BIGINT NULL,
				strInterpretedComment	NVARCHAR(200) NULL,
				datInterpretationDate	DATETIME2 NULL,
				idfInterpretedByPerson	BIGINT NULL,
				blnValidateStatus		INT NULL,
				strValidateComment		NVARCHAR(200) NULL,
				datValidationDate		DATETIME2 NULL,
				idfValidatedByPerson	BIGINT NULL,
				RowAction				INT NULL
	)
	
	INSERT INTO	@TestsTemp 
	SELECT * FROM OPENJSON(@TestsParameters) 
			WITH (
				TestID					BIGINT,
				SampleID				BIGINT,
				strFieldBarcode			NVARCHAR(200),
				strBarcode				NVARCHAR(200),
				TestNameTypeID			BIGINT,
				TestResultTypeID		BIGINT,
				TestStatusTypeID		BIGINT,
				TestCategoryTypeID		BIGINT,
				idfsInterpretedStatus	BIGINT,
				strInterpretedComment	NVARCHAR(200),
				datInterpretationDate	DATETIME2,
				idfInterpretedByPerson	BIGINT,
				blnValidateStatus		INT,
				strValidateComment		NVARCHAR(200),
				datValidationDate		DATETIME2,
				idfValidatedByPerson	BIGINT,
				RowAction				INT				
				);


	BEGIN TRY  
		WHILE EXISTS (SELECT * FROM @TestsTemp)
			BEGIN
				SELECT TOP 1
					@TestID = TestID,
					@SampleID = SampleID,
					@strFieldBarcode = strFieldBarcode,
					@strBarcode = strBarcode,
					@TestNameTypeID = TestNameTypeID,
					@TestResultTypeID = TestResultTypeID,
					@TestStatusTypeID = TestStatusTypeID,
					@TestCategoryTypeID = TestCategoryTypeID,
					@idfsInterpretedStatus = idfsInterpretedStatus,
					@strInterpretedComment = strInterpretedComment,
					@datInterpretationDate = datInterpretationDate,
					@idfInterpretedByPerson = idfInterpretedByPerson,
					@blnValidateStatus = blnValidateStatus,
					@strValidateComment = strValidateComment,
					@datValidationDate = datValidationDate,
					@idfValidatedByPerson = idfValidatedByPerson,
					@RowAction = RowAction			
				FROM @TestsTemp
				
				--Because of different App-Side usage, the following will force the upcoming record existence test to abide by the negative number test
				IF @RowAction = 1 --INSERT
				  BEGIN
					 SET @TestID = -1
				  END
print @TestID
print @SampleID
				IF NOT EXISTS(SELECT TOP 1 idfTesting FROM tlbTesting WHERE idfTesting = @TestID)
					BEGIN
						
						--New records will require information from the tlbMaterial table.
						--We use strFieldBarCode of this "Test" batch, to obtain the id of the previously added Samples (SampleID)
						if (@SampleID IS NULL)
							BEGIN
								SELECT 
									TOP 1
									@SampleID = idfMaterial
								FROM
									tlbMaterial
								WHERE
									strFieldBarcode = @strFieldBarcode
								ORDER BY idfMaterial desc
							END

						EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbTesting', @TestID OUTPUT;
						
						INSERT INTO tlbTesting (
							idfTesting,
							idfsTestName,
							idfsTestCategory,
							idfsTestResult,
							idfsTestStatus,
							idfsDiagnosis,
							idfMaterial,
							intRowStatus,
							rowguid,
							AuditCreateDTM,
							AuditCreateUser
							)
						VALUES (
							@TestID,
							@TestNameTypeID,
							@TestCategoryTypeID,
							@TestResultTypeID,
							@TestStatusTypeID,
							@idfsDiagnosis,
							@SampleID,
							0,
							NewID(),
							GETDATE(),
							@User
						)

						EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbTestValidation', @idfTestValidation OUTPUT;

						INSERT INTO tlbTestValidation (
							idfTestValidation,
							idfTesting,
							idfsDiagnosis,
							idfsInterpretedStatus,
							strInterpretedComment,
							datInterpretationDate,
							idfInterpretedByPerson,
							blnValidateStatus,
							strValidateComment,
							datValidationDate,
							idfValidatedByPerson,
							intRowStatus,
							rowguid,
							AuditCreateDTM,
							AuditCreateUser
						)
						VALUES(
							@idfTestValidation,
							@TestID,
							@idfsDiagnosis,
							@idfsInterpretedStatus,
							@strInterpretedComment,
							@datInterpretationDate,
							@idfInterpretedByPerson,
							@blnValidateStatus,
							@strValidateComment,
							@datValidationDate,
							@idfValidatedByPerson,
							0,
							NewID(),
							GETDATE(),
							@User
						)
					END
				ELSE
					BEGIN
						IF @RowAction = 3 --DELETE
							BEGIN
								SET @intRowStatus = 1
							END
						ELSE
							BEGIN
								SET @intRowStatus = 0
							END

						UPDATE dbo.tlbTesting
						SET 
							idfsTestName = @TestNameTypeID,
							idfsTestCategory = @TestCategoryTypeID,
							idfsTestResult = @TestResultTypeID,
							idfsTestStatus = @TestStatusTypeID,
							idfsDiagnosis = @idfsDiagnosis,
							idfMaterial = @SampleID,
							intRowStatus = @intRowStatus,
							AuditUpdateDTM = GETDATE(),
							AuditUpdateUser = @User
						WHERE	
							idfTesting = @TestID

						UPDATE tlbTestValidation
						SET
							idfsInterpretedStatus = @idfsInterpretedStatus,
							strInterpretedComment = @strInterpretedComment,
							datInterpretationDate = @datInterpretationDate,
							idfInterpretedByPerson = @idfInterpretedByPerson,
							blnValidateStatus = @blnValidateStatus,
							strValidateComment = @strValidateComment,
							datValidationDate = @datValidationDate,
							idfValidatedByPerson = @idfValidatedByPerson,
							AuditUpdateDTM = GETDATE(),
							AuditUpdateUser = @User
						WHERE
							idfTestValidation = @idfTestValidation

					END
				
					SET ROWCOUNT 1						
					DELETE FROM @TestsTemp
					SET ROWCOUNT 0
			END	

	END TRY
	BEGIN CATCH
		THROW;
		
	END CATCH
END
GO
PRINT N'Altering Procedure [Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail
-- Description: PrintedForm Veterinary Aggregate Report
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Srini Goli		09/04/2022	Initial release for Veterinary Aggregate Report.
/*

Case Type
HumanAggregateCase = 10102001
VetAggregateCase = 10102002
VetAggregateAction = 10102003

EXEC    [Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail]
        @LangID = N'en-US',
        @idfsAggrCaseType = 10102002,
        @idfAggrCaseList = '155564770001956;155564770001955'

*/
-- ================================================================================================
ALTER PROCEDURE [Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail] (
	@LangID AS NVARCHAR(50)
	,@idfsAggrCaseType AS  BIGINT= NULL
	,@idfAggrCaseList AS  NVARCHAR(MAX)= NULL
	)
AS
BEGIN
	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

	DECLARE @AggrCaseTable TABLE (
		[idfAggrCase] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpMatrix AS TABLE (
		intNumRow INT
		,idfAggrVetCaseMTX BIGINT
		,idfsDiagnosis BIGINT
		,idfsSpeciesType BIGINT
		,strDefault NVARCHAR(2000)
		,strOIECode NVARCHAR(100)
		)

   DECLARE @tempFlexForm TABLE (
		idfsParentSection BIGINT
		,idfsSection BIGINT
		,idfsParameter BIGINT
		,SectionName NVARCHAR(2000)
		,ParameterName NVARCHAR(500)
		,parameterType NVARCHAR(100)
		,idfsParameterType BIGINT
		,idfsReferenceType BIGINT
		,idfsEditor BIGINT
		,SectionOrder INT
		,ParameterOrder INT
		,blnGrid BIT
		,blnFixedRowSet BIT
		,idfsEditMode BIGINT
		,idfsFormTemplate BIGINT
		)

	DECLARE @observationsTable TABLE (
		[idfObservation] BIGINT,
		[idfVersion] BIGINT,
		[idfsCaseFormTemplate] BIGINT,
		[intRowNumber] INT
		)

	DECLARE @tmpActivityParameters TABLE (
		[idfActivityParameters] BIGINT,
		[idfObservation] BIGINT,
		[idfsFormTemplate] BIGINT,
		[idfsParameter] BIGINT,
		[idfsSection] BIGINT,
		[idfRow] BIGINT,
		--[intNumRow] INT,
		[Type] BIGINT,
		[varValue] BIGINT,
		--[strNameValue] NVARCHAR(200),
		[numRow] INT,
		--[FakeField ] INT,
		[ParameterType]  BIGINT
		)

	DECLARE @tmpSpeciesList TABLE (
		[idfBaseReference] BIGINT,
		strDefault NVARCHAR(2000),
		strSpecies NVARCHAR(100),
		[intRowNumber] INT
		--idfsReferenceType BIGINT
		)

	BEGIN TRY
			BEGIN

			--Get Selected Agg Cases
			INSERT INTO @AggrCaseTable (
					[idfAggrCase],
					[intRowNumber]
					)
				SELECT CAST([Value] AS BIGINT),
					ROW_NUMBER() OVER (
						ORDER BY [Value]
						)
				FROM [dbo].[FN_GBL_SYS_SplitList](@idfAggrCaseList, NULL, NULL)

				--Get this SQl from [dbo].[USP_AGG_CASE_GETDETAIL]
				SELECT 
					a.idfCaseObservation
					,CaseObs.idfsFormTemplate AS idfsCaseFormTemplate
					,a.idfVersion
				INTO #tmpDetails
				FROM dbo.tlbAggrCase a	
				LEFT JOIN dbo.tlbObservation CaseObs ON idfCaseObservation = CaseObs.idfObservation
				WHERE a.intRowStatus = 0
				AND a.idfAggrCase IN (SELECT idfAggrCase FROM @AggrCaseTable)
				--AND (@idfAggrCase IS NULL OR a.idfAggrCase = @idfAggrCase)
				--	AND (
				--		CASE 
				--			WHEN @idfsAggrCaseType IS NULL
				--				THEN 1
				--			WHEN ISNULL(a.idfsAggrCaseType, '') = @idfsAggrCaseType
				--				THEN 1
				--			ELSE 0
				--			END = 1
				--		)
				--	AND (
				--		CASE 
				--			WHEN @idfAggrCase IS NULL
				--				THEN 1
				--			WHEN ISNULL(a.idfAggrCase, '') = @idfAggrCase
				--				THEN 1
				--			ELSE 0
				--			END = 1
				--		);
				
				DECLARE @idfsFormTemplate BIGINT,
						@idfVersion BIGINT

				INSERT INTO @observationsTable (
					[idfObservation],
					[idfVersion],
					[idfsCaseFormTemplate],
					[intRowNumber]
					)
				SELECT [idfCaseObservation],
					[idfVersion],
					[idfsCaseFormTemplate],
					ROW_NUMBER() OVER (
						ORDER BY [idfCaseObservation]
						)
				FROM #tmpDetails

				SELECT @idfsFormTemplate=idfsCaseFormTemplate, 
						@idfVersion= idfVersion
				FROM @observationsTable
				--SELECT * FROM @observationsTable

				--Get this SQL from USP_CONF_ADMIN_AggregateVetCaseMatrixReport_GET -- dbo.USP_CONF_ADMIN_AggregateHumanCaseMatrixReport_GET
				INSERT INTO @tmpMatrix
				SELECT	 
					mtx.intNumRow as intNumRow,
					mtx.idfAggrVetCaseMTX,
					mtx.idfsDiagnosis,
					mtx.idfsSpeciesType,
					D.name AS strDefault,
					D.strOIECode

				FROM dbo.tlbAggrVetCaseMTX mtx
				INNER JOIN dbo.FN_GBL_DiagnosisRepair(@LangID, 96, 10020002) D ON D.idfsDiagnosis = mtx.idfsDiagnosis  -- 2 = Human, use 10020002 for Aggregate cases

				WHERE mtx.intRowStatus = 0 AND  mtx.idfVersion = @idfVersion
				--ORDER BY mtx.intNumRow ASC

				--SpicesList
				INSERT INTO @tmpSpeciesList
				EXEC dbo.USP_CONF_GetSpeciesList_GET 
						@idfsBaseReference= 19000086,
						@intHACode=96,
						@strLanguageID=@LangID --@idfVersion=19000086
				
				--Get Flex Form header details
				INSERT INTO @tempFlexForm
				EXEC [dbo].[USP_ADMIN_FF_FlexForm_Get] 
						@LangID =@LangID, 
						@idfsDiagnosis= NULL, 
						@idfsFormType = 10034012, 
						@idfsFormTemplate=@idfsFormTemplate

				--Get Activity Parameters
				--INSERT INTO @tmpActivityParameters
				--EXEC dbo.USP_ADMIN_FF_ActivityParameters_GET
				--		@observationList = @observationList, 
				--		@LangID = @LangID
				INSERT INTO @tmpActivityParameters  (
						[idfActivityParameters],
						[idfObservation],
						[idfsFormTemplate],
						[idfsParameter],
						[idfsSection],
						[idfRow],
						[varValue],
						[Type],
						[numRow],
						[ParameterType]  
				)
				SELECT 
					AP.idfActivityParameters,
					AP.idfObservation,
					O.idfsFormTemplate,
					AP.idfsParameter,
					P.idfsSection,
					AP.idfRow,
					CAST(AP.varValue AS NVARCHAR(MAX)),
					dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
					ROW_NUMBER() OVER (
						PARTITION BY AP.idfObservation ORDER BY AP.idfRow
						), 
					P.idfsParameterType
				FROM dbo.tlbActivityParameters AP
				LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
				INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
				WHERE AP.idfObservation IN (SELECT idfObservation FROM @observationsTable)
				AND AP.intRowStatus = 0
				AND O.intRowStatus = 0
				ORDER BY 
					AP.idfObservation,
					P.idfsSection,
					AP.idfRow

				--Report
				SELECT	ff.ParameterName
						,sl.strSpecies
						,ff.idfsParameter
						,ff.ParameterOrder
						,m.idfsDiagnosis
						,m.strDefault
						,m.strOIECode
						,m.intNumRow
						,CAST(ap.varValue as BIGINT) as varValue--ap.idfRow,m.idfAggrHumanCaseMTX as idfRow
				FROM @tempFlexForm ff 
				CROSS JOIN @tmpMatrix m 
				LEFT JOIN @tmpActivityParameters ap ON ff.idfsParameter=ap.idfsParameter and m.idfAggrVetCaseMTX=ap.idfRow
				LEFT JOIN @tmpSpeciesList sl ON sl.idfBaseReference=m.idfsSpeciesType
				ORDER BY intNumRow

			END

		DROP TABLE IF EXISTS #tmpDetails;

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT = 1
			ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Procedure [Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Header]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Header
-- Description: PrintedForm Veterinary Aggregate Report
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Srini Goli		09/04/2022	Initial release for Veterinary Aggregate Report.
--
-- Testing code:
--
-- Legends
/*
	Case Type
	HumanAggregateCase = 10102001
	VetAggregateCase = 10102002
	VetAggregateAction = 10102003

	TEST Code

	EXEC Report.USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Header 'en-US', @idfsAggrCaseType=10102002, @idfAggrCaseList = '155564770001956;155564770001955'

*/
-- ================================================================================================
CREATE PROCEDURE [Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Header] (
	@LangID AS NVARCHAR(50)
	,@idfsAggrCaseType AS BIGINT = NULL
	,@idfAggrCaseList AS  NVARCHAR(MAX)= NULL
	)
AS
BEGIN
DECLARE @returnCode INT = 0;
DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

DECLARE @AggrCaseTable TABLE (
	[idfAggrCase] BIGINT,
	[intRowNumber] INT
	)

	BEGIN TRY
		--Get Selected Agg Cases
		INSERT INTO @AggrCaseTable (
				[idfAggrCase],
				[intRowNumber]
				)
		SELECT CAST([Value] AS BIGINT),
			ROW_NUMBER() OVER (
				ORDER BY [Value]
				)
		FROM [dbo].[FN_GBL_SYS_SplitList](@idfAggrCaseList, NULL, NULL)

		--Get the necessary columns from [dbo].[USP_AGG_CASE_GETDETAIL]
		SELECT datStartDate
			,datFinishDate
			,strCaseID
			,strRegion
			,strRayon
			,strSettlement
			,CONCAT(ISNULL(strCountry,''),IIF(ISNULL(strRegion,'')!='',', ',''),ISNULL(strRegion,''),IIF(ISNULL(strRayon,'')!='',', ',''),ISNULL(strRayon,''),IIF(ISNULL(strSettlement,'')!='',', ',''),ISNULL(strSettlement,'')) As strLocation
		FROM
		(
		SELECT 
			a.datStartDate
			,a.datFinishDate
			,a.strCaseID
			--,ISNULL(Country.idfsReference, '') AS idfsCountry
			,ISNULL(Country.[name], '') AS strCountry
			--,ISNULL(Region.idfsReference, '') AS idfsRegion
			,ISNULL(Region.[name], '') AS strRegion
			--,ISNULL(Rayon.idfsReference, '') AS idfsRayon
			,ISNULL(Rayon.[name], '') AS strRayon
			--,ISNULL(Settlement.idfsReference, '') AS idfsSettlement
			,ISNULL(Settlement.[name], '') AS strSettlement
		FROM dbo.tlbAggrCase a
		LEFT JOIN dbo.tlbOffice RBO ON RBO.idfOffice = a.idfReceivedByOffice
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) RBON ON RBON.idfsReference = RBO.idfsOfficeAbbreviation

		LEFT JOIN dbo.tlbOffice EBO ON EBO.idfOffice = a.idfEnteredByOffice
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) EBON ON EBON.idfsReference = EBO.idfsOfficeAbbreviation

		LEFT JOIN dbo.tlbOffice SBO ON SBO.idfOffice = a.idfSentByOffice
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) SBON ON SBON.idfsReference = SBO.idfsOfficeAbbreviation
		
		LEFT JOIN dbo.tlbPerson ReceivedByPerson ON a.idfReceivedByPerson = ReceivedByPerson.idfPerson
		LEFT JOIN dbo.tlbPerson EnteredByPerson ON a.idfEnteredByPerson = EnteredByPerson.idfPerson
		LEFT JOIN dbo.tlbPerson SentByPerson ON a.idfSentByPerson = SentByPerson.idfPerson
		
		INNER JOIN dbo.gisLocation AUL ON AUL.idfsLocation = a.idfsAdministrativeUnit
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001) AS Country ON AUL.node.IsDescendantOf(Country.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003) AS Region ON AUL.node.IsDescendantOf(Region.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000002) AS Rayon ON AUL.node.IsDescendantOf(Rayon.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000004) AS Settlement ON AUL.node.IsDescendantOf(Settlement.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS LocType ON LocType.idfsReference = Settlement.idfsType
		
		LEFT JOIN dbo.trtStringNameTranslation Period ON Period.idfsBaseReference = CASE 
				WHEN DATEDIFF(DAY, a.datStartDate, a.datFinishDate) = 0
					THEN 10091002 /*day*/
				WHEN DATEDIFF(DAY, a.datStartDate, a.datFinishDate) = 6
					THEN 10091004 /*week - use datediff with day because datediff with week will return incorrect result if first day of week in country differ from sunday*/
				WHEN DATEDIFF(MONTH, a.datStartDate, a.datFinishDate) = 0
					THEN 10091001 /*month*/
				WHEN DATEDIFF(QUARTER, a.datStartDate, a.datFinishDate) = 0
					THEN 10091003 /*quarter*/
				WHEN DATEDIFF(YEAR, a.datStartDate, a.datFinishDate) = 0
					THEN 10091005 /*year*/
				END
			AND Period.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LangID)
		--LEFT JOIN dbo.tlbObservation CaseObs ON idfCaseObservation = CaseObs.idfObservation
		--LEFT JOIN dbo.tlbObservation DiagnosticObs ON idfDiagnosticObservation = DiagnosticObs.idfObservation
		--LEFT JOIN dbo.tlbObservation ProphylacticObs ON idfProphylacticObservation = ProphylacticObs.idfObservation
		--LEFT JOIN dbo.tlbObservation SanitaryObs ON idfSanitaryObservation = SanitaryObs.idfObservation
		--LEFT JOIN dbo.FN_GBL_Institution(@LangID) AS organizationAdminUnit ON a.idfOffice = organizationAdminUnit.idfOffice
		WHERE a.intRowStatus = 0
		AND a.idfAggrCase IN (SELECT idfAggrCase FROM @AggrCaseTable)
		--AND (@idfAggrCase IS NULL OR a.idfAggrCase = @idfAggrCase)
		--	AND (
		--		CASE 
		--			WHEN @idfsAggrCaseType IS NULL
		--				THEN 1
		--			WHEN ISNULL(a.idfsAggrCaseType, '') = @idfsAggrCaseType
		--				THEN 1
		--			ELSE 0
		--			END = 1
		--		)
		--	AND (
		--		CASE 
		--			WHEN @idfAggrCase IS NULL
		--				THEN 1
		--			WHEN ISNULL(a.idfAggrCase, '') = @idfAggrCase
		--				THEN 1
		--			ELSE 0
		--			END = 1
		--		) 
			) A;


	END TRY

	BEGIN CATCH
		THROW;
	END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USSP_OMM_HUMAN_SAMPLES_SET]...';


GO
--******************************************************************************************************************************
-- Name 				: USSP_OMM_HUMAN_SAMPLES_SET
-- Description			: add update delete Human Disease Report Samples
--          
-- Author               : JWJ
-- Revision History
--	Name			 Date		 Change Detail
--	--------------	 ----------	 -----------------------------------------------------------------------------------------------
--	Doug Albanese	 07/09/2019	 Created
--	Doug Albanese	 04/27/2022	 Refactored to include relative fields only
--	Doug Albanese	 10/04/2022	 Made corrections for RowAction to use the new numbering system
--******************************************************************************************************************************

ALTER PROCEDURE [dbo].[USSP_OMM_HUMAN_SAMPLES_SET]
	@idfHumanActual					BIGINT,
	@idfHumanCase					BIGINT,
	@SamplesParameters				NVARCHAR(MAX) = NULL,
	@TestsParameters				NVARCHAR(MAX) = NULL,
	@idfsFinalDiagnosis				BIGINT = NULL,
	@User							NVARCHAR(100) = NULL
AS
Begin
	SET NOCOUNT ON;

	DECLARE @idfMaterialTemp		BIGINT = NULL /*Temporary transfer when the insert occurs so that NEW tests are updated with the correct id*/

	/*This section is a copy from the USSP_OMM_HUMAN_TESTS_SET so that the idfMaterial, when created as a new ID, can be tied to the tests associated with it.*/
	DECLARE
		@idfHuman				BIGINT = NULL,
		@idfTesting				BIGINT = NULL,			--(Test Identity), tlbTesting: idfTesting
		@idfTestValidation		BIGINT = NULL,
		@idfMaterial			BIGINT = NULL,			--(Sample Identity), tlbMaterial: idfMaterial			
		@idfsSampleType			BIGINT = NULL,			--"Sample Type", tlbMaterial: idfsSampleType
		@strFieldBarcode		NVARCHAR(200) = NULL,	--"Field Sample ID", tlbMaterial: strFieldBarcode
		@strBarcode				NVARCHAR(200) = NULL,	--"Lab Sample ID", tlbMaterial: strBarCode
		@idfsTestName			BIGINT = NULL,			--"Test Name", tlbTesting: idfsTestName
		@idfsTestResult			BIGINT = NULL,			--"Test Result", tlbTesting: idfsTestResult
		@idfsTestStatus			BIGINT = NULL,			--"Test Status", tlbTesting: idfsTestStatus
		@datConcludedDate		DATETIME2 = NULL,		--"Test Name", tlbTesting: idfsTestName
		@idfsTestCategory		BIGINT = NULL,			--"Test Category", tlbTesting: idfsTestName
		@idfsInterpretedStatus	BIGINT = NULL,			--"Rule In / Rule Out", tlbTestValidation: idfsInterpretedStatus
		@strInterpretedComment	NVARCHAR(200) = NULL,	--"Comments", tlbTestValidation: strInterpretedComment
		@datInterpretationDate	DATETIME2 = NULL,		--"Date Interpreted", tlbTestValidation: datInterpretationDate
		@idfInterpretedByPerson	BIGINT = NULL,			--"Interpreted By", tlbTestValidation: idfInterpretedByPerson
		@blnValidateStatus		INT = NULL,				--"Validated (Y/N)", tlbTestValidation: blnValidateStatus
		@strValidateComment		NVARCHAR(200) = NULL,	--"Comments", tlbTestValidation: strValidateComment
		@datValidationDate		DATETIME2 = NULL,		--"Date Validated", tlbTestValidation: datValidationDate
		@idfValidatedByPerson	BIGINT = NULL,			--"Validated By", tlbTestValidation: idfValidatedByPerson
		@RowAction				INT = NULL,				--(Row Action), Designation for record manipulation... Delete, Read Only, Insert
		@intRowStatus			INT	= NULL				--(Row Status), Designation to indicate a deleted record (1 = Deleted, 0 = Active)

		SELECT
				TOP 1
				@idfHuman = idfHuman
		FROM
				tlbHuman
		WHERE
				idfHumanActual = @idfHumanActual
		ORDER BY 
				AuditCreateDTM DESC
		
		DECLARE  @TestsTemp TABLE (	
				TestID					BIGINT NULL, --
				SampleID				BIGINT NULL, --
				strFieldBarcode			NVARCHAR(200) NULL,
				strBarcode				NVARCHAR(200) NULL,
				TestNameTypeID			BIGINT NULL, --
				TestResultTypeID		BIGINT NULL, --
				TestStatusTypeID		BIGINT NULL,
				TestCategoryTypeID		BIGINT NULL,
				idfsInterpretedStatus	BIGINT NULL,
				strInterpretedComment	NVARCHAR(200) NULL,
				datInterpretationDate	DATETIME2 NULL,
				idfInterpretedByPerson	BIGINT NULL,
				blnValidateStatus		INT NULL,
				strValidateComment		NVARCHAR(200) NULL,
				datValidationDate		DATETIME2 NULL,
				idfValidatedByPerson	BIGINT NULL,
				RowAction				INT NULL
	)
	
	INSERT INTO	@TestsTemp 
	SELECT * FROM OPENJSON(@TestsParameters) 
			WITH (
				TestID					BIGINT, --
				SampleID				BIGINT, --
				strFieldBarcode			NVARCHAR(200),
				strBarcode				NVARCHAR(200),
				TestNameTypeID			BIGINT, --
				TestResultTypeID		BIGINT, --
				TestStatusTypeID		BIGINT, --
				TestCategoryTypeID		BIGINT,
				idfsInterpretedStatus	BIGINT,
				strInterpretedComment	NVARCHAR(200),
				datInterpretationDate	DATETIME2,
				idfInterpretedByPerson	BIGINT,
				blnValidateStatus		INT,
				strValidateComment		NVARCHAR(200),
				datValidationDate		DATETIME2,
				idfValidatedByPerson	BIGINT,
				RowAction				INT				
				);

	DECLARE
		@datFieldCollectionDate		DATETIME2 = NULL,
		@CollectedByOffice			NVARCHAR(200) = NULL,
		@idfFieldCollectedByOffice	BIGINT = NULL,
		@CollectedByPerson			NVARCHAR(200) = NULL,
		@idfFieldCollectedByPerson	BIGINT = NULL,
		@datFieldSentDate			DATETIME2 = NULL,
		@idfSendToOffice			BIGINT = NULL,
		@SentToOffice				NVARCHAR(200) = NULL,
		@strNote					NVARCHAR(500) = NULL
	
		SELECT
				TOP 1
				@idfHuman = idfHuman
		FROM
				tlbHuman
		WHERE
				idfHumanActual = @idfHumanActual
		ORDER BY 
				AuditCreateDTM DESC
		
	DECLARE  @SamplesTemp TABLE (	
			SampleID					BIGINT,
			SampleTypeID				BIGINT,
			EIDSSLocalOrFieldSampleID	NVARCHAR(200),
			CollectionDate				DATETIME2,
			CollectedByOrganizationID	BIGINT,
			CollectedByPersonID			BIGINT,
			SentDate					DATETIME2,
			SentToOrganizationID		BIGINT,
			Comments					NVARCHAR(500),
			RowStatus					INT,
			RowAction					INT			
	)
	
	INSERT INTO	@SamplesTemp 
	SELECT * FROM OPENJSON(@SamplesParameters) 
			WITH (
					SampleID					BIGINT,
					SampleTypeID				BIGINT,
					EIDSSLocalOrFieldSampleID	NVARCHAR(200),
					CollectionDate				DATETIME2,
					CollectedByOrganizationID	BIGINT,
					CollectedByPersonID			BIGINT,
					SentDate					DATETIME2,
					SentToOrganizationID		BIGINT,
					Comments					NVARCHAR(500),
					RowStatus					INT,
					RowAction					INT	
				);
	BEGIN TRY  
		WHILE EXISTS (SELECT * FROM @SamplesTemp)
			BEGIN
				SELECT TOP 1
					@idfMaterial = SampleID,
					@idfMaterialTemp = @idfMaterial,
					@idfsSampleType = SampleTypeID,
					@strFieldBarcode = EIDSSLocalOrFieldSampleID,
					@datFieldCollectionDate = CollectionDate,
					@idfFieldCollectedByOffice = CollectedByOrganizationID,
					@idfFieldCollectedByPerson = CollectedByPersonID,
					@datFieldSentDate = SentDate,
					@idfSendToOffice = SentToOrganizationID,
					@strNote = Comments,
					@intRowStatus = RowStatus,
					@RowAction = RowAction					
				FROM @SamplesTemp

				--Because of different App-Side usage, the following will force the upcoming record existence test to abide by the negative number test
				IF @RowAction = 1 --INSERT
				  BEGIN
					 SET @idfMaterial = -1
				  END

				IF NOT EXISTS(SELECT TOP 1 idfMaterial FROM tlbMaterial WHERE idfMaterial = @idfMaterial)
					BEGIN
						EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbMaterial', @idfMaterial OUTPUT;

						/*Update any associated new Test with the  new Sample being inserted*/
						UPDATE @TestsTemp
						SET SampleID = @idfMaterial
						WHERE SampleID = @idfMaterialTemp

						INSERT INTO		dbo.tlbMaterial
						(						
							idfHumanCase,
							idfHuman,
							idfMaterial,
							idfsSampleType,
							strFieldBarcode,
							datFieldCollectionDate,
							idfFieldCollectedByOffice,
							idfFieldCollectedByPerson,
							datFieldSentDate,
							idfSendToOffice,
							strNote,
							intRowStatus,
							AuditCreateUser,
							AuditCreateDTM
						)
						VALUES
						(					
							@idfHumanCase,
							@idfHuman,
							@idfMaterial,
							@idfsSampleType,
							@strFieldBarcode,
							@datFieldCollectionDate,
							@idfFieldCollectedByOffice,
							@idfFieldCollectedByPerson,
							@datFieldSentDate,
							@idfSendToOffice,
							@strNote,
							@intRowStatus,
							@User,
							GETDATE()
						)
					END
				ELSE
					BEGIN
						IF @RowAction = 3 --DELETE
							BEGIN
								SET @intRowStatus = 1
							END
						ELSE
							BEGIN
								SET @intRowStatus = 0
							END

						UPDATE dbo.tlbMaterial
						SET 
							idfsSampleType = @idfsSampleType,
							strFieldBarcode = @strFieldBarcode,
							datFieldCollectionDate = @datFieldCollectionDate,
							idfFieldCollectedByOffice = @idfFieldCollectedByOffice,
							idfFieldCollectedByPerson = @idfFieldCollectedByPerson,
							datFieldSentDate = @datFieldSentDate,
							idfSendToOffice = @idfSendToOffice,
							strNote = @strNote,
							intRowStatus = @intRowStatus,
							AuditUpdateUser = @User,
							AuditUpdateDTM = GETDATE()
						WHERE	
							idfMaterial = @idfMaterial
					END
					
					SET ROWCOUNT 1						
					DELETE FROM @SamplesTemp
					SET ROWCOUNT 0
			END	

		SET @TestsParameters =
			(SELECT
				TestID,
				SampleID,
				strFieldBarcode,
				strBarcode,
				TestNameTypeID,
				TestResultTypeID,
				TestStatusTypeID,
				TestCategoryTypeID,
				idfsInterpretedStatus,
				strInterpretedComment,
				datInterpretationDate,
				idfInterpretedByPerson,
				blnValidateStatus,
				strValidateComment,
				datValidationDate,
				idfValidatedByPerson,
				RowAction
			FROM
				@TestsTemp
			FOR JSON PATH)
		If @TestsParameters IS NOT NULL
			EXEC USSP_OMM_HUMAN_TESTS_SET @idfsFinalDiagnosis, @idfHumanActual, @idfHumanCase,@TestsParameters, @User = @User;

	END TRY
	BEGIN CATCH
		THROW;
		
	END CATCH
END
GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_HUMAN_DISEASE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_HUMAN_DISEASE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_Case_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_Case_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USSP_OMM_CONVERT_CONTACT_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_OMM_CONVERT_CONTACT_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_Contact_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_Contact_Set]';


GO
PRINT N'Update complete.';


GO
