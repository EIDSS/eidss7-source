/*


This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_Copy_Template]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_Copy_Template
-- Description: Copies the base structure of a template and its components to prevent historical damage.
--          
-- Revision History:
-- Name				Date		Change
-- ---------------	----------	--------------------------------------------------------------------
-- Doug Albanese	01/12/2021	Initial release for use by other SPs.
-- Doug Albanese	01/19/2021	Fixed the return to provide the new Form Template id
-- Doug Albanese	01/21/2021	Change of business rule to allow older templates to still be modified.
-- Doug Albanese	01/21/2021	Disabled UNI for the old template being copied.
-- Doug Albanese	07/02/2021	Altered the procedure to ignore blank idfsSections
-- Doug Albanese	07/06/2021	Refactored for use with a user initiated copy.
-- Doug Albanese	07/09/2021	Added language parameter
-- Doug Albanese	07/09/2021	Removed supression
-- Doug Albanese	07/12/2021	Corrected return aliases
-- Doug Albanese	07/12/2021	Corrections to remove copying of Sections and Parameters, and replace with association to the new template
-- Doug Albanese	07/14/2021	Turning off content to make this process a successor procedure only
-- Doug Albanese	07/14/2021	Created translation for SP generated "Copy"
-- Doug Albanese	07/14/2021	Added ordering from original template
-- Doug Albanese	07/14/2021	Added Edit Mode for Mandatory/Ordinary settings
--	Doug Albanese	05/12/2022	Adjusting for copying to another formtype
--	Doug Albanese	06/02/2022	Changed the functioncall parameter for USP_ADMIN_FF_ParameterTemplate_SET, to work with USP_ADMIN_FF_ParameterDesignOptions_SET
--	Doug Albanese	06/07/2022	Changed USP_ADMIN_FF_ParameterTemplate_SET, to call as a function
--	Doug Albanese	06/08/2022	Corrected the Determinants value copy. Was in the wrong place
--	Doug Albanese	06/10/2022	Making use of USP_ADMIN_FF_ParameterTemplateForCopy_SET, instead of USP_ADMIN_FF_ParameterTemplate_SET for EF Generation purposes
--								Realigned call to USP_Admin_FF_Rule_GetDetails for new changes
--	Doug Albanese	06/30/2022	Correcting the process of copying Determinants
--	Doug Albanese	07/01/2022	Removed rollback
--	Doug Albanese	07/21/2022	Re-aligned to work with changes made on USP_ADMIN_FF_Template_SET
--	Doug Albanese	08/04/2022	Added a secondary "intRowStatus"
--	Doug Albanese	08/04/2022	Corrected a call to USP_ADMIN_FF_Determinant_SET, because it was remotely set for Event logging.
--	Doug Albanese	08/04/2022	Corrected "Template Details" to coalesce the blnUNI value, when it was null
--  Doug Albanese	01/26/2023	Correction to allow Copying of templates to create Outbreak assigned flex forms.
-- Doug Albanese	03/22/2023	Changed SP to make use of UserId, instead of User...so that event logging will not break.
-- Doug Albanese	04/14/2023	Changed size of "Name" fields from 200 to 2000
-- Doug Albanese   04/25/2023	Added SourceSystemNameID and SourceSystemKeyValue to the "Rule Constant" insert statement
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_Copy_Template] (
	@LangId									NVARCHAR(50),
	@idfsFormTemplate						BIGINT,
	@User									NVARCHAR(50),
	@idfsSite								BIGINT = NULL,
	@idfsNewFormType						BIGINT = NULL
)
AS
BEGIN
	DECLARE @returnCode						INT = 0;
	DECLARE @returnMsg						NVARCHAR(MAX) = 'SUCCESS';
	
	Declare @SupressSelect TABLE
	(	
		retrunCode							INT,
		returnMessage						VARCHAR(200)
	) 

	DECLARE @Supress_USP_ADMIN_FF_Parameters_SET TABLE (
		ReturnCode							INT,
		ReturnMessage						VARCHAR(200),
		idfsParameter						BIGINT,
		idfsParameterCaption				BIGINT
	)
	
	DECLARE @Supress_USP_ADMIN_FF_ParameterTemplate_SET TABLE(
		ReturnData							VARCHAR(200)
	)

	DECLARE @iObservations					INT = 0


	BEGIN TRY
		
		--Changes that have the potential to trigger copying of a template
		--Template details
		--Parameter addition, moving, or deleting from a template
		--Section addition, moving, or deleting from a template
		--Parameter Editor changes
		--Section Editor Changes
		--Updating "Mandatory" status
		--Adding, Editing, or Removing a Rule

		DECLARE @FormTemplate				NVARCHAR(2000)
		DECLARE @NationalName				NVARCHAR(2000)
		DECLARE @NationalLongName			NVARCHAR(2000)
		DECLARE @idfsFormType				BIGINT
		DECLARE @strNote					NVARCHAR(MAX)
		DECLARE @blnUNI						BIT

		DECLARE @idfsSection				BIGINT
		DECLARE @idfsParameter				BIGINT
		DECLARE @idfsParentSection			BIGINT 
		DECLARE @DefaultName				NVARCHAR(2000)
		DECLARE @DefaultLongName			NVARCHAR(2000)
		DECLARE @intOrder					INT
		DECLARE @blnGrid					BIT
		DECLARE @blnFixedRowset				BIT
		DECLARE @idfsMatrixType				BIGINT
		DECLARE @intRowStatus				INT
		DECLARE @idfsSectionNew				BIGINT
		DECLARE @idfsFormTemplateNew		BIGINT

		DECLARE @idfsParameterNew			BIGINT
		DECLARE	@idfsParameterCaption		BIGINT
		DECLARE @idfsParameterType			BIGINT
		DECLARE @idfsEditor					BIGINT
		DECLARE @intHACode					INT
		DECLARE @langid_int					BIGINT
		DECLARE @idfsRule					BIGINT
		DECLARE @idfsEditMode				BIGINT

		DECLARE @idfsRuleMessage			BIGINT
		DECLARE @idfsRuleFunction			BIGINT
		DECLARE @idfsRuleAction				BIGINT
		DECLARE	@idfsFunctionParameter		BIGINT
		DECLARE @idfsActionParameter		BIGINT
		DECLARE	@idfsFunctionParameterNew	BIGINT
		DECLARE @idfsActionParameterNew		BIGINT
		DECLARE @intNumberOfParameters		INT
		DECLARE @idfsCheckPoint				BIGINT
		DECLARE @MessageText				NVARCHAR(MAX)
		DECLARE @MessageNationalText		NVARCHAR(MAX)
		DECLARE @blnNot						BIT
		DECLARE	@idfsRuleNew				BIGINT
		DECLARE	@strFillValue				NVARCHAR(MAX)
		DECLARE	@strCompareValue			NVARCHAR(MAX)

		DECLARE @DefaultRuleName			NVARCHAR(MAX)
		DECLARE @NationalRuleName			NVARCHAR(MAX)
		DECLARE @DefaultRuleMessage			NVARCHAR(MAX)
		DECLARE @NationalRuleMessage		NVARCHAR(MAX)
		DECLARE @strActionParameters		NVARCHAR(MAX)

		DECLARE @idfRuleConstant			BIGINT
		DECLARE @idfRuleConstantNew			BIGINT
		DECLARE @varConstant				SQL_VARIANT

		DECLARE @idfDeterminantValue		BIGINT
		DECLARE @idfsBaseReference			BIGINT
		DECLARE @idfsGISBaseReference		BIGINT

		DECLARE @strResourceString			NVARCHAR(200) = 'Copy'
		DECLARE @UserId						 BIGINT

		SET NOCOUNT ON

		SET @langid_int = dbo.FN_GBL_LanguageCode_GET(@LangID);

		SELECT @UserId = userInfo.UserId,
		  @idfsSite = userInfo.SiteId
		   FROM dbo.FN_UserSiteInformation(@User) userInfo;

		
		--Are any observations made for the given active (intRowStatus = 0) template?
		--SELECT
		--	@iObservations = COUNT(idfObservation)
		--FROM
		--	tlbObservation O
		--INNER JOIN ffFormTemplate FT
		--	ON FT.idfsFormTemplate = O.idfsFormTemplate
		--	AND FT.intRowStatus = 0
		--WHERE
		--	O.idfsFormTemplate = @idfsFormTemplate

		--IF @iObservations > 0
		--	BEGIN
				----------------------------------------------------------------------------------------
				--Create table structures for collecting up items to enumerate and tag,				  --
				--and capture EXEC results                                                            --
				----------------------------------------------------------------------------------------
				DECLARE @Sections TABLE (
					idfsSection			BIGINT NULL,
					idfsSectionNew		BIGINT NULL
				)

				DECLARE @Parameters TABLE (
					idfsParameter		BIGINT,
					idfsParameterNew	BIGINT,
					idfsSection			BIGINT,
					idfsSectionNew		BIGINT
				)

				DECLARE @ActionParameters TABLE (
					idfsParameter		BIGINT
				)

				DECLARE @FunctionParameters TABLE (
					idfsParameter		BIGINT
				)

				DECLARE @TemplateDetails TABLE (
					idfsFormTemplate	BIGINT,
					FormTemplate		NVARCHAR(2000),
					DefaultName			NVARCHAR(2000),
					NationalName		NVARCHAR(2000),
					idfsFormType		BIGINT,
					strNote				NVARCHAR(MAX),
					blnUNI				BIT
				)

				DECLARE @SectionSetResults TABLE (
					returnCode			BIGINT,
					returnMsg			NVARCHAR(MAX),
					idfsSection			BIGINT
				)

				DECLARE @SectionDetailResults TABLE (
					idfsParentSection	BIGINT,
					idfsFormType		BIGINT,
					intOrder			INT,
					blnGrid				BIT,
					blnFixedRowset		BIT,
					idfsMatrixType		BIGINT,
					strDefault			NVARCHAR(MAX),
					NationalName		NVARCHAR(MAX)
				)

				DECLARE @TemplateDetailsResults TABLE (
					returnCode			BIGINT,
					returnMsg			NVARCHAR(MAX),
					idfsFormTemplate	BIGINT
				)

				DECLARE	@Rules	TABLE (
					idfsRule			BIGINT,
					idfsRuleNew			BIGINT
				)

				DECLARE @RuleDetailResults TABLE (
					idfsRule				BIGINT,
					defaultRuleName			NVARCHAR(MAX),
					RuleName				NVARCHAR(MAX),
					idfsRuleMessage			BIGINT,
					defaultRuleMessage		NVARCHAR(MAX),
					RuleMessage				NVARCHAR(MAX),
					idfsCheckPoint			BIGINT,
					idfsRuleFunction		BIGINT,
					blnNot					BIT,
					idfsRuleAction			BIGINT,
					strActionParameters		NVARCHAR(MAX),
					idfsFunctionParameter	BIGINT,
					FillValue				NVARCHAR(MAX)
				)

				DECLARE @RuleConstants TABLE (
					idfRuleConstant		BIGINT,
					idfsRule			BIGINT,
					varConstant			SQL_VARIANT
				)

				DECLARE @Functions TABLE (
					idfParameterForFunction	BIGINT,
					idfsParameter			BIGINT,
					idfsFormTemplate		BIGINT,
					idfsRule				BIGINT,
					intOrder				INT,
					strCompareValue			NVARCHAR(MAX)
				)

				DECLARE @Actions TABLE (
					idfParameterForAction	BIGINT,
					idfsParameter			BIGINT,
					idfsFormTemplate		BIGINT,
					idfsRuleAction			BIGINT,
					idfsRule				BIGINT,
					strFillValue			NVARCHAR(MAX)
				)

				DECLARE @GlobalReference TABLE (
					idfs					BIGINT,
					idfsNew					BIGINT
				)

				DECLARE @Determinants TABLE (
					idfDeterminantValue		BIGINT,
					idfsBaseReference		BIGINT
				)

				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Make a copy of the base Template													  --
				----------------------------------------------------------------------------------------
				INSERT INTO @TemplateDetails
				EXEC USP_ADMIN_FF_Template_GetDetail @LangID = @LangId, @idfsFormTemplate = @idfsFormTemplate

				SELECT
					@idfsFormTemplate = idfsFormTemplate,
					@FormTemplate = FormTemplate,
					@DefaultName = DefaultName,
					@NationalName = NationalName,
					@idfsFormType = idfsFormType,
					@strNote = strNote,
					@blnUNI = COALESCE(blnUNI,0)
				FROM
					@TemplateDetails

				if @idfsNewFormType IS NOT NULL
					BEGIN
						--if NOT EXISTS(SELECT TOP 1 idfsFormTemplate FROM ffFormTemplate WHERE idfsFormType = @idfsNewFormType AND intRowStatus = 0)
						--	BEGIN
								SET @idfsFormType = @idfsNewFormType
								SET @blnUNI = 1
							--END
					END
				--Collect remaining details that are not supplied by the existing SP
				--SELECT
				--	@DefaultName = strDefault
				--FROM
				--	trtBaseReference 
				--WHERE
				--	idfsBaseReference = @idfsFormTemplate
				
				--Generate new idfsFormTemplate with existing names, having "Copy" appended to it
				SELECT
					@strResourceString = strResourceString
				FROM
					trtResourceTranslation
				WHERE 
					idfsResource = 744 and 
					idfsLanguage = @langid_int

				SET @DefaultName = CONCAT(@DefaultName,' (', @strResourceString , ')')
				SET @NationalName = CONCAT(@NationalName,' (', @strResourceString , ')')

				INSERT INTO @SupressSelect
				EXEC dbo.USSP_GBL_BaseReference_SET @idfsFormTemplateNew OUTPUT, 19000033/*'rftParameter'*/,@LangID, @DefaultName, @NationalName, 0

				--Create Global Reference for use by subsequential steps
				INSERT INTO @GlobalReference (idfs, idfsNew) VALUES (@idfsFormTemplate, @idfsFormTemplateNew)

				--Create the new Template
				INSERT INTO @SupressSelect
				EXEC USP_ADMIN_FF_Template_SET 
					@idfsFormType = @idfsFormType, 
					@DefaultName = @DefaultName,
					@NationalName = @NationalName, 
					@strNote = @strNote, 
					@LangId = @LangID, 
					@blnUNI = @blnUNI,
					@idfsFormTemplate = @idfsFormTemplateNew,
					@User = @User,
					@FunctionCall = 1,
					@CopyOnly = 1,
					@EventTypeId =10025120,
					@SiteId = @idfsSite,
					@UserId = @UserId,
					@LocationId = -1
					

				--Turn off UNI on old Template, since the newer on is the primary one now
				UPDATE
					ffFormTemplate
				SET
					blnUNI = 0
				WHERE
					idfsFormTemplate = @idfsFormTemplate

				--Disable existing Template
				--UPDATE
				--	ffFormTemplate
				--SET
				--	intRowStatus = 1
				--WHERE
				--	idfsFormTemplate = @idfsFormTemplate
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Sections													  --
				----------------------------------------------------------------------------------------
				INSERT INTO @Sections (idfsSection)
				SELECT
					SFT.idfsSection
				FROM
					ffSectionForTemplate SFT
				INNER JOIN ffSection S
					ON S.idfsSection = SFT.idfsSection AND
						SFT.intRowStatus = 0
				WHERE
					SFT.idfsFormTemplate = @idfsFormTemplate AND
					S.intRowStatus = 0

				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Parameters and their associated Sections					  --
				----------------------------------------------------------------------------------------
				INSERT INTO @Parameters (idfsParameter, idfsSection)
				SELECT
					PFT.idfsParameter,
					P.idfsSection
				FROM
					ffParameterForTemplate PFT
				INNER JOIN ffParameter P
					ON P.idfsParameter = PFT.idfsParameter AND
						PFT.intRowStatus = 0
				WHERE
					PFT.idfsFormTemplate = @idfsFormTemplate AND
					P.intRowStatus = 0
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Rules														  --
				----------------------------------------------------------------------------------------
				INSERT INTO @Rules (idfsRule)
				SELECT
					idfsRule
				FROM
					ffRule
				WHERE
					idfsFormTemplate = @idfsFormTemplate AND
					intRowStatus = 0
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Rules														  --
				----------------------------------------------------------------------------------------
				--INSERT INTO @Rules (idfsRule)
				--SELECT
				--	idfsRule
				--FROM
				--	ffRule
				--WHERE
				--	idfsFormTemplate = @idfsFormTemplate
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Rule Constants												  --
				----------------------------------------------------------------------------------------
				INSERT INTO @RuleConstants (idfRuleConstant, idfsRule, varConstant)
				SELECT
					RC.idfRuleConstant,
					RC.idfsRule,
					RC.varConstant
				FROM
					ffRuleConstant RC
				INNER JOIN ffRule R
					ON R.idfsRule = RC.idfsRule
				WHERE
					R.idfsFormTemplate = @idfsFormTemplate AND
					R.intRowStatus = 0
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Obtain a collection of Template Determinants										  --
				--------------------------------------------------------------------------------------
				INSERT INTO @Determinants (idfDeterminantValue, idfsBaseReference)
				SELECT
					idfDeterminantValue,
					idfsBaseReference
				FROM
					ffDeterminantValue
				WHERE
					idfsFormTemplate = @idfsFormTemplate
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Make a copy of each Section and its Template association							  --
				----------------------------------------------------------------------------------------
				WHILE EXISTS(SELECT TOP 1 idfsSection FROM @Sections WHERE idfsSectionNew IS NULL)
					BEGIN
						--Get another recored that hasn't been converted yet
						SELECT TOP 1 @idfsSection = idfsSection FROM @Sections WHERE idfsSectionNew IS NULL
						SELECT @intOrder = intOrder FROM ffSectionDesignOption WHERE idfsFormTemplate = @idfsFormTemplate AND idfsSection = @idfsSection
						
						--SELECT
						--	@idfsParentSection	= idfsParentSection,
						--	@idfsFormType		= idfsFormType,
						--	@intOrder			= S.intOrder,
						--	@blnGrid			= blnGrid,
						--	@blnFixedRowset		= blnFixedRowset,
						--	@idfsMatrixType		= idfsMatrixType,
						--	@DefaultName		= B.strDefault,
						--	@NationalName		= ISNULL(SNT.[strTextString], B.[strDefault]) 
						--FROM
						--	ffSection S
						--INNER JOIN dbo.trtBaseReference B
						--ON B.[idfsBaseReference] = S.[idfsSection]
						--   AND B.[intRowStatus] = 0  
						--LEFT JOIN dbo.trtStringNameTranslation SNT
						--ON SNT.[idfsBaseReference] = S.[idfsSection]
						--   AND SNT.idfsLanguage = @langid_int
						--   AND SNT.[intRowStatus] = 0
						--WHERE
						--	idfsSection = @idfsSection
							
						--Reset to grab a new id each iteration
						--SET @idfsSectionNew = NULL

						--Create another Section, based off of the details obtained from the previous step
						--INSERT INTO @SupressSelect
						--EXEC dbo.USSP_GBL_BaseReference_SET @idfsSectionNew OUTPUT,19000101,@LangID,@DefaultName,@NationalName,0

						--IF @idfsSectionNew IS NOT NULL 
						--	BEGIN
								--Create Global Reference for use by subsequential steps
								--INSERT INTO @GlobalReference (idfs, idfsNew) VALUES (@idfsSection, @idfsSectionNew)
								----INSERT INTO @SectionSetResults
								--INSERT INTO @SupressSelect
								--EXEC USP_ADMIN_FF_Sections_SET 
								--	@idfsSection		= @idfsSectionNew, 
								--	@idfsParentSection	= @idfsParentSection, 
								--	@idfsFormType		= @idfsFormType,
								--	@intOrder			= @intOrder,
								--	@blnGrid			= @blnGrid,
								--	@blnFixedRowset		= @blnFixedRowset,
								--	@idfsMatrixType		= @idfsMatrixType,
								--	@intRowStatus		= @intRowStatus,
								--	@User				= @User,
								--	@CopyOnly			= 1

								--Create entry for the association of this new Section against the new Template
								INSERT INTO @SupressSelect
								EXEC USP_ADMIN_FF_SectionTemplate_SET 
									@LangId = @LangID, 
									@idfsSection = @idfsSection, 
									@idfsFormTemplate = @idfsFormTemplateNew,
									@User = @User

								UPDATE
									ffSectionDesignOption
								SET
									intOrder = @intOrder
								WHERE
									idfsFormTemplate = @idfsFormTemplate AND
									idfsSection = @idfsSection

								--Update the temporary table, to mark it as converted
								UPDATE
									@Sections
								SET
									idfsSectionNew = @idfsSection
								WHERE
									idfsSection = @idfsSection

								UPDATE
									@Parameters
								SET
									idfsSectionNew = @idfsSection
								WHERE
									idfsSection = @idfsSection
									
								--Soft delete the old section, from the ffSection table
								--UPDATE 
								--	ffSection
								--SET
								--	intRowStatus = 1
								--WHERE
								--	idfsSection = @idfsSection
							--END
					END
				----------------------------------------------------------------------------------------

				----------------------------------------------------------------------------------------
				--Make a copy of each Parameter and its Template association						  --
				----------------------------------------------------------------------------------------
				WHILE EXISTS(SELECT TOP 1 idfsParameter FROM @Parameters WHERE idfsParameterNew IS NULL)
					BEGIN
						--Get another record that hasn't been converted yet
						SELECT TOP 1 @idfsParameter = idfsParameter FROM @Parameters WHERE idfsParameterNew IS NULL
						SELECT @intOrder = intOrder FROM ffParameterDesignOption WHERE idfsFormTemplate = @idfsFormTemplate AND idfsParameter = @idfsParameter
						SELECT @idfsEditMode = idfsEditMode FROM ffParameterForTemplate WHERE idfsFormTemplate = @idfsFormTemplate AND idfsParameter = @idfsParameter

						--Grab the details for the current parameter
						--SELECT
						--	@idfsSection			= P.idfsSection,
						--	@idfsParameterCaption	= P.idfsParameterCaption,
						--	@idfsParameterType		= P.idfsParameterType,
						--	@idfsFormType			= P.idfsFormType,
						--	@idfsEditor				= P.idfsEditor,
						--	@strNote				= P.strNote,
						--	@intOrder				= P.intOrder,
						--	@intHACode				= P.intHACode,
						--	@DefaultName			= ISNULL(B2.[strDefault], ''),
						--	@DefaultLongName		= ISNULL(B1.[strDefault], ''),
						--	@NationalName			= ISNULL(SNT2.[strTextString], B2.[strDefault]),
						--	@NationalLongName		= ISNULL(SNT1.[strTextString], B1.[strDefault])
						--FROM
						--	ffParameter P
						--INNER JOIN dbo.trtBaseReference B1
						--ON B1.[idfsBaseReference] = P.[idfsParameter]
						--	AND B1.[intRowStatus] = 0
						--LEFT JOIN dbo.trtBaseReference B2
						--ON B2.[idfsBaseReference] = P.[idfsParameterCaption]
						--	AND B2.[intRowStatus] = 0
						--LEFT JOIN dbo.trtStringNameTranslation SNT1
						--ON (SNT1.[idfsBaseReference] = P.[idfsParameter]
						--	AND SNT1.[idfsLanguage] = @langid_int)
						--	AND SNT1.[intRowStatus] = 0
						--LEFT JOIN dbo.trtStringNameTranslation SNT2
						--ON (SNT2.[idfsBaseReference] = P.[idfsParameterCaption]
						--	AND SNT2.[idfsLanguage] = @langid_int)
						--	AND SNT2.[intRowStatus] = 0
						--WHERE
						--	P.idfsParameter = @idfsParameter
							
						--Reset to grab a new id each iteration
						--SET @idfsParameterNew = NULL

						----Create another parameter, based off of the details obtained from the previous step
						--INSERT INTO @SupressSelect
						--EXEC dbo.USSP_GBL_BaseReference_SET @idfsParameterNew OUTPUT, 19000066/*'rftParameter'*/,@LangID, @DefaultLongName, @NationalLongName, 0

						--INSERT INTO @SupressSelect
						--EXEC dbo.USSP_GBL_BaseReference_SET @idfsParameterCaption OUTPUT, 19000070 /*'rftParameterToolTip'*/,@LangID, @DefaultName, @NationalName, 0

						----Create Global Reference for use by subsequential steps
						--INSERT INTO @GlobalReference (idfs, idfsNew) VALUES (@idfsParameter, @idfsParameterNew)

						--Obtain the id for the newly copied section
						--SELECT
						--	@idfsSectionNew = idfsSectionNew
						--FROM
						--	@Parameters
						--WHERE
						--	idfsParameter = @idfsParameter

						--Create the copy of the existing Parameter
						--INSERT INTO @Supress_USP_ADMIN_FF_Parameters_SET
						--EXEC USP_ADMIN_FF_Parameters_SET 
						--	@LangID					= @LangID,
						--	@idfsSection			= @idfsSectionNew, 
						--	@idfsFormType			= @idfsFormType,
						--	@idfsParameterType		= @idfsParameterType,
						--	@idfsEditor				= @idfsEditor,
						--	@intHACode				= @intHACode,
						--	@intOrder				= @intOrder,
						--	@strNote				= @strNote,
						--	@DefaultName			= @DefaultName,
						--	@NationalName			= @NationalName,
						--	@DefaultLongName		= @DefaultLongName,
						--	@NationalLongName		= @NationalLongName,
						--	@idfsParameter			= @idfsParameterNew,
						--	@idfsParameterCaption	= @idfsParameterCaption,
						--	@User					= @User,
						--	@intRowStatus			= 0,
						--	@CopyOnly				= 1

						--Create entry for the association of this new Section against the new Template
						--INSERT INTO @Supress_USP_ADMIN_FF_ParameterTemplate_SET
						EXEC USP_ADMIN_FF_ParameterTemplateForCopy_SET
							@LangID= @LangID,
							@idfsParameter = @idfsParameter, 
							@idfsFormTemplate = @idfsFormTemplateNew,
							@User = @User,
							@CopyOnly = 1,
							@FunctionCall = 1

						--Apply ordering settings
						UPDATE
							ffParameterDesignOption
						SET
							intOrder = @intOrder
						WHERE
							idfsFormTemplate = @idfsFormTemplateNew AND
							idfsParameter = @idfsParameter

						--Apply Edit Mode (Mandatory or Ordinary)
						UPDATE
							ffParameterForTemplate
						SET
							idfsEditMode = @idfsEditMode
						WHERE
							idfsFormTemplate = @idfsFormTemplateNew AND
							idfsParameter = @idfsParameter

						--Update the temporary table, to mark it as converted
						UPDATE
							@Parameters
						SET
							idfsParameterNew = @idfsParameter
						WHERE
							idfsParameter = @idfsParameter


						--Soft delete the old section, from the ffSection table
						--UPDATE 
						--	ffParameter
						--SET
						--	intRowStatus = 1
						--WHERE
						--	idfsParameter = @idfsParameter

					END
				----------------------------------------------------------------------------------------

				--Enumerate through all determinants that are related to the Template
				WHILE EXISTS (SELECT idfDeterminantValue FROM @Determinants)
					BEGIN
						--Grab the first items in the list
						SELECT
							TOP 1
							@idfDeterminantValue = idfDeterminantValue,
							@idfsBaseReference = idfsBaseReference
						FROM
							@Determinants

						--Create the copy of the existing entry
						INSERT INTO @SupressSelect
						EXEC USP_ADMIN_FF_Determinant_SET @idfsDiagnosisGroup = @idfsBaseReference, 
														@idfsFormTemplate = @idfsFormTemplateNew, 
														@User = @User, 
														@intRowStatus = 0, 
														@FunctionCall = 1,
														@EventTypeId =10025120,
														@SiteId = @idfsSite,
														@UserId = @UserId,
														@LocationId = NULL

						--Disable
						UPDATE
							ffDeterminantValue
						SET
							intRowStatus = 1
						WHERE
							idfDeterminantValue = @idfDeterminantValue

						DELETE
						FROM
							@Determinants
						WHERE
							idfDeterminantValue = @idfDeterminantValue
					END

				----------------------------------------------------------------------------------------
				--Make a copy of each Rule															  --
				----------------------------------------------------------------------------------------
				WHILE EXISTS(SELECT TOP 1 idfsRule FROM @Rules WHERE idfsRuleNew IS NULL)
					BEGIN
						--Get another record that hasn't been converted yet
						SELECT
							TOP 1 @idfsRule = idfsRule
						FROM
							@Rules
						WHERE
							idfsRuleNew IS NULL

						--Reset @RuleDetailResults, so that it will only have one row at a time in it
						DELETE FROM @RuleDetailResults

						--Grab the details for the current Rule
						INSERT INTO @RuleDetailResults
						EXEC USP_ADMIN_FF_Rule_GetDetails @langid=@LangId, @idfsRule = @idfsRule

						SELECT
							@idfsRule = idfsRule,
							@DefaultRuleName = defaultRuleName,
							@NationalRuleName = RuleName,
							@DefaultRuleMessage = defaultRuleMessage,
							@NationalRuleMessage = RuleMessage,
							@idfsRuleMessage = idfsRuleMessage,
							@idfsCheckPoint = idfsCheckPoint,
							@idfsRuleFunction = idfsRuleFunction,
							@blnNot = blnNot,
							@idfsRuleAction = idfsRuleAction,
							@strActionParameters = strActionParameters,
							@idfsFunctionParameter = idfsFunctionParameter,
							@strFillValue = FillValue
						FROM
							@RuleDetailResults
						
						--Reset to grab a new id each iteration
						--SET @idfsRuleNew = -1

						--Create another Rule, based off of the details obtained from the previous step
						--INSERT INTO @SupressSelect
						EXEC dbo.USSP_GBL_BaseReference_SET @ReferenceID = @idfsRuleNew OUTPUT, @ReferenceType = 19000029, @LangId = @LangID, @DefaultName = @DefaultName, @NationalName = @NationalName, @System = 0

						INSERT INTO @SupressSelect
						EXEC dbo.USSP_GBL_BaseReference_SET @idfsRuleMessage OUTPUT, 19000032, @LangID, @MessageText, @MessageNationalText, 0
						
						--Create Global Reference for use by subsequential steps
						INSERT INTO @GlobalReference (idfs, idfsNew) VALUES (@idfsRule, @idfsRuleNew)

						--Reset the Action Parameters Table
						DELETE FROM @ActionParameters
						
						--Create table from string "Parameters" of the current rule details
						INSERT INTO @ActionParameters (idfsParameter)
						SELECT
							CAST(L.value AS BIGINT) AS idfsParameter
						FROM
							[dbo].[FN_GBL_SYS_SplitList](@strActionParameters, 0, ',') L

						--Get the conversion of the idfsParameter from its old value for the Function that the parameter is using.
						SELECT
							@idfsFunctionParameterNew = idfsNew
						FROM
							@GlobalReference
						WHERE
							idfs = @idfsFunctionParameter

						
						--Enumerate through all Action Parameters, that are associated with the rule
						WHILE EXISTS(SELECT idfsParameter FROM @ActionParameters)
							BEGIN
								SELECT 
									TOP 1 @idfsActionParameter = idfsParameter
								FROM
									@ActionParameters
									
								--Get the conversion of the idfsParameter from its old value for the Action that the parameter is using.
								SELECT
									@idfsActionParameterNew = idfsNew
								FROM
									@GlobalReference
								WHERE
									idfs = @idfsActionParameter

								--Create the copy of the existing Parameter
								--INSERT INTO @SupressSelect
								EXEC USP_ADMIN_FF_Rules_SET
									@idfsRule = @idfsRuleNew,
									@idfsFormTemplate = @idfsFormTemplateNew,
									@idfsCheckPoint = @idfsCheckPoint,
									@idfsRuleFunction = @idfsRuleFunction,
									@idfsRuleAction = @idfsRuleAction,
									@DefaultName = @DefaultName,
									@NationalName = @NationalName,
									@MessageText = @MessageText,
									@MessageNationalText = @MessageNationalText,
									@blnNot = @blnNot,
									@LangID = @LangID,
									@idfsRuleMessage = @idfsRuleMessage,
									@idfsFunctionParameter = @idfsFunctionParameterNew,
									@idfsActionParameter = @idfsActionParameterNew,
									@User = @User,
									@strFillValue = @strFillValue,
									@strCompareValue = @strCompareValue,
									@intRowStatus = 0,
									@FunctionCall = 1,
									@CopyOnly = 1

								DELETE FROM @ActionParameters WHERE idfsParameter = @idfsActionParameter
							END

						--Enumerate through all Constants, that are related to the Rule
						WHILE EXISTS(SELECT idfRuleConstant FROM @RuleConstants)
							BEGIN
								SELECT
									TOP 1
									@idfRuleConstant = idfRuleConstant,
									@idfsRule = idfsRule,
									@varConstant = varConstant
								FROM
									@RuleConstants

								--Get a new row id
								INSERT INTO @SupressSelect
								EXEC dbo.USP_GBL_NEXTKEYID_GET 'ffRuleConstant', @idfRuleConstantNew OUTPUT;

								--Get the newly created id for the old entry.
								SELECT
									@idfRuleConstantNew = idfsNew
								FROM
									@GlobalReference
								WHERE
									idfs = @idfRuleConstant

								--Get the newly created id for the old entry.
								SELECT
									@idfsRuleNew = idfsNew
								FROM
									@GlobalReference
								WHERE
									idfs = @idfsRuleNew

								--Create the new Record
								INSERT INTO ffRuleConstant (
									idfRuleConstant, 
									idfsRule, 
									varConstant, 
									intRowStatus,
									AuditCreateDTM,
									AuditCreateUser,
									SourceSystemNameID,
									SourceSystemKeyValue
								)
								VALUES (
									@idfRuleConstantNew,
									@idfsRuleNew,
									@varConstant,
									0,
									GETDATE(),
									@User,
									10519001,
									'[{"idfRuleConstant":13663030001100}]'
								)
								
								--Delete the top record so that continous looping doesn't occur to produce records over and over
								DELETE 
								FROM 
									@RuleConstants
								WHERE
									idfRuleConstant = @idfRuleConstant
							END
						
						--Update the temporary table, to mark it as converted
						UPDATE
							@Rules
						SET
							idfsRuleNew = @idfsRuleNew
						WHERE
							idfsRule = @idfsRule
						
						--Soft delete the old section, from the ffSection table
						UPDATE 
							ffRule
						SET
							intRowStatus = 1
						WHERE
							idfsRule= @idfsRule

					END
				----------------------------------------------------------------------------------------

				--USP_ADMIN_FF_Parameter_Copy
				--USP_ADMIN_FF_Section_Copy
				--SELECT * FROM @SectionsParameters
				--USP_ADMIN_FF_TemplateSectionOrder_Set
				--USP_ADMIN_FF_RequiredParameter_SET
				--USP_ADMIN_FF_ParameterDesignOptions_SET
				--USP_ADMIN_FF_Parameters_SET
				--USP_ADMIN_FF_ParameterFixedPresetValue_SET
				--USP_ADMIN_FF_ParameterTypes_SET
				--USP_ADMIN_FF_ParameterTemplate_SET
				--USP_ADMIN_FF_RuleConstant_SET
				--USP_ADMIN_FF_RuleParameterForAction_SET
				--USP_ADMIN_FF_RuleParameterForFunction_SET
				--USP_ADMIN_FF_Rules_SET
				--USP_ADMIN_FF_SectionDesignOptions_SET
				--USP_ADMIN_FF_Sections_SET
				--USP_ADMIN_FF_SectionTemplate_SET
				--USP_ADMIN_FF_SectionTemplateRecursive_SET ????????????????
				--USP_ADMIN_FF_Template_SET
				--USP_ADMIN_FF_TemplateDeterminantValues_SET
				--USP_ADMIN_FF_TemplateParameterOrder_Set
				--USP_ADMIN_FF_Determinant_SET

			--END
		
		--If any observations are made, then the following must be copied
		--select * from ffDeterminantValue where idfsFormTemplate = 9871670000000 

		IF @idfsFormTemplateNew IS NULL
			BEGIN
				SET @idfsFormTemplateNew = @idfsFormTemplate
			END

		SELECT	@returnCode as ReturnCode, @returnMsg as ReturnMessage, @idfsFormTemplateNew As idfsFormTemplate
	END TRY

	BEGIN CATCH

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		throw;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_AGG_REPORT_GETList]...';


GO
-- ================================================================================================
-- Name:  USP_AGG_REPORT_GETList
--
-- Description:  Returns list of aggregate reports depending on aggregate report type.
--          
-- Revision History:
-- Name                Date       Change Detail
-- ------------------- ---------- ----------------------------------------------------------------
-- Stephen Long        07/01/2019 Initial release.
-- Stephen Long        07/09/2019 Updated gis string translation to sub selects instead of joins 
--                                for better performance.
-- Stephen Long        08/05/2019 Updated time period join, and changed the select all if/else. 
--                                Was throwing errors on POCO.
-- Stephen Long        08/08/2019 Added entered by person name.
-- Stephen Long        08/13/2019 Corrected administrative unit type id values.
-- Stephen Long        09/26/2019 Changed administrative where clause; reference TFS item
-- Stephen Long        01/22/2020 Added site list parameter for site filtration.
-- Stephen Long        02/18/2020 Added non-configurable site filtration rules.
-- Stephen Long        02/28/2020 Added "display" dates to handle different cultures.
-- Mark Wilson		   03/03/2020 Removed @DistinctIDs table parm and got rid of duplicates
-- Stephen Long        04/29/2020 Added organization statistical area type.
-- Stephen Long        06/30/2020 Made updates so POCO generator would better handle.
-- Stephen Long        07/06/2020 Added trim to EIDSS Report ID.
-- Stephen Long        09/18/2020 Added the four version ID's for the various matrices.
-- Stephen Long        09/21/2020 Added parameter administrative unit type ID and where 
--                                criteria.
-- Stephen Long        11/18/2020 Added site ID to the query.
-- Stephen Long        11/27/2020 Added configurable site filtration rules.
-- Stephen Long        12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long        04/04/2021 Added updated pagination and location hierarchy.
-- Ann Xiong	       10/23/2021 Fixed search by Organization issue
-- Stephen Long        05/17/2022 Added additional criteria for admin unit of organization.
-- Mike Kornegay	   05/19/2022 Updated to reflect new parameters.
-- Stephen Long        05/31/2022 Updated default rule for administrative level check, and added
--                                for organizations connected to the report.
-- Stephen Long        06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay	   08/01/2022 Changed CTE for paging and sorting because sorting was not correct.
-- Stephen Long        09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Ann Xiong		   09/27/2022 Added parameter LegacyReportID
-- Stephen Long        01/09/2023 Updxates for site filtration queries.
-- Stephen Long        04/20/2023 Fixes for bug 6022.
--
-- Legends:
/*
	Aggregate disease report types:
    Human Aggregate = 10102001
    Veterinary Aggregate Disease = 10102002
    Veterinary Aggregate Action = 10102003

	Time interval types:
    None = 0
    Month = 10091001
    Day = 10091002
    Quarter = 10091003
    Week = 10091004
    Year = 10091005

	Administrative unit types:
    None = 0
    Country/Administrative Level 1 = 10089001
	Administrative Level 2 = 10089003
    Administrative Level 3 = 10089002
    Settlement = 10089004
	Organization = 10089005

	Testing Code:
	exec USP_AGG_REPORT_GETList 'en-US', 
	@AggregateReportTypeID=10102001, 
	@UserSiteID=864, 
	@UserOrganizationID=758210000000, 
	@UserEmployeeID=420664190000872
*/
--
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_AGG_REPORT_GETList]
(
    @LanguageID AS NVARCHAR(50),
    @AggregateReportTypeID AS BIGINT = NULL,
    @ReportID AS NVARCHAR(200) = NULL,
    @LegacyReportID NVARCHAR(200) = NULL,
    @AdministrativeUnitTypeID AS BIGINT = NULL,
    @TimeIntervalTypeID AS BIGINT = NULL,
    @StartDate AS DATETIME = NULL,
    @EndDate AS DATETIME = NULL,
    @AdministrativeUnitID AS BIGINT = NULL,
    @OrganizationID BIGINT = NULL,
    @SelectAllIndicator BIT = 0,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'ReportID',
    @SortOrder NVARCHAR(4) = 'DESC',
    @PageNumber INT = 1,
    @PageSize INT = 10
)
AS
BEGIN
    SET NOCOUNT ON;

    IF @SelectAllIndicator = 1
    BEGIN
        SET @PageSize = 100000;
        SET @PageNumber = 1;
    END;

    DECLARE @firstRec INT;
    DECLARE @lastRec INT;
    SET @firstRec = (@PageNumber - 1) * @PageSize
    SET @lastRec = (@PageNumber * @PageSize + 1);

    DECLARE @AdministrativeLevelNode AS HIERARCHYID;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        IF @AdministrativeUnitID IS NOT NULL
        BEGIN
            SELECT @AdministrativeLevelNode = node
            FROM dbo.gisLocation
            WHERE idfsLocation = @AdministrativeUnitID;
        END;

        -- ========================================================================================
        -- NO CONFIGRUABLE FILTRATION RULES APPLIED
        --
        -- For first and second level sites, do not apply any configurable filtration rules.
        -- ========================================================================================
        IF @ApplySiteFiltrationIndicator = 0
        BEGIN
            INSERT INTO @Results
            SELECT ac.idfAggrCase,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbAggrCase ac
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = ac.idfsAdministrativeUnit
                LEFT JOIN dbo.gisBaseReference br
                    ON br.idfsGISBaseReference = ac.idfsAdministrativeUnit
                LEFT JOIN dbo.trtBaseReference AdminUnit
                    ON AdminUnit.idfsBaseReference = CASE
                                                         WHEN ac.idfOffice IS NOT NULL THEN
                                                             10089005
                                                         WHEN br.idfsGISReferenceType = 19000001 THEN
                                                             10089001
                                                         WHEN br.idfsGISReferenceType = 19000003 THEN
                                                             10089003
                                                         WHEN br.idfsGISReferenceType = 19000002 THEN
                                                             10089002
                                                         WHEN br.idfsGISReferenceType = 19000004 THEN
                                                             10089004
                                                     END
                LEFT JOIN dbo.trtStringNameTranslation per
                    ON per.idfsBaseReference = CASE
                                                   WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091002 /* Day */
                                                   WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 6 THEN
                                                       10091004 /* Week - use datediff with day because datediff with week will return incorrect result if first day of the week in country differs from Sunday */
                                                   WHEN DATEDIFF(MONTH, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091001 /* Month */
                                                   WHEN DATEDIFF(QUARTER, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091003 /* Quarter */
                                                   WHEN DATEDIFF(YEAR, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091005 /* Year */
                                               END
                       AND per.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
            WHERE ac.intRowStatus = 0
                  AND (
                          ac.idfsAggrCaseType = @AggregateReportTypeID
                          OR @AggregateReportTypeID IS NULL
                      )
                  AND (
                          ac.idfOffice = @OrganizationID
                          OR @OrganizationID IS NULL
                      )
                  AND (
                          AdminUnit.idfsBaseReference = @AdministrativeUnitTypeID
                          OR @AdministrativeUnitTypeID IS NULL
                      )
                  AND (
                          per.idfsBaseReference = @TimeIntervalTypeID
                          OR @TimeIntervalTypeID IS NULL
                      )
                  AND (
                          ac.datStartDate >= @StartDate
                          OR @StartDate IS NULL
                      )
                  AND (
                          ac.datFinishDate <= @EndDate
                          OR @EndDate IS NULL
                      )
                  AND (CASE
                           WHEN @AdministrativeUnitID IS NULL THEN
                               1
                           WHEN g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                                OR (
                                       ac.idfOffice = @AdministrativeUnitID
                                       AND @AdministrativeUnitTypeID = 10089005
                                   ) THEN
                               1
                           ELSE
                               0
                       END = 1
                      )
                  AND (
                          ac.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
                  AND (
                          ac.strCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                          OR @LegacyReportID IS NULL
                      );
        END
        ELSE
        BEGIN
            DECLARE @FilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                                     ));
            -- =======================================================================================
            -- DEFAULT CONFIGURABLE FILTRATION RULES
            --
            -- Apply non-configurable filtration rules for third level sites.
            -- =======================================================================================
            DECLARE @RuleActiveStatus INT = 0;
            DECLARE @AdministrativeLevelTypeID INT;
            DECLARE @OrganizationAdministrativeLevelID BIGINT = NULL;
            DECLARE @OrganizationAdministrativeSettlementID BIGINT = NULL;
            DECLARE @DefaultAccessRules AS TABLE
            (
                AccessRuleID BIGINT NOT NULL,
                ActiveIndicator INT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL,
                AdministrativeLevelTypeID INT NULL
            );

            INSERT INTO @DefaultAccessRules
            SELECT AccessRuleID,
                   a.intRowStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator,
                   a.AdministrativeLevelTypeID
            FROM dbo.AccessRule a
            WHERE a.DefaultRuleIndicator = 1;

            --
            -- Human Aggregate Disease Report data shall be available to all sites' organizations 
            -- connected to the particular report.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537023;

            IF @RuleActiveStatus = 0
            BEGIN
                -- Entered by and notification received by and sent to organizations
                INSERT INTO @FilteredResults
                SELECT a.idfAggrCase,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbAggrCase a
                WHERE a.intRowStatus = 0
                      AND (
                              a.idfEnteredByOffice = @UserOrganizationID
                              OR a.idfReceivedByOffice = @UserOrganizationID
                              OR a.idfSentByOffice = @UserOrganizationID
                          );
            END;

            --
            -- Human Aggregate Disease Report data shall be available to all sites of the same 
            -- administrative level specified in the rule.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537005;

            IF @RuleActiveStatus = 0
            BEGIN
                SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537005;

                IF @OrganizationAdministrativeLevelID IS NULL
                BEGIN
                    SELECT @OrganizationAdministrativeLevelID = CASE
                                                                    WHEN @AdministrativeLevelTypeID = 1 THEN
                                                                        lh.AdminLevel1ID
                                                                    WHEN @AdministrativeLevelTypeID = 2 THEN
                                                                        lh.AdminLevel2ID
                                                                    WHEN @AdministrativeLevelTypeID = 3 THEN
                                                                        lh.AdminLevel3ID
                                                                    WHEN @AdministrativeLevelTypeID = 4 THEN
                                                                        lh.AdminLevel4ID
                                                                    WHEN @AdministrativeLevelTypeID = 5 THEN
                                                                        lh.AdminLevel5ID
                                                                    WHEN @AdministrativeLevelTypeID = 6 THEN
                                                                        lh.AdminLevel6ID
                                                                    WHEN @AdministrativeLevelTypeID = 7 THEN
                                                                        lh.AdminLevel7ID
                                                                END
                    FROM dbo.tlbOffice o
                        INNER JOIN dbo.tlbGeoLocationShared l
                            ON l.idfGeoLocationShared = o.idfLocation
                        INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                            ON lh.idfsLocation = l.idfsLocation
                    WHERE o.idfOffice = @UserOrganizationID;

                    SELECT @OrganizationAdministrativeSettlementID = gs.idfsSettlement
                    FROM dbo.tlbOffice o
                        INNER JOIN dbo.tlbGeoLocationShared l
                            ON l.idfGeoLocationShared = o.idfLocation
                        INNER JOIN dbo.gisSettlement gs
                            ON gs.idfsSettlement = l.idfsLocation
                    WHERE o.idfOffice = @UserOrganizationID;
                END

                -- Administrative level specified in the rule of the report administrative unit.
                INSERT INTO @FilteredResults
                SELECT ac.idfAggrCase,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbAggrCase ac
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537005
                    INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                        ON lh.idfsLocation = ac.idfsAdministrativeUnit
                WHERE ac.intRowStatus = 0
                      AND ac.idfsAggrCaseType = 10102001
                      AND (
                              lh.AdminLevel1ID = @OrganizationAdministrativeLevelID
                              AND @AdministrativeLevelTypeID = 1
                              OR lh.AdminLevel2ID = @OrganizationAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 2
                              OR lh.AdminLevel3ID = @OrganizationAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 3
                              OR lh.AdminLevel4ID = @OrganizationAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 4
                              OR lh.AdminLevel5ID = @OrganizationAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 5
                              OR lh.AdminLevel6ID = @OrganizationAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 6
                              OR lh.AdminLevel7ID = @OrganizationAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 7
                          )
                      AND ac.idfAggrCase NOT IN (
                                                    SELECT ID FROM @FilteredResults
                                                );

                -- Administrative level of the settlement of the report administrative unit.
                INSERT INTO @FilteredResults
                SELECT ac.idfAggrCase,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbAggrCase ac
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537005
                WHERE ac.intRowStatus = 0
                      AND ac.idfsAdministrativeUnit = @OrganizationAdministrativeSettlementID
                      AND (ac.idfAggrCase NOT IN (
                                                     SELECT ID FROM @FilteredResults
                                                 )
                          );
            END;

            --
            -- Veterinary Aggregate Disease/Action Report data shall be available to all sites' organizations 
            -- connected to the particular report.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537024;

            IF @RuleActiveStatus = 0
            BEGIN
                -- Entered by and notification received by and sent to organizations
                INSERT INTO @FilteredResults
                SELECT a.idfAggrCase,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbAggrCase a
                WHERE a.intRowStatus = 0
                      AND (
                              a.idfEnteredByOffice = @UserOrganizationID
                              OR a.idfReceivedByOffice = @UserOrganizationID
                              OR a.idfSentByOffice = @UserOrganizationID
                          );
            END;

            --
            -- Veterinary Aggregate Disease/Action Report data shall be available to all sites of the same 
            -- administrative level specified in the rule.
            --
            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537014;

            IF @RuleActiveStatus = 0
            BEGIN
                SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537014;

                SELECT @OrganizationAdministrativeLevelID = CASE
                                                                WHEN @AdministrativeLevelTypeID = 1 THEN
                                                                    lh.AdminLevel1ID
                                                                WHEN @AdministrativeLevelTypeID = 2 THEN
                                                                    lh.AdminLevel2ID
                                                                WHEN @AdministrativeLevelTypeID = 3 THEN
                                                                    lh.AdminLevel3ID
                                                                WHEN @AdministrativeLevelTypeID = 4 THEN
                                                                    lh.AdminLevel4ID
                                                                WHEN @AdministrativeLevelTypeID = 5 THEN
                                                                    lh.AdminLevel5ID
                                                                WHEN @AdministrativeLevelTypeID = 6 THEN
                                                                    lh.AdminLevel6ID
                                                                WHEN @AdministrativeLevelTypeID = 7 THEN
                                                                    lh.AdminLevel7ID
                                                            END
                FROM dbo.tlbOffice o
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                        ON lh.idfsLocation = l.idfsLocation
                WHERE o.idfOffice = @UserOrganizationID;

                SELECT @OrganizationAdministrativeSettlementID = gs.idfsSettlement
                FROM dbo.tlbOffice o
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                    INNER JOIN dbo.gisSettlement gs
                        ON gs.idfsSettlement = l.idfsLocation
                WHERE o.idfOffice = @UserOrganizationID;

                -- Administrative level specified in the rule of the report administrative unit.
                INSERT INTO @FilteredResults
                SELECT ac.idfAggrCase,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbAggrCase ac
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537014
                    INNER JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                        ON lh.idfsLocation = ac.idfsAdministrativeUnit
                WHERE ac.intRowStatus = 0
                      AND ac.idfsAggrCaseType = 10102002
                      OR ac.idfAggrCase = 10102003
                         AND (
                                 lh.AdminLevel1ID = @OrganizationAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 1
                                 OR lh.AdminLevel2ID = @OrganizationAdministrativeLevelID
                                    AND @AdministrativeLevelTypeID = 2
                                 OR lh.AdminLevel3ID = @OrganizationAdministrativeLevelID
                                    AND @AdministrativeLevelTypeID = 3
                                 OR lh.AdminLevel4ID = @OrganizationAdministrativeLevelID
                                    AND @AdministrativeLevelTypeID = 4
                                 OR lh.AdminLevel5ID = @OrganizationAdministrativeLevelID
                                    AND @AdministrativeLevelTypeID = 5
                                 OR lh.AdminLevel6ID = @OrganizationAdministrativeLevelID
                                    AND @AdministrativeLevelTypeID = 6
                                 OR lh.AdminLevel7ID = @OrganizationAdministrativeLevelID
                                    AND @AdministrativeLevelTypeID = 7
                             )
                         AND ac.idfAggrCase NOT IN (
                                                       SELECT ID FROM @FilteredResults
                                                   );

                -- Administrative level of the settlement of the report administrative unit.
                INSERT INTO @FilteredResults
                SELECT ac.idfAggrCase,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbAggrCase ac
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537014
                WHERE ac.intRowStatus = 0
                      AND ac.idfsAdministrativeUnit = @OrganizationAdministrativeSettlementID
                      AND (ac.idfAggrCase NOT IN (
                                                     SELECT ID FROM @FilteredResults
                                                 )
                          );
            END;

            -- =======================================================================================
            -- CONFIGURABLE FILTRATION RULES
            -- 
            -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the non-configurable rules.
            -- =======================================================================================
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT ag.idfAggrCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbAggrCase ag
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ag.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ag.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT ag.idfAggrCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbAggrCase ag
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ag.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ag.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT ag.idfAggrCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbAggrCase ag
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ag.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ag.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT ag.idfAggrCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbAggrCase ag
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = ag.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ag.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT ag.idfAggrCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbAggrCase ag
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ag.intRowStatus = 0
                  AND sgs.idfsSite = ag.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT ag.idfAggrCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbAggrCase ag
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ag.intRowStatus = 0
                  AND a.GrantingActorSiteID = ag.idfsSite;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT ag.idfAggrCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbAggrCase ag
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ag.intRowStatus = 0
                  AND a.GrantingActorSiteID = ag.idfsSite;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT ag.idfAggrCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbAggrCase ag
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE ag.intRowStatus = 0
                  AND a.GrantingActorSiteID = ag.idfsSite;

            -- Copy filtered results to results and use search criteria
            INSERT INTO @Results
            SELECT ID,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator
            FROM @FilteredResults
                INNER JOIN dbo.tlbAggrCase ac
                    ON ac.idfAggrCase = ID
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = ac.idfsAdministrativeUnit
                LEFT JOIN dbo.gisBaseReference br
                    ON br.idfsGISBaseReference = ac.idfsAdministrativeUnit
                LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) OrganizationAdminUnit
                    ON ac.idfOffice = OrganizationAdminUnit.idfOffice
                LEFT JOIN dbo.trtBaseReference AdminUnit
                    ON AdminUnit.idfsBaseReference = CASE
                                                         WHEN ac.idfOffice IS NOT NULL THEN
                                                             10089005
                                                         WHEN br.idfsGISReferenceType = 19000001 THEN
                                                             10089001
                                                         WHEN br.idfsGISReferenceType = 19000003 THEN
                                                             10089003
                                                         WHEN br.idfsGISReferenceType = 19000002 THEN
                                                             10089002
                                                         WHEN br.idfsGISReferenceType = 19000004 THEN
                                                             10089004
                                                     END
                LEFT JOIN dbo.trtStringNameTranslation AS per
                    ON per.idfsBaseReference = CASE
                                                   WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091002 /* Day */
                                                   WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 6 THEN
                                                       10091004 /* Week - use datediff with day because datediff with week will return incorrect result if first day of the week in country differs from Sunday */
                                                   WHEN DATEDIFF(MONTH, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091001 /* Month */
                                                   WHEN DATEDIFF(QUARTER, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091003 /* Quarter */
                                                   WHEN DATEDIFF(YEAR, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091005 /* Year */
                                               END
                       AND per.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
            WHERE (
                      ac.idfsAggrCaseType = @AggregateReportTypeID
                      OR @AggregateReportTypeID IS NULL
                  )
                  AND (
                          ac.idfSentByOffice = @OrganizationID
                          OR @OrganizationID IS NULL
                      )
                  AND (
                          AdminUnit.idfsBaseReference = @AdministrativeUnitTypeID
                          OR @AdministrativeUnitTypeID IS NULL
                      )
                  AND (
                          per.idfsBaseReference = @TimeIntervalTypeID
                          OR @TimeIntervalTypeID IS NULL
                      )
                  AND (
                          ac.datStartDate >= @StartDate
                          OR @StartDate IS NULL
                      )
                  AND (
                          ac.datFinishDate <= @EndDate
                          OR @EndDate IS NULL
                      )
                  AND (CASE
                           WHEN @AdministrativeUnitID IS NULL THEN
                               1
                           WHEN g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                                OR (
                                       ac.idfOffice = @AdministrativeUnitID
                                       AND @AdministrativeUnitTypeID = 10089005
                                   ) THEN
                               1
                           ELSE
                               0
                       END = 1
                      )
                  AND (
                          ac.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
            GROUP BY ID,
                     ReadPermissionIndicator,
                     AccessToPersonalDataPermissionIndicator,
                     AccessToGenderAndAgeDataPermissionIndicator,
                     WritePermissionIndicator,
                     DeletePermissionIndicator;
        END;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT ac.idfAggrCase
            FROM dbo.tlbAggrCase ac
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = ac.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE ac.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT ac.idfAggrCase,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ac.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ac.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ac.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ac.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = ac.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbAggrCase ac
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = ac.idfsSite
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = ac.idfsAdministrativeUnit
            LEFT JOIN dbo.gisBaseReference br
                ON br.idfsGISBaseReference = ac.idfsAdministrativeUnit
            LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) OrganizationAdminUnit
                ON ac.idfOffice = OrganizationAdminUnit.idfOffice
            LEFT JOIN dbo.trtBaseReference AdminUnit
                ON AdminUnit.idfsBaseReference = CASE
                                                     WHEN ac.idfOffice IS NOT NULL THEN
                                                         10089005
                                                     WHEN br.idfsGISReferenceType = 19000001 THEN
                                                         10089001
                                                     WHEN br.idfsGISReferenceType = 19000003 THEN
                                                         10089003
                                                     WHEN br.idfsGISReferenceType = 19000002 THEN
                                                         10089002
                                                     WHEN br.idfsGISReferenceType = 19000004 THEN
                                                         10089004
                                                 END
            LEFT JOIN dbo.trtStringNameTranslation AS per
                ON per.idfsBaseReference = CASE
                                               WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                   10091002 /* Day */
                                               WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 6 THEN
                                                   10091004 /* Week - use datediff with day because datediff with week will return incorrect result if first day of the week in country differs from Sunday */
                                               WHEN DATEDIFF(MONTH, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                   10091001 /* Month */
                                               WHEN DATEDIFF(QUARTER, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                   10091003 /* Quarter */
                                               WHEN DATEDIFF(YEAR, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                   10091005 /* Year */
                                           END
                   AND per.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
        WHERE oa.intPermission = 2 -- Allow permission
              AND ac.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup
              AND (
                      ac.idfsAggrCaseType = @AggregateReportTypeID
                      OR @AggregateReportTypeID IS NULL
                  )
              AND (
                      ac.idfSentByOffice = @OrganizationID
                      OR @OrganizationID IS NULL
                  )
              AND (
                      AdminUnit.idfsBaseReference = @AdministrativeUnitTypeID
                      OR @AdministrativeUnitTypeID IS NULL
                  )
              AND (
                      per.idfsBaseReference = @TimeIntervalTypeID
                      OR @TimeIntervalTypeID IS NULL
                  )
              AND (
                      ac.datStartDate >= @StartDate
                      OR @StartDate IS NULL
                  )
              AND (
                      ac.datFinishDate <= @EndDate
                      OR @EndDate IS NULL
                  )
              AND (CASE
                       WHEN @AdministrativeUnitID IS NULL THEN
                           1
                       WHEN g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                            OR (
                                   ac.idfOffice = @AdministrativeUnitID
                                   AND @AdministrativeUnitTypeID = 10089005
                               ) THEN
                           1
                       ELSE
                           0
                   END = 1
                  )
              AND (
                      ac.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                      OR @ReportID IS NULL
                  )
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = ac.idfsSite
        )
        GROUP BY ac.idfAggrCase,
                 ac.idfsSite;

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbAggrCase ac
                ON ac.idfAggrCase = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = ac.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT ac.idfAggrCase,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ac.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ac.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ac.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ac.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = ac.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbAggrCase ac
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = ac.idfsSite
                   AND oa.intRowStatus = 0
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = ac.idfsAdministrativeUnit
            LEFT JOIN dbo.gisBaseReference br
                ON br.idfsGISBaseReference = ac.idfsAdministrativeUnit
            LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) OrganizationAdminUnit
                ON ac.idfOffice = OrganizationAdminUnit.idfOffice
            LEFT JOIN dbo.trtBaseReference AdminUnit
                ON AdminUnit.idfsBaseReference = CASE
                                                     WHEN ac.idfOffice IS NOT NULL THEN
                                                         10089005
                                                     WHEN br.idfsGISReferenceType = 19000001 THEN
                                                         10089001
                                                     WHEN br.idfsGISReferenceType = 19000003 THEN
                                                         10089003
                                                     WHEN br.idfsGISReferenceType = 19000002 THEN
                                                         10089002
                                                     WHEN br.idfsGISReferenceType = 19000004 THEN
                                                         10089004
                                                 END
            LEFT JOIN dbo.trtStringNameTranslation AS per
                ON per.idfsBaseReference = CASE
                                               WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                   10091002 /* Day */
                                               WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 6 THEN
                                                   10091004 /* Week - use datediff with day because datediff with week will return incorrect result if first day of the week in country differs from Sunday */
                                               WHEN DATEDIFF(MONTH, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                   10091001 /* Month */
                                               WHEN DATEDIFF(QUARTER, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                   10091003 /* Quarter */
                                               WHEN DATEDIFF(YEAR, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                   10091005 /* Year */
                                           END
                   AND per.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
        WHERE oa.intPermission = 2 -- Allow permission
              AND ac.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID
              AND (
                      ac.idfsAggrCaseType = @AggregateReportTypeID
                      OR @AggregateReportTypeID IS NULL
                  )
              AND (
                      ac.idfSentByOffice = @OrganizationID
                      OR @OrganizationID IS NULL
                  )
              AND (
                      AdminUnit.idfsBaseReference = @AdministrativeUnitTypeID
                      OR @AdministrativeUnitTypeID IS NULL
                  )
              AND (
                      per.idfsBaseReference = @TimeIntervalTypeID
                      OR @TimeIntervalTypeID IS NULL
                  )
              AND (
                      ac.datStartDate >= @StartDate
                      OR @StartDate IS NULL
                  )
              AND (
                      ac.datFinishDate <= @EndDate
                      OR @EndDate IS NULL
                  )
              AND (CASE
                       WHEN @AdministrativeUnitID IS NULL THEN
                           1
                       WHEN g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                            OR (
                                   ac.idfOffice = @AdministrativeUnitID
                                   AND @AdministrativeUnitTypeID = 10089005
                               ) THEN
                           1
                       ELSE
                           0
                   END = 1
                  )
              AND (
                      ac.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                      OR @ReportID IS NULL
                  )
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = ac.idfsSite
        )
        GROUP BY ac.idfAggrCase,
                 ac.idfsSite;

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT ac.idfAggrCase
            FROM dbo.tlbAggrCase ac
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = ac.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT res.ID,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator)
        FROM @Results res
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
        GROUP BY res.ID;

        WITH paging
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'ReportID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ac.strCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ReportID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ac.strCaseID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'StartDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ac.datStartDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'StartDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ac.datStartDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'TimeIntervalUnitTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       per.strTextString
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'TimeIntervalUnitTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       per.strTextString
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel1Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       LH.AdminLevel2Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel1Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       LH.AdminLevel2Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       LH.AdminLevel3Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       LH.AdminLevel3Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'SettlementName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       LH.AdminLevel4Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'SettlementName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       LH.AdminLevel4Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'OrganizationAdministrativeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       organizationAdminUnit.AbbreviatedName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'OrganizationAdministrativeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       organizationAdminUnit.AbbreviatedName
                                               END DESC
                                     ) AS ROWNUM,
                   res.ID AS ReportKey,
                   ac.strCaseID AS ReportID,
                   receivedByOrganization.AbbreviatedName AS ReceivedByOrganizationName,
                   sentByOrganization.AbbreviatedName AS SentByOrganizationName,
                   enteredByOrganization.AbbreviatedName AS EnteredByOrganizationName,
                   ac.datReceivedByDate AS ReceivedByDate,
                   ac.datSentByDate AS SentByDate,
                   ac.datStartDate AS StartDate,
                   ac.datFinishDate AS EndDate,
                   AdminUnit.strDefault AS AdministrativeUnitTypeName,
                   lh.AdminLevel2Name AS AdministrativeLevel1Name,
                   lh.AdminLevel3Name AS AdministrativeLevel2Name,
                   lh.AdminLevel4Name AS SettlementName,
                   organizationAdminUnit.AbbreviatedName AS OrganizationAdministrativeName,
                   per.strTextString AS TimeIntervalUnitTypeName,
                   ac.idfsSite AS SiteID,
                   res.ReadPermissionIndicator AS ReadPermissionIndicator,
                   res.AccessToPersonalDataPermissionIndicator AS AccessToPersonalDataPermissionIndicator,
                   res.AccessToGenderAndAgeDataPermissionIndicator AS AccessToGenderAndAgeDataPermissionIndicator,
                   res.WritePermissionIndicator AS WritePermissionIndicator,
                   res.DeletePermissionIndicator AS DeletePermissionIndicator,
                   0 AS RowSelectionIndicator,
                   COUNT(*) OVER () AS RecordCount,
                   (
                       SELECT COUNT(*)
                       FROM dbo.tlbAggrCase
                       WHERE intRowStatus = 0
                             AND idfsAggrCaseType = @AggregateReportTypeID
                   ) AS TotalCount
            FROM @FinalResults res
                left JOIN dbo.tlbAggrCase ac
                    ON ac.idfAggrCase = res.ID
                LEFT JOIN dbo.FN_GBL_Institution_Min(@LanguageID) receivedByOrganization
                    ON ac.idfReceivedByOffice = receivedByOrganization.idfOffice
                LEFT JOIN dbo.FN_GBL_Institution_Min(@LanguageID) enteredByOrganization
                    ON ac.idfEnteredByOffice = enteredByOrganization.idfOffice
                LEFT JOIN dbo.FN_GBL_Institution_Min(@LanguageID) sentByOrganization
                    ON ac.idfSentByOffice = sentByOrganization.idfOffice
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = ac.idfsAdministrativeUnit
                INNER JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = ac.idfsAdministrativeUnit
                LEFT JOIN dbo.FN_GBL_Institution_Min(@LanguageID) organizationAdminUnit
                    ON ac.idfOffice = organizationAdminUnit.idfOffice
                LEFT JOIN dbo.trtBaseReference adminUnit
                    ON adminUnit.idfsBaseReference = CASE
                                                         WHEN NOT ac.idfOffice IS NULL THEN
                                                             10089005
                                                         WHEN NOT lh.AdminLevel4ID IS NULL THEN
                                                             10089004
                                                         WHEN NOT lh.AdminLevel3ID IS NULL THEN
                                                             10089002
                                                         WHEN NOT lh.AdminLevel2ID IS NULL THEN
                                                             10089003
                                                         WHEN NOT lh.AdminLevel1Id IS NULL THEN
                                                             10089001
                                                     END
                LEFT JOIN dbo.trtStringNameTranslation per
                    ON per.idfsBaseReference = CASE
                                                   WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091002 /* Day */
                                                   WHEN DATEDIFF(DAY, ac.datStartDate, ac.datFinishDate) = 6 THEN
                                                       10091004 /* Week - use datediff with day because datediff with week will return incorrect result if first day of the week in country differs from Sunday */
                                                   WHEN DATEDIFF(MONTH, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091001 /* Month */
                                                   WHEN DATEDIFF(QUARTER, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091003 /* Quarter */
                                                   WHEN DATEDIFF(YEAR, ac.datStartDate, ac.datFinishDate) = 0 THEN
                                                       10091005 /* Year */
                                               END
                       AND per.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
           )
        SELECT ReportKey,
               ReportID,
               ReceivedByOrganizationName,
               SentByOrganizationName,
               EnteredByOrganizationName,
               ReceivedByDate,
               SentByDate,
               StartDate,
               EndDate,
               AdministrativeUnitTypeName,
               AdministrativeLevel1Name,
               AdministrativeLevel2Name,
               SettlementName,
               OrganizationAdministrativeName,
               TimeIntervalUnitTypeName,
               SiteID,
               CASE
                   WHEN ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               RowSelectionIndicator,
               RecordCount,
               TotalCount,
               CurrentPage = @PageNumber,
               TotalPages = (RecordCount / @PageSize) + IIF(RecordCount % @PageSize > 0, 1, 0)
        FROM paging
        WHERE RowNum > @firstRec
              AND RowNum < @lastRec;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_HUMAN_MASTER_GETDetail]...';


GO
-- ================================================================================================
-- Name: USP_HUM_HUMAN_MASTER_GETDetail OLD
--
-- Description:	Get a human actual record
--          
-- Revision History:
-- Name				Date		Change Detail
-- ---------------	----------	--------------------------------------------------------------------
-- Mandar Kulkarni				Initial release.
-- Vilma Thomas		05/25/2018	Update the ReferenceType key from 19000167 to 19000500 for 'Contact 
--								Phone Type'
-- Stephen Long		11/26/2018	Update for the new API; remove returnCode and returnMsg.
-- Ann Xiong		08/30/2019	Added script to select PersonalIDTypeName, OccupationTypeName, 
--								SchoolCountry, 
--								SchoolRegion, SchoolRayon, SchoolSettlement for Person Deduplication.
-- Ann Xiong		09/09/2019	return haai.SchoolAddressID instead of haai.AltAddressID as 
--								SchoolGeoLocationID
-- Mark Wilson		10/29/2019	added Settlement Type to return
-- Ann Xiong		02/17/2020	Added IsAnotherPhone and Age to select
-- Ann Xiong		05/08/2020	Added YNAnotherAddress, YNHumanForeignAddress, 
--								YNEmployerForeignAddress, YNHumanAltForeignAddress, 
--								YNSchoolForeignAddress, YNWorkSameAddress to select
-- Stephen Long		07/07/2020	Changed v6.1 function call for create address string to v7 version.
-- Mark Wilson		09/20/2021	reworked the locations to use gisLocation and hierarchy
-- Mark Wilson		10/04/2021	Updated to pull location data from correct table
-- Mark Wilson		10/05/2021	Updated to use correct location references and udpate test code
-- Mark Wilson		10/06/2021	Added Alt Address fields
-- Mark Wilson		10/07/2021	Lat/Long only needed for Current Address and Foreign Address not needed for Permanent
-- Mark Wilson		10/12/2021  Added YNPermanentSameAddress, updated YNAnotherAddress
-- Leo Tracchia		05/13/2022	Added joins for Location hierachy
-- Ann Xiong		03/24/2020	Modified to return Age from DateofBirth for Person Deduplication when DateofBirth is not null but haai.ReportedAge and haai.ReportedAgeUOMID are null
--
/*Test Code

EXEC dbo.USP_HUM_HUMAN_MASTER_GETDetail
	@LangID = 'en-US',
	@HumanMasterID = 422849750000916


EXEC dbo.USP_HUM_HUMAN_MASTER_GETDetail
	@LangID = 'az-Latn-AZ',
	@HumanMasterID = 411420970000870


EXEC dbo.USP_HUM_HUMAN_MASTER_GETDetail
	@LangID = 'en-US',
	@HumanMasterID = 413771740000870

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_HUMAN_MASTER_GETDetail] (
	@LangID NVARCHAR(20),
	@HumanMasterID BIGINT
	)
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY
		SELECT ISNULL(ha.strFirstName, '') + ' ' + ISNULL(ha.strLastName, '') AS PatientFarmOwnerName,
			haai.EIDSSPersonId AS EIDSSPersonID,
			ha.idfsOccupationType AS OccupationTypeID,
			ha.idfsNationality AS CitizenshipTypeID,
			citizenshipType.name AS CitizenshipTypeName,
			ha.idfsHumanGender AS GenderTypeID,
			tb.name AS GenderTypeName,

			-- Current Address
			ha.idfCurrentResidenceAddress AS HumanGeoLocationID,
			lhHuman.AdminLevel1ID AS HumanidfsCountry,
			lhHuman.AdminLevel1Name AS HumanCountry,
			lhHuman.AdminLevel2ID AS HumanidfsRegion,
			lhHuman.AdminLevel2Name AS HumanRegion,
			lhHuman.AdminLevel3ID AS HumanidfsRayon,
			lhHuman.AdminLevel3Name AS HumanRayon,
			lhHuman.AdminLevel4ID AS HumanidfsSettlement,
			lhHuman.AdminLevel4Name AS HumanSettlement,			
			HL.idfsType AS HumanidfsSettlementType,
			humanSettlementType.[name] AS HumanSettlementType,
			tglHuman.strPostCode AS HumanstrPostalCode,
			tglHuman.strStreetName AS HumanstrStreetName,
			tglHuman.strHouse AS HumanstrHouse,
			tglHuman.strBuilding AS HumanstrBuilding,
			tglHuman.strApartment AS HumanstrApartment,
			tglHuman.strDescription AS HumanDescription,
			tglHuman.dblLatitude AS HumanstrLatitude,
			tglHuman.dblLongitude AS HumanstrLongitude,
			tglHuman.blnForeignAddress AS HumanForeignAddressIndicator,
			tglHuman.strForeignAddress AS HumanForeignAddressString,

			-- Employer Address
			ha.idfEmployerAddress AS EmployerGeoLocationID,
			lhEmployer.AdminLevel1ID AS EmployeridfsCountry,
			lhEmployer.AdminLevel1Name AS EmployerCountry,
			lhEmployer.AdminLevel2ID AS EmployeridfsRegion,
			lhEmployer.AdminLevel2Name AS EmployerRegion,
			lhEmployer.AdminLevel3ID AS EmployeridfsRayon,
			lhEmployer.AdminLevel3Name AS EmployerRayon,
			lhEmployer.AdminLevel4ID AS EmployeridfsSettlement,
			lhEmployer.AdminLevel4Name AS EmployerSettlement,
			EA.idfsType AS EmployeridfsSettlementType,
			EmpSettlementType.strDefault AS EmployerSettlementType,
			tglEmployer.strPostCode AS EmployerstrPostalCode,
			tglEmployer.strStreetName AS EmployerstrStreetName,
			tglEmployer.strHouse AS EmployerstrHouse,
			tglEmployer.strBuilding AS EmployerstrBuilding,
			tglEmployer.strApartment AS EmployerstrApartment,
			tglEmployer.strDescription AS EmployerDescription,
			tglEmployer.blnForeignAddress AS EmployerForeignAddressIndicator,
			tglEmployer.strForeignAddress AS EmployerForeignAddressString,

			-- Permanent Address
			ha.idfRegistrationAddress AS HumanPermGeoLocationID,
			lhPerm.AdminLevel1ID AS HumanPermidfsCountry,
			lhPerm.AdminLevel1Name AS HumanPermCountry,
			lhPerm.AdminLevel2ID AS HumanPermidfsRegion,
			lhPerm.AdminLevel2Name AS HumanPermRegion,
			lhPerm.AdminLevel3ID AS HumanPermidfsRayon,
			lhPerm.AdminLevel3Name AS HumanPermRayon,
			lhPerm.AdminLevel4ID HumanPermidfsSettlement,
			lhPerm.AdminLevel4Name AS HumanPermSettlement,
			registrationLocation.idfsType AS HumanPermidfsSettlementType,
			registrationSettlementType.[name] AS HumanPermSettlementType,
			tglRegistrationAddress.strPostCode AS HumanPermstrPostalCode,
			tglRegistrationAddress.strStreetName AS HumanPermstrStreetName,
			tglRegistrationAddress.strHouse AS HumanPermstrHouse,
			tglRegistrationAddress.strBuilding AS HumanPermstrBuilding,
			tglRegistrationAddress.strApartment AS HumanPermstrApartment,
			tglRegistrationAddress.strDescription AS HumanPermDescription,

			-- Alternate Address
			haai.AltAddressID AS HumanAltGeoLocationID,
			lhAlt.AdminLevel1ID AS HumanAltidfsCountry,
			lhAlt.AdminLevel1Name AS HumanAltCountry,
			lhAlt.AdminLevel2ID AS HumanAltidfsRegion,
			lhAlt.AdminLevel2Name AS HumanAltRegion,
			lhAlt.AdminLevel3ID AS HumanAltidfsRayon,
			lhAlt.AdminLevel3Name AS HumanAltRayon,
			lhAlt.AdminLevel4ID HumanAltidfsSettlement,
			lhAlt.AdminLevel4Name AS HumanAltSettlement,
			AltLocation.idfsType AS HumanAltidfsSettlementType,
			AltSettlementType.[name] AS HumanAltSettlementType,
			tglAlt.strPostCode AS HumanAltstrPostalCode,
			tglAlt.strStreetName AS HumanAltstrStreetName,
			tglAlt.strHouse AS HumanAltstrHouse,
			tglAlt.strBuilding AS HumanAltstrBuilding,
			tglAlt.strApartment AS HumanAltstrApartment,
			tglAlt.strDescription AS HumanAltDescription,
			tglAlt.blnForeignAddress AS HumanAltForeignAddressIndicator,
			tglAlt.strForeignAddress AS HumanAltForeignAddressString,

			-- School Address
			haai.SchoolAddressID AS SchoolGeoLocationID,
			lhSchool.AdminLevel1ID AS SchoolidfsCountry,
			lhSchool.AdminLevel1Name AS SchoolCountry,
			lhSchool.AdminLevel2ID AS SchoolidfsRegion,
			lhSchool.AdminLevel2Name AS SchoolRegion,
			lhSchool.AdminLevel3ID AS SchoolidfsRayon,
			lhSchool.AdminLevel3Name AS SchoolRayon,
			lhSchool.AdminLevel4ID AS SchoolidfsSettlement,
			lhSchool.AdminLevel4Name AS SchoolSettlement,
			SchoolLocation.idfsType AS SchoolAltidfsSettlementType,
			SchoolSettlementType.strDefault AS SchoolAltSettlementType,
			tglSchool.strPostCode AS SchoolstrPostalCode,
			tglSchool.strStreetName AS SchoolstrStreetName,
			tglSchool.strHouse AS SchoolstrHouse,
			tglSchool.strBuilding AS SchoolstrBuilding,
			tglSchool.strApartment AS SchoolstrApartment,
			tglSchool.blnForeignAddress AS SchoolForeignAddressIndicator,
			tglSchool.strForeignAddress AS SchoolForeignAddressString,

			dbo.FN_GBL_FormatDate(ha.datDateofBirth, 'mm/dd/yyyy') AS DateOfBirth,
			dbo.FN_GBL_FormatDate(ha.datDateOfDeath, 'mm/dd/yyyy') AS DateOfDeath,
			dbo.FN_GBL_FormatDate(ha.datEnteredDate, 'mm/dd/yyyy') AS EnteredDate,
			dbo.FN_GBL_FormatDate(ha.datModificationDate, 'mm/dd/yyyy') AS ModificationDate,
			ha.strFirstName AS FirstOrGivenName,
			ha.strSecondName AS SecondName,
			ha.strLastName AS LastOrSurname,
			ha.strEmployerName AS EmployerName,
			ha.strHomePhone AS HomePhone,
			ha.strWorkPhone AS WorkPhone,
			ha.idfsPersonIDType AS PersonalIDType,
			ha.strPersonID AS PersonalID,
			haai.ReportedAge,
			haai.ReportedAgeUOMID,
			haai.PassportNbr AS PassportNumber,
			haai.IsEmployedID AS IsEmployedTypeID,
			isEmployed.name AS IsEmployedTypeName,
			haai.EmployerPhoneNbr AS EmployerPhone,
			haai.EmployedDTM AS EmployedDateLastPresent,
			haai.IsStudentID AS IsStudentTypeID,
			isStudent.name AS IsStudentTypeName,
			haai.SchoolName AS SchoolName,
			haai.SchoolLastAttendDTM AS SchoolDateLastAttended,
			haai.SchoolPhoneNbr AS SchoolPhone,
			haai.ContactPhoneCountryCode,
			haai.ContactPhoneNbr AS ContactPhone,
			haai.ContactPhoneNbrTypeID AS ContactPhoneTypeID,
			ContactPhoneNbrTypeID.name AS ContactPhoneTypeName,
			haai.ContactPhone2CountryCode,
			haai.ContactPhone2Nbr AS ContactPhone2,
			haai.ContactPhone2NbrTypeID AS ContactPhone2TypeID,
			ContactPhone2NbrTypeID.name AS ContactPhone2TypeName,
			personalIDType.name AS PersonalIDTypeName,
			occupationType.name AS OccupationTypeName,
			CASE 
				WHEN haai.ContactPhone2Nbr IS NULL
					AND haai.ContactPhone2NbrTypeID IS NULL
					THEN 'No'
				ELSE 'Yes'
				END AS IsAnotherPhone,
			--CAST(ISNULL(haai.ReportedAge, '') AS VARCHAR(3)) + ' ' + ISNULL(HumanAgeType.name, '') AS Age,
			--CASE 
			--	WHEN haai.ReportedAge IS NULL AND haai.ReportedAgeUOMID IS NULL
			--		THEN (CASE 
			--				WHEN ha.datDateofBirth IS NOT NULL					
			--					THEN CAST(FLOOR(DATEDIFF(DAY, ha.datDateofBirth, GETDATE ())/365.242199) AS VARCHAR(3)) + ' ' + HumanAgeType.name
			--				ELSE ''
			--				END)
			--	ELSE CAST(ISNULL(haai.ReportedAge, '') AS VARCHAR(3)) + ' ' + ISNULL(HumanAgeType.name, '')
			--	END AS Age,
			CASE 
				WHEN ha.datDateofBirth IS NULL OR ha.datDateofBirth = '' THEN ''
				ELSE CASE
					WHEN HumanAgeType.idfsReference = 10042001 THEN CAST(DATEDIFF(DAY,ha.datDateofBirth,ha.datEnteredDate) AS VARCHAR(3))  
					WHEN HumanAgeType.idfsReference = 10042002 THEN CAST(DATEDIFF(MONTH,ha.datDateofBirth,ha.datEnteredDate) AS VARCHAR(3))  
					WHEN HumanAgeType.idfsReference = 10042004 THEN CAST(DATEDIFF(WEEK,ha.datDateofBirth,ha.datEnteredDate) AS VARCHAR(3)) 
					ELSE CAST(DATEDIFF(YEAR,ha.datDateofBirth,ha.datEnteredDate) AS VARCHAR(3)) 
				END + ' ' + ISNULL(HumanAgeType.name, '') 			
			END AS Age,
			CASE 
				WHEN ((ha.idfRegistrationAddress IS NOT NULL AND ha.idfRegistrationAddress > 0) OR (haai.AltAddressID IS NOT NULL AND haai.AltAddressID > 0))
					THEN 'Yes'
				ELSE 'No'
				END AS YNAnotherAddress,
			CASE 
				WHEN tglHuman.blnForeignAddress IS NOT NULL
					AND tglHuman.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNHumanForeignAddress,
			CASE 
				WHEN tglEmployer.blnForeignAddress IS NOT NULL
					AND tglEmployer.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNEmployerForeignAddress,
			CASE 
				WHEN tglRegistrationAddress.blnForeignAddress IS NOT NULL
					AND tglRegistrationAddress.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNHumPermForeignAddress,
			CASE 
				WHEN tglAlt.blnForeignAddress IS NOT NULL
					AND tglAlt.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNHumanAltForeignAddress,
			CASE 
				WHEN tglSchool.blnForeignAddress IS NOT NULL
					AND tglSchool.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNSchoolForeignAddress,
			CASE 
				WHEN dbo.FN_GBL_CreateAddressString(ISNULL(lhHuman.AdminLevel1Name, N''), ISNULL(lhHuman.AdminLevel2Name, N''), ISNULL(lhHuman.AdminLevel3Name, N''), ISNULL(tglHuman.strPostCode, N''), ISNULL(humanSettlementType.strDefault, N''), ISNULL(lhHuman.AdminLevel4Name, N''), ISNULL(tglHuman.strStreetName, N''), ISNULL(tglHuman.strHouse, N''), ISNULL(tglHuman.strBuilding, N''), ISNULL(tglHuman.strApartment, N''), ISNULL(tglHuman.blnForeignAddress, N''), ISNULL(tglHuman.strForeignAddress, N'')) = 
						dbo.FN_GBL_CreateAddressString(ISNULL(lhEmployer.AdminLevel1Name, N''), ISNULL(lhEmployer.AdminLevel2Name, N''), ISNULL(lhEmployer.AdminLevel3Name, N''), ISNULL(tglEmployer.strPostCode, N''), ISNULL(EmpSettlementType.strDefault, N''), ISNULL(lhEmployer.AdminLevel4Name, N''), ISNULL(tglEmployer.strStreetName, N''), ISNULL(tglEmployer.strHouse, N''), ISNULL(tglEmployer.strBuilding, N''), ISNULL(tglEmployer.strApartment, N''), ISNULL(tglEmployer.blnForeignAddress, N''), ISNULL(tglEmployer.strForeignAddress, N''))
					THEN 'Yes'
				ELSE 'No'
				END AS YNWorkSameAddress,
			CASE 
				WHEN dbo.FN_GBL_CreateAddressString(ISNULL(lhHuman.AdminLevel1Name, N''), ISNULL(lhHuman.AdminLevel2Name, N''), ISNULL(lhHuman.AdminLevel3Name, N''), ISNULL(tglHuman.strPostCode, N''), ISNULL(humanSettlementType.strDefault, N''), ISNULL(lhHuman.AdminLevel4Name, N''), ISNULL(tglHuman.strStreetName, N''), ISNULL(tglHuman.strHouse, N''), ISNULL(tglHuman.strBuilding, N''), ISNULL(tglHuman.strApartment, N''), ISNULL(tglHuman.blnForeignAddress, N''), ISNULL(tglHuman.strForeignAddress, N'')) = 
						dbo.FN_GBL_CreateAddressString(ISNULL(lhPerm.AdminLevel1Name, N''), ISNULL(lhPerm.AdminLevel2Name, N''), ISNULL(lhPerm.AdminLevel3Name, N''), ISNULL(tglRegistrationAddress.strPostCode, N''), ISNULL(registrationSettlementType.strDefault, N''), ISNULL(lhPerm.AdminLevel4Name, N''), ISNULL(tglRegistrationAddress.strStreetName, N''), ISNULL(tglRegistrationAddress.strHouse, N''), ISNULL(tglRegistrationAddress.strBuilding, N''), ISNULL(tglRegistrationAddress.strApartment, N''), ISNULL(tglRegistrationAddress.blnForeignAddress, N''), ISNULL(tglRegistrationAddress.strForeignAddress, N''))
					THEN 'Yes'
				ELSE 'No'
				END AS YNPermanentSameAddress 

		FROM dbo.tlbHumanActual ha

		LEFT JOIN dbo.HumanActualAddlinfo haai ON ha.idfHumanActual = haai.HumanActualAddlinfoUID
		LEFT JOIN dbo.tlbGeoLocationShared AS tglHuman ON ha.idfCurrentResidenceAddress = tglHuman.idfGeoLocationShared
		LEFT JOIN dbo.tlbGeoLocationShared AS tglEmployer ON ha.idfEmployerAddress = tglEmployer.idfGeoLocationShared
		LEFT JOIN dbo.tlbGeoLocationShared AS tglRegistrationAddress ON ha.idfRegistrationAddress = tglRegistrationAddress.idfGeoLocationShared
		LEFT JOIN dbo.tlbGeoLocationShared AS tglSchool ON haai.SchoolAddressID = tglSchool.idfGeoLocationShared
		LEFT JOIN dbo.tlbGeoLocationShared AS tglAlt ON haai.AltAddressID = tglAlt.idfGeoLocationShared
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000043) tb ON tb.idfsReference = ha.idfsHumanGender

		-- Current Address
		LEFT JOIN dbo.gisLocation HL ON HL.idfsLocation = tglHuman.idfsLocation	
		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhHuman ON lhHuman.idfsLocation = tglHuman.idfsLocation			
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001) AS humanCountry ON HL.node.IsDescendantOf(humanCountry.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003) AS humanRegion ON HL.node.IsDescendantOf(humanRegion.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000002) AS humanRayon ON HL.node.IsDescendantOf(humanRayon.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000004) AS humanSettlement ON HL.node.IsDescendantOf(humanSettlement.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS humanSettlementType ON humanSettlementType.idfsReference = HL.idfsType

		-- Employer address 
		LEFT JOIN dbo.gisLocation EA ON EA.idfsLocation = tglEmployer.idfsLocation
		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhEmployer ON lhEmployer.idfsLocation = tglEmployer.idfsLocation		
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001) AS ECountry ON EA.node.IsDescendantOf(Ecountry.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003) AS ERegion ON EA.node.IsDescendantOf(ERegion.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000002) AS ERayon ON EA.node.IsDescendantOf(ERayon.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000004) AS ESettlement ON EA.node.IsDescendantOf(ESettlement.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS EmpSettlementType ON EmpSettlementType.idfsReference = EA.idfsType

		-- Permanent address 
		LEFT JOIN dbo.gisLocation registrationLocation ON registrationLocation.idfsLocation = tglRegistrationAddress.idfsLocation
		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhPerm ON lhPerm.idfsLocation = tglRegistrationAddress.idfsLocation		
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001) AS registrationCountry ON registrationLocation.node.IsDescendantOf(registrationCountry.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003) AS registrationRegion ON registrationLocation.node.IsDescendantOf(registrationRegion.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000002) AS registrationRayon ON registrationLocation.node.IsDescendantOf(registrationRayon.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000004) AS registrationSettlement ON registrationLocation.node.IsDescendantOf(registrationSettlement.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS registrationSettlementType ON registrationSettlementType.idfsReference = registrationLocation.idfsType

		-- Alternate address - new for EIDSS7
		LEFT JOIN dbo.gisLocation AltLocation ON AltLocation.idfsLocation = tglAlt.idfsLocation
		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhAlt ON lhAlt.idfsLocation = tglAlt.idfsLocation		
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001) AS AltCountry ON AltLocation.node.IsDescendantOf(AltCountry.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003) AS AltRegion ON AltLocation.node.IsDescendantOf(AltRegion.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000002) AS AltRayon ON AltLocation.node.IsDescendantOf(AltRayon.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000004) AS AltSettlement ON AltLocation.node.IsDescendantOf(AltSettlement.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS AltSettlementType ON AltSettlementType.idfsReference = AltLocation.idfsType

		LEFT JOIN dbo.FN_GBL_Repair(@LangID, 19000100) isEmployed ON IsEmployed.idfsReference = haai.IsEmployedID
		LEFT JOIN dbo.FN_GBL_Repair(@LangID, 19000100) isStudent ON isStudent.idfsReference = haai.IsStudentID
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000054) AS citizenshipType ON ha.idfsNationality = citizenshipType.idfsReference
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000500) AS contactPhoneNbrTypeID ON contactPhoneNbrTypeID.idfsReference = haai.ContactPhoneNbrTypeID
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000500) AS contactPhone2NbrTypeID ON contactPhone2NbrTypeID.idfsReference = haai.ContactPhone2NbrTypeID
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000148) AS personalIDType ON ha.idfsPersonIDType = personalIDType.idfsReference
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000061) AS occupationType ON ha.idfsOccupationType = occupationType.idfsReference

		-- School address - E6 school address was originally stored in idfEmployerAddress with employment type = 'Student'
		LEFT JOIN dbo.gisLocation SchoolLocation ON SchoolLocation.idfsLocation = tglSchool.idfsLocation
		LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) lhSchool ON lhSchool.idfsLocation = tglSchool.idfsLocation		
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001) AS schoolCountry ON SchoolLocation.node.IsDescendantOf(schoolCountry.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003) AS schoolRegion ON SchoolLocation.node.IsDescendantOf(schoolRegion.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000002) AS schoolRayon ON SchoolLocation.node.IsDescendantOf(schoolRayon.node) = 1
		--LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000004) AS schoolSettlement ON SchoolLocation.node.IsDescendantOf(schoolSettlement.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LangID, 19000005) AS schoolSettlementType ON schoolSettlementType.idfsReference = SchoolLocation.idfsType


		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000042) AS HumanAgeType	ON (haai.ReportedAgeUOMID = HumanAgeType.idfsReference Or HumanAgeType.idfsReference = 10042003)



		WHERE ha.idfHumanActual = @HumanMasterID;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_HUMAN_MASTER_GETDetail_FROM_HUMAN_ID]...';


GO
-- ================================================================================================
-- Name: USP_HUM_HUMAN_MASTER_GETDetail_FROM_HUMAN_ID 
--
-- Description:	Get a human  record details from Human ID
--          
-- Revision History:
-- Name            Date			Change Detail
-- --------------- ----------	--------------------------------------------------------------------
-- Mandar Kulkarni				Initial release.
-- Vilma Thomas		05/25/2018	Update the ReferenceType key from 19000167 to 19000500 for 'Contact 
--								Phone Type'
-- Stephen Long		11/26/2018	Update for the new API; remove returnCode and returnMsg.
-- Ann Xiong		08/30/2019	Added script to select PersonalIDTypeName, OccupationTypeName, 
--								SchoolCountry, 
--								SchoolRegion, SchoolRayon, SchoolSettlement for Person Deduplication.
-- Ann Xiong		09/09/2019	return haai.SchoolAddressID instead of haai.AltAddressID as 
--								SchoolGeoLocationID
-- Mark Wilson		10/29/2019	added Settlement Type to return
-- Ann Xiong		02/17/2020	Added IsAnotherPhone and Age to select
-- Ann Xiong		05/08/2020	Added YNAnotherAddress, YNHumanForeignAddress, 
--								YNEmployerForeignAddress, YNHumanAltForeignAddress, 
--								YNSchoolForeignAddress, YNWorkSameAddress to select
-- Stephen Long		07/07/2020	Changed v6.1 function call for create address string to v7 version.
-- Lamont Mitchell	10/18/2020	Modified to use Human ID instead of HumanActual ID fto get letest Human Records
-- Mark Wilson		09/21/2021	reworked the locations to use gisLocation and hierarchy
-- Mike Kornegay	01/31/2023	Corrected contact information to point to HumanAddlInfo instead of HumanActualAddlInfo
--
-- Sample code:
/*
EXEC dbo.USP_HUM_HUMAN_MASTER_GETDetail_FROM_HUMAN_ID
	'en-US',
	203840000126



*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_HUMAN_MASTER_GETDetail_FROM_HUMAN_ID] (
	@LanguageID NVARCHAR(20),
	@HumanID BIGINT
	)
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY
		SELECT ISNULL(ha.strFirstName, '') + ' ' + ISNULL(ha.strLastName, '') AS PatientFarmOwnerName,
			ha.idfHumanActual AS HumanActualId,
			hm.idfHuman AS HumanId,
			ha.strPersonID AS EIDSSPersonID,
			hm.idfsOccupationType AS OccupationTypeID,
			hm.idfsNationality AS CitizenshipTypeID,
			citizenshipType.name AS CitizenshipTypeName,
			hm.idfsHumanGender AS GenderTypeID,
			tb.name AS GenderTypeName,
			hm.idfCurrentResidenceAddress AS HumanGeoLocationID,
			tglHuman.idfsCountry AS HumanidfsCountry,
			humanCountry.name AS HumanCountry,
			tglHuman.idfsRegion AS HumanidfsRegion,
			humanRegion.name AS HumanRegion,
			tglHuman.idfsRayon AS HumanidfsRayon,
			humanRayon.name AS HumanRayon,
			tglHuman.idfsSettlement AS HumanidfsSettlement,
			humanSettlement.name AS HumanSettlement,
			humanSettlement.idfsType AS HumanidfsSettlementType,
			humanSettlementType.strDefault AS HumanSettlementType,
			tglHuman.strPostCode AS HumanstrPostalCode,
			tglHuman.strStreetName AS HumanstrStreetName,
			tglHuman.strHouse AS HumanstrHouse,
			tglHuman.strBuilding AS HumanstrBuilding,
			tglHuman.strApartment AS HumanstrApartment,
			tglHuman.strDescription AS HumanDescription,
			tglHuman.dblLatitude AS HumanstrLatitude,
			tglHuman.dblLongitude AS HumanstrLongitude,
			tglHuman.blnForeignAddress AS HumanForeignAddressIndicator,
			tglHuman.strForeignAddress AS HumanForeignAddressString,
			hm.idfEmployerAddress AS EmployerGeoLocationID,
			ECountry.idfsReference AS EmployeridfsCountry,
			ECountry.[name] AS EmployerCountry,
			ERegion.idfsReference AS EmployeridfsRegion,
			ERegion.[name] AS EmployerRegion,
			ERayon.idfsReference AS EmployeridfsRayon,
			ERayon.[name] AS EmployerRayon,
			ESettlement.idfsReference AS EmployeridfsSettlement,
			ESettlement.[name] AS EmployerSettlement,
			ESettlement.idfsType AS EmployeridfsSettlementType,
			EmpSettlementType.strDefault AS EmployerSettlementType,
			tglEmployer.strPostCode AS EmployerstrPostalCode,
			tglEmployer.strStreetName AS EmployerstrStreetName,
			tglEmployer.strHouse AS EmployerstrHouse,
			tglEmployer.strBuilding AS EmployerstrBuilding,
			tglEmployer.strApartment AS EmployerstrApartment,
			tglEmployer.strDescription AS EmployerDescription,
			tglEmployer.dblLatitude AS EmployerstrLatitude,
			tglEmployer.dblLongitude AS EmployerstrLongitude,
			tglEmployer.blnForeignAddress AS EmployerForeignAddressIndicator,
			tglEmployer.strForeignAddress AS EmployerForeignAddressString,
			hm.idfRegistrationAddress AS HumanAltGeoLocationID,
			registrationCountry.idfsReference AS HumanAltidfsCountry,
			registrationCountry.[name] AS HumanAltCountry,
			registrationRegion.idfsReference AS HumanAltidfsRegion,
			registrationRegion.[name] AS HumanAltRegion,
			registrationRayon.idfsReference AS HumanAltidfsRayon,
			registrationRayon.[name] AS HumanAltRayon,
			registrationSettlement.idfsReference HumanAltidfsSettlement,
			registrationSettlement.[name] AS HumanAltSettlement,
			registrationSettlement.idfsType AS HumanAltidfsSettlementType,
			registrationSettlementType.[name] AS HumanAltSettlementType,
			tglRegistrationAddress.strPostCode AS HumanAltstrPostalCode,
			tglRegistrationAddress.strStreetName AS HumanAltstrStreetName,
			tglRegistrationAddress.strHouse AS HumanAltstrHouse,
			tglRegistrationAddress.strBuilding AS HumanAltstrBuilding,
			tglRegistrationAddress.strApartment AS HumanAltstrApartment,
			tglRegistrationAddress.strDescription AS HumanAltDescription,
			tglRegistrationAddress.dblLatitude AS HumanAltstrLatitude,
			tglRegistrationAddress.dblLongitude AS HumanAltstrLongitude,
			tglRegistrationAddress.blnForeignAddress AS HumanAltForeignAddressIndicator,
			tglRegistrationAddress.strForeignAddress AS HumanAltForeignAddressString,
			haai.SchoolAddressID AS SchoolGeoLocationID,
			schoolCountry.idfsReference AS SchoolidfsCountry,
			schoolRegion.idfsReference AS SchoolidfsRegion,
			schoolRayon.idfsReference AS SchoolidfsRayon,
			schoolSettlement.idfsReference AS SchoolidfsSettlement,
			schoolSettlement.idfsType AS SchoolAltidfsSettlementType,
			SchoolSettlementType.strDefault AS SchoolAltSettlementType,
			tglSchool.strPostCode AS SchoolstrPostalCode,
			tglSchool.strStreetName AS SchoolstrStreetName,
			tglSchool.strHouse AS SchoolstrHouse,
			tglSchool.strBuilding AS SchoolstrBuilding,
			tglSchool.strApartment AS SchoolstrApartment,
			tglSchool.blnForeignAddress AS SchoolForeignAddressIndicator,
			tglSchool.strForeignAddress AS SchoolForeignAddressString,
			dbo.FN_GBL_FormatDate(ha.datDateofBirth, 'mm/dd/yyyy') AS DateOfBirth,
			dbo.FN_GBL_FormatDate(ha.datDateOfDeath, 'mm/dd/yyyy') AS DateOfDeath,
			dbo.FN_GBL_FormatDate(ha.datEnteredDate, 'mm/dd/yyyy') AS EnteredDate,
			dbo.FN_GBL_FormatDate(ha.datModificationDate, 'mm/dd/yyyy') AS ModificationDate,
			hm.strFirstName AS FirstOrGivenName,
			hm.strSecondName AS SecondName,
			hm.strLastName AS LastOrSurname,
			hm.strEmployerName AS EmployerName,
			hm.strHomePhone AS HomePhone,
			hm.strWorkPhone AS WorkPhone,
			hm.idfsPersonIDType AS PersonalIDType,
			ha.strPersonID AS PersonalID,
			haai.ReportedAge,
			haai.ReportedAgeUOMID,
			haai.PassportNbr AS PassportNumber,
			haai.IsEmployedID AS IsEmployedTypeID,
			isEmployed.name AS IsEmployedTypeName,
			haai.EmployerPhoneNbr AS EmployerPhone,
			haai.EmployedDTM AS EmployedDateLastPresent,
			haai.IsStudentID AS IsStudentTypeID,
			isStudent.name AS IsStudentTypeName,
			haai.SchoolName AS SchoolName,
			haai.SchoolLastAttendDTM AS SchoolDateLastAttended,
			haai.SchoolPhoneNbr AS SchoolPhone,
			haai.ContactPhoneCountryCode,
			haai.ContactPhoneNbr AS ContactPhone,
			haai.ContactPhoneNbrTypeID AS ContactPhoneTypeID,
			ContactPhoneNbrTypeID.name AS ContactPhoneTypeName,
			haai.ContactPhone2CountryCode,
			haai.ContactPhone2Nbr AS ContactPhone2,
			haai.ContactPhone2NbrTypeID AS ContactPhone2TypeID,
			ContactPhone2NbrTypeID.name AS ContactPhone2TypeName,
			personalIDType.name AS PersonalIDTypeName,
			occupationType.name AS OccupationTypeName,
			schoolCountry.name AS SchoolCountry,
			schoolRegion.name AS SchoolRegion,
			schoolRayon.name AS SchoolRayon,
			schoolSettlement.name AS SchoolSettlement,
			CASE 
				WHEN haai.ContactPhone2Nbr IS NULL
					AND haai.ContactPhone2NbrTypeID IS NULL
					THEN 'No'
				ELSE 'Yes'
				END AS IsAnotherPhone,
			--CAST(ISNULL(haai.ReportedAge, '') AS VARCHAR(3)) + ' ' + ISNULL(HumanAgeType.name, '') AS Age,
			CASE 
				WHEN ha.datDateofBirth IS NULL OR ha.datDateofBirth = '' THEN ''
				ELSE CASE
					WHEN HumanAgeType.idfsReference = 10042001 THEN CAST(DATEDIFF(DAY,ha.datDateofBirth,ha.datEnteredDate) AS VARCHAR(3))  
					WHEN HumanAgeType.idfsReference = 10042002 THEN CAST(DATEDIFF(MONTH,ha.datDateofBirth,ha.datEnteredDate) AS VARCHAR(3))  
					WHEN HumanAgeType.idfsReference = 10042004 THEN CAST(DATEDIFF(WEEK,ha.datDateofBirth,ha.datEnteredDate) AS VARCHAR(3)) 
					ELSE CAST(DATEDIFF(YEAR,ha.datDateofBirth,ha.datEnteredDate) AS VARCHAR(3)) 
				END + ' ' + ISNULL(HumanAgeType.name, '') 			
			END AS Age,
			CASE 
				WHEN hm.idfRegistrationAddress IS NOT NULL
					AND hm.idfRegistrationAddress > 0
					THEN 'Yes'
				ELSE 'No'
				END AS YNAnotherAddress,
			CASE 
				WHEN tglHuman.blnForeignAddress IS NOT NULL
					AND tglHuman.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNHumanForeignAddress,
			CASE 
				WHEN tglEmployer.blnForeignAddress IS NOT NULL
					AND tglEmployer.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNEmployerForeignAddress,
			CASE 
				WHEN tglRegistrationAddress.blnForeignAddress IS NOT NULL
					AND tglRegistrationAddress.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNHumanAltForeignAddress,
			CASE 
				WHEN tglSchool.blnForeignAddress IS NOT NULL
					AND tglSchool.blnForeignAddress = 1
					THEN 'Yes'
				ELSE 'No'
				END AS YNSchoolForeignAddress,
			CASE 
				WHEN dbo.FN_GBL_CreateAddressString(ISNULL(humanCountry.name, N''), ISNULL(humanRegion.name, N''), ISNULL(humanRayon.name, N''), ISNULL(tglHuman.strPostCode, N''), ISNULL(humanSettlementType.strDefault, N''), ISNULL(humanSettlement.name, N''), ISNULL(tglHuman.strStreetName, N''), ISNULL(tglHuman.strHouse, N''), ISNULL(tglHuman.strBuilding, N''), ISNULL(tglHuman.strApartment, N''), ISNULL(tglHuman.blnForeignAddress, N''), ISNULL(tglHuman.strForeignAddress, N'')) = dbo.FN_GBL_CreateAddressString(ISNULL(ECountry.name, N''), ISNULL(ERegion.name, N''), ISNULL(ERayon.name, N''), ISNULL(tglEmployer.strPostCode, N''), ISNULL(EmpSettlementType.strDefault, N''), ISNULL(ESettlement.name, N''), ISNULL(tglEmployer.strStreetName, N''), ISNULL(tglEmployer.strHouse, N''), ISNULL(tglEmployer.strBuilding, N''), ISNULL(tglEmployer.strApartment, N''), ISNULL(tglEmployer.blnForeignAddress, N''), ISNULL(tglEmployer.strForeignAddress, N''))
					THEN 'Yes'
				ELSE 'No'
				END AS YNWorkSameAddress
		FROM dbo.tlbHuman hm
		JOIN dbo.tlbHumanActual ha ON ha.idfHumanActual = hm.idfHumanActual
		LEFT JOIN dbo.HumanAddlinfo haai ON hm.idfHuman = haai.HumanAdditionalInfo
		LEFT JOIN dbo.tlbGeoLocation AS tglHuman ON hm.idfCurrentResidenceAddress = tglHuman.idfGeoLocation
		LEFT JOIN dbo.tlbGeoLocation AS tglEmployer ON hm.idfEmployerAddress = tglEmployer.idfGeoLocation
		LEFT JOIN dbo.tlbGeoLocation AS tglRegistrationAddress ON hm.idfRegistrationAddress = tglRegistrationAddress.idfGeoLocation
		LEFT JOIN dbo.tlbGeoLocation AS tglSchool ON haai.SchoolAddressID = tglSchool.idfGeoLocation
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000043) tb ON tb.idfsReference = ha.idfsHumanGender

		-- joined to get human location
		LEFT JOIN dbo.gisLocation HL ON HL.idfsLocation = tglHuman.idfsLocation
		-- changed to FN_GBL_GIS_ReferenceRepair_GET from FN_GBL_GIS_Reference_GET
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000001) AS humanCountry ON HL.node.IsDescendantOf(humanCountry.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000003) AS humanRegion ON HL.node.IsDescendantOf(humanRegion.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000002) AS humanRayon ON HL.node.IsDescendantOf(humanRayon.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000004) AS humanSettlement ON HL.node.IsDescendantOf(humanSettlement.node) = 1
		-- MCW added to get Human settlement type
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LanguageID, 19000005) AS humanSettlementType ON humanSettlementType.idfsReference = humanSettlement.idfsType

		-- Employer location information
		LEFT JOIN dbo.gisLocation EA ON EA.idfsLocation = tglEmployer.idfsLocation
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000001) AS ECountry ON EA.node.IsDescendantOf(Ecountry.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000003) AS ERegion ON EA.node.IsDescendantOf(ERegion.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000002) AS ERayon ON EA.node.IsDescendantOf(ERayon.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000004) AS ESettlement ON EA.node.IsDescendantOf(ESettlement.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LanguageID, 19000005) AS EmpSettlementType ON EmpSettlementType.idfsReference = ESettlement.idfsType

		-- Registration information
		-- Employer location information
		LEFT JOIN dbo.gisLocation registrationLocation ON registrationLocation.idfsLocation = tglRegistrationAddress.idfsLocation
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000001) AS registrationCountry ON registrationLocation.node.IsDescendantOf(registrationCountry.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000003) AS registrationRegion ON registrationLocation.node.IsDescendantOf(registrationRegion.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000002) AS registrationRayon ON registrationLocation.node.IsDescendantOf(registrationRayon.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000004) AS registrationSettlement ON registrationLocation.node.IsDescendantOf(registrationSettlement.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LanguageID, 19000005) AS registrationSettlementType ON registrationSettlementType.idfsReference = registrationSettlement.idfsType

		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000100) isEmployed ON IsEmployed.idfsReference = haai.IsEmployedID
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000100) isStudent ON isStudent.idfsReference = haai.IsStudentID
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000054) AS citizenshipType ON ha.idfsNationality = citizenshipType.idfsReference
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000500) AS contactPhoneNbrTypeID ON contactPhoneNbrTypeID.idfsReference = haai.ContactPhoneNbrTypeID
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000500) AS contactPhone2NbrTypeID ON contactPhone2NbrTypeID.idfsReference = haai.ContactPhone2NbrTypeID
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000148) AS personalIDType ON ha.idfsPersonIDType = personalIDType.idfsReference
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000061) AS occupationType ON ha.idfsOccupationType = occupationType.idfsReference

		-- school information
		LEFT JOIN dbo.gisLocation SchoolLocation ON SchoolLocation.idfsLocation = tglSchool.idfsLocation
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000001) AS schoolCountry ON SchoolLocation.node.IsDescendantOf(schoolCountry.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000003) AS schoolRegion ON SchoolLocation.node.IsDescendantOf(schoolRegion.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000002) AS schoolRayon ON SchoolLocation.node.IsDescendantOf(schoolRayon.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000004) AS schoolSettlement ON SchoolLocation.node.IsDescendantOf(schoolSettlement.node) = 1
		LEFT JOIN dbo.FN_GBL_GIS_Reference(@LanguageID, 19000005) AS schoolSettlementType ON schoolSettlementType.idfsReference = schoolSettlement.idfsType

		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000042) AS HumanAgeType ON haai.ReportedAgeUOMID = HumanAgeType.idfsReference
		
		WHERE hm.idfHuman = @HumanID;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_APPROVAL_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_APPROVAL_ADVANCED_SEARCH_GETList
--
-- Description:	Get approval advanced search list for the laboratory module use case LUC13.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/27/2019 Initial relase.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/16/2020 Added sample and test list parameters and where clause criteria.
-- Stephen Long     04/20/2020 Removed farm and herd left joins.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/30/2020 Remove unneeded joins.
-- Stephen Long     11/30/2020 Changed site list to site ID and bigint and made required.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     11/18/2021 Added action requested ID to the query.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     01/03/2022 Corrected sample status type to use the correct field.
-- Stephen Long     02/10/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/11/2022 Changed monitoring session disease join from inner to left.
-- Stephen Long     08/12/2022 Removed where criteria for surveillance type of both; de-activated 
--                             base reference record.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     09/28/2022 Added translated value for action requested name.
-- Stephen Long     10/11/2022 Added check for closed batch test status to display test records 
--                             ready for validation.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     10/23/2022 Added check for non-laboratory test indicator of false.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/11/2023 Updated for site filtration queries.
-- Stephen Long     01/31/2023 Added coalesce on collection and entered dates.
-- Stephen Long     02/20/2023 Added sent to organization sent to site ID and where criteria.
-- Stephen Long     03/15/2023 Added narrow search criteria logic.
-- Stephen Long     04/24/2023 Bug fix for item 5738.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_APPROVAL_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT,
    @SentToOrganizationSiteID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @SampleList VARCHAR(MAX) = NULL,
    @TestList VARCHAR(MAX) = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @Results TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL INDEX c NONCLUSTERED,
        TestID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL INDEX c NONCLUSTERED,
        TestID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL,
        RowAction INT NOT NULL
            DEFAULT 0
    );
    DECLARE @NarrowResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL INDEX c NONCLUSTERED,
        TestID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL,
        RowAction INT NOT NULL
            DEFAULT 99
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @LanguageCode BIGINT,
            @SampleDeletion NVARCHAR(MAX),
            @SampleDestruction NVARCHAR(MAX),
            @TestDeletion NVARCHAR(MAX),
            @Validation NVARCHAR(MAX);
    DECLARE @SampleStatusTypeListTable TABLE (ID BIGINT NOT NULL PRIMARY KEY);
    BEGIN TRY
        IF @SampleStatusTypeList IS NOT NULL
            INSERT INTO @SampleStatusTypeListTable
            SELECT CAST([Value] AS BIGINT)
            FROM dbo.FN_GBL_SYS_SplitList(@SampleStatusTypeList, NULL, ',');

        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @LanguageCode = dbo.FN_GBL_LanguageCode_Get(@LanguageID);
        SET @SampleDeletion =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 812
        );
        SET @SampleDestruction =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 1040
        );
        SET @TestDeletion =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 4493
        );
        SET @Validation =
        (
            SELECT COALESCE(rt.strResourceString, r.strResourceName)
            FROM dbo.trtResource r
                LEFT JOIN dbo.trtResourceTranslation rt
                    ON rt.idfsResource = r.idfsResource
                       AND rt.idfsLanguage = @LanguageCode
                       AND rt.intRowStatus = 0
            WHERE r.idfsResource = 4492
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
        WHERE m.intRowStatus = 0
              AND (
                      m.idfsSampleStatus = 10015002 --Marked for Deletion 
                      OR m.idfsSampleStatus = 10015003 --Marked for Destruction
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND (
                      (
                          (
                              m.idfSendToOffice = @SentToOrganizationID
                              OR @SentToOrganizationID IS NULL
                          )
                          AND (
                                  (
                                      m.blnAccessioned = @AccessionedIndicatorList
                                      OR (
                                             m.blnAccessioned = 1
                                             AND m.datAccession IS NULL
                                             AND @AccessionedIndicatorList IS NOT NULL
                                         )
                                  )
                                  AND m.idfsAccessionCondition IS NULL
                                  AND m.idfsSampleStatus IS NULL
                                  AND m.datDestructionDate IS NULL
                                  OR (
                                         @AccessionedIndicatorList IS NULL
                                         AND @SampleStatusTypeList IS NULL
                                     )
                              )
                      )
                      OR (
                             (
                                 (
                                     m.idfSendToOffice = @SentToOrganizationID
                                     AND m.idfsSite = @SentToOrganizationSiteID
                                 )
                                 OR @SentToOrganizationID IS NULL
                             )
                             AND (
                                     (m.idfsSampleStatus IN (
                                                                SELECT ID FROM @SampleStatusTypeListTable
                                                            )
                                     )
                                     OR (
                                            m.idfsAccessionCondition IN (
                                                                            SELECT ID FROM @SampleStatusTypeListTable
                                                                        )
                                            AND (
                                                    m.idfsSampleStatus IS NULL
                                                    OR m.idfsSampleStatus = 10015007 --In Repository
                                                )
                                        )
                                     OR (
                                            @SampleStatusTypeList IS NULL
                                            AND @AccessionedIndicatorList IS NULL
                                        )
                                 )
                         )
                  );

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = m.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               NULL,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT m.idfMaterial,
               NULL,
               MAX(ReadPermissionIndicator),
               MAX(AccessToPersonalDataPermissionIndicator),
               MAX(AccessToGenderAndAgeDataPermissionIndicator),
               MAX(WritePermissionIndicator),
               MAX(DeletePermissionIndicator),
               0
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      (m.idfMaterial IN (
                                            SELECT CAST([Value] AS BIGINT)
                                            FROM dbo.FN_GBL_SYS_SplitList(@SampleList, NULL, ',')
                                        )
                      )
                      OR (@SampleList IS NULL)
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.idfSendToOffice = @SentToOrganizationID
                              OR @SentToOrganizationID IS NULL
                          )
                          AND (
                                  (
                                      m.blnAccessioned = @AccessionedIndicatorList
                                      OR (
                                             m.blnAccessioned = 1
                                             AND m.datAccession IS NULL
                                             AND @AccessionedIndicatorList IS NOT NULL
                                         )
                                  )
                                  AND m.idfsAccessionCondition IS NULL
                                  AND m.idfsSampleStatus IS NULL
                                  AND m.datDestructionDate IS NULL
                                  OR (
                                         @AccessionedIndicatorList IS NULL
                                         AND @SampleStatusTypeList IS NULL
                                     )
                              )
                      )
                      OR (
                             (
                                 (
                                     m.idfSendToOffice = @SentToOrganizationID
                                     AND m.idfsSite = @SentToOrganizationSiteID
                                 )
                                 OR @SentToOrganizationID IS NULL
                             )
                             AND (
                                     (m.idfsSampleStatus IN (
                                                                SELECT ID FROM @SampleStatusTypeListTable
                                                            )
                                     )
                                     OR (
                                            m.idfsAccessionCondition IN (
                                                                            SELECT ID FROM @SampleStatusTypeListTable
                                                                        )
                                            AND (
                                                    m.idfsSampleStatus IS NULL
                                                    OR m.idfsSampleStatus = 10015007 --In Repository
                                                )
                                        )
                                     OR (
                                            @SampleStatusTypeList IS NULL
                                            AND @AccessionedIndicatorList IS NULL
                                        )
                                 )
                         )
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR m.DiseaseID = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR (@EIDSSReportCampaignOrSessionID IS NULL)
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      (m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%')
                      OR (@FarmOwnerName IS NULL)
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
        GROUP BY m.idfMaterial;

        DELETE FROM @Results;

        -- Test Approvals --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      AND m.idfsSite = @SentToOrganizationSiteID
                      OR @SentToOrganizationID IS NULL
                  )
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE t.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup -- Default role
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = m.idfsSite
        )
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        )
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestStatus IN (   10001004, --Preliminary 
                                          10001008
                                      ) --Marked for Deletion
              AND (
                      t.idfBatchTest IS NULL
                      OR (
                             t.idfBatchTest IS NOT NULL
                             AND b.idfsBatchStatus = 10001001
                         ) -- Closed
                  )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT m.idfMaterial,
               t.idfTesting,
               MAX(ReadPermissionIndicator),
               MAX(AccessToPersonalDataPermissionIndicator),
               MAX(AccessToGenderAndAgeDataPermissionIndicator),
               MAX(WritePermissionIndicator),
               MAX(DeletePermissionIndicator),
               0
        FROM @Results res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.TestID
            INNER JOIN dbo.tlbMaterial m
                ON t.idfMaterial = m.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      t.idfTesting IN (
                                          SELECT CAST([Value] AS BIGINT)
                                          FROM dbo.FN_GBL_SYS_SplitList(@TestList, NULL, ',')
                                      )
                      OR @TestList IS NULL
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.idfSendToOffice = @SentToOrganizationID
                              OR @SentToOrganizationID IS NULL
                          )
                          AND (
                                  (
                                      m.blnAccessioned = @AccessionedIndicatorList
                                      OR (
                                             m.blnAccessioned = 1
                                             AND m.datAccession IS NULL
                                             AND @AccessionedIndicatorList IS NOT NULL
                                         )
                                  )
                                  AND m.idfsAccessionCondition IS NULL
                                  AND m.idfsSampleStatus IS NULL
                                  AND m.datDestructionDate IS NULL
                                  OR (
                                         @AccessionedIndicatorList IS NULL
                                         AND @SampleStatusTypeList IS NULL
                                     )
                              )
                      )
                      OR (
                             (
                                 (
                                     m.idfSendToOffice = @SentToOrganizationID
                                     AND m.idfsSite = @SentToOrganizationSiteID
                                 )
                                 OR @SentToOrganizationID IS NULL
                             )
                             AND (
                                     (m.idfsSampleStatus IN (
                                                                SELECT ID FROM @SampleStatusTypeListTable
                                                            )
                                     )
                                     OR (
                                            m.idfsAccessionCondition IN (
                                                                            SELECT ID FROM @SampleStatusTypeListTable
                                                                        )
                                            AND (
                                                    m.idfsSampleStatus IS NULL
                                                    OR m.idfsSampleStatus = 10015007 --In Repository
                                                )
                                        )
                                     OR (
                                            @SampleStatusTypeList IS NULL
                                            AND @AccessionedIndicatorList IS NULL
                                        )
                                 )
                         )
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR m.DiseaseID = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND @TestResultDateTo
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR (@EIDSSReportCampaignOrSessionID IS NULL)
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
        GROUP BY t.idfTesting,
                 m.idfMaterial;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        DECLARE @RecordCount INT = (
                                       SELECT COUNT(ID) FROM @FinalResults
                                   );

        IF @RecordCount > 10000
        BEGIN
            INSERT INTO @NarrowResults
            SELECT TOP 10000
                SampleID,
                TestID,
                res.ReadPermissionIndicator,
                res.AccessToPersonalDataPermissionIndicator,
                res.AccessToGenderAndAgeDataPermissionIndicator,
                res.WritePermissionIndicator,
                res.DeletePermissionIndicator,
                99
            FROM @FinalResults res;

            SELECT CASE
                       WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
                THEN
                           m.idfsSampleStatus
                       WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
                THEN
                           m.idfsSampleStatus
                       WHEN t.idfsTestStatus = 10001004 --Preliminary
                THEN
                           t.idfsTestStatus
                       WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
                THEN
                           t.idfsTestStatus
                   END AS ActionRequestedID,
                   CASE
                       WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
                   THEN
                           @SampleDeletion
                       WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
                   THEN
                           @SampleDestruction
                       WHEN t.idfsTestStatus = 10001004 --Preliminary
                   THEN
                           @Validation
                       WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
                   THEN
                           @TestDeletion
                   END AS ActionRequested,
                   m.idfMaterial AS SampleID,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   a.strAnimalCode AS EIDSSAnimalID,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                           '********'
                       ELSE
                           m.strCalculatedHumanName
                   END AS PatientOrFarmOwnerName,
                   sampleType.name AS SampleTypeName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           CAST(m.DiseaseID AS NVARCHAR(MAX))
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseIdentifiers
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DiseaseIdentifiers
                       ELSE
                           ''
                   END AS DiseaseID,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseNames
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DiseaseNames
                       ELSE
                           ''
                   END AS DiseaseName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DisplayDiseaseNames
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DisplayDiseaseNames
                       ELSE
                           ''
                   END AS DisplayDiseaseName,
                   t.idfTesting AS TestID,
                   t.idfsTestName AS TestNameTypeID,
                   t.idfsTestCategory AS TestCategoryTypeID,
                   t.idfsTestResult AS TestResultTypeID,
                   t.idfsTestStatus AS TestStatusTypeID,
                   testNameType.name AS TestNameTypeName,
                   testStatusType.name AS TestStatusTypeName,
                   testResultType.name AS TestResultTypeName,
                   u.idfUserID AS ResultEnteredByUserID,
                   m.datAccession AS AccessionDate,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   CASE
                       WHEN m.blnAccessioned = 0
                            AND m.idfsSampleStatus IS NULL
                            AND m.idfsAccessionCondition IS NULL THEN
                           'Un-accessioned'
                       WHEN m.idfsSampleStatus IS NULL THEN
                           accessionConditionType.name
                       WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                           accessionConditionType.name
                       ELSE
                           sampleStatusType.name
                   END AS AccessionConditionOrSampleStatusTypeName,
                   t.datConcludedDate AS ResultDate,
                   m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
                   NULL AS PreviousTestStatusTypeID,
                   m.intRowStatus AS RowStatus,
                   CASE
                       WHEN res.ReadPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.ReadPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.ReadPermissionIndicator)
                   END AS ReadPermissionindicator,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
                   END AS AccessToPersonalDataPermissionIndicator,
                   CASE
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
                   END AS AccessToGenderAndAgeDataPermissionIndicator,
                   CASE
                       WHEN res.WritePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.WritePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.WritePermissionIndicator)
                   END AS WritePermissionIndicator,
                   CASE
                       WHEN res.DeletePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.DeletePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.DeletePermissionIndicator)
                   END AS DeletePermissionIndicator,
                   res.RowAction,
                   0 AS RowSelectionIndicator,
                   10000 AS TotalRowCount
            FROM @NarrowResults res
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfTesting = res.TestID
                       AND t.intRowStatus = 0
                INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                    ON diseaseName.idfsReference = m.DiseaseID
                LEFT JOIN @MonitoringSessionDiseases msDiseases
                    ON msDiseases.ID = m.idfMonitoringSession
                LEFT JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN dbo.tstUserTable u
                    ON u.idfPerson = t.idfResultEnteredByPerson
                       AND u.intRowStatus = 0;
        END
        ELSE
        BEGIN
            SELECT CASE
                       WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
                THEN
                           m.idfsSampleStatus
                       WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
                THEN
                           m.idfsSampleStatus
                       WHEN t.idfsTestStatus = 10001004 --Preliminary
                THEN
                           t.idfsTestStatus
                       WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
                THEN
                           t.idfsTestStatus
                   END AS ActionRequestedID,
                   CASE
                       WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
                   THEN
                           @SampleDeletion
                       WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
                   THEN
                           @SampleDestruction
                       WHEN t.idfsTestStatus = 10001004 --Preliminary
                   THEN
                           @Validation
                       WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
                   THEN
                           @TestDeletion
                   END AS ActionRequested,
                   m.idfMaterial AS SampleID,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   a.strAnimalCode AS EIDSSAnimalID,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                           '********'
                       ELSE
                           m.strCalculatedHumanName
                   END AS PatientOrFarmOwnerName,
                   sampleType.name AS SampleTypeName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           CAST(m.DiseaseID AS NVARCHAR(MAX))
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseIdentifiers
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DiseaseIdentifiers
                       ELSE
                           ''
                   END AS DiseaseID,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseNames
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DiseaseNames
                       ELSE
                           ''
                   END AS DiseaseName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DisplayDiseaseNames
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DisplayDiseaseNames
                       ELSE
                           ''
                   END AS DisplayDiseaseName,
                   t.idfTesting AS TestID,
                   t.idfsTestName AS TestNameTypeID,
                   t.idfsTestCategory AS TestCategoryTypeID,
                   t.idfsTestResult AS TestResultTypeID,
                   t.idfsTestStatus AS TestStatusTypeID,
                   testNameType.name AS TestNameTypeName,
                   testStatusType.name AS TestStatusTypeName,
                   testResultType.name AS TestResultTypeName,
                   u.idfUserID AS ResultEnteredByUserID,
                   m.datAccession AS AccessionDate,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   CASE
                       WHEN m.blnAccessioned = 0
                            AND m.idfsSampleStatus IS NULL
                            AND m.idfsAccessionCondition IS NULL THEN
                           'Un-accessioned'
                       WHEN m.idfsSampleStatus IS NULL THEN
                           accessionConditionType.name
                       WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                           accessionConditionType.name
                       ELSE
                           sampleStatusType.name
                   END AS AccessionConditionOrSampleStatusTypeName,
                   t.datConcludedDate AS ResultDate,
                   m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
                   NULL AS PreviousTestStatusTypeID,
                   m.intRowStatus AS RowStatus,
                   CASE
                       WHEN res.ReadPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.ReadPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.ReadPermissionIndicator)
                   END AS ReadPermissionindicator,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
                   END AS AccessToPersonalDataPermissionIndicator,
                   CASE
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
                   END AS AccessToGenderAndAgeDataPermissionIndicator,
                   CASE
                       WHEN res.WritePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.WritePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.WritePermissionIndicator)
                   END AS WritePermissionIndicator,
                   CASE
                       WHEN res.DeletePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.DeletePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.DeletePermissionIndicator)
                   END AS DeletePermissionIndicator,
                   res.RowAction,
                   0 AS RowSelectionIndicator,
                   @RecordCount AS TotalRowCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.SampleID
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfTesting = res.TestID
                       AND t.intRowStatus = 0
                INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                    ON diseaseName.idfsReference = m.DiseaseID
                LEFT JOIN @MonitoringSessionDiseases msDiseases
                    ON msDiseases.ID = m.idfMonitoringSession
                LEFT JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN dbo.tstUserTable u
                    ON u.idfPerson = t.idfResultEnteredByPerson
                       AND u.intRowStatus = 0;
        END
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_FAVORITE_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_FAVORITE_ADVANCED_SEARCH_GETList
--
-- Description:	Get laboratory favorites list for the various laboratory use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/21/2019 Initial release.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     01/15/2020 Added transfer ID to query.
-- Stephen Long     01/22/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/16/2020 Added sample and test list parameters and where clause criteria.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     06/06/2020 Added batch status type ID to the model.
-- Stephen Long     06/14/2020 Added action requested to the model.
-- Stephen Long     06/24/2020 Added test completed indicator to the model.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/30/2020 Removing unneeded joins.
-- Stephen Long     11/29/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Mark Wilson		08/16/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     11/18/2021 Added action requested ID and previous test status type to the 
--                             query.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     02/10/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     03/10/2022 Added note field to the query.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/11/2022 Removed show in lab list criteria.
-- Stephen Long     08/12/2022 Removed where criteria for surveillance type of both; de-activated 
--                             base reference record.  Changed group by on insert of final results.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     09/28/2022 Bug fix on item 5117.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/12/2023 Updated for site filtration queries.
-- Stephen Long     01/23/2023 Updated default sort order.
-- Stephen Long     01/31/2023 Added coalesce on collection and entered dates.
-- Stephen Long     02/03/2023 Added filtration indicator logic.
-- Stephen Long     03/02/2023 Updated initial query where to use site ID instead of sent to 
--                             organization.
-- Stephen Long     03/15/2023 Fix on default sort order.
-- Stephen Long     04/24/2023 Bug fix for item 5738.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_FAVORITE_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @SentToOrganizationSiteID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @SampleList VARCHAR(MAX) = NULL,
    @TestList VARCHAR(MAX) = NULL,
    @FiltrationIndicator BIT = 1,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @Results TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL INDEX c NONCLUSTERED,
        TestID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL INDEX c NONCLUSTERED,
        TestID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL,
        RowAction INT NOT NULL
            DEFAULT 0
    );
    DECLARE @NarrowResults TABLE
    (
        ID INT NOT NULL IDENTITY,
        SampleID BIGINT NOT NULL INDEX c NONCLUSTERED,
        TestID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL,
        RowAction INT NOT NULL
            DEFAULT 99
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML;
    DECLARE @SampleStatusTypeListTable TABLE (ID BIGINT NOT NULL PRIMARY KEY);
    BEGIN TRY
        IF @SampleStatusTypeList IS NOT NULL
            INSERT INTO @SampleStatusTypeListTable
            SELECT CAST([Value] AS BIGINT)
            FROM dbo.FN_GBL_SYS_SplitList(@SampleStatusTypeList, NULL, ',');

        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               1,
               CASE
                   WHEN m.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND (
                      (
                          (
                              m.idfSendToOffice = @SentToOrganizationID
                              OR @SentToOrganizationID IS NULL
                          )
                          AND (
                                  (
                                      m.blnAccessioned = @AccessionedIndicatorList
                                      OR (
                                             m.blnAccessioned = 1
                                             AND m.datAccession IS NULL
                                             AND @AccessionedIndicatorList IS NOT NULL
                                         )
                                  )
                                  AND m.idfsAccessionCondition IS NULL
                                  AND m.idfsSampleStatus IS NULL
                                  AND m.datDestructionDate IS NULL
                                  OR (
                                         @AccessionedIndicatorList IS NULL
                                         AND @SampleStatusTypeList IS NULL
                                     )
                              )
                      )
                      OR (
                             (
                                 (
                                     m.idfSendToOffice = @SentToOrganizationID
                                     AND m.idfsSite = @SentToOrganizationSiteID
                                 )
                                 OR @SentToOrganizationID IS NULL
                             )
                             AND (
                                     (m.idfsSampleStatus IN (
                                                                SELECT ID FROM @SampleStatusTypeListTable
                                                            )
                                     )
                                     OR (
                                            m.idfsAccessionCondition IN (
                                                                            SELECT ID FROM @SampleStatusTypeListTable
                                                                        )
                                            AND (
                                                    m.idfsSampleStatus IS NULL
                                                    OR m.idfsSampleStatus = 10015007 --In Repository
                                                )
                                        )
                                     OR (
                                            @SampleStatusTypeList IS NULL
                                            AND @AccessionedIndicatorList IS NULL
                                        )
                                 )
                         )
                  );

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
        WHERE m.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = m.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               t.idfTesting,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMaterial m
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
        WHERE m.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT m.idfMaterial,
               t.idfTesting,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator),
               0
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.SampleID
            INNER JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      (m.idfMaterial IN (
                                            SELECT CAST([Value] AS BIGINT)
                                            FROM dbo.FN_GBL_SYS_SplitList(@SampleList, NULL, ',')
                                        )
                      )
                      OR (@SampleList IS NULL)
                  )
              AND (
                      (t.idfTesting IN (
                                           SELECT CAST([Value] AS BIGINT)
                                           FROM dbo.FN_GBL_SYS_SplitList(@TestList, NULL, ',')
                                       )
                      )
                      OR (@TestList IS NULL)
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.idfSendToOffice = @SentToOrganizationID
                              OR @SentToOrganizationID IS NULL
                          )
                          AND (
                                  (
                                      m.blnAccessioned = @AccessionedIndicatorList
                                      OR (
                                             m.blnAccessioned = 1
                                             AND m.datAccession IS NULL
                                             AND @AccessionedIndicatorList IS NOT NULL
                                         )
                                  )
                                  AND m.idfsAccessionCondition IS NULL
                                  AND m.idfsSampleStatus IS NULL
                                  AND m.datDestructionDate IS NULL
                                  OR (
                                         @AccessionedIndicatorList IS NULL
                                         AND @SampleStatusTypeList IS NULL
                                     )
                              )
                      )
                      OR (
                             (
                                 (
                                     m.idfSendToOffice = @SentToOrganizationID
                                     AND m.idfsSite = @SentToOrganizationSiteID
                                 )
                                 OR @SentToOrganizationID IS NULL
                             )
                             AND (
                                     (m.idfsSampleStatus IN (
                                                                SELECT ID FROM @SampleStatusTypeListTable
                                                            )
                                     )
                                     OR (
                                            m.idfsAccessionCondition IN (
                                                                            SELECT ID FROM @SampleStatusTypeListTable
                                                                        )
                                            AND (
                                                    m.idfsSampleStatus IS NULL
                                                    OR m.idfsSampleStatus = 10015007 --In Repository
                                                )
                                        )
                                     OR (
                                            @SampleStatusTypeList IS NULL
                                            AND @AccessionedIndicatorList IS NULL
                                        )
                                 )
                         )
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR m.DiseaseID = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR (@EIDSSReportCampaignOrSessionID IS NULL)
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
        GROUP BY m.idfMaterial,
                 t.idfTesting;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        DECLARE @FavoriteCount INT = 0,
                @RecordCount INT = (
                                       SELECT COUNT(ID) FROM @FinalResults
                                   );

        IF @RecordCount > 10000
        BEGIN
            INSERT INTO @NarrowResults
            SELECT TOP 10000
                SampleID,
                TestID,
                res.ReadPermissionIndicator,
                res.AccessToPersonalDataPermissionIndicator,
                res.AccessToGenderAndAgeDataPermissionIndicator,
                res.WritePermissionIndicator,
                res.DeletePermissionIndicator,
                99
            FROM @FinalResults res;

            SET @FavoriteCount =
            (
                SELECT TOP 10000
                    COUNT(*)
                FROM @NarrowResults
                    INNER JOIN
                    (
                        SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                        FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                    ) f
                        ON ID = f.SampleID
            );

            SELECT m.idfMaterial AS SampleID,
                   m.idfsSite AS SiteID,
                   m.idfsCurrentSite AS CurrentSiteID,
                   t.idfTesting AS TestID,
                   tom.idfTransferOut AS TransferID,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   m.strCalculatedHumanName AS PatientOrFarmOwnerName,
                   m.idfsSampleType AS SampleTypeID,
                   sampleType.name AS SampleTypeName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           CAST(m.DiseaseID AS NVARCHAR(MAX))
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseIdentifiers
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DiseaseIdentifiers
                       ELSE
                           ''
                   END AS DiseaseID,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseNames
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DiseaseNames
                       ELSE
                           ''
                   END AS DiseaseName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DisplayDiseaseNames
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DisplayDiseaseNames
                       ELSE
                           ''
                   END AS DisplayDiseaseName,
                   m.idfRootMaterial AS RootSampleID,
                   m.idfParentMaterial AS ParentSampleID,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   m.datFieldCollectionDate AS CollectionDate,
                   m.idfFieldCollectedByPerson AS CollectedByPersonID,
                   m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
                   m.datFieldSentDate AS SentDate,
                   m.idfSendToOffice AS SentToOrganizationID,
                   t.idfsTestName AS TestNameTypeID,
                   testNameType.name AS TestNameTypeName,
                   t.idfsTestStatus AS TestStatusTypeID,
                   testStatusType.name AS TestStatusTypeName,
                   t.datStartedDate AS StartedDate,
                   t.idfsTestResult AS TestResultTypeID,
                   testResultType.name AS TestResultTypeName,
                   t.datConcludedDate AS ResultDate,
                   t.idfsTestCategory AS TestCategoryTypeID,
                   testCategoryType.name AS TestCategoryTypeName,
                   m.blnAccessioned AS AccessionIndicator,
                   m.datAccession AS AccessionDate,
                   m.idfInDepartment AS FunctionalAreaID,
                   functionalArea.name AS FunctionalAreaName,
                   m.idfSubdivision AS FreezerSubdivisionID,
                   m.StorageBoxPlace,
                   m.datEnteringDate AS EnteredDate,
                   m.datOutOfRepositoryDate AS OutOfRepositoryDate,
                   m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
                   m.blnReadOnly AS ReadOnlyIndicator,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   CASE
                       WHEN m.blnAccessioned = 0
                            AND m.idfsSampleStatus IS NULL
                            AND m.idfsAccessionCondition IS NULL THEN
                           'Un-accessioned'
                       WHEN m.idfsSampleStatus IS NULL THEN
                           accessionConditionType.name
                       WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                           accessionConditionType.name
                       ELSE
                           sampleStatusType.name
                   END AS AccessionConditionOrSampleStatusTypeName,
                   m.idfAccesionByPerson AS AccessionedInByPersonID,
                   m.datSampleStatusDate AS SampleStatusDate,
                   m.strCondition AS AccessionComment,
                   m.strNote AS Comment,
                   a.strAnimalCode AS EIDSSAnimalID,
                   m.idfsBirdStatus AS BirdStatusTypeID,
                   m.idfMainTest AS MainTestID,
                   m.idfsSampleKind AS SampleKindTypeID,
                   b.idfsBatchStatus AS BatchStatusTypeID,
                   ISNULL(   IIF(
                                (
                                    SELECT COUNT(t3.idfTesting)
                                    FROM dbo.tlbTesting t3
                                    WHERE t3.idfsTestStatus IN (   10001003,
                                                                            --In Progress
                                                                   10001004 --Preliminary
                                                               )
                                          AND t3.idfMaterial = m.idfMaterial
                                          AND t3.intRowStatus = 0
                                          AND t3.blnNonLaboratoryTest = 0
                                ) > 0,
                                1,
                                0),
                             0
                         ) AS TestAssignedIndicator,
                   CASE
                       WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
                   THEN
                           m.idfsSampleStatus
                       WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
                   THEN
                           m.idfsSampleStatus
                       WHEN t.idfsTestStatus = 10001004 --Preliminary
                   THEN
                           t.idfsTestStatus
                       WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
                   THEN
                           t.idfsTestStatus
                   END AS ActionRequestedID,
                   CASE
                       WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
                   THEN
                           'Sample Deletion'
                       WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
                   THEN
                           'Sample Destruction'
                       WHEN t.idfsTestStatus = 10001004 --Preliminary
                   THEN
                           'Validation'
                       WHEN t.idfsTestStatus = 19000502 --Marked for Deletion
                   THEN
                           'Test Deletion'
                   END AS ActionRequested,
                   ISNULL(   IIF(
                                (
                                    SELECT COUNT(t2.idfTesting)
                                    FROM dbo.tlbTesting t2
                                    WHERE t2.idfsTestStatus IN (   10001001,
                                                                            --Final
                                                                   10001006 --Amended
                                                               )
                                          AND t2.idfMaterial = m.idfMaterial
                                          AND t2.intRowStatus = 0
                                          AND t2.blnNonLaboratoryTest = 0
                                ) > 0,
                                1,
                                0),
                             0
                         ) AS TestCompletedIndicator,
                   m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
                   t.PreviousTestStatusID AS PreviousTestStatusTypeID,
                   m.LabModuleSourceIndicator,
                   m.idfHumanCase AS HumanDiseaseReportID,
                   m.idfVetCase AS VeterinaryDiseaseReportID,
                   m.idfMonitoringSession AS MonitoringSessionID,
                   m.idfVectorSurveillanceSession AS VectorSessionID,
                   m.idfVector AS VectorID,
                   CASE
                       WHEN res.ReadPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.ReadPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.ReadPermissionIndicator)
                   END AS ReadPermissionindicator,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
                   END AS AccessToPersonalDataPermissionIndicator,
                   CASE
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
                   END AS AccessToGenderAndAgeDataPermissionIndicator,
                   CASE
                       WHEN res.WritePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.WritePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.WritePermissionIndicator)
                   END AS WritePermissionIndicator,
                   CASE
                       WHEN res.DeletePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.DeletePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.DeletePermissionIndicator)
                   END AS DeletePermissionIndicator,
                   res.RowAction,
                   0 AS RowSelectionIndicator,
                   10000 AS TotalRowCount,
                   @FavoriteCount AS FavoriteCount
            FROM @NarrowResults res
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.SampleID
                INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfTesting = res.TestID
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfMaterial = m.idfMaterial
                       AND tom.intRowStatus = 0
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                    ON diseaseName.idfsReference = m.DiseaseID
                LEFT JOIN @MonitoringSessionDiseases msDiseases
                    ON msDiseases.ID = m.idfMonitoringSession
                LEFT JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
                LEFT JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                    ON functionalArea.idfsReference = d.idfsDepartmentName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
            ORDER BY m.blnAccessioned,
                     m.idfsSampleStatus DESC,
                     m.idfsAccessionCondition,
                     COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate) DESC;
        END
        ELSE
        BEGIN
            SET @FavoriteCount =
            (
                SELECT COUNT(*)
                FROM @FinalResults
                    INNER JOIN
                    (
                        SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                        FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                    ) f
                        ON ID = f.SampleID
            );

            SELECT m.idfMaterial AS SampleID,
                   m.idfsSite AS SiteID,
                   m.idfsCurrentSite AS CurrentSiteID,
                   t.idfTesting AS TestID,
                   tom.idfTransferOut AS TransferID,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   m.strCalculatedHumanName AS PatientOrFarmOwnerName,
                   m.idfsSampleType AS SampleTypeID,
                   sampleType.name AS SampleTypeName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           CAST(m.DiseaseID AS NVARCHAR(MAX))
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseIdentifiers
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DiseaseIdentifiers
                       ELSE
                           ''
                   END AS DiseaseID,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseNames
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DiseaseNames
                       ELSE
                           ''
                   END AS DiseaseName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DisplayDiseaseNames
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DisplayDiseaseNames
                       ELSE
                           ''
                   END AS DisplayDiseaseName,
                   m.idfRootMaterial AS RootSampleID,
                   m.idfParentMaterial AS ParentSampleID,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   m.datFieldCollectionDate AS CollectionDate,
                   m.idfFieldCollectedByPerson AS CollectedByPersonID,
                   m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
                   m.datFieldSentDate AS SentDate,
                   m.idfSendToOffice AS SentToOrganizationID,
                   t.idfsTestName AS TestNameTypeID,
                   testNameType.name AS TestNameTypeName,
                   t.idfsTestStatus AS TestStatusTypeID,
                   testStatusType.name AS TestStatusTypeName,
                   t.datStartedDate AS StartedDate,
                   t.idfsTestResult AS TestResultTypeID,
                   testResultType.name AS TestResultTypeName,
                   t.datConcludedDate AS ResultDate,
                   t.idfsTestCategory AS TestCategoryTypeID,
                   testCategoryType.name AS TestCategoryTypeName,
                   m.blnAccessioned AS AccessionIndicator,
                   m.datAccession AS AccessionDate,
                   m.idfInDepartment AS FunctionalAreaID,
                   functionalArea.name AS FunctionalAreaName,
                   m.idfSubdivision AS FreezerSubdivisionID,
                   m.StorageBoxPlace,
                   m.datEnteringDate AS EnteredDate,
                   m.datOutOfRepositoryDate AS OutOfRepositoryDate,
                   m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
                   m.blnReadOnly AS ReadOnlyIndicator,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   CASE
                       WHEN m.blnAccessioned = 0
                            AND m.idfsSampleStatus IS NULL
                            AND m.idfsAccessionCondition IS NULL THEN
                           'Un-accessioned'
                       WHEN m.idfsSampleStatus IS NULL THEN
                           accessionConditionType.name
                       WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                           accessionConditionType.name
                       ELSE
                           sampleStatusType.name
                   END AS AccessionConditionOrSampleStatusTypeName,
                   m.idfAccesionByPerson AS AccessionedInByPersonID,
                   m.datSampleStatusDate AS SampleStatusDate,
                   m.strCondition AS AccessionComment,
                   m.strNote AS Comment,
                   a.strAnimalCode AS EIDSSAnimalID,
                   m.idfsBirdStatus AS BirdStatusTypeID,
                   m.idfMainTest AS MainTestID,
                   m.idfsSampleKind AS SampleKindTypeID,
                   b.idfsBatchStatus AS BatchStatusTypeID,
                   ISNULL(   IIF(
                                (
                                    SELECT COUNT(t3.idfTesting)
                                    FROM dbo.tlbTesting t3
                                    WHERE t3.idfsTestStatus IN (   10001003,
                                                                            --In Progress
                                                                   10001004 --Preliminary
                                                               )
                                          AND t3.idfMaterial = m.idfMaterial
                                          AND t3.intRowStatus = 0
                                          AND t3.blnNonLaboratoryTest = 0
                                ) > 0,
                                1,
                                0),
                             0
                         ) AS TestAssignedIndicator,
                   CASE
                       WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
                   THEN
                           m.idfsSampleStatus
                       WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
                   THEN
                           m.idfsSampleStatus
                       WHEN t.idfsTestStatus = 10001004 --Preliminary
                   THEN
                           t.idfsTestStatus
                       WHEN t.idfsTestStatus = 10001008 --Marked for Deletion
                   THEN
                           t.idfsTestStatus
                   END AS ActionRequestedID,
                   CASE
                       WHEN m.idfsSampleStatus = 10015002 --Marked for Deletion
                   THEN
                           'Sample Deletion'
                       WHEN m.idfsSampleStatus = 10015003 --Marked for Destruction
                   THEN
                           'Sample Destruction'
                       WHEN t.idfsTestStatus = 10001004 --Preliminary
                   THEN
                           'Validation'
                       WHEN t.idfsTestStatus = 19000502 --Marked for Deletion
                   THEN
                           'Test Deletion'
                   END AS ActionRequested,
                   ISNULL(   IIF(
                                (
                                    SELECT COUNT(t2.idfTesting)
                                    FROM dbo.tlbTesting t2
                                    WHERE t2.idfsTestStatus IN (   10001001,
                                                                            --Final
                                                                   10001006 --Amended
                                                               )
                                          AND t2.idfMaterial = m.idfMaterial
                                          AND t2.intRowStatus = 0
                                          AND t2.blnNonLaboratoryTest = 0
                                ) > 0,
                                1,
                                0),
                             0
                         ) AS TestCompletedIndicator,
                   m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
                   t.PreviousTestStatusID AS PreviousTestStatusTypeID,
                   m.LabModuleSourceIndicator,
                   m.idfHumanCase AS HumanDiseaseReportID,
                   m.idfVetCase AS VeterinaryDiseaseReportID,
                   m.idfMonitoringSession AS MonitoringSessionID,
                   m.idfVectorSurveillanceSession AS VectorSessionID,
                   m.idfVector AS VectorID,
                   CASE
                       WHEN res.ReadPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.ReadPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.ReadPermissionIndicator)
                   END AS ReadPermissionindicator,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
                   END AS AccessToPersonalDataPermissionIndicator,
                   CASE
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
                   END AS AccessToGenderAndAgeDataPermissionIndicator,
                   CASE
                       WHEN res.WritePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.WritePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.WritePermissionIndicator)
                   END AS WritePermissionIndicator,
                   CASE
                       WHEN res.DeletePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.DeletePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.DeletePermissionIndicator)
                   END AS DeletePermissionIndicator,
                   res.RowAction,
                   0 AS RowSelectionIndicator,
                   @RecordCount AS TotalRowCount,
                   @FavoriteCount AS FavoriteCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.SampleID
                INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfTesting = res.TestID
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
                LEFT JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfMaterial = m.idfMaterial
                       AND tom.intRowStatus = 0
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                    ON diseaseName.idfsReference = m.DiseaseID
                LEFT JOIN @MonitoringSessionDiseases msDiseases
                    ON msDiseases.ID = m.idfMonitoringSession
                LEFT JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
                LEFT JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                    ON functionalArea.idfsReference = d.idfsDepartmentName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
            ORDER BY m.blnAccessioned,
                     m.idfsSampleStatus DESC,
                     m.idfsAccessionCondition,
                     COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate) DESC;
        END
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_SAMPLE_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_SAMPLE_ADVANCED_SEARCH_GETList
--
-- Description:	Get sample advanced search list for the laboratory module use case LUC13.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     01/14/2019 Initial relase.
-- Stephen Long     01/30/2019 Added sample disease reference join, and removed the vector 
--                             surveillance session joins as they are not needed.
-- Stephen Long     02/11/2019 Changed sample status type ID from bigint to nvarchar(max).  Can 
--                             have multiple sample status types.
-- Stephen Long     02/21/2019 Renamed parameters to be consistent with other objects.
-- Stephen Long     03/28/2019 Removed test status 'Not Started' as criteria to pull back in the 
--                             test assigned indicator.
-- Stephen Long     07/01/2019 Corrected reference type on monitoring session category.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     08/29/2019 Added accession condition type field as one of the where clauses.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     11/04/2019 Corrected tlbSpecies join; joined to tlbMaterial instead of tlbHerd.
-- Stephen Long     01/16/2020 Corrected where clause on sample status type for defect 5699.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/08/2020 Added sample list parameter and where clause criteria.
-- Stephen Long     04/16/2020 Removed un-needed joins for farm, herd and species type.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     07/06/2020 Added lab module source indicator to the model.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/28/2020 Removed site left joins as not needed.
-- Stephen Long     10/30/2020 Remove test assigned indicator; use test assigned count instead.
--                             Added EIDSS freezer ID.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Stephen Long     02/10/2021 Remove unneeded joins and add check for blnShowInLabList.
-- Stephen Long     06/28/2021 Applied new pagination parameters.
-- Mark Wilson		08/11/2021 updated to join tlbMonitoringSessionToDiagnosis
-- Stephen Long     09/18/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/11/2021 Split out query to get initial results using required date range.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     02/08/2022 Removed unneeded joins.
-- Stephen Long     03/10/2022 Changed note to comment and transfer count to transferred count.
-- Stephen Long     03/24/2022 Removed primary key from results and final results table variables.
-- Stephen Long     03/30/2022 Remove show in lab list from where criteria.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/12/2022 Removed where criteria for surveillance type of both; de-activated 
--                             base reference record.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     09/28/2022 Bug fix on item 5117.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     12/16/2022 Fix on initial query to use sent to organization and not user 
--                             organization.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/11/2023 Updated for site filtration queries for SAUC29.
-- Stephen Long     01/31/2023 Added coalesce on collection and entered dates.
-- Stephen Long     02/03/2023 Added filtration indicator logic.
-- Stephen Long     02/20/2023 Added sent to organization sent to site ID and where criteria.
-- Stephen Long     03/14/2023 Added narrow search criteria, and fixed default sort order.
-- Stephen Long     03/28/2023 Bug fix for item 5818 and 5819.
-- Stephen Long     04/24/2023 Bug fix for item 5738.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_SAMPLE_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @SentToOrganizationSiteID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @SampleList VARCHAR(MAX) = NULL,
    @TestUnassignedIndicator BIT = NULL,
    @TestCompletedIndicator BIT = NULL,
    @FiltrationIndicator BIT = 1,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL INDEX c NONCLUSTERED,
        ReadPermissionIndicator BIT NOT NULL INDEX r CLUSTERED,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @NarrowResults TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL,
        AccessionedIndicator BIT NOT NULL,
        AccessionConditionTypeID BIGINT NULL
    );
    DECLARE @RecordCount INT = 0,
            @UnaccessionedCount INT = 0,
            @ReturnCode INT = 0,
            @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
    DECLARE @FunctionalAreas TABLE
    (
        DepartmentID BIGINT NOT NULL PRIMARY KEY,
        DepartmentNameID BIGINT NULL,
        FunctionalAreaName NVARCHAR(200) NULL
    );
    DECLARE @SampleStatusTypes TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        Name NVARCHAR(200) NOT NULL
    );
    DECLARE @AccessionConditionTypes TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        Name NVARCHAR(200) NOT NULL
    );
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @SampleListTable TABLE (ID BIGINT NOT NULL);
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL INDEX IDX1 CLUSTERED,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL INDEX IDX1 CLUSTERED,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML,
            @LanguageCode BIGINT;

    IF @SampleList IS NOT NULL
    BEGIN
        INSERT INTO @SampleListTable
        SELECT CAST([Value] AS BIGINT)
        FROM dbo.FN_GBL_SYS_SplitList(@SampleList, NULL, ',');
    END

    DECLARE @SampleStatusTypeListTable TABLE (ID BIGINT NOT NULL PRIMARY KEY);

    IF @SampleStatusTypeList IS NOT NULL
        INSERT INTO @SampleStatusTypeListTable
        SELECT CAST([Value] AS BIGINT)
        FROM dbo.FN_GBL_SYS_SplitList(@SampleStatusTypeList, NULL, ',');

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        INSERT INTO @FunctionalAreas
        SELECT d.idfDepartment,
               idfsReference,
               name
        FROM dbo.tlbDepartment d
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164)
                ON d.idfsDepartmentName = idfsReference;

        INSERT INTO @SampleStatusTypes
        SELECT idfsReference,
               name
        FROM dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015);

        INSERT INTO @AccessionConditionTypes
        SELECT idfsReference,
               name
        FROM dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110);

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @Results
        SELECT m.idfMaterial,
               1,
               CASE
                   WHEN
                   (
                       COALESCE(m.idfsCurrentSite, m.idfsSite) = @UserSiteID
                       OR m.idfSendToOffice = @UserOrganizationID
                       OR @FiltrationIndicator = 0
                   ) THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN COALESCE(m.idfsCurrentSite, m.idfsSite) = @UserSiteID
                        OR m.idfSendToOffice = @UserOrganizationID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN COALESCE(m.idfsCurrentSite, m.idfsSite) = @UserSiteID
                        OR m.idfSendToOffice = @UserOrganizationID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN COALESCE(m.idfsCurrentSite, m.idfsSite) = @UserSiteID
                        OR m.idfSendToOffice = @UserOrganizationID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND (
                      (
                          (
                              m.idfSendToOffice = @SentToOrganizationID
                              OR @SentToOrganizationID IS NULL
                          )
                          AND (
                                  (
                                      m.blnAccessioned = @AccessionedIndicatorList
                                      OR (
                                             m.blnAccessioned = 1
                                             AND m.datAccession IS NULL
                                             AND @AccessionedIndicatorList IS NOT NULL
                                         )
                                  )
                                  AND m.idfsAccessionCondition IS NULL
                                  AND m.idfsSampleStatus IS NULL
                                  AND m.datDestructionDate IS NULL
                                  OR (
                                         @AccessionedIndicatorList IS NULL
                                         AND @SampleStatusTypeList IS NULL
                                     )
                              )
                      )
                      OR (
                             (
                                 (
                                     m.idfSendToOffice = @SentToOrganizationID
                                     AND m.idfsSite = @SentToOrganizationSiteID
                                 )
                                 OR @SentToOrganizationID IS NULL
                             )
                             AND (
                                     (m.idfsSampleStatus IN (
                                                                SELECT ID FROM @SampleStatusTypeListTable
                                                            )
                                     )
                                     OR (
                                            m.idfsAccessionCondition IN (
                                                                            SELECT ID FROM @SampleStatusTypeListTable
                                                                        )
                                            AND (
                                                    m.idfsSampleStatus IS NULL
                                                    OR m.idfsSampleStatus = 10015007 --In Repository
                                                )
                                        )
                                     OR (
                                            @SampleStatusTypeList IS NULL
                                            AND @AccessionedIndicatorList IS NULL
                                        )
                                 )
                         )
                  );

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the default rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbMaterial m
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE m.intRowStatus = 0
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = m.idfsSite
        )
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT m.idfMaterial,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbMaterial m
        WHERE m.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = m.idfsSite
        )
              AND m.blnReadOnly = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT res.ID,
               1,
               MAX(AccessToPersonalDataPermissionIndicator),
               MAX(AccessToGenderAndAgeDataPermissionIndicator),
               MAX(WritePermissionIndicator),
               MAX(DeletePermissionIndicator)
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = res.ID
                   AND t.intRowStatus = 0
                   AND t.blnNonLaboratoryTest = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = res.ID
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human 
                          AND (
                                  m.idfHumanCase IS NOT NULL
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary
                             AND (
                                     m.idfVetCase IS NOT NULL
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR @ReportOrSessionTypeID IS NULL
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR @SurveillanceTypeID IS NULL
                  )
              AND (
                      (
                          (
                              m.idfSendToOffice = @SentToOrganizationID
                              OR @SentToOrganizationID IS NULL
                          )
                          AND (
                                  (
                                      m.blnAccessioned = @AccessionedIndicatorList
                                      OR (
                                             m.blnAccessioned = 1
                                             AND m.datAccession IS NULL
                                             AND @AccessionedIndicatorList IS NOT NULL
                                         )
                                  )
                                  AND m.idfsAccessionCondition IS NULL
                                  AND m.idfsSampleStatus IS NULL
                                  AND m.datDestructionDate IS NULL
                                  OR (
                                         @AccessionedIndicatorList IS NULL
                                         AND @SampleStatusTypeList IS NULL
                                     )
                              )
                      )
                      OR (
                             (
                                 (
                                     m.idfSendToOffice = @SentToOrganizationID
                                     AND m.idfsSite = @SentToOrganizationSiteID
                                 )
                                 OR @SentToOrganizationID IS NULL
                             )
                             AND (
                                     (m.idfsSampleStatus IN (
                                                                SELECT ID FROM @SampleStatusTypeListTable
                                                            )
                                     )
                                     OR (
                                            m.idfsAccessionCondition IN (
                                                                            SELECT ID FROM @SampleStatusTypeListTable
                                                                        )
                                            AND (
                                                    m.idfsSampleStatus IS NULL
                                                    OR m.idfsSampleStatus = 10015007 --In Repository
                                                )
                                        )
                                     OR (
                                            @SampleStatusTypeList IS NULL
                                            AND @AccessionedIndicatorList IS NULL
                                        )
                                 )
                         )
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR m.DiseaseID = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR @EIDSSReportCampaignOrSessionID IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
              AND (
                      (
                          m.blnAccessioned = 1
                          AND m.datAccession IS NOT NULL
                          AND m.strBarcode IS NOT NULL
                          AND (
                                  m.idfsAccessionCondition IS NOT NULL
                                  AND m.idfsAccessionCondition <> 10108003
                              ) -- Rejected
                          AND m.idfsSampleStatus = 10015007 -- In Repository
                          AND m.TestUnassignedIndicator = 1
                          AND @TestUnassignedIndicator = 1
                      )
                      OR @TestUnassignedIndicator IS NULL
                  )
              AND (
                      (
                          m.blnAccessioned = 1
                          AND m.datAccession IS NOT NULL
                          AND m.strBarcode IS NOT NULL
                          AND (
                                  m.idfsAccessionCondition IS NOT NULL
                                  AND m.idfsAccessionCondition <> 10108003
                              ) -- Rejected
                          AND m.idfsSampleStatus = 10015007 -- In Repository
                          AND m.TestCompletedIndicator = 1
                          AND @TestCompletedIndicator = 1
                      )
                      OR @TestCompletedIndicator IS NULL
                  )
        GROUP BY res.ID
        OPTION (RECOMPILE);

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SET @RecordCount =
        (
            SELECT COUNT(ID) FROM @FinalResults
        );

        IF @RecordCount > 10000
        BEGIN
            INSERT INTO @NarrowResults
            SELECT TOP 10000
                res.ID,
                1,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator,
                m.blnAccessioned,
                m.idfsAccessionCondition
            FROM @FinalResults res
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.ID
            ORDER BY m.blnAccessioned,
                     m.idfsSampleStatus DESC,
                     m.idfsAccessionCondition,
                     COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate) DESC;

            SET @UnaccessionedCount =
            (
                SELECT TOP 10000
                    COUNT(res.ID)
                FROM @NarrowResults res
                WHERE res.AccessionedIndicator = 0
                      AND res.AccessionConditionTypeID IS NULL
            );

            SELECT res.ID AS SampleID,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   CASE
                       WHEN f.SampleID IS NULL THEN
                           0
                       ELSE
                           1
                   END AS FavoriteIndicator,
                   m.idfRootMaterial AS RootSampleID,
                   m.idfParentMaterial AS ParentSampleID,
                   m.idfsSampleType AS SampleTypeID,
                   sampleType.name AS SampleTypeName,
                   m.idfHuman AS HumanID,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                           '********'
                       ELSE
                           m.strCalculatedHumanName
                   END AS PatientOrFarmOwnerName,
                   m.idfSpecies AS SpeciesID,
                   m.idfAnimal AS AnimalID,
                   a.strAnimalCode AS EIDSSAnimalID,
                   m.idfVector AS VectorID,
                   m.idfMonitoringSession AS MonitoringSessionID,
                   m.idfVectorSurveillanceSession AS VectorSessionID,
                   m.idfHumanCase AS HumanDiseaseReportID,
                   m.idfVetCase AS VeterinaryDiseaseReportID,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   m.TestCompletedIndicator,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           CAST(m.DiseaseID AS NVARCHAR(MAX))
                       WHEN m.idfMonitoringSession IS NOT NULL THEN
                           msDiseases.DiseaseIdentifiers
                       WHEN m.idfVectorSurveillanceSession IS NOT NULL THEN
                           vsDiseases.DiseaseIdentifiers
                       ELSE
                           ''
                   END AS DiseaseID,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           diseaseName.name
                       WHEN m.idfMonitoringSession IS NOT NULL THEN
                           msDiseases.DiseaseNames
                       WHEN m.idfVectorSurveillanceSession IS NOT NULL THEN
                           vsDiseases.DiseaseNames
                       ELSE
                           ''
                   END AS DiseaseName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           diseaseName.name
                       WHEN m.idfMonitoringSession IS NOT NULL THEN
                           msDiseases.DisplayDiseaseNames
                       WHEN m.idfVectorSurveillanceSession IS NOT NULL THEN
                           vsDiseases.DisplayDiseaseNames
                       ELSE
                           ''
                   END AS DisplayDiseaseName,
                   m.idfInDepartment AS FunctionalAreaID,
                   fa.FunctionalAreaName,
                   m.idfSubdivision AS FreezerSubdivisionID,
                   m.StorageBoxPlace,
                   m.datFieldCollectionDate AS CollectionDate,
                   m.idfFieldCollectedByPerson AS CollectedByPersonID,
                   m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
                   m.datFieldSentDate AS SentDate,
                   m.idfSendToOffice AS SentToOrganizationID,
                   m.idfsSite AS SiteID,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   m.datEnteringDate AS EnteredDate,
                   m.datOutOfRepositoryDate AS OutOfRepositoryDate,
                   m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
                   m.blnReadOnly AS ReadOnlyIndicator,
                   m.blnAccessioned AS AccessionIndicator,
                   accessionConditionType.name AS AccessionConditionTypeName,
                   m.datAccession AS AccessionDate,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   CASE
                       WHEN m.blnAccessioned = 0
                            AND m.idfsSampleStatus IS NULL
                            AND m.idfsAccessionCondition IS NULL THEN
                           'Un-accessioned'
                       WHEN m.idfsSampleStatus IS NULL THEN
                           accessionConditionType.name
                       WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                           accessionConditionType.name
                       ELSE
                           sampleStatusType.name
                   END AS AccessionConditionOrSampleStatusTypeName,
                   sampleStatusType.name AS SampleStatusTypeName,
                   m.idfAccesionByPerson AS AccessionByPersonID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   m.datSampleStatusDate AS SampleStatusDate,
                   m.strCondition AS AccessionComment,
                   m.idfsDestructionMethod AS DestructionMethodTypeID,
                   m.datDestructionDate AS DestructionDate,
                   m.idfDestroyedByPerson AS DestroyedByPersonID,
                   CASE
                       WHEN m.TestUnassignedIndicator = 1 THEN
                           0
                       ELSE
                           1
                   END AS TestAssignedCount,
                   m.TransferIndicator AS TransferredCount,
                   m.strNote AS Comment,
                   m.idfsCurrentSite AS CurrentSiteID,
                   m.idfsBirdStatus AS BirdStatusTypeID,
                   m.idfMainTest AS MainTestID,
                   m.idfsSampleKind AS SampleKindTypeID,
                   m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
                   m.LabModuleSourceIndicator,
                   m.intRowStatus AS RowStatus,
                   CASE
                       WHEN res.ReadPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.ReadPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.ReadPermissionIndicator)
                   END AS ReadPermissionindicator,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
                   END AS AccessToPersonalDataPermissionIndicator,
                   CASE
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
                   END AS AccessToGenderAndAgeDataPermissionIndicator,
                   CASE
                       WHEN res.WritePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.WritePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.WritePermissionIndicator)
                   END AS WritePermissionIndicator,
                   CASE
                       WHEN res.DeletePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.DeletePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.DeletePermissionIndicator)
                   END AS DeletePermissionIndicator,
                   99 AS RowAction,
                   0 AS RowSelectionIndicator,
                   10000 AS TotalRowCount,
                   @UnaccessionedCount AS UnaccessionedSampleCount
            FROM @NarrowResults res
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.ID
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN
                (
                    SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                ) f
                    ON f.SampleID = res.ID
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                    ON diseaseName.idfsReference = m.DiseaseID
                LEFT JOIN @MonitoringSessionDiseases msDiseases
                    ON msDiseases.ID = m.idfMonitoringSession
                LEFT JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
                LEFT JOIN @FunctionalAreas fa
                    ON fa.DepartmentID = m.idfInDepartment
                LEFT JOIN @SampleStatusTypes sampleStatusType
                    ON sampleStatusType.ID = m.idfsSampleStatus
                LEFT JOIN @AccessionConditionTypes accessionConditionType
                    ON accessionConditionType.ID = m.idfsAccessionCondition
            OPTION (RECOMPILE);
        END
        ELSE
        BEGIN
            SET @UnaccessionedCount =
            (
                SELECT COUNT(res.ID)
                FROM @FinalResults res
                    INNER JOIN dbo.tlbMaterial m
                        ON m.idfMaterial = res.ID
                WHERE m.blnAccessioned = 0
                      AND m.idfsAccessionCondition IS NULL
            );

            SELECT res.ID AS SampleID,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   CASE
                       WHEN f.SampleID IS NULL THEN
                           0
                       ELSE
                           1
                   END AS FavoriteIndicator,
                   m.idfRootMaterial AS RootSampleID,
                   m.idfParentMaterial AS ParentSampleID,
                   m.idfsSampleType AS SampleTypeID,
                   sampleType.name AS SampleTypeName,
                   m.idfHuman AS HumanID,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                           '********'
                       ELSE
                           m.strCalculatedHumanName
                   END AS PatientOrFarmOwnerName,
                   m.idfSpecies AS SpeciesID,
                   m.idfAnimal AS AnimalID,
                   a.strAnimalCode AS EIDSSAnimalID,
                   m.idfVector AS VectorID,
                   m.idfMonitoringSession AS MonitoringSessionID,
                   m.idfVectorSurveillanceSession AS VectorSessionID,
                   m.idfHumanCase AS HumanDiseaseReportID,
                   m.idfVetCase AS VeterinaryDiseaseReportID,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   m.TestCompletedIndicator,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           CAST(m.DiseaseID AS NVARCHAR(MAX))
                       WHEN m.idfMonitoringSession IS NOT NULL THEN
                           msDiseases.DiseaseIdentifiers
                       WHEN m.idfVectorSurveillanceSession IS NOT NULL THEN
                           vsDiseases.DiseaseIdentifiers
                       ELSE
                           ''
                   END AS DiseaseID,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           diseaseName.name
                       WHEN m.idfMonitoringSession IS NOT NULL THEN
                           msDiseases.DiseaseNames
                       WHEN m.idfVectorSurveillanceSession IS NOT NULL THEN
                           vsDiseases.DiseaseNames
                       ELSE
                           ''
                   END AS DiseaseName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           diseaseName.name
                       WHEN m.idfMonitoringSession IS NOT NULL THEN
                           msDiseases.DisplayDiseaseNames
                       WHEN m.idfVectorSurveillanceSession IS NOT NULL THEN
                           vsDiseases.DisplayDiseaseNames
                       ELSE
                           ''
                   END AS DisplayDiseaseName,
                   m.idfInDepartment AS FunctionalAreaID,
                   fa.FunctionalAreaName,
                   m.idfSubdivision AS FreezerSubdivisionID,
                   m.StorageBoxPlace,
                   m.datFieldCollectionDate AS CollectionDate,
                   m.idfFieldCollectedByPerson AS CollectedByPersonID,
                   m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
                   m.datFieldSentDate AS SentDate,
                   m.idfSendToOffice AS SentToOrganizationID,
                   m.idfsSite AS SiteID,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   m.datEnteringDate AS EnteredDate,
                   m.datOutOfRepositoryDate AS OutOfRepositoryDate,
                   m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
                   m.blnReadOnly AS ReadOnlyIndicator,
                   m.blnAccessioned AS AccessionIndicator,
                   accessionConditionType.name AS AccessionConditionTypeName,
                   m.datAccession AS AccessionDate,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   CASE
                       WHEN m.blnAccessioned = 0
                            AND m.idfsSampleStatus IS NULL
                            AND m.idfsAccessionCondition IS NULL THEN
                           'Un-accessioned'
                       WHEN m.idfsSampleStatus IS NULL THEN
                           accessionConditionType.name
                       WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                           accessionConditionType.name
                       ELSE
                           sampleStatusType.name
                   END AS AccessionConditionOrSampleStatusTypeName,
                   sampleStatusType.name AS SampleStatusTypeName,
                   m.idfAccesionByPerson AS AccessionByPersonID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   m.datSampleStatusDate AS SampleStatusDate,
                   m.strCondition AS AccessionComment,
                   m.idfsDestructionMethod AS DestructionMethodTypeID,
                   m.datDestructionDate AS DestructionDate,
                   m.idfDestroyedByPerson AS DestroyedByPersonID,
                   CASE
                       WHEN m.TestUnassignedIndicator = 1 THEN
                           0
                       ELSE
                           1
                   END AS TestAssignedCount,
                   m.TransferIndicator AS TransferredCount,
                   m.strNote AS Comment,
                   m.idfsCurrentSite AS CurrentSiteID,
                   m.idfsBirdStatus AS BirdStatusTypeID,
                   m.idfMainTest AS MainTestID,
                   m.idfsSampleKind AS SampleKindTypeID,
                   m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
                   m.LabModuleSourceIndicator,
                   m.intRowStatus AS RowStatus,
                   CASE
                       WHEN res.ReadPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.ReadPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.ReadPermissionIndicator)
                   END AS ReadPermissionindicator,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
                   END AS AccessToPersonalDataPermissionIndicator,
                   CASE
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
                   END AS AccessToGenderAndAgeDataPermissionIndicator,
                   CASE
                       WHEN res.WritePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.WritePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.WritePermissionIndicator)
                   END AS WritePermissionIndicator,
                   CASE
                       WHEN res.DeletePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.DeletePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.DeletePermissionIndicator)
                   END AS DeletePermissionIndicator,
                   0 AS RowAction,
                   0 AS RowSelectionIndicator,
                   COUNT(*) OVER () AS TotalRowCount,
                   @UnaccessionedCount AS UnaccessionedSampleCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.ID
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN
                (
                    SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                ) f
                    ON f.SampleID = res.ID
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                    ON diseaseName.idfsReference = m.DiseaseID
                LEFT JOIN @MonitoringSessionDiseases msDiseases
                    ON msDiseases.ID = m.idfMonitoringSession
                LEFT JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
                LEFT JOIN @FunctionalAreas fa
                    ON fa.DepartmentID = m.idfInDepartment
                LEFT JOIN @SampleStatusTypes sampleStatusType
                    ON sampleStatusType.ID = m.idfsSampleStatus
                LEFT JOIN @AccessionConditionTypes accessionConditionType
                    ON accessionConditionType.ID = m.idfsAccessionCondition
            ORDER BY m.blnAccessioned,
                     m.idfsSampleStatus DESC,
                     m.idfsAccessionCondition,
                     COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate) DESC
            OPTION (RECOMPILE);
        END
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TEST_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TEST_ADVANCED_SEARCH_GETList
--
-- Description:	Get laboratory tests list for the various lab use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/21/2019 Initial release.
-- Stephen Long     03/28/2019 Added EIDSS local/field sample ID field.
-- Stephen Long     04/27/2019 Added EIDSS batch ID, observation ID and batch status type name for 
--                             additional test information.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     01/22/2020 Converted site ID to site list for site filtration.
-- Stephen Long     02/03/2020 Added non-laboratory test indicator where clause.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/16/2020 Added test list parameter and where clause criteria.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     06/06/2020 Added batch status type ID to the model.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/30/2020 Remove unneeded joins.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Mark Wilson		08/20/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     03/24/2022 Removed primary key from final results table variable.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Changed from repair to reference repair function.
-- Stephen Long     08/09/2022 Added batch test association indicator parameter.
-- Stephen Long     08/12/2022 Removed where criteria for surveillance type of both; de-activated 
--                             base reference record.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     10/18/2022 Fix on external test indicator to use the field on the testing 
--                             table.
-- Stephen Long     10/21/2022 Added human disease report, veterinary disease report, monitoring 
--                             session and vector identifiers to the query.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/11/2023 Updated for site filtration queries.
-- Stephen Long     01/31/2023 Added coalesce on collection and entered dates.
-- Stephen Long     02/03/2023 Added filtration indicator logic.
-- Stephen Long     02/20/2023 Added sent to organization sent to site ID and where criteria.
-- Stephen Long     03/15/2023 Fix on default sort order.
-- Stephen Long     04/24/2023 Bug fix for item 5738.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TEST_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @SentToOrganizationSiteID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @TestList VARCHAR(MAX) = NULL,
    @BatchTestAssociationIndicator BIT = NULL,
    @FiltrationIndicator BIT = 1,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @ReturnMessage VARCHAR(MAX) = 'SUCCESS',
            @ReturnCode INT = 0;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL INDEX c NONCLUSTERED,
        TestStatusTypeID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        TestStatusTypeID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL,
        RowAction INT NOT NULL
            DEFAULT 0
    );
    DECLARE @NarrowResults TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        TestStatusTypeID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL,
        RowAction INT NOT NULL
            DEFAULT 0
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @SampleStatusTypeListTable TABLE (ID BIGINT NOT NULL PRIMARY KEY);
    DECLARE @Favorites XML;

    BEGIN TRY
        IF @SampleStatusTypeList IS NOT NULL
            INSERT INTO @SampleStatusTypeListTable
            SELECT CAST([Value] AS BIGINT)
            FROM dbo.FN_GBL_SYS_SplitList(@SampleStatusTypeList, NULL, ',');

        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               1,
               CASE
                   WHEN m.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND (
                      (
                          (
                              m.idfSendToOffice = @SentToOrganizationID
                              OR @SentToOrganizationID IS NULL
                          )
                          AND (
                                  (
                                      m.blnAccessioned = @AccessionedIndicatorList
                                      OR (
                                             m.blnAccessioned = 1
                                             AND m.datAccession IS NULL
                                             AND @AccessionedIndicatorList IS NOT NULL
                                         )
                                  )
                                  AND m.idfsAccessionCondition IS NULL
                                  AND m.idfsSampleStatus IS NULL
                                  AND m.datDestructionDate IS NULL
                                  OR (
                                         @AccessionedIndicatorList IS NULL
                                         AND @SampleStatusTypeList IS NULL
                                     )
                              )
                      )
                      OR (
                             (
                                 (
                                     m.idfSendToOffice = @SentToOrganizationID
                                     AND m.idfsSite = @SentToOrganizationSiteID
                                 )
                                 OR @SentToOrganizationID IS NULL
                             )
                             AND (
                                     (m.idfsSampleStatus IN (
                                                                SELECT ID FROM @SampleStatusTypeListTable
                                                            )
                                     )
                                     OR (
                                            m.idfsAccessionCondition IN (
                                                                            SELECT ID FROM @SampleStatusTypeListTable
                                                                        )
                                            AND (
                                                    m.idfsSampleStatus IS NULL
                                                    OR m.idfsSampleStatus = 10015007 --In Repository
                                                )
                                        )
                                     OR (
                                            @SampleStatusTypeList IS NULL
                                            AND @AccessionedIndicatorList IS NULL
                                        )
                                 )
                         )
                  );

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE t.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup -- Default role
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = m.idfsSite
        )
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        )
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT res.ID,
               res.TestStatusTypeID,
               MAX(ReadPermissionIndicator),
               MAX(AccessToPersonalDataPermissionIndicator),
               MAX(AccessToGenderAndAgeDataPermissionIndicator),
               MAX(WritePermissionIndicator),
               MAX(DeletePermissionIndicator),
               0
        FROM @Results res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      (
                          t.idfBatchTest IS NULL
                          AND t.idfsTestResult IS NULL
                          AND @BatchTestAssociationIndicator = 1
                      )
                      OR @BatchTestAssociationIndicator IS NULL
                  ) -- Adding a test to a batch, so should not currently be a batch test ID.
              AND (
                      (t.idfTesting IN (
                                           SELECT CAST([Value] AS BIGINT)
                                           FROM dbo.FN_GBL_SYS_SplitList(@TestList, NULL, ',')
                                       )
                      )
                      OR (@TestList IS NULL)
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.idfSendToOffice = @SentToOrganizationID
                              OR @SentToOrganizationID IS NULL
                          )
                          AND (
                                  (
                                      m.blnAccessioned = @AccessionedIndicatorList
                                      OR (
                                             m.blnAccessioned = 1
                                             AND m.datAccession IS NULL
                                             AND @AccessionedIndicatorList IS NOT NULL
                                         )
                                  )
                                  AND m.idfsAccessionCondition IS NULL
                                  AND m.idfsSampleStatus IS NULL
                                  AND m.datDestructionDate IS NULL
                                  OR (
                                         @AccessionedIndicatorList IS NULL
                                         AND @SampleStatusTypeList IS NULL
                                     )
                              )
                      )
                      OR (
                             (
                                 (
                                     m.idfSendToOffice = @SentToOrganizationID
                                     AND m.idfsSite = @SentToOrganizationSiteID
                                 )
                                 OR @SentToOrganizationID IS NULL
                             )
                             AND (
                                     (m.idfsSampleStatus IN (
                                                                SELECT ID FROM @SampleStatusTypeListTable
                                                            )
                                     )
                                     OR (
                                            m.idfsAccessionCondition IN (
                                                                            SELECT ID FROM @SampleStatusTypeListTable
                                                                        )
                                            AND (
                                                    m.idfsSampleStatus IS NULL
                                                    OR m.idfsSampleStatus = 10015007 --In Repository
                                                )
                                        )
                                     OR (
                                            @SampleStatusTypeList IS NULL
                                            AND @AccessionedIndicatorList IS NULL
                                        )
                                 )
                         )
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      t.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR @EIDSSReportCampaignOrSessionID IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
        GROUP BY res.ID,
                 res.TestStatusTypeID
        OPTION (RECOMPILE);

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        DECLARE @InProgressCount INT = 0,
                @RecordCount INT = (
                                       SELECT COUNT(ID) FROM @FinalResults
                                   );

        IF @RecordCount > 10000
        BEGIN
            INSERT INTO @NarrowResults
            SELECT TOP 10000
                res.ID,
                res.TestStatusTypeID,
                ReadPermissionIndicator,
                AccessToPersonalDataPermissionIndicator,
                AccessToGenderAndAgeDataPermissionIndicator,
                WritePermissionIndicator,
                DeletePermissionIndicator,
                0
            FROM @FinalResults res;

            SET @InProgressCount =
            (
                SELECT TOP 10000
                    COUNT(*)
                FROM @FinalResults res
                    INNER JOIN dbo.tlbTesting t
                        ON t.idfTesting = res.ID
                           AND t.intRowStatus = 0
                    LEFT JOIN dbo.tlbBatchTest b
                        ON b.idfBatchTest = t.idfBatchTest
                           AND b.intRowStatus = 0
                WHERE t.idfsTestStatus = 10001003
                      AND t.idfsTestName IS NOT NULL
                      AND t.blnNonLaboratoryTest = 0
                      AND (
                              (
                                  t.idfBatchTest IS NULL
                                  AND (
                                          t.idfsTestStatus = 10001001 --Final
                                          OR t.idfsTestStatus = 10001003 --In Progress
                                          OR t.idfstestStatus = 10001006 --Amended
                                      )
                              )
                              OR (
                                     t.idfBatchTest IS NOT NULL
                                     AND b.idfsBatchStatus = 10001003 --In Progress
                                     AND (
                                             t.idfsTestStatus = 10001001 --Final 
                                             OR t.idfstestStatus = 10001006 --Amended
                                         )
                                 )
                              OR (
                                     t.idfBatchTest IS NOT NULL
                                     AND b.idfsBatchStatus = 10001001 --Closed
                                     AND (
                                             t.idfsTestStatus = 10001001 --Final
                                             OR t.idfsTestStatus = 10001003 --In Progress
                                             OR t.idfsTestStatus = 10001004 --Preliminary
                                             OR t.idfstestStatus = 10001006 --Amended
                                         )
                                 )
                          )
            );

            SELECT t.idfTesting AS TestID,
                   CASE
                       WHEN f.SampleID IS NULL THEN
                           0
                       ELSE
                           1
                   END AS FavoriteIndicator,
                   m.idfsSite AS SiteID,
                   m.idfsCurrentSite AS CurrentSiteID,
                   t.idfsTestName AS TestNameTypeID,
                   t.idfsTestCategory AS TestCategoryTypeID,
                   t.idfsTestResult AS TestResultTypeID,
                   t.idfsTestStatus AS TestStatusTypeID,
                   t.PreviousTestStatusID AS PreviousTestStatusTypeID,
                   t.idfsDiagnosis AS DiseaseID,
                   m.idfMaterial AS SampleID,
                   m.idfRootMaterial AS RootSampleID,
                   m.idfParentMaterial AS ParentSampleID,
                   m.idfSendToOffice AS SentToOrganizationID,
                   t.idfBatchTest AS BatchTestID,
                   t.idfObservation AS ObservationID,
                   t.intTestNumber AS TestNumber,
                   t.strNote AS Note,
                   t.datStartedDate AS StartedDate,
                   t.datConcludedDate AS ResultDate,
                   t.idfTestedByOffice AS TestedByOrganizationID,
                   t.idfTestedByPerson AS TestedByPersonID,
                   t.idfResultEnteredByOffice AS ResultEnteredByOrganizationID,
                   t.idfResultEnteredByPerson AS ResultEnteredByPersonID,
                   t.idfValidatedByOffice AS ValidatedByOrganizationID,
                   t.idfValidatedByPerson AS ValidatedByPersonID,
                   t.blnReadOnly AS ReadOnlyIndicator,
                   t.blnNonLaboratoryTest AS NonLaboratoryTestIndicator,
                   t.blnExternalTest AS ExternalTestIndicator,
                   t.idfPerformedByOffice AS PerformedByOrganizationID,
                   t.datReceivedDate AS ReceivedDate,
                   t.strContactPerson AS ContactPersonName,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                           '**********'
                       ELSE
                           m.strCalculatedHumanName
                   END AS PatientOrFarmOwnerName,
                   sampleType.name AS SampleTypeName,
                   disease.name AS DiseaseName,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   testNameType.name AS TestNameTypeName,
                   testStatusType.name AS TestStatusTypeName,
                   testResultType.name AS TestResultTypeName,
                   testCategoryType.name AS TestCategoryTypeName,
                   m.datAccession AS AccessionDate,
                   functionalArea.name AS FunctionalAreaName,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   CASE
                       WHEN m.blnAccessioned = 0
                            AND m.idfsSampleStatus IS NULL
                            AND m.idfsAccessionCondition IS NULL THEN
                           'Un-accessioned'
                       WHEN m.idfsSampleStatus IS NULL THEN
                           accessionConditionType.name
                       WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                           accessionConditionType.name
                       ELSE
                           sampleStatusType.name
                   END AS AccessionConditionOrSampleStatusTypeName,
                   m.strCondition AS AccessionComment,
                   a.strAnimalCode AS EIDSSAnimalID,
                   ISNULL(
                   (
                       SELECT COUNT(NULLIF(tom2.idfTransferOUT, 0))
                       FROM dbo.tlbTransferOutMaterial tom2
                       WHERE tom2.idfMaterial = m.idfMaterial
                             AND tom2.intRowStatus = 0
                   ),
                   0
                         ) AS TransferCount,
                   tro.idfTransferOut AS TransferID,
                   t.idfHumanCase AS HumanDiseaseReportID,
                   t.idfVetCase AS VeterinaryDiseaseReportID,
                   t.idfMonitoringSession AS MonitoringSessionID,
                   t.idfVector AS VectorID,
                   t.intRowStatus AS RowStatus,
                   CASE
                       WHEN res.ReadPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.ReadPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.ReadPermissionIndicator)
                   END AS ReadPermissionindicator,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
                   END AS AccessToPersonalDataPermissionIndicator,
                   CASE
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
                   END AS AccessToGenderAndAgeDataPermissionIndicator,
                   CASE
                       WHEN res.WritePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.WritePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.WritePermissionIndicator)
                   END AS WritePermissionIndicator,
                   CASE
                       WHEN res.DeletePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.DeletePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.DeletePermissionIndicator)
                   END AS DeletePermissionIndicator,
                   99 AS RowAction,
                   0 AS RowSelectionIndicator,
                   10000 AS TotalRowCount,
                   @InProgressCount AS InProgressCount
            FROM @NarrowResults res
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = res.ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) disease
                    ON disease.idfsReference = t.idfsDiagnosis
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN
                (
                    SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                ) f
                    ON m.idfMaterial = f.SampleID
                LEFT JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfMaterial = m.idfMaterial
                       AND tom.intRowStatus = 0
                LEFT JOIN dbo.tlbTransferOUT tro
                    ON tro.idfTransferOut = tom.idfTransferOut
                       AND tro.intRowStatus = 0
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                    ON functionalArea.idfsReference = d.idfsDepartmentName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
            ORDER BY m.strBarcode DESC
            OPTION (RECOMPILE);
        END
        ELSE
        BEGIN
            SET @InProgressCount =
            (
                SELECT COUNT(*)
                FROM @FinalResults res
                    INNER JOIN dbo.tlbTesting t
                        ON t.idfTesting = res.ID
                           AND t.intRowStatus = 0
                    LEFT JOIN dbo.tlbBatchTest b
                        ON b.idfBatchTest = t.idfBatchTest
                           AND b.intRowStatus = 0
                WHERE t.idfsTestStatus = 10001003
                      AND t.idfsTestName IS NOT NULL
                      AND t.blnNonLaboratoryTest = 0
                      AND (
                              (
                                  t.idfBatchTest IS NULL
                                  AND (
                                          t.idfsTestStatus = 10001001 --Final
                                          OR t.idfsTestStatus = 10001003 --In Progress
                                          OR t.idfstestStatus = 10001006 --Amended
                                      )
                              )
                              OR (
                                     t.idfBatchTest IS NOT NULL
                                     AND b.idfsBatchStatus = 10001003 --In Progress
                                     AND (
                                             t.idfsTestStatus = 10001001 --Final 
                                             OR t.idfstestStatus = 10001006 --Amended
                                         )
                                 )
                              OR (
                                     t.idfBatchTest IS NOT NULL
                                     AND b.idfsBatchStatus = 10001001 --Closed
                                     AND (
                                             t.idfsTestStatus = 10001001 --Final
                                             OR t.idfsTestStatus = 10001003 --In Progress
                                             OR t.idfsTestStatus = 10001004 --Preliminary
                                             OR t.idfstestStatus = 10001006 --Amended
                                         )
                                 )
                          )
            );

            SELECT t.idfTesting AS TestID,
                   CASE
                       WHEN f.SampleID IS NULL THEN
                           0
                       ELSE
                           1
                   END AS FavoriteIndicator,
                   m.idfsSite AS SiteID,
                   m.idfsCurrentSite AS CurrentSiteID,
                   t.idfsTestName AS TestNameTypeID,
                   t.idfsTestCategory AS TestCategoryTypeID,
                   t.idfsTestResult AS TestResultTypeID,
                   t.idfsTestStatus AS TestStatusTypeID,
                   t.PreviousTestStatusID AS PreviousTestStatusTypeID,
                   t.idfsDiagnosis AS DiseaseID,
                   m.idfMaterial AS SampleID,
                   m.idfRootMaterial AS RootSampleID,
                   m.idfParentMaterial AS ParentSampleID,
                   m.idfSendToOffice AS SentToOrganizationID,
                   t.idfBatchTest AS BatchTestID,
                   t.idfObservation AS ObservationID,
                   t.intTestNumber AS TestNumber,
                   t.strNote AS Note,
                   t.datStartedDate AS StartedDate,
                   t.datConcludedDate AS ResultDate,
                   t.idfTestedByOffice AS TestedByOrganizationID,
                   t.idfTestedByPerson AS TestedByPersonID,
                   t.idfResultEnteredByOffice AS ResultEnteredByOrganizationID,
                   t.idfResultEnteredByPerson AS ResultEnteredByPersonID,
                   t.idfValidatedByOffice AS ValidatedByOrganizationID,
                   t.idfValidatedByPerson AS ValidatedByPersonID,
                   t.blnReadOnly AS ReadOnlyIndicator,
                   t.blnNonLaboratoryTest AS NonLaboratoryTestIndicator,
                   t.blnExternalTest AS ExternalTestIndicator,
                   t.idfPerformedByOffice AS PerformedByOrganizationID,
                   t.datReceivedDate AS ReceivedDate,
                   t.strContactPerson AS ContactPersonName,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                           '**********'
                       ELSE
                           m.strCalculatedHumanName
                   END AS PatientOrFarmOwnerName,
                   sampleType.name AS SampleTypeName,
                   disease.name AS DiseaseName,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   testNameType.name AS TestNameTypeName,
                   testStatusType.name AS TestStatusTypeName,
                   testResultType.name AS TestResultTypeName,
                   testCategoryType.name AS TestCategoryTypeName,
                   m.datAccession AS AccessionDate,
                   functionalArea.name AS FunctionalAreaName,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   CASE
                       WHEN m.blnAccessioned = 0
                            AND m.idfsSampleStatus IS NULL
                            AND m.idfsAccessionCondition IS NULL THEN
                           'Un-accessioned'
                       WHEN m.idfsSampleStatus IS NULL THEN
                           accessionConditionType.name
                       WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                           accessionConditionType.name
                       ELSE
                           sampleStatusType.name
                   END AS AccessionConditionOrSampleStatusTypeName,
                   m.strCondition AS AccessionComment,
                   a.strAnimalCode AS EIDSSAnimalID,
                   ISNULL(
                   (
                       SELECT COUNT(NULLIF(tom2.idfTransferOUT, 0))
                       FROM dbo.tlbTransferOutMaterial tom2
                       WHERE tom2.idfMaterial = m.idfMaterial
                             AND tom2.intRowStatus = 0
                   ),
                   0
                         ) AS TransferCount,
                   tro.idfTransferOut AS TransferID,
                   t.idfHumanCase AS HumanDiseaseReportID,
                   t.idfVetCase AS VeterinaryDiseaseReportID,
                   t.idfMonitoringSession AS MonitoringSessionID,
                   t.idfVector AS VectorID,
                   t.intRowStatus AS RowStatus,
                   CASE
                       WHEN res.ReadPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.ReadPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.ReadPermissionIndicator)
                   END AS ReadPermissionindicator,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
                   END AS AccessToPersonalDataPermissionIndicator,
                   CASE
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
                   END AS AccessToGenderAndAgeDataPermissionIndicator,
                   CASE
                       WHEN res.WritePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.WritePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.WritePermissionIndicator)
                   END AS WritePermissionIndicator,
                   CASE
                       WHEN res.DeletePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.DeletePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.DeletePermissionIndicator)
                   END AS DeletePermissionIndicator,
                   res.RowAction,
                   0 AS RowSelectionIndicator,
                   @RecordCount AS TotalRowCount,
                   @InProgressCount AS InProgressCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = res.ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) disease
                    ON disease.idfsReference = t.idfsDiagnosis
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN
                (
                    SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                ) f
                    ON m.idfMaterial = f.SampleID
                LEFT JOIN dbo.tlbTransferOutMaterial tom
                    ON tom.idfMaterial = m.idfMaterial
                       AND tom.intRowStatus = 0
                LEFT JOIN dbo.tlbTransferOUT tro
                    ON tro.idfTransferOut = tom.idfTransferOut
                       AND tro.intRowStatus = 0
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN dbo.tlbDepartment d
                    ON d.idfDepartment = m.idfInDepartment
                       AND d.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                    ON functionalArea.idfsReference = d.idfsDepartmentName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                    ON testCategoryType.idfsReference = t.idfsTestCategory
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                    ON accessionConditionType.idfsReference = m.idfsAccessionCondition
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                    ON sampleStatusType.idfsReference = m.idfsSampleStatus
            ORDER BY m.strBarcode DESC
            OPTION (RECOMPILE);
        END
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TRANSFER_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TRANSFER_ADVANCED_SEARCH_GETList
--
-- Description:	Get transferred advanced search list for the laboratory module use case LUC13.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/18/2019 Initial relase.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     10/21/2019 Added accession indicator and test status type ID to the list of 
--                             fields.
-- Stephen Long     01/22/2020 Converted site ID to site list for site filtration.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/07/2020 Added test name type ID to the model.
-- Stephen Long     04/15/2020 Changed select from table to tlbTransferOUT instead of tlbMaterial.
-- Stephen Long     04/23/2020 Correction on disease ID and disease name; add vector surveillance 
--                             session.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     05/06/2020 Added test started date and test category type name to the model.
-- Stephen Long     06/24/2020 Added external test check to the test left join.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/30/2020 Remove unneeded joins.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/16/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Mark Wilson		08/16/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     02/10/2022 Replaced joins for monitoring session and vector session
--                             disease references to improve performance.
-- Stephen Long     03/24/2022 Removed primary key from final results table variable.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/11/2022 Changed monitoring session disease join from inner to left.
-- Stephen Long     08/24/2022 Added test name type name parameter and where criteria against test 
--                             requested.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     10/14/2022 Changed monitoring session disease function to monitoring session
--                             to sample disease function.
-- Stephen Long     10/18/2022 Added test disease ID to the query.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/12/2023 Updated for site filtration queries.
-- Stephen Long     01/31/2023 Added coalesce on collection and entered dates.
-- Stephen Long     02/03/2023 Added filtration indicator logic.
-- Stephen Long     03/02/2023 Added sent to organization sent to site ID and where criteria.
-- Stephen Long     03/14/2023 Fix on default sort order.
-- Stephen Long     04/24/2023 Bug fix for item 5738.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TRANSFER_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @SentToOrganizationSiteID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @TestNameTypeName NVARCHAR(200) = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @TransferList VARCHAR(MAX) = NULL,
    @FiltrationIndicator BIT = 1,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @FunctionalAreas TABLE
    (
        DepartmentID BIGINT NOT NULL PRIMARY KEY,
        DepartmentNameID BIGINT NULL,
        FunctionalAreaName NVARCHAR(200) NULL
    );
    DECLARE @SampleStatusTypes TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        Name NVARCHAR(200) NOT NULL
    );
    DECLARE @AccessionConditionTypes TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        Name NVARCHAR(200) NOT NULL
    );
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL PRIMARY KEY,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL,
        RowAction INT NOT NULL
            DEFAULT 0
    );
    DECLARE @NarrowResults TABLE
    (
        ID BIGINT NOT NULL,
        SampleID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL,
        RowAction INT NOT NULL
            DEFAULT 99
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @SampleStatusTypeListTable TABLE (ID BIGINT NOT NULL PRIMARY KEY);

    DECLARE @Favorites XML;

    BEGIN TRY
        INSERT INTO @FunctionalAreas
        SELECT d.idfDepartment,
               idfsReference,
               name
        FROM dbo.tlbDepartment d
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164)
                ON d.idfsDepartmentName = idfsReference;

        INSERT INTO @SampleStatusTypes
        SELECT idfsReference,
               name
        FROM dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015);

        INSERT INTO @AccessionConditionTypes
        SELECT idfsReference,
               name
        FROM dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110);

        IF @SampleStatusTypeList IS NOT NULL
            INSERT INTO @SampleStatusTypeListTable
            SELECT CAST([Value] AS BIGINT)
            FROM dbo.FN_GBL_SYS_SplitList(@SampleStatusTypeList, NULL, ',');

        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @MonitoringSessionDiseases
        SELECT SampleID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_TO_SAMPLE_DISEASES_GET(@LanguageID)
        GROUP BY SampleID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, ';') AS DiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               1,
               CASE
                   WHEN tr.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN tr.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN tr.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN tr.idfsSite = @UserSiteID
                        OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND (
                      (
                          (
                              m.idfSendToOffice = @SentToOrganizationID
                              OR @SentToOrganizationID IS NULL
                          )
                          AND (
                                  (
                                      m.blnAccessioned = @AccessionedIndicatorList
                                      OR (
                                             m.blnAccessioned = 1
                                             AND m.datAccession IS NULL
                                             AND @AccessionedIndicatorList IS NOT NULL
                                         )
                                  )
                                  AND m.idfsAccessionCondition IS NULL
                                  AND m.idfsSampleStatus IS NULL
                                  AND m.datDestructionDate IS NULL
                                  OR (
                                         @AccessionedIndicatorList IS NULL
                                         AND @SampleStatusTypeList IS NULL
                                     )
                              )
                      )
                      OR (
                             (
                                 (
                                     m.idfSendToOffice = @SentToOrganizationID
                                     AND m.idfsSite = @SentToOrganizationSiteID
                                 )
                                 OR @SentToOrganizationID IS NULL
                             )
                             AND (
                                     (m.idfsSampleStatus IN (
                                                                SELECT ID FROM @SampleStatusTypeListTable
                                                            )
                                     )
                                     OR (
                                            m.idfsAccessionCondition IN (
                                                                            SELECT ID FROM @SampleStatusTypeListTable
                                                                        )
                                            AND (
                                                    m.idfsSampleStatus IS NULL
                                                    OR m.idfsSampleStatus = 10015007 --In Repository
                                                )
                                        )
                                     OR (
                                            @SampleStatusTypeList IS NULL
                                            AND @AccessionedIndicatorList IS NULL
                                        )
                                 )
                         )
                  );

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = tr.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND sgs.idfsSite = tr.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = tr.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = tr.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE tr.intRowStatus = 0
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = tr.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT tr.idfTransferOut
            FROM dbo.tlbTransferOUT tr
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = tr.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE tr.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               tom.idfMaterial,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = tr.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = tr.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT tr.idfTransferOut,
               tom.idfMaterial,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = tr.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbTransferOUT tr
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
        WHERE tr.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = tr.idfsSite
        )
              AND m.idfsSampleType <> 10320001 --Unknown
              AND m.datSampleStatusDate
              BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT tr.idfTransferOut
            FROM dbo.tlbTransferOUT tr
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = tr.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT tr.idfTransferOut,
               m.idfMaterial,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator),
               0
        FROM @Results res
            INNER JOIN dbo.tlbTransferOUT tr
                ON tr.idfTransferOut = res.ID
            INNER JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfTransferOut = tr.idfTransferOut
                   AND tom.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = tom.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbTesting t
                ON t.idfMaterial = m.idfMaterial
                   AND t.intRowStatus = 0
                   AND t.blnExternalTest = 1
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSessionToDiagnosis msd
                ON msd.idfMonitoringSession = ms.idfMonitoringSession
                   AND msd.intRowStatus = 0
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      (tr.idfTransferOut IN (
                                                SELECT CAST([Value] AS BIGINT)
                                                FROM dbo.FN_GBL_SYS_SplitList(@TransferList, NULL, ',')
                                            )
                      )
                      OR (@TransferList IS NULL)
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session (Avian and Livestock)
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.idfSendToOffice = @SentToOrganizationID
                              OR @SentToOrganizationID IS NULL
                          )
                          AND (
                                  (
                                      m.blnAccessioned = @AccessionedIndicatorList
                                      OR (
                                             m.blnAccessioned = 1
                                             AND m.datAccession IS NULL
                                             AND @AccessionedIndicatorList IS NOT NULL
                                         )
                                  )
                                  AND m.idfsAccessionCondition IS NULL
                                  AND m.idfsSampleStatus IS NULL
                                  AND m.datDestructionDate IS NULL
                                  OR (
                                         @AccessionedIndicatorList IS NULL
                                         AND @SampleStatusTypeList IS NULL
                                     )
                              )
                      )
                      OR (
                             (
                                 (
                                     m.idfSendToOffice = @SentToOrganizationID
                                     AND m.idfsSite = @SentToOrganizationSiteID
                                 )
                                 OR @SentToOrganizationID IS NULL
                             )
                             AND (
                                     (m.idfsSampleStatus IN (
                                                                SELECT ID FROM @SampleStatusTypeListTable
                                                            )
                                     )
                                     OR (
                                            m.idfsAccessionCondition IN (
                                                                            SELECT ID FROM @SampleStatusTypeListTable
                                                                        )
                                            AND (
                                                    m.idfsSampleStatus IS NULL
                                                    OR m.idfsSampleStatus = 10015007 --In Repository
                                                )
                                        )
                                     OR (
                                            @SampleStatusTypeList IS NULL
                                            AND @AccessionedIndicatorList IS NULL
                                        )
                                 )
                         )
                  )
              AND (
                      tr.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                      OR tr.TestRequested LIKE '%' + @TestNameTypeName + '%'
                      OR @TestNameTypeName IS NULL
                  )
              AND (
                      msd.idfsDiagnosis = @DiseaseID
                      OR m.DiseaseID = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR (@EIDSSReportCampaignOrSessionID IS NULL)
                  )
              AND (
                      (m.strCalculatedHumanName LIKE '%' + @PatientName + '%')
                      OR (@PatientName IS NULL)
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tr.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
        GROUP BY tr.idfTransferOut,
                 m.idfMaterial
        OPTION (RECOMPILE);

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        DECLARE @InProgressCount INT,
                @RecordCount INT = (
                                       SELECT COUNT(ID) FROM @FinalResults
                                   );

        IF @RecordCount > 10000
        BEGIN
            INSERT INTO @NarrowResults
            SELECT TOP 10000
                ID,
                SampleID,
                res.ReadPermissionIndicator,
                res.AccessToPersonalDataPermissionIndicator,
                res.AccessToGenderAndAgeDataPermissionIndicator,
                res.WritePermissionIndicator,
                res.DeletePermissionIndicator,
                99
            FROM @FinalResults res;

            SET @InProgressCount =
            (
                SELECT TOP 10000
                    COUNT(res.ID)
                FROM @NarrowResults res
                    INNER JOIN dbo.tlbTransferOUT tr
                        ON tr.idfTransferOut = res.ID
                WHERE tr.idfsTransferStatus IN (   10001003, --In Progress
                                                   10001006  --Amended
                                               )
            );

            SELECT tr.idfTransferOut AS TransferID,
                   tr.strBarcode AS EIDSSTransferID,
                   m.idfMaterial AS TransferredOutSampleID,
                   (
                       SELECT TOP 1
                           idfMaterial
                       FROM dbo.tlbMaterial
                       WHERE idfRootMaterial = m.idfMaterial
                             AND intRowStatus = 0
                             AND idfsSampleKind = 12675430000000 --Transferred in
                   ) AS TransferredInSampleID,
                   CASE
                       WHEN f.SampleID IS NULL THEN
                           0
                       ELSE
                           1
                   END AS FavoriteIndicator,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                           '********'
                       ELSE
                           m.strCalculatedHumanName
                   END AS PatientOrFarmOwnerName,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   tr.idfSendToOffice AS TransferredToOrganizationID,
                   transferredToOrganization.[FullName] AS TransferredToOrganizationName,
                   tr.idfSendFromOffice AS TransferredFromOrganizationID,
                   tr.datSendDate AS TransferDate,
                   tr.TestRequested,
                   t.idfTesting AS TestID,
                   t.idfsTestName AS TestNameTypeID,
                   testNameType.name AS TestNameTypeName,
                   t.idfsTestResult AS TestResultTypeID,
                   testResultType.name AS TestResultTypeName,
                   t.idfsTestStatus AS TestStatusTypeID,
                   testStatusType.name AS TestStatusTypeName,
                   t.idfsTestCategory AS TestCategoryTypeID,
                   t.idfsDiagnosis AS TestDiseaseID,
                   t.datStartedDate AS StartedDate,
                   t.datConcludedDate AS ResultDate,
                   t.strContactPerson AS ContactPersonName,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   sampleType.name AS SampleTypeName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           CAST(m.DiseaseID AS NVARCHAR(MAX))
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseIdentifiers
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DiseaseIdentifiers
                       ELSE
                           ''
                   END AS DiseaseID,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseNames
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DiseaseNames
                       ELSE
                           ''
                   END AS DiseaseName,
                   m.datAccession AS AccessionDate,
                   m.idfInDepartment AS FunctionalAreaID,
                   fa.FunctionalAreaName,
                   m.blnAccessioned AS AccessionIndicator,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   CASE
                       WHEN m.blnAccessioned = 0
                            AND m.idfsSampleStatus IS NULL
                            AND m.idfsAccessionCondition IS NULL THEN
                           'Un-accessioned'
                       WHEN m.idfsSampleStatus IS NULL THEN
                           accessionConditionType.name
                       WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                           accessionConditionType.name
                       ELSE
                           sampleStatusType.name
                   END AS AccessionConditionOrSampleStatusTypeName,
                   m.strCondition AS AccessionComment,
                   tr.strNote AS PurposeOfTransfer,
                   tr.idfsSite AS TransferredFromOrganizationSiteID,
                   m.idfSendToOffice AS SentToOrganizationID,
                   tr.idfSendByPerson AS SentByPersonID,
                   tr.idfsTransferStatus AS TransferStatusTypeID,
                   tr.intRowStatus AS RowStatus,
                   a.strAnimalCode AS EIDSSAnimalID,
                   IIF(
                      (
                          SELECT COUNT(t2.idfTesting)
                          FROM dbo.tlbTesting t2
                          WHERE t2.idfsTestStatus IN (   10001003,
                                                                  --In Progress
                                                         10001004,
                                                                  --Preliminary
                                                         10001005 --Not Started
                                                     )
                                AND t2.idfMaterial = m.idfMaterial
                      ) > 0,
                      1,
                      0) AS TestAssignedIndicator,
                   (CASE
                        WHEN transferredToOrganization.idfsSite IS NULL THEN
                            1
                        ELSE
                            0
                    END
                   ) AS NonEIDSSLaboratoryIndicator,
                   CASE
                       WHEN res.ReadPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.ReadPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.ReadPermissionIndicator)
                   END AS ReadPermissionindicator,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
                   END AS AccessToPersonalDataPermissionIndicator,
                   CASE
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
                   END AS AccessToGenderAndAgeDataPermissionIndicator,
                   CASE
                       WHEN res.WritePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.WritePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.WritePermissionIndicator)
                   END AS WritePermissionIndicator,
                   CASE
                       WHEN res.DeletePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.DeletePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.DeletePermissionIndicator)
                   END AS DeletePermissionIndicator,
                   res.RowAction,
                   0 AS RowSelectionIndicator,
                   @InProgressCount AS InProgressCount,
                   10000 AS TotalRowCount
            FROM @NarrowResults res
                INNER JOIN dbo.tlbTransferOUT tr
                    ON tr.idfTransferOut = res.ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.SampleID
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnExternalTest = 1
                LEFT JOIN
                (
                    SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                ) f
                    ON m.idfMaterial = f.SampleID
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN @MonitoringSessionDiseases msDiseases
                    ON msDiseases.ID = m.idfMaterial
                       AND m.idfMonitoringSession IS NOT NULL
                LEFT JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                    ON diseaseName.idfsReference = m.DiseaseID
                LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) transferredToOrganization
                    ON transferredToOrganization.idfOffice = tr.idfSendToOffice
                       AND transferredToOrganization.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN @FunctionalAreas fa
                    ON fa.DepartmentID = m.idfInDepartment
                LEFT JOIN @SampleStatusTypes sampleStatusType
                    ON sampleStatusType.ID = m.idfsSampleStatus
                LEFT JOIN @AccessionConditionTypes accessionConditionType
                    ON accessionConditionType.ID = m.idfsAccessionCondition
            ORDER BY tr.strBarcode DESC
            OPTION (RECOMPILE);
        END
        ELSE
        BEGIN
            SET @InProgressCount =
            (
                SELECT COUNT(res.ID)
                FROM @FinalResults res
                    INNER JOIN dbo.tlbTransferOUT tr
                        ON tr.idfTransferOut = res.ID
                WHERE tr.idfsTransferStatus IN (   10001003, --In Progress
                                                   10001006  --Amended
                                               )
            );

            SELECT tr.idfTransferOut AS TransferID,
                   tr.strBarcode AS EIDSSTransferID,
                   m.idfMaterial AS TransferredOutSampleID,
                   (
                       SELECT TOP 1
                           idfMaterial
                       FROM dbo.tlbMaterial
                       WHERE idfRootMaterial = m.idfMaterial
                             AND intRowStatus = 0
                             AND idfsSampleKind = 12675430000000 --Transferred in
                   ) AS TransferredInSampleID,
                   CASE
                       WHEN f.SampleID IS NULL THEN
                           0
                       ELSE
                           1
                   END AS FavoriteIndicator,
                   m.strCalculatedCaseID AS EIDSSReportOrSessionID,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                           '********'
                       ELSE
                           m.strCalculatedHumanName
                   END AS PatientOrFarmOwnerName,
                   m.strBarcode AS EIDSSLaboratorySampleID,
                   tr.idfSendToOffice AS TransferredToOrganizationID,
                   transferredToOrganization.[FullName] AS TransferredToOrganizationName,
                   tr.idfSendFromOffice AS TransferredFromOrganizationID,
                   tr.datSendDate AS TransferDate,
                   tr.TestRequested,
                   t.idfTesting AS TestID,
                   t.idfsTestName AS TestNameTypeID,
                   testNameType.name AS TestNameTypeName,
                   t.idfsTestResult AS TestResultTypeID,
                   testResultType.name AS TestResultTypeName,
                   t.idfsTestStatus AS TestStatusTypeID,
                   testStatusType.name AS TestStatusTypeName,
                   t.idfsTestCategory AS TestCategoryTypeID,
                   t.idfsDiagnosis AS TestDiseaseID,
                   t.datStartedDate AS StartedDate,
                   t.datConcludedDate AS ResultDate,
                   t.strContactPerson AS ContactPersonName,
                   m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
                   sampleType.name AS SampleTypeName,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           CAST(m.DiseaseID AS NVARCHAR(MAX))
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseIdentifiers
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DiseaseIdentifiers
                       ELSE
                           ''
                   END AS DiseaseID,
                   CASE
                       WHEN m.DiseaseID IS NOT NULL THEN
                           diseaseName.name
                       WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                           msDiseases.DiseaseNames
                       WHEN
                       (
                           m.DiseaseID IS NULL
                           AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                       ) THEN
                           vsDiseases.DiseaseNames
                       ELSE
                           ''
                   END AS DiseaseName,
                   m.datAccession AS AccessionDate,
                   m.idfInDepartment AS FunctionalAreaID,
                   fa.FunctionalAreaName,
                   m.blnAccessioned AS AccessionIndicator,
                   m.idfsAccessionCondition AS AccessionConditionTypeID,
                   m.idfsSampleStatus AS SampleStatusTypeID,
                   CASE
                       WHEN m.blnAccessioned = 0
                            AND m.idfsSampleStatus IS NULL
                            AND m.idfsAccessionCondition IS NULL THEN
                           'Un-accessioned'
                       WHEN m.idfsSampleStatus IS NULL THEN
                           accessionConditionType.name
                       WHEN m.idfsSampleStatus = 10015007 --In Repository
                   THEN
                           accessionConditionType.name
                       ELSE
                           sampleStatusType.name
                   END AS AccessionConditionOrSampleStatusTypeName,
                   m.strCondition AS AccessionComment,
                   tr.strNote AS PurposeOfTransfer,
                   tr.idfsSite AS TransferredFromOrganizationSiteID,
                   m.idfSendToOffice AS SentToOrganizationID,
                   tr.idfSendByPerson AS SentByPersonID,
                   tr.idfsTransferStatus AS TransferStatusTypeID,
                   tr.intRowStatus AS RowStatus,
                   a.strAnimalCode AS EIDSSAnimalID,
                   IIF(
                      (
                          SELECT COUNT(t2.idfTesting)
                          FROM dbo.tlbTesting t2
                          WHERE t2.idfsTestStatus IN (   10001003,
                                                                  --In Progress
                                                         10001004,
                                                                  --Preliminary
                                                         10001005 --Not Started
                                                     )
                                AND t2.idfMaterial = m.idfMaterial
                      ) > 0,
                      1,
                      0) AS TestAssignedIndicator,
                   (CASE
                        WHEN transferredToOrganization.idfsSite IS NULL THEN
                            1
                        ELSE
                            0
                    END
                   ) AS NonEIDSSLaboratoryIndicator,
                   CASE
                       WHEN res.ReadPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.ReadPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.ReadPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.ReadPermissionIndicator)
                   END AS ReadPermissionindicator,
                   CASE
                       WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
                   END AS AccessToPersonalDataPermissionIndicator,
                   CASE
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
                   END AS AccessToGenderAndAgeDataPermissionIndicator,
                   CASE
                       WHEN res.WritePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.WritePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.WritePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.WritePermissionIndicator)
                   END AS WritePermissionIndicator,
                   CASE
                       WHEN res.DeletePermissionIndicator = 5 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 4 THEN
                           CONVERT(BIT, 0)
                       WHEN res.DeletePermissionIndicator = 3 THEN
                           CONVERT(BIT, 1)
                       WHEN res.DeletePermissionIndicator = 2 THEN
                           CONVERT(BIT, 0)
                       ELSE
                           CONVERT(BIT, res.DeletePermissionIndicator)
                   END AS DeletePermissionIndicator,
                   res.RowAction,
                   0 AS RowSelectionIndicator,
                   @InProgressCount AS InProgressCount,
                   COUNT(*) OVER () AS TotalRowCount
            FROM @FinalResults res
                INNER JOIN dbo.tlbTransferOUT tr
                    ON tr.idfTransferOut = res.ID
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.SampleID
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                    ON sampleType.idfsReference = m.idfsSampleType
                LEFT JOIN dbo.tlbTesting t
                    ON t.idfMaterial = m.idfMaterial
                       AND t.intRowStatus = 0
                       AND t.blnExternalTest = 1
                LEFT JOIN
                (
                    SELECT SampleID = UserPref.value('@SampleID', 'BIGINT')
                    FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
                ) f
                    ON m.idfMaterial = f.SampleID
                LEFT JOIN dbo.tlbAnimal a
                    ON a.idfAnimal = m.idfAnimal
                       AND a.intRowStatus = 0
                LEFT JOIN @MonitoringSessionDiseases msDiseases
                    ON msDiseases.ID = m.idfMaterial
                       AND m.idfMonitoringSession IS NOT NULL
                LEFT JOIN @VectorSessionDiseases vsDiseases
                    ON vsDiseases.ID = m.idfVectorSurveillanceSession
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                    ON diseaseName.idfsReference = m.DiseaseID
                LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) transferredToOrganization
                    ON transferredToOrganization.idfOffice = tr.idfSendToOffice
                       AND transferredToOrganization.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                    ON testNameType.idfsReference = t.idfsTestName
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                    ON testResultType.idfsReference = t.idfsTestResult
                LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                    ON testStatusType.idfsReference = t.idfsTestStatus
                LEFT JOIN @FunctionalAreas fa
                    ON fa.DepartmentID = m.idfInDepartment
                LEFT JOIN @SampleStatusTypes sampleStatusType
                    ON sampleStatusType.ID = m.idfsSampleStatus
                LEFT JOIN @AccessionConditionTypes accessionConditionType
                    ON accessionConditionType.ID = m.idfsAccessionCondition
            ORDER BY tr.strBarcode DESC
            OPTION (RECOMPILE);
        END
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_REF_SampleTypeReference_GetList]...';


GO
--=====================================================================================================
-- Author:		Original Author Unknown
-- Description:	Returns a list of active sample type references
--							
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -----------------------------------------------
-- Ricky Moss		2018/10/24	Initial Reference
-- Ricky Moss		12/13/2018	Removed return code and usp_HACode_GetCheckList Store procedure
-- Ricky Moss		05/06/2020	Orded by English Name
-- Ricky Moss		06/15/2020	Added quick search parameter field
-- Steven Verner	03/22/2021  Added paging.
-- Ann Xiong		07/14/2021  Fixed default sorting order.
-- Ann Xiong		08/05/2021	Updated default sorting order.
-- Mandar Kulkarni	08/09/2021	Updated to return LOINC NUMBER
-- Doug Albanese	11/21/2022	Swapped out FNReferenceRepair for FN_GBL_Repair
-- Doug Albanese	04/17/2023	Add a new paramter for searching against HA Codes
--
-- Test Code:
-- exec USP_REF_SAMPLETYPEREFERENCE_GETList 'en', 'ab';
-- exec USP_REF_SAMPLETYPEREFERENCE_GETList 'en', null;
--=====================================================================================================

ALTER PROCEDURE [dbo].[USP_REF_SampleTypeReference_GetList]
( 
	 @langID				  NVARCHAR(50)
	,@strSearchSampleType	  NVARCHAR(50) 
	,@advancedSearch		  NVARCHAR(100) = NULL
	,@pageNo				  INT = 1
	,@pageSize				  INT = 10 
	,@sortColumn			  NVARCHAR(30) = 'intOrder' 
	,@sortOrder				  NVARCHAR(4) = 'asc'
	,@intHACode				  INT = NULL
)
AS
BEGIN
	BEGIN TRY
		DECLARE @firstRec  INT
		DECLARE @lastRec   INT
		DECLARE @t		   TABLE( 
			idfsSampleType bigint, 
			strDefault nvarchar(2000), 
			strName nvarchar(2000),
			strSampleCode nvarchar(50),
			LOINC_NUMBER nvarchar(255),
			intHACode int,
			strHACode nvarchar(4000),
			strHACodeNames nvarchar(4000),
			intOrder int)

		SET @firstRec = (@pageNo-1)* @pagesize
		SET @lastRec = (@pageNo*@pageSize+1)

		IF( @advancedSearch IS NOT NULL )
		BEGIN
			INSERT INTO @T
			SELECT * FROM
				(SELECT 
				st.[idfsSampleType],
				stbr.strDefault,
				stbr.name,
				st.[strSampleCode],
				lem.LOINC_NUM AS LOINC_NUMBER,
				stbr.[intHACode],
				dbo.FN_GBL_HACode_ToCSV(@LangID, stbr.[intHACode]) as [strHACode],
				dbo.FN_GBL_HACodeNames_ToCSV(@LangID, stbr.[intHACode]) as [strHACodeNames],
				stbr.[intOrder]
			FROM dbo.[trtSampleType] as st  -- Sample Type	
			INNER JOIN dbo.FN_GBL_Repair(@LangId, 19000087)  as stbr -- Sample Type base reference
				ON st.[idfsSampleType] = stbr.[idfsReference]
			LEFT JOIN dbo.LOINCEidssMapping lem ON lem.idfsBaseReference = st.idfsSampleType
			WHERE st.[intRowStatus] = 0
			) AS S
			WHERE 
				(CAST( idfsSampleType AS VARCHAR(20)) LIKE '%' + @advancedSearch + '%' OR
				strDefault LIKE '%'+ @advancedSearch + '%' OR 
				[name] LIKE '%' + @advancedSearch + '%' OR 
				strSampleCode LIKE '%' + @advancedSearch + '%' OR 
				strHACodeNames LIKE '%' + @advancedSearch + '%') 
				AND ((intHACode & @intHACode = @intHACode) OR @intHACode IS NULL)
		END ELSE
		IF @strSearchSampleType IS NULL
		 begin
		   INSERT INTO @T
		   SELECT 
			   st.[idfsSampleType],
			   stbr.strDefault,
			   stbr.name,
			   st.[strSampleCode],
			   LEM.LOINC_NUM AS LOINC_NUMBER,
			   stbr.[intHACode],
			   dbo.FN_GBL_HACode_ToCSV(@LangID, stbr.[intHACode]) as [strHACode],
			   dbo.FN_GBL_HACodeNames_ToCSV(@LangID, stbr.[intHACode]) as [strHACodeNames],
			   stbr.[intOrder]
		   FROM dbo.[trtSampleType] as st  -- Sample Type	
		   INNER JOIN dbo.FN_GBL_Repair(@LangId, 19000087)  as stbr -- Sample Type base reference
			   ON st.[idfsSampleType] = stbr.[idfsReference]
		   LEFT JOIN dbo.LOINCEidssMapping lem ON lem.idfsBaseReference = st.idfsSampleType
		   WHERE st.[intRowStatus] = 0	
			   AND ((intHACode & @intHACode = @intHACode) OR @intHACode IS NULL)
		 end
		ELSE
		 
		 INSERT INTO @T
		 SELECT * FROM
			(SELECT 
			st.[idfsSampleType],
			stbr.strDefault,
			stbr.name,
			st.[strSampleCode],
			LEM.LOINC_NUM AS LOINC_NUMBER,
			stbr.[intHACode],
			dbo.FN_GBL_HACode_ToCSV(@LangID, stbr.[intHACode]) AS [strHACode],
			dbo.FN_GBL_HACodeNames_ToCSV(@LangID, stbr.[intHACode]) AS [strHACodeNames],
			stbr.[intOrder]
		FROM dbo.[trtSampleType] AS st  -- Sample Type	
		INNER JOIN dbo.FN_GBL_Repair(@LangId, 19000087)  AS stbr -- Sample Type base reference
			ON st.[idfsSampleType] = stbr.[idfsReference]
		LEFT JOIN dbo.LOINCEidssMapping lem ON lem.idfsBaseReference = st.idfsSampleType
		WHERE st.[intRowStatus] = 0 
			AND ((intHACode & @intHACode = @intHACode) OR @intHACode IS NULL)
		) AS S
		WHERE strDefault LIKE '%'+ @strSearchSampleType + '%' OR [name] LIKE '%' + @strSearchSampleType + '%' OR strSampleCode LIKE '%' + @strSearchSampleType + '%' OR strHACodeNames LIKE '%' + @strSearchSampleType + '%'
		
		;
		WITH CTEResults AS
		(
			SELECT ROW_NUMBER() OVER ( ORDER BY 
				CASE WHEN @sortColumn = 'idfsSampleType' AND @SortOrder = 'asc' THEN idfsSampleType END ASC,
				CASE WHEN @sortColumn = 'idfsSampleType' AND @SortOrder = 'desc' THEN idfsSampleType END DESC,
				CASE WHEN @sortColumn = 'strDefault' AND @SortOrder = 'asc' THEN strDefault END ASC,
				CASE WHEN @sortColumn = 'strDefault' AND @SortOrder = 'desc' THEN strDefault END DESC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'asc' THEN strName END ASC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'desc' THEN strName END DESC,
				CASE WHEN @sortColumn = 'strSampleCode' AND @SortOrder = 'asc' THEN strSampleCode END ASC,
				CASE WHEN @sortColumn = 'strSampleCode' AND @SortOrder = 'desc' THEN strSampleCode END DESC,
				CASE WHEN @sortColumn = 'intHACode' AND @SortOrder = 'asc' THEN intHACode END ASC,
				CASE WHEN @sortColumn = 'intHACode' AND @SortOrder = 'desc' THEN intHACode END DESC,
				CASE WHEN @sortColumn = 'strHACode' AND @SortOrder = 'asc' THEN strHACode END ASC,
				CASE WHEN @sortColumn = 'strHACode' AND @SortOrder = 'desc' THEN strHACode END DESC,
				CASE WHEN @sortColumn = 'strHACodeNames' AND @SortOrder = 'asc' THEN strHACodeNames END ASC,
				CASE WHEN @sortColumn = 'strHACodeNames' AND @SortOrder = 'desc' THEN strHACodeNames END DESC,
				CASE WHEN @sortColumn = 'intorder' AND @SortOrder = 'asc' THEN intOrder END ASC,
				CASE WHEN @sortColumn = 'intorder' AND @SortOrder = 'desc' THEN intOrder END DESC
				,IIF( @sortColumn = 'intOrder',strName,NULL) ASC
		) AS ROWNUM,		
		COUNT(*) OVER () AS 
				TotalRowCount,
				idfsSampleType, 
				strDefault, 
				strName,
				strSampleCode,
				LOINC_NUMBER,
				intHACode, 
				strHACode,			
				strHACodeNames,
				intOrder
			FROM @T
		)
			SELECT
				TotalRowCount,
				idfsSampleType, 
				strDefault, 
				strName,
				strSampleCode,
				LOINC_NUMBER,
				intHACode, 
				strHACode,			
				strHACodeNames,
				intOrder,
				TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
				CurrentPage = @pageNo 
		FROM CTEResults
		WHERE RowNum > @firstRec AND RowNum < @lastRec 	
END TRY

BEGIN CATCH
	THROW;
END CATCH

END
GO
PRINT N'Update complete.';


GO
