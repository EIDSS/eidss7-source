/*
Deployment script for EIDSS7_GG

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO

PRINT N'Dropping Default Constraint [dbo].[DF__ArchiveSe__Audit__3CEAB534]...';


GO
ALTER TABLE [dbo].[ArchiveSetting] DROP CONSTRAINT [DF__ArchiveSe__Audit__3CEAB534];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__Diagnosis__Audit__2DE868C6]...';


GO
ALTER TABLE [dbo].[DiagnosisGroupToGender] DROP CONSTRAINT [DF__Diagnosis__Audit__2DE868C6];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__HumanDise__Audit__2236BEF8]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportVaccination] DROP CONSTRAINT [DF__HumanDise__Audit__2236BEF8];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__HumanDise__intRo__21429ABF]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportVaccination] DROP CONSTRAINT [DF__HumanDise__intRo__21429ABF];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__LkupCount__Audit__71DE6BB7]...';


GO
ALTER TABLE [dbo].[LkupCountryToStandardRoleMap] DROP CONSTRAINT [DF__LkupCount__Audit__71DE6BB7];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__LkupCount__Audit__72D28FF0]...';


GO
ALTER TABLE [dbo].[LkupCountryToStandardRoleMap] DROP CONSTRAINT [DF__LkupCount__Audit__72D28FF0];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__LkupCount__Audit__73C6B429]...';


GO
ALTER TABLE [dbo].[LkupCountryToStandardRoleMap] DROP CONSTRAINT [DF__LkupCount__Audit__73C6B429];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__LkupCount__intRo__6FF62345]...';


GO
ALTER TABLE [dbo].[LkupCountryToStandardRoleMap] DROP CONSTRAINT [DF__LkupCount__intRo__6FF62345];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__LkupCount__rowgu__70EA477E]...';


GO
ALTER TABLE [dbo].[LkupCountryToStandardRoleMap] DROP CONSTRAINT [DF__LkupCount__rowgu__70EA477E];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__LkupRoleS__Audit__485C67E0]...';


GO
ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] DROP CONSTRAINT [DF__LkupRoleS__Audit__485C67E0];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__LkupRoleS__intRo__476843A7]...';


GO
ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess] DROP CONSTRAINT [DF__LkupRoleS__intRo__476843A7];


GO
PRINT N'Dropping Default Constraint [dbo].[DF__OutbreakS__Audit__6740E1B3]...';


GO
ALTER TABLE [dbo].[OutbreakSpeciesParameter] DROP CONSTRAINT [DF__OutbreakS__Audit__6740E1B3];


GO
PRINT N'Dropping Table [dbo].[ZZZ_09Feb2023__LkupRoleToSystemFunctionAccess]...';


GO
DROP TABLE [dbo].[ZZZ_09Feb2023__LkupRoleToSystemFunctionAccess];


GO
PRINT N'Dropping Table [dbo].[ZZZ_DashboardMapping]...';


GO
DROP TABLE [dbo].[ZZZ_DashboardMapping];


GO

PRINT N'Creating Default Constraint unnamed constraint on [dbo].[ArchiveSetting]...';


GO
ALTER TABLE [dbo].[ArchiveSetting]
    ADD DEFAULT (getdate()) FOR [AuditCreateDTM];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[DiagnosisGroupToGender]...';


GO
ALTER TABLE [dbo].[DiagnosisGroupToGender]
    ADD DEFAULT (getdate()) FOR [AuditCreateDTM];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[HumanDiseaseReportVaccination]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportVaccination]
    ADD DEFAULT ((0)) FOR [intRowStatus];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[HumanDiseaseReportVaccination]...';


GO
ALTER TABLE [dbo].[HumanDiseaseReportVaccination]
    ADD DEFAULT (getdate()) FOR [AuditCreateDTM];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[LkupCountryToStandardRoleMap]...';


GO
ALTER TABLE [dbo].[LkupCountryToStandardRoleMap]
    ADD DEFAULT ((0)) FOR [intRowStatus];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[LkupCountryToStandardRoleMap]...';


GO
ALTER TABLE [dbo].[LkupCountryToStandardRoleMap]
    ADD DEFAULT (newid()) FOR [rowguid];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[LkupCountryToStandardRoleMap]...';


GO
ALTER TABLE [dbo].[LkupCountryToStandardRoleMap]
    ADD DEFAULT ('SYSTEM') FOR [AuditCreateUser];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[LkupCountryToStandardRoleMap]...';


GO
ALTER TABLE [dbo].[LkupCountryToStandardRoleMap]
    ADD DEFAULT (getdate()) FOR [AuditCreateDTM];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[LkupCountryToStandardRoleMap]...';


GO
ALTER TABLE [dbo].[LkupCountryToStandardRoleMap]
    ADD DEFAULT (getdate()) FOR [AuditUpdateDTM];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[LkupRoleSystemFunctionAccess]...';


GO
ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess]
    ADD DEFAULT ((0)) FOR [intRowStatus];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[LkupRoleSystemFunctionAccess]...';


GO
ALTER TABLE [dbo].[LkupRoleSystemFunctionAccess]
    ADD DEFAULT (getdate()) FOR [AuditCreateDTM];


GO
PRINT N'Creating Default Constraint unnamed constraint on [dbo].[OutbreakSpeciesParameter]...';


GO
ALTER TABLE [dbo].[OutbreakSpeciesParameter]
    ADD DEFAULT (getdate()) FOR [AuditCreateDTM];


GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_ADMINLEVEL_GETLIST]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_ADMINLEVEL_GETLIST
--
-- Description: Get the list of admin level units based on search criteria entered.
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mandar Kulkarni   11292021          Initial release.
-- Manickandan Govindarajan 03/16/2022   Fixed Rayan  National name and Default Name          
-- Manickandan Govindarajan 10/27/2022  Added strSettlementHASC as retrun type         
-- Manickandan Govindarajan 11/09/2022  Added strCode paramter and pulling hascode and strcode for all the levels.
-- Testing Code:
/*

EXEC	[dbo].[USP_ADMIN_ADMINLEVEL_GETLIST]
N'en-US',10003005,NULL,NULL,NULL,NULL,N'BAKU',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,10,NULL,NULL

*/
-- ================================================================================================
ALTER       PROCEDURE [dbo].[USP_ADMIN_ADMINLEVEL_GETLIST] 
(
	@LangId NVARCHAR(20),
	@idfsAdminLevel BIGINT,
	@idfsCountry BIGINT,
	@idfsRegion BIGINT,
	@idfsRayon BIGINT,
	@idfsSettlement BIGINT,
	@strDefaultName NVARCHAR(100),
	@strNationalName NVARCHAR(100),
	@idfsSettlementType BIGINT,
	@LatFrom FLOAT,
	@LatTo FLOAT,
	@LongFrom FLOAT,
	@LongTo FLOAT,
	@ElevationFrom FLOAT,
	@ElevationTo FLOAT,
	@pageNo INT = 1,
	@pageSize INT = 10, 
	@sortColumn NVARCHAR(30) = '', 
	@sortOrder NVARCHAR(4) = 'asc',
	@strHASC NVARCHAR(6) = NULL,
	@strCode NVARCHAR(200) = NULL

)
AS
BEGIN
	BEGIN TRY
		DECLARE @firstRec INT, @lastRec INT,@idfsLangId BIGINT 
		
		SELECT @idfsLangId = idfsBaseReference 
		FROM dbo.trtBaseReference a 
		WHERE a.strBaseReferenceCode = @LangId 
		AND a.idfsReferenceType = 19000049

		DECLARE @Results TABLE
		( 
			idfKey BIGINT PRIMARY KEY IDENTITY(1,1),
			idfsAdministrativeLevel BIGINT,
			idfsCountry BIGINT,
			strCountryHASC NVARCHAR(255),
			strCountryCode NVARCHAR(255),
			strDefaultCountryName NVARCHAR(200),
			strNationalCountryName NVARCHAR(200),
			idfsRegion BIGINT,
			strRegionHASC NVARCHAR(255),
			strRegionCode NVARCHAR(255),
			strDefaultRegionName NVARCHAR(200),
			strNationalRegionName NVARCHAR(200),
			idfsRayon BIGINT,
			strRayonHASC NVARCHAR(255),
			strRayonCode NVARCHAR(255),
			strDefaultRayonName NVARCHAR(200),
			strNationalRayonName NVARCHAR(200),
			idfsSettlement NVARCHAR(200),
			strSettlementHASC NVARCHAR(255),
			strSettlementCode NVARCHAR(255),
			strDefaultSettlementName NVARCHAR(200),
			strNationalSettlementName NVARCHAR(200),
			idfsSettlementType BIGINT,
			strSettlementTypeDefaultName NVARCHAR(200),
			strSettlementTypeNationalName NVARCHAR(200),
			Latitude FLOAT,
			Longitude FLOAT,
			Elevation FLOAT
		)
		IF @idfsAdminLevel = 10003001
			BEGIN
				SET @idfsRegion = NULL
				SET @idfsRayon = NULL
				SET @idfsSettlement = NULL
			END

		IF @idfsAdminLevel = 10003003
			BEGIN
				SET @idfsRayon = NULL
				SET @idfsSettlement = NULL
			END

		IF @idfsAdminLevel = 10003002
			BEGIN
				SET @idfsSettlement = NULL
			END

		-- Populate country names if Administrative Level is for the country
		IF ((@idfsAdminLevel = 10003001 OR @idfsCountry IS NOT NULL) AND (@idfsAdminLevel = 10003001  AND @idfsRegion IS NULL AND @idfsRayon IS NULL AND @idfsSettlement IS NULL))
			OR @idfsAdminLevel IS NULL
			BEGIN 
				INSERT INTO @Results
				(
					idfsAdministrativeLevel,
					idfsCountry,
					strCountryHASC,
					strCountryCode,
					strNationalCountryName,
					strDefaultCountryName
				)
				SELECT @idfsAdminLevel, 
						a.idfsCountry,
						a.strHASC,
						a.strCode,
						c.strTextString,
						b.strDefault
				FROM dbo.gisCountry a
				INNER JOIN dbo.gisBaseReference b ON a.idfsCountry = b.idfsGISBaseReference AND b.intRowStatus = 0 
				INNER JOIN dbo.gisStringNameTranslation c ON b.idfsGISBaseReference = c.idfsGISBaseReference AND b.intRowStatus = 0  AND c.idfsLanguage = @idfsLangId
				WHERE ((@strDefaultName IS NOT NULL AND b.strDefault LIKE '%' + @strDefaultName  + '%')
					OR @strDefaultName IS NULL)
				AND ((@strNationalName IS NOT NULL AND c.strTextString LIKE '%' + @strNationalName + '%')
					OR @strNationalName IS NULL)
				AND (a.idfsCountry = @idfsCountry OR @idfsCountry IS NULL)
				AND (a.strHASC = @strHASC OR @strHASC IS NULL)
				AND (a.strCode = @strCode OR @strCode IS NULL)
			END

		-- Populate region names if Administrative Level is for the region
		IF ((@idfsAdminLevel = 10003003 OR @idfsRegion IS NOT NULL) AND (@idfsAdminLevel = 10003003 AND @idfsRayon IS NULL AND @idfsSettlement IS NULL))
			OR @idfsAdminLevel IS NULL
			BEGIN 
				INSERT INTO @Results
				(
					idfsAdministrativeLevel,
					idfsCountry,
					strCountryHASC,
					strCountryCode,
					strNationalCountryName,
					strDefaultCountryName,
					idfsRegion,
					strRegionHASC,
					strRegionCode,
					strNationalRegionName,
					strDefaultRegionName,
					Longitude,
					Latitude,
					Elevation
				)
				SELECT	@idfsAdminLevel, 
						a.idfsCountry,
						f.strHASC,
						f.strCode,
						e.strTextString,
						d.strDefault,
						a.idfsRegion,
						a.strHASC,
						a.strCode,
						c.strTextString,
						b.strDefault,
						a.dbllongitude,
						a.dbllatitude,
						a.intelevation
				FROM dbo.gisRegion a
				INNER JOIN dbo.gisBaseReference b ON a.idfsRegion = b.idfsGISBaseReference AND b.intRowStatus =0
				INNER JOIN dbo.gisStringNameTranslation c ON b.idfsGISBaseReference = c.idfsGISBaseReference AND c.intRowStatus = 0 AND c.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisBaseReference d ON a.idfsCountry = d.idfsGISBaseReference AND d.intRowStatus = 0
				INNER JOIN dbo.gisStringNameTranslation e ON d.idfsGISBaseReference = e.idfsGISBaseReference AND e.intRowStatus = 0 AND e.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisCountry f ON a.idfsCountry = f.idfsCountry AND f.intRowStatus =0
				WHERE ((@strDefaultName IS NOT NULL AND b.strDefault LIKE '%' + @strDefaultName  + '%')
					OR @strDefaultName IS NULL)
				AND ((@strNationalName IS NOT NULL AND c.strTextString LIKE '%' + @strNationalName + '%')
					OR @strNationalName IS NULL)
				AND ((a.dblLatitude BETWEEN @LatFrom AND @LatTo) OR (@LatFrom IS NULL AND @LatTo IS NULL))
				AND ((a.dblLongitude BETWEEN @LongFrom AND @LongTo) OR (@LongFrom IS NULL AND @LongTo IS NULL))
				AND ((a.intElevation BETWEEN @ElevationFrom AND @ElevationTo) OR (@ElevationFrom IS NULL AND @ElevationTo IS NULL))
				AND (a.idfsRegion = @idfsRegion OR @idfsRegion IS NULL)
				AND (a.idfsCountry = @idfsCountry OR @idfsCountry IS NULL)
				AND (a.strHASC = @strHASC OR @strHASC IS NULL)
				AND (a.strCode = @strCode OR @strCode IS NULL)
			END

		-- Populate Rayon names if Administrative Level is for the rayon
		IF ((@idfsAdminLevel = 10003002 OR @idfsRayon IS NOT NULL) AND (@idfsAdminLevel = 10003002  AND @idfsSettlement IS NULL)) 
			OR @idfsAdminLevel IS NULL
			BEGIN 
				INSERT INTO @Results
				(
					idfsAdministrativeLevel,
					idfsCountry,
					strCountryHASC,
					strCountryCode,
					strNationalCountryName,
					strDefaultCountryName,
					idfsRegion,
					strRegionHASC,
					strRegionCode,
					strNationalRegionName,
					strDefaultRegionName,
					idfsRayon,
					strRayonHASC,
					strRayonCode,
					strNationalRayonName,
					strDefaultRayonName,
					Latitude,
					Longitude,
					Elevation
				)
				SELECT	@idfsAdminLevel, 
						a.idfsCountry,
						i.strHASC,
						i.strCode,
						e.strTextString,
						d.strDefault,
						a.idfsRegion,
						h.strHASC,
						h.strCode,
						g.strTextString,
						f.strDefault,
						a.idfsRayon,
						a.strHASC,
						a.strCode,
						c.strTextString,
						b.strDefault,
						a.dblLatitude,
						a.dblLongitude,
						a.intElevation
				FROM dbo.gisRayon a
				INNER JOIN dbo.gisBaseReference b ON a.idfsRayon = b.idfsGISBaseReference AND b.intRowStatus =0
				LEFT JOIN dbo.gisStringNameTranslation c ON b.idfsGISBaseReference = c.idfsGISBaseReference AND c.intRowStatus = 0 AND c.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisBaseReference d ON a.idfsCountry = d.idfsGISBaseReference AND d.intRowStatus = 0
				LEFT JOIN dbo.gisStringNameTranslation e ON d.idfsGISBaseReference = e.idfsGISBaseReference AND e.intRowStatus = 0 AND e.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisBaseReference f ON a.idfsRegion = f.idfsGISBaseReference AND f.intRowStatus = 0
				LEFT JOIN dbo.gisStringNameTranslation g ON f.idfsGISBaseReference = g.idfsGISBaseReference AND g.intRowStatus = 0 AND g.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisRegion h ON a.idfsRegion = h.idfsRegion AND h.intRowStatus = 0
				INNER JOIN dbo.gisCountry i ON a.idfsCountry = i.idfsCountry AND i.intRowStatus = 0
				WHERE ((@strDefaultName IS NOT NULL AND b.strDefault LIKE '%' + @strDefaultName  + '%') 
					OR @strDefaultName IS NULL)
				AND ((@strNationalName IS NOT NULL AND c.strTextString LIKE '%' + @strNationalName + '%')
					OR @strNationalName IS NULL)
				AND ((a.dblLatitude BETWEEN @LatFrom AND @LatTo) OR (@LatFrom IS NULL AND @LatTo IS NULL))
				AND ((a.dblLongitude BETWEEN @LongFrom AND @LongTo) OR (@LongFrom IS NULL AND @LongTo IS NULL))
				AND ((a.intElevation BETWEEN @ElevationFrom AND @ElevationTo) OR (@ElevationFrom IS NULL AND @ElevationTo IS NULL))
				AND ((a.idfsRayon = @idfsRayon OR @idfsRayon IS NULL)
					AND ((@idfsRegion IS NOT NULL AND a.idfsRegion= @idfsRegion) OR @idfsRegion IS NULL)
					AND ((@idfsCountry IS NOT NULL AND a.idfsCountry = @idfsCountry) OR @idfsCountry IS NULL)
					)
						AND (a.strHASC = @strHASC OR @strHASC IS NULL)
						AND (a.strCode = @strCode OR @strCode IS NULL)
			END

		-- Populate Settlement names if Administrative Level is for the Settlement
		IF (@idfsAdminLevel = 10003004 OR @idfsSettlement IS NOT NULL) OR @idfsAdminLevel IS NULL
			BEGIN 
				INSERT INTO @Results
				(
					idfsAdministrativeLevel,
					idfsCountry,
					strCountryHASC,
					strCountryCode,
					strNationalCountryName,
					strDefaultCountryName,
					idfsRegion,
					strRegionHASC,
					strRegionCode,
					strNationalRegionName,
					strDefaultRegionName,
					idfsRayon,
					strRayonHASC,
					strRayonCode,
					strNationalRayonName,
					strDefaultRayonName,
					idfsSettlement,
					strSettlementHASC,
					strSettlementCode,
					strNationalSettlementName,
					strDefaultSettlementName,
					idfsSettlementType,
					strSettlementTypeNationalName,
					strSettlementTypeDefaultName,
					Latitude,
					Longitude,
					Elevation
				)
				SELECT	@idfsAdminLevel, 
						a.idfsCountry,
						n.strHASC,
						n.strCode,
						e.strTextString,
						d.strDefault,
						a.idfsRegion,
						m.strHASC,
						m.strCode,
						g.strTextString,
						f.strDefault,
						a.idfsRayon,
						l.strHASC,
						l.strCode,
						i.strTextString,
						h.strDefault,
						a.idfsSettlement,
						b.strBaseReferenceCode,
						a.strSettlementCode,
						c.strTextString,
						b.strDefault,
						a.idfsSettlementType,
						k.strTextString,
						j.strDefault,
						a.dblLatitude,
						a.dblLongitude,
						a.intElevation
				FROM dbo.gisSettlement a
				INNER JOIN dbo.gisBaseReference b ON a.idfsSettlement = b.idfsGISBaseReference AND b.intRowStatus =0
				LEFT JOIN dbo.gisStringNameTranslation c ON b.idfsGISBaseReference = c.idfsGISBaseReference AND c.intRowStatus = 0 AND c.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisBaseReference d ON a.idfsCountry = d.idfsGISBaseReference AND d.intRowStatus = 0
				LEFT JOIN dbo.gisStringNameTranslation e ON d.idfsGISBaseReference = e.idfsGISBaseReference AND e.intRowStatus = 0 AND e.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisBaseReference f ON a.idfsRegion = f.idfsGISBaseReference AND f.intRowStatus = 0
				LEFT JOIN dbo.gisStringNameTranslation g ON d.idfsGISBaseReference = g.idfsGISBaseReference AND e.intRowStatus = 0 AND g.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisBaseReference h ON a.idfsRayon = h.idfsGISBaseReference AND h.intRowStatus = 0
				LEFT JOIN dbo.gisStringNameTranslation i ON h.idfsGISBaseReference = i.idfsGISBaseReference AND i.intRowStatus = 0 AND i.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisBaseReference j ON a.idfsSettlementType = j.idfsGISBaseReference AND j.intRowStatus = 0
				LEFT JOIN dbo.gisStringNameTranslation k ON j.idfsGISBaseReference = k.idfsGISBaseReference AND k.intRowStatus = 0 AND k.idfsLanguage = @idfsLangId
				INNER JOIN dbo.gisRayon l ON a.idfsRayon = l.idfsRayon AND l.intRowStatus = 0
				INNER JOIN dbo.gisRegion m ON a.idfsRegion = m.idfsRegion AND m.intRowStatus = 0
				INNER JOIN dbo.gisCountry n ON a.idfsCountry = n.idfsCountry AND n.intRowStatus = 0
				WHERE ((@strDefaultName IS NOT NULL AND b.strDefault LIKE '%' + @strDefaultName  + '%') 
					OR @strDefaultName IS NULL)
				AND ((@strNationalName IS NOT NULL AND c.strTextString LIKE '%' + @strNationalName + '%')
					OR @strNationalName IS NULL)
				AND (a.idfsSettlementType = @idfsSettlementType OR @idfsSettlementType IS NULL)
				AND ((a.dblLatitude BETWEEN @LatFrom AND @LatTo) OR (@LatFrom IS NULL OR @LatTo IS NULL))
				AND ((a.dblLongitude BETWEEN @LongFrom AND @LongTo) OR (@LongFrom IS NULL OR @LongTo IS NULL))
				AND ((a.intElevation BETWEEN @ElevationFrom AND @ElevationTo) OR (@ElevationFrom IS NULL OR @ElevationTo IS NULL))
				AND ((a.idfsSettlement = @idfsSettlement OR @idfsSettlement IS NULL) 
					AND ((@idfsRayon IS NOT NULL AND a.idfsRayon = @idfsRayon) OR @idfsRayon IS NULL)
					AND ((@idfsRegion IS NOT NULL AND a.idfsRegion= @idfsRegion) OR @idfsRegion IS NULL)
					AND ((@idfsCountry IS NOT NULL AND a.idfsCountry = @idfsCountry) OR @idfsCountry IS NULL)
					)
				AND (b.strBaseReferenceCode = @strHASC OR @strHASC IS NULL)
				AND (a.strSettlementCode = @strCode OR @strCode IS NULL)
			END

		SET @firstRec = (@pageNo-1)* @pagesize
		SET @lastRec = (@pageNo*@pageSize+1);
		
		WITH CTEResults AS
		(
			SELECT ROW_NUMBER() OVER ( ORDER BY 
			CASE WHEN @sortColumn = 'strNationalCountryName' AND @SortOrder = 'asc' THEN a.strNationalCountryName END ASC,
			CASE WHEN @sortColumn = 'strNationalCountryName' AND @SortOrder = 'desc' THEN a.strNationalCountryName END DESC,
			CASE WHEN @sortColumn = 'strDefaultCountryName' AND @SortOrder = 'asc' THEN a.strDefaultCountryName END ASC,	
			CASE WHEN @sortColumn = 'strDefaultCountryName' AND @SortOrder = 'desc' THEN a.strDefaultCountryName END DESC,
			CASE WHEN @sortColumn = 'strNationalRegionName' AND @SortOrder = 'asc' THEN a.strNationalRegionName END ASC,	
			CASE WHEN @sortColumn = 'strNationalRegionName' AND @SortOrder = 'desc' THEN a.strNationalRegionName END DESC,
			CASE WHEN @sortColumn = 'strDefaultRegionName' AND @SortOrder = 'asc' THEN a.strDefaultRegionName END ASC,	
			CASE WHEN @sortColumn = 'strDefaultRegionName' AND @SortOrder = 'desc' THEN a.strDefaultRegionName END DESC,
			CASE WHEN @sortColumn = 'strNationalRayonName' AND @SortOrder = 'asc' THEN a.strNationalRayonName END ASC,	
			CASE WHEN @sortColumn = 'strNationalRayonName' AND @SortOrder = 'desc' THEN a.strNationalRayonName END DESC,
			CASE WHEN @sortColumn = 'strDefaultRayonName' AND @SortOrder = 'asc' THEN a.strDefaultRayonName END ASC,	
			CASE WHEN @sortColumn = 'strDefaultRayonName' AND @SortOrder = 'desc' THEN a.strDefaultRayonName END DESC,
			CASE WHEN @sortColumn = 'strNationalSettlementName' AND @SortOrder = 'asc' THEN a.strNationalSettlementName END ASC,	
			CASE WHEN @sortColumn = 'strNationalSettlementName' AND @SortOrder = 'desc' THEN a.strNationalSettlementName END DESC,
			CASE WHEN @sortColumn = 'strDefaultSettlementName' AND @SortOrder = 'asc' THEN a.strDefaultSettlementName END ASC,	
			CASE WHEN @sortColumn = 'strDefaultSettlementName' AND @SortOrder = 'desc' THEN a.strDefaultSettlementName END DESC,
			CASE WHEN @sortColumn = 'strSettlementTypeDefaultName' AND @SortOrder = 'asc' THEN a.strSettlementTypeDefaultName END ASC,	
			CASE WHEN @sortColumn = 'strSettlementTypeDefaultName' AND @SortOrder = 'desc' THEN a.strSettlementTypeDefaultName END DESC,
			CASE WHEN @sortColumn = 'strSettlementTypeNationalName' AND @SortOrder = 'asc' THEN a.strSettlementTypeNationalName END ASC,	
			CASE WHEN @sortColumn = 'strSettlementTypeNationalName' AND @SortOrder = 'desc' THEN a.strSettlementTypeNationalName END DESC,
			CASE WHEN @sortColumn = 'Latitude' AND @SortOrder = 'asc' THEN a.Latitude END ASC,	
			CASE WHEN @sortColumn = 'Latitude' AND @SortOrder = 'desc' THEN a.Latitude END DESC,
			CASE WHEN @sortColumn = 'Longitude' AND @SortOrder = 'asc' THEN a.Longitude END ASC,	
			CASE WHEN @sortColumn = 'Longitude' AND @SortOrder = 'desc' THEN a.Longitude END DESC,
			CASE WHEN @sortColumn = 'Elevation' AND @SortOrder = 'asc' THEN a.elevation END ASC,	
			CASE WHEN @sortColumn = 'Elevation' AND @SortOrder = 'desc' THEN a.elevation END DESC
		) AS ROWNUM,
			COUNT(*) OVER () AS TotalRowCount,
			a.idfsCountry,
			a.strCountryHASC,
			a.strCountryCode,
			a.strNationalCountryName,	
			a.strDefaultCountryName,	
			a.idfsRegion,
			a.strRegionHASC,
			a.strRegionCode,
			a.strNationalRegionName,	
			a.strDefaultRegionName,	
			a.idfsRayon,
			a.strRayonHASC,
			a.strRayonCode,
			a.strNationalRayonName,	
			a.strDefaultRayonName,	
			a.idfsSettlement,
			a.strSettlementHASC,
			a.strSettlementCode,
			a.strNationalSettlementName,	
			a.strDefaultSettlementName,	
			a.idfsSettlementType,
			a.strSettlementTypeDefaultName,	
			a.strSettlementTypeNationalName,	
			a.Latitude,	
			a.Longitude,	
			a.Elevation	
		FROM @Results a
		)

		SELECT 
				TotalRowCount,
				a.idfsCountry,
				a.strCountryHASC,
				a.strCountryCode,
				a.strNationalCountryName,	
				a.strDefaultCountryName,	
				a.idfsRegion,
				a.strRegionHASC,
				a.strRegionCode,
				a.strNationalRegionName,	
				a.strDefaultRegionName,	
				a.idfsRayon,
				a.strRayonHASC,
				a.strRayonCode,
				a.strNationalRayonName,	
				a.strDefaultRayonName,	
				a.idfsSettlement,
				a.strSettlementHASC,
				a.strSettlementCode,
				a.strNationalSettlementName,	
				a.strDefaultSettlementName,	
				a.idfsSettlementType,
				a.strSettlementTypeDefaultName,	
				strSettlementTypeNationalName,	
				a.Latitude,	
				a.Longitude,	
				a.Elevation,	
				TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
				CurrentPage = @pageNo 
		FROM CTEResults A
		WHERE a.ROWNUM > @firstRec AND RowNum < @lastRec 	
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_DEDUPLICATION_HUMAN_DISEASE_Report_SET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_DEDUPLICATION_HUMAN_DISEASE_Report_SET
--
-- Description:	Deduplication for Livestock and Avian disease report record.
-- 
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mark Wilson		25May2022	Initial release
-- Mark Wilson		10Jun2022	update to 
-- Stephen Long     07/06/2022 Updates for site alerts to call new stored procedure.
-- Ann Xiong		11/14/2022	Updated to pass correct parameters to USP_HUM_HUMAN_DISEASE_DEL.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_DEDUPLICATION_HUMAN_DISEASE_Report_SET]
(
    @SupersededDiseaseReportID BIGINT,
    @LanguageID NVARCHAR(50),
    @SurvivorDiseaseReportID BIGINT,
    @idfHumanCaseRelatedTo BIGINT = NULL,
    @idfHuman BIGINT = NULL,                              -- tlbHumanCase.idfHuman
    @idfHumanActual BIGINT,                               -- tlbHumanActual.idfHumanActual
    @strHumanCaseId NVARCHAR(200) = '(new)',
    @idfsFinalDiagnosis BIGINT,                           -- tlbhumancase.idfsTentativeDiagnosis/idfsFinalDiagnosis
    @datDateOfDiagnosis DATETIME = NULL,                  --tlbHumanCase.datTentativeDiagnosisDate/datFinalDiagnosisDate
    @datNotificationDate DATETIME = NULL,                 --tlbHumanCase.DatNotIFicationDate
    @idfsFinalState BIGINT = NULL,                        --tlbHumanCase.idfsFinalState
    @strLocalIdentifier NVARCHAR(200) = NULL,
    @idfSentByOffice BIGINT = NULL,                       -- tlbHumanCase.idfSentByOffice
    @strSentByFirstName NVARCHAR(200) = NULL,             --tlbHumanCase.strSentByFirstName
    @strSentByPatronymicName NVARCHAR(200) = NULL,        --tlbHumancase.strSentByPatronymicName
    @strSentByLastName NVARCHAR(200) = NULL,              --tlbHumanCase.strSentByLastName
    @idfSentByPerson BIGINT = NULL,                       --tlbHumcanCase.idfSentByPerson
    @idfReceivedByOffice BIGINT = NULL,                   -- tlbHumanCase.idfReceivedByOffice
    @strReceivedByFirstName NVARCHAR(200) = NULL,         --tlbHumanCase.strReceivedByFirstName
    @strReceivedByPatronymicName NVARCHAR(200) = NULL,    --tlbHumanCase.strReceivedByPatronymicName
    @strReceivedByLastName NVARCHAR(200) = NULL,          --tlbHuanCase.strReceivedByLastName
    @idfReceivedByPerson BIGINT = NULL,                   -- tlbHumanCase.idfReceivedByPerson
    @idfsHospitalizationStatus BIGINT = NULL,             -- tlbHumanCase.idfsHospitalizationStatus
    @idfHospital BIGINT = NULL,                           -- tlbHumanCase.idfHospital
    @strCurrentLocation NVARCHAR(200) = NULL,             -- tlbHumanCase.strCurrentLocation
    @datOnSetDate DATETIME = NULL,                        -- tlbHumanCase.datOnSetDate
    @idfsInitialCaseStatus BIGINT = NULL,                 -- tlbHumanCase.idfsInitialCaseStatus
    @idfsYNPreviouslySoughtCare BIGINT = NULL,            --idfsYNPreviouslySoughtCare
    @datFirstSoughtCareDate DATETIME = NULL,              --tlbHumanCase.datFirstSoughtCareDate
    @idfSoughtCareFacility BIGINT = NULL,                 --tlbHumanCase.idfSoughtCareFacility
    @idfsNonNotIFiableDiagnosis BIGINT = NULL,            --tlbHumanCase.idfsNonNotIFiableDiagnosis
    @idfsYNHospitalization BIGINT = NULL,                 -- tlbHumanCase.idfsYNHospitalization
    @datHospitalizationDate DATETIME = NULL,              --tlbHumanCase.datHospitalizationDate 
    @datDischargeDate DATETIME = NULL,                    -- tlbHumanCase.datDischargeDate
    @strHospitalName NVARCHAR(200) = NULL,                --tlbHumanCase.strHospitalizationPlace  
    @idfsYNAntimicrobialTherapy BIGINT = NULL,            --  tlbHumanCase.idfsYNAntimicrobialTherapy 
    @strAntibioticName NVARCHAR(200) = NULL,              -- tlbHumanCase.strAntimicrobialTherapyName
    @strDosage NVARCHAR(200) = NULL,                      --tlbHumanCase.strDosage
    @datFirstAdministeredDate DATETIME = NULL,            -- tlbHumanCase.datFirstAdministeredDate
    @strAntibioticComments NVARCHAR(MAX) = NULL,          -- tlbHumanCase.strClinicalNotes , or strSummaryNotes
    @idfsYNSpecificVaccinationAdministered BIGINT = NULL, --  tlbHumanCase.idfsYNSpecIFicVaccinationAdministered
    @idfInvestigatedByOffice BIGINT = NULL,               -- tlbHumanCase.idfInvestigatedByOffice 
    @StartDateofInvestigation DATETIME = NULL,            -- tlbHumanCase.datInvestigationStartDate
    @idfsYNRelatedToOutbreak BIGINT = NULL,               -- tlbHumanCase.idfsYNRelatedToOutbreak
    @idfOutbreak BIGINT = NULL,                           --idfOutbreak  
    @idfsYNExposureLocationKnown BIGINT = NULL,           --tlbHumanCase.idfsYNExposureLocationKnown
    @idfPointGeoLocation BIGINT = NULL,                   --tlbHumanCase.idfPointGeoLocation
    @datExposureDate DATETIME = NULL,                     -- tlbHumanCase.datExposureDate 
    @idfsGeoLocationType BIGINT = NULL,                   --tlbGeolocation.idfsGeoLocationType
    @strLocationDescription NVARCHAR(MAX) = NULL,         --tlbGeolocation.Description
    @idfsLocationCountry BIGINT = NULL,                   --tlbGeolocation.idfsCountry 
    @idfsLocationRegion BIGINT = NULL,                    --tlbGeolocation.idfsRegion
    @idfsLocationRayon BIGINT = NULL,                     --tlbGeolocation.idfsRayon
    @idfsLocationSettlement BIGINT = NULL,                --tlbGeolocation.idfsSettlement
    @intLocationLatitude FLOAT = NULL,                    --tlbGeolocation.Latittude
    @intLocationLongitude FLOAT = NULL,                   --tlbGeolocation.Longitude
    @intElevation BIGINT = NULL,                          --GISSettlement.intElevation
    @idfsLocationGroundType BIGINT = NULL,                --tlbGeolocation.GroundType
    @intLocationDistance FLOAT = NULL,                    --tlbGeolocation.Distance
    @intLocationDirection FLOAT = NULL,                   --tlbGeolocation.Alignment	
    @strForeignAddress NVARCHAR(MAX) = NULL,              --tlbGeolocation.strForeignAddress 
    @strNote NVARCHAR(MAX) = NULL,                        --tlbhumancase.strNote
    @idfsFinalCaseStatus BIGINT = NULL,                   --tlbHuanCase.idfsFinalCaseStatus 
    @idfsOutcome BIGINT = NULL,                           -- --tlbHumanCase.idfsOutcome 
    @datDateofDeath DATETIME = NULL,                      -- tlbHumanCase.datDateOfDeath 
    @idfsCaseProgressStatus BIGINT = 10109001,            --	tlbHumanCase.reportStatus, default = In-process
    @idfPersonEnteredBy BIGINT = NULL,
    @strClinicalNotes NVARCHAR(2000) = NULL,
    @idfsYNSpecimenCollected BIGINT = NULL,
    @idfsYNTestsConducted BIGINT = NULL,
    @DiseaseReportTypeID BIGINT = NULL,
    @blnClinicalDiagBasis BIT = NULL,
    @blnLabDiagBasis BIT = NULL,
    @blnEpiDiagBasis BIT = NULL,
    @DateofClassification DATETIME = NULL,
    @strSummaryNotes NVARCHAR(MAX) = NULL,
    @idfEpiObservation BIGINT = NULL,
    @idfCSObservation BIGINT = NULL,
    @idfInvestigatedByPerson BIGINT = NULL,
    @strEpidemiologistsName NVARCHAR(MAX) = NULL,
    @idfsNotCollectedReason BIGINT = NULL,
    @strNotCollectedReason NVARCHAR(200) = NULL,
    @SamplesParameters NVARCHAR(MAX) = NULL,
    @TestsParameters NVARCHAR(MAX) = NULL,
    @TestsInterpretationParameters NVARCHAR(MAX) = NULL,
    @AntiviralTherapiesParameters NVARCHAR(MAX) = NULL,
    @VaccinationsParameters NVARCHAR(MAX) = NULL,
    @ContactsParameters NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL,
    @idfsHumanAgeType BIGINT = NULL,
    @intPatientAge INT = NULL,
    @datCompletionPaperFormDate DATETIME = NULL,
    @RowStatus INT,
    @idfsSite BIGINT = NULL,
    @AuditUser NVARCHAR(100) = '',
    @idfParentMonitoringSession BIGINT = NULL
)
AS

BEGIN --Proc variables
DECLARE @returnCode INT = 0
DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS'
DECLARE @RowID BIGINT = NULL,
        @RowAction NCHAR = NULL,
        @OrderNumber INT,
        @SampleID BIGINT,
        @SampleTypeID BIGINT = NULL,
        @HumanID BIGINT,
        @HumanMasterID BIGINT = NULL,
        @CollectedByPersonID BIGINT = NULL,
        @CollectedByOrganizationID BIGINT = NULL,
        @CollectionDate DATETIME = NULL,
        @SentDate DATETIME = NULL,
        @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
        @SampleStatusTypeID BIGINT = NULL,
        @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
        @SentToOrganizationID BIGINT = NULL,
        @ReadOnlyIndicator BIT = NULL,
        @AccessionDate DATETIME = NULL,
        @AccessionConditionTypeID BIGINT = NULL,
        @AccessionComment NVARCHAR(200) = NULL,
        @AccessionByPersonID BIGINT = NULL,
        @CurrentSiteID BIGINT = NULL,
        @TestID BIGINT,
        @TestNameTypeID BIGINT = NULL,
        @TestCategoryTypeID BIGINT = NULL,
        @TestResultTypeID BIGINT = NULL,
        @TestStatusTypeID BIGINT,
        @BatchTestID BIGINT = NULL,
        @TestNumber INT = NULL,
        @StartedDate DATETIME2 = NULL,
        @ResultDate DATETIME2 = NULL,
        @TestedByPersonID BIGINT = NULL,
        @TestedByOrganizationID BIGINT = NULL,
        @ResultEnteredByOrganizationID BIGINT = NULL,
        @ResultEnteredByPersonID BIGINT = NULL,
        @ValidatedByOrganizationID BIGINT = NULL,
        @ValidatedByPersonID BIGINT = NULL,
        @NonLaboratoryTestIndicator BIT,
        @ExternalTestIndicator BIT = NULL,
        @PerformedByOrganizationID BIGINT = NULL,
        @ReceivedDate DATETIME2 = NULL,
        @ContactPersonName NVARCHAR(200) = NULL,
        @TestHumanCaseID BIGINT = NULL,
        @TestInterpretationID BIGINT,
        @InterpretedStatusTypeID BIGINT = NULL,
        @InterpretedByOrganizationID BIGINT = NULL,
        @InterpretedByPersonID BIGINT = NULL,
        @TestingInterpretations BIGINT,
        @ValidatedStatusIndicator BIT = NULL,
        @ReportSessionCreatedIndicator BIT = NULL,
        @ValidatedComment NVARCHAR(200) = NULL,
        @InterpretedComment NVARCHAR(200) = NULL,
        @ValidatedDate DATETIME = NULL,
        @InterpretedDate DATETIME = NULL,
        @EventId BIGINT,
        @EventTypeId BIGINT = NULL,
        @EventSiteId BIGINT = NULL,
        @EventObjectId BIGINT = NULL,
        @EventUserId BIGINT = NULL,
        @EventDiseaseId BIGINT = NULL,
        @EventLocationId BIGINT = NULL,
        @EventInformationString NVARCHAR(MAX) = NULL,
        @EventLoginSiteId BIGINT = NULL,
        @MonitoringSessionActionID BIGINT,
        @ActionTypeID BIGINT,
        @ActionStatusTypeID BIGINT,
        @ActionDate DATETIME = NULL,
        @Comments NVARCHAR(500) = NULL,
        @DiseaseID BIGINT,
        @idfMonitoringSessionToDiagnosis BIGINT,
        @DateEntered DATETIME = GETDATE(),
        @DeleteID BIGINT = @SupersededDiseaseReportID,
        @SaveID BIGINT = @SurvivorDiseaseReportID
SET @AuditUser = ISNULL(@AuditUser, '')
END
BEGIN --Data Audit variables
declare @idfUserId BIGINT =NULL;
declare @idfSiteId BIGINT = NULL;
declare @idfsDataAuditEventType bigint =NULL;
-- Get and Set UserId and SiteId
select @idfUserId =userInfo.UserId, @idfSiteId=UserInfo.SiteId from dbo.FN_UserSiteInformation(@AuditUser) userInfo
END
BEGIN --Declare Temp tables
DECLARE @SamplesTemp TABLE
(
    SampleID BIGINT NOT NULL,
    SampleTypeID BIGINT NULL,
    SampleStatusTypeID BIGINT NULL,
    CollectionDate DATETIME2 NULL,
    CollectedByOrganizationID BIGINT NULL,
    CollectedByPersonID BIGINT NULL,
    SentDate DATETIME2 NULL,
    SentToOrganizationID BIGINT NULL,
    EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
    Comments NVARCHAR(200) NULL,
    SiteID BIGINT NOT NULL,
    CurrentSiteID BIGINT NULL,
    DiseaseID BIGINT NULL,
    ReadOnlyIndicator BIT NULL,
    HumanID BIGINT NULL,
    HumanMasterID BIGINT NULL,
    RowStatus INT NOT NULL,
    RowAction CHAR(1) NULL
);
DECLARE @SamplesTemp2 TABLE (SampleID BIGINT NOT NULL);

DECLARE @TestsTemp TABLE
(
    TestID BIGINT NOT NULL,
    TestNameTypeID BIGINT NULL,
    TestCategoryTypeID BIGINT NULL,
    TestResultTypeID BIGINT NULL,
    TestStatusTypeID BIGINT NOT NULL,
    DiseaseID BIGINT NULL,
    SampleID BIGINT NULL,
    BatchTestID BIGINT NULL,
    ObservationID BIGINT NULL,
    TestNumber INT NULL,
    Comments NVARCHAR NULL,
    StartedDate DATETIME2 NULL,
    ResultDate DATETIME2 NULL,
    TestedByOrganizationID BIGINT NULL,
    TestedByPersonID BIGINT NULL,
    ResultEnteredByOrganizationID BIGINT NULL,
    ResultEnteredByPersonID BIGINT NULL,
    ValidatedByOrganizationID BIGINT NULL,
    ValidatedByPersonID BIGINT NULL,
    ReadOnlyIndicator BIT NOT NULL,
    NonLaboratoryTestIndicator BIT NOT NULL,
    ExternalTestIndicator BIT NULL,
    PerformedByOrganizationID BIGINT NULL,
    ReceivedDate DATETIME2 NULL,
    ContactPersonName NVARCHAR(200) NULL,
    RowStatus INT NOT NULL,
    RowAction CHAR(1) NULL
);
DECLARE @TestsInterpretationParametersTemp TABLE
(
    TestInterpretationID BIGINT NOT NULL,
    DiseaseID BIGINT NULL,
    InterpretedStatusTypeID BIGINT NULL,
    ValidatedByOrganizationID BIGINT NULL,
    ValidatedByPersonID BIGINT NULL,
    InterpretedByOrganizationID BIGINT NULL,
    InterpretedByPersonID BIGINT NULL,
    TestID BIGINT NOT NULL,
    ValidatedStatusIndicator BIT NULL,
    ReportSessionCreatedIndicator BIT NULL,
    ValidatedComment NVARCHAR(200) NULL,
    InterpretedComment NVARCHAR(200) NULL,
    ValidatedDate DATETIME NULL,
    InterpretedDate DATETIME NULL,
    ReadOnlyIndicator BIT NOT NULL,
    RowStatus INT NOT NULL,
    RowAction INT NULL
);

DECLARE @EventsTemp TABLE
(
    EventId BIGINT NOT NULL,
    EventTypeId BIGINT NULL,
    UserId BIGINT NULL,
    SiteId BIGINT NULL,
    LoginSiteId BIGINT NULL,
    ObjectId BIGINT NULL,
    DiseaseId BIGINT NULL,
    LocationId BIGINT NULL,
    InformationString NVARCHAR(MAX) NULL
);
DECLARE @EventsTemp2 TABLE (EventId BIGINT NOT NULL);

DECLARE @AntiViralTemp TABLE (idfAntimicrobialTherapy BIGINT);
INSERT INTO @AntiViralTemp
(
    idfAntimicrobialTherapy
)
SELECT idfAntimicrobialTherapy
FROM
    OPENJSON(@AntiviralTherapiesParameters)
    WITH
    (
        idfAntimicrobialTherapy BIGINT
    );

DECLARE @ContactsTemp TABLE (ContactedCasePersonId BIGINT NOT NULL);
INSERT INTO @ContactsTemp
(
    ContactedCasePersonId
)
SELECT ContactedCasePersonId
FROM
    OPENJSON(@ContactsParameters)
    WITH
    (
        ContactedCasePersonId BIGINT
    );
END

DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200)
);
 
BEGIN TRY --Main logic
	BEGIN --Insert temp tables with JSON data
    SET @SamplesParameters = REPLACE(@SamplesParameters, '"0001-01-01T00:00:00"', 'null')
    INSERT INTO @SamplesTemp
    SELECT *
    FROM
        OPENJSON(@SamplesParameters)
        WITH
        (
            SampleID BIGINT,
            SampleTypeID BIGINT,
            SampleStatusTypeID BIGINT,
            CollectionDate DATETIME2,
            CollectedByOrganizationID BIGINT,
            CollectedByPersonID BIGINT,
            SentDate DATETIME2,
            SentToOrganizationID BIGINT,
            EIDSSLocalOrFieldSampleID NVARCHAR(200),
            Comments NVARCHAR(200),
            SiteID BIGINT,
            CurrentSiteID BIGINT,
            DiseaseID BIGINT,
            ReadOnlyIndicator BIT,
            HumanID BIGINT,
            HumanMasterID BIGINT,
            RowStatus INT,
            RowAction CHAR(1)
        );
    INSERT INTO @SamplesTemp2
    SELECT SampleID
    FROM
        OPENJSON(@SamplesParameters)
        WITH
        (
            SampleID BIGINT,
            SampleTypeID BIGINT,
            SampleStatusTypeID BIGINT,
            CollectionDate DATETIME2,
            CollectedByOrganizationID BIGINT,
            CollectedByPersonID BIGINT,
            SentDate DATETIME2,
            SentToOrganizationID BIGINT,
            EIDSSLocalOrFieldSampleID NVARCHAR(200),
            Comments NVARCHAR(200),
            SiteID BIGINT,
            CurrentSiteID BIGINT,
            DiseaseID BIGINT,
            ReadOnlyIndicator BIT,
            HumanID BIGINT,
            HumanMasterID BIGINT,
            RowStatus INT,
            RowAction CHAR(1)
        );		

    SET @TestsParameters = REPLACE(@TestsParameters, '"0001-01-01T00:00:00"', 'null')
    INSERT INTO @TestsTemp
    SELECT *
    FROM
        OPENJSON(@TestsParameters)
        WITH
        (
            TestID BIGINT,
            TestNameTypeID BIGINT,
            TestCategoryTypeID BIGINT,
            TestResultTypeID BIGINT,
            TestStatusTypeID BIGINT,
            DiseaseID BIGINT,
            SampleID BIGINT,
            BatchTestID BIGINT,
            ObservationID BIGINT,
            TestNumber INT,
            Comments NVARCHAR(500),
            StartedDate DATETIME2,
            ResultDate DATETIME2,
            TestedByOrganizationID BIGINT,
            TestedByPersonID BIGINT,
            ResultEnteredByOrganizationID BIGINT,
            ResultEnteredByPersonID BIGINT,
            ValidatedByOrganizationID BIGINT,
            ValidatedByPersonID BIGINT,
            ReadOnlyIndicator BIT,
            NonLaboratoryTestIndicator BIT,
            ExternalTestIndicator BIT,
            PerformedByOrganizationID BIGINT,
            ReceivedDate DATETIME2,
            ContactPersonName NVARCHAR(200),
            RowStatus INT,
            RowAction CHAR(1)
        );
	
    INSERT INTO @TestsInterpretationParametersTemp
    SELECT *
    FROM
        OPENJSON(@TestsInterpretationParameters)
        WITH
        (
            TestInterpretationID BIGINT,
            DiseaseID BIGINT,
            InterpretedStatusTypeID BIGINT,
            ValidatedByOrganizationID BIGINT,
            ValidatedByPersonID BIGINT,
            InterpretedByOrganizationID BIGINT,
            InterpretedByPersonID BIGINT,
            TestID BIGINT,
            ValidatedStatusIndicator BIT,
            ReportSessionCreatedIndicator BIT,
            ValidatedComment NVARCHAR(200),
            InterpretedComment NVARCHAR(200),
            ValidatedDate DATETIME2,
            InterpretedDate DATETIME2,
            ReadOnlyIndicator BIT,
            RowStatus INT,
            RowAction INT
        );

    INSERT INTO @EventsTemp
    SELECT *
    FROM
        OPENJSON(@Events)
        WITH
        (
            EventId BIGINT,
            EventTypeId BIGINT,
            UserId BIGINT,
            SiteId BIGINT,
            LoginSiteId BIGINT,
            ObjectId BIGINT,
            DiseaseId BIGINT,
            LocationId BIGINT,
            InformationString NVARCHAR(MAX)
        );
    INSERT INTO @EventsTemp2
    SELECT EventId
    FROM
        OPENJSON(@Events)
        WITH
        (
            EventId BIGINT,
            EventTypeId BIGINT,
            UserId BIGINT,
            SiteId BIGINT,
            LoginSiteId BIGINT,
            ObjectId BIGINT,
            DiseaseId BIGINT,
            LocationId BIGINT,
            InformationString NVARCHAR(MAX)
        );

    DECLARE @VaccinationsTemp TABLE (humanDiseaseReportVaccinationUID BIGINT NOT NULL);
    INSERT INTO @VaccinationsTemp
    SELECT *
    FROM
        OPENJSON(@VaccinationsParameters)
        WITH
        (
            humanDiseaseReportVaccinationUID BIGINT
        )
	END

    BEGIN TRANSACTION

    DECLARE @SupressSELECT TABLE
    (
        retrunCode INT,
        returnMessage VARCHAR(200)
    )
    DECLARE @SupressSELECTHumanCase TABLE
    (
        retrunCode INT,
        returnMessage VARCHAR(200) --,
    -- idfHumanCase BIGINT
    )
    DECLARE @SupressSELECTHuman TABLE
    (
        retrunCode INT,
        returnMessage VARCHAR(200),
        idfHuman BIGINT
    )
    DECLARE @SupressSELECTGeoLocation TABLE
    (
        returnCode INT,
        returnMsg VARCHAR(200),
        idfGeoLocation BIGINT
    )		
    SET @DiseaseID = @idfsFinalDiagnosis
    DECLARE @HumanDiseasereportRelnUID BIGINT
    DECLARE @COPYHUMANACTUALTOHUMAN_ReturnCode INT = 0
		 
    -- Create a human record FROM Human Actual if not already present
    IF @idfHumanActual IS NOT NULL -- AND @idfHumanCase IS  NULL
    BEGIN	
		--Data Audit - Start
		--Variables
		DECLARE @idfsObjectTypeHuman bigint = 10017079;
		DECLARE @idfObjectHuman bigint = @idfHuman;
		DECLARE @idfObjectHumanTable bigint = 75600000000;
		DECLARE @tlbHuman_BeforeEdit TABLE
		(
			idfHuman BIGINT,idfHumanActual BIGINT,idfsOccupationType BIGINT,idfsNationality BIGINT,idfsHumanGender BIGINT,datDateofBirth DATETIME,datDateOfDeath DATETIME,
			strLastName NVARCHAR(200),strSecondName NVARCHAR(200),strFirstName NVARCHAR(200),strRegistrationPhone NVARCHAR(200),strEmployerName NVARCHAR(200),strHomePhone NVARCHAR(200),
			strWorkPhone NVARCHAR(200),idfsPersonIDType BIGINT,strPersonID NVARCHAR(200),datModIFicationDate DATETIME,
			idfCurrentResidenceAddress BIGINT,idfEmployerAddress BIGINT,idfRegistrationAddress BIGINT 
		)
		DECLARE @tlbHuman_AfterEdit TABLE
		(
			idfHuman BIGINT,idfHumanActual BIGINT,idfsOccupationType BIGINT,idfsNationality BIGINT,idfsHumanGender BIGINT,datDateofBirth DATETIME,datDateOfDeath DATETIME,
			strLastName NVARCHAR(200),strSecondName NVARCHAR(200),strFirstName NVARCHAR(200),strRegistrationPhone NVARCHAR(200),strEmployerName NVARCHAR(200),strHomePhone NVARCHAR(200),
			strWorkPhone NVARCHAR(200),idfsPersonIDType BIGINT,strPersonID NVARCHAR(200),datModIFicationDate DATETIME,
			idfCurrentResidenceAddress BIGINT,idfEmployerAddress BIGINT,idfRegistrationAddress BIGINT 
		)
		DECLARE @idfDataAuditEventHuman bigint= NULL; 

		--Find Insert/Update/Delete
		IF @idfHuman IS NULL
		BEGIN
			set @idfsDataAuditEventType = 10016001; --Insert
		END 
		ELSE 
		BEGIN 
			set @idfsDataAuditEventType = 10016003; --Update
		END

		--Get values before edit
		IF @idfsDataAuditEventType = 10016003
		BEGIN 
			--Get values before edit			
			insert into @tlbHuman_BeforeEdit
			(idfHuman,idfHumanActual,idfsOccupationType,idfsNationality,idfsHumanGender,datDateofBirth,datDateOfDeath,strLastName,strSecondName,strFirstName,strRegistrationPhone,
			strEmployerName,strHomePhone,strWorkPhone,idfsPersonIDType,strPersonID,datModIFicationDate,idfCurrentResidenceAddress,idfEmployerAddress,idfRegistrationAddress)
			select idfHuman,idfHumanActual,idfsOccupationType,idfsNationality,idfsHumanGender,datDateofBirth,datDateOfDeath,strLastName,strSecondName,strFirstName,strRegistrationPhone,
			strEmployerName,strHomePhone,strWorkPhone,idfsPersonIDType,strPersonID,datModIFicationDate,idfCurrentResidenceAddress,idfEmployerAddress,idfRegistrationAddress
			from dbo.tlbHuman
			WHERE idfHuman = @idfHuman AND intRowStatus = 0 
		END
		--Data Audit - End

        INSERT INTO @SupressSELECTHumanCase
        EXEC dbo.USP_HUM_COPYHUMANACTUALTOHUMAN @idfHumanActual,
                                                @idfHuman OUTPUT,
                                                @returnCode OUTPUT,
                                                @returnMsg OUTPUT
																	
		--Data Audit - Start
		--Get values After edit
		IF @idfsDataAuditEventType = 10016003
		BEGIN
			--Get values after edit			
			insert into @tlbHuman_AfterEdit
			(idfHuman,idfHumanActual,idfsOccupationType,idfsNationality,idfsHumanGender,datDateofBirth,datDateOfDeath,strLastName,strSecondName,strFirstName,strRegistrationPhone,
			strEmployerName,strHomePhone,strWorkPhone,idfsPersonIDType,strPersonID,datModIFicationDate,idfCurrentResidenceAddress,idfEmployerAddress,idfRegistrationAddress)
			select idfHuman,idfHumanActual,idfsOccupationType,idfsNationality,idfsHumanGender,datDateofBirth,datDateOfDeath,strLastName,strSecondName,strFirstName,strRegistrationPhone,
			strEmployerName,strHomePhone,strWorkPhone,idfsPersonIDType,strPersonID,datModIFicationDate,idfCurrentResidenceAddress,idfEmployerAddress,idfRegistrationAddress
			from dbo.tlbHuman
			WHERE idfHuman = @idfHuman AND intRowStatus = 0 
		END

		SET @idfObjectHuman = @idfHuman 
		IF @idfsDataAuditEventType = 10016001
		BEGIN 
			INSERT INTO @SuppressSelect
			EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectTypeHuman,@idfObjectHuman, @idfObjectHumanTable, @idfDataAuditEventHuman OUTPUT

			INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
				values ( @idfDataAuditEventHuman, @idfObjectHumanTable, @idfObjectHuman)
		END
		ELSE IF @idfsDataAuditEventType = 10016003			
		BEGIN
			IF EXISTS 
			(
				select *
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman  
				where (ISNULL(a.idfsOccupationType,'') <> ISNULL(b.idfsOccupationType,'')) OR (ISNULL(a.idfsNationality,'') <> ISNULL(b.idfsNationality,'')) OR 
					(ISNULL(a.idfsHumanGender,'') <> ISNULL(b.idfsHumanGender,'')) OR (ISNULL(a.datDateofBirth,'') <> ISNULL(b.datDateofBirth,'')) OR 
					(ISNULL(a.datDateOfDeath,'') <> ISNULL(b.datDateOfDeath,'')) OR (ISNULL(a.strLastName,'') <> ISNULL(b.strLastName,'')) OR 
					(ISNULL(a.strSecondName,'') <> ISNULL(b.strSecondName,'')) OR (ISNULL(a.strFirstName,'') <> ISNULL(b.strFirstName,'')) OR 
					(ISNULL(a.strRegistrationPhone,'') <> ISNULL(b.strRegistrationPhone,'')) OR (ISNULL(a.strEmployerName,'') <> ISNULL(b.strEmployerName,'')) OR 
					(ISNULL(a.strHomePhone,'') <> ISNULL(b.strHomePhone,'')) OR (ISNULL(a.strWorkPhone,'') <> ISNULL(b.strWorkPhone,'')) OR 
					(ISNULL(a.idfsPersonIDType,'') <> ISNULL(b.idfsPersonIDType,'')) OR (ISNULL(a.strPersonID,'') <> ISNULL(b.strPersonID,'')) OR 
					(ISNULL(a.datModIFicationDate,'') <> ISNULL(b.datModIFicationDate,'')) OR (ISNULL(a.idfCurrentResidenceAddress,'') <> ISNULL(b.idfCurrentResidenceAddress,'')) OR 
					(ISNULL(a.idfEmployerAddress,'') <> ISNULL(b.idfEmployerAddress,'')) OR (ISNULL(a.idfRegistrationAddress,'') <> ISNULL(b.idfRegistrationAddress,''))  
			)
			BEGIN
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectTypeHuman,@idfObjectHuman, @idfObjectHumanTable, @idfDataAuditEventHuman OUTPUT

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,79410000000,@idfObjectHuman,null,a.idfsOccupationType,b.idfsOccupationType 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.idfsOccupationType,'') <> ISNULL(b.idfsOccupationType,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,79400000000,@idfObjectHuman,null,a.idfsNationality,b.idfsNationality 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.idfsNationality,'') <> ISNULL(b.idfsNationality,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,79390000000,@idfObjectHuman,null,a.idfsHumanGender,b.idfsHumanGender 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.idfsHumanGender,'') <> ISNULL(b.idfsHumanGender,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,79330000000,@idfObjectHuman,null,a.datDateofBirth,b.datDateofBirth 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.datDateofBirth,'') <> ISNULL(b.datDateofBirth,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,79340000000,@idfObjectHuman,null,a.datDateOfDeath,b.datDateOfDeath 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.datDateOfDeath,'') <> ISNULL(b.datDateOfDeath,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,79450000000,@idfObjectHuman,null,a.strLastName,b.strLastName 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.strLastName,'') <> ISNULL(b.strLastName,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,79470000000,@idfObjectHuman,null,a.strSecondName,b.strSecondName 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.strSecondName,'') <> ISNULL(b.strSecondName,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,79430000000,@idfObjectHuman,null,a.strFirstName,b.strFirstName 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.strFirstName,'') <> ISNULL(b.strFirstName,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,79460000000,@idfObjectHuman,null,a.strRegistrationPhone,b.strRegistrationPhone 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.strRegistrationPhone,'') <> ISNULL(b.strRegistrationPhone,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,79420000000,@idfObjectHuman,null,a.strEmployerName,b.strEmployerName 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.strEmployerName,'') <> ISNULL(b.strEmployerName,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,79440000000,@idfObjectHuman,null,a.strHomePhone,b.strHomePhone 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.strHomePhone,'') <> ISNULL(b.strHomePhone,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,79480000000,@idfObjectHuman,null,a.strWorkPhone,b.strWorkPhone 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.strWorkPhone,'') <> ISNULL(b.strWorkPhone,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,12014460000000,@idfObjectHuman,null,a.idfsPersonIDType,b.idfsPersonIDType 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.idfsPersonIDType,'') <> ISNULL(b.idfsPersonIDType,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,12014470000000,@idfObjectHuman,null,a.strPersonID,b.strPersonID 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.strPersonID,'') <> ISNULL(b.strPersonID,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,51389540000000,@idfObjectHuman,null,a.datModIFicationDate,b.datModIFicationDate 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.datModIFicationDate,'') <> ISNULL(b.datModIFicationDate,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,79350000000,@idfObjectHuman,null,a.idfCurrentResidenceAddress,b.idfCurrentResidenceAddress 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.idfCurrentResidenceAddress,'') <> ISNULL(b.idfCurrentResidenceAddress,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,79360000000,@idfObjectHuman,null,a.idfEmployerAddress,b.idfEmployerAddress 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.idfEmployerAddress,'') <> ISNULL(b.idfEmployerAddress,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventHuman,@idfObjectHumanTable,79380000000,@idfObjectHuman,null,a.idfRegistrationAddress,b.idfRegistrationAddress 
				from @tlbHuman_BeforeEdit a  inner join @tlbHuman_AfterEdit b on a.idfHuman = b.idfHuman 
				where (ISNULL(a.idfRegistrationAddress,'') <> ISNULL(b.idfRegistrationAddress,'')) 
			END
		END										
		--Data Audit - End

        IF @returnCode <> 0
        BEGIN
            RETURN
        END
    END 
		
	--Audit - ToDo - Location - insert
    --TODO: Needs to be refactored to use Hierarchy
    -- Insert or update geolocation record if any of the information is provided
    IF @idfsLocationGroundType IS NOT NULL
        OR @idfsGeoLocationType IS NOT NULL
        OR @idfsLocationCountry IS NOT NULL
        OR @idfsLocationRegion IS NOT NULL
        OR @idfsLocationRayon IS NOT NULL
        OR @idfsLocationSettlement IS NOT NULL
        OR @strLocationDescription IS NOT NULL
        OR @intLocationLatitude IS NOT NULL
        OR @intLocationLongitude IS NOT NULL
        OR @intLocationDistance IS NOT NULL
        OR @intLocationDirection IS NOT NULL
        OR @strForeignAddress IS NOT NULL
        OR @intElevation IS NOT NULL
    BEGIN
		--Data Audit - Location - Start
		--Variables
		DECLARE @idfsObjectTypeLocation bigint = 10017079;
		DECLARE @idfObjectLocation bigint = @idfPointGeoLocation;
		DECLARE @idfObjectLocationTable bigint = 75600000000;
		DECLARE @tlbLocation_BeforeEdit TABLE
		(
			idfGeoLocation BIGINT,idfsGroundType BIGINT,idfsGeoLocationType BIGINT,idfsCountry BIGINT,idfsRegion BIGINT,idfsRayon BIGINT,
			idfsSettlement BIGINT,idfsLocation BIGINT,strDescription NVARCHAR(200),dblDistance FLOAT,dblLatitude FLOAT,dblLongitude FLOAT,
			dblAccuracy FLOAT,dblAlignment FLOAT,strForeignAddress NVARCHAR(200), blnForeignAddress BIT,dblElevation FLOAT
		)
		DECLARE @tlbLocation_AfterEdit TABLE
		(
			idfGeoLocation BIGINT,idfsGroundType BIGINT,idfsGeoLocationType BIGINT,idfsCountry BIGINT,idfsRegion BIGINT,idfsRayon BIGINT,
			idfsSettlement BIGINT,idfsLocation BIGINT,strDescription NVARCHAR(200),dblDistance FLOAT,dblLatitude FLOAT,dblLongitude FLOAT,
			dblAccuracy FLOAT,dblAlignment FLOAT,strForeignAddress NVARCHAR(200), blnForeignAddress BIT,dblElevation FLOAT
		)
		DECLARE @idfDataAuditEventLocation bigint= NULL; 

		--Find Insert/Update/Delete
		IF @idfPointGeoLocation IS NULL
		BEGIN
			set @idfsDataAuditEventType = 10016001; --Insert
		END 
		ELSE 
		BEGIN 
			set @idfsDataAuditEventType = 10016003; --Update
		END 
			
		--Get values before edit
		IF @idfsDataAuditEventType = 10016003
		BEGIN 
			--Get values before edit			
			insert into @tlbLocation_BeforeEdit
			(idfGeoLocation,idfsGroundType,idfsGeoLocationType,idfsCountry,idfsRegion,idfsRayon,idfsSettlement,idfsLocation,strDescription,
			dblDistance,dblLatitude,dblLongitude,dblAccuracy,dblAlignment,strForeignAddress,blnForeignAddress,dblElevation)
			select idfGeoLocation,idfsGroundType,idfsGeoLocationType,idfsCountry,idfsRegion,idfsRayon,idfsSettlement,idfsLocation,strDescription,
			dblDistance,dblLatitude,dblLongitude,dblAccuracy,dblAlignment,strForeignAddress,blnForeignAddress,dblElevation
			from dbo.tlbGeoLocation
			WHERE idfGeoLocation = @idfPointGeoLocation --AND intRowStatus = 0 
		END
		--Data Audit - End
			
        -- Set geo location 
        IF @idfPointGeoLocation IS NULL
        BEGIN
            INSERT INTO @SupressSELECT
            EXEC dbo.USP_GBL_NEXTKEYID_GET @tableName = 'tlbGeoLocation',
                                            @idfsKey = @idfPointGeoLocation OUTPUT
        END
        BEGIN
            INSERT INTO @SupressSELECTGeoLocation
            EXECUTE [dbo].[USP_HUMAN_DISEASE_GEOLOCATION_SET] @idfPointGeoLocation,
                                                                @idfsLocationGroundType,
                                                                @idfsGeoLocationType,
                                                                @idfsLocationCountry,
                                                                @idfsLocationRegion,
                                                                @idfsLocationRayon,
                                                                @idfsLocationSettlement,
                                                                @strLocationDescription,
                                                                @intLocationLatitude,
                                                                @intLocationLongitude,
                                                                NULL,
                                                                @intLocationDistance,
                                                                @intLocationDirection,
                                                                @strForeignAddress,
                                                                1,
                                                                @intElevation,
                                                                @AuditUser
        END

		--Data Audit - Start
		--Get values After edit
		IF @idfsDataAuditEventType = 10016003
		BEGIN
			--Get values after edit			
			insert into @tlbLocation_AfterEdit
			(idfGeoLocation,idfsGroundType,idfsGeoLocationType,idfsCountry,idfsRegion,idfsRayon,idfsSettlement,idfsLocation,strDescription,
			dblDistance,dblLatitude,dblLongitude,dblAccuracy,dblAlignment,strForeignAddress,blnForeignAddress,dblElevation)
			select idfGeoLocation,idfsGroundType,idfsGeoLocationType,idfsCountry,idfsRegion,idfsRayon,idfsSettlement,idfsLocation,strDescription,
			dblDistance,dblLatitude,dblLongitude,dblAccuracy,dblAlignment,strForeignAddress,blnForeignAddress,dblElevation
			from dbo.tlbGeoLocation
			WHERE idfGeoLocation = @idfPointGeoLocation --AND intRowStatus = 0
		END

		SET @idfObjectLocation = @idfPointGeoLocation 
		IF @idfsDataAuditEventType = 10016001
		BEGIN 
			INSERT INTO @SuppressSelect
			EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectTypeLocation,@idfObjectLocation, @idfObjectLocationTable, @idfDataAuditEventLocation OUTPUT

			INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
				values ( @idfDataAuditEventLocation, @idfObjectLocationTable, @idfObjectLocation)
		END
		ELSE IF @idfsDataAuditEventType = 10016003			
		BEGIN
			IF EXISTS 
			(
				select *
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.idfsGroundType,'') <> ISNULL(b.idfsGroundType,'')) OR (ISNULL(a.idfsGeoLocationType,'') <> ISNULL(b.idfsGeoLocationType,'')) OR 
					(ISNULL(a.idfsCountry,'') <> ISNULL(b.idfsCountry,'')) OR (ISNULL(a.idfsRegion,'') <> ISNULL(b.idfsRegion,'')) OR 
					(ISNULL(a.idfsRayon,'') <> ISNULL(b.idfsRayon,'')) OR (ISNULL(a.idfsSettlement,'') <> ISNULL(b.idfsSettlement,'')) OR 
					(ISNULL(a.idfsLocation,'') <> ISNULL(b.idfsLocation,'')) OR (ISNULL(a.strDescription,'') <> ISNULL(b.strDescription,'')) OR 
					(ISNULL(a.dblDistance,'') <> ISNULL(b.dblDistance,'')) OR (ISNULL(a.dblLatitude,'') <> ISNULL(b.dblLatitude,'')) OR 
					(ISNULL(a.dblLongitude,'') <> ISNULL(b.dblLongitude,'')) OR (ISNULL(a.dblAccuracy,'') <> ISNULL(b.dblAccuracy,'')) OR 
					(ISNULL(a.dblAlignment,'') <> ISNULL(b.dblAlignment,'')) OR (ISNULL(a.strForeignAddress,'') <> ISNULL(b.strForeignAddress,'')) OR 
					(ISNULL(a.blnForeignAddress,'') <> ISNULL(b.blnForeignAddress,'')) OR (ISNULL(a.dblElevation,'') <> ISNULL(b.dblElevation,'')) 
			)
			BEGIN
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectTypeLocation,@idfObjectLocation
					, @idfObjectLocationTable, @idfDataAuditEventLocation OUTPUT

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventLocation,@idfObjectLocationTable,79410000000,@idfObjectLocation,null,a.idfsGroundType,b.idfsGroundType 
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.idfsGroundType,'') <> ISNULL(b.idfsGroundType,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventLocation,@idfObjectLocationTable,79410000000,@idfObjectLocation,null,a.idfsGeoLocationType,b.idfsGeoLocationType 
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.idfsGeoLocationType,'') <> ISNULL(b.idfsGeoLocationType,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventLocation,@idfObjectLocationTable,79410000000,@idfObjectLocation,null,a.idfsCountry,b.idfsCountry 
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.idfsCountry,'') <> ISNULL(b.idfsCountry,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventLocation,@idfObjectLocationTable,79410000000,@idfObjectLocation,null,a.idfsRegion,b.idfsRegion 
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.idfsRegion,'') <> ISNULL(b.idfsRegion,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventLocation,@idfObjectLocationTable,79410000000,@idfObjectLocation,null,a.idfsRayon,b.idfsRayon 
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.idfsRayon,'') <> ISNULL(b.idfsRayon,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventLocation,@idfObjectLocationTable,79410000000,@idfObjectLocation,null,a.idfsSettlement,b.idfsSettlement 
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.idfsSettlement,'') <> ISNULL(b.idfsSettlement,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventLocation,@idfObjectLocationTable,79410000000,@idfObjectLocation,null,a.idfsLocation,b.idfsLocation 
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.idfsLocation,'') <> ISNULL(b.idfsLocation,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventLocation,@idfObjectLocationTable,79410000000,@idfObjectLocation,null,a.strDescription,b.strDescription 
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.strDescription,'') <> ISNULL(b.strDescription,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventLocation,@idfObjectLocationTable,79410000000,@idfObjectLocation,null,a.dblDistance,b.dblDistance 
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.dblDistance,'') <> ISNULL(b.dblDistance,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventLocation,@idfObjectLocationTable,79410000000,@idfObjectLocation,null,a.dblLatitude,b.dblLatitude 
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.dblLatitude,'') <> ISNULL(b.dblLatitude,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventLocation,@idfObjectLocationTable,79410000000,@idfObjectLocation,null,a.dblLongitude,b.dblLongitude 
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.dblLongitude,'') <> ISNULL(b.dblLongitude,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventLocation,@idfObjectLocationTable,79410000000,@idfObjectLocation,null,a.dblAlignment,b.dblAlignment 
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.dblAlignment,'') <> ISNULL(b.dblAlignment,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventLocation,@idfObjectLocationTable,79410000000,@idfObjectLocation,null,a.strForeignAddress,b.strForeignAddress 
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.strForeignAddress,'') <> ISNULL(b.strForeignAddress,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventLocation,@idfObjectLocationTable,79410000000,@idfObjectLocation,null,a.blnForeignAddress,b.blnForeignAddress 
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.blnForeignAddress,'') <> ISNULL(b.blnForeignAddress,''))

				insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
				select @idfDataAuditEventLocation,@idfObjectLocationTable,79410000000,@idfObjectLocation,null,a.dblElevation,b.dblElevation 
				from @tlbLocation_BeforeEdit a  inner join @tlbLocation_AfterEdit b on a.idfGeoLocation = b.idfGeoLocation 
				where (ISNULL(a.dblElevation,'') <> ISNULL(b.dblElevation,'')) 
			END
		END										
		--Data Audit - End
    END
		
	--HumanCase
	BEGIN
		--Data Audit - HumanCase - Start
		--Variables
		DECLARE @idfsObjectTypeHumanCase bigint = 10017079;
		DECLARE @idfObjectHumanCase bigint = @SaveID;
		DECLARE @idfObjectHumanCaseTable bigint = 75610000000;
		DECLARE @tlbHumanCase_BeforeEdit TABLE
		(
			strCaseId NVARCHAR(200),idfsTentativeDiagnosis BIGINT,idfsFinalDiagnosis BIGINT,datTentativeDiagnosisDate DATETIME,datFinalDiagnosisDate DATETIME,datNotIFicationDate DATETIME,
			idfsFinalState BIGINT,idfSentByOffice BIGINT,strSentByFirstName NVARCHAR(200),strSentByPatronymicName NVARCHAR(200),strSentByLastName NVARCHAR(200),idfSentByPerson BIGINT,
			idfReceivedByOffice BIGINT,strReceivedByFirstName NVARCHAR(200),strReceivedByPatronymicName NVARCHAR(200),strReceivedByLastName NVARCHAR(200),idfReceivedByPerson BIGINT,
			strLocalIdentifier NVARCHAR(200),idfsHospitalizationStatus BIGINT,idfHospital BIGINT,strCurrentLocation NVARCHAR(200),datOnSetDate DATETIME,idfsInitialCaseStatus BIGINT,
			idfsYNPreviouslySoughtCare BIGINT,datFirstSoughtCareDate DATETIME,idfSoughtCareFacility BIGINT,idfsNonNotIFiableDiagnosis BIGINT,idfsYNHospitalization BIGINT,
			datHospitalizationDate DATETIME,datDischargeDate DATETIME,strHospitalizationPlace NVARCHAR(200),idfsYNAntimicrobialTherapy BIGINT,strClinicalNotes NVARCHAR(2000),
			idfsYNSpecificVaccinationAdministered BIGINT,idfInvestigatedByOffice BIGINT,datInvestigationStartDate DATETIME,idfsYNRelatedToOutbreak BIGINT,idfOutbreak BIGINT,
			idfsYNExposureLocationKnown BIGINT,idfPointGeoLocation BIGINT,datExposureDate DATETIME,strNote NVARCHAR(2000),idfsFinalCaseStatus BIGINT,idfsOutcome BIGINT,
			idfsCaseProgressStatus BIGINT,datModificationDate DATETIME,idfsYNSpecimenCollected BIGINT,idfsYNTestsConducted BIGINT,DiseaseReportTypeID BIGINT,blnClinicalDiagBasis BIT,
			blnLabDiagBasis BIT,blnEpiDiagBasis BIT,datFinalCaseClassificationDate DATETIME,strsummarynotes NVARCHAR(2000),idfEpiObservation BIGINT,idfCSObservation BIGINT,
			strEpidemiologistsName NVARCHAR(2000),idfsNotCollectedReason BIGINT,strNotCollectedReason NVARCHAR(200),idfsHumanAgeType BIGINT,intPatientAge INT,datCompletionPaperFormDate DATETIME,
			idfInvestigatedByPerson BIGINT,idfPersonEnteredBy BIGINT,idfsSite BIGINT,idfHumanCase BIGINT
		)
		DECLARE @tlbHumanCase_AfterEdit TABLE
		(
			strCaseId NVARCHAR(200),idfsTentativeDiagnosis BIGINT,idfsFinalDiagnosis BIGINT,datTentativeDiagnosisDate DATETIME,datFinalDiagnosisDate DATETIME,datNotIFicationDate DATETIME,
			idfsFinalState BIGINT,idfSentByOffice BIGINT,strSentByFirstName NVARCHAR(200),strSentByPatronymicName NVARCHAR(200),strSentByLastName NVARCHAR(200),idfSentByPerson BIGINT,
			idfReceivedByOffice BIGINT,strReceivedByFirstName NVARCHAR(200),strReceivedByPatronymicName NVARCHAR(200),strReceivedByLastName NVARCHAR(200),idfReceivedByPerson BIGINT,
			strLocalIdentifier NVARCHAR(200),idfsHospitalizationStatus BIGINT,idfHospital BIGINT,strCurrentLocation NVARCHAR(200),datOnSetDate DATETIME,idfsInitialCaseStatus BIGINT,
			idfsYNPreviouslySoughtCare BIGINT,datFirstSoughtCareDate DATETIME,idfSoughtCareFacility BIGINT,idfsNonNotIFiableDiagnosis BIGINT,idfsYNHospitalization BIGINT,
			datHospitalizationDate DATETIME,datDischargeDate DATETIME,strHospitalizationPlace NVARCHAR(200),idfsYNAntimicrobialTherapy BIGINT,strClinicalNotes NVARCHAR(2000),
			idfsYNSpecificVaccinationAdministered BIGINT,idfInvestigatedByOffice BIGINT,datInvestigationStartDate DATETIME,idfsYNRelatedToOutbreak BIGINT,idfOutbreak BIGINT,
			idfsYNExposureLocationKnown BIGINT,idfPointGeoLocation BIGINT,datExposureDate DATETIME,strNote NVARCHAR(2000),idfsFinalCaseStatus BIGINT,idfsOutcome BIGINT,
			idfsCaseProgressStatus BIGINT,datModificationDate DATETIME,idfsYNSpecimenCollected BIGINT,idfsYNTestsConducted BIGINT,DiseaseReportTypeID BIGINT,blnClinicalDiagBasis BIT,
			blnLabDiagBasis BIT,blnEpiDiagBasis BIT,datFinalCaseClassificationDate DATETIME,strsummarynotes NVARCHAR(2000),idfEpiObservation BIGINT,idfCSObservation BIGINT,
			strEpidemiologistsName NVARCHAR(2000),idfsNotCollectedReason BIGINT,strNotCollectedReason NVARCHAR(200),idfsHumanAgeType BIGINT,intPatientAge INT,datCompletionPaperFormDate DATETIME,
			idfInvestigatedByPerson BIGINT,idfPersonEnteredBy BIGINT,idfsSite BIGINT,idfHumanCase BIGINT
		)
		DECLARE @idfDataAuditEventHumanCase bigint= NULL; 
		set @idfsDataAuditEventType = 10016003;
		--Get values before edit			
		insert into @tlbHumanCase_BeforeEdit
		(strCaseId,idfsTentativeDiagnosis,idfsFinalDiagnosis,datTentativeDiagnosisDate,datFinalDiagnosisDate,datNotIFicationDate,idfsFinalState,idfSentByOffice,strSentByFirstName
		,strSentByPatronymicName,strSentByLastName,idfSentByPerson,idfReceivedByOffice,strReceivedByFirstName,strReceivedByPatronymicName,strReceivedByLastName,idfReceivedByPerson,strLocalIdentifier 
		,idfsHospitalizationStatus,idfHospital,strCurrentLocation,datOnSetDate,idfsInitialCaseStatus,idfsYNPreviouslySoughtCare,datFirstSoughtCareDate,idfSoughtCareFacility
		,idfsNonNotIFiableDiagnosis,idfsYNHospitalization,datHospitalizationDate,datDischargeDate,strHospitalizationPlace,idfsYNAntimicrobialTherapy,strClinicalNotes
		,idfsYNSpecificVaccinationAdministered,idfInvestigatedByOffice,datInvestigationStartDate,idfsYNRelatedToOutbreak,idfOutbreak,idfsYNExposureLocationKnown,idfPointGeoLocation,datExposureDate
		,strNote,idfsFinalCaseStatus,idfsOutcome,idfsCaseProgressStatus,datModificationDate,idfsYNSpecimenCollected,idfsYNTestsConducted,DiseaseReportTypeID,blnClinicalDiagBasis
		,blnLabDiagBasis,blnEpiDiagBasis,datFinalCaseClassificationDate,strsummarynotes,idfEpiObservation,idfCSObservation,strEpidemiologistsName,idfsNotCollectedReason,strNotCollectedReason
		,idfsHumanAgeType,intPatientAge,datCompletionPaperFormDate,idfInvestigatedByPerson,idfPersonEnteredBy,idfsSite,idfHumanCase)
		select strCaseId,idfsTentativeDiagnosis,idfsFinalDiagnosis,datTentativeDiagnosisDate,datFinalDiagnosisDate,datNotIFicationDate,idfsFinalState,idfSentByOffice,strSentByFirstName
		,strSentByPatronymicName,strSentByLastName,idfSentByPerson,idfReceivedByOffice,strReceivedByFirstName,strReceivedByPatronymicName,strReceivedByLastName,idfReceivedByPerson,strLocalIdentifier 
		,idfsHospitalizationStatus,idfHospital,strCurrentLocation,datOnSetDate,idfsInitialCaseStatus,idfsYNPreviouslySoughtCare,datFirstSoughtCareDate,idfSoughtCareFacility
		,idfsNonNotIFiableDiagnosis,idfsYNHospitalization,datHospitalizationDate,datDischargeDate,strHospitalizationPlace,idfsYNAntimicrobialTherapy,strClinicalNotes
		,idfsYNSpecificVaccinationAdministered,idfInvestigatedByOffice,datInvestigationStartDate,idfsYNRelatedToOutbreak,idfOutbreak,idfsYNExposureLocationKnown,idfPointGeoLocation,datExposureDate
		,strNote,idfsFinalCaseStatus,idfsOutcome,idfsCaseProgressStatus,datModificationDate,idfsYNSpecimenCollected,idfsYNTestsConducted,DiseaseReportTypeID,blnClinicalDiagBasis
		,blnLabDiagBasis,blnEpiDiagBasis,datFinalCaseClassificationDate,strsummarynotes,idfEpiObservation,idfCSObservation,strEpidemiologistsName,idfsNotCollectedReason,strNotCollectedReason
		,idfsHumanAgeType,intPatientAge,datCompletionPaperFormDate,idfInvestigatedByPerson,idfPersonEnteredBy,idfsSite,idfHumanCase
		from dbo.tlbHumanCase 
		WHERE idfHumanCase = @SaveID AND intRowStatus = 0
		--Data Audit - End
		 
		BEGIN --Update Survivor report data
			UPDATE dbo.tlbHumanCase
			SET strCaseId = @strHumanCaseId,
				idfsTentativeDiagnosis = @idfsFinalDiagnosis,
				idfsFinalDiagnosis = @idfsFinalDiagnosis,
				datTentativeDiagnosisDate = @datDateOfDiagnosis,
				datFinalDiagnosisDate = @datDateOfDiagnosis,
				datNotIFicationDate = @datNotificationDate,
				idfsFinalState = @idfsFinalState,
				idfSentByOffice = @idfSentByOffice,
				strSentByFirstName = @strSentByFirstName,
				strSentByPatronymicName = @strSentByPatronymicName,
				strSentByLastName = @strSentByLastName,
				idfSentByPerson = @idfSentByPerson,
				idfReceivedByOffice = @idfReceivedByOffice,
				strReceivedByFirstName = @strReceivedByFirstName,
				strReceivedByPatronymicName = @strReceivedByPatronymicName,
				strReceivedByLastName = @strReceivedByLastName,
				idfReceivedByPerson = @idfReceivedByPerson,
				strLocalIdentifier = @strLocalIdentifier,
				idfsHospitalizationStatus = @idfsHospitalizationStatus,
				idfHospital = @idfHospital,
				strCurrentLocation = @strCurrentLocation,
				datOnSetDate = @datOnSetDate,
				idfsInitialCaseStatus = @idfsInitialCaseStatus,
				idfsYNPreviouslySoughtCare = @idfsYNPreviouslySoughtCare,
				datFirstSoughtCareDate = @datFirstSoughtCareDate,
				idfSoughtCareFacility = @idfSoughtCareFacility,
				idfsNonNotIFiableDiagnosis = @idfsNonNotIFiableDiagnosis,
				idfsYNHospitalization = @idfsYNHospitalization,
				datHospitalizationDate = @datHospitalizationDate,
				datDischargeDate = @datDischargeDate,
				strHospitalizationPlace = @strHospitalName,
				idfsYNAntimicrobialTherapy = @idfsYNAntimicrobialTherapy,
				strClinicalNotes = @strClinicalNotes,
				idfsYNSpecificVaccinationAdministered = @idfsYNSpecificVaccinationAdministered,
				idfInvestigatedByOffice = @idfInvestigatedByOffice,
				datInvestigationStartDate = @StartDateofInvestigation,
				idfsYNRelatedToOutbreak = @idfsYNRelatedToOutbreak,
				idfOutbreak = @idfOutbreak,
				idfsYNExposureLocationKnown = @idfsYNExposureLocationKnown,
				idfPointGeoLocation = @idfPointGeoLocation,
				datExposureDate = @datExposureDate,
				strNote = @strNote,
				idfsFinalCaseStatus = @idfsFinalCaseStatus,
				idfsOutcome = @idfsOutcome,
				idfsCaseProgressStatus = @idfsCaseProgressStatus,
				datModificationDate = GETDATE(),
				idfsYNSpecimenCollected = @idfsYNSpecimenCollected,
				idfsYNTestsConducted = @idfsYNTestsConducted,
				DiseaseReportTypeID = @DiseaseReportTypeID,
				blnClinicalDiagBasis = @blnClinicalDiagBasis,
				blnLabDiagBasis = @blnLabDiagBasis,
				blnEpiDiagBasis = @blnEpiDiagBasis,
				datFinalCaseClassificationDate = @DateofClassification,
				strsummarynotes = @strSummaryNotes,
				idfEpiObservation = @idfEpiObservation,
				idfCSObservation = @idfCSObservation,
				strEpidemiologistsName = @strEpidemiologistsName,
				idfsNotCollectedReason = @idfsNotCollectedReason,
				strNotCollectedReason = @strNotCollectedReason,
				idfsHumanAgeType = @idfsHumanAgeType,
				intPatientAge = @intPatientAge,
				datCompletionPaperFormDate = @datCompletionPaperFormDate,
				idfInvestigatedByPerson = @idfInvestigatedByPerson,
				idfPersonEnteredBy = @idfPersonEnteredBy,
				idfsSite = @idfsSite,
				AuditUpdateUser = @AuditUser,
				AuditUpdateDTM = GETDATE(),
				idfParentMonitoringSession = @idfParentMonitoringSession
			WHERE idfHumanCase = @SaveID
					AND intRowStatus = 0
		END
		 
		--Data Audit - Start
		--Get values before edit			
		insert into @tlbHumanCase_AfterEdit
		(strCaseId,idfsTentativeDiagnosis,idfsFinalDiagnosis,datTentativeDiagnosisDate,datFinalDiagnosisDate,datNotIFicationDate,idfsFinalState,idfSentByOffice,strSentByFirstName
		,strSentByPatronymicName,strSentByLastName,idfSentByPerson,idfReceivedByOffice,strReceivedByFirstName,strReceivedByPatronymicName,strReceivedByLastName,idfReceivedByPerson,strLocalIdentifier 
		,idfsHospitalizationStatus,idfHospital,strCurrentLocation,datOnSetDate,idfsInitialCaseStatus,idfsYNPreviouslySoughtCare,datFirstSoughtCareDate,idfSoughtCareFacility
		,idfsNonNotIFiableDiagnosis,idfsYNHospitalization,datHospitalizationDate,datDischargeDate,strHospitalizationPlace,idfsYNAntimicrobialTherapy,strClinicalNotes
		,idfsYNSpecificVaccinationAdministered,idfInvestigatedByOffice,datInvestigationStartDate,idfsYNRelatedToOutbreak,idfOutbreak,idfsYNExposureLocationKnown,idfPointGeoLocation,datExposureDate
		,strNote,idfsFinalCaseStatus,idfsOutcome,idfsCaseProgressStatus,datModificationDate,idfsYNSpecimenCollected,idfsYNTestsConducted,DiseaseReportTypeID,blnClinicalDiagBasis
		,blnLabDiagBasis,blnEpiDiagBasis,datFinalCaseClassificationDate,strsummarynotes,idfEpiObservation,idfCSObservation,strEpidemiologistsName,idfsNotCollectedReason,strNotCollectedReason
		,idfsHumanAgeType,intPatientAge,datCompletionPaperFormDate,idfInvestigatedByPerson,idfPersonEnteredBy,idfsSite,idfHumanCase)
		select strCaseId,idfsTentativeDiagnosis,idfsFinalDiagnosis,datTentativeDiagnosisDate,datFinalDiagnosisDate,datNotIFicationDate,idfsFinalState,idfSentByOffice,strSentByFirstName
		,strSentByPatronymicName,strSentByLastName,idfSentByPerson,idfReceivedByOffice,strReceivedByFirstName,strReceivedByPatronymicName,strReceivedByLastName,idfReceivedByPerson,strLocalIdentifier 
		,idfsHospitalizationStatus,idfHospital,strCurrentLocation,datOnSetDate,idfsInitialCaseStatus,idfsYNPreviouslySoughtCare,datFirstSoughtCareDate,idfSoughtCareFacility
		,idfsNonNotIFiableDiagnosis,idfsYNHospitalization,datHospitalizationDate,datDischargeDate,strHospitalizationPlace,idfsYNAntimicrobialTherapy,strClinicalNotes
		,idfsYNSpecificVaccinationAdministered,idfInvestigatedByOffice,datInvestigationStartDate,idfsYNRelatedToOutbreak,idfOutbreak,idfsYNExposureLocationKnown,idfPointGeoLocation,datExposureDate
		,strNote,idfsFinalCaseStatus,idfsOutcome,idfsCaseProgressStatus,datModificationDate,idfsYNSpecimenCollected,idfsYNTestsConducted,DiseaseReportTypeID,blnClinicalDiagBasis
		,blnLabDiagBasis,blnEpiDiagBasis,datFinalCaseClassificationDate,strsummarynotes,idfEpiObservation,idfCSObservation,strEpidemiologistsName,idfsNotCollectedReason,strNotCollectedReason
		,idfsHumanAgeType,intPatientAge,datCompletionPaperFormDate,idfInvestigatedByPerson,idfPersonEnteredBy,idfsSite,idfHumanCase
		from dbo.tlbHumanCase 
		WHERE idfHumanCase = @SaveID AND intRowStatus = 0
		IF EXISTS 
		(
			select *
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase  
			where (ISNULL(a.strCaseId,'') <> ISNULL(b.strCaseId,'')) OR (ISNULL(a.idfsTentativeDiagnosis,'') <> ISNULL(b.idfsTentativeDiagnosis,'')) OR 
				(ISNULL(a.idfsFinalDiagnosis,'') <> ISNULL(b.idfsFinalDiagnosis,'')) OR (ISNULL(a.datTentativeDiagnosisDate,'') <> ISNULL(b.datTentativeDiagnosisDate,'')) OR 
				(ISNULL(a.datFinalDiagnosisDate,'') <> ISNULL(b.datFinalDiagnosisDate,'')) OR (ISNULL(a.datNotIFicationDate,'') <> ISNULL(b.datNotIFicationDate,'')) OR 
				(ISNULL(a.idfsFinalState,'') <> ISNULL(b.idfsFinalState,'')) OR (ISNULL(a.idfSentByOffice,'') <> ISNULL(b.idfSentByOffice,'')) OR 
				(ISNULL(a.strSentByFirstName,'') <> ISNULL(b.strSentByFirstName,'')) OR (ISNULL(a.strSentByPatronymicName,'') <> ISNULL(b.strSentByPatronymicName,'')) OR 
				(ISNULL(a.strSentByLastName,'') <> ISNULL(b.strSentByLastName,'')) OR (ISNULL(a.idfSentByPerson,'') <> ISNULL(b.idfSentByPerson,'')) OR 
				(ISNULL(a.idfReceivedByOffice,'') <> ISNULL(b.idfReceivedByOffice,'')) OR (ISNULL(a.strReceivedByFirstName,'') <> ISNULL(b.strReceivedByFirstName,'')) OR 
				(ISNULL(a.strReceivedByPatronymicName,'') <> ISNULL(b.strReceivedByPatronymicName,'')) OR (ISNULL(a.strReceivedByLastName,'') <> ISNULL(b.strReceivedByLastName,'')) OR 
				(ISNULL(a.idfReceivedByPerson,'') <> ISNULL(b.idfReceivedByPerson,'')) OR (ISNULL(a.strLocalIdentifier,'') <> ISNULL(b.strLocalIdentifier,'')) OR 
				(ISNULL(a.idfsHospitalizationStatus,'') <> ISNULL(b.idfsHospitalizationStatus,'')) OR (ISNULL(a.idfHospital,'') <> ISNULL(b.idfHospital,''))OR 
				(ISNULL(a.strCurrentLocation,'') <> ISNULL(b.strCurrentLocation,'')) OR (ISNULL(a.datOnSetDate,'') <> ISNULL(b.datOnSetDate,''))OR 
				(ISNULL(a.idfsInitialCaseStatus,'') <> ISNULL(b.idfsInitialCaseStatus,'')) OR (ISNULL(a.idfsYNPreviouslySoughtCare,'') <> ISNULL(b.idfsYNPreviouslySoughtCare,''))OR 
				(ISNULL(a.datFirstSoughtCareDate,'') <> ISNULL(b.datFirstSoughtCareDate,'')) OR (ISNULL(a.idfSoughtCareFacility,'') <> ISNULL(b.idfSoughtCareFacility,''))OR 
				(ISNULL(a.idfsNonNotIFiableDiagnosis,'') <> ISNULL(b.idfsNonNotIFiableDiagnosis,'')) OR (ISNULL(a.idfsYNHospitalization,'') <> ISNULL(b.idfsYNHospitalization,''))OR 
				(ISNULL(a.datHospitalizationDate,'') <> ISNULL(b.datHospitalizationDate,'')) OR (ISNULL(a.datDischargeDate,'') <> ISNULL(b.datDischargeDate,''))OR 
				(ISNULL(a.strHospitalizationPlace,'') <> ISNULL(b.strHospitalizationPlace,'')) OR (ISNULL(a.idfsYNAntimicrobialTherapy,'') <> ISNULL(b.idfsYNAntimicrobialTherapy,''))OR 
				(ISNULL(a.strClinicalNotes,'') <> ISNULL(b.strClinicalNotes,'')) OR (ISNULL(a.idfsYNSpecificVaccinationAdministered,'') <> ISNULL(b.idfsYNSpecificVaccinationAdministered,''))OR 
				(ISNULL(a.idfInvestigatedByOffice,'') <> ISNULL(b.idfInvestigatedByOffice,'')) OR (ISNULL(a.datInvestigationStartDate,'') <> ISNULL(b.datInvestigationStartDate,''))OR 
				(ISNULL(a.idfsYNRelatedToOutbreak,'') <> ISNULL(b.idfsYNRelatedToOutbreak,'')) OR (ISNULL(a.idfOutbreak,'') <> ISNULL(b.idfOutbreak,''))OR 
				(ISNULL(a.idfsYNExposureLocationKnown,'') <> ISNULL(b.idfsYNExposureLocationKnown,'')) OR (ISNULL(a.idfPointGeoLocation,'') <> ISNULL(b.idfPointGeoLocation,'')) OR 
				(ISNULL(a.datExposureDate,'') <> ISNULL(b.datExposureDate,'')) OR (ISNULL(a.strNote,'') <> ISNULL(b.strNote,'')) OR (ISNULL(a.idfsFinalCaseStatus,'') <> ISNULL(b.idfsFinalCaseStatus,'')) OR 
				(ISNULL(a.idfsOutcome,'') <> ISNULL(b.idfsOutcome,'')) OR (ISNULL(a.idfsCaseProgressStatus,'') <> ISNULL(b.idfsCaseProgressStatus,''))OR 
				(ISNULL(a.datModificationDate,'') <> ISNULL(b.datModificationDate,'')) OR (ISNULL(a.idfsYNSpecimenCollected,'') <> ISNULL(b.idfsYNSpecimenCollected,''))OR 
				(ISNULL(a.idfsYNTestsConducted,'') <> ISNULL(b.idfsYNTestsConducted,'')) OR (ISNULL(a.DiseaseReportTypeID,'') <> ISNULL(b.DiseaseReportTypeID,''))OR 
				(ISNULL(a.blnClinicalDiagBasis,'') <> ISNULL(b.blnClinicalDiagBasis,'')) OR (ISNULL(a.blnLabDiagBasis,'') <> ISNULL(b.blnLabDiagBasis,''))OR 
				(ISNULL(a.blnEpiDiagBasis,'') <> ISNULL(b.blnEpiDiagBasis,'')) OR (ISNULL(a.datFinalCaseClassificationDate,'') <> ISNULL(b.datFinalCaseClassificationDate,''))OR 
				(ISNULL(a.strsummarynotes,'') <> ISNULL(b.strsummarynotes,'')) OR (ISNULL(a.idfEpiObservation,'') <> ISNULL(b.idfEpiObservation,''))OR 
				(ISNULL(a.idfCSObservation,'') <> ISNULL(b.idfCSObservation,'')) OR (ISNULL(a.strEpidemiologistsName,'') <> ISNULL(b.strEpidemiologistsName,''))OR 
				(ISNULL(a.idfsNotCollectedReason,'') <> ISNULL(b.idfsNotCollectedReason,'')) OR (ISNULL(a.strNotCollectedReason,'') <> ISNULL(b.strNotCollectedReason,'')) OR 
				(ISNULL(a.idfsHumanAgeType,'') <> ISNULL(b.idfsHumanAgeType,'')) OR (ISNULL(a.intPatientAge,'') <> ISNULL(b.intPatientAge,'')) OR 
				(ISNULL(a.datCompletionPaperFormDate,'') <> ISNULL(b.datCompletionPaperFormDate,'')) OR (ISNULL(a.idfInvestigatedByPerson,'') <> ISNULL(b.idfInvestigatedByPerson,'')) OR 
				(ISNULL(a.idfPersonEnteredBy,'') <> ISNULL(b.idfPersonEnteredBy,'')) OR (ISNULL(a.idfsSite,'') <> ISNULL(b.idfsSite,''))
		)
		BEGIN
			INSERT INTO @SuppressSelect
			EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectTypeHumanCase,@idfObjectHumanCase, @idfObjectHumanCaseTable, @idfDataAuditEventHumanCase OUTPUT

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,12665430000000,@idfObjectHumanCase,null,a.strCaseId,b.strCaseId 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.strCaseId,'') <> ISNULL(b.strCaseId,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79720000000,@idfObjectHumanCase,null,a.idfsTentativeDiagnosis,b.idfsTentativeDiagnosis 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsTentativeDiagnosis,'') <> ISNULL(b.idfsTentativeDiagnosis,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79660000000,@idfObjectHumanCase,null,a.idfsFinalDiagnosis,b.idfsFinalDiagnosis 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsFinalDiagnosis,'') <> ISNULL(b.idfsFinalDiagnosis,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79600000000,@idfObjectHumanCase,null,a.datTentativeDiagnosisDate,b.datTentativeDiagnosisDate 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.datTentativeDiagnosisDate,'') <> ISNULL(b.datTentativeDiagnosisDate,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,855740000000,@idfObjectHumanCase,null,a.datNotIFicationDate,b.datNotIFicationDate 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.datNotIFicationDate,'') <> ISNULL(b.datNotIFicationDate,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79560000000,@idfObjectHumanCase,null,a.datFinalDiagnosisDate,b.datFinalDiagnosisDate 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.datFinalDiagnosisDate,'') <> ISNULL(b.datFinalDiagnosisDate,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79670000000,@idfObjectHumanCase,null,a.idfsFinalState,b.idfsFinalState 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsFinalState,'') <> ISNULL(b.idfsFinalState,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,855700000000,@idfObjectHumanCase,null,a.idfSentByOffice,b.idfSentByOffice 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfSentByOffice,'') <> ISNULL(b.idfSentByOffice,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79880000000,@idfObjectHumanCase,null,a.strSentByFirstName,b.strSentByFirstName 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.strSentByFirstName,'') <> ISNULL(b.strSentByFirstName,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79900000000,@idfObjectHumanCase,null,a.strSentByPatronymicName,b.strSentByPatronymicName 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.strSentByPatronymicName,'') <> ISNULL(b.strSentByPatronymicName,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,4578390000000,@idfObjectHumanCase,null,a.idfSentByPerson,b.idfSentByPerson 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfSentByPerson,'') <> ISNULL(b.idfSentByPerson,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79890000000,@idfObjectHumanCase,null,a.strSentByLastName,b.strSentByLastName 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.strSentByLastName,'') <> ISNULL(b.strSentByLastName,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79640000000,@idfObjectHumanCase,null,a.idfReceivedByOffice,b.idfReceivedByOffice 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfReceivedByOffice,'') <> ISNULL(b.idfReceivedByOffice,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79850000000,@idfObjectHumanCase,null,a.strReceivedByFirstName,b.strReceivedByFirstName 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.strReceivedByFirstName,'') <> ISNULL(b.strReceivedByFirstName,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79870000000,@idfObjectHumanCase,null,a.strReceivedByPatronymicName,b.strReceivedByPatronymicName 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.strReceivedByPatronymicName,'') <> ISNULL(b.strReceivedByPatronymicName,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79860000000,@idfObjectHumanCase,null,a.strReceivedByLastName,b.strReceivedByLastName 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.strReceivedByLastName,'') <> ISNULL(b.strReceivedByLastName,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,4578400000000,@idfObjectHumanCase,null,a.idfReceivedByPerson,b.idfReceivedByPerson 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfReceivedByPerson,'') <> ISNULL(b.idfReceivedByPerson,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79820000000,@idfObjectHumanCase,null,a.strLocalIdentifier,b.strLocalIdentifier 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.strLocalIdentifier,'') <> ISNULL(b.strLocalIdentifier,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79680000000,@idfObjectHumanCase,null,a.idfsHospitalizationStatus,b.idfsHospitalizationStatus 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsHospitalizationStatus,'') <> ISNULL(b.idfsHospitalizationStatus,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,51523420000000,@idfObjectHumanCase,null,a.idfHospital,b.idfHospital 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfHospital,'') <> ISNULL(b.idfHospital,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79790000000,@idfObjectHumanCase,null,a.strCurrentLocation,b.strCurrentLocation 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.strCurrentLocation,'') <> ISNULL(b.strCurrentLocation,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,855760000000,@idfObjectHumanCase,null,a.datOnSetDate,b.datOnSetDate 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.datOnSetDate,'') <> ISNULL(b.datOnSetDate,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79700000000,@idfObjectHumanCase,null,a.idfsInitialCaseStatus,b.idfsInitialCaseStatus 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsInitialCaseStatus,'') <> ISNULL(b.idfsInitialCaseStatus,''))

			--insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			--select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,49545390000000,@idfObjectHumanCase,null,a.idfsYNPreviouslySoughtCare,b.idfsYNPreviouslySoughtCare 
			--from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			--where (ISNULL(a.idfsYNPreviouslySoughtCare,'') <> ISNULL(b.idfsYNPreviouslySoughtCare,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,855750000000,@idfObjectHumanCase,null,a.datFirstSoughtCareDate,b.datFirstSoughtCareDate 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.datFirstSoughtCareDate,'') <> ISNULL(b.datFirstSoughtCareDate,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,12014650000000,@idfObjectHumanCase,null,a.idfSoughtCareFacility,b.idfSoughtCareFacility 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfSoughtCareFacility,'') <> ISNULL(b.idfSoughtCareFacility,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,12014660000000,@idfObjectHumanCase,null,a.idfsNonNotIFiableDiagnosis,b.idfsNonNotIFiableDiagnosis 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsNonNotIFiableDiagnosis,'') <> ISNULL(b.idfsNonNotIFiableDiagnosis,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79740000000,@idfObjectHumanCase,null,a.idfsYNHospitalization,b.idfsYNHospitalization 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsYNHospitalization,'') <> ISNULL(b.idfsYNHospitalization,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79570000000,@idfObjectHumanCase,null,a.datHospitalizationDate,b.datHospitalizationDate 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.datHospitalizationDate,'') <> ISNULL(b.datHospitalizationDate,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79530000000,@idfObjectHumanCase,null,a.datDischargeDate,b.datDischargeDate 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.datDischargeDate,'') <> ISNULL(b.datDischargeDate,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79810000000,@idfObjectHumanCase,null,a.strHospitalizationPlace,b.strHospitalizationPlace 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.strHospitalizationPlace,'') <> ISNULL(b.strHospitalizationPlace,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79730000000,@idfObjectHumanCase,null,a.idfsYNAntimicrobialTherapy,b.idfsYNAntimicrobialTherapy 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsYNAntimicrobialTherapy,'') <> ISNULL(b.idfsYNAntimicrobialTherapy,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,855770000000,@idfObjectHumanCase,null,a.strClinicalNotes,b.strClinicalNotes 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.strClinicalNotes,'') <> ISNULL(b.strClinicalNotes,''))

			--insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			--select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,49545390000000,@idfObjectHumanCase,null,a.idfsYNSpecificVaccinationAdministered,b.idfsYNSpecificVaccinationAdministered 
			--from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			--where (ISNULL(a.idfsYNSpecificVaccinationAdministered,'') <> ISNULL(b.idfsYNSpecificVaccinationAdministered,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79620000000,@idfObjectHumanCase,null,a.idfInvestigatedByOffice,b.idfInvestigatedByOffice 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfInvestigatedByOffice,'') <> ISNULL(b.idfInvestigatedByOffice,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79580000000,@idfObjectHumanCase,null,a.datInvestigationStartDate,b.datInvestigationStartDate 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.datInvestigationStartDate,'') <> ISNULL(b.datInvestigationStartDate,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79750000000,@idfObjectHumanCase,null,a.idfsYNRelatedToOutbreak,b.idfsYNRelatedToOutbreak 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsYNRelatedToOutbreak,'') <> ISNULL(b.idfsYNRelatedToOutbreak,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,12665410000000,@idfObjectHumanCase,null,a.idfOutbreak,b.idfOutbreak 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfOutbreak,'') <> ISNULL(b.idfOutbreak,''))

			--insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			--select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,49545390000000,@idfObjectHumanCase,null,a.idfsYNExposureLocationKnown,b.idfsYNExposureLocationKnown 
			--from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			--where (ISNULL(a.idfsYNExposureLocationKnown,'') <> ISNULL(b.idfsYNExposureLocationKnown,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79630000000,@idfObjectHumanCase,null,a.idfPointGeoLocation,b.idfPointGeoLocation 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfPointGeoLocation,'') <> ISNULL(b.idfPointGeoLocation,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79540000000,@idfObjectHumanCase,null,a.datExposureDate,b.datExposureDate 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.datExposureDate,'') <> ISNULL(b.datExposureDate,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79840000000,@idfObjectHumanCase,null,a.strNote,b.strNote 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.strNote,'') <> ISNULL(b.strNote,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,855690000000,@idfObjectHumanCase,null,a.idfsFinalCaseStatus,b.idfsFinalCaseStatus 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsFinalCaseStatus,'') <> ISNULL(b.idfsFinalCaseStatus,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79710000000,@idfObjectHumanCase,null,a.idfsOutcome,b.idfsOutcome 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsOutcome,'') <> ISNULL(b.idfsOutcome,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,12665440000000,@idfObjectHumanCase,null,a.idfsCaseProgressStatus,b.idfsCaseProgressStatus 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsCaseProgressStatus,'') <> ISNULL(b.idfsCaseProgressStatus,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79590000000,@idfObjectHumanCase,null,a.datModificationDate,b.datModificationDate 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.datModificationDate,'') <> ISNULL(b.datModificationDate,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79760000000,@idfObjectHumanCase,null,a.idfsYNSpecimenCollected,b.idfsYNSpecimenCollected 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsYNSpecimenCollected,'') <> ISNULL(b.idfsYNSpecimenCollected,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,4578420000000,@idfObjectHumanCase,null,a.idfsYNTestsConducted,b.idfsYNTestsConducted 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsYNTestsConducted,'') <> ISNULL(b.idfsYNTestsConducted,''))

			--insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			--select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,49545390000000,@idfObjectHumanCase,null,a.DiseaseReportTypeID,b.DiseaseReportTypeID 
			--from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			--where (ISNULL(a.DiseaseReportTypeID,'') <> ISNULL(b.DiseaseReportTypeID,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79490000000,@idfObjectHumanCase,null,a.blnClinicalDiagBasis,b.blnClinicalDiagBasis 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.blnClinicalDiagBasis,'') <> ISNULL(b.blnClinicalDiagBasis,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79510000000,@idfObjectHumanCase,null,a.blnLabDiagBasis,b.blnLabDiagBasis 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.blnLabDiagBasis,'') <> ISNULL(b.blnLabDiagBasis,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79500000000,@idfObjectHumanCase,null,a.blnEpiDiagBasis,b.blnEpiDiagBasis 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.blnEpiDiagBasis,'') <> ISNULL(b.blnEpiDiagBasis,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,51389570000000,@idfObjectHumanCase,null,a.datFinalCaseClassificationDate,b.datFinalCaseClassificationDate 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.datFinalCaseClassificationDate,'') <> ISNULL(b.datFinalCaseClassificationDate,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,855780000000,@idfObjectHumanCase,null,a.strsummarynotes,b.strsummarynotes 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.strsummarynotes,'') <> ISNULL(b.strsummarynotes,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,855710000000,@idfObjectHumanCase,null,a.idfEpiObservation,b.idfEpiObservation 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfEpiObservation,'') <> ISNULL(b.idfEpiObservation,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,855720000000,@idfObjectHumanCase,null,a.idfCSObservation,b.idfCSObservation 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfCSObservation,'') <> ISNULL(b.idfCSObservation,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79800000000,@idfObjectHumanCase,null,a.strEpidemiologistsName,b.strEpidemiologistsName 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.strEpidemiologistsName,'') <> ISNULL(b.strEpidemiologistsName,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,12014670000000,@idfObjectHumanCase,null,a.idfsNotCollectedReason,b.idfsNotCollectedReason 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsNotCollectedReason,'') <> ISNULL(b.idfsNotCollectedReason,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79830000000,@idfObjectHumanCase,null,a.strNotCollectedReason,b.strNotCollectedReason 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.strNotCollectedReason,'') <> ISNULL(b.strNotCollectedReason,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79690000000,@idfObjectHumanCase,null,a.idfsHumanAgeType,b.idfsHumanAgeType 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfsHumanAgeType,'') <> ISNULL(b.idfsHumanAgeType,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79770000000,@idfObjectHumanCase,null,a.intPatientAge,b.intPatientAge 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.intPatientAge,'') <> ISNULL(b.intPatientAge,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,79520000000,@idfObjectHumanCase,null,a.datCompletionPaperFormDate,b.datCompletionPaperFormDate 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.datCompletionPaperFormDate,'') <> ISNULL(b.datCompletionPaperFormDate,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,4578410000000,@idfObjectHumanCase,null,a.idfInvestigatedByPerson,b.idfInvestigatedByPerson 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfInvestigatedByPerson,'') <> ISNULL(b.idfInvestigatedByPerson,''))

			insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,4577910000000,@idfObjectHumanCase,null,a.idfPersonEnteredBy,b.idfPersonEnteredBy 
			from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			where (ISNULL(a.idfPersonEnteredBy,'') <> ISNULL(b.idfPersonEnteredBy,''))

			--insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
			--select @idfDataAuditEventHumanCase,@idfObjectHumanCaseTable,49545390000000,@idfObjectHumanCase,null,a.idfsSite,b.idfsSite 
			--from @tlbHumanCase_BeforeEdit a  inner join @tlbHumanCase_AfterEdit b on a.idfHumanCase = b.idfHumanCase 
			--where (ISNULL(a.idfsSite,'') <> ISNULL(b.idfsSite,''))
		END
		--Data Audit - End
	END
	
    --Set Samples for this idfHumanCase	
    IF @SamplesParameters IS NOT NULL
    BEGIN
		--Data Audit - Samples - Start
		--Variables
		DECLARE @idfsObjectTypeSamples bigint = 10017079;
		DECLARE @idfObjectSamples bigint = NULL;
		DECLARE @idfObjectSamplesTable bigint = 75620000000;
		DECLARE @tlbSamples_BeforeEdit TABLE
		(
			idfMaterial BIGINT,
			idfsSampleType BIGINT,
			idfHuman BIGINT,
			idfSpecies BIGINT,
			idfAnimal BIGINT,
			idfMonitoringSession BIGINT,
			idfFieldCollectedByPerson BIGINT,
			idfFieldCollectedByOffice BIGINT,
			datFieldCollectionDate DATETIME,
			datFieldSentDate DATETIME,
			strFieldBarcode NVARCHAR(200),
			idfVectorSurveillanceSession BIGINT,
			idfVector BIGINT,
			strNote NVARCHAR(500),
			idfsSite BIGINT,
			idfSendToOffice BIGINT,
			blnReadOnly BIT,
			idfHumanCase BIGINT,
			idfVetCase BIGINT,
			DiseaseID BIGINT,
			idfsBirdStatus BIGINT
		)
		DECLARE @tlbSamples_AfterEdit TABLE
		(
			idfMaterial BIGINT,
			idfsSampleType BIGINT,
			idfHuman BIGINT,
			idfSpecies BIGINT,
			idfAnimal BIGINT,
			idfMonitoringSession BIGINT,
			idfFieldCollectedByPerson BIGINT,
			idfFieldCollectedByOffice BIGINT,
			datFieldCollectionDate DATETIME,
			datFieldSentDate DATETIME,
			strFieldBarcode NVARCHAR(200),
			idfVectorSurveillanceSession BIGINT,
			idfVector BIGINT,
			strNote NVARCHAR(500),
			idfsSite BIGINT,
			idfSendToOffice BIGINT,
			blnReadOnly BIT,
			idfHumanCase BIGINT,
			idfVetCase BIGINT,
			DiseaseID BIGINT,
			idfsBirdStatus BIGINT
		) 
		DECLARE @idfDataAuditEventSamples bigint= NULL; 
		--Data Audit - End

        WHILE EXISTS (SELECT * FROM @SamplesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SampleID,
                @SampleID = SampleID,
                @SampleTypeID = SampleTypeID,
                @CollectedByPersonID = CollectedByPersonID,
                @CollectedByOrganizationID = CollectedByOrganizationID,
                @CollectionDate = CAST(CollectionDate AS DATETIME),
                @SentDate = CAST(SentDate AS DATETIME),
                @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                @SampleStatusTypeID = SampleStatusTypeID,
                @Comments = Comments,
                @idfsSite = SiteID,
                @CurrentSiteID = CurrentSiteID,
                @RowStatus = RowStatus,
                @SentToOrganizationID = SentToOrganizationID,
                @DiseaseID = DiseaseID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @HumanID = HumanID,
                @HumanMasterID = HumanMasterID,
                @RowAction = RowAction
            FROM @SamplesTemp;
				
			--Data Audit - Start
			--Find Insert/Update/Delete
			IF @RowAction = 1
			BEGIN
				set @idfsDataAuditEventType = 10016001; --Insert
			END
			ELSE IF @RowAction <> 1 and @RowStatus = 1
			BEGIN  
				set @idfsDataAuditEventType = 10016002; --Delete
			END
			ELSE 
			BEGIN 
				set @idfsDataAuditEventType = 10016003; --Update
			END
			--Get values before edit
			IF @idfsDataAuditEventType = 10016003
			BEGIN
				insert into @tlbSamples_BeforeEdit
				(idfMaterial,idfsSampleType,idfHuman,idfSpecies,idfAnimal,idfMonitoringSession,idfFieldCollectedByPerson,idfFieldCollectedByOffice
				,datFieldCollectionDate,datFieldSentDate,strFieldBarcode,idfVectorSurveillanceSession,idfVector,strNote,idfsSite,idfSendToOffice,blnReadOnly 
				,idfHumanCase,idfVetCase,DiseaseID,idfsBirdStatus)
				select idfMaterial,idfsSampleType,idfHuman,idfSpecies,idfAnimal,idfMonitoringSession,idfFieldCollectedByPerson,idfFieldCollectedByOffice
				,datFieldCollectionDate,datFieldSentDate,strFieldBarcode,idfVectorSurveillanceSession,idfVector,strNote,idfsSite,idfSendToOffice,blnReadOnly 
				,idfHumanCase,idfVetCase,DiseaseID,idfsBirdStatus
				from tlbMaterial 
				where idfMaterial = @SampleID;
			END
			--Data Audit - End

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_SAMPLE_SET @AuditUserName = @AuditUser,
                                            @SampleID = @SampleID OUTPUT,
                                            @SampleTypeID = @SampleTypeID,
                                            @RootSampleID = NULL,
                                            @ParentSampleID = NULL,
                                            @HumanID = @idfHuman,
                                            @SpeciesID = NULL,
                                            @AnimalID = NULL,
                                            @VectorID = NULL,
                                            @MonitoringSessionID = NULL,
                                            @VectorSessionID = NULL,
                                            @HumanDiseaseReportID = @SaveID,
                                            @VeterinaryDiseaseReportID = NULL,
                                            @CollectionDate = @CollectionDate,
                                            @CollectedByPersonID = @CollectedByPersonID,
                                            @CollectedByOrganizationID = @CollectedByOrganizationID,
                                            @SentDate = @SentDate,
                                            @SentToOrganizationID = @SentToOrganizationID,
                                            @EIDSSLocalFieldSampleID = @EIDSSLocalOrFieldSampleID,
                                            @SiteID = @idfsSite,
                                            @EnteredDate = @DateEntered,
                                            @ReadOnlyIndicator = @ReadOnlyIndicator,
                                            @SampleStatusTypeID = @SampleStatusTypeID,
                                            @Comments = @Comments,
                                            @CurrentSiteID = @CurrentSiteID,
                                            @DiseaseID = @DiseaseID,
                                            @BirdStatusTypeID = NULL,
                                            @RowStatus = @RowStatus,
                                            @RowAction = @RowAction
												
			--Data Audit - Start
			--Get values After edit
			IF @idfsDataAuditEventType = 10016003
			BEGIN
				insert into @tlbSamples_AfterEdit
				(idfMaterial,idfsSampleType,idfHuman,idfSpecies,idfAnimal,idfMonitoringSession,idfFieldCollectedByPerson,idfFieldCollectedByOffice
				,datFieldCollectionDate,datFieldSentDate,strFieldBarcode,idfVectorSurveillanceSession,idfVector,strNote,idfsSite,idfSendToOffice,blnReadOnly 
				,idfHumanCase,idfVetCase,DiseaseID,idfsBirdStatus)
				select idfMaterial,idfsSampleType,idfHuman,idfSpecies,idfAnimal,idfMonitoringSession,idfFieldCollectedByPerson,idfFieldCollectedByOffice
				,datFieldCollectionDate,datFieldSentDate,strFieldBarcode,idfVectorSurveillanceSession,idfVector,strNote,idfsSite,idfSendToOffice,blnReadOnly 
				,idfHumanCase,idfVetCase,DiseaseID,idfsBirdStatus
				from tlbMaterial 
				where idfMaterial = @SampleID;
			END 

			SET @idfObjectSamples = @SampleID 
			IF @idfsDataAuditEventType =10016001
			Begin
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectTypeSamples,@idfObjectSamples, @idfObjectSamplesTable, @idfDataAuditEventSamples OUTPUT

				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
					values ( @idfDataAuditEventSamples, @idfObjectSamplesTable, @idfObjectSamples)
			END
			ELSE IF @idfsDataAuditEventType =10016002
			BEGIN
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectTypeSamples,@idfObjectSamples, @idfObjectSamplesTable, @idfDataAuditEventSamples OUTPUT

				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject) VALUES (@idfDataAuditEventSamples, @idfObjectSamplesTable, @idfObjectSamples)
			END
			ELSE IF @idfsDataAuditEventType =10016003
			BEGIN
				IF EXISTS 
				(
					select *
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial  
					where (ISNULL(a.idfsSampleType,'') <> ISNULL(b.idfsSampleType,'')) OR (ISNULL(a.idfHuman,'') <> ISNULL(b.idfHuman,'')) OR 
						(ISNULL(a.idfSpecies,'') <> ISNULL(b.idfSpecies,'')) OR (ISNULL(a.idfAnimal,'') <> ISNULL(b.idfAnimal,'')) OR 
						(ISNULL(a.idfMonitoringSession,'') <> ISNULL(b.idfMonitoringSession,'')) OR (ISNULL(a.idfFieldCollectedByPerson,'') <> ISNULL(b.idfFieldCollectedByPerson,'')) OR 
						(ISNULL(a.idfFieldCollectedByOffice,'') <> ISNULL(b.idfFieldCollectedByOffice,'')) OR (ISNULL(a.datFieldCollectionDate,'') <> ISNULL(b.datFieldCollectionDate,'')) OR 
						(ISNULL(a.datFieldSentDate,'') <> ISNULL(b.datFieldSentDate,'')) OR (ISNULL(a.strFieldBarcode,'') <> ISNULL(b.strFieldBarcode,'')) OR 
						(ISNULL(a.idfVectorSurveillanceSession,'') <> ISNULL(b.idfVectorSurveillanceSession,'')) OR (ISNULL(a.idfVector,'') <> ISNULL(b.idfVector,'')) OR 
						(ISNULL(a.strNote,'') <> ISNULL(b.strNote,'')) OR (ISNULL(a.idfsSite,'') <> ISNULL(b.idfsSite,'')) OR 
						(ISNULL(a.idfSendToOffice,'') <> ISNULL(b.idfSendToOffice,'')) OR (ISNULL(a.blnReadOnly,'') <> ISNULL(b.blnReadOnly,'')) OR 
						(ISNULL(a.idfHumanCase,'') <> ISNULL(b.idfHumanCase,'')) OR (ISNULL(a.idfVetCase,'') <> ISNULL(b.idfVetCase,'')) OR 
						(ISNULL(a.DiseaseID,'') <> ISNULL(b.DiseaseID,'')) OR (ISNULL(a.idfsBirdStatus,'') <> ISNULL(b.idfsBirdStatus,''))
				)
				BEGIN
					INSERT INTO @SuppressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectTypeSamples,@idfObjectSamples, @idfObjectSamplesTable, @idfDataAuditEventSamples OUTPUT

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,49545390000000,@idfObjectSamples,null,a.idfsSampleType,b.idfsSampleType 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.idfsSampleType,'') <> ISNULL(b.idfsSampleType,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,4572430000000,@idfObjectSamples,null,a.idfHuman,b.idfHuman 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.idfHuman,'') <> ISNULL(b.idfHuman,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,4572440000000,@idfObjectSamples,null,a.idfSpecies,b.idfSpecies 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.idfSpecies,'') <> ISNULL(b.idfSpecies,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,4572450000000,@idfObjectSamples,null,a.idfAnimal,b.idfAnimal 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.idfAnimal,'') <> ISNULL(b.idfAnimal,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,4572470000000,@idfObjectSamples,null,a.idfMonitoringSession,b.idfMonitoringSession 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.idfMonitoringSession,'') <> ISNULL(b.idfMonitoringSession,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,79950000000,@idfObjectSamples,null,a.idfFieldCollectedByPerson,b.idfFieldCollectedByPerson 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.idfFieldCollectedByPerson,'') <> ISNULL(b.idfFieldCollectedByPerson,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,79940000000,@idfObjectSamples,null,a.idfFieldCollectedByOffice,b.idfFieldCollectedByOffice 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.idfFieldCollectedByOffice,'') <> ISNULL(b.idfFieldCollectedByOffice,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,79920000000,@idfObjectSamples,null,a.datFieldCollectionDate,b.datFieldCollectionDate 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.datFieldCollectionDate,'') <> ISNULL(b.datFieldCollectionDate,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,79930000000,@idfObjectSamples,null,a.datFieldSentDate,b.datFieldSentDate 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.datFieldSentDate,'') <> ISNULL(b.datFieldSentDate,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,80030000000,@idfObjectSamples,null,a.strFieldBarcode,b.strFieldBarcode 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.strFieldBarcode,'') <> ISNULL(b.strFieldBarcode,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,4575190000000,@idfObjectSamples,null,a.idfVectorSurveillanceSession,b.idfVectorSurveillanceSession 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.idfVectorSurveillanceSession,'') <> ISNULL(b.idfVectorSurveillanceSession,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,4575200000000,@idfObjectSamples,null,a.idfVector,b.idfVector 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.idfVector,'') <> ISNULL(b.idfVector,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,4576420000000,@idfObjectSamples,null,a.strNote,b.strNote 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.strNote,'') <> ISNULL(b.strNote,''))

					--insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					--select @idfDataAuditEventSamples,@idfObjectSamplesTable,49545430000000,@idfObjectSamples,null,a.idfsSite,b.idfsSite 
					--from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					--where (ISNULL(a.idfsSite,'') <> ISNULL(b.idfsSite,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,4578720000000,@idfObjectSamples,null,a.idfSendToOffice,b.idfSendToOffice 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.idfSendToOffice,'') <> ISNULL(b.idfSendToOffice,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,4578730000000,@idfObjectSamples,null,a.blnReadOnly,b.blnReadOnly 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.blnReadOnly,'') <> ISNULL(b.blnReadOnly,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,12665570000000,@idfObjectSamples,null,a.idfHumanCase,b.idfHumanCase 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.idfHumanCase,'') <> ISNULL(b.idfHumanCase,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,12665580000000,@idfObjectSamples,null,a.idfVetCase,b.idfVetCase 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.idfVetCase,'') <> ISNULL(b.idfVetCase,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,51586990000035,@idfObjectSamples,null,a.DiseaseID,b.DiseaseID 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.DiseaseID,'') <> ISNULL(b.DiseaseID,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventSamples,@idfObjectSamplesTable,12014480000000,@idfObjectSamples,null,a.idfsBirdStatus,b.idfsBirdStatus 
					from @tlbSamples_BeforeEdit a  inner join @tlbSamples_AfterEdit b on a.idfMaterial = b.idfMaterial 
					where (ISNULL(a.idfsBirdStatus,'') <> ISNULL(b.idfsBirdStatus,''))
				END
			END
			--Data Audit - End

            UPDATE @TestsTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID

            DELETE FROM @SamplesTemp
            WHERE SampleID = @RowID
        END
    END
		
    --Set Tests for this idfHumanCase	
    IF @TestsParameters IS NOT NULL
    BEGIN		
		--Data Audit - Tests - Start
		-- Variables
		DECLARE @idfsObjectTypeTests bigint = 10017079;
		DECLARE @idfObjectTests bigint = NULL;
		DECLARE @idfObjectTestsTable bigint = 75740000000;
		DECLARE @tlbTests_BeforeEdit TABLE
		(
			idfTesting BIGINT,
			idfsTestName BIGINT,
			idfsTestCategory BIGINT,
			idfsTestResult BIGINT,
			idfsTestStatus BIGINT,
			idfsDiagnosis BIGINT,
			idfMaterial BIGINT,
			idfBatchTest BIGINT,
			idfObservation BIGINT,
			intTestNumber INT,
			strNote NVARCHAR(500),
			intRowStatus INT,
			datStartedDate DATETIME,
			datConcludedDate DATETIME,
			idfTestedByOffice BIGINT,
			idfTestedByPerson BIGINT,
			idfResultEnteredByOffice BIGINT,
			idfResultEnteredByPerson BIGINT,
			idfValidatedByOffice BIGINT,
			idfValidatedByPerson BIGINT,
			blnReadOnly BIT,
			blnNonLaboratoryTest BIT,
			blnExternalTest BIT,
			idfPerformedByOffice BIGINT,
			datReceivedDate DATETIME,
			strContactPerson NVARCHAR(200),
			idfMonitoringSession BIGINT,
			idfVector BIGINT,
			idfHumanCase BIGINT,
			idfVetCase BIGINT
		)
		DECLARE @tlbTests_AfterEdit TABLE
		(
			idfTesting BIGINT,
			idfsTestName BIGINT,
			idfsTestCategory BIGINT,
			idfsTestResult BIGINT,
			idfsTestStatus BIGINT,
			idfsDiagnosis BIGINT,
			idfMaterial BIGINT,
			idfBatchTest BIGINT,
			idfObservation BIGINT,
			intTestNumber INT,
			strNote NVARCHAR(500),
			intRowStatus INT,
			datStartedDate DATETIME,
			datConcludedDate DATETIME,
			idfTestedByOffice BIGINT,
			idfTestedByPerson BIGINT,
			idfResultEnteredByOffice BIGINT,
			idfResultEnteredByPerson BIGINT,
			idfValidatedByOffice BIGINT,
			idfValidatedByPerson BIGINT,
			blnReadOnly BIT,
			blnNonLaboratoryTest BIT,
			blnExternalTest BIT,
			idfPerformedByOffice BIGINT,
			datReceivedDate DATETIME,
			strContactPerson NVARCHAR(200),
			idfMonitoringSession BIGINT,
			idfVector BIGINT,
			idfHumanCase BIGINT,
			idfVetCase BIGINT
		)
		DECLARE @idfDataAuditEventTests bigint= NULL; 
		--Data Audit - End
	
        WHILE EXISTS (SELECT * FROM @TestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestID,
                @TestID = TestID,
                @TestNameTypeID = TestNameTypeID,
                @TestCategoryTypeID = TestCategoryTypeID,
                @TestResultTypeID = TestResultTypeID,
                @TestStatusTypeID = TestStatusTypeID,
                @DiseaseID = DiseaseID,
                @SampleID = SampleID,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @StartedDate = StartedDate,
                @ResultDate = ResultDate,
                @TestedByOrganizationID = TestedByOrganizationID,
                @TestedByPersonID = TestedByPersonID,
                @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                @ResultEnteredByPersonID = ResultEnteredByPersonID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
                @ExternalTestIndicator = ExternalTestIndicator,
                @PerformedByOrganizationID = PerformedByOrganizationID,
                @ReceivedDate = ReceivedDate,
                @ContactPersonName = ContactPersonName,
                @RowAction = RowAction
            FROM @TestsTemp;
				
            --If record is being soft-deleted, then check if the test record was originally created 
            --in the laboaratory module.  If it was, then disassociate the test record from the 
            --human monitoring session, so that the test record remains in the laboratory module 
            --for further action.
            IF @RowStatus = 1
                AND @NonLaboratoryTestIndicator = 0
            BEGIN
                SET @RowStatus = 0;
            END
            ELSE
            BEGIN
                SET @TestHumanCaseID = @TestHumanCaseId
            END;
				
			--Data Audit - Start
			--Find Insert/Update/Delete
			IF @RowAction = 1
			BEGIN
				set @idfsDataAuditEventType = 10016001; --Insert
			END
			ELSE IF @RowAction <> 1 and @RowStatus = 1
			BEGIN  
				set @idfsDataAuditEventType = 10016002; --Delete
			END
			ELSE 
			BEGIN 
				set @idfsDataAuditEventType = 10016003; --Update
			END
			--Get values before edit
			IF @idfsDataAuditEventType = 10016003
			BEGIN
				insert into @tlbTests_BeforeEdit
				(idfTesting,idfsTestName,idfsTestCategory,idfsTestResult,idfsTestStatus,idfsDiagnosis,idfMaterial,idfBatchTest,idfObservation,intTestNumber,strNote,intRowStatus
				,datStartedDate,datConcludedDate,idfTestedByOffice,idfTestedByPerson,idfResultEnteredByOffice,idfResultEnteredByPerson,idfValidatedByOffice
				,idfValidatedByPerson,blnReadOnly,blnNonLaboratoryTest,blnExternalTest,idfPerformedByOffice,datReceivedDate,strContactPerson
				,idfMonitoringSession,idfVector,idfHumanCase,idfVetCase)
				select idfTesting,idfsTestName,idfsTestCategory,idfsTestResult,idfsTestStatus,idfsDiagnosis,idfMaterial,idfBatchTest,idfObservation,intTestNumber,strNote,intRowStatus
				,datStartedDate,datConcludedDate,idfTestedByOffice,idfTestedByPerson,idfResultEnteredByOffice,idfResultEnteredByPerson,idfValidatedByOffice
				,idfValidatedByPerson,blnReadOnly,blnNonLaboratoryTest,blnExternalTest,idfPerformedByOffice,datReceivedDate,strContactPerson
				,idfMonitoringSession,idfVector,idfHumanCase,idfVetCase
				from tlbTesting 
				where idfTesting = @TestID
			END
			--Data Audit - End

            --Set Tests for this idfHumanCase
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TEST_SET @LanguageID = @LanguageID,
                                            @TestID = @TestID OUTPUT,
                                            @TestNameTypeID = @TestNameTypeID,
                                            @TestCategoryTypeID = @TestCategoryTypeID,
                                            @TestResultTypeID = @TestResultTypeID,
                                            @TestStatusTypeID = @TestStatusTypeID,
                                            @DiseaseID = @DiseaseID,
                                            @SampleID = @SampleID,
                                            @BatchTestID = NULL,
                                            @ObservationID = NULL,
                                            @TestNumber = NULL,
                                            @Comments = @Comments,
                                            @RowStatus = @RowStatus,
                                            @StartedDate = @StartedDate,
                                            @ResultDate = @ResultDate,
                                            @TestedByOrganizationID = @TestedByOrganizationID,
                                            @TestedByPersonID = @TestedByPersonID,
                                            @ResultEnteredByOrganizationID = @ResultEnteredByOrganizationID,
                                            @ResultEnteredByPersonID = @ResultEnteredByPersonID,
                                            @ValidatedByOrganizationID = @ValidatedByOrganizationID,
                                            @ValidatedByPersonID = @ValidatedByPersonID,
                                            @ReadOnlyIndicator = @ReadOnlyIndicator,
                                            @NonLaboratoryTestIndicator = @NonLaboratoryTestIndicator,
                                            @ExternalTestIndicator = @ExternalTestIndicator,
                                            @PerformedByOrganizationID = @PerformedByOrganizationID,
                                            @ReceivedDate = @ReceivedDate,
                                            @ContactPerson = @ContactPersonName,
                                            @MonitoringSessionID = NULL,
                                            @VectorSessionID = NULL,
                                            @HumanDiseaseReportID = @SaveID,
                                            @VeterinaryDiseaseReportID = NULL,
                                            @AuditUserName = @AuditUser,
                                            @RowAction = @RowAction;
						  
			--Data Audit - Start
			--Get values After edit
			IF @idfsDataAuditEventType = 10016003
			BEGIN
				insert into @tlbTests_AfterEdit
				(idfTesting,idfsTestName,idfsTestCategory,idfsTestResult,idfsTestStatus,idfsDiagnosis,idfMaterial,idfBatchTest,idfObservation,intTestNumber,strNote,intRowStatus
				,datStartedDate,datConcludedDate,idfTestedByOffice,idfTestedByPerson,idfResultEnteredByOffice,idfResultEnteredByPerson,idfValidatedByOffice
				,idfValidatedByPerson,blnReadOnly,blnNonLaboratoryTest,blnExternalTest,idfPerformedByOffice,datReceivedDate,strContactPerson
				,idfMonitoringSession,idfVector,idfHumanCase,idfVetCase)
				select idfTesting,idfsTestName,idfsTestCategory,idfsTestResult,idfsTestStatus,idfsDiagnosis,idfMaterial,idfBatchTest,idfObservation,intTestNumber,strNote,intRowStatus
				,datStartedDate,datConcludedDate,idfTestedByOffice,idfTestedByPerson,idfResultEnteredByOffice,idfResultEnteredByPerson,idfValidatedByOffice
				,idfValidatedByPerson,blnReadOnly,blnNonLaboratoryTest,blnExternalTest,idfPerformedByOffice,datReceivedDate,strContactPerson
				,idfMonitoringSession,idfVector,idfHumanCase,idfVetCase
				from tlbTesting 
				where idfTesting = @TestID
			END 

			SET @idfObjectTests = @TestID 
			IF @idfsDataAuditEventType =10016001
			Begin
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectTypeTests,@idfObjectTests, @idfObjectTestsTable, @idfDataAuditEventTests OUTPUT

				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
					values ( @idfDataAuditEventTests, @idfObjectTestsTable, @idfObjectTests)
			END
			ELSE IF @idfsDataAuditEventType =10016002
			BEGIN
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectTypeTests,@idfObjectTests, @idfObjectTestsTable, @idfDataAuditEventTests OUTPUT

				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject) VALUES (@idfDataAuditEventTests, @idfObjectTestsTable, @idfObjectTests)
			END
			ELSE IF @idfsDataAuditEventType =10016003
			BEGIN
				IF EXISTS 
				(
					select *
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting  
					where (ISNULL(a.idfsTestName,'') <> ISNULL(b.idfsTestName,'')) OR (ISNULL(a.idfsTestCategory,'') <> ISNULL(b.idfsTestCategory,'')) OR 
						(ISNULL(a.idfsTestResult,'') <> ISNULL(b.idfsTestResult,'')) OR (ISNULL(a.idfsTestStatus,'') <> ISNULL(b.idfsTestStatus,'')) OR 
						(ISNULL(a.idfsDiagnosis,'') <> ISNULL(b.idfsDiagnosis,'')) OR (ISNULL(a.idfMaterial,'') <> ISNULL(b.idfMaterial,'')) OR 
						(ISNULL(a.idfBatchTest,'') <> ISNULL(b.idfBatchTest,'')) OR (ISNULL(a.idfObservation,'') <> ISNULL(b.idfObservation,'')) OR 
						(ISNULL(a.intTestNumber,'') <> ISNULL(b.intTestNumber,'')) OR (ISNULL(a.strNote,'') <> ISNULL(b.strNote,'')) OR 
						(ISNULL(a.intRowStatus,'') <> ISNULL(b.intRowStatus,'')) OR (ISNULL(a.datStartedDate,'') <> ISNULL(b.datStartedDate,'')) OR 
						(ISNULL(a.datConcludedDate,'') <> ISNULL(b.datConcludedDate,'')) OR (ISNULL(a.idfTestedByOffice,'') <> ISNULL(b.idfTestedByOffice,'')) OR 
						(ISNULL(a.idfTestedByPerson,'') <> ISNULL(b.idfTestedByPerson,'')) OR (ISNULL(a.idfResultEnteredByOffice,'') <> ISNULL(b.idfResultEnteredByOffice,'')) OR 
						(ISNULL(a.idfResultEnteredByPerson,'') <> ISNULL(b.idfResultEnteredByPerson,'')) OR (ISNULL(a.idfValidatedByOffice,'') <> ISNULL(b.idfValidatedByOffice,'')) OR 
						(ISNULL(a.idfValidatedByPerson,'') <> ISNULL(b.idfValidatedByPerson,'')) OR (ISNULL(a.blnReadOnly,'') <> ISNULL(b.blnReadOnly,'')) OR 
						(ISNULL(a.blnNonLaboratoryTest,'') <> ISNULL(b.blnNonLaboratoryTest,'')) OR (ISNULL(a.blnExternalTest,'') <> ISNULL(b.blnExternalTest,'')) OR 
						(ISNULL(a.idfPerformedByOffice,'') <> ISNULL(b.idfPerformedByOffice,'')) OR (ISNULL(a.datReceivedDate,'') <> ISNULL(b.datReceivedDate,'')) OR 
						(ISNULL(a.strContactPerson,'') <> ISNULL(b.strContactPerson,'')) OR (ISNULL(a.idfMonitoringSession,'') <> ISNULL(b.idfMonitoringSession,'')) OR 
						(ISNULL(a.idfVector,'') <> ISNULL(b.idfVector,'')) OR (ISNULL(a.idfHumanCase,'') <> ISNULL(b.idfHumanCase,'')) OR (ISNULL(a.idfVetCase,'') <> ISNULL(b.idfVetCase,''))
				)
				BEGIN
					INSERT INTO @SuppressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectTypeTests,@idfObjectTests, @idfObjectTestsTable, @idfDataAuditEventTests OUTPUT

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,49545430000000,@idfObjectTests,null,a.idfsTestName,b.idfsTestName 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfsTestName,'') <> ISNULL(b.idfsTestName,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,49545440000000,@idfObjectTests,null,a.idfsTestCategory,b.idfsTestCategory 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfsTestCategory,'') <> ISNULL(b.idfsTestCategory,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,80510000000,@idfObjectTests,null,a.idfsTestResult,b.idfsTestResult 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfsTestResult,'') <> ISNULL(b.idfsTestResult,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,4572510000000,@idfObjectTests,null,a.idfsTestStatus,b.idfsTestStatus 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfsTestStatus,'') <> ISNULL(b.idfsTestStatus,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,4572520000000,@idfObjectTests,null,a.idfsDiagnosis,b.idfsDiagnosis 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfsDiagnosis,'') <> ISNULL(b.idfsDiagnosis,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,4576430000000,@idfObjectTests,null,a.idfMaterial,b.idfMaterial 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfMaterial,'') <> ISNULL(b.idfMaterial,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,80470000000,@idfObjectTests,null,a.idfBatchTest,b.idfBatchTest 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfBatchTest,'') <> ISNULL(b.idfBatchTest,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,80500000000,@idfObjectTests,null,a.idfObservation,b.idfObservation 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfObservation,'') <> ISNULL(b.idfObservation,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,80540000000,@idfObjectTests,null,a.intTestNumber,b.intTestNumber 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.intTestNumber,'') <> ISNULL(b.intTestNumber,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,4572540000000,@idfObjectTests,null,a.strNote,b.strNote 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.strNote,'') <> ISNULL(b.strNote,''))

					--insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					--select @idfDataAuditEventTests,@idfObjectTestsTable,51586990000032,@idfObjectTests,null,a.intRowStatus,b.intRowStatus 
					--from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					--where (ISNULL(a.intRowStatus,'') <> ISNULL(b.intRowStatus,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,4578540000000,@idfObjectTests,null,a.datStartedDate,b.datStartedDate 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.datStartedDate,'') <> ISNULL(b.datStartedDate,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,4578550000000,@idfObjectTests,null,a.datConcludedDate,b.datConcludedDate 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.datConcludedDate,'') <> ISNULL(b.datConcludedDate,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,4578560000000,@idfObjectTests,null,a.idfTestedByOffice,b.idfTestedByOffice 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfTestedByOffice,'') <> ISNULL(b.idfTestedByOffice,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,4578570000000,@idfObjectTests,null,a.idfTestedByPerson,b.idfTestedByPerson 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfTestedByPerson,'') <> ISNULL(b.idfTestedByPerson,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,4578580000000,@idfObjectTests,null,a.idfResultEnteredByOffice,b.idfResultEnteredByOffice 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfResultEnteredByOffice,'') <> ISNULL(b.idfResultEnteredByOffice,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,4578590000000,@idfObjectTests,null,a.idfResultEnteredByPerson,b.idfResultEnteredByPerson 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfResultEnteredByPerson,'') <> ISNULL(b.idfResultEnteredByPerson,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,4578600000000,@idfObjectTests,null,a.idfValidatedByOffice,b.idfValidatedByOffice 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfValidatedByOffice,'') <> ISNULL(b.idfValidatedByOffice,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,4578610000000,@idfObjectTests,null,a.idfValidatedByPerson,b.idfValidatedByPerson 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfValidatedByPerson,'') <> ISNULL(b.idfValidatedByPerson,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,4578740000000,@idfObjectTests,null,a.blnReadOnly,b.blnReadOnly 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.blnReadOnly,'') <> ISNULL(b.blnReadOnly,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,4578760000000,@idfObjectTests,null,a.blnNonLaboratoryTest,b.blnNonLaboratoryTest 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.blnNonLaboratoryTest,'') <> ISNULL(b.blnNonLaboratoryTest,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,50815850000000,@idfObjectTests,null,a.blnExternalTest,b.blnExternalTest 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.blnExternalTest,'') <> ISNULL(b.blnExternalTest,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,50815860000000,@idfObjectTests,null,a.idfPerformedByOffice,b.idfPerformedByOffice 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfPerformedByOffice,'') <> ISNULL(b.idfPerformedByOffice,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,50815870000000,@idfObjectTests,null,a.datReceivedDate,b.datReceivedDate 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.datReceivedDate,'') <> ISNULL(b.datReceivedDate,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,50815880000000,@idfObjectTests,null,a.strContactPerson,b.strContactPerson 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.strContactPerson,'') <> ISNULL(b.strContactPerson,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,51586990000028,@idfObjectTests,null,a.idfMonitoringSession,b.idfMonitoringSession 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfMonitoringSession,'') <> ISNULL(b.idfMonitoringSession,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,51586990000031,@idfObjectTests,null,a.idfVector,b.idfVector 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfVector,'') <> ISNULL(b.idfVector,''))

					--insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					--select @idfDataAuditEventTests,@idfObjectTestsTable,51586790000001,@idfObjectTests,null,a.idfHumanCase,b.idfHumanCase 
					--from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					--where (ISNULL(a.idfHumanCase,'') <> ISNULL(b.idfHumanCase,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTests,@idfObjectTestsTable,51586990000030,@idfObjectTests,null,a.idfVetCase,b.idfVetCase 
					from @tlbTests_BeforeEdit a  inner join @tlbTests_AfterEdit b on a.idfTesting = b.idfTesting 
					where (ISNULL(a.idfVetCase,'') <> ISNULL(b.idfVetCase,''))
				END
			END
			--Data Audit - End

            UPDATE @TestsInterpretationParametersTemp
            SET TestID = @TestID
            WHERE TestID = @RowID

            DELETE FROM @TestsTemp
            WHERE TestID = @RowID;
        END;
    END

	BEGIN --Data Audit - No need.
    Declare @sampleCount int
    Set @sampleCount =
    (
        SELECT Count(*)
        FROM dbo.tlbMaterial
        WHERE intRowStatus = 0
                and idfHumanCase = @SurvivorDiseaseReportID
    )

    IF EXISTS
    (
        SELECT *
        FROM dbo.tlbHumanCase
        WHERE idfHumanCase = @SaveID
                AND idfsYNSpecimenCollected = 10100002
    )
    Begin
        UPDATE dbo.tlbMaterial
        SET intRowStatus = 1,
            AuditUpdateUser = @AuditUser
        WHERE idfHumanCase = @SaveID
    END
    ELSE IF EXISTS
    (
        SELECT *
        FROM dbo.tlbHumanCase
        WHERE idfHumanCase = @SaveID
                AND idfsYNSpecimenCollected = 10100003
    )
    BEGIN
        UPDATE dbo.tlbHumanCase
        SET idfsNotCollectedReason = NULL,
            AuditUpdateUser = @AuditUser
        WHERE idfHumanCase = @SaveID;

        UPDATE dbo.tlbMaterial
        SET intRowStatus = 1,
            AuditUpdateUser = @AuditUser
        WHERE idfHumanCase = @SaveID;
    END
    ELSE IF EXISTS
    (
        SELECT *
        FROM dbo.tlbHumanCase
        WHERE idfHumanCase = @SaveID
                AND idfsYNSpecimenCollected = 10100001
    )
    BEGIN
        UPDATE dbo.tlbHumanCase
        SET idfsNotCollectedReason = NULL,
            AuditUpdateUser = @AuditUser
        WHERE idfHumanCase = @SaveID
        IF (@sampleCount = 0)
        BEGIN
            UPDATE dbo.tlbHumanCase
            SET idfsYNSpecimenCollected = NULL,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @SaveID
        END
    END
	END
		 
    --Set TestsInterpretation for this idfHumanCase
    IF @TestsInterpretationParameters IS NOT NULL
    BEGIN 
		--Data Audit - TestsInterpretation - Start
		-- Variables
		DECLARE @idfsObjectTypeTestInterpretations bigint = 10017079;
		DECLARE @idfObjectTestInterpretations bigint = NULL;
		DECLARE @idfObjectTestInterpretationsTable bigint = 75750000000;
		DECLARE @tlbTestInterpretations_BeforeEdit TABLE
		(
			idfTestValidation BIGINT,
			idfsDiagnosis BIGINT,
			idfsInterpretedStatus BIGINT,
			idfValidatedByOffice BIGINT,
			idfValidatedByPerson BIGINT,
			idfInterpretedByOffice BIGINT,
			idfInterpretedByPerson BIGINT,
			idfTesting BIGINT,
			blnValidateStatus BIT,
			blnCaseCreated BIT,
			strValidateComment NVARCHAR(200),
			strInterpretedComment NVARCHAR(200),
			datValidationDate DATETIME,
			datInterpretationDate DATETIME,
			intRowStatus INT,
			blnReadOnly BIT 
		)
		DECLARE @tlbTestInterpretations_AfterEdit TABLE
		(
			idfTestValidation BIGINT,
			idfsDiagnosis BIGINT,
			idfsInterpretedStatus BIGINT,
			idfValidatedByOffice BIGINT,
			idfValidatedByPerson BIGINT,
			idfInterpretedByOffice BIGINT,
			idfInterpretedByPerson BIGINT,
			idfTesting BIGINT,
			blnValidateStatus BIT,
			blnCaseCreated BIT,
			strValidateComment NVARCHAR(200),
			strInterpretedComment NVARCHAR(200),
			datValidationDate DATETIME,
			datInterpretationDate DATETIME,
			intRowStatus INT,
			blnReadOnly BIT
		)
		DECLARE @idfDataAuditEventTestInterpretations bigint= NULL; 
		--Data Audit - End
	
        WHILE EXISTS (SELECT * FROM @TestsInterpretationParametersTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestInterpretationID,
                @TestInterpretationID = TestInterpretationID,
                @DiseaseID = DiseaseID,
                @InterpretedStatusTypeID = InterpretedStatusTypeID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @InterpretedByOrganizationID = InterpretedByOrganizationID,
                @InterpretedByPersonID = InterpretedByPersonID,
                @TestID = TestID,
                @ValidatedStatusIndicator = ValidatedStatusIndicator,
                @ReportSessionCreatedIndicator = ReportSessionCreatedIndicator,
                @ValidatedComment = ValidatedComment,
                @InterpretedComment = InterpretedComment,
                @ValidatedDate = ValidatedDate,
                @InterpretedDate = InterpretedDate,
                @RowStatus = RowStatus,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @RowAction = RowAction
            FROM @TestsInterpretationParametersTemp;
				
			--Data Audit - Start
			--Find Insert/Update/Delete
			IF @RowAction = 1
			BEGIN
				set @idfsDataAuditEventType = 10016001; --Insert
			END
			ELSE IF @RowAction <> 1 and @RowStatus = 1
			BEGIN  
				set @idfsDataAuditEventType = 10016002; --Delete
			END
			ELSE 
			BEGIN 
				set @idfsDataAuditEventType = 10016003; --Update
			END

			--Get values before edit
			IF @idfsDataAuditEventType = 10016003
			BEGIN
				insert into @tlbTestInterpretations_BeforeEdit
				(idfTestValidation,idfsDiagnosis,idfsInterpretedStatus,idfValidatedByOffice,idfValidatedByPerson,idfInterpretedByOffice,idfInterpretedByPerson,idfTesting
				,blnValidateStatus,blnCaseCreated,strValidateComment,strInterpretedComment,datValidationDate,datInterpretationDate,intRowStatus,blnReadOnly)
				select idfTestValidation,idfsDiagnosis,idfsInterpretedStatus,idfValidatedByOffice,idfValidatedByPerson,idfInterpretedByOffice,idfInterpretedByPerson,idfTesting
				,blnValidateStatus,blnCaseCreated,strValidateComment,strInterpretedComment,datValidationDate,datInterpretationDate,intRowStatus,blnReadOnly
				from tlbTestValidation 
				where idfTestValidation = @TestInterpretationID
			END
			--Data Audit - End

            INSERT INTO @SuppressSelect
            EXEC dbo.USSP_GBL_TEST_INTERPRETATION_SET @AuditUserName = @AuditUser,
                                                        @TestInterpretationID = @TestInterpretationID OUTPUT,
                                                        @DiseaseID = @DiseaseID,
                                                        @InterpretedStatusTypeID = @InterpretedStatusTypeID,
                                                        @ValidatedByOrganizationID = @ValidatedByOrganizationID,
                                                        @ValidatedByPersonID = @ValidatedByPersonID,
                                                        @InterpretedByOrganizationID = @InterpretedByOrganizationID,
                                                        @InterpretedByPersonID = @InterpretedByPersonID,
                                                        @TestID = @TestID,
                                                        @ValidateStatusIndicator = @ValidatedStatusIndicator,
                                                        @ReportSessionCreatedIndicator = @ReportSessionCreatedIndicator,
                                                        @ValidationComment = @ValidatedComment,
                                                        @InterpretationComment = @InterpretedComment,
                                                        @ValidationDate = @ValidatedDate,
                                                        @InterpretationDate = @InterpretedDate,
                                                        @RowStatus = @RowStatus,
                                                        @ReadOnlyIndicator = @ReadOnlyIndicator,
                                                        @RowAction = @RowAction;

			--Data Audit - Start
			--Get values after edit
			IF @idfsDataAuditEventType = 10016003
			BEGIN
				insert into @tlbTestInterpretations_AfterEdit
				(idfTestValidation,idfsDiagnosis,idfsInterpretedStatus,idfValidatedByOffice,idfValidatedByPerson,idfInterpretedByOffice,idfInterpretedByPerson,idfTesting
				,blnValidateStatus,blnCaseCreated,strValidateComment,strInterpretedComment,datValidationDate,datInterpretationDate,intRowStatus,blnReadOnly)
				select idfTestValidation,idfsDiagnosis,idfsInterpretedStatus,idfValidatedByOffice,idfValidatedByPerson,idfInterpretedByOffice,idfInterpretedByPerson,idfTesting
				,blnValidateStatus,blnCaseCreated,strValidateComment,strInterpretedComment,datValidationDate,datInterpretationDate,intRowStatus,blnReadOnly
				from tlbTestValidation 
				where idfTestValidation = @TestInterpretationID
			END 

			SET @idfObjectTestInterpretations = @TestID 
			IF @idfsDataAuditEventType =10016001
			Begin
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectTypeTestInterpretations,@idfObjectTestInterpretations, 
					@idfObjectTestInterpretationsTable, @idfDataAuditEventTestInterpretations OUTPUT

				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
					values ( @idfDataAuditEventTestInterpretations, @idfObjectTestInterpretationsTable, @idfObjectTestInterpretations)
			END
			ELSE IF @idfsDataAuditEventType =10016002
			BEGIN
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectTypeTestInterpretations,@idfObjectTestInterpretations
					, @idfObjectTestInterpretationsTable, @idfDataAuditEventTestInterpretations OUTPUT

				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject) 
				VALUES (@idfDataAuditEventTestInterpretations, @idfObjectTestInterpretationsTable, @idfObjectTestInterpretations)
			END
			ELSE IF @idfsDataAuditEventType =10016003
			BEGIN
				IF EXISTS 
				(
					select *
					from @tlbTestInterpretations_BeforeEdit a  inner join @tlbTestInterpretations_AfterEdit b on a.idfTestValidation = b.idfTestValidation  
					where (ISNULL(a.idfsDiagnosis,'') <> ISNULL(b.idfsDiagnosis,'')) OR (ISNULL(a.idfsInterpretedStatus,'') <> ISNULL(b.idfsInterpretedStatus,'')) OR 
						(ISNULL(a.idfValidatedByOffice,'') <> ISNULL(b.idfValidatedByOffice,'')) OR (ISNULL(a.idfValidatedByPerson,'') <> ISNULL(b.idfValidatedByPerson,'')) OR 
						(ISNULL(a.idfInterpretedByOffice,'') <> ISNULL(b.idfInterpretedByOffice,'')) OR (ISNULL(a.idfInterpretedByPerson,'') <> ISNULL(b.idfInterpretedByPerson,'')) OR 
						(ISNULL(a.idfTesting,'') <> ISNULL(b.idfTesting,'')) OR (ISNULL(a.blnValidateStatus,'') <> ISNULL(b.blnValidateStatus,'')) OR 
						(ISNULL(a.blnCaseCreated,'') <> ISNULL(b.blnCaseCreated,'')) OR (ISNULL(a.strValidateComment,'') <> ISNULL(b.strValidateComment,'')) OR 
						(ISNULL(a.strInterpretedComment,'') <> ISNULL(b.strInterpretedComment,'')) OR (ISNULL(a.datValidationDate,'') <> ISNULL(b.datValidationDate,'')) OR 
						(ISNULL(a.datInterpretationDate,'') <> ISNULL(b.datInterpretationDate,'')) OR (ISNULL(a.intRowStatus,'') <> ISNULL(b.intRowStatus,'')) OR 
						(ISNULL(a.blnReadOnly,'') <> ISNULL(b.blnReadOnly,''))
				)
				BEGIN
					INSERT INTO @SuppressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectTypeTestInterpretations,@idfObjectTestInterpretations, 
						@idfObjectTestInterpretationsTable, @idfDataAuditEventTestInterpretations OUTPUT

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTestInterpretations,@idfObjectTestInterpretationsTable,80580000000,@idfObjectTestInterpretations,null,a.idfsDiagnosis,b.idfsDiagnosis 
					from @tlbTestInterpretations_BeforeEdit a  inner join @tlbTestInterpretations_AfterEdit b on a.idfTestValidation = b.idfTestValidation 
					where (ISNULL(a.idfsDiagnosis,'') <> ISNULL(b.idfsDiagnosis,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTestInterpretations,@idfObjectTestInterpretationsTable,80590000000,@idfObjectTestInterpretations,null,a.idfsInterpretedStatus,b.idfsInterpretedStatus 
					from @tlbTestInterpretations_BeforeEdit a  inner join @tlbTestInterpretations_AfterEdit b on a.idfTestValidation = b.idfTestValidation 
					where (ISNULL(a.idfsInterpretedStatus,'') <> ISNULL(b.idfsInterpretedStatus,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTestInterpretations,@idfObjectTestInterpretationsTable,80610000000,@idfObjectTestInterpretations,null,a.idfValidatedByOffice,b.idfValidatedByOffice 
					from @tlbTestInterpretations_BeforeEdit a  inner join @tlbTestInterpretations_AfterEdit b on a.idfTestValidation = b.idfTestValidation 
					where (ISNULL(a.idfValidatedByOffice,'') <> ISNULL(b.idfValidatedByOffice,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTestInterpretations,@idfObjectTestInterpretationsTable,80620000000,@idfObjectTestInterpretations,null,a.idfValidatedByPerson,b.idfValidatedByPerson 
					from @tlbTestInterpretations_BeforeEdit a  inner join @tlbTestInterpretations_AfterEdit b on a.idfTestValidation = b.idfTestValidation 
					where (ISNULL(a.idfValidatedByPerson,'') <> ISNULL(b.idfValidatedByPerson,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTestInterpretations,@idfObjectTestInterpretationsTable,80560000000,@idfObjectTestInterpretations,null,a.idfInterpretedByOffice,b.idfInterpretedByOffice 
					from @tlbTestInterpretations_BeforeEdit a  inner join @tlbTestInterpretations_AfterEdit b on a.idfTestValidation = b.idfTestValidation 
					where (ISNULL(a.idfInterpretedByOffice,'') <> ISNULL(b.idfInterpretedByOffice,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTestInterpretations,@idfObjectTestInterpretationsTable,80570000000,@idfObjectTestInterpretations,null,a.idfInterpretedByPerson,b.idfInterpretedByPerson 
					from @tlbTestInterpretations_BeforeEdit a  inner join @tlbTestInterpretations_AfterEdit b on a.idfTestValidation = b.idfTestValidation 
					where (ISNULL(a.idfInterpretedByPerson,'') <> ISNULL(b.idfInterpretedByPerson,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTestInterpretations,@idfObjectTestInterpretationsTable,80600000000,@idfObjectTestInterpretations,null,a.idfTesting,b.idfTesting 
					from @tlbTestInterpretations_BeforeEdit a  inner join @tlbTestInterpretations_AfterEdit b on a.idfTestValidation = b.idfTestValidation 
					where (ISNULL(a.idfTesting,'') <> ISNULL(b.idfTesting,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTestInterpretations,@idfObjectTestInterpretationsTable,80550000000,@idfObjectTestInterpretations,null,a.blnValidateStatus,b.blnValidateStatus 
					from @tlbTestInterpretations_BeforeEdit a  inner join @tlbTestInterpretations_AfterEdit b on a.idfTestValidation = b.idfTestValidation 
					where (ISNULL(a.blnValidateStatus,'') <> ISNULL(b.blnValidateStatus,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTestInterpretations,@idfObjectTestInterpretationsTable,4572560000000,@idfObjectTestInterpretations,null,a.blnCaseCreated,b.blnCaseCreated 
					from @tlbTestInterpretations_BeforeEdit a  inner join @tlbTestInterpretations_AfterEdit b on a.idfTestValidation = b.idfTestValidation 
					where (ISNULL(a.blnCaseCreated,'') <> ISNULL(b.blnCaseCreated,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTestInterpretations,@idfObjectTestInterpretationsTable,80640000000,@idfObjectTestInterpretations,null,a.strValidateComment,b.strValidateComment 
					from @tlbTestInterpretations_BeforeEdit a  inner join @tlbTestInterpretations_AfterEdit b on a.idfTestValidation = b.idfTestValidation 
					where (ISNULL(a.strValidateComment,'') <> ISNULL(b.strValidateComment,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTestInterpretations,@idfObjectTestInterpretationsTable,80630000000,@idfObjectTestInterpretations,null,a.strInterpretedComment,b.strInterpretedComment 
					from @tlbTestInterpretations_BeforeEdit a  inner join @tlbTestInterpretations_AfterEdit b on a.idfTestValidation = b.idfTestValidation 
					where (ISNULL(a.strInterpretedComment,'') <> ISNULL(b.strInterpretedComment,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTestInterpretations,@idfObjectTestInterpretationsTable,4572570000000,@idfObjectTestInterpretations,null,a.datValidationDate,b.datValidationDate 
					from @tlbTestInterpretations_BeforeEdit a  inner join @tlbTestInterpretations_AfterEdit b on a.idfTestValidation = b.idfTestValidation 
					where (ISNULL(a.datValidationDate,'') <> ISNULL(b.datValidationDate,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTestInterpretations,@idfObjectTestInterpretationsTable,4572580000000,@idfObjectTestInterpretations,null,a.datInterpretationDate,b.datInterpretationDate 
					from @tlbTestInterpretations_BeforeEdit a  inner join @tlbTestInterpretations_AfterEdit b on a.idfTestValidation = b.idfTestValidation 
					where (ISNULL(a.datInterpretationDate,'') <> ISNULL(b.datInterpretationDate,''))

					insert into dbo.tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfColumn,idfObject, idfObjectDetail,strOldValue, strNewValue)
					select @idfDataAuditEventTestInterpretations,@idfObjectTestInterpretationsTable,6617410000000,@idfObjectTestInterpretations,null,a.blnReadOnly,b.blnReadOnly 
					from @tlbTestInterpretations_BeforeEdit a  inner join @tlbTestInterpretations_AfterEdit b on a.idfTestValidation = b.idfTestValidation 
					where (ISNULL(a.blnReadOnly,'') <> ISNULL(b.blnReadOnly,''))
				END
			END
			--Data Audit - End

            DELETE FROM @TestsInterpretationParametersTemp
            WHERE TestInterpretationID = @RowID;
        END;
    END

	--Data Audit - No need.
    WHILE EXISTS (SELECT * FROM @EventsTemp)
    BEGIN
        SELECT TOP 1
            @EventId = EventId,
            @EventTypeId = EventTypeId,
            @EventUserId = UserId,
            @EventObjectId = ObjectId,
            @EventSiteId = SiteId,
            @EventDiseaseId = DiseaseId,
            @EventLocationId = LocationId,
            @EventInformationString = InformationString,
            @EventLoginSiteId = LoginSiteId
        FROM @EventsTemp;

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                        @EventTypeId,
                                        @EventUserId,
                                        @EventObjectId,
                                        @EventDiseaseId,
                                        @EventSiteId,
                                        @EventInformationString,
                                        @EventLoginSiteId,
                                        @EventLocationId,
                                        @AuditUser;

        DELETE FROM @EventsTemp
        WHERE EventId = @EventId;
    END;

	BEGIN --Data Audit - No need. 
    --------set AntiviralTherapies for this idfHumanCase
    IF @AntiviralTherapiesParameters IS NOT NULL
    BEGIN

        EXEC dbo.USSP_HUMAN_DISEASE_ANTIVIRALTHERAPIES_SET @idfHumanCase = @SaveID,
                                                            @AntiviralTherapiesParameters = @AntiviralTherapiesParameters,
                                                            @outbreakCall = 0,
                                                            @User = @AuditUser
    END
    --------set Vaccinations for this idfHumanCase
    IF @VaccinationsParameters IS NOT NULL
    BEGIN
        EXEC dbo.USSP_HUMAN_DISEASE_VACCINATIONS_DEDUP_SET @idfHumanCase = @SaveID,
                                                            @VaccinationsParameters = @VaccinationsParameters,
                                                            @outbreakCall = 0,
                                                            @User = @AuditUser
    END
	--------set Contacts for this idfHumanCase
    IF @ContactsParameters IS NOT NULL
    BEGIN
        EXEC dbo.USSP_GBL_CONTACT_DEDUP_SET @Contacts = @ContactsParameters,
                                            @SiteID = @CurrentSiteID,
                                            @AuditUSerName = @AuditUser,
                                            @idfHumanCase = @SaveID
    END
    ------ UPDATE tlbHuman IF datDateofDeath is provided.
    IF @datDateofDeath IS NOT NULL
    BEGIN
        UPDATE dbo.tlbHuman
        SET datDateofDeath = @datDateofDeath,
            AuditUpdateUser = @AuditUser
        WHERE idfHuman = @idfHuman
    END
    ----------------------------------------------------------------------------------------------------------------
    ------ delete the Superseded disease report
    BEGIN
        PRINT 'Delete superseded record'

        INSERT INTO @SuppressSelect
        (
            ReturnCode,
            ReturnMessage
        )
        EXEC dbo.USP_HUM_HUMAN_DISEASE_DEL @idfHumanCase = @SupersededDiseaseReportID,
				@idfUserID = @EventUserId,
				@idfSiteId = @idfsSite,
				@DeduplicationIndicator = 1 -- deduplication
    END;
    ----------------------------------------------------------------------------------------------------------------
    ------ remove tests associated with samples that aren't associated with survivor disease report
    UPDATE dbo.tlbTesting
    SET intRowStatus = 1,
        AuditUpdateUser = @AuditUser,
        AuditUpdateDTM = GETDATE()
    WHERE idfMaterial IN (
                                SELECT idfMaterial
                                FROM dbo.tlbMaterial
                                WHERE (
                                        idfHumanCase = @SaveID
                                        OR idfHumanCase = @DeleteID
                                    )
                                    AND idfMaterial NOT IN (
                                                                SELECT SampleID FROM @SamplesTemp2
                                                            )
                            )
    ----------------------------------------------------------------------------------------------------------------
    ------ remove test interpretations associated with samples that aren't associated with survivor disease report
    UPDATE dbo.tlbTestValidation
    SET intRowStatus = 1,
        AuditUpdateUser = @AuditUser,
        AuditUpdateDTM = GETDATE()
    WHERE idfTesting IN (
                            SELECT idfTesting
                            FROM dbo.tlbTesting
                            WHERE idfMaterial IN (
                                                        SELECT idfMaterial
                                                        FROM dbo.tlbMaterial
                                                        WHERE (
                                                                idfHumanCase = @SaveID
                                                                OR idfHumanCase = @DeleteID
                                                            )
                                                            AND idfMaterial NOT IN (
                                                                                        SELECT SampleID FROM @SamplesTemp2
                                                                                    )
                                                    )
                        )
    ----------------------------------------------------------------------------------------------------------------
    ------ remove penside tests associated with samples that aren't associated with survivor disease report
    UPDATE dbo.tlbPensideTest
    SET intRowStatus = 1,
        AuditUpdateUser = @AuditUser,
        AuditUpdateDTM = GETDATE()
    WHERE idfMaterial IN (
                                SELECT idfMaterial
                                FROM dbo.tlbMaterial
                                WHERE (
                                        idfHumanCase = @SaveID
                                        OR idfHumanCase = @DeleteID
                                    )
                                    AND idfMaterial NOT IN (
                                                                SELECT SampleID FROM @SamplesTemp2
                                                            )
                            )
    ------ disease report samples that are no longer needed
    UPDATE dbo.tlbMaterial
    SET idfHumanCase = NULL,
        AuditUpdateUser = @AuditUser,
        AuditUpdateDTM = GETDATE()
    WHERE (
                idfHumanCase = @SaveID
                OR idfHumanCase = @DeleteID
            )
            AND idfMaterial NOT IN (
                                        SELECT SampleID FROM @SamplesTemp2
                                    )
    ------ remove AntiMicrobialTherapy records from superseded report
    UPDATE dbo.tlbAntimicrobialTherapy
    SET intRowStatus = 1,
        AuditUpdateUser = @AuditUser,
        AuditUpdateDTM = GETDATE()
    WHERE (
                idfHumanCase = @SaveID
                OR idfHumanCase = @DeleteID
            )
            AND idfAntimicrobialTherapy NOT IN (
                                                    SELECT idfAntimicrobialTherapy FROM @AntiViralTemp
                                                )
    ------ remove vaccination records from superseded report
    UPDATE dbo.HumanDiseaseReportVaccination
    SET intRowStatus = 1,
        AuditUpdateUser = @AuditUser,
        AuditUpdateDTM = GETDATE()
    WHERE (
                idfHumanCase = @SaveID
                OR idfHumanCase = @DeleteID
            )
            AND humanDiseaseReportVaccinationUID NOT IN (
                                                            SELECT humanDiseaseReportVaccinationUID FROM @VaccinationsTemp
                                                        )
    ------ remove vaccination records from superseded report
    UPDATE dbo.tlbContactedCasePerson
    SET intRowStatus = 1,
        AuditUpdateUser = @AuditUser,
        AuditUpdateDTM = GETDATE()
    WHERE (
                idfHumanCase = @SaveID
                OR idfHumanCase = @DeleteID
            )
            AND idfContactedCasePerson NOT IN (
                                                SELECT ContactedCasePersonId FROM @ContactsTemp
                                            )
		
	END

    IF @@TRANCOUNT > 0
        COMMIT TRAN

    SELECT @ReturnCode AS ReturnCode,
            @ReturnMsg AS ReturnMessage,
            @SurvivorDiseaseReportID AS SurvivorDiseaseReportID,
            @strHumanCaseId AS strHumanCaseID,
            @HumanID AS idfHuman

END TRY
BEGIN CATCH
    SELECT @ReturnCode AS ReturnCode,
            @ReturnMsg AS ReturnMessage,
            @SurvivorDiseaseReportID AS SurvivorDiseaseReportID,
            @strHumanCaseId AS strHumanCaseID,
            @HumanID AS idfHuman
    IF @@Trancount > 0
        ROLLBACK TRAN;

    THROW;

END CATCH
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_DEPARTMENT_SET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_DEPARTMENT_SET
--
-- Description: Adds or updates a department in an organization.
-- Author: Ricky Moss
-- 
-- Change Log:
-- Name 				Date       Description
-- -------------------- ---------- ---------------------------------------------------------------
-- Ricky Moss			12/27/2019 Initial Release
-- Ricky Moss			01/03/2020 Refactored to check Department Name existence
-- Ann Xiong		    11/20/2020 Modified to insert NationalName in trtStringNameTranslation
-- Mark Wilson			08/10/2021 Updated to use E7 artifacts
-- Stephen Long         09/01/2021 Added order and row status parameters and added organization 
--                                 ID to the duplicate department check.  Duplicate check will 
--                                 be performed on both insert and update.
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_ADMIN_Department_Set]
		@LanguageID = N'en-US',
		@DepartmentID = NULL,
		@OrganizationID = 48120000000,
		@DefaultName = N'DEP199',
		@NationalName = N'DEP1100',
		@CountryID = NULL,
		@UserName = N'rykermase',
		@RowAction = NULL - values are R for read, I for insert, U for update and D for delete.

SELECT	'Return Value' = @return_value

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_DEPARTMENT_SET] (
	@LanguageID NVARCHAR(50)
	,@DepartmentID BIGINT = NULL
	,@DefaultName NVARCHAR(200)
	,@NationalName NVARCHAR(200)
	,@OrganizationID BIGINT
	,@DepartmentNameTypeID BIGINT
	,@Order INT = 0
	,@UserName VARCHAR(100) = NULL
	,@RowStatus INT = 0
	)
AS
BEGIN
	DECLARE @ReturnMessage VARCHAR(MAX) = 'SUCCESS';
	DECLARE @ReturnCode BIGINT = 0;

	--Data Audit--
	declare @idfUserId BIGINT = NULL;
	declare @idfSiteId BIGINT = NULL;
	declare @idfsDataAuditEventType bigint = NULL;
	declare @idfsObjectType bigint = 10017016;                         -- Department
	declare @idfObject bigint = @DepartmentID;
	declare @idfObjectTable_tlbDepartment bigint = 50815890000000;
	declare @idfDataAuditEvent bigint= NULL;
	declare @idfObjectTable_trtBaseReference bigint = 75820000000;
	declare @idfObjectTable_trtStringNameTranslation bigint = 75990000000;

    DECLARE @tlbDepartment_BeforeEdit TABLE
    (
        DepartmentID BIGINT,
        DepartmentNameBaseReferenceID BIGINT,
        OrganizationID BIGINT
    );
    DECLARE @tlbDepartment_AfterEdit TABLE
    (
        DepartmentID BIGINT,
        DepartmentNameBaseReferenceID BIGINT,
        OrganizationID BIGINT
    );

	-- Get and Set UserId and SiteId
	select @idfUserId =userInfo.UserId, @idfSiteId=UserInfo.SiteId from dbo.FN_UserSiteInformation(@UserName) userInfo

	--Data Audit--

	BEGIN TRY
		IF @RowStatus = 1 -- Soft Delete
		BEGIN
			IF @DepartmentNameTypeID IS NULL
			BEGIN
				SELECT @DepartmentNameTypeID = idfsDepartmentName
				FROM dbo.tlbDepartment
				WHERE idfDepartment = @DepartmentID;
			END

			--Data Audit

			-- tauDataAuditEvent Event Type - Delete
			set @idfsDataAuditEventType =10016002;

			-- insert record into tauDataAuditEvent
			EXEC USSP_GBL_DataAuditEvent_GET @idfUserID,@idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbDepartment, @idfDataAuditEvent OUTPUT

			--Data Audit--

			UPDATE dbo.tlbDepartment
			SET intRowStatus = @RowStatus
				,AuditUpdateDTM = GETDATE()
				,AuditUpdateUser = @UserName
			WHERE idfDepartment = @DepartmentID;

            -- Data audit
			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
				SELECT @idfDataAuditEvent, @idfObjectTable_tlbDepartment, @idfObject
            -- End data audit

			UPDATE dbo.trtBaseReference
			SET intRowStatus = @RowStatus
			WHERE idfsBaseReference = @DepartmentNameTypeID
				AND intRowStatus = 0;

            -- Data audit
			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
				SELECT @idfDataAuditEvent, @idfObjectTable_trtBaseReference, @DepartmentNameTypeID
            -- End data audit

			UPDATE dbo.trtStringNameTranslation
			SET intRowStatus = @RowStatus
			WHERE idfsBaseReference = @DepartmentNameTypeID;

            -- Data audit
			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
				SELECT @idfDataAuditEvent, @idfObjectTable_trtStringNameTranslation, @DepartmentNameTypeID
            -- End data audit
		END
		ELSE
		BEGIN
			IF (
					SELECT COUNT(b.idfsReference)
					FROM dbo.FN_GBL_ReferenceRepair_GET(@LanguageID, 19000164) b
					INNER JOIN dbo.tlbDepartment d ON d.idfsDepartmentName = b.idfsReference
					WHERE b.strDefault = @DefaultName
						AND d.intRowStatus = 0
						AND d.idfOrganization = @OrganizationID
						AND ((d.idfDepartment <> @DepartmentID AND @DepartmentID IS NOT NULL AND @DepartmentID > 0) --Update
						OR (@DepartmentID IS NULL OR @DepartmentID < 0)) --Insert
					) > 0
			BEGIN
				SELECT @ReturnMessage = 'DOES EXIST';
			END

			IF @ReturnMessage <> 'DOES EXIST'
			BEGIN
				IF @DepartmentID IS NULL
					OR @DepartmentID < 0
				BEGIN
					IF (
							UPPER(@LanguageID) = 'EN-US'
							AND ISNULL(@DefaultName, N'') = N''
							)
					BEGIN
						SET @DefaultName = @NationalName;
					END

					EXECUTE dbo.USSP_GBL_BaseReference_SET @DepartmentNameTypeID OUTPUT
						,19000164
						,@LanguageID
						,@DefaultName
						,@NationalName
						,0
						,@Order
						,0;

					EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbDepartment'
						,@DepartmentID OUTPUT;

					INSERT INTO dbo.tlbDepartment (
						idfDepartment
						,idfsDepartmentName
						,idfOrganization
						,strReservedAttribute
						,intRowStatus
						,rowguid
						,SourceSystemNameID
						,SourceSystemKeyValue
						,AuditCreateUser
						,AuditCreateDTM
						,AuditUpdateUser
						,AuditUpdateDTM
						)
					VALUES (
						@DepartmentID
						,@DepartmentNameTypeID
						,@OrganizationID
						,dbo.FN_GBL_DATACHANGE_INFO(@UserName)
						,0
						,NEWID()
						,10519001
						,N'[{"idfDepartment":' + CAST(@DepartmentID AS NVARCHAR(300)) + '}]'
						,@UserName
						,GETDATE()
						,@UserName
						,GETDATE()
						);

					--Data Audit--
					-- tauDataAuditEvent Event Type - Create 
					set @idfsDataAuditEventType =10016001;
					-- insert record into tauDataAuditEvent - 
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@DepartmentID, @idfObjectTable_tlbDepartment, @idfDataAuditEvent OUTPUT

					INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject )
						values ( @idfDataAuditEvent, @idfObjectTable_tlbDepartment, @DepartmentID)
					--Data Audit--

				END
				ELSE
				BEGIN
					SELECT @DepartmentNameTypeID = (
							SELECT idfsDepartmentName
							FROM dbo.tlbDepartment
							WHERE idfDepartment = @DepartmentID
							);

					EXECUTE dbo.USSP_GBL_BaseReference_SET @DepartmentNameTypeID
						,19000164
						,@LanguageID
						,@DefaultName
						,@NationalName
						,0
						,@Order
						,0;

                    -- Data audit
                    INSERT INTO @tlbDepartment_BeforeEdit
                    (
                        DepartmentID,
                        DepartmentNameBaseReferenceID,
                        OrganizationID
                    )
                    SELECT idfDepartment,
                           idfsDepartmentName,
                           idfOrganization
                    FROM dbo.tlbDepartment
                    WHERE idfDepartment = @DepartmentID;
                    -- End data audit

					UPDATE dbo.tlbDepartment
					SET idfsDepartmentName = @DepartmentNameTypeID
						,strReservedAttribute = dbo.FN_GBL_DATACHANGE_INFO(@UserName)
						,AuditUpdateUser = @UserName
						,AuditUpdateDTM = GETDATE()
					WHERE idfDepartment = @DepartmentID;

                    -- Data audit
                    INSERT INTO @tlbDepartment_AfterEdit
                    (
                        DepartmentID,
                        DepartmentNameBaseReferenceID,
                        OrganizationID
                    )
                    SELECT idfDepartment,
                           idfsDepartmentName,
                           idfOrganization
                    FROM dbo.tlbDepartment
                    WHERE idfDepartment = @DepartmentID;

			        --  tauDataAuditEvent  Event Type- Edit 
			        set @idfsDataAuditEventType =10016003;
			        -- insert record into tauDataAuditEvent - 
			        EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbDepartment, @idfDataAuditEvent OUTPUT

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue
                    )
                    SELECT @idfDataAuditEvent,
                           @idfObjectTable_tlbDepartment,
                           50815910000000,
                           a.DepartmentID,
                           NULL,
                           b.DepartmentNameBaseReferenceID,
                           a.DepartmentNameBaseReferenceID
                    FROM @tlbDepartment_AfterEdit AS a
                        FULL JOIN @tlbDepartment_BeforeEdit AS b
                            ON a.DepartmentID = b.DepartmentID
                    WHERE (a.DepartmentNameBaseReferenceID <> b.DepartmentNameBaseReferenceID)
                          OR (
                                 a.DepartmentNameBaseReferenceID IS NOT NULL
                                 AND b.DepartmentNameBaseReferenceID IS NULL
                             )
                          OR (
                                 a.DepartmentNameBaseReferenceID IS NULL
                                 AND b.DepartmentNameBaseReferenceID IS NOT NULL
                             );
                    -- End data audit
				END
			END
		END;

		SELECT @ReturnCode ReturnCode
			,@ReturnMessage ReturnMessage
			,@DepartmentID KeyId
			,'DepartmentID' KeyName
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK;

		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_DEPARTMENTS_SET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_DEPARTMENTS_SET
--
-- Description: Adds or updates a department in an organization.
--
-- Author: Ricky Moss
-- 
-- Change Log:
-- Name 				Date       Description
-- -------------------- ---------- ---------------------------------------------------------------
-- Stephen Long		    12/13/2022 Initial release for data auditing for SAUC30 and 31.
-- Ann Xiong		02/17/2023 Found and fix a few issues when data audit Soft Delete
--
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_ADMIN_DEPARTMENTS_SET]
		@LanguageID = N'en-US',
		@DepartmentID = NULL,
		@OrganizationID = 48120000000,
		@DefaultName = N'DEP199',
		@NationalName = N'DEP1100',
		@DepartmentNameTypeID = NULL,
		@AuditUserName = N'rykermase',
		@DataAuditEventID = NULL, 
		@EIDSSObjectID = NULL, 
		@RowAction = NULL - values are R for read, I for insert, U for update and D for delete.

SELECT	'Return Value' = @return_value
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_DEPARTMENTS_SET]
(
    @LanguageID NVARCHAR(50),
    @DepartmentID BIGINT = NULL,
    @DefaultName NVARCHAR(200),
    @NationalName NVARCHAR(200),
    @OrganizationID BIGINT,
    @DepartmentNameTypeID BIGINT,
    @Order INT = 0,
    @AuditUserName NVARCHAR(200) = NULL,
    @DataAuditEventID BIGINT = NULL,
    @EIDSSObjectID NVARCHAR(200),
    @RowStatus INT = 0
)
AS
BEGIN
    DECLARE @ReturnMessage VARCHAR(MAX) = 'SUCCESS',
            @ReturnCode INT = 0,
                                                                      -- Data audit
            @AuditUserID BIGINT = NULL,
            @AuditSiteID BIGINT = NULL,
            @CustomizationPackageID BIGINT,
            @ObjectTypeID BIGINT = 10017016,                          -- Department
            @ObjectID BIGINT = @DepartmentID,
            @ObjectTableID BIGINT = 50815890000000,                   -- tlbDepartment
            @ObjectBaseReferenceTableID BIGINT = 75820000000,         -- trtBaseReference
            @ObjectStringNameTranslationTableID BIGINT = 75990000000; -- trtStringNameTranslation

    DECLARE @DepartmentAfterEdit TABLE
    (
        DepartmentID BIGINT,
        DepartmentNameBaseReferenceID BIGINT,
        OrganizationID BIGINT
    );
    DECLARE @DepartmentBeforeEdit TABLE
    (
        DepartmentID BIGINT,
        DepartmentNameBaseReferenceID BIGINT,
        OrganizationID BIGINT
    );

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        IF @RowStatus = 1 -- Soft Delete
        BEGIN
            IF @DepartmentNameTypeID IS NULL
            BEGIN
                SELECT @DepartmentNameTypeID = idfsDepartmentName
                FROM dbo.tlbDepartment
                WHERE idfDepartment = @DepartmentID;
            END

            UPDATE dbo.tlbDepartment
            SET intRowStatus = @RowStatus,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfDepartment = @DepartmentID;

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailDelete
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   @DepartmentID,
                   @AuditUserName,
                   @EIDSSObjectID;
            -- End data audit

            UPDATE dbo.trtBaseReference
            SET intRowStatus = @RowStatus,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @DepartmentNameTypeID
                  AND intRowStatus = 0;

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailDelete
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectBaseReferenceTableID,
                   @DepartmentNameTypeID,
                   @AuditUserName,
                   @EIDSSObjectID;
            -- End data audit

            UPDATE dbo.trtStringNameTranslation
            SET intRowStatus = @RowStatus,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @DepartmentNameTypeID;

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailDelete
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectStringNameTranslationTableID,
                   @DepartmentNameTypeID,
                   @AuditUserName,
                   @EIDSSObjectID;
        -- End data audit
        END
        ELSE
        BEGIN
            IF
            (
                SELECT COUNT(b.idfsReference)
                FROM dbo.FN_GBL_ReferenceRepair_GET(@LanguageID, 19000164) b
                    INNER JOIN dbo.tlbDepartment d
                        ON d.idfsDepartmentName = b.idfsReference
                WHERE b.strDefault = @DefaultName
                      AND d.intRowStatus = 0
                      AND d.idfOrganization = @OrganizationID
                      AND (
                              (
                                  d.idfDepartment <> @DepartmentID
                                  AND @DepartmentID IS NOT NULL
                                  AND @DepartmentID > 0
                              ) -- Update
                              OR (
                                     @DepartmentID IS NULL
                                     OR @DepartmentID < 0
                                 )
                          ) -- Insert
            ) > 0
            BEGIN
                SELECT @ReturnMessage = 'DOES EXIST';
            END

            IF @ReturnMessage <> 'DOES EXIST'
            BEGIN
                IF @DepartmentID IS NULL
                   OR @DepartmentID < 0
                BEGIN
                    IF (UPPER(@LanguageID) = 'EN-US' AND ISNULL(@DefaultName, N'') = N'')
                    BEGIN
                        SET @DefaultName = @NationalName;
                    END

                    EXECUTE dbo.USSP_GBL_BASE_REFERENCE_SET @DepartmentNameTypeID OUTPUT,
                                                            19000164,
                                                            @LanguageID,
                                                            @DefaultName,
                                                            @NationalName,
                                                            0,
                                                            @Order,
                                                            0,
                                                            @AuditUserName,
                                                            @DataAuditEventID,
                                                            @EIDSSObjectID;

                    EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbDepartment', @DepartmentID OUTPUT;

                    INSERT INTO dbo.tlbDepartment
                    (
                        idfDepartment,
                        idfsDepartmentName,
                        idfOrganization,
                        strReservedAttribute,
                        intRowStatus,
                        rowguid,
                        SourceSystemNameID,
                        SourceSystemKeyValue,
                        AuditCreateUser,
                        AuditCreateDTM
                    )
                    VALUES
                    (@DepartmentID,
                     @DepartmentNameTypeID,
                     @OrganizationID,
                     dbo.FN_GBL_DATACHANGE_INFO(@AuditUserName),
                     0  ,
                     NEWID(),
                     10519001,
                     N'[{"idfDepartment":' + CAST(@DepartmentID AS NVARCHAR(300)) + '}]',
                     @AuditUserName,
                     GETDATE()
                    );

                    -- Data audit
                    INSERT INTO dbo.tauDataAuditDetailCreate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        SourceSystemNameID,
                        SourceSystemKeyValue,
                        AuditCreateUser,
                        strObject
                    )
                    VALUES
                    (@DataAuditEventID,
                     @ObjectTableID,
                     @DepartmentID,
                     10519001,
                     '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                     + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
                     @AuditUserName,
                     @EIDSSObjectID
                    );
                -- End data audit
                END
                ELSE
                BEGIN
                    SELECT @DepartmentNameTypeID =
                    (
                        SELECT idfsDepartmentName
                        FROM dbo.tlbDepartment
                        WHERE idfDepartment = @DepartmentID
                    );

                    EXECUTE dbo.USSP_GBL_BASE_REFERENCE_SET @DepartmentNameTypeID,
                                                            19000164,
                                                            @LanguageID,
                                                            @DefaultName,
                                                            @NationalName,
                                                            0,
                                                            @Order,
                                                            0,
                                                            @AuditUserName,
                                                            @DataAuditEventID,
                                                            @EIDSSObjectID;

                    -- Data audit
                    INSERT INTO @DepartmentBeforeEdit
                    (
                        DepartmentID,
                        DepartmentNameBaseReferenceID,
                        OrganizationID
                    )
                    SELECT idfDepartment,
                           idfsDepartmentName,
                           idfOrganization
                    FROM dbo.tlbDepartment
                    WHERE idfDepartment = @DepartmentID;
                    -- End data audit

                    UPDATE dbo.tlbDepartment
                    SET idfsDepartmentName = @DepartmentNameTypeID,
                        strReservedAttribute = dbo.FN_GBL_DATACHANGE_INFO(@AuditUserName),
                        AuditUpdateUser = @AuditUserName,
                        AuditUpdateDTM = GETDATE()
                    WHERE idfDepartment = @DepartmentID;

                    -- Data audit
                    INSERT INTO @DepartmentAfterEdit
                    (
                        DepartmentID,
                        DepartmentNameBaseReferenceID,
                        OrganizationID
                    )
                    SELECT idfDepartment,
                           idfsDepartmentName,
                           idfOrganization
                    FROM dbo.tlbDepartment
                    WHERE idfDepartment = @DepartmentID;

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableID,
                           50815910000000,
                           a.DepartmentID,
                           NULL,
                           b.DepartmentNameBaseReferenceID,
                           a.DepartmentNameBaseReferenceID,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM @DepartmentAfterEdit AS a
                        FULL JOIN @DepartmentBeforeEdit AS b
                            ON a.DepartmentID = b.DepartmentID
                    WHERE (a.DepartmentNameBaseReferenceID <> b.DepartmentNameBaseReferenceID)
                          OR (
                                 a.DepartmentNameBaseReferenceID IS NOT NULL
                                 AND b.DepartmentNameBaseReferenceID IS NULL
                             )
                          OR (
                                 a.DepartmentNameBaseReferenceID IS NULL
                                 AND b.DepartmentNameBaseReferenceID IS NOT NULL
                             );
                    -- End data audit
                END
            END
        END;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @DepartmentID KeyId,
               'DepartmentID' KeyName;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_EMPLOYEEGROUP_DEL]...';


GO

-- =================================================================================================================
-- NAME:				USP_ADMIN_EMPLOYEEGROUP_DEL
-- DESCRIPTION:			Deactivates a role given an identifier
-- AUTHOR:				Ricky Moss
-- 
-- HISTORY OF CHANGES:	
-- NAME:			DATE:			DESCRIPTION OF CHANGE
-- -----------------------------------------------------------------------------------------------------------------
-- Ricky Moss		11/29/2019		Initial Release
-- Ann Xiong		12/03/2020		Modified to use @roleName instead of @roleID to update LkupRoleSystemFunctionAccess
-- Ann Xiong		05/26/2021		Changed RoleID to idfEmployee to fix issue caused by table LkupRoleSystemFunctionAccess column name change
-- Mark Wilson		09/14/2022 		updated to include auditupdatedtm and auditupdateuser
-- Ann Xiong		02/28/2023		Implemented Data Audit
-- Ann Xiong		03/01/2023		Added @idfsSite to parameter list and Used @roleID instead of @roleName for conditions
--
-- EXEC USP_ADMIN_EMPLOYEEGROUP_DEL -500, 58218970000257, NULL
-- =================================================================================================================

ALTER PROCEDURE [dbo].[USP_ADMIN_EMPLOYEEGROUP_DEL]
(
	@roleID BIGINT,
	@roleName BIGINT,
	@idfsSite BIGINT,
	@user NVARCHAR(50)
)
AS
	DECLARE @returnCode INT = 0
	DECLARE @returnMsg  NVARCHAR(50) = 'SUCCESS'

	--Data Audit--
	declare @idfUserId BIGINT = NULL;
	declare @idfSiteId BIGINT = NULL;
	declare @idfsDataAuditEventType bigint = NULL;
	declare @idfsObjectType bigint = 10017058;                         -- User Group
	declare @idfObject bigint = @roleID;
	declare @idfDataAuditEvent bigint= NULL;
	declare @idfObjectTable_tlbEmployeeGroup bigint = 75530000000;
	declare @idfObjectTable_trtBaseReference BIGINT = 75820000000;
	declare @idfObjectTable_tlbEmployeeGroupMember bigint = 75540000000;
	declare @idfObjectTable_trtStringNameTranslation bigint = 75990000000;

	-- Get and Set UserId and SiteId
	select @idfUserId =userInfo.UserId, @idfSiteId=UserInfo.SiteId from dbo.FN_UserSiteInformation(@user) userInfo

	--Data Audit--

BEGIN
	BEGIN TRY
		--Data Audit

		-- tauDataAuditEvent Event Type - Delete
		set @idfsDataAuditEventType =10016002;

		-- insert record into tauDataAuditEvent
		EXEC USSP_GBL_DataAuditEvent_GET @idfUserID,@idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbEmployeeGroup, @idfDataAuditEvent OUTPUT
		-- End data audit

		UPDATE dbo.LkupRoleSystemFunctionAccess 
		SET intRowStatus = 1,
			AuditUpdateDTM = GETDATE(),
			AuditUpdateUser = @user
		WHERE idfEmployee = @roleID

		UPDATE dbo.tlbEmployeeGroupMember 
		SET intRowStatus = 1,
			AuditUpdateDTM = GETDATE(),
			AuditUpdateUser = @user
		WHERE idfEmployee = @roleID

		--Data Audit
		INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
					SELECT @idfDataAuditEvent, @idfObjectTable_tlbEmployeeGroupMember, @roleName
		-- End data audit

		UPDATE dbo.trtBaseReference 
		SET intRowStatus = 1,
			AuditUpdateDTM = GETDATE(),
			AuditUpdateUser = @user
		WHERE idfsBaseReference = @roleID

				--Data Audit
		INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
					SELECT @idfDataAuditEvent, @idfObjectTable_trtBaseReference, @roleName
		-- End data audit

		UPDATE dbo.tlbEmployeeGroup 
		SET intRowStatus = 1,
			AuditUpdateDTM = GETDATE(),
			AuditUpdateUser = @user
		WHERE idfEmployeeGroup = @roleID AND idfsSite = @idfsSite	

		--Data Audit
		INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
					SELECT @idfDataAuditEvent, @idfObjectTable_tlbEmployeeGroup, @roleID
		-- End data audit

		UPDATE dbo.trtStringNameTranslation 
		SET intRowStatus = 1,
			AuditUpdateDTM = GETDATE(),
			AuditUpdateUser = @user
		WHERE idfsBaseReference = @roleID

		--Data Audit
		INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
					SELECT @idfDataAuditEvent, @idfObjectTable_trtStringNameTranslation, @roleName
		-- End data audit

		--SELECT @returnCode AS 'returnCode', @returnMsg AS 'returnMessage'
		SELECT
			 @returnCode ReturnCode, 
			 @returnMsg AS ReturnMessage
	END TRY

	BEGIN CATCH
		THROW

	END CATCH

END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_EMPLOYEEGROUP_GETDETAIL]...';


GO
-- =================================================================================================================
-- NAME:				USP_ADMIN_EMPLOYEEGROUP_GETDETAIL
-- DESCRIPTION:			Retrieves a role given a role identifier and language
-- AUTHOR:				Ricky Moss
-- 
-- HISTORY OF CHANGES:	
-- NAME:			DATE:			DESCRIPTION OF CHANGE
-- -----------------------------------------------------------------------------------------------------------------
-- Ricky Moss		12/02/2019		Initial Release
-- Ann Xiong		03/01/2023		Fixed the issue of wrong National Name returned
--
-- EXEC USP_ADMIN_EMPLOYEEGROUP_GETDETAIL -499, 'en', NULL
-- =================================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_EMPLOYEEGROUP_GETDETAIL]
(
	@idfEmployeeGroup BIGINT,
	@langId NVARCHAR(50),
	@user NVARCHAR(100)
)
AS
BEGIN
	BEGIN TRY
		SELECT eg.idfEmployeeGroup, eg.idfsEmployeeGroupName, egbr.strDefault, eg.strName as strName, eg.strDescription FROM tlbEmployeeGroup eg
		JOIN FN_GBL_Reference_GETList(@langId, 19000022) egbr
		ON eg.idfsEmployeeGroupName = egbr.idfsReference
		WHERE idfEmployeeGroup = @idfEmployeeGroup AND intRowStatus = 0
	END TRY
	BEGIN CATCH
		THROW
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_EMPLOYEEGROUP_GETLIST]...';


GO
-- ===============================================================================================================
-- Name: USP_EMPLOYEEGROUP_GETLIST
-- Description: 
-- Author: Ricky Moss
--
-- History of changes
--
-- Name					Date			Change
-- ---------------------------------------------------------------------------------------------------------------
-- Ricky Moss			11/25/2019		Initial Release
-- Ricky Moss			12/03/2019		Added Pagination
-- Ricky Moss			12/11/2019		Added idfsEmployeeGroupName
-- Ann Xiong			05/18/2021		Added paging
-- Mandar Kularni		07/01/2021		Replaced parameter @user with @idfsSite
-- Ann Xiong            03/01/2023	    Added intRowStaus =0 in tlbEmployeeGroup eg
--
-- EXEC USP_ADMIN_EMPLOYEEGROUP_GETLIST 'Human', NULL, 'en', 1, 1, 10, 'strDefault' , 'asc'
-- EXEC USP_ADMIN_EMPLOYEEGROUP_GETLIST 'La', null, 'ru', 871, 1, 10, 'strDefault' , 'asc'
-- ===============================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_EMPLOYEEGROUP_GETLIST]
(

		@strName NVARCHAR(500),
		@strDescription NVARCHAR(1000),
		@langId NVARCHAR(50)
		,@idfsSite BIGINT
		,@pageNo INT = 1
		,@pageSize INT = 10 
		,@sortColumn NVARCHAR(30) = 'strDefault' 
		,@sortOrder NVARCHAR(4) = 'asc'
)
AS
BEGIN
	BEGIN TRY
		DECLARE @firstRec INT
		DECLARE @lastRec INT
		DECLARE @t TABLE( 
			idfEmployeeGroup bigint,
			idfsEmployeeGroupName bigint,
			strDefault nvarchar(2000), 
			strName nvarchar(2000),
			strDescription nvarchar(2000) 
			)
	
		SET @firstRec = (@pageNo-1)* @pagesize
		SET @lastRec = (@pageNo*@pageSize+1)
		
		INSERT INTO @T
		SELECT	eg.idfEmployeeGroup, 
				eg.idfsEmployeeGroupName, 
				egbr.strDefault, 
				egbr.[name] as strName, 
				eg.strDescription 
		FROM	tlbEmployeeGroup eg
				JOIN FN_GBL_ReferenceRepair(@langId, 19000022) egbr
					ON eg.idfsEmployeeGroupName = egbr.idfsReference
		WHERE	ISNULL(strDefault, '') LIKE IIF(@strName IS NOT NULL, '%' + @strName + '%', ISNULL(strDefault,'')) 
		AND		ISNULL(strDescription, '') LIKE IIF(@strDescription IS NOT NULL, '%' + @strDescription + '%', ISNULL(strDescription,''))
		AND eg.intRowStatus =0 and egbr.intRowStatus=0 and eg.idfsEmployeeGroupName != -506
		--AND		eg.idfsSite =  @idfsSite
		AND		(eg.idfsSite =  @idfsSite or @idfsSite IS NULL)
		AND eg.idfsSite != -506

		ORDER BY strDefault 		
		;
		WITH CTEResults as
		(
			SELECT ROW_NUMBER() OVER ( ORDER BY 
				CASE WHEN @sortColumn = 'idfEmployeeGroup' AND @SortOrder = 'asc' THEN idfEmployeeGroup END ASC,
				CASE WHEN @sortColumn = 'idfEmployeeGroup' AND @SortOrder = 'desc' THEN idfEmployeeGroup END DESC,
				CASE WHEN @sortColumn = 'idfsEmployeeGroupName' AND @SortOrder = 'asc' THEN idfsEmployeeGroupName END ASC,
				CASE WHEN @sortColumn = 'idfsEmployeeGroupName' AND @SortOrder = 'desc' THEN idfsEmployeeGroupName END DESC,
				CASE WHEN @sortColumn = 'strDefault' AND @SortOrder = 'asc' THEN strDefault END ASC,
				CASE WHEN @sortColumn = 'strDefault' AND @SortOrder = 'desc' THEN strDefault END DESC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'asc' THEN strName END ASC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'desc' THEN strName END DESC,
				CASE WHEN @sortColumn = 'strDescription' AND @SortOrder = 'asc' THEN strDescription END ASC,
				CASE WHEN @sortColumn = 'strDescription' AND @SortOrder = 'desc' THEN strDescription END DESC
		) AS ROWNUM,
		COUNT(*) OVER () AS 
				TotalRowCount, 
				idfEmployeeGroup,
				idfsEmployeeGroupName,
				strDefault,
				strName,
				strDescription
			FROM @T
		)

			SELECT
				TotalRowCount, 
				idfEmployeeGroup,
				idfsEmployeeGroupName,
				strDefault,
				strName,
				strDescription,
				TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
				CurrentPage = @pageNo 
		FROM CTEResults
		WHERE RowNum > @firstRec AND RowNum < @lastRec 
	END TRY
	BEGIN CATCH
		THROW
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_EMPLOYEEGROUP_SET]...';


GO
-- ===============================================================================================================
-- Name: USP_ADMIN_EMPLOYEEGROUP_SET
-- Description: Add or reactivates a relationship between an employee and employee group
-- Author: Ricky Moss
--
-- History of changes
--
-- Name					Date			Change
-- ---------------------------------------------------------------------------------------------------------------
-- Ricky Moss			12/02/2019		Initial Release
-- Ricky Moss			03/25/2019		Added EmployeeGroupName when checking for duplicate and refactored the 
--                                      query checking for duplicates
-- Stephen Long         05/19/2020 Updated existing default and name queries to use top 1 as the name was 
--                                 returning duplicates causing a subquery error.
-- Ann Xiong            01/27/2021 Modified to pass 10023001 (Employee Group) instead of 10023002 (Person) 
--                                 as idfsEmployeeType when insert new Employee Group to tlbEmployee.
-- Mandar				07/09/2021 Fixed an issue when creating a new user group.
-- Ann Xiong            10/28/2021 Modified to return ReturnMessage instead of RetunMessage.
-- Stephen Long         03/14/2022 Removed insert suppress select on base reference set; causing nested insert 
--                                 exec on USP_ADMIN_SITE_SET call.
-- Ann Xiong			02/23/2023 Fixed the issue "Subquery returned more than 1 value".
-- Ann Xiong			02/28/2023 Implemented Data Audit
-- Ann Xiong			03/01/2023 Fixed the issue of National Name not saved
--
-- EXEC USP_ADMIN_EMPLOYEEGROUP_SET -500, 1, 'Test 1204-7', 'Test 1204-7', 'Test Role on December 4',  'en', NULL
-- EXEC USP_ADMIN_EMPLOYEEGROUP_SET NULL, 1, 'Test 1205', 'Test 1205', 'Test Role on December 5',  'en', NULL
-- EXEC USP_ADMIN_EMPLOYEEGROUP_SET NULL, 1, 'Test 1212-1', 'Test 1212-1', 'Test Role on December 12',  'en', NULL
-- ===============================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_EMPLOYEEGROUP_SET] (
	@idfEmployeeGroup BIGINT,
	@idfsSite BIGINT,
	@strDefault NVARCHAR(200),
	@strName NVARCHAR(200),
	@strDescription NVARCHAR(200),
	@langId NVARCHAR(50),
	@user NVARCHAR(200)
	)
AS
DECLARE @returnCode INT = 0
DECLARE @returnMsg NVARCHAR(50) = 'SUCCESS'
DECLARE @idfsEmployeeGroupName BIGINT
DECLARE @idfEmployee BIGINT
DECLARE @SupressSelect TABLE (
	retrunCode INT,
	returnMessage VARCHAR(200)
	)
DECLARE @existingDefault BIGINT
DECLARE @existingName BIGINT

		--Data Audit--
		declare @idfUserId BIGINT = NULL;
		declare @idfSiteId BIGINT = NULL;
		declare @idfsDataAuditEventType bigint = NULL;
		declare @idfsObjectType bigint = 10017058;                         -- User Group
		declare @idfObject bigint = @idfEmployeeGroup;
		declare @idfDataAuditEvent bigint= NULL;
		declare @idfObjectTable_tlbEmployee bigint = 75520000000;
		declare @idfObjectTable_tlbEmployeeGroup bigint = 75530000000;
		declare @idfObjectTable_trtBaseReference BIGINT = 75820000000;

		DECLARE @tlbEmployeeGroup_BeforeEdit TABLE
		(
			EmployeeGroupID BIGINT,
			strName varchar(200),
			strDescription varchar(200)
		);
		DECLARE @tlbEmployeeGroup_AfterEdit TABLE
		(
			EmployeeGroupID BIGINT,
			strName varchar(200),
			strDescription varchar(200)
		);
		DECLARE @trtBaseReference_BeforeEdit TABLE
		(
    		BaseReferenceID BIGINT,
    		DefaultValue NVARCHAR(2000)
		);
		DECLARE @trtBaseReference_AfterEdit TABLE
		(
    		BaseReferenceID BIGINT,
    		DefaultValue NVARCHAR(2000)
		);

		-- Get and Set UserId and SiteId
		select @idfUserId =userInfo.UserId, @idfSiteId=UserInfo.SiteId from dbo.FN_UserSiteInformation(@user) userInfo

		--Data Audit--

BEGIN
	BEGIN TRY
		SELECT @existingDefault = (
				SELECT TOP 1 idfsReference
				FROM dbo.FN_GBL_Reference_GETList(@LangID, 19000022)
				WHERE strDefault = @strDefault
				)

		SELECT @existingName = (
				SELECT TOP 1 idfsReference
				FROM dbo.FN_GBL_Reference_GETList(@LangID, 19000022)
				WHERE [name] = @strName
				)

		IF (
				@existingDefault IS NOT NULL
				OR @existingName IS NOT NULL
				)
			SELECT @idfsEmployeeGroupName = (
					SELECT TOP 1 idfsEmployeeGroupName
					FROM dbo.tlbEmployeeGroup
					WHERE idfsEmployeeGroupName IN (
							@existingDefault,
							@existingName
							)
					)

		IF (
				@existingDefault IS NOT NULL
				AND @existingDefault <> @idfsEmployeeGroupName
				AND @idfsEmployeeGroupName IS NOT NULL
				)
			OR (
				@existingDefault IS NOT NULL
				AND @idfsEmployeeGroupName IS NULL
				)
			OR (
				@existingName IS NOT NULL
				AND @existingName <> @idfsEmployeeGroupName
				AND @idfsEmployeeGroupName IS NOT NULL
				)
			OR (
				@existingName IS NOT NULL
				AND @idfEmployeeGroup IS NULL
				)
		BEGIN
			SELECT @idfEmployeeGroup = (
					SELECT TOP 1 idfEmployeeGroup
					FROM dbo.tlbEmployeeGroup
					WHERE strName = @strName
					)

			SELECT @returnMsg = 'DOES EXIST'
		END
		ELSE IF @idfEmployeeGroup IS NOT NULL
		BEGIN
			SELECT @idfsEmployeeGroupName = (
					SELECT idfsEmployeeGroupName
					FROM dbo.tlbEmployeeGroup
					WHERE idfEmployeeGroup = @idfEmployeeGroup
					)

            -- Data audit
            INSERT INTO @trtBaseReference_BeforeEdit
            (
                BaseReferenceID,
                DefaultValue
            )
            SELECT idfsBaseReference,
                   strDefault
            FROM dbo.trtBaseReference
            WHERE idfsBaseReference = @idfsEmployeeGroupName
            -- End data audit

			UPDATE dbo.trtBaseReference
			SET strDefault = @strDefault
			WHERE idfsBaseReference = @idfsEmployeeGroupName

            -- Data audit
            INSERT INTO @trtBaseReference_AfterEdit
            (
                BaseReferenceID,
                DefaultValue
            )
            SELECT idfsBaseReference,
                   strDefault
            FROM dbo.trtBaseReference
            WHERE idfsBaseReference = @idfsEmployeeGroupName

			--  tauDataAuditEvent  Event Type- Edit 
			set @idfsDataAuditEventType =10016003;
			-- insert record into tauDataAuditEvent - 
			EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfEmployeeGroup, @idfObjectTable_tlbEmployeeGroup, @idfDataAuditEvent OUTPUT

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            SELECT @idfDataAuditEvent,
                   @idfObjectTable_trtBaseReference,
                   81120000000,
                   a.BaseReferenceID,
                   NULL,
                   b.DefaultValue,
                   a.DefaultValue
            FROM @trtBaseReference_AfterEdit AS a
                FULL JOIN @trtBaseReference_BeforeEdit AS b
                    ON a.BaseReferenceID = b.BaseReferenceID
            WHERE (a.DefaultValue <> b.DefaultValue)
                  OR (
                         a.DefaultValue IS NOT NULL
                         AND b.DefaultValue IS NULL
                     )
                  OR (
                         a.DefaultValue IS NULL
                         AND b.DefaultValue IS NOT NULL
                     );
            -- Data audit

			-- Data audit
            INSERT INTO @tlbEmployeeGroup_BeforeEdit
            (
                        EmployeeGroupID,
                           strName,
                           strDescription
            )
            SELECT	idfEmployeeGroup,
                           strName,
                           strDescription
           FROM dbo.tlbEmployeeGroup
		   WHERE idfEmployeeGroup = @idfEmployeeGroup
           -- End data audit

			UPDATE dbo.tlbEmployeeGroup
			SET strName = @strName,
				strDescription = @strDescription
			WHERE idfEmployeeGroup = @idfEmployeeGroup

			-- Data audit
            INSERT INTO @tlbEmployeeGroup_AfterEdit
            (
                        EmployeeGroupID,
                           strName,
                           strDescription
            )
            SELECT	idfEmployeeGroup,
                           strName,
                           strDescription
           FROM dbo.tlbEmployeeGroup
		   WHERE idfEmployeeGroup = @idfEmployeeGroup

		   insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, idfObjectTable, idfColumn, 
					idfObject, idfObjectDetail, 
					strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbEmployeeGroup, 78710000000,
					a.EmployeeGroupID,null,
					a.strName,b.strName
			from @tlbEmployeeGroup_BeforeEdit a  inner join @tlbEmployeeGroup_AfterEdit b on a.EmployeeGroupID = b.EmployeeGroupID
			where (a.strName <> b.strName) 
					or(a.strName is not null and b.strName is null)
					or(a.strName is null and b.strName is not null)

			insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, idfObjectTable, idfColumn, 
					idfObject, idfObjectDetail, 
					strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbEmployeeGroup, 78700000000,
					a.EmployeeGroupID,null,
					a.strDescription,b.strDescription
			from @tlbEmployeeGroup_BeforeEdit a  inner join @tlbEmployeeGroup_AfterEdit b on a.EmployeeGroupID = b.EmployeeGroupID
			where (a.strDescription <> b.strDescription) 
					or(a.strDescription is not null and b.strDescription is null)
					or(a.strDescription is null and b.strDescription is not null)

			--Data Audit--
		END
		ELSE
		BEGIN
			SET @idfEmployeeGroup = (
					SELECT MIN(idfEmployee) - 1
					FROM dbo.tlbEmployee
					)

			--Data Audit--
			-- tauDataAuditEvent Event Type - Create 
			set @idfsDataAuditEventType =10016001;
			-- insert record into tauDataAuditEvent - 
			EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfEmployeeGroup, @idfObjectTable_tlbEmployeeGroup, @idfDataAuditEvent OUTPUT
			--Data Audit--
			
			--INSERT INTO @SupressSelect
			--EXEC dbo.USP_GBL_BaseReference_SET
			--	@ReferenceID=@idfsEmployeeGroupName OUTPUT, 
			--	@ReferenceType=19000022, 
			--	@LangID=@LangID, 
			--	@DefaultName=@strDefault, 
			--	@NationalName=@strName, 
			--	@HACode=226, 
			--	@Order=0, 
			--	@System=0;

            EXECUTE dbo.USSP_GBL_BASE_REFERENCE_SET @idfsEmployeeGroupName OUTPUT,
                                                        19000022,
                                                        @LangID,
                                                        @strDefault,
                                                        @strName,
                                                        226,
                                                        0,
                                                        0,
                                                        @User,
                                                        @idfDataAuditEvent,
                                                        NULL;

			INSERT INTO dbo.tlbEmployee (
				idfEmployee,
				idfsEmployeeType,
				idfsSite,
				intRowStatus
				)
			VALUES (
				@idfEmployeeGroup,
				10023001,
				@idfsSite,
				0
				)

			--Data Audit--
			INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject )
						values ( @idfDataAuditEvent, @idfObjectTable_tlbEmployee, @idfEmployeeGroup)
			--Data Audit--

			INSERT INTO dbo.tlbEmployeeGroup (
				idfEmployeeGroup,
				idfsEmployeeGroupName,
				idfsSite,
				strName,
				strDescription,
				intRowStatus
				)
			VALUES (
				@idfEmployeeGroup,
				@idfsEmployeeGroupName,
				@idfsSite,
				@strName,
				@strDescription,
				0
				)

			--Data Audit--
			INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject )
						values ( @idfDataAuditEvent, @idfObjectTable_tlbEmployeeGroup, @idfEmployeeGroup)
			--Data Audit--
		END

		SELECT @returnCode 'ReturnCode',
			@returnMsg 'ReturnMessage',
			@idfEmployeeGroup 'idfEmployeeGroup',
			@idfsEmployeeGroupName 'idfsEmployeeGroupName'
	END TRY

	BEGIN CATCH
		THROW
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_ActivityParameters_GET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_ActivityParameters_GET
-- Description:	Retrieves the list of Activity Parameters 
--          
-- Revision History:
-- Name				Date		Change
-- ---------------	----------	--------------------------------------------------------------------
-- Kishore Kodru	11/28/2018	Initial release for new API.
-- Stephen Long		08/20/2019	Removed commit and rollback transaction statements.
-- Stephen Long		10/02/2019	Added parameter type to table variable.
-- Doug Albanese	07/29/2021	Added idfActivityParameters to the return list
-- Doug Albanese	08/12/2021	Had to reverse some of the changes that Mandar put in, because EF doesn't accept SQL_VARIANT datatypes
-- Mark Wilson		09/30/2021  removed the check for NULL LangID and also removed unused variables.  Added test code.
-- Doug Albanese	10/04/2022	Correction to a translation join to denote which type the data is from the SQL Variant field
-- Doug Albanese	02/24/2023	Create a patch to convert the intNumRow column to a normal sequence of numbers so that the Matrix Flex Form Control can displaying them in the right place.
-- Test code
/*

DECLARE @observationList NVARCHAR(MAX) = '34400000806;1639880000004;1685240000004;1690060000004'
EXEC dbo.USP_ADMIN_FF_ActivityParameters_GET
	@observationList = @observationList, 
	@LangID = 'en-US'

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_ActivityParameters_GET] 
(
	@observationList NVARCHAR(MAX),
	@LangID NVARCHAR(50) = NULL
)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE 
		@idfsLanguage BIGINT,
		@rowCount INT,
		@currentRow INT,
		@currentObservation BIGINT,
		@idfVersion BIGINT,
		@innerCurrentRow INT,
		@NumRow INT,
		@idfRow BIGINT,
		@CurrentIdfRow BIGINT,
		@type BIGINT,
		@innerRowCount INT,
		@idfsSection BIGINT,
		@idfsCurrentSection BIGINT,
		@OldType BIGINT = 0

	DECLARE @ResultTable TABLE (
		[idfActivityParameters] BIGINT,
		[idfObservation] BIGINT,
		[idfsFormTemplate] BIGINT,
		[idfsParameter] BIGINT,
		[idfsSection] BIGINT,
		[idfRow] BIGINT,
		[intNumRow] INT,
		[Type] BIGINT,
		[varValue] NVARCHAR(4000),
		[strNameValue] NVARCHAR(200),
		[numRow] INT,
		[ParameterType] BIGINT 
		)
	DECLARE @observationsTable TABLE (
		[idfObservation] BIGINT,
		[idfVersion] BIGINT,
		[intRowNumber] INT
		)
	DECLARE @MatrixInfo AS TABLE (
		[idfVersion] BIGINT,
		[idfsAggrCaseType] BIGINT,
		[idfAggregateCaseSection] BIGINT
		)
	DECLARE @matrixTable AS TABLE (
		idfVersion BIGINT,
		idfRow BIGINT,
		idfsParameter BIGINT,
		strDefaultParameterName NVARCHAR(400),
		idfsParameterValue NVARCHAR(MAX),
		NumRow INT,
		[strNameValue] NVARCHAR(200),
		[idfsSection] BIGINT,
		[langid] NVARCHAR(20)
		)
	  DECLARE @DistinctNumRows TABLE (
		[OldNumRow] INT,
		[NewNumRow] INT
		)
	BEGIN TRY
		SET @idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LangID);

		INSERT INTO @observationsTable (
			[idfObservation],
			[intRowNumber]
			)
		SELECT CAST([Value] AS BIGINT),
			ROW_NUMBER() OVER (
				ORDER BY [Value]
				)
		FROM [dbo].[FN_GBL_SYS_SplitList](@observationList, NULL, NULL)
		
		INSERT INTO @ResultTable 
		(
			idfActivityParameters,
			idfObservation,
			idfsFormTemplate,
			idfsParameter,
			idfsSection,
			idfRow,
			varValue,
			[Type],
			numRow, 
			[ParameterType]
		)
		SELECT 
			AP.idfActivityParameters,
			AP.idfObservation,
			O.idfsFormTemplate,
			AP.idfsParameter,
			P.idfsSection,
			AP.idfRow,
			CAST(AP.varValue AS NVARCHAR(MAX)),
			dbo.FN_ADMIN_FF_TypeActivityParameters_GET(AP.idfsParameter),
			ROW_NUMBER() OVER (
				PARTITION BY AP.idfObservation ORDER BY AP.idfRow
				), 
			P.idfsParameterType
		FROM dbo.tlbActivityParameters AP
		LEFT JOIN dbo.ffParameter P	ON P.idfsParameter = AP.idfsParameter AND P.intRowStatus = 0
		INNER JOIN dbo.tlbObservation O ON AP.idfObservation = O.idfObservation
		
		WHERE AP.idfObservation IN (SELECT idfObservation FROM @observationsTable)
		AND AP.intRowStatus = 0
		AND O.intRowStatus = 0
		ORDER BY 
			AP.idfObservation,
			P.idfsSection,
			AP.idfRow

		SELECT @rowCount = MAX([intRowNumber])
		FROM @observationsTable

		
		SET @currentRow = 1;

		WHILE (@currentRow <= @rowCount)
		BEGIN
			SELECT @currentObservation = [idfObservation]
			FROM @observationsTable
			WHERE intRowNumber = @currentRow;

			DELETE
			FROM @MatrixInfo

			INSERT INTO @MatrixInfo
			EXEC dbo.USP_ADMIN_FF_AggregateObservationMatrixVersion_GET 
				@currentObservation

			SELECT TOP 1 @idfVersion = [idfVersion]
			FROM @MatrixInfo

			IF (@idfVersion IS NULL)
			BEGIN
				SELECT TOP 1 @idfVersion = [idfVersion]
				FROM dbo.tlbAggrMatrixVersionHeader
				WHERE idfsMatrixType IN (
						SELECT TOP 1 [idfAggregateCaseSection]
						FROM @MatrixInfo
						)
					AND [blnIsActive] = 1
				ORDER BY CAST(ISNULL(blnIsDefault, 0) AS INT) + CAST(ISNULL(blnIsActive, 0) AS INT) DESC,
					datStartDate DESC
			END;

			UPDATE @observationsTable
			SET [idfVersion] = @idfVersion
			WHERE intRowNumber = @currentRow;

			SELECT @innerRowCount = NULL

			SELECT @innerRowCount = MAX([numRow])
			FROM @ResultTable
			WHERE [Type] = 1
				AND [idfObservation] = @currentObservation

			IF (@innerRowCount > 0)
			BEGIN
				SELECT @NumRow = - 1,
					@CurrentIdfRow = 0,
					@innerCurrentRow = 1;

				DECLARE curs CURSOR LOCAL FORWARD_ONLY STATIC
				FOR
				SELECT [idfRow],
					[idfsSection]
				FROM @ResultTable
				WHERE [Type] = 1
					AND [idfObservation] = @currentObservation

				OPEN curs

				FETCH NEXT
				FROM curs
				INTO @idfRow,
					@idfsSection

				WHILE @@FETCH_STATUS = 0
				BEGIN
					IF (@idfsCurrentSection IS NULL)
						SET @idfsCurrentSection = @idfsSection;

					IF (@idfsCurrentSection <> @idfsSection)
					BEGIN
						SET @idfsCurrentSection = @idfsSection;
						SET @NumRow = - 1;
					END

					IF (@CurrentIdfRow <> @idfRow)
					BEGIN
						SET @CurrentIdfRow = @idfRow;
						SET @NumRow = @NumRow + 1;

						UPDATE @ResultTable
						SET [intNumRow] = @NumRow
						WHERE [idfRow] = @idfRow
							AND [idfObservation] = @currentObservation
					END

					FETCH NEXT
					FROM curs
					INTO @idfRow,
						@idfsSection
				END

				CLOSE curs

				DEALLOCATE curs
			END
			
			SELECT @innerRowCount = NULL

			SELECT @innerRowCount = MAX([numRow])
			FROM @ResultTable
			WHERE [Type] > 1
				AND [idfObservation] = @currentObservation

			IF (@innerRowCount > 0)
			BEGIN
				SELECT @NumRow = NULL,
					@idfRow = NULL,
					@innerCurrentRow = 1;

				DECLARE curs CURSOR LOCAL FORWARD_ONLY STATIC
				FOR
				SELECT [idfRow],
					[Type]
				FROM @ResultTable
				WHERE [Type] > 1
					AND [idfObservation] = @currentObservation

				OPEN curs

				FETCH NEXT
				FROM curs
				INTO @idfRow,
					@type

				WHILE @@FETCH_STATUS = 0
				BEGIN
					IF @OldType <> ISNULL(@type, - 1)
					BEGIN
						DELETE
						FROM @matrixTable

						INSERT INTO @matrixTable
						EXEC dbo.USP_ADMIN_FF_PredefinedStub_GET 
							@type,
							@idfVersion,
							@idfsLanguage

						SET @OldType = ISNULL(@type, 0)
					END

					SET @NumRow = NULL

					SELECT @NumRow = [NumRow]
					FROM @matrixTable
					WHERE [idfRow] = @idfRow

					UPDATE @ResultTable
					SET [intNumRow] = @NumRow
					WHERE [idfRow] = @idfRow
						AND [idfObservation] = @currentObservation;

					FETCH NEXT
					FROM curs
					INTO @idfRow,
						@type
				END

				CLOSE curs

				DEALLOCATE curs
			END

			SET @currentRow = @currentRow + 1;
		END
		
		UPDATE @ResultTable
		SET [intNumRow] = 0
		WHERE [Type] = 0
		
		UPDATE RT
		SET RT.[strNameValue] = ISNULL(SNT.[strTextString], BR.[strDefault])
		FROM @ResultTable AS RT
		INNER JOIN dbo.ffParameter P ON RT.idfsParameter = P.idfsParameter AND P.idfsEditor = 10067002 AND P.[intRowStatus] = 0
		INNER JOIN dbo.trtBaseReference BR ON BR.idfsBaseReference = CASE 
																		WHEN (SQL_VARIANT_PROPERTY(RT.varValue, 'BaseType') = 'bigint')
																			OR (
																				SQL_VARIANT_PROPERTY(RT.varValue, 'BaseType') = 'nvarchar'
																				AND ISNUMERIC(CAST(RT.varValue AS NVARCHAR)) = 1
																				)
																			THEN CAST(RT.varValue AS BIGINT)
																		ELSE - 1
																		END
		 LEFT JOIN dbo.trtStringNameTranslation SNT ON SNT.idfsBaseReference = CASE 
																		WHEN (SQL_VARIANT_PROPERTY(RT.varValue, 'BaseType') = 'bigint')
																			OR (
																				SQL_VARIANT_PROPERTY(RT.varValue, 'BaseType') = 'nvarchar'
																				AND ISNUMERIC(CAST(RT.varValue AS NVARCHAR)) = 1
																				)
																			THEN CAST(RT.varValue AS BIGINT)
																		ELSE - 1
																		END AND SNT.idfsLanguage = @idfsLanguage AND SNT.[intRowStatus] = 0

/***********************************************************************/
/* Patch to renumber Row Numbers for use with Flex Form matrix control */
/***********************************************************************/
		 INSERT INTO @DistinctNumRows
		 SELECT DISTINCT intNumRow, null as NewNumRow
		 FROM @ResultTable
	
		 UPDATE
			 @ResultTable
		 SET
			 intNumRow = dnr. NewNumRow
		 FROM
			 @ResultTable rt
		 INNER JOIN
			 (SELECT 
				  OldNumRow, 
				  (ROW_NUMBER() OVER (ORDER BY OldNumRow)  - 1 ) AS NewNumRow
			   FROM   @DistinctNumRows
			) dnr
		 ON 
			 rt.intNumRow = dnr.OldNumRow;
/***********************************************************************/

		
		SELECT 
			[idfActivityParameters],
			[idfObservation],
			[idfsFormTemplate],
			[idfsParameter],
			[idfsSection],
			[idfRow],
			[intNumRow],
			[Type],
			[varValue],
			[strNameValue],
			[numRow],
			0 AS [FakeField], 
			[ParameterType] 
		FROM @ResultTable
		ORDER BY [idfObservation],
			[idfsParameter],
			[idfRow]
			
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_FlexForm_Get]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_FlexForm_Get
-- Description: Gets list of the Parameters.
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Doug Albabese	01/06/2020	Initial release for new API.
-- Doug Albanese	07/02/2020	Added field blnGrid to denote the displaying of data in a table format
-- Doug Albanese	09/30/2020	Added filtering for language on the Design Option Tables
-- Doug Albanese	01/06/2021	Added idfsEditMode to clarify if the parameter is required or not.
-- Doug Albanese	02/02/2021	Found a static value for English in this procedure.
-- Doug Albanese	08/01/2021	Added idfsFormTemplate for ease of access
-- Mark Wilson		09/29/2021	Updated to remove E7 FN_FF_DesignLanguageForParameter_GET, 
--								removed unused parameters
-- Doug Albanese	03/17/2022	Added a "commented out" section to replace, when development is not happening during core hours
--	Doug Albanese	08/02/2022	Fix for IGAT #400. Extra parameters showing up that didn't belong to questionnnaire on matrix.
-- Doug Albanese	 01/0/2023	 Changed up a join to see if the displayed labeling will work better for the customer.
-- Doug Albanese	 02/06/2023	 Changed how Parameters, whith no sections, or ordered.
-- Doug Albanese	 02/28/2023	 Update for adding the Parent Section name
-- Doug Albanese	 03/01/2023	 Added the "Decore Element Text"
/*
DECLARE    @return_value int

 

EXEC    @return_value = [dbo].[USP_ADMIN_FF_FlexForm_Get]
        @LangID = N'en-US',
        @idfsDiagnosis = 7719020000000,
        @idfsFormType = 10034010,
        @idfsFormTemplate = NULL

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_FlexForm_Get] (
	@LangID						NVARCHAR(50) = NULL
	,@idfsDiagnosis				BIGINT = NULL
	,@idfsFormType				BIGINT = NULL
	,@idfsFormTemplate			BIGINT = NULL
	)
AS
BEGIN
	DECLARE @idfsCountry AS BIGINT,
			@idfsLanguage BIGINT = dbo.FN_GBL_LanguageCode_GET(@LangID)
	DECLARE @tmpTemplate AS TABLE (
		idfsFormTemplate BIGINT
		,IsUNITemplate BIT
		)
	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

	BEGIN TRY
		IF @idfsFormTemplate IS NULL
			BEGIN
				--Obtain idfsFormTemplate, via given parameters of idfsDiagnosis and idfsFormType
				---------------------------------------------------------------------------------
				SET @idfsCountry = dbo.FN_GBL_CurrentCountry_GET()

				INSERT INTO @tmpTemplate
				EXECUTE dbo.USP_ADMIN_FF_ActualTemplate_GET 
					@idfsCountry,
					@idfsDiagnosis,
					@idfsFormType

				SELECT TOP 1 @idfsFormTemplate = idfsFormTemplate
				FROM @tmpTemplate

				IF @idfsFormTemplate = - 1
					SET @idfsFormTemplate = NULL

				---------------------------------------------------------------------------------
			END
	  
		SELECT 
			s.idfsParentSection
			,COALESCE(p.idfsSection,0) AS idfsSection
			,p.idfsParameter
			,PS.name AS ParentSectionName
			,RF.Name AS SectionName
			,PN.Name AS ParameterName
			,PTR.Name AS parameterType
			,p.idfsParameterType
			,pt.idfsReferenceType
			,p.idfsEditor
			,COALESCE(sdo.intOrder,2147483646) AS SectionOrder
			,PDO.intOrder	AS ParameterOrder
			,s.blnGrid
			,s.blnFixedRowSet
			,PFT.idfsEditMode
			,pft.idfsFormTemplate
			,DT.name AS DecoreElementText
		FROM dbo.ffParameter p
		LEFT JOIN dbo.ffParameterForTemplate PFT ON PFT.idfsParameter = p.idfsParameter AND PFT.intRowStatus = 0
		LEFT JOIN dbo.ffSection s ON s.idfsSection = p.idfsSection
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000101) PS ON S.idfsParentSection = PS.idfsReference
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000101) RF ON S.idfsSection = RF.idfsReference
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000071) PTR ON PTR.idfsReference = P.idfsParameterType
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000070) PN ON PN.idfsReference = P.idfsParameterCaption
		LEFT JOIN dbo.ffParameterDesignOption PDO ON PFT.idfsParameter = PDO.idfsParameter
			AND PFT.idfsFormTemplate = PDO.idfsFormTemplate
			AND PDO.idfsLanguage = @idfsLanguage
			AND PDO.intRowStatus = 0
		LEFT JOIN dbo.ffSectionDesignOption sdo ON sdo.idfsSection = s.idfsSection 
			AND sdo.idfsFormTemplate = @idfsFormTemplate 
			AND sdo.idfsLanguage = @idfsLanguage
			AND sdo.intRowStatus = 0
		LEFT JOIN dbo.ffParameterType PT
			ON pt.idfsParameterType = p.idfsParameterType
		LEFT JOIN ffDecorElement DE
			ON DE.idfsFormTemplate = @idfsFormTemplate AND DE.idfsSection = s.idfsParentSection AND DE.intRowStatus = 0
	    LEFT JOIN ffDecorElementText DET
			ON DET.idfDecorElement = DE.idfDecorElement
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000131) DT ON DT.idfsReference = DET.idfsBaseReference
		WHERE PFT.idfsFormTemplate = @idfsFormTemplate
		ORDER BY  SectionOrder
			,pdo.intOrder

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT = 1
			ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_Templates_GET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_Templates_GET
-- Description: Return list of Templates
--          
-- Revision History:
-- Name            Date			Change
-- --------------- ----------	--------------------------------------------------------------------
-- Kishore Kodru    11/28/2018	Initial release for new API.
-- Stephen Long     10/02/2019	Removed commit transaction.
-- Doug Albanese	09/21/2021	Added Disease Id for filtering by Outbreak/FFD connection
-- Doug Albanese	09/29/2021	Corrected the joins to return query by idfsFormType
-- Mark Wilson		09/30/2021	Updated to use FN_GBL_ReferenceRepair_GET
-- Doug Albanese	10/28/2021	Removed disease query
-- Doug Albanese	01/20/2023	Added the determinate value on return
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_Templates_GET]
(
	@LangID								NVARCHAR(50)
	,@idfsFormTemplate					BIGINT = NULL
	,@idfsFormType						BIGINT = NULL
	,@idfOUtbreak					    BIGINT = NULL
)	
AS
BEGIN	
	SET NOCOUNT ON;

	BEGIN TRY
	  
	  IF @idfOUtbreak IS NULL or @idfOUtbreak = -1
		 BEGIN
			   SELECT
				  DISTINCT
				  FT.idfsFormTemplate,
				  FT.idfsFormType,
				  FT.blnUNI,
				  FT.rowguid,
				  FT.intRowStatus,
				  FT.strNote,
				  RF.strDefault AS DefaultName,
				  RF.[name] AS NationalName,
				  RF.[LongName] AS NationalLongName,
				  NULL AS idfsDiagnosisOrDiagnosisGroup
		
			  FROM [dbo].[ffFormTemplate] FT
			  INNER JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID, 19000033) RF ON FT.idfsFormTemplate = RF.idfsReference
			  --LEFT JOIN dbo.ffDeterminantValue DV ON DV.idfsFormTemplate = FT.idfsFormTemplate
			  WHERE ((FT.idfsFormTemplate = @idfsFormTemplate ) OR (@idfsFormTemplate IS NULL))
			  AND ((FT.idfsFormType  = @idfsFormType) OR (@idfsFormType  IS NULL))	  
			  AND (FT.intRowStatus = 0)
			  ORDER BY NationalName;
		 END
	  ELSE
		 BEGIN
			  SELECT 
				  DISTINCT
				  FT.idfsFormTemplate,
				  FT.idfsFormType,
				  FT.blnUNI,
				  FT.rowguid,
				  FT.intRowStatus,
				  FT.strNote,
				  RF.strDefault AS DefaultName,
				  RF.[name] AS NationalName,
				  RF.[LongName] AS NationalLongName,
				  DV.idfsBaseReference AS idfsDiagnosisOrDiagnosisGroup
		
			  FROM [dbo].[ffFormTemplate] FT
			  LEFT JOIN dbo.FN_GBL_ReferenceRepair_GET(@LangID, 19000033) RF ON FT.idfsFormTemplate = RF.idfsReference
			  LEFT JOIN dbo.ffDeterminantValue DV ON DV.idfsFormTemplate = FT.idfsFormTemplate
			  WHERE ((FT.idfsFormTemplate = @idfsFormTemplate ) OR (@idfsFormTemplate IS NULL))
			  AND ((FT.idfsFormType  = @idfsFormType) OR (@idfsFormType  IS NULL))	  
			  AND (FT.intRowStatus = 0)
			  ORDER BY NationalName;
		 END

	END TRY 
	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_NOTIFICATIONS_STATUS_SET]...';


GO

-- ================================================================================================
-- NAME						: [USP_ADMIN_NOTIFICATIONS_STATUS_SET]		
--
-- Description					: Update notification status
--
-- Author						: Mani Govindarajan
--
--Revision History
--			Name							Date								Change Detail
--			Mani Govindarajan				02/16/2022							Initial Created

-- ================================================================================================

ALTER PROCEDURE USP_ADMIN_NOTIFICATIONS_STATUS_SET
(	@SiteId BIGINT
    ,@UserId BIGINT
	,@NotificationId BIGINT = NULL
	,@StatusValue INT
	,@AuditUser VARCHAR(100)=NULL
)
AS
DECLARE @returnMsg VARCHAR(MAX) = 'Success'
DECLARE @returnCode BIGINT = 0 
BEGIN
	BEGIN TRY  
		BEGIN TRANSACTION
			IF (@NotificationId IS NOT NULL)
			BEGIN
				UPDATE dbo.tstNotificationStatus SET intProcessed =@StatusValue ,AuditUpdateUser= @AuditUser WHERE idfNotification =@NotificationId
			END
			ELSE
			BEGIN
				UPDATE  ns 
					SET ns.intProcessed =@StatusValue,AuditUpdateUser= @AuditUser 
				FROM dbo.tstNotificationStatus ns INNER JOIN
					dbo.tstNotification n ON n.idfNotification = ns.idfNotification
				WHERE 
					((
				(
				(n.idfsTargetSite =@SiteId) OR (n.idfsTargetSite IS  NULL AND n.idfsSite = @SiteId))) 
				OR
				((n.idfTargetUserID =@UserId) OR (n.idfTargetUserID IS  NULL AND n.idfUserID = @UserId) ))
				AND ns.intProcessed IN (0,1)
			
			END

			IF @@TRANCOUNT > 0 
				COMMIT  
		 SELECT @returnCode 'ReturnCode', @returnMsg 'RetunMessage'
	END TRY  
	BEGIN CATCH  
		IF @@TRANCOUNT > 0
			BEGIN
				ROLLBACK
			END;
		Throw
	END CATCH 
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_STAT_DEL]...';


GO
--*************************************************************
-- Name 				: USP_ADMIN_STAT_DEL
-- Description			: Get Settlement details
--          
-- Author               : Ricky Moss
-- Revision History
--		Name       Date       Change Detail
-- Ricky Moss	 08/06/2019		Refactored SP to accommodate API methods
-- Ricky Moss	 08/30/2019		Returns success message
-- Leo Tracchia	 03/01/2023		Added logic for data auditing
--
-- Testing code:
-- EXECUTE USP_ADMIN_STAT_DEL 53357400000000
--*************************************************************

ALTER PROCEDURE [dbo].[USP_ADMIN_STAT_DEL]
(
	@idfStatistic BIGINT,
	@SiteId BIGINT,
    @UserId BIGINT
)

AS

BEGIN

	DECLARE @returnCode INT = 0
	DECLARE @returnMsg NVARCHAR(50) = 'SUCCESS'

	BEGIN TRY	    

		DECLARE @SuppressSelect TABLE
		(
			ReturnCode INT,
			ReturnMessage NVARCHAR(MAX)
		);

		--Begin: Data Audit--	

			DECLARE @idfUserId BIGINT = @UserId;
			DECLARE @idfSiteId BIGINT = @SiteId;
			DECLARE @idfsDataAuditEventType bigint = NULL;
			DECLARE @idfsObjectType bigint = 10017036; -- Need to review the value --
			DECLARE @idfObject bigint = @idfStatistic;
			DECLARE @idfObjectTable_tlbStatistic bigint = 75720000000;		
			DECLARE @idfDataAuditEvent bigint = NULL;	

			-- tauDataAuditEvent Event Type - Delete 
			set @idfsDataAuditEventType = 10016002;
			
		--End: Data Audit--	
		
		UPDATE tlbStatistic SET intRowStatus = 1 WHERE idfStatistic = @idfStatistic 
		SELECT @returnCode 'returnCode', @returnMsg 'returnMessage'

		--Begin: Data Audit

			-- insert record into tauDataAuditEvent - 
			INSERT INTO @SuppressSelect
			EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_tlbStatistic, @idfDataAuditEvent OUTPUT

			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject)
			VALUES (@idfDataAuditEvent, @idfObjectTable_tlbStatistic, @idfObject)

		--End: Data Audit, trtDiagnosis--

	END TRY
	BEGIN CATCH
		THROW
	END CATCH

END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_STAT_SET]...';


GO

--=================================================================================================================
-- Created by:				Joan Li
-- Last modified by:		
-- Joan Li					06/13/17	Created based on V6 spStatistic_Post:  V7 usp54 purpose: save records in tlbStatistic
-- Joan Li	                06/15/17	change action parameter
-- Lamont Mitchell			1/2/19		Added ReturnCode and ReturnMessage and changed @idfStatistic from output parameter added it to the Select output
-- Ricky Moss				3/12/20		Check for Duplicates and return a message and statistic id if record exists.
-- Ricky Moss				3/18/20		Added settlement parameter
-- Ricky Moss				3/23/20		Developed search for existing statistic data
-- LAMONT MITCHELL			6/7/2022	ADDED BULKINPORT PARAMETER TO DISTINGUISH BETWEEN BULK IMPORT AND SINGLE ENTERIES.. BULK IMPORT BYPASSES DUPLICATE CHECK
-- Leo Tracchia				9/6/2022	modified logic to handle duplicate data during bulk import
-- Leo Tracchia				10/26/2022	fix for GAT defect #472, DevOps 5259
-- Leo Tracchia				3/1/2023	added logic for data auditing
--=================================================================================================================

ALTER PROCEDURE [dbo].[USP_ADMIN_STAT_SET]
(
	@idfStatistic						BIGINT		= NULL,	--##PARAM @idfStatistic - statistic record ID
	@idfsStatisticDataType				BIGINT		= NULL,	--##PARAM @idfsStatisticDataType - statistic data Type
	@idfsMainBaseReference				BIGINT		= NULL,	--##PARAM @idfsMainBaseReference - statistic base reference
	@idfsStatisticAreaType				BIGINT		= NULL,	--##PARAM @idfsStatisticAreaType - statistic Area Type
	@idfsStatisticPeriodType			BIGINT		= NULL,	--##PARAM @idfsStatisticPeriodType - statistic period Type
	@LocationUserControlidfsCountry		BIGINT		= NULL,	--##PARAM @idfsArea - statistic Area
	@LocationUserControlidfsRegion		BIGINT		= NULL,	--##PARAM @idfsArea - statistic Area
	@LocationUserControlidfsRayon 		BIGINT		= NULL,	--##PARAM @idfsArea - statistic Area
	@LocationUserControlidfsSettlement	BIGINT		= NULL,	--##PARAM @idfsArea - statistic Area
	@datStatisticStartDate				DATETIME	= NULL,	--##PARAM @datStatisticStartDate - start date
	@datStatisticFinishDate				DATETIME	= NULL,	--##PARAM @datStatisticFinishDate - finish date 
	@varValue							INT			= NULL,	--##PARAM @varValue - statistic content
	@idfsStatisticalAgeGroup			BIGINT		= NULL,
	@idfsParameterName					BIGINT		= NULL,
	@bulkImport							BIT			= 0,
	@SiteId								BIGINT,
	@UserId								BIGINT
)
AS

DECLARE @returnCode					INT = 0 
DECLARE	@returnMsg					NVARCHAR(max) = 'SUCCESS' 
DECLARE @existingStatistic			BIGINT = null;
DECLARE @idfsArea					BIGINT

Declare @SupressSelect table
( 
	retrunCode int,
	returnMessage varchar(200)
)

--Data Audit--

	DECLARE @idfUserId BIGINT = @UserId;
	DECLARE @idfSiteId BIGINT = @SiteId;
	DECLARE @idfsDataAuditEventType bigint = NULL;
	DECLARE @idfsObjectType bigint = 10017036; -- Need to review the value --
	DECLARE @idfObject bigint = @idfStatistic;
	DECLARE @idfObjectTable_tlbStatistic bigint = 75720000000;		
	DECLARE @idfDataAuditEvent bigint = NULL;		

	DECLARE @tlbStatistic_BeforeEdit TABLE
	(
		idfStatistic bigint,
		idfsStatisticDataType bigint, 
		idfsMainBaseReference bigint, 
		idfsStatisticAreaType bigint, 
		idfsStatisticPeriodType bigint, 
		idfsArea bigint,
		datStatisticStartDate datetime,
		datStatisticFinishDate datetime,
		varValue sql_variant,
		idfsStatisticalAgeGroup bigint
	)

	DECLARE @tlbStatistic_AfterEdit TABLE
	(
		idfStatistic bigint,
		idfsStatisticDataType bigint, 
		idfsMainBaseReference bigint, 
		idfsStatisticAreaType bigint, 
		idfsStatisticPeriodType bigint, 
		idfsArea bigint,
		datStatisticStartDate datetime,
		datStatisticFinishDate datetime,
		varValue sql_variant,
		idfsStatisticalAgeGroup bigint
	)	

--Data Audit--

BEGIN

	BEGIN TRY  	

		BEGIN TRANSACTION

			IF @LocationUserControlidfsSettlement IS NOT NULL
				SELECT @idfsArea = @LocationUserControlidfsSettlement
			ELSE IF @LocationUserControlidfsRayon IS NOT NULL 
				SELECT @idfsArea = @LocationUserControlidfsRayon
			ELSE IF @LocationUserControlidfsRegion IS NOT NULL
				SELECT @idfsArea = @LocationUserControlidfsRegion
			ELSE 
				SELECT @idfsArea = @LocationUserControlidfsCountry

			--SELECT @existingStatistic = (SELECT top 1(idfStatistic) from tlbStatistic WHERE idfsStatisticDataType = @idfsStatisticDataType AND idfsStatisticPeriodType = @idfsStatisticPeriodType AND ((idfsStatisticalAgeGroup = @idfsStatisticalAgeGroup) OR (idfsStatisticalAgeGroup IS NULL AND @idfsStatisticalAgeGroup IS NULL ))AND idfsStatisticAreaType = @idfsStatisticAreaType AND idfsArea = @idfsArea AND datStatisticStartDate = @datStatisticStartDate AND ((idfsMainBaseReference = @idfsMainBaseReference ) OR idfsMainBaseReference IS NULL AND @idfsMainBaseReference IS NULL) )
			--SELECT @existingStatistic =
			--	(SELECT top 1(idfStatistic) 
			--	FROM tlbStatistic 
			--	WHERE 
			--	idfsStatisticDataType = @idfsStatisticDataType 
			--	AND idfsStatisticAreaType = @idfsStatisticAreaType 
			--	AND idfsStatisticPeriodType = @idfsStatisticPeriodType 
			--	AND idfsArea = @idfsArea --Georgia?
			--	AND datStatisticStartDate = @datStatisticStartDate 
			--	AND datStatisticFinishDate = @datStatisticFinishDate 
			--	--AND varValue = @varValue
			--	AND idfsStatisticalAgeGroup = @idfsStatisticalAgeGroup)

			--IF(@existingStatistic IS NOT NULL AND @idfStatistic IS NULL) --AND @bulkImport = 0)
			--	BEGIN
			--		SELECT @returnMsg = 'DOES EXIST'
			--		SELECT @idfStatistic = @existingStatistic
			--	END
			--ELSE 

			-- if @idfStatistic is not passed in... (possibly a new record)
			IF NOT EXISTS (SELECT * FROM dbo.tlbStatistic WHERE  idfStatistic = @idfStatistic) 

				BEGIN

					--print 'getting existing statistic...'

					-- check if a row already exists with the same data
					SELECT @existingStatistic =
						(SELECT top 1(idfStatistic) 
						FROM tlbStatistic 
						WHERE 
						(idfsStatisticDataType = @idfsStatisticDataType or @idfsStatisticDataType is null)
						AND (idfsMainBaseReference = @idfsMainBaseReference or @idfsMainBaseReference is null)
						AND (idfsStatisticAreaType = @idfsStatisticAreaType or @idfsStatisticAreaType is null)
						AND (idfsStatisticPeriodType = @idfsStatisticPeriodType or @idfsStatisticPeriodType is null)
						AND (idfsArea = @idfsArea or @idfsArea is null)
						AND (datStatisticStartDate = @datStatisticStartDate or @datStatisticStartDate is null)
						AND (datStatisticFinishDate = @datStatisticFinishDate or @datStatisticFinishDate is null)
						--AND (varValue = @varValue or @varValue is null)
						AND (idfsStatisticalAgeGroup = @idfsStatisticalAgeGroup or @idfsStatisticalAgeGroup is null)
						AND intRowStatus = 0)

					--print @existingStatistic

					-- if row doesn't exists, then insert new data
					IF(@existingStatistic IS NULL)
						BEGIN

							--print 'existing statistic is null, so insert'

							INSERT INTO @SupressSelect
							EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbStatistic', @idfStatistic OUTPUT

							--Data Audit--

								-- tauDataAuditEvent Event Type - Create 
								set @idfsDataAuditEventType = 10016001;
			
								-- insert record into tauDataAuditEvent - 
								INSERT INTO @SupressSelect
								EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfStatistic, @idfObjectTable_tlbStatistic, @idfDataAuditEvent OUTPUT

							--Data Audit--

							INSERT INTO tlbStatistic
								(
									idfStatistic,
									idfsStatisticDataType,
									idfsMainBaseReference,
									idfsStatisticAreaType,
									idfsStatisticPeriodType,
									idfsArea,
									datStatisticStartDate,
									datStatisticFinishDate,
									varValue,
									idfsStatisticalAgeGroup
								)
							VALUES
								(
									@idfStatistic,
									@idfsStatisticDataType,
									@idfsMainBaseReference,
									@idfsStatisticAreaType,
									@idfsStatisticPeriodType,
									CASE ISNULL(@LocationUserControlidfsSettlement , '') 
									WHEN '' THEN
										CASE ISNULL(@LocationUserControlidfsRayon, '') 
										WHEN '' THEN
											CASE ISNULL(@LocationUserControlidfsRegion,'')
												WHEN '' THEN
													@LocationUserControlidfsCountry 
												ELSE 
													@LocationUserControlidfsRegion
												END
										ELSE 
												@LocationUserControlidfsRayon 
										END 
									ELSE 
										@LocationUserControlidfsSettlement  
									END,
									@datStatisticStartDate,
									@datStatisticFinishDate,
									CAST(@varValue AS INT),
									@idfsStatisticalAgeGroup
								)

							--Data Audit--							

								INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
								VALUES (@idfDataAuditEvent, @idfObjectTable_tlbStatistic, @idfStatistic)
			
							--Data Audit--

						END
					-- else, just update it with @existingStatistic
					ELSE

						--print 'existing statistic is NOT null, so update'

						--BEGIN: DataAudit-- 
				
							--  tauDataAuditEvent  Event Type - Edit 
							set @idfsDataAuditEventType = 10016003;
			
							-- insert record into tauDataAuditEvent - 
							INSERT INTO @SupressSelect
							EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfStatistic, @idfObjectTable_tlbStatistic, @idfDataAuditEvent OUTPUT						

							INSERT INTO @tlbStatistic_BeforeEdit(
								idfStatistic,
								idfsStatisticDataType, 
								idfsMainBaseReference, 
								idfsStatisticAreaType, 
								idfsStatisticPeriodType, 
								idfsArea,
								datStatisticStartDate,
								datStatisticFinishDate,
								varValue,
								idfsStatisticalAgeGroup
								)
							SELECT 
								idfStatistic,
								idfsStatisticDataType, 
								idfsMainBaseReference, 
								idfsStatisticAreaType, 
								idfsStatisticPeriodType, 
								idfsArea,
								datStatisticStartDate,
								datStatisticFinishDate,
								varValue,
								idfsStatisticalAgeGroup				
								FROM tlbStatistic WHERE idfStatistic = @idfStatistic;

						--END: DataAudit-- 

						UPDATE	tlbStatistic
						SET		idfsStatisticDataType = @idfsStatisticDataType,
								idfsMainBaseReference = @idfsMainBaseReference,
								idfsStatisticAreaType = @idfsStatisticAreaType,
								idfsStatisticPeriodType = @idfsStatisticPeriodType,
								idfsArea = CASE ISNULL(@LocationUserControlidfsSettlement , '') 
									WHEN '' THEN
										CASE ISNULL(@LocationUserControlidfsRayon, '') 
										WHEN '' THEN
											CASE ISNULL(@LocationUserControlidfsRegion,'')
												WHEN '' THEN
													@LocationUserControlidfsCountry 
												ELSE 
													@LocationUserControlidfsRegion
												END
										ELSE 
												@LocationUserControlidfsRayon 
										END 
									ELSE 
										@LocationUserControlidfsSettlement  
									END,
								datStatisticStartDate = @datStatisticStartDate,
								datStatisticFinishDate = @datStatisticFinishDate,
								varValue = CAST(@varValue AS INT),
								idfsStatisticalAgeGroup = @idfsStatisticalAgeGroup
						 WHERE 	idfStatistic = @existingStatistic

						 --BEGIN: DataAudit-- 

							INSERT INTO @tlbStatistic_AfterEdit(
								idfStatistic,
								idfsStatisticDataType, 
								idfsMainBaseReference, 
								idfsStatisticAreaType, 
								idfsStatisticPeriodType, 
								idfsArea,
								datStatisticStartDate,
								datStatisticFinishDate,
								varValue,
								idfsStatisticalAgeGroup
								)
							SELECT 
								idfStatistic,
								idfsStatisticDataType, 
								idfsMainBaseReference, 
								idfsStatisticAreaType, 
								idfsStatisticPeriodType, 
								idfsArea,
								datStatisticStartDate,
								datStatisticFinishDate,
								varValue,
								idfsStatisticalAgeGroup				
								FROM tlbStatistic WHERE idfStatistic = @idfStatistic;

							--idfsStatisticDataType
							insert into dbo.tauDataAuditDetailUpdate(
								idfDataAuditEvent, 
								idfObjectTable, 
								idfColumn, 
								idfObject, 
								idfObjectDetail, 
								strOldValue, 
								strNewValue)
							select 
								@idfDataAuditEvent,
								@idfObjectTable_tlbStatistic, 
								80410000000,
								a.idfStatistic,
								null,
								a.idfsStatisticDataType,
								b.idfsStatisticDataType 
							from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
							where (a.idfsStatisticDataType <> b.idfsStatisticDataType) 
								or(a.idfsStatisticDataType is not null and b.idfsStatisticDataType is null)
								or(a.idfsStatisticDataType is null and b.idfsStatisticDataType is not null)

							--idfsMainBaseReference
							insert into dbo.tauDataAuditDetailUpdate(
								idfDataAuditEvent, 
								idfObjectTable, 
								idfColumn, 
								idfObject, 
								idfObjectDetail, 
								strOldValue, 
								strNewValue)
							select 
								@idfDataAuditEvent,
								@idfObjectTable_tlbStatistic, 
								4577930000000,
								a.idfStatistic,
								null,
								a.idfsMainBaseReference,
								b.idfsMainBaseReference 
							from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
							where (a.idfsMainBaseReference <> b.idfsMainBaseReference) 
								or(a.idfsMainBaseReference is not null and b.idfsMainBaseReference is null)
								or(a.idfsMainBaseReference is null and b.idfsMainBaseReference is not null)

							--idfsStatisticAreaType
							insert into dbo.tauDataAuditDetailUpdate(
								idfDataAuditEvent, 
								idfObjectTable, 
								idfColumn, 
								idfObject, 
								idfObjectDetail, 
								strOldValue, 
								strNewValue)
							select 
								@idfDataAuditEvent,
								@idfObjectTable_tlbStatistic, 
								80400000000,
								a.idfStatistic,
								null,
								a.idfsStatisticAreaType,
								b.idfsStatisticAreaType 
							from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
							where (a.idfsStatisticAreaType <> b.idfsStatisticAreaType) 
								or(a.idfsStatisticAreaType is not null and b.idfsStatisticAreaType is null)
								or(a.idfsStatisticAreaType is null and b.idfsStatisticAreaType is not null)

							--idfsStatisticPeriodType
							insert into dbo.tauDataAuditDetailUpdate(
								idfDataAuditEvent, 
								idfObjectTable, 
								idfColumn, 
								idfObject, 
								idfObjectDetail, 
								strOldValue, 
								strNewValue)
							select 
								@idfDataAuditEvent,
								@idfObjectTable_tlbStatistic, 
								80420000000,
								a.idfStatistic,
								null,
								a.idfsStatisticPeriodType,
								b.idfsStatisticPeriodType 
							from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
							where (a.idfsStatisticPeriodType <> b.idfsStatisticPeriodType) 
								or(a.idfsStatisticPeriodType is not null and b.idfsStatisticPeriodType is null)
								or(a.idfsStatisticPeriodType is null and b.idfsStatisticPeriodType is not null)

							--idfsArea
							insert into dbo.tauDataAuditDetailUpdate(
								idfDataAuditEvent, 
								idfObjectTable, 
								idfColumn, 
								idfObject, 
								idfObjectDetail, 
								strOldValue, 
								strNewValue)
							select 
								@idfDataAuditEvent,
								@idfObjectTable_tlbStatistic, 
								80390000000,
								a.idfStatistic,
								null,
								a.idfsArea,
								b.idfsArea 
							from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
							where (a.idfsArea <> b.idfsArea) 
								or(a.idfsArea is not null and b.idfsArea is null)
								or(a.idfsArea is null and b.idfsArea is not null)

							--datStatisticStartDate
							insert into dbo.tauDataAuditDetailUpdate(
								idfDataAuditEvent, 
								idfObjectTable, 
								idfColumn, 
								idfObject, 
								idfObjectDetail, 
								strOldValue, 
								strNewValue)
							select 
								@idfDataAuditEvent,
								@idfObjectTable_tlbStatistic, 
								80380000000,
								a.idfStatistic,
								null,
								a.datStatisticStartDate,
								b.datStatisticStartDate 
							from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
							where (a.datStatisticStartDate <> b.datStatisticStartDate) 
								or(a.datStatisticStartDate is not null and b.datStatisticStartDate is null)
								or(a.datStatisticStartDate is null and b.datStatisticStartDate is not null)
								
							--datStatisticFinishDate
							insert into dbo.tauDataAuditDetailUpdate(
								idfDataAuditEvent, 
								idfObjectTable, 
								idfColumn, 
								idfObject, 
								idfObjectDetail, 
								strOldValue, 
								strNewValue)
							select 
								@idfDataAuditEvent,
								@idfObjectTable_tlbStatistic, 
								80370000000,
								a.idfStatistic,
								null,
								a.datStatisticFinishDate,
								b.datStatisticFinishDate 
							from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
							where (a.datStatisticFinishDate <> b.datStatisticFinishDate) 
								or(a.datStatisticFinishDate is not null and b.datStatisticFinishDate is null)
								or(a.datStatisticFinishDate is null and b.datStatisticFinishDate is not null)

							--varValue
							insert into dbo.tauDataAuditDetailUpdate(
								idfDataAuditEvent, 
								idfObjectTable, 
								idfColumn, 
								idfObject, 
								idfObjectDetail, 
								strOldValue, 
								strNewValue)
							select 
								@idfDataAuditEvent,
								@idfObjectTable_tlbStatistic, 
								80440000000,
								a.idfStatistic,
								null,
								a.varValue,
								b.varValue 
							from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
							where (a.varValue <> b.varValue) 
								or(a.varValue is not null and b.varValue is null)
								or(a.varValue is null and b.varValue is not null)

							--idfsStatisticalAgeGroup
							insert into dbo.tauDataAuditDetailUpdate(
								idfDataAuditEvent, 
								idfObjectTable, 
								idfColumn, 
								idfObject, 
								idfObjectDetail, 
								strOldValue, 
								strNewValue)
							select 
								@idfDataAuditEvent,
								@idfObjectTable_tlbStatistic, 
								12014500000000,
								a.idfStatistic,
								null,
								a.idfsStatisticalAgeGroup,
								b.idfsStatisticalAgeGroup 
							from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
							where (a.idfsStatisticalAgeGroup <> b.idfsStatisticalAgeGroup) 
								or(a.idfsStatisticalAgeGroup is not null and b.idfsStatisticalAgeGroup is null)
								or(a.idfsStatisticalAgeGroup is null and b.idfsStatisticalAgeGroup is not null)

						--END: DataAudit-- 

				END

			-- update record with the passed in @idfStatistic (does not happen during bulk import)
			ELSE 

				--print '@idfStatistic was passed in (does not happen during bulk import)'

				--BEGIN: DataAudit-- 
				
					--  tauDataAuditEvent  Event Type - Edit 
					set @idfsDataAuditEventType = 10016003;
			
					-- insert record into tauDataAuditEvent - 
					INSERT INTO @SupressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfStatistic, @idfObjectTable_tlbStatistic, @idfDataAuditEvent OUTPUT						

					INSERT INTO @tlbStatistic_BeforeEdit(
						idfStatistic,
						idfsStatisticDataType, 
						idfsMainBaseReference, 
						idfsStatisticAreaType, 
						idfsStatisticPeriodType, 
						idfsArea,
						datStatisticStartDate,
						datStatisticFinishDate,
						varValue,
						idfsStatisticalAgeGroup
						)
					SELECT 
						idfStatistic,
						idfsStatisticDataType, 
						idfsMainBaseReference, 
						idfsStatisticAreaType, 
						idfsStatisticPeriodType, 
						idfsArea,
						datStatisticStartDate,
						datStatisticFinishDate,
						varValue,
						idfsStatisticalAgeGroup				
						FROM tlbStatistic WHERE idfStatistic = @idfStatistic;

				--END: DataAudit-- 

				UPDATE	tlbStatistic
				SET		idfsStatisticDataType = @idfsStatisticDataType,
						idfsMainBaseReference = @idfsMainBaseReference,
						idfsStatisticAreaType = @idfsStatisticAreaType,
						idfsStatisticPeriodType = @idfsStatisticPeriodType,
						idfsArea = CASE ISNULL(@LocationUserControlidfsSettlement , '') 
							WHEN '' THEN
								CASE ISNULL(@LocationUserControlidfsRayon, '') 
								WHEN '' THEN
									CASE ISNULL(@LocationUserControlidfsRegion,'')
										WHEN '' THEN
											@LocationUserControlidfsCountry 
										ELSE 
											@LocationUserControlidfsRegion
										END
								ELSE 
										@LocationUserControlidfsRayon 
								END 
							ELSE 
								@LocationUserControlidfsSettlement  
							END,
						datStatisticStartDate = @datStatisticStartDate,
						datStatisticFinishDate = @datStatisticFinishDate,
						varValue = CAST(@varValue AS INT),
						idfsStatisticalAgeGroup = @idfsStatisticalAgeGroup
				WHERE 	idfStatistic = @idfStatistic

				--BEGIN: DataAudit-- 

					INSERT INTO @tlbStatistic_AfterEdit(
						idfStatistic,
						idfsStatisticDataType, 
						idfsMainBaseReference, 
						idfsStatisticAreaType, 
						idfsStatisticPeriodType, 
						idfsArea,
						datStatisticStartDate,
						datStatisticFinishDate,
						varValue,
						idfsStatisticalAgeGroup
						)
					SELECT 
						idfStatistic,
						idfsStatisticDataType, 
						idfsMainBaseReference, 
						idfsStatisticAreaType, 
						idfsStatisticPeriodType, 
						idfsArea,
						datStatisticStartDate,
						datStatisticFinishDate,
						varValue,
						idfsStatisticalAgeGroup				
						FROM tlbStatistic WHERE idfStatistic = @idfStatistic;

					--idfsStatisticDataType
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_tlbStatistic, 
						80410000000,
						a.idfStatistic,
						null,
						a.idfsStatisticDataType,
						b.idfsStatisticDataType 
					from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
					where (a.idfsStatisticDataType <> b.idfsStatisticDataType) 
						or(a.idfsStatisticDataType is not null and b.idfsStatisticDataType is null)
						or(a.idfsStatisticDataType is null and b.idfsStatisticDataType is not null)

					--idfsMainBaseReference
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_tlbStatistic, 
						4577930000000,
						a.idfStatistic,
						null,
						a.idfsMainBaseReference,
						b.idfsMainBaseReference 
					from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
					where (a.idfsMainBaseReference <> b.idfsMainBaseReference) 
						or(a.idfsMainBaseReference is not null and b.idfsMainBaseReference is null)
						or(a.idfsMainBaseReference is null and b.idfsMainBaseReference is not null)

					--idfsStatisticAreaType
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_tlbStatistic, 
						80400000000,
						a.idfStatistic,
						null,
						a.idfsStatisticAreaType,
						b.idfsStatisticAreaType 
					from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
					where (a.idfsStatisticAreaType <> b.idfsStatisticAreaType) 
						or(a.idfsStatisticAreaType is not null and b.idfsStatisticAreaType is null)
						or(a.idfsStatisticAreaType is null and b.idfsStatisticAreaType is not null)

					--idfsStatisticPeriodType
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_tlbStatistic, 
						80420000000,
						a.idfStatistic,
						null,
						a.idfsStatisticPeriodType,
						b.idfsStatisticPeriodType 
					from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
					where (a.idfsStatisticPeriodType <> b.idfsStatisticPeriodType) 
						or(a.idfsStatisticPeriodType is not null and b.idfsStatisticPeriodType is null)
						or(a.idfsStatisticPeriodType is null and b.idfsStatisticPeriodType is not null)

					--idfsArea
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_tlbStatistic, 
						80390000000,
						a.idfStatistic,
						null,
						a.idfsArea,
						b.idfsArea 
					from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
					where (a.idfsArea <> b.idfsArea) 
						or(a.idfsArea is not null and b.idfsArea is null)
						or(a.idfsArea is null and b.idfsArea is not null)

					--datStatisticStartDate
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_tlbStatistic, 
						80380000000,
						a.idfStatistic,
						null,
						a.datStatisticStartDate,
						b.datStatisticStartDate 
					from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
					where (a.datStatisticStartDate <> b.datStatisticStartDate) 
						or(a.datStatisticStartDate is not null and b.datStatisticStartDate is null)
						or(a.datStatisticStartDate is null and b.datStatisticStartDate is not null)
								
					--datStatisticFinishDate
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_tlbStatistic, 
						80370000000,
						a.idfStatistic,
						null,
						a.datStatisticFinishDate,
						b.datStatisticFinishDate 
					from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
					where (a.datStatisticFinishDate <> b.datStatisticFinishDate) 
						or(a.datStatisticFinishDate is not null and b.datStatisticFinishDate is null)
						or(a.datStatisticFinishDate is null and b.datStatisticFinishDate is not null)

					--varValue
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_tlbStatistic, 
						80440000000,
						a.idfStatistic,
						null,
						a.varValue,
						b.varValue 
					from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
					where (a.varValue <> b.varValue) 
						or(a.varValue is not null and b.varValue is null)
						or(a.varValue is null and b.varValue is not null)

					--idfsStatisticalAgeGroup
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_tlbStatistic, 
						12014500000000,
						a.idfStatistic,
						null,
						a.idfsStatisticalAgeGroup,
						b.idfsStatisticalAgeGroup 
					from @tlbStatistic_BeforeEdit a  inner join @tlbStatistic_AfterEdit b on a.idfStatistic = b.idfStatistic
					where (a.idfsStatisticalAgeGroup <> b.idfsStatisticalAgeGroup) 
						or(a.idfsStatisticalAgeGroup is not null and b.idfsStatisticalAgeGroup is null)
						or(a.idfsStatisticalAgeGroup is null and b.idfsStatisticalAgeGroup is not null)

				--END: DataAudit-- 

		-- Commit the transaction
		IF @@TRANCOUNT > 0
			COMMIT  
		
		Select @returnCode 'ReturnCode', @returnMsg 'ReturnMessage' , @idfStatistic 'idfStatistic'
	END TRY  

	BEGIN CATCH  

		-- Execute error retrieval routine. 
		IF @@TRANCOUNT > 0
			BEGIN
				ROLLBACK


			END;
			Throw;		
	END CATCH; 
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_AggregateSetting_SET]...';


GO
-- ================================================================================================
-- Name: USP_CONF_AggregateSetting_SET		
--
-- Description: Creates and updates entries for aggregate settings.
-- 
-- Author: Lamont Mitchell
-- 
-- Revision History:
-- Name							Date       Change Detail
-- ---------------------------- ---------- -------------------------------------------------------
-- Lamont Mitchell              11/27/2018 Initial Created
-- Stephen Long                 07/08/2022 Added site alert and audit logic.
-- Ann Xiong					01/19/2022 Added scripts to allow each site to define its own Aggregate Settings
-- Ann Xiong					01/31/2022 Updated to insert second and third level site aggregate settings.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_AggregateSetting_SET]
    @AggregateSettingRecords NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL,
    @AuditUserName NVARCHAR(200)
AS
BEGIN
    DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
            @ReturnCode BIGINT = 0,
            @AggregateDiseaseReportTypeId BIGINT = NULL,
            @CustomizationPackageId BIGINT = NULL,
			@SiteId BIGINT = NULL,
            @StatisticalAreaTypeId BIGINT = NULL,
            @StatisticalPeriodTypeId BIGINT = NULL,
            @idfsReferenceType BIGINT,
            @EventId BIGINT,
            @EventTypeId BIGINT = NULL,
            @EventSiteId BIGINT = NULL,
            @EventObjectId BIGINT = NULL,
            @EventUserId BIGINT = NULL,
            @EventDiseaseId BIGINT = NULL,
            @EventLocationId BIGINT = NULL,
            @EventInformationString NVARCHAR(MAX) = NULL,
            @EventLoginSiteId BIGINT = NULL;
    DECLARE @AggregateSettingRecordsTemp TABLE
    (
        AggregateDiseaseReportTypeId BIGINT NOT NULL,
        CustomizationPackageId BIGINT NOT NULL,
		SiteId BIGINT NULL,
        StatisticalAreaTypeId BIGINT NOT NULL,
        StatisticalPeriodTypeId BIGINT NOT NULL
    );
    DECLARE @EventsTemp TABLE
    (
        EventId BIGINT NOT NULL,
        EventTypeId BIGINT NULL,
        UserId BIGINT NULL,
        SiteId BIGINT NULL,
        LoginSiteId BIGINT NULL,
        ObjectId BIGINT NULL,
        DiseaseId BIGINT NULL,
        LocationId BIGINT NULL,
        InformationString NVARCHAR(MAX) NULL
    );

	--Data Audit--
	declare @idfUserId BIGINT =NULL;
	declare @idfSiteId BIGINT = NULL;
	declare @idfsDataAuditEventType bigint =NULL;
	declare @idfsObjectType bigint = 10017007;
	declare @idfObject bigint = NULL;
	declare @idfObjectTable_tlbAggrSettings bigint = 76030000000;
	declare @idfDataAuditEvent bigint= NULL; 

	DECLARE @tlbAggrSettings_BeforeEdit TABLE
	(
	  SiteId bigint,
	  idfsAggrCaseType bigint,
	  idfCustomizationPackage bigint, 
      idfsStatisticAreaType bigint, 
      idfsStatisticPeriodType bigint
	)
	DECLARE @tlbAggrSettings_AfterEdit TABLE
	(
	  SiteId bigint,
	  idfsAggrCaseType bigint,
	  idfCustomizationPackage bigint, 
      idfsStatisticAreaType bigint, 
      idfsStatisticPeriodType bigint
	)
	
	--Data Audit--
	-- Get and Set UserId and SiteId
	select @idfUserId =userInfo.UserId, @idfSiteId=UserInfo.SiteId from dbo.FN_UserSiteInformation(@AuditUserName) userInfo
	--Data Audit--

    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );

    SET NOCOUNT ON;

    BEGIN TRY
        INSERT INTO @AggregateSettingRecordsTemp
        SELECT *
        FROM
            OPENJSON(@AggregateSettingRecords)
            WITH
            (
                AggregateDiseaseReportTypeId BIGINT,
                CustomizationPackageId BIGINT,
				SiteId BIGINT,
                StatisticalAreaTypeId BIGINT,
                StatisticalPeriodTypeId BIGINT
            );

        WHILE EXISTS (SELECT * FROM @AggregateSettingRecordsTemp)
        BEGIN
            SELECT TOP 1
                @AggregateDiseaseReportTypeId = AggregateDiseaseReportTypeId,
                @CustomizationPackageId = CustomizationPackageId,
				@SiteId = SiteId,
                @StatisticalAreaTypeId = StatisticalAreaTypeId,
                @StatisticalPeriodTypeId = StatisticalPeriodTypeId
            FROM @AggregateSettingRecordsTemp;

			SET @idfObject = @AggregateDiseaseReportTypeId --CONVERT(NVARCHAR,@SiteId) + CONVERT(NVARCHAR,@AggregateDiseaseReportTypeId);

            IF EXISTS
            (
                SELECT idfsAggrCaseType,
                       idfCustomizationPackage,
					   idfsSite,
                       idfsStatisticAreaType,
                       idfsStatisticPeriodType
                FROM dbo.tstAggrSetting
                WHERE idfsAggrCaseType = @AggregateDiseaseReportTypeId
                      AND idfCustomizationPackage = @CustomizationPackageId
					  AND idfsSite = @SiteId
                      AND intRowStatus = 0
            )
            BEGIN

				Delete from @tlbAggrSettings_BeforeEdit
				insert into @tlbAggrSettings_BeforeEdit (SiteId, idfsAggrCaseType ,idfCustomizationPackage, idfsStatisticAreaType,idfsStatisticPeriodType)
				select idfsSite, idfsAggrCaseType, idfCustomizationPackage, idfsStatisticAreaType, idfsStatisticPeriodType 
					from tstAggrSetting where idfsAggrCaseType = @AggregateDiseaseReportTypeId AND idfCustomizationPackage = @CustomizationPackageId AND idfsSite = @SiteId AND intRowStatus = 0

                UPDATE dbo.tstAggrSetting
                SET idfsStatisticAreaType = @StatisticalAreaTypeId,
                    idfsStatisticPeriodType = @StatisticalPeriodTypeId,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfsAggrCaseType = @AggregateDiseaseReportTypeId
                      AND idfCustomizationPackage = @CustomizationPackageId
					  AND idfsSite = @SiteId
                      AND intRowStatus = 0;
					  
				Delete from @tlbAggrSettings_AfterEdit
				insert into @tlbAggrSettings_AfterEdit (SiteId, idfsAggrCaseType ,idfCustomizationPackage, idfsStatisticAreaType,idfsStatisticPeriodType)
				select idfsSite, idfsAggrCaseType, idfCustomizationPackage, idfsStatisticAreaType, idfsStatisticPeriodType 
					from tstAggrSetting where idfsAggrCaseType = @AggregateDiseaseReportTypeId AND idfCustomizationPackage = @CustomizationPackageId AND idfsSite = @SiteId AND intRowStatus = 0
				
				--DataAudit-- 
				IF EXISTS 
				(
					select *
					from @tlbAggrSettings_BeforeEdit a  inner join @tlbAggrSettings_AfterEdit b on a.SiteId = b.SiteId 
						and a.idfsAggrCaseType = b.idfsAggrCaseType and a.idfCustomizationPackage = b.idfCustomizationPackage
					where ((a.idfsStatisticAreaType <> b.idfsStatisticAreaType) 
						or(a.idfsStatisticAreaType is not null and b.idfsStatisticAreaType is null)
						or(a.idfsStatisticAreaType is null and b.idfsStatisticAreaType is not null))
						OR
						((a.idfsStatisticPeriodType <> b.idfsStatisticPeriodType) 
						or(a.idfsStatisticPeriodType is not null and b.idfsStatisticPeriodType is null)
						or(a.idfsStatisticPeriodType is null and b.idfsStatisticPeriodType is not null))
				)
				BEGIN
					--  tauDataAuditEvent  Event Type- Edit 
					set @idfsDataAuditEventType = 10016003;
					-- insert record into tauDataAuditEvent - 
					INSERT INTO @SuppressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbAggrSettings, @idfDataAuditEvent OUTPUT

					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, idfObjectTable, idfColumn, 
						idfObject, idfObjectDetail, 
						strOldValue, strNewValue)
					select @idfDataAuditEvent,@idfObjectTable_tlbAggrSettings, 4578190000000,
						@idfObject,null,
						a.idfsStatisticAreaType,b.idfsStatisticAreaType 
					from @tlbAggrSettings_BeforeEdit a  inner join @tlbAggrSettings_AfterEdit b on a.SiteId = b.SiteId 
						and a.idfsAggrCaseType = b.idfsAggrCaseType and a.idfCustomizationPackage = b.idfCustomizationPackage
					where (a.idfsStatisticAreaType <> b.idfsStatisticAreaType) 
						or(a.idfsStatisticAreaType is not null and b.idfsStatisticAreaType is null)
						or(a.idfsStatisticAreaType is null and b.idfsStatisticAreaType is not null)
				
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, idfObjectTable, idfColumn, 
						idfObject, idfObjectDetail, 
						strOldValue, strNewValue)
					select @idfDataAuditEvent,@idfObjectTable_tlbAggrSettings, 4578200000000,
						@idfObject,null,
						a.idfsStatisticPeriodType,b.idfsStatisticPeriodType 
					from @tlbAggrSettings_BeforeEdit a  inner join @tlbAggrSettings_AfterEdit b on a.SiteId = b.SiteId 
						and a.idfsAggrCaseType = b.idfsAggrCaseType and a.idfCustomizationPackage = b.idfCustomizationPackage
					where (a.idfsStatisticPeriodType <> b.idfsStatisticPeriodType) 
						or(a.idfsStatisticPeriodType is not null and b.idfsStatisticPeriodType is null)
						or(a.idfsStatisticPeriodType is null and b.idfsStatisticPeriodType is not null)
				END
				--DataAudit-- 
            END
            ELSE
            BEGIN
                --INSERT INTO @SuppressSelect
                --EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tstAggrSetting',
                --                                  @AggregateDiseaseReportTypeId OUTPUT;

                INSERT INTO dbo.tstAggrSetting
                (
                    idfsAggrCaseType,
                    idfCustomizationPackage,
					idfsSite,
                    idfsStatisticAreaType,
                    idfsStatisticPeriodType,
                    AuditCreateDTM,
                    AuditCreateUser,
                    SourceSystemKeyValue,
                    SourceSystemNameID
                )
                VALUES
                (@AggregateDiseaseReportTypeId,
                 @CustomizationPackageId,
				 @SiteId,
                 @StatisticalAreaTypeId,
                 @StatisticalPeriodTypeId,
                 GETDATE(),
                 @AuditUserName,
                 '[{"idfsAggrCaseType":' + CAST(@AggregateDiseaseReportTypeId AS NVARCHAR(300))
                 + ',"idfCustomizationPackage":' + CAST(@CustomizationPackageId AS NVARCHAR(300)) + '}]',
                 10519001
                );

				
				--Data Audit--
				-- tauDataAuditEvent Event Type - Create 
				set @idfsDataAuditEventType =10016001;
						-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbAggrSettings, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
					values ( @idfDataAuditEvent, @idfObjectTable_tlbAggrSettings, @idfObject)
				--Data Audit--

                UPDATE @EventsTemp
                SET ObjectId = @AggregateDiseaseReportTypeId
                WHERE ObjectId = 0;
            END

            DELETE FROM @AggregateSettingRecordsTemp
            WHERE AggregateDiseaseReportTypeId = @AggregateDiseaseReportTypeId;
        END

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                            @EventTypeId,
                                            @EventUserId,
                                            @EventObjectId,
                                            @EventDiseaseId,
                                            @EventSiteId,
                                            @EventInformationString,
                                            @EventLoginSiteId,
                                            @EventLocationId,
                                            @AuditUserName;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        SELECT @ReturnCode 'ReturnCode',
               @ReturnMessage 'ReturnMessage';
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_DEL]...';


GO
--=================================================================================================
-- Name: USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_DEL
--
-- Description: Removes sample type derivative matrix record
--							
-- Author:		unknown
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Leo Tracchia		02/22/2023 Added data audit logic for deletes
--
-- Test Code:
-- exec USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_DEL 6618200000000, 0
--=================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_DEL]
(
	@idfDerivativeForSampleType BIGINT,
	@deleteAnyway BIT = 0,
	@SiteId BIGINT,
    @UserId BIGINT
)

AS

DECLARE @returnMsg					VARCHAR(MAX) = 'SUCCESS';
DECLARE @returnCode					BIGINT = 0;

BEGIN
	BEGIN TRY

		DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );
		
		--Begin: Data Audit--	

			DECLARE @idfUserId BIGINT = @UserId;
			DECLARE @idfSiteId BIGINT = @SiteId;
			DECLARE @idfsDataAuditEventType bigint = NULL;
			DECLARE @idfsObjectType bigint = 10017036; -- Need to review the value --
			DECLARE @idfObject bigint = @idfDerivativeForSampleType;
			DECLARE @idfObjectTable_trtDerivativeForSampleType bigint = 740850000000;					
			DECLARE @idfDataAuditEvent bigint = NULL;	

			-- tauDataAuditEvent Event Type - Delete 
			set @idfsDataAuditEventType = 10016002;
			
		--End: Data Audit--	
		
		UPDATE trtDerivativeForSampleType SET intRowStatus = 1 WHERE idfDerivativeForSampleType = @idfDerivativeForSampleType
		
		--Begin: Data Audit, trtDiagnosis--				

			-- insert record into tauDataAuditEvent - 
			INSERT INTO @SuppressSelect
			EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_trtDerivativeForSampleType, @idfDataAuditEvent OUTPUT

			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject)
			VALUES (@idfDataAuditEvent, @idfObjectTable_trtDerivativeForSampleType, @idfObject)

		--End: Data Audit, trtDiagnosis--		

		SELECT @returnCode 'returnCode', @returnMsg 'returnMessage'

	END TRY
	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_SET]...';


GO
-- ================================================================================================
-- Name: USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_SET
--
-- Description:	Creates/updates a sample type/derivative type matrix.
--
-- Author: Unknown
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     07/13/2022 Added site alert logic and documentation header.
-- Leo Tracchia		02/22/2023 Added new logic for data auditing
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_SAMPLETYPEDERIVATIVEMATRIX_SET]
(
    @idfDerivativeForSampleType BIGINT = NULL,
    @idfsSampleType BIGINT,
    @idfsDerivativeType BIGINT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS

DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
        @ReturnCode BIGINT = 0,
        @EventId BIGINT = -1,
        @EventSiteId BIGINT = @SiteId,
        @EventUserId BIGINT = @UserId,
        @EventDiseaseId BIGINT = NULL,
        @EventLocationId BIGINT = @LocationId,
        @EventInformationString NVARCHAR(MAX) = NULL,
        @EventLoginSiteId BIGINT = @SiteId;

DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage NVARCHAR(MAX)
);

--Data Audit--

	DECLARE @idfUserId BIGINT = NULL;
	DECLARE @idfSiteId BIGINT = NULL;
	DECLARE @idfsDataAuditEventType bigint = NULL;
	DECLARE @idfsObjectType bigint = 10017036; -- Need to review the value --
	DECLARE @idfObject bigint = @idfDerivativeForSampleType;
	DECLARE @idfObjectTable_trtDerivativeForSampleType bigint = 740850000000;		
	DECLARE @idfDataAuditEvent bigint = NULL;		

	DECLARE @trtDerivativeForSampleType_BeforeEdit TABLE
	(
		idfDerivativeForSampleType bigint,
        idfsSampleType bigint,
        idfsDerivativeType bigint,
        intRowStatus int                
	)

	DECLARE @trtDerivativeForSampleType_AfterEdit TABLE
	(
		idfDerivativeForSampleType bigint,
        idfsSampleType bigint,
        idfsDerivativeType bigint,
        intRowStatus int                
	)

	-- Get and Set UserId and SiteId
	SELECT @idfUserId = userInfo.UserId, @idfSiteId = UserInfo.SiteId FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo

--Data Audit--

BEGIN  
	
	BEGIN TRY
        IF ( -- DUPLICATE CHECK
               EXISTS
        (
            SELECT idfDerivativeForSampleType
            FROM dbo.trtDerivativeForSampleType
            WHERE idfsDerivativeType = @idfsDerivativeType
                  AND idfsSampleType = @idfsSampleType
                  AND intRowStatus = 0
        )
               AND @idfDerivativeForSampleType IS NULL
           )
           OR (
                  EXISTS
        (
            SELECT idfDerivativeForSampleType
            FROM dbo.trtDerivativeForSampleType
            WHERE idfsDerivativeType = @idfsDerivativeType
                  AND idfsSampleType = @idfsSampleType
                  AND idfDerivativeForSampleType <> @idfDerivativeForSampleType
                  AND intRowStatus = 0
        )
                  AND @idfDerivativeForSampleType IS NOT NULL
              )
        BEGIN
            SELECT @ReturnCode = 1;
            SELECT @ReturnMessage = 'DOES EXIST';
            SELECT @idfDerivativeForSampleType =
            (
                SELECT idfDerivativeForSampleType
                FROM dbo.trtDerivativeForSampleType
                WHERE idfsDerivativeType = @idfsDerivativeType
                      AND idfsSampleType = @idfsSampleType
                      AND intRowStatus = 0
            );
        END
        ELSE IF ( -- UPDATE
                    EXISTS
             (
                 SELECT idfDerivativeForSampleType
                 FROM dbo.trtDerivativeForSampleType
                 WHERE idfsDerivativeType = @idfsDerivativeType
                       AND idfsSampleType = @idfsSampleType
                       AND intRowStatus = 1
             )
                    AND @idfDerivativeForSampleType IS NULL
                )
        BEGIN
            UPDATE dbo.trtDerivativeForSampleType
            SET intRowStatus = 0, 
                AuditUpdateDTM = GETDATE(), 
                AuditUpdateUser = @AuditUserName 
            WHERE idfsDerivativeType = @idfsDerivativeType
                  AND idfsSampleType = @idfsSampleType
                  AND intRowStatus = 1;

            SELECT @idfDerivativeForSampleType =
            (
                SELECT idfDerivativeForSampleType
                FROM dbo.trtDerivativeForSampleType
                WHERE idfsDerivativeType = @idfsDerivativeType
                      AND idfsSampleType = @idfsSampleType
                      AND intRowStatus = 1
            );
        END
        ELSE IF ( -- UPDATE
                    EXISTS
             (
                 SELECT idfDerivativeForSampleType
                 FROM dbo.trtDerivativeForSampleType
                 WHERE idfsDerivativeType = @idfsDerivativeType
                       AND idfsSampleType = @idfsSampleType
                       AND idfDerivativeForSampleType = @idfDerivativeForSampleType
                       AND intRowStatus = 0
             )
                    AND @idfDerivativeForSampleType IS NOT NULL
                )
        BEGIN

			--DataAudit-- 
				
				--  tauDataAuditEvent  Event Type - Edit 
				set @idfsDataAuditEventType = 10016003;
			
				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfDerivativeForSampleType, @idfObjectTable_trtDerivativeForSampleType, @idfDataAuditEvent OUTPUT

			--DataAudit-- 

			INSERT INTO @trtDerivativeForSampleType_BeforeEdit (
				idfDerivativeForSampleType, 
				idfsSampleType,
				idfsDerivativeType,
				intRowStatus)
			SELECT 
				idfDerivativeForSampleType, 
				idfsSampleType,
				idfsDerivativeType,
				intRowStatus			
				FROM trtDerivativeForSampleType WHERE idfDerivativeForSampleType = @idfDerivativeForSampleType;

            UPDATE dbo.trtDerivativeForSampleType
            SET idfsDerivativeType = @idfsDerivativeType,
                idfsSampleType = @idfsSampleType, 
                AuditUpdateDTM = GETDATE(), 
                AuditUpdateUser = @AuditUserName
            WHERE idfDerivativeForSampleType = @idfDerivativeForSampleType
                  AND intRowStatus = 0;

			INSERT INTO @trtDerivativeForSampleType_AfterEdit (
				idfDerivativeForSampleType, 
				idfsSampleType,
				idfsDerivativeType,
				intRowStatus)
			SELECT 
				idfDerivativeForSampleType, 
				idfsSampleType,
				idfsDerivativeType,
				intRowStatus			
				FROM trtDerivativeForSampleType WHERE idfDerivativeForSampleType = @idfDerivativeForSampleType;

			--idfsSampleType
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_trtDerivativeForSampleType, 
				740870000000,
				a.idfDerivativeForSampleType,
				null,
				a.idfsSampleType,
				b.idfsSampleType 
			from @trtDerivativeForSampleType_BeforeEdit a  inner join @trtDerivativeForSampleType_AfterEdit b on a.idfDerivativeForSampleType = b.idfDerivativeForSampleType
			where (a.idfsSampleType <> b.idfsSampleType) 
				or(a.idfsSampleType is not null and b.idfsSampleType is null)
				or(a.idfsSampleType is null and b.idfsSampleType is not null)

			--idfsDerivativeType
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_trtDerivativeForSampleType, 
				740880000000,
				a.idfDerivativeForSampleType,
				null,
				a.idfsDerivativeType,
				b.idfsDerivativeType 
			from @trtDerivativeForSampleType_BeforeEdit a  inner join @trtDerivativeForSampleType_AfterEdit b on a.idfDerivativeForSampleType = b.idfDerivativeForSampleType
			where (a.idfsDerivativeType <> b.idfsDerivativeType) 
				or(a.idfsDerivativeType is not null and b.idfsDerivativeType is null)
				or(a.idfsDerivativeType is null and b.idfsDerivativeType is not null)

        END
        ELSE
        BEGIN --INSERT
            INSERT INTO @SuppressSelect
            EXEC dbo.USP_GBL_NEXTKEYID_GET 'trtDerivativeForSampleType',
                                           @idfDerivativeForSampleType OUTPUT;

			--Data Audit--

				-- tauDataAuditEvent Event Type - Create 
				set @idfsDataAuditEventType = 10016001;
			
				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfDerivativeForSampleType, @idfObjectTable_trtDerivativeForSampleType, @idfDataAuditEvent OUTPUT

			--Data Audit--

            INSERT INTO dbo.trtDerivativeForSampleType
            (
                idfDerivativeForSampleType,
                idfsSampleType,
                idfsDerivativeType,
                intRowStatus,
                AuditCreateDTM,
                AuditCreateUser
            )
            VALUES
            (@idfDerivativeForSampleType, @idfsSampleType, @idfsDerivativeType, 0, GETDATE(), @AuditUserName);

			--Data Audit--							

				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_trtDerivativeForSampleType, @idfDerivativeForSampleType)
			
			--Data Audit--

            INSERT INTO dbo.trtDerivativeForSampleTypeToCP
            (
                idfDerivativeForSampleType,
                idfCustomizationPackage,
                AuditCreateDTM,
                AuditCreateUser
            )
            VALUES
            (@idfDerivativeForSampleType, dbo.FN_GBL_CustomizationPackage_GET(), GETDATE(), @AuditUserName);
        END

        INSERT INTO @SuppressSelect 
        EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                        @EventTypeId,
                                        @EventUserId,
                                        @idfDerivativeForSampleType,
                                        @EventDiseaseId,
                                        @EventSiteId,
                                        @EventInformationString,
                                        @EventLoginSiteId,
                                        @EventLocationId,
                                        @AuditUserName;

        SELECT @ReturnCode 'ReturnCode',
               @ReturnMessage 'ReturnMessage',
               @idfDerivativeForSampleType 'idfDerivativeForSampleType';
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_DataAuditEvent_Update]...';


GO
-- =============================================
-- Author:		Steven Verner
-- Create date: 02/28/2022
-- Description:	Inserts update events in the tauDataAuditDetailUpdate table.
-- =============================================
ALTER PROCEDURE USP_GBL_DataAuditEvent_Update
	-- Add the parameters for the stored procedure here
	 @idfUserID BIGINT
	,@JSONUpdates NVARCHAR(MAX)
AS
BEGIN
	SET NOCOUNT ON;
	
	DECLARE @returnMsg					VARCHAR(MAX) = 'SUCCESS';
	DECLARE @returnCode					BIGINT = 0;
	DECLARE @event BIGINT 

	BEGIN TRY
		-- If the json object is null, there's nothing to do...
		IF(@JSONUpdates IS NULL ) RETURN 0

		-- Get the current event id for this user from the local context table...
		EXEC USSP_GBL_DataAuditEvent_GET @idfUserID, @event OUTPUT
	
		-- insert the update records to the data audit update table...
		INSERT INTO tauDataAuditDetailUpdate(idfDataAuditEvent,idfObjectTable, idfColumn,idfObject,idfObjectDetail, strNewValue )
		SELECT @event, idfObjectTable,idfColumn,idfObject,idfObjectDetail, strValue
		FROM OPENJSON(@JSONUpdates)
		WITH(
			idfObjectTable BIGINT,
			idfColumn BIGINT,
			idfObject BIGINT,
			idfObjectDetail BIGINT,
			strValue NVARCHAR(4000) )

		SELECT @returnCode 'ReturnCode', @returnMsg 'ReturnMessage';
	END TRY
	BEGIN CATCH
		SET @returnCode = ERROR_NUMBER()
		SET @returnMsg = 
		'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) 
		+ ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY())
		+ ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE())
		+ ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '')
		+ ' ErrorLine: ' +  CONVERT(VARCHAR, ISNULL(ERROR_LINE(), ''))
		+ ' ErrorMessage: '+ ERROR_MESSAGE()

		SELECT @returnCode 'ReturnCode', @returnMsg 'ReturnMessage'
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_EMPLOYEE_GROUP_GETList]...';


GO




-- ============================================================================
-- Name: USP_GBL_EMPLOYEE_GROUP_GETList
-- Description:	Get employee group list for verifying user permissions.
--                      
-- Author: Stephen Long
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -----------------------------------------------
-- Stephen Long     04/30/2018 Initial release.
-- Stephen Long     10/03/2019 Stored procedure clean up.
-- Stephen Long		03/10/2020 Resolved duplicate role appearances
-- Mark Wilson		01/30/2021 Updated to filter intRowStatus = 1
-- Mark Wilson		05/17/2022 Updated to find idfsSite for CDR
-- Mani Govindarajan 02/4/2023 Commented get user group from CDR.
-- Mani Govindarajan 03/02/2023 Added intRowStatus Condition on groupName
-- exec USP_GBL_EMPLOYEE_GROUP_GETList 'en'
-- ============================================================================
ALTER PROCEDURE [dbo].[USP_GBL_EMPLOYEE_GROUP_GETList] (
@LangID NVARCHAR(50),
@idfsSite BIGINT
)
AS
BEGIN
	DECLARE @returnMsg VARCHAR(MAX) = 'SUCCESS';
	DECLARE @returnCode BIGINT = 0;
	--DECLARE @SupressSelect TABLE (
	--	retrunCode INT,
	--	returnMessage VARCHAR(200)
	--	)

	BEGIN TRY

---------------------------------------------------------------------------------
		--DECLARE @CDRSite BIGINT -- idfsSite for CDR
		--SELECT 
		--	@CDRSite = S.idfsSite
		--FROM dbo.tstSite S
		--INNER JOIN dbo.trtBaseReference SR ON SR.idfsBaseReference = S.idfsSiteType
		--WHERE S.intRowStatus = 0 
		--AND SR.strDefault = 'CDR'
		--		order by s.idfsSite desc

---------------------------------------------------------------------------------

		SELECT eg.idfEmployeeGroup,
			eg.idfsEmployeeGroupName,
			ISNULL(groupName.name, eg.strName) AS strName,
			eg.strDescription
		FROM dbo.tlbEmployeeGroup eg

		LEFT JOIN FN_GBL_ReferenceRepair_GET(@LangID, 19000022) groupName
			ON groupName.idfsReference = eg.idfsEmployeeGroupName
		WHERE 
			eg.idfEmployeeGroup <> - 1
			AND eg.intRowStatus = 0
			and groupName.intRowStatus=0
			AND		((eg.idfsSite =  @idfsSite OR @idfsSite IS NULL)
			AND eg.idfsSite != -506 and eg.idfsEmployeeGroupName != -506
			--OR (eg.idfsSite = @CDRSite)
			)

	    ORDER BY strName;

	--	SELECT @returnCode,
		--	@returnMsg;
	END TRY

	BEGIN CATCH
		--BEGIN
			--SET @returnCode = ERROR_NUMBER();
			--SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();

			--SELECT @returnCode,
				--@returnMsg;
		--END
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_PIN_Audit_Set]...';


GO
-- =============================================
-- Author:		Steven L. Verner
-- Create date: 11/12/2022
-- Description:	Adds an entry into the PIN audit table when a user attempts to access the PIN system.
-- =============================================
ALTER PROCEDURE USP_PIN_Audit_Set 
	-- Add the parameters for the stored procedure here
	 @strPIN CHAR(11)
	,@idfUser BIGINT = NULL
	,@idfsSite BIGINT = NULL
	,@idfHumanCase BIGINT = NULL
	,@idfH0Form BIGINT = NULL
	,@datEIDSSAccessAttempt DATETIME
	,@datPINAccessAttempt DATETIME 
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE 
	 @ReturnMsg NVARCHAR(MAX) = 'SUCCESS'
	,@ReturnCode BIGINT = 0
	,@idfPINAudit BIGINT = 0

	BEGIN TRY	
			BEGIN TRANSACTION

			EXEC dbo.USP_GBL_NEXTKEYID_GET 'tauPINAuditEvent'
				,@idfPINAudit OUTPUT;

			INSERT INTO tauPINAuditEvent (
				 idfPINAuditEvent
				,strPIN
				,idfUserID
				,idfsSite
				,idfHumanCase
				,idfH0Form
				,datEIDSSAccessAttempt
				,datPINAccessAttempt)
			VALUES (
				 @idfPINAudit
				,@strPIN
				,@idfUser
				,@idfsSite
				,@idfHumanCase
				,@idfH0Form
				,@datEIDSSAccessAttempt
				,@datPINAccessAttempt
			)
			
			IF @@TRANCOUNT > 0
			 COMMIT;
			
			SELECT @ReturnCode AS ReturnCode, @ReturnMsg AS ReturnMessage

    END TRY
    BEGIN CATCH
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + 
						 ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + 
						 ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + 
						 ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + 
						 CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE()
		SET @returnCode = ERROR_NUMBER()
		SELECT @ReturnCode AS ReturnCode, @ReturnMsg AS ReturnMessage
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_BASEREFERENCE_Filtered_GETList]...';


GO
-- ============================================================================
-- Name: USP_REF_BASEREFERENCE_Filtered_GETList
--
-- Description:	Get the reference types for Base Reference Editor.
--
-- Author: Mark Wilson
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -----------------------------------------------
-- Mark Wilson		07/15/2022 new sp based on USP_REF_BASEREFERENCE_GETList
-- Doug Albanese	12/01/2022 Added LOINC on the return
-- Stephen Long     01/18/2023 Fix so _ and % characters will return in the 
--                             filter.
-- Stephen Long     02/27/2023 Added KeyId field.
--
/*

exec USP_REF_BASEREFERENCE_Filtered_GETList 19000076, 'en-US', @PageSize=200

*/
-- ============================================================================
ALTER PROCEDURE [dbo].[USP_REF_BASEREFERENCE_Filtered_GETList]
	 @idfsReferenceType	   BIGINT
	,@langID			   NVARCHAR(50)
	,@advancedSearch	   NVARCHAR(100) = NULL
	,@pageNo			   INT = 1
	,@pageSize			   INT = 10 
	,@sortColumn		   NVARCHAR(30) = 'strName' 
	,@sortOrder			   NVARCHAR(4) = 'asc'

AS
BEGIN	
	BEGIN TRY
		DECLARE @firstRec INT
		DECLARE @lastRec INT
		DECLARE @t TABLE
		( 
			idfsBaseReference BIGINT, 
			idfsReferenceType BIGINT, 
			strDefault		  NVARCHAR(2000), 
			strName			  NVARCHAR(2000),
			intHACode		  INT,
			strHACode		  NVARCHAR(4000),
			strHACodeNames	  NVARCHAR(4000),
			intOrder		  INT,
			LOINC			  NVARCHAR(200)
		)

		SET @firstRec = (@pageNo-1)* @pagesize
		SET @lastRec = (@pageNo*@pageSize+1)
		
		IF( @advancedSearch IS NOT NULL )
		BEGIN
			SET @advancedSearch = REPLACE(@advancedSearch, '%', '[%]');
			SET @advancedSearch = REPLACE(@advancedSearch, '_', '[_]');

			INSERT INTO @T
			SELECT * FROM
			(
			   SELECT 
				  br.idfsBaseReference, 
				  br.idfsReferenceType, 
				  br.strDefault, 
				  brs.[name] AS strName,
				  br.intHACode, 
				  dbo.FN_GBL_HACode_ToCSV(@LangID,br.intHACode) AS strHACode,			
				  dbo.FN_GBL_HACodeNames_ToCSV(@LangID,br.intHACode) AS strHACodeNames,
				  br.intOrder,
				  LCM.LOINC_NUM AS LOINC
			   FROM  dbo.trtBaseReference br
			   JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @idfsReferenceType) brS ON br.idfsBaseReference = brs.idfsReference 
			   LEFT JOIN LOINCEidssMapping LCM ON LCM.idfsBaseReference = br.idfsBaseReference
			   WHERE 
				   br.intRowStatus = 0 AND brs.intRowStatus = 0 
				   AND br.idfsBaseReference NOT IN (19000146,19000011,19000019,19000537,19000529,19000530,19000531,19000532,19000533,19000534,19000535,19000125,19000123,19000122,
													19000143,19000050,19000126,19000121,19000075,19000124,19000012,19000164,19000019,19000503,19000530,19000510,19000506,19000505,
													19000509,19000511,19000508,19000507,19000022,19000131,19000070,19000066,19000071,19000069,19000029,19000032,19000101,19000525,
													19000033,19000532,19000534,19000533,19000152,19000056,19000060,19000109,19000062,19000045,19000046,19000516,19000074,19000147,
													19000130,19000535,19000531,19000087,19000079,19000529,19000119,19000524,19000084,19000519,19000166,19000086,19000090,19000141,
													19000140)
				
			) AS S
			WHERE 
			( 
				strDefault LIKE '%' + @advancedSearch + '%' OR
				strName LIKE '%' + @advancedSearch + '%' OR
				strHACode LIKE '%' + @advancedSearch + '%' OR 
				strHACodeNames LIKE '%' + @advancedSearch + '%' 
			)
		END ELSE
			INSERT INTO @T
			SELECT 
				br.[idfsBaseReference], 
				br.[idfsReferenceType], 
				br.[strDefault], 
				brs.name AS strName,
				br.[intHACode], 
				dbo.FN_GBL_HACode_ToCSV(@LangID,br.[intHACode]) AS strHACode,			
				dbo.FN_GBL_HACodeNames_ToCSV(@LangID,br.[intHACode]) AS strHACodeNames,
				br.[intOrder],
				LCM.LOINC_NUM AS LOINC
			FROM  dbo.trtBaseReference br
			JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @idfsReferenceType) brS ON br.idfsBaseReference = brs.idfsReference 
			LEFT JOIN LOINCEidssMapping LCM ON LCM.idfsBaseReference = br.idfsBaseReference
			WHERE br.[idfsReferenceType] = @idfsReferenceType 
			   AND br.intRowStatus = 0 
			   AND brs.intRowStatus = 0 
			   AND br.idfsBaseReference NOT IN (19000146,19000011,19000019,19000537,19000529,19000530,19000531,19000532,19000533,19000534,19000535,19000125,19000123,19000122,
												 19000143,19000050,19000126,19000121,19000075,19000124,19000012,19000164,19000019,19000503,19000530,19000510,19000506,19000505,
												 19000509,19000511,19000508,19000507,19000022,19000131,19000070,19000066,19000071,19000069,19000029,19000032,19000101,19000525,
												 19000033,19000532,19000534,19000533,19000152,19000056,19000060,19000109,19000062,19000045,19000046,19000516,19000074,19000147,
												 19000130,19000535,19000531,19000087,19000079,19000529,19000119,19000524,19000084,19000519,19000166,19000086,19000090,19000141,
												 19000140);

		WITH CTEResults AS
		(
			SELECT ROW_NUMBER() OVER ( ORDER BY 
				CASE WHEN @sortColumn = 'idfsBaseReference' AND @SortOrder = 'asc' THEN idfsBaseReference END ASC,
				CASE WHEN @sortColumn = 'idfsBaseReference' AND @SortOrder = 'desc' THEN idfsBaseReference END DESC,
				CASE WHEN @sortColumn = 'idfsReferenceType' AND @SortOrder = 'asc' THEN idfsReferenceType END ASC,
				CASE WHEN @sortColumn = 'idfsReferenceType' AND @SortOrder = 'desc' THEN idfsReferenceType END DESC,
				CASE WHEN @sortColumn = 'strdefault' AND @SortOrder = 'asc' THEN strdefault END ASC,
				CASE WHEN @sortColumn = 'strdefault' AND @SortOrder = 'desc' THEN strdefault END DESC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'asc' THEN strName END ASC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'desc' THEN strName END DESC,
				CASE WHEN @sortColumn = 'intHACode' AND @SortOrder = 'asc' THEN intHACode END ASC,
				CASE WHEN @sortColumn = 'intHACode' AND @SortOrder = 'desc' THEN intHACode END DESC,
				CASE WHEN @sortColumn = 'strHACode' AND @SortOrder = 'asc' THEN strHACode END ASC,
				CASE WHEN @sortColumn = 'strHACode' AND @SortOrder = 'desc' THEN strHACode END DESC,
				CASE WHEN @sortColumn = 'strHACodeNames' AND @SortOrder = 'asc' THEN strHACodeNames END ASC,
				CASE WHEN @sortColumn = 'strHACodeNames' AND @SortOrder = 'desc' THEN strHACodeNames END DESC,
				CASE WHEN @sortColumn = 'intorder' AND @SortOrder = 'asc' THEN intOrder END ASC,
				CASE WHEN @sortColumn = 'intorder' AND @SortOrder = 'desc' THEN intOrder END DESC,
				CASE WHEN @sortColumn = 'LOINC' AND @SortOrder = 'asc' THEN LOINC END ASC,
				CASE WHEN @sortColumn = 'LOINC' AND @SortOrder = 'desc' THEN LOINC END DESC
				,IIF( @sortColumn = 'intOrder',strName,NULL) ASC
		) AS ROWNUM,		
		COUNT(*) OVER () AS 
				TotalRowCount,
				idfsBaseReference AS KeyId, 
				idfsBaseReference, 
				idfsReferenceType, 
				strDefault, 
				strName,
				intHACode, 
				strHACode,			
				strHACodeNames,
				intOrder,
				LOINC
			FROM @T
		)
			SELECT
				TotalRowCount,
				idfsBaseReference AS KeyId, 
				idfsBaseReference, 
				idfsReferenceType, 
				strDefault, 
				strName,
				intHACode, 
				strHACode,			
				strHACodeNames,
				intOrder,
				LOINC,
				TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
				CurrentPage = @pageNo 
		FROM CTEResults
		WHERE RowNum > @firstRec AND RowNum < @lastRec 	
	END TRY
	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_DIAGNOSISREFERENCE_DEL]...';


GO
--=================================================================================================
-- Name: USP_REF_DIAGNOSISREFERENCE_DEL
--
-- Description: Removes disease reference from active list of diseases
--							
-- Author:		Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		09/26/2018 Initial Release
-- Ricky Moss		12/12/2018 Removed return codes
-- Ricky Moss		02/09/2019 Added removal of tests, sample type and penside tests from disease
-- Ricky Moss		03/31/2019 Remove delete Anyway parameter
-- Leo Tracchia		11/25/2020 Added @forceDelete parameter as optional
-- Doug Albanese	08/03/2021 Added the deletion routine to deactivate the record tied to the 
--                             base reference
-- Stephen Long     10/31/2022 Added site alert logic.
-- Leo Tracchia		02/20/2023 Added data audit logic for deletes
--
-- Test Code:
-- exec USP_REF_DIAGNOSISREFERENCE_DEL 6618200000000, 0
--=================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_DIAGNOSISREFERENCE_DEL]
(
     @IdfsDiagnosis BIGINT,
    @ForceDelete bit = 0,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );

        IF (
               (
                   NOT EXISTS
        (
            SELECT idfAggrDiagnosticActionMTX
            FROM dbo.tlbAggrDiagnosticActionMTX
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfAggrHumanCaseMTX
            FROM dbo.tlbAggrHumanCaseMTX
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfAggrDiagnosticActionMTX
            FROM dbo.tlbAggrDiagnosticActionMTX
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfAggrProphylacticActionMTX
            FROM dbo.tlbAggrProphylacticActionMTX
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfAggrVetCaseMTX
            FROM dbo.tlbAggrVetCaseMTX
            WHERE idfsSpeciesType = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfCampaign
            FROM dbo.tlbCampaignToDiagnosis
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfCampaignToDiagnosis
            FROM dbo.tlbCampaignToDiagnosis
            WHERE idfsSpeciesType = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfMonitoringSession
            FROM dbo.tlbMonitoringSessionToDiagnosis
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfMonitoringSessionToDiagnosis
            FROM dbo.tlbMonitoringSessionToDiagnosis
            WHERE idfsSpeciesType = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfMonitoringSessionSummary
            FROM dbo.tlbMonitoringSessionSummaryDiagnosis
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfPensideTest
            FROM dbo.tlbPensideTest
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfTesting
            FROM dbo.tlbTesting
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfTestValidation
            FROM dbo.tlbTestValidation
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfVaccination
            FROM dbo.tlbVaccination
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfsVSSessionSummaryDiagnosis
            FROM dbo.tlbVectorSurveillanceSessionSummaryDiagnosis
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfDiagnosisAgeGroupToDiagnosis
            FROM dbo.trtDiagnosisAgeGroupToDiagnosis
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
                   AND NOT EXISTS
        (
            SELECT idfDiagnosisToGroupForReportType
            FROM dbo.trtDiagnosisToGroupForReportType
            WHERE idfsDiagnosis = @IdfsDiagnosis
        )
                   AND NOT EXISTS
        (
            SELECT idfFFObjectToDiagnosisForCustomReport
            FROM dbo.trtFFObjectToDiagnosisForCustomReport
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0
        )
               )
               or @ForceDelete = 1
           )
        BEGIN
			
			--Begin: Data Audit--	

				DECLARE @idfUserId BIGINT = @UserId;
				DECLARE @idfSiteId BIGINT = @SiteId;
				DECLARE @idfsDataAuditEventType bigint = NULL;
				DECLARE @idfsObjectType bigint = 10017036; -- Need to review the value --
				DECLARE @idfObject bigint = @IdfsDiagnosis;
				DECLARE @idfObjectTable_trtDiagnosis bigint = 75840000000;		
				DECLARE @idfObjectTable_trtBaseReference bigint = 75820000000;
				DECLARE @idfObjectTable_trtStringNameTranslation bigint = 75990000000;
				DECLARE @idfDataAuditEvent bigint = NULL;	

				-- tauDataAuditEvent Event Type - Delete 
				set @idfsDataAuditEventType = 10016002;
			
			--End: Data Audit--	

            UPDATE dbo.trtDiagnosis
            SET intRowStatus = 1
            WHERE idfsDiagnosis = @IdfsDiagnosis
                  AND intRowStatus = 0

			--Begin: Data Audit, trtDiagnosis--				

				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_trtDiagnosis, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_trtDiagnosis, @idfObject)

			--End: Data Audit, trtDiagnosis--
				  
            UPDATE dbo.trtBaseReference
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @IdfsDiagnosis
                  AND intRowStatus = 0

			--Begin: Data Audit, trtBaseReference--				

				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_trtBaseReference, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_trtBaseReference, @idfObject)

			--End: Data Audit, trtBaseReference--

            UPDATE dbo.trtStringNameTranslation
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @IdfsDiagnosis

			--Begin: Data Audit, trtStringNameTranslation--				

				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_trtStringNameTranslation, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_trtStringNameTranslation, @idfObject)

			--End: Data Audit, trtStringNameTranslation--

   --         UPDATE dbo.trtBaseReference
   --         SET intRowStatus = 1,
   --             AuditUpdateDTM = GETDATE(),
   --             AuditUpdateUser = @AuditUserName
   --         WHERE idfsBaseReference = @IdfsDiagnosis		

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                           @EventTypeId,
                                           @UserId,
                                           @IdfsDiagnosis,
                                           NULL,
                                           @SiteId,
                                           NULL,
                                           @SiteId,
                                           @LocationId,
                                           @AuditUserName;
        END
        ELSE
        BEGIN
            SELECT @ReturnCode = -1;
            SELECT @ReturnMessage = 'IN USE';
        END

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_DIAGNOSISREFERENCE_SET]...';


GO
-- ================================================================================================
-- Name: USP_REF_DIAGNOSISREFERENCE_SET_MCW
--
-- Description:	Check to see if a diagnosis currently exists by name
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		10/28/2018 Initial release.
-- Ricky Moss		02/10/2019 Checks to see when updating a case classification that the name 
--							   does not exists in another reference and updates English value
-- Ricky Moss		03/13/2020 Refactor to check duplicates and resolution for Bug 6254
-- Ricky Moss		03/17/2020 Refactor to check duplicates and resolution for Bug 6254
-- Ricky Moss		03/19/2020 Resolved does and resolution for Bug 6254
-- Ricky Moss		03/20/2020 Refactored stored procedure to make no changes if disease currently 
--							   exists
-- Ricky Moss		06/05/2020 Reactivation of inactive record if a disease is being created with 
--							   an existing name
-- Ricky Moss		06/11/2020 Added Using Types to check for duplicates
-- Doug Albanese	04/12/2021 Refactored to use two branches and incorporate 
--							   USSP_GBL_Basereference_Set
-- Doug Albanese	04/14/2021 Corrected a Begin/Commit Transaction block problem.
-- Doug Albanese	04/14/2021 Added Penside Tests, Lab Tests, and Sample Type save routines
-- Stephen Long     05/30/2021 Added default permissions for new disease; business rule described 
--							   in use case SAUC62.
-- Doug Albanese	08/02/2021 Added duplication detection
-- Doug Albanese	08/03/2021 Modified duplication detection to handle the existence of 
--                             previously deleted items
-- Mark Wilson		08/03/2021 Modified to call USP_GBL_BaseReference_SET and to include Using 
--                             Type in duplicate checks
-- Doug Albanese	10/25/2021 Changes discussed with Mark Wilson to eliminate a duplication issue 
--                             found on a join
-- Stephen Long     07/18/2022 Added site alert logic.
-- Leo Tracchia		02/20/2023 Added data audit logic for inserts and updates	
--
-- exec USP_REF_DIAGNOSISREFERENCE_SET null, 'Blackerleg', 'Darkbrownleg', null, null, 2, 10020002, null, null, null, 0, 0, 'en-US', 0
-- exec USP_REF_DIAGNOSISREFERENCE_SET 58218970000129, 'Canine Distemper 4', 'Canine Distemper 4', 'CD09.5', null, 32, 10020002, null, '58218970000050', '9844470000000,9844480000000,9844490000000,58218970000051', 0, 0, 'en-US', 0
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_DIAGNOSISREFERENCE_SET]
(
    @idfsDiagnosis BIGINT = NULL,
    @strDefault VARCHAR(200),
    @strName NVARCHAR(200),
    @strOIECode NVARCHAR(200),
    @strIDC10 NVARCHAR(200),
    @intHACode INT,
    @idfsUsingType BIGINT,
    @strPensideTest NVARCHAR(MAX),
    @strLabTest NVARCHAR(MAX),
    @strSampleType NVARCHAR(MAX),
    @blnZoonotic BIT = 0,
    @blnSyndrome BIT = 0,
    @LangId NVARCHAR(50),
    @intOrder INT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    DECLARE @ReturnCode INT
        = 0,
            @ReturnMessage NVARCHAR(max) = 'SUCCESS',
            @existingDefault BIGINT,
            @existingName BIGINT,
            @idfTestForDisease BIGINT,
            @idfsTestName BIGINT,
            @idfPensideTestForDisease BIGINT,
            @idfsPensideTestName BIGINT,
            @idfMaterialForDisease BIGINT,
            @idfsSampleType BIGINT,
            @DuplicateDefault INT = 0, -- updated to capture 0 or 1. 1 indicates a duplicate and will not execute the set.
            @bNewRecord BIT = 0;
    DECLARE @tempPensideTestToDisease TABLE (idfsPensideTestName BIGINT);
    DECLARE @tempTestToDisease TABLE (idfsTestName BIGINT);
    DECLARE @tempSampleTypeToDisease TABLE (idfsSampleType BIGINT);

    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );

	--Data Audit--

		DECLARE @idfUserId BIGINT = NULL;
		DECLARE @idfSiteId BIGINT = NULL;
		DECLARE @idfsDataAuditEventType bigint = NULL;
		DECLARE @idfsObjectType bigint = 10017036; -- Need to review the value --
		DECLARE @idfObject bigint = @idfsDiagnosis;
		DECLARE @idfObjectTable_trtDiagnosis bigint = 75840000000;		
		DECLARE @idfDataAuditEvent bigint = NULL;		

		DECLARE @trtDiagnosis_BeforeEdit TABLE
		(
			idfsUsingType bigint,
            strIDC10 nvarchar(200),
            strOIECode nvarchar(200),
            blnZoonotic bit,
            blnSyndrome bit,
            AuditUpdateDTM datetime,
            AuditUpdateUser nvarchar(200),
            idfsDiagnosis bigint
		)

		DECLARE @trtDiagnosis_AfterEdit TABLE
		(
			idfsUsingType bigint,
            strIDC10 nvarchar(200),
            strOIECode nvarchar(200),
            blnZoonotic bit,
            blnSyndrome bit,
            AuditUpdateDTM datetime,
            AuditUpdateUser nvarchar(200),
            idfsDiagnosis bigint
		)

		-- Get and Set UserId and SiteId
		SELECT @idfUserId = userInfo.UserId, @idfSiteId = UserInfo.SiteId FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo

	--Data Audit--

    BEGIN TRY
        BEGIN TRANSACTION;

        IF @idfsDiagnosis IS NULL
			BEGIN -- this is an insert.  check if the strDefault is a duplicate -- MCW added check for Using type
				IF EXISTS
				(
					SELECT R.*
					FROM dbo.trtBaseReference R
						INNER JOIN dbo.trtDiagnosis D
							ON D.idfsDiagnosis = R.idfsBaseReference
							   AND D.idfsUsingType = @idfsUsingType
					WHERE R.strDefault = @strDefault
						  AND R.idfsReferenceType = 19000019
						  AND R.intRowStatus = 0
				)
				BEGIN
					SET @DuplicateDefault = 1;
				END
			END
        ELSE
			BEGIN -- this is an update.  check if the strDefault is a duplicate
				IF EXISTS
				(
					SELECT R.idfsBaseReference,
						   D.idfsUsingType
					FROM dbo.trtBaseReference R
						INNER JOIN dbo.trtDiagnosis D
							ON D.idfsDiagnosis = R.idfsBaseReference
							   AND D.intRowStatus = 0
							   AND D.idfsUsingType = @idfsUsingType
					WHERE R.strDefault = @strDefault
						  AND R.idfsReferenceType = 19000019
						  AND R.intRowStatus = 0
						  AND R.idfsBaseReference <> @idfsDiagnosis
				)
				BEGIN
					SET @DuplicateDefault = 1;
				END
			END

        IF @DuplicateDefault = 1 -- No need to go any further, as the strDefault is a duplicate
			BEGIN
				SET @ReturnMessage = 'DOES EXIST';
				SET @idfsDiagnosis = NULL;
			END
        ELSE -- there is no duplicate, so continue
        BEGIN
            EXEC dbo.USP_GBL_BaseReference_SET @ReferenceID = @idfsDiagnosis OUTPUT,
                                               @ReferenceType = 19000019,
                                               @LangID = @LangID,
                                               @DefaultName = @strDefault,
                                               @NationalName = @strName,
                                               @HACode = @intHACode,
                                               @Order = @intOrder,
                                               @System = 0,
                                               @User = @AuditUserName;

            IF EXISTS
            (
                SELECT *
                FROM dbo.trtDiagnosis
                WHERE idfsDiagnosis = @idfsDiagnosis
            )
            BEGIN

				--DataAudit-- 
				
					--  tauDataAuditEvent  Event Type - Edit 
					set @idfsDataAuditEventType = 10016003;
			
					-- insert record into tauDataAuditEvent - 
					INSERT INTO @SuppressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_trtDiagnosis, @idfDataAuditEvent OUTPUT

				--DataAudit-- 

				INSERT INTO @trtDiagnosis_BeforeEdit (
					idfsUsingType, 
					strIDC10, 
					strOIECode, 
					blnZoonotic, 
					blnSyndrome, 
					AuditUpdateDTM, 
					AuditUpdateUser)
				SELECT 
					idfsUsingType, 
					strIDC10, 
					strOIECode, 
					blnZoonotic, 
					blnSyndrome, 
					AuditUpdateDTM,
					AuditUpdateUser					
					FROM trtDiagnosis WHERE idfsDiagnosis = @idfsDiagnosis;

                UPDATE dbo.trtDiagnosis
                SET idfsUsingType = @idfsUsingType,
                    strIDC10 = @strIDC10,
                    strOIECode = @strOIECode,
                    blnZoonotic = ISNULL(@blnZoonotic, 0),
                    blnSyndrome = ISNULL(@blnSyndrome, 0),
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfsDiagnosis = @idfsDiagnosis;

				INSERT INTO @trtDiagnosis_AfterEdit (
					idfsUsingType, 
					strIDC10, 
					strOIECode, 
					blnZoonotic, 
					blnSyndrome, 
					AuditUpdateDTM, 
					AuditUpdateUser)
				SELECT 
					idfsUsingType, 
					strIDC10, 
					strOIECode, 
					blnZoonotic, 
					blnSyndrome, 
					AuditUpdateDTM,
					AuditUpdateUser					
					FROM trtDiagnosis WHERE idfsDiagnosis = @idfsDiagnosis;

				--idfsUsingType
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_trtDiagnosis, 
					4578050000000,
					a.idfsDiagnosis,
					null,
					a.idfsUsingType,
					b.idfsUsingType 
				from @trtDiagnosis_BeforeEdit a  inner join @trtDiagnosis_AfterEdit b on a.idfsDiagnosis = b.idfsDiagnosis
				where (a.idfsUsingType <> b.idfsUsingType) 
					or(a.idfsUsingType is not null and b.idfsUsingType is null)
					or(a.idfsUsingType is null and b.idfsUsingType is not null)

				--strIDC10
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_trtDiagnosis, 
					81160000000,
					a.idfsDiagnosis,
					null,
					a.strIDC10,
					b.strIDC10 
				from @trtDiagnosis_BeforeEdit a  inner join @trtDiagnosis_AfterEdit b on a.idfsDiagnosis = b.idfsDiagnosis
				where (a.strIDC10 <> b.strIDC10) 
					or(a.strIDC10 is not null and b.strIDC10 is null)
					or(a.strIDC10 is null and b.strIDC10 is not null)

				--strOIECode
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_trtDiagnosis, 
					81170000000,
					a.idfsDiagnosis,
					null,
					a.strOIECode,
					b.strOIECode 
				from @trtDiagnosis_BeforeEdit a  inner join @trtDiagnosis_AfterEdit b on a.idfsDiagnosis = b.idfsDiagnosis
				where (a.strOIECode <> b.strOIECode) 
					or(a.strOIECode is not null and b.strOIECode is null)
					or(a.strOIECode is null and b.strOIECode is not null)
					
				--blnZoonotic
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_trtDiagnosis, 
					51389460000000,
					a.idfsDiagnosis,
					null,
					a.blnZoonotic,
					b.blnZoonotic 
				from @trtDiagnosis_BeforeEdit a  inner join @trtDiagnosis_AfterEdit b on a.idfsDiagnosis = b.idfsDiagnosis
				where (a.blnZoonotic <> b.blnZoonotic) 
					or(a.blnZoonotic is not null and b.blnZoonotic is null)
					or(a.blnZoonotic is null and b.blnZoonotic is not null)

				--blnSyndrome
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_trtDiagnosis, 
					51389460000000,
					a.idfsDiagnosis,
					null,
					a.blnSyndrome,
					b.blnSyndrome 
				from @trtDiagnosis_BeforeEdit a  inner join @trtDiagnosis_AfterEdit b on a.idfsDiagnosis = b.idfsDiagnosis
				where (a.blnSyndrome <> b.blnSyndrome) 
					or(a.blnSyndrome is not null and b.blnSyndrome is null)
					or(a.blnSyndrome is null and b.blnSyndrome is not null)

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                               @EventTypeId,
                                               @UserId,
                                               @idfsDiagnosis,
                                               NULL,
                                               @SiteId,
                                               NULL,
                                               @SiteId,
                                               @LocationId,
                                               @AuditUserName;
            END
            ELSE
            BEGIN

				--Data Audit--

					-- tauDataAuditEvent Event Type - Create 
					set @idfsDataAuditEventType = 10016001;
			
					-- insert record into tauDataAuditEvent - 
					INSERT INTO @SuppressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfsDiagnosis, @idfObjectTable_trtDiagnosis, @idfDataAuditEvent OUTPUT

				--Data Audit--

                INSERT INTO dbo.trtDiagnosis
                (
                    idfsDiagnosis,
                    idfsUsingType,
                    strIDC10,
                    strOIECode,
                    intRowStatus,
                    rowguid,
                    blnZoonotic,
                    strMaintenanceFlag,
                    strReservedAttribute,
                    blnSyndrome,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    AuditCreateDTM
                )
                VALUES(
					@idfsDiagnosis,
					@idfsUsingType,
					@strIDC10,
					@strOIECode,
					0  ,
					NEWID(),
					ISNULL(@blnZoonotic, 0),
					'ADD',
					'EIDSS7 Disease',
					ISNULL(@blnSyndrome, 0),
					10519001,
					N'[{"idfsDiagnosis":' + CAST(@idfsDiagnosis AS NVARCHAR(300)) + '}]',
					@AuditUserName,
					GETDATE()
				);

				--Data Audit--							

					INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
					VALUES (@idfDataAuditEvent, @idfObjectTable_trtDiagnosis, @idfsDiagnosis)
			
				--Data Audit--

                -- Add read permission allow to the default employee group.
                DECLARE @ObjectAccessID BIGINT;
                EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tstObjectAccess',
                                                  @ObjectAccessID OUTPUT;

                INSERT INTO dbo.tstObjectAccess
                (
                    idfObjectAccess,
                    idfsObjectOperation,
                    idfsObjectType,
                    idfsObjectID,
                    idfActor,
                    idfsOnSite,
                    intPermission,
                    intRowStatus,
                    SourceSystemNameID,
                    SourceSystemKeyValue
                )
                VALUES
                (   @ObjectAccessID,
                    10059003, -- Read permission
                    10060001, -- Disease record
                    @idfsDiagnosis,
                    -506,     -- Default employee group
                    1,        -- First level site
                    2,        -- Allow permission
                    0,
                    10519001,
                    N'[{"idfObjectAccess":' + CAST(@ObjectAccessID AS NVARCHAR(300)) + '}]'
                );

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                               @EventTypeId,
                                               @UserId,
                                               @idfsDiagnosis,
                                               NULL,
                                               @SiteId,
                                               NULL,
                                               @SiteId,
                                               @LocationId,
                                               @AuditUserName;
            END

            --Common actions
            EXEC dbo.USSP_DISEASETOLABTEST_SET @idfsDiagnosis, @strLabTest;

            EXEC dbo.USSP_DISEASETOPENSIDETEST_SET @idfsDiagnosis, @strPensideTest;

            EXEC dbo.USSP_DISEASETOSAMPLETYPE_SET @idfsDiagnosis, @strSampleType;
        END
        COMMIT TRANSACTION;

        SELECT @ReturnMessage AS 'ReturnMessage',
               @ReturnCode AS 'ReturnCode',
               @idfsDiagnosis AS 'idfsDiagnosis';
    END TRY
    BEGIN CATCH
        --Rollback the transaction
        IF @@TRANCOUNT > 0
        BEGIN
            ROLLBACK
        END;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_LKUP_BASE_REFERENCE_GETList]...';


GO
-- ================================================================================================
-- Name: USP_REF_LKUP_BASE_REFERENCE_GETList
--
-- Description:	Get the base reference records for drop down lists.
--
-- Author: Stephen Long
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long		02/01/2023 Initial relase to search without HA codes and names; only the name 
--                             whether default or national value; depending on what is present.
-- Stephen Long     02/27/2023 Added Key Id.
--
/*

exec USP_REF_LKUP_BASE_REFERENCE_GETList 19000076, 'en-US', @PageSize=200

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_LKUP_BASE_REFERENCE_GETList]
	 @idfsReferenceType	   BIGINT
	,@langID			   NVARCHAR(50)
	,@advancedSearch	   NVARCHAR(100) = NULL
	,@pageNo			   INT = 1
	,@pageSize			   INT = 10 
	,@sortColumn		   NVARCHAR(30) = 'strName' 
	,@sortOrder			   NVARCHAR(4) = 'ASC'

AS
BEGIN	
	BEGIN TRY
		DECLARE @firstRec INT
		DECLARE @lastRec INT
		DECLARE @T TABLE
		( 
			idfsBaseReference BIGINT, 
			idfsReferenceType BIGINT, 
			strDefault		  NVARCHAR(2000), 
			strName			  NVARCHAR(2000),
			intHACode		  INT,
			strHACode		  NVARCHAR(4000),
			strHACodeNames	  NVARCHAR(4000),
			intOrder		  INT,
			LOINC			  NVARCHAR(200)
		)

		SET @firstRec = (@pageNo-1)* @pagesize
		SET @lastRec = (@pageNo*@pageSize+1)
		
		IF( @advancedSearch IS NOT NULL )
		BEGIN
			SET @advancedSearch = REPLACE(@advancedSearch, '%', '[%]');
			SET @advancedSearch = REPLACE(@advancedSearch, '_', '[_]');

			INSERT INTO @T
			SELECT * FROM
			(
			   SELECT 
				  br.idfsBaseReference, 
				  br.idfsReferenceType, 
				  br.strDefault, 
				  brs.[name] AS strName,
				  br.intHACode, 
				  dbo.FN_GBL_HACode_ToCSV(@LangID,br.intHACode) AS strHACode,			
				  dbo.FN_GBL_HACodeNames_ToCSV(@LangID,br.intHACode) AS strHACodeNames,
				  br.intOrder,
				  LCM.LOINC_NUM AS LOINC
			   FROM  dbo.trtBaseReference br
			   JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @idfsReferenceType) brS ON br.idfsBaseReference = brs.idfsReference 
			   LEFT JOIN LOINCEidssMapping LCM ON LCM.idfsBaseReference = br.idfsBaseReference
			   WHERE 
				   br.intRowStatus = 0 AND brs.intRowStatus = 0 
				   AND br.idfsBaseReference NOT IN (19000146,19000011,19000019,19000537,19000529,19000530,19000531,19000532,19000533,19000534,19000535,19000125,19000123,19000122,
													19000143,19000050,19000126,19000121,19000075,19000124,19000012,19000164,19000019,19000503,19000530,19000510,19000506,19000505,
													19000509,19000511,19000508,19000507,19000022,19000131,19000070,19000066,19000071,19000069,19000029,19000032,19000101,19000525,
													19000033,19000532,19000534,19000533,19000152,19000056,19000060,19000109,19000062,19000045,19000046,19000516,19000074,19000147,
													19000130,19000535,19000531,19000087,19000079,19000529,19000119,19000524,19000084,19000519,19000166,19000086,19000090,19000141,
													19000140)
				
			) AS S
			WHERE 
				strName LIKE '%' + @advancedSearch + '%'
		END ELSE
			INSERT INTO @T
			SELECT 
				br.[idfsBaseReference], 
				br.[idfsReferenceType], 
				br.[strDefault], 
				brs.name AS strName,
				br.[intHACode], 
				dbo.FN_GBL_HACode_ToCSV(@LangID,br.[intHACode]) AS strHACode,			
				dbo.FN_GBL_HACodeNames_ToCSV(@LangID,br.[intHACode]) AS strHACodeNames,
				br.[intOrder],
				LCM.LOINC_NUM AS LOINC
			FROM  dbo.trtBaseReference br
			JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @idfsReferenceType) brS ON br.idfsBaseReference = brs.idfsReference 
			LEFT JOIN LOINCEidssMapping LCM ON LCM.idfsBaseReference = br.idfsBaseReference
			WHERE br.[idfsReferenceType] = @idfsReferenceType 
			   AND br.intRowStatus = 0 
			   AND brs.intRowStatus = 0 
			   AND br.idfsBaseReference NOT IN (19000146,19000011,19000019,19000537,19000529,19000530,19000531,19000532,19000533,19000534,19000535,19000125,19000123,19000122,
												 19000143,19000050,19000126,19000121,19000075,19000124,19000012,19000164,19000019,19000503,19000530,19000510,19000506,19000505,
												 19000509,19000511,19000508,19000507,19000022,19000131,19000070,19000066,19000071,19000069,19000029,19000032,19000101,19000525,
												 19000033,19000532,19000534,19000533,19000152,19000056,19000060,19000109,19000062,19000045,19000046,19000516,19000074,19000147,
												 19000130,19000535,19000531,19000087,19000079,19000529,19000119,19000524,19000084,19000519,19000166,19000086,19000090,19000141,
												 19000140);

		WITH CTEResults AS
		(
			SELECT ROW_NUMBER() OVER ( ORDER BY 
				CASE WHEN @sortColumn = 'idfsBaseReference' AND @SortOrder = 'asc' THEN idfsBaseReference END ASC,
				CASE WHEN @sortColumn = 'idfsBaseReference' AND @SortOrder = 'desc' THEN idfsBaseReference END DESC,
				CASE WHEN @sortColumn = 'idfsReferenceType' AND @SortOrder = 'asc' THEN idfsReferenceType END ASC,
				CASE WHEN @sortColumn = 'idfsReferenceType' AND @SortOrder = 'desc' THEN idfsReferenceType END DESC,
				CASE WHEN @sortColumn = 'strdefault' AND @SortOrder = 'asc' THEN strdefault END ASC,
				CASE WHEN @sortColumn = 'strdefault' AND @SortOrder = 'desc' THEN strdefault END DESC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'asc' THEN strName END ASC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'desc' THEN strName END DESC,
				CASE WHEN @sortColumn = 'intHACode' AND @SortOrder = 'asc' THEN intHACode END ASC,
				CASE WHEN @sortColumn = 'intHACode' AND @SortOrder = 'desc' THEN intHACode END DESC,
				CASE WHEN @sortColumn = 'strHACode' AND @SortOrder = 'asc' THEN strHACode END ASC,
				CASE WHEN @sortColumn = 'strHACode' AND @SortOrder = 'desc' THEN strHACode END DESC,
				CASE WHEN @sortColumn = 'strHACodeNames' AND @SortOrder = 'asc' THEN strHACodeNames END ASC,
				CASE WHEN @sortColumn = 'strHACodeNames' AND @SortOrder = 'desc' THEN strHACodeNames END DESC,
				CASE WHEN @sortColumn = 'intorder' AND @SortOrder = 'asc' THEN intOrder END ASC,
				CASE WHEN @sortColumn = 'intorder' AND @SortOrder = 'desc' THEN intOrder END DESC,
				CASE WHEN @sortColumn = 'LOINC' AND @SortOrder = 'asc' THEN LOINC END ASC,
				CASE WHEN @sortColumn = 'LOINC' AND @SortOrder = 'desc' THEN LOINC END DESC
				,IIF( @sortColumn = 'intOrder',strName,NULL) ASC
		) AS ROWNUM,		
		COUNT(*) OVER () AS 
				TotalRowCount,
				idfsBaseReference AS KeyId, 
				idfsBaseReference, 
				idfsReferenceType, 
				strDefault, 
				strName,
				intHACode, 
				strHACode,			
				strHACodeNames,
				intOrder,
				LOINC
			FROM @T
		)
			SELECT
				TotalRowCount,
				idfsBaseReference AS KeyId, 
				idfsBaseReference, 
				idfsReferenceType, 
				strDefault, 
				strName,
				intHACode, 
				strHACode,			
				strHACodeNames,
				intOrder,
				LOINC,
				TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
				CurrentPage = @pageNo 
		FROM CTEResults
		WHERE RowNum > @firstRec AND RowNum < @lastRec;
	END TRY
	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_STATISTICDATATYPE_DEL]...';


GO
--=====================================================================================================
-- Name: USP_REF_STATISTICDATATYPE_DEL
-- Description:	Removes a statistic data type from the active list
--							
-- Author:		Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -----------------------------------------------
-- Ricky Moss		2018/10/12 Initial Release
-- Ricky Moss		12/13/2018	Removed the return code
-- Doug Albanese	08/03/2021	Added the deletion routine to deactivate the record tied to the 
--                             base reference.
-- Stephen Long     11/01/2022 Added site alert logic.
-- Leo Tracchia     02/27/2023 Added data audit logic.
-- 
-- Test Code:
-- exec USP_REF_STATISTICDATATYPE_DEL 55615180000061
-- 
--=====================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_STATISTICDATATYPE_DEL]
(
    @idfsStatisticDataType BIGINT,
    @DeleteAnyway BIT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    BEGIN TRY

        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );

        IF NOT EXISTS
        (
            SELECT idfsStatisticDataType
            FROM dbo.tlbStatistic
            WHERE idfsStatisticDataType = @idfsStatisticDataType
                  AND intRowStatus = 0
        ) OR @DeleteAnyway = 1

			BEGIN

				--Begin: Data Audit--	

				DECLARE @idfUserId BIGINT = @UserId;
				DECLARE @idfSiteId BIGINT = @SiteId;
				DECLARE @idfsDataAuditEventType bigint = NULL;
				DECLARE @idfsObjectType bigint = 10017036; -- Need to review the value --
				DECLARE @idfObject bigint = @idfsStatisticDataType;
				DECLARE @idfObjectTable_trtStatisticDataType bigint = 75980000000;		
				DECLARE @idfObjectTable_trtBaseReference bigint = 75820000000;
				DECLARE @idfObjectTable_trtStringNameTranslation bigint = 75990000000;
				DECLARE @idfDataAuditEvent bigint = NULL;	

				-- tauDataAuditEvent Event Type - Delete 
				set @idfsDataAuditEventType = 10016002;
			
				--End: Data Audit--	

				UPDATE dbo.trtStatisticDataType
				SET intRowStatus = 1,
					AuditUpdateDTM = GETDATE(),
					AuditUpdateUser = @AuditUserName
				WHERE idfsStatisticDataType = @idfsStatisticDataType
					  AND intRowStatus = 0;

				--Begin: Data Audit, trtStatisticDataType--				

				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_trtStatisticDataType, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_trtStatisticDataType, @idfObject)

				--End: Data Audit, trtStatisticDataType--

				UPDATE dbo.trtBaseReference
				SET intRowStatus = 1,
					AuditUpdateDTM = GETDATE(),
					AuditUpdateUser = @AuditUserName
				WHERE idfsBaseReference = @idfsStatisticDataType
					  AND intRowStatus = 0;

				--Begin: Data Audit, trtBaseReference--				

				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_trtBaseReference, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_trtBaseReference, @idfObject)

				--End: Data Audit, trtBaseReference--

				UPDATE dbo.trtStringNameTranslation
				SET intRowStatus = 1,
					AuditUpdateDTM = GETDATE(),
					AuditUpdateUser = @AuditUserName
				WHERE idfsBaseReference = @idfsStatisticDataType;

				--Begin: Data Audit, trtStringNameTranslation--				

				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_trtStringNameTranslation, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_trtStringNameTranslation, @idfObject)

				--End: Data Audit, trtStringNameTranslation--

				UPDATE dbo.trtBaseReference
				SET intRowStatus = 1,
					AuditUpdateDTM = GETDATE(),
					AuditUpdateUser = @AuditUserName
				WHERE idfsBaseReference = @idfsStatisticDataType;

				INSERT INTO @SuppressSelect
				EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
											   @EventTypeId,
											   @UserId,
											   @idfsStatisticDataType,
											   NULL,
											   @SiteId,
											   NULL,
											   @SiteId,
											   @LocationId,
											   @AuditUserName;
			END

        ELSE IF EXISTS
        (
            SELECT idfsStatisticDataType
            FROM dbo.tlbStatistic
            WHERE idfsStatisticDataType = @idfsStatisticDataType
                  and intRowStatus = 0
        )
			BEGIN
				SELECT @ReturnCode = -1;
				SELECT @ReturnMessage = 'IN USE';
			END

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_STATISTICDATATYPE_SET]...';


GO
-- ================================================================================================
-- Name: USP_REF_STATISTICDATATYPE_SET
--
-- Description:	Creates or updates a statistical data type.
--                      
-- Author: Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss       09/28/2018 Initial release.
-- Ricky Moss		12/13/2018 Removed the return code and reference id variables
-- Ricky Moss		12/20/2018 Merged SET AND DOESEXIST stored procedures
-- Ricky Moss		02/11/2019 Checks to see when updating a statistical data type that the name 
--                             does not exists in another reference
-- Ricky Moss		09/20/2019 Refactored duplication check code
-- Ricky Moss		02/17/2020 Refactored to check for duplicates and translated values and update
-- Ricky Moss		03/18/2020 corrected update portion
-- Ricky Moss		03/20/2020 corrected table name
-- Ricky Moss		04/16/2020 reactivated inactive record if being readded
-- Doug Albanese	04/12/2020 Refactored to make use of USSP_GBL_BaseReference_SET, and to change 
--                             the branch decisions for insert/update.
-- Doug Albanese	07/31/2021 Added duplication fix
-- Doug Albanese	08/03/2021 Modified duplication detection to handle the existence of 
--                             previously deleted items
-- Doug Albanese	08/09/2021 Refactored against changes, provided by Mark Wilson, to complete 
--                             the work on this
-- Stephen Long     07/18/2022 Added site alert logic.
-- Leo Tracchia     02/27/2023 Added data auditing logic.
/*

exec USP_REF_STATISTICDATATYPE_SET NULL, 'Mark Wilson Test Number 02468', 'Test Locally', 19000090, 10091005, 10089002, 1, 'en-US'

exec USP_REF_STATISTICDATATYPE_SET 39850000000, 'Population', 'Population', 19000090, 10091005, 10089001, 1, 'en'

exec USP_REF_STATISTICDATATYPE_SET 389445040003919, 'Change to something else new', 'Population', 19000090, 10091005, 10089001, 1, 'en-US'

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_STATISTICDATATYPE_SET]
(
    @idfsStatisticDataType AS BIGINT = NULL,
    @strDefault AS NVARCHAR(200),
    @strName AS NVARCHAR(200),
    @idfsReferenceType AS BIGINT,
    @idfsStatisticPeriodType AS BIGINT,
    @idfsStatisticAreaType AS BIGINT = NULL,
    @blnRelatedWithAgeGroup AS BIT,
    @LangID AS NVARCHAR(50),
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN

    DECLARE @ReturnMessage NVARCHAR(MAX) = N'SUCCESS',
            @ReturnCode INT = 0,
            @DuplicateDefault INT = 0 -- updated to capture 0 or 1. 1 indicates a duplicate and will not execute the set.

    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );
    BEGIN TRY
        IF @idfsStatisticDataType IS NULL
			BEGIN -- this is an insert.  check if the strDefault is a duplicate
				IF EXISTS
				(
					SELECT *
					FROM dbo.trtBaseReference
					WHERE strDefault = @strDefault
						  AND idfsReferenceType = 19000090
						  AND trtBaseReference.intRowStatus = 0
				)
				BEGIN
					SET @DuplicateDefault = 1;
				END
			END
        ELSE
			BEGIN -- this is an update.  check if the strDefault is a duplicate
				IF EXISTS
				(
					SELECT *
					FROM dbo.trtBaseReference
					WHERE idfsBaseReference <> @idfsStatisticDataType
						  AND strDefault = @strDefault
						  AND idfsReferenceType = 19000090
						  AND trtBaseReference.intRowStatus = 0
				)
				BEGIN
					SET @DuplicateDefault = 1;
				END
			END

        IF @DuplicateDefault = 1 -- No need to go any further, as the strDefault is a duplicate

			BEGIN
				SET @ReturnMessage = 'DOES EXIST';
			END

        ELSE -- there is no duplicate, so continue

			BEGIN

			--Begin: Data Audit Declarations--

			DECLARE @idfUserId BIGINT = @UserId;
			DECLARE @idfSiteId BIGINT = @SiteId;
			DECLARE @idfsDataAuditEventType bigint = NULL;
			DECLARE @idfsObjectType bigint = 10017036; -- Need to review the value --
			DECLARE @idfObject bigint = @idfsStatisticDataType;
			DECLARE @idfObjectTable_trtStatisticDataType bigint = 75980000000;		
			DECLARE @idfDataAuditEvent bigint = NULL;		

			DECLARE @trtStatisticDataType_BeforeEdit TABLE
			(
				idfsStatisticDataType bigint,
				idfsReferenceType bigint,
				idfsStatisticAreaType bigint,
				idfsStatisticPeriodType bigint,									
				blnRelatedWithAgeGroup bit					
			)

			DECLARE @trtStatisticDataType_AfterEdit TABLE
			(
				idfsStatisticDataType bigint,
				idfsReferenceType bigint,
				idfsStatisticAreaType bigint,
				idfsStatisticPeriodType bigint,									
				blnRelatedWithAgeGroup bit	
			)				

			--End: Data Audit--			

			INSERT INTO @SuppressSelect
			EXEC dbo.USP_GBL_BaseReference_SET @ReferenceID = @idfsStatisticDataType OUTPUT,
												@ReferenceType = 19000090,
												@LangID = @LangID,
												@DefaultName = @strDefault,
												@NationalName = @strName,
												@HACode = NULL,
												@Order = NULL,
												@System = 0,
												@User = @AuditUserName;

				IF NOT EXISTS
				(
					SELECT *
					FROM dbo.trtStatisticDataType
					WHERE idfsStatisticDataType = @idfsStatisticDataType
				)
				BEGIN

					--Begin: Data Audit for INSERT--

					-- tauDataAuditEvent Event Type - Create 
					set @idfsDataAuditEventType = 10016001;
			
					-- insert record into tauDataAuditEvent - 
					INSERT INTO @SuppressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfsStatisticDataType, @idfObjectTable_trtStatisticDataType, @idfDataAuditEvent OUTPUT

					--End: Data Audit for INSERT--

					INSERT INTO dbo.trtStatisticDataType
					(
						idfsStatisticDataType,
						idfsReferenceType,
						idfsStatisticAreaType,
						idfsStatisticPeriodType,
						intRowStatus,
						rowguid,
						blnRelatedWithAgeGroup,
						strMaintenanceFlag,
						strReservedAttribute,
						SourceSystemNameID,
						SourceSystemKeyValue,
						AuditCreateDTM,
						AuditCreateUser
					)
					VALUES
					(@idfsStatisticDataType,
					 @idfsReferenceType,
					 @idfsStatisticAreaType,
					 @idfsStatisticPeriodType,
					 0  ,
					 NEWID(),
					 @blnRelatedWithAgeGroup,
					 NULL,
					 NULL,
					 10519001,
					 '[{"idfsBaseReference":' + CAST(@idfsStatisticDataType AS NVARCHAR(300)) + '}]',
					 GETDATE(),
					 @AuditUserName
					);

					--Begin: Data Audit for INSERT--					

					INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
					VALUES (@idfDataAuditEvent, @idfObjectTable_trtStatisticDataType, @idfsStatisticDataType)
			
					--End: Data Audit for INSERT--

				END
            ELSE
				BEGIN

					--Begin: Data Audit for UPDATE--
				
					--  tauDataAuditEvent  Event Type - Edit 
					set @idfsDataAuditEventType = 10016003;
			
					-- insert record into tauDataAuditEvent - 
					INSERT INTO @SuppressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfsStatisticDataType, @idfObjectTable_trtStatisticDataType, @idfDataAuditEvent OUTPUT

					INSERT INTO @trtStatisticDataType_BeforeEdit (
						idfsStatisticDataType,
						idfsReferenceType,
						idfsStatisticAreaType,
						idfsStatisticPeriodType,									
						blnRelatedWithAgeGroup)
					SELECT 
						idfsStatisticDataType,
						idfsReferenceType,
						idfsStatisticAreaType,
						idfsStatisticPeriodType,									
						blnRelatedWithAgeGroup
					FROM trtStatisticDataType WHERE idfsStatisticDataType = @idfsStatisticDataType;

					--End: Data Audit for UPDATE--

					UPDATE dbo.trtStatisticDataType
					SET idfsReferenceType = @idfsReferenceType,
						idfsStatisticAreaType = @idfsStatisticAreaType,
						idfsStatisticPeriodType = @idfsStatisticPeriodType,
						blnRelatedWithAgeGroup = @blnRelatedWithAgeGroup,
						intRowStatus = 0,
						rowguid = ISNULL(rowguid, NEWID()),
						AuditUpdateDTM = GETDATE(),
						AuditUpdateUser = @AuditUserName
					WHERE idfsStatisticDataType = @idfsStatisticDataType;

					--Begin: Data Audit for UPDATE--

					INSERT INTO @trtStatisticDataType_AfterEdit (
						idfsStatisticDataType,
						idfsReferenceType,
						idfsStatisticAreaType,
						idfsStatisticPeriodType,									
						blnRelatedWithAgeGroup)
					SELECT 
						idfsStatisticDataType,
						idfsReferenceType,
						idfsStatisticAreaType,
						idfsStatisticPeriodType,									
						blnRelatedWithAgeGroup
					FROM trtStatisticDataType WHERE idfsStatisticDataType = @idfsStatisticDataType;

					--idfsReferenceType
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_trtStatisticDataType, 
						81350000000,
						a.idfsStatisticDataType,
						null,
						a.idfsReferenceType,
						b.idfsReferenceType 
					from @trtStatisticDataType_BeforeEdit a  inner join @trtStatisticDataType_AfterEdit b on a.idfsStatisticDataType = b.idfsStatisticDataType
					where (a.idfsReferenceType <> b.idfsReferenceType) 
						or(a.idfsReferenceType is not null and b.idfsReferenceType is null)
						or(a.idfsReferenceType is null and b.idfsReferenceType is not null)

					--idfsStatisticAreaType
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_trtStatisticDataType, 
						4578150000000,
						a.idfsStatisticDataType,
						null,
						a.idfsStatisticAreaType,
						b.idfsStatisticAreaType 
					from @trtStatisticDataType_BeforeEdit a  inner join @trtStatisticDataType_AfterEdit b on a.idfsStatisticDataType = b.idfsStatisticDataType
					where (a.idfsStatisticAreaType <> b.idfsStatisticAreaType) 
						or(a.idfsStatisticAreaType is not null and b.idfsStatisticAreaType is null)
						or(a.idfsStatisticAreaType is null and b.idfsStatisticAreaType is not null)

					--idfsStatisticPeriodType
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_trtStatisticDataType, 
						4578160000000,
						a.idfsStatisticDataType,
						null,
						a.idfsStatisticPeriodType,
						b.idfsStatisticPeriodType 
					from @trtStatisticDataType_BeforeEdit a  inner join @trtStatisticDataType_AfterEdit b on a.idfsStatisticDataType = b.idfsStatisticDataType
					where (a.idfsStatisticPeriodType <> b.idfsStatisticPeriodType) 
						or(a.idfsStatisticPeriodType is not null and b.idfsStatisticPeriodType is null)
						or(a.idfsStatisticPeriodType is null and b.idfsStatisticPeriodType is not null)

					--blnRelatedWithAgeGroup
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_trtStatisticDataType, 
						12014490000000,
						a.idfsStatisticDataType,
						null,
						a.blnRelatedWithAgeGroup,
						b.blnRelatedWithAgeGroup 
					from @trtStatisticDataType_BeforeEdit a  inner join @trtStatisticDataType_AfterEdit b on a.idfsStatisticDataType = b.idfsStatisticDataType
					where (a.blnRelatedWithAgeGroup <> b.blnRelatedWithAgeGroup) 
						or(a.blnRelatedWithAgeGroup is not null and b.blnRelatedWithAgeGroup is null)
						or(a.blnRelatedWithAgeGroup is null and b.blnRelatedWithAgeGroup is not null)

					--End: Data Audit for UPDATE--
				END

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                           @EventTypeId,
                                           @UserId,
                                           @idfsStatisticDataType,
                                           NULL,
                                           @SiteId,
                                           NULL,
                                           @SiteId,
                                           @LocationId,
                                           @AuditUserName;
        END

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage,
               @idfsStatisticDataType AS idfsStatisticDataType;

    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_VET_FARM_MASTER_GETDetail]...';


GO
-- ================================================================================================
-- Name: USP_VET_FARM_MASTER_GETDetail
--
-- Description:	Get farm details for a specific farm master or farm record.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     04/06/2019 Initial release.
-- Stephen Long     04/29/2019 Added audit create date as entered date.
-- Stephen Long     06/22/2019 Fix to the farm address logic (building, apartment, house IIF's 
--                             to case statements).
-- Stephen Long     08/19/2019 Change farm owner name/ID to use personal ID instead of the EIDSS 
--                             person ID.
-- Ann Xiong        09/26/2019 Change FarmOwnerID to return ha.strPersonID instead of 
--                             fa.idfHumanActual, 
--                             add script to return CountryName.
-- Ann Xiong        10/07/2019 Added script to select CountryName, SettlementTypeName, and 
--                             idfsSettlementType.
-- Stephen Long     10/11/2019 Added EIDSSFarmOwnerID for the personal ID, and farm owner ID as the 
--                             human actual ID as the farm add/update user control relies on this 
--                             value.
-- Stephen Long     11/21/2019 Added source system name ID to the model.
-- Stephen Long     06/24/2020 Since the data for farm category in 6.1 is not populated, added code 
--                             to determine farm type based on accessory code.
-- Stephen Long     01/23/2022 Updated for location hierarchy.
-- Mike Kornegay	02/20/2022 Added number of buildings, birds per building, and avian farm type.
-- Mike Kornegay	02/21/2022 Added LocationID.
-- Mike Kornegay	03/10/2022 Added subquery to get the FarmId from tlbFarm if it exists.
-- Stephen Long     05/10/2022 Added additional check for farm type ID.
-- Ann Xiong        02/28/2023 Set migrated record's EnteredDate blank since no equivalent field in v 6.1 Farm record. 
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VET_FARM_MASTER_GETDetail]
(
    @LanguageID NVARCHAR(50),
    @FarmMasterID BIGINT
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @AccessoryCode INT = NULL,
                @FarmTypeID BIGINT = NULL,
                @LanguageCode BIGINT = dbo.FN_GBL_LanguageCode_Get(@LanguageID)

        SELECT fa.idfFarmActual AS FarmMasterID,
               (CASE
                    WHEN fa.idfsFarmCategory = 10040007
                         OR (fa.intHACode = 32 AND fa.idfsFarmCategory IS NULL) THEN
                        10040007
                    WHEN fa.idfsFarmCategory = 10040003
                         OR (fa.intHACode = 64 AND fa.idfsFarmCategory IS NULL) THEN
                        10040003
                    ELSE
                        10040001
                END
               ) AS FarmTypeID,
               (CASE
                    WHEN idfsFarmCategory = 10040007
                         OR (fa.intHACode = 32 AND fa.idfsFarmCategory IS NULL) THEN
                        dbo.FN_GBL_ReferenceValue_GET(@LanguageCode, 10040007)
                    WHEN idfsFarmCategory = 10040003
                         OR (fa.intHACode = 64 AND fa.idfsFarmCategory IS NULL) THEN
                        dbo.FN_GBL_ReferenceValue_GET(@LanguageCode, 10040003)
                    ELSE
                        dbo.FN_GBL_ReferenceValue_GET(@LanguageCode, 10040001)
                END
               ) AS FarmTypeName,
			   (SELECT TOP 1 idfFarm FROM tlbFarm WHERE idfFarmActual = fa.idfFarmActual) AS FarmID,
               fa.idfsOwnershipStructure AS OwnershipStructureTypeID,
               ha.strPersonID AS EIDSSFarmOwnerID,
               fa.idfHumanActual AS FarmOwnerID,
               haai.EIDSSPersonID,
               ISNULL(ha.strLastName, N'') + ISNULL(', ' + ha.strFirstName, '') + ISNULL(' ' + ha.strSecondName, '')
               + ISNULL(' ' + CHAR(150) + ' ' + ha.strPersonID, '') AS FarmOwner,
               ha.strLastName AS FarmOwnerLastName,
               ha.strFirstName AS FarmOwnerFirstName,
               ha.strSecondName AS FarmOwnerSecondName,
               (CASE
                    WHEN fa.strNationalName IS NULL THEN
                        fa.strInternationalName
                    WHEN fa.strNationalName = '' THEN
                        fa.strInternationalName
                    ELSE
                        fa.strNationalName
                END
               ) AS FarmName,
               fa.strFarmCode AS EIDSSFarmID,
               fa.strFax AS Fax,
               fa.strEmail AS Email,
               fa.strContactPhone AS Phone,
               fa.intLivestockTotalAnimalQty AS TotalLivestockAnimalQuantity,
               fa.intAvianTotalAnimalQty AS TotalAvianAnimalQuantity,
               fa.intLivestockSickAnimalQty AS SickLivestockAnimalQuantity,
               fa.intAvianSickAnimalQty AS SickAvianAnimalQuantity,
               fa.intLivestockDeadAnimalQty AS DeadLivestockAnimalQuantity,
               fa.intAvianDeadAnimalQty AS DeadAvianAnimalQuantity,
               fa.strNote AS Note,
               fa.intRowStatus AS RowStatus,
               fa.datModificationDate AS ModifiedDate,
               (CASE
                    WHEN fa.SourceSystemNameID = 10519002 THEN
                        NULL
                    ELSE
                        fa.AuditCreateDTM
                END
               ) AS EnteredDate,
               fa.idfFarmAddress AS FarmAddressID,
               fa.SourceSystemNameID,
               lh.idfsLocation AS FarmAddressLocationID,
			   lh.AdminLevel1ID AS FarmAddressAdministrativeLevel0ID,
               lh.AdminLevel1Name AS FarmAddressAdministrativeLevel0Name,
               lh.AdminLevel2ID AS FarmAddressAdministrativeLevel1ID,
               lh.AdminLevel2Name AS FarmAddressAdministrativeLevel1Name,
               lh.AdminLevel3ID AS FarmAddressAdministrativeLevel2ID,
               lh.AdminLevel3Name AS FarmAddressAdministrativeLevel2Name,
               lh.AdminLevel4ID AS FarmAddressAdministrativeLevel3ID,
               lh.AdminLevel4Name AS FarmAddressAdministrativeLevel3Name,
               settlement.idfsReference AS FarmAddressSettlementID,
               settlement.name AS FarmAddressSettlementName,
               settlementType.idfsReference AS FarmAddressSettlementTypeID,
               settlementType.name AS FarmAddressSettlementTypeName,
               pc.idfPostalCode AS FarmAddressPostalCodeID, 
               gls.strPostCode AS FarmAddressPostalCode,
               st.idfStreet AS FarmAddressStreetID, 
               gls.strStreetName AS FarmAddressStreetName,
               gls.strBuilding AS FarmAddressBuilding,
               gls.strApartment AS FarmAddressApartment,
               gls.strHouse AS FarmAddressHouse,
               gls.dblLatitude AS FarmAddressLatitude,
               gls.dblLongitude AS FarmAddressLongitude,
               (CONVERT(NVARCHAR(100), gls.dblLatitude) + ', ' + CONVERT(NVARCHAR(100), gls.dblLongitude)) AS Coordinates,
               dbo.FN_GBL_CreateAddressString(
                                                 ISNULL(lh.AdminLevel1Name, ''),
                                                 ISNULL(lh.AdminLevel2Name, ''),
                                                 ISNULL(lh.AdminLevel3Name, ''),
                                                 ISNULL(gls.strPostCode, ''),
                                                 '',
                                                 '',
                                                 ISNULL(gls.strStreetName, ''),
                                                 ISNULL(gls.strHouse, ''),
                                                 ISNULL(gls.strBuilding, ''),
                                                 ISNULL(gls.strApartment, ''),
                                                 gls.blnForeignAddress,
                                                 ISNULL(gls.strForeignAddress, '')
                                             ) AS AddressString,
			   fa.intBirdsPerBuilding as NumberOfBirdsPerBuilding,
			   fa.intBuidings as NumberOfBuildings,
			   fa.idfsAvianFarmType as AvianFarmTypeID,
			   fa.idfsAvianProductionType as AvianProductionTypeID
        FROM dbo.tlbFarmActual fa
            LEFT JOIN dbo.tlbHumanActual AS ha
                ON ha.idfHumanActual = fa.idfHumanActual
                   AND ha.intRowStatus = 0
            LEFT JOIN dbo.HumanActualAddlInfo AS haai
                ON haai.HumanActualAddlInfoUID = ha.idfHumanActual
                   AND haai.intRowStatus = 0
            LEFT OUTER JOIN dbo.tlbGeoLocationShared gls
                ON fa.idfFarmAddress = gls.idfGeoLocationShared
            LEFT JOIN dbo.gisLocation g
                ON g.idfsLocation = gls.idfsLocation
            LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                ON lh.idfsLocation = g.idfsLocation
            LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000004) settlement
                ON g.node.IsDescendantOf(settlement.node) = 1
            LEFT JOIN dbo.FN_GBL_GIS_Reference(@LanguageID, 19000005) settlementType
                ON settlementType.idfsReference = settlement.idfsType
            LEFT JOIN dbo.tlbStreet st
                ON st.strStreetName = gls.strStreetName
            LEFT JOIN dbo.tlbPostalCode pc
                ON pc.strPostCode = gls.strPostCode
        WHERE fa.idfFarmActual = @FarmMasterID;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USSP_GBL_SITE_CUSTOMUSERGROUP_SET]...';


GO
-- -- ============================================================================
-- Name: [USSP_GBL_SITE_CUSTOMUSERGROUUP_SET]
-- Description: Insert Site Custom User Roles from CDR Site
--                      
-- Author: Mani -  02/5/2023 Copied from Mark's Script
-- History

 --Manickandan Govindarajan  02/16/2023 Added insert statments for inserting dashboard icon and grid records into LkupRoleDashboardObject for e7 custom roles

-- ============================================================================


ALTER PROCEDURE [dbo].[USSP_GBL_SITE_CUSTOMUSERGROUP_SET] (
	@SiteId bigint
)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

DECLARE @tlbEmployeeGroup TABLE
(
	idfsEmployeeGroupName BIGINT,
	idfsSite BIGINT,
	strName NVARCHAR(200),
	strDescription NVARCHAR(200)

)
INSERT INTO @tlbEmployeeGroup
(
	idfsEmployeeGroupName,
	idfsSite,
	strName,
	strDescription
	
)

SELECT 
	T.idfsEmployeeGroupName,
	@siteId,
	T.strName,
	T.strDescription
	

FROM dbo.tlbEmployeeGroup T
INNER JOIN dbo.trtBaseReference S ON S.idfsBaseReference = T.idfEmployeeGroup
CROSS APPLY dbo.tstSite Sites
WHERE T.idfEmployeeGroup IN (-501, -506, -513, -514, -515, -516, -517, -518, -519, -520, -521, -522, -523, -524, -525, -526, -527, -528, -529)
AND Sites.idfsSite =  dbo.FN_GBL_SITEID_GET()

DECLARE @idfEmployeeGroup BIGINT;
DECLARE @idfEmployee BIGINT;
DECLARE @idfsEmployeeGroupName BIGINT;
DECLARE @idfsSite BIGINT;
DECLARE @strName NVARCHAR(200);
DECLARE @strDescription NVARCHAR(200);

DECLARE tlbEmployeeGroup_cursor CURSOR FOR
SELECT
	idfsEmployeeGroupName,
	@siteId,
	strName,
	strDescription
FROM @tlbEmployeeGroup

OPEN tlbEmployeeGroup_cursor;

FETCH NEXT FROM tlbEmployeeGroup_cursor INTO @idfsEmployeeGroupName, @idfsSite, @strName, @strDescription;
WHILE @@FETCH_STATUS = 0
BEGIN

	
		
		
		EXEC dbo.USP_GBL_NEXTKEYID_GET @tableName = 'tlbEmployee',
		@idfsKey = @idfEmployee OUTPUT

		INSERT INTO dbo.tlbEmployee
		(
			idfEmployee,
			idfsEmployeeType,
			idfsSite,
			intRowStatus,
			rowguid,
			SourceSystemNameID,
			SourceSystemKeyValue,
			AuditCreateUser,
			AuditCreateDTM,
			idfsEmployeeCategory
		)

		SELECT

			@idfEmployee,
			10023001,
			@idfsSite,
			0,
			NEWID(),
			10519001,
			'[{"idfEmployee":' + CAST(@idfEmployee AS NVARCHAR(24)) + '}]',
			'System',
			GETDATE(),
			10526002


		INSERT INTO dbo.tlbEmployeeGroup
		(
			idfEmployeeGroup,
			idfsEmployeeGroupName,
			idfsSite,
			strName,
			strDescription,
			rowguid,
			intRowStatus,
			SourceSystemNameID,
			SourceSystemKeyValue,
			AuditCreateUser,
			AuditCreateDTM
		)
		SELECT
			@idfEmployee,
			@idfsEmployeeGroupName,
			@idfsSite,
			@strName,
			@strDescription,
			NEWID(),
			0,
			10519001,
			'[{"idfEmployeeGroup":' + CAST(@idfEmployeeGroup AS NVARCHAR(24)) + '}]',
			'System',
			GETDATE()


	IF NOT EXISTS (SELECT * FROM dbo.LkupRoleSystemFunctionAccess WHERE idfEmployee = @idfEmployee)
	BEGIN
		INSERT INTO dbo.LkupRoleSystemFunctionAccess
		(
			idfEmployee,
			SystemFunctionID,
			SystemFunctionOperationID,
			AccessPermissionID,
			intRowStatus,
			AuditCreateUser,
			AuditCreateDTM,
			rowguid,
			SourceSystemNameID,
			SourceSystemKeyValue,
			intRowStatusForSystemFunction
		)

		SELECT
			@idfEmployee,
			SystemFunctionID,
			SystemFunctionOperationID,
			AccessPermissionID,
			r.intRowStatus,
			'System',
			GETDATE(),
			NEWID(),
			10519001,
			'{"idfEmployee":-' + CAST(@idfEmployee AS NVARCHAR(24)) + ',"SystemFunctionID":' + CAST(SystemFunctionID AS NVARCHAR(24)) + '}',
			intRowStatusForSystemFunction
		FROM dbo.LkupRoleSystemFunctionAccess r
			inner join tlbEmployeeGroup eg on eg.idfEmployeeGroup = r.idfEmployee
		WHERE idfEmployee = @idfsEmployeeGroupName  and eg.idfsSite =  dbo.FN_GBL_SITEID_GET()

	END

    /*--dashboard objects**/

	IF NOT EXISTS (SELECT * FROM dbo.LkupRoleDashboardObject WHERE idfEmployee = @idfEmployee)
	BEGIN
		INSERT INTO dbo.LkupRoleDashboardObject
		(
		    idfEmployee,
		    DashboardObjectID,
		    DisplayName,
		    DisplayOrder,
		    intRowStatus,
		    AuditCreateUser,
		    AuditCreateDTM,
		    AuditUpdateUser,
		    AuditUpdateDTM,
		    rowguid,
		    SourceSystemNameID,
		    SourceSystemKeyValue
		)

		SELECT
			@idfEmployee,
			DashboardObjectID,
		    DisplayName,
		    DisplayOrder,
		    r.intRowStatus,
		    'System',
		    GETDATE(),
		    r.AuditUpdateUser,
		    GETDATE(),
		    NEWID(),
			10519001,
			'{"idfEmployee":-' + CAST(@idfEmployee AS NVARCHAR(24)) + ',"DashboardObjectID":' + CAST(DashboardObjectID AS NVARCHAR(24)) + '}'
				FROM dbo.LkupRoleDashboardObject r
			inner join tlbEmployeeGroup eg on eg.idfEmployeeGroup = r.idfEmployee
		WHERE idfEmployee = @idfsEmployeeGroupName  and eg.idfsSite =  dbo.FN_GBL_SITEID_GET()

	END

	FETCH NEXT FROM tlbEmployeeGroup_cursor INTO @idfsEmployeeGroupName, @SiteId, @strName, @strDescription;

END


CLOSE tlbEmployeeGroup_cursor;
DEALLOCATE tlbEmployeeGroup_cursor;

END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_ORG_SET]...';


GO
--=================================================================================================
-- Name: USP_ADMIN_ORG_SET
--
-- Description: Creates or updates an organization record.
--
-- Author: Mandar Kulkarni
--
-- Revision History:
-- Name             Date      Change
-- ---------------- --------- --------------------------------------------------------------------
-- Ricky Moss		07/12/2019 Restructured to set name and full name of organizations correctly.
-- Stephen Long     04/24/2021 Updated for location hierarchy and removed settlement type ID 
--                             parameter.
-- Stephen Long     06/14/2021 Removed latitude and longitude parameters as not needed in the use
--                             case.  Added departments list and table variable processing.
-- Stephen Long     06/17/2021 Added duplicate abbreviated and full name check as per special 
--                             requirement 1 on use SAUC05.
-- Stephen Long     06/30/2021 Removed english check on default and national name.
-- Stephen Long     08/05/2021 Added audit user name to address set.
-- Stephen Long     08/16/2021 Removal of associating a new organization to a default site ID.
--                             Association of an organization to a site will be done on the 
--                             site screen.
-- Stephen Long     09/01/2021 Changed department stored procedure call from USSP to USP to 
--                             reduce duplication of stored procedures doing the same logic.
-- Mark Wilson		10/06/2021 Added NULL Elevation parm to USP_GBL_ADDRESS_SET.
-- Stephen Long     10/29/2021 Changed from USP_GBL_ADDRESS_SET to USSP_GBL_ADDRESS_SET.
-- Stephen Long     12/13/2022 Added data audit logic for SAUC30 and 31.
-- Ann Xiong		02/17/2023 Found and fix the issue of INSERT INTO @OrganizationBeforeEdit twice.
-- 
-- Testing Code:
--
-- EXEC USP_ADMIN_ORG_SET NULL, 'Test Org 821-12', 'Test Org 821-11', 'Test Organization 821-12', 
--	'Test Organization 821-12', '404-555-4567', NULL, 226,  'TO821-12', 'en', 0,  NULL, 780000000, 
--	37130000000, 3724300000000, NULL, NULL, '2345', NULL, 'Main St', NULL, NULL, 0, NULL, NULL, 1, 
--	10504001, NULL, NULL, NULL
-- EXEC USP_ADMIN_ORG_SET 52448330000054, 'Test Org 71-3', 'Test Org 71-3', 'Test Organization 71-3', 
--	'Test Organization 71-3', '404-555-4567', NULL, 226,  'TO71-1', 'en', 0,  NULL, 780000000, 
--	37130000000, 3724300000000, 1343040000000, NULL, '2345', NULL, 'Main St', NULL, NULL, 0, NULL, 
--	NULL, 1, 10504001, NULL, NULL, NULL
--=================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_ORG_SET]
(
    @LanguageID NVARCHAR(50),
    @OrganizationKey BIGINT = NULL,
    @OrganizationID NVARCHAR(100),
    @OrganizationTypeID BIGINT = NULL,
    @AbbreviatedNameDefaultValue NVARCHAR(200),
    @AbbreviatedNameNationalValue NVARCHAR(200),
    @FullNameDefaultValue NVARCHAR(200),
    @FullNameNationalValue NVARCHAR(200),
    @CurrentCustomizationID BIGINT = NULL,
    @AddressID BIGINT = NULL,
    @LocationID BIGINT,
    @StreetName NVARCHAR(200) = NULL,
    @Apartment NVARCHAR(200) = NULL,
    @Building NVARCHAR(200) = NULL,
    @House NVARCHAR(200) = NULL,
    @PostalCode NVARCHAR(200) = NULL,
    @ForeignAddressIndicator BIT = 0,
    @ForeignAddressString NVARCHAR(200) = NULL,
    @SharedAddressIndicator BIT = 1,
    @ContactPhone NVARCHAR(200) = NULL,
    @AccessoryCode INT,
    @Order INT,
    @OwnershipFormTypeID BIGINT = NULL,
    @LegalFormTypeID BIGINT = NULL,
    @MainFormOfActivityTypeID BIGINT = NULL,
    @AuditUserName NVARCHAR(200),
    @Departments NVARCHAR(MAX) = NULL
)
AS
DECLARE @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
        @RowID BIGINT = NULL,
        @RowAction CHAR(1) = NULL,
        @RowStatus INT = 0,
        @DepartmentID BIGINT = NULL,
        @DefaultValue NVARCHAR(200) = NULL,
        @NationalValue NVARCHAR(200) = NULL,
        @DepartmentOrder INT = 0,
                                             -- Data audit
        @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectTypeID BIGINT = 10017034,     -- Organization
        @ObjectID BIGINT = @OrganizationKey,
        @ObjectTableID BIGINT = 75650000000; -- tlbOffice
DECLARE @DepartmentsTemp TABLE
(
    DepartmentID BIGINT NOT NULL,
    DepartmentNameDefaultValue NVARCHAR(200) NULL,
    DepartmentNameNationalValue NVARCHAR(200) NULL,
    OrderNumber INT NOT NULL,
    RowStatus INT NOT NULL,
    RowAction CHAR(1)
);
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200)
);
DECLARE @SuppressDepartmentSelect TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200),
    KeyId BIGINT NULL,
    KeyName VARCHAR(MAX)
);
DECLARE @OrganizationAfterEdit TABLE
(
    OrganizationID BIGINT,
    OrganizationFullNameID BIGINT,
    OrganizjationAbbreviationNameID BIGINT,
    CustomizationPackageID BIGINT,
    LocationID BIGINT,
    ContactPhone NVARCHAR(200),
    AccessoryCode INT,
    EIDSSOrganizationID NVARCHAR(100),
    OrganizationTypeID BIGINT, 
    OwnershipFormID BIGINT, 
    LegalFormID BIGINT, 
    MainFormOfActivityID BIGINT
);
DECLARE @OrganizationBeforeEdit TABLE
(
    OrganizationID BIGINT,
    OrganizationFullNameID BIGINT,
    OrganizjationAbbreviationNameID BIGINT,
    CustomizationPackageID BIGINT,
    LocationID BIGINT,
    ContactPhone NVARCHAR(200),
    AccessoryCode INT,
    EIDSSOrganizationID NVARCHAR(100),
    OrganizationTypeID BIGINT, 
    OwnershipFormID BIGINT, 
    LegalFormID BIGINT, 
    MainFormOfActivityID BIGINT
);
BEGIN
    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        IF (
               ISNULL(@OrganizationID, N'') <> N''
               AND EXISTS
        (
            SELECT idfOffice
            FROM dbo.tlbOffice
            WHERE strOrganizationID = @OrganizationID
                  AND intRowStatus = 0
        )
               AND @OrganizationKey IS NULL
           )
           OR (
                  ISNULL(@OrganizationID, N'') <> N''
                  AND EXISTS
        (
            SELECT idfOffice
            FROM dbo.tlbOffice
            WHERE strOrganizationID = @OrganizationID
                  AND idfOffice <> @OrganizationKey
                  AND intRowStatus = 0
        )
                  AND @OrganizationKey IS NOT NULL
              )
        BEGIN
            SELECT @ReturnMessage = 'ID DOES EXIST';

            SELECT @ReturnCode = 1;

            SELECT @OrganizationKey = NULL;
        END

        IF @ReturnCode = 0
           AND (
                   ISNULL(@AbbreviatedNameDefaultValue, N'') <> N''
                   AND
                   (
                       SELECT COUNT(*)
                       FROM dbo.trtBaseReference
                       WHERE strDefault = @AbbreviatedNameDefaultValue
                             AND idfsReferenceType = 19000045
                             AND intRowStatus = 0
                             AND @OrganizationKey IS NULL
                             AND @OrganizationID IS NULL
                   ) > 0 -- use 0 in this scenario as the record is brand new
                   OR
                   (
                       SELECT COUNT(*)
                       FROM dbo.trtBaseReference
                       WHERE strDefault = @AbbreviatedNameDefaultValue
                             AND idfsReferenceType = 19000045
                             AND intRowStatus = 0
                             AND @OrganizationKey IS NOT NULL
                             AND @OrganizationID IS NULL
                   ) > 1 -- use 1 in this scenario to not count a duplicate against itself
               )
           AND (
                   ISNULL(@FullNameDefaultValue, N'') <> N''
                   AND
                   (
                       SELECT COUNT(*)
                       FROM dbo.trtBaseReference
                       WHERE strDefault = @FullNameDefaultValue
                             AND idfsReferenceType = 19000046
                             AND intRowStatus = 0
                             AND @OrganizationKey IS NULL
                             AND @OrganizationID IS NULL
                   ) > 0 -- use 0 in this scenario as the record is brand new
                   OR
                   (
                       SELECT COUNT(*)
                       FROM dbo.trtBaseReference
                       WHERE strDefault = @FullNameDefaultValue
                             AND idfsReferenceType = 19000046
                             AND intRowStatus = 0
                             AND @OrganizationKey IS NOT NULL
                             AND @OrganizationID IS NULL
                   ) > 1 -- use 1 in this scenario to not count a duplicate against itself
               )
        BEGIN
            SELECT @ReturnMessage = 'NAME DOES EXIST';

            SELECT @ReturnCode = 2;

            SELECT @OrganizationKey = NULL;
        END

        IF @ReturnCode = 0
        BEGIN
            SET NOCOUNT ON;

            BEGIN TRANSACTION;

            IF @OrganizationKey IS NULL
            BEGIN
                -- Data audit
                SET @DataAuditEventTypeID = 10016001; -- Data audit create event type

                INSERT INTO @SuppressSelect
                EXEC dbo.USSP_GBL_DataAuditEvent_GET @AuditUserID,
                                                     @AuditSiteID,
                                                     @DataAuditEventTypeID,
                                                     @ObjectTypeID,
                                                     @OrganizationKey,
                                                     @ObjectTableID,
                                                     @DataAuditEventID OUTPUT;
            -- End data audit
            END
            ELSE
            BEGIN
                -- Data audit
                SET @DataAuditEventTypeID = 10016003; -- Data audit edit event type

                INSERT INTO @SuppressSelect
                EXEC dbo.USSP_GBL_DataAuditEvent_GET @AuditUserID,
                                                     @AuditSiteID,
                                                     @DataAuditEventTypeID,
                                                     @ObjectTypeID,
                                                     @OrganizationKey,
                                                     @ObjectTableID,
                                                     @DataAuditEventID OUTPUT;
            END

            INSERT INTO @DepartmentsTemp
            SELECT *
            FROM
                OPENJSON(@Departments)
                WITH
                (
                    DepartmentID BIGINT,
                    DepartmentNameDefaultValue NVARCHAR(200),
                    DepartmentNameNationalValue NVARCHAR(200),
                    OrderNumber INT,
                    RowStatus INT,
                    RowAction CHAR(1)
                );

            DECLARE @OrganizationFullNameID BIGINT,
                    @OrganizationAbbreviatedNameID BIGINT;

            SELECT @OrganizationFullNameID = idfsOfficeName,
                   @OrganizationAbbreviatedNameID = idfsOfficeAbbreviation
            FROM dbo.tlbOffice
            WHERE idfOffice = @OrganizationKey;

            IF NOT EXISTS
            (
                SELECT idfsOfficeName
                FROM dbo.tlbOffice
                WHERE idfOffice = @OrganizationKey
            )
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_BASE_REFERENCE_SET @OrganizationFullNameID OUTPUT,
                                                        19000046,
                                                        @LanguageID,
                                                        @FullNameDefaultValue,
                                                        @FullNameNationalValue,
                                                        0,
                                                        @Order,
                                                        0,
                                                        @AuditUserName,
                                                        @DataAuditEventID,
                                                        @OrganizationID;
            END
            ELSE
            BEGIN
                SELECT @OrganizationFullNameID =
                (
                    SELECT idfsOfficeName
                    FROM dbo.tlbOffice
                    WHERE idfOffice = @OrganizationKey
                );

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_BASE_REFERENCE_SET @OrganizationFullNameID OUTPUT,
                                                        19000046,
                                                        @LanguageID,
                                                        @FullNameDefaultValue,
                                                        @FullNameNationalValue,
                                                        0,
                                                        @Order,
                                                        0,
                                                        @AuditUserName,
                                                        @DataAuditEventID,
                                                        @OrganizationID;
            END

            IF NOT EXISTS
            (
                SELECT idfsOfficeAbbreviation
                FROM dbo.tlbOffice
                WHERE idfOffice = @OrganizationKey
            )
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_BASE_REFERENCE_SET @OrganizationAbbreviatedNameID OUTPUT,
                                                        19000045,
                                                        @LanguageID,
                                                        @AbbreviatedNameDefaultValue,
                                                        @AbbreviatedNameNationalValue,
                                                        0,
                                                        @Order,
                                                        0,
                                                        @AuditUserName,
                                                        @DataAuditEventID,
                                                        @OrganizationID;
            END
            ELSE
            BEGIN
                SELECT @OrganizationAbbreviatedNameID =
                (
                    SELECT idfsOfficeAbbreviation
                    FROM dbo.tlbOffice
                    WHERE idfOffice = @OrganizationKey
                );

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_BASE_REFERENCE_SET @OrganizationAbbreviatedNameID OUTPUT,
                                                        19000045,
                                                        @LanguageID,
                                                        @AbbreviatedNameDefaultValue,
                                                        @AbbreviatedNameNationalValue,
                                                        0,
                                                        @Order,
                                                        0,
                                                        @AuditUserName,
                                                        @DataAuditEventID,
                                                        @OrganizationID;
            END

            IF @CurrentCustomizationID IS NULL
            BEGIN
                SET @CurrentCustomizationID = dbo.FN_GBL_CustomizationPackage_GET();
            END

            -- Set the address including potentially the street and postal code tables. 
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_ADDRESS_SET_WITH_AUDITING @AddressID OUTPUT,
                                                           @DataAuditEventID,
                                                           NULL,
                                                           NULL,
                                                           NULL,
                                                           @LocationID,
                                                           @Apartment,
                                                           @Building,
                                                           @StreetName,
                                                           @House,
                                                           @PostalCode,
                                                           NULL,
                                                           NULL,
                                                           NULL,
                                                           NULL,
                                                           NULL,
                                                           NULL,
                                                           NULL,
                                                           @ForeignAddressIndicator,
                                                           @ForeignAddressString,
                                                           @SharedAddressIndicator,
                                                           @AuditUserName;

            IF @OrganizationKey IS NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbOffice', @OrganizationKey OUTPUT;

                INSERT INTO dbo.tlbOffice
                (
                    idfOffice,
                    idfsOfficeName,
                    idfsOfficeAbbreviation,
                    idfCustomizationPackage,
                    idfLocation,
                    idfsSite,
                    strContactPhone,
                    intHACode,
                    strOrganizationID,
                    OrganizationTypeID,
                    OwnershipFormID,
                    MainFormOfActivityID,
                    LegalFormID,
                    AuditCreateUser
                )
                VALUES
                (   @OrganizationKey,
                    @OrganizationFullNameID,
                    @OrganizationAbbreviatedNameID,
                    @CurrentCustomizationID,
                    @AddressID,
                    NULL, -- Site ID will be updated on the site screen/site set stored procedure.
                    @ContactPhone,
                    @AccessoryCode,
                    @OrganizationID,
                    @OrganizationTypeID,
                    @OwnershipFormTypeID,
                    @MainFormOfActivityTypeID,
                    @LegalFormTypeID,
                    @AuditUserName
                );

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    strObject
                )
                VALUES
                (@DataAuditEventID,
                 @ObjectTableID,
                 @OrganizationKey,
                 10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                 + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 @OrganizationID
                );
            -- End data audit
            END
            ELSE
            BEGIN
                -- Data audit
                INSERT INTO @OrganizationBeforeEdit
                (
                    OrganizationID,
                    OrganizationFullNameID,
                    OrganizjationAbbreviationNameID,
                    CustomizationPackageID,
                    LocationID,
                    ContactPhone,
                    AccessoryCode,
                    EIDSSOrganizationID, 
                    OrganizationTypeID, 
                    OwnershipFormID,
                    LegalFormID,
                    MainFormOfActivityID
                )
                SELECT idfOffice,
                       idfsOfficeName,
                       idfsOfficeAbbreviation,
                       idfCustomizationPackage,
                       idfLocation,
                       strContactPhone,
                       intHACode,
                       strOrganizationID,
                       OrganizationTypeID,
                       OwnershipFormID,
                       LegalFormID,
                       MainFormOfActivityID
                FROM dbo.tlbOffice
                WHERE idfOffice = @OrganizationKey;
                -- End data audit

                UPDATE dbo.tlbOffice
                SET strContactPhone = @ContactPhone,
                    idfLocation = @AddressID,
                    intHACode = @AccessoryCode,
                    strOrganizationID = @OrganizationID,
                    OrganizationTypeID = @OrganizationTypeID,
                    OwnershipFormID = @OwnershipFormTypeID,
                    LegalFormID = @LegalFormTypeID,
                    MainFormOfActivityID = @MainFormofActivityTypeID,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfOffice = @OrganizationKey;

                -- Data audit
                INSERT INTO @OrganizationAfterEdit
                (
                    OrganizationID,
                    OrganizationFullNameID,
                    OrganizjationAbbreviationNameID,
                    CustomizationPackageID,
                    LocationID,
                    ContactPhone,
                    AccessoryCode,
                    EIDSSOrganizationID, 
                    OrganizationTypeID, 
                    OwnershipFormID,
                    LegalFormID,
                    MainFormOfActivityID
                )
                SELECT idfOffice,
                       idfsOfficeName,
                       idfsOfficeAbbreviation,
                       idfCustomizationPackage,
                       idfLocation,
                       strContactPhone,
                       intHACode,
                       strOrganizationID,
                       OrganizationTypeID,
                       OwnershipFormID,
                       LegalFormID,
                       MainFormOfActivityID
                FROM dbo.tlbOffice
                WHERE idfOffice = @OrganizationKey;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80120000000,
                       a.OrganizationID,
                       NULL,
                       b.OrganizationFullNameID,
                       a.OrganizationFullNameID,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.OrganizationFullNameID <> b.OrganizationFullNameID)
                      OR (
                             a.OrganizationFullNameID IS NOT NULL
                             AND b.OrganizationFullNameID IS NULL
                         )
                      OR (
                             a.OrganizationFullNameID IS NULL
                             AND b.OrganizationFullNameID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80110000000,
                       a.OrganizationID,
                       NULL,
                       b.OrganizjationAbbreviationNameID,
                       a.OrganizjationAbbreviationNameID,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.OrganizjationAbbreviationNameID <> b.OrganizjationAbbreviationNameID)
                      OR (
                             a.OrganizjationAbbreviationNameID IS NOT NULL
                             AND b.OrganizjationAbbreviationNameID IS NULL
                         )
                      OR (
                             a.OrganizjationAbbreviationNameID IS NULL
                             AND b.OrganizjationAbbreviationNameID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       51577490000000,
                       a.OrganizationID,
                       NULL,
                       b.CustomizationPackageID,
                       a.CustomizationPackageID,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.CustomizationPackageID <> b.CustomizationPackageID)
                      OR (
                             a.CustomizationPackageID IS NOT NULL
                             AND b.CustomizationPackageID IS NULL
                         )
                      OR (
                             a.CustomizationPackageID IS NULL
                             AND b.CustomizationPackageID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4577920000000,
                       a.OrganizationID,
                       NULL,
                       b.LocationID,
                       a.LocationID,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.LocationID <> b.LocationID)
                      OR (
                             a.LocationID IS NOT NULL
                             AND b.LocationID IS NULL
                         )
                      OR (
                             a.LocationID IS NULL
                             AND b.LocationID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80150000000,
                       a.OrganizationID,
                       NULL,
                       b.ContactPhone,
                       a.ContactPhone,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.ContactPhone <> b.ContactPhone)
                      OR (
                             a.ContactPhone IS NOT NULL
                             AND b.ContactPhone IS NULL
                         )
                      OR (
                             a.ContactPhone IS NULL
                             AND b.ContactPhone IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       50815930000000,
                       a.OrganizationID,
                       NULL,
                       b.AccessoryCode,
                       a.AccessoryCode,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.AccessoryCode <> b.AccessoryCode)
                      OR (
                             a.AccessoryCode IS NOT NULL
                             AND b.AccessoryCode IS NULL
                         )
                      OR (
                             a.AccessoryCode IS NULL
                             AND b.AccessoryCode IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       51523430000000,
                       a.OrganizationID,
                       NULL,
                       b.EIDSSOrganizationID,
                       a.EIDSSOrganizationID,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.EIDSSOrganizationID <> b.EIDSSOrganizationID)
                      OR (
                             a.EIDSSOrganizationID IS NOT NULL
                             AND b.EIDSSOrganizationID IS NULL
                         )
                      OR (
                             a.EIDSSOrganizationID IS NULL
                             AND b.EIDSSOrganizationID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       51586990000045,
                       a.OrganizationID,
                       NULL,
                       b.OrganizationTypeID,
                       a.OrganizationTypeID,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.OrganizationTypeID <> b.OrganizationTypeID)
                      OR (
                             a.OrganizationTypeID IS NOT NULL
                             AND b.OrganizationTypeID IS NULL
                         )
                      OR (
                             a.OrganizationTypeID IS NULL
                             AND b.OrganizationTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       51586990000046,
                       a.OrganizationID,
                       NULL,
                       b.OwnershipFormID,
                       a.OwnershipFormID,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.OwnershipFormID <> b.OwnershipFormID)
                      OR (
                             a.OwnershipFormID IS NOT NULL
                             AND b.OwnershipFormID IS NULL
                         )
                      OR (
                             a.OwnershipFormID IS NULL
                             AND b.OwnershipFormID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       51586990000047,
                       a.OrganizationID,
                       NULL,
                       b.LegalFormID,
                       a.LegalFormID,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.LegalFormID <> b.LegalFormID)
                      OR (
                             a.LegalFormID IS NOT NULL
                             AND b.LegalFormID IS NULL
                         )
                      OR (
                             a.LegalFormID IS NULL
                             AND b.LegalFormID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       51586990000048,
                       a.OrganizationID,
                       NULL,
                       b.MainFormOfActivityID,
                       a.MainFormOfActivityID,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.MainFormOfActivityID <> b.MainFormOfActivityID)
                      OR (
                             a.MainFormOfActivityID IS NOT NULL
                             AND b.MainFormOfActivityID IS NULL
                         )
                      OR (
                             a.MainFormOfActivityID IS NULL
                             AND b.MainFormOfActivityID IS NOT NULL
                         );
            -- End data audit
            END

            WHILE EXISTS (SELECT * FROM @DepartmentsTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = DepartmentID,
                    @DepartmentID = DepartmentID,
                    @DefaultValue = DepartmentNameDefaultValue,
                    @NationalValue = DepartmentNameNationalValue,
                    @DepartmentOrder = OrderNumber,
                    @RowStatus = RowStatus
                FROM @DepartmentsTemp
                ORDER BY RowStatus DESC,
                         DepartmentID;

                INSERT INTO @SuppressDepartmentSelect
                EXECUTE dbo.USP_ADMIN_DEPARTMENTS_SET @LanguageID,
                                                      @DepartmentID,
                                                      @DefaultValue,
                                                      @NationalValue,
                                                      @OrganizationKey,
                                                      NULL,
                                                      @DepartmentOrder,
                                                      @AuditUserName,
                                                      @DataAuditEventID,
                                                      @OrganizationID,
                                                      @RowStatus;

                SET @ReturnMessage =
                (
                    SELECT MAX(ReturnMessage) FROM @SuppressDepartmentSelect
                );

                IF @ReturnMessage = 'DOES EXIST'
                BEGIN
                    SET @ReturnMessage = 'DEPARTMENT DEFAULT VALUE DOES EXISTS,' + @DefaultValue;
                    SET @ReturnCode = 3;

                    DELETE FROM @DepartmentsTemp;
                END
                ELSE
                BEGIN
                    DELETE FROM @DepartmentsTemp
                    WHERE DepartmentID = @RowID;
                END
            END;

            IF @@TRANCOUNT > 0
                COMMIT;
        END

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @OrganizationKey KeyId,
               'OrganizationKey' KeyName,
               @AddressID AdditionalKeyId,
               'AddressID' AdditionalKeyName;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK;

        THROW;
    END CATCH
END
GO

-- ===============================================================================================================
-- Name: USP_EMPLOYEEGROUP_GETLIST
-- Description: 
-- Author: Ricky Moss
--
-- History of changes
--
-- Name					Date			Change
-- ---------------------------------------------------------------------------------------------------------------
-- Ricky Moss			11/25/2019		Initial Release
-- Ricky Moss			12/03/2019		Added Pagination
-- Ricky Moss			12/11/2019		Added idfsEmployeeGroupName
-- Ann Xiong			05/18/2021		Added paging
-- Mandar Kularni		07/01/2021		Replaced parameter @user with @idfsSite
-- Ann Xiong            03/01/2023	    Added intRowStaus =0 in tlbEmployeeGroup eg
--
-- EXEC USP_ADMIN_EMPLOYEEGROUP_GETLIST 'Human', NULL, 'en', 1, 1, 10, 'strDefault' , 'asc'
-- EXEC USP_ADMIN_EMPLOYEEGROUP_GETLIST 'La', null, 'ru', 871, 1, 10, 'strDefault' , 'asc'
-- ===============================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_EMPLOYEEGROUP_GETLIST]
(

		@strName NVARCHAR(500),
		@strDescription NVARCHAR(1000),
		@langId NVARCHAR(50)
		,@idfsSite BIGINT
		,@pageNo INT = 1
		,@pageSize INT = 10 
		,@sortColumn NVARCHAR(30) = 'strDefault' 
		,@sortOrder NVARCHAR(4) = 'asc'
)
AS
BEGIN
	BEGIN TRY
		DECLARE @firstRec INT
		DECLARE @lastRec INT
		DECLARE @t TABLE( 
			idfEmployeeGroup bigint,
			idfsEmployeeGroupName bigint,
			strDefault nvarchar(2000), 
			strName nvarchar(2000),
			strDescription nvarchar(2000) 
			)
	
		SET @firstRec = (@pageNo-1)* @pagesize
		SET @lastRec = (@pageNo*@pageSize+1)
		
		INSERT INTO @T
		SELECT	eg.idfEmployeeGroup, 
				eg.idfsEmployeeGroupName, 
				egbr.strDefault, 
				egbr.[name] as strName, 
				eg.strDescription 
		FROM	tlbEmployeeGroup eg
				JOIN FN_GBL_ReferenceRepair(@langId, 19000022) egbr
					ON eg.idfsEmployeeGroupName = egbr.idfsReference
		WHERE	ISNULL(strDefault, '') LIKE IIF(@strName IS NOT NULL, '%' + @strName + '%', ISNULL(strDefault,'')) 
		AND		ISNULL(strDescription, '') LIKE IIF(@strDescription IS NOT NULL, '%' + @strDescription + '%', ISNULL(strDescription,''))
		AND eg.intRowStatus =0 and egbr.intRowStatus=0 and eg.idfsEmployeeGroupName != -506
		--AND		eg.idfsSite =  @idfsSite
		AND		(eg.idfsSite =  @idfsSite or @idfsSite IS NULL)
		AND eg.idfsSite != -506

		ORDER BY strDefault 		
		;
		WITH CTEResults as
		(
			SELECT ROW_NUMBER() OVER ( ORDER BY 
				CASE WHEN @sortColumn = 'idfEmployeeGroup' AND @SortOrder = 'asc' THEN idfEmployeeGroup END ASC,
				CASE WHEN @sortColumn = 'idfEmployeeGroup' AND @SortOrder = 'desc' THEN idfEmployeeGroup END DESC,
				CASE WHEN @sortColumn = 'idfsEmployeeGroupName' AND @SortOrder = 'asc' THEN idfsEmployeeGroupName END ASC,
				CASE WHEN @sortColumn = 'idfsEmployeeGroupName' AND @SortOrder = 'desc' THEN idfsEmployeeGroupName END DESC,
				CASE WHEN @sortColumn = 'strDefault' AND @SortOrder = 'asc' THEN strDefault END ASC,
				CASE WHEN @sortColumn = 'strDefault' AND @SortOrder = 'desc' THEN strDefault END DESC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'asc' THEN strName END ASC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'desc' THEN strName END DESC,
				CASE WHEN @sortColumn = 'strDescription' AND @SortOrder = 'asc' THEN strDescription END ASC,
				CASE WHEN @sortColumn = 'strDescription' AND @SortOrder = 'desc' THEN strDescription END DESC
		) AS ROWNUM,
		COUNT(*) OVER () AS 
				TotalRowCount, 
				idfEmployeeGroup,
				idfsEmployeeGroupName,
				strDefault,
				strName,
				strDescription
			FROM @T
		)

			SELECT
				TotalRowCount, 
				idfEmployeeGroup,
				idfsEmployeeGroupName,
				strDefault,
				strName,
				strDescription,
				TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
				CurrentPage = @pageNo 
		FROM CTEResults
		WHERE RowNum > @firstRec AND RowNum < @lastRec 
	END TRY
	BEGIN CATCH
		THROW
	END CATCH
END
GO


-- ============================================================================
-- Name: USP_GBL_EMPLOYEE_GROUP_GETList
-- Description:	Get employee group list for verifying user permissions.
--                      
-- Author: Stephen Long
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -----------------------------------------------
-- Stephen Long     04/30/2018 Initial release.
-- Stephen Long     10/03/2019 Stored procedure clean up.
-- Stephen Long		03/10/2020 Resolved duplicate role appearances
-- Mark Wilson		01/30/2021 Updated to filter intRowStatus = 1
-- Mark Wilson		05/17/2022 Updated to find idfsSite for CDR
-- Mani Govindarajan 02/4/2023 Commented get user group from CDR.
-- Mani Govindarajan 03/02/2023 Added intRowStatus Condition on groupName
-- exec USP_GBL_EMPLOYEE_GROUP_GETList 'en'
-- ============================================================================
ALTER PROCEDURE [dbo].[USP_GBL_EMPLOYEE_GROUP_GETList] (
@LangID NVARCHAR(50),
@idfsSite BIGINT
)
AS
BEGIN
	DECLARE @returnMsg VARCHAR(MAX) = 'SUCCESS';
	DECLARE @returnCode BIGINT = 0;
	--DECLARE @SupressSelect TABLE (
	--	retrunCode INT,
	--	returnMessage VARCHAR(200)
	--	)

	BEGIN TRY

---------------------------------------------------------------------------------
		--DECLARE @CDRSite BIGINT -- idfsSite for CDR
		--SELECT 
		--	@CDRSite = S.idfsSite
		--FROM dbo.tstSite S
		--INNER JOIN dbo.trtBaseReference SR ON SR.idfsBaseReference = S.idfsSiteType
		--WHERE S.intRowStatus = 0 
		--AND SR.strDefault = 'CDR'
		--		order by s.idfsSite desc

---------------------------------------------------------------------------------

		SELECT eg.idfEmployeeGroup,
			eg.idfsEmployeeGroupName,
			ISNULL(groupName.name, eg.strName) AS strName,
			eg.strDescription
		FROM dbo.tlbEmployeeGroup eg

		LEFT JOIN FN_GBL_ReferenceRepair_GET(@LangID, 19000022) groupName
			ON groupName.idfsReference = eg.idfsEmployeeGroupName
		WHERE 
			eg.idfEmployeeGroup <> - 1
			AND eg.intRowStatus = 0
			and groupName.intRowStatus=0
			AND		((eg.idfsSite =  @idfsSite OR @idfsSite IS NULL)
			AND eg.idfsSite != -506 and eg.idfsEmployeeGroupName != -506
			--OR (eg.idfsSite = @CDRSite)
			)

	    ORDER BY strName;

	--	SELECT @returnCode,
		--	@returnMsg;
	END TRY

	BEGIN CATCH
		--BEGIN
			--SET @returnCode = ERROR_NUMBER();
			--SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();

			--SELECT @returnCode,
				--@returnMsg;
		--END
	END CATCH;
END
GO

PRINT N'Refreshing Procedure [Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_Human_Aggregate_Disease_Summary_Report_Detail]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_Human_Aggregate_Disease_Summary_Report_Detail]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_SITE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_SITE_SET]';


GO
PRINT N'Update complete.';


GO
