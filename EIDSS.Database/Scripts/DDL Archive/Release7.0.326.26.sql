/*
Deployment script for EIDSS7_GG

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;

GO

PRINT N'Altering Procedure [dbo].[USP_GBL_TEST_INTERPRETATION_GETList]...';


GO
-- ================================================================================================
-- Name: USP_GBL_TEST_INTERPRETATION_GETList
--
-- Description:	Gets test interpretation records for the veterinary disease reports and active 
-- surveillance session use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     04/03/2018 Initial release.
-- Stephen Long     04/18/2019 Updated for the API.
-- Stephen Long     06/26/2019 Added veterinary disease report identifiers.
-- Stephen Long     07/31/2019 Corrected sample type join.
-- Stephen Long     08/15/2019 Fix for bug 4623; interpreted and validated by names.
-- Stephen Long     09/11/2019 Fix for diagnosis reference; use test validation instead of test.
-- Stephen Long     10/11/2019 Removed active row status check on joins as historical records 
--                             would get inaccurate/missing results.
-- Ann Xiong		12/17/2019 Added Species to select list.
-- Stephen Long     04/21/2020 Added intRowStatus checks and corrected interpreted by and 
--                             validated by joins to use function.
-- Stephen Long     12/29/2020 Optimized query; removed unneeded fields and joins.
-- Stephen Long     11/30/2021 Removed test ID and added pagination and sorting parameters.
-- Stephen Long     01/12/2022 Added paging and sorting logic.
-- Mike Kornegay	01/24/2022 Added EIDSSReportID to get the string version of the linked disease report.
-- Stephen Long     01/29/2022 Added test to test result matrix and indicative indicator for 
--                             connected disease report.
-- Mike Kornegay	08/25/2022 Added FarmMasterID to get the idfFarmActual for use when creating linked disease reports.
-- Mike Kornegay	12/21/2022 Added idfsUsingType from disease to return list.
--
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_GBL_TEST_INTERPRETATION_GETList]
(
    @LanguageID NVARCHAR(50),
    @PageNumber INT = 1,
    @PageSize INT = 10,
    @SortColumn NVARCHAR(30) = 'TestNameTypeName',
    @SortOrder NVARCHAR(4) = 'ASC',
    @DiseaseReportID BIGINT = NULL,
    @MonitoringSessionID BIGINT = NULL
)
AS
BEGIN
    DECLARE @firstRec INT,
            @lastRec INT;

    SET @firstRec = (@PageNumber - 1) * @PageSize;
    SET @lastRec = (@PageNumber * @PageSize + 1);

    SET NOCOUNT ON;

    BEGIN TRY
        IF @DiseaseReportID IS NOT NULL
        BEGIN
            SELECT TestInterpretationID,
                   DiseaseID,
                   DiseaseName,
				   DiseaseUsingType,
                   InterpretedStatusTypeID,
                   InterpretedStatusTypeName,
                   ValidatedByOrganizationID,
                   ValidatedByPersonID,
                   ValidatedByPersonName,
                   InterpretedByOrganizationID,
                   InterpretedByPersonID,
                   InterpretedByPersonName,
                   TestID,
                   ValidatedStatusIndicator,
                   ReportSessionCreatedIndicator,
                   ValidatedComment,
                   InterpretedComment,
                   ValidatedDate,
                   InterpretedDate,
                   ReadOnlyIndicator,
                   SampleID,
                   EIDSSLocalOrFieldSampleID,
                   EIDSSLaboratorySampleID,
                   SampleTypeName,
                   SpeciesID,
                   SpeciesTypeName,
                   Species,
                   AnimalID,
                   EIDSSAnimalID,
                   TestNameTypeID,
                   TestNameTypeName,
                   TestCategoryTypeID,
                   TestCategoryTypeName,
                   TestResultTypeID,
                   TestResultTypeName,
                   IndicativeIndicator, 
                   FarmID,
				   FarmMasterID,
                   EIDSSFarmID,
                   RowStatus,
                   DiseaseReportID,
				   EIDSSDiseaseReportID,
                   RowAction,
                   TotalRowCount,
                   CurrentPage,
                   TotalPages
            FROM
            (
                SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                       WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                            AND @SortOrder = 'ASC' THEN
                                                           m.strFieldBarcode
                                                   END ASC,
                                                   CASE
                                                       WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                            AND @SortOrder = 'DESC' THEN
                                                           m.strFieldBarcode
                                                   END DESC,
                                                   CASE
                                                       WHEN @SortColumn = 'EIDSSAnimalID'
                                                            AND @SortOrder = 'ASC' THEN
                                                           a.strAnimalCode
                                                   END ASC,
                                                   CASE
                                                       WHEN @SortColumn = 'EIDSSAnimalID'
                                                            AND @SortOrder = 'DESC' THEN
                                                           a.strAnimalCode
                                                   END DESC,
                                                   CASE
                                                       WHEN @SortColumn = 'DiseaseName'
                                                            AND @SortOrder = 'ASC' THEN
                                                           diagnosis.Name
                                                   END ASC,
                                                   CASE
                                                       WHEN @SortColumn = 'DiseaseName'
                                                            AND @SortOrder = 'DESC' THEN
                                                           diagnosis.Name
                                                   END DESC,
                                                   CASE
                                                       WHEN @SortColumn = 'TestNameTypeName'
                                                            AND @SortOrder = 'ASC' THEN
                                                           testNameType.Name
                                                   END ASC,
                                                   CASE
                                                       WHEN @SortColumn = 'TestNameTypeName'
                                                            AND @SortOrder = 'DESC' THEN
                                                           testNameType.Name
                                                   END DESC
                                         ) AS RowNum,
                       tv.idfTestValidation AS TestInterpretationID,
                       tv.idfsDiagnosis AS DiseaseID,
                       diagnosis.Name AS DiseaseName,
					   d.idfsUsingType AS DiseaseUsingType,
                       tv.idfsInterpretedStatus AS InterpretedStatusTypeID,
                       interpretedStatusType.name AS InterpretedStatusTypeName,
                       tv.idfValidatedByOffice AS ValidatedByOrganizationID,
                       tv.idfValidatedByPerson AS ValidatedByPersonID,
                       COALESCE(CONCAT(
                                          validatedByPerson.strFamilyName,
                                          CASE
                                              WHEN validatedByPerson.strFirstName IS NULL THEN
                                                  ''
                                              ELSE
                                                  ', '
                                          END,
                                          COALESCE(CONCAT(
                                                             validatedByPerson.strFirstName,
                                                             ' ',
                                                             validatedByPerson.strSecondName
                                                         ), validatedByPerson.strFirstName, validatedByPerson.strSecondName)
                                      ), validatedByPerson.strFamilyName, COALESCE(CONCAT(
                                                                                             validatedByPerson.strFirstName,
                                                                                             ' ',
                                                                                             validatedByPerson.strSecondName
                                                                                         ), validatedByPerson.strFirstName, validatedByPerson.strSecondName)) AS ValidatedByPersonName,
                       tv.idfInterpretedByOffice AS InterpretedByOrganizationID,
                       tv.idfInterpretedByPerson AS InterpretedByPersonID,
                       COALESCE(CONCAT(
                                          interpretedByPerson.strFamilyName,
                                          CASE
                                              WHEN interpretedByPerson.strFirstName IS NULL THEN
                                                  ''
                                              ELSE
                                                  ', '
                                          END,
                                          COALESCE(CONCAT(
                                                             interpretedByPerson.strFirstName,
                                                             ' ',
                                                             interpretedByPerson.strSecondName
                                                         ), interpretedByPerson.strFirstName, interpretedByPerson.strSecondName)
                                      ), interpretedByPerson.strFamilyName, COALESCE(CONCAT(
                                                                                               interpretedByPerson.strFirstName,
                                                                                               ' ',
                                                                                               interpretedByPerson.strSecondName
                                                                                           ), interpretedByPerson.strFirstName, interpretedByPerson.strSecondName)) AS InterpretedByPersonName,
                       tv.idfTesting AS TestID,
                       tv.blnValidateStatus AS ValidatedStatusIndicator,
                       tv.blnCaseCreated AS ReportSessionCreatedIndicator,
                       tv.strValidateComment AS ValidatedComment,
                       tv.strInterpretedComment AS InterpretedComment,
                       tv.datValidationDate AS ValidatedDate,
                       tv.datInterpretationDate AS InterpretedDate,
                       tv.blnReadOnly AS ReadOnlyIndicator,
                       t.idfMaterial AS SampleID,
                       m.strFieldBarCode AS EIDSSLocalOrFieldSampleID,
                       m.strBarCode AS EIDSSLaboratorySampleID,
                       sampleType.name AS SampleTypeName,
                       s.idfSpecies AS SpeciesID,
                       speciesType.name AS SpeciesTypeName,
                       'Herd/Flock ' + h.strHerdCode + ' - ' + speciesType.name AS Species,
                       a.idfAnimal AS AnimalID,
                       a.strAnimalCode AS EIDSSAnimalID,
                       t.idfsTestName AS TestNameTypeID,
                       testNameType.name AS TestNameTypeName,
                       t.idfsTestCategory AS TestCategoryTypeID,
                       testCategoryType.name AS TestCategoryTypeName,
                       t.idfsTestResult AS TestResultTypeID,
                       testResultType.name AS TestResultTypeName,
                       ttr.blnIndicative AS IndicativeIndicator, 
                       f.idfFarm AS FarmID,
					   f.idfFarmActual AS FarmMasterID,
                       f.strFarmCode AS EIDSSFarmID,
                       tv.intRowStatus AS RowStatus,
                       m.idfVetCase AS DiseaseReportID,
					   vc.strCaseID AS EIDSSDiseaseReportID,
                       0 AS RowAction,
			           COUNT(*) OVER () AS TotalRowCount,
			           CurrentPage = @PageNumber,
			           (COUNT(*) OVER () / @PageSize) + IIF(COUNT(*) % @PageSize > 0, 1, 0) AS TotalPages
                FROM dbo.tlbTestValidation tv
                    INNER JOIN dbo.tlbTesting t
                        ON t.idfTesting = tv.idfTesting
                           AND t.intRowStatus = 0
                    INNER JOIN dbo.tlbMaterial m
                        ON m.idfMaterial = t.idfMaterial
                           AND m.intRowStatus = 0
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000087) sampleType
                        ON sampleType.idfsReference = m.idfsSampleType
                    LEFT JOIN dbo.trtTestTypeToTestResult ttr 
                        ON ttr.idfsTestName = t.idfsTestName 
                            AND ttr.idfsTestResult = t.idfsTestResult
                                AND ttr.intRowStatus = 0
                    LEFT JOIN dbo.tlbAnimal a
                        ON a.idfAnimal = m.idfAnimal
                           AND a.intRowStatus = 0
                    LEFT JOIN dbo.tlbSpecies s
                        ON s.idfSpecies = m.idfSpecies
                           AND s.intRowStatus = 0
                    LEFT JOIN dbo.tlbHerd h
                        ON h.idfHerd = s.idfHerd
                           AND h.intRowStatus = 0
                    LEFT JOIN dbo.tlbFarm f
                        ON f.idfFarm = h.idfFarm
                           AND f.intRowStatus = 0
                    LEFT JOIN dbo.tlbPerson interpretedByPerson
                        ON interpretedByPerson.idfPerson = tv.idfInterpretedByPerson
                           AND interpretedByPerson.intRowStatus = 0
                    LEFT JOIN dbo.tlbPerson validatedByPerson
                        ON validatedByPerson.idfPerson = tv.idfValidatedByPerson
                           AND validatedByPerson.intRowStatus = 0
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000106) interpretedStatusType
                        ON interpretedStatusType.idfsReference = tv.idfsInterpretedStatus
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) diagnosis
                        ON diagnosis.idfsReference = tv.idfsDiagnosis
					INNER JOIN dbo.trtDiagnosis d
						ON d.idfsDiagnosis = diagnosis.idfsReference
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000086) speciesType
                        ON speciesType.idfsReference = s.idfsSpeciesType
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000097) testNameType
                        ON testNameType.idfsReference = t.idfsTestName
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000095) testCategoryType
                        ON testCategoryType.idfsReference = t.idfsTestCategory
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000096) testResultType
                        ON testResultType.idfsReference = t.idfsTestResult
					LEFT JOIN dbo.tlbVetCase vc
						ON vc.idfVetCase = m.idfVetCase
						AND vc.intRowStatus = 0
                WHERE tv.intRowStatus = 0
                      AND m.idfVetCase = @DiseaseReportID
                GROUP BY tv.idfTestValidation,
                       tv.idfsDiagnosis,
                       diagnosis.Name,
					   d.idfsUsingType,
                       tv.idfsInterpretedStatus,
                       interpretedStatusType.name,
                       tv.idfValidatedByOffice,
                       tv.idfValidatedByPerson,
                       validatedByPerson.strFamilyName,
                       validatedByPerson.strFirstName,
                       validatedByPerson.strSecondName,
                       tv.idfInterpretedByOffice,
                       tv.idfInterpretedByPerson,
                       interpretedByPerson.strFamilyName,
                       interpretedByPerson.strFirstName,
                       interpretedByPerson.strSecondName,
                       tv.idfTesting,
                       tv.blnValidateStatus,
                       tv.blnCaseCreated,
                       tv.strValidateComment,
                       tv.strInterpretedComment,
                       tv.datValidationDate,
                       tv.datInterpretationDate,
                       tv.blnReadOnly,
                       t.idfMaterial,
                       m.strFieldBarCode,
                       m.strBarCode,
                       sampleType.name,
                       s.idfSpecies,
                       speciesType.name,
                       h.strHerdCode,
                       a.idfAnimal,
                       a.strAnimalCode,
                       t.idfsTestName,
                       testNameType.name,
                       t.idfsTestCategory,
                       testCategoryType.name,
                       t.idfsTestResult,
                       testResultType.name,
                       ttr.blnIndicative, 
                       f.idfFarm,
					   f.idfFarmActual,
                       f.strFarmCode,
                       tv.intRowStatus,
                       m.idfVetCase,
					   vc.strCaseID
            ) AS x
            WHERE RowNum > @firstRec
                  AND RowNum < @lastRec
            ORDER BY RowNum;
        END
        ELSE
        BEGIN
            SELECT TestInterpretationID,
                   DiseaseID,
                   DiseaseName,
				   DiseaseUsingType,
                   InterpretedStatusTypeID,
                   InterpretedStatusTypeName,
                   ValidatedByOrganizationID,
                   ValidatedByPersonID,
                   ValidatedByPersonName,
                   InterpretedByOrganizationID,
                   InterpretedByPersonID,
                   InterpretedByPersonName,
                   TestID,
                   ValidatedStatusIndicator,
                   ReportSessionCreatedIndicator,
                   ValidatedComment,
                   InterpretedComment,
                   ValidatedDate,
                   InterpretedDate,
                   ReadOnlyIndicator,
                   SampleID,
                   EIDSSLocalOrFieldSampleID,
                   EIDSSLaboratorySampleID,
                   SampleTypeName,
                   SpeciesID,
                   SpeciesTypeName,
                   Species,
                   AnimalID,
                   EIDSSAnimalID,
                   TestNameTypeID,
                   TestNameTypeName,
                   TestCategoryTypeID,
                   TestCategoryTypeName,
                   TestResultTypeID,
                   TestResultTypeName,
                   IndicativeIndicator, 
                   FarmID,
				   FarmMasterID,
                   EIDSSFarmID,
                   RowStatus,
                   DiseaseReportID,
				   EIDSSDiseaseReportID,
                   RowAction,
                   TotalRowCount,
                   CurrentPage,
                   TotalPages
            FROM
            (
                SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                       WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                            AND @SortOrder = 'ASC' THEN
                                                           m.strFieldBarcode
                                                   END ASC,
                                                   CASE
                                                       WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
                                                            AND @SortOrder = 'DESC' THEN
                                                           m.strFieldBarcode
                                                   END DESC,
                                                   CASE
                                                       WHEN @SortColumn = 'EIDSSAnimalID'
                                                            AND @SortOrder = 'ASC' THEN
                                                           a.strAnimalCode
                                                   END ASC,
                                                   CASE
                                                       WHEN @SortColumn = 'EIDSSAnimalID'
                                                            AND @SortOrder = 'DESC' THEN
                                                           a.strAnimalCode
                                                   END DESC,
                                                   CASE
                                                       WHEN @SortColumn = 'DiseaseName'
                                                            AND @SortOrder = 'ASC' THEN
                                                           diagnosis.Name
                                                   END ASC,
                                                   CASE
                                                       WHEN @SortColumn = 'DiseaseName'
                                                            AND @SortOrder = 'DESC' THEN
                                                           diagnosis.Name
                                                   END DESC,
                                                   CASE
                                                       WHEN @SortColumn = 'TestNameTypeName'
                                                            AND @SortOrder = 'ASC' THEN
                                                           testNameType.Name
                                                   END ASC,
                                                   CASE
                                                       WHEN @SortColumn = 'TestNameTypeName'
                                                            AND @SortOrder = 'DESC' THEN
                                                           testNameType.Name
                                                   END DESC
                                         ) AS RowNum,
                       tv.idfTestValidation AS TestInterpretationID,
                       tv.idfsDiagnosis AS DiseaseID,
                       diagnosis.Name AS DiseaseName,
					   d.idfsUsingType AS DiseaseUsingType,
                       tv.idfsInterpretedStatus AS InterpretedStatusTypeID,
                       interpretedStatusType.name AS InterpretedStatusTypeName,
                       tv.idfValidatedByOffice AS ValidatedByOrganizationID,
                       tv.idfValidatedByPerson AS ValidatedByPersonID,
                       COALESCE(CONCAT(
                                          validatedByPerson.strFamilyName,
                                          CASE
                                              WHEN validatedByPerson.strFirstName IS NULL THEN
                                                  ''
                                              ELSE
                                                  ', '
                                          END,
                                          COALESCE(CONCAT(
                                                             validatedByPerson.strFirstName,
                                                             ' ',
                                                             validatedByPerson.strSecondName
                                                         ), validatedByPerson.strFirstName, validatedByPerson.strSecondName)
                                      ), validatedByPerson.strFamilyName, COALESCE(CONCAT(
                                                                                             validatedByPerson.strFirstName,
                                                                                             ' ',
                                                                                             validatedByPerson.strSecondName
                                                                                         ), validatedByPerson.strFirstName, validatedByPerson.strSecondName)) AS ValidatedByPersonName,
                       tv.idfInterpretedByOffice AS InterpretedByOrganizationID,
                       tv.idfInterpretedByPerson AS InterpretedByPersonID,
                       COALESCE(CONCAT(
                                          interpretedByPerson.strFamilyName,
                                          CASE
                                              WHEN interpretedByPerson.strFirstName IS NULL THEN
                                                  ''
                                              ELSE
                                                  ', '
                                          END,
                                          COALESCE(CONCAT(
                                                             interpretedByPerson.strFirstName,
                                                             ' ',
                                                             interpretedByPerson.strSecondName
                                                         ), interpretedByPerson.strFirstName, interpretedByPerson.strSecondName)
                                      ), interpretedByPerson.strFamilyName, COALESCE(CONCAT(
                                                                                               interpretedByPerson.strFirstName,
                                                                                               ' ',
                                                                                               interpretedByPerson.strSecondName
                                                                                           ), interpretedByPerson.strFirstName, interpretedByPerson.strSecondName)) AS InterpretedByPersonName,
                       tv.idfTesting AS TestID,
                       tv.blnValidateStatus AS ValidatedStatusIndicator,
                       tv.blnCaseCreated AS ReportSessionCreatedIndicator,
                       tv.strValidateComment AS ValidatedComment,
                       tv.strInterpretedComment AS InterpretedComment,
                       tv.datValidationDate AS ValidatedDate,
                       tv.datInterpretationDate AS InterpretedDate,
                       tv.blnReadOnly AS ReadOnlyIndicator,
                       t.idfMaterial AS SampleID,
                       m.strFieldBarCode AS EIDSSLocalOrFieldSampleID,
                       m.strBarCode AS EIDSSLaboratorySampleID,
                       sampleType.name AS SampleTypeName,
                       s.idfSpecies AS SpeciesID,
                       speciesType.name AS SpeciesTypeName,
                       'Herd/Flock ' + h.strHerdCode + ' - ' + speciesType.name AS Species,
                       a.idfAnimal AS AnimalID,
                       a.strAnimalCode AS EIDSSAnimalID,
                       t.idfsTestName AS TestNameTypeID,
                       testNameType.name AS TestNameTypeName,
                       t.idfsTestCategory AS TestCategoryTypeID,
                       testCategoryType.name AS TestCategoryTypeName,
                       t.idfsTestResult AS TestResultTypeID,
                       testResultType.name AS TestResultTypeName,
                       ttr.blnIndicative AS IndicativeIndicator, 
                       f.idfFarm AS FarmID,
					   f.idfFarmActual AS FarmMasterID,
                       f.strFarmCode AS EIDSSFarmID,
                       tv.intRowStatus AS RowStatus,
                       m.idfVetCase AS DiseaseReportID,
					   vc.strCaseID AS EIDSSDiseaseReportID,
                       0 AS RowAction,
			           COUNT(*) OVER () AS TotalRowCount,
			           CurrentPage = @PageNumber,
			           (COUNT(*) OVER () / @PageSize) + IIF(COUNT(*) % @PageSize > 0, 1, 0) AS TotalPages
                FROM dbo.tlbTestValidation tv
                    INNER JOIN dbo.tlbTesting t
                        ON t.idfTesting = tv.idfTesting
                           AND t.intRowStatus = 0
                    INNER JOIN dbo.tlbMaterial m
                        ON m.idfMaterial = t.idfMaterial
                           AND m.intRowStatus = 0
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000087) sampleType
                        ON sampleType.idfsReference = m.idfsSampleType
                    LEFT JOIN dbo.trtTestTypeToTestResult ttr 
                        ON ttr.idfsTestName = t.idfsTestName 
                            AND ttr.idfsTestResult = t.idfsTestResult
                                AND ttr.intRowStatus = 0
                    LEFT JOIN dbo.tlbAnimal a
                        ON a.idfAnimal = m.idfAnimal
                           AND a.intRowStatus = 0
                    LEFT JOIN dbo.tlbSpecies s
                        ON s.idfSpecies = m.idfSpecies
                           AND s.intRowStatus = 0
                    LEFT JOIN dbo.tlbHerd h
                        ON h.idfHerd = s.idfHerd
                           AND h.intRowStatus = 0
                    LEFT JOIN dbo.tlbFarm f
                        ON f.idfFarm = h.idfFarm
                           AND f.intRowStatus = 0
                    LEFT JOIN dbo.tlbPerson interpretedByPerson
                        ON interpretedByPerson.idfPerson = tv.idfInterpretedByPerson
                           AND interpretedByPerson.intRowStatus = 0
                    LEFT JOIN dbo.tlbPerson validatedByPerson
                        ON validatedByPerson.idfPerson = tv.idfValidatedByPerson
                           AND validatedByPerson.intRowStatus = 0
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000106) interpretedStatusType
                        ON interpretedStatusType.idfsReference = tv.idfsInterpretedStatus
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) diagnosis
                        ON diagnosis.idfsReference = tv.idfsDiagnosis
					INNER JOIN dbo.trtDiagnosis d
						ON d.idfsDiagnosis = diagnosis.idfsReference
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000086) speciesType
                        ON speciesType.idfsReference = s.idfsSpeciesType
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000097) testNameType
                        ON testNameType.idfsReference = t.idfsTestName
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000095) testCategoryType
                        ON testCategoryType.idfsReference = t.idfsTestCategory
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000096) testResultType
                        ON testResultType.idfsReference = t.idfsTestResult
					LEFT JOIN dbo.tlbVetCase vc 
						ON vc.idfVetCase = m.idfVetCase
						AND vc.intRowStatus = 0
                WHERE tv.intRowStatus = 0
                      AND m.idfMonitoringSession = @MonitoringSessionID
                GROUP BY tv.idfTestValidation,
                       tv.idfsDiagnosis,
                       diagnosis.Name,
					   d.idfsUsingType,
                       tv.idfsInterpretedStatus,
                       interpretedStatusType.name,
                       tv.idfValidatedByOffice,
                       tv.idfValidatedByPerson,
                       validatedByPerson.strFamilyName,
                       validatedByPerson.strFirstName,
                       validatedByPerson.strSecondName,
                       tv.idfInterpretedByOffice,
                       tv.idfInterpretedByPerson,
                       interpretedByPerson.strFamilyName,
                       interpretedByPerson.strFirstName,
                       interpretedByPerson.strSecondName,
                       tv.idfTesting,
                       tv.blnValidateStatus,
                       tv.blnCaseCreated,
                       tv.strValidateComment,
                       tv.strInterpretedComment,
                       tv.datValidationDate,
                       tv.datInterpretationDate,
                       tv.blnReadOnly,
                       t.idfMaterial,
                       m.strFieldBarCode,
                       m.strBarCode,
                       sampleType.name,
                       s.idfSpecies,
                       speciesType.name,
                       h.strHerdCode,
                       a.idfAnimal,
                       a.strAnimalCode,
                       t.idfsTestName,
                       testNameType.name,
                       t.idfsTestCategory,
                       testCategoryType.name,
                       t.idfsTestResult,
                       testResultType.name,
                       ttr.blnIndicative, 
                       f.idfFarm,
					   f.idfFarmActual,
                       f.strFarmCode,
                       tv.intRowStatus,
                       m.idfVetCase,
					   vc.strCaseID
            ) AS x
            WHERE RowNum > @firstRec
                  AND RowNum < @lastRec
            ORDER BY RowNum;
        END;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_VAS_MONITORING_SESSION_SET]...';


GO
-- ================================================================================================
-- Name: USP_VAS_MONITORING_SESSION_SET
--
-- Description:	Inserts or updates veterinary surveillance session for the veterinary active surveillance 
-- session use cases.
--                      
-- Revision History:
-- Name					Date       Change Detail
-- ---------------		---------- -------------------------------------------------------------------
-- Mike Kornegay		02/02/2022 Initial release. (Copied from USP_VET_DISEASE_REPORT_SET).
-- Mike Kornegay		02/14/2022 Correct problem with saving actions - retrieve monitoring session id first.
-- Mike Kornegay		02/15/2022 Removed @SpeciesTypeID because this was the same as @ReportTypeID
-- Mike Kornegay		02/16/2022 Added back the animals temp to add or update animals 
--							  before samples are written.
-- Mike Kornegay		02/26/2022 Fixed FlockOrHerd section not passing the FarmID.
-- Mike Kornegay		03/08/2022 Removed MonitoringSessionID from samples - should come from new or update key
--							  and added @LocationID
-- Mike Kornegay		03/11/2022 Refactored Aggregate Info sections.
-- Mike Kornegay		03/18/2022 Corrected parameters for USSP_VCT_MONITORING_SESSION_SUMMARY_SET.
-- Mike Kornegay		03/19/2022 Corrected issue with farm copy for aggregate farms and saving of aggregate diseases.
-- Mike Kornegay		03/21/2022 Corrected defect in reading aggregate summary temp table.
-- Mani Govindarajan	05/26/2022 Disassociate MonitoringSession with Farm in tlbFarm Table  search for comment -- disassociate farm with session
-- Mike Kornegay		06/02/2022 Add notifications save routine.
-- Mike Kornegay		06/13/2022 Changed references for @ReportTypeID to point to the new SessionCategoryID fields.
-- Stephen Long         07/06/2022 Updates for site alerts to call new stored procedure.
-- Mike Kornegay		07/08/2022 Correct logic for removing aggregate farms from monitoring session.
-- Mike Kornegay		08/18/2022 Added logic for storing multiple diseases per sample.
-- Mike Kornegay        08/19/2022 Correct error on SampleToDisease temp table.
-- Mike Kornegay		09/05/2022 Fixed error where MonitoringSessionToDiagnosisID was not set correctly.
-- Mike Kornegay		09/30/2022 Add saving of idfsMonitoringSessionSpeciesType and correct farm save for new type.
-- Mike Kornegay		10/07/2022 Defect #5140 - EIDSSLocalOrFieldSampleID not generating correctly.
-- Mike Kornegay		11/01/2022 Correct iteration on EIDSSLocalOrFieldSampleID.
-- Leo Tracchia			12/07/2022 added logic for data auditing 
-- Leo Tracchia			12/15/2022 added additional audit logic for new parameters in GBL procs
-- Mike Kornegay		12/20/2022 corrected parameter list for USSP_GBL_TESTS_SET.
--
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VAS_MONITORING_SESSION_SET]
(
    @MonitoringSessionID BIGINT = NULL,
    @SessionID NVARCHAR(200) = NULL,
    @SessionStartDate DATETIME = NULL,
    @SessionEndDate DATETIME = NULL,
    @SessionStatusTypeID BIGINT = NULL,
    @SessionCategoryID BIGINT = NULL,
    @SiteID BIGINT = NULL,
    @LegacySessionID NVARCHAR(200) = NULL,
    @CountryID BIGINT = NULL,
    @RegionID BIGINT = NULL,
    @RayonID BIGINT = NULL,
    @SettlementID BIGINT = NULL,
    @CampaignKey BIGINT = NULL,
    @CampaignID NVARCHAR(200) = NULL,
    @DateEntered DATETIME = NULL,
    @EnteredByPersonID BIGINT = NULL,
    @RowStatus INT,
    @ReportTypeID BIGINT = NULL,
    @AuditUserName NVARCHAR(200),
    @FlocksOrHerds NVARCHAR(MAX) = NULL,
    @DiseaseSpeciesSamples NVARCHAR(MAX) = NULL,
    @Species NVARCHAR(MAX) = NULL,
    @Animals NVARCHAR(MAX) = NULL,
    @Farms NVARCHAR(MAX) = NULL,
    @Samples NVARCHAR(MAX) = NULL,
	@SamplesToDiseases NVARCHAR(MAX) = NULL,
    @LaboratoryTests NVARCHAR(MAX) = NULL,
    @LaboratoryTestInterpretations NVARCHAR(MAX) = NULL,
    @Actions NVARCHAR(MAX) = NULL,
    @AggregateSummaryInfo NVARCHAR(MAX) = NULL,
    @AggregateSummaryDiseases NVARCHAR(MAX) = NULL,
    @FarmsAggregate NVARCHAR(MAX) = NULL,
    @FlocksOrHerdsAggregate NVARCHAR(MAX) = NULL,
    @SpeciesAggregate NVARCHAR(MAX) = NULL,
    @DiseaseReports NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL,
    @UserID BIGINT,
    @LocationID BIGINT = NULL,
	@LinkLocalOrFieldSampleIDToReportID BIT = 0
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT = 0;
        DECLARE @ReturnMessage NVARCHAR(MAX) = N'SUCCESS';
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );
        DECLARE @RowAction INT = NULL,
                @RowID BIGINT,
				@ChildRowID BIGINT,
				@Iteration INT = 0,
                @NewFarmOwnerID BIGINT = NULL,
                @FarmID BIGINT = NULL,
                @FarmMasterID BIGINT = NULL,
                @FarmOwnerID BIGINT = NULL,
                @Latitude FLOAT = NULL,
                @Longitude FLOAT = NULL,
                @FlockOrHerdID BIGINT = NULL,
                @FlockOrHerdMasterID BIGINT = NULL,
                @EIDSSFlockOrHerdID NVARCHAR(200) = NULL,
                @SickAnimalQuantity INT = NULL,
                @TotalAnimalQuantity INT = NULL,
                @DeadAnimalQuantity INT = NULL,
                @Comments NVARCHAR(2000) = NULL,
                @SpeciesID BIGINT = NULL,
                @SpeciesMasterID BIGINT = NULL,
                @InternalSpeciesTypeID BIGINT = NULL,
                @StartOfSignsDate DATETIME = NULL,
                @AverageAge NVARCHAR(200) = NULL,
                @ObservationID BIGINT = NULL,
                @AnimalID BIGINT = NULL,
                @SexTypeID BIGINT = NULL,
                @DiseaseID BIGINT = NULL,
                @ConditionTypeID BIGINT = NULL,
                @AgeTypeID BIGINT = NULL,
                @EIDSSAnimalID NVARCHAR(200) = NULL,
                @AnimalName NVARCHAR(200) = NULL,
                @Color NVARCHAR(200) = NULL,
                @AnimalDescription NVARCHAR(200) = NULL,
                @ClinicalSignsIndicator BIGINT = NULL,
                @VaccinationID BIGINT,
                @VaccinationTypeID BIGINT = NULL,
                @RouteTypeID BIGINT = NULL,
                @VaccinationDate DATETIME = NULL,
                @Manufacturer NVARCHAR(200) = NULL,
                @LotNumber NVARCHAR(200) = NULL,
                @NumberVaccinated INT = NULL,
                @SampleID BIGINT,
                @SampleTypeID BIGINT = NULL,
                @RootSampleID BIGINT = NULL,
                @ParentSampleID BIGINT = NULL,
                @CollectedByPersonID BIGINT = NULL,
                @CollectedByOrganizationID BIGINT = NULL,
                @CollectionDate DATETIME = NULL,
                @SentDate DATETIME = NULL,
                @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
                @SampleStatusTypeID BIGINT = NULL,
                @SpeciesTypeID BIGINT = NULL,
                @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
                @SentToOrganizationID BIGINT = NULL,
                @ReadOnlyIndicator BIT = NULL,
                @CurrentSiteID BIGINT = NULL,
                @BirdStatusTypeID BIGINT = NULL,
                @PensideTestID BIGINT = NULL,
                @PensideTestResultTypeID BIGINT = NULL,
                @PensideTestNameTypeID BIGINT = NULL,
                @TestedByPersonID BIGINT = NULL,
                @TestedByOrganizationID BIGINT = NULL,
                @TestDate DATETIME = NULL,
                @PensideTestCategoryTypeID BIGINT = NULL,
                @TestID BIGINT = NULL,
                @TestNameTypeID BIGINT = NULL,
                @TestCategoryTypeID BIGINT = NULL,
                @TestResultTypeID BIGINT = NULL,
                @TestStatusTypeID BIGINT,
                @BatchTestID BIGINT = NULL,
                @StartedDate DATETIME = NULL,
                @ResultDate DATETIME = NULL,
                @ResultEnteredByOrganizationID BIGINT = NULL,
                @ResultEnteredByPersonID BIGINT = NULL,
                @ValidatedByOrganizationID BIGINT = NULL,
                @ValidatedByPersonID BIGINT = NULL,
                @NonLaboratoryTestIndicator BIT,
                @ExternalTestIndicator BIT = NULL,
                @PerformedByOrganizationID BIGINT = NULL,
                @ReceivedDate DATETIME = NULL,
                @ContactPersonName NVARCHAR(200) = NULL,
                @TestMonitoringSesssionID BIGINT = NULL,
                @TestInterpretationID BIGINT,
                @InterpretedStatusTypeID BIGINT = NULL,
                @InterpretedByOrganizationID BIGINT = NULL,
                @InterpretedByPersonID BIGINT = NULL,
                @TestingInterpretations BIGINT,
                @ValidatedStatusIndicator BIT = NULL,
                @ReportSessionCreatedIndicator BIT = NULL,
                @ValidatedComment NVARCHAR(200) = NULL,
                @InterpretedComment NVARCHAR(200) = NULL,
                @ValidatedDate DATETIME = NULL,
                @InterpretedDate DATETIME = NULL,
                @CaseLogID BIGINT,
                @LogStatusTypeID BIGINT = NULL,
                @LoggedByPersonID BIGINT = NULL,
                @LogDate DATETIME = NULL,
                @ActionRequired NVARCHAR(200) = NULL,
                @VeterinaryDiseaseReportRelationshipID BIGINT = NULL,
                @RelatedToSpeciesID BIGINT = NULL,
                @RelatedToAnimalID BIGINT = NULL,
                @RelatedToObservationID BIGINT = NULL,
                @FormTemplateID BIGINT,
                @ObservationSiteID BIGINT,
                @ActivityID BIGINT = NULL,
                @ActivityIDNew BIGINT = NULL,
                @ParameterID BIGINT = NULL,
                @ParameterValue SQL_VARIANT = NULL,
                @ParameterRowID BIGINT = NULL,
                @EventId BIGINT,
                @EventTypeId BIGINT = NULL,
                @EventSiteId BIGINT = NULL,
                @EventObjectId BIGINT = NULL,
                @EventUserId BIGINT = NULL,
                @EventDiseaseId BIGINT = NULL,
                @EventLocationId BIGINT = NULL,
                @EventInformationString NVARCHAR(MAX) = NULL,
                @EventLoginSiteId BIGINT = NULL,
                @MonitoringSessionActionID BIGINT = NULL,
                @MonitoringSessionActionStatusTypeID BIGINT = NULL,
                @MonitoringSessionActionTypeID BIGINT = NULL,
                @MonitoringSessionToDiagnosis BIGINT = NULL,
                @MonitoringSessionSummaryID BIGINT = NULL,
				@MonitoringSessionToMaterialID BIGINT = NULL,
                @ActionDate DATETIME = NULL,
                @SampledAnimalsQuantity INT = NULL,
                @SamplesQuantity INT = NULL,
                @PositiveAnimalsQuantity INT = NULL,
                @Order INT = NULL;


        DECLARE @DiseaseSpeciesSampleTemp TABLE
        (
            MonitoringSessionToDiagnosisID BIGINT NOT NULL,
            DiseaseID BIGINT NOT NULL,
            [Order] INT NOT NULL,
            SpeciesTypeID BIGINT NULL,
            SampleTypeID BIGINT NULL,
            RowStatus INT NULL,
            RowAction INT NULL
        );
        DECLARE @FarmsTemp TABLE
        (
            FarmMasterID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            TotalAnimalQuantity INT NULL,
            Latitude FLOAT NULL,
            Longitude FLOAT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @FlocksOrHerdsTemp TABLE
        (
            FlockOrHerdID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            FarmMasterID BIGINT NULL,
            FlockOrHerdMasterID BIGINT NULL,
            EIDSSFlockOrHerdID NVARCHAR(200) NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            RowStatus INT NULL,
            RowAction INT NULL
        );
        DECLARE @SpeciesTemp TABLE
        (
            SpeciesID BIGINT NOT NULL,
            SpeciesMasterID BIGINT NULL,
            FlockOrHerdID BIGINT NOT NULL,
            SpeciesTypeID BIGINT NOT NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            StartOfSignsDate DATETIME NULL,
            AverageAge NVARCHAR(200) NULL,
            ObservationID BIGINT NULL,
            Comments NVARCHAR(2000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToSpeciesID BIGINT NULL,
            RelatedToObservationID BIGINT NULL
        );
        DECLARE @AnimalsTemp TABLE
        (
            AnimalID BIGINT NOT NULL,
            SexTypeID BIGINT NULL,
            ConditionTypeID BIGINT NULL,
            AgeTypeID BIGINT NULL,
            SpeciesID BIGINT NULL,
            ObservationID BIGINT NULL,
            EIDSSAnimalID NVARCHAR(200) NULL,
            AnimalName NVARCHAR(200) NULL,
            Color NVARCHAR(200) NULL,
            AnimalDescription NVARCHAR(200) NULL,
            ClinicalSignsIndicator BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToAnimalID BIGINT NULL,
            RelatedToObservationID BIGINT NULL
        );
        DECLARE @SamplesTemp TABLE
        (
            SampleID BIGINT NOT NULL,
            SampleTypeID BIGINT NULL,
            RootSampleID BIGINT NULL,
            ParentSampleID BIGINT NULL,
            SpeciesID BIGINT NULL,
            AnimalID BIGINT NULL,
            MonitoringSessionID BIGINT NULL,
            SampleStatusTypeID BIGINT NULL,
            CollectionDate DATETIME NULL,
            CollectedByOrganizationID BIGINT NULL,
            CollectedByPersonID BIGINT NULL,
            SentDate DATETIME NULL,
            SentToOrganizationID BIGINT NULL,
            EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
            Comments NVARCHAR(200) NULL,
            SiteID BIGINT NOT NULL,
            CurrentSiteID BIGINT NULL,
            EnteredDate DATETIME NULL,
            DiseaseID BIGINT NULL,
            BirdStatusTypeID BIGINT NULL,
            ReadOnlyIndicator BIT NULL,
            FarmID BIGINT NULL,
            FarmMasterID BIGINT NULL,
            FarmOwnerID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
		DECLARE @SamplesToDiseasesTemp TABLE
        (
            MonitoringSessionToMaterialID BIGINT NOT NULL,
            MonitoringSessionID BIGINT NOT NULL,
			SampleID BIGINT NOT NULL,
			SampleTypeID BIGINT NULL,
            DiseaseID BIGINT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @LaboratoryTestsTemp TABLE
        (
            TestID BIGINT NOT NULL,
            TestNameTypeID BIGINT NULL,
            TestCategoryTypeID BIGINT NULL,
            TestResultTypeID BIGINT NULL,
            TestStatusTypeID BIGINT NOT NULL,
            DiseaseID BIGINT NOT NULL,
            SampleID BIGINT NULL,
            BatchTestID BIGINT NULL,
            ObservationID BIGINT NULL,
            TestNumber INT NULL,
            Comments NVARCHAR NULL,
            StartedDate DATETIME NULL,
            ResultDate DATETIME NULL,
            TestedByOrganizationID BIGINT NULL,
            TestedByPersonID BIGINT NULL,
            ResultEnteredByOrganizationID BIGINT NULL,
            ResultEnteredByPersonID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            ReadOnlyIndicator BIT NOT NULL,
            NonLaboratoryTestIndicator BIT NOT NULL,
            ExternalTestIndicator BIT NULL,
            PerformedByOrganizationID BIGINT NULL,
            ReceivedDate DATETIME NULL,
            ContactPersonName NVARCHAR(200) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @LaboratoryTestInterpretationsTemp TABLE
        (
            TestInterpretationID BIGINT NOT NULL,
            DiseaseID BIGINT NULL,
            InterpretedStatusTypeID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            InterpretedByOrganizationID BIGINT NULL,
            InterpretedByPersonID BIGINT NULL,
            TestID BIGINT NOT NULL,
            ValidatedStatusIndicator BIT NULL,
            ReportSessionCreatedIndicator BIT NULL,
            ValidatedComment NVARCHAR(200) NULL,
            InterpretedComment NVARCHAR(200) NULL,
            ValidatedDate DATETIME NULL,
            InterpretedDate DATETIME NULL,
            ReadOnlyIndicator BIT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @ActionsTemp TABLE
        (
            MonitoringSessionActionID BIGINT NOT NULL,
            MonitoringSessionActionStatusTypeID BIGINT NULL,
            MonitoringSessionActionTypeID BIGINT NULL,
            EnteredByPersonID BIGINT NULL,
            ActionDate DATETIME NULL,
            Comments NVARCHAR(1000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @AggregateSummaryInfoTemp TABLE
        (
            MonitoringSessionSummaryID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            FarmMasterID BIGINT NULL,
            SpeciesID BIGINT NULL,
            AnimalSexID BIGINT NULL,
            SampleAnimalsQty INT NULL,
            SamplesQty INT NULL,
            CollectionDate DATETIME NULL,
            CollectedByPersonID BIGINT NULL,
            PositiveAnimalsQty INT NULL,
            DiseaseID BIGINT NULL,
            SampleTypeID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @AggregateSummaryDiseasesTemp TABLE
        (
            MonitoringSessionSummaryID BIGINT NULL,
            DiseaseID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @FarmsAggregateTemp TABLE
        (
            FarmMasterID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            TotalAnimalQuantity INT NULL,
            Latitude FLOAT NULL,
            Longitude FLOAT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @FlocksOrHerdsAggregateTemp TABLE
        (
            FlockOrHerdID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            FarmMasterID BIGINT NULL,
            FlockOrHerdMasterID BIGINT NULL,
            EIDSSFlockOrHerdID NVARCHAR(200) NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            RowStatus INT NULL,
            RowAction INT NULL
        );
        DECLARE @SpeciesAggregateTemp TABLE
        (
            SpeciesID BIGINT NOT NULL,
            SpeciesMasterID BIGINT NULL,
            FlockOrHerdID BIGINT NOT NULL,
            SpeciesTypeID BIGINT NOT NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            StartOfSignsDate DATETIME NULL,
            AverageAge NVARCHAR(200) NULL,
            ObservationID BIGINT NULL,
            Comments NVARCHAR(2000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToSpeciesID BIGINT NULL,
            RelatedToObservationID BIGINT NULL
        );
        DECLARE @EventsTemp TABLE
        (
            EventId BIGINT NOT NULL,
            EventTypeId BIGINT NULL,
            UserId BIGINT NULL,
            SiteId BIGINT NULL,
            LoginSiteId BIGINT NULL,
            ObjectId BIGINT NULL,
            DiseaseId BIGINT NULL,
            LocationId BIGINT NULL,
            InformationString NVARCHAR(MAX) NULL
        );

        BEGIN TRANSACTION;

        INSERT INTO @DiseaseSpeciesSampleTemp
        SELECT *
        FROM
            OPENJSON(@DiseaseSpeciesSamples)
            WITH
            (
                MonitoringSessionToDiagnosisID BIGINT,
                DiseaseID BIGINT,
                [Order] INT,
                SpeciesTypeID BIGINT,
                SampleTypeID BIGINT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @FarmsTemp
        SELECT *
        FROM
            OPENJSON(@Farms)
            WITH
            (
                FarmMasterID BIGINT,
                FarmID BIGINT,
                TotalAnimalQuantity INT,
                Latitude FLOAT,
                Longitude FLOAT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @FlocksOrHerdsTemp
        SELECT *
        FROM
            OPENJSON(@FlocksOrHerds)
            WITH
            (
                FlockOrHerdID BIGINT,
                FarmID BIGINT,
                FarmMasterID BIGINT,
                FlockOrHerdMasterID BIGINT,
                EIDSSFlockOrHerdID NVARCHAR(200),
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @SpeciesTemp
        SELECT *
        FROM
            OPENJSON(@Species)
            WITH
            (
                SpeciesID BIGINT,
                SpeciesMasterID BIGINT,
                FlockOrHerdID BIGINT,
                SpeciesTypeID BIGINT,
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                StartOfSignsDate DATETIME,
                AverageAge NVARCHAR(200),
                ObservationID BIGINT,
                Comments NVARCHAR(2000),
                RowStatus INT,
                RowAction INT,
                RelatedToSpeciesID BIGINT,
                RelatedToObservationID BIGINT
            );
        INSERT INTO @AnimalsTemp
        SELECT *
        FROM
            OPENJSON(@Animals)
            WITH
            (
                AnimalID BIGINT,
                SexTypeID BIGINT,
                ConditionTypeID BIGINT,
                AgeTypeID BIGINT,
                SpeciesID BIGINT,
                ObservationID BIGINT,
                EIDSSAnimalID NVARCHAR(200),
                AnimalName NVARCHAR(200),
                Color NVARCHAR(200),
                AnimalDescription NVARCHAR(200),
                ClinicalSignsIndicator BIGINT,
                RowStatus INT,
                RowAction INT,
                RelatedToAnimalID BIGINT,
                RelatedToObservationID BIGINT
            );
        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@Samples)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                RootSampleID BIGINT,
                ParentSampleID BIGINT,
                SpeciesID BIGINT,
                AnimalID BIGINT,
                MonitoringSessionID BIGINT,
                SampleStatusTypeID BIGINT,
                CollectionDate DATETIME2,
                CollectedByOrganizationID BIGINT,
                CollectedByPersonID BIGINT,
                SentDate DATETIME2,
                SentToOrganizationID BIGINT,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                Comments NVARCHAR(200),
                SiteID BIGINT,
                CurrentSiteID BIGINT,
                EnteredDate DATETIME2,
                DiseaseID BIGINT,
                BirdStatusTypeID BIGINT,
                ReadOnlyIndicator BIT,
                FarmID BIGINT,
                FarmMasterID BIGINT,
                FarmOwnerID BIGINT,
                RowStatus INT,
                RowAction INT
            );

		SET @Iteration = (SELECT COUNT(*) FROM dbo.tlbMaterial WHERE idfMonitoringSession = @MonitoringSessionID);

		INSERT INTO @SamplesToDiseasesTemp
		SELECT *
		FROM
			OPENJSON(@SamplesToDiseases)
			WITH
			(
				MonitoringSessionToMaterialID BIGINT,
				MonitoringSessionID BIGINT,
				SampleID BIGINT,
				SampleTypeID BIGINT,
				DiseaseID BIGINT,
				RowStatus INT,
				RowAction INT
			);
        INSERT INTO @LaboratoryTestsTemp
        SELECT *
        FROM
            OPENJSON(@LaboratoryTests)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Comments NVARCHAR(500),
                StartedDate DATETIME2,
                ResultDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @LaboratoryTestInterpretationsTemp
        SELECT *
        FROM
            OPENJSON(@LaboratoryTestInterpretations)
            WITH
            (
                TestInterpretationID BIGINT,
                DiseaseID BIGINT,
                InterpretedStatusTypeID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                InterpretedByOrganizationID BIGINT,
                InterpretedByPersonID BIGINT,
                TestID BIGINT,
                ValidatedStatusIndicator BIT,
                ReportSessionCreatedIndicator BIT,
                ValidatedComment NVARCHAR(200),
                InterpretedComment NVARCHAR(200),
                ValidatedDate DATETIME2,
                InterpretedDate DATETIME2,
                ReadOnlyIndicator BIT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @ActionsTemp
        SELECT *
        FROM
            OPENJSON(@Actions)
            WITH
            (
                MonitoringSessionActionID BIGINT,
                MonitoringSessionActionStatusTypeID BIGINT,
                MonitoringSessionActionTypeID BIGINT,
                EnteredByPersonID BIGINT,
                ActionDate DATETIME,
                Comments NVARCHAR(1000),
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @AggregateSummaryInfoTemp
        SELECT *
        FROM
            OPENJSON(@AggregateSummaryInfo)
            WITH
            (
                MonitoringSessionSummaryID BIGINT,
                FarmID BIGINT,
                FarmMasterID BIGINT,
                SpeciesID BIGINT,
                AnimalSexID BIGINT,
                SampleAnimalsQty INT,
                SamplesQty INT,
                CollectionDate DATETIME,
                CollectedByPersonID BIGINT,
                PositiveAnimalsQty INT,
                DiseaseID BIGINT,
                SampleTypeID BIGINT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @AggregateSummaryDiseasesTemp
        SELECT *
        FROM
            OPENJSON(@AggregateSummaryDiseases)
            WITH
            (
                MonitoringSessionSummaryID BIGINT,
                DiseaseID BIGINT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @FarmsAggregateTemp
        SELECT *
        FROM
            OPENJSON(@FarmsAggregate)
            WITH
            (
                FarmMasterID BIGINT,
                FarmID BIGINT,
                TotalAnimalQuantity INT,
                Latitude FLOAT,
                Longitude FLOAT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @FlocksOrHerdsAggregateTemp
        SELECT *
        FROM
            OPENJSON(@FlocksOrHerdsAggregate)
            WITH
            (
                FlockOrHerdID BIGINT,
                FarmID BIGINT,
                FarmMasterID BIGINT,
                FlockOrHerdMasterID BIGINT,
                EIDSSFlockOrHerdID NVARCHAR(200),
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                RowStatus INT,
                RowAction INT
            );
        INSERT INTO @SpeciesAggregateTemp
        SELECT *
        FROM
            OPENJSON(@SpeciesAggregate)
            WITH
            (
                SpeciesID BIGINT,
                SpeciesMasterID BIGINT,
                FlockOrHerdID BIGINT,
                SpeciesTypeID BIGINT,
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                StartOfSignsDate DATETIME,
                AverageAge NVARCHAR(200),
                ObservationID BIGINT,
                Comments NVARCHAR(2000),
                RowStatus INT,
                RowAction INT,
                RelatedToSpeciesID BIGINT,
                RelatedToObservationID BIGINT
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

		--Data Audit--

		DECLARE @idfUserId BIGINT = NULL;
		DECLARE @idfSiteId BIGINT = NULL;
		DECLARE @idfsDataAuditEventType bigint = NULL;
		DECLARE @idfsObjectType bigint = 10017062; --select * from trtBaseReference where strDefault = 'Veterinary Active Surveillance Session'
		DECLARE @idfObject bigint = @MonitoringSessionID;
		DECLARE @idfObjectTable_tlbMonitoringSession bigint = 707040000000;	--select * from tauTable where strName = 'tlbMonitoringSession'	 
		DECLARE @idfDataAuditEvent bigint = NULL;		

		DECLARE @tlbMonitoringSession_BeforeEdit TABLE
		(
			idfMonitoringSession bigint,
			idfsMonitoringSessionStatus bigint,
            idfsCountry bigint,
            idfsRegion bigint,
            idfsRayon bigint,
            idfsSettlement bigint,
            idfPersonEnteredBy bigint,
            idfCampaign bigint,
            idfsSite bigint,
            datEnteredDate datetime,
            strMonitoringSessionID nvarchar(50),
            intRowStatus int,
            datStartDate datetime,
            datEndDate datetime,
            SessionCategoryID bigint,
            LegacySessionID varchar(50),            
            idfsLocation bigint,
			idfsMonitoringSessionSpeciesType bigint
		)		

		DECLARE @tlbMonitoringSession_AfterEdit TABLE
		(
			idfMonitoringSession bigint,
			idfsMonitoringSessionStatus bigint,
            idfsCountry bigint,
            idfsRegion bigint,
            idfsRayon bigint,
            idfsSettlement bigint,
            idfPersonEnteredBy bigint,
            idfCampaign bigint,
            idfsSite bigint,
            datEnteredDate datetime,
            strMonitoringSessionID nvarchar(50),
            intRowStatus int,
            datStartDate datetime,
            datEndDate datetime,
            SessionCategoryID bigint,
            LegacySessionID varchar(50),            
            idfsLocation bigint,
			idfsMonitoringSessionSpeciesType bigint
		)		
		
		-- Get and Set UserId and SiteId
		SELECT @idfUserId = userInfo.UserId, @idfSiteId = UserInfo.SiteId FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo

		--Data Audit--

        IF NOT EXISTS
        (
            SELECT *
            FROM dbo.tlbMonitoringSession
            WHERE idfMonitoringSession = @MonitoringSessionID
                  AND intRowStatus = 0
        )
        BEGIN

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbMonitoringSession',
                                              @MonitoringSessionID OUTPUT;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NextNumber_GET 'Vet Active Surveillance Session',
                                               @SessionID OUTPUT,                                               
											   NULL;
			--Data Audit--	

				-- tauDataAuditEvent Event Type - Create 
				set @idfsDataAuditEventType = 10016001;
			
				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @MonitoringSessionID, @idfObjectTable_tlbMonitoringSession, @idfDataAuditEvent OUTPUT

			--Data Audit--

            INSERT INTO dbo.tlbMonitoringSession
            (
                [idfMonitoringSession],
                [idfsMonitoringSessionStatus],
                [idfsCountry],
                [idfsRegion],
                [idfsRayon],
                [idfsSettlement],
                [idfPersonEnteredBy],
                [idfCampaign],
                [idfsSite],
                [datEnteredDate],
                [strMonitoringSessionID],
                [intRowStatus],
                [datStartDate],
                [datEndDate],
                [SessionCategoryID],
                [LegacySessionID],
                [AuditCreateUser],
                [SourceSystemNameID],
                [SourceSystemKeyValue],
                [idfsLocation],
				[idfsMonitoringSessionSpeciesType]
            )
            VALUES
				(@MonitoringSessionID,
				 @SessionStatusTypeID,
				 @CountryID,
				 @RegionID,
				 @RayonID,
				 @SettlementID,
				 @EnteredByPersonID,
				 @CampaignKey,
				 @SiteID,
				 @DateEntered,
				 @SessionID,
				 0  ,
				 @SessionStartDate,
				 @SessionEndDate,
				 @SessionCategoryID,
				 @LegacySessionID,
				 @AuditUserName,
				 10519001,
				 '[{"idfMonitoringSessionID":' + CAST(@MonitoringSessionID AS NVARCHAR(300)) + '}]',
				 @LocationID,
				 @ReportTypeID
            );

			--Data Audit--							

				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_tlbMonitoringSession, @MonitoringSessionID)
			
			--Data Audit--

            UPDATE @EventsTemp
            SET ObjectId = @MonitoringSessionID
            WHERE ObjectId = 0;

        END
        ELSE
        BEGIN

			--DataAudit-- 
				
				--  tauDataAuditEvent  Event Type - Edit 
				set @idfsDataAuditEventType = 10016003;
			
				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_tlbMonitoringSession, @idfDataAuditEvent OUTPUT

			--DataAudit-- 

			INSERT INTO @tlbMonitoringSession_BeforeEdit (
				idfMonitoringSession,
				idfsMonitoringSessionStatus,
				idfsCountry,
				idfsRegion,
				idfsRayon,
				idfsSettlement,
				idfPersonEnteredBy,
				idfCampaign,
				idfsSite,
				datEnteredDate,
				strMonitoringSessionID,
				intRowStatus,
				datStartDate,
				datEndDate,
				SessionCategoryID,
				LegacySessionID,
				idfsLocation,
				idfsMonitoringSessionSpeciesType)
			SELECT 
				idfMonitoringSession,
				idfsMonitoringSessionStatus,
				idfsCountry,
				idfsRegion,
				idfsRayon,
				idfsSettlement,
				idfPersonEnteredBy,
				idfCampaign,
				idfsSite,
				datEnteredDate,
				strMonitoringSessionID,
				intRowStatus,
				datStartDate,
				datEndDate,
				SessionCategoryID,
				LegacySessionID,
				idfsLocation,
				idfsMonitoringSessionSpeciesType
				FROM [tlbMonitoringSession] WHERE idfMonitoringSession = @MonitoringSessionID;

            UPDATE [dbo].[tlbMonitoringSession]
            SET [idfsMonitoringSessionStatus] = @SessionStatusTypeID,
                [idfsCountry] = @CountryID,
                [idfsRegion] = @RegionID,
                [idfsRayon] = @RayonID,
                [idfsSettlement] = @SettlementID,
                [idfPersonEnteredBy] = @EnteredByPersonID,
                [idfCampaign] = @CampaignKey,
                [idfsSite] = @SiteID,
                [datEnteredDate] = @DateEntered,
                [strMonitoringSessionID] = @SessionID,
                [intRowStatus] = 0,
                [datStartDate] = @SessionStartDate,
                [datEndDate] = @SessionEndDate,
                [SessionCategoryID] = @SessionCategoryID,
                [LegacySessionID] = @LegacySessionID,
                [AuditUpdateUser] = @AuditUserName,
                [idfsLocation] = @LocationID,
				[idfsMonitoringSessionSpeciesType] = @ReportTypeID
            WHERE idfMonitoringSession = @MonitoringSessionID

			INSERT INTO @tlbMonitoringSession_AfterEdit (
				idfMonitoringSession,
				idfsMonitoringSessionStatus,
				idfsCountry,
				idfsRegion,
				idfsRayon,
				idfsSettlement,
				idfPersonEnteredBy,
				idfCampaign,
				idfsSite,
				datEnteredDate,
				strMonitoringSessionID,
				intRowStatus,
				datStartDate,
				datEndDate,
				SessionCategoryID,
				LegacySessionID,
				idfsLocation,
				idfsMonitoringSessionSpeciesType)
			SELECT 
				idfMonitoringSession,
				idfsMonitoringSessionStatus,
				idfsCountry,
				idfsRegion,
				idfsRayon,
				idfsSettlement,
				idfPersonEnteredBy,
				idfCampaign,
				idfsSite,
				datEnteredDate,
				strMonitoringSessionID,
				intRowStatus,
				datStartDate,
				datEndDate,
				SessionCategoryID,
				LegacySessionID,
				idfsLocation,
				idfsMonitoringSessionSpeciesType
				FROM [tlbMonitoringSession] WHERE idfMonitoringSession = @MonitoringSessionID;

			--idfsMonitoringSessionStatus
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				707060000000,
				a.idfMonitoringSession,
				null,
				a.idfsMonitoringSessionStatus,
				b.idfsMonitoringSessionStatus 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.idfsMonitoringSessionStatus <> b.idfsMonitoringSessionStatus) 
				or(a.idfsMonitoringSessionStatus is not null and b.idfsMonitoringSessionStatus is null)
				or(a.idfsMonitoringSessionStatus is null and b.idfsMonitoringSessionStatus is not null)

			--idfsCountry
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				707070000000,
				a.idfMonitoringSession,
				null,
				a.idfsCountry,
				b.idfsCountry 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.idfsCountry <> b.idfsCountry) 
				or(a.idfsCountry is not null and b.idfsCountry is null)
				or(a.idfsCountry is null and b.idfsCountry is not null)

			--idfsRegion
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				707080000000,
				a.idfMonitoringSession,
				null,
				a.idfsRegion,
				b.idfsRegion 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.idfsRegion <> b.idfsRegion) 
				or(a.idfsRegion is not null and b.idfsRegion is null)
				or(a.idfsRegion is null and b.idfsRegion is not null)

			--idfsRayon
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				707090000000,
				a.idfMonitoringSession,
				null,
				a.idfsRayon,
				b.idfsRayon 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.idfsRayon <> b.idfsRayon) 
				or(a.idfsRayon is not null and b.idfsRayon is null)
				or(a.idfsRayon is null and b.idfsRayon is not null)

			--idfsSettlement
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				707100000000,
				a.idfMonitoringSession,
				null,
				a.idfsSettlement,
				b.idfsSettlement 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.idfsSettlement <> b.idfsSettlement) 
				or(a.idfsSettlement is not null and b.idfsSettlement is null)
				or(a.idfsSettlement is null and b.idfsSettlement is not null)

			--idfPersonEnteredBy
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				707110000000,
				a.idfMonitoringSession,
				null,
				a.idfPersonEnteredBy,
				b.idfPersonEnteredBy 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.idfPersonEnteredBy <> b.idfPersonEnteredBy) 
				or(a.idfPersonEnteredBy is not null and b.idfPersonEnteredBy is null)
				or(a.idfPersonEnteredBy is null and b.idfPersonEnteredBy is not null)

			--idfCampaign
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				707120000000,
				a.idfMonitoringSession,
				null,
				a.idfCampaign,
				b.idfCampaign 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.idfCampaign <> b.idfCampaign) 
				or(a.idfCampaign is not null and b.idfCampaign is null)
				or(a.idfCampaign is null and b.idfCampaign is not null)

			--datEnteredDate
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				707130000000,
				a.idfMonitoringSession,
				null,
				a.datEnteredDate,
				b.datEnteredDate 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.datEnteredDate <> b.datEnteredDate) 
				or(a.datEnteredDate is not null and b.datEnteredDate is null)
				or(a.datEnteredDate is null and b.datEnteredDate is not null)

			--strMonitoringSessionID
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				707140000000,
				a.idfMonitoringSession,
				null,
				a.strMonitoringSessionID,
				b.strMonitoringSessionID 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.strMonitoringSessionID <> b.strMonitoringSessionID) 
				or(a.strMonitoringSessionID is not null and b.strMonitoringSessionID is null)
				or(a.strMonitoringSessionID is null and b.strMonitoringSessionID is not null)

			--datStartDate
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				4578670000000,
				a.idfMonitoringSession,
				null,
				a.datStartDate,
				b.datStartDate 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.datStartDate <> b.datStartDate) 
				or(a.datStartDate is not null and b.datStartDate is null)
				or(a.datStartDate is null and b.datStartDate is not null)

			--datEndDate
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_tlbMonitoringSession, 
				4578680000000,
				a.idfMonitoringSession,
				null,
				a.datEndDate,
				b.datEndDate 
			from @tlbMonitoringSession_BeforeEdit a  inner join @tlbMonitoringSession_AfterEdit b on a.idfMonitoringSession = b.idfMonitoringSession
			where (a.datEndDate <> b.datEndDate) 
				or(a.datEndDate is not null and b.datEndDate is null)
				or(a.datEndDate is null and b.datEndDate is not null)

        END;

        WHILE EXISTS (SELECT * FROM @DiseaseSpeciesSampleTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionToDiagnosisID,
				@MonitoringSessionToDiagnosis = MonitoringSessionToDiagnosisID,
                @DiseaseID = DiseaseID,
                @SpeciesTypeID = SpeciesTypeID,
                @SampleTypeID = SampleTypeID,
                @Order = [Order],
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @DiseaseSpeciesSampleTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VAS_MONITORING_SESSION_TO_DIAGNOSIS_SPECIES_SAMPLE_SET @MonitoringSessionToDiagnosis OUTPUT,
																					@idfDataAuditEvent,
                                                                                    @MonitoringSessionID,
                                                                                    @DiseaseID,
                                                                                    @SpeciesTypeID,
                                                                                    @SampleTypeID,
                                                                                    @Order,
                                                                                    @RowStatus,
                                                                                    @RowAction,
                                                                                    @AuditUserName;

            DELETE FROM @DiseaseSpeciesSampleTemp
            WHERE MonitoringSessionToDiagnosisID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @FarmsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FarmMasterID,
                @FarmMasterID = FarmMasterID,
                @FarmID = FarmID,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @Latitude = Latitude,
                @Longitude = Longitude,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @FarmsTemp;



            IF @ReportTypeID = 129909620007069 --Avian
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_FARM_COPY @AuditUserName,
                                               @RowID,
                                               @TotalAnimalQuantity,
                                               NULL,
                                               NULL,
                                               NULL,
                                               NULL,
                                               NULL,
                                               @Latitude,
                                               @Longitude,
                                               @MonitoringSessionID,
                                               NULL,
                                               @FarmOwnerID,
                                               @FarmID OUTPUT,
                                               @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;

                UPDATE @FlocksOrHerdsTemp
                SET FarmID = @FarmID
                WHERE FarmMasterID = @RowID;

                UPDATE @SamplesTemp
                SET FarmID = @FarmID
                WHERE FarmMasterID = @RowID;

            END
            ELSE --Livestock
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_FARM_COPY @AuditUserName,
                                               @RowID,
                                               NULL,
                                               NULL,
                                               NULL,
                                               @TotalAnimalQuantity,
                                               NULL,
                                               NULL,
                                               @Latitude,
                                               @Longitude,
                                               @MonitoringSessionID,
                                               NULL,
                                               @FarmOwnerID,
                                               @FarmID OUTPUT,
                                               @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;

                UPDATE @FlocksOrHerdsTemp
                SET FarmID = @FarmID
                WHERE FarmMasterID = @RowID;

                UPDATE @SamplesTemp
                SET FarmID = @FarmID
                WHERE FarmMasterID = @RowID;
            END

            -- disassociate farm with session 
            if ((@MonitoringSessionID IS NOT NULL) AND (@RowStatus = 1))
            BEGIN
                UPDATE dbo.tlbFarm
                set idfMonitoringSession = null
                where idfFarm = @FarmID
                      and idfMonitoringSession = @MonitoringSessionID;
            END;


            DELETE FROM @FarmsTemp
            WHERE FarmMasterID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @FlocksOrHerdsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FlockOrHerdID,
                @FlockOrHerdID = FlockOrHerdID,
                @FarmID = FarmID,
                @FarmMasterID = FarmMasterID,
                @FlockOrHerdMasterID = FlockOrHerdMasterID,
                @EIDSSFlockOrHerdID = EIDSSFlockOrHerdID,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @FlocksOrHerdsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_HERD_SET @AuditUserName,
										  @idfDataAuditEvent,
                                          @FlockOrHerdID OUTPUT,
                                          @FlockOrHerdMasterID,
                                          @FarmID,
                                          @EIDSSFlockOrHerdID,
                                          @SickAnimalQuantity,
                                          @TotalAnimalQuantity,
                                          @DeadAnimalQuantity,
                                          NULL,
                                          @RowStatus,
                                          @RowAction;

            UPDATE @SpeciesTemp
            SET FlockOrHerdID = @FlockOrHerdID
            WHERE FlockOrHerdID = @RowID;

            DELETE FROM @FlocksOrHerdsTemp
            WHERE FLockOrHerdID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @SpeciesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SpeciesID,
                @SpeciesID = SpeciesID,
                @SpeciesMasterID = SpeciesMasterID,
                @SpeciesTypeID = SpeciesTypeID,
                @FlockOrHerdID = FlockOrHerdID,
                @StartOfSignsDate = StartOfSignsDate,
                @AverageAge = AverageAge,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @Comments = Comments,
                @ObservationID = ObservationID,
                @RowStatus = RowStatus,
                @RowAction = RowAction,
                @RelatedToSpeciesID = RelatedToSpeciesID,
                @RelatedToObservationID = RelatedToObservationID
            FROM @SpeciesTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_SPECIES_SET @AuditUserName,
											 @idfDataAuditEvent,
                                             @SpeciesID OUTPUT,
                                             @SpeciesMasterID,
                                             @SpeciesTypeID,
                                             @FlockOrHerdID,
                                             @ObservationID,
                                             @StartOfSignsDate,
                                             @AverageAge,
                                             @SickAnimalQuantity,
                                             @TotalAnimalQuantity,
                                             @DeadAnimalQuantity,
                                             @Comments,
                                             @RowStatus,
                                             @RowAction;

            UPDATE @AnimalsTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            UPDATE @SamplesTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            DELETE FROM @SpeciesTemp
            WHERE SpeciesID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @AnimalsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = AnimalID,
                @AnimalID = AnimalID,
                @SexTypeID = SexTypeID,
                @ConditionTypeID = ConditionTypeID,
                @AgeTypeID = AgeTypeID,
                @SpeciesID = SpeciesID,
                @ObservationID = ObservationID,
                @AnimalDescription = AnimalDescription,
                @EIDSSAnimalID = EIDSSAnimalID,
                @AnimalName = AnimalName,
                @Color = Color,
                @ClinicalSignsIndicator = ClinicalSignsIndicator,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @AnimalsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_ANIMAL_SET @AuditUserName,
											@idfDataAuditEvent,
                                            @AnimalID OUTPUT,
                                            @SexTypeID,
                                            @ConditionTypeID,
                                            @AgeTypeID,
                                            @SpeciesID,
                                            @ObservationID,
                                            @AnimalDescription,
                                            @EIDSSAnimalID,
                                            @AnimalName,
                                            @Color,
                                            @ClinicalSignsIndicator,
                                            @RowStatus,
                                            @RowAction;

            UPDATE @SamplesTemp
            SET AnimalID = @AnimalID
            WHERE AnimalID = @RowID;

            DELETE FROM @AnimalsTemp
            WHERE AnimalID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @SamplesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SampleID,
                @SampleID = SampleID,
                @SampleTypeID = SampleTypeID,
                @RootSampleID = RootSampleID,
                @ParentSampleID = ParentSampleID,
                @SpeciesID = SpeciesID,
                @AnimalID = AnimalID,
                @CollectedByPersonID = CollectedByPersonID,
                @CollectedByOrganizationID = CollectedByOrganizationID,
                @CollectionDate = CollectionDate,
                @SentDate = SentDate,
                @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                @SampleStatusTypeID = SampleStatusTypeID,
                @FarmID = FarmID,
                @FarmMasterID = FarmMasterID,
                @DiseaseID = DiseaseID,
                @DateEntered = EnteredDate,
                @Comments = Comments,
                @SiteID = SiteID,
                @CurrentSiteID = CurrentSiteID,
                @RowStatus = RowStatus,
                @SentToOrganizationID = SentToOrganizationID,
                @BirdStatusTypeID = BirdStatusTypeID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @RowAction = RowAction
            FROM @SamplesTemp;

			--Format the EIDSSLocalOrFieldSampleID according to system preferences.
			IF (
				@EIDSSLocalOrFieldSampleID IS NULL
				OR @EIDSSLocalOrFieldSampleID = ''
               )
               AND @LinkLocalOrFieldSampleIDToReportID = 1
            BEGIN
                SET @Iteration = @Iteration + 1;
                IF @Iteration < 10
                BEGIN
                    SET @EIDSSLocalOrFieldSampleID = @SessionID + '-0' + CONVERT(NVARCHAR(4), @Iteration);
                END
                ELSE
                BEGIN
                    SET @EIDSSLocalOrFieldSampleID = @SessionID + '-' + CONVERT(NVARCHAR(4), @Iteration);
                END;
            END;

			INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_SAMPLES_SET @AuditUserName,
											@idfDataAuditEvent,
											@MonitoringSessionID,
                                            @SampleID OUTPUT,
                                            @SampleTypeID,
                                            @RootSampleID,
                                            @ParentSampleID,
                                            @FarmOwnerID,
                                            @SpeciesID,
                                            @AnimalID,
                                            NULL,
                                            @MonitoringSessionID,
                                            NULL,
                                            NULL,
                                            NULL,
                                            @CollectionDate,
                                            @CollectedByPersonID,
                                            @CollectedByOrganizationID,
                                            @SentDate,
                                            @SentToOrganizationID,
                                            @EIDSSLocalOrFieldSampleID,
                                            @SiteID,
                                            @DateEntered,
                                            @ReadOnlyIndicator,
                                            @SampleStatusTypeID,
                                            @Comments,
                                            @CurrentSiteID,
                                            @DiseaseID,
                                            @BirdStatusTypeID,
                                            @RowStatus,
                                            @RowAction;
		       	   		 
            UPDATE @LaboratoryTestsTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

			UPDATE @SamplesToDiseasesTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            DELETE FROM @SamplesTemp
            WHERE SampleID = @RowID;
        END;

		WHILE EXISTS (SELECT * FROM @SamplesToDiseasesTemp)
		BEGIN
			SELECT TOP 1
				@RowID = MonitoringSessionToMaterialID,
				@MonitoringSessionToMaterialID = MonitoringSessionToMaterialID,
				@MonitoringSessionID = @MonitoringSessionID,
				@SampleID = SampleID,
				@SampleTypeID = SampleTypeID,
				@DiseaseID = DiseaseID,
				@RowAction = RowAction,
				@RowStatus = RowStatus
			FROM @SamplesToDiseasesTemp;

			--insert or update the diseases for this sample
			INSERT INTO @SuppressSelect
			EXECUTE dbo.USSP_VAS_SAMPLE_TO_DISEASE_SET
										@AuditUserName,
										@idfDataAuditEvent,
                                        @MonitoringSessionToMaterialID,
										@MonitoringSessionID,
										@SampleID,
										@DiseaseID,
                                        @SampleTypeID,
                                        @RowStatus,
                                        @RowAction;

			DELETE FROM @SamplesToDiseasesTemp
			WHERE MonitoringSessionToMaterialID = @RowID;
		END;

        WHILE EXISTS (SELECT * FROM @LaboratoryTestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestID,
                @TestID = TestID,
                @TestNameTypeID = TestNameTypeID,
                @TestCategoryTypeID = TestCategoryTypeID,
                @TestResultTypeID = TestResultTypeID,
                @TestStatusTypeID = TestStatusTypeID,
                @DiseaseID = DiseaseID,
                @SampleID = SampleID,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @StartedDate = StartedDate,
                @ResultDate = ResultDate,
                @TestedByOrganizationID = TestedByOrganizationID,
                @TestedByPersonID = TestedByPersonID,
                @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                @ResultEnteredByPersonID = ResultEnteredByPersonID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
                @ExternalTestIndicator = ExternalTestIndicator,
                @PerformedByOrganizationID = PerformedByOrganizationID,
                @ReceivedDate = ReceivedDate,
                @ContactPersonName = ContactPersonName,
                @RowAction = RowAction
            FROM @LaboratoryTestsTemp;

            --If record is being soft-deleted, then check if the test record was originally created 
            --in the laboaratory module.  If it was, then disassociate the test record from the 
            --veterinary surveillance session, so that the test record remains in the laboratory module 
            --for further action.
            IF @RowStatus = 1
               AND @NonLaboratoryTestIndicator = 0
            BEGIN
                SET @RowStatus = 0;
                SET @TestMonitoringSesssionID = NULL;
            END
            ELSE
            BEGIN
                SET @TestMonitoringSesssionID = @MonitoringSessionID;
            END;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TESTS_SET 
                                          @TestID OUTPUT,
                                          @TestNameTypeID,
                                          @TestCategoryTypeID,
                                          @TestResultTypeID,
                                          @TestStatusTypeID,
                                          @DiseaseID,
                                          @SampleID,
                                          NULL,
                                          NULL,
                                          NULL,
                                          @Comments,
                                          @RowStatus,
                                          @StartedDate,
                                          @ResultDate,
                                          @TestedByOrganizationID,
                                          @TestedByPersonID,
                                          @ResultEnteredByOrganizationID,
                                          @ResultEnteredByPersonID,
                                          @ValidatedByOrganizationID,
                                          @ValidatedByPersonID,
                                          @ReadOnlyIndicator,
                                          @NonLaboratoryTestIndicator,
                                          @ExternalTestIndicator,
                                          @PerformedByOrganizationID,
                                          @ReceivedDate,
                                          @ContactPersonName,
                                          @MonitoringSessionID,
                                          NULL,
                                          NULL,
                                          NULL,
                                          @AuditUserName,
										  @idfDataAuditEvent,
										  @MonitoringSessionID,
                                          @RowAction;

            UPDATE @LaboratoryTestInterpretationsTemp
            SET TestID = @TestID
            WHERE TestID = @RowID;

            DELETE FROM @LaboratoryTestsTemp
            WHERE TestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @LaboratoryTestInterpretationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestInterpretationID,
                @TestInterpretationID = TestInterpretationID,
                @DiseaseID = DiseaseID,
                @InterpretedStatusTypeID = InterpretedStatusTypeID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @InterpretedByOrganizationID = InterpretedByOrganizationID,
                @InterpretedByPersonID = InterpretedByPersonID,
                @TestID = TestID,
                @ValidatedStatusIndicator = ValidatedStatusIndicator,
                @ReportSessionCreatedIndicator = ReportSessionCreatedIndicator,
                @ValidatedComment = ValidatedComment,
                @InterpretedComment = InterpretedComment,
                @ValidatedDate = ValidatedDate,
                @InterpretedDate = InterpretedDate,
                @RowStatus = RowStatus,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @RowAction = RowAction
            FROM @LaboratoryTestInterpretationsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TEST_INTERPRETATIONS_SET @AuditUserName,
														 @idfDataAuditEvent,
														 @MonitoringSessionID,
                                                         @TestInterpretationID OUTPUT,
                                                         @DiseaseID,
                                                         @InterpretedStatusTypeID,
                                                         @ValidatedByOrganizationID,
                                                         @ValidatedByPersonID,
                                                         @InterpretedByOrganizationID,
                                                         @InterpretedByPersonID,
                                                         @TestID,
                                                         @ValidatedStatusIndicator,
                                                         @ReportSessionCreatedIndicator,
                                                         @ValidatedComment,
                                                         @InterpretedComment,
                                                         @ValidatedDate,
                                                         @InterpretedDate,
                                                         @RowStatus,
                                                         @ReadOnlyIndicator,
                                                         @RowAction;

            DELETE FROM @LaboratoryTestInterpretationsTemp
            WHERE TestInterpretationID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @ActionsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionActionID,
                @MonitoringSessionActionTypeID = MonitoringSessionActionTypeID,
                @MonitoringSessionActionStatusTypeID = MonitoringSessionActionStatusTypeID,
                @EnteredByPersonID = EnteredByPersonID,
                @ActionDate = ActionDate,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @ActionsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VAS_MONITORING_SESSION_ACTION_SET @MonitoringSessionActionID,
															   @idfDataAuditEvent,
                                                               @MonitoringSessionID,
                                                               @EnteredByPersonID,
                                                               @MonitoringSessionActionTypeID,
                                                               @MonitoringSessionActionStatusTypeID,
                                                               @ActionDate,
                                                               @Comments,
                                                               @RowStatus,
                                                               @RowAction,
                                                               @AuditUserName;

            DELETE FROM @ActionsTemp
            WHERE MonitoringSessionActionID = @RowID;
        END;

        /* Aggregate Information Section */

        WHILE EXISTS (SELECT * FROM @FarmsAggregateTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FarmMasterID,
                @FarmMasterID = FarmMasterID,
                @FarmID = FarmID,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @Latitude = Latitude,
                @Longitude = Longitude,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @FarmsAggregateTemp;

            IF @ReportTypeID = 129909620007069 --Avian
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_FARM_COPY @AuditUserName,
                                               @RowID,
                                               @TotalAnimalQuantity,
                                               NULL,
                                               NULL,
                                               NULL,
                                               NULL,
                                               NULL,
                                               @Latitude,
                                               @Longitude,
                                               NULL,
                                               NULL,
                                               @FarmOwnerID,
                                               @FarmID OUTPUT,
                                               @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;

            END
            ELSE --Livestock
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_FARM_COPY @AuditUserName,
                                               @RowID,
                                               NULL,
                                               NULL,
                                               NULL,
                                               @TotalAnimalQuantity,
                                               NULL,
                                               NULL,
                                               @Latitude,
                                               @Longitude,
                                               NULL,
                                               NULL,
                                               @FarmOwnerID,
                                               @FarmID OUTPUT,
                                               @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;

            END

            UPDATE @FlocksOrHerdsAggregateTemp
            SET FarmID = @FarmID
            WHERE FarmMasterID = @RowID;

            UPDATE @AggregateSummaryInfoTemp
            SET FarmID = @FarmID
            WHERE FarmMasterID = @RowID;

			/*farm is being removed from aggregate monitoring session*/
			IF ((@MonitoringSessionID IS NOT NULL) AND (@RowStatus = 1))
			BEGIN
				UPDATE dbo.tlbFarm 
				SET  idfMonitoringSession = null
					,intRowStatus = @RowStatus
				WHERE idfFarm = @FarmID;
			END;

            DELETE FROM @FarmsAggregateTemp
            WHERE FarmMasterID = @RowID;

        END;

        WHILE EXISTS (SELECT * FROM @FlocksOrHerdsAggregateTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FlockOrHerdID,
                @FlockOrHerdID = FlockOrHerdID,
                @FarmID = FarmID,
                @FarmMasterID = FarmMasterID,
                @FlockOrHerdMasterID = FlockOrHerdMasterID,
                @EIDSSFlockOrHerdID = EIDSSFlockOrHerdID,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @FlocksOrHerdsAggregateTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_HERD_SET @AuditUserName,
										  @idfDataAuditEvent,
                                          @FlockOrHerdID OUTPUT,
                                          @FlockOrHerdMasterID,
                                          @FarmID,
                                          @EIDSSFlockOrHerdID,
                                          @SickAnimalQuantity,
                                          @TotalAnimalQuantity,
                                          @DeadAnimalQuantity,
                                          NULL,
                                          @RowStatus,
                                          @RowAction;

            UPDATE @SpeciesAggregateTemp
            SET FlockOrHerdID = @FlockOrHerdID
            WHERE FlockOrHerdID = @RowID;

            DELETE FROM @FlocksOrHerdsAggregateTemp
            WHERE FLockOrHerdID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @SpeciesAggregateTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SpeciesID,
                @SpeciesID = SpeciesID,
                @SpeciesMasterID = SpeciesMasterID,
                @SpeciesTypeID = SpeciesTypeID,
                @FlockOrHerdID = FlockOrHerdID,
                @StartOfSignsDate = StartOfSignsDate,
                @AverageAge = AverageAge,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @Comments = Comments,
                @ObservationID = ObservationID,
                @RowStatus = RowStatus,
                @RowAction = RowAction,
                @RelatedToSpeciesID = RelatedToSpeciesID,
                @RelatedToObservationID = RelatedToObservationID
            FROM @SpeciesAggregateTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_SPECIES_SET @AuditUserName,
											 @idfDataAuditEvent,
                                             @SpeciesID OUTPUT,
                                             @SpeciesMasterID,
                                             @SpeciesTypeID,
                                             @FlockOrHerdID,
                                             @ObservationID,
                                             @StartOfSignsDate,
                                             @AverageAge,
                                             @SickAnimalQuantity,
                                             @TotalAnimalQuantity,
                                             @DeadAnimalQuantity,
                                             @Comments,
                                             @RowStatus,
                                             @RowAction;

            UPDATE @AggregateSummaryInfoTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            DELETE FROM @SpeciesAggregateTemp
            WHERE SpeciesID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @AggregateSummaryInfoTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionSummaryID,
                @MonitoringSessionSummaryID = MonitoringSessionSummaryID,
                @SpeciesID = SpeciesID,
                @SampledAnimalsQuantity = SampleAnimalsQty,
                @SamplesQuantity = SamplesQty,
                @CollectionDate = CollectionDate,
                @CollectedByPersonID = CollectedByPersonID,
                @PositiveAnimalsQuantity = PositiveAnimalsQty,
                @SexTypeID = AnimalSexID,
                @FarmID = FarmID,
                @FarmMasterID = FarmMasterID,
                @DiseaseID = DiseaseID,
                @SampleTypeID = SampleTypeID,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @AggregateSummaryInfoTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VCT_MONITORING_SESSION_SUMMARY_SET @MonitoringSessionSummaryID OUTPUT,
																@idfDataAuditEvent,
                                                                @MonitoringSessionID,
                                                                @FarmID,
                                                                @SpeciesID,
                                                                @SexTypeID,
                                                                @SampledAnimalsQuantity,
                                                                @SamplesQuantity,
                                                                @CollectionDate,
                                                                @PositiveAnimalsQuantity,
                                                                @RowStatus,
                                                                @DiseaseID,
                                                                @SampleTypeID,
                                                                @RowAction,
                                                                @AuditUserName;

            UPDATE @AggregateSummaryDiseasesTemp
            SET MonitoringSessionSummaryID = @MonitoringSessionSummaryID
            WHERE MonitoringSessionSummaryID = @RowID

            DELETE FROM @AggregateSummaryInfoTemp
            WHERE MonitoringSessionSummaryID = @RowID;

            PRINT @RowID
        END;

        WHILE EXISTS (SELECT * FROM @AggregateSummaryDiseasesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = MonitoringSessionSummaryID,
                @MonitoringSessionSummaryID = MonitoringSessionSummaryID,
                @DiseaseID = DiseaseID,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @AggregateSummaryDiseasesTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VCT_MONITORING_SESSION_SUMMARY_DIAGNOSIS_SET @MonitoringSessionSummaryID,
																		  @idfDataAuditEvent,
                                                                          @RowStatus,
                                                                          @DiseaseID,
                                                                          @RowAction,
                                                                          @AuditUserName;


            DELETE FROM @AggregateSummaryDiseasesTemp
            WHERE @MonitoringSessionSummaryID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                            @EventTypeId,
                                            @EventUserId,
                                            @EventObjectId,
                                            @EventDiseaseId,
                                            @EventSiteId,
                                            @EventInformationString,
                                            @EventLoginSiteId,
                                            @EventLocationId,
                                            @AuditUserName;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        IF @@TRANCOUNT > 0
            COMMIT TRANSACTION;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @MonitoringSessionID SessionKey,
               @SessionID SessionID;
    END TRY
    BEGIN CATCH
        IF @@Trancount > 0
            ROLLBACK TRANSACTION;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_VAS_MONITORING_SESSION_TO_DISEASE_GETList]...';


GO
-- ================================================================================================
-- Name: USP_VAS_MONITORING_SESSION_TO_DISEASE_GETList
--
-- Description:	Get active surveillance monitoring session to disease list for the veterinary 
-- module active surveillance edit/set up use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     05/21/2019 Initial release
-- Mike Korengay	02/03/2022 Change RowAction from nvarchar to int to match other stored procs
-- Mike Kornegay    02/15/2022 Add AvianOrLivestock field for setting session report type
-- Mike Kornegay	06/22/2022 Add RecordCount
-- Mike Kornegay	12/21/2022 Add idfsUsingType for disease to return list.
--
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VAS_MONITORING_SESSION_TO_DISEASE_GETList] (
	@LanguageID NVARCHAR(50),
	@MonitoringSessionID BIGINT = NULL
	)
AS
BEGIN
	BEGIN TRY
		SELECT msd.idfMonitoringSessionToDiagnosis AS MonitoringSessionToDiseaseID,
			msd.idfMonitoringSession AS MonitoringSessionID,
			msd.idfsDiagnosis AS DiseaseID, 
			disease.name AS DiseaseName,
			diagnosis.idfsUsingType AS DiseaseUsingType,
			msd.idfsSpeciesType AS SpeciesTypeID,
			speciesType.name AS SpeciesTypeName,
			speciesType.intHACode AS AvianOrLivestock,
			msd.idfsSampleType AS SampleTypeID,
			sampleType.name AS SampleTypeName,
			msd.intOrder AS OrderNumber,
			msd.intRowStatus AS RowStatus,
			COUNT(*) OVER (PARTITION BY 1) AS RecordCount,
			0 AS RowAction
		FROM dbo.tlbMonitoringSessionToDiagnosis msd
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) AS disease
			ON disease.idfsReference = msd.idfsDiagnosis
		INNER JOIN dbo.trtDiagnosis AS diagnosis
			ON diagnosis.idfsDiagnosis = disease.idfsReference
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000086) AS speciesType
			ON speciesType.idfsReference = msd.idfsSpeciesType
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) AS sampleType
			ON sampleType.idfsReference = msd.idfsSampleType
		WHERE msd.idfMonitoringSession = @MonitoringSessionID
			AND msd.intRowStatus = 0;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_VET_DISEASE_REPORT_SET]...';


GO
-- ================================================================================================
-- Name: USP_VET_DISEASE_REPORT_SET
--
-- Description:	Inserts or updates veterinary "case" for the avian and livestock veterinary disease 
-- report use cases.
--                      
-- Revision History:
-- Name            Date       Change Detail
-- --------------- ---------- -------------------------------------------------------------------
-- Stephen Long    04/02/2018 Initial release.
-- Stephen Long    04/17/2019 Updated for API; use case updates.
-- Stephen Long    04/23/2019 Added updates for herd master and species master if new ones are 
--                            added to the farm during disease report creation.
-- Stephen Long    04/29/2019 Added related to veterinary disease report fields for use case VUC11 
--                            and VUC12.
-- Stephen Long    05/26/2019 Made corrections to farm copy observation ID and species table 
--                            observation ID for flexible form saving.
-- Stephen Long    06/01/2019 Made corrections to JSON for herds and species parameters.
-- Stephen Long    06/10/2019 Added farm owner ID output parameter to USSP_VET_FARM_COPY call.
-- Stephen Long    06/19/2019 Added diagnosis date and tests conducted indicator parameters.
-- Stephen Long    06/22/2019 Added read only indicator parameter for sample set - sample import.
-- Stephen Long    06/24/2019 Update to match new parameter for USSP_VET_FARM_COPY call.
-- Stephen Long    07/26/2019 Corrected farm counts (total, sick and dead).
-- Stephen Long    09/14/2019 Corrected root sample ID/parent sample ID on sample update call.
-- Stephen Long    10/01/2019 Added monitoring session ID parameter to farm copy for the sceanrio 
--                            where a disease report is tied to a monitoring session.
-- Stephen Long    12/23/2019 Added farm latitude and longitude parameters.
-- Stephen Long    02/05/2020 Updated sample set to account for the current site ID when samples 
--                            are imported from the laboratory module.
-- Stephen Long    02/16/2020 Add logic to copy activity parameters, and add observation record for 
--                            connected disease reports.
-- Stephen Long    04/21/2020 Added additional check on clinical signs when related disease report.
-- Stephen Long    04/24/2020 Added clinical signs indicator for the animal set call.
-- Stephen Long    08/12/2020 Corrected status on report log from status type to log status type.
-- Stephen Long    08/25/2020 Added observation ID set for the update of the vet case table.
-- Stephen Long    09/18/2020 Check for null related to observation ID
-- Stephen Long    12/20/2020 Updated USSP_GBL_TEST_SET call with four new parameters.
-- Stephen Long    11/29/2021 Removed language ID and added audit user name to USSP calls.
-- Stephen Long    01/19/2022 Added missing audit user name on ussp calls, and added events.
-- Stephen Long    01/22/2022 Made disease ID nullable on SamplesTemp table variable.
-- Stephen Long    01/24/2022 Added link local or field sample ID to report ID parameter.
-- Stephen Long    01/28/2022 Removed herd actual and species actual, no longer used.
-- Stephen Long    02/18/2022 Added lab module source indicator check on sample set.
-- Stephen Long    03/08/2022 Set notification object ID after saving disease report.
-- Stephen Long    04/12/2022 Added outbreak veterinary case parameters and logic.
-- Stephen Long    04/27/2022 Added additional outbreak case parameters: status type and case 
--                            questionnaire observation ID.
-- Stephen Long    05/09/2022 Bug fix on item 4199 - local/field sample ID iteration.
-- Stephen Long    06/16/2022 Added status type ID to species set.
-- Stephen Long    07/06/2022 Updates for site alerts to call new stored procedure.
-- Stephen Long    09/15/2022 Added note parameter to event set call.  Temporarily removed!
-- Stephen Long    12/07/2022 Added data audit logic for SAUC30 and 31.
-- Stephen Long    12/09/2022 Changed object type ID reference for veterinary disease report, 
--                            and added EIDSS object ID to samples, tests and test 
--                            interpretations calls.
-- Stephen Long    12/14/2022 Fix to observation ID when adding a connected disease report; site 
--                            identifier was not picked up from the original record.
-- Stephen Long    12/17/2022 Fix to importing sample when the disease report has not been saved.
-- Stephwn Long    12/19/2022 Added connected disease laboratory test ID to the list of output.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VET_DISEASE_REPORT_SET]
(
    @DiseaseReportID BIGINT,
    @EIDSSReportID NVARCHAR(200) = NULL,
    @FarmID BIGINT,
    @FarmMasterID BIGINT,
    @FarmOwnerID BIGINT = NULL,
    @MonitoringSessionID BIGINT = NULL,
    @OutbreakID BIGINT = NULL,
    @RelatedToDiseaseReportID BIGINT = NULL,
    @EIDSSFieldAccessionID NVARCHAR(200) = NULL,
    @DiseaseID BIGINT,
    @EnteredByPersonID BIGINT = NULL,
    @ReportedByOrganizationID BIGINT = NULL,
    @ReportedByPersonID BIGINT = NULL,
    @InvestigatedByOrganizationID BIGINT = NULL,
    @InvestigatedByPersonID BIGINT = NULL,
    @ReceivedByOrganizationID BIGINT = NULL,
    @ReceivedByPersonID BIGINT = NULL,
    @SiteID BIGINT,
    @DiagnosisDate DATETIME = NULL,
    @EnteredDate DATETIME = NULL,
    @ReportDate DATETIME = NULL,
    @AssignedDate DATETIME = NULL,
    @InvestigationDate DATETIME = NULL,
    @RowStatus INT,
    @ReportTypeID BIGINT = NULL,
    @ClassificationTypeID BIGINT = NULL,
    @StatusTypeID BIGINT = NULL,
    @ReportCategoryTypeID BIGINT,
    @FarmTotalAnimalQuantity INT = NULL,
    @FarmSickAnimalQuantity INT = NULL,
    @FarmDeadAnimalQuantity INT = NULL,
    @FarmLatitude FLOAT = NULL,
    @FarmLongitude FLOAT = NULL,
    @FarmEpidemiologicalObservationID BIGINT = NULL,
    @ControlMeasuresObservationID BIGINT = NULL,
    @TestsConductedIndicator BIGINT = NULL,
    @AuditUserName NVARCHAR(200),
    @FlocksOrHerds NVARCHAR(MAX) = NULL,
    @Species NVARCHAR(MAX) = NULL,
    @Animals NVARCHAR(MAX) = NULL,
    @Vaccinations NVARCHAR(MAX) = NULL,
    @Samples NVARCHAR(MAX) = NULL,
    @PensideTests NVARCHAR(MAX) = NULL,
    @LaboratoryTests NVARCHAR(MAX) = NULL,
    @LaboratoryTestInterpretations NVARCHAR(MAX) = NULL,
    @CaseLogs NVARCHAR(MAX) = NULL,
    @ClinicalInformation NVARCHAR(MAX) = NULL,
    @Contacts NVARCHAR(MAX) = NULL,
    @CaseMonitorings NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL,
    @UserID BIGINT,
    @LinkLocalOrFieldSampleIDToReportID BIT = 0,
    @OutbreakCaseIndicator BIT = 0,
    @OutbreakCaseReportUID BIGINT = NULL,
    @OutbreakCaseStatusTypeID BIGINT = NULL,
    @OutbreakCaseQuestionnaireObservationID BIGINT = NULL,
    @PrimaryCaseIndicator BIT = 0
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT
            = 0,
                @ReturnMessage NVARCHAR(MAX) = N'SUCCESS',
                @ConnectedDiseaseReportLaboratoryTestID BIGINT = NULL,
                @RowAction INT = NULL,
                @RowID BIGINT,
                @Iteration INT = 0,
                @NewFarmOwnerID BIGINT = NULL,
                @FlockOrHerdID BIGINT = NULL,
                @FlockOrHerdMasterID BIGINT = NULL,
                @EIDSSFlockOrHerdID NVARCHAR(200) = NULL,
                @SickAnimalQuantity INT = NULL,
                @TotalAnimalQuantity INT = NULL,
                @DeadAnimalQuantity INT = NULL,
                @Comments NVARCHAR(2000) = NULL,
                @SpeciesID BIGINT = NULL,
                @SpeciesMasterID BIGINT = NULL,
                @SpeciesTypeID BIGINT = NULL,
                @StartOfSignsDate DATETIME = NULL,
                @AverageAge NVARCHAR(200) = NULL,
                @ObservationID BIGINT = NULL,
                @OutbreakSpeciesCaseStatusTypeID BIGINT = NULL,
                @AnimalID BIGINT = NULL,
                @SexTypeID BIGINT = NULL,
                @ConditionTypeID BIGINT = NULL,
                @AgeTypeID BIGINT = NULL,
                @EIDSSAnimalID NVARCHAR(200) = NULL,
                @AnimalName NVARCHAR(200) = NULL,
                @Color NVARCHAR(200) = NULL,
                @AnimalDescription NVARCHAR(200) = NULL,
                @ClinicalSignsIndicator BIGINT = NULL,
                @VaccinationID BIGINT,
                @VaccinationTypeID BIGINT = NULL,
                @RouteTypeID BIGINT = NULL,
                @VaccinationDate DATETIME = NULL,
                @Manufacturer NVARCHAR(200) = NULL,
                @LotNumber NVARCHAR(200) = NULL,
                @NumberVaccinated INT = NULL,
                @SampleID BIGINT,
                @SampleTypeID BIGINT = NULL,
                @RootSampleID BIGINT = NULL,
                @ParentSampleID BIGINT = NULL,
                @CollectedByPersonID BIGINT = NULL,
                @CollectedByOrganizationID BIGINT = NULL,
                @CollectionDate DATETIME = NULL,
                @SentDate DATETIME = NULL,
                @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
                @SampleStatusTypeID BIGINT = NULL,
                @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
                @SentToOrganizationID BIGINT = NULL,
                @ReadOnlyIndicator BIT = NULL,
                @CurrentSiteID BIGINT = NULL,
                @BirdStatusTypeID BIGINT = NULL,
                @PensideTestID BIGINT = NULL,
                @PensideTestResultTypeID BIGINT = NULL,
                @PensideTestNameTypeID BIGINT = NULL,
                @TestedByPersonID BIGINT = NULL,
                @TestedByOrganizationID BIGINT = NULL,
                @TestDate DATETIME = NULL,
                @PensideTestCategoryTypeID BIGINT = NULL,
                @TestID BIGINT = NULL,
                @TestNameTypeID BIGINT = NULL,
                @TestCategoryTypeID BIGINT = NULL,
                @TestResultTypeID BIGINT = NULL,
                @TestStatusTypeID BIGINT,
                @BatchTestID BIGINT = NULL,
                @StartedDate DATETIME = NULL,
                @ResultDate DATETIME = NULL,
                @ResultEnteredByOrganizationID BIGINT = NULL,
                @ResultEnteredByPersonID BIGINT = NULL,
                @ValidatedByOrganizationID BIGINT = NULL,
                @ValidatedByPersonID BIGINT = NULL,
                @NonLaboratoryTestIndicator BIT,
                @ExternalTestIndicator BIT = NULL,
                @PerformedByOrganizationID BIGINT = NULL,
                @ReceivedDate DATETIME = NULL,
                @ContactPersonName NVARCHAR(200) = NULL,
                @TestDiseaseReportID BIGINT = NULL,
                @TestInterpretationID BIGINT,
                @InterpretedStatusTypeID BIGINT = NULL,
                @InterpretedByOrganizationID BIGINT = NULL,
                @InterpretedByPersonID BIGINT = NULL,
                @TestingInterpretations BIGINT,
                @ValidatedStatusIndicator BIT = NULL,
                @ReportSessionCreatedIndicator BIT = NULL,
                @ValidatedComment NVARCHAR(200) = NULL,
                @InterpretedComment NVARCHAR(200) = NULL,
                @ValidatedDate DATETIME = NULL,
                @InterpretedDate DATETIME = NULL,
                @CaseLogID BIGINT,
                @LogStatusTypeID BIGINT = NULL,
                @LoggedByPersonID BIGINT = NULL,
                @LogDate DATETIME = NULL,
                @ActionRequired NVARCHAR(200) = NULL,
                @VeterinaryDiseaseReportRelationshipID BIGINT = NULL,
                @RelatedToSpeciesID BIGINT = NULL,
                @RelatedToAnimalID BIGINT = NULL,
                @RelatedToObservationID BIGINT = NULL,
                @FormTemplateID BIGINT,
                @ObservationSiteID BIGINT,
                @ActivityID BIGINT = NULL,
                @ActivityIDNew BIGINT = NULL,
                @ParameterID BIGINT = NULL,
                @ParameterValue SQL_VARIANT = NULL,
                @ParameterRowID BIGINT = NULL,
                @EventId BIGINT,
                @EventTypeId BIGINT = NULL,
                @EventSiteId BIGINT = NULL,
                @EventObjectId BIGINT = NULL,
                @EventUserId BIGINT = NULL,
                @EventDiseaseId BIGINT = NULL,
                @EventLocationId BIGINT = NULL,
                @EventInformationString NVARCHAR(MAX) = NULL,
                @EventNote NVARCHAR(MAX) = NULL,
                @EventLoginSiteId BIGINT = NULL,
                                                                                           -- Data audit
                @AuditUserID BIGINT = NULL,
                @AuditSiteID BIGINT = NULL,
                @DataAuditEventID BIGINT = NULL,
                @DataAuditEventTypeID BIGINT = NULL,
                @ObjectTypeID BIGINT = 10017085,                                           -- Veterinary disease report
                @ObjectID BIGINT = @DiseaseReportID,
                @ObjectTableID BIGINT = 75800000000,                                       -- tlbVetCase
                @ObjectVeterinaryDiseaseReportRelationshipTableID BIGINT = 53577790000004, -- VetDiseaseReportRelationship
                @ObjectObservationTableID BIGINT = 75640000000,                            -- tlbObservation
                @ObjectActivityParametersTableID BIGINT = 75410000000,                     -- tlbActivityParameters
                                                                                           -- End data audit
                @LabModuleSourceIndicator INT = 0,
                @SampleDiseaseReportID BIGINT = NULL,
                @EIDSSCaseID NVARCHAR(200) = NULL;
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );
        DECLARE @FlocksOrHerdsTemp TABLE
        (
            FlockOrHerdID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            FlockOrHerdMasterID BIGINT NULL,
            EIDSSFlockOrHerdID NVARCHAR(200) NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            RowStatus INT NULL,
            RowAction INT NULL
        );
        DECLARE @SpeciesTemp TABLE
        (
            SpeciesID BIGINT NOT NULL,
            SpeciesMasterID BIGINT NULL,
            FlockOrHerdID BIGINT NOT NULL,
            SpeciesTypeID BIGINT NOT NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            StartOfSignsDate DATETIME NULL,
            AverageAge NVARCHAR(200) NULL,
            ObservationID BIGINT NULL,
            Comments NVARCHAR(2000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToSpeciesID BIGINT NULL,
            RelatedToObservationID BIGINT NULL,
            OutbreakCaseStatusTypeID BIGINT NULL
        );
        DECLARE @AnimalsTemp TABLE
        (
            AnimalID BIGINT NOT NULL,
            SexTypeID BIGINT NULL,
            ConditionTypeID BIGINT NULL,
            AgeTypeID BIGINT NULL,
            SpeciesID BIGINT NULL,
            ObservationID BIGINT NULL,
            EIDSSAnimalID NVARCHAR(200) NULL,
            AnimalName NVARCHAR(200) NULL,
            Color NVARCHAR(200) NULL,
            AnimalDescription NVARCHAR(200) NULL,
            ClinicalSignsIndicator BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToAnimalID BIGINT NULL,
            RelatedToObservationID BIGINT NULL
        );
        DECLARE @VaccinationsTemp TABLE
        (
            VaccinationID BIGINT NOT NULL,
            SpeciesID BIGINT NULL,
            VaccinationTypeID BIGINT NULL,
            RouteTypeID BIGINT NULL,
            DiseaseID BIGINT NULL,
            VaccinationDate DATETIME NULL,
            Manufacturer NVARCHAR(200) NULL,
            LotNumber NVARCHAR(200) NULL,
            NumberVaccinated INT NULL,
            Comments NVARCHAR(2000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @SamplesTemp TABLE
        (
            SampleID BIGINT NOT NULL,
            SampleTypeID BIGINT NULL,
            RootSampleID BIGINT NULL,
            ParentSampleID BIGINT NULL,
            SpeciesID BIGINT NULL,
            AnimalID BIGINT NULL,
            VeterinaryDiseaseReportID BIGINT NULL,
            MonitoringSessionID BIGINT NULL,
            SampleStatusTypeID BIGINT NULL,
            CollectionDate DATETIME NULL,
            CollectedByOrganizationID BIGINT NULL,
            CollectedByPersonID BIGINT NULL,
            SentDate DATETIME NULL,
            SentToOrganizationID BIGINT NULL,
            EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
            Comments NVARCHAR(200) NULL,
            SiteID BIGINT NOT NULL,
            CurrentSiteID BIGINT NULL,
            EnteredDate DATETIME NULL,
            DiseaseID BIGINT NULL,
            BirdStatusTypeID BIGINT NULL,
            ReadOnlyIndicator BIT NULL,
            LabModuleSourceIndicator INT NOT NULL,
            FarmID BIGINT NULL,
            FarmOwnerID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @PensideTestsTemp TABLE
        (
            PensideTestID BIGINT NOT NULL,
            SampleID BIGINT NOT NULL,
            PensideTestNameTypeID BIGINT NULL,
            PensideTestResultTypeID BIGINT NULL,
            PensideTestCategoryTypeID BIGINT NULL,
            TestedByPersonID BIGINT NULL,
            TestedByOrganizationID BIGINT NULL,
            DiseaseID BIGINT NULL,
            TestDate DATETIME NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @LaboratoryTestsTemp TABLE
        (
            TestID BIGINT NOT NULL,
            TestNameTypeID BIGINT NULL,
            TestCategoryTypeID BIGINT NULL,
            TestResultTypeID BIGINT NULL,
            TestStatusTypeID BIGINT NOT NULL,
            DiseaseID BIGINT NOT NULL,
            SampleID BIGINT NULL,
            BatchTestID BIGINT NULL,
            ObservationID BIGINT NULL,
            TestNumber INT NULL,
            Comments NVARCHAR NULL,
            StartedDate DATETIME NULL,
            ResultDate DATETIME NULL,
            TestedByOrganizationID BIGINT NULL,
            TestedByPersonID BIGINT NULL,
            ResultEnteredByOrganizationID BIGINT NULL,
            ResultEnteredByPersonID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            ReadOnlyIndicator BIT NOT NULL,
            NonLaboratoryTestIndicator BIT NOT NULL,
            ExternalTestIndicator BIT NULL,
            PerformedByOrganizationID BIGINT NULL,
            ReceivedDate DATETIME NULL,
            ContactPersonName NVARCHAR(200) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @LaboratoryTestInterpretationsTemp TABLE
        (
            TestInterpretationID BIGINT NOT NULL,
            DiseaseID BIGINT NULL,
            InterpretedStatusTypeID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            InterpretedByOrganizationID BIGINT NULL,
            InterpretedByPersonID BIGINT NULL,
            TestID BIGINT NOT NULL,
            ValidatedStatusIndicator BIT NULL,
            ReportSessionCreatedIndicator BIT NULL,
            ValidatedComment NVARCHAR(200) NULL,
            InterpretedComment NVARCHAR(200) NULL,
            ValidatedDate DATETIME NULL,
            InterpretedDate DATETIME NULL,
            ReadOnlyIndicator BIT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @CaseLogsTemp TABLE
        (
            CaseLogID BIGINT NOT NULL,
            LogStatusTypeID BIGINT NULL,
            LoggedByPersonID BIGINT NULL,
            LogDate DATETIME NULL,
            ActionRequired NVARCHAR(200) NULL,
            Comments NVARCHAR(1000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @ClinicalInformationTemp TABLE
        (
            langId NVARCHAR(200) NULL,
            HerdID BIGINT NOT NULL,
            Herd NVARCHAR(200) NULL,
            ClinicalSignsIndicator BIGINT NOT NULL,
            SpeciesTypeID BIGINT NULL,
            SpeciesTypeName NVARCHAR(200) NULL,
            StatusTypeID BIGINT NULL,
            InvestigationPerformedTypeID BIGINT NULL
        );
        DECLARE @ActivityParametersTemp TABLE
        (
            ActivityID BIGINT NOT NULL,
            ParameterID BIGINT NOT NULL,
            ParameterValue SQL_VARIANT NULL,
            ParameterRowID BIGINT NOT NULL
        );
        DECLARE @EventsTemp TABLE
        (
            EventId BIGINT NOT NULL,
            EventTypeId BIGINT NULL,
            UserId BIGINT NULL,
            SiteId BIGINT NULL,
            LoginSiteId BIGINT NULL,
            ObjectId BIGINT NULL,
            DiseaseId BIGINT NULL,
            LocationId BIGINT NULL,
            InformationString NVARCHAR(MAX) NULL,
            Note NVARCHAR(MAX) NULL
        );
        DECLARE @VeterinaryDiseaseReportAfterEdit TABLE
        (
            DiseaseReportID BIGINT,
            FarmID BIGINT,
            DiseaseID BIGINT,
            PersonEnteredByID BIGINT,
            PersonReportedByID BIGINT,
            PersonInvestigatedByID BIGINT,
            ObservationID BIGINT,
            ReportDate DATETIME,
            AssignedDate DATETIME,
            InvestigationDate DATETIME,
            FinalDiagnosisDate DATETIME,
            FieldAccessionID NVARCHAR(200),
            YNTestsConductedTypeID BIGINT,
            ReportedByOfficeID BIGINT,
            InvestigatedByOfficeID BIGINT,
            CaseReportTypeID BIGINT,
            CaseClassificationTypeID BIGINT,
            OutbreakID BIGINT,
            EnteredDate DATETIME,
            EIDSSReportID NVARCHAR(200),
            CaseProgressStatusTypeID BIGINT,
            ParentMonitoringSessionID BIGINT,
            CaseTypeID BIGINT,
            ReceivedByOfficeID BIGINT,
            ReceivedByPersonID BIGINT
        );
        DECLARE @VeterinaryDiseaseReportBeforeEdit TABLE
        (
            DiseaseReportID BIGINT,
            FarmID BIGINT,
            DiseaseID BIGINT,
            PersonEnteredByID BIGINT,
            PersonReportedByID BIGINT,
            PersonInvestigatedByID BIGINT,
            ObservationID BIGINT,
            ReportDate DATETIME,
            AssignedDate DATETIME,
            InvestigationDate DATETIME,
            FinalDiagnosisDate DATETIME,
            FieldAccessionID NVARCHAR(200),
            YNTestsConductedTypeID BIGINT,
            ReportedByOfficeID BIGINT,
            InvestigatedByOfficeID BIGINT,
            CaseReportTypeID BIGINT,
            CaseClassificationTypeID BIGINT,
            OutbreakID BIGINT,
            EnteredDate DATETIME,
            EIDSSReportID NVARCHAR(200),
            CaseProgressStatusTypeID BIGINT,
            ParentMonitoringSessionID BIGINT,
            CaseTypeID BIGINT,
            ReceivedByOfficeID BIGINT,
            ReceivedByPersonID BIGINT
        );

        BEGIN TRANSACTION;

        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        -- Predetermine the outbreak report ID for the upcoming section
        SELECT @OutbreakCaseReportUID = OutbreakCaseReportUID
        FROM dbo.OutbreakCaseReport
        WHERE idfVetCase = @DiseaseReportID;

        INSERT INTO @FlocksOrHerdsTemp
        SELECT *
        FROM
            OPENJSON(@FlocksOrHerds)
            WITH
            (
                FlockOrHerdID BIGINT,
                FarmID BIGINT,
                FlockOrHerdMasterID BIGINT,
                EIDSSFlockOrHerdID NVARCHAR(200),
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @SpeciesTemp
        SELECT *
        FROM
            OPENJSON(@Species)
            WITH
            (
                SpeciesID BIGINT,
                SpeciesMasterID BIGINT,
                FlockOrHerdID BIGINT,
                SpeciesTypeID BIGINT,
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                StartOfSignsDate DATETIME,
                AverageAge NVARCHAR(200),
                ObservationID BIGINT,
                Comments NVARCHAR(2000),
                RowStatus INT,
                RowAction INT,
                RelatedToSpeciesID BIGINT,
                RelatedToObservationID BIGINT,
                OutbreakCaseStatusTypeID BIGINT
            );

        INSERT INTO @AnimalsTemp
        SELECT *
        FROM
            OPENJSON(@Animals)
            WITH
            (
                AnimalID BIGINT,
                SexTypeID BIGINT,
                ConditionTypeID BIGINT,
                AgeTypeID BIGINT,
                SpeciesID BIGINT,
                ObservationID BIGINT,
                EIDSSAnimalID NVARCHAR(200),
                AnimalName NVARCHAR(200),
                Color NVARCHAR(200),
                AnimalDescription NVARCHAR(200),
                ClinicalSignsIndicator BIGINT,
                RowStatus INT,
                RowAction INT,
                RelatedToAnimalID BIGINT,
                RelatedToObservationID BIGINT
            );

        INSERT INTO @VaccinationsTemp
        SELECT *
        FROM
            OPENJSON(@Vaccinations)
            WITH
            (
                VaccinationID BIGINT,
                SpeciesID BIGINT,
                VaccinationTypeID BIGINT,
                RouteTypeID BIGINT,
                DiseaseID BIGINT,
                VaccinationDate DATETIME2,
                Manufacturer NVARCHAR(200),
                LotNumber NVARCHAR(200),
                NumberVaccinated INT,
                Comments NVARCHAR(2000),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@Samples)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                RootSampleID BIGINT,
                ParentSampleID BIGINT,
                SpeciesID BIGINT,
                AnimalID BIGINT,
                VeterinaryDiseaseReportID BIGINT,
                MonitoringSessionID BIGINT,
                SampleStatusTypeID BIGINT,
                CollectionDate DATETIME2,
                CollectedByOrganizationID BIGINT,
                CollectedByPersonID BIGINT,
                SentDate DATETIME2,
                SentToOrganizationID BIGINT,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                Comments NVARCHAR(200),
                SiteID BIGINT,
                CurrentSiteID BIGINT,
                EnteredDate DATETIME2,
                DiseaseID BIGINT,
                BirdStatusTypeID BIGINT,
                ReadOnlyIndicator BIT,
                LabModuleSourceIndicator INT,
                FarmID BIGINT,
                FarmOwnerID BIGINT,
                RowStatus INT,
                RowAction INT
            );

        SET @Iteration =
        (
            SELECT COUNT(*) FROM dbo.tlbMaterial WHERE idfVetCase = @DiseaseReportID
        );

        INSERT INTO @PensideTestsTemp
        SELECT *
        FROM
            OPENJSON(@PensideTests)
            WITH
            (
                PensideTestID BIGINT,
                SampleID BIGINT,
                PensideTestNameTypeID BIGINT,
                PensideTestResultTypeID BIGINT,
                PensideTestCategoryTypeID BIGINT,
                TestedByPersonID BIGINT,
                TestedByOrganizationID BIGINT,
                DiseaseID BIGINT,
                TestDate DATETIME2,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @LaboratoryTestsTemp
        SELECT *
        FROM
            OPENJSON(@LaboratoryTests)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Comments NVARCHAR(500),
                StartedDate DATETIME2,
                ResultDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @LaboratoryTestInterpretationsTemp
        SELECT *
        FROM
            OPENJSON(@LaboratoryTestInterpretations)
            WITH
            (
                TestInterpretationID BIGINT,
                DiseaseID BIGINT,
                InterpretedStatusTypeID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                InterpretedByOrganizationID BIGINT,
                InterpretedByPersonID BIGINT,
                TestID BIGINT,
                ValidatedStatusIndicator BIT,
                ReportSessionCreatedIndicator BIT,
                ValidatedComment NVARCHAR(200),
                InterpretedComment NVARCHAR(200),
                ValidatedDate DATETIME2,
                InterpretedDate DATETIME2,
                ReadOnlyIndicator BIT,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @CaseLogsTemp
        SELECT *
        FROM
            OPENJSON(@CaseLogs)
            WITH
            (
                CaseLogID BIGINT,
                LogStatusTypeID BIGINT,
                LoggedByPersonID BIGINT,
                LogDate DATETIME2,
                ActionRequired NVARCHAR(200),
                Comments NVARCHAR(1000),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @ClinicalInformationTemp
        SELECT *
        FROM
            OPENJSON(@ClinicalInformation)
            WITH
            (
                langId NVARCHAR(200),
                HerdID BIGINT,
                Herd NVARCHAR(200),
                ClinicalSignsTypeID BIGINT,
                SpeciesTypeID BIGINT,
                SpeciesTypeName NVARCHAR(200),
                StatusTypeID BIGINT,
                InvestigationPerformedTypeID BIGINT
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX),
                Note NVARCHAR(MAX)
            );

        IF NOT EXISTS
        (
            SELECT *
            FROM dbo.tlbVetCase
            WHERE idfVetCase = @DiseaseReportID
                  AND intRowStatus = 0
        )
        BEGIN
            -- Get next key value
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbVetCase', @DiseaseReportID OUTPUT;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NextNumber_GET 'Vet Disease Report',
                                               @EIDSSReportID OUTPUT,
                                               NULL;

            -- Data audit
            SET @DataAuditEventTypeID = 10016001; -- Data audit create event type

            INSERT INTO @SuppressSelect
            EXEC dbo.USSP_GBL_DataAuditEvent_GET @AuditUserID,
                                                 @AuditSiteID,
                                                 @DataAuditEventTypeID,
                                                 @ObjectTypeID,
                                                 @DiseaseReportID,
                                                 @ObjectTableID,
                                                 @DataAuditEventID OUTPUT;
            -- End data audit

            IF @ReportCategoryTypeID = 10012004 --Avian
            BEGIN
                UPDATE dbo.tlbFarmActual
                SET intAvianTotalAnimalQty = @FarmTotalAnimalQuantity,
                    intAvianSickAnimalQty = @FarmSickAnimalQuantity,
                    intAvianDeadAnimalQty = @FarmDeadAnimalQuantity,
                    AuditUpdateUser = @AuditUserName
                WHERE idfFarmActual = @FarmMasterID;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_COPY_FARM_SET @AuditUserName,
                                                   @DataAuditEventID,
                                                   @EIDSSReportID,
                                                   @FarmMasterID,
                                                   @FarmTotalAnimalQuantity,
                                                   @FarmSickAnimalQuantity,
                                                   @FarmDeadAnimalQuantity,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   @FarmLatitude,
                                                   @FarmLongitude,
                                                   NULL,
                                                   @FarmEpidemiologicalObservationID,
                                                   @FarmOwnerID,
                                                   @FarmID OUTPUT,
                                                   @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;
            END
            ELSE --Livestock
            BEGIN
                UPDATE dbo.tlbFarmActual
                SET intLivestockTotalAnimalQty = @FarmTotalAnimalQuantity,
                    intLivestockSickAnimalQty = @FarmSickAnimalQuantity,
                    intLivestockDeadAnimalQty = @FarmDeadAnimalQuantity,
                    AuditUpdateUser = @AuditUserName
                WHERE idfFarmActual = @FarmMasterID;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_COPY_FARM_SET @AuditUserName,
                                                   @DataAuditEventID,
                                                   @EIDSSReportID,
                                                   @FarmMasterID,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   @FarmTotalAnimalQuantity,
                                                   @FarmSickAnimalQuantity,
                                                   @FarmDeadAnimalQuantity,
                                                   @FarmLatitude,
                                                   @FarmLongitude,
                                                   NULL,
                                                   @FarmEpidemiologicalObservationID,
                                                   @FarmOwnerID,
                                                   @FarmID OUTPUT,
                                                   @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;
            END

            INSERT INTO dbo.tlbVetCase
            (
                idfVetCase,
                idfFarm,
                idfsFinalDiagnosis,
                idfPersonEnteredBy,
                idfPersonReportedBy,
                idfPersonInvestigatedBy,
                idfObservation,
                idfsSite,
                datReportDate,
                datAssignedDate,
                datInvestigationDate,
                datFinalDiagnosisDate,
                strTestNotes,
                strSummaryNotes,
                strClinicalNotes,
                strFieldAccessionID,
                idfsYNTestsConducted,
                intRowStatus,
                idfReportedByOffice,
                idfInvestigatedByOffice,
                idfsCaseReportType,
                strDefaultDisplayDiagnosis,
                idfsCaseClassification,
                idfOutbreak,
                datEnteredDate,
                strCaseID,
                idfsCaseProgressStatus,
                strSampleNotes,
                datModificationForArchiveDate,
                idfParentMonitoringSession,
                idfsCaseType,
                idfReceivedByOffice,
                idfReceivedByPerson,
                AuditCreateUser,
                SourceSystemNameID,
                SourceSystemKeyValue
            )
            VALUES
            (@DiseaseReportID,
             @FarmID,
             @DiseaseID,
             @EnteredByPersonID,
             @ReportedByPersonID,
             @InvestigatedByPersonID,
             @ControlMeasuresObservationID,
             @SiteID,
             @ReportDate,
             @AssignedDate,
             @InvestigationDate,
             @DiagnosisDate,
             NULL,
             NULL,
             NULL,
             @EIDSSFieldAccessionID,
             @TestsConductedIndicator,
             @RowStatus,
             @ReportedByOrganizationID,
             @InvestigatedByOrganizationID,
             @ReportTypeID,
             NULL,
             @ClassificationTypeID,
             @OutbreakID,
             @EnteredDate,
             @EIDSSReportID,
             @StatusTypeID,
             NULL,
             NULL,
             @MonitoringSessionID,
             @ReportCategoryTypeID,
             @ReceivedByOrganizationID,
             @ReceivedByPersonID,
             @AuditUserName,
             10519001,
             '[{"idfVetCase":' + CAST(@DiseaseReportID AS NVARCHAR(300)) + '}]'
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @DiseaseReportID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @EIDSSReportID
            );

            -- Update data audit event ID on tlbObservation and tlbActivityParameters
            -- for flexible forms saved outside this DB transaction.
            UPDATE dbo.tauDataAuditDetailCreate
            SET idfDataAuditEvent = @DataAuditEventID,
                strObject = @EIDSSReportID
            WHERE idfObject = @FarmEpidemiologicalObservationID
                  AND idfDataAuditEvent IS NULL;

            UPDATE dbo.tauDataAuditDetailCreate
            SET idfDataAuditEvent = @DataAuditEventID,
                strObject = @EIDSSReportID
            WHERE idfObject = @ControlMeasuresObservationID
                  AND idfDataAuditEvent IS NULL;
            -- End data audit

            UPDATE @EventsTemp
            SET ObjectId = @DiseaseReportID,
                Note = REPLACE(Note, 'diseaseReportID=0', 'diseaseReportID=' + CAST(@DiseaseReportID AS NVARCHAR(300)))
            WHERE ObjectId = 0;

            -- Update imported samples from laboratory
            UPDATE @SamplesTemp 
            SET VeterinaryDiseaseReportID = @DiseaseReportID
            WHERE VeterinaryDiseaseReportID = 0
                  AND LabModuleSourceIndicator = 1;
        END
        ELSE
        BEGIN
            -- Data audit
            SET @DataAuditEventTypeID = 10016003; -- Data audit edit event type

            INSERT INTO @SuppressSelect
            EXEC dbo.USSP_GBL_DataAuditEvent_GET @AuditUserID,
                                                 @AuditSiteID,
                                                 @DataAuditEventTypeID,
                                                 @ObjectTypeID,
                                                 @DiseaseReportID,
                                                 @ObjectTableID,
                                                 @DataAuditEventID OUTPUT;
            -- End data audit

            IF @ReportCategoryTypeID = 10012004 --Avian
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_COPY_FARM_SET @AuditUserName,
                                                   @DataAuditEventID,
                                                   @EIDSSReportID,
                                                   @FarmMasterID,
                                                   @FarmTotalAnimalQuantity,
                                                   @FarmSickAnimalQuantity,
                                                   @FarmDeadAnimalQuantity,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   @FarmLatitude,
                                                   @FarmLongitude,
                                                   @MonitoringSessionID,
                                                   @FarmEpidemiologicalObservationID,
                                                   @FarmOwnerID,
                                                   @FarmID OUTPUT,
                                                   @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;
            END
            ELSE --Livestock
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_COPY_FARM_SET @AuditUserName,
                                                   @DataAuditEventID,
                                                   @EIDSSReportID,
                                                   @FarmMasterID,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   @FarmTotalAnimalQuantity,
                                                   @FarmSickAnimalQuantity,
                                                   @FarmDeadAnimalQuantity,
                                                   @FarmLatitude,
                                                   @FarmLongitude,
                                                   @MonitoringSessionID,
                                                   @FarmEpidemiologicalObservationID,
                                                   @FarmOwnerID,
                                                   @FarmID OUTPUT,
                                                   @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;
            END
            -- Data audit
            INSERT INTO @VeterinaryDiseaseReportBeforeEdit
            (
                DiseaseReportID,
                FarmID,
                DiseaseID,
                PersonEnteredByID,
                PersonReportedByID,
                PersonInvestigatedByID,
                ObservationID,
                ReportDate,
                AssignedDate,
                InvestigationDate,
                FinalDiagnosisDate,
                FieldAccessionID,
                YNTestsConductedTypeID,
                ReportedByOfficeID,
                InvestigatedByOfficeID,
                CaseReportTypeID,
                CaseClassificationTypeID,
                OutbreakID,
                EnteredDate,
                EIDSSReportID,
                CaseProgressStatusTypeID,
                ParentMonitoringSessionID,
                CaseTypeID,
                ReceivedByOfficeID,
                ReceivedByPersonID
            )
            SELECT idfVetCase,
                   idfFarm,
                   idfsFinalDiagnosis,
                   idfPersonEnteredBy,
                   idfPersonReportedBy,
                   idfPersonInvestigatedBy,
                   idfObservation,
                   datReportDate,
                   datAssignedDate,
                   datInvestigationDate,
                   datFinalDiagnosisDate,
                   strFieldAccessionID,
                   idfsYNTestsConducted,
                   idfReportedByOffice,
                   idfInvestigatedByOffice,
                   idfsCaseReportType,
                   idfsCaseClassification,
                   idfOutbreak,
                   datEnteredDate,
                   strCaseID,
                   idfsCaseProgressStatus,
                   idfParentMonitoringSession,
                   idfsCaseType,
                   idfReceivedByOffice,
                   idfReceivedByPerson
            FROM dbo.tlbVetCase
            WHERE idfVetCase = @DiseaseReportID;
            -- End data audit

            UPDATE dbo.tlbVetCase
            SET idfFarm = @FarmID,
                idfsFinalDiagnosis = @DiseaseID,
                idfPersonEnteredBy = @EnteredByPersonID,
                idfPersonReportedBy = @ReportedByPersonID,
                idfPersonInvestigatedBy = @InvestigatedByPersonID,
                idfReceivedByPerson = @ReceivedByPersonID,
                idfObservation = @ControlMeasuresObservationID,
                idfsSite = @SiteID,
                datReportDate = @ReportDate,
                datAssignedDate = @AssignedDate,
                datInvestigationDate = @InvestigationDate,
                datFinalDiagnosisDate = @DiagnosisDate,
                strTestNotes = NULL,
                strSummaryNotes = NULL,
                strClinicalNotes = NULL,
                strFieldAccessionID = @EIDSSFieldAccessionID,
                idfsYNTestsConducted = @TestsConductedIndicator,
                intRowStatus = @RowStatus,
                idfReportedByOffice = @ReportedByOrganizationID,
                idfInvestigatedByOffice = @InvestigatedByOrganizationID,
                idfReceivedByOffice = @ReceivedByOrganizationID,
                idfsCaseReportType = @ReportTypeID,
                idfsCaseClassification = @ClassificationTypeID,
                idfOutbreak = @OutbreakID,
                datEnteredDate = @EnteredDate,
                strCaseID = @EIDSSReportID,
                idfsCaseProgressStatus = @StatusTypeID,
                strSampleNotes = NULL,
                idfParentMonitoringSession = @MonitoringSessionID,
                idfsCaseType = @ReportCategoryTypeID,
                AuditUpdateUser = @AuditUserName
            WHERE idfVetCase = @DiseaseReportID;

            -- Data audit
            INSERT INTO @VeterinaryDiseaseReportAfterEdit
            (
                DiseaseReportID,
                FarmID,
                DiseaseID,
                PersonEnteredByID,
                PersonReportedByID,
                PersonInvestigatedByID,
                ObservationID,
                ReportDate,
                AssignedDate,
                InvestigationDate,
                FinalDiagnosisDate,
                FieldAccessionID,
                YNTestsConductedTypeID,
                ReportedByOfficeID,
                InvestigatedByOfficeID,
                CaseReportTypeID,
                CaseClassificationTypeID,
                OutbreakID,
                EnteredDate,
                EIDSSReportID,
                CaseProgressStatusTypeID,
                ParentMonitoringSessionID,
                CaseTypeID,
                ReceivedByOfficeID,
                ReceivedByPersonID
            )
            SELECT idfVetCase,
                   idfFarm,
                   idfsFinalDiagnosis,
                   idfPersonEnteredBy,
                   idfPersonReportedBy,
                   idfPersonInvestigatedBy,
                   idfObservation,
                   datReportDate,
                   datAssignedDate,
                   datInvestigationDate,
                   datFinalDiagnosisDate,
                   strFieldAccessionID,
                   idfsYNTestsConducted,
                   idfReportedByOffice,
                   idfInvestigatedByOffice,
                   idfsCaseReportType,
                   idfsCaseClassification,
                   idfOutbreak,
                   datEnteredDate,
                   strCaseID,
                   idfsCaseProgressStatus,
                   idfParentMonitoringSession,
                   idfsCaseType,
                   idfReceivedByOffice,
                   idfReceivedByPerson
            FROM dbo.tlbVetCase
            WHERE idfVetCase = @DiseaseReportID;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4575810000000,
                   a.DiseaseReportID,
                   NULL,
                   b.FarmID,
                   a.FarmID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.FarmID <> b.FarmID)
                  OR (
                         a.FarmID IS NOT NULL
                         AND b.FarmID IS NULL
                     )
                  OR (
                         a.FarmID IS NULL
                         AND b.FarmID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80940000000,
                   a.DiseaseReportID,
                   NULL,
                   b.DiseaseID,
                   a.DiseaseID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.DiseaseID <> b.DiseaseID)
                  OR (
                         a.DiseaseID IS NOT NULL
                         AND b.DiseaseID IS NULL
                     )
                  OR (
                         a.DiseaseID IS NULL
                         AND b.DiseaseID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80910000000,
                   a.DiseaseReportID,
                   NULL,
                   b.PersonEnteredByID,
                   a.PersonEnteredByID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.PersonEnteredByID <> b.PersonEnteredByID)
                  OR (
                         a.PersonEnteredByID IS NOT NULL
                         AND b.PersonEnteredByID IS NULL
                     )
                  OR (
                         a.PersonEnteredByID IS NULL
                         AND b.PersonEnteredByID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80930000000,
                   a.DiseaseReportID,
                   NULL,
                   b.PersonReportedByID,
                   a.PersonReportedByID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.PersonReportedByID <> b.PersonReportedByID)
                  OR (
                         a.PersonReportedByID IS NOT NULL
                         AND b.PersonReportedByID IS NULL
                     )
                  OR (
                         a.PersonReportedByID IS NULL
                         AND b.PersonReportedByID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80920000000,
                   a.DiseaseReportID,
                   NULL,
                   b.PersonInvestigatedByID,
                   a.PersonInvestigatedByID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.PersonInvestigatedByID <> b.PersonInvestigatedByID)
                  OR (
                         a.PersonInvestigatedByID IS NOT NULL
                         AND b.PersonInvestigatedByID IS NULL
                     )
                  OR (
                         a.PersonInvestigatedByID IS NULL
                         AND b.PersonInvestigatedByID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4566320000000,
                   a.DiseaseReportID,
                   NULL,
                   b.ObservationID,
                   a.ObservationID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.ObservationID <> b.ObservationID)
                  OR (
                         a.ObservationID IS NOT NULL
                         AND b.ObservationID IS NULL
                     )
                  OR (
                         a.ObservationID IS NULL
                         AND b.ObservationID IS NOT NULL
                     )

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80870000000,
                   a.DiseaseReportID,
                   NULL,
                   b.ReportDate,
                   a.ReportDate,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.ReportDate <> b.ReportDate)
                  OR (
                         a.ReportDate IS NOT NULL
                         AND b.ReportDate IS NULL
                     )
                  OR (
                         a.ReportDate IS NULL
                         AND b.ReportDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80850000000,
                   a.DiseaseReportID,
                   NULL,
                   b.AssignedDate,
                   a.AssignedDate,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.AssignedDate <> b.AssignedDate)
                  OR (
                         a.AssignedDate IS NOT NULL
                         AND b.AssignedDate IS NULL
                     )
                  OR (
                         a.AssignedDate IS NULL
                         AND b.AssignedDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4566330000000,
                   a.DiseaseReportID,
                   NULL,
                   b.InvestigationDate,
                   a.InvestigationDate,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.InvestigationDate <> b.InvestigationDate)
                  OR (
                         a.InvestigationDate IS NOT NULL
                         AND b.InvestigationDate IS NULL
                     )
                  OR (
                         a.InvestigationDate IS NULL
                         AND b.InvestigationDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80860000000,
                   a.DiseaseReportID,
                   NULL,
                   b.FinalDiagnosisDate,
                   a.FinalDiagnosisDate,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.FinalDiagnosisDate <> b.FinalDiagnosisDate)
                  OR (
                         a.FinalDiagnosisDate IS NOT NULL
                         AND b.FinalDiagnosisDate IS NULL
                     )
                  OR (
                         a.FinalDiagnosisDate IS NULL
                         AND b.FinalDiagnosisDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4566340000000,
                   a.DiseaseReportID,
                   NULL,
                   b.FieldAccessionID,
                   a.FieldAccessionID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.FieldAccessionID <> b.FieldAccessionID)
                  OR (
                         a.FieldAccessionID IS NOT NULL
                         AND b.FieldAccessionID IS NULL
                     )
                  OR (
                         a.FieldAccessionID IS NULL
                         AND b.FieldAccessionID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4578870000000,
                   a.DiseaseReportID,
                   NULL,
                   b.YNTestsConductedTypeID,
                   a.YNTestsConductedTypeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.YNTestsConductedTypeID <> b.YNTestsConductedTypeID)
                  OR (
                         a.YNTestsConductedTypeID IS NOT NULL
                         AND b.YNTestsConductedTypeID IS NULL
                     )
                  OR (
                         a.YNTestsConductedTypeID IS NULL
                         AND b.YNTestsConductedTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   6618090000000,
                   a.DiseaseReportID,
                   NULL,
                   b.ReportedByOfficeID,
                   a.ReportedByOfficeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.ReportedByOfficeID <> b.ReportedByOfficeID)
                  OR (
                         a.ReportedByOfficeID IS NOT NULL
                         AND b.ReportedByOfficeID IS NULL
                     )
                  OR (
                         a.ReportedByOfficeID IS NULL
                         AND b.ReportedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   6618100000000,
                   a.DiseaseReportID,
                   NULL,
                   b.InvestigatedByOfficeID,
                   a.InvestigatedByOfficeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.InvestigatedByOfficeID <> b.InvestigatedByOfficeID)
                  OR (
                         a.InvestigatedByOfficeID IS NOT NULL
                         AND b.InvestigatedByOfficeID IS NULL
                     )
                  OR (
                         a.InvestigatedByOfficeID IS NULL
                         AND b.InvestigatedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   6618120000000,
                   a.DiseaseReportID,
                   NULL,
                   b.CaseReportTypeID,
                   a.CaseReportTypeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.CaseReportTypeID <> b.CaseReportTypeID)
                  OR (
                         a.CaseReportTypeID IS NOT NULL
                         AND b.CaseReportTypeID IS NULL
                     )
                  OR (
                         a.CaseReportTypeID IS NULL
                         AND b.CaseReportTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665470000000,
                   a.DiseaseReportID,
                   NULL,
                   b.CaseClassificationTypeID,
                   a.CaseClassificationTypeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.CaseClassificationTypeID <> b.CaseClassificationTypeID)
                  OR (
                         a.CaseClassificationTypeID IS NOT NULL
                         AND b.CaseClassificationTypeID IS NULL
                     )
                  OR (
                         a.CaseClassificationTypeID IS NULL
                         AND b.CaseClassificationTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665490000000,
                   a.DiseaseReportID,
                   NULL,
                   b.OutbreakID,
                   a.OutbreakID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.OutbreakID <> b.OutbreakID)
                  OR (
                         a.OutbreakID IS NOT NULL
                         AND b.OutbreakID IS NULL
                     )
                  OR (
                         a.OutbreakID IS NULL
                         AND b.OutbreakID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665500000000,
                   a.DiseaseReportID,
                   NULL,
                   b.EnteredDate,
                   a.EnteredDate,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.EnteredDate <> b.EnteredDate)
                  OR (
                         a.EnteredDate IS NOT NULL
                         AND b.EnteredDate IS NULL
                     )
                  OR (
                         a.EnteredDate IS NULL
                         AND b.EnteredDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665510000000,
                   a.DiseaseReportID,
                   NULL,
                   b.EIDSSReportID,
                   a.EIDSSReportID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.EIDSSReportID <> b.EIDSSReportID)
                  OR (
                         a.EIDSSReportID IS NOT NULL
                         AND b.EIDSSReportID IS NULL
                     )
                  OR (
                         a.EIDSSReportID IS NULL
                         AND b.EIDSSReportID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665520000000,
                   a.DiseaseReportID,
                   NULL,
                   b.CaseProgressStatusTypeID,
                   a.CaseProgressStatusTypeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.CaseProgressStatusTypeID <> b.CaseProgressStatusTypeID)
                  OR (
                         a.CaseProgressStatusTypeID IS NOT NULL
                         AND b.CaseProgressStatusTypeID IS NULL
                     )
                  OR (
                         a.CaseProgressStatusTypeID IS NULL
                         AND b.CaseProgressStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665540000000,
                   a.DiseaseReportID,
                   NULL,
                   b.ParentMonitoringSessionID,
                   a.ParentMonitoringSessionID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.ParentMonitoringSessionID <> b.ParentMonitoringSessionID)
                  OR (
                         a.ParentMonitoringSessionID IS NOT NULL
                         AND b.ParentMonitoringSessionID IS NULL
                     )
                  OR (
                         a.ParentMonitoringSessionID IS NULL
                         AND b.ParentMonitoringSessionID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665560000000,
                   a.DiseaseReportID,
                   NULL,
                   b.CaseTypeID,
                   a.CaseTypeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.CaseTypeID <> b.CaseTypeID)
                  OR (
                         a.CaseTypeID IS NOT NULL
                         AND b.CaseTypeID IS NULL
                     )
                  OR (
                         a.CaseTypeID IS NULL
                         AND b.CaseTypeID IS NOT NULL
                     );
        END;

        -- VUC11 and VUC12 - connected disease report logic.
        IF @RelatedToDiseaseReportID IS NOT NULL
        BEGIN
            IF NOT EXISTS
            (
                SELECT *
                FROM dbo.VetDiseaseReportRelationship
                WHERE VetDiseaseReportID = @DiseaseReportID
                      AND intRowStatus = 0
            )
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'VetDiseaseReportRelationship',
                                                  @VeterinaryDiseaseReportRelationshipID OUTPUT;

                INSERT INTO dbo.VetDiseaseReportRelationship
                (
                    VetDiseaseReportRelnUID,
                    VetDiseaseReportID,
                    RelatedToVetDiseaseReportID,
                    RelationshipTypeID,
                    intRowStatus,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser
                )
                VALUES
                (@VeterinaryDiseaseReportRelationshipID,
                 @DiseaseReportID,
                 @RelatedToDiseaseReportID,
                 10503001,
                 0  ,
                 10519001,
                 '[{"VetDiseaseReportRelnUID":' + CAST(@VeterinaryDiseaseReportRelationshipID AS NVARCHAR(300))
                 + ',"VetDiseaseReportID":' + CAST(@DiseaseReportID AS NVARCHAR(300)) + '}]',
                 @AuditUserName
                );

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    strObject
                )
                VALUES
                (@DataAuditEventID,
                 @ObjectVeterinaryDiseaseReportRelationshipTableID,
                 @VeterinaryDiseaseReportRelationshipID,
                 10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                 + CAST(@ObjectVeterinaryDiseaseReportRelationshipTableID AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 @EIDSSReportID
                );
            -- End data audit
            END;
        END;

        -- An outbreak reference via a case must be created in order to tie the disease report to the outbreak session.
        IF @OutbreakCaseIndicator = 1
        BEGIN
            IF @OutbreakCaseReportUID IS NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'OutbreakCaseReport',
                                               @OutbreakCaseReportUID OUTPUT;

                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NextNumber_GET 'Vet Outbreak Case',
                                                @EIDSSCaseID OUTPUT,
                                                NULL;

                INSERT INTO dbo.OutbreakCaseReport
                (
                    OutbreakCaseReportUID,
                    idfOutbreak,
                    strOutbreakCaseID,
                    idfHumanCase,
                    idfVetCase,
                    OutbreakCaseObservationId,
                    OutbreakCaseStatusId,
                    OutbreakCaseClassificationID,
                    IsPrimaryCaseFlag,
                    intRowStatus,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    AuditCreateDTM,
                    AuditUpdateUser,
                    AuditUpdateDTM
                )
                VALUES
                (@OutbreakCaseReportUID,
                 @OutbreakID,
                 @EIDSSCaseID,
                 NULL,
                 @DiseaseReportID,
                 @OutbreakCaseQuestionnaireObservationID,
                 @OutbreakCaseStatusTypeID,
                 @ClassificationTypeID,
                 @PrimaryCaseIndicator,
                 0  ,
                 10519001,
                 '[{"OutBreakCaseReportUID":' + CAST(@OutbreakCaseReportUID AS NVARCHAR(300)) + ',"idfOutbreak":'
                 + CAST(@OutbreakID AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 GETDATE(),
                 @AuditUserName,
                 GETDATE()
                );
            END
            ELSE
            BEGIN
                UPDATE dbo.OutbreakCaseReport
                SET OutbreakCaseStatusId = @OutbreakCaseStatusTypeID,
                    OutbreakCaseClassificationID = @ClassificationTypeID,
                    IsPrimaryCaseFlag = @PrimaryCaseIndicator,
                    intRowStatus = 0,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE(),
                    OutbreakCaseObservationID = @OutbreakCaseQuestionnaireObservationID
                WHERE OutbreakCaseReportUID = @OutbreakCaseReportUID;
            END
        END

        WHILE EXISTS (SELECT * FROM @FlocksOrHerdsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FlockOrHerdID,
                @FlockOrHerdID = FlockOrHerdID,
                @FlockOrHerdMasterID = FlockOrHerdMasterID,
                @EIDSSFlockOrHerdID = EIDSSFlockOrHerdID,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @FlocksOrHerdsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_FLOCK_HERD_SET @AuditUserName,
                                                @DataAuditEventID,
                                                @EIDSSReportID,
                                                @FlockOrHerdID OUTPUT,
                                                @FlockOrHerdMasterID,
                                                @FarmID,
                                                @EIDSSFlockOrHerdID,
                                                @SickAnimalQuantity,
                                                @TotalAnimalQuantity,
                                                @DeadAnimalQuantity,
                                                NULL,
                                                @RowStatus,
                                                @RowAction;

            UPDATE @SpeciesTemp
            SET FlockOrHerdID = @FlockOrHerdID
            WHERE FlockOrHerdID = @RowID;

            DELETE FROM @FlocksOrHerdsTemp
            WHERE FLockOrHerdID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @SpeciesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SpeciesID,
                @SpeciesID = SpeciesID,
                @SpeciesMasterID = SpeciesMasterID,
                @SpeciesTypeID = SpeciesTypeID,
                @FlockOrHerdID = FlockOrHerdID,
                @StartOfSignsDate = StartOfSignsDate,
                @AverageAge = AverageAge,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @Comments = Comments,
                @ObservationID = ObservationID,
                @RowStatus = RowStatus,
                @RowAction = RowAction,
                @RelatedToSpeciesID = RelatedToSpeciesID,
                @RelatedToObservationID = RelatedToObservationID,
                @OutbreakSpeciesCaseStatusTypeID = OutbreakCaseStatusTypeID
            FROM @SpeciesTemp;

            -- VUC11 and VUC12 - connected disease report logic for clinical species investigations.
            IF @RelatedToDiseaseReportID IS NOT NULL
               AND @RowAction = 1 -- Insert
            BEGIN
                IF @RelatedToObservationID IS NOT NULL
                BEGIN
                    SELECT @FormTemplateID = idfsFormTemplate,
                           @ObservationSiteID = idfsSite
                    FROM dbo.tlbObservation
                    WHERE idfObservation = @RelatedToObservationID;

                    SET @ObservationID = -1;

                    INSERT INTO @SuppressSelect
                    EXECUTE dbo.USSP_GBL_OBSERVATION_SET @ObservationID OUTPUT,
                                                         @FormTemplateID,
                                                         @ObservationSiteID,
                                                         0,
                                                         1, 
                                                         @AuditUserName, 
                                                         @DataAuditEventID, 
                                                         @EIDSSReportID;

                    UPDATE @SpeciesTemp
                    SET ObservationID = @ObservationID
                    WHERE SpeciesMasterID = @SpeciesMasterID;

                    INSERT INTO @ActivityParametersTemp
                    SELECT idfActivityParameters,
                           idfsParameter,
                           varValue,
                           idfRow
                    FROM dbo.tlbActivityParameters
                    WHERE idfObservation = @RelatedToObservationID;

                    WHILE EXISTS (SELECT * FROM @ActivityParametersTemp)
                    BEGIN
                        SELECT TOP 1
                            @ActivityID = ActivityID,
                            @ParameterID = ParameterID,
                            @ParameterValue = ParameterValue,
                            @ParameterRowID = ParameterRowID
                        FROM @ActivityParametersTemp;

                        INSERT INTO @SuppressSelect
                        EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbActivityParameters',
                                                          @ActivityIDNew OUTPUT;

                        INSERT INTO dbo.tlbActivityParameters
                        (
                            idfActivityParameters,
                            idfsParameter,
                            idfObservation,
                            varValue,
                            idfRow,
                            intRowStatus,
                            SourceSystemNameID,
                            SourceSystemKeyValue,
                            AuditCreateUser,
                            AuditCreateDTM
                        )
                        VALUES
                        (@ActivityIDNew,
                         @ParameterID,
                         @ObservationID,
                         @ParameterValue,
                         @ParameterRowID,
                         0  ,
                         10519001,
                         '[{"idfActivityParameters":' + CAST(@ActivityIDNew AS NVARCHAR(300)) + '}]',
                         @AuditUserName,
                         GETDATE()
                        );

                        -- Data audit
                        INSERT INTO dbo.tauDataAuditDetailCreate
                        (
                            idfDataAuditEvent,
                            idfObjectTable,
                            idfObject,
                            idfObjectDetail,
                            SourceSystemNameID,
                            SourceSystemKeyValue,
                            AuditCreateUser
                        )
                        VALUES
                        (@DataAuditEventID,
                         @ObjectActivityParametersTableID,
                         @ActivityIDNew,
                         @ObservationID,
                         10519001,
                         '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                         + CAST(@ObjectActivityParametersTableID AS NVARCHAR(300)) + '}]',
                         @AuditUserName
                        );
                        -- End data audit

                        DELETE FROM @ActivityParametersTemp
                        WHERE ActivityID = @ActivityID;
                    END;
                END;
            END;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_SPECIES_WITH_AUDITING_SET @AuditUserName,
                                                           @DataAuditEventID,
                                                           @EIDSSReportID,
                                                           @SpeciesID OUTPUT,
                                                           @SpeciesMasterID,
                                                           @SpeciesTypeID,
                                                           @FlockOrHerdID,
                                                           @ObservationID,
                                                           @StartOfSignsDate,
                                                           @AverageAge,
                                                           @SickAnimalQuantity,
                                                           @TotalAnimalQuantity,
                                                           @DeadAnimalQuantity,
                                                           @Comments,
                                                           @RowStatus,
                                                           @RowAction,
                                                           @OutbreakSpeciesCaseStatusTypeID;

            UPDATE @AnimalsTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            UPDATE @VaccinationsTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            UPDATE @SamplesTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            DELETE FROM @SpeciesTemp
            WHERE SpeciesID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @AnimalsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = AnimalID,
                @AnimalID = AnimalID,
                @SexTypeID = SexTypeID,
                @ConditionTypeID = ConditionTypeID,
                @AgeTypeID = AgeTypeID,
                @SpeciesID = SpeciesID,
                @ObservationID = ObservationID,
                @AnimalDescription = AnimalDescription,
                @EIDSSAnimalID = EIDSSAnimalID,
                @AnimalName = AnimalName,
                @Color = Color,
                @ClinicalSignsIndicator = ClinicalSignsIndicator,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @AnimalsTemp;

            -- VUC11 and VUC12 - connected disease report logic for clinical signs.
            IF @RelatedToDiseaseReportID IS NOT NULL
               AND @RowAction = 1 -- Insert
               AND @ObservationID IS NOT NULL
            BEGIN
                SELECT @FormTemplateID = idfsFormTemplate,
                       @ObservationSiteID = idfsSite
                FROM dbo.tlbObservation
                WHERE idfObservation = @ObservationID;

                DELETE FROM @ActivityParametersTemp;

                INSERT INTO @ActivityParametersTemp
                SELECT idfActivityParameters,
                       idfsParameter,
                       varValue,
                       idfRow
                FROM dbo.tlbActivityParameters
                WHERE idfObservation = @ObservationID;

                SET @ObservationID = -1;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_OBSERVATION_SET @ObservationID OUTPUT,
                                                     @FormTemplateID,
                                                     @ObservationSiteID,
                                                     0,
                                                     1, 
                                                     @AuditUserName, 
                                                     @DataAuditEventID, 
                                                     @EIDSSReportID;

                UPDATE @AnimalsTemp
                SET ObservationID = @ObservationID
                WHERE AnimalID = @RowID;


                WHILE EXISTS (SELECT * FROM @ActivityParametersTemp)
                BEGIN
                    SELECT TOP 1
                        @ActivityID = ActivityID,
                        @ParameterID = ParameterID,
                        @ParameterValue = ParameterValue,
                        @ParameterRowID = ParameterRowID
                    FROM @ActivityParametersTemp;

                    INSERT INTO @SuppressSelect
                    EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbActivityParameters',
                                                      @ActivityIDNew OUTPUT;

                    INSERT INTO dbo.tlbActivityParameters
                    (
                        idfActivityParameters,
                        idfsParameter,
                        idfObservation,
                        varValue,
                        idfRow,
                        intRowStatus,
                        SourceSystemNameID,
                        SourceSystemKeyValue,
                        AuditCreateUser,
                        AuditCreateDTM
                    )
                    VALUES
                    (@ActivityIDNew,
                     @ParameterID,
                     @ObservationID,
                     @ParameterValue,
                     @ParameterRowID,
                     0  ,
                     10519001,
                     '[{"idfActivityParameters":' + CAST(@ActivityIDNew AS NVARCHAR(300)) + '}]',
                     @AuditUserName,
                     GETDATE()
                    );

                    -- Data audit
                    INSERT INTO dbo.tauDataAuditDetailCreate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        idfObjectDetail,
                        SourceSystemNameID,
                        SourceSystemKeyValue,
                        AuditCreateUser
                    )
                    VALUES
                    (@DataAuditEventID,
                     @ObjectActivityParametersTableID,
                     @ActivityIDNew,
                     @ObservationID,
                     10519001,
                     '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                     + CAST(@ObjectActivityParametersTableID AS NVARCHAR(300)) + '}]',
                     @AuditUserName
                    );
                    -- End data audit

                    DELETE FROM @ActivityParametersTemp
                    WHERE ActivityID = @ActivityID;
                END;
            END;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_ANIMALS_SET @AuditUserName,
                                             @DataAuditEventID,
                                             @EIDSSReportID,
                                             @AnimalID OUTPUT,
                                             @SexTypeID,
                                             @ConditionTypeID,
                                             @AgeTypeID,
                                             @SpeciesID,
                                             @ObservationID,
                                             @AnimalDescription,
                                             @EIDSSAnimalID,
                                             @AnimalName,
                                             @Color,
                                             @ClinicalSignsIndicator,
                                             @RowStatus,
                                             @RowAction;

            UPDATE @SamplesTemp
            SET AnimalID = @AnimalID
            WHERE AnimalID = @RowID;

            DELETE FROM @AnimalsTemp
            WHERE AnimalID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @VaccinationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = VaccinationID,
                @VaccinationID = VaccinationID,
                @SpeciesID = SpeciesID,
                @VaccinationTypeID = VaccinationTypeID,
                @RouteTypeID = RouteTypeID,
                @DiseaseID = DiseaseID,
                @VaccinationDate = VaccinationDate,
                @Manufacturer = Manufacturer,
                @LotNumber = LotNumber,
                @NumberVaccinated = NumberVaccinated,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @VaccinationsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_VACCINATIONS_SET @AuditUserName,
                                                  @DataAuditEventID,
                                                  @EIDSSReportID,
                                                  @VaccinationID OUTPUT,
                                                  @DiseaseReportID,
                                                  @SpeciesID,
                                                  @VaccinationTypeID,
                                                  @RouteTypeID,
                                                  @DiseaseID,
                                                  @VaccinationDate,
                                                  @Manufacturer,
                                                  @LotNumber,
                                                  @NumberVaccinated,
                                                  @Comments,
                                                  @RowStatus,
                                                  @RowAction;

            DELETE FROM @VaccinationsTemp
            WHERE VaccinationID = @RowID;
        END;

        IF @Contacts IS NOT NULL
            EXEC dbo.USSP_OMM_CONTACT_SET NULL,
                                          @Contacts,
                                          @User = @AuditUserName,
                                          @OutBreakCaseReportUID = @OutbreakCaseReportUID,
                                          @FunctionCall = 1;

        WHILE EXISTS (SELECT * FROM @SamplesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SampleID,
                @SampleID = SampleID,
                @SampleTypeID = SampleTypeID,
                @RootSampleID = RootSampleID,
                @ParentSampleID = ParentSampleID,
                @SpeciesID = SpeciesID,
                @AnimalID = AnimalID,
                @SampleDiseaseReportID = VeterinaryDiseaseReportID,
                @MonitoringSessionID = MonitoringSessionID,
                @CollectedByPersonID = CollectedByPersonID,
                @CollectedByOrganizationID = CollectedByOrganizationID,
                @CollectionDate = CollectionDate,
                @SentDate = SentDate,
                @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                @SampleStatusTypeID = SampleStatusTypeID,
                @EnteredDate = EnteredDate,
                @Comments = Comments,
                @SiteID = SiteID,
                @CurrentSiteID = CurrentSiteID,
                @RowStatus = RowStatus,
                @SentToOrganizationID = SentToOrganizationID,
                @BirdStatusTypeID = BirdStatusTypeID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @LabModuleSourceIndicator = LabModuleSourceIndicator,
                @RowAction = RowAction
            FROM @SamplesTemp;

            IF (
                   @EIDSSLocalOrFieldSampleID IS NULL
                   OR @EIDSSLocalOrFieldSampleID = ''
               )
               AND @LinkLocalOrFieldSampleIDToReportID = 1
            BEGIN
                SET @Iteration = @Iteration + 1;
                IF @Iteration < 10
                BEGIN
                    SET @EIDSSLocalOrFieldSampleID = @EIDSSReportID + '-0' + CONVERT(NVARCHAR(4), @Iteration);
                END
                ELSE
                BEGIN
                    SET @EIDSSLocalOrFieldSampleID = @EIDSSReportID + '-' + CONVERT(NVARCHAR(4), @Iteration);
                END;
            END;

            -- Check if sample is being de-linked, so use sample disease report ID passed in from 
            -- sample record instead of parent disease report ID.
            IF @LabModuleSourceIndicator = 0
            BEGIN
                SET @SampleDiseaseReportID = @DiseaseReportID;
            END

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_SAMPLES_SET @AuditUserName,
                                             @DataAuditEventID,
                                             @EIDSSReportID,
                                             @SampleID OUTPUT,
                                             @SampleTypeID,
                                             @RootSampleID,
                                             @ParentSampleID,
                                             @FarmOwnerID,
                                             @SpeciesID,
                                             @AnimalID,
                                             NULL,
                                             @MonitoringSessionID,
                                             NULL,
                                             NULL,
                                             @SampleDiseaseReportID,
                                             @CollectionDate,
                                             @CollectedByPersonID,
                                             @CollectedByOrganizationID,
                                             @SentDate,
                                             @SentToOrganizationID,
                                             @EIDSSLocalOrFieldSampleID,
                                             @SiteID,
                                             @EnteredDate,
                                             @ReadOnlyIndicator,
                                             @SampleStatusTypeID,
                                             @Comments,
                                             @CurrentSiteID,
                                             @DiseaseID,
                                             @BirdStatusTypeID,
                                             @RowStatus,
                                             @RowAction;

            UPDATE @PensideTestsTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            UPDATE @LaboratoryTestsTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            DELETE FROM @SamplesTemp
            WHERE SampleID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @PensideTestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = PensideTestID,
                @PensideTestID = PensideTestID,
                @SampleID = SampleID,
                @PensideTestResultTypeID = PensideTestResultTypeID,
                @PensideTestNameTypeID = PensideTestNameTypeID,
                @RowStatus = RowStatus,
                @TestedByPersonID = TestedByPersonID,
                @TestedByOrganizationID = TestedByOrganizationID,
                @DiseaseID = DiseaseID,
                @TestDate = TestDate,
                @PensideTestCategoryTypeID = PensideTestCategoryTypeID,
                @RowAction = RowAction
            FROM @PensideTestsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_PENSIDE_TESTS_SET @AuditUserName,
                                                   @DataAuditEventID,
                                                   @EIDSSReportID,
                                                   @PensideTestID OUTPUT,
                                                   @SampleID,
                                                   @PensideTestResultTypeID,
                                                   @PensideTestNameTypeID,
                                                   @TestedByPersonID,
                                                   @TestedByOrganizationID,
                                                   @DiseaseID,
                                                   @TestDate,
                                                   @PensideTestCategoryTypeID,
                                                   @RowStatus,
                                                   @RowAction;

            DELETE FROM @PensideTestsTemp
            WHERE PensideTestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @LaboratoryTestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestID,
                @TestID = TestID,
                @TestNameTypeID = TestNameTypeID,
                @TestCategoryTypeID = TestCategoryTypeID,
                @TestResultTypeID = TestResultTypeID,
                @TestStatusTypeID = TestStatusTypeID,
                @DiseaseID = DiseaseID,
                @SampleID = SampleID,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @StartedDate = StartedDate,
                @ResultDate = ResultDate,
                @TestedByOrganizationID = TestedByOrganizationID,
                @TestedByPersonID = TestedByPersonID,
                @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                @ResultEnteredByPersonID = ResultEnteredByPersonID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
                @ExternalTestIndicator = ExternalTestIndicator,
                @PerformedByOrganizationID = PerformedByOrganizationID,
                @ReceivedDate = ReceivedDate,
                @ContactPersonName = ContactPersonName,
                @RowAction = RowAction
            FROM @LaboratoryTestsTemp;

            --If record is being soft-deleted, then check if the test record was originally created 
            --in the laboaratory module.  If it was, then disassociate the test record from the 
            --veterinary disease report, so that the test record remains in the laboratory module 
            --for further action.
            IF @RowStatus = 1
               AND @NonLaboratoryTestIndicator = 0
            BEGIN
                SET @RowStatus = 0;
                SET @TestDiseaseReportID = NULL;
            END
            ELSE
            BEGIN
                SET @TestDiseaseReportID = @DiseaseReportID;
            END;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TESTS_SET @TestID OUTPUT,
                                           @TestNameTypeID,
                                           @TestCategoryTypeID,
                                           @TestResultTypeID,
                                           @TestStatusTypeID,
                                           @DiseaseID,
                                           @SampleID,
                                           NULL,
                                           NULL,
                                           NULL,
                                           @Comments,
                                           @RowStatus,
                                           @StartedDate,
                                           @ResultDate,
                                           @TestedByOrganizationID,
                                           @TestedByPersonID,
                                           @ResultEnteredByOrganizationID,
                                           @ResultEnteredByPersonID,
                                           @ValidatedByOrganizationID,
                                           @ValidatedByPersonID,
                                           @ReadOnlyIndicator,
                                           @NonLaboratoryTestIndicator,
                                           @ExternalTestIndicator,
                                           @PerformedByOrganizationID,
                                           @ReceivedDate,
                                           @ContactPersonName,
                                           NULL,
                                           NULL,
                                           NULL,
                                           @TestDiseaseReportID,
                                           @AuditUserName,
                                           @DataAuditEventID,
                                           @EIDSSReportID,
                                           @RowAction;

            UPDATE @LaboratoryTestInterpretationsTemp
            SET TestID = @TestID
            WHERE TestID = @RowID;

            DELETE FROM @LaboratoryTestsTemp
            WHERE TestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @LaboratoryTestInterpretationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestInterpretationID,
                @TestInterpretationID = TestInterpretationID,
                @DiseaseID = DiseaseID,
                @InterpretedStatusTypeID = InterpretedStatusTypeID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @InterpretedByOrganizationID = InterpretedByOrganizationID,
                @InterpretedByPersonID = InterpretedByPersonID,
                @TestID = TestID,
                @ValidatedStatusIndicator = ValidatedStatusIndicator,
                @ReportSessionCreatedIndicator = ReportSessionCreatedIndicator,
                @ValidatedComment = ValidatedComment,
                @InterpretedComment = InterpretedComment,
                @ValidatedDate = ValidatedDate,
                @InterpretedDate = InterpretedDate,
                @RowStatus = RowStatus,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @RowAction = RowAction
            FROM @LaboratoryTestInterpretationsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TEST_INTERPRETATIONS_SET @AuditUserName,
                                                          @DataAuditEventID,
                                                          @EIDSSReportID, 
                                                          @TestInterpretationID OUTPUT,
                                                          @DiseaseID,
                                                          @InterpretedStatusTypeID,
                                                          @ValidatedByOrganizationID,
                                                          @ValidatedByPersonID,
                                                          @InterpretedByOrganizationID,
                                                          @InterpretedByPersonID,
                                                          @TestID,
                                                          @ValidatedStatusIndicator,
                                                          @ReportSessionCreatedIndicator,
                                                          @ValidatedComment,
                                                          @InterpretedComment,
                                                          @ValidatedDate,
                                                          @InterpretedDate,
                                                          @RowStatus,
                                                          @ReadOnlyIndicator,
                                                          @RowAction;

            IF @ReportSessionCreatedIndicator = 1 AND @RowAction = 1
            BEGIN
                SET @ConnectedDiseaseReportLaboratoryTestID = @TestID;
            END

            DELETE FROM @LaboratoryTestInterpretationsTemp
            WHERE TestInterpretationID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @CaseLogsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = CaseLogID,
                @CaseLogID = CaseLogID,
                @LogStatusTypeID = LogStatusTypeID,
                @LoggedByPersonID = LoggedByPersonID,
                @LogDate = LogDate,
                @ActionRequired = ActionRequired,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @CaseLogsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_DISEASE_REPORT_LOG_SET @AuditUserName,
                                                        @DataAuditEventID,
                                                        @EIDSSReportID,
                                                        @CaseLogID,
                                                        @LogStatusTypeID,
                                                        @DiseaseReportID,
                                                        @LoggedByPersonID,
                                                        @LogDate,
                                                        @ActionRequired,
                                                        @Comments,
                                                        @RowStatus,
                                                        @RowAction;

            DELETE FROM @CaseLogsTemp
            WHERE CaseLogID = @RowID;
        END;

        IF @CaseMonitorings IS NOT NULL
        BEGIN
            EXEC dbo.USSP_OMM_CASE_MONITORING_SET @CaseMonitorings = @CaseMonitorings,
                                                  @VeterinaryDiseaseReportID = @DiseaseReportID,
                                                  @User = @AuditUserName;
        END

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventNote = Note,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_ADMIN_EVENT_SET @EventId,
                                             @EventTypeId,
                                             @EventUserId,
                                             @EventObjectId,
                                             @EventDiseaseId,
                                             @EventSiteId,
                                             @EventInformationString,
                                             @EventLoginSiteId,
                                             @EventLocationId,
                                             @AuditUserName,
                                             @DataAuditEventID,
                                             @EIDSSReportID;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        IF @@TRANCOUNT > 0
            COMMIT TRANSACTION;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @DiseaseReportID DiseaseReportID,
               @EIDSSReportID EIDSSReportID,
               @OutbreakCaseReportUID CaseID,
               @EIDSSCaseID EIDSSCaseID, 
               @ConnectedDiseaseReportLaboratoryTestID ConnectedDiseaseReportLaboratoryTestID;
    END TRY
    BEGIN CATCH
        IF @@Trancount > 0
            ROLLBACK TRANSACTION;

        THROW;
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[USP_ADMIN_SITE_ACTOR_GETList]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_SITE_ACTOR_GETList
--
-- Description:	Get actor list for a specific site.  Used in permissions for site 
-- filtration of the administration module - SAUC29.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     12/20/2022 Initial release.
-- ================================================================================================
CREATE PROCEDURE [dbo].[USP_ADMIN_SITE_ACTOR_GETList]
(
    @LanguageID NVARCHAR(50),
    @PageNumber INT = 1,
    @PageSize INT = 10,
    @SortColumn NVARCHAR(30) = 'ActorName',
    @SortOrder NVARCHAR(4) = 'ASC',
    @SiteID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @FirstRecord INT,
                @LastRecord INT,
                @TotalRowCount INT = 0;
        DECLARE @Results TABLE
        (
            ActorID BIGINT NOT NULL,
            ActorTypeID BIGINT NOT NULL,
            ActorTypeName VARCHAR(MAX) NOT NULL,
            ActorName NVARCHAR(MAX) NULL,
            ExternalActorIndicator BIT NOT NULL
        );

        -- External employee group actors
        INSERT INTO @Results
        SELECT oa.idfActor,
               10023001,
               actorType.name,
               employeeGroupName.name,
               1
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroup eg
                ON eg.idfEmployeeGroup = oa.idfsObjectID
                   AND eg.intRowStatus = 0
            INNER JOIN dbo.tlbEmployee e
                ON eg.idfEmployeeGroup = e.idfEmployee
                   AND e.intRowStatus = 0
            INNER JOIN FN_GBL_ReferenceRepair(@LanguageID, 19000022) employeeGroupName
                ON employeeGroupName.idfsReference = eg.idfsEmployeeGroupName
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000023) actorType
                ON e.idfsEmployeeType = actorType.idfsReference
        WHERE oa.intRowStatus = 0
              AND eg.idfsSite <> @SiteID
              AND oa.idfsOnSite = @SiteID;

        -- External employee actors
        INSERT INTO @Results
        SELECT oa.idfActor,
               10023002,
               actorType.name,
               dbo.FN_GBL_ConcatFullName(p.strFamilyName, p.strFirstName, p.strSecondName),
               1 AS ExternalActorIndicator
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployee e
                ON e.idfEmployee = oa.idfActor
                   AND e.intRowStatus = 0
            INNER JOIN dbo.tlbPerson p
                ON p.idfPerson = e.idfEmployee
                   AND p.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000023) actorType
                ON e.idfsEmployeeType = actorType.idfsReference
        WHERE oa.intRowStatus = 0
              AND e.idfsSite <> @SiteID
              AND oa.idfsOnSite = @SiteID;

        -- Internal employee group actors
        INSERT INTO @Results
        SELECT eg.idfEmployeeGroup,
               10023001,
               actorType.name,
               employeeGroupName.name,
               0
        FROM dbo.tlbEmployeeGroup eg
            INNER JOIN dbo.tlbEmployee e
                ON eg.idfEmployeeGroup = e.idfEmployee
                   AND e.intRowStatus = 0
            INNER JOIN FN_GBL_ReferenceRepair(@LanguageID, 19000022) employeeGroupName
                ON employeeGroupName.idfsReference = eg.idfsEmployeeGroupName
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000023) actorType
                ON e.idfsEmployeeType = actorType.idfsReference
        WHERE eg.intRowStatus = 0
              AND eg.idfsSite = @SiteID;

        -- Internal employee actors
        INSERT INTO @Results
        SELECT e.idfEmployee,
               10023002,
               actorType.name,
               dbo.FN_GBL_ConcatFullName(p.strFamilyName, p.strFirstName, p.strSecondName),
               0
        FROM dbo.tlbEmployee e
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = e.idfEmployee
                   AND u.intRowStatus = 0
            INNER JOIN dbo.tlbPerson p
                ON p.idfPerson = u.idfPerson
                   AND p.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000023) actorType
                ON e.idfsEmployeeType = actorType.idfsReference
        WHERE e.intRowStatus = 0
              AND e.idfsSite = @SiteID;

        SET @FirstRecord = (@PageNumber - 1) * @PageSize;
        SET @LastRecord = (@PageNumber * @PageSize + 1);
        SET @TotalRowCount =
        (
            SELECT COUNT(*) FROM @Results
        );

        SELECT ActorID,
               ActorTypeID,
               ActorTypeName,
               ActorName,
               ExternalActorIndicator,
               RowAction,
               [RowCount],
               TotalRowCount,
               CurrentPage,
               TotalPages
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'ActorName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ActorName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ActorName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ActorName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ActorTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ActorTypeName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ActorTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ActorTypeName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ExternalActorIndicator'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ExternalActorIndicator
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ExternalActorIndicator'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ExternalActorIndicator
                                               END DESC
                                     ) AS RowNum,
                   ActorID,
                   ActorTypeID,
                   ActorTypeName,
                   ActorName,
                   ExternalActorIndicator,
                   0 AS RowAction,
                   COUNT(*) OVER () AS [RowCount],
                   @TotalRowCount AS TotalRowCount,
                   CurrentPage = @PageNumber,
                   TotalPages = (@TotalRowCount / @PageSize) + IIF(COUNT(*) % @PageSize > 0, 1, 0)
            FROM @Results
            GROUP BY ActorID,
                     ActorTypeID,
                     ActorTypeName,
                     ActorName,
                     ExternalActorIndicator
        ) AS x
        WHERE RowNum > @FirstRecord
              AND RowNum < @LastRecord
        ORDER BY RowNum;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Creating Procedure [dbo].[USSP_ADMIN_OBJECT_ACCESS_SET]...';


GO
-- ================================================================================================
-- Name: USSP_ADMIN_OBJECT_ACCESS_SET
--
-- Description:	Inserts or updates object access records for use case SAUC29.
--                      
-- Revision History:
-- Name            Date       Change Detail
-- --------------- ---------- -------------------------------------------------------------------
-- Stephen Long    12/21/2022	 Initial release.
-- ================================================================================================
CREATE PROCEDURE [dbo].[USSP_ADMIN_OBJECT_ACCESS_SET]
(
    @ObjectAccessID BIGINT = NULL,
    @ObjectOperationTypeID BIGINT = NULL,
    @ObjectTypeID BIGINT = NULL,
    @ObjectID BIGINT = NULL,
    @ActorID BIGINT = NULL,
    @SiteID BIGINT = NULL,
    @PermissionTypeID INT = NULL,
    @RowStatus INT = NULL,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT = 0;
        DECLARE @ReturnMessage VARCHAR(MAX) = 'SUCCESS';

        IF NOT EXISTS
        (
            SELECT *
            FROM dbo.tstObjectAccess
            WHERE idfObjectAccess = @ObjectAccessID
                  AND intRowStatus = 0
        )
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tstObjectAccess',
                                              @ObjectAccessID OUTPUT;

            INSERT INTO dbo.tstObjectAccess
            (
                idfObjectAccess,
                idfsObjectOperation,
                idfsObjectType,
                idfsObjectID,
                idfActor,
                idfsOnSite,
                intPermission,
                intRowStatus
            )
            VALUES
            (@ObjectAccessID,
             @ObjectOperationTypeID,
             @ObjectTypeID,
             @ObjectID,
             @ActorID,
             @SiteID,
             @PermissionTypeID,
             @RowStatus
            );
        END
        ELSE
        BEGIN
            UPDATE dbo.tstObjectAccess
            SET idfsObjectOperation = @ObjectOperationTypeID,
                idfsObjectType = @ObjectTypeID,
                idfsObjectID = @ObjectID,
                idfActor = @ActorID,
                idfsOnSite = @SiteID,
                intPermission = @PermissionTypeID,
                intRowStatus = @RowStatus
            WHERE idfObjectAccess = @ObjectAccessID;
        END

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage;
    END TRY
    BEGIN CATCH
        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET]...';


GO



-- ================================================================================================
-- Name: USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET
--
-- Description:	Deduplication for Livestock and Avian disease report record.
-- 
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mark Wilson		17May2022	Initial release
-- Mark Wilson		19May2022	Added Testing, Penside Tests, Interpretations and CaseLogs
-- Ann Xiong		7/26/2022	Replaced "@Notifications = @Notifications" with "@Events = @Notifications" to fix the error "@Notifications is not a parameter for procedure USP_VET_DISEASE_REPORT_SET."
-- Ann Xiong		12/21/2022	Modified to pass parameter '@AuditUserName' when call USP_VET_DISEASE_REPORT_DEL
--
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET]
(
	@SurvivorVeterinaryDiseaseReportID BIGINT,
	@SupersededVeterinaryDiseaseReportID BIGINT,
	@EIDSSReportID NVARCHAR(200) = NULL,
	@FarmID BIGINT,
	@FarmMasterID BIGINT,
	@FarmOwnerID BIGINT = NULL,
	@MonitoringSessionID BIGINT = NULL,
	@OutbreakID BIGINT = NULL,
	@RelatedToDiseaseReportID BIGINT = NULL,
	@EIDSSFieldAccessionID NVARCHAR(200) = NULL,
	@DiseaseID BIGINT,
	@EnteredByPersonID BIGINT = NULL,
	@ReportedByOrganizationID BIGINT = NULL,
	@ReportedByPersonID BIGINT = NULL,
	@InvestigatedByOrganizationID BIGINT = NULL,
	@InvestigatedByPersonID BIGINT = NULL,
	@ReceivedByOrganizationID BIGINT = NULL,
	@ReceivedByPersonID BIGINT = NULL,
	@SiteID BIGINT,
	@DiagnosisDate DATETIME = NULL,
	@EnteredDate DATETIME = NULL,
	@ReportDate DATETIME = NULL,
	@AssignedDate DATETIME = NULL,
	@InvestigationDate DATETIME = NULL,
	@RowStatus INT,
	@ReportTypeID BIGINT = NULL,
	@ClassificationTypeID BIGINT = NULL,
	@StatusTypeID BIGINT = NULL,
	@ReportCategoryTypeID BIGINT,
	@FarmTotalAnimalQuantity INT = NULL,
	@FarmSickAnimalQuantity INT = NULL,
	@FarmDeadAnimalQuantity INT = NULL,
	@FarmLatitude FLOAT = NULL,
	@FarmLongitude FLOAT = NULL,
	@FarmEpidemiologicalObservationID BIGINT = NULL,
	@ControlMeasuresObservationID BIGINT = NULL,
	@TestsConductedIndicator BIGINT = NULL,
	@AuditUserName NVARCHAR(200),
	@FlocksOrHerds NVARCHAR(MAX) = NULL,
	@Species NVARCHAR(MAX) = NULL,
	@Animals NVARCHAR(MAX) = NULL,
	@Vaccinations NVARCHAR(MAX) = NULL,
	@Samples NVARCHAR(MAX) = NULL,
	@PensideTests NVARCHAR(MAX) = NULL,
	@LaboratoryTests NVARCHAR(MAX) = NULL,
	@LaboratoryTestInterpretations NVARCHAR(MAX) = NULL,
	@CaseLogs NVARCHAR(MAX) = NULL,
	@ClinicalInformation NVARCHAR(MAX) = NULL,
	@Contacts NVARCHAR(MAX) = NULL,
	@CaseMonitorings NVARCHAR(MAX) = NULL,
	@Notifications NVARCHAR(MAX) = NULL,
	@UserID BIGINT,
	@LinkLocalOrFieldSampleIDToReportID BIT = 0,
	@OutbreakCaseIndicator BIT = 0,
	@OutbreakCaseReportUID BIGINT = NULL,
	@OutbreakCaseStatusTypeID BIGINT = NULL,
	@OutbreakCaseQuestionnaireObservationID BIGINT = NULL,
	@PrimaryCaseIndicator BIT = 0
)
AS
BEGIN

	BEGIN TRY
		BEGIN TRANSACTION;

		DECLARE @ReturnCode INT = 0;
		DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';

        DECLARE @FlocksOrHerdsTemp TABLE
        (
            FlockOrHerdID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            FlockOrHerdMasterID BIGINT NULL,
            EIDSSFlockOrHerdID NVARCHAR(200) NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            RowStatus INT NULL,
            RowAction INT NULL
        );
        
		DECLARE @SpeciesTemp TABLE
        (
            SpeciesID BIGINT NOT NULL,
            SpeciesMasterID BIGINT NULL,
            FlockOrHerdID BIGINT NOT NULL,
            SpeciesTypeID BIGINT NOT NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            StartOfSignsDate DATETIME NULL,
            AverageAge NVARCHAR(200) NULL,
            ObservationID BIGINT NULL,
            Comments NVARCHAR(2000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToSpeciesID BIGINT NULL,
            RelatedToObservationID BIGINT NULL
        );
        DECLARE @AnimalsTemp TABLE
        (
            AnimalID BIGINT NOT NULL,
            SexTypeID BIGINT NULL,
            ConditionTypeID BIGINT NULL,
            AgeTypeID BIGINT NULL,
            SpeciesID BIGINT NULL,
            ObservationID BIGINT NULL,
            EIDSSAnimalID NVARCHAR(200) NULL,
            AnimalName NVARCHAR(200) NULL,
            Color NVARCHAR(200) NULL,
            AnimalDescription NVARCHAR(200) NULL,
            ClinicalSignsIndicator BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToAnimalID BIGINT NULL,
            RelatedToObservationID BIGINT NULL
        );
        
		DECLARE @VaccinationsTemp TABLE
        (
            VaccinationID BIGINT NOT NULL,
            SpeciesID BIGINT NULL,
            VaccinationTypeID BIGINT NULL,
            RouteTypeID BIGINT NULL,
            DiseaseID BIGINT NULL,
            VaccinationDate DATETIME NULL,
            Manufacturer NVARCHAR(200) NULL,
            LotNumber NVARCHAR(200) NULL,
            NumberVaccinated INT NULL,
            Comments NVARCHAR(2000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
		
		DECLARE @SamplesTemp TABLE
        (
            SampleID BIGINT NOT NULL,
            SampleTypeID BIGINT NULL,
            RootSampleID BIGINT NULL,
            ParentSampleID BIGINT NULL,
            SpeciesID BIGINT NULL,
            AnimalID BIGINT NULL,
            VeterinaryDiseaseReportID BIGINT NULL,
            MonitoringSessionID BIGINT NULL,
            SampleStatusTypeID BIGINT NULL,
            CollectionDate DATETIME NULL,
            CollectedByOrganizationID BIGINT NULL,
            CollectedByPersonID BIGINT NULL,
            SentDate DATETIME NULL,
            SentToOrganizationID BIGINT NULL,
            EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
            Comments NVARCHAR(200) NULL,
            SiteID BIGINT NOT NULL,
            CurrentSiteID BIGINT NULL,
            EnteredDate DATETIME NULL,
            DiseaseID BIGINT NULL,
            BirdStatusTypeID BIGINT NULL,
            ReadOnlyIndicator BIT NULL,
            LabModuleSourceIndicator INT NOT NULL,
            FarmID BIGINT NULL,
            FarmOwnerID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );

        DECLARE @PensideTestsTemp TABLE
        (
            PensideTestID BIGINT NOT NULL,
            SampleID BIGINT NOT NULL,
            PensideTestNameTypeID BIGINT NULL,
            PensideTestResultTypeID BIGINT NULL,
            PensideTestCategoryTypeID BIGINT NULL,
            TestedByPersonID BIGINT NULL,
            TestedByOrganizationID BIGINT NULL,
            DiseaseID BIGINT NULL,
            TestDate DATETIME NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
       DECLARE @LaboratoryTestsTemp TABLE
        (
            TestID BIGINT NOT NULL,
            TestNameTypeID BIGINT NULL,
            TestCategoryTypeID BIGINT NULL,
            TestResultTypeID BIGINT NULL,
            TestStatusTypeID BIGINT NOT NULL,
            DiseaseID BIGINT NOT NULL,
            SampleID BIGINT NULL,
            BatchTestID BIGINT NULL,
            ObservationID BIGINT NULL,
            TestNumber INT NULL,
            Comments NVARCHAR NULL,
            StartedDate DATETIME NULL,
            ResultDate DATETIME NULL,
            TestedByOrganizationID BIGINT NULL,
            TestedByPersonID BIGINT NULL,
            ResultEnteredByOrganizationID BIGINT NULL,
            ResultEnteredByPersonID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            ReadOnlyIndicator BIT NOT NULL,
            NonLaboratoryTestIndicator BIT NOT NULL,
            ExternalTestIndicator BIT NULL,
            PerformedByOrganizationID BIGINT NULL,
            ReceivedDate DATETIME NULL,
            ContactPersonName NVARCHAR(200) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @LaboratoryTestInterpretationsTemp TABLE
        (
            TestInterpretationID BIGINT NOT NULL,
            DiseaseID BIGINT NULL,
            InterpretedStatusTypeID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            InterpretedByOrganizationID BIGINT NULL,
            InterpretedByPersonID BIGINT NULL,
            TestID BIGINT NOT NULL,
            ValidatedStatusIndicator BIT NULL,
            ReportSessionCreatedIndicator BIT NULL,
            ValidatedComment NVARCHAR(200) NULL,
            InterpretedComment NVARCHAR(200) NULL,
            ValidatedDate DATETIME NULL,
            InterpretedDate DATETIME NULL,
            ReadOnlyIndicator BIT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @CaseLogsTemp TABLE
        (
            CaseLogID BIGINT NOT NULL,
            LogStatusTypeID BIGINT NULL,
            LoggedByPersonID BIGINT NULL,
            LogDate DATETIME NULL,
            ActionRequired NVARCHAR(200) NULL,
            Comments NVARCHAR(1000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @ClinicalInformationTemp TABLE
        (
            langId NVARCHAR(200) NULL,
            HerdID BIGINT NOT NULL,
            Herd NVARCHAR(200) NULL,
            ClinicalSignsIndicator BIGINT NOT NULL,
            SpeciesTypeID BIGINT NULL,
            SpeciesTypeName NVARCHAR(200) NULL,
            StatusTypeID BIGINT NULL,
            InvestigationPerformedTypeID BIGINT NULL
        );
        DECLARE @ActivityParametersTemp TABLE
        (
            ActivityID BIGINT NOT NULL,
            ParameterID BIGINT NOT NULL,
            ParameterValue SQL_VARIANT NULL,
            ParameterRowID BIGINT NOT NULL
        );
        DECLARE @NotificationsTemp TABLE
        (
            NotificationID BIGINT NOT NULL,
            NotificationTypeID BIGINT NULL,
            UserID BIGINT NULL,
            NotificationObjectID BIGINT NULL,
            NotificationObjectTypeID BIGINT NULL,
            TargetUserID BIGINT NULL,
            TargetSiteID BIGINT NULL,
            TargetSiteTypeID BIGINT NULL,
            SiteID BIGINT NULL,
            Payload NVARCHAR(MAX) NULL,
            LoginSite NVARCHAR(20) NULL
        );

        INSERT INTO @FlocksOrHerdsTemp
        SELECT *
        FROM
            OPENJSON(@FlocksOrHerds)
            WITH
            (
                FlockOrHerdID BIGINT,
                FarmID BIGINT,
                FlockOrHerdMasterID BIGINT,
                EIDSSFlockOrHerdID NVARCHAR(200),
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @SpeciesTemp
        SELECT *
        FROM
            OPENJSON(@Species)
            WITH
            (
                SpeciesID BIGINT,
                SpeciesMasterID BIGINT,
                FlockOrHerdID BIGINT,
                SpeciesTypeID BIGINT,
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                StartOfSignsDate DATETIME,
                AverageAge NVARCHAR(200),
                ObservationID BIGINT,
                Comments NVARCHAR(2000),
                RowStatus INT,
                RowAction INT,
                RelatedToSpeciesID BIGINT,
                RelatedToObservationID BIGINT
            );

        INSERT INTO @AnimalsTemp
        SELECT *
        FROM
            OPENJSON(@Animals)
            WITH
            (
                AnimalID BIGINT,
                SexTypeID BIGINT,
                ConditionTypeID BIGINT,
                AgeTypeID BIGINT,
                SpeciesID BIGINT,
                ObservationID BIGINT,
                EIDSSAnimalID NVARCHAR(200),
                AnimalName NVARCHAR(200),
                Color NVARCHAR(200),
                AnimalDescription NVARCHAR(200),
                ClinicalSignsIndicator BIGINT,
                RowStatus INT,
                RowAction INT,
                RelatedToAnimalID BIGINT,
                RelatedToObservationID BIGINT
            );

        INSERT INTO @VaccinationsTemp
        SELECT *
        FROM
            OPENJSON(@Vaccinations)
            WITH
            (
                VaccinationID BIGINT,
                SpeciesID BIGINT,
                VaccinationTypeID BIGINT,
                RouteTypeID BIGINT,
                DiseaseID BIGINT,
                VaccinationDate DATETIME2,
                Manufacturer NVARCHAR(200),
                LotNumber NVARCHAR(200),
                NumberVaccinated INT,
                Comments NVARCHAR(2000),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@Samples)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                RootSampleID BIGINT,
                ParentSampleID BIGINT,
                SpeciesID BIGINT,
                AnimalID BIGINT,
                VeterinaryDiseaseReportID BIGINT,
                MonitoringSessionID BIGINT,
                SampleStatusTypeID BIGINT,
                CollectionDate DATETIME2,
                CollectedByOrganizationID BIGINT,
                CollectedByPersonID BIGINT,
                SentDate DATETIME2,
                SentToOrganizationID BIGINT,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                Comments NVARCHAR(200),
                SiteID BIGINT,
                CurrentSiteID BIGINT,
                EnteredDate DATETIME2,
                DiseaseID BIGINT,
                BirdStatusTypeID BIGINT,
                ReadOnlyIndicator BIT,
                LabModuleSourceIndicator INT,
                FarmID BIGINT,
                FarmOwnerID BIGINT,
                RowStatus INT,
                RowAction INT
            );


        INSERT INTO @PensideTestsTemp
        SELECT *
        FROM
            OPENJSON(@PensideTests)
            WITH
            (
                PensideTestID BIGINT,
                SampleID BIGINT,
                PensideTestNameTypeID BIGINT,
                PensideTestResultTypeID BIGINT,
                PensideTestCategoryTypeID BIGINT,
                TestedByPersonID BIGINT,
                TestedByOrganizationID BIGINT,
                DiseaseID BIGINT,
                TestDate DATETIME2,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @LaboratoryTestsTemp
        SELECT *
        FROM
            OPENJSON(@LaboratoryTests)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Comments NVARCHAR(500),
                StartedDate DATETIME2,
                ResultDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @LaboratoryTestInterpretationsTemp
        SELECT *
        FROM
            OPENJSON(@LaboratoryTestInterpretations)
            WITH
            (
                TestInterpretationID BIGINT,
                DiseaseID BIGINT,
                InterpretedStatusTypeID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                InterpretedByOrganizationID BIGINT,
                InterpretedByPersonID BIGINT,
                TestID BIGINT,
                ValidatedStatusIndicator BIT,
                ReportSessionCreatedIndicator BIT,
                ValidatedComment NVARCHAR(200),
                InterpretedComment NVARCHAR(200),
                ValidatedDate DATETIME2,
                InterpretedDate DATETIME2,
                ReadOnlyIndicator BIT,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @CaseLogsTemp
        SELECT *
        FROM
            OPENJSON(@CaseLogs)
            WITH
            (
                CaseLogID BIGINT,
                LogStatusTypeID BIGINT,
                LoggedByPersonID BIGINT,
                LogDate DATETIME2,
                ActionRequired NVARCHAR(200),
                Comments NVARCHAR(1000),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @ClinicalInformationTemp
        SELECT *
        FROM
            OPENJSON(@ClinicalInformation)
            WITH
            (
                langId NVARCHAR(200),
                HerdID BIGINT,
                Herd NVARCHAR(200),
                ClinicalSignsTypeID BIGINT,
                SpeciesTypeID BIGINT,
                SpeciesTypeName NVARCHAR(200),
                StatusTypeID BIGINT,
                InvestigationPerformedTypeID BIGINT
            );

        INSERT INTO @NotificationsTemp
        SELECT *
        FROM
            OPENJSON(@Notifications)
            WITH
            (
                NotificationID BIGINT,
                NotificationTypeID BIGINT,
                UserID BIGINT,
                NotificationObjectID BIGINT,
                NotificationObjectTypeID BIGINT,
                TargetUserID BIGINT,
                TargetSiteID BIGINT,
                TargetSiteTypeID BIGINT,
                SiteID BIGINT,
                Payload NVARCHAR(MAX),
                LoginSite BIGINT
            );

----------------------------------------------------------------------------------------------------------------
-- SET the Survivor Disease Report
		EXEC dbo.USP_VET_DISEASE_REPORT_SET 
			@DiseaseReportID = @SurvivorVeterinaryDiseaseReportID,
		    @EIDSSReportID = @EIDSSReportID,
		    @FarmID = @FarmID,
		    @FarmMasterID = @FarmMasterID,
		    @FarmOwnerID = @FarmOwnerID,
		    @MonitoringSessionID = @MonitoringSessionID,
		    @OutbreakID = @OutbreakID,
		    @RelatedToDiseaseReportID = @RelatedToDiseaseReportID,
		    @EIDSSFieldAccessionID = @EIDSSFieldAccessionID,
		    @DiseaseID = @DiseaseID,
		    @EnteredByPersonID = @EnteredByPersonID,
		    @ReportedByOrganizationID = @ReportedByOrganizationID,
		    @ReportedByPersonID = @ReportedByPersonID,
		    @InvestigatedByOrganizationID = @InvestigatedByOrganizationID,
		    @InvestigatedByPersonID = @InvestigatedByPersonID,
		    @ReceivedByOrganizationID = @ReceivedByOrganizationID,
		    @ReceivedByPersonID = @ReceivedByPersonID,
		    @SiteID = @SiteID,
		    @DiagnosisDate = @DiagnosisDate,
		    @EnteredDate = @EnteredDate,
		    @ReportDate = @ReportDate,
		    @AssignedDate = @AssignedDate,
		    @InvestigationDate = @InvestigationDate,
		    @RowStatus = @RowStatus,
		    @ReportTypeID = @ReportTypeID,
		    @ClassificationTypeID = @ClassificationTypeID,
		    @StatusTypeID = @StatusTypeID,
		    @ReportCategoryTypeID = @ReportCategoryTypeID,
		    @FarmTotalAnimalQuantity = @FarmTotalAnimalQuantity,
		    @FarmSickAnimalQuantity = @FarmSickAnimalQuantity,
		    @FarmDeadAnimalQuantity = @FarmDeadAnimalQuantity,
		    @FarmLatitude = @FarmLatitude,
		    @FarmLongitude = @FarmLongitude,
		    @FarmEpidemiologicalObservationID = @FarmEpidemiologicalObservationID,
		    @ControlMeasuresObservationID = @ControlMeasuresObservationID,
		    @TestsConductedIndicator = @TestsConductedIndicator,
		    @AuditUserName = @AuditUserName,
		    @FlocksOrHerds = @FlocksOrHerds,
		    @Species = @Species,
		    @Animals = @Animals,
		    @Vaccinations = @Vaccinations,
		    @Samples = @Samples,
		    @PensideTests = @PensideTests,
		    @LaboratoryTests = @LaboratoryTests,
		    @LaboratoryTestInterpretations = @LaboratoryTestInterpretations,
		    @CaseLogs = @CaseLogs,
		    @ClinicalInformation = @ClinicalInformation,
		    @Contacts = @Contacts,
		    @CaseMonitorings = @CaseMonitorings,
		    @Events = @Notifications,
		    @UserID = @UserID,
		    @LinkLocalOrFieldSampleIDToReportID = @LinkLocalOrFieldSampleIDToReportID,
		    @OutbreakCaseIndicator = @OutbreakCaseIndicator,
		    @OutbreakCaseReportUID = @OutbreakCaseReportUID,
		    @OutbreakCaseStatusTypeID = @OutbreakCaseStatusTypeID,
		    @OutbreakCaseQuestionnaireObservationID = @OutbreakCaseQuestionnaireObservationID,
		    @PrimaryCaseIndicator = @PrimaryCaseIndicator

----------------------------------------------------------------------------------------------------------------
-- delete the Superseded disease report
		EXEC dbo.USP_VET_DISEASE_REPORT_DEL
			@DiseaseReportID = @SupersededVeterinaryDiseaseReportID,
			@DeduplicationIndicator = 1 -- deduplication
			,@AuditUserName = @AuditUserName

	
----------------------------------------------------------------------------------------------------------------
-- Superseded disease report samples that go with survivor disease report
		UPDATE dbo.tlbMaterial
		SET idfVetCase = @SurvivorVeterinaryDiseaseReportID
		WHERE idfVetCase = @SupersededVeterinaryDiseaseReportID
		AND idfMaterial IN (SELECT SampleID FROM @SamplesTemp)

----------------------------------------------------------------------------------------------------------------
-- remove tests associated with samples that aren't associated with survivor disease report
		UPDATE dbo.tlbTesting
		SET intRowStatus = 1
		WHERE idfMaterial IN (SELECT 
								idfMaterial 
							  FROM dbo.tlbMaterial 
							  WHERE (idfVetCase = @SurvivorVeterinaryDiseaseReportID OR idfVetCase = @SupersededVeterinaryDiseaseReportID) 
							  AND idfMaterial NOT IN (SELECT SampleID FROM @SamplesTemp))

----------------------------------------------------------------------------------------------------------------
-- remove test interpretations associated with samples that aren't associated with survivor disease report
		UPDATE dbo.tlbTestValidation
		SET intRowStatus = 1
		WHERE idfTesting IN (SELECT 
								idfTesting 
							 FROM dbo.tlbTesting 
							 WHERE idfMaterial IN
							 (SELECT idfMaterial
							  FROM dbo.tlbMaterial 
							  WHERE (idfVetCase = @SurvivorVeterinaryDiseaseReportID OR idfVetCase = @SupersededVeterinaryDiseaseReportID) 
							  AND idfMaterial NOT IN (SELECT SampleID FROM @SamplesTemp)))

----------------------------------------------------------------------------------------------------------------
-- remove case Logs not associated with survivor disease report
		UPDATE dbo.tlbVetCaseLog
		SET intRowStatus = 1
		WHERE idfVetCase = @SupersededVeterinaryDiseaseReportID

----------------------------------------------------------------------------------------------------------------
-- remove penside tests associated with samples that aren't associated with survivor disease report
		UPDATE dbo.tlbPensideTest
		SET intRowStatus = 1
		WHERE idfMaterial IN (SELECT 
								idfMaterial 
							  FROM dbo.tlbMaterial 
							  WHERE (idfVetCase = @SurvivorVeterinaryDiseaseReportID OR idfVetCase = @SupersededVeterinaryDiseaseReportID) 
							  AND idfMaterial NOT IN (SELECT SampleID FROM @SamplesTemp))

-- disease report samples that are no longer needed
		UPDATE dbo.tlbMaterial
		SET idfVetCase = NULL
		WHERE (idfVetCase = @SupersededVeterinaryDiseaseReportID OR idfVetCase = @SurvivorVeterinaryDiseaseReportID)
		AND idfMaterial NOT IN (SELECT SampleID FROM @SamplesTemp)		

----------------------------------------------------------------------------------------------------------------
-- Superseded disease report vaccinations that go with survivor disease report
		UPDATE dbo.tlbVaccination
		SET idfVetCase = @SurvivorVeterinaryDiseaseReportID
		WHERE idfVetCase = @SupersededVeterinaryDiseaseReportID
		AND idfVaccination IN (SELECT VaccinationID FROM @VaccinationsTemp)

-- disease report vaccinations that are no longer needed
		UPDATE dbo.tlbVaccination
		SET idfVetCase = NULL
		WHERE (idfVetCase = @SupersededVeterinaryDiseaseReportID OR idfVetCase = @SurvivorVeterinaryDiseaseReportID)
		AND idfVaccination NOT IN (SELECT VaccinationID FROM @VaccinationsTemp)		
		 			 		
		IF @@TRANCOUNT > 0
			COMMIT TRANSACTION;

		SELECT @ReturnCode ReturnCode,
			@ReturnMessage ReturnMessage

	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;
		THROW;
	END CATCH
END
GO
PRINT N'Refreshing Procedure [dbo].[USSP_OMM_CONVERT_CONTACT_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_OMM_CONVERT_CONTACT_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_Contact_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_Contact_Set]';


GO
PRINT N'Update complete.';


GO
