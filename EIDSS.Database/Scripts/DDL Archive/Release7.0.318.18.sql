/*
Deployment script for EIDSS7_GG

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO

USE [$(DatabaseName)];


GO

PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_ActivityParameters_SET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_ActivityParameters_SET
--
-- Description: Set the answers for a flex form AS an activity for that parameter
--          
-- Revision History:
-- Name             Date       Change
-- ---------------- ---------- --------------------------------------------------------------------
-- Doug Albanese	05/06/2020 Alteration to force supression in a different manner, AS a function
-- Doug Albanese	08/05/2021 Refactored to make a batch save, and to generate the observation, 
--                             if one doesn't exist
-- Doug Albanese	08/06/2021 Refactored again to work against a user defined table
-- Doug Albanese	08/06/2021 Can't use data tables with EF, so we will use a JSON object, 
--                             deciphered by OPENJSONL
-- Doug Albanese	08/11/2021 Removed a left-over debug statement.
-- Mark Wilson		09/30/2021 Added @User param, updated inserts and updates to include all columns
-- Doug Albanese	11/01/2021 Corrected a "Saving" issue with blank answers
-- Doug Albanese	08/19/2022 Corrected to give SQL Variant fields, a data type
-- Doug Albanese	08/23/2022 Changes to create variant declarations, before updating or 
--                             inserting
-- Stephen Long     11/29/2022 Added data audit logic for SAUC30 and 31.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_ActivityParameters_SET]
(
    @idfObservation BIGINT = NULL,
    @idfsFormTemplate BIGINT,
    @answers NVARCHAR(MAX),
    @User NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @ReturnCode BIGINT = 0,
            @ReturnMessage NVARCHAR(MAX) = 'Success',
                                                                   -- added for case compares
            @TextBox BIGINT = 10067008,
            @TextBoxTotal BIGINT = 10067010,
            @TextBoxSum BIGINT = 10067011,
            @MemoBox BIGINT = 10067006,
            @DateControl BIGINT = 10067003,
            @DateTimeControl BIGINT = 10067004,
            @UpDown BIGINT = 10067009,
            @ComboBox BIGINT = 10067002,
            @RadioButton BIGINT = 217210000000,
            @CheckBoxDeclare BIGINT = 10067001,
            @AuditUserID BIGINT = NULL,
            @AuditSiteID BIGINT = NULL,
            @DataAuditEventID BIGINT = NULL,
            @DataAuditEventTypeID BIGINT = NULL,
            @ObjectID BIGINT = NULL,
            @ObjectObservationTableID BIGINT = 75640000000,        -- tlbObservation
            @ObjectActivityParametersTableID BIGINT = 75410000000; -- tlbActivityParameters
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage VARCHAR(MAX)
    );
    DECLARE @ActivityParametersBeforeEdit TABLE
    (
        ActivityParametersID BIGINT,
        ParameterID BIGINT,
        ObservationID BIGINT,
        RowID BIGINT NULL,
        AnswerValue SQL_VARIANT NULL,
        RowStatus INT
    );
    DECLARE @ActivityParametersAfterEdit TABLE
    (
        ActivityParametersID BIGINT,
        ParameterID BIGINT,
        ObservationID BIGINT,
        RowID BIGINT NULL,
        AnswerValue SQL_VARIANT NULL,
        RowStatus INT
    );

    BEGIN TRY
        DECLARE @idfActivityParameters BIGINT,
                @idfsParameter BIGINT,
                @answer_SV SQL_VARIANT,
                @answer NVARCHAR(4000),
                @idfsEditor BIGINT,
                @idfRow BIGINT;
        DECLARE @tAnswers TABLE
        (
            idfsParameter BIGINT NULL,
            idfsEditor BIGINT NULL,
            answer NVARCHAR(4000),
            idfRow BIGINT NULL
        );

        INSERT INTO @tAnswers
        SELECT idfsParameter,
               idfsEditor,
               answer,
               idfRow
        FROM
            OPENJSON(@answers)
            WITH
            (
                idfsParameter BIGINT,
                idfsEditor BIGINT,
                answer NVARCHAR(4000),
                idfRow BIGINT
            );

        IF @idfObservation IS NULL
        BEGIN
            INSERT INTO @SuppressSelect
            EXEC USP_GBL_NEXTKEYID_GET 'tlbObservation', @idfObservation OUTPUT;
        END

        IF NOT EXISTS
        (
            SELECT 1
            FROM dbo.tlbObservation
            WHERE idfObservation = @idfObservation
        )
        BEGIN
            INSERT INTO dbo.tlbObservation
            (
                idfObservation,
                idfsFormTemplate,
                intRowStatus,
                rowguid,
                idfsSite,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                AuditCreateDTM,
                AuditUpdateUser,
                AuditUpdateDTM
            )
            VALUES
            (@idfObservation,
             @idfsFormTemplate,
             0  ,
             NEWID(),
             dbo.FN_GBL_SITEID_GET(),
             10519001,
             '[{"idfObservation":' + CAST(@idfObservation AS NVARCHAR(100)) + '}]',
             @User,
             GETDATE(),
             @User,
             GETDATE()
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser
            )
            VALUES
            (NULL,
             @ObjectObservationTableID,
             @idfObservation,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectObservationTableID AS NVARCHAR(300)) + '}]',
             @User
            );
        -- End data audit
        END

        WHILE EXISTS (SELECT idfsParameter FROM @tAnswers)
        BEGIN
            SELECT TOP 1
                @idfsParameter = idfsParameter,
                @answer = answer,
                @idfsEditor = idfsEditor,
                @idfRow = idfRow
            FROM @tAnswers
            IF @idfsEditor = @TextBox
                SET @answer_SV = CAST(@answer AS NVARCHAR);
            IF @idfsEditor = @TextBoxTotal
                SET @answer_SV = CAST(@answer AS NVARCHAR);
            IF @idfsEditor = @TextBoxSum
                SET @answer_SV = CAST(@answer AS NVARCHAR);
            IF @idfsEditor = @MemoBox
                SET @answer_SV = CAST(@answer AS NVARCHAR);
            IF @idfsEditor = @DateControl AND @answer <> '0/1/00'
                SET @answer_SV = CAST(@answer AS DATETIME);
            IF @idfsEditor = @DateTimeControl AND @answer <> '0/1/00'
                SET @answer_SV = CAST(@answer AS DATETIME);
            IF @idfsEditor = @UpDown
                SET @answer_SV = CAST(@answer AS BIGINT);
            IF @idfsEditor = @ComboBox
                SET @answer_SV = CAST(@answer AS BIGINT);
            IF @idfsEditor = @RadioButton
                SET @answer_SV = CAST(@answer AS BIGINT);
            IF @idfsEditor = @CheckBoxDeclare
                SET @answer_SV = CAST(@answer AS BIT);

            SET ROWCOUNT 1;
            DELETE FROM @tAnswers;
            SET ROWCOUNT 0;

            IF @answer_SV <> ''
            BEGIN
                IF (
                       (@answer_SV IS NULL)
                       OR (LEN(CAST(@answer_SV AS NVARCHAR(4000))) = 0)
                   )
                BEGIN
                    INSERT INTO @SuppressSelect
                    EXEC dbo.USP_ADMIN_FF_ActivityParameters_DEL @idfsParameter,
                                                                 @idfObservation,
                                                                 @idfRow;
                END
                ELSE
                BEGIN
                    IF NOT EXISTS
                    (
                        SELECT TOP 1
                            1
                        FROM dbo.tlbActivityParameters
                        WHERE [idfsParameter] = @idfsParameter
                              AND [idfObservation] = @idfObservation
                              AND [idfRow] = @idfRow
                    )
                    BEGIN
                        INSERT INTO @SuppressSelect
                        EXEC USP_GBL_NEXTKEYID_GET 'tlbActivityParameters',
                                                   @idfActivityParameters OUTPUT;

                        INSERT INTO dbo.tlbActivityParameters
                        (
                            idfActivityParameters,
                            idfsParameter,
                            idfObservation,
                            idfRow,
                            varValue,
                            intRowStatus,
                            rowguid,
                            SourceSystemNameID,
                            SourceSystemKeyValue,
                            AuditCreateUser,
                            AuditCreateDTM,
                            AuditUpdateUser,
                            AuditUpdateDTM
                        )
                        VALUES
                        (@idfActivityParameters,
                         @idfsParameter,
                         @idfObservation,
                         @idfRow,
                         @answer_SV,
                         0  ,
                         NEWID(),
                         10519001,
                         '[{"idfActivityParameters":' + CAST(@idfActivityParameters AS NVARCHAR(100)) + '}]',
                         @User,
                         GETDATE(),
                         @User,
                         GETDATE()
                        );

                        -- Data audit
                        INSERT INTO dbo.tauDataAuditDetailCreate
                        (
                            idfDataAuditEvent,
                            idfObjectTable,
                            idfObject,
                            idfObjectDetail,
                            SourceSystemNameID,
                            SourceSystemKeyValue,
                            AuditCreateUser
                        )
                        VALUES
                        (NULL,
                         @ObjectActivityParametersTableID,
                         @idfActivityParameters,
                         @idfObservation,
                         10519001,
                         '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                         + CAST(@ObjectActivityParametersTableID AS NVARCHAR(300)) + '}]',
                         @User
                        );
                    -- End data audit
                    END
                    ELSE
                    BEGIN
                        SET @User = ISNULL(@User, '');

                        -- Data audit
                        -- Get and set user and site identifiers
                        SELECT @AuditUserID = userInfo.UserId,
                               @AuditSiteID = userInfo.SiteId
                        FROM dbo.FN_UserSiteInformation(@User) userInfo;

                        INSERT INTO @ActivityParametersBeforeEdit
                        (
                            ActivityParametersID,
                            ParameterID,
                            ObservationID,
                            RowID,
                            AnswerValue,
                            RowStatus
                        )
                        SELECT idfActivityParameters,
                               idfsParameter,
                               idfObservation,
                               idfRow,
                               varValue,
                               intRowStatus
                        FROM dbo.tlbActivityParameters
                        WHERE idfsParameter = @idfsParameter
                              AND idfObservation = @idfObservation;

                        UPDATE dbo.tlbActivityParameters
                        SET varValue = @answer_SV,
                            intRowStatus = 0,
                            AuditUpdateUser = @User,
                            AuditUpdateDTM = GETDATE()
                        WHERE idfsParameter = @idfsParameter
                              AND idfObservation = @idfObservation
                              AND idfRow = @idfRow;

                        INSERT INTO @ActivityParametersAfterEdit
                        (
                            ActivityParametersID,
                            ParameterID,
                            ObservationID,
                            RowID,
                            AnswerValue,
                            RowStatus
                        )
                        SELECT idfActivityParameters,
                               idfsParameter,
                               idfObservation,
                               idfRow,
                               varValue,
                               intRowStatus
                        FROM dbo.tlbActivityParameters
                        WHERE idfsParameter = @idfsParameter
                              AND idfObservation = @idfObservation;

                        INSERT INTO dbo.tauDataAuditDetailUpdate
                        (
                            idfDataAuditEvent,
                            idfObjectTable,
                            idfColumn,
                            idfObject,
                            idfObjectDetail,
                            strOldValue,
                            strNewValue
                        )
                        SELECT NULL,
                               @ObjectActivityParametersTableID,
                               78180000000,
                               a.ActivityParametersID,
                               @idfObservation,
                               b.ParameterID,
                               a.ParameterID
                        FROM @ActivityParametersAfterEdit AS a
                            FULL JOIN @ActivityParametersBeforeEdit AS b
                                ON a.ActivityParametersID = b.ActivityParametersID
                        WHERE (a.ParameterID <> b.ParameterID)
                              OR (
                                     a.ParameterID IS NOT NULL
                                     AND b.ParameterID IS NULL
                                 )
                              OR (
                                     a.ParameterID IS NULL
                                     AND b.ParameterID IS NOT NULL
                                 );

                        INSERT INTO dbo.tauDataAuditDetailUpdate
                        (
                            idfDataAuditEvent,
                            idfObjectTable,
                            idfColumn,
                            idfObject,
                            idfObjectDetail,
                            strOldValue,
                            strNewValue
                        )
                        SELECT NULL,
                               @ObjectActivityParametersTableID,
                               78170000000,
                               a.ActivityParametersID,
                               @idfObservation,
                               b.ObservationID,
                               a.ObservationID
                        FROM @ActivityParametersAfterEdit AS a
                            FULL JOIN @ActivityParametersBeforeEdit AS b
                                ON a.ActivityParametersID = b.ActivityParametersID
                        WHERE (a.ObservationID <> b.ObservationID)
                              OR (
                                     a.ObservationID IS NOT NULL
                                     AND b.ObservationID IS NULL
                                 )
                              OR (
                                     a.ObservationID IS NULL
                                     AND b.ObservationID IS NOT NULL
                                 );

                        INSERT INTO dbo.tauDataAuditDetailUpdate
                        (
                            idfDataAuditEvent,
                            idfObjectTable,
                            idfColumn,
                            idfObject,
                            idfObjectDetail,
                            strOldValue,
                            strNewValue
                        )
                        SELECT NULL,
                               @ObjectActivityParametersTableID,
                               4576590000000,
                               a.ActivityParametersID,
                               @idfObservation,
                               b.RowID,
                               a.RowID
                        FROM @ActivityParametersAfterEdit AS a
                            FULL JOIN @ActivityParametersBeforeEdit AS b
                                ON a.ActivityParametersID = b.ActivityParametersID
                        where (a.RowID <> b.RowID)
                              OR (
                                     a.RowID IS NOT NULL
                                     AND b.RowID IS NULL
                                 )
                              OR (
                                     a.RowID IS NULL
                                     AND b.RowID IS NOT NULL
                                 );

                        INSERT INTO dbo.tauDataAuditDetailUpdate
                        (
                            idfDataAuditEvent,
                            idfObjectTable,
                            idfColumn,
                            idfObject,
                            idfObjectDetail,
                            strOldValue,
                            strNewValue
                        )
                        SELECT NULL,
                               @ObjectActivityParametersTableID,
                               78190000000,
                               a.ActivityParametersID,
                               @idfObservation,
                               b.AnswerValue,
                               a.AnswerValue
                        FROM @ActivityParametersAfterEdit AS a
                            FULL JOIN @ActivityParametersBeforeEdit AS b
                                ON a.ActivityParametersID = b.ActivityParametersID
                        WHERE (a.AnswerValue <> b.AnswerValue)
                              OR (
                                     a.AnswerValue IS NOT NULL
                                     AND b.AnswerValue IS NULL
                                 )
                              OR (
                                     a.AnswerValue IS NULL
                                     AND b.AnswerValue IS NOT NULL
                                 );

                        INSERT INTO dbo.tauDataAuditDetailRestore
                        (
                            idfDataAuditEvent,
                            idfObjectTable,
                            idfObject,
                            idfObjectDetail,
                            AuditCreateUser
                        )
                        SELECT NULL,
                               @ObjectActivityParametersTableID,
                               a.ActivityParametersID,
                               @idfObservation,
                               @User
                        FROM @ActivityParametersAfterEdit AS a
                            FULL JOIN @ActivityParametersBeforeEdit AS b
                                ON a.ActivityParametersID = b.ActivityParametersID
                        WHERE a.RowStatus = 0
                              AND b.RowStatus = 1;
                    END
                END
            END
        END

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage,
               @idfObservation AS idfObservation;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_STAT_GetDetail]...';


GO

--*************************************************************
-- Name 				: USP_ADMIN_STAT_GetDetail
-- Description			: Get Settlement details
--          
-- Author               : Maheshwar D Deo
-- Revision History
--		Name       Date       Change Detail
--LAMONT		4-30-22		ADDED LOCATION HIERARCHY
--
-- Testing code:
--EXECUTE USP_ADMIN_STAT_GetDetail 53361450000337,'en-US'
--*************************************************************

ALTER PROCEDURE [dbo].[USP_ADMIN_STAT_GetDetail]
(
 @idfStatistic	BIGINT,		--##PARAM @idfStatistic - statistic record ID
 @LangID		NVARCHAR(50) --##PARAM @LangID - languageID
)
AS
BEGIN

	BEGIN TRY  	

		SELECT	tlbStatistic.idfStatistic,
			tlbStatistic.idfsStatisticDataType,
			sdt.[idfsStatisticAreaType],
			tlbStatistic.[idfsStatisticalAgeGroup],
			StatisticalAgeGroup.NAME AS strStatisticalAgeGroup,
			DataType.[strDefault] AS defDataTypeName,
			CAST(tlbStatistic.[varValue] AS FLOAT) AS [varValue],
			tlbStatistic.[idfsMainBASeReference],
			tlbStatistic.[idfsStatisticPeriodType],
			tlbStatistic.[idfsArea],
			dbo.FN_GBL_FormatDate(tlbStatistic.datStatisticStartDate, 'mm/dd/yyyy') As datStatisticStartDate,
			DataType.[name] AS setnDataTypeName,
			ParamType.[name] AS ParameterType,
			ParamType.[idfsReference] AS idfsParameterType, 
			Main.[strDefault] AS defParameterName,
			ISNULL(cMain.strTextString, Main.strDefault) AS setnParameterName,
			Main.idfsBASeReference AS idfsParameterName,
			AreaType.[strDefault] AS defAreaTypeName,
			AreaType.[name] AS setnAreaTypeName,
			PeriodType.[strDefault] AS defPeriodTypeName,
			PeriodType.[name] AS setnPeriodTypeName,
			Area.idfsCountry,
			Area.idfsRegion,
			Area.idfsRayon,
			Area.idfsSettlement,
			Area.strAreaName  AS setnArea,
			tlbStatistic.AuditCreateDTM,
			gl.AdminLevel1ID   AdminLevel0Value,
			gl.AdminLevel1Name  AS AdminLevel0Text,
			gl.AdminLevel2ID   AS AdminLevel1Value,
			gl.AdminLevel2Name  AS AdminLevel1Text,
			gl.AdminLevel3ID   AS AdminLevel2Value,
			gl.AdminLevel3Name AS AdminLevel2Text,
			gl.AdminLevel4ID   AS AdminLevel3Value,
			gl.AdminLevel4Name  AS AdminLevel3Text,
			gl.AdminLevel5ID   AS AdminLevel4Value,
			gl.AdminLevel5Name  AS AdminLevel4Text,
			gl.AdminLevel6ID   AS AdminLevel5Value,
			gl.AdminLevel6Name  AS AdminLevel5Text,
			gl.AdminLevel7ID   AS AdminLevel6Value,
			gl.AdminLevel7Name  AS AdminLevel6Text
	FROM	tlbStatistic
	left join [trtStatisticDataType] sdt on tlbStatistic.idfsStatisticDataType = sdt.idfsStatisticDataType
    left join FN_GBL_Reference_GETList(@LangID,19000090 ) DataType on DataType.idfsReference = tlbStatistic.idfsStatisticDataType
	LEFT JOIN   fn_gbl_locationHierarchy_Flattened(@LangID) gl ON gl.idfsLocation = tlbStatistic.idfsArea  
	-- LEFT OUTER JOIN fnReferenceRepair(@LangID, 19000090/*'rftStatisticDataType'*/) DataType
	-- ON				DataType.[idfsReference] = tlbStatistic.[idfsStatisticDataType]
    left join FN_GBL_Reference_GETList(@LangID,19000089) AreaType on AreaType.idfsReference = sdt.idfsStatisticAreaType
    -- )
	-- LEFT OUTER JOIN fnReferenceRepair(@LangID, 19000089/*'rftStatisticAreaType'*/) AreaType
	-- ON				AreaType.[idfsReference] = tlbStatistic.[idfsStatisticAreaType]
	LEFT OUTER JOIN FN_GBL_Reference_GetList(@LangID, 19000091/*'rftStatisticPeriodType'*/) PeriodType ON PeriodType.[idfsReference] = tlbStatistic.[idfsStatisticPeriodType]
	LEFT OUTER JOIN trtReferenceType rt ON rt.idfsReferenceType = DataType.idfsReferenceType
	LEFT OUTER JOIN FN_GBL_Reference_GetList(@LangID, 19000076/*'rftReferenceTypeName'*/) ParamType ON ParamType.[idfsReference] = rt.idfsReferenceType
	LEFT OUTER JOIN FN_GBL_Reference_GetList(@LangID, 19000145/*'rftStatisticalAgeGroup'*/) StatisticalAgeGroup
	ON StatisticalAgeGroup.[idfsReference] = tlbStatistic.[idfsStatisticalAgeGroup]
	LEFT OUTER JOIN (
						dbo.trtBASeReference AS Main 
						LEFT JOIN dbo.trtStringNameTranslation AS cMain 
						ON			Main.idfsBASeReference = cMain.idfsBASeReference
							AND		cMain.idfsLanguage = dbo.fnGetLanguageCode(@LangID)
					)
	ON				Main.idfsBASeReference = tlbStatistic.[idfsMainBASeReference]
					and ISNULL(Main.intRowStatus, 0) = 0
	LEFT OUTER JOIN vwAreaInfo Area 
	ON				Area.idfsArea = tlbStatistic.[idfsArea]
					and Area.idfsLanguage = dbo.fnGetLanguageCode(@LangID)
	
	WHERE tlbStatistic.intRowStatus = 0 AND 
	tlbStatistic.idfStatistic = @idfStatistic
	END TRY  

	BEGIN CATCH 

	Throw;

	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_DISEASE_REPORT_GETList]...';


GO
-- ================================================================================================
-- Name: USP_HUM_DISEASE_REPORT_GETList
--
-- Description: Get a list of human disease reports for the human module.
--          
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mandar Kulkarni             Initial release.
-- Stephen Long     03/26/2018 Added the person reported by name for the farm use case.
-- JWJ	            04/17/2018 Added extra col to return:  tlbHuman.idfHumanActual. Added alias 
--                             for region rayon to make them unique in results added report status 
--                             to results 
-- Harold Pryor     10/22/2018 Added input search parameters SearchStrPersonFirstName, 
--                             SearchStrPersonMiddleName, and SearchStrPersonLastName
-- Harold Pryor     10/31/2018 Added input search parameters SearchLegacyCaseID and	
--                             added strLocation (region, rayon) field to list result set
-- Harold Pryor     11/12/2018 Changed @SearchLegacyCaseID parameter from BIGINT to NVARCHAR(200)
-- Stephen Long     12/19/2018 Added pagination logic.
-- Stephen Long     07/07/2019 Added monitoring session ID to parameters and where clause.
-- Stephen Long     07/10/2019 Changed address join from exposure location to patient's current 
--                             residence address.
-- Stephen Long     07/19/2019 Corrected patient name and person entered by name ', '.
-- Stephen Long     02/26/2020 Added non-configurable site filtration rules.
-- Lamont Mitchell  03/03/2020 Modified all joins on human case and human to join on human actual.
-- Stephen Long     04/01/2020 Added if/else for first-level and second-level site types to bypass 
--                             non-configurable rules.
-- Stephen Long     05/18/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long     06/18/2020 Corrected the join on the rayon of the report current residence 
--                             address (human ID to human ID instead of human ID to human actual 
--                             ID).
-- Stephen Long     06/18/2020 Added where criteria to the query when no site filtration is 
--                             required.
-- Stephen Long     07/07/2020 Added trim to EIDSS identifier like criteria.
-- Doug Albanese	11/16/2020 Added Outbreak Tied filtering
-- Stephen Long     11/18/2020 Added site ID to the query.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long     12/24/2020 Modified join on disease filtration default role rule.
-- Stephen Long     12/29/2020 Changed function call on reference data for inactive records.
-- Stephen Long     01/04/2020 Added option recompile due to number of optional parameters for 
--                             better execution plan.
-- Stephen Long     04/04/2021 Added updated pagination and location hierarchy.
-- Mike Kornegay	09/23/2021 Added HospitalizationStatus field
-- Stephen Long     11/03/2021 Added disease ID field.
-- Mike Kornegay	11/16/2021 Fix hospitalization field for translations
-- Mike Kornegay	12/07/2021 Added back EnteredByPersonName 
-- Mike Kornegay	12/08/2021 Swapped out FN_GBL_GIS_ReferenceRepair for new flat hierarchy
-- Mike Kornegay	12/23/2021 Fixed YN hospitalization where clause
-- Manickandan Govindarajan 03/21/2022  Rename Param PageNumber to Page
-- Stephen Long     03/29/2022 Fix to site filtration to pull back a user's own site records.
-- Stephen Long     06/03/2022 Updated to point default access rules to base reference.
-- Mike Kornegay    06/06/2022 Added parameter OutcomeID.
-- Mike Kornegay	06/13/2022 Changed inner joins to left joins in final query because result set 
--                             was incorrect.
-- Stephen Long     08/14/2022 Added additional criteria for outbreak cases for laboratory module.
--                             TODO: replace filter outbreak cases parameter, and just filter in 
--                             the initial query to avoid getting extra unneeded records; also just 
--                             make it a boolean value.
-- Mark Wilson      09/01/2022 update to use denormalized locations to work with site filtration.
-- Stephen Long     09/22/2022 Add check for "0" page size.  If "0", then set to 1.
-- Mike Kornegay	10/11/2022 Move order by back to CTE row partition for performance and add 
--                             LanguageID to default filtration rule joins.
-- Stephen Long     11/02/2022 Fixes for 4599 - site filtration returning the wrong results.
-- Stephen Long     11/09/2022 Fix on where criteria when filtration is run; added groupings for 
--                             the user entered parameters from the search criteria page.
-- Ann Xiong		11/29/2022 Updated to return records correctly when filter by only DateEnteredFrom or DateEnteredTo.
--
-- Testing code:
-- EXEC USP_HUM_DISEASE_REPORT_GETList 'en-US'
-- EXEC USP_HUM_DISEASE_REPORT_GETList 'en-US', @EIDSSReportID = 'H'
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_DISEASE_REPORT_GETList]
    @LanguageID NVARCHAR(50),
    @ReportKey BIGINT = NULL,
    @ReportID NVARCHAR(200) = NULL,
    @LegacyReportID NVARCHAR(200) = NULL,
    @SessionKey BIGINT = NULL,
    @PatientID BIGINT = NULL,
    @PersonID NVARCHAR(200) = NULL,
    @DiseaseID BIGINT = NULL,
    @ReportStatusTypeID BIGINT = NULL,
    @AdministrativeLevelID BIGINT = NULL,
    @DateEnteredFrom DATETIME = NULL,
    @DateEnteredTo DATETIME = NULL,
    @ClassificationTypeID BIGINT = NULL,
    @HospitalizationYNID BIGINT = NULL,
    @PatientFirstName NVARCHAR(200) = NULL,
    @PatientMiddleName NVARCHAR(200) = NULL,
    @PatientLastName NVARCHAR(200) = NULL,
    @SentByFacilityID BIGINT = NULL,
    @ReceivedByFacilityID BIGINT = NULL,
    @DiagnosisDateFrom DATETIME = NULL,
    @DiagnosisDateTo DATETIME = NULL,
    @LocalOrFieldSampleID NVARCHAR(200) = NULL,
    @DataEntrySiteID BIGINT = NULL,
    @DateOfSymptomsOnsetFrom DATETIME = NULL,
    @DateOfSymptomsOnsetTo DATETIME = NULL,
    @NotificationDateFrom DATETIME = NULL,
    @NotificationDateTo DATETIME = NULL,
    @DateOfFinalCaseClassificationFrom DATETIME = NULL,
    @DateOfFinalCaseClassificationTo DATETIME = NULL,
    @LocationOfExposureAdministrativeLevelID BIGINT = NULL,
    @OutcomeID BIGINT = NULL,
    @FilterOutbreakTiedReports INT = 0,
    @OutbreakCasesIndicator BIT = 0,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'ReportID',
    @SortOrder NVARCHAR(4) = 'DESC',
    @Page INT = 1,
    @PageSize INT = 10
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @firstRec INT,
            @lastRec INT,
            @FiltrationSiteAdministrativeLevelID AS BIGINT, 
            @LanguageCode AS BIGINT = dbo.FN_GBL_LanguageCode_GET(@LanguageID);
    SET @firstRec = (@Page - 1) * @PageSize
    SET @lastRec = (@Page * @PageSize + 1);

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                             ));
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );

    BEGIN TRY
        IF @PageSize = 0
        BEGIN
            SET @PageSize = 1;
        END

        -- ========================================================================================
        -- NO SITE FILTRATION RULES APPLIED
        --
        -- For first and second level sites, do not apply any site filtration rules.
        -- ========================================================================================
        IF @ApplySiteFiltrationIndicator = 0
        BEGIN
            INSERT INTO @Results
            SELECT hc.idfHumanCase,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbHumanCase hc
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocation currentAddress
                    ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocationDenormalized g
                    ON g.idfsLocation = currentAddress.idfsLocation
                       AND g.idfsLanguage = @LanguageCode
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfHumanCase = hc.idfHumanCase
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation exposure
                    ON exposure.idfGeoLocation = hc.idfPointGeoLocation
                LEFT JOIN dbo.gisLocationDenormalized gExposure
                    ON gExposure.idfsLocation = exposure.idfsLocation
                       AND gExposure.idfsLanguage = @LanguageCode
            WHERE hc.intRowStatus = 0
                  AND hc.idfsFinalDiagnosis IS NOT NULL
                  AND (
                          hc.idfHumanCase = @ReportKey
                          OR @ReportKey IS NULL
                      )
                  AND (
                          hc.idfParentMonitoringSession = @SessionKey
                          OR @SessionKey IS NULL
                      )
                  AND (
                          h.idfHumanActual = @PatientID
                          OR @PatientID IS NULL
                      )
                  AND (
                          h.strPersonId = @PersonID
                          OR @PersonID IS NULL
                      )
                  AND (
                          idfsFinalDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          idfsCaseProgressStatus = @ReportStatusTypeID
                          OR @ReportStatusTypeID IS NULL
                      )
                  AND (
                          g.Level1ID = @AdministrativeLevelID
                          OR g.Level2ID = @AdministrativeLevelID
                          OR g.Level3ID = @AdministrativeLevelID
                          OR g.Level4ID = @AdministrativeLevelID
                          OR g.Level5ID = @AdministrativeLevelID
                          OR g.Level6ID = @AdministrativeLevelID
                          OR g.Level7ID = @AdministrativeLevelID
                          OR @AdministrativeLevelID IS NULL
                      )
				  AND (
						hc.datEnteredDate >= @DateEnteredFrom
						OR @DateEnteredFrom IS NULL
					  )
				  AND (
						hc.datEnteredDate <= @DateEnteredTo
						OR @DateEnteredTo IS NULL
					)
                  AND (
                          (CAST(hc.datFinalDiagnosisDate AS DATE)
                  BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                          )
                          OR (
                                 @DiagnosisDateFrom IS NULL
                                 OR @DiagnosisDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datNotificationDate AS DATE)
                  BETWEEN @NotificationDateFrom AND @NotificationDateTo
                          )
                          OR (
                                 @NotificationDateFrom IS NULL
                                 OR @NotificationDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datOnSetDate AS DATE)
                  BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                          )
                          OR (
                                 @DateOfSymptomsOnsetFrom IS NULL
                                 OR @DateOfSymptomsOnsetTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalCaseClassificationDate AS DATE)
                  BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                          )
                          OR (
                                 @DateOfFinalCaseClassificationFrom IS NULL
                                 OR @DateOfFinalCaseClassificationTo IS NULL
                             )
                      )
                  AND (
                          hc.idfReceivedByOffice = @ReceivedByFacilityID
                          OR @ReceivedByFacilityID IS NULL
                      )
                  AND (
                          hc.idfSentByOffice = @SentByFacilityID
                          OR @SentByFacilityID IS NULL
                      )
                  AND (
                          idfsFinalCaseStatus = @ClassificationTypeID
                          OR @ClassificationTypeID IS NULL
                      )
                  AND (
                          idfsYNHospitalization = @HospitalizationYNID
                          OR @HospitalizationYNID IS NULL
                      )
                  AND (
                          g.Level1ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
                          OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
                  AND (
                          (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                            WHEN '' THEN
                                                                ISNULL(h.strFirstName, '')
                                                            ELSE
                                                                @PatientFirstName
                                                        END
                          )
                          OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                             WHEN '' THEN
                                                                 ISNULL(h.strSecondName, '')
                                                             ELSE
                                                                 @PatientMiddleName
                                                         END
                          )
                          OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                           WHEN '' THEN
                                                               ISNULL(h.strLastName, '')
                                                           ELSE
                                                               @PatientLastName
                                                       END
                          )
                          OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                      )
                  AND (
                          hc.idfsSite = @DataEntrySiteID
                          OR @DataEntrySiteID IS NULL
                      )
                  AND (
                          (
                              hc.idfOutbreak IS NULL
                              AND @OutbreakCasesIndicator = 0
                          )
                          OR (
                                 hc.idfOutbreak IS NOT NULL
                                 AND @OutbreakCasesIndicator = 1
                             )
                          OR (@OutbreakCasesIndicator IS NULL)
                      )
                  AND (
                          hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
                  AND (
                          hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                          OR @LegacyReportID IS NULL
                      )
                  AND (
                          m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                          OR @LocalOrFieldSampleID IS NULL
                      )
                  AND (
                          hc.idfsOutcome = @OutcomeID
                          OR @OutcomeID IS NULL
                      )
            GROUP BY hc.idfHumanCase;
        END
        ELSE
        BEGIN -- Site Filtration
            DECLARE @InitialFilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                                     ));

            INSERT INTO @InitialFilteredResults
            SELECT hc.idfHumanCase,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbHumanCase hc
            WHERE hc.intRowStatus = 0
                  AND hc.idfsSite = @UserSiteID;

            INSERT INTO @Results
            SELECT hc.idfHumanCase,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM @InitialFilteredResults res
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = res.ID
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocation currentAddress
                    ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocationDenormalized g
                    ON g.idfsLocation = currentAddress.idfsLocation
                       AND g.idfsLanguage = @LanguageCode
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfHumanCase = hc.idfHumanCase
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation exposure
                    ON exposure.idfGeoLocation = hc.idfPointGeoLocation
                LEFT JOIN dbo.gisLocationDenormalized gExposure
                    ON gExposure.idfsLocation = exposure.idfsLocation
                       AND gExposure.idfsLanguage = @LanguageCode
            WHERE hc.idfsFinalDiagnosis IS NOT NULL
                  AND (
                          hc.idfHumanCase = @ReportKey
                          OR @ReportKey IS NULL
                      )
                  AND (
                          hc.idfParentMonitoringSession = @SessionKey
                          OR @SessionKey IS NULL
                      )
                  AND (
                          h.idfHumanActual = @PatientID
                          OR @PatientID IS NULL
                      )
                  AND (
                          h.strPersonId = @PersonID
                          OR @PersonID IS NULL
                      )
                  AND (
                          idfsFinalDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          idfsCaseProgressStatus = @ReportStatusTypeID
                          OR @ReportStatusTypeID IS NULL
                      )
                  AND (
                          g.Level1ID = @AdministrativeLevelID
                          OR g.Level2ID = @AdministrativeLevelID
                          OR g.Level3ID = @AdministrativeLevelID
                          OR g.Level4ID = @AdministrativeLevelID
                          OR g.Level5ID = @AdministrativeLevelID
                          OR g.Level6ID = @AdministrativeLevelID
                          OR g.Level7ID = @AdministrativeLevelID
                          OR @AdministrativeLevelID IS NULL
                      )
				  AND (
						hc.datEnteredDate >= @DateEnteredFrom
						OR @DateEnteredFrom IS NULL
					  )
				  AND (
						hc.datEnteredDate <= @DateEnteredTo
						OR @DateEnteredTo IS NULL
					)
                  AND (
                          (CAST(hc.datFinalDiagnosisDate AS DATE)
                  BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                          )
                          OR (
                                 @DiagnosisDateFrom IS NULL
                                 OR @DiagnosisDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datNotificationDate AS DATE)
                  BETWEEN @NotificationDateFrom AND @NotificationDateTo
                          )
                          OR (
                                 @NotificationDateFrom IS NULL
                                 OR @NotificationDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datOnSetDate AS DATE)
                  BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                          )
                          OR (
                                 @DateOfSymptomsOnsetFrom IS NULL
                                 OR @DateOfSymptomsOnsetTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalCaseClassificationDate AS DATE)
                  BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                          )
                          OR (
                                 @DateOfFinalCaseClassificationFrom IS NULL
                                 OR @DateOfFinalCaseClassificationTo IS NULL
                             )
                      )
                  AND (
                          hc.idfReceivedByOffice = @ReceivedByFacilityID
                          OR @ReceivedByFacilityID IS NULL
                      )
                  AND (
                          hc.idfSentByOffice = @SentByFacilityID
                          OR @SentByFacilityID IS NULL
                      )
                  AND (
                          idfsFinalCaseStatus = @ClassificationTypeID
                          OR @ClassificationTypeID IS NULL
                      )
                  AND (
                          idfsYNHospitalization = @HospitalizationYNID
                          OR @HospitalizationYNID IS NULL
                      )
                  AND (
                          g.Level1ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
                          OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
                  AND (
                          (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                            WHEN '' THEN
                                                                ISNULL(h.strFirstName, '')
                                                            ELSE
                                                                @PatientFirstName
                                                        END
                          )
                          OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                             WHEN '' THEN
                                                                 ISNULL(h.strSecondName, '')
                                                             ELSE
                                                                 @PatientMiddleName
                                                         END
                          )
                          OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                           WHEN '' THEN
                                                               ISNULL(h.strLastName, '')
                                                           ELSE
                                                               @PatientLastName
                                                       END
                          )
                          OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                      )
                  AND (
                          hc.idfsSite = @DataEntrySiteID
                          OR @DataEntrySiteID IS NULL
                      )
                  AND (
                          (
                              hc.idfOutbreak IS NULL
                              AND @OutbreakCasesIndicator = 0
                          )
                          OR (
                                 hc.idfOutbreak IS NOT NULL
                                 AND @OutbreakCasesIndicator = 1
                             )
                          OR (@OutbreakCasesIndicator IS NULL)
                      )
                  AND (
                          hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
                  AND (
                          hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                          OR @LegacyReportID IS NULL
                      )
                  AND (
                          m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                          OR @LocalOrFieldSampleID IS NULL
                      )
                  AND (
                          hc.idfsOutcome = @OutcomeID
                          OR @OutcomeID IS NULL
                      )
            GROUP BY hc.idfHumanCase;

            DECLARE @FilteredResults TABLE
            (
                ID BIGINT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL, INDEX IDX_ID (ID
                                                                     ));

            -- =======================================================================================
            -- DEFAULT SITE FILTRATION RULES
            --
            -- Apply active default site filtration rules for third level sites.
            -- =======================================================================================
            DECLARE @RuleActiveStatus INT = 0;
            DECLARE @AdministrativeLevelTypeID INT;
            DECLARE @DefaultAccessRules AS TABLE
            (
                AccessRuleID BIGINT NOT NULL,
                ActiveIndicator INT NOT NULL,
                ReadPermissionIndicator BIT NOT NULL,
                AccessToPersonalDataPermissionIndicator BIT NOT NULL,
                AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
                WritePermissionIndicator BIT NOT NULL,
                DeletePermissionIndicator BIT NOT NULL,
                AdministrativeLevelTypeID INT NULL
            );

            INSERT INTO @DefaultAccessRules
            SELECT AccessRuleID,
                   a.intRowStatus,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator,
                   a.AdministrativeLevelTypeID
            FROM dbo.AccessRule a
            WHERE DefaultRuleIndicator = 1;

            SELECT @RuleActiveStatus = ActiveIndicator
            FROM @DefaultAccessRules
            WHERE AccessRuleID = 10537000;

            IF @RuleActiveStatus = 0
            BEGIN
                SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537000;

                SELECT @FiltrationSiteAdministrativeLevelID = CASE
                                                                  WHEN @AdministrativeLevelTypeID = 1 THEN
                                                                      g.Level1ID
                                                                  WHEN @AdministrativeLevelTypeID = 2 THEN
                                                                      g.Level2ID
                                                                  WHEN @AdministrativeLevelTypeID = 3 THEN
                                                                      g.Level3ID
                                                                  WHEN @AdministrativeLevelTypeID = 4 THEN
                                                                      g.Level4ID
                                                                  WHEN @AdministrativeLevelTypeID = 5 THEN
                                                                      g.Level5ID
                                                                  WHEN @AdministrativeLevelTypeID = 6 THEN
                                                                      g.Level6ID
                                                                  WHEN @AdministrativeLevelTypeID = 7 THEN
                                                                      g.Level7ID
                                                              END
                FROM dbo.tlbOffice o
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
                           AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                WHERE o.intRowStatus = 0
                      AND o.idfOffice = @UserOrganizationID;

                -- Administrative level specified in the rule of the site where the report was created.
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tstSite s
                        ON h.idfsSite = s.idfsSite
                    INNER JOIN dbo.tlbOffice o
                        ON o.idfOffice = s.idfOffice
                           AND o.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocationShared l
                        ON l.idfGeoLocationShared = o.idfLocation
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
                           AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537000
                WHERE h.intRowStatus = 0
                      AND (
                              g.Level1ID = @FiltrationSiteAdministrativeLevelID
                              AND @AdministrativeLevelTypeID = 1
                              OR g.Level2ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 2
                              OR g.Level3ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 3
                              OR g.Level4ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 4
                              OR g.Level5ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 5
                              OR g.Level6ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 6
                              OR g.Level7ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 7
                          )

                -- Administrative level specified in the rule of the report current residence address.
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbHuman hu
                        ON hu.idfHuman = h.idfHuman
                           AND hu.intRowStatus = 0
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = hu.idfCurrentResidenceAddress
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
                           AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537000
                WHERE h.intRowStatus = 0
                      AND (
                              g.Level1ID = @FiltrationSiteAdministrativeLevelID
                              AND @AdministrativeLevelTypeID = 1
                              OR g.Level2ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 2
                              OR g.Level3ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 3
                              OR g.Level4ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 4
                              OR g.Level5ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 5
                              OR g.Level6ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 6
                              OR g.Level7ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 7
                          )

                -- Administrative level specified in the rule of the report location of exposure, 
                -- if corresponding field was filled in.
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbGeoLocation l
                        ON l.idfGeoLocation = h.idfPointGeoLocation
                           AND l.intRowStatus = 0
                    INNER JOIN dbo.gisLocationDenormalized g
                        ON g.idfsLocation = l.idfsLocation
                           AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537000
                WHERE h.intRowStatus = 0
                      AND (
                              g.Level1ID = @FiltrationSiteAdministrativeLevelID
                              AND @AdministrativeLevelTypeID = 1
                              OR g.Level2ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 2
                              OR g.Level3ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 3
                              OR g.Level4ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 4
                              OR g.Level5ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 5
                              OR g.Level6ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 6
                              OR g.Level7ID = @FiltrationSiteAdministrativeLevelID
                                 AND @AdministrativeLevelTypeID = 7
                          )
            END;

            -- Report data shall be available to all sites' organizations connected to the particular report.
            -- Notification sent by, notification received by, facility where the patient first sought 
            -- care, hospital, and the conducting investigation organizations.
            SELECT @RuleActiveStatus = intRowStatus
            FROM dbo.AccessRule
            WHERE AccessRuleID = 10537001;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE h.intRowStatus = 0
                      AND (
                              h.idfSentByOffice = @UserOrganizationID
                              OR h.idfReceivedByOffice = @UserOrganizationID
                              OR h.idfSoughtCareFacility = @UserOrganizationID
                              OR h.idfHospital = @UserOrganizationID
                              OR h.idfInvestigatedByOffice = @UserOrganizationID
                          )
                ORDER BY h.idfHumanCase;

                -- Sample collected by and sent to organizations
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfHumanCase),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbHumanCase h
                        ON h.idfHumanCase = m.idfHumanCase
                           AND h.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE m.intRowStatus = 0
                      AND (
                              m.idfFieldCollectedByOffice = @UserOrganizationID
                              OR m.idfSendToOffice = @UserOrganizationID
                          )
                GROUP BY m.idfHumanCase,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;

                -- Sample transferred to organizations
                INSERT INTO @FilteredResults
                SELECT MAX(m.idfHumanCase),
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbMaterial m
                    INNER JOIN dbo.tlbHumanCase h
                        ON h.idfHumanCase = m.idfHumanCase
                           AND h.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOutMaterial tom
                        ON m.idfMaterial = tom.idfMaterial
                           AND tom.intRowStatus = 0
                    INNER JOIN dbo.tlbTransferOUT t
                        ON tom.idfTransferOut = t.idfTransferOut
                           AND t.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537001
                WHERE m.intRowStatus = 0
                      AND t.idfSendToOffice = @UserOrganizationID
                GROUP BY m.idfHumanCase,
                         a.ReadPermissionIndicator,
                         a.AccessToPersonalDataPermissionIndicator,
                         a.AccessToGenderAndAgeDataPermissionIndicator,
                         a.WritePermissionIndicator,
                         a.DeletePermissionIndicator;
            END;

            --
            -- Report data shall be available to the sites with the connected outbreak, if the report 
            -- is the primary report/session for an outbreak.
            --
            SELECT @RuleActiveStatus = intRowStatus
            FROM dbo.AccessRule
            WHERE AccessRuleID = 10537002;

            IF @RuleActiveStatus = 0
            BEGIN
                INSERT INTO @FilteredResults
                SELECT h.idfHumanCase,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbHumanCase h
                    INNER JOIN dbo.tlbOutbreak o
                        ON h.idfHumanCase = o.idfPrimaryCaseOrSession
                           AND o.intRowStatus = 0
                    INNER JOIN @DefaultAccessRules a
                        ON a.AccessRuleID = 10537002
                WHERE h.intRowStatus = 0
                      AND o.idfsSite = @UserSiteID;
            END;

            -- =======================================================================================
            -- CONFIGURABLE SITE FILTRATION RULES
            -- 
            -- Apply configurable site filtration rules for use case SAUC34. Some of these rules may 
            -- overlap the default rules.
            -- =======================================================================================
            --
            -- Apply at the user's site group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                    ON userSiteGroup.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = h.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfsSite = @UserSiteID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND sgs.idfsSite = h.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- 
            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- 
            -- Apply at the user's ID level, granted by a site.
            ----
            INSERT INTO @FilteredResults
            SELECT h.idfHumanCase,
                   a.ReadPermissionIndicator,
                   a.AccessToPersonalDataPermissionIndicator,
                   a.AccessToGenderAndAgeDataPermissionIndicator,
                   a.WritePermissionIndicator,
                   a.DeletePermissionIndicator
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule a
                    ON a.AccessRuleID = ara.AccessRuleID
                       AND a.intRowStatus = 0
                       AND a.DefaultRuleIndicator = 0
            WHERE h.intRowStatus = 0
                  AND a.GrantingActorSiteID = h.idfsSite;

            -- Copy filtered results to results and use search criteria
            INSERT INTO @Results
            SELECT ID,
                   ReadPermissionIndicator,
                   AccessToPersonalDataPermissionIndicator,
                   AccessToGenderAndAgeDataPermissionIndicator,
                   WritePermissionIndicator,
                   DeletePermissionIndicator
            FROM @FilteredResults
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = ID
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbHumanActual ha
                    ON ha.idfHumanActual = h.idfHumanActual
                       AND ha.intRowStatus = 0
                INNER JOIN dbo.tlbGeoLocation currentAddress
                    ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocationDenormalized g
                    ON g.idfsLocation = currentAddress.idfsLocation
                       AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
                LEFT JOIN dbo.tlbMaterial m
                    ON m.idfHumanCase = hc.idfHumanCase
                       AND m.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation exposure
                    ON exposure.idfGeoLocation = hc.idfPointGeoLocation
                LEFT JOIN dbo.gisLocationDenormalized gExposure
                    ON gExposure.idfsLocation = exposure.idfsLocation
                       AND gExposure.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
            WHERE hc.intRowStatus = 0
                  AND hc.idfsFinalDiagnosis IS NOT NULL
                  AND (
                          hc.idfHumanCase = @ReportKey
                          OR @ReportKey IS NULL
                      )
                  AND (
                          hc.idfParentMonitoringSession = @SessionKey
                          OR @SessionKey IS NULL
                      )
                  AND (
                          ha.idfHumanActual = @PatientID
                          OR @PatientID IS NULL
                      )
                  AND (
                          h.strPersonId = @PersonID
                          OR @PersonID IS NULL
                      )
                  AND (
                          idfsFinalDiagnosis = @DiseaseID
                          OR @DiseaseID IS NULL
                      )
                  AND (
                          idfsCaseProgressStatus = @ReportStatusTypeID
                          OR @ReportStatusTypeID IS NULL
                      )
                  AND (
                          g.Level1ID = @AdministrativeLevelID
                          OR g.Level2ID = @AdministrativeLevelID
                          OR g.Level3ID = @AdministrativeLevelID
                          OR g.Level4ID = @AdministrativeLevelID
                          OR g.Level5ID = @AdministrativeLevelID
                          OR g.Level6ID = @AdministrativeLevelID
                          OR g.Level7ID = @AdministrativeLevelID
                          OR @AdministrativeLevelID IS NULL
                      )
				  AND (
						hc.datEnteredDate >= @DateEnteredFrom
						OR @DateEnteredFrom IS NULL
					  )
				  AND (
						hc.datEnteredDate <= @DateEnteredTo
						OR @DateEnteredTo IS NULL
					)
                  AND (
                          (CAST(hc.datFinalDiagnosisDate AS DATE)
                  BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                          )
                          OR (
                                 @DiagnosisDateFrom IS NULL
                                 OR @DiagnosisDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datNotificationDate AS DATE)
                  BETWEEN @NotificationDateFrom AND @NotificationDateTo
                          )
                          OR (
                                 @NotificationDateFrom IS NULL
                                 OR @NotificationDateTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datOnSetDate AS DATE)
                  BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                          )
                          OR (
                                 @DateOfSymptomsOnsetFrom IS NULL
                                 OR @DateOfSymptomsOnsetTo IS NULL
                             )
                      )
                  AND (
                          (CAST(hc.datFinalCaseClassificationDate AS DATE)
                  BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                          )
                          OR (
                                 @DateOfFinalCaseClassificationFrom IS NULL
                                 OR @DateOfFinalCaseClassificationTo IS NULL
                             )
                      )
                  AND (
                          hc.idfReceivedByOffice = @ReceivedByFacilityID
                          OR @ReceivedByFacilityID IS NULL
                      )
                  AND (
                          hc.idfSentByOffice = @SentByFacilityID
                          OR @SentByFacilityID IS NULL
                      )
                  AND (
                          idfsFinalCaseStatus = @ClassificationTypeID
                          OR @ClassificationTypeID IS NULL
                      )
                  AND (
                          idfsYNHospitalization = @HospitalizationYNID
                          OR @HospitalizationYNID IS NULL
                      )
                  AND (
                          g.Level1ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
                          OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
                          OR @LocationOfExposureAdministrativeLevelID IS NULL
                      )
                  AND (
                          (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                            WHEN '' THEN
                                                                ISNULL(h.strFirstName, '')
                                                            ELSE
                                                                @PatientFirstName
                                                        END
                          )
                          OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                             WHEN '' THEN
                                                                 ISNULL(h.strSecondName, '')
                                                             ELSE
                                                                 @PatientMiddleName
                                                         END
                          )
                          OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                      )
                  AND (
                          (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                           WHEN '' THEN
                                                               ISNULL(h.strLastName, '')
                                                           ELSE
                                                               @PatientLastName
                                                       END
                          )
                          OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                      )
                  AND (
                          hc.idfsSite = @DataEntrySiteID
                          OR @DataEntrySiteID IS NULL
                      )
                  AND (
                          (
                              hc.idfOutbreak IS NULL
                              AND @OutbreakCasesIndicator = 0
                          )
                          OR (
                                 hc.idfOutbreak IS NOT NULL
                                 AND @OutbreakCasesIndicator = 1
                             )
                          OR (@OutbreakCasesIndicator IS NULL)
                      )
                  AND (
                          hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                          OR @ReportID IS NULL
                      )
                  AND (
                          hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                          OR @LegacyReportID IS NULL
                      )
                  AND (
                          m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                          OR @LocalOrFieldSampleID IS NULL
                      )
                  AND (
                          hc.idfsOutcome = @OutcomeID
                          OR @OutcomeID IS NULL
                      )
            GROUP BY ID,
                     ReadPermissionIndicator,
                     AccessToPersonalDataPermissionIndicator,
                     AccessToGenderAndAgeDataPermissionIndicator,
                     WritePermissionIndicator,
                     DeletePermissionIndicator;
        END;

        -- =======================================================================================
        -- Remove "Outbreak" tied disease reports, if filtering is needed
        -- =======================================================================================
        IF @FilterOutbreakTiedReports = 1
        BEGIN
            DELETE I
            FROM @Results I
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = I.ID
            WHERE hc.idfOutbreak IS NOT NULL;
        END;

        -- =======================================================================================
        -- DISEASE FILTRATION RULES
        --
        -- Apply disease filtration rules from use case SAUC62.
        -- =======================================================================================
        -- 
        -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT h.idfHumanCase
            FROM dbo.tlbHumanCase h
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = h.idfsFinalDiagnosis
                       AND oa.intRowStatus = 0
            WHERE oa.intPermission = 1
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = -506 -- Default role
        );

        --
        -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT hc.idfHumanCase,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbHumanCase hc
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tlbHuman h
                ON h.idfHuman = hc.idfHuman
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbGeoLocation currentAddress
                ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
            LEFT JOIN dbo.gisLocationDenormalized g
                ON g.idfsLocation = currentAddress.idfsLocation
                   AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
            LEFT JOIN dbo.tlbMaterial m
                ON m.idfHumanCase = hc.idfHumanCase
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation exposure
                ON exposure.idfGeoLocation = hc.idfPointGeoLocation
            LEFT JOIN dbo.gisLocationDenormalized gExposure
                ON gExposure.idfsLocation = exposure.idfsLocation
                   AND gExposure.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
        WHERE oa.intPermission = 2 -- Allow permission
              AND hc.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup
              AND hc.idfsFinalDiagnosis IS NOT NULL
              AND (
                      hc.idfHumanCase = @ReportKey
                      OR @ReportKey IS NULL
                  )
              AND (
                      hc.idfParentMonitoringSession = @SessionKey
                      OR @SessionKey IS NULL
                  )
              AND (
                      h.idfHumanActual = @PatientID
                      OR @PatientID IS NULL
                  )
              AND (
                      h.strPersonId = @PersonID
                      OR @PersonID IS NULL
                  )
              AND (
                      idfsFinalDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      idfsCaseProgressStatus = @ReportStatusTypeID
                      OR @ReportStatusTypeID IS NULL
                  )
              AND (
                      g.Level1ID = @AdministrativeLevelID
                      OR g.Level2ID = @AdministrativeLevelID
                      OR g.Level3ID = @AdministrativeLevelID
                      OR g.Level4ID = @AdministrativeLevelID
                      OR g.Level5ID = @AdministrativeLevelID
                      OR g.Level6ID = @AdministrativeLevelID
                      OR g.Level7ID = @AdministrativeLevelID
                      OR @AdministrativeLevelID IS NULL
                  )
				  AND (
						hc.datEnteredDate >= @DateEnteredFrom
						OR @DateEnteredFrom IS NULL
					  )
				  AND (
						hc.datEnteredDate <= @DateEnteredTo
						OR @DateEnteredTo IS NULL
					)
              AND (
                      (CAST(hc.datFinalDiagnosisDate AS DATE)
              BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                      )
                      OR (
                             @DiagnosisDateFrom IS NULL
                             OR @DiagnosisDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datNotificationDate AS DATE)
              BETWEEN @NotificationDateFrom AND @NotificationDateTo
                      )
                      OR (
                             @NotificationDateFrom IS NULL
                             OR @NotificationDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datOnSetDate AS DATE)
              BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                      )
                      OR (
                             @DateOfSymptomsOnsetFrom IS NULL
                             OR @DateOfSymptomsOnsetTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalCaseClassificationDate AS DATE)
              BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                      )
                      OR (
                             @DateOfFinalCaseClassificationFrom IS NULL
                             OR @DateOfFinalCaseClassificationTo IS NULL
                         )
                  )
              AND (
                      hc.idfReceivedByOffice = @ReceivedByFacilityID
                      OR @ReceivedByFacilityID IS NULL
                  )
              AND (
                      hc.idfSentByOffice = @SentByFacilityID
                      OR @SentByFacilityID IS NULL
                  )
              AND (
                      idfsFinalCaseStatus = @ClassificationTypeID
                      OR @ClassificationTypeID IS NULL
                  )
              AND (
                      idfsYNHospitalization = @HospitalizationYNID
                      OR @HospitalizationYNID IS NULL
                  )
              AND (
                      g.Level1ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
                      OR @LocationOfExposureAdministrativeLevelID IS NULL
                  )
              AND (
                      (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                        WHEN '' THEN
                                                            ISNULL(h.strFirstName, '')
                                                        ELSE
                                                            @PatientFirstName
                                                    END
                      )
                      OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                         WHEN '' THEN
                                                             ISNULL(h.strSecondName, '')
                                                         ELSE
                                                             @PatientMiddleName
                                                     END
                      )
                      OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                       WHEN '' THEN
                                                           ISNULL(h.strLastName, '')
                                                       ELSE
                                                           @PatientLastName
                                                   END
                      )
                      OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                  )
              AND (
                      hc.idfsSite = @DataEntrySiteID
                      OR @DataEntrySiteID IS NULL
                  )
              AND (
                      (
                          hc.idfOutbreak IS NULL
                          AND @OutbreakCasesIndicator = 0
                      )
                      OR (
                             hc.idfOutbreak IS NOT NULL
                             AND @OutbreakCasesIndicator = 1
                         )
                      OR (@OutbreakCasesIndicator IS NULL)
                  )
              AND (
                      hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                      OR @ReportID IS NULL
                  )
              AND (
                      hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                      OR @LegacyReportID IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                      OR @LocalOrFieldSampleID IS NULL
                  )
              AND (
                      hc.idfsOutcome = @OutcomeID
                      OR @OutcomeID IS NULL
                  )
        GROUP BY hc.idfHumanCase;

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbHumanCase hc
                ON hc.idfHumanCase = res.ID
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 1
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        --
        -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT hc.idfHumanCase,
               1,
               1,
               1,
               1,
               1
        FROM dbo.tlbHumanCase hc
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbHuman h
                ON h.idfHuman = hc.idfHuman
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbGeoLocation currentAddress
                ON currentAddress.idfGeoLocation = h.idfCurrentResidenceAddress
            LEFT JOIN dbo.gisLocationDenormalized g
                ON g.idfsLocation = currentAddress.idfsLocation
                   AND g.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
            LEFT JOIN dbo.tlbMaterial m
                ON m.idfHumanCase = hc.idfHumanCase
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation exposure
                ON exposure.idfGeoLocation = hc.idfPointGeoLocation
            LEFT JOIN dbo.gisLocationDenormalized gExposure
                ON gExposure.idfsLocation = exposure.idfsLocation
                   AND gExposure.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
        WHERE oa.intPermission = 2 -- Allow permission
              AND hc.intRowStatus = 0
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = @UserEmployeeID
              AND hc.idfsFinalDiagnosis IS NOT NULL
              AND (
                      hc.idfHumanCase = @ReportKey
                      OR @ReportKey IS NULL
                  )
              AND (
                      hc.idfParentMonitoringSession = @SessionKey
                      OR @SessionKey IS NULL
                  )
              AND (
                      h.idfHumanActual = @PatientID
                      OR @PatientID IS NULL
                  )
              AND (
                      h.strPersonId = @PersonID
                      OR @PersonID IS NULL
                  )
              AND (
                      idfsFinalDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      idfsCaseProgressStatus = @ReportStatusTypeID
                      OR @ReportStatusTypeID IS NULL
                  )
              AND (
                      g.Level1ID = @AdministrativeLevelID
                      OR g.Level2ID = @AdministrativeLevelID
                      OR g.Level3ID = @AdministrativeLevelID
                      OR g.Level4ID = @AdministrativeLevelID
                      OR g.Level5ID = @AdministrativeLevelID
                      OR g.Level6ID = @AdministrativeLevelID
                      OR g.Level7ID = @AdministrativeLevelID
                      OR @AdministrativeLevelID IS NULL
                  )
				  AND (
						hc.datEnteredDate >= @DateEnteredFrom
						OR @DateEnteredFrom IS NULL
					  )
				  AND (
						hc.datEnteredDate <= @DateEnteredTo
						OR @DateEnteredTo IS NULL
					)
              AND (
                      (CAST(hc.datFinalDiagnosisDate AS DATE)
              BETWEEN @DiagnosisDateFrom AND @DiagnosisDateTo
                      )
                      OR (
                             @DiagnosisDateFrom IS NULL
                             OR @DiagnosisDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datNotificationDate AS DATE)
              BETWEEN @NotificationDateFrom AND @NotificationDateTo
                      )
                      OR (
                             @NotificationDateFrom IS NULL
                             OR @NotificationDateTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datOnSetDate AS DATE)
              BETWEEN @DateOfSymptomsOnsetFrom AND @DateOfSymptomsOnsetTo
                      )
                      OR (
                             @DateOfSymptomsOnsetFrom IS NULL
                             OR @DateOfSymptomsOnsetTo IS NULL
                         )
                  )
              AND (
                      (CAST(hc.datFinalCaseClassificationDate AS DATE)
              BETWEEN @DateOfFinalCaseClassificationFrom AND @DateOfFinalCaseClassificationTo
                      )
                      OR (
                             @DateOfFinalCaseClassificationFrom IS NULL
                             OR @DateOfFinalCaseClassificationTo IS NULL
                         )
                  )
              AND (
                      hc.idfReceivedByOffice = @ReceivedByFacilityID
                      OR @ReceivedByFacilityID IS NULL
                  )
              AND (
                      hc.idfSentByOffice = @SentByFacilityID
                      OR @SentByFacilityID IS NULL
                  )
              AND (
                      idfsFinalCaseStatus = @ClassificationTypeID
                      OR @ClassificationTypeID IS NULL
                  )
              AND (
                      idfsYNHospitalization = @HospitalizationYNID
                      OR @HospitalizationYNID IS NULL
                  )
              AND (
                      g.Level1ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level2ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level3ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level4ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level5ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level6ID = @LocationOfExposureAdministrativeLevelID
                      OR g.Level7ID = @LocationOfExposureAdministrativeLevelID
                      OR @LocationOfExposureAdministrativeLevelID IS NULL
                  )
              AND (
                      (ISNULL(h.strFirstName, '') = CASE ISNULL(@PatientFirstName, '')
                                                        WHEN '' THEN
                                                            ISNULL(h.strFirstName, '')
                                                        ELSE
                                                            @PatientFirstName
                                                    END
                      )
                      OR (CHARINDEX(@PatientFirstName, ISNULL(h.strFirstName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strSecondName, '') = CASE ISNULL(@PatientMiddleName, '')
                                                         WHEN '' THEN
                                                             ISNULL(h.strSecondName, '')
                                                         ELSE
                                                             @PatientMiddleName
                                                     END
                      )
                      OR (CHARINDEX(@PatientMiddleName, ISNULL(h.strSecondName, '')) > 0)
                  )
              AND (
                      (ISNULL(h.strLastName, '') = CASE ISNULL(@PatientLastName, '')
                                                       WHEN '' THEN
                                                           ISNULL(h.strLastName, '')
                                                       ELSE
                                                           @PatientLastName
                                                   END
                      )
                      OR (CHARINDEX(@PatientLastName, ISNULL(h.strLastName, '')) > 0)
                  )
              AND (
                      hc.idfsSite = @DataEntrySiteID
                      OR @DataEntrySiteID IS NULL
                  )
              AND (
                      (
                          hc.idfOutbreak IS NULL
                          AND @OutbreakCasesIndicator = 0
                      )
                      OR (
                             hc.idfOutbreak IS NOT NULL
                             AND @OutbreakCasesIndicator = 1
                         )
                      OR (@OutbreakCasesIndicator IS NULL)
                  )
              AND (
                      hc.strCaseID LIKE '%' + TRIM(@ReportID) + '%'
                      OR @ReportID IS NULL
                  )
              AND (
                      hc.LegacyCaseID LIKE '%' + TRIM(@LegacyReportID) + '%'
                      OR @LegacyReportID IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + TRIM(@LocalOrFieldSampleID) + '%'
                      OR @LocalOrFieldSampleID IS NULL
                  )
              AND (
                      hc.idfsOutcome = @OutcomeID
                      OR @OutcomeID IS NULL
                  )
        GROUP BY hc.idfHumanCase;

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT hc.idfHumanCase
            FROM dbo.tlbHumanCase hc
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = hc.idfsFinalDiagnosis
                       AND oa.intRowStatus = 0
            WHERE intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND idfActor = @UserEmployeeID
        );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator
        FROM @Results res
        WHERE res.ReadPermissionIndicator = 1
        GROUP BY ID,
                 ReadPermissionIndicator,
                 AccessToPersonalDataPermissionIndicator,
                 AccessToGenderAndAgeDataPermissionIndicator,
                 WritePermissionIndicator,
                 DeletePermissionIndicator;


        WITH paging
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'ReportID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       hc.strCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ReportID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       hc.strCaseID
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'EnteredDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       hc.datEnteredDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'EnteredDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       hc.datEnteredDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       disease.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       disease.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PersonName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ISNULL(h.strLastName, N'') + ISNULL(', ' + h.strFirstName, N'')
                                                       + ISNULL(' ' + h.strSecondName, N'')
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PersonName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ISNULL(h.strLastName, N'') + ISNULL(', ' + h.strFirstName, N'')
                                                       + ISNULL(' ' + h.strSecondName, N'')
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PersonLocation'
                                                        AND @SortOrder = 'ASC' THEN
                                               (LH.AdminLevel1Name + ', ' + LH.AdminLevel2Name)
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PersonLocation'
                                                        AND @SortOrder = 'DESC' THEN
                                               (LH.AdminLevel1Name + ', ' + LH.AdminLevel2Name)
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ClassificationTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       finalClassification.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ClassificationTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       finalClassification.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ReportStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       reportStatus.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ReportStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       reportStatus.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'LegacyReportID'
                                                        AND @SortOrder = 'ASC' THEN
                                                       hc.LegacyCaseID
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'LegacyReportID'
                                                        AND @SortOrder = 'DESC' THEN
                                                       hc.LegacyCaseID
                                               END DESC
                                     ) AS ROWNUM,
                   res.ID AS ReportKey,
                   hc.strCaseId AS ReportID,
                   hc.LegacyCaseID AS LegacyReportID,
                   reportStatus.name AS ReportStatusTypeName,
                   reportType.name AS ReportTypeName,
                   hc.datTentativeDiagnosisDate AS TentativeDiagnosisDate,
                   hc.datFinalDiagnosisDate AS FinalDiagnosisDate,
                   ISNULL(finalClassification.name, initialClassification.name) AS ClassificationTypeName,
                   finalClassification.name AS FinalClassificationTypeName,
                   hc.datOnSetDate AS DateOfOnset,
                   hc.idfsFinalDiagnosis AS DiseaseID,
                   disease.Name AS DiseaseName,
                   h.idfHumanActual AS PersonMasterID,
                   hc.idfHuman AS PersonKey,
                   haai.EIDSSPersonID AS PersonID,
                   h.strPersonID AS PersonalID,
                   dbo.FN_GBL_ConcatFullName(h.strLastName, h.strFirstName, h.strSecondName) AS PersonName,
                   ISNULL(LH.AdminLevel1Name, '') + IIF(LH.AdminLevel2Name IS NULL, '', ', ')
                   + ISNULL(LH.AdminLevel2Name, '') AS PersonLocation,
                   ha.strEmployerName AS EmployerName,
                   hc.datEnteredDate AS EnteredDate,
                   ISNULL(p.strFamilyName, N'') + ISNULL(', ' + p.strFirstName, N'')
                   + ISNULL(' ' + p.strSecondName, N'') AS EnteredByPersonName,
                   hc.datModificationDate AS ModificationDate,
                   ISNULL(hospitalization.name, hospitalization.strDefault) AS HospitalizationStatus,
                   hc.idfsSite AS SiteID,
                   res.ReadPermissionIndicator AS ReadPermissionIndicator,
                   res.AccessToPersonalDataPermissionIndicator AS AccessToPersonalDataPermissionIndicator,
                   res.AccessToGenderAndAgeDataPermissionIndicator AS AccessToGenderAndAgeDataPermissionIndicator,
                   res.WritePermissionIndicator AS WritePermissionIndicator,
                   res.DeletePermissionIndicator AS DeletePermissionIndicator,
                   COUNT(*) OVER () AS RecordCount,
                   (
                       SELECT COUNT(*) FROM dbo.tlbHumanCase hc WHERE hc.intRowStatus = 0
                   ) AS TotalCount,
                   LH.AdminLevel2Name AS Region,
                   LH.AdminLevel3Name AS Rayon
            FROM @FinalResults res
                INNER JOIN dbo.tlbHumanCase hc
                    ON hc.idfHumanCase = res.ID
                INNER JOIN dbo.tlbHuman h
                    ON h.idfHuman = hc.idfHuman
                       AND h.intRowStatus = 0
                INNER JOIN dbo.tlbHumanActual ha
                    ON ha.idfHumanActual = h.idfHumanActual
                       AND ha.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON gl.idfGeoLocation = h.idfCurrentResidenceAddress
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
                LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) LH
                    ON LH.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.HumanActualAddlInfo haai
                    ON haai.HumanActualAddlInfoUID = ha.idfHumanActual
                       AND haai.intRowStatus = 0
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                    ON disease.idfsReference = hc.idfsFinalDiagnosis
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) initialClassification
                    ON initialClassification.idfsReference = hc.idfsInitialCaseStatus
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000011) finalClassification
                    ON finalClassification.idfsReference = hc.idfsFinalCaseStatus
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000111) reportStatus
                    ON reportStatus.idfsReference = hc.idfsCaseProgressStatus
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000144) reportType
                    ON reportType.idfsReference = hc.DiseaseReportTypeID
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000041) hospitalization
                    ON hospitalization.idfsReference = idfsHospitalizationStatus
                LEFT JOIN dbo.tlbPerson p
                    ON p.idfPerson = hc.idfPersonEnteredBy
                       AND p.intRowStatus = 0
           )
        SELECT ReportKey,
               ReportID,
               LegacyReportID,
               ReportStatusTypeName,
               ReportTypeName,
               TentativeDiagnosisDate,
               FinalDiagnosisDate,
               ClassificationTypeName,
               FinalClassificationTypeName,
               DateOfOnset,
               DiseaseID,
               DiseaseName,
               PersonMasterID,
               PersonKey,
               PersonID,
               PersonalID,
               PersonName,
               PersonLocation,
               EmployerName,
               EnteredDate,
               EnteredByPersonName,
               ModificationDate,
               HospitalizationStatus,
               SiteID,
               ReadPermissionIndicator,
               AccessToPersonalDataPermissionIndicator,
               AccessToGenderAndAgeDataPermissionIndicator,
               WritePermissionIndicator,
               DeletePermissionIndicator,
               RecordCount,
               TotalCount,
               TotalPages = (RecordCount / @PageSize) + IIF(RecordCount % @PageSize > 0, 1, 0),
               CurrentPage = @Page,
               Region,
               Rayon
        FROM paging
        WHERE RowNum > @firstRec
              AND RowNum < @lastRec;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USSP_GBL_COPY_GEOLOCATION_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USSP_GBL_COPY_GEOLOCATION_SET
--
-- Description:	If record with @GeoLocationIDCopy doesn't exist, new record with this ID is 
-- created. If original location record doesn't exist the empty record with @GeoLocationIDCopy is 
-- created.
--          
-- Author: Mandar Kulkarni
--
-- Revision History:
-- Name                Date       Change Detail
-- ------------------- ---------- ----------------------------------------------------------------
-- Stephen Long        11/18/2022 Initial release with data audit logic for SAUC30 and 31.
-- Stephen Long        11/28/2022 Changed column identifier for idfsLocation.
--
--Example of a call of procedure:
--DECLARE @RC int
--DECLARE @GeoLocationID bigint
--DECLARE @GeoLocationIDCopy bigint
--SET @GeoLocationID = 123890000000
--SET @GeoLocationIDCopy = 1

--EXECUTE @RC = USSP_GBL_COPY_GEOLOCATION_SET
--   @GeoLocationID
--  ,@GeoLocationIDCopy
--  ,1

-- delete dbo.tflGeoLocationFiltered WHERE idfGeoLocation = 1
-- delete dbo.tlbGeoLocation WHERE idfGeoLocation = 1
-- delete dbo.tlbGeoLocationShared WHERE idfGeoLocationShared = 1
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_GBL_COPY_GEOLOCATION_SET]
(
    @GeoLocationID BIGINT,
    @GeoLocationIDCopy BIGINT,
    @GlobalCopyAsDefaultIndicator BIT = 0,
    @DataAuditEventID BIGINT = NULL,
    @AuditUserName NVARCHAR(200) = NULL,
    @ReturnCode INT = 0 OUTPUT,
    @ReturnMsg NVARCHAR(MAX) = 'SUCCESS' OUTPUT
)
AS
DECLARE @GlobalOriginalIndicator BIT,
        @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectID BIGINT = @GeoLocationID,
        @ObjectGeoLocationSharedTableID BIGINT = 4572590000000, -- tlbGeoLocationShared
        @ObjectGeoLocationTableID BIGINT = 75580000000;         -- tlbGeoLocation
DECLARE @GeoLocationBeforeEdit TABLE
(
    GeoLocationID BIGINT,
    ResidentTypeID BIGINT,
    GroundTypeID BIGINT,
    GeoLocationTypeID BIGINT,
    LocationID BIGINT,
    PostalCode NVARCHAR(200),
    StreetName NVARCHAR(200),
    House NVARCHAR(200),
    Building NVARCHAR(200),
    Apartment NVARCHAR(200),
    AddressDescription NVARCHAR(200),
    Distance FLOAT,
    Latitude FLOAT,
    Longitude FLOAT,
    Accuracy FLOAT,
    Alignment FLOAT,
    ForeignAddressIndicator BIT,
    ForeignAddressString NVARCHAR(200),
    ShortAddressString NVARCHAR(2000)
);
DECLARE @GeoLocationAfterEdit TABLE
(
    GeoLocationID BIGINT,
    ResidentTypeID BIGINT,
    GroundTypeID BIGINT,
    GeoLocationTypeID BIGINT,
    LocationID BIGINT,
    PostalCode NVARCHAR(200),
    StreetName NVARCHAR(200),
    House NVARCHAR(200),
    Building NVARCHAR(200),
    Apartment NVARCHAR(200),
    AddressDescription NVARCHAR(200),
    Distance FLOAT,
    Latitude FLOAT,
    Longitude FLOAT,
    Accuracy FLOAT,
    Alignment FLOAT,
    ForeignAddressIndicator BIT,
    ForeignAddressString NVARCHAR(200),
    ShortAddressString NVARCHAR(2000)
);
BEGIN
    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data Audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = UserInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        IF @GlobalCopyAsDefaultIndicator = 1
        BEGIN
            IF NOT EXISTS
            (
                SELECT *
                FROM dbo.tlbGeoLocationShared
                WHERE idfGeoLocationShared = @GeoLocationIDCopy
            )
            BEGIN
                INSERT INTO dbo.tlbGeoLocationShared
                (
                    idfGeoLocationShared
                )
                VALUES (@GeoLocationIDCopy);
                SET @GlobalOriginalIndicator = 0;

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser
                )
                VALUES
                (
                    @DataAuditEventID, 
                    @ObjectGeoLocationSharedTableID, 
                    @GeoLocationIDCopy, 
                    10519001,
                    '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300))
                    + ',"idfObjectTable":' + CAST(@ObjectGeoLocationSharedTableID AS NVARCHAR(300)) + '}]',
                    @AuditUserName
                );
                -- End data audit
            END
        END
        ELSE
        BEGIN
            IF NOT EXISTS
            (
                SELECT *
                FROM dbo.tlbGeoLocation
                WHERE idfGeoLocation = @GeoLocationIDCopy
            )
            BEGIN
                INSERT INTO dbo.tlbGeoLocation
                (
                    idfGeoLocation
                )
                VALUES (@GeoLocationIDCopy);
                SET @GlobalOriginalIndicator = 1;

                                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser
                )
                VALUES
                (
                    @DataAuditEventID, 
                    @ObjectGeoLocationTableID, 
                    @GeoLocationIDCopy, 
                    10519001,
                    '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300))
                    + ',"idfObjectTable":' + CAST(@ObjectGeoLocationTableID AS NVARCHAR(300)) + '}]',
                    @AuditUserName
                );
                -- End data audit
            END
        END

        IF NOT @GlobalOriginalIndicator = 1
        BEGIN
            IF EXISTS
            (
                SELECT *
                FROM dbo.tlbGeoLocation
                WHERE idfGeoLocation = @GeoLocationIDCopy
            )
            BEGIN
                INSERT INTO @GeoLocationBeforeEdit
                (
                    GeoLocationID,
                    ResidentTypeID,
                    GroundTypeID,
                    GeoLocationTypeID,
                    LocationID,
                    PostalCode,
                    StreetName,
                    House,
                    Building,
                    Apartment,
                    AddressDescription,
                    Distance,
                    Latitude,
                    Longitude,
                    Accuracy,
                    Alignment,
                    ForeignAddressIndicator,
                    ForeignAddressString,
                    ShortAddressString
                )
                SELECT idfGeoLocation,
                       idfsResidentType,
                       idfsGroundType,
                       idfsGeoLocationType,
                       idfsLocation,
                       strPostCode,
                       strStreetName,
                       strHouse,
                       strBuilding,
                       strApartment,
                       strDescription,
                       dblDistance,
                       dblLatitude,
                       dblLongitude,
                       dblAccuracy,
                       dblAlignment,
                       blnForeignAddress,
                       strForeignAddress,
                       strShortAddressString
                FROM dbo.tlbGeoLocation
                WHERE idfGeoLocation = @GeoLocationID;

                UPDATE new
                SET idfsGroundType = old.idfsGroundType,
                    idfsGeoLocationType = old.idfsGeoLocationType,
                    idfsCountry = old.idfsCountry,
                    idfsRegion = old.idfsRegion,
                    idfsRayon = old.idfsRayon,
                    idfsSettlement = old.idfsSettlement,
                    strDescription = old.strDescription,
                    dblDistance = old.dblDistance,
                    dblLatitude = old.dblLatitude,
                    dblLongitude = old.dblLongitude,
                    dblAccuracy = old.dblAccuracy,
                    dblAlignment = old.dblAlignment,
                    strApartment = old.strApartment,
                    strBuilding = old.strBuilding,
                    strStreetName = old.strStreetName,
                    strHouse = old.strHouse,
                    strPostCode = old.strPostCode,
                    idfsResidentType = old.idfsResidentType,
                    idfsLocation = old.idfsLocation
                FROM dbo.tlbGeoLocation old
                    INNER JOIN dbo.tlbGeoLocation new
                        ON new.idfGeoLocation = @GeoLocationIDCopy
                           AND (
                                   ISNULL(new.idfsGroundType, 0) != ISNULL(old.idfsGroundType, 0)
                                   OR ISNULL(new.idfsGeoLocationType, 0) != ISNULL(old.idfsGeoLocationType, 0)
                                   OR ISNULL(new.idfsCountry, 0) != ISNULL(old.idfsCountry, 0)
                                   OR ISNULL(new.idfsRegion, 0) != ISNULL(old.idfsRegion, 0)
                                   OR ISNULL(new.idfsRayon, 0) != ISNULL(old.idfsRayon, 0)
                                   OR ISNULL(new.idfsSettlement, 0) != ISNULL(old.idfsSettlement, 0)
                                   OR ISNULL(new.strDescription, '') != ISNULL(old.strDescription, '')
                                   OR ISNULL(new.dblDistance, 0) != ISNULL(old.dblDistance, 0)
                                   OR ISNULL(new.dblLatitude, 0) != ISNULL(old.dblLatitude, 0)
                                   OR ISNULL(new.dblLongitude, 0) != ISNULL(old.dblLongitude, 0)
                                   OR ISNULL(new.dblAccuracy, 0) != ISNULL(old.dblAccuracy, 0)
                                   OR ISNULL(new.dblAlignment, 0) != ISNULL(old.dblAlignment, 0)
                                   OR ISNULL(new.strApartment, '') != ISNULL(old.strApartment, '')
                                   OR ISNULL(new.strBuilding, '') != ISNULL(old.strBuilding, '')
                                   OR ISNULL(new.strStreetName, '') != ISNULL(old.strStreetName, '')
                                   OR ISNULL(new.strHouse, '') != ISNULL(old.strHouse, '')
                                   OR ISNULL(new.strPostCode, '') != ISNULL(old.strPostCode, '')
                                   OR ISNULL(new.idfsResidentType, 0) != ISNULL(old.idfsResidentType, 0)
                                   OR ISNULL(new.idfsLocation, 0) != ISNULL(old.idfsLocation, 0)
                               )
                WHERE old.idfGeoLocation = @GeoLocationID;

                INSERT INTO @GeoLocationAfterEdit
                (
                    GeoLocationID,
                    ResidentTypeID,
                    GroundTypeID,
                    GeoLocationTypeID,
                    LocationID,
                    PostalCode,
                    StreetName,
                    House,
                    Building,
                    Apartment,
                    AddressDescription,
                    Distance,
                    Latitude,
                    Longitude,
                    Accuracy,
                    Alignment,
                    ForeignAddressIndicator,
                    ForeignAddressString,
                    ShortAddressString
                )
                SELECT idfGeoLocation,
                       idfsResidentType,
                       idfsGroundType,
                       idfsGeoLocationType,
                       idfsLocation,
                       strPostCode,
                       strStreetName,
                       strHouse,
                       strBuilding,
                       strApartment,
                       strDescription,
                       dblDistance,
                       dblLatitude,
                       dblLongitude,
                       dblAccuracy,
                       dblAlignment,
                       blnForeignAddress,
                       strForeignAddress,
                       strShortAddressString
                FROM dbo.tlbGeoLocation
                WHERE idfGeoLocation = @GeoLocationID;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79200000000,
                       a.GeoLocationID,
                       NULL,
                       b.ResidentTypeID,
                       a.ResidentTypeID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ResidentTypeID <> b.ResidentTypeID)
                      OR (
                             a.ResidentTypeID IS NOT NULL
                             AND b.ResidentTypeID IS NULL
                         )
                      OR (
                             a.ResidentTypeID IS NULL
                             AND b.ResidentTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79170000000,
                       a.GeoLocationID,
                       NULL,
                       b.GroundTypeID,
                       a.GroundTypeID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.GroundTypeID <> b.GroundTypeID)
                      OR (
                             a.GroundTypeID IS NOT NULL
                             AND b.GroundTypeID IS NULL
                         )
                      OR (
                             a.GroundTypeID IS NULL
                             AND b.GroundTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79160000000,
                       a.GeoLocationID,
                       NULL,
                       b.GeoLocationTypeID,
                       a.GeoLocationTypeID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.GeoLocationTypeID <> b.GeoLocationTypeID)
                      OR (
                             a.GeoLocationTypeID IS NOT NULL
                             AND b.GeoLocationTypeID IS NULL
                         )
                      OR (
                             a.GeoLocationTypeID IS NULL
                             AND b.GeoLocationTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       51523700000000,
                       a.GeoLocationID,
                       NULL,
                       b.LocationID,
                       a.LocationID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.LocationID <> b.LocationID)
                      OR (
                             a.LocationID IS NOT NULL
                             AND b.LocationID IS NULL
                         )
                      OR (
                             a.LocationID IS NULL
                             AND b.LocationID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79260000000,
                       a.GeoLocationID,
                       NULL,
                       b.PostalCode,
                       a.PostalCode,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.PostalCode <> b.PostalCode)
                      OR (
                             a.PostalCode IS NOT NULL
                             AND b.PostalCode IS NULL
                         )
                      OR (
                             a.PostalCode IS NULL
                             AND b.PostalCode IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79270000000,
                       a.GeoLocationID,
                       NULL,
                       b.StreetName,
                       a.StreetName,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.StreetName <> b.StreetName)
                      OR (
                             a.StreetName IS NOT NULL
                             AND b.StreetName IS NULL
                         )
                      OR (
                             a.StreetName IS NULL
                             AND b.StreetName IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79250000000,
                       a.GeoLocationID,
                       NULL,
                       b.House,
                       a.House,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.House <> b.House)
                      OR (
                             a.House IS NOT NULL
                             AND b.House IS NULL
                         )
                      OR (
                             a.House IS NULL
                             AND b.House IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79230000000,
                       a.GeoLocationID,
                       NULL,
                       b.Building,
                       a.Building,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Building <> b.Building)
                      OR (
                             a.Building IS NOT NULL
                             AND b.Building IS NULL
                         )
                      OR (
                             a.Building IS NULL
                             AND b.Building IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       4577890000000,
                       a.GeoLocationID,
                       NULL,
                       b.Apartment,
                       a.Apartment,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Apartment <> b.Apartment)
                      OR (
                             a.Apartment IS NOT NULL
                             AND b.Apartment IS NULL
                         )
                      OR (
                             a.Apartment IS NULL
                             AND b.Apartment IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79240000000,
                       a.GeoLocationID,
                       NULL,
                       b.AddressDescription,
                       a.AddressDescription,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.AddressDescription <> b.AddressDescription)
                      OR (
                             a.AddressDescription IS NOT NULL
                             AND b.AddressDescription IS NULL
                         )
                      OR (
                             a.AddressDescription IS NULL
                             AND b.AddressDescription IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79110000000,
                       a.GeoLocationID,
                       NULL,
                       b.Distance,
                       a.Distance,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Distance <> b.Distance)
                      OR (
                             a.Distance IS NOT NULL
                             AND b.Distance IS NULL
                         )
                      OR (
                             a.Distance IS NULL
                             AND b.Distance IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79120000000,
                       a.GeoLocationID,
                       NULL,
                       b.Latitude,
                       a.Latitude,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Latitude <> b.Latitude)
                      OR (
                             a.Latitude IS NOT NULL
                             AND b.Latitude IS NULL
                         )
                      OR (
                             a.Latitude IS NULL
                             AND b.Latitude IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79130000000,
                       a.GeoLocationID,
                       NULL,
                       b.Longitude,
                       a.Longitude,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Longitude <> b.Longitude)
                      OR (
                             a.Longitude IS NOT NULL
                             AND b.Longitude IS NULL
                         )
                      OR (
                             a.Longitude IS NULL
                             AND b.Longitude IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79090000000,
                       a.GeoLocationID,
                       NULL,
                       b.Accuracy,
                       a.Accuracy,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Accuracy <> b.Accuracy)
                      OR (
                             a.Accuracy IS NOT NULL
                             AND b.Accuracy IS NULL
                         )
                      OR (
                             a.Accuracy IS NULL
                             AND b.Accuracy IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79100000000,
                       a.GeoLocationID,
                       NULL,
                       b.Alignment,
                       a.Alignment,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Alignment <> b.Alignment)
                      OR (
                             a.Alignment IS NOT NULL
                             AND b.Alignment IS NULL
                         )
                      OR (
                             a.Alignment IS NULL
                             AND b.Alignment IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       4578780000000,
                       a.GeoLocationID,
                       NULL,
                       b.ForeignAddressIndicator,
                       a.ForeignAddressIndicator,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ForeignAddressIndicator <> b.ForeignAddressIndicator)
                      OR (
                             a.ForeignAddressIndicator IS NOT NULL
                             AND b.ForeignAddressIndicator IS NULL
                         )
                      OR (
                             a.ForeignAddressIndicator IS NULL
                             AND b.ForeignAddressIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       4578790000000,
                       a.GeoLocationID,
                       NULL,
                       b.ForeignAddressString,
                       a.ForeignAddressString,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ForeignAddressString <> b.ForeignAddressString)
                      OR (
                             a.ForeignAddressString IS NOT NULL
                             AND b.ForeignAddressString IS NULL
                         )
                      OR (
                             a.ForeignAddressString IS NULL
                             AND b.ForeignAddressString IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       51523680000000,
                       a.GeoLocationID,
                       NULL,
                       b.ShortAddressString,
                       a.ShortAddressString,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ShortAddressString <> b.ShortAddressString)
                      OR (
                             a.ShortAddressString IS NOT NULL
                             AND b.ShortAddressString IS NULL
                         )
                      OR (
                             a.ShortAddressString IS NULL
                             AND b.ShortAddressString IS NOT NULL
                         );
            END
            ELSE IF EXISTS
            (
                SELECT *
                FROM dbo.tlbGeoLocationShared
                WHERE idfGeoLocationShared = @GeoLocationIDCopy
            )
            BEGIN
                INSERT INTO @GeoLocationBeforeEdit
                (
                    GeoLocationID,
                    ResidentTypeID,
                    GroundTypeID,
                    GeoLocationTypeID,
                    LocationID,
                    PostalCode,
                    StreetName,
                    House,
                    Building,
                    Apartment,
                    AddressDescription,
                    Distance,
                    Latitude,
                    Longitude,
                    Accuracy,
                    Alignment,
                    ForeignAddressIndicator,
                    ForeignAddressString,
                    ShortAddressString
                )
                SELECT idfGeoLocation,
                       idfsResidentType,
                       idfsGroundType,
                       idfsGeoLocationType,
                       idfsLocation,
                       strPostCode,
                       strStreetName,
                       strHouse,
                       strBuilding,
                       strApartment,
                       strDescription,
                       dblDistance,
                       dblLatitude,
                       dblLongitude,
                       dblAccuracy,
                       dblAlignment,
                       blnForeignAddress,
                       strForeignAddress,
                       strShortAddressString
                FROM dbo.tlbGeoLocation
                WHERE idfGeoLocation = @GeoLocationID;

                UPDATE new
                SET idfsGroundType = old.idfsGroundType,
                    idfsGeoLocationType = old.idfsGeoLocationType,
                    idfsCountry = old.idfsCountry,
                    idfsRegion = old.idfsRegion,
                    idfsRayon = old.idfsRayon,
                    idfsSettlement = old.idfsSettlement,
                    strDescription = old.strDescription,
                    dblDistance = old.dblDistance,
                    dblLatitude = old.dblLatitude,
                    dblLongitude = old.dblLongitude,
                    dblAccuracy = old.dblAccuracy,
                    dblAlignment = old.dblAlignment,
                    strApartment = old.strApartment,
                    strBuilding = old.strBuilding,
                    strStreetName = old.strStreetName,
                    strHouse = old.strHouse,
                    strPostCode = old.strPostCode,
                    idfsResidentType = old.idfsResidentType,
                    idfsLocation = old.idfsLocation
                FROM dbo.tlbGeoLocation old
                    INNER JOIN dbo.tlbGeoLocationShared new
                        ON new.idfGeoLocationShared = @GeoLocationIDCopy
                           AND (
                                   ISNULL(new.idfsGroundType, 0) != ISNULL(old.idfsGroundType, 0)
                                   OR ISNULL(new.idfsGeoLocationType, 0) != ISNULL(old.idfsGeoLocationType, 0)
                                   OR ISNULL(new.idfsCountry, 0) != ISNULL(old.idfsCountry, 0)
                                   OR ISNULL(new.idfsRegion, 0) != ISNULL(old.idfsRegion, 0)
                                   OR ISNULL(new.idfsRayon, 0) != ISNULL(old.idfsRayon, 0)
                                   OR ISNULL(new.idfsSettlement, 0) != ISNULL(old.idfsSettlement, 0)
                                   OR ISNULL(new.strDescription, '') != ISNULL(old.strDescription, '')
                                   OR ISNULL(new.dblDistance, 0) != ISNULL(old.dblDistance, 0)
                                   OR ISNULL(new.dblLatitude, 0) != ISNULL(old.dblLatitude, 0)
                                   OR ISNULL(new.dblLongitude, 0) != ISNULL(old.dblLongitude, 0)
                                   OR ISNULL(new.dblAccuracy, 0) != ISNULL(old.dblAccuracy, 0)
                                   OR ISNULL(new.dblAlignment, 0) != ISNULL(old.dblAlignment, 0)
                                   OR ISNULL(new.strApartment, '') != ISNULL(old.strApartment, '')
                                   OR ISNULL(new.strBuilding, '') != ISNULL(old.strBuilding, '')
                                   OR ISNULL(new.strStreetName, '') != ISNULL(old.strStreetName, '')
                                   OR ISNULL(new.strHouse, '') != ISNULL(old.strHouse, '')
                                   OR ISNULL(new.strPostCode, '') != ISNULL(old.strPostCode, '')
                                   OR ISNULL(new.idfsResidentType, 0) != ISNULL(old.idfsResidentType, 0)
                                   OR ISNULL(new.idfsLocation, 0) != ISNULL(old.idfsLocation, 0)
                               )
                WHERE old.idfGeoLocation = @GeoLocationID;

                INSERT INTO @GeoLocationAfterEdit
                (
                    GeoLocationID,
                    ResidentTypeID,
                    GroundTypeID,
                    GeoLocationTypeID,
                    LocationID,
                    PostalCode,
                    StreetName,
                    House,
                    Building,
                    Apartment,
                    AddressDescription,
                    Distance,
                    Latitude,
                    Longitude,
                    Accuracy,
                    Alignment,
                    ForeignAddressIndicator,
                    ForeignAddressString,
                    ShortAddressString
                )
                SELECT idfGeoLocation,
                       idfsResidentType,
                       idfsGroundType,
                       idfsGeoLocationType,
                       idfsLocation,
                       strPostCode,
                       strStreetName,
                       strHouse,
                       strBuilding,
                       strApartment,
                       strDescription,
                       dblDistance,
                       dblLatitude,
                       dblLongitude,
                       dblAccuracy,
                       dblAlignment,
                       blnForeignAddress,
                       strForeignAddress,
                       strShortAddressString
                FROM dbo.tlbGeoLocation
                WHERE idfGeoLocation = @GeoLocationID;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79200000000,
                       a.GeoLocationID,
                       NULL,
                       b.ResidentTypeID,
                       a.ResidentTypeID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ResidentTypeID <> b.ResidentTypeID)
                      OR (
                             a.ResidentTypeID IS NOT NULL
                             AND b.ResidentTypeID IS NULL
                         )
                      OR (
                             a.ResidentTypeID IS NULL
                             AND b.ResidentTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79170000000,
                       a.GeoLocationID,
                       NULL,
                       b.GroundTypeID,
                       a.GroundTypeID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.GroundTypeID <> b.GroundTypeID)
                      OR (
                             a.GroundTypeID IS NOT NULL
                             AND b.GroundTypeID IS NULL
                         )
                      OR (
                             a.GroundTypeID IS NULL
                             AND b.GroundTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79160000000,
                       a.GeoLocationID,
                       NULL,
                       b.GeoLocationTypeID,
                       a.GeoLocationTypeID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.GeoLocationTypeID <> b.GeoLocationTypeID)
                      OR (
                             a.GeoLocationTypeID IS NOT NULL
                             AND b.GeoLocationTypeID IS NULL
                         )
                      OR (
                             a.GeoLocationTypeID IS NULL
                             AND b.GeoLocationTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       51523700000000,
                       a.GeoLocationID,
                       NULL,
                       b.LocationID,
                       a.LocationID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.LocationID <> b.LocationID)
                      OR (
                             a.LocationID IS NOT NULL
                             AND b.LocationID IS NULL
                         )
                      OR (
                             a.LocationID IS NULL
                             AND b.LocationID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79260000000,
                       a.GeoLocationID,
                       NULL,
                       b.PostalCode,
                       a.PostalCode,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.PostalCode <> b.PostalCode)
                      OR (
                             a.PostalCode IS NOT NULL
                             AND b.PostalCode IS NULL
                         )
                      OR (
                             a.PostalCode IS NULL
                             AND b.PostalCode IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79270000000,
                       a.GeoLocationID,
                       NULL,
                       b.StreetName,
                       a.StreetName,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.StreetName <> b.StreetName)
                      OR (
                             a.StreetName IS NOT NULL
                             AND b.StreetName IS NULL
                         )
                      OR (
                             a.StreetName IS NULL
                             AND b.StreetName IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79250000000,
                       a.GeoLocationID,
                       NULL,
                       b.House,
                       a.House,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.House <> b.House)
                      OR (
                             a.House IS NOT NULL
                             AND b.House IS NULL
                         )
                      OR (
                             a.House IS NULL
                             AND b.House IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79230000000,
                       a.GeoLocationID,
                       NULL,
                       b.Building,
                       a.Building,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Building <> b.Building)
                      OR (
                             a.Building IS NOT NULL
                             AND b.Building IS NULL
                         )
                      OR (
                             a.Building IS NULL
                             AND b.Building IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       4577890000000,
                       a.GeoLocationID,
                       NULL,
                       b.Apartment,
                       a.Apartment,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Apartment <> b.Apartment)
                      OR (
                             a.Apartment IS NOT NULL
                             AND b.Apartment IS NULL
                         )
                      OR (
                             a.Apartment IS NULL
                             AND b.Apartment IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79240000000,
                       a.GeoLocationID,
                       NULL,
                       b.AddressDescription,
                       a.AddressDescription,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.AddressDescription <> b.AddressDescription)
                      OR (
                             a.AddressDescription IS NOT NULL
                             AND b.AddressDescription IS NULL
                         )
                      OR (
                             a.AddressDescription IS NULL
                             AND b.AddressDescription IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79110000000,
                       a.GeoLocationID,
                       NULL,
                       b.Distance,
                       a.Distance,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Distance <> b.Distance)
                      OR (
                             a.Distance IS NOT NULL
                             AND b.Distance IS NULL
                         )
                      OR (
                             a.Distance IS NULL
                             AND b.Distance IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79120000000,
                       a.GeoLocationID,
                       NULL,
                       b.Latitude,
                       a.Latitude,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Latitude <> b.Latitude)
                      OR (
                             a.Latitude IS NOT NULL
                             AND b.Latitude IS NULL
                         )
                      OR (
                             a.Latitude IS NULL
                             AND b.Latitude IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79130000000,
                       a.GeoLocationID,
                       NULL,
                       b.Longitude,
                       a.Longitude,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Longitude <> b.Longitude)
                      OR (
                             a.Longitude IS NOT NULL
                             AND b.Longitude IS NULL
                         )
                      OR (
                             a.Longitude IS NULL
                             AND b.Longitude IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79090000000,
                       a.GeoLocationID,
                       NULL,
                       b.Accuracy,
                       a.Accuracy,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Accuracy <> b.Accuracy)
                      OR (
                             a.Accuracy IS NOT NULL
                             AND b.Accuracy IS NULL
                         )
                      OR (
                             a.Accuracy IS NULL
                             AND b.Accuracy IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79100000000,
                       a.GeoLocationID,
                       NULL,
                       b.Alignment,
                       a.Alignment,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Alignment <> b.Alignment)
                      OR (
                             a.Alignment IS NOT NULL
                             AND b.Alignment IS NULL
                         )
                      OR (
                             a.Alignment IS NULL
                             AND b.Alignment IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       4578780000000,
                       a.GeoLocationID,
                       NULL,
                       b.ForeignAddressIndicator,
                       a.ForeignAddressIndicator,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ForeignAddressIndicator <> b.ForeignAddressIndicator)
                      OR (
                             a.ForeignAddressIndicator IS NOT NULL
                             AND b.ForeignAddressIndicator IS NULL
                         )
                      OR (
                             a.ForeignAddressIndicator IS NULL
                             AND b.ForeignAddressIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       4578790000000,
                       a.GeoLocationID,
                       NULL,
                       b.ForeignAddressString,
                       a.ForeignAddressString,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ForeignAddressString <> b.ForeignAddressString)
                      OR (
                             a.ForeignAddressString IS NOT NULL
                             AND b.ForeignAddressString IS NULL
                         )
                      OR (
                             a.ForeignAddressString IS NULL
                             AND b.ForeignAddressString IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       51523680000000,
                       a.GeoLocationID,
                       NULL,
                       b.ShortAddressString,
                       a.ShortAddressString,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ShortAddressString <> b.ShortAddressString)
                      OR (
                             a.ShortAddressString IS NOT NULL
                             AND b.ShortAddressString IS NULL
                         )
                      OR (
                             a.ShortAddressString IS NULL
                             AND b.ShortAddressString IS NOT NULL
                         );
            END
            ELSE IF @GlobalCopyAsDefaultIndicator = 1
            BEGIN
                INSERT INTO dbo.tlbGeoLocationShared
                (
                    idfGeoLocationShared,
                    idfsGroundType,
                    idfsGeoLocationType,
                    idfsCountry,
                    idfsRegion,
                    idfsRayon,
                    idfsSettlement,
                    strDescription,
                    dblDistance,
                    dblLatitude,
                    dblLongitude,
                    dblAccuracy,
                    dblAlignment,
                    strApartment,
                    strBuilding,
                    strStreetName,
                    strHouse,
                    strPostCode,
                    idfsResidentType,
                    idfsLocation
                )
                SELECT @GeoLocationIDCopy,
                       idfsGroundType,
                       idfsGeoLocationType,
                       idfsCountry,
                       idfsRegion,
                       idfsRayon,
                       idfsSettlement,
                       strDescription,
                       dblDistance,
                       dblLatitude,
                       dblLongitude,
                       dblAccuracy,
                       dblAlignment,
                       strApartment,
                       strBuilding,
                       strStreetName,
                       strHouse,
                       strPostCode,
                       idfsResidentType,
                       idfsLocation
                FROM dbo.tlbGeoLocation
                WHERE idfGeoLocation = @GeoLocationID;

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser
                )
                VALUES
                (
                    @DataAuditEventID, 
                    @ObjectGeoLocationSharedTableID, 
                    @GeoLocationIDCopy, 
                    10519001,
                    '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300))
                    + ',"idfObjectTable":' + CAST(@ObjectGeoLocationSharedTableID AS NVARCHAR(300)) + '}]',
                    @AuditUserName
                );
                -- End data audit
            END
            ELSE
            BEGIN
                INSERT INTO dbo.tlbGeoLocation
                (
                    idfGeoLocation,
                    idfsGroundType,
                    idfsGeoLocationType,
                    idfsCountry,
                    idfsRegion,
                    idfsRayon,
                    idfsSettlement,
                    strDescription,
                    dblDistance,
                    dblLatitude,
                    dblLongitude,
                    dblAccuracy,
                    dblAlignment,
                    strApartment,
                    strBuilding,
                    strStreetName,
                    strHouse,
                    strPostCode,
                    idfsResidentType,
                    idfsLocation
                )
                SELECT @GeoLocationIDCopy,
                       idfsGroundType,
                       idfsGeoLocationType,
                       idfsCountry,
                       idfsRegion,
                       idfsRayon,
                       idfsSettlement,
                       strDescription,
                       dblDistance,
                       dblLatitude,
                       dblLongitude,
                       dblAccuracy,
                       dblAlignment,
                       strApartment,
                       strBuilding,
                       strStreetName,
                       strHouse,
                       strPostCode,
                       idfsResidentType,
                       idfsLocation
                FROM dbo.tlbGeoLocation
                WHERE idfGeoLocation = @GeoLocationID;

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser
                )
                VALUES
                (
                    @DataAuditEventID, 
                    @ObjectGeoLocationTableID, 
                    @GeoLocationIDCopy, 
                    10519001,
                    '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300))
                    + ',"idfObjectTable":' + CAST(@ObjectGeoLocationTableID AS NVARCHAR(300)) + '}]',
                    @AuditUserName
                );
                -- End data audit
            END
        END
        ELSE
        BEGIN
            IF EXISTS
            (
                SELECT *
                FROM dbo.tlbGeoLocation
                WHERE idfGeoLocation = @GeoLocationIDCopy
            )
            BEGIN
                INSERT INTO @GeoLocationBeforeEdit
                (
                    GeoLocationID,
                    ResidentTypeID,
                    GroundTypeID,
                    GeoLocationTypeID,
                    LocationID,
                    PostalCode,
                    StreetName,
                    House,
                    Building,
                    Apartment,
                    AddressDescription,
                    Distance,
                    Latitude,
                    Longitude,
                    Accuracy,
                    Alignment,
                    ForeignAddressIndicator,
                    ForeignAddressString,
                    ShortAddressString
                )
                SELECT idfGeoLocationShared,
                       idfsResidentType,
                       idfsGroundType,
                       idfsGeoLocationType,
                       idfsLocation,
                       strPostCode,
                       strStreetName,
                       strHouse,
                       strBuilding,
                       strApartment,
                       strDescription,
                       dblDistance,
                       dblLatitude,
                       dblLongitude,
                       dblAccuracy,
                       dblAlignment,
                       blnForeignAddress,
                       strForeignAddress,
                       strShortAddressString
                FROM dbo.tlbGeoLocationShared
                WHERE idfGeoLocationShared = @GeoLocationID;

                UPDATE new
                SET idfsGroundType = old.idfsGroundType,
                    idfsGeoLocationType = old.idfsGeoLocationType,
                    idfsCountry = old.idfsCountry,
                    idfsRegion = old.idfsRegion,
                    idfsRayon = old.idfsRayon,
                    idfsSettlement = old.idfsSettlement,
                    strDescription = old.strDescription,
                    dblDistance = old.dblDistance,
                    dblLatitude = old.dblLatitude,
                    dblLongitude = old.dblLongitude,
                    dblAccuracy = old.dblAccuracy,
                    dblAlignment = old.dblAlignment,
                    strApartment = old.strApartment,
                    strBuilding = old.strBuilding,
                    strStreetName = old.strStreetName,
                    strHouse = old.strHouse,
                    strPostCode = old.strPostCode,
                    idfsResidentType = old.idfsResidentType,
                    idfsLocation = old.idfsLocation
                FROM dbo.tlbGeoLocationShared old
                    INNER JOIN dbo.tlbGeoLocation new
                        ON new.idfGeoLocation = @GeoLocationIDCopy
                WHERE old.idfGeoLocationShared = @GeoLocationID
                      AND (
                              ISNULL(new.idfsGroundType, 0) != ISNULL(old.idfsGroundType, 0)
                              OR ISNULL(new.idfsGeoLocationType, 0) != ISNULL(old.idfsGeoLocationType, 0)
                              OR ISNULL(new.idfsCountry, 0) != ISNULL(old.idfsCountry, 0)
                              OR ISNULL(new.idfsRegion, 0) != ISNULL(old.idfsRegion, 0)
                              OR ISNULL(new.idfsRayon, 0) != ISNULL(old.idfsRayon, 0)
                              OR ISNULL(new.idfsSettlement, 0) != ISNULL(old.idfsSettlement, 0)
                              OR ISNULL(new.strDescription, '') != ISNULL(old.strDescription, '')
                              OR ISNULL(new.dblDistance, 0) != ISNULL(old.dblDistance, 0)
                              OR ISNULL(new.dblLatitude, 0) != ISNULL(old.dblLatitude, 0)
                              OR ISNULL(new.dblLongitude, 0) != ISNULL(old.dblLongitude, 0)
                              OR ISNULL(new.dblAccuracy, 0) != ISNULL(old.dblAccuracy, 0)
                              OR ISNULL(new.dblAlignment, 0) != ISNULL(old.dblAlignment, 0)
                              OR ISNULL(new.strApartment, '') != ISNULL(old.strApartment, '')
                              OR ISNULL(new.strBuilding, '') != ISNULL(old.strBuilding, '')
                              OR ISNULL(new.strStreetName, '') != ISNULL(old.strStreetName, '')
                              OR ISNULL(new.strHouse, '') != ISNULL(old.strHouse, '')
                              OR ISNULL(new.strPostCode, '') != ISNULL(old.strPostCode, '')
                              OR ISNULL(new.idfsResidentType, 0) != ISNULL(old.idfsResidentType, 0)
                              OR ISNULL(new.idfsLocation, 0) != ISNULL(old.idfsLocation, 0)
                          );

                INSERT INTO @GeoLocationAfterEdit
                (
                    GeoLocationID,
                    ResidentTypeID,
                    GroundTypeID,
                    GeoLocationTypeID,
                    LocationID,
                    PostalCode,
                    StreetName,
                    House,
                    Building,
                    Apartment,
                    AddressDescription,
                    Distance,
                    Latitude,
                    Longitude,
                    Accuracy,
                    Alignment,
                    ForeignAddressIndicator,
                    ForeignAddressString,
                    ShortAddressString
                )
                SELECT idfGeoLocationShared,
                       idfsResidentType,
                       idfsGroundType,
                       idfsGeoLocationType,
                       idfsLocation,
                       strPostCode,
                       strStreetName,
                       strHouse,
                       strBuilding,
                       strApartment,
                       strDescription,
                       dblDistance,
                       dblLatitude,
                       dblLongitude,
                       dblAccuracy,
                       dblAlignment,
                       blnForeignAddress,
                       strForeignAddress,
                       strShortAddressString
                FROM dbo.tlbGeoLocationShared
                WHERE idfGeoLocationShared = @GeoLocationID;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79200000000,
                       a.GeoLocationID,
                       NULL,
                       b.ResidentTypeID,
                       a.ResidentTypeID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ResidentTypeID <> b.ResidentTypeID)
                      OR (
                             a.ResidentTypeID IS NOT NULL
                             AND b.ResidentTypeID IS NULL
                         )
                      OR (
                             a.ResidentTypeID IS NULL
                             AND b.ResidentTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79170000000,
                       a.GeoLocationID,
                       NULL,
                       b.GroundTypeID,
                       a.GroundTypeID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.GroundTypeID <> b.GroundTypeID)
                      OR (
                             a.GroundTypeID IS NOT NULL
                             AND b.GroundTypeID IS NULL
                         )
                      OR (
                             a.GroundTypeID IS NULL
                             AND b.GroundTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79160000000,
                       a.GeoLocationID,
                       NULL,
                       b.GeoLocationTypeID,
                       a.GeoLocationTypeID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.GeoLocationTypeID <> b.GeoLocationTypeID)
                      OR (
                             a.GeoLocationTypeID IS NOT NULL
                             AND b.GeoLocationTypeID IS NULL
                         )
                      OR (
                             a.GeoLocationTypeID IS NULL
                             AND b.GeoLocationTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       51523710000000,
                       a.GeoLocationID,
                       NULL,
                       b.LocationID,
                       a.LocationID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.LocationID <> b.LocationID)
                      OR (
                             a.LocationID IS NOT NULL
                             AND b.LocationID IS NULL
                         )
                      OR (
                             a.LocationID IS NULL
                             AND b.LocationID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79260000000,
                       a.GeoLocationID,
                       NULL,
                       b.PostalCode,
                       a.PostalCode,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.PostalCode <> b.PostalCode)
                      OR (
                             a.PostalCode IS NOT NULL
                             AND b.PostalCode IS NULL
                         )
                      OR (
                             a.PostalCode IS NULL
                             AND b.PostalCode IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79270000000,
                       a.GeoLocationID,
                       NULL,
                       b.StreetName,
                       a.StreetName,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.StreetName <> b.StreetName)
                      OR (
                             a.StreetName IS NOT NULL
                             AND b.StreetName IS NULL
                         )
                      OR (
                             a.StreetName IS NULL
                             AND b.StreetName IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79250000000,
                       a.GeoLocationID,
                       NULL,
                       b.House,
                       a.House,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.House <> b.House)
                      OR (
                             a.House IS NOT NULL
                             AND b.House IS NULL
                         )
                      OR (
                             a.House IS NULL
                             AND b.House IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79230000000,
                       a.GeoLocationID,
                       NULL,
                       b.Building,
                       a.Building,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Building <> b.Building)
                      OR (
                             a.Building IS NOT NULL
                             AND b.Building IS NULL
                         )
                      OR (
                             a.Building IS NULL
                             AND b.Building IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       4577890000000,
                       a.GeoLocationID,
                       NULL,
                       b.Apartment,
                       a.Apartment,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Apartment <> b.Apartment)
                      OR (
                             a.Apartment IS NOT NULL
                             AND b.Apartment IS NULL
                         )
                      OR (
                             a.Apartment IS NULL
                             AND b.Apartment IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79240000000,
                       a.GeoLocationID,
                       NULL,
                       b.AddressDescription,
                       a.AddressDescription,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.AddressDescription <> b.AddressDescription)
                      OR (
                             a.AddressDescription IS NOT NULL
                             AND b.AddressDescription IS NULL
                         )
                      OR (
                             a.AddressDescription IS NULL
                             AND b.AddressDescription IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79110000000,
                       a.GeoLocationID,
                       NULL,
                       b.Distance,
                       a.Distance,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Distance <> b.Distance)
                      OR (
                             a.Distance IS NOT NULL
                             AND b.Distance IS NULL
                         )
                      OR (
                             a.Distance IS NULL
                             AND b.Distance IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79120000000,
                       a.GeoLocationID,
                       NULL,
                       b.Latitude,
                       a.Latitude,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Latitude <> b.Latitude)
                      OR (
                             a.Latitude IS NOT NULL
                             AND b.Latitude IS NULL
                         )
                      OR (
                             a.Latitude IS NULL
                             AND b.Latitude IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79130000000,
                       a.GeoLocationID,
                       NULL,
                       b.Longitude,
                       a.Longitude,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Longitude <> b.Longitude)
                      OR (
                             a.Longitude IS NOT NULL
                             AND b.Longitude IS NULL
                         )
                      OR (
                             a.Longitude IS NULL
                             AND b.Longitude IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79090000000,
                       a.GeoLocationID,
                       NULL,
                       b.Accuracy,
                       a.Accuracy,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Accuracy <> b.Accuracy)
                      OR (
                             a.Accuracy IS NOT NULL
                             AND b.Accuracy IS NULL
                         )
                      OR (
                             a.Accuracy IS NULL
                             AND b.Accuracy IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79100000000,
                       a.GeoLocationID,
                       NULL,
                       b.Alignment,
                       a.Alignment,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Alignment <> b.Alignment)
                      OR (
                             a.Alignment IS NOT NULL
                             AND b.Alignment IS NULL
                         )
                      OR (
                             a.Alignment IS NULL
                             AND b.Alignment IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       4578780000000,
                       a.GeoLocationID,
                       NULL,
                       b.ForeignAddressIndicator,
                       a.ForeignAddressIndicator,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ForeignAddressIndicator <> b.ForeignAddressIndicator)
                      OR (
                             a.ForeignAddressIndicator IS NOT NULL
                             AND b.ForeignAddressIndicator IS NULL
                         )
                      OR (
                             a.ForeignAddressIndicator IS NULL
                             AND b.ForeignAddressIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       4578790000000,
                       a.GeoLocationID,
                       NULL,
                       b.ForeignAddressString,
                       a.ForeignAddressString,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ForeignAddressString <> b.ForeignAddressString)
                      OR (
                             a.ForeignAddressString IS NOT NULL
                             AND b.ForeignAddressString IS NULL
                         )
                      OR (
                             a.ForeignAddressString IS NULL
                             AND b.ForeignAddressString IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       51523680000000,
                       a.GeoLocationID,
                       NULL,
                       b.ShortAddressString,
                       a.ShortAddressString,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ShortAddressString <> b.ShortAddressString)
                      OR (
                             a.ShortAddressString IS NOT NULL
                             AND b.ShortAddressString IS NULL
                         )
                      OR (
                             a.ShortAddressString IS NULL
                             AND b.ShortAddressString IS NOT NULL
                         );
            END
            ELSE IF EXISTS
            (
                SELECT *
                FROM dbo.tlbGeoLocationShared
                WHERE idfGeoLocationShared = @GeoLocationIDCopy
            )
            BEGIN
                INSERT INTO @GeoLocationBeforeEdit
                (
                    GeoLocationID,
                    ResidentTypeID,
                    GroundTypeID,
                    GeoLocationTypeID,
                    LocationID,
                    PostalCode,
                    StreetName,
                    House,
                    Building,
                    Apartment,
                    AddressDescription,
                    Distance,
                    Latitude,
                    Longitude,
                    Accuracy,
                    Alignment,
                    ForeignAddressIndicator,
                    ForeignAddressString,
                    ShortAddressString
                )
                SELECT idfGeoLocationShared,
                       idfsResidentType,
                       idfsGroundType,
                       idfsGeoLocationType,
                       idfsLocation,
                       strPostCode,
                       strStreetName,
                       strHouse,
                       strBuilding,
                       strApartment,
                       strDescription,
                       dblDistance,
                       dblLatitude,
                       dblLongitude,
                       dblAccuracy,
                       dblAlignment,
                       blnForeignAddress,
                       strForeignAddress,
                       strShortAddressString
                FROM dbo.tlbGeoLocationShared
                WHERE idfGeoLocationShared = @GeoLocationID;

                UPDATE new
                SET idfsGroundType = old.idfsGroundType,
                    idfsGeoLocationType = old.idfsGeoLocationType,
                    idfsCountry = old.idfsCountry,
                    idfsRegion = old.idfsRegion,
                    idfsRayon = old.idfsRayon,
                    idfsSettlement = old.idfsSettlement,
                    strDescription = old.strDescription,
                    dblDistance = old.dblDistance,
                    dblLatitude = old.dblLatitude,
                    dblLongitude = old.dblLongitude,
                    dblAccuracy = old.dblAccuracy,
                    dblAlignment = old.dblAlignment,
                    strApartment = old.strApartment,
                    strBuilding = old.strBuilding,
                    strStreetName = old.strStreetName,
                    strHouse = old.strHouse,
                    strPostCode = old.strPostCode,
                    idfsResidentType = old.idfsResidentType,
                    idfsLocation = old.idfsLocation
                FROM dbo.tlbGeoLocationShared old
                    INNER JOIN dbo.tlbGeoLocationShared new
                        ON new.idfGeoLocationShared = @GeoLocationIDCopy
                WHERE old.idfGeoLocationShared = @GeoLocationID
                      AND (
                              ISNULL(new.idfsGroundType, 0) != ISNULL(old.idfsGroundType, 0)
                              OR ISNULL(new.idfsGeoLocationType, 0) != ISNULL(old.idfsGeoLocationType, 0)
                              OR ISNULL(new.idfsCountry, 0) != ISNULL(old.idfsCountry, 0)
                              OR ISNULL(new.idfsRegion, 0) != ISNULL(old.idfsRegion, 0)
                              OR ISNULL(new.idfsRayon, 0) != ISNULL(old.idfsRayon, 0)
                              OR ISNULL(new.idfsSettlement, 0) != ISNULL(old.idfsSettlement, 0)
                              OR ISNULL(new.strDescription, '') != ISNULL(old.strDescription, '')
                              OR ISNULL(new.dblDistance, 0) != ISNULL(old.dblDistance, 0)
                              OR ISNULL(new.dblLatitude, 0) != ISNULL(old.dblLatitude, 0)
                              OR ISNULL(new.dblLongitude, 0) != ISNULL(old.dblLongitude, 0)
                              OR ISNULL(new.dblAccuracy, 0) != ISNULL(old.dblAccuracy, 0)
                              OR ISNULL(new.dblAlignment, 0) != ISNULL(old.dblAlignment, 0)
                              OR ISNULL(new.strApartment, '') != ISNULL(old.strApartment, '')
                              OR ISNULL(new.strBuilding, '') != ISNULL(old.strBuilding, '')
                              OR ISNULL(new.strStreetName, '') != ISNULL(old.strStreetName, '')
                              OR ISNULL(new.strHouse, '') != ISNULL(old.strHouse, '')
                              OR ISNULL(new.strPostCode, '') != ISNULL(old.strPostCode, '')
                              OR ISNULL(new.idfsResidentType, 0) != ISNULL(old.idfsResidentType, 0)
                              OR ISNULL(new.idfsLocation, 0) != ISNULL(old.idfsLocation, 0)
                          );

                INSERT INTO @GeoLocationAfterEdit
                (
                    GeoLocationID,
                    ResidentTypeID,
                    GroundTypeID,
                    GeoLocationTypeID,
                    LocationID,
                    PostalCode,
                    StreetName,
                    House,
                    Building,
                    Apartment,
                    AddressDescription,
                    Distance,
                    Latitude,
                    Longitude,
                    Accuracy,
                    Alignment,
                    ForeignAddressIndicator,
                    ForeignAddressString,
                    ShortAddressString
                )
                SELECT idfGeoLocationShared,
                       idfsResidentType,
                       idfsGroundType,
                       idfsGeoLocationType,
                       idfsLocation,
                       strPostCode,
                       strStreetName,
                       strHouse,
                       strBuilding,
                       strApartment,
                       strDescription,
                       dblDistance,
                       dblLatitude,
                       dblLongitude,
                       dblAccuracy,
                       dblAlignment,
                       blnForeignAddress,
                       strForeignAddress,
                       strShortAddressString
                FROM dbo.tlbGeoLocationShared
                WHERE idfGeoLocationShared = @GeoLocationID;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79200000000,
                       a.GeoLocationID,
                       NULL,
                       b.ResidentTypeID,
                       a.ResidentTypeID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ResidentTypeID <> b.ResidentTypeID)
                      OR (
                             a.ResidentTypeID IS NOT NULL
                             AND b.ResidentTypeID IS NULL
                         )
                      OR (
                             a.ResidentTypeID IS NULL
                             AND b.ResidentTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79170000000,
                       a.GeoLocationID,
                       NULL,
                       b.GroundTypeID,
                       a.GroundTypeID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.GroundTypeID <> b.GroundTypeID)
                      OR (
                             a.GroundTypeID IS NOT NULL
                             AND b.GroundTypeID IS NULL
                         )
                      OR (
                             a.GroundTypeID IS NULL
                             AND b.GroundTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79160000000,
                       a.GeoLocationID,
                       NULL,
                       b.GeoLocationTypeID,
                       a.GeoLocationTypeID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.GeoLocationTypeID <> b.GeoLocationTypeID)
                      OR (
                             a.GeoLocationTypeID IS NOT NULL
                             AND b.GeoLocationTypeID IS NULL
                         )
                      OR (
                             a.GeoLocationTypeID IS NULL
                             AND b.GeoLocationTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       51523710000000,
                       a.GeoLocationID,
                       NULL,
                       b.LocationID,
                       a.LocationID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.LocationID <> b.LocationID)
                      OR (
                             a.LocationID IS NOT NULL
                             AND b.LocationID IS NULL
                         )
                      OR (
                             a.LocationID IS NULL
                             AND b.LocationID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79260000000,
                       a.GeoLocationID,
                       NULL,
                       b.PostalCode,
                       a.PostalCode,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.PostalCode <> b.PostalCode)
                      OR (
                             a.PostalCode IS NOT NULL
                             AND b.PostalCode IS NULL
                         )
                      OR (
                             a.PostalCode IS NULL
                             AND b.PostalCode IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79270000000,
                       a.GeoLocationID,
                       NULL,
                       b.StreetName,
                       a.StreetName,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.StreetName <> b.StreetName)
                      OR (
                             a.StreetName IS NOT NULL
                             AND b.StreetName IS NULL
                         )
                      OR (
                             a.StreetName IS NULL
                             AND b.StreetName IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79250000000,
                       a.GeoLocationID,
                       NULL,
                       b.House,
                       a.House,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.House <> b.House)
                      OR (
                             a.House IS NOT NULL
                             AND b.House IS NULL
                         )
                      OR (
                             a.House IS NULL
                             AND b.House IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79230000000,
                       a.GeoLocationID,
                       NULL,
                       b.Building,
                       a.Building,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Building <> b.Building)
                      OR (
                             a.Building IS NOT NULL
                             AND b.Building IS NULL
                         )
                      OR (
                             a.Building IS NULL
                             AND b.Building IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       4577890000000,
                       a.GeoLocationID,
                       NULL,
                       b.Apartment,
                       a.Apartment,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Apartment <> b.Apartment)
                      OR (
                             a.Apartment IS NOT NULL
                             AND b.Apartment IS NULL
                         )
                      OR (
                             a.Apartment IS NULL
                             AND b.Apartment IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79240000000,
                       a.GeoLocationID,
                       NULL,
                       b.AddressDescription,
                       a.AddressDescription,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.AddressDescription <> b.AddressDescription)
                      OR (
                             a.AddressDescription IS NOT NULL
                             AND b.AddressDescription IS NULL
                         )
                      OR (
                             a.AddressDescription IS NULL
                             AND b.AddressDescription IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79110000000,
                       a.GeoLocationID,
                       NULL,
                       b.Distance,
                       a.Distance,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Distance <> b.Distance)
                      OR (
                             a.Distance IS NOT NULL
                             AND b.Distance IS NULL
                         )
                      OR (
                             a.Distance IS NULL
                             AND b.Distance IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79120000000,
                       a.GeoLocationID,
                       NULL,
                       b.Latitude,
                       a.Latitude,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Latitude <> b.Latitude)
                      OR (
                             a.Latitude IS NOT NULL
                             AND b.Latitude IS NULL
                         )
                      OR (
                             a.Latitude IS NULL
                             AND b.Latitude IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79130000000,
                       a.GeoLocationID,
                       NULL,
                       b.Longitude,
                       a.Longitude,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Longitude <> b.Longitude)
                      OR (
                             a.Longitude IS NOT NULL
                             AND b.Longitude IS NULL
                         )
                      OR (
                             a.Longitude IS NULL
                             AND b.Longitude IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79090000000,
                       a.GeoLocationID,
                       NULL,
                       b.Accuracy,
                       a.Accuracy,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Accuracy <> b.Accuracy)
                      OR (
                             a.Accuracy IS NOT NULL
                             AND b.Accuracy IS NULL
                         )
                      OR (
                             a.Accuracy IS NULL
                             AND b.Accuracy IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79100000000,
                       a.GeoLocationID,
                       NULL,
                       b.Alignment,
                       a.Alignment,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Alignment <> b.Alignment)
                      OR (
                             a.Alignment IS NOT NULL
                             AND b.Alignment IS NULL
                         )
                      OR (
                             a.Alignment IS NULL
                             AND b.Alignment IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       4578780000000,
                       a.GeoLocationID,
                       NULL,
                       b.ForeignAddressIndicator,
                       a.ForeignAddressIndicator,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ForeignAddressIndicator <> b.ForeignAddressIndicator)
                      OR (
                             a.ForeignAddressIndicator IS NOT NULL
                             AND b.ForeignAddressIndicator IS NULL
                         )
                      OR (
                             a.ForeignAddressIndicator IS NULL
                             AND b.ForeignAddressIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       4578790000000,
                       a.GeoLocationID,
                       NULL,
                       b.ForeignAddressString,
                       a.ForeignAddressString,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ForeignAddressString <> b.ForeignAddressString)
                      OR (
                             a.ForeignAddressString IS NOT NULL
                             AND b.ForeignAddressString IS NULL
                         )
                      OR (
                             a.ForeignAddressString IS NULL
                             AND b.ForeignAddressString IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       51523680000000,
                       a.GeoLocationID,
                       NULL,
                       b.ShortAddressString,
                       a.ShortAddressString,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ShortAddressString <> b.ShortAddressString)
                      OR (
                             a.ShortAddressString IS NOT NULL
                             AND b.ShortAddressString IS NULL
                         )
                      OR (
                             a.ShortAddressString IS NULL
                             AND b.ShortAddressString IS NOT NULL
                         );

            END
            ELSE IF @GlobalCopyAsDefaultIndicator = 1
            BEGIN
                INSERT INTO dbo.tlbGeoLocationShared
                (
                    idfGeoLocationShared,
                    idfsGroundType,
                    idfsGeoLocationType,
                    idfsCountry,
                    idfsRegion,
                    idfsRayon,
                    idfsSettlement,
                    strDescription,
                    dblDistance,
                    dblLatitude,
                    dblLongitude,
                    dblAccuracy,
                    dblAlignment,
                    strApartment,
                    strBuilding,
                    strStreetName,
                    strHouse,
                    strPostCode,
                    idfsResidentType,
                    idfsLocation
                )
                SELECT @GeoLocationIDCopy,
                       idfsGroundType,
                       idfsGeoLocationType,
                       idfsCountry,
                       idfsRegion,
                       idfsRayon,
                       idfsSettlement,
                       strDescription,
                       dblDistance,
                       dblLatitude,
                       dblLongitude,
                       dblAccuracy,
                       dblAlignment,
                       strApartment,
                       strBuilding,
                       strStreetName,
                       strHouse,
                       strPostCode,
                       idfsResidentType,
                       idfsLocation
                FROM dbo.tlbGeoLocationShared
                WHERE idfGeoLocationShared = @GeoLocationID;

                                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser
                )
                VALUES
                (
                    @DataAuditEventID, 
                    @ObjectGeoLocationSharedTableID, 
                    @GeoLocationIDCopy, 
                    10519001,
                    '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300))
                    + ',"idfObjectTable":' + CAST(@ObjectGeoLocationSharedTableID AS NVARCHAR(300)) + '}]',
                    @AuditUserName
                );
                -- End data audit
            END
            ELSE
            BEGIN
                INSERT INTO dbo.tlbGeoLocation
                (
                    idfGeoLocation,
                    idfsGroundType,
                    idfsGeoLocationType,
                    idfsCountry,
                    idfsRegion,
                    idfsRayon,
                    idfsSettlement,
                    strDescription,
                    dblDistance,
                    dblLatitude,
                    dblLongitude,
                    dblAccuracy,
                    dblAlignment,
                    strApartment,
                    strBuilding,
                    strStreetName,
                    strHouse,
                    strPostCode,
                    idfsResidentType,
                    idfsLocation
                )
                SELECT @GeoLocationIDCopy,
                       idfsGroundType,
                       idfsGeoLocationType,
                       idfsCountry,
                       idfsRegion,
                       idfsRayon,
                       idfsSettlement,
                       strDescription,
                       dblDistance,
                       dblLatitude,
                       dblLongitude,
                       dblAccuracy,
                       dblAlignment,
                       strApartment,
                       strBuilding,
                       strStreetName,
                       strHouse,
                       strPostCode,
                       idfsResidentType,
                       idfsLocation
                FROM dbo.tlbGeoLocationShared
                WHERE idfGeoLocationShared = @GeoLocationID;

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser
                )
                VALUES
                (
                    @DataAuditEventID, 
                    @ObjectGeoLocationTableID, 
                    @GeoLocationIDCopy, 
                    10519001,
                    '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300))
                    + ',"idfObjectTable":' + CAST(@ObjectGeoLocationTableID AS NVARCHAR(300)) + '}]',
                    @AuditUserName
                );
                -- End data audit
            END
        END

        SELECT @ReturnCode 'ReturnCode',
               @ReturnMsg 'ReturnMessage';
    END TRY
    BEGIN CATCH
        THROW;

    END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USSP_GBL_SAMPLES_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USSP_GBL_SAMPLES_SET
--
-- Description:	Inserts or updates sample records for various non-laboratory module use cases.
--
--	Revision History:
--	Name               Date       Change Detail
--	------------------ ---------- ----------------------------------------------------------------
-- Stephen Long        11/21/2022 Initial release with data audit logic for SAUC30 and 31.
-- Stephen Long        11/29/2022 Added delete data audit logic.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_GBL_SAMPLES_SET]
(
    @AuditUserName NVARCHAR(200) = NULL,
    @DataAuditEventID BIGINT = NULL,
    @SampleID BIGINT OUTPUT,
    @SampleTypeID BIGINT,
    @RootSampleID BIGINT = NULL,
    @ParentSampleID BIGINT = NULL,
    @HumanID BIGINT = NULL,
    @SpeciesID BIGINT = NULL,
    @AnimalID BIGINT = NULL,
    @VectorID BIGINT = NULL,
    @MonitoringSessionID BIGINT = NULL,
    @VectorSessionID BIGINT = NULL,
    @HumanDiseaseReportID BIGINT = NULL,
    @VeterinaryDiseaseReportID BIGINT = NULL,
    @CollectionDate DATETIME = NULL,
    @CollectedByPersonID BIGINT = NULL,
    @CollectedByOrganizationID BIGINT = NULL,
    @SentDate DATETIME = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @EIDSSLocalFieldSampleID NVARCHAR(200) = NULL,
    @SiteID BIGINT,
    @EnteredDate DATETIME = NULL,
    @ReadOnlyIndicator BIT,
    @SampleStatusTypeID BIGINT = NULL,
    @Comments NVARCHAR(500) = NULL,
    @CurrentSiteID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @BirdStatusTypeID BIGINT = NULL,
    @RowStatus INT,
    @RowAction CHAR
)
AS
DECLARE @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectID BIGINT = @SampleID,
        @ObjectTableID BIGINT = 75620000000; -- tlbMaterial
DECLARE @SampleBeforeEdit TABLE
(
    SampleID BIGINT,
    SampleTypeID BIGINT,
    RootSampleID BIGINT,
    ParentSampleID BIGINT,
    HumanID BIGINT,
    SpeciesID BIGINT,
    AnimalID BIGINT,
    MonitoringSessionID BIGINT,
    FieldCollectedByPersonID BIGINT,
    FieldCollectedByOfficeID BIGINT,
    MainTestID BIGINT,
    FieldCollectionDate DATETIME,
    FieldSentDate DATETIME,
    FieldBarcodeID NVARCHAR(200),
    CalculatedCaseID NVARCHAR(200),
    CalculatedHumanName NVARCHAR(700),
    VectorSurveillanceSessionID BIGINT,
    VectorID BIGINT,
    SubdivisionID BIGINT,
    SampleStatusTypeID BIGINT,
    DepartmentID BIGINT,
    DestroyedByPersonID BIGINT,
    EnteringDate DATETIME,
    DestructionDate DATETIME,
    BarcodeID NVARCHAR(200),
    Note NVARCHAR(500),
    SendToOfficeID BIGINT,
    ReadOnlyIndicator BIT,
    BirdStatusTypeID BIGINT,
    HumanDiseaseReportID BIGINT,
    VeterinaryDiseaseReportID BIGINT,
    AccessionDate DATETIME,
    AccessionConditionTypeID BIGINT,
    Condition NVARCHAR(200),
    AccessionByPersonID BIGINT,
    DestructionMethodTypeID BIGINT,
    CurrentSiteID BIGINT,
    SampleKindTypeID BIGINT,
    AccessionIndicator INT,
    ShowInCaseOrSessionIndicator INT,
    ShowInLabListIndicator INT,
    ShowInDispositionListIndicator INT,
    ShowInAccessionInFormIndicator INT,
    MarkedForDispositionByPersonID BIGINT,
    OutOfRepositoryDate DATETIME,
    SampleStatusDate DATETIME,
    RowStatus INT
);
DECLARE @SampleAfterEdit TABLE
(
    SampleID BIGINT,
    SampleTypeID BIGINT,
    RootSampleID BIGINT,
    ParentSampleID BIGINT,
    HumanID BIGINT,
    SpeciesID BIGINT,
    AnimalID BIGINT,
    MonitoringSessionID BIGINT,
    FieldCollectedByPersonID BIGINT,
    FieldCollectedByOfficeID BIGINT,
    MainTestID BIGINT,
    FieldCollectionDate DATETIME,
    FieldSentDate DATETIME,
    FieldBarcodeID NVARCHAR(200),
    CalculatedCaseID NVARCHAR(200),
    CalculatedHumanName NVARCHAR(700),
    VectorSurveillanceSessionID BIGINT,
    VectorID BIGINT,
    SubdivisionID BIGINT,
    SampleStatusTypeID BIGINT,
    DepartmentID BIGINT,
    DestroyedByPersonID BIGINT,
    EnteringDate DATETIME,
    DestructionDate DATETIME,
    BarcodeID NVARCHAR(200),
    Note NVARCHAR(500),
    SendToOfficeID BIGINT,
    ReadOnlyIndicator BIT,
    BirdStatusTypeID BIGINT,
    HumanDiseaseReportID BIGINT,
    VeterinaryDiseaseReportID BIGINT,
    AccessionDate DATETIME,
    AccessionConditionTypeID BIGINT,
    Condition NVARCHAR(200),
    AccessionByPersonID BIGINT,
    DestructionMethodTypeID BIGINT,
    CurrentSiteID BIGINT,
    SampleKindTypeID BIGINT,
    AccessionIndicator INT,
    ShowInCaseOrSessionIndicator INT,
    ShowInLabListIndicator INT,
    ShowInDispositionListIndicator INT,
    ShowInAccessionInFormIndicator INT,
    MarkedForDispositionByPersonID BIGINT,
    OutOfRepositoryDate DATETIME,
    SampleStatusDate DATETIME,
    RowStatus INT
);
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data Audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = UserInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        --Local/field sample EIDSS ID. Only system assign when user leaves blank.
        IF @EIDSSLocalFieldSampleID IS NULL
           OR @EIDSSLocalFieldSampleID = ''
        BEGIN
            EXECUTE dbo.USP_GBL_NextNumber_GET @ObjectName = N'Sample Field Barcode',
                                               @NextNumberValue = @EIDSSLocalFieldSampleID OUTPUT,
                                               @InstallationSite = NULL;
        END;

        IF @RowAction = 'I'
           OR @RowAction = '1' -- Insert
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = N'tlbMaterial',
                                              @idfsKey = @SampleID OUTPUT;

            INSERT INTO dbo.tlbMaterial
            (
                idfMaterial,
                idfsSampleType,
                idfRootMaterial,
                idfParentMaterial,
                idfHuman,
                idfSpecies,
                idfAnimal,
                idfMonitoringSession,
                idfFieldCollectedByPerson,
                idfFieldCollectedByOffice,
                idfMainTest,
                datFieldCollectionDate,
                datFieldSentDate,
                strFieldBarcode,
                idfVectorSurveillanceSession,
                idfVector,
                idfsSampleStatus,
                datEnteringDate,
                strNote,
                idfsSite,
                intRowStatus,
                rowguid,
                idfSendToOffice,
                blnReadOnly,
                idfsBirdStatus,
                idfHumanCase,
                idfVetCase,
                idfsCurrentSite,
                SourceSystemNameID,
                SourceSystemKeyValue,
                DiseaseID,
                AuditCreateUser,
                AuditCreateDTM,
                AuditUpdateUser,
                AuditUpdateDTM,
                TestUnassignedIndicator,
                TestCompletedIndicator,
                TransferIndicator
            )
            VALUES
            (@SampleID,
             @SampleTypeID,
             @SampleID,
             @ParentSampleID,
             @HumanID,
             @SpeciesID,
             @AnimalID,
             @MonitoringSessionID,
             @CollectedByPersonID,
             @CollectedByOrganizationID,
             NULL,
             @CollectionDate,
             @SentDate,
             @EIDSSLocalFieldSampleID,
             @VectorSessionID,
             @VectorID,
             @SampleStatusTypeID,
             GETDATE(),
             @Comments,
             @SiteID,
             0  ,
             NEWID(),
             @SentToOrganizationID,
             @ReadOnlyIndicator,
             @BirdStatusTypeID,
             @HumanDiseaseReportID,
             @VeterinaryDiseaseReportID,
             @CurrentSiteID,
             10519001,
             '[{"idfMaterial":' + CAST(@SampleID AS NVARCHAR(300)) + '}]',
             @DiseaseID,
             @AuditUserName,
             GETDATE(),
             @AuditUserName,
             GETDATE(),
             1  ,
             0  ,
             0
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @SampleID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName
            );
        -- End data audit
        END;
        ELSE
        BEGIN
            INSERT INTO @SampleBeforeEdit
            (
                SampleID,
                SampleTypeID,
                RootSampleID,
                ParentSampleID,
                HumanID,
                SpeciesID,
                AnimalID,
                MonitoringSessionID,
                FieldCollectedByPersonID,
                FieldCollectedByOfficeID,
                MainTestID,
                FieldCollectionDate,
                FieldSentDate,
                FieldBarcodeID,
                CalculatedCaseID,
                CalculatedHumanName,
                VectorSurveillanceSessionID,
                VectorID,
                SubdivisionID,
                SampleStatusTypeID,
                DepartmentID,
                DestroyedByPersonID,
                EnteringDate,
                DestructionDate,
                BarcodeID,
                Note,
                SendToOfficeID,
                ReadOnlyIndicator,
                BirdStatusTypeID,
                HumanDiseaseReportID,
                VeterinaryDiseaseReportID,
                AccessionDate,
                AccessionConditionTypeID,
                Condition,
                AccessionByPersonID,
                DestructionMethodTypeID,
                CurrentSiteID,
                SampleKindTypeID,
                AccessionIndicator,
                ShowInCaseOrSessionIndicator,
                ShowInLabListIndicator,
                ShowInDispositionListIndicator,
                ShowInAccessionInFormIndicator,
                MarkedForDispositionByPersonID,
                OutOfRepositoryDate,
                SampleStatusDate,
                RowStatus
            )
            SELECT idfMaterial,
                   idfsSampleType,
                   idfRootMaterial,
                   idfParentMaterial,
                   idfHuman,
                   idfSpecies,
                   idfAnimal,
                   idfMonitoringSession,
                   idfFieldCollectedByPerson,
                   idfFieldCollectedByOffice,
                   idfMainTest,
                   datFieldCollectionDate,
                   datFieldSentDate,
                   strFieldBarcode,
                   strCalculatedCaseID,
                   strCalculatedHumanName,
                   idfVectorSurveillanceSession,
                   idfVector,
                   idfSubdivision,
                   idfsSampleStatus,
                   idfInDepartment,
                   idfDestroyedByPerson,
                   datEnteringDate,
                   datDestructionDate,
                   strBarcode,
                   strNote,
                   idfSendToOffice,
                   blnReadOnly,
                   idfsBirdStatus,
                   idfHumanCase,
                   idfVetCase,
                   datAccession,
                   idfsAccessionCondition,
                   strCondition,
                   idfAccesionByPerson,
                   idfsDestructionMethod,
                   idfsCurrentSite,
                   idfsSampleKind,
                   blnAccessioned,
                   blnShowInCaseOrSession,
                   blnShowInLabList,
                   blnShowInDispositionList,
                   blnShowInAccessionInForm,
                   idfMarkedForDispositionByPerson,
                   datOutOfRepositoryDate,
                   datSampleStatusDate,
                   intRowStatus
            FROM dbo.tlbMaterial
            WHERE idfMaterial = @SampleID;

            UPDATE dbo.tlbMaterial
            SET idfsSampleType = @SampleTypeID,
                idfHuman = @HumanID,
                idfSpecies = @SpeciesID,
                idfAnimal = @AnimalID,
                idfMonitoringSession = @MonitoringSessionID,
                idfFieldCollectedByPerson = @CollectedByPersonID,
                idfFieldCollectedByOffice = @CollectedByOrganizationID,
                datFieldCollectionDate = @CollectionDate,
                datFieldSentDate = @SentDate,
                strFieldBarcode = @EIDSSLocalFieldSampleID,
                idfVectorSurveillanceSession = @VectorSessionID,
                idfVector = @VectorID,
                strNote = @Comments,
                idfsSite = @SiteID,
                intRowStatus = @RowStatus,
                idfSendToOffice = @SentToOrganizationID,
                blnReadOnly = @ReadOnlyIndicator,
                idfHumanCase = @HumanDiseaseReportID,
                idfVetCase = @VeterinaryDiseaseReportID,
                DiseaseID = @DiseaseID,
                idfsBirdStatus = @BirdStatusTypeID,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfMaterial = @SampleID;

            INSERT INTO @SampleAfterEdit
            (
                SampleID,
                SampleTypeID,
                RootSampleID,
                ParentSampleID,
                HumanID,
                SpeciesID,
                AnimalID,
                MonitoringSessionID,
                FieldCollectedByPersonID,
                FieldCollectedByOfficeID,
                MainTestID,
                FieldCollectionDate,
                FieldSentDate,
                FieldBarcodeID,
                CalculatedCaseID,
                CalculatedHumanName,
                VectorSurveillanceSessionID,
                VectorID,
                SubdivisionID,
                SampleStatusTypeID,
                DepartmentID,
                DestroyedByPersonID,
                EnteringDate,
                DestructionDate,
                BarcodeID,
                Note,
                SendToOfficeID,
                ReadOnlyIndicator,
                BirdStatusTypeID,
                HumanDiseaseReportID,
                VeterinaryDiseaseReportID,
                AccessionDate,
                AccessionConditionTypeID,
                Condition,
                AccessionByPersonID,
                DestructionMethodTypeID,
                CurrentSiteID,
                SampleKindTypeID,
                AccessionIndicator,
                ShowInCaseOrSessionIndicator,
                ShowInLabListIndicator,
                ShowInDispositionListIndicator,
                ShowInAccessionInFormIndicator,
                MarkedForDispositionByPersonID,
                OutOfRepositoryDate,
                SampleStatusDate,
                RowStatus
            )
            SELECT idfMaterial,
                   idfsSampleType,
                   idfRootMaterial,
                   idfParentMaterial,
                   idfHuman,
                   idfSpecies,
                   idfAnimal,
                   idfMonitoringSession,
                   idfFieldCollectedByPerson,
                   idfFieldCollectedByOffice,
                   idfMainTest,
                   datFieldCollectionDate,
                   datFieldSentDate,
                   strFieldBarcode,
                   strCalculatedCaseID,
                   strCalculatedHumanName,
                   idfVectorSurveillanceSession,
                   idfVector,
                   idfSubdivision,
                   idfsSampleStatus,
                   idfInDepartment,
                   idfDestroyedByPerson,
                   datEnteringDate,
                   datDestructionDate,
                   strBarcode,
                   strNote,
                   idfSendToOffice,
                   blnReadOnly,
                   idfsBirdStatus,
                   idfHumanCase,
                   idfVetCase,
                   datAccession,
                   idfsAccessionCondition,
                   strCondition,
                   idfAccesionByPerson,
                   idfsDestructionMethod,
                   idfsCurrentSite,
                   idfsSampleKind,
                   blnAccessioned,
                   blnShowInCaseOrSession,
                   blnShowInLabList,
                   blnShowInDispositionList,
                   blnShowInAccessionInForm,
                   idfMarkedForDispositionByPerson,
                   datOutOfRepositoryDate,
                   datSampleStatusDate,
                   intRowStatus
            FROM dbo.tlbMaterial
            WHERE idfMaterial = @SampleID;

            IF @RowStatus = 0
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       49545390000000,
                       a.SampleID,
                       NULL,
                       b.SampleTypeID,
                       a.SampleTypeID,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.SampleTypeID <> b.SampleTypeID)
                      OR (
                             a.SampleTypeID IS NOT NULL
                             AND b.SampleTypeID IS NULL
                         )
                      OR (
                             a.SampleTypeID IS NULL
                             AND b.SampleTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       49545400000000,
                       a.SampleID,
                       NULL,
                       b.RootSampleID,
                       a.RootSampleID,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.RootSampleID <> b.RootSampleID)
                      OR (
                             a.RootSampleID IS NOT NULL
                             AND b.RootSampleID IS NULL
                         )
                      OR (
                             a.RootSampleID IS NULL
                             AND b.RootSampleID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       79970000000,
                       a.SampleID,
                       NULL,
                       b.ParentSampleID,
                       a.ParentSampleID,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.ParentSampleID <> b.ParentSampleID)
                      OR (
                             a.ParentSampleID IS NOT NULL
                             AND b.ParentSampleID IS NULL
                         )
                      OR (
                             a.ParentSampleID IS NULL
                             AND b.ParentSampleID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572430000000,
                       a.SampleID,
                       NULL,
                       b.HumanID,
                       a.HumanID,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.HumanID <> b.HumanID)
                      OR (
                             a.HumanID IS NOT NULL
                             AND b.HumanID IS NULL
                         )
                      OR (
                             a.HumanID IS NULL
                             AND b.HumanID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572440000000,
                       a.SampleID,
                       NULL,
                       b.SpeciesID,
                       a.SpeciesID,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.SpeciesID <> b.SpeciesID)
                      OR (
                             a.SpeciesID IS NOT NULL
                             AND b.SpeciesID IS NULL
                         )
                      OR (
                             a.SpeciesID IS NULL
                             AND b.SpeciesID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572450000000,
                       a.SampleID,
                       NULL,
                       b.AnimalID,
                       a.AnimalID,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.AnimalID <> b.AnimalID)
                      OR (
                             a.AnimalID IS NOT NULL
                             AND b.AnimalID IS NULL
                         )
                      OR (
                             a.AnimalID IS NULL
                             AND b.AnimalID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572470000000,
                       a.SampleID,
                       NULL,
                       b.MonitoringSessionID,
                       a.MonitoringSessionID,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.MonitoringSessionID <> b.MonitoringSessionID)
                      OR (
                             a.MonitoringSessionID IS NOT NULL
                             AND b.MonitoringSessionID IS NULL
                         )
                      OR (
                             a.MonitoringSessionID IS NULL
                             AND b.MonitoringSessionID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       79950000000,
                       a.SampleID,
                       NULL,
                       b.FieldCollectedByPersonID,
                       a.FieldCollectedByPersonID,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.FieldCollectedByPersonID <> b.FieldCollectedByPersonID)
                      OR (
                             a.FieldCollectedByPersonID IS NOT NULL
                             AND b.FieldCollectedByPersonID IS NULL
                         )
                      OR (
                             a.FieldCollectedByPersonID IS NULL
                             AND b.FieldCollectedByPersonID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       79940000000,
                       a.SampleID,
                       NULL,
                       b.FieldCollectedByOfficeID,
                       a.FieldCollectedByOfficeID,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.FieldCollectedByOfficeID <> b.FieldCollectedByOfficeID)
                      OR (
                             a.FieldCollectedByOfficeID IS NOT NULL
                             AND b.FieldCollectedByOfficeID IS NULL
                         )
                      OR (
                             a.FieldCollectedByOfficeID IS NULL
                             AND b.FieldCollectedByOfficeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       49545410000000,
                       a.SampleID,
                       NULL,
                       b.MainTestID,
                       a.MainTestID,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.MainTestID <> b.MainTestID)
                      OR (
                             a.MainTestID IS NOT NULL
                             AND b.MainTestID IS NULL
                         )
                      OR (
                             a.MainTestID IS NULL
                             AND b.MainTestID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       79920000000,
                       a.SampleID,
                       NULL,
                       b.FieldCollectionDate,
                       a.FieldCollectionDate,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.FieldCollectionDate <> b.FieldCollectionDate)
                      OR (
                             a.FieldCollectionDate IS NOT NULL
                             AND b.FieldCollectionDate IS NULL
                         )
                      OR (
                             a.FieldCollectionDate IS NULL
                             AND b.FieldCollectionDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       79930000000,
                       a.SampleID,
                       NULL,
                       b.FieldSentDate,
                       a.FieldSentDate,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.FieldSentDate <> b.FieldSentDate)
                      OR (
                             a.FieldSentDate IS NOT NULL
                             AND b.FieldSentDate IS NULL
                         )
                      OR (
                             a.FieldSentDate IS NULL
                             AND b.FieldSentDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80030000000,
                       a.SampleID,
                       NULL,
                       b.FieldBarcodeID,
                       a.FieldBarcodeID,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.FieldBarcodeID <> b.FieldBarcodeID)
                      OR (
                             a.FieldBarcodeID IS NOT NULL
                             AND b.FieldBarcodeID IS NULL
                         )
                      OR (
                             a.FieldBarcodeID IS NULL
                             AND b.FieldBarcodeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572480000000,
                       a.SampleID,
                       NULL,
                       b.CalculatedCaseID,
                       a.CalculatedCaseID,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.CalculatedCaseID <> b.CalculatedCaseID)
                      OR (
                             a.CalculatedCaseID IS NOT NULL
                             AND b.CalculatedCaseID IS NULL
                         )
                      OR (
                             a.CalculatedCaseID IS NULL
                             AND b.CalculatedCaseID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572490000000,
                       a.SampleID,
                       NULL,
                       b.CalculatedHumanName,
                       a.CalculatedHumanName,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.CalculatedHumanName <> b.CalculatedHumanName)
                      OR (
                             a.CalculatedHumanName IS NOT NULL
                             AND b.CalculatedHumanName IS NULL
                         )
                      OR (
                             a.CalculatedHumanName IS NULL
                             AND b.CalculatedHumanName IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4575190000000,
                       a.SampleID,
                       NULL,
                       b.VectorSurveillanceSessionID,
                       a.VectorSurveillanceSessionID,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.VectorSurveillanceSessionID <> b.VectorSurveillanceSessionID)
                      OR (
                             a.VectorSurveillanceSessionID IS NOT NULL
                             AND b.VectorSurveillanceSessionID IS NULL
                         )
                      OR (
                             a.VectorSurveillanceSessionID IS NULL
                             AND b.VectorSurveillanceSessionID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4575200000000,
                       a.SampleID,
                       NULL,
                       b.VectorID,
                       a.VectorID,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.VectorID <> b.VectorID)
                      OR (
                             a.VectorID IS NOT NULL
                             AND b.VectorID IS NULL
                         )
                      OR (
                             a.VectorID IS NULL
                             AND b.VectorID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4576340000000,
                       a.SampleID,
                       NULL,
                       b.SubdivisionID,
                       a.SubdivisionID,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.SubdivisionID <> b.SubdivisionID)
                      OR (
                             a.SubdivisionID IS NOT NULL
                             AND b.SubdivisionID IS NULL
                         )
                      OR (
                             a.SubdivisionID IS NULL
                             AND b.SubdivisionID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       49545420000000,
                       a.SampleID,
                       NULL,
                       b.SampleStatusTypeID,
                       a.SampleStatusTypeID,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.SampleStatusTypeID <> b.SampleStatusTypeID)
                      OR (
                             a.SampleStatusTypeID IS NOT NULL
                             AND b.SampleStatusTypeID IS NULL
                         )
                      OR (
                             a.SampleStatusTypeID IS NULL
                             AND b.SampleStatusTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4576360000000,
                       a.SampleID,
                       NULL,
                       b.DepartmentID,
                       a.DepartmentID,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.DepartmentID <> b.DepartmentID)
                      OR (
                             a.DepartmentID IS NOT NULL
                             AND b.DepartmentID IS NULL
                         )
                      OR (
                             a.DepartmentID IS NULL
                             AND b.DepartmentID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4576370000000,
                       a.SampleID,
                       NULL,
                       b.DestroyedByPersonID,
                       a.DestroyedByPersonID,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.DestroyedByPersonID <> b.DestroyedByPersonID)
                      OR (
                             a.DestroyedByPersonID IS NOT NULL
                             AND b.DestroyedByPersonID IS NULL
                         )
                      OR (
                             a.DestroyedByPersonID IS NULL
                             AND b.DestroyedByPersonID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4576390000000,
                       a.SampleID,
                       NULL,
                       b.EnteringDate,
                       a.EnteringDate,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.EnteringDate <> b.EnteringDate)
                      OR (
                             a.EnteringDate IS NOT NULL
                             AND b.EnteringDate IS NULL
                         )
                      OR (
                             a.EnteringDate IS NULL
                             AND b.EnteringDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4576400000000,
                       a.SampleID,
                       NULL,
                       b.DestructionDate,
                       a.DestructionDate,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.DestructionDate <> b.DestructionDate)
                      OR (
                             a.DestructionDate IS NOT NULL
                             AND b.DestructionDate IS NULL
                         )
                      OR (
                             a.DestructionDate IS NULL
                             AND b.DestructionDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4576410000000,
                       a.SampleID,
                       NULL,
                       b.BarcodeID,
                       a.BarcodeID,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.BarcodeID <> b.BarcodeID)
                      OR (
                             a.BarcodeID IS NOT NULL
                             AND b.BarcodeID IS NULL
                         )
                      OR (
                             a.BarcodeID IS NULL
                             AND b.BarcodeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4576420000000,
                       a.SampleID,
                       NULL,
                       b.Note,
                       a.Note,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.Note <> b.Note)
                      OR (
                             a.Note IS NOT NULL
                             AND b.Note IS NULL
                         )
                      OR (
                             a.Note IS NULL
                             AND b.Note IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578720000000,
                       a.SampleID,
                       NULL,
                       b.SendToOfficeID,
                       a.SendToOfficeID,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.SendToOfficeID <> b.SendToOfficeID)
                      OR (
                             a.SendToOfficeID IS NOT NULL
                             AND b.SendToOfficeID IS NULL
                         )
                      OR (
                             a.SendToOfficeID IS NULL
                             AND b.SendToOfficeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578730000000,
                       a.SampleID,
                       NULL,
                       b.ReadOnlyIndicator,
                       a.ReadOnlyIndicator,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.ReadOnlyIndicator <> b.ReadOnlyIndicator)
                      OR (
                             a.ReadOnlyIndicator IS NOT NULL
                             AND b.ReadOnlyIndicator IS NULL
                         )
                      OR (
                             a.ReadOnlyIndicator IS NULL
                             AND b.ReadOnlyIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       12014480000000,
                       a.SampleID,
                       NULL,
                       b.BirdStatusTypeID,
                       a.BirdStatusTypeID,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.BirdStatusTypeID <> b.BirdStatusTypeID)
                      OR (
                             a.BirdStatusTypeID IS NOT NULL
                             AND b.BirdStatusTypeID IS NULL
                         )
                      OR (
                             a.BirdStatusTypeID IS NULL
                             AND b.BirdStatusTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       12665570000000,
                       a.SampleID,
                       NULL,
                       b.HumanDiseaseReportID,
                       a.HumanDiseaseReportID,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.HumanDiseaseReportID <> b.HumanDiseaseReportID)
                      OR (
                             a.HumanDiseaseReportID IS NOT NULL
                             AND b.HumanDiseaseReportID IS NULL
                         )
                      OR (
                             a.HumanDiseaseReportID IS NULL
                             AND b.HumanDiseaseReportID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       12665580000000,
                       a.SampleID,
                       NULL,
                       b.VeterinaryDiseaseReportID,
                       a.VeterinaryDiseaseReportID,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.VeterinaryDiseaseReportID <> b.VeterinaryDiseaseReportID)
                      OR (
                             a.VeterinaryDiseaseReportID IS NOT NULL
                             AND b.VeterinaryDiseaseReportID IS NULL
                         )
                      OR (
                             a.VeterinaryDiseaseReportID IS NULL
                             AND b.VeterinaryDiseaseReportID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       12666880000000,
                       a.SampleID,
                       NULL,
                       b.AccessionDate,
                       a.AccessionDate,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.AccessionDate <> b.AccessionDate)
                      OR (
                             a.AccessionDate IS NOT NULL
                             AND b.AccessionDate IS NULL
                         )
                      OR (
                             a.AccessionDate IS NULL
                             AND b.AccessionDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       12666890000000,
                       a.SampleID,
                       NULL,
                       b.AccessionConditionTypeID,
                       a.AccessionConditionTypeID,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.AccessionConditionTypeID <> b.AccessionConditionTypeID)
                      OR (
                             a.AccessionConditionTypeID IS NOT NULL
                             AND b.AccessionConditionTypeID IS NULL
                         )
                      OR (
                             a.AccessionConditionTypeID IS NULL
                             AND b.AccessionConditionTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       12666900000000,
                       a.SampleID,
                       NULL,
                       b.Condition,
                       a.Condition,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.Condition <> b.Condition)
                      OR (
                             a.Condition IS NOT NULL
                             AND b.Condition IS NULL
                         )
                      OR (
                             a.Condition IS NULL
                             AND b.Condition IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       12666910000000,
                       a.SampleID,
                       NULL,
                       b.AccessionByPersonID,
                       a.AccessionByPersonID,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.AccessionByPersonID <> b.AccessionByPersonID)
                      OR (
                             a.AccessionByPersonID IS NOT NULL
                             AND b.AccessionByPersonID IS NULL
                         )
                      OR (
                             a.AccessionByPersonID IS NULL
                             AND b.AccessionByPersonID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       12675260000000,
                       a.SampleID,
                       NULL,
                       b.DestructionMethodTypeID,
                       a.DestructionMethodTypeID,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.DestructionMethodTypeID <> b.DestructionMethodTypeID)
                      OR (
                             a.DestructionMethodTypeID IS NOT NULL
                             AND b.DestructionMethodTypeID IS NULL
                         )
                      OR (
                             a.DestructionMethodTypeID IS NULL
                             AND b.DestructionMethodTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       49545560000000,
                       a.SampleID,
                       NULL,
                       b.CurrentSiteID,
                       a.CurrentSiteID,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.CurrentSiteID <> b.CurrentSiteID)
                      OR (
                             a.CurrentSiteID IS NOT NULL
                             AND b.CurrentSiteID IS NULL
                         )
                      OR (
                             a.CurrentSiteID IS NULL
                             AND b.CurrentSiteID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       49545570000000,
                       a.SampleID,
                       NULL,
                       b.SampleKindTypeID,
                       a.SampleKindTypeID,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.SampleKindTypeID <> b.SampleKindTypeID)
                      OR (
                             a.SampleKindTypeID IS NOT NULL
                             AND b.SampleKindTypeID IS NULL
                         )
                      OR (
                             a.SampleKindTypeID IS NULL
                             AND b.SampleKindTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       49545580000000,
                       a.SampleID,
                       NULL,
                       b.AccessionIndicator,
                       a.AccessionIndicator,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.AccessionIndicator <> b.AccessionIndicator)
                      OR (
                             a.AccessionIndicator IS NOT NULL
                             AND b.AccessionIndicator IS NULL
                         )
                      OR (
                             a.AccessionIndicator IS NULL
                             AND b.AccessionIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       49545590000000,
                       a.SampleID,
                       NULL,
                       b.ShowInCaseOrSessionIndicator,
                       a.ShowInCaseOrSessionIndicator,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.ShowInCaseOrSessionIndicator <> b.ShowInCaseOrSessionIndicator)
                      OR (
                             a.ShowInCaseOrSessionIndicator IS NOT NULL
                             AND b.ShowInCaseOrSessionIndicator IS NULL
                         )
                      OR (
                             a.ShowInCaseOrSessionIndicator IS NULL
                             AND b.ShowInCaseOrSessionIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       49545600000000,
                       a.SampleID,
                       NULL,
                       b.ShowInLabListIndicator,
                       a.ShowInLabListIndicator,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.ShowInLabListIndicator <> b.ShowInLabListIndicator)
                      OR (
                             a.ShowInLabListIndicator IS NOT NULL
                             AND b.ShowInLabListIndicator IS NULL
                         )
                      OR (
                             a.ShowInLabListIndicator IS NULL
                             AND b.ShowInLabListIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       49545620000000,
                       a.SampleID,
                       NULL,
                       b.ShowInDispositionListIndicator,
                       a.ShowInDispositionListIndicator,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.ShowInDispositionListIndicator <> b.ShowInDispositionListIndicator)
                      OR (
                             a.ShowInDispositionListIndicator IS NOT NULL
                             AND b.ShowInDispositionListIndicator IS NULL
                         )
                      OR (
                             a.ShowInDispositionListIndicator IS NULL
                             AND b.ShowInDispositionListIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       49545610000000,
                       a.SampleID,
                       NULL,
                       b.ShowInAccessionInFormIndicator,
                       a.ShowInAccessionInFormIndicator,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.ShowInAccessionInFormIndicator <> b.ShowInAccessionInFormIndicator)
                      OR (
                             a.ShowInAccessionInFormIndicator IS NOT NULL
                             AND b.ShowInAccessionInFormIndicator IS NULL
                         )
                      OR (
                             a.ShowInAccessionInFormIndicator IS NULL
                             AND b.ShowInAccessionInFormIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       51523600000000,
                       a.SampleID,
                       NULL,
                       b.MarkedForDispositionByPersonID,
                       a.MarkedForDispositionByPersonID,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.MarkedForDispositionByPersonID <> b.MarkedForDispositionByPersonID)
                      OR (
                             a.MarkedForDispositionByPersonID IS NOT NULL
                             AND b.MarkedForDispositionByPersonID IS NULL
                         )
                      OR (
                             a.MarkedForDispositionByPersonID IS NULL
                             AND b.MarkedForDispositionByPersonID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       51528570000000,
                       a.SampleID,
                       NULL,
                       b.OutOfRepositoryDate,
                       a.OutOfRepositoryDate,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.OutOfRepositoryDate <> b.OutOfRepositoryDate)
                      OR (
                             a.OutOfRepositoryDate IS NOT NULL
                             AND b.OutOfRepositoryDate IS NULL
                         )
                      OR (
                             a.OutOfRepositoryDate IS NULL
                             AND b.OutOfRepositoryDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       51528580000000,
                       a.SampleID,
                       NULL,
                       b.SampleStatusDate,
                       a.SampleStatusDate,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE (a.SampleStatusDate <> b.SampleStatusDate)
                      OR (
                             a.SampleStatusDate IS NOT NULL
                             AND b.SampleStatusDate IS NULL
                         )
                      OR (
                             a.SampleStatusDate IS NULL
                             AND b.SampleStatusDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailRestore
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    idfObjectDetail,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       a.SampleID,
                       NULL,
                       @AuditUserName
                FROM @SampleAfterEdit AS a
                    FULL JOIN @SampleBeforeEdit AS b
                        ON a.SampleID = b.SampleID
                WHERE a.RowStatus = 0
                      AND b.RowStatus = 1;
            END
            ELSE
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject
                )
                VALUES
                (@DataAuditEventID, @ObjectTableID, @SampleID);
            END
        END;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USSP_GBL_TEST_INTERPRETATIONS_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USSP_GBL_TEST_INTERPRETATIONS_SET
--
-- Description:	Inserts or updates test interpretation records for various use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     11/21/2022 Initial release with data audit logic for SAUC30 and 31.
-- Stephen Long     11/29/2022 Added delete data audit logic.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_GBL_TEST_INTERPRETATIONS_SET]
(
    @AuditUserName NVARCHAR(200),
    @DataAuditEventID BIGINT = NULL,
    @TestInterpretationID BIGINT OUTPUT,
    @DiseaseID BIGINT,
    @InterpretedStatusTypeID BIGINT = NULL,
    @ValidatedByOrganizationID BIGINT = NULL,
    @ValidatedByPersonID BIGINT = NULL,
    @InterpretedByOrganizationID BIGINT = NULL,
    @InterpretedByPersonID BIGINT = NULL,
    @TestID BIGINT,
    @ValidateStatusIndicator BIT = NULL,
    @ReportSessionCreatedIndicator BIT = NULL,
    @ValidationComment NVARCHAR(200) = NULL,
    @InterpretationComment NVARCHAR(200) = NULL,
    @ValidationDate DATETIME = NULL,
    @InterpretationDate DATETIME = NULL,
    @RowStatus INT,
    @ReadOnlyIndicator BIT,
    @RowAction INT
)
AS
DECLARE @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectID BIGINT = @TestInterpretationID,
        @ObjectTableID BIGINT = 75750000000; -- tlbTestValidation
DECLARE @TestInterpretationBeforeEdit TABLE
(
    TestInterpretationID BIGINT,
    DiseaseID BIGINT,
    InterpretedStatusTypeID BIGINT,
    ValidatedByOfficeID BIGINT,
    ValidatedByPersonID BIGINT,
    InterpretedByOfficeID BIGINT,
    InterpretedByPersonID BIGINT,
    TestID BIGINT,
    ValidateStatusIndicator BIT,
    CaseCreatedIndicator BIT,
    ValidateComment NVARCHAR(200),
    InterpretedComment NVARCHAR(200),
    ValidationDate DATETIME,
    InterpretationDate DATETIME,
    ReadOnlyIndicator BIT,
    RowStatus INT
);
DECLARE @TestInterpretationAfterEdit TABLE
(
    TestInterpretationID BIGINT,
    DiseaseID BIGINT,
    InterpretedStatusTypeID BIGINT,
    ValidatedByOfficeID BIGINT,
    ValidatedByPersonID BIGINT,
    InterpretedByOfficeID BIGINT,
    InterpretedByPersonID BIGINT,
    TestID BIGINT,
    ValidateStatusIndicator BIT,
    CaseCreatedIndicator BIT,
    ValidateComment NVARCHAR(200),
    InterpretedComment NVARCHAR(200),
    ValidationDate DATETIME,
    InterpretationDate DATETIME,
    ReadOnlyIndicator BIT,
    RowStatus INT
);
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = UserInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        IF @RowAction = 1 -- Insert
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbTestValidation',
                                              @TestInterpretationID OUTPUT;
            print @TestInterpretationID;
            INSERT INTO dbo.tlbTestValidation
            (
                idfTestValidation,
                idfsDiagnosis,
                idfsInterpretedStatus,
                idfValidatedByOffice,
                idfValidatedByPerson,
                idfInterpretedByOffice,
                idfInterpretedByPerson,
                idfTesting,
                blnValidateStatus,
                blnCaseCreated,
                strValidateComment,
                strInterpretedComment,
                datValidationDate,
                datInterpretationDate,
                intRowStatus,
                blnReadOnly,
                AuditCreateUser,
                SourceSystemNameID,
                SourceSystemKeyValue
            )
            VALUES
            (@TestInterpretationID,
             @DiseaseID,
             @InterpretedStatusTypeID,
             @ValidatedByOrganizationID,
             @ValidatedByPersonID,
             @InterpretedByOrganizationID,
             @InterpretedByPersonID,
             @TestID,
             @ValidateStatusIndicator,
             @ReportSessionCreatedIndicator,
             @ValidationComment,
             @InterpretationComment,
             @ValidationDate,
             @InterpretationDate,
             @RowStatus,
             @ReadOnlyIndicator,
             @AuditUserName,
             10519001,
             '[{"idfTestValidation":' + CAST(@TestInterpretationID AS NVARCHAR(300)) + '}]'
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @TestInterpretationID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName
            );
        -- End data audit
        END
        ELSE
        BEGIN
            INSERT INTO @TestInterpretationBeforeEdit
            (
                TestInterpretationID,
                DiseaseID,
                InterpretedStatusTypeID,
                ValidatedByOfficeID,
                ValidatedByPersonID,
                InterpretedByOfficeID,
                InterpretedByPersonID,
                TestID,
                ValidateStatusIndicator,
                CaseCreatedIndicator,
                ValidateComment,
                InterpretedComment,
                ValidationDate,
                InterpretationDate,
                ReadOnlyIndicator,
                RowStatus
            )
            SELECT idfTestValidation,
                   idfsDiagnosis,
                   idfsInterpretedStatus,
                   idfValidatedByOffice,
                   idfValidatedByPerson,
                   idfInterpretedByOffice,
                   idfInterpretedByPerson,
                   idfTesting,
                   blnValidateStatus,
                   blnCaseCreated,
                   strValidateComment,
                   strInterpretedComment,
                   datValidationDate,
                   datInterpretationDate,
                   blnReadOnly,
                   intRowStatus
            FROM dbo.tlbTestValidation
            WHERE idfTestValidation = @TestInterpretationID;

            UPDATE dbo.tlbTestValidation
            SET idfsDiagnosis = @DiseaseID,
                idfsInterpretedStatus = @InterpretedStatusTypeID,
                idfValidatedByOffice = @ValidatedByOrganizationID,
                idfValidatedByPerson = @ValidatedByPersonID,
                idfInterpretedByOffice = @InterpretedByOrganizationID,
                idfInterpretedByPerson = @InterpretedByPersonID,
                idfTesting = @TestID,
                blnValidateStatus = @ValidateStatusIndicator,
                blnCaseCreated = @ReportSessionCreatedIndicator,
                strValidateComment = @ValidationComment,
                strInterpretedComment = @InterpretationComment,
                datValidationDate = @ValidationDate,
                datInterpretationDate = @InterpretationDate,
                intRowStatus = @RowStatus,
                blnReadOnly = @ReadOnlyIndicator,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfTestValidation = @TestInterpretationID;

            INSERT INTO @TestInterpretationAfterEdit
            (
                TestInterpretationID,
                DiseaseID,
                InterpretedStatusTypeID,
                ValidatedByOfficeID,
                ValidatedByPersonID,
                InterpretedByOfficeID,
                InterpretedByPersonID,
                TestID,
                ValidateStatusIndicator,
                CaseCreatedIndicator,
                ValidateComment,
                InterpretedComment,
                ValidationDate,
                InterpretationDate,
                ReadOnlyIndicator,
                RowStatus
            )
            SELECT idfTestValidation,
                   idfsDiagnosis,
                   idfsInterpretedStatus,
                   idfValidatedByOffice,
                   idfValidatedByPerson,
                   idfInterpretedByOffice,
                   idfInterpretedByPerson,
                   idfTesting,
                   blnValidateStatus,
                   blnCaseCreated,
                   strValidateComment,
                   strInterpretedComment,
                   datValidationDate,
                   datInterpretationDate,
                   blnReadOnly,
                   intRowStatus
            FROM dbo.tlbTestValidation
            WHERE idfTestValidation = @TestInterpretationID;

            IF @RowStatus = 0
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80580000000,
                       a.TestInterpretationID,
                       NULL,
                       b.DiseaseID,
                       a.DiseaseID,
                       @AuditUserName
                FROM @TestInterpretationAfterEdit AS a
                    FULL JOIN @TestInterpretationBeforeEdit AS b
                        ON a.TestInterpretationID = b.TestInterpretationID
                WHERE (a.DiseaseID <> b.DiseaseID)
                      OR (
                             a.DiseaseID IS NOT NULL
                             AND b.DiseaseID IS NULL
                         )
                      OR (
                             a.DiseaseID IS NULL
                             AND b.DiseaseID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80590000000,
                       a.TestInterpretationID,
                       NULL,
                       b.InterpretedStatusTypeID,
                       a.InterpretedStatusTypeID,
                       @AuditUserName
                FROM @TestInterpretationAfterEdit AS a
                    FULL JOIN @TestInterpretationBeforeEdit AS b
                        ON a.TestInterpretationID = b.TestInterpretationID
                WHERE (a.InterpretedStatusTypeID <> b.InterpretedStatusTypeID)
                      OR (
                             a.InterpretedStatusTypeID IS NOT NULL
                             AND b.InterpretedStatusTypeID IS NULL
                         )
                      OR (
                             a.InterpretedStatusTypeID IS NULL
                             AND b.InterpretedStatusTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80610000000,
                       a.TestInterpretationID,
                       NULL,
                       b.ValidatedByOfficeID,
                       a.ValidatedByOfficeID,
                       @AuditUserName
                FROM @TestInterpretationAfterEdit AS a
                    FULL JOIN @TestInterpretationBeforeEdit AS b
                        ON a.TestInterpretationID = b.TestInterpretationID
                WHERE (a.ValidatedByOfficeID <> b.ValidatedByOfficeID)
                      OR (
                             a.ValidatedByOfficeID IS NOT NULL
                             AND b.ValidatedByOfficeID IS NULL
                         )
                      OR (
                             a.ValidatedByOfficeID IS NULL
                             AND b.ValidatedByOfficeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80620000000,
                       a.TestInterpretationID,
                       NULL,
                       b.ValidatedByPersonID,
                       a.ValidatedByPersonID,
                       @AuditUserName
                FROM @TestInterpretationAfterEdit AS a
                    FULL JOIN @TestInterpretationBeforeEdit AS b
                        ON a.TestInterpretationID = b.TestInterpretationID
                WHERE (a.ValidatedByPersonID <> b.ValidatedByPersonID)
                      OR (
                             a.ValidatedByPersonID IS NOT NULL
                             AND b.ValidatedByPersonID IS NULL
                         )
                      OR (
                             a.ValidatedByPersonID IS NULL
                             AND b.ValidatedByPersonID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80560000000,
                       a.TestInterpretationID,
                       NULL,
                       b.InterpretedByOfficeID,
                       a.InterpretedByOfficeID,
                       @AuditUserName
                FROM @TestInterpretationAfterEdit AS a
                    FULL JOIN @TestInterpretationBeforeEdit AS b
                        ON a.TestInterpretationID = b.TestInterpretationID
                WHERE (a.InterpretedByOfficeID <> b.InterpretedByOfficeID)
                      OR (
                             a.InterpretedByOfficeID IS NOT NULL
                             AND b.InterpretedByOfficeID IS NULL
                         )
                      OR (
                             a.InterpretedByOfficeID IS NULL
                             AND b.InterpretedByOfficeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80570000000,
                       a.TestInterpretationID,
                       NULL,
                       b.InterpretedByPersonID,
                       a.InterpretedByPersonID,
                       @AuditUserName
                FROM @TestInterpretationAfterEdit AS a
                    FULL JOIN @TestInterpretationBeforeEdit AS b
                        ON a.TestInterpretationID = b.TestInterpretationID
                WHERE (a.InterpretedByPersonID <> b.InterpretedByPersonID)
                      OR (
                             a.InterpretedByPersonID IS NOT NULL
                             AND b.InterpretedByPersonID IS NULL
                         )
                      OR (
                             a.InterpretedByPersonID IS NULL
                             AND b.InterpretedByPersonID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80600000000,
                       a.TestInterpretationID,
                       NULL,
                       b.TestID,
                       a.TestID,
                       @AuditUserName
                FROM @TestInterpretationAfterEdit AS a
                    FULL JOIN @TestInterpretationBeforeEdit AS b
                        ON a.TestInterpretationID = b.TestInterpretationID
                WHERE (a.TestID <> b.TestID)
                      OR (
                             a.TestID IS NOT NULL
                             AND b.TestID IS NULL
                         )
                      OR (
                             a.TestID IS NULL
                             AND b.TestID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80550000000,
                       a.TestInterpretationID,
                       NULL,
                       b.ValidateStatusIndicator,
                       a.ValidateStatusIndicator,
                       @AuditUserName
                FROM @TestInterpretationAfterEdit AS a
                    FULL JOIN @TestInterpretationBeforeEdit AS b
                        ON a.TestInterpretationID = b.TestInterpretationID
                WHERE (a.ValidateStatusIndicator <> b.ValidateStatusIndicator)
                      OR (
                             a.ValidateStatusIndicator IS NOT NULL
                             AND b.ValidateStatusIndicator IS NULL
                         )
                      OR (
                             a.ValidateStatusIndicator IS NULL
                             AND b.ValidateStatusIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572560000000,
                       a.TestInterpretationID,
                       NULL,
                       b.CaseCreatedIndicator,
                       a.CaseCreatedIndicator,
                       @AuditUserName
                FROM @TestInterpretationAfterEdit AS a
                    FULL JOIN @TestInterpretationBeforeEdit AS b
                        ON a.TestInterpretationID = b.TestInterpretationID
                WHERE (a.CaseCreatedIndicator <> b.CaseCreatedIndicator)
                      OR (
                             a.CaseCreatedIndicator IS NOT NULL
                             AND b.CaseCreatedIndicator IS NULL
                         )
                      OR (
                             a.CaseCreatedIndicator IS NULL
                             AND b.CaseCreatedIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80640000000,
                       a.TestInterpretationID,
                       NULL,
                       b.ValidateComment,
                       a.ValidateComment,
                       @AuditUserName
                FROM @TestInterpretationAfterEdit AS a
                    FULL JOIN @TestInterpretationBeforeEdit AS b
                        ON a.TestInterpretationID = b.TestInterpretationID
                WHERE (a.ValidateComment <> b.ValidateComment)
                      OR (
                             a.ValidateComment IS NOT NULL
                             AND b.ValidateComment IS NULL
                         )
                      OR (
                             a.ValidateComment IS NULL
                             AND b.ValidateComment IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80630000000,
                       a.TestInterpretationID,
                       NULL,
                       b.InterpretedComment,
                       a.InterpretedComment,
                       @AuditUserName
                FROM @TestInterpretationAfterEdit AS a
                    FULL JOIN @TestInterpretationBeforeEdit AS b
                        ON a.TestInterpretationID = b.TestInterpretationID
                WHERE (a.InterpretedComment <> b.InterpretedComment)
                      OR (
                             a.InterpretedComment IS NOT NULL
                             AND b.InterpretedComment IS NULL
                         )
                      OR (
                             a.InterpretedComment IS NULL
                             AND b.InterpretedComment IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572570000000,
                       a.TestInterpretationID,
                       NULL,
                       b.ValidationDate,
                       a.ValidationDate,
                       @AuditUserName
                FROM @TestInterpretationAfterEdit AS a
                    FULL JOIN @TestInterpretationBeforeEdit AS b
                        ON a.TestInterpretationID = b.TestInterpretationID
                WHERE (a.ValidationDate <> b.ValidationDate)
                      OR (
                             a.ValidationDate IS NOT NULL
                             AND b.ValidationDate IS NULL
                         )
                      OR (
                             a.ValidationDate IS NULL
                             AND b.ValidationDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572580000000,
                       a.TestInterpretationID,
                       NULL,
                       b.InterpretationDate,
                       a.InterpretationDate,
                       @AuditUserName
                FROM @TestInterpretationAfterEdit AS a
                    FULL JOIN @TestInterpretationBeforeEdit AS b
                        ON a.TestInterpretationID = b.TestInterpretationID
                WHERE (a.InterpretationDate <> b.InterpretationDate)
                      OR (
                             a.InterpretationDate IS NOT NULL
                             AND b.InterpretationDate IS NULL
                         )
                      OR (
                             a.InterpretationDate IS NULL
                             AND b.InterpretationDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       6617410000000,
                       a.TestInterpretationID,
                       NULL,
                       b.ReadOnlyIndicator,
                       a.ReadOnlyIndicator,
                       @AuditUserName
                FROM @TestInterpretationAfterEdit AS a
                    FULL JOIN @TestInterpretationBeforeEdit AS b
                        ON a.TestInterpretationID = b.TestInterpretationID
                WHERE (a.ReadOnlyIndicator <> b.ReadOnlyIndicator)
                      OR (
                             a.ReadOnlyIndicator IS NOT NULL
                             AND b.ReadOnlyIndicator IS NULL
                         )
                      OR (
                             a.ReadOnlyIndicator IS NULL
                             AND b.ReadOnlyIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailRestore
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    idfObjectDetail,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       a.TestInterpretationID,
                       NULL,
                       @AuditUserName
                FROM @TestInterpretationAfterEdit AS a
                    FULL JOIN @TestInterpretationBeforeEdit AS b
                        ON a.TestInterpretationID = b.TestInterpretationID
                WHERE a.RowStatus = 0
                      AND b.RowStatus = 1;
            END
            ELSE
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject
                )
                VALUES
                (@DataAuditEventid, @ObjectTableID, @TestInterpretationID);
            END
        END
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USSP_GBL_TESTS_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USSP_GBL_TESTS_SET
--
-- Description:	Inserts or updates laboratory and field test records for various use cases.
--
-- Revision History:
-- Name                Date       Change Detail
-- ------------------- ---------- ----------------------------------------------------------------
-- Stephen Long        11/21/2022 Initial release with data audit logic for SAUC30 and 31.
-- Stephen Long        11/29/2022 Added delete data audit logic.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_GBL_TESTS_SET]
(
    @LanguageID NVARCHAR(50),
    @TestID BIGINT OUTPUT,
    @TestNameTypeID BIGINT = NULL,
    @TestCategoryTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestStatusTypeID BIGINT,
    @DiseaseID BIGINT,
    @SampleID BIGINT = NULL,
    @BatchTestID BIGINT = NULL,
    @ObservationID BIGINT,
    @TestNumber INT = NULL,
    @Comments NVARCHAR(500) = NULL,
    @RowStatus INT = NULL,
    @StartedDate DATETIME = NULL,
    @ResultDate DATETIME = NULL,
    @TestedByOrganizationID BIGINT = NULL,
    @TestedByPersonID BIGINT = NULL,
    @ResultEnteredByOrganizationID BIGINT = NULL,
    @ResultEnteredByPersonID BIGINT = NULL,
    @ValidatedByOrganizationID BIGINT = NULL,
    @ValidatedByPersonID BIGINT = NULL,
    @ReadOnlyIndicator BIT,
    @NonLaboratoryTestIndicator BIT,
    @ExternalTestIndicator BIT = NULL,
    @PerformedByOrganizationID BIGINT = NULL,
    @ReceivedDate DATETIME = NULL,
    @ContactPerson NVARCHAR(200) = NULL,
    @MonitoringSessionID BIGINT = NULL,
    @VectorSessionID BIGINT = NULL,
    @HumanDiseaseReportID BIGINT = NULL,
    @VeterinaryDiseaseReportID BIGINT = NULL,
    @AuditUserName NVARCHAR(200),
    @DataAuditEventID BIGINT = NULL,
    @RowAction CHAR
)
AS
DECLARE @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectID BIGINT = @TestID,
        @ObjectTableID BIGINT = 75740000000; -- tlbTesting
DECLARE @TestBeforeEdit TABLE
(
    TestID BIGINT,
    TestNameTypeID BIGINT,
    TestCategoryTypeID BIGINT,
    TestResultTypeID BIGINT,
    TestStatusTypeID BIGINT,
    DiseaseID BIGINT,
    SampleID BIGINT,
    BatchTestID BIGINT,
    ObservationID BIGINT,
    TestNumber INT,
    Note NVARCHAR(500),
    StartedDate DATETIME,
    ConcludedDate DATETIME,
    TestedByOfficeID BIGINT,
    TestedByPersonID BIGINT,
    ResultEnteredByOfficeID BIGINT,
    ResultEnteredByPersonID BIGINT,
    ValidatedByOfficeID BIGINT,
    ValidatedByPersonID BIGINT,
    ReadOnlyIndicator BIT,
    NonLaboratoryTestIndicator BIT,
    ExternalTestIndicator BIT,
    PerformedByOfficeID BIGINT,
    ReceivedDate DATETIME,
    ContactPerson NVARCHAR(200),
    RowStatus INT
);
DECLARE @TestAfterEdit TABLE
(
    TestID BIGINT,
    TestNameTypeID BIGINT,
    TestCategoryTypeID BIGINT,
    TestResultTypeID BIGINT,
    TestStatusTypeID BIGINT,
    DiseaseID BIGINT,
    SampleID BIGINT,
    BatchTestID BIGINT,
    ObservationID BIGINT,
    TestNumber INT,
    Note NVARCHAR(500),
    StartedDate DATETIME,
    ConcludedDate DATETIME,
    TestedByOfficeID BIGINT,
    TestedByPersonID BIGINT,
    ResultEnteredByOfficeID BIGINT,
    ResultEnteredByPersonID BIGINT,
    ValidatedByOfficeID BIGINT,
    ValidatedByPersonID BIGINT,
    ReadOnlyIndicator BIT,
    NonLaboratoryTestIndicator BIT,
    ExternalTestIndicator BIT,
    PerformedByOfficeID BIGINT,
    ReceivedDate DATETIME,
    ContactPerson NVARCHAR(200),
    RowStatus INT
);
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = UserInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        IF @RowAction = 'I'
           OR @RowAction = '1' -- Insert
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbTesting', @TestID OUTPUT;

            INSERT INTO dbo.tlbTesting
            (
                idfTesting,
                idfsTestName,
                idfsTestCategory,
                idfsTestResult,
                idfsTestStatus,
                idfsDiagnosis,
                idfMaterial,
                idfBatchTest,
                idfObservation,
                intTestNumber,
                strNote,
                intRowStatus,
                datStartedDate,
                datConcludedDate,
                idfTestedByOffice,
                idfTestedByPerson,
                idfResultEnteredByOffice,
                idfResultEnteredByPerson,
                idfValidatedByOffice,
                idfValidatedByPerson,
                blnReadOnly,
                blnNonLaboratoryTest,
                blnExternalTest,
                idfPerformedByOffice,
                datReceivedDate,
                strContactPerson,
                idfMonitoringSession,
                idfVector,
                idfHumanCase,
                idfVetCase,
                AuditCreateUser,
                SourceSystemNameID,
                SourceSystemKeyValue
            )
            VALUES
            (@TestID,
             @TestNameTypeID,
             @TestCategoryTypeID,
             @TestResultTypeID,
             @TestStatusTypeID,
             @DiseaseID,
             @SampleID,
             @BatchTestID,
             @ObservationID,
             @TestNumber,
             @Comments,
             @RowStatus,
             @StartedDate,
             @ResultDate,
             @TestedByOrganizationID,
             @TestedByPersonID,
             @ResultEnteredByOrganizationID,
             @ResultEnteredByPersonID,
             @ValidatedByOrganizationID,
             @ValidatedByPersonID,
             @ReadOnlyIndicator,
             @NonLaboratoryTestIndicator,
             @ExternalTestIndicator,
             @PerformedByOrganizationID,
             @ReceivedDate,
             @ContactPerson,
             @MonitoringSessionID,
             @VectorSessionID,
             @HumanDiseaseReportID,
             @VeterinaryDiseaseReportID,
             @AuditUserName,
             10519001,
             '[{"idfTesting":' + CAST(@TestID AS NVARCHAR(300)) + '}]'
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @TestID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName
            );
        -- End data audit
        END
        ELSE
        BEGIN
            INSERT INTO @TestBeforeEdit
            (
                TestID,
                TestNameTypeID,
                TestCategoryTypeID,
                TestResultTypeID,
                TestStatusTypeID,
                DiseaseID,
                SampleID,
                BatchTestID,
                ObservationID,
                TestNumber,
                Note,
                StartedDate,
                ConcludedDate,
                TestedByOfficeID,
                TestedByPersonID,
                ResultEnteredByOfficeID,
                ResultEnteredByPersonID,
                ValidatedByOfficeID,
                ValidatedByPersonID,
                ReadOnlyIndicator,
                NonLaboratoryTestIndicator,
                ExternalTestIndicator,
                PerformedByOfficeID,
                ReceivedDate,
                ContactPerson,
                RowStatus
            )
            SELECT idfTesting,
                   idfsTestName,
                   idfsTestCategory,
                   idfsTestResult,
                   idfsTestStatus,
                   idfsDiagnosis,
                   idfMaterial,
                   idfBatchTest,
                   idfObservation,
                   intTestNumber,
                   strNote,
                   datStartedDate,
                   datConcludedDate,
                   idfTestedByOffice,
                   idfTestedByPerson,
                   idfResultEnteredByOffice,
                   idfResultEnteredByPerson,
                   idfValidatedByOffice,
                   idfValidatedByPerson,
                   blnReadOnly,
                   blnNonLaboratoryTest,
                   blnExternalTest,
                   idfPerformedByOffice,
                   datReceivedDate,
                   strContactPerson,
                   intRowStatus
            FROM dbo.tlbTesting
            WHERE idfTesting = @TestID;

            UPDATE dbo.tlbTesting
            SET idfsTestName = @TestNameTypeID,
                idfsTestCategory = @TestCategoryTypeID,
                idfsTestResult = @TestResultTypeID,
                idfsTestStatus = @TestStatusTypeID,
                idfsDiagnosis = @DiseaseID,
                idfMaterial = @SampleID,
                idfBatchTest = @BatchTestID,
                idfObservation = @ObservationID,
                intTestNumber = @TestNumber,
                strNote = @Comments,
                intRowStatus = @RowStatus,
                datStartedDate = @StartedDate,
                datConcludedDate = @ResultDate,
                idfTestedByOffice = @TestedByOrganizationID,
                idfTestedByPerson = @TestedByPersonID,
                idfResultEnteredByOffice = @ResultEnteredByOrganizationID,
                idfResultEnteredByPerson = @ResultEnteredByPersonID,
                idfValidatedByOffice = @ValidatedByOrganizationID,
                idfValidatedByPerson = @ValidatedByPersonID,
                blnReadOnly = @ReadOnlyIndicator,
                blnNonLaboratoryTest = @NonLaboratoryTestIndicator,
                blnExternalTest = @ExternalTestIndicator,
                idfPerformedByOffice = @PerformedByOrganizationID,
                datReceivedDate = @ReceivedDate,
                strContactPerson = @ContactPerson,
                idfMonitoringSession = @MonitoringSessionID,
                idfVector = @VectorSessionID,
                idfHumanCase = @HumanDiseaseReportID,
                idfVetCase = @VeterinaryDiseaseReportID,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfTesting = @TestID;

            INSERT INTO @TestAfterEdit
            (
                TestID,
                TestNameTypeID,
                TestCategoryTypeID,
                TestResultTypeID,
                TestStatusTypeID,
                DiseaseID,
                SampleID,
                BatchTestID,
                ObservationID,
                TestNumber,
                Note,
                StartedDate,
                ConcludedDate,
                TestedByOfficeID,
                TestedByPersonID,
                ResultEnteredByOfficeID,
                ResultEnteredByPersonID,
                ValidatedByOfficeID,
                ValidatedByPersonID,
                ReadOnlyIndicator,
                NonLaboratoryTestIndicator,
                ExternalTestIndicator,
                PerformedByOfficeID,
                ReceivedDate,
                ContactPerson,
                RowStatus
            )
            SELECT idfTesting,
                   idfsTestName,
                   idfsTestCategory,
                   idfsTestResult,
                   idfsTestStatus,
                   idfsDiagnosis,
                   idfMaterial,
                   idfBatchTest,
                   idfObservation,
                   intTestNumber,
                   strNote,
                   datStartedDate,
                   datConcludedDate,
                   idfTestedByOffice,
                   idfTestedByPerson,
                   idfResultEnteredByOffice,
                   idfResultEnteredByPerson,
                   idfValidatedByOffice,
                   idfValidatedByPerson,
                   blnReadOnly,
                   blnNonLaboratoryTest,
                   blnExternalTest,
                   idfPerformedByOffice,
                   datReceivedDate,
                   strContactPerson,
                   intRowStatus
            FROM dbo.tlbTesting
            WHERE idfTesting = @TestID;

            IF @RowStatus = 0
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       49545430000000,
                       a.TestID,
                       NULL,
                       b.TestNameTypeID,
                       a.TestNameTypeID,
                       @AuditUserName
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.TestNameTypeID <> b.TestNameTypeID)
                      OR (
                             a.TestNameTypeID IS NOT NULL
                             AND b.TestNameTypeID IS NULL
                         )
                      OR (
                             a.TestNameTypeID IS NULL
                             AND b.TestNameTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       49545440000000,
                       a.TestID,
                       NULL,
                       b.TestCategoryTypeID,
                       a.TestCategoryTypeID,
                       @AuditUserName
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.TestCategoryTypeID <> b.TestCategoryTypeID)
                      OR (
                             a.TestCategoryTypeID IS NOT NULL
                             AND b.TestCategoryTypeID IS NULL
                         )
                      OR (
                             a.TestCategoryTypeID IS NULL
                             AND b.TestCategoryTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80510000000,
                       a.TestID,
                       NULL,
                       b.TestResultTypeID,
                       a.TestResultTypeID,
                       @AuditUserName
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.TestResultTypeID <> b.TestResultTypeID)
                      OR (
                             a.TestResultTypeID IS NOT NULL
                             AND b.TestResultTypeID IS NULL
                         )
                      OR (
                             a.TestResultTypeID IS NULL
                             AND b.TestResultTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572510000000,
                       a.TestID,
                       NULL,
                       b.TestStatusTypeID,
                       a.TestStatusTypeID,
                       @AuditUserName
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.TestStatusTypeID <> b.TestStatusTypeID)
                      OR (
                             a.TestStatusTypeID IS NOT NULL
                             AND b.TestStatusTypeID IS NULL
                         )
                      OR (
                             a.TestStatusTypeID IS NULL
                             AND b.TestStatusTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572520000000,
                       a.TestID,
                       NULL,
                       b.DiseaseID,
                       a.DiseaseID,
                       @AuditUserName
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.DiseaseID <> b.DiseaseID)
                      OR (
                             a.DiseaseID IS NOT NULL
                             AND b.DiseaseID IS NULL
                         )
                      OR (
                             a.DiseaseID IS NULL
                             AND b.DiseaseID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4576430000000,
                       a.TestID,
                       NULL,
                       b.SampleID,
                       a.SampleID,
                       @AuditUserName
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.SampleID <> b.SampleID)
                      OR (
                             a.SampleID IS NOT NULL
                             AND b.SampleID IS NULL
                         )
                      OR (
                             a.SampleID IS NULL
                             AND b.SampleID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80470000000,
                       a.TestID,
                       NULL,
                       b.BatchTestID,
                       a.BatchTestID,
                       @AuditUserName
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.BatchTestID <> b.BatchTestID)
                      OR (
                             a.BatchTestID IS NOT NULL
                             AND b.BatchTestID IS NULL
                         )
                      OR (
                             a.BatchTestID IS NULL
                             AND b.BatchTestID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80500000000,
                       a.TestID,
                       NULL,
                       b.ObservationID,
                       a.ObservationID,
                       @AuditUserName
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ObservationID <> b.ObservationID)
                      OR (
                             a.ObservationID IS NOT NULL
                             AND b.ObservationID IS NULL
                         )
                      OR (
                             a.ObservationID IS NULL
                             AND b.ObservationID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80540000000,
                       a.TestID,
                       NULL,
                       b.TestNumber,
                       a.TestNumber,
                       @AuditUserName
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.TestNumber <> b.TestNumber)
                      OR (
                             a.TestNumber IS NOT NULL
                             AND b.TestNumber IS NULL
                         )
                      OR (
                             a.TestNumber IS NULL
                             AND b.TestNumber IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4572540000000,
                       a.TestID,
                       NULL,
                       b.Note,
                       a.Note,
                       @AuditUserName
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.Note <> b.Note)
                      OR (
                             a.Note IS NOT NULL
                             AND b.Note IS NULL
                         )
                      OR (
                             a.Note IS NULL
                             AND b.Note IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578540000000,
                       a.TestID,
                       NULL,
                       b.StartedDate,
                       a.StartedDate,
                       @AuditUserName
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.StartedDate <> b.StartedDate)
                      OR (
                             a.StartedDate IS NOT NULL
                             AND b.StartedDate IS NULL
                         )
                      OR (
                             a.StartedDate IS NULL
                             AND b.StartedDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578550000000,
                       a.TestID,
                       NULL,
                       b.ConcludedDate,
                       a.ConcludedDate,
                       @AuditUserName
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ConcludedDate <> b.ConcludedDate)
                      OR (
                             a.ConcludedDate IS NOT NULL
                             AND b.ConcludedDate IS NULL
                         )
                      OR (
                             a.ConcludedDate IS NULL
                             AND b.ConcludedDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578560000000,
                       a.TestID,
                       NULL,
                       b.TestedByOfficeID,
                       a.TestedByOfficeID,
                       @AuditUserName
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.TestedByOfficeID <> b.TestedByOfficeID)
                      OR (
                             a.TestedByOfficeID IS NOT NULL
                             AND b.TestedByOfficeID IS NULL
                         )
                      OR (
                             a.TestedByOfficeID IS NULL
                             AND b.TestedByOfficeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578570000000,
                       a.TestID,
                       NULL,
                       b.TestedByPersonID,
                       a.TestedByPersonID,
                       @AuditUserName
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.TestedByPersonID <> b.TestedByPersonID)
                      OR (
                             a.TestedByPersonID IS NOT NULL
                             AND b.TestedByPersonID IS NULL
                         )
                      OR (
                             a.TestedByPersonID IS NULL
                             AND b.TestedByPersonID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578580000000,
                       a.TestID,
                       NULL,
                       b.ResultEnteredByOfficeID,
                       a.ResultEnteredByOfficeID,
                       @AuditUserName
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ResultEnteredByOfficeID <> b.ResultEnteredByOfficeID)
                      OR (
                             a.ResultEnteredByOfficeID IS NOT NULL
                             AND b.ResultEnteredByOfficeID IS NULL
                         )
                      OR (
                             a.ResultEnteredByOfficeID IS NULL
                             AND b.ResultEnteredByOfficeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578590000000,
                       a.TestID,
                       NULL,
                       b.ResultEnteredByPersonID,
                       a.ResultEnteredByPersonID,
                       @AuditUserName
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ResultEnteredByPersonID <> b.ResultEnteredByPersonID)
                      OR (
                             a.ResultEnteredByPersonID IS NOT NULL
                             AND b.ResultEnteredByPersonID IS NULL
                         )
                      OR (
                             a.ResultEnteredByPersonID IS NULL
                             AND b.ResultEnteredByPersonID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578600000000,
                       a.TestID,
                       NULL,
                       b.ValidatedByOfficeID,
                       a.ValidatedByOfficeID,
                       @AuditUserName
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ValidatedByOfficeID <> b.ValidatedByOfficeID)
                      OR (
                             a.ValidatedByOfficeID IS NOT NULL
                             AND b.ValidatedByOfficeID IS NULL
                         )
                      OR (
                             a.ValidatedByOfficeID IS NULL
                             AND b.ValidatedByOfficeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578610000000,
                       a.TestID,
                       NULL,
                       b.ValidatedByPersonID,
                       a.ValidatedByPersonID,
                       @AuditUserName
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ValidatedByPersonID <> b.ValidatedByPersonID)
                      OR (
                             a.ValidatedByPersonID IS NOT NULL
                             AND b.ValidatedByPersonID IS NULL
                         )
                      OR (
                             a.ValidatedByPersonID IS NULL
                             AND b.ValidatedByPersonID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578740000000,
                       a.TestID,
                       NULL,
                       b.ReadOnlyIndicator,
                       a.ReadOnlyIndicator,
                       @AuditUserName
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ReadOnlyIndicator <> b.ReadOnlyIndicator)
                      OR (
                             a.ReadOnlyIndicator IS NOT NULL
                             AND b.ReadOnlyIndicator IS NULL
                         )
                      OR (
                             a.ReadOnlyIndicator IS NULL
                             AND b.ReadOnlyIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4578760000000,
                       a.TestID,
                       NULL,
                       b.NonLaboratoryTestIndicator,
                       a.NonLaboratoryTestIndicator,
                       @AuditUserName
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.NonLaboratoryTestIndicator <> b.NonLaboratoryTestIndicator)
                      OR (
                             a.NonLaboratoryTestIndicator IS NOT NULL
                             AND b.NonLaboratoryTestIndicator IS NULL
                         )
                      OR (
                             a.NonLaboratoryTestIndicator IS NULL
                             AND b.NonLaboratoryTestIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       50815850000000,
                       a.TestID,
                       NULL,
                       b.ExternalTestIndicator,
                       a.ExternalTestIndicator,
                       @AuditUserName
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ExternalTestIndicator <> b.ExternalTestIndicator)
                      OR (
                             a.ExternalTestIndicator IS NOT NULL
                             AND b.ExternalTestIndicator IS NULL
                         )
                      OR (
                             a.ExternalTestIndicator IS NULL
                             AND b.ExternalTestIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       50815860000000,
                       a.TestID,
                       NULL,
                       b.PerformedByOfficeID,
                       a.PerformedByOfficeID,
                       @AuditUserName
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.PerformedByOfficeID <> b.PerformedByOfficeID)
                      OR (
                             a.PerformedByOfficeID IS NOT NULL
                             AND b.PerformedByOfficeID IS NULL
                         )
                      OR (
                             a.PerformedByOfficeID IS NULL
                             AND b.PerformedByOfficeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       50815870000000,
                       a.TestID,
                       NULL,
                       b.ReceivedDate,
                       a.ReceivedDate,
                       @AuditUserName
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ReceivedDate <> b.ReceivedDate)
                      OR (
                             a.ReceivedDate IS NOT NULL
                             AND b.ReceivedDate IS NULL
                         )
                      OR (
                             a.ReceivedDate IS NULL
                             AND b.ReceivedDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       50815880000000,
                       a.TestID,
                       NULL,
                       b.ContactPerson,
                       a.ContactPerson,
                       @AuditUserName
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                WHERE (a.ContactPerson <> b.ContactPerson)
                      OR (
                             a.ContactPerson IS NOT NULL
                             AND b.ContactPerson IS NULL
                         )
                      OR (
                             a.ContactPerson IS NULL
                             AND b.ContactPerson IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailRestore
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    idfObjectDetail,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       a.TestID,
                       NULL,
                       @AuditUserName
                FROM @TestAfterEdit AS a
                    FULL JOIN @TestBeforeEdit AS b
                        ON a.TestID = b.TestID
                where a.RowStatus = 0
                      AND b.RowStatus = 1;
            END
            ELSE
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject
                )
                VALUES
                (@DataAuditEventid, @ObjectTableID, @TestID);
            END
        END
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USSP_HUM_ANTIVIRAL_THERAPIES_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USSP_HUM_ANTIVIRAL_THERAPIES_SET
--
-- Description: Add or update human disease report anti-viral therapies
--          
-- Author: Harold Prior
--
-- Revision History:
-- Name                     Date       Change Detail
-- ------------------------ ---------- -----------------------------------------------------------
-- Stephen Long             11/21/2022 Initial release with data audit logic for SAUC30 and 31.
-- Stephen Long             11/29/2022 Added delete data audit logic.
--
-- Testing code:
-- exec USSP_HUM_ANTIVIRAL_THERAPIES_SET NULL
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_HUM_ANTIVIRAL_THERAPIES_SET]
    @HumanDiseaseReportID BIGINT = NULL,
    @AntiviralTherapiesParameters NVARCHAR(MAX) = NULL,
    @OutbreakCall INT = 0,
    @AuditUserName NVARCHAR(200) = '',
    @DataAuditEventID BIGINT = NULL
AS
DECLARE @AntimicrobialTherapyID BIGINT = NULL,
        @FirstAdministeredDate DATETIME2 = NULL,
        @AntimicrobialTherapyName NVARCHAR(200),
        @Dosage NVARCHAR(200),
        @RowAction NVARCHAR(1),
        @RowStatus INT = 0,
        @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
        @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectID BIGINT = NULL,
        @ObjectTableID BIGINT = 75470000000; -- tlbAntimicrobialTherapy
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(MAX)
);
DECLARE @AntiviralTherapiesTemp TABLE
(
    idfAntimicrobialTherapy BIGINT NULL,
    idfHumanCase BIGINT NULL,
    datFirstAdministeredDate DATETIME2 NULL,
    strAntimicrobialTherapyName NVARCHAR(200) NULL,
    strDosage NVARCHAR(200) NULL,
    rowAction NVARCHAR(1) NULL
);
DECLARE @AntiviralTherapiesBeforeEdit TABLE
(
    AntimicrobialTherapyID BIGINT,
    HumanDiseaseReportID BIGINT,
    FirstAdministeredDate DATETIME2,
    AntimicrobialTherapyName NVARCHAR(200),
    Dosage NVARCHAR(200),
    RowStatus INT
);
DECLARE @AntiviralTherapiesAfterEdit TABLE
(
    AntimicrobialTherapyID BIGINT,
    HumanDiseaseReportID BIGINT,
    FirstAdministeredDate DATETIME2,
    AntimicrobialTherapyName NVARCHAR(200),
    Dosage NVARCHAR(200),
    RowStatus INT
);
BEGIN
    SET NOCOUNT ON;

    INSERT INTO @AntiviralTherapiesTemp
    SELECT *
    FROM
        OPENJSON(@AntiviralTherapiesParameters)
        WITH
        (
            idfAntimicrobialTherapy BIGINT,
            idfHumanCase BIGINT,
            datFirstAdministeredDate DATETIME2,
            strAntimicrobialTherapyName NVARCHAR(200),
            strDosage NVARCHAR(200),
            rowAction NVARCHAR(1)
        );

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        WHILE EXISTS (SELECT * FROM @AntiviralTherapiesTemp)
        BEGIN
            SELECT TOP 1
                @AntimicrobialTherapyID = idfAntimicrobialTherapy,
                @FirstAdministeredDate = datFirstAdministeredDate,
                @AntimicrobialTherapyName = strAntimicrobialTherapyName,
                @Dosage = strDosage,
                @RowAction = rowAction
            FROM @AntiviralTherapiesTemp

            IF NOT EXISTS
            (
                SELECT TOP 1
                    idfAntimicrobialTherapy
                FROM dbo.tlbAntimicrobialTherapy
                WHERE idfAntimicrobialTherapy = @AntimicrobialTherapyID
            )
            BEGIN
                IF @OutbreakCall = 1
                BEGIN
                    EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbAntimicrobialTherapy',
                                                   @AntimicrobialTherapyID OUTPUT;
                END
                ELSE
                BEGIN
                    INSERT INTO @SuppressSelect
                    EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbAntimicrobialTherapy',
                                                   @AntimicrobialTherapyID OUTPUT;
                END

                INSERT INTO dbo.tlbAntimicrobialTherapy
                (
                    idfAntimicrobialTherapy,
                    idfHumanCase,
                    datFirstAdministeredDate,
                    strAntimicrobialTherapyName,
                    strDosage,
                    intRowStatus,
                    AuditCreateUser,
                    AuditCreateDTM
                )
                VALUES
                (@AntimicrobialTherapyID,
                 @HumanDiseaseReportID,
                 @FirstAdministeredDate,
                 @AntimicrobialTherapyName,
                 @Dosage,
                 0  ,
                 @AuditUserName,
                 GETDATE()
                );

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser
                )
                VALUES
                (@DataAuditEventID,
                 @ObjectTableID,
                 @AntimicrobialTherapyID,
                 10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                 + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
                 @AuditUserName
                );
            -- End data audit
            END
            ELSE
            BEGIN
                IF @RowAction = 'D'
                BEGIN
                    SET @RowStatus = 1;
                END
                ELSE
                BEGIN
                    SET @RowStatus = 0;
                END

                INSERT INTO @AntiviralTherapiesBeforeEdit
                (
                    AntimicrobialTherapyID,
                    HumanDiseaseReportID,
                    FirstAdministeredDate,
                    AntimicrobialTherapyName,
                    Dosage,
                    RowStatus
                )
                SELECT idfAntimicrobialTherapy,
                       idfHumanCase,
                       datFirstAdministeredDate,
                       strAntimicrobialTherapyName,
                       strDosage,
                       intRowStatus
                FROM dbo.tlbAntimicrobialTherapy
                WHERE idfAntimicrobialTherapy = @AntimicrobialTherapyID;

                UPDATE dbo.tlbAntimicrobialTherapy
                SET idfHumanCase = @HumanDiseaseReportID,
                    datFirstAdministeredDate = @FirstAdministeredDate,
                    strAntimicrobialTherapyName = @AntimicrobialTherapyName,
                    strDosage = @Dosage,
                    intRowStatus = @RowStatus,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE idfAntimicrobialTherapy = @AntimicrobialTherapyID
                      AND intRowStatus = 0;

                INSERT INTO @AntiviralTherapiesAfterEdit
                (
                    AntimicrobialTherapyID,
                    HumanDiseaseReportID,
                    FirstAdministeredDate,
                    AntimicrobialTherapyName,
                    Dosage,
                    RowStatus
                )
                SELECT idfAntimicrobialTherapy,
                       idfHumanCase,
                       datFirstAdministeredDate,
                       strAntimicrobialTherapyName,
                       strDosage,
                       intRowStatus
                FROM dbo.tlbAntimicrobialTherapy
                WHERE idfAntimicrobialTherapy = @AntimicrobialTherapyID;

                IF @RowStatus = 0
                BEGIN
                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableID,
                           4577800000000,
                           a.AntimicrobialTherapyID,
                           NULL,
                           b.HumanDiseaseReportID,
                           a.HumanDiseaseReportID,
                           @AuditUserName
                    FROM @AntiviralTherapiesAfterEdit AS a
                        FULL JOIN @AntiviralTherapiesBeforeEdit AS b
                            ON a.AntimicrobialTherapyID = b.AntimicrobialTherapyID
                    WHERE (a.HumanDiseaseReportID <> b.HumanDiseaseReportID)
                          OR (
                                 a.HumanDiseaseReportID IS NOT NULL
                                 AND b.HumanDiseaseReportID IS NULL
                             )
                          OR (
                                 a.HumanDiseaseReportID IS NULL
                                 AND b.HumanDiseaseReportID IS NOT NULL
                             );

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableID,
                           78350000000,
                           a.AntimicrobialTherapyID,
                           NULL,
                           b.FirstAdministeredDate,
                           a.FirstAdministeredDate,
                           @AuditUserName
                    FROM @AntiviralTherapiesAfterEdit AS a
                        FULL JOIN @AntiviralTherapiesBeforeEdit AS b
                            ON a.AntimicrobialTherapyID = b.AntimicrobialTherapyID
                    WHERE (a.FirstAdministeredDate <> b.FirstAdministeredDate)
                          OR (
                                 a.FirstAdministeredDate IS NOT NULL
                                 AND b.FirstAdministeredDate IS NULL
                             )
                          OR (
                                 a.FirstAdministeredDate IS NULL
                                 AND b.FirstAdministeredDate IS NOT NULL
                             );

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableID,
                           78360000000,
                           a.AntimicrobialTherapyID,
                           NULL,
                           b.AntimicrobialTherapyName,
                           a.AntimicrobialTherapyName,
                           @AuditUserName
                    FROM @AntiviralTherapiesAfterEdit AS a
                        FULL JOIN @AntiviralTherapiesBeforeEdit AS b
                            ON a.AntimicrobialTherapyID = b.AntimicrobialTherapyID
                    WHERE (a.AntimicrobialTherapyName <> b.AntimicrobialTherapyName)
                          OR (
                                 a.AntimicrobialTherapyName IS NOT NULL
                                 AND b.AntimicrobialTherapyName IS NULL
                             )
                          OR (
                                 a.AntimicrobialTherapyName IS NULL
                                 AND b.AntimicrobialTherapyName IS NOT NULL
                             );

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableID,
                           4577810000000,
                           a.AntimicrobialTherapyID,
                           NULL,
                           b.Dosage,
                           a.Dosage,
                           @AuditUserName
                    FROM @AntiviralTherapiesAfterEdit AS a
                        FULL JOIN @AntiviralTherapiesBeforeEdit AS b
                            ON a.AntimicrobialTherapyID = b.AntimicrobialTherapyID
                    WHERE (a.Dosage <> b.Dosage)
                          OR (
                                 a.Dosage IS NOT NULL
                                 AND b.Dosage IS NULL
                             )
                          OR (
                                 a.Dosage IS NULL
                                 AND b.Dosage IS NOT NULL
                             );

                    INSERT INTO dbo.tauDataAuditDetailRestore
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        idfObjectDetail,
                        AuditCreateUser
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableID,
                           a.AntimicrobialTherapyID,
                           NULL,
                           @AuditUserName
                    FROM @AntiviralTherapiesAfterEdit AS a
                        FULL JOIN @AntiviralTherapiesBeforeEdit AS b
                            ON a.AntimicrobialTherapyID = b.AntimicrobialTherapyID
                    WHERE a.RowStatus = 0
                          AND b.RowStatus = 1;
                END
                ELSE
                BEGIN
                    INSERT INTO dbo.tauDataAuditDetailDelete
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject
                    )
                    VALUES
                    (@DataAuditEventid, @ObjectTableID, @AntimicrobialTherapyID);
                END
            END

            SET ROWCOUNT 1;
            DELETE FROM @AntiviralTherapiesTemp;
            SET ROWCOUNT 0;
        END

    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Procedure [dbo].[USSP_ADMIN_EVENT_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USSP_ADMIN_EVENT_SET
--
-- Description:	Inserts or updates the event table for SAUC55 and SAUC56.
-- 
-- Field Notes:
--
-- Object - ID of record such as human disease report
-- LoginSite - ID of organization login site where initial event that raise notification was 
-- created.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     11/18/2022 Initial release with data audit logic for SAUC30 and 31.
-- ================================================================================================
CREATE PROCEDURE [dbo].[USSP_ADMIN_EVENT_SET]
(
    @EventId BIGINT,
    @EventTypeId BIGINT,
    @UserId BIGINT,
    @ObjectId BIGINT = NULL,
    @DiseaseId BIGINT = NULL,
    @SiteId BIGINT = NULL,
    @InformationString NVARCHAR(MAX) = NULL,
    @LoginSiteId BIGINT = NULL,
    @LocationId BIGINT = NULL,
    @AuditUserName NVARCHAR(200), 
    @DataAuditEventID BIGINT = NULL 
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
                @NeighboringSiteId BIGINT = NULL,
                @EventUserId BIGINT = NULL,
                @EventSiteId BIGINT = NULL, 
                @AuditUserID BIGINT = NULL,
                @AuditSiteID BIGINT = NULL,
                @ObjectTableID BIGINT = 76040000000; -- tstEvent
        DECLARE @EventUsers TABLE
        (
            UserId BIGINT NOT NULL,
            SiteId BIGINT NOT NULL
        );
        DECLARE @NeighboringSites TABLE
        (
            AccessRuleId BIGINT,
            SiteId BIGINT
        );
        DECLARE @SiteAccessRuleGrantee TABLE (AccessRuleId BIGINT);

        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data Audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        -- Get all users of the target site that have subscribed to the notification type.
        INSERT INTO @EventUsers
        SELECT u.idfUserID,
               u.idfsSite
        FROM dbo.tstUserTable u
            INNER JOIN dbo.EventSubscription e
                ON e.idfUserID = u.idfUserID
                   AND e.EventNameID = @EventTypeId
        WHERE u.idfsSite = @LoginSiteId
              AND u.intRowStatus = 0
              AND e.ReceiveAlertFlag = 1;

        -- Get all users of the target site's neighboring sites based on filtration rules.
        -- Logged in user site ID is a grantor, then get list of grantee sites.
        INSERT INTO @NeighboringSites
        SELECT ar.AccessRuleID,
               ara.ActorSiteID
        FROM dbo.AccessRule ar
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.AccessRuleID = ar.AccessRuleID
                   AND ara.intRowStatus = 0
        WHERE ar.intRowStatus = 0
              AND ar.BorderingAreaRuleIndicator = 1
              AND ar.GrantingActorSiteID = @LoginSiteId
              AND ara.ActorSiteID IS NOT NULL
              AND ara.ActorSiteID <> @LoginSiteId
        GROUP BY ara.ActorSiteID,
                 ar.AccessRuleID;

        -- Logged in user site ID access rules as a grantee.
        INSERT INTO @SiteAccessRuleGrantee
        SELECT ara.AccessRuleID
        FROM dbo.AccessRuleActor ara
            INNER JOIN dbo.AccessRule ar
                ON ar.AccessRuleID = ara.AccessRuleID
                   AND ar.intRowStatus = 0
        WHERE ara.ActorSiteID = @LoginSiteId
              AND ara.intRowStatus = 0
              AND ar.BorderingAreaRuleIndicator = 1;

        -- Select all grantee sites that the site is also a grantee of.
        INSERT INTO @NeighboringSites
        SELECT sg.AccessRuleID,
               ara.ActorSiteID
        FROM @SiteAccessRuleGrantee sg
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.AccessRuleID = sg.AccessRuleID
                   AND ara.intRowStatus = 0
        WHERE ara.ActorSiteID <> @LoginSiteId
              AND ara.ActorSiteID IS NOT NULL
        GROUP BY ara.ActorSiteID,
                 sg.AccessRuleID;

        WHILE EXISTS (SELECT * FROM @NeighboringSites)
        BEGIN
            SELECT TOP 1
                @NeighboringSiteId = SiteId
            FROM @NeighboringSites;

            -- Get all users of the neighboring site.
            INSERT INTO @EventUsers
            SELECT u.idfUserID,
                   u.idfsSite
            FROM dbo.tstUserTable u
                INNER JOIN dbo.EventSubscription e
                    ON e.idfUserID = u.idfUserID
                       AND e.EventNameID = @EventTypeId
            WHERE u.idfsSite = @NeighboringSiteId
                  AND u.intRowStatus = 0
                  AND e.ReceiveAlertFlag = 1;

            DELETE FROM @NeighboringSites
            WHERE SiteID = @NeighboringSiteId;
        END

        WHILE EXISTS (SELECT * FROM @EventUsers)
        BEGIN
            SELECT TOP 1
                @EventUserId = UserId,
                @EventSiteId = SiteId
            FROM @EventUsers;

            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tstEvent', @EventId OUTPUT;

            -- Change to the third party site alert/event type id.
            IF @EventSiteId <> @SiteId
            BEGIN
                SET @EventTypeId = CASE WHEN @EventTypeId = 10025503 THEN
                    10025504
                WHEN @EventTypeId = 10025501 THEN
                    10025502
                WHEN @EventTypeId = 10025505 THEN
                    10025506
                WHEN @EventTypeId = 10025507 THEN
                    10025508
                WHEN @EventTypeId = 10025509 THEN
                    10025512
                WHEN @EventTypeId = 10025510 THEN
                    10025511
                WHEN @EventTypeId = 10025037 THEN
                    10025038
                WHEN @EventTypeId = 10025041 THEN
                    10025042
                WHEN @EventTypeId = 10025043 THEN
                    10025044
                WHEN @EventTypeId = 10025045 THEN
                    10025046
                WHEN @EventTypeId = 10025047 THEN
                    10025048
                WHEN @EventTypeId = 10025077 THEN
                    10025078
                WHEN @EventTypeId = 10025079 THEN
                    10025080
                WHEN @EventTypeId = 10025081 THEN
                    10025082
                WHEN @EventTypeId = 10025099 THEN
                    10025100
                WHEN @EventTypeId = 10025097 THEN
                    10025098
                WHEN @EventTypeId = 10025129 THEN
                    10025130
                WHEN @EventTypeId = 10025101 THEN
                    10025102
                WHEN @EventTypeId = 10025103 THEN
                    10025104
                WHEN @EventTypeId = 10025105 THEN
                    10025106
                WHEN @EventTypeId = 10025107 THEN
                    10025108
                WHEN @EventTypeId = 10025085 THEN
                    10025086
                WHEN @EventTypeId = 10025087 THEN
                    10025088
                WHEN @EventTypeId = 10025089 THEN
                    10025090
                WHEN @EventTypeId = 10025091 THEN
                    10025092
                WHEN @EventTypeId = 10025093 THEN
                    10025094
                WHEN @EventTypeId = 10025095 THEN
                    10025096
                WHEN @EventTypeId = 10025067 THEN
                    10025068
                WHEN @EventTypeId = 10025071 THEN
                    10025072
                WHEN @EventTypeId = 10025073 THEN
                    10025074
                WHEN @EventTypeId = 10025075 THEN
                    10025076
                WHEN @EventTypeId = 10025513 THEN
                    10025514
                WHEN @EventTypeId = 10025517 THEN
                    10025518
                WHEN @EventTypeId = 10025519 THEN
                    10025520
                WHEN @EventTypeId = 10025525 THEN
                    10025526
                WHEN @EventTypeId = 10025049 THEN
                    10025050
                WHEN @EventTypeId = 10025051 THEN
                    10025052
                WHEN @EventTypeId = 10025053 THEN
                    10025054
                WHEN @EventTypeId = 10025055 THEN
                    10025056
                WHEN @EventTypeId = 10025057 THEN
                    10025058
                WHEN @EventTypeId = 10025059 THEN
                    10025060
                WHEN @EventTypeId = 10025061 THEN
                    10025062
                WHEN @EventTypeId = 10025065 THEN
                    10025066
                WHEN @EventTypeId = 10025069 THEN
                    10025070
                WHEN @EventTypeId = 10025527 THEN
                    10025528
                WHEN @EventTypeId = 10025529 THEN
                    10025530
                WHEN @EventTypeId = 10025537 THEN
                    10025538
                WHEN @EventTypeId = 10025539 THEN
                    10025540
                WHEN @EventTypeId = 10025563 THEN
                    10025564
                ELSE
                    @EventTypeId
                END
            END

            INSERT INTO dbo.tstEvent
            (
                idfEventID,
                idfsEventTypeID,
                idfObjectID,
                strInformationString,
                --strNote, 
                datEventDatatime,
                idfUserID,
                intProcessed,
                idfsSite,
                idfsDiagnosis,
                idfsLoginSite,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateDTM,
                AuditCreateUser,
                idfsLocation
            )
            VALUES
            (@EventId,
             @EventTypeId,
             @ObjectId,
             @InformationString,
             --@Note, 
             GETDATE(),
             @EventUserId,
             0  ,
             @EventSiteId,
             @DiseaseId,
             @LoginSiteId,
             10519001,
             '[{"idfEventID":' + CAST(@EventId AS NVARCHAR(300)) + '}]',
             GETDATE(),
             @AuditUserName,
             @LocationId
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @EventId,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName
            );
            -- End data audit

            DELETE FROM @EventUsers
            WHERE UserId = @EventUserId
                  AND SiteId = @EventSiteId;
        END;
    END TRY
    BEGIN CATCH
        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        THROW;
    END CATCH;

    SELECT @ReturnCode ReturnCode,
           @ReturnMessage ReturnMessage;
END;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Procedure [dbo].[USSP_ADMIN_FF_DATA_AUDIT_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USSP_ADMIN_FF_DATA_AUDIT_SET
--
-- Description:	Inserts or updates data audit records for all activity parameters of an 
-- observation record.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     11/28/2022 Initial release.
-- ================================================================================================
CREATE PROCEDURE [dbo].[USSP_ADMIN_FF_DATA_AUDIT_SET]
    @AuditUserName NVARCHAR(200),
    @DataAuditEventID BIGINT,
    @ObservationID BIGINT
AS
DECLARE @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @ObjectID BIGINT = NULL,
        @ObjectTableID BIGINT = 75410000000, -- tlbActivityParameters
        @ActivityParameterID BIGINT,
        @AnswerValue SQL_VARIANT;
DECLARE @ActivityParameters TABLE
(
    ActivityParameterID BIGINT,
    AnswerValue SQL_VARIANT
);
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        INSERT INTO @ActivityParameters
        SELECT idfActivityParameters,
               varValue
        FROM dbo.tlbActivityParameters
        WHERE idfObservation = @ObservationID
              AND intRowStatus = 0;

        WHILE EXISTS (SELECT * FROM @ActivityParameters)
        BEGIN
            SELECT TOP 1
                @ActivityParameterID = ActivityParameterID,
                @AnswerValue = AnswerValue
            FROM @ActivityParameters;

            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @ActivityParameterID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName
            );

            DELETE FROM @ActivityParameters
            WHERE ActivityParameterID = @ActivityParameterID;
        END
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Procedure [dbo].[USSP_GBL_ADDRESS_SET_WITH_AUDITING]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO


-- ================================================================================================
-- Name: Added NULL Elevation parm to USSP_GBL_ADDRESS_SET_WITH_AUDITING
--
-- Description: Inserts or updates an address record as described in use case SYSUC07.
--          
-- Author: Mandar Kulkarni
--
-- Revision History:
-- Name				Date		Change Detail
-- ---------------	----------	--------------------------------------------------------------------
-- Stephen Long		04/21/2019	Fixed the check for location shared versus location on the 
--								update portion.
-- Stephen Long		12/26/2019	Added dbo prefix to function calls and replaced with v7 calls.
-- Stephen Long		06/04/2020	Added postal code set call and transaction logic.
-- Stephen Long		06/16/2021	Replaced country, region, rayon and settlement ID's with location ID 
--								to support location hierarchy.
-- Stephen Long		08/05/2021	Added audit user name.
-- Mark Wilson		09/13/2021	Added additional fields to tlbGeolocation and tlbGeoLocationShared
-- Mark Wilson		09/22/2021	standardized and updated calls to USSPs
-- Mark Wilson		10/06/2021	Added Elevation.
-- Mark Wilson		10/18/2021	added back write of Country, Region, Rayon, Settlement.
-- Mark Wilson		10/19/2021	changed to USSP.
-- Steven Verner	07/06/2022  Updated location select statement to select from flattened location hierarchy table.
-- Leo Tracchia		11/28/2022	Added statements for Audit logging - this is a copy of [USSP_GBL_ADDRESS_SET] with auditing logic added 
-- Testing code:
/*

DECLARE	@return_value int,
		@ReturnCode int,
		@ReturnMessage nvarchar(max)

EXEC	@return_value = [dbo].[USSP_GBL_ADDRESS_SET_WITH_AUDITING]
		@LanguageID = 'en=US',
		@GeolocationID = NULL,
		@LocationID = 1347970000000,
		@Apartment = N'Bunny Apts',
		@Building = N'48',
		@StreetName = N'Broad Street',
		@PostalCodeString = N'30511',
		@Distance = 122.2,
		@Latitude = 125,
		@Longitude = 44,
		@Elevation = 1022,
		@ForeignAddressIndicator = 0,
		@GeolocationSharedIndicator = 0,
		@AuditUserName = N'Roscoe',
		@ReturnCode = @ReturnCode OUTPUT,
		@ReturnMessage = @ReturnMessage OUTPUT

SELECT	@GeolocationID as N'@GeolocationID',
		@ReturnCode as N'@ReturnCode',
		@ReturnMessage as N'@ReturnMessage'

*/
-- ================================================================================================
CREATE PROCEDURE [dbo].[USSP_GBL_ADDRESS_SET_WITH_AUDITING]
(
		@GeolocationID BIGINT = NULL OUTPUT,
	@DataAuditEventID BIGINT = NULL,
	@ResidentTypeID BIGINT = NULL,
	@GroundTypeID BIGINT = NULL,
	@GeolocationTypeID BIGINT = 10036001,
	@LocationID BIGINT,
	@Apartment NVARCHAR(200) = NULL,
	@Building NVARCHAR(200) = NULL,
	@StreetName NVARCHAR(200) = NULL,
	@House NVARCHAR(200) = NULL,
	@PostalCodeString NVARCHAR(200) = NULL,
	@DescriptionString NVARCHAR(200) = NULL,
	@Distance FLOAT = NULL,
	@Latitude FLOAT = NULL,
	@Longitude FLOAT = NULL,
	@Elevation FLOAT = NULL,
	@Accuracy FLOAT = NULL,
	@Alignment FLOAT = NULL,
	@ForeignAddressIndicator BIT = 0,
	@ForeignAddressString NVARCHAR(200) = NULL,
	@GeolocationSharedIndicator BIT = 0,
	@AuditUserName NVARCHAR(200) = '',
	@ReturnCode INT = 0 OUTPUT,
	@ReturnMessage NVARCHAR(MAX) = 'SUCCESS' OUTPUT
)

AS

DECLARE @PostalCodeID BIGINT;
DECLARE @StreetID BIGINT;
DECLARE @AdminLevel INT = NULL;
DECLARE @LocationNode HIERARCHYID = NULL;

--Data Audit--

	DECLARE @idfUserId BIGINT = NULL;
	DECLARE @idfSiteId BIGINT = NULL;
	DECLARE @idfsDataAuditEventType bigint = NULL;	
	DECLARE @idfObject bigint = @GeolocationID;
    DECLARE @ObjectGeoLocationSharedTableID BIGINT = 4572590000000; -- tlbGeoLocationShared 4572590000000
    DECLARE @ObjectGeoLocationTableID BIGINT = 75580000000;         -- tlbGeoLocation 75580000000
	DECLARE @idfDataAuditEvent bigint = NULL;	

	DECLARE @GeoLocationBeforeEdit TABLE
	(
		GeoLocationID BIGINT,
		ResidentTypeID BIGINT,
		GroundTypeID BIGINT,
		GeoLocationTypeID BIGINT,
		LocationID BIGINT,
		PostalCode NVARCHAR(200),
		StreetName NVARCHAR(200),
		House NVARCHAR(200),
		Building NVARCHAR(200),
		Apartment NVARCHAR(200),
		AddressDescription NVARCHAR(200),
		Distance FLOAT,
		Latitude FLOAT,
		Longitude FLOAT,
		Accuracy FLOAT,
		Alignment FLOAT,
		ForeignAddressIndicator BIT,
		ForeignAddressString NVARCHAR(200),
		ShortAddressString NVARCHAR(2000)
	);

	DECLARE @GeoLocationAfterEdit TABLE
	(
		GeoLocationID BIGINT,
		ResidentTypeID BIGINT,
		GroundTypeID BIGINT,
		GeoLocationTypeID BIGINT,
		LocationID BIGINT,
		PostalCode NVARCHAR(200),
		StreetName NVARCHAR(200),
		House NVARCHAR(200),
		Building NVARCHAR(200),
		Apartment NVARCHAR(200),
		AddressDescription NVARCHAR(200),
		Distance FLOAT,
		Latitude FLOAT,
		Longitude FLOAT,
		Accuracy FLOAT,
		Alignment FLOAT,
		ForeignAddressIndicator BIT,
		ForeignAddressString NVARCHAR(200),
		ShortAddressString NVARCHAR(2000)
	);

--Data Audit--

SELECT @LocationNode = node FROM dbo.gisLocation WHERE idfsLocation = @LocationID

BEGIN
	BEGIN TRY

		IF @AuditUserName = ''
			SET @AuditUserName = SUSER_NAME()

		SET @ReturnCode = 0;
		SET @ReturnMessage = 'SUCCESS';

		BEGIN TRANSACTION;

		IF @ForeignAddressIndicator = 0
		BEGIN
			-- Determine if the location ID passed in is at the settlement level.
			SELECT 
				@AdminLevel = node.GetLevel() 
			FROM dbo.gisLocation
			WHERE idfsLocation = @LocationID;

			DECLARE @idfsAdminLevel1 BIGINT, -- country
					@idfsAdminLevel2 BIGINT, -- region
					@idfsAdminLevel3 BIGINT, -- rayon
					@idfsAdminLevel4 BIGINT -- settlement

			
			--SELECT
	
			--	@idfsAdminLevel1 = a1.idfsLocation,
			--	@idfsAdminLevel2 = a2.idfsLocation,
			--	@idfsAdminLevel3 = a3.idfsLocation,
			--	@idfsAdminLevel4 = a4.idfsLocation

			--FROM dbo.gisLocation L 
			--INNER JOIN dbo.gisLocation a1 ON (L.node.IsDescendantOf(a1.node) = 1 OR a1.idfsLocation = @locationID) AND a1.node.GetLevel() = 1
			--LEFT JOIN dbo.gisLocation a2 ON (L.node.IsDescendantOf(a2.node) = 1 OR a2.idfsLocation = @locationID) AND a2.node.GetLevel() = 2
			--LEFT JOIN dbo.gisLocation a3 ON (L.node.IsDescendantOf(a3.node) = 1 OR a3.idfsLocation = @locationID) AND a3.node.GetLevel() = 3
			--LEFT JOIN dbo.gisLocation a4 ON (L.node.IsDescendantOf(a4.node) = 1 OR a4.idfsLocation = @locationID) AND a4.node.GetLevel() = 4

			--WHERE L.idfsLocation = @LocationID

			SELECT @idfsAdminLevel1 = fglhf.AdminLevel1ID, @idfsAdminLevel2 = fglhf.AdminLevel2ID, @idfsAdminLevel3 = fglhf.AdminLevel3ID, @idfsAdminLevel4 = adminlevel4ID 
			FROM dbo.FN_GBL_LocationHierarchy_Flattened('EN-us') fglhf
			WHERE fglhf.idfsLocation = @LocationID

			-- If it is a settlement level, then determine if the street name and/or postal code 
			-- needs to be added to the appropriate tables for inclusion in the street or postal 
			-- code drop downs.
			IF @AdminLevel = 4
			BEGIN
				IF @StreetName IS NOT NULL
				BEGIN
					EXECUTE dbo.USSP_GBL_STREET_SET 
						@StreetName = @StreetName,
						@idfsLocation = @LocationID,
						@AuditUserName = @AuditUserName,
						@idfStreet = @StreetID OUTPUT

				END

				IF @PostalCodeString IS NOT NULL
				BEGIN
					EXECUTE dbo.USSP_GBL_POSTAL_CODE_SET 
						@strPostCode = @PostalCodeString,
						@idfsLocation = @LocationID,
						@AuditUserName = @AuditUserName,
						@idfPostalCode = @PostalCodeID OUTPUT
				END
			
			END
		
		END

		IF (EXISTS (SELECT * FROM dbo.tlbGeoLocation WHERE idfGeoLocation = @GeolocationID)	AND (ISNULL(@GeolocationSharedIndicator, 0) <> 1))
		
			BEGIN

				INSERT INTO @GeoLocationBeforeEdit
                (
                    GeoLocationID,
                    ResidentTypeID,
                    GroundTypeID,
                    GeoLocationTypeID,
                    LocationID,
                    PostalCode,
                    StreetName,
                    House,
                    Building,
                    Apartment,
                    AddressDescription,
                    Distance,
                    Latitude,
                    Longitude,
                    Accuracy,
                    Alignment,
                    ForeignAddressIndicator,
                    ForeignAddressString,
                    ShortAddressString
                )
                SELECT idfGeoLocation,
                       idfsResidentType,
                       idfsGroundType,
                       idfsGeoLocationType,
                       idfsLocation,
                       strPostCode,
                       strStreetName,
                       strHouse,
                       strBuilding,
                       strApartment,
                       strDescription,
                       dblDistance,
                       dblLatitude,
                       dblLongitude,
                       dblAccuracy,
                       dblAlignment,
                       blnForeignAddress,
                       strForeignAddress,
                       strShortAddressString
                FROM dbo.tlbGeoLocation
                WHERE idfGeoLocation = @GeoLocationID;

				UPDATE dbo.tlbGeoLocation
				SET idfsResidentType = @ResidentTypeID,
					idfsGroundType = @GroundTypeID,
					idfsGeoLocationType = @GeolocationTypeID,
					idfsCountry = @idfsAdminLevel1,
					idfsRegion = @idfsAdminLevel2,
					idfsRayon = @idfsAdminLevel3,
					idfsSettlement = @idfsAdminLevel4,
					idfsLocation = @LocationID,
					strApartment = @Apartment,
					strDescription = @DescriptionString,
					dblDistance = @Distance,
					dblAccuracy = @Accuracy,
					dblAlignment = @Alignment,
					strBuilding = @Building,
					strStreetName = @StreetName,
					strHouse = @House,
					strPostCode = @PostalCodeString,
					blnForeignAddress = ISNULL(@ForeignAddressIndicator, 0),
					strForeignAddress = @ForeignAddressString,
					dblLatitude = @Latitude,
					dblLongitude = @Longitude,
					dblElevation = @Elevation,
					AuditUpdateUser = @AuditUserName,
					AuditUpdateDTM = GETDATE()
				WHERE idfGeoLocation = @GeoLocationID

				INSERT INTO @GeoLocationAfterEdit
                (
                    GeoLocationID,
                    ResidentTypeID,
                    GroundTypeID,
                    GeoLocationTypeID,
                    LocationID,
                    PostalCode,
                    StreetName,
                    House,
                    Building,
                    Apartment,
                    AddressDescription,
                    Distance,
                    Latitude,
                    Longitude,
                    Accuracy,
                    Alignment,
                    ForeignAddressIndicator,
                    ForeignAddressString,
                    ShortAddressString
                )
                SELECT idfGeoLocation,
                       idfsResidentType,
                       idfsGroundType,
                       idfsGeoLocationType,
                       idfsLocation,
                       strPostCode,
                       strStreetName,
                       strHouse,
                       strBuilding,
                       strApartment,
                       strDescription,
                       dblDistance,
                       dblLatitude,
                       dblLongitude,
                       dblAccuracy,
                       dblAlignment,
                       blnForeignAddress,
                       strForeignAddress,
                       strShortAddressString
                FROM dbo.tlbGeoLocation
                WHERE idfGeoLocation = @GeoLocationID;

				--ResidentTypeID (tlbGeoLocation)
				INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79200000000,
                       a.GeoLocationID,
                       NULL,
                       b.ResidentTypeID,
                       a.ResidentTypeID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ResidentTypeID <> b.ResidentTypeID)
                      OR (
                             a.ResidentTypeID IS NOT NULL
                             AND b.ResidentTypeID IS NULL
                         )
                      OR (
                             a.ResidentTypeID IS NULL
                             AND b.ResidentTypeID IS NOT NULL
                         );

				--GroundTypeID (tlbGeoLocation)
				INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79170000000,
                       a.GeoLocationID,
                       NULL,
                       b.GroundTypeID,
                       a.GroundTypeID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.GroundTypeID <> b.GroundTypeID)
                      OR (
                             a.GroundTypeID IS NOT NULL
                             AND b.GroundTypeID IS NULL
                         )
                      OR (
                             a.GroundTypeID IS NULL
                             AND b.GroundTypeID IS NOT NULL
                         );

				--GeoLocationTypeID (tlbGeoLocation)
				INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79160000000,
                       a.GeoLocationID,
                       NULL,
                       b.GeoLocationTypeID,
                       a.GeoLocationTypeID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.GeoLocationTypeID <> b.GeoLocationTypeID)
                      OR (
                             a.GeoLocationTypeID IS NOT NULL
                             AND b.GeoLocationTypeID IS NULL
                         )
                      OR (
                             a.GeoLocationTypeID IS NULL
                             AND b.GeoLocationTypeID IS NOT NULL
                         );

				--LocationID (tlbGeoLocation)
				INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       51523700000000,
                       a.GeoLocationID,
                       NULL,
                       b.LocationID,
                       a.LocationID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.LocationID <> b.LocationID)
                      OR (
                             a.LocationID IS NOT NULL
                             AND b.LocationID IS NULL
                         )
                      OR (
                             a.LocationID IS NULL
                             AND b.LocationID IS NOT NULL
                         );

				--PostalCode (tlbGeoLocation)
				INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79260000000,
                       a.GeoLocationID,
                       NULL,
                       b.PostalCode,
                       a.PostalCode,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.PostalCode <> b.PostalCode)
                      OR (
                             a.PostalCode IS NOT NULL
                             AND b.PostalCode IS NULL
                         )
                      OR (
                             a.PostalCode IS NULL
                             AND b.PostalCode IS NOT NULL
                         );

				--StreetName (tlbGeoLocation)
				INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79270000000,
                       a.GeoLocationID,
                       NULL,
                       b.StreetName,
                       a.StreetName,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.StreetName <> b.StreetName)
                      OR (
                             a.StreetName IS NOT NULL
                             AND b.StreetName IS NULL
                         )
                      OR (
                             a.StreetName IS NULL
                             AND b.StreetName IS NOT NULL
                         );

				--House (tlbGeoLocation)
				INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79250000000,
                       a.GeoLocationID,
                       NULL,
                       b.House,
                       a.House,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.House <> b.House)
                      OR (
                             a.House IS NOT NULL
                             AND b.House IS NULL
                         )
                      OR (
                             a.House IS NULL
                             AND b.House IS NOT NULL
                         );

				--Building (tlbGeoLocation)
				INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79230000000,
                       a.GeoLocationID,
                       NULL,
                       b.Building,
                       a.Building,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Building <> b.Building)
                      OR (
                             a.Building IS NOT NULL
                             AND b.Building IS NULL
                         )
                      OR (
                             a.Building IS NULL
                             AND b.Building IS NOT NULL
                         );

				--Apartment (tlbGeoLocation)
				INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       4577890000000,
                       a.GeoLocationID,
                       NULL,
                       b.Apartment,
                       a.Apartment,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Apartment <> b.Apartment)
                      OR (
                             a.Apartment IS NOT NULL
                             AND b.Apartment IS NULL
                         )
                      OR (
                             a.Apartment IS NULL
                             AND b.Apartment IS NOT NULL
                         );

				--AddressDescription (tlbGeoLocation)
				INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79240000000,
                       a.GeoLocationID,
                       NULL,
                       b.AddressDescription,
                       a.AddressDescription,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.AddressDescription <> b.AddressDescription)
                      OR (
                             a.AddressDescription IS NOT NULL
                             AND b.AddressDescription IS NULL
                         )
                      OR (
                             a.AddressDescription IS NULL
                             AND b.AddressDescription IS NOT NULL
                         );

				--Distance (tlbGeoLocation)
				INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79110000000,
                       a.GeoLocationID,
                       NULL,
                       b.Distance,
                       a.Distance,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Distance <> b.Distance)
                      OR (
                             a.Distance IS NOT NULL
                             AND b.Distance IS NULL
                         )
                      OR (
                             a.Distance IS NULL
                             AND b.Distance IS NOT NULL
                         );

				--Latitude (tlbGeoLocation)
				INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79120000000,
                       a.GeoLocationID,
                       NULL,
                       b.Latitude,
                       a.Latitude,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Latitude <> b.Latitude)
                      OR (
                             a.Latitude IS NOT NULL
                             AND b.Latitude IS NULL
                         )
                      OR (
                             a.Latitude IS NULL
                             AND b.Latitude IS NOT NULL
                         );

				--Longitude (tlbGeoLocation)
				INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79130000000,
                       a.GeoLocationID,
                       NULL,
                       b.Longitude,
                       a.Longitude,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Longitude <> b.Longitude)
                      OR (
                             a.Longitude IS NOT NULL
                             AND b.Longitude IS NULL
                         )
                      OR (
                             a.Longitude IS NULL
                             AND b.Longitude IS NOT NULL
                         );

				--Accuracy (tlbGeoLocation)
				INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79090000000,
                       a.GeoLocationID,
                       NULL,
                       b.Accuracy,
                       a.Accuracy,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Accuracy <> b.Accuracy)
                      OR (
                             a.Accuracy IS NOT NULL
                             AND b.Accuracy IS NULL
                         )
                      OR (
                             a.Accuracy IS NULL
                             AND b.Accuracy IS NOT NULL
                         );

				--Alignment (tlbGeoLocation)
				INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79100000000,
                       a.GeoLocationID,
                       NULL,
                       b.Alignment,
                       a.Alignment,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Alignment <> b.Alignment)
                      OR (
                             a.Alignment IS NOT NULL
                             AND b.Alignment IS NULL
                         )
                      OR (
                             a.Alignment IS NULL
                             AND b.Alignment IS NOT NULL
                         );

				--ForeignAddressIndicator (tlbGeoLocation)
				INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       4578780000000,
                       a.GeoLocationID,
                       NULL,
                       b.ForeignAddressIndicator,
                       a.ForeignAddressIndicator,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ForeignAddressIndicator <> b.ForeignAddressIndicator)
                      OR (
                             a.ForeignAddressIndicator IS NOT NULL
                             AND b.ForeignAddressIndicator IS NULL
                         )
                      OR (
                             a.ForeignAddressIndicator IS NULL
                             AND b.ForeignAddressIndicator IS NOT NULL
                         );

				--ForeignAddressString (tlbGeoLocation)
				INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       4578790000000,
                       a.GeoLocationID,
                       NULL,
                       b.ForeignAddressString,
                       a.ForeignAddressString,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ForeignAddressString <> b.ForeignAddressString)
                      OR (
                             a.ForeignAddressString IS NOT NULL
                             AND b.ForeignAddressString IS NULL
                         )
                      OR (
                             a.ForeignAddressString IS NULL
                             AND b.ForeignAddressString IS NOT NULL
                         );

				--ShortAddressString (tlbGeoLocation)
				INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       51523680000000,
                       a.GeoLocationID,
                       NULL,
                       b.ShortAddressString,
                       a.ShortAddressString,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ShortAddressString <> b.ShortAddressString)
                      OR (
                             a.ShortAddressString IS NOT NULL
                             AND b.ShortAddressString IS NULL
                         )
                      OR (
                             a.ShortAddressString IS NULL
                             AND b.ShortAddressString IS NOT NULL
                         );

			END

		ELSE IF EXISTS (
				SELECT *
				FROM dbo.tlbGeoLocationShared
				WHERE idfGeoLocationShared = @GeolocationID
				)

			BEGIN

			INSERT INTO @GeoLocationBeforeEdit
                (
                    GeoLocationID,
                    ResidentTypeID,
                    GroundTypeID,
                    GeoLocationTypeID,
                    LocationID,
                    PostalCode,
                    StreetName,
                    House,
                    Building,
                    Apartment,
                    AddressDescription,
                    Distance,
                    Latitude,
                    Longitude,
                    Accuracy,
                    Alignment,
                    ForeignAddressIndicator,
                    ForeignAddressString,
                    ShortAddressString
                )
                SELECT idfGeoLocation,
                       idfsResidentType,
                       idfsGroundType,
                       idfsGeoLocationType,
                       idfsLocation,
                       strPostCode,
                       strStreetName,
                       strHouse,
                       strBuilding,
                       strApartment,
                       strDescription,
                       dblDistance,
                       dblLatitude,
                       dblLongitude,
                       dblAccuracy,
                       dblAlignment,
                       blnForeignAddress,
                       strForeignAddress,
                       strShortAddressString
                FROM dbo.tlbGeoLocation
                WHERE idfGeoLocation = @GeoLocationID;

				UPDATE dbo.tlbGeoLocationShared
				SET 
					idfsResidentType = @ResidentTypeID,
					idfsGroundType = @GroundTypeID,
					idfsGeoLocationType = 10036001,
					idfsCountry = @idfsAdminLevel1,
					idfsRegion = @idfsAdminLevel2,
					idfsRayon = @idfsAdminLevel3,
					idfsSettlement = @idfsAdminLevel4,
					idfsLocation = @LocationID,
					strApartment = @Apartment,
					strDescription = @DescriptionString,
					dblDistance = @Distance,
					dblAccuracy = @Accuracy,
					dblAlignment = @Alignment,
					strBuilding = @Building,
					strStreetName = @StreetName,
					strHouse = @House,
					strPostCode = @PostalCodeString,
					blnForeignAddress = ISNULL(@ForeignAddressIndicator, 0),
					strForeignAddress = @ForeignAddressString,
					dblLatitude = @Latitude,
					dblLongitude = @Longitude,
					dblElevation = @Elevation,
					AuditUpdateUser = @AuditUserName,
					AuditUpdateDTM = GETDATE() 

				WHERE idfGeoLocationShared = @GeolocationID

				INSERT INTO @GeoLocationAfterEdit
                (
                    GeoLocationID,
                    ResidentTypeID,
                    GroundTypeID,
                    GeoLocationTypeID,
                    LocationID,
                    PostalCode,
                    StreetName,
                    House,
                    Building,
                    Apartment,
                    AddressDescription,
                    Distance,
                    Latitude,
                    Longitude,
                    Accuracy,
                    Alignment,
                    ForeignAddressIndicator,
                    ForeignAddressString,
                    ShortAddressString
                )
                SELECT idfGeoLocation,
                       idfsResidentType,
                       idfsGroundType,
                       idfsGeoLocationType,
                       idfsLocation,
                       strPostCode,
                       strStreetName,
                       strHouse,
                       strBuilding,
                       strApartment,
                       strDescription,
                       dblDistance,
                       dblLatitude,
                       dblLongitude,
                       dblAccuracy,
                       dblAlignment,
                       blnForeignAddress,
                       strForeignAddress,
                       strShortAddressString
                FROM dbo.tlbGeoLocation
                WHERE idfGeoLocation = @GeoLocationID;

				--ResidentTypeID (tlbGeoLocationShared)
				INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79200000000,
                       a.GeoLocationID,
                       NULL,
                       b.ResidentTypeID,
                       a.ResidentTypeID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ResidentTypeID <> b.ResidentTypeID)
                      OR (
                             a.ResidentTypeID IS NOT NULL
                             AND b.ResidentTypeID IS NULL
                         )
                      OR (
                             a.ResidentTypeID IS NULL
                             AND b.ResidentTypeID IS NOT NULL
                         );

				--GroundTypeID (tlbGeoLocationShared)
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79170000000,
                       a.GeoLocationID,
                       NULL,
                       b.GroundTypeID,
                       a.GroundTypeID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.GroundTypeID <> b.GroundTypeID)
                      OR (
                             a.GroundTypeID IS NOT NULL
                             AND b.GroundTypeID IS NULL
                         )
                      OR (
                             a.GroundTypeID IS NULL
                             AND b.GroundTypeID IS NOT NULL
                         );

				--GeoLocationTypeID (tlbGeoLocationShared)
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79160000000,
                       a.GeoLocationID,
                       NULL,
                       b.GeoLocationTypeID,
                       a.GeoLocationTypeID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.GeoLocationTypeID <> b.GeoLocationTypeID)
                      OR (
                             a.GeoLocationTypeID IS NOT NULL
                             AND b.GeoLocationTypeID IS NULL
                         )
                      OR (
                             a.GeoLocationTypeID IS NULL
                             AND b.GeoLocationTypeID IS NOT NULL
                         );

				--LocationID (tlbGeoLocationShared)
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       51523700000000,
                       a.GeoLocationID,
                       NULL,
                       b.LocationID,
                       a.LocationID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.LocationID <> b.LocationID)
                      OR (
                             a.LocationID IS NOT NULL
                             AND b.LocationID IS NULL
                         )
                      OR (
                             a.LocationID IS NULL
                             AND b.LocationID IS NOT NULL
                         );

				--PostalCode (tlbGeoLocationShared)
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79260000000,
                       a.GeoLocationID,
                       NULL,
                       b.PostalCode,
                       a.PostalCode,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.PostalCode <> b.PostalCode)
                      OR (
                             a.PostalCode IS NOT NULL
                             AND b.PostalCode IS NULL
                         )
                      OR (
                             a.PostalCode IS NULL
                             AND b.PostalCode IS NOT NULL
                         );

				--StreetName (tlbGeoLocationShared)
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79270000000,
                       a.GeoLocationID,
                       NULL,
                       b.StreetName,
                       a.StreetName,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.StreetName <> b.StreetName)
                      OR (
                             a.StreetName IS NOT NULL
                             AND b.StreetName IS NULL
                         )
                      OR (
                             a.StreetName IS NULL
                             AND b.StreetName IS NOT NULL
                         );

				--House (tlbGeoLocationShared)
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79250000000,
                       a.GeoLocationID,
                       NULL,
                       b.House,
                       a.House,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.House <> b.House)
                      OR (
                             a.House IS NOT NULL
                             AND b.House IS NULL
                         )
                      OR (
                             a.House IS NULL
                             AND b.House IS NOT NULL
                         );

				--Building (tlbGeoLocationShared)
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79230000000,
                       a.GeoLocationID,
                       NULL,
                       b.Building,
                       a.Building,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Building <> b.Building)
                      OR (
                             a.Building IS NOT NULL
                             AND b.Building IS NULL
                         )
                      OR (
                             a.Building IS NULL
                             AND b.Building IS NOT NULL
                         );

				--Apartment (tlbGeoLocationShared)
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       4577890000000,
                       a.GeoLocationID,
                       NULL,
                       b.Apartment,
                       a.Apartment,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Apartment <> b.Apartment)
                      OR (
                             a.Apartment IS NOT NULL
                             AND b.Apartment IS NULL
                         )
                      OR (
                             a.Apartment IS NULL
                             AND b.Apartment IS NOT NULL
                         );
				
				--AddressDescription (tlbGeoLocationShared)
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79240000000,
                       a.GeoLocationID,
                       NULL,
                       b.AddressDescription,
                       a.AddressDescription,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.AddressDescription <> b.AddressDescription)
                      OR (
                             a.AddressDescription IS NOT NULL
                             AND b.AddressDescription IS NULL
                         )
                      OR (
                             a.AddressDescription IS NULL
                             AND b.AddressDescription IS NOT NULL
                         );

				--Distance (tlbGeoLocationShared)
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79110000000,
                       a.GeoLocationID,
                       NULL,
                       b.Distance,
                       a.Distance,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Distance <> b.Distance)
                      OR (
                             a.Distance IS NOT NULL
                             AND b.Distance IS NULL
                         )
                      OR (
                             a.Distance IS NULL
                             AND b.Distance IS NOT NULL
                         );

				--Latitude (tlbGeoLocationShared)
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79120000000,
                       a.GeoLocationID,
                       NULL,
                       b.Latitude,
                       a.Latitude,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Latitude <> b.Latitude)
                      OR (
                             a.Latitude IS NOT NULL
                             AND b.Latitude IS NULL
                         )
                      OR (
                             a.Latitude IS NULL
                             AND b.Latitude IS NOT NULL
                         );

				--Longitude (tlbGeoLocationShared)
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79130000000,
                       a.GeoLocationID,
                       NULL,
                       b.Longitude,
                       a.Longitude,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Longitude <> b.Longitude)
                      OR (
                             a.Longitude IS NOT NULL
                             AND b.Longitude IS NULL
                         )
                      OR (
                             a.Longitude IS NULL
                             AND b.Longitude IS NOT NULL
                         );

				--Accuracy (tlbGeoLocationShared)
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79090000000,
                       a.GeoLocationID,
                       NULL,
                       b.Accuracy,
                       a.Accuracy,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Accuracy <> b.Accuracy)
                      OR (
                             a.Accuracy IS NOT NULL
                             AND b.Accuracy IS NULL
                         )
                      OR (
                             a.Accuracy IS NULL
                             AND b.Accuracy IS NOT NULL
                         );

				--Alignment (tlbGeoLocationShared)
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79100000000,
                       a.GeoLocationID,
                       NULL,
                       b.Alignment,
                       a.Alignment,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Alignment <> b.Alignment)
                      OR (
                             a.Alignment IS NOT NULL
                             AND b.Alignment IS NULL
                         )
                      OR (
                             a.Alignment IS NULL
                             AND b.Alignment IS NOT NULL
                         );

				--ForeignAddressIndicator (tlbGeoLocationShared)
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       4578780000000,
                       a.GeoLocationID,
                       NULL,
                       b.ForeignAddressIndicator,
                       a.ForeignAddressIndicator,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ForeignAddressIndicator <> b.ForeignAddressIndicator)
                      OR (
                             a.ForeignAddressIndicator IS NOT NULL
                             AND b.ForeignAddressIndicator IS NULL
                         )
                      OR (
                             a.ForeignAddressIndicator IS NULL
                             AND b.ForeignAddressIndicator IS NOT NULL
                         );

				--ForeignAddressString (tlbGeoLocationShared)
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       4578790000000,
                       a.GeoLocationID,
                       NULL,
                       b.ForeignAddressString,
                       a.ForeignAddressString,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ForeignAddressString <> b.ForeignAddressString)
                      OR (
                             a.ForeignAddressString IS NOT NULL
                             AND b.ForeignAddressString IS NULL
                         )
                      OR (
                             a.ForeignAddressString IS NULL
                             AND b.ForeignAddressString IS NOT NULL
                         );

				--ShortAddressString (tlbGeoLocationShared)
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       51523680000000,
                       a.GeoLocationID,
                       NULL,
                       b.ShortAddressString,
                       a.ShortAddressString,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ShortAddressString <> b.ShortAddressString)
                      OR (
                             a.ShortAddressString IS NOT NULL
                             AND b.ShortAddressString IS NULL
                         )
                      OR (
                             a.ShortAddressString IS NULL
                             AND b.ShortAddressString IS NOT NULL
                         );

			END

		ELSE IF ISNULL(@GeolocationSharedIndicator, 0) <> 1

			BEGIN
			
				EXECUTE dbo.USP_GBL_NEXTKEYID_GET 
					@tableName = 'tlbGeoLocation',
					@idfsKey = @GeolocationID OUTPUT;

				INSERT INTO dbo.tlbGeoLocation 
				(
					idfGeoLocation,
					idfsResidentType,
					idfsGroundType,
					idfsGeoLocationType,
					idfsCountry,
					idfsRegion,
					idfsRayon,
					idfsSettlement,
					idfsLocation,
					strDescription,
					dblDistance,
					dblAccuracy,
					dblAlignment,
					strApartment,
					strBuilding,
					strStreetName,
					strHouse,
					strPostCode,
					blnForeignAddress,
					strForeignAddress,
					dblLatitude,
					dblLongitude,
					dblElevation,
					intRowStatus,
					rowguid,
					SourceSystemNameID,
					SourceSystemKeyValue,
					AuditCreateUser,
					AuditCreateDTM,
					AuditUpdateUser,
					AuditUpdateDTM
	
				)
				VALUES 
				(
					@GeolocationID,
					@ResidentTypeID,
					@GroundTypeID,
					@GeolocationTypeID,
					@idfsAdminLevel1,
					@idfsAdminLevel2,
					@idfsAdminLevel3,
					@idfsAdminLevel4,
					@LocationID,
					@DescriptionString,
					@Distance,
					@Accuracy,
					@Alignment,
					@Apartment,
					@Building,
					@StreetName,
					@House,
					@PostalCodeString,
					ISNULL(@ForeignAddressIndicator, 0),
					@ForeignAddressString,
					@Latitude,
					@Longitude,
					@Elevation,
					0,
					NEWID(),
					10519001,
					'[{"idfGeoLocation":' + CAST(@GeolocationID AS NVARCHAR(300)) + '}]',
					@AuditUserName,
					GETDATE(),
					@AuditUserName,
					GETDATE()
				);

				-- Data audit
				INSERT INTO dbo.tauDataAuditDetailCreate
				(
					idfDataAuditEvent,
					idfObjectTable,
					idfObject,
					SourceSystemNameID,
					SourceSystemKeyValue,
					AuditCreateUser
				)
				VALUES
				(
					@DataAuditEventID, 
					@ObjectGeoLocationTableID, 
					@GeolocationID, 
					10519001,
					'[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300))
					+ ',"idfObjectTable":' + CAST(@ObjectGeoLocationTableID AS NVARCHAR(300)) + '}]',
					@AuditUserName
				);
				-- End data audit

			END

		ELSE

			BEGIN

				EXECUTE dbo.USP_GBL_NEXTKEYID_GET 
					@tableName = 'tlbGeoLocationShared',
					@idfsKey = @GeolocationID OUTPUT;

				INSERT INTO dbo.tlbGeoLocationShared 
				(
					idfGeoLocationShared,
					idfsResidentType,
					idfsGroundType,
					idfsGeoLocationType,
					idfsCountry,
					idfsRegion,
					idfsRayon,
					idfsSettlement,
					idfsLocation,
					strDescription,
					dblDistance,
					dblAccuracy,
					dblAlignment,
					strApartment,
					strBuilding,
					strStreetName,
					strHouse,
					strPostCode,
					blnForeignAddress,
					strForeignAddress,
					dblLatitude,
					dblLongitude,
					dblElevation,
					intRowStatus,
					rowguid,
					SourceSystemNameID,
					SourceSystemKeyValue,
					AuditCreateUser,
					AuditCreateDTM,
					AuditUpdateUser,
					AuditUpdateDTM
				)
				VALUES 
				(
					@GeolocationID,
					@ResidentTypeID,
					@GroundTypeID,
					@GeolocationTypeID,
					@idfsAdminLevel1,
					@idfsAdminLevel2,
					@idfsAdminLevel3,
					@idfsAdminLevel4,
					@LocationID,
					@DescriptionString,
					@Distance,
					@Accuracy,
					@Alignment,
					@Apartment,
					@Building,
					@StreetName,
					@House,
					@PostalCodeString,
					ISNULL(@ForeignAddressIndicator, 0),
					@ForeignAddressString,
					@Latitude,
					@Longitude,
					@Elevation,
					0,
					NEWID(),
					10519001,
					'[{"idfGeoLocationShared":' + CAST(@GeolocationID AS NVARCHAR(300)) + '}]',
					@AuditUserName,
					GETDATE(),
					@AuditUserName,
					GETDATE()
				);

				-- Data audit
				INSERT INTO dbo.tauDataAuditDetailCreate
				(
					idfDataAuditEvent,
					idfObjectTable,
					idfObject,
					SourceSystemNameID,
					SourceSystemKeyValue,
					AuditCreateUser
				)
				VALUES
				(
					@DataAuditEventID, 
					@ObjectGeoLocationSharedTableID, 
					@GeolocationID, 
					10519001,
					'[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300))
					+ ',"idfObjectTable":' + CAST(@ObjectGeoLocationSharedTableID AS NVARCHAR(300)) + '}]',
					@AuditUserName
				);
				-- End data audit
			END

		IF @@TRANCOUNT > 0
			COMMIT TRANSACTION;

	END TRY

	BEGIN CATCH

		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;

		SET @ReturnCode = ERROR_NUMBER();
		SET @ReturnMessage = ERROR_MESSAGE();

		SELECT @ReturnCode ReturnCode
			,@ReturnMessage ReturnMessage;

		THROW;
	END CATCH

END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Procedure [dbo].[USSP_GBL_CONTACTS_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USSP_GBL_CONTACTS_SET
--
-- Description: Inserts/updates and deletes contacts for human and outbreak modules.
--          
-- Author: Stephen Long
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     11/28/2022 Initial release with data audit logic for SAUC30 and 31.
-- ================================================================================================
CREATE PROCEDURE [dbo].[USSP_GBL_CONTACTS_SET]
(
    @Contacts NVARCHAR(MAX) = NULL,
    @SiteId BIGINT NULL,
    @AuditUserName NVARCHAR(200) = NULL,
    @DataAuditEventID BIGINT = NULL,
    @idfHumanCase BIGINT NULL
)
AS
BEGIN
    DECLARE @ContactedCasePersonId BIGINT = NULL,
            @OutbreakCaseContactId BIGINT = NULL,                      -- Outbreak only
            @CaseOrReportId BIGINT = NULL,                             -- Human disease report or outbreak case identifier
            @ContactTypeId BIGINT = NULL,                              -- Outbreak only
            @ContactRelationshipTypeId BIGINT = NULL,
            @HumanMasterId BIGINT = NULL,
            @HumanId BIGINT = NULL,
            @PersonalIdTypeId BIGINT = NULL,
            @PersonalId NVARCHAR(100) = NULL,
            @FirstName NVARCHAR(200) = NULL,
            @SecondName NVARCHAR(200) = NULL,
            @LastName NVARCHAR(200) = NULL,
            @DateOfBirth DATETIME = NULL,
            @Age INT = NULL,
            @AgeTypeId BIGINT = NULL,
            @GenderTypeId BIGINT = NULL,
            @CitizenshipTypeId BIGINT = NULL,
            @AddressId BIGINT = NULL,
            @LocationId BIGINT = NULL,                                 -- Lowest administrative level
            @Street NVARCHAR(200) = NULL,
            @PostalCode NVARCHAR(200) = NULL,
            @Apartment NVARCHAR(200) = NULL,
            @Building NVARCHAR(200) = NULL,
            @House NVARCHAR(200) = NULL,
            @ForeignAddressString NVARCHAR(200) = NULL,
            @ContactPhoneCountryCode INT = NULL,
            @ContactPhone NVARCHAR(200) = NULL,
            @ContactPhoneTypeId BIGINT = NULL,
            @DateOfLastContact DATETIME = NULL,
            @PlaceOfLastContact NVARCHAR(200) = NULL,
            @Comments NVARCHAR(500) = NULL,
            @ContactStatusId BIGINT = NULL,                            -- Outbreak only
            @ContactTracingObservationId BIGINT = NULL,                -- Outbreak only
            @RowStatus INT = NULL,
            @RowAction INT = NULL,
            @ReturnMessage VARCHAR(MAX) = 'Success',
            @ReturnCode BIGINT = 0,
            @AuditUserID BIGINT = NULL,
            @AuditSiteID BIGINT = NULL,
            @ObjectID BIGINT = NULL,
            @ObjectHumanTableID BIGINT = 75600000000,                  -- tlbHuman,
            @ObjectHumanAdditionalInfoTableID BIGINT = 53577690000000, -- HumanAddlInfo 
            @ObjectContactedCasePersonTableID BIGINT = 75500000000;    -- tlbContactedCasePerson
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );
    DECLARE @ContactsTemp TABLE
    (
        ContactedCasePersonId BIGINT NOT NULL,
        OutbreakCaseContactId BIGINT NULL,
        CaseOrReportId BIGINT NULL, -- Human disease report or outbreak case identifiers
        ContactTypeId BIGINT NOT NULL,
        ContactRelationshipTypeId BIGINT NULL,
        HumanMasterId BIGINT NULL,
        HumanId BIGINT NULL,
        PersonalIdTypeId BIGINT NULL,
        PersonalId NVARCHAR(100) NULL,
        FirstName NVARCHAR(200) NULL,
        SecondName NVARCHAR(200) NULL,
        LastName NVARCHAR(200) NULL,
        DateOfBirth DATETIME NULL,
        GenderTypeId BIGINT NULL,
        CitizenshipTypeId BIGINT NULL,
        AddressId BIGINT NULL,
        LocationId BIGINT NULL,
        Street NVARCHAR(200) NULL,
        PostalCode NVARCHAR(200) NULL,
        Apartment NVARCHAR(200) NULL,
        Building NVARCHAR(200) NULL,
        House NVARCHAR(200) NULL,
        ForeignAddressString NVARCHAR(200) NULL,
        ContactPhoneCountryCode INT NULL,
        ContactPhone NVARCHAR(200) NULL,
        ContactPhoneTypeId BIGINT NULL,
        DateOfLastContact DATETIME NULL,
        PlaceOfLastContact NVARCHAR(200) NULL,
        Comments NVARCHAR(500) NULL,
        ContactStatusId BIGINT NULL,
        ContactTracingObservationId BIGINT NULL,
        RowStatus INT NOT NULL,
        RowAction INT NOT NULL,
        AuditUserName NVARCHAR(200)
    );
    DECLARE @HumanBeforeEdit TABLE
    (
        HumanID BIGINT,
        PersonalIDTypeID BIGINT,
        PersonalID NVARCHAR(100),
        FirstName NVARCHAR(200),
        SecondName NVARCHAR(200),
        LastName NVARCHAR(200),
        DateOfBirth DATETIME,
        GenderTypeID BIGINT,
        CitizenshipTypeID BIGINT,
        CurrentResidenceAddressID BIGINT
    );
    DECLARE @HumanAfterEdit TABLE
    (
        HumanID BIGINT,
        PersonalIDTypeID BIGINT,
        PersonalID NVARCHAR(100),
        FirstName NVARCHAR(200),
        SecondName NVARCHAR(200),
        LastName NVARCHAR(200),
        DateOfBirth DATETIME,
        GenderTypeID BIGINT,
        CitizenshipTypeID BIGINT,
        CurrentResidenceAddressID BIGINT
    );
    DECLARE @HumanAdditionalInfoBeforeEdit TABLE
    (
        HumanID BIGINT,
        Age INT,
        AgeTypeID BIGINT,
        ContactPhoneCountryCode INT,
        ContactPhone NVARCHAR(200),
        ContactPhoneTypeID BIGINT
    );
    DECLARE @HumanAdditionalInfoAfterEdit TABLE
    (
        HumanID BIGINT,
        Age INT,
        AgeTypeID BIGINT,
        ContactPhoneCountryCode INT,
        ContactPhone NVARCHAR(200),
        ContactPhoneTypeID BIGINT
    );
    DECLARE @ContactedCasePersonBeforeEdit TABLE
    (
        ContactedCasePersonID BIGINT,
        ContactRelationshipTypeID BIGINT,
        HumanID BIGINT,
        HumanDiseaseReportID BIGINT,
        DateOfLastContact DATETIME,
        PlaceOfLastContact NVARCHAR(200),
        Comments NVARCHAR(500),
        RowStatus INT
    );
    DECLARE @ContactedCasePersonAfterEdit TABLE
    (
        ContactedCasePersonID BIGINT,
        ContactRelationshipTypeID BIGINT,
        HumanID BIGINT,
        HumanDiseaseReportID BIGINT,
        DateOfLastContact DATETIME,
        PlaceOfLastContact NVARCHAR(200),
        Comments NVARCHAR(500),
        RowStatus INT
    );

    INSERT INTO @ContactsTemp
    SELECT *
    FROM
        OPENJSON(@Contacts)
        WITH
        (
            ContactedCasePersonId BIGINT,
            OutbreakCaseContactId BIGINT,
            CaseOrReportId BIGINT,
            ContactTypeId BIGINT,
            ContactRelationshipTypeId BIGINT,
            HumanMasterId BIGINT,
            HumanId BIGINT,
            PersonalIdTypeId BIGINT,
            PersonalId NVARCHAR(100),
            FirstName NVARCHAR(200),
            SecondName NVARCHAR(200),
            LastName NVARCHAR(200),
            DateOfBirth DATETIME,
            GenderTypeId BIGINT,
            CitizenshipTypeId BIGINT,
            AddressId BIGINT,
            LocationId BIGINT,
            Street NVARCHAR(200),
            PostalCode NVARCHAR(200),
            Apartment NVARCHAR(200),
            Building NVARCHAR(200),
            House NVARCHAR(200),
            ForeignAddressString NVARCHAR(200),
            ContactPhoneCountryCode INT,
            ContactPhone NVARCHAR(20),
            ContactPhoneTypeId BIGINT,
            DateOfLastContact DATETIME,
            PlaceOfLastContact NVARCHAR(200),
            Comments NVARCHAR(500),
            ContactStatusId BIGINT,
            ContactTracingObservationId BIGINT,
            RowStatus INT,
            RowAction INT,
            AuditUserName NVARCHAR(200)
        );

    BEGIN TRY
        WHILE EXISTS (SELECT * FROM @ContactsTemp)
        BEGIN

            SELECT TOP 1
                @ContactedCasePersonId = ContactedCasePersonId,
                @OutbreakCaseContactId = OutbreakCaseContactId,
                @CaseOrReportId = @idfHumanCase,
                @ContactTypeId = ContactTypeId,
                @ContactRelationshipTypeId = ContactRelationshipTypeId,
                @HumanMasterId = HumanMasterId,
                @HumanId = HumanId,
                @PersonalIdTypeId = PersonalIdTypeId,
                @PersonalId = PersonalId,
                @FirstName = FirstName,
                @SecondName = SecondName,
                @LastName = LastName,
                @DateOfBirth = DateOfBirth,
                @GenderTypeId = GenderTypeId,
                @CitizenshipTypeId = CitizenshipTypeId,
                @AddressId = AddressId,
                @LocationId = LocationId,
                @Street = Street,
                @PostalCode = PostalCode,
                @Apartment = Apartment,
                @Building = Building,
                @House = House,
                @ForeignAddressString = ForeignAddressString,
                @ContactPhone = ContactPhone,
                @ContactPhoneTypeId = ContactPhoneTypeId,
                @DateOfLastContact = DateOfLastContact,
                @PlaceOfLastContact = PlaceOfLastContact,
                @Comments = Comments,
                @ContactStatusId = ContactStatusId,
                @ContactTracingObservationId = ContactTracingObservationId,
                @RowStatus = RowStatus,
                @RowAction = RowAction,
                @AuditUserName = AuditUserName
            FROM @ContactsTemp;

            DECLARE @AdminLevel INT = 0;
            SELECT @AdminLevel = node.GetLevel()
            FROM dbo.gisLocation
            WHERE idfsLocation = @LocationId;
            DECLARE @ForeignAddressIndicator BIT = 0;
            IF @ForeignAddressString IS NOT NULL
            BEGIN
                SET @ForeignAddressIndicator = 1;
            END

            IF (@LocationId IS NOT NULL)
                EXECUTE dbo.USSP_GBL_ADDRESS_SET @GeolocationID = @AddressId OUTPUT,
                                                 @ResidentTypeID = NULL,
                                                 @GroundTypeID = NULL,
                                                 @GeolocationTypeID = NULL,
                                                 @LocationID = @LocationId,
                                                 @Apartment = @Apartment,
                                                 @Building = @Building,
                                                 @StreetName = @Street,
                                                 @House = @House,
                                                 @PostalCodeString = @PostalCode,
                                                 @DescriptionString = NULL,
                                                 @Distance = NULL,
                                                 @Latitude = NULL,
                                                 @Longitude = NULL,
                                                 @Elevation = NULL,
                                                 @Accuracy = NULL,
                                                 @Alignment = NULL,
                                                 @ForeignAddressIndicator = @ForeignAddressIndicator,
                                                 @ForeignAddressString = @ForeignAddressString,
                                                 @GeolocationSharedIndicator = 0,
                                                 @AuditUserName = @AuditUserName,
                                                 @ReturnCode = @ReturnCode OUTPUT,
                                                 @ReturnMessage = @ReturnMessage OUTPUT;

            IF NOT EXISTS
            (
                SELECT *
                FROM dbo.tlbHuman
                WHERE idfHuman = @HumanId
                      AND intRowStatus = 0
            )
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = N'tlbHuman',
                                                  @idfsKey = @HumanId OUTPUT;

                INSERT INTO dbo.tlbHuman
                (
                    idfHuman,
                    idfHumanActual,
                    idfsNationality,
                    idfsHumanGender,
                    idfCurrentResidenceAddress,
                    idfsOccupationType,
                    idfEmployerAddress,
                    idfRegistrationAddress,
                    datDateofBirth,
                    datDateOfDeath,
                    strFirstName,
                    strSecondName,
                    strLastName,
                    strRegistrationPhone,
                    strEmployerName,
                    strHomePhone,
                    strWorkPhone,
                    idfsPersonIDType,
                    strPersonID,
                    intRowStatus,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    AuditCreateDTM
                )
                VALUES
                (@HumanId,
                 @HumanMasterId,
                 @CitizenshipTypeId,
                 @GenderTypeId,
                 @AddressId,
                 NULL,
                 NULL,
                 NULL,
                 @DateOfBirth,
                 NULL,
                 @FirstName,
                 @SecondName,
                 @LastName,
                 NULL,
                 NULL,
                 NULL,
                 NULL,
                 @PersonalIdTypeId,
                 @PersonalId,
                 0  ,
                 10519001,
                 '[{"idfHuman":' + CAST(@HumanId AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 GETDATE()
                );

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser
                )
                VALUES
                (@DataAuditEventID,
                 @ObjectHumanTableID,
                 @HumanId,
                 10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                 + CAST(@ObjectHumanTableID AS NVARCHAR(300)) + '}]',
                 @AuditUserName
                );
                -- End data audit

                INSERT INTO dbo.HumanAddlInfo
                (
                    HumanAdditionalInfo,
                    ReportedAge,
                    ReportedAgeUOMID,
                    PassportNbr,
                    IsEmployedID,
                    EmployerPhoneNbr,
                    EmployedDTM,
                    IsStudentID,
                    SchoolName,
                    SchoolPhoneNbr,
                    SchoolAddressID,
                    SchoolLastAttendDTM,
                    ContactPhoneCountryCode,
                    ContactPhoneNbr,
                    ContactPhoneNbrTypeID,
                    ContactPhone2CountryCode,
                    ContactPhone2Nbr,
                    ContactPhone2NbrTypeID,
                    AltAddressID,
                    intRowStatus,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    AuditCreateDTM
                )
                VALUES
                (@HumanId,
                 @Age,
                 @AgeTypeId,
                 NULL,
                 NULL,
                 NULL,
                 NULL,
                 NULL,
                 NULL,
                 NULL,
                 NULL,
                 NULL,
                 @ContactPhoneCountryCode,
                 @ContactPhone,
                 @ContactPhoneTypeId,
                 NULL,
                 NULL,
                 NULL,
                 NULL,
                 0  ,
                 10519001,
                 '[{"HumanAddlInfoUID":' + CAST(@HumanId AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 GETDATE()
                );

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser
                )
                VALUES
                (@DataAuditEventID,
                 @ObjectHumanAdditionalInfoTableID,
                 @HumanId,
                 10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                 + CAST(@ObjectHumanAdditionalInfoTableID AS NVARCHAR(300)) + '}]',
                 @AuditUserName
                );
            -- End data audit
            END;
            ELSE
            BEGIN
                INSERT INTO @HumanBeforeEdit
                (
                    HumanID,
                    PersonalIDTypeID,
                    PersonalID,
                    FirstName,
                    SecondName,
                    LastName,
                    DateOfBirth,
                    GenderTypeID,
                    CitizenshipTypeID,
                    CurrentResidenceAddressID
                )
                SELECT idfHuman,
                       idfsPersonIDType,
                       strPersonID,
                       strFirstName,
                       strSecondName,
                       strLastName,
                       datDateofBirth,
                       idfsHumanGender,
                       idfsNationality,
                       idfCurrentResidenceAddress
                FROM dbo.tlbHuman
                WHERE idfHuman = @HumanId;

                UPDATE dbo.tlbHuman
                SET idfsNationality = @CitizenshipTypeId,
                    idfsHumanGender = @GenderTypeId,
                    idfCurrentResidenceAddress = @AddressId,
                    idfsOccupationType = NULL,
                    idfEmployerAddress = NULL,
                    idfRegistrationAddress = NULL,
                    datDateofBirth = @DateOfBirth,
                    datDateOfDeath = NULL,
                    strFirstName = @FirstName,
                    strSecondName = @SecondName,
                    strLastName = @LastName,
                    strRegistrationPhone = NULL,
                    strEmployerName = NULL,
                    strHomePhone = NULL,
                    strWorkPhone = NULL,
                    idfsPersonIDType = @PersonalIdTypeId,
                    strPersonID = @PersonalId,
                    SourceSystemNameID = ISNULL(SourceSystemNameID, 10519001),
                    SourceSystemKeyValue = ISNULL(
                                                     SourceSystemKeyValue,
                                                     '[{"idfHuman":' + CAST(@HumanId AS NVARCHAR(300)) + '}]'
                                                 ),
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE idfHuman = @HumanId;

                INSERT INTO @HumanAfterEdit
                (
                    HumanID,
                    PersonalIDTypeID,
                    PersonalID,
                    FirstName,
                    SecondName,
                    LastName,
                    DateOfBirth,
                    GenderTypeID,
                    CitizenshipTypeID,
                    CurrentResidenceAddressID
                )
                SELECT idfHuman,
                       idfsPersonIDType,
                       strPersonID,
                       strFirstName,
                       strSecondName,
                       strLastName,
                       datDateofBirth,
                       idfsHumanGender,
                       idfsNationality,
                       idfCurrentResidenceAddress
                FROM dbo.tlbHuman
                WHERE idfHuman = @HumanId;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectHumanTableID,
                       79370000000,
                       a.HumanID,
                       NULL,
                       b.HumanID,
                       a.HumanID,
                       @AuditUserName
                FROM @HumanAfterEdit AS a
                    FULL JOIN @HumanAfterEdit AS b
                        ON a.HumanID = b.HumanID
                WHERE (a.HumanID <> b.HumanID)
                      OR (
                             a.HumanID IS NOT NULL
                             AND b.HumanID IS NULL
                         )
                      OR (
                             a.HumanID IS NULL
                             AND b.HumanID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectHumanTableID,
                       79400000000,
                       a.HumanID,
                       NULL,
                       b.CitizenshipTypeID,
                       a.CitizenshipTypeID,
                       @AuditUserName
                FROM @HumanAfterEdit AS a
                    FULL JOIN @HumanAfterEdit AS b
                        ON a.HumanID = b.HumanID
                WHERE (a.CitizenshipTypeID <> b.CitizenshipTypeID)
                      OR (
                             a.CitizenshipTypeID IS NOT NULL
                             AND b.CitizenshipTypeID IS NULL
                         )
                      OR (
                             a.CitizenshipTypeID IS NULL
                             AND b.CitizenshipTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectHumanTableID,
                       79350000000,
                       a.HumanID,
                       NULL,
                       b.CurrentResidenceAddressID,
                       a.CurrentResidenceAddressID,
                       @AuditUserName
                FROM @HumanAfterEdit AS a
                    FULL JOIN @HumanAfterEdit AS b
                        ON a.HumanID = b.HumanID
                WHERE (a.CurrentResidenceAddressID <> b.CurrentResidenceAddressID)
                      OR (
                             a.CurrentResidenceAddressID IS NOT NULL
                             AND b.CurrentResidenceAddressID IS NULL
                         )
                      OR (
                             a.CurrentResidenceAddressID IS NULL
                             AND b.CurrentResidenceAddressID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectHumanTableID,
                       79330000000,
                       a.HumanID,
                       NULL,
                       b.DateOfBirth,
                       a.DateOfBirth,
                       @AuditUserName
                FROM @HumanAfterEdit AS a
                    FULL JOIN @HumanAfterEdit AS b
                        ON a.HumanID = b.HumanID
                WHERE (a.DateOfBirth <> b.DateOfBirth)
                      OR (
                             a.DateOfBirth IS NOT NULL
                             AND b.DateOfBirth IS NULL
                         )
                      OR (
                             a.DateOfBirth IS NULL
                             AND b.DateOfBirth IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectHumanTableID,
                       79430000000,
                       a.HumanID,
                       NULL,
                       b.FirstName,
                       a.FirstName,
                       @AuditUserName
                FROM @HumanAfterEdit AS a
                    FULL JOIN @HumanAfterEdit AS b
                        ON a.HumanID = b.HumanID
                WHERE (a.FirstName <> b.FirstName)
                      OR (
                             a.FirstName IS NOT NULL
                             AND b.FirstName IS NULL
                         )
                      OR (
                             a.FirstName IS NULL
                             AND b.FirstName IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectHumanTableID,
                       79390000000,
                       a.HumanID,
                       NULL,
                       b.GenderTypeID,
                       a.GenderTypeID,
                       @AuditUserName
                FROM @HumanAfterEdit AS a
                    FULL JOIN @HumanAfterEdit AS b
                        ON a.HumanID = b.HumanID
                WHERE (a.GenderTypeID <> b.GenderTypeID)
                      OR (
                             a.GenderTypeID IS NOT NULL
                             AND b.GenderTypeID IS NULL
                         )
                      OR (
                             a.GenderTypeID IS NULL
                             AND b.GenderTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectHumanTableID,
                       79450000000,
                       a.HumanID,
                       NULL,
                       b.LastName,
                       a.LastName,
                       @AuditUserName
                FROM @HumanAfterEdit AS a
                    FULL JOIN @HumanAfterEdit AS b
                        ON a.HumanID = b.HumanID
                WHERE (a.LastName <> b.LastName)
                      OR (
                             a.LastName IS NOT NULL
                             AND b.LastName IS NULL
                         )
                      OR (
                             a.LastName IS NULL
                             AND b.LastName IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectHumanTableID,
                       12014470000000,
                       a.HumanID,
                       NULL,
                       b.PersonalID,
                       a.PersonalID,
                       @AuditUserName
                FROM @HumanAfterEdit AS a
                    FULL JOIN @HumanAfterEdit AS b
                        ON a.HumanID = b.HumanID
                WHERE (a.PersonalID <> b.PersonalID)
                      OR (
                             a.PersonalID IS NOT NULL
                             AND b.PersonalID IS NULL
                         )
                      OR (
                             a.PersonalID IS NULL
                             AND b.PersonalID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectHumanTableID,
                       12014460000000,
                       a.HumanID,
                       NULL,
                       b.PersonalIDTypeID,
                       a.PersonalIDTypeID,
                       @AuditUserName
                FROM @HumanAfterEdit AS a
                    FULL JOIN @HumanAfterEdit AS b
                        ON a.HumanID = b.HumanID
                WHERE (a.PersonalIDTypeID <> b.PersonalIDTypeID)
                      OR (
                             a.PersonalIDTypeID IS NOT NULL
                             AND b.PersonalIDTypeID IS NULL
                         )
                      OR (
                             a.PersonalIDTypeID IS NULL
                             AND b.PersonalIDTypeID IS NOT NULL
                         );

                INSERT INTO @HumanAdditionalInfoBeforeEdit
                (
                    HumanID,
                    Age,
                    AgeTypeID,
                    ContactPhoneCountryCode,
                    ContactPhone,
                    ContactPhoneTypeID
                )
                SELECT HumanAdditionalInfo,
                       ReportedAge,
                       ReportedAgeUOMID,
                       ContactPhoneCountryCode,
                       ContactPhoneNbr,
                       ContactPhoneNbrTypeID
                FROM dbo.HumanAddlInfo
                WHERE HumanAdditionalInfo = @HumanId;

                UPDATE dbo.HumanAddlInfo
                SET ReportedAge = @Age,
                    ReportedAgeUOMID = @AgeTypeId,
                    PassportNbr = NULL,
                    IsEmployedID = NULL,
                    EmployerPhoneNbr = NULL,
                    EmployedDTM = NULL,
                    IsStudentID = NULL,
                    SchoolName = NULL,
                    SchoolPhoneNbr = NULL,
                    SchoolAddressID = NULL,
                    SchoolLastAttendDTM = NULL,
                    ContactPhoneCountryCode = @ContactPhoneCountryCode,
                    ContactPhoneNbr = @ContactPhone,
                    ContactPhoneNbrTypeID = @ContactPhoneTypeID,
                    ContactPhone2CountryCode = NULL,
                    ContactPhone2Nbr = NULL,
                    ContactPhone2NbrTypeID = NULL,
                    AltAddressID = NULL,
                    SourceSystemNameID = ISNULL(SourceSystemNameID, 10519001),
                    SourceSystemKeyValue = ISNULL(
                                                     SourceSystemKeyValue,
                                                     '[{"HumanAddlInfoUID":' + CAST(@HumanId AS NVARCHAR(300)) + '}]'
                                                 ),
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE HumanAdditionalInfo = @HumanId;

                INSERT INTO @HumanAdditionalInfoAfterEdit
                (
                    HumanID,
                    Age,
                    AgeTypeID,
                    ContactPhoneCountryCode,
                    ContactPhone,
                    ContactPhoneTypeID
                )
                SELECT HumanAdditionalInfo,
                       ReportedAge,
                       ReportedAgeUOMID,
                       ContactPhoneCountryCode,
                       ContactPhoneNbr,
                       ContactPhoneNbrTypeID
                FROM dbo.HumanAddlInfo
                WHERE HumanAdditionalInfo = @HumanId;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectHumanAdditionalInfoTableID,
                       51586890000001,
                       a.HumanID,
                       NULL,
                       b.Age,
                       a.Age,
                       @AuditUserName
                FROM @HumanAdditionalInfoAfterEdit AS a
                    FULL JOIN @HumanAdditionalInfoBeforeEdit AS b
                        ON a.HumanID = b.HumanID
                WHERE (a.Age <> b.Age)
                      OR (
                             a.Age IS NOT NULL
                             AND b.Age IS NULL
                         )
                      OR (
                             a.Age IS NULL
                             AND b.Age IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectHumanAdditionalInfoTableID,
                       51586890000002,
                       a.HumanID,
                       NULL,
                       b.AgeTypeID,
                       a.AgeTypeID,
                       @AuditUserName
                FROM @HumanAdditionalInfoAfterEdit AS a
                    FULL JOIN @HumanAdditionalInfoBeforeEdit AS b
                        ON a.HumanID = b.HumanID
                WHERE (a.AgeTypeID <> b.AgeTypeID)
                      OR (
                             a.AgeTypeID IS NOT NULL
                             AND b.AgeTypeID IS NULL
                         )
                      OR (
                             a.AgeTypeID IS NULL
                             AND b.AgeTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectHumanAdditionalInfoTableID,
                       51586890000003,
                       a.HumanID,
                       NULL,
                       b.ContactPhone,
                       a.ContactPhone,
                       @AuditUserName
                FROM @HumanAdditionalInfoAfterEdit AS a
                    FULL JOIN @HumanAdditionalInfoBeforeEdit AS b
                        ON a.HumanID = b.HumanID
                WHERE (a.ContactPhone <> b.ContactPhone)
                      OR (
                             a.ContactPhone IS NOT NULL
                             AND b.ContactPhone IS NULL
                         )
                      OR (
                             a.ContactPhone IS NULL
                             AND b.ContactPhone IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectHumanAdditionalInfoTableID,
                       51586890000004,
                       a.HumanID,
                       NULL,
                       b.ContactPhoneCountryCode,
                       a.ContactPhoneCountryCode,
                       @AuditUserName
                FROM @HumanAdditionalInfoAfterEdit AS a
                    FULL JOIN @HumanAdditionalInfoBeforeEdit AS b
                        ON a.HumanID = b.HumanID
                WHERE (a.ContactPhoneCountryCode <> b.ContactPhoneCountryCode)
                      OR (
                             a.ContactPhoneCountryCode IS NOT NULL
                             AND b.ContactPhoneCountryCode IS NULL
                         )
                      OR (
                             a.ContactPhoneCountryCode IS NULL
                             AND b.ContactPhoneCountryCode IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectHumanAdditionalInfoTableID,
                       51586890000005,
                       a.HumanID,
                       NULL,
                       b.ContactPhoneTypeID,
                       a.ContactPhoneTypeID,
                       @AuditUserName
                FROM @HumanAdditionalInfoAfterEdit AS a
                    FULL JOIN @HumanAdditionalInfoBeforeEdit AS b
                        ON a.HumanID = b.HumanID
                WHERE (a.ContactPhoneTypeID <> b.ContactPhoneTypeID)
                      OR (
                             a.ContactPhoneTypeID IS NOT NULL
                             AND b.ContactPhoneTypeID IS NULL
                         )
                      OR (
                             a.ContactPhoneTypeID IS NULL
                             AND b.ContactPhoneTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectHumanAdditionalInfoTableID,
                       51586890000006,
                       a.HumanID,
                       NULL,
                       b.HumanID,
                       a.HumanID,
                       @AuditUserName
                FROM @HumanAdditionalInfoAfterEdit AS a
                    FULL JOIN @HumanAdditionalInfoBeforeEdit AS b
                        ON a.HumanID = b.HumanID
                WHERE (a.HumanID <> b.HumanID)
                      OR (
                             a.HumanID IS NOT NULL
                             AND b.HumanID IS NULL
                         )
                      OR (
                             a.HumanID IS NULL
                             AND b.HumanID IS NOT NULL
                         );
            END;

            IF NOT EXISTS
            (
                SELECT idfContactedCasePerson
                FROM dbo.tlbContactedCasePerson
                WHERE idfContactedCasePerson = @ContactedCasePersonId
                      AND idfHumanCase = @idfHumanCase
                      AND intRowStatus = 0
            )
            BEGIN
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbContactedCasePerson',
                                               @ContactedCasePersonId OUTPUT;

                INSERT INTO dbo.tlbContactedCasePerson
                (
                    idfContactedCasePerson,
                    idfsPersonContactType,
                    idfHuman,
                    idfHumanCase,
                    datDateOfLastContact,
                    strPlaceInfo,
                    intRowStatus,
                    strComments,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    AuditCreateDTM
                )
                VALUES
                (@ContactedCasePersonId,
                 @ContactRelationshipTypeId,
                 @HumanId,
                 @idfHumanCase,
                 @DateOfLastContact,
                 @PlaceOfLastContact,
                 @RowStatus,
                 @Comments,
                 10519001,
                 '[{"idfContactedCasePerson":' + CAST(@ContactedCasePersonId AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 GETDATE()
                );

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser
                )
                VALUES
                (@DataAuditEventID,
                 @ObjectContactedCasePersonTableID,
                 @HumanId,
                 10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                 + CAST(@ObjectContactedCasePersonTableID AS NVARCHAR(300)) + '}]',
                 @AuditUserName
                );
            -- End data audit
            END
            ELSE
            BEGIN
                INSERT INTO @ContactedCasePersonBeforeEdit
                (
                    ContactedCasePersonID,
                    ContactRelationshipTypeID,
                    HumanID,
                    HumanDiseaseReportID,
                    DateOfLastContact,
                    PlaceOfLastContact,
                    Comments,
                    RowStatus
                )
                SELECT idfContactedCasePerson,
                       idfsPersonContactType,
                       idfHuman,
                       idfHumanCase,
                       datDateOfLastContact,
                       strPlaceInfo,
                       strComments,
                       intRowStatus
                FROM dbo.tlbContactedCasePerson
                WHERE idfContactedCasePerson = @OutbreakCaseContactId;

                UPDATE dbo.tlbContactedCasePerson
                SET idfsPersonContactType = @ContactRelationshipTypeId,
                    idfHuman = @HumanId,
                    idfHumanCase = @idfHumanCase,
                    datDateOfLastContact = @DateOfLastContact,
                    strPlaceInfo = @PlaceOfLastContact,
                    intRowStatus = @RowStatus,
                    strComments = @Comments,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE idfContactedCasePerson = @ContactedCasePersonId
                      AND intRowStatus = 0;

                INSERT INTO @ContactedCasePersonAfterEdit
                (
                    ContactedCasePersonID,
                    ContactRelationshipTypeID,
                    HumanID,
                    HumanDiseaseReportID,
                    DateOfLastContact,
                    PlaceOfLastContact,
                    Comments,
                    RowStatus
                )
                SELECT idfContactedCasePerson,
                       idfsPersonContactType,
                       idfHuman,
                       idfHumanCase,
                       datDateOfLastContact,
                       strPlaceInfo,
                       strComments,
                       intRowStatus
                FROM dbo.tlbContactedCasePerson
                WHERE idfContactedCasePerson = @OutbreakCaseContactId;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectContactedCasePersonTableID,
                       12675390000000,
                       a.ContactedCasePersonID,
                       NULL,
                       b.Comments,
                       a.Comments,
                       @AuditUserName
                FROM @ContactedCasePersonAfterEdit AS a
                    FULL JOIN @ContactedCasePersonBeforeEdit AS b
                        ON a.ContactedCasePersonID = b.ContactedCasePersonID
                WHERE (a.Comments <> b.Comments)
                      OR (
                             a.Comments IS NOT NULL
                             AND b.Comments IS NULL
                         )
                      OR (
                             a.Comments IS NULL
                             AND b.Comments IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectContactedCasePersonTableID,
                       78520000000,
                       a.ContactedCasePersonID,
                       NULL,
                       b.ContactRelationshipTypeID,
                       a.ContactRelationshipTypeID,
                       @AuditUserName
                FROM @ContactedCasePersonAfterEdit AS a
                    FULL JOIN @ContactedCasePersonBeforeEdit AS b
                        ON a.ContactedCasePersonID = b.ContactedCasePersonID
                WHERE (a.ContactRelationshipTypeID <> b.ContactRelationshipTypeID)
                      OR (
                             a.ContactRelationshipTypeID IS NOT NULL
                             AND b.ContactRelationshipTypeID IS NULL
                         )
                      OR (
                             a.ContactRelationshipTypeID IS NULL
                             AND b.ContactRelationshipTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectContactedCasePersonTableID,
                       78500000000,
                       a.ContactedCasePersonID,
                       NULL,
                       b.DateOfLastContact,
                       a.DateOfLastContact,
                       @AuditUserName
                FROM @ContactedCasePersonAfterEdit AS a
                    FULL JOIN @ContactedCasePersonBeforeEdit AS b
                        ON a.ContactedCasePersonID = b.ContactedCasePersonID
                WHERE (a.DateOfLastContact <> b.DateOfLastContact)
                      OR (
                             a.DateOfLastContact IS NOT NULL
                             AND b.DateOfLastContact IS NULL
                         )
                      OR (
                             a.DateOfLastContact IS NULL
                             AND b.DateOfLastContact IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectContactedCasePersonTableID,
                       4566380000000,
                       a.ContactedCasePersonID,
                       NULL,
                       b.HumanDiseaseReportID,
                       a.HumanDiseaseReportID,
                       @AuditUserName
                FROM @ContactedCasePersonAfterEdit AS a
                    FULL JOIN @ContactedCasePersonBeforeEdit AS b
                        ON a.ContactedCasePersonID = b.ContactedCasePersonID
                WHERE (a.HumanDiseaseReportID <> b.HumanDiseaseReportID)
                      OR (
                             a.HumanDiseaseReportID IS NOT NULL
                             AND b.HumanDiseaseReportID IS NULL
                         )
                      OR (
                             a.HumanDiseaseReportID IS NULL
                             AND b.HumanDiseaseReportID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectContactedCasePersonTableID,
                       78510000000,
                       a.ContactedCasePersonID,
                       NULL,
                       b.HumanID,
                       a.HumanID,
                       @AuditUserName
                FROM @ContactedCasePersonAfterEdit AS a
                    FULL JOIN @ContactedCasePersonBeforeEdit AS b
                        ON a.ContactedCasePersonID = b.ContactedCasePersonID
                WHERE (a.HumanID <> b.HumanID)
                      OR (
                             a.HumanID IS NOT NULL
                             AND b.HumanID IS NULL
                         )
                      OR (
                             a.HumanID IS NULL
                             AND b.HumanID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectContactedCasePersonTableID,
                       4566390000000,
                       a.ContactedCasePersonID,
                       NULL,
                       b.PlaceOfLastContact,
                       a.PlaceOfLastContact,
                       @AuditUserName
                FROM @ContactedCasePersonAfterEdit AS a
                    FULL JOIN @ContactedCasePersonBeforeEdit AS b
                        ON a.ContactedCasePersonID = b.ContactedCasePersonID
                WHERE (a.PlaceOfLastContact <> b.PlaceOfLastContact)
                      OR (
                             a.PlaceOfLastContact IS NOT NULL
                             AND b.PlaceOfLastContact IS NULL
                         )
                      OR (
                             a.PlaceOfLastContact IS NULL
                             AND b.PlaceOfLastContact IS NOT NULL
                         );
            END

            IF @OutbreakCaseContactId IS NOT NULL
            BEGIN
                IF NOT EXISTS
                (
                    SELECT OutbreakCaseContactUID
                    FROM dbo.OutbreakCaseContact
                    WHERE OutbreakCaseContactUID = @OutbreakCaseContactId
                          AND intRowStatus = 0
                )
                BEGIN
                    INSERT INTO @SuppressSelect
                    EXEC dbo.USP_GBL_NEXTKEYID_GET 'OutbreakCaseContact',
                                                   @OutbreakCaseContactId OUTPUT;

                    INSERT INTO dbo.OutbreakCaseContact
                    (
                        OutbreakCaseContactUID,
                        OutbreakCaseReportUID,
                        ContactTypeID,
                        ContactedHumanCasePersonID,
                        idfHuman,
                        ContactRelationshipTypeID,
                        DateOfLastContact,
                        PlaceOfLastContact,
                        CommentText,
                        ContactStatusID,
                        ContactTracingObservationID,
                        intRowStatus,
                        SourceSystemNameID,
                        SourceSystemKeyValue,
                        AuditCreateUser,
                        AuditCreateDTM
                    )
                    VALUES
                    (@OutbreakCaseContactId,
                     @CaseOrReportId,
                     @ContactTypeId,
                     @ContactedCasePersonId,
                     @HumanId,
                     @ContactRelationshipTypeId,
                     @DateOfLastContact,
                     @PlaceOfLastContact,
                     @Comments,
                     @ContactStatusId,
                     @ContactTracingObservationId,
                     @RowStatus,
                     10519001,
                     '[{"OutbreakCaseContactUID":' + CAST(@OutbreakCaseContactId AS NVARCHAR(300)) + '}]',
                     @AuditUserName,
                     GETDATE()
                    );
                END
                ELSE
                BEGIN
                    UPDATE dbo.OutbreakCaseContact
                    SET ContactTypeID = @ContactTypeId,
                        ContactRelationshipTypeID = @ContactRelationshipTypeId,
                        DateOfLastContact = @DateOfLastContact,
                        PlaceOfLastContact = @PlaceOfLastContact,
                        CommentText = @Comments,
                        ContactStatusID = @ContactStatusId,
                        intRowStatus = @RowStatus,
                        AuditUpdateUser = @AuditUserName,
                        AuditUpdateDTM = GETDATE()
                    WHERE OutbreakCaseContactUID = @OutbreakCaseContactId;
                END
            END;
            SET ROWCOUNT 1;
            DELETE FROM @ContactsTemp;
            SET ROWCOUNT 0;
        END
    END TRY
    BEGIN CATCH
        THROW
    END CATCH;
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Procedure [dbo].[USSP_HUM_DISEASE_VACCINATION_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USSP_HUM_DISEASE_VACCINATION_SET
--
-- Description: Add, update and delete human disease report vaccination records.
--          
-- Author: Harold Arnold
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     11/21/2022 Initial release with data audit logic for SAUC30 and 31.
-- Stephen Long     11/29/2022 Added delete data audit logic.
--
-- Testing code:
-- exec USSP_HUMAN_DISEASE_VACCINATIONS_SET null
-- ================================================================================================
CREATE PROCEDURE [dbo].[USSP_HUM_DISEASE_VACCINATION_SET]
    @HumanDiseaseReportID BIGINT = NULL,
    @VaccinationsParameters NVARCHAR(MAX) = NULL,
    @OutbreakCall INT = 0,
    @AuditUserName NVARCHAR(100) = '',
    @DataAuditEventID BIGINT = NULL
AS
DECLARE @HumanDiseaseReportVaccinationUID BIGINT,
        @VaccinationName NVARCHAR(200),
        @VaccinationDate DATETIME2 = NULL,
        @intRowStatus INT = NULL,
        @RowAction NVARCHAR(1),
        @RowID BIGINT,
        @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectID BIGINT = NULL,
        @ObjectTableID BIGINT = 53577590000000, -- HumanDiseaseReportVaccination
        @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage NVARCHAR(MAX)
);
DECLARE @VaccinationsTemp TABLE
(
    vaccinationID INT NULL,
    humanDiseaseReportVaccinationUID BIGINT NULL,
    idfHumanCase BIGINT NULL,
    vaccinationName NVARCHAR(200) NULL,
    vaccinationDate DATETIME2 NULL,
    rowAction NVARCHAR(1) NULL, 
    intRowStatus INT
);
DECLARE @VaccinationsBeforeEdit TABLE
(
    VaccinationID BIGINT,
    VaccinationName NVARCHAR(200),
    VaccinationDate DATETIME2,
    RowStatus INT
);
DECLARE @VaccinationsAfterEdit TABLE
(
    VaccinationID BIGINT,
    VaccinationName NVARCHAR(200),
    VaccinationDate DATETIME2,
    RowStatus INT
);
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        INSERT INTO @VaccinationsTemp
        SELECT *
        FROM
            OPENJSON(@VaccinationsParameters)
            WITH
            (
                vaccinationID INT, 
                humanDiseaseReportVaccinationUID BIGINT,
                idfHumanCase BIGINT,
                vaccinationName NVARCHAR(200),
                vaccinationDate DATETIME2,
                rowAction NVARCHAR(1), 
                intRowStatus INT 
            );

        WHILE EXISTS (SELECT * FROM @VaccinationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = humanDiseaseReportVaccinationUID,
                @HumanDiseaseReportVaccinationUID = humanDiseaseReportVaccinationUID,
                @VaccinationName = vaccinationName,
                @VaccinationDate = vaccinationDate,
                @RowAction = rowAction, 
                @intRowStatus = intRowStatus 
            FROM @VaccinationsTemp;

            IF NOT EXISTS
            (
                SELECT HumanDiseaseReportVaccinationUID
                FROM dbo.HumanDiseaseReportVaccination
                WHERE HumanDiseaseReportVaccinationUID = @HumanDiseaseReportVaccinationUID
            )
            BEGIN
                IF @OutbreakCall = 1
                BEGIN
                    EXEC dbo.USP_GBL_NEXTKEYID_GET 'HumanDiseaseReportVaccination',
                                                   @HumanDiseaseReportVaccinationUID OUTPUT;
                END
                ELSE
                BEGIN
                    INSERT INTO @SuppressSelect
                    EXEC dbo.USP_GBL_NEXTKEYID_GET 'HumanDiseaseReportVaccination',
                                                   @HumanDiseaseReportVaccinationUID OUTPUT;
                END

                INSERT INTO dbo.HumanDiseaseReportVaccination
                (
                    HumanDiseaseReportVaccinationUID,
                    idfHumanCase,
                    VaccinationName,
                    VaccinationDate,
                    intRowStatus,
                    AuditCreateUser,
                    AuditCreateDTM
                )
                VALUES
                (   @HumanDiseaseReportVaccinationUID,
                    @HumanDiseaseReportID,
                    @VaccinationName,
                    @VaccinationDate,
                    0, --Always 0, because this is a new record
                    @AuditUserName,
                    GETDATE()
                );

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser
                )
                VALUES
                (@DataAuditEventID,
                 @ObjectTableID,
                 @HumanDiseaseReportVaccinationUID,
                 10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                 + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
                 @AuditUserName
                );
            -- End data audit
            END
            ELSE
            BEGIN
                INSERT INTO @VaccinationsBeforeEdit
                (
                    VaccinationID,
                    VaccinationDate,
                    VaccinationName,
                    RowStatus
                )
                SELECT HumanDiseaseReportVaccinationUID,
                       VaccinationDate,
                       VaccinationName,
                       intRowStatus
                FROM dbo.HumanDiseaseReportVaccination
                WHERE HumanDiseaseReportVaccinationUID = @HumanDiseaseReportVaccinationUID;

                UPDATE dbo.HumanDiseaseReportVaccination
                SET VaccinationName = @VaccinationName,
                    VaccinationDate = @VaccinationDate,
                    intRowStatus = @intRowStatus,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE HumanDiseaseReportVaccinationUID = @HumanDiseaseReportVaccinationUID;

                INSERT INTO @VaccinationsAfterEdit
                (
                    VaccinationID,
                    VaccinationDate,
                    VaccinationName,
                    RowStatus
                )
                SELECT HumanDiseaseReportVaccinationUID,
                       VaccinationDate,
                       VaccinationName,
                       intRowStatus
                FROM dbo.HumanDiseaseReportVaccination
                WHERE HumanDiseaseReportVaccinationUID = @HumanDiseaseReportVaccinationUID;

                IF @intRowStatus = 0
                BEGIN
                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableID,
                           51586690000002,
                           a.VaccinationID,
                           NULL,
                           b.VaccinationDate,
                           a.VaccinationDate,
                           @AuditUserName
                    FROM @VaccinationsAfterEdit AS a
                        FULL JOIN @VaccinationsAfterEdit AS b
                            ON a.VaccinationID = b.VaccinationID
                    WHERE (a.VaccinationDate <> b.VaccinationDate)
                          OR (
                                 a.VaccinationDate IS NOT NULL
                                 AND b.VaccinationDate IS NULL
                             )
                          OR (
                                 a.VaccinationDate IS NULL
                                 AND b.VaccinationDate IS NOT NULL
                             );

                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser
                    )
                    SELECT @DataAuditEventID,
                           @ObjectTableID,
                           51586690000001,
                           a.VaccinationID,
                           NULL,
                           b.VaccinationName,
                           a.VaccinationName,
                           @AuditUserName
                    FROM @VaccinationsAfterEdit AS a
                        FULL JOIN @VaccinationsBeforeEdit AS b
                            ON a.VaccinationID = b.VaccinationID
                    WHERE (a.VaccinationName <> b.VaccinationName)
                          OR (
                                 a.VaccinationName IS NOT NULL
                                 AND b.VaccinationName IS NULL
                             )
                          OR (
                                 a.VaccinationName IS NULL
                                 AND b.VaccinationName IS NOT NULL
                             );
                END
                ELSE
                BEGIN
                    INSERT INTO dbo.tauDataAuditDetailDelete
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject
                    )
                    VALUES
                    (@DataAuditEventID, @ObjectTableID, @HumanDiseaseReportVaccinationUID);
                END
            END

            SET ROWCOUNT 1;
            DELETE FROM @VaccinationsTemp;
            SET ROWCOUNT 0;
        END
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USP_HUM_HUMAN_DISEASE_SET]...';


GO
-- ================================================================================================
-- Name: USP_HUM_HUMAN_DISEASE_SET
--
-- Description:	Insert or update a human disease report record.
--          
-- Author: Mandar Kulkarni
--
-- Revision History:
-- Name                  Date       Change Detail
-- --------------------- ---------- --------------------------------------------------------------
-- JWJ	                 04/03/2018 Added new param to end for ReportStatus
-- Harold Pryor          08/01/2018 Added new @DiseaseReportTypeID input paramenter
-- Harold Pryor          11/30/2018 Added new @blnClinicalDiagBasis, @blnLabDiagBasis, 
--                                  @blnEpiDiagBasis input parameters for Basis of Diagnosis and 
--                                  new @DateofClassification input parameter 
-- Harold Pryor          12/05/2018	Added new @StartDateofInvestigation input parameter. Corrected 
--                                  @idfSoughtCareFacility input parameter spelling.	
-- Harold Pryor          12/06/2018	Removed updating Primary Key column for tlbHumanCase update.
-- Harold Pryor          12/13/2018	Removed @VaccinationName and @VaccinationDate input 
--                                  paramenters
-- Harold Pryor          12/21/2018	Changed @Sample as tlbHdrMaterialGetListSPType and @Tests as 
--                                  tlbHdrTestGetListSPType parameters and replaced as NVARCHAR
-- Harold Pryor          12/27/2018	Changed @Sample parameter to @SampleParameters and changed 
--                                  parameter @Tests to @TestsParameters. 
-- Lamont Mitchell       01/02/2018	Changed @idfHumanCase from OutputParameter and added to 
--                                  select statement
-- Harold Pryor          01/04/2018	Added new input paramters @AntiviralTherapiesParameters and 
--                                  @VaccinationsParameters	
-- Lamont Mitchell       01/11/2019	Suppressed Result Sets in ALL STORED PROCS
-- Harold Pryor          01/21/2019	Added @ContactsParameters input parameter 
-- Harold Pryor          01/27/2019	Added @strSummaryNotes input parameter
-- Harold Pryor          02/10/2019	Added @idfEpiObservation and @idfCSObservation	input 
--                                  paremeters for Flex Forms integration. 
-- Harold Pryor          03/22/2019	Updated to include @idfHuman and @DiseaseID to call to 
--                                  USSP_HUMAN_DISEASE_SAMPLES_SET stored proc 
-- Harold Pryor          04/08/2019	Updated to include @idfHumanCaseRelatedTo imput parameter for 
--                                  Changed Diagnosis Human Disease Report functionality
-- Harold Pryor          04/09/2019	For Smart key generation reference data change for V7 updated 
--                                  call to USP_GBL_NextNumber using a V6 strDocumentName ('Human 
--                                  Case').  Input parameter and replaced with V7 trDocumentName 
--                                  ('Human Disease Report') input parameter value instead.  
-- Harold Pryor          04/28/2019 Updated to properly save contacts 
-- Harold Pryor          05/28/2019 Updated to include paramter @idfHuman in call to 
--                                  USSP_HUMAN_DISEASE_CONTACT_SET
-- Harold Pryor          06/04/2019 Updated to include @strEpidemiologistsName input parameter
-- Harold Pryor          06/05/2019 Updated to include @idfsNotCollectedReason input parameter 
-- Harold Pryor          06/18/2019 Updated to include @idfsGeoLocationType input parameter
-- Harold Pryor          06/19/2019 Updated to include @intElevation and @strForeignAddress input 
--                                  parameters
-- Harold Pryor          06/19/2019 Updated to include @intLocationDirection input parameter
-- Lamont Mitchell       04/21/2020	UPDATEd tlbGeolocation Output Parameter
-- Lamont Mitchell       06/07/2020	Modified adding Connected Human disease Report
-- Lamont Mitchell       08/04/2020 Added property @idfInvestigatedByPerson and modified insert 
--                                  and update statments to include parameter
-- Lamont Mitchell       08/04/2000	Added SITE ID Property
-- Lamont Mitchell       11/02/2020	Added strNotCollectedReason to property list and add and 
--                                  update
-- Mandar Kulkani        01/18/2022	Removed two input parameters for relative latitude and 
--                                  longitude
-- Minal Shah            01/24/2022	Added strLocalIdentifier to the request
-- Minal Shah            04/04/2022	Added Site Alert Notifications
-- Doug Albanese         04/19/2022	Added tag to denote refactoring to Location Hierarchy
-- Doug Albanese         05/24/2022	Added idfParentMonitoringSession to connect a human active 
--                                  surveillance session to a disease report
-- Mark Wilson           06/02/2022	Set @AuditUser = ISNULL(@AuditUser, '') to make sure no nulls
-- Mark Wilson           06/08/2022	Defined all parameters for USSP_GBL_SAMPLE_SET
-- Stephen Long          07/06/2022 Updates for site alerts to call new stored procedure.
-- Doug Albanese         07/18/2022	Add @ConnectedTestId, so that HDR can make the association, 
--                                  after obtaining the new idfHumanCase value.
-- Doug Albanese         09/12/2022 Linked up the "Monitoring Session ID" to Samples and Tests
-- Doug Albanese         10/17/2022	Corrected the "Connected Test" to update all records for the 
--                                  existing monitoring session that have the same person and 
--                                  disease combination
-- Leo Tracchia          10/21/2022 Fix for properly deleting tests for human disease report 
--                                  DevOps defect 5006
-- Stephen Long          11/17/2022 Added data audit logic for SAUC30 and 31.
-- Stephen Long          11/28/2022 Added data audit for vaccinations, contacts and geolocation.
--
-- Testing Code:
-- EXEC USP_HUM_HUMAN_DISEASE_SET  NULL,  27, NULL,  '(new)',784050000000
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_HUMAN_DISEASE_SET]
(
    @LanguageID NVARCHAR(50),
    @idfHumanCase BIGINT = NULL,                          -- tlbHumanCase.idfHumanCase Primary Key
    @idfHumanCaseRelatedTo BIGINT = NULL,
    @idfHuman BIGINT = NULL,                              -- tlbHumanCase.idfHuman
    @idfHumanActual BIGINT,                               -- tlbHumanActual.idfHumanActual
    @strHumanCaseId NVARCHAR(200) = '(new)',
    @idfsFinalDiagnosis BIGINT,                           -- tlbhumancase.idfsTentativeDiagnosis/idfsFinalDiagnosis
    @datDateOfDiagnosis DATETIME = NULL,                  --tlbHumanCase.datTentativeDiagnosisDate/datFinalDiagnosisDate
    @datNotificationDate DATETIME = NULL,                 --tlbHumanCase.DatNotIFicationDate
    @idfsFinalState BIGINT = NULL,                        --tlbHumanCase.idfsFinalState
    @strLocalIdentifier NVARCHAR(200) = NULL,
    @idfSentByOffice BIGINT = NULL,                       -- tlbHumanCase.idfSentByOffice
    @strSentByFirstName NVARCHAR(200) = NULL,             --tlbHumanCase.strSentByFirstName
    @strSentByPatronymicName NVARCHAR(200) = NULL,        --tlbHumancase.strSentByPatronymicName
    @strSentByLastName NVARCHAR(200) = NULL,              --tlbHumanCase.strSentByLastName
    @idfSentByPerson BIGINT = NULL,                       --tlbHumcanCase.idfSentByPerson
    @idfReceivedByOffice BIGINT = NULL,                   -- tlbHumanCase.idfReceivedByOffice
    @strReceivedByFirstName NVARCHAR(200) = NULL,         --tlbHumanCase.strReceivedByFirstName
    @strReceivedByPatronymicName NVARCHAR(200) = NULL,    --tlbHumanCase.strReceivedByPatronymicName
    @strReceivedByLastName NVARCHAR(200) = NULL,          --tlbHuanCase.strReceivedByLastName
    @idfReceivedByPerson BIGINT = NULL,                   -- tlbHumanCase.idfReceivedByPerson
    @idfsHospitalizationStatus BIGINT = NULL,             -- tlbHumanCase.idfsHospitalizationStatus
    @idfHospital BIGINT = NULL,                           -- tlbHumanCase.idfHospital
    @strCurrentLocation NVARCHAR(200) = NULL,             -- tlbHumanCase.strCurrentLocation
    @datOnSetDate DATETIME = NULL,                        -- tlbHumanCase.datOnSetDate
    @idfsInitialCaseStatus BIGINT = NULL,                 -- tlbHumanCase.idfsInitialCaseStatus
    @idfsYNPreviouslySoughtCare BIGINT = NULL,            --idfsYNPreviouslySoughtCare
    @datFirstSoughtCareDate DATETIME = NULL,              --tlbHumanCase.datFirstSoughtCareDate
    @idfSoughtCareFacility BIGINT = NULL,                 --tlbHumanCase.idfSoughtCareFacility
    @idfsNonNotIFiableDiagnosis BIGINT = NULL,            --tlbHumanCase.idfsNonNotIFiableDiagnosis
    @idfsYNHospitalization BIGINT = NULL,                 -- tlbHumanCase.idfsYNHospitalization
    @datHospitalizationDate DATETIME = NULL,              --tlbHumanCase.datHospitalizationDate 
    @datDischargeDate DATETIME = NULL,                    -- tlbHumanCase.datDischargeDate
    @strHospitalName NVARCHAR(200) = NULL,                --tlbHumanCase.strHospitalizationPlace  
    @idfsYNAntimicrobialTherapy BIGINT = NULL,            --  tlbHumanCase.idfsYNAntimicrobialTherapy 
    @strAntibioticName NVARCHAR(200) = NULL,              -- tlbHumanCase.strAntimicrobialTherapyName
    @strDosage NVARCHAR(200) = NULL,                      --tlbHumanCase.strDosage
    @datFirstAdministeredDate DATETIME = NULL,            -- tlbHumanCase.datFirstAdministeredDate
    @strAntibioticComments NVARCHAR(MAX) = NULL,          -- tlbHumanCase.strClinicalNotes , or strSummaryNotes
    @idfsYNSpecIFicVaccinationAdministered BIGINT = NULL, --  tlbHumanCase.idfsYNSpecIFicVaccinationAdministered
    @idfInvestigatedByOffice BIGINT = NULL,               -- tlbHumanCase.idfInvestigatedByOffice 
    @StartDateofInvestigation DATETIME = NULL,            -- tlbHumanCase.datInvestigationStartDate
    @idfsYNRelatedToOutbreak BIGINT = NULL,               -- tlbHumanCase.idfsYNRelatedToOutbreak
    @idfOutbreak BIGINT = NULL,                           --idfOutbreak  
    @idfsYNExposureLocationKnown BIGINT = NULL,           --tlbHumanCase.idfsYNExposureLocationKnown
    @idfPointGeoLocation BIGINT = NULL,                   --tlbHumanCase.idfPointGeoLocation
    @datExposureDate DATETIME = NULL,                     -- tlbHumanCase.datExposureDate 
    @idfsGeoLocationType BIGINT = NULL,                   --tlbGeolocation.idfsGeoLocationType
    @strLocationDescription NVARCHAR(MAX) = NULL,         --tlbGeolocation.Description
    @idfsLocationCountry BIGINT = NULL,                   --tlbGeolocation.idfsCountry 
    @idfsLocationRegion BIGINT = NULL,                    --tlbGeolocation.idfsRegion
    @idfsLocationRayon BIGINT = NULL,                     --tlbGeolocation.idfsRayon
    @idfsLocationSettlement BIGINT = NULL,                --tlbGeolocation.idfsSettlement
    @intLocationLatitude FLOAT = NULL,                    --tlbGeolocation.Latittude
    @intLocationLongitude FLOAT = NULL,                   --tlbGeolocation.Longitude
    @intElevation BIGINT = NULL,                          --GISSettlement.intElevation
    @idfsLocationGroundType BIGINT = NULL,                --tlbGeolocation.GroundType
    @intLocationDistance FLOAT = NULL,                    --tlbGeolocation.Distance
    @intLocationDirection FLOAT = NULL,                   --tlbGeolocation.Alignment	
    @strForeignAddress NVARCHAR(MAX) = NULL,              --tlbGeolocation.strForeignAddress 
    @strNote NVARCHAR(MAX) = NULL,                        --tlbhumancase.strNote
    @idfsFinalCaseStatus BIGINT = NULL,                   --tlbHuanCase.idfsFinalCaseStatus 
    @idfsOutcome BIGINT = NULL,                           -- --tlbHumanCase.idfsOutcome 
    @datDateofDeath DATETIME = NULL,                      -- tlbHumanCase.datDateOfDeath 
    @idfsCaseProgressStatus BIGINT = 10109001,            --	tlbHumanCase.reportStatus, default = In-process
    @idfPersonEnteredBy BIGINT = NULL,
    @strClinicalNotes NVARCHAR(2000) = NULL,
    @idfsYNSpecimenCollected BIGINT = NULL,
    @idfsYNTestsConducted BIGINT = NULL,
    @DiseaseReportTypeID BIGINT = NULL,
    @blnClinicalDiagBasis BIT = NULL,
    @blnLabDiagBasis BIT = NULL,
    @blnEpiDiagBasis BIT = NULL,
    @DateofClassification DATETIME = NULL,
    @strSummaryNotes NVARCHAR(MAX) = NULL,
    @idfEpiObservation BIGINT = NULL,
    @idfCSObservation BIGINT = NULL,
    @idfInvestigatedByPerson BIGINT = NULL,
    @strEpidemiologistsName NVARCHAR(MAX) = NULL,
    @idfsNotCollectedReason BIGINT = NULL,
    @strNotCollectedReason NVARCHAR(200) = NULL,
    @SamplesParameters NVARCHAR(MAX) = NULL,
    @TestsParameters NVARCHAR(MAX) = NULL,
    @TestsInterpretationParameters NVARCHAR(MAX) = NULL,
    @AntiviralTherapiesParameters NVARCHAR(MAX) = NULL,
    @VaccinationsParameters NVARCHAR(MAX) = NULL,
    @ContactsParameters NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL,
    @idfsHumanAgeType BIGINT = NULL,
    @intPatientAge INT = NULL,
    @datCompletionPaperFormDate DATETIME = NULL,
    @RowStatus INT,
    @idfsSite BIGINT = NULL,
    @AuditUser NVARCHAR(100) = '',
    @idfParentMonitoringSession BIGINT = NULL,
    @ConnectedTestId BIGINT = NULL
)
AS
DECLARE @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
        @RowID BIGINT = NULL,
        @RowAction NCHAR = NULL,
        @OrderNumber INT,
        @SampleID BIGINT,
        @SampleTypeID BIGINT = NULL,
        @HumanID BIGINT,
        @HumanMasterID BIGINT = NULL,
        @CollectedByPersonID BIGINT = NULL,
        @CollectedByOrganizationID BIGINT = NULL,
        @CollectionDate DATETIME = NULL,
        @SentDate DATETIME = NULL,
        @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
        @SampleStatusTypeID BIGINT = NULL,
        @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
        @SentToOrganizationID BIGINT = NULL,
        @ReadOnlyIndicator BIT = NULL,
        @AccessionDate DATETIME = NULL,
        @AccessionConditionTypeID BIGINT = NULL,
        @AccessionComment NVARCHAR(200) = NULL,
        @AccessionByPersonID BIGINT = NULL,
        @CurrentSiteID BIGINT = NULL,
        @TestID BIGINT,
        @TestNameTypeID BIGINT = NULL,
        @TestCategoryTypeID BIGINT = NULL,
        @TestResultTypeID BIGINT = NULL,
        @TestStatusTypeID BIGINT,
        @BatchTestID BIGINT = NULL,
        @TestNumber INT = NULL,
        @StartedDate DATETIME2 = NULL,
        @ResultDate DATETIME2 = NULL,
        @TestedByPersonID BIGINT = NULL,
        @TestedByOrganizationID BIGINT = NULL,
        @ResultEnteredByOrganizationID BIGINT = NULL,
        @ResultEnteredByPersonID BIGINT = NULL,
        @ValidatedByOrganizationID BIGINT = NULL,
        @ValidatedByPersonID BIGINT = NULL,
        @NonLaboratoryTestIndicator BIT,
        @ExternalTestIndicator BIT = NULL,
        @PerformedByOrganizationID BIGINT = NULL,
        @ReceivedDate DATETIME2 = NULL,
        @ContactPersonName NVARCHAR(200) = NULL,
        @TestHumanCaseID BIGINT = NULL,
        @TestInterpretationID BIGINT,
        @InterpretedStatusTypeID BIGINT = NULL,
        @InterpretedByOrganizationID BIGINT = NULL,
        @InterpretedByPersonID BIGINT = NULL,
        @TestingInterpretations BIGINT,
        @ValidatedStatusIndicator BIT = NULL,
        @ReportSessionCreatedIndicator BIT = NULL,
        @ValidatedComment NVARCHAR(200) = NULL,
        @InterpretedComment NVARCHAR(200) = NULL,
        @ValidatedDate DATETIME = NULL,
        @InterpretedDate DATETIME = NULL,
                                                        -- Site alerts/notifications
        @EventId BIGINT,
        @EventTypeId BIGINT = NULL,
        @EventSiteId BIGINT = NULL,
        @EventObjectId BIGINT = NULL,
        @EventUserId BIGINT = NULL,
        @EventDiseaseId BIGINT = NULL,
        @EventLocationId BIGINT = NULL,
        @EventInformationString NVARCHAR(MAX) = NULL,
        @EventLoginSiteId BIGINT = NULL,
                                                        -- End site alerts/notifications
        @MonitoringSessionActionID BIGINT,
        @ActionTypeID BIGINT,
        @ActionStatusTypeID BIGINT,
        @ActionDate DATETIME = NULL,
        @Comments NVARCHAR(500) = NULL,
        @DiseaseID BIGINT,
        @idfMonitoringSessionToDiagnosis BIGINT,
        @DateEntered DATETIME = GETDATE(),
        @idfMaterial BIGINT,
                                                        -- Data audit
        @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectTypeID BIGINT = 10017026,                -- Human disease report
        @ObjectID BIGINT = @idfHumanCase,
        @ObjectTableID BIGINT = 75610000000,            -- tlbHumanCase
        @ObjectObservationTableID BIGINT = 75640000000; -- tlbObservation
-- End data audit
SET @AuditUser = ISNULL(@AuditUser, '');

DECLARE @SamplesTemp TABLE
(
    SampleID BIGINT NOT NULL,
    SampleTypeID BIGINT NULL,
    SampleStatusTypeID BIGINT NULL,
    CollectionDate DATETIME2 NULL,
    CollectedByOrganizationID BIGINT NULL,
    CollectedByPersonID BIGINT NULL,
    SentDate DATETIME2 NULL,
    SentToOrganizationID BIGINT NULL,
    EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
    Comments NVARCHAR(200) NULL,
    SiteID BIGINT NOT NULL,
    CurrentSiteID BIGINT NULL,
    DiseaseID BIGINT NULL,
    ReadOnlyIndicator BIT NULL,
    HumanID BIGINT NULL,
    HumanMasterID BIGINT NULL,
    RowStatus INT NOT NULL,
    RowAction CHAR(1) NULL
);
DECLARE @TestsTemp TABLE
(
    TestID BIGINT NOT NULL,
    TestNameTypeID BIGINT NULL,
    TestCategoryTypeID BIGINT NULL,
    TestResultTypeID BIGINT NULL,
    TestStatusTypeID BIGINT NOT NULL,
    DiseaseID BIGINT NULL,
    SampleID BIGINT NULL,
    BatchTestID BIGINT NULL,
    ObservationID BIGINT NULL,
    TestNumber INT NULL,
    Comments NVARCHAR NULL,
    StartedDate DATETIME2 NULL,
    ResultDate DATETIME2 NULL,
    TestedByOrganizationID BIGINT NULL,
    TestedByPersonID BIGINT NULL,
    ResultEnteredByOrganizationID BIGINT NULL,
    ResultEnteredByPersonID BIGINT NULL,
    ValidatedByOrganizationID BIGINT NULL,
    ValidatedByPersonID BIGINT NULL,
    ReadOnlyIndicator BIT NOT NULL,
    NonLaboratoryTestIndicator BIT NOT NULL,
    ExternalTestIndicator BIT NULL,
    PerformedByOrganizationID BIGINT NULL,
    ReceivedDate DATETIME2 NULL,
    ContactPersonName NVARCHAR(200) NULL,
    RowStatus INT NOT NULL,
    RowAction CHAR(1) NULL
);
DECLARE @TestsInterpretationParametersTemp TABLE
(
    TestInterpretationID BIGINT NOT NULL,
    DiseaseID BIGINT NULL,
    InterpretedStatusTypeID BIGINT NULL,
    ValidatedByOrganizationID BIGINT NULL,
    ValidatedByPersonID BIGINT NULL,
    InterpretedByOrganizationID BIGINT NULL,
    InterpretedByPersonID BIGINT NULL,
    TestID BIGINT NOT NULL,
    ValidatedStatusIndicator BIT NULL,
    ReportSessionCreatedIndicator BIT NULL,
    ValidatedComment NVARCHAR(200) NULL,
    InterpretedComment NVARCHAR(200) NULL,
    ValidatedDate DATETIME NULL,
    InterpretedDate DATETIME NULL,
    ReadOnlyIndicator BIT NOT NULL,
    RowStatus INT NOT NULL,
    RowAction INT NULL
);
DECLARE @EventsTemp TABLE
(
    EventId BIGINT NOT NULL,
    EventTypeId BIGINT NULL,
    UserId BIGINT NULL,
    SiteId BIGINT NULL,
    LoginSiteId BIGINT NULL,
    ObjectId BIGINT NULL,
    DiseaseId BIGINT NULL,
    LocationId BIGINT NULL,
    InformationString NVARCHAR(MAX) NULL
);
DECLARE @HumanDiseaseReportBeforeEdit TABLE
(
    HumanDiseaseReportID BIGINT,
    HumanID BIGINT,
    FinalStateTypeID BIGINT,
    HospitalizationStatusTypeID BIGINT,
    HumanAgeTypeID BIGINT,
    AntimicrobialTherapyTypeID BIGINT,
    HospitalizationTypeID BIGINT,
    SpecimenCollectedTypeID BIGINT,
    RelatedToOutbreakTypeID BIGINT,
    OutcomeID BIGINT,
    TentativeDiagnosisID BIGINT,
    FinalDiagnosisID BIGINT,
    InitialCaseStatusTypeID BIGINT,
    FinalCaseStatusTypeID BIGINT,
    SentByOfficeID BIGINT,
    ReceivedByOfficeID BIGINT,
    InvestigatedByOfficeID BIGINT,
    PointGeoLocationID BIGINT,
    EpiObservationID BIGINT,
    CSObservationID BIGINT,
    DeduplicationResultCaseID BIGINT,
    NotificationDate DATETIME,
    CompletionPaperFormDate DATETIME,
    FirstSoughtCareDate DATETIME,
    ModificationDate DATETIME,
    HospitalizationDate DATETIME,
    FacilityLastVisitDate DATETIME,
    ExposureDate DATETIME,
    DischargeDate DATETIME,
    OnSetDate DATETIME,
    InvestigationStartDate DATETIME,
    TentativeDiagnosisDate DATETIME,
    FinalDiagnosisDate DATETIME,
    Note NVARCHAR(2000),
    CurrentLocation NVARCHAR(200),
    HospitalizationPlace NVARCHAR(200),
    LocalIdentifier NVARCHAR(200),
    SoughtCareFacility NVARCHAR(200),
    SentByFirstName NVARCHAR(200),
    SentByPatronymicName NVARCHAR(200),
    SentByLastName NVARCHAR(200),
    ReceivedByFirstName NVARCHAR(200),
    ReceivedByPatronymicName NVARCHAR(200),
    ReceivedByLastName NVARCHAR(200),
    EpidemiologistsName NVARCHAR(200),
    NotCollectedReason NVARCHAR(200),
    ClinicalDiagnosis NVARCHAR(200),
    ClinicalNotes NVARCHAR(2000),
    SummaryNotes NVARCHAR(2000),
    PatientAge INT,
    ClinicalDiagBasisIndicator BIT,
    LabDiagBasisIndicator BIT,
    EpiDiagBasisIndicator BIT,
    PersonEnteredByID BIGINT,
    SentByPersonID BIGINT,
    ReceivedByPersonID BIGINT,
    InvestigatedByPersonID BIGINT,
    TestsConductedTypeID BIGINT,
    SoughtCareFacilityID BIGINT,
    NonNotifiableDiagnosisID BIGINT,
    NotCollectedReasonTypeID BIGINT,
    OutbreakID BIGINT,
    EnteredDate DATETIME,
    CaseID NVARCHAR(200),
    CaseProgressStatusTypeID BIGINT,
    SampleNotes NVARCHAR(1000),
    OfflineCaseID UNIQUEIDENTIFIER,
    FinalCaseClassificationDate DATETIME,
    HospitalID BIGINT,
    RowStatus INT
);
DECLARE @HumanDiseaseReportAfterEdit TABLE
(
    HumanDiseaseReportID BIGINT,
    HumanID BIGINT,
    FinalStateTypeID BIGINT,
    HospitalizationStatusTypeID BIGINT,
    HumanAgeTypeID BIGINT,
    AntimicrobialTherapyTypeID BIGINT,
    HospitalizationTypeID BIGINT,
    SpecimenCollectedTypeID BIGINT,
    RelatedToOutbreakTypeID BIGINT,
    OutcomeID BIGINT,
    TentativeDiagnosisID BIGINT,
    FinalDiagnosisID BIGINT,
    InitialCaseStatusTypeID BIGINT,
    FinalCaseStatusTypeID BIGINT,
    SentByOfficeID BIGINT,
    ReceivedByOfficeID BIGINT,
    InvestigatedByOfficeID BIGINT,
    PointGeoLocationID BIGINT,
    EpiObservationID BIGINT,
    CSObservationID BIGINT,
    DeduplicationResultCaseID BIGINT,
    NotificationDate DATETIME,
    CompletionPaperFormDate DATETIME,
    FirstSoughtCareDate DATETIME,
    ModificationDate DATETIME,
    HospitalizationDate DATETIME,
    FacilityLastVisitDate DATETIME,
    ExposureDate DATETIME,
    DischargeDate DATETIME,
    OnSetDate DATETIME,
    InvestigationStartDate DATETIME,
    TentativeDiagnosisDate DATETIME,
    FinalDiagnosisDate DATETIME,
    Note NVARCHAR(2000),
    CurrentLocation NVARCHAR(200),
    HospitalizationPlace NVARCHAR(200),
    LocalIdentifier NVARCHAR(200),
    SoughtCareFacility NVARCHAR(200),
    SentByFirstName NVARCHAR(200),
    SentByPatronymicName NVARCHAR(200),
    SentByLastName NVARCHAR(200),
    ReceivedByFirstName NVARCHAR(200),
    ReceivedByPatronymicName NVARCHAR(200),
    ReceivedByLastName NVARCHAR(200),
    EpidemiologistsName NVARCHAR(200),
    NotCollectedReason NVARCHAR(200),
    ClinicalDiagnosis NVARCHAR(200),
    ClinicalNotes NVARCHAR(2000),
    SummaryNotes NVARCHAR(2000),
    PatientAge INT,
    ClinicalDiagBasisIndicator BIT,
    LabDiagBasisIndicator BIT,
    EpiDiagBasisIndicator BIT,
    PersonEnteredByID BIGINT,
    SentByPersonID BIGINT,
    ReceivedByPersonID BIGINT,
    InvestigatedByPersonID BIGINT,
    TestsConductedTypeID BIGINT,
    SoughtCareFacilityID BIGINT,
    NonNotifiableDiagnosisID BIGINT,
    NotCollectedReasonTypeID BIGINT,
    OutbreakID BIGINT,
    EnteredDate DATETIME,
    CaseID NVARCHAR(200),
    CaseProgressStatusTypeID BIGINT,
    SampleNotes NVARCHAR(1000),
    OfflineCaseID UNIQUEIDENTIFIER,
    FinalCaseClassificationDate DATETIME,
    HospitalID BIGINT,
    RowStatus INT
);
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200)
);
DECLARE @SuppressSelectHumanCase TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200)
);
DECLARE @SuppressSelectHuman TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200),
    idfHuman BIGINT
);
DECLARE @SuppressSelectGeoLocation TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200),
    GeoLocationID BIGINT
);
DECLARE @ActivityParameters TABLE
(
    ActivityParameterID BIGINT,
    AnswerValue SQL_VARIANT
);
BEGIN
    BEGIN TRY
        SET @SamplesParameters = REPLACE(@SamplesParameters, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@SamplesParameters)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                SampleStatusTypeID BIGINT,
                CollectionDate DATETIME2,
                CollectedByOrganizationID BIGINT,
                CollectedByPersonID BIGINT,
                SentDate DATETIME2,
                SentToOrganizationID BIGINT,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                Comments NVARCHAR(200),
                SiteID BIGINT,
                CurrentSiteID BIGINT,
                DiseaseID BIGINT,
                ReadOnlyIndicator BIT,
                HumanID BIGINT,
                HumanMasterID BIGINT,
                RowStatus INT,
                RowAction CHAR(1)
            );

        SET @TestsParameters = REPLACE(@TestsParameters, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @TestsTemp
        SELECT *
        FROM
            OPENJSON(@TestsParameters)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Comments NVARCHAR(500),
                StartedDate DATETIME2,
                ResultDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                RowStatus INT,
                RowAction CHAR(1)
            );

        INSERT INTO @TestsInterpretationParametersTemp
        SELECT *
        FROM
            OPENJSON(@TestsInterpretationParameters)
            WITH
            (
                TestInterpretationID BIGINT,
                DiseaseID BIGINT,
                InterpretedStatusTypeID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                InterpretedByOrganizationID BIGINT,
                InterpretedByPersonID BIGINT,
                TestID BIGINT,
                ValidatedStatusIndicator BIT,
                ReportSessionCreatedIndicator BIT,
                ValidatedComment NVARCHAR(200),
                InterpretedComment NVARCHAR(200),
                ValidatedDate DATETIME2,
                InterpretedDate DATETIME2,
                ReadOnlyIndicator BIT,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        BEGIN TRANSACTION

        -- Data Audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = UserInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUser) userInfo;

        IF @idfHumanCase IS NULL
        BEGIN
            SET @DataAuditEventTypeID = 10016001; -- Data audit create event type

            -- Get next key value
            INSERT INTO @SuppressSelect
            EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbHumanCase', @idfHumanCase OUTPUT;
        END
        ELSE
        BEGIN
            SET @DataAuditEventTypeID = 10016003; -- Data audit edit event type
        END

        INSERT INTO @SuppressSelect
        EXEC dbo.USSP_GBL_DataAuditEvent_GET @AuditUserID,
                                             @AuditSiteID,
                                             @DataAuditEventTypeID,
                                             @ObjectTypeID,
                                             @idfHumanCase,
                                             @ObjectTableID,
                                             @DataAuditEventID OUTPUT;
        -- Data Audit

        SET @DiseaseID = @idfsFinalDiagnosis;

        DECLARE @HumanDiseasereportRelnUID BIGINT,
                @COPYHUMANACTUALTOHUMAN_ReturnCode INT = 0;

        -- Create a human record from human actual if not already present
        IF @idfHumanActual IS NOT NULL -- AND @idfHumanCase IS  NULL
        BEGIN
            INSERT INTO @SuppressSelectHumanCase
            EXEC dbo.USSP_HUM_COPY_HUMAN_SET @idfHumanActual,
                                             @DataAuditEventID,
                                             @AuditUser,
                                             @idfHuman OUTPUT,
                                             @ReturnCode OUTPUT,
                                             @ReturnMessage OUTPUT;
            IF @ReturnCode <> 0
            BEGIN
                RETURN;
            END
        END

        --TODO: Needs to be refactored to use Hierarchy
        -- Insert or update geolocation record if any of the information is provided
        IF @idfsLocationGroundType IS NOT NULL
           OR @idfsGeoLocationType IS NOT NULL
           OR @idfsLocationCountry IS NOT NULL
           OR @idfsLocationRegion IS NOT NULL
           OR @idfsLocationRayon IS NOT NULL
           OR @idfsLocationSettlement IS NOT NULL
           OR @strLocationDescription IS NOT NULL
           OR @intLocationLatitude IS NOT NULL
           OR @intLocationLongitude IS NOT NULL
           OR @intLocationDistance IS NOT NULL
           OR @intLocationDirection IS NOT NULL
           OR @strForeignAddress IS NOT NULL
           OR @intElevation IS NOT NULL
        BEGIN
            -- Set geo location 
            IF @idfPointGeoLocation IS NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbGeoLocation',
                                               @idfPointGeoLocation OUTPUT;
            END

            BEGIN
                INSERT INTO @SuppressSelectGeoLocation
                EXEC dbo.USSP_HUM_DISEASE_GEOLOCATION_SET @idfPointGeoLocation,
                                                          @idfsLocationGroundType,
                                                          @idfsGeoLocationType,
                                                          @idfsLocationCountry,
                                                          @idfsLocationRegion,
                                                          @idfsLocationRayon,
                                                          @idfsLocationSettlement,
                                                          @strLocationDescription,
                                                          @intLocationLatitude,
                                                          @intLocationLongitude,
                                                          NULL,
                                                          @intLocationDistance,
                                                          @intLocationDirection,
                                                          @strForeignAddress,
                                                          1,
                                                          @intElevation,
                                                          @AuditUser,
                                                          @DataAuditEventID;
            END
        END

        IF NOT EXISTS
        (
            SELECT idfHumanCase
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase
                  AND intRowStatus = 0
        )
        BEGIN
            -- Create a string ID for the disease report
            IF LEFT(ISNULL(@strHumanCaseID, '(new'), 4) = '(new'
            BEGIN
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NextNumber_GET 'Human Disease Report',
                                                @strHumanCaseID OUTPUT,
                                                NULL; --N'AS Session'
            END

            INSERT INTO dbo.tlbHumanCase
            (
                idfHumanCase,
                idfHuman,
                strCaseId,
                idfsFinalDiagnosis,
                datTentativeDiagnosisDate,
                datNotIFicationDate,
                idfsFinalState,
                strLocalIdentifier,
                idfSentByOffice,
                strSentByFirstName,
                strSentByPatronymicName,
                strSentByLastName,
                idfSentByPerson,
                idfReceivedByOffice,
                strReceivedByFirstName,
                strReceivedByPatronymicName,
                strReceivedByLastName,
                idfReceivedByPerson,
                idfsHospitalizationStatus,
                idfHospital,
                strCurrentLocation,
                datOnSetDate,
                idfsInitialCaseStatus,
                idfsYNPreviouslySoughtCare,
                datFirstSoughtCareDate,
                idfSoughtCareFacility,
                idfsNonNotIFiableDiagnosis,
                idfsYNHospitalization,
                datHospitalizationDate,
                datDischargeDate,
                strHospitalizationPlace,
                idfsYNAntimicrobialTherapy,
                strClinicalNotes,
                idfsYNSpecIFicVaccinationAdministered,
                idfInvestigatedByOffice,
                datInvestigationStartDate,
                idfsYNRelatedToOutbreak,
                idfOutbreak,
                idfPointGeoLocation,
                idfsYNExposureLocationKnown,
                datExposureDate,
                strNote,
                idfsFinalCaseStatus,
                idfsOutcome,
                intRowStatus,
                idfsCaseProgressStatus,
                datModificationDate,
                datEnteredDate,
                idfPersonEnteredBy,
                idfsYNSpecimenCollected,
                idfsYNTestsConducted,
                DiseaseReportTypeID,
                blnClinicalDiagBasis,
                blnLabDiagBasis,
                blnEpiDiagBasis,
                datFinalCaseClassificationDate,
                strsummarynotes,
                idfEpiObservation,
                idfCSObservation,
                idfInvestigatedByPerson,
                strEpidemiologistsName,
                idfsNotCollectedReason,
                strNotCollectedReason,
                idfsHumanAgeType,
                intPatientAge,
                datCompletionPaperFormDate,
                idfsSite,
                AuditCreateUser,
                idfParentMonitoringSession
            )
            VALUES
            (   @idfHumanCase,
                @idfHuman,
                @strHumanCaseId,
                @idfsFinalDiagnosis,
                @datDateOfDiagnosis,
                @datNotificationDate,
                @idfsFinalState,
                @strLocalIdentifier,
                @idfSentByOffice,
                @strSentByFirstName,
                @strSentByPatronymicName,
                @strSentByLastName,
                @idfSentByPerson,
                @idfReceivedByOffice,
                @strReceivedByFirstName,
                @strReceivedByPatronymicName,
                @strReceivedByLastName,
                @idfReceivedByPerson,
                @idfsHospitalizationStatus,
                @idfHospital,
                @strCurrentLocation,
                @datOnSetDate,
                @idfsInitialCaseStatus,
                @idfsYNPreviouslySoughtCare,
                @datFirstSoughtCareDate,
                @idfSoughtCareFacility,
                @idfsNonNotIFiableDiagnosis,
                @idfsYNHospitalization,
                @datHospitalizationDate,
                @datDischargeDate,
                @strHospitalName,
                @idfsYNAntimicrobialTherapy,
                @strClinicalNotes,
                @idfsYNSpecIFicVaccinationAdministered,
                @idfInvestigatedByOffice,
                @StartDateofInvestigation,
                @idfsYNRelatedToOutbreak,
                @idfOutbreak,
                @idfPointGeoLocation,
                @idfsYNExposureLocationKnown,
                @datExposureDate,
                @strNote,
                @idfsFinalCaseStatus,
                @idfsOutcome,
                0,
                @idfsCaseProgressStatus,
                GETDATE(), --datModificationDate	
                GETDATE(), --datEnteredDate		
                @idfPersonEnteredBy,
                @idfsYNSpecimenCollected,
                @idfsYNTestsConducted,
                @DiseaseReportTypeID,
                @blnClinicalDiagBasis,
                @blnLabDiagBasis,
                @blnEpiDiagBasis,
                @DateofClassification,
                @strSummaryNotes,
                @idfEpiObservation,
                @idfCSObservation,
                @idfInvestigatedByPerson,
                @strEpidemiologistsName,
                @idfsNotCollectedReason,
                @strNotCollectedReason,
                @idfsHumanAgeType,
                @intPatientAge,
                @datCompletionPaperFormDate,
                @idfsSite,
                @AuditUser,
                @idfParentMonitoringSession
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @idfHumanCase,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUser
            );

            -- Update data audit event ID on tlbObservation and tlbActivityParameters
            -- for flexible forms saved outside this DB transaction.
            UPDATE dbo.tauDataAuditDetailCreate
            SET idfDataAuditEvent = @DataAuditEventID
            WHERE idfObject = @idfCSObservation
                  AND idfDataAuditEvent IS NULL;

            UPDATE dbo.tauDataAuditDetailCreate
            SET idfDataAuditEvent = @DataAuditEventID
            WHERE idfObject = @idfEpiObservation
                  AND idfDataAuditEvent IS NULL;

            UPDATE dbo.tauDataAuditDetailCreate
            SET idfDataAuditEvent = @DataAuditEventID
            WHERE idfObjectDetail = @idfCSObservation
                  AND idfDataAuditEvent IS NULL;

            UPDATE dbo.tauDataAuditDetailCreate
            SET idfDataAuditEvent = @DataAuditEventID
            WHERE idfObjectDetail = @idfEpiObservation
                  AND idfDataAuditEvent IS NULL;
            -- End data audit

            DECLARE @RelatedToRoot BIGINT;

            IF @idfHumanCaseRelatedTo IS NOT NULL
            BEGIN
                -- Establish the root
                IF NOT EXISTS
                (
                    SELECT *
                    FROM dbo.HumanDiseaseReportRelationship
                    WHERE (HumanDiseaseReportID = @idfHumanCaseRelatedTo)
                          AND (RelatedToHumanDiseaseReportIdRoot IS NOT NULL)
                          AND (intRowStatus = 0)
                )
                BEGIN
                    SET @RelatedToRoot = @idfHumanCaseRelatedTo;
                END
                ELSE
                BEGIN
                    SELECT @RelatedToRoot = RelatedToHumanDiseaseReportIdRoot
                    FROM dbo.HumanDiseaseReportRelationship
                    WHERE (HumanDiseaseReportID = @idfHumanCaseRelatedTo)
                          AND (RelatedToHumanDiseaseReportIdRoot IS NOT NULL)
                          AND (intRowStatus = 0);
                END
                -- End establishing the root

                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'HumanDiseaseReportRelationship',
                                               @HumanDiseasereportRelnUID OUTPUT;

                INSERT INTO dbo.HumanDiseaseReportRelationship
                (
                    HumanDiseasereportRelnUID,
                    HumanDiseaseReportID,
                    RelateToHumanDiseaseReportID,
                    RelatedToHumanDiseaseReportIdRoot,
                    RelationshipTypeID,
                    intRowStatus,
                    AuditCreateUser,
                    AuditCreateDTM,
                    rowguid
                )
                VALUES
                (   @HumanDiseasereportRelnUID,
                    @idfHumanCase,
                    @idfHumanCaseRelatedTo,
                    @RelatedToRoot,
                    10503001, -- Linked Copy Parent
                    0,
                    @AuditUser,
                    GETDATE(),
                    NEWID()
                );
            END
        END
        ELSE
        BEGIN
            INSERT INTO @HumanDiseaseReportBeforeEdit
            (
                HumanDiseaseReportID,
                HumanID,
                FinalStateTypeID,
                HospitalizationStatusTypeID,
                HumanAgeTypeID,
                AntimicrobialTherapyTypeID,
                HospitalizationTypeID,
                SpecimenCollectedTypeID,
                RelatedToOutbreakTypeID,
                OutcomeID,
                TentativeDiagnosisID,
                FinalDiagnosisID,
                InitialCaseStatusTypeID,
                FinalCaseStatusTypeID,
                SentByOfficeID,
                ReceivedByOfficeID,
                InvestigatedByOfficeID,
                PointGeoLocationID,
                EpiObservationID,
                CSObservationID,
                DeduplicationResultCaseID,
                NotificationDate,
                CompletionPaperFormDate,
                FirstSoughtCareDate,
                ModificationDate,
                HospitalizationDate,
                FacilityLastVisitDate,
                ExposureDate,
                DischargeDate,
                OnSetDate,
                InvestigationStartDate,
                TentativeDiagnosisDate,
                FinalDiagnosisDate,
                Note,
                CurrentLocation,
                HospitalizationPlace,
                LocalIdentifier,
                SoughtCareFacility,
                SentByFirstName,
                SentByPatronymicName,
                SentByLastName,
                ReceivedByFirstName,
                ReceivedByPatronymicName,
                ReceivedByLastName,
                EpidemiologistsName,
                NotCollectedReason,
                ClinicalDiagnosis,
                ClinicalNotes,
                SummaryNotes,
                PatientAge,
                ClinicalDiagBasisIndicator,
                LabDiagBasisIndicator,
                EpiDiagBasisIndicator,
                PersonEnteredByID,
                SentByPersonID,
                ReceivedByPersonID,
                InvestigatedByPersonID,
                TestsConductedTypeID,
                SoughtCareFacilityID,
                NonNotifiableDiagnosisID,
                NotCollectedReasonTypeID,
                OutbreakID,
                EnteredDate,
                CaseID,
                CaseProgressStatusTypeID,
                SampleNotes,
                OfflineCaseID,
                FinalCaseClassificationDate,
                HospitalID,
                RowStatus
            )
            SELECT idfHumanCase,
                   idfHuman,
                   idfsFinalState,
                   idfsHospitalizationStatus,
                   idfsHumanAgeType,
                   idfsYNAntimicrobialTherapy,
                   idfsYNHospitalization,
                   idfsYNSpecimenCollected,
                   idfsYNRelatedToOutbreak,
                   idfsOutcome,
                   idfsTentativeDiagnosis,
                   idfsFinalDiagnosis,
                   idfsInitialCaseStatus,
                   idfsFinalCaseStatus,
                   idfSentByOffice,
                   idfReceivedByOffice,
                   idfInvestigatedByOffice,
                   idfPointGeoLocation,
                   idfEpiObservation,
                   idfCSObservation,
                   idfDeduplicationResultCase,
                   datNotificationDate,
                   datCompletionPaperFormDate,
                   datFirstSoughtCareDate,
                   datModificationDate,
                   datHospitalizationDate,
                   datFacilityLastVisit,
                   datExposureDate,
                   datDischargeDate,
                   datOnSetDate,
                   datInvestigationStartDate,
                   datTentativeDiagnosisDate,
                   datFinalDiagnosisDate,
                   strNote,
                   strCurrentLocation,
                   strHospitalizationPlace,
                   strLocalIdentifier,
                   strSoughtCareFacility,
                   strSentByFirstName,
                   strSentByPatronymicName,
                   strSentByLastName,
                   strReceivedByFirstName,
                   strReceivedByPatronymicName,
                   strReceivedByLastName,
                   strEpidemiologistsName,
                   strNotCollectedReason,
                   strClinicalDiagnosis,
                   strClinicalNotes,
                   strSummaryNotes,
                   intPatientAge,
                   blnClinicalDiagBasis,
                   blnLabDiagBasis,
                   blnEpiDiagBasis,
                   idfPersonEnteredBy,
                   idfSentByPerson,
                   idfReceivedByPerson,
                   idfInvestigatedByPerson,
                   idfsYNTestsConducted,
                   idfSoughtCareFacility,
                   idfsNonNotifiableDiagnosis,
                   idfsNotCollectedReason,
                   idfOutbreak,
                   datEnteredDate,
                   strCaseID,
                   idfsCaseProgressStatus,
                   strSampleNotes,
                   uidOfflineCaseID,
                   datFinalCaseClassificationDate,
                   idfHospital,
                   intRowStatus
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase;

            UPDATE dbo.tlbHumanCase
            SET strCaseId = @strHumanCaseId,
                idfsTentativeDiagnosis = @idfsFinalDiagnosis,
                idfsFinalDiagnosis = @idfsFinalDiagnosis,
                datTentativeDiagnosisDate = @datDateOfDiagnosis,
                datFinalDiagnosisDate = @datDateOfDiagnosis,
                datNotIFicationDate = @datNotificationDate,
                idfsFinalState = @idfsFinalState,
                idfSentByOffice = @idfSentByOffice,
                strSentByFirstName = @strSentByFirstName,
                strSentByPatronymicName = @strSentByPatronymicName,
                strSentByLastName = @strSentByLastName,
                idfSentByPerson = @idfSentByPerson,
                idfReceivedByOffice = @idfReceivedByOffice,
                strReceivedByFirstName = @strReceivedByFirstName,
                strReceivedByPatronymicName = @strReceivedByPatronymicName,
                strReceivedByLastName = @strReceivedByLastName,
                idfReceivedByPerson = @idfReceivedByPerson,
                strLocalIdentifier = @strLocalIdentifier,
                idfsHospitalizationStatus = @idfsHospitalizationStatus,
                idfHospital = @idfHospital,
                strCurrentLocation = @strCurrentLocation,
                datOnSetDate = @datOnSetDate,
                idfsInitialCaseStatus = @idfsInitialCaseStatus,
                idfsYNPreviouslySoughtCare = @idfsYNPreviouslySoughtCare,
                datFirstSoughtCareDate = @datFirstSoughtCareDate,
                idfSoughtCareFacility = @idfSoughtCareFacility,
                idfsNonNotIFiableDiagnosis = @idfsNonNotIFiableDiagnosis,
                idfsYNHospitalization = @idfsYNHospitalization,
                datHospitalizationDate = @datHospitalizationDate,
                datDischargeDate = @datDischargeDate,
                strHospitalizationPlace = @strHospitalName,
                idfsYNAntimicrobialTherapy = @idfsYNAntimicrobialTherapy,
                strClinicalNotes = @strClinicalNotes,
                idfsYNSpecIFicVaccinationAdministered = @idfsYNSpecIFicVaccinationAdministered,
                idfInvestigatedByOffice = @idfInvestigatedByOffice,
                datInvestigationStartDate = @StartDateofInvestigation,
                idfsYNRelatedToOutbreak = @idfsYNRelatedToOutbreak,
                idfOutbreak = @idfOutbreak,
                idfsYNExposureLocationKnown = @idfsYNExposureLocationKnown,
                idfPointGeoLocation = @idfPointGeoLocation,
                datExposureDate = @datExposureDate,
                strNote = @strNote,
                idfsFinalCaseStatus = @idfsFinalCaseStatus,
                idfsOutcome = @idfsOutcome,
                idfsCaseProgressStatus = @idfsCaseProgressStatus,
                datModificationDate = GETDATE(),
                idfsYNSpecimenCollected = @idfsYNSpecimenCollected,
                idfsYNTestsConducted = @idfsYNTestsConducted,
                DiseaseReportTypeID = @DiseaseReportTypeID,
                blnClinicalDiagBasis = @blnClinicalDiagBasis,
                blnLabDiagBasis = @blnLabDiagBasis,
                blnEpiDiagBasis = @blnEpiDiagBasis,
                datFinalCaseClassificationDate = @DateofClassification,
                strsummarynotes = @strSummaryNotes,
                idfEpiObservation = @idfEpiObservation,
                idfCSObservation = @idfCSObservation,
                strEpidemiologistsName = @strEpidemiologistsName,
                idfsNotCollectedReason = @idfsNotCollectedReason,
                strNotCollectedReason = @strNotCollectedReason,
                idfsHumanAgeType = @idfsHumanAgeType,
                intPatientAge = @intPatientAge,
                datCompletionPaperFormDate = @datCompletionPaperFormDate,
                idfInvestigatedByPerson = @idfInvestigatedByPerson,
                idfPersonEnteredBy = @idfPersonEnteredBy,
                idfsSite = @idfsSite,
                AuditUpdateUser = @AuditUser,
                idfParentMonitoringSession = @idfParentMonitoringSession
            WHERE idfHumanCase = @idfHumanCase
                  AND intRowStatus = 0;

            INSERT INTO @HumanDiseaseReportAfterEdit
            (
                HumanDiseaseReportID,
                HumanID,
                FinalStateTypeID,
                HospitalizationStatusTypeID,
                HumanAgeTypeID,
                AntimicrobialTherapyTypeID,
                HospitalizationTypeID,
                SpecimenCollectedTypeID,
                RelatedToOutbreakTypeID,
                OutcomeID,
                TentativeDiagnosisID,
                FinalDiagnosisID,
                InitialCaseStatusTypeID,
                FinalCaseStatusTypeID,
                SentByOfficeID,
                ReceivedByOfficeID,
                InvestigatedByOfficeID,
                PointGeoLocationID,
                EpiObservationID,
                CSObservationID,
                DeduplicationResultCaseID,
                NotificationDate,
                CompletionPaperFormDate,
                FirstSoughtCareDate,
                ModificationDate,
                HospitalizationDate,
                FacilityLastVisitDate,
                ExposureDate,
                DischargeDate,
                OnSetDate,
                InvestigationStartDate,
                TentativeDiagnosisDate,
                FinalDiagnosisDate,
                Note,
                CurrentLocation,
                HospitalizationPlace,
                LocalIdentifier,
                SoughtCareFacility,
                SentByFirstName,
                SentByPatronymicName,
                SentByLastName,
                ReceivedByFirstName,
                ReceivedByPatronymicName,
                ReceivedByLastName,
                EpidemiologistsName,
                NotCollectedReason,
                ClinicalDiagnosis,
                ClinicalNotes,
                SummaryNotes,
                PatientAge,
                ClinicalDiagBasisIndicator,
                LabDiagBasisIndicator,
                EpiDiagBasisIndicator,
                PersonEnteredByID,
                SentByPersonID,
                ReceivedByPersonID,
                InvestigatedByPersonID,
                TestsConductedTypeID,
                SoughtCareFacilityID,
                NonNotifiableDiagnosisID,
                NotCollectedReasonTypeID,
                OutbreakID,
                EnteredDate,
                CaseID,
                CaseProgressStatusTypeID,
                SampleNotes,
                OfflineCaseID,
                FinalCaseClassificationDate,
                HospitalID,
                RowStatus
            )
            SELECT idfHumanCase,
                   idfHuman,
                   idfsFinalState,
                   idfsHospitalizationStatus,
                   idfsHumanAgeType,
                   idfsYNAntimicrobialTherapy,
                   idfsYNHospitalization,
                   idfsYNSpecimenCollected,
                   idfsYNRelatedToOutbreak,
                   idfsOutcome,
                   idfsTentativeDiagnosis,
                   idfsFinalDiagnosis,
                   idfsInitialCaseStatus,
                   idfsFinalCaseStatus,
                   idfSentByOffice,
                   idfReceivedByOffice,
                   idfInvestigatedByOffice,
                   idfPointGeoLocation,
                   idfEpiObservation,
                   idfCSObservation,
                   idfDeduplicationResultCase,
                   datNotificationDate,
                   datCompletionPaperFormDate,
                   datFirstSoughtCareDate,
                   datModificationDate,
                   datHospitalizationDate,
                   datFacilityLastVisit,
                   datExposureDate,
                   datDischargeDate,
                   datOnSetDate,
                   datInvestigationStartDate,
                   datTentativeDiagnosisDate,
                   datFinalDiagnosisDate,
                   strNote,
                   strCurrentLocation,
                   strHospitalizationPlace,
                   strLocalIdentifier,
                   strSoughtCareFacility,
                   strSentByFirstName,
                   strSentByPatronymicName,
                   strSentByLastName,
                   strReceivedByFirstName,
                   strReceivedByPatronymicName,
                   strReceivedByLastName,
                   strEpidemiologistsName,
                   strNotCollectedReason,
                   strClinicalDiagnosis,
                   strClinicalNotes,
                   strSummaryNotes,
                   intPatientAge,
                   blnClinicalDiagBasis,
                   blnLabDiagBasis,
                   blnEpiDiagBasis,
                   idfPersonEnteredBy,
                   idfSentByPerson,
                   idfReceivedByPerson,
                   idfInvestigatedByPerson,
                   idfsYNTestsConducted,
                   idfSoughtCareFacility,
                   idfsNonNotifiableDiagnosis,
                   idfsNotCollectedReason,
                   idfOutbreak,
                   datEnteredDate,
                   strCaseID,
                   idfsCaseProgressStatus,
                   strSampleNotes,
                   uidOfflineCaseID,
                   datFinalCaseClassificationDate,
                   idfHospital,
                   intRowStatus
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase;

            -- Data audit 
            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   4577900000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.HumanID,
                   a.HumanID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.HumanID <> b.HumanID)
                  OR (
                         a.HumanID IS NOT NULL
                         AND b.HumanID IS NULL
                     )
                  OR (
                         a.HumanID IS NULL
                         AND b.HumanID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79670000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.FinalStateTypeID,
                   a.FinalStateTypeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.FinalStateTypeID <> b.FinalStateTypeID)
                  OR (
                         a.FinalStateTypeID IS NOT NULL
                         AND b.FinalStateTypeID IS NULL
                     )
                  OR (
                         a.FinalStateTypeID IS NULL
                         AND b.FinalStateTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79680000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.HospitalizationStatusTypeID,
                   a.HospitalizationStatusTypeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.HospitalizationStatusTypeID <> b.HospitalizationStatusTypeID)
                  OR (
                         a.HospitalizationStatusTypeID IS NOT NULL
                         AND b.HospitalizationStatusTypeID IS NULL
                     )
                  OR (
                         a.HospitalizationStatusTypeID IS NULL
                         AND b.HospitalizationStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79690000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.HumanAgeTypeID,
                   a.HumanAgeTypeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.HumanAgeTypeID <> b.HumanAgeTypeID)
                  OR (
                         a.HumanAgeTypeID IS NOT NULL
                         AND b.HumanAgeTypeID IS NULL
                     )
                  OR (
                         a.HumanAgeTypeID IS NULL
                         AND b.HumanAgeTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79730000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.AntimicrobialTherapyTypeID,
                   a.AntimicrobialTherapyTypeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.AntimicrobialTherapyTypeID <> b.AntimicrobialTherapyTypeID)
                  OR (
                         a.AntimicrobialTherapyTypeID IS NOT NULL
                         AND b.AntimicrobialTherapyTypeID IS NULL
                     )
                  OR (
                         a.AntimicrobialTherapyTypeID IS NULL
                         AND b.AntimicrobialTherapyTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79740000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.HospitalizationTypeID,
                   a.HospitalizationTypeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.HospitalizationTypeID <> b.HospitalizationTypeID)
                  OR (
                         a.HospitalizationTypeID IS NOT NULL
                         AND b.HospitalizationTypeID IS NULL
                     )
                  OR (
                         a.HospitalizationTypeID IS NULL
                         AND b.HospitalizationTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79760000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SpecimenCollectedTypeID,
                   a.SpecimenCollectedTypeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SpecimenCollectedTypeID <> b.SpecimenCollectedTypeID)
                  OR (
                         a.SpecimenCollectedTypeID IS NOT NULL
                         AND b.SpecimenCollectedTypeID IS NULL
                     )
                  OR (
                         a.SpecimenCollectedTypeID IS NULL
                         AND b.SpecimenCollectedTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79750000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.RelatedToOutbreakTypeID,
                   a.RelatedToOutbreakTypeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.RelatedToOutbreakTypeID <> b.RelatedToOutbreakTypeID)
                  OR (
                         a.RelatedToOutbreakTypeID IS NOT NULL
                         AND b.RelatedToOutbreakTypeID IS NULL
                     )
                  OR (
                         a.RelatedToOutbreakTypeID IS NULL
                         AND b.RelatedToOutbreakTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79710000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.OutcomeID,
                   a.OutcomeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.OutcomeID <> b.OutcomeID)
                  OR (
                         a.OutcomeID IS NOT NULL
                         AND b.OutcomeID IS NULL
                     )
                  OR (
                         a.OutcomeID IS NULL
                         AND b.OutcomeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79720000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.TentativeDiagnosisID,
                   a.TentativeDiagnosisID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.TentativeDiagnosisID <> b.TentativeDiagnosisID)
                  OR (
                         a.TentativeDiagnosisID IS NOT NULL
                         AND b.TentativeDiagnosisID IS NULL
                     )
                  OR (
                         a.TentativeDiagnosisID IS NULL
                         AND b.TentativeDiagnosisID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79660000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.FinalDiagnosisID,
                   a.FinalDiagnosisID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.FinalDiagnosisID <> b.FinalDiagnosisID)
                  OR (
                         a.FinalDiagnosisID IS NOT NULL
                         AND b.FinalDiagnosisID IS NULL
                     )
                  OR (
                         a.FinalDiagnosisID IS NULL
                         AND b.FinalDiagnosisID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79700000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.InitialCaseStatusTypeID,
                   a.InitialCaseStatusTypeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.InitialCaseStatusTypeID <> b.InitialCaseStatusTypeID)
                  OR (
                         a.InitialCaseStatusTypeID IS NOT NULL
                         AND b.InitialCaseStatusTypeID IS NULL
                     )
                  OR (
                         a.InitialCaseStatusTypeID IS NULL
                         AND b.InitialCaseStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855690000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.FinalCaseStatusTypeID,
                   a.FinalCaseStatusTypeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.FinalCaseStatusTypeID <> b.FinalCaseStatusTypeID)
                  OR (
                         a.FinalCaseStatusTypeID IS NOT NULL
                         AND b.FinalCaseStatusTypeID IS NULL
                     )
                  OR (
                         a.FinalCaseStatusTypeID IS NULL
                         AND b.FinalCaseStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855700000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SentByOfficeID,
                   a.SentByOfficeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SentByOfficeID <> b.SentByOfficeID)
                  OR (
                         a.SentByOfficeID IS NOT NULL
                         AND b.SentByOfficeID IS NULL
                     )
                  OR (
                         a.SentByOfficeID IS NULL
                         AND b.SentByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79640000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ReceivedByOfficeID,
                   a.ReceivedByOfficeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ReceivedByOfficeID <> b.ReceivedByOfficeID)
                  OR (
                         a.ReceivedByOfficeID IS NOT NULL
                         AND b.ReceivedByOfficeID IS NULL
                     )
                  OR (
                         a.ReceivedByOfficeID IS NULL
                         AND b.ReceivedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79620000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.InvestigatedByOfficeID,
                   a.InvestigatedByOfficeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.InvestigatedByOfficeID <> b.InvestigatedByOfficeID)
                  OR (
                         a.InvestigatedByOfficeID IS NOT NULL
                         AND b.InvestigatedByOfficeID IS NULL
                     )
                  OR (
                         a.InvestigatedByOfficeID IS NULL
                         AND b.InvestigatedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79630000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.PointGeoLocationID,
                   a.PointGeoLocationID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.PointGeoLocationID <> b.PointGeoLocationID)
                  OR (
                         a.PointGeoLocationID IS NOT NULL
                         AND b.PointGeoLocationID IS NULL
                     )
                  OR (
                         a.PointGeoLocationID IS NULL
                         AND b.PointGeoLocationID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855710000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.EpiObservationID,
                   a.EpiObservationID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.EpiObservationID <> b.EpiObservationID)
                  OR (
                         a.EpiObservationID IS NOT NULL
                         AND b.EpiObservationID IS NULL
                     )
                  OR (
                         a.EpiObservationID IS NULL
                         AND b.EpiObservationID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855720000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.CSObservationID,
                   a.CSObservationID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.CSObservationID <> b.CSObservationID)
                  OR (
                         a.CSObservationID IS NOT NULL
                         AND b.CSObservationID IS NULL
                     )
                  OR (
                         a.CSObservationID IS NULL
                         AND b.CSObservationID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855730000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.DeduplicationResultCaseID,
                   a.DeduplicationResultCaseID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.DeduplicationResultCaseID <> b.DeduplicationResultCaseID)
                  OR (
                         a.DeduplicationResultCaseID IS NOT NULL
                         AND b.DeduplicationResultCaseID IS NULL
                     )
                  OR (
                         a.DeduplicationResultCaseID IS NULL
                         AND b.DeduplicationResultCaseID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855740000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.NotificationDate,
                   a.NotificationDate,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.NotificationDate <> b.NotificationDate)
                  OR (
                         a.NotificationDate IS NOT NULL
                         AND b.NotificationDate IS NULL
                     )
                  OR (
                         a.NotificationDate IS NULL
                         AND b.NotificationDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79520000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.CompletionPaperFormDate,
                   a.CompletionPaperFormDate,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.CompletionPaperFormDate <> b.CompletionPaperFormDate)
                  OR (
                         a.CompletionPaperFormDate IS NOT NULL
                         AND b.CompletionPaperFormDate IS NULL
                     )
                  OR (
                         a.CompletionPaperFormDate IS NULL
                         AND b.CompletionPaperFormDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855750000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.FirstSoughtCareDate,
                   a.FirstSoughtCareDate,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.FirstSoughtCareDate <> b.FirstSoughtCareDate)
                  OR (
                         a.FirstSoughtCareDate IS NOT NULL
                         AND b.FirstSoughtCareDate IS NULL
                     )
                  OR (
                         a.FirstSoughtCareDate IS NULL
                         AND b.FirstSoughtCareDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79590000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ModificationDate,
                   a.ModificationDate,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ModificationDate <> b.ModificationDate)
                  OR (
                         a.ModificationDate IS NOT NULL
                         AND b.ModificationDate IS NULL
                     )
                  OR (
                         a.ModificationDate IS NULL
                         AND b.ModificationDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79570000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.HospitalizationDate,
                   a.HospitalizationDate,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.HospitalizationDate <> b.HospitalizationDate)
                  OR (
                         a.HospitalizationDate IS NOT NULL
                         AND b.HospitalizationDate IS NULL
                     )
                  OR (
                         a.HospitalizationDate IS NULL
                         AND b.HospitalizationDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79550000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.FacilityLastVisitDate,
                   a.FacilityLastVisitDate,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.FacilityLastVisitDate <> b.FacilityLastVisitDate)
                  OR (
                         a.FacilityLastVisitDate IS NOT NULL
                         AND b.FacilityLastVisitDate IS NULL
                     )
                  OR (
                         a.FacilityLastVisitDate IS NULL
                         AND b.FacilityLastVisitDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79540000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ExposureDate,
                   a.ExposureDate,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ExposureDate <> b.ExposureDate)
                  OR (
                         a.ExposureDate IS NOT NULL
                         AND b.ExposureDate IS NULL
                     )
                  OR (
                         a.ExposureDate IS NULL
                         AND b.ExposureDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79530000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.DischargeDate,
                   a.DischargeDate,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.DischargeDate <> b.DischargeDate)
                  OR (
                         a.DischargeDate IS NOT NULL
                         AND b.DischargeDate IS NULL
                     )
                  OR (
                         a.DischargeDate IS NULL
                         AND b.DischargeDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855760000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.OnSetDate,
                   a.OnSetDate,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.OnSetDate <> b.OnSetDate)
                  OR (
                         a.OnSetDate IS NOT NULL
                         AND b.OnSetDate IS NULL
                     )
                  OR (
                         a.OnSetDate IS NULL
                         AND b.OnSetDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79580000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.InvestigationStartDate,
                   a.InvestigationStartDate,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.InvestigationStartDate <> b.InvestigationStartDate)
                  OR (
                         a.InvestigationStartDate IS NOT NULL
                         AND b.InvestigationStartDate IS NULL
                     )
                  OR (
                         a.InvestigationStartDate IS NULL
                         AND b.InvestigationStartDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79600000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.TentativeDiagnosisDate,
                   a.TentativeDiagnosisDate,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.TentativeDiagnosisDate <> b.TentativeDiagnosisDate)
                  OR (
                         a.TentativeDiagnosisDate IS NOT NULL
                         AND b.TentativeDiagnosisDate IS NULL
                     )
                  OR (
                         a.TentativeDiagnosisDate IS NULL
                         AND b.TentativeDiagnosisDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79560000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.FinalDiagnosisDate,
                   a.FinalDiagnosisDate,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.FinalDiagnosisDate <> b.FinalDiagnosisDate)
                  OR (
                         a.FinalDiagnosisDate IS NOT NULL
                         AND b.FinalDiagnosisDate IS NULL
                     )
                  OR (
                         a.FinalDiagnosisDate IS NULL
                         AND b.FinalDiagnosisDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79840000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.Note,
                   a.Note,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.Note <> b.Note)
                  OR (
                         a.Note IS NOT NULL
                         AND b.Note IS NULL
                     )
                  OR (
                         a.Note IS NULL
                         AND b.Note IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79790000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.CurrentLocation,
                   a.CurrentLocation,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.CurrentLocation <> b.CurrentLocation)
                  OR (
                         a.CurrentLocation IS NOT NULL
                         AND b.CurrentLocation IS NULL
                     )
                  OR (
                         a.CurrentLocation IS NULL
                         AND b.CurrentLocation IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79810000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.HospitalizationPlace,
                   a.HospitalizationPlace,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.HospitalizationPlace <> b.HospitalizationPlace)
                  OR (
                         a.HospitalizationPlace IS NOT NULL
                         AND b.HospitalizationPlace IS NULL
                     )
                  OR (
                         a.HospitalizationPlace IS NULL
                         AND b.HospitalizationPlace IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79820000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.LocalIdentifier,
                   a.LocalIdentifier,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.LocalIdentifier <> b.LocalIdentifier)
                  OR (
                         a.LocalIdentifier IS NOT NULL
                         AND b.LocalIdentifier IS NULL
                     )
                  OR (
                         a.LocalIdentifier IS NULL
                         AND b.LocalIdentifier IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79910000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SoughtCareFacility,
                   a.SoughtCareFacility,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SoughtCareFacility <> b.SoughtCareFacility)
                  OR (
                         a.SoughtCareFacility IS NOT NULL
                         AND b.SoughtCareFacility IS NULL
                     )
                  OR (
                         a.SoughtCareFacility IS NULL
                         AND b.SoughtCareFacility IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79880000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SentByFirstName,
                   a.SentByFirstName,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SentByFirstName <> b.SentByFirstName)
                  OR (
                         a.SentByFirstName IS NOT NULL
                         AND b.SentByFirstName IS NULL
                     )
                  OR (
                         a.SentByFirstName IS NULL
                         AND b.SentByFirstName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79900000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SentByPatronymicName,
                   a.SentByPatronymicName,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SentByPatronymicName <> b.SentByPatronymicName)
                  OR (
                         a.SentByPatronymicName IS NOT NULL
                         AND b.SentByPatronymicName IS NULL
                     )
                  OR (
                         a.SentByPatronymicName IS NULL
                         AND b.SentByPatronymicName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79890000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SentByLastName,
                   a.SentByLastName,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SentByLastName <> b.SentByLastName)
                  OR (
                         a.SentByLastName IS NOT NULL
                         AND b.SentByLastName IS NULL
                     )
                  OR (
                         a.SentByLastName IS NULL
                         AND b.SentByLastName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79850000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ReceivedByFirstName,
                   a.ReceivedByFirstName,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ReceivedByFirstName <> b.ReceivedByFirstName)
                  OR (
                         a.ReceivedByFirstName IS NOT NULL
                         AND b.ReceivedByFirstName IS NULL
                     )
                  OR (
                         a.ReceivedByFirstName IS NULL
                         AND b.ReceivedByFirstName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79870000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ReceivedByPatronymicName,
                   a.ReceivedByPatronymicName,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ReceivedByPatronymicName <> b.ReceivedByPatronymicName)
                  OR (
                         a.ReceivedByPatronymicName IS NOT NULL
                         AND b.ReceivedByPatronymicName IS NULL
                     )
                  OR (
                         a.ReceivedByPatronymicName IS NULL
                         AND b.ReceivedByPatronymicName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79860000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ReceivedByLastName,
                   a.ReceivedByLastName,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ReceivedByLastName <> b.ReceivedByLastName)
                  OR (
                         a.ReceivedByLastName IS NOT NULL
                         AND b.ReceivedByLastName IS NULL
                     )
                  OR (
                         a.ReceivedByLastName IS NULL
                         AND b.ReceivedByLastName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79800000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.EpidemiologistsName,
                   a.EpidemiologistsName,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.EpidemiologistsName <> b.EpidemiologistsName)
                  OR (
                         a.EpidemiologistsName IS NOT NULL
                         AND b.EpidemiologistsName IS NULL
                     )
                  OR (
                         a.EpidemiologistsName IS NULL
                         AND b.EpidemiologistsName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79830000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.NotCollectedReason,
                   a.NotCollectedReason,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.NotCollectedReason <> b.NotCollectedReason)
                  OR (
                         a.NotCollectedReason IS NOT NULL
                         AND b.NotCollectedReason IS NULL
                     )
                  OR (
                         a.NotCollectedReason IS NULL
                         AND b.NotCollectedReason IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79780000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ClinicalDiagnosis,
                   a.ClinicalDiagnosis,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ClinicalDiagnosis <> b.ClinicalDiagnosis)
                  OR (
                         a.ClinicalDiagnosis IS NOT NULL
                         AND b.ClinicalDiagnosis IS NULL
                     )
                  OR (
                         a.ClinicalDiagnosis IS NULL
                         AND b.ClinicalDiagnosis IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855770000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ClinicalNotes,
                   a.ClinicalNotes,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ClinicalNotes <> b.ClinicalNotes)
                  OR (
                         a.ClinicalNotes IS NOT NULL
                         AND b.ClinicalNotes IS NULL
                     )
                  OR (
                         a.ClinicalNotes IS NULL
                         AND b.ClinicalNotes IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855780000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SummaryNotes,
                   a.SummaryNotes,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SummaryNotes <> b.SummaryNotes)
                  OR (
                         a.SummaryNotes IS NOT NULL
                         AND b.SummaryNotes IS NULL
                     )
                  OR (
                         a.SummaryNotes IS NULL
                         AND b.SummaryNotes IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79770000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.PatientAge,
                   a.PatientAge,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.PatientAge <> b.PatientAge)
                  OR (
                         a.PatientAge IS NOT NULL
                         AND b.PatientAge IS NULL
                     )
                  OR (
                         a.PatientAge IS NULL
                         AND b.PatientAge IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79490000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ClinicalDiagBasisIndicator,
                   a.ClinicalDiagBasisIndicator,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ClinicalDiagBasisIndicator <> b.ClinicalDiagBasisIndicator)
                  OR (
                         a.ClinicalDiagBasisIndicator IS NOT NULL
                         AND b.ClinicalDiagBasisIndicator IS NULL
                     )
                  OR (
                         a.ClinicalDiagBasisIndicator IS NULL
                         AND b.ClinicalDiagBasisIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79510000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.LabDiagBasisIndicator,
                   a.LabDiagBasisIndicator,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.LabDiagBasisIndicator <> b.LabDiagBasisIndicator)
                  OR (
                         a.LabDiagBasisIndicator IS NOT NULL
                         AND b.LabDiagBasisIndicator IS NULL
                     )
                  OR (
                         a.LabDiagBasisIndicator IS NULL
                         AND b.LabDiagBasisIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79500000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.EpiDiagBasisIndicator,
                   a.EpiDiagBasisIndicator,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.EpiDiagBasisIndicator <> b.EpiDiagBasisIndicator)
                  OR (
                         a.EpiDiagBasisIndicator IS NOT NULL
                         AND b.EpiDiagBasisIndicator IS NULL
                     )
                  OR (
                         a.EpiDiagBasisIndicator IS NULL
                         AND b.EpiDiagBasisIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   4577910000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.PersonEnteredByID,
                   a.PersonEnteredByID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.PersonEnteredByID <> b.PersonEnteredByID)
                  OR (
                         a.PersonEnteredByID IS NOT NULL
                         AND b.PersonEnteredByID IS NULL
                     )
                  OR (
                         a.PersonEnteredByID IS NULL
                         AND b.PersonEnteredByID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   4578390000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SentByPersonID,
                   a.SentByPersonID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SentByPersonID <> b.SentByPersonID)
                  OR (
                         a.SentByPersonID IS NOT NULL
                         AND b.SentByPersonID IS NULL
                     )
                  OR (
                         a.SentByPersonID IS NULL
                         AND b.SentByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   4578400000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ReceivedByPersonID,
                   a.ReceivedByPersonID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ReceivedByPersonID <> b.ReceivedByPersonID)
                  OR (
                         a.ReceivedByPersonID IS NOT NULL
                         AND b.ReceivedByPersonID IS NULL
                     )
                  OR (
                         a.ReceivedByPersonID IS NULL
                         AND b.ReceivedByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   4578410000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.InvestigatedByPersonID,
                   a.InvestigatedByPersonID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.InvestigatedByPersonID <> b.InvestigatedByPersonID)
                  OR (
                         a.InvestigatedByPersonID IS NOT NULL
                         AND b.InvestigatedByPersonID IS NULL
                     )
                  OR (
                         a.InvestigatedByPersonID IS NULL
                         AND b.InvestigatedByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   4578420000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.TestsConductedTypeID,
                   a.TestsConductedTypeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.TestsConductedTypeID <> b.TestsConductedTypeID)
                  OR (
                         a.TestsConductedTypeID IS NOT NULL
                         AND b.TestsConductedTypeID IS NULL
                     )
                  OR (
                         a.TestsConductedTypeID IS NULL
                         AND b.TestsConductedTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12014650000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SoughtCareFacilityID,
                   a.SoughtCareFacilityID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SoughtCareFacilityID <> b.SoughtCareFacilityID)
                  OR (
                         a.SoughtCareFacilityID IS NOT NULL
                         AND b.SoughtCareFacilityID IS NULL
                     )
                  OR (
                         a.SoughtCareFacilityID IS NULL
                         AND b.SoughtCareFacilityID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12014660000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.NonNotifiableDiagnosisID,
                   a.NonNotifiableDiagnosisID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.NonNotifiableDiagnosisID <> b.NonNotifiableDiagnosisID)
                  OR (
                         a.NonNotifiableDiagnosisID IS NOT NULL
                         AND b.NonNotifiableDiagnosisID IS NULL
                     )
                  OR (
                         a.NonNotifiableDiagnosisID IS NULL
                         AND b.NonNotifiableDiagnosisID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12014670000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.NotCollectedReasonTypeID,
                   a.NotCollectedReasonTypeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.NotCollectedReasonTypeID <> b.NotCollectedReasonTypeID)
                  OR (
                         a.NotCollectedReasonTypeID IS NOT NULL
                         AND b.NotCollectedReasonTypeID IS NULL
                     )
                  OR (
                         a.NotCollectedReasonTypeID IS NULL
                         AND b.NotCollectedReasonTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12665410000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.OutbreakID,
                   a.OutbreakID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.OutbreakID <> b.OutbreakID)
                  OR (
                         a.OutbreakID IS NOT NULL
                         AND b.OutbreakID IS NULL
                     )
                  OR (
                         a.OutbreakID IS NULL
                         AND b.OutbreakID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12665420000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.EnteredDate,
                   a.EnteredDate,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.EnteredDate <> b.EnteredDate)
                  OR (
                         a.EnteredDate IS NOT NULL
                         AND b.EnteredDate IS NULL
                     )
                  OR (
                         a.EnteredDate IS NULL
                         AND b.EnteredDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12665430000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.CaseID,
                   a.CaseID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.CaseID <> b.CaseID)
                  OR (
                         a.CaseID IS NOT NULL
                         AND b.CaseID IS NULL
                     )
                  OR (
                         a.CaseID IS NULL
                         AND b.CaseID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12665440000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.CaseProgressStatusTypeID,
                   a.CaseProgressStatusTypeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.CaseProgressStatusTypeID <> b.CaseProgressStatusTypeID)
                  OR (
                         a.CaseProgressStatusTypeID IS NOT NULL
                         AND b.CaseProgressStatusTypeID IS NULL
                     )
                  OR (
                         a.CaseProgressStatusTypeID IS NULL
                         AND b.CaseProgressStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12665450000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SampleNotes,
                   a.SampleNotes,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SampleNotes <> b.SampleNotes)
                  OR (
                         a.SampleNotes IS NOT NULL
                         AND b.SampleNotes IS NULL
                     )
                  OR (
                         a.SampleNotes IS NULL
                         AND b.SampleNotes IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12665460000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.OfflineCaseID,
                   a.OfflineCaseID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.OfflineCaseID <> b.OfflineCaseID)
                  OR (
                         a.OfflineCaseID IS NOT NULL
                         AND b.OfflineCaseID IS NULL
                     )
                  OR (
                         a.OfflineCaseID IS NULL
                         AND b.OfflineCaseID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   51389570000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.FinalCaseClassificationDate,
                   a.FinalCaseClassificationDate,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.FinalCaseClassificationDate <> b.FinalCaseClassificationDate)
                  OR (
                         a.FinalCaseClassificationDate IS NOT NULL
                         AND b.FinalCaseClassificationDate IS NULL
                     )
                  OR (
                         a.FinalCaseClassificationDate IS NULL
                         AND b.FinalCaseClassificationDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   51523420000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.HospitalID,
                   a.HospitalID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.HospitalID <> b.HospitalID)
                  OR (
                         a.HospitalID IS NOT NULL
                         AND b.HospitalID IS NULL
                     )
                  OR (
                         a.HospitalID IS NULL
                         AND b.HospitalID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailRestore
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                idfObjectDetail,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   a.HumanDiseaseReportID,
                   NULL,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE a.RowStatus = 0
                  AND b.RowStatus = 1;

            -- Update data audit event ID on tlbObservation and tlbActivityParameters
            -- for flexible forms saved outside this DB transaction.
            UPDATE dbo.tauDataAuditDetailUpdate
            SET idfDataAuditEvent = @DataAuditEventID
            WHERE idfObject = @idfCSObservation
                  AND idfDataAuditEvent IS NULL;

            UPDATE dbo.tauDataAuditDetailUpdate
            SET idfDataAuditEvent = @DataAuditEventID
            WHERE idfObject = @idfEpiObservation
                  AND idfDataAuditEvent IS NULL;

            UPDATE dbo.tauDataAuditDetailUpdate
            SET idfDataAuditEvent = @DataAuditEventID
            WHERE idfObjectDetail = @idfCSObservation
                  AND idfDataAuditEvent IS NULL;

            UPDATE dbo.tauDataAuditDetailUpdate
            SET idfDataAuditEvent = @DataAuditEventID
            WHERE idfObjectDetail = @idfEpiObservation
                  AND idfDataAuditEvent IS NULL;
        -- End data audit
        END

        -- Set samples
        IF @SamplesParameters IS NOT NULL
        BEGIN
            WHILE EXISTS (SELECT * FROM @SamplesTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = SampleID,
                    @SampleID = SampleID,
                    @SampleTypeID = SampleTypeID,
                    @CollectedByPersonID = CollectedByPersonID,
                    @CollectedByOrganizationID = CollectedByOrganizationID,
                    @CollectionDate = CAST(CollectionDate AS DATETIME),
                    @SentDate = CAST(SentDate AS DATETIME),
                    @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                    @SampleStatusTypeID = SampleStatusTypeID,
                    @Comments = Comments,
                    @idfsSite = SiteID,
                    @CurrentSiteID = CurrentSiteID,
                    @RowStatus = RowStatus,
                    @SentToOrganizationID = SentToOrganizationID,
                    @DiseaseID = DiseaseID,
                    @ReadOnlyIndicator = ReadOnlyIndicator,
                    @HumanID = HumanID,
                    @HumanMasterID = HumanMasterID,
                    @RowAction = RowAction
                FROM @SamplesTemp;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_SAMPLES_SET @AuditUserName = @AuditUser,
                                                 @DataAuditEventID = @DataAuditEventID,
                                                 @SampleID = @SampleID OUTPUT,
                                                 @SampleTypeID = @SampleTypeID,
                                                 @RootSampleID = NULL,
                                                 @ParentSampleID = NULL,
                                                 @HumanID = @idfHuman,
                                                 @SpeciesID = NULL,
                                                 @AnimalID = NULL,
                                                 @VectorID = NULL,
                                                 @MonitoringSessionID = @idfParentMonitoringSession,
                                                 @VectorSessionID = NULL,
                                                 @HumanDiseaseReportID = @idfHumanCase,
                                                 @VeterinaryDiseaseReportID = NULL,
                                                 @CollectionDate = @CollectionDate,
                                                 @CollectedByPersonID = @CollectedByPersonID,
                                                 @CollectedByOrganizationID = @CollectedByOrganizationID,
                                                 @SentDate = @SentDate,
                                                 @SentToOrganizationID = @SentToOrganizationID,
                                                 @EIDSSLocalFieldSampleID = @EIDSSLocalOrFieldSampleID,
                                                 @SiteID = @idfsSite,
                                                 @EnteredDate = @DateEntered,
                                                 @ReadOnlyIndicator = @ReadOnlyIndicator,
                                                 @SampleStatusTypeID = @SampleStatusTypeID,
                                                 @Comments = @Comments,
                                                 @CurrentSiteID = @CurrentSiteID,
                                                 @DiseaseID = @DiseaseID,
                                                 @BirdStatusTypeID = NULL,
                                                 @RowStatus = @RowStatus,
                                                 @RowAction = @RowAction

                UPDATE @TestsTemp
                SET SampleID = @SampleID
                WHERE SampleID = @RowID

                DELETE FROM @SamplesTemp
                WHERE SampleID = @RowID
            END
        END
        IF @TestsParameters IS NOT NULL
        BEGIN
            WHILE EXISTS (SELECT * FROM @TestsTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = TestID,
                    @TestID = TestID,
                    @TestNameTypeID = TestNameTypeID,
                    @TestCategoryTypeID = TestCategoryTypeID,
                    @TestResultTypeID = TestResultTypeID,
                    @TestStatusTypeID = TestStatusTypeID,
                    @DiseaseID = DiseaseID,
                    @SampleID = SampleID,
                    @Comments = Comments,
                    @RowStatus = RowStatus,
                    @StartedDate = StartedDate,
                    @ResultDate = ResultDate,
                    @TestedByOrganizationID = TestedByOrganizationID,
                    @TestedByPersonID = TestedByPersonID,
                    @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                    @ResultEnteredByPersonID = ResultEnteredByPersonID,
                    @ValidatedByOrganizationID = ValidatedByOrganizationID,
                    @ValidatedByPersonID = ValidatedByPersonID,
                    @ReadOnlyIndicator = ReadOnlyIndicator,
                    @NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
                    @ExternalTestIndicator = ExternalTestIndicator,
                    @PerformedByOrganizationID = PerformedByOrganizationID,
                    @ReceivedDate = ReceivedDate,
                    @ContactPersonName = ContactPersonName,
                    @RowAction = RowAction
                FROM @TestsTemp;

                -- If the record is being soft-@HumanDiseaseReportAfterEdit, then check if the test record was originally created 
                -- in the laboaratory module.  If it was, then disassociate the test record from the 
                -- human disease report, so that the test record remains in the laboratory module 
                -- for further action.
                SET @TestHumanCaseID = @idfHumanCase;

                -- If @HumanDiseaseReportAfterEdit and it's a disease report entered test, then just soft-delete the test.
                IF @RowStatus = 1
                   AND @NonLaboratoryTestIndicator = 1
                BEGIN
                    SET @RowStatus = 1;
                END

                -- If @HumanDiseaseReportAfterEdit and it's a laboratory module entered test, then just disassociate from the disease report.
                ELSE IF (@RowStatus = 1 AND @NonLaboratoryTestIndicator = 0)
                BEGIN
                    SET @RowStatus = 0;
                    SET @TestHumanCaseID = NULL;
                END;

                -- Set tests
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_TESTS_SET @LanguageID = @LanguageID,
                                               @TestID = @TestID OUTPUT,
                                               @TestNameTypeID = @TestNameTypeID,
                                               @TestCategoryTypeID = @TestCategoryTypeID,
                                               @TestResultTypeID = @TestResultTypeID,
                                               @TestStatusTypeID = @TestStatusTypeID,
                                               @DiseaseID = @DiseaseID,
                                               @SampleID = @SampleID,
                                               @BatchTestID = NULL,
                                               @ObservationID = NULL,
                                               @TestNumber = NULL,
                                               @Comments = @Comments,
                                               @RowStatus = @RowStatus,
                                               @StartedDate = @StartedDate,
                                               @ResultDate = @ResultDate,
                                               @TestedByOrganizationID = @TestedByOrganizationID,
                                               @TestedByPersonID = @TestedByPersonID,
                                               @ResultEnteredByOrganizationID = @ResultEnteredByOrganizationID,
                                               @ResultEnteredByPersonID = @ResultEnteredByPersonID,
                                               @ValidatedByOrganizationID = @ValidatedByOrganizationID,
                                               @ValidatedByPersonID = @ValidatedByPersonID,
                                               @ReadOnlyIndicator = @ReadOnlyIndicator,
                                               @NonLaboratoryTestIndicator = @NonLaboratoryTestIndicator,
                                               @ExternalTestIndicator = @ExternalTestIndicator,
                                               @PerformedByOrganizationID = @PerformedByOrganizationID,
                                               @ReceivedDate = @ReceivedDate,
                                               @ContactPerson = @ContactPersonName,
                                               @MonitoringSessionID = @idfParentMonitoringSession,
                                               @VectorSessionID = NULL,
                                               @HumanDiseaseReportID = @TestHumanCaseID,
                                               @VeterinaryDiseaseReportID = NULL,
                                               @AuditUserName = @AuditUser,
                                               @DataAuditEventID = @DataAuditEventID,
                                               @RowAction = @RowAction;

                UPDATE @TestsInterpretationParametersTemp
                SET TestID = @TestID
                WHERE TestID = @RowID;

                DELETE FROM @TestsTemp
                WHERE TestID = @RowID;
            END;
        END

        DECLARE @SampleCount INT;
        SET @SampleCount =
        (
            SELECT Count(*)
            FROM dbo.tlbMaterial
            WHERE intRowStatus = 0
                  and idfHumanCase = @idfHumanCase
        );

        DECLARE @SampleToDeleteID BIGINT = NULL;
        DECLARE @SamplesToDelete TABLE (SampleID BIGINT);

        INSERT INTO @SamplesToDelete
        SELECT idfMaterial
        FROM dbo.tlbMaterial
        WHERE idfHumanCase = @idfHumanCase;

        DECLARE @BeforeNotCollectedReason BIGINT = (
                                                       SELECT idfsNotCollectedReason
                                                       FROM dbo.tlbHumanCase
                                                       WHERE idfHumanCase = @idfHumanCase
                                                   );

        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase
                  AND idfsYNSpecimenCollected = 10100002
        )
        BEGIN
            SET @ObjectTableID = 75620000000; -- tlbMaterial
            UPDATE dbo.tlbMaterial
            SET intRowStatus = 1,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @idfHumanCase;

            WHILE EXISTS (SELECT * FROM @SamplesToDelete)
            BEGIN
                SELECT TOP 1
                    @SampleToDeleteID = SampleID
                FROM @SamplesToDelete;

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject
                )
                VALUES
                (@DataAuditEventid, @ObjectTableID, @SampleToDeleteID);
                -- End data audit

                DELETE FROM @SamplesToDelete
                WHERE SampleID = @SampleToDeleteID;
            END
        END
        ELSE IF EXISTS
        (
            SELECT *
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase
                  AND idfsYNSpecimenCollected = 10100003
        )
        BEGIN
            UPDATE dbo.tlbHumanCase
            SET idfsNotCollectedReason = NULL,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @idfHumanCase;

            -- Data audit
            IF @BeforeNotCollectedReason IS NOT NULL
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventId,
                       @ObjectTableID,
                       12014670000000,
                       @idfHumanCase,
                       NULL,
                       @BeforeNotCollectedReason,
                       NULL,
                       @AuditUser
            END
            -- End data audit

            SET @ObjectTableID = 75620000000; -- tlbMaterial
            UPDATE dbo.tlbMaterial
            SET intRowStatus = 1,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @idfHumanCase;

            WHILE EXISTS (SELECT * FROM @SamplesToDelete)
            BEGIN
                SELECT TOP 1
                    @SampleToDeleteID = SampleID
                FROM @SamplesToDelete;

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject
                )
                VALUES
                (@DataAuditEventid, @ObjectTableID, @SampleToDeleteID);
                -- End data audit

                DELETE FROM @SamplesToDelete
                WHERE SampleID = @SampleToDeleteID;
            END
        END
        ELSE IF EXISTS
        (
            SELECT *
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase
                  AND idfsYNSpecimenCollected = 10100001
        )
        BEGIN
            UPDATE dbo.tlbHumanCase
            SET idfsNotCollectedReason = NULL,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @idfHumanCase;

            -- Data audit
            IF @BeforeNotCollectedReason IS NOT NULL
            BEGIN
                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventId,
                       @ObjectTableID,
                       12014670000000,
                       @idfHumanCase,
                       NULL,
                       @BeforeNotCollectedReason,
                       NULL,
                       @AuditUser
            END
            -- End data audit

            IF (@SampleCount = 0)
            BEGIN
                DECLARE @BeforeSpecimenCollectedIndicator BIGINT = (
                                                                       SELECT idfsYNSpecimenCollected
                                                                       FROM dbo.tlbHumanCase
                                                                       WHERE idfHumanCase = @idfHumanCase
                                                                   );

                UPDATE dbo.tlbHumanCase
                SET idfsYNSpecimenCollected = NULL,
                    AuditUpdateUser = @AuditUser
                WHERE idfHumanCase = @idfHumanCase;

                -- Data audit
                IF @BeforeSpecimenCollectedIndicator IS NOT NULL
                BEGIN
                    INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue,
                        AuditCreateUser
                    )
                    SELECT @DataAuditEventId,
                           @ObjectTableID,
                           79760000000,
                           @idfHumanCase,
                           NULL,
                           @BeforeSpecimenCollectedIndicator,
                           NULL,
                           @AuditUser
                END
            -- End data audit
            END
        END

        -- Set test interpretations
        IF @TestsInterpretationParameters IS NOT NULL
        BEGIN
            WHILE EXISTS (SELECT * FROM @TestsInterpretationParametersTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = TestInterpretationID,
                    @TestInterpretationID = TestInterpretationID,
                    @DiseaseID = DiseaseID,
                    @InterpretedStatusTypeID = InterpretedStatusTypeID,
                    @ValidatedByOrganizationID = ValidatedByOrganizationID,
                    @ValidatedByPersonID = ValidatedByPersonID,
                    @InterpretedByOrganizationID = InterpretedByOrganizationID,
                    @InterpretedByPersonID = InterpretedByPersonID,
                    @TestID = TestID,
                    @ValidatedStatusIndicator = ValidatedStatusIndicator,
                    @ReportSessionCreatedIndicator = ReportSessionCreatedIndicator,
                    @ValidatedComment = ValidatedComment,
                    @InterpretedComment = InterpretedComment,
                    @ValidatedDate = ValidatedDate,
                    @InterpretedDate = InterpretedDate,
                    @RowStatus = RowStatus,
                    @ReadOnlyIndicator = ReadOnlyIndicator,
                    @RowAction = RowAction
                FROM @TestsInterpretationParametersTemp;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_TEST_INTERPRETATIONS_SET @AuditUser,
                                                              @DataAuditEventID,
                                                              @TestInterpretationID OUTPUT,
                                                              @DiseaseID,
                                                              @InterpretedStatusTypeID,
                                                              @ValidatedByOrganizationID,
                                                              @ValidatedByPersonID,
                                                              @InterpretedByOrganizationID,
                                                              @InterpretedByPersonID,
                                                              @TestID,
                                                              @ValidatedStatusIndicator,
                                                              @ReportSessionCreatedIndicator,
                                                              @ValidatedComment,
                                                              @InterpretedComment,
                                                              @ValidatedDate,
                                                              @InterpretedDate,
                                                              @RowStatus,
                                                              @ReadOnlyIndicator,
                                                              @RowAction;

                DELETE FROM @TestsInterpretationParametersTemp
                WHERE TestInterpretationID = @RowID;
            END;
        END

        -- Set events
        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_ADMIN_EVENT_SET @EventId,
                                             @EventTypeId,
                                             @EventUserId,
                                             @EventObjectId,
                                             @EventDiseaseId,
                                             @EventSiteId,
                                             @EventInformationString,
                                             @EventLoginSiteId,
                                             @EventLocationId,
                                             @AuditUser,
                                             @DataAuditEventID;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        -- Set anti-viral therapies
        IF @AntiviralTherapiesParameters IS NOT NULL
        BEGIN
            EXEC dbo.USSP_HUM_ANTIVIRAL_THERAPIES_SET @idfHumanCase,
                                                      @AntiviralTherapiesParameters,
                                                      0,
                                                      @AuditUser,
                                                      @DataAuditEventID;
        END

        -- Set vaccinations
        IF @VaccinationsParameters IS NOT NULL
        BEGIN
            EXEC dbo.USSP_HUM_DISEASE_VACCINATION_SET @idfHumanCase,
                                                      @VaccinationsParameters,
                                                      0,
                                                      @AuditUser,
                                                      @DataAuditEventID;
        END

        -- Set contacts
        IF @ContactsParameters IS NOT NULL
        BEGIN
            EXEC USSP_GBL_CONTACTS_SET @ContactsParameters,
                                       @CurrentSiteID,
                                       @AuditUser,
                                       @DataAuditEventID,
                                       @idfHumanCase;
        END

        -- Update the human record if a date of death is provided.
        IF @datDateofDeath IS NOT NULL
        BEGIN
            DECLARE @BeforeDateOfDeath DATETIME
                =   (
                        SELECT datDateOfDeath FROM dbo.tlbHuman WHERE @idfHuman = @idfHuman
                    );

            UPDATE dbo.tlbHuman
            SET datDateofDeath = @datDateofDeath,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUser
            WHERE idfHuman = @idfHuman;

            SET @ObjectTableID = 75600000000; -- tlbHuman

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateDTM,
                AuditCreateUser
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             79340000000,
             @idfHuman,
             NULL,
             @BeforeDateOfDeath,
             @datDateofDeath,
             GETDATE(),
             @AuditUser
            );
        END

        -- Update the connected test record if a connected test ID is provided.
        IF @ConnectedTestId IS NOT NULL
        BEGIN
            SELECT @DiseaseID = T.idfsDiagnosis,
                   @HumanMasterID = HA.idfHumanActual,
                   @idfMaterial = T.idfMaterial
            FROM dbo.tlbTesting T
                INNER JOIN dbo.tlbMaterial M
                    ON M.idfMaterial = T.idfMaterial
                INNER JOIN dbo.tlbHuman H
                    ON H.idfHuman = M.idfHuman
                INNER JOIN dbo.tlbHumanActual HA
                    ON HA.idfHumanActual = H.idfHumanActual
            WHERE T.idfTesting = @ConnectedTestId;

            UPDATE dbo.tlbTesting
            SET dbo.tlbTesting.idfHumanCase = @idfHumanCase,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUser
            FROM dbo.tlbTesting T
                INNER JOIN dbo.tlbMaterial M
                    ON M.idfMaterial = T.idfMaterial
                INNER JOIN dbo.tlbHuman H
                    ON H.idfHuman = M.idfHuman
                INNER JOIN dbo.tlbHumanActual HA
                    ON HA.idfHumanActual = H.idfHumanActual
            WHERE T.idfsDiagnosis = @DiseaseID
                  AND HA.idfHumanActual = @HumanMasterID
                  AND T.idfMaterial = @idfMaterial;

            SET @ObjectTableID = 75740000000; -- tlbTesting

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateDTM,
                AuditCreateUser
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             51586790000001,
             @idfHuman,
             NULL,
             NULL,
             @idfHumanCase,
             GETDATE(),
             @AuditUser
            );
        -- End data audit
        END

        IF @@TRANCOUNT > 0
            COMMIT TRAN;

        SELECT @ReturnCode 'ReturnCode',
               @ReturnMessage 'ReturnMessage',
               @idfHumanCase 'idfHumanCase',
               @strHumanCaseID 'strHumanCaseID',
               @idfHuman 'idfHuman';
    END TRY
    BEGIN CATCH
        SELECT @ReturnCode 'ReturnCode',
               @ReturnMessage 'ReturnMessage',
               @idfHumanCase 'idfHumanCase',
               @strHumanCaseID 'strHumanCaseID',
               @idfHuman 'idfHuman';

        IF @@TRANCOUNT > 0
            ROLLBACK TRAN;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_HUMAN_MASTER_SET]...';


GO
-- ================================================================================================
-- Name: USP_HUM_HUMAN_MASTER_SET
--
-- Description: Insert or update a human master (actual) record.
--          
-- Revision History:
-- Name            Date       Change
-- --------------- ---------- --------------------------------------------------------------------
-- Stephen Long    11/28/2018 Initial release for new API.
-- Stephen Long    01/18/2019 Added entered date as a part of the insert human actual statement; 
--                            sets it to the system current date/time.  Syncs up with use case 
--                            HUC02.  Also added copy to human indicator for requirements in 
--                            laboratory module, use case 10.
-- Mark Wilson     09/23/2021 updated for consistency and for updates to locations.
-- Mark Wilson     10/04/2021 updated blnGeoLocationShared to correct addressing issues.
-- Mark Wilson     10/06/2021 minor cleanup.
-- Mark Wilson     10/07/2021 added Permanent location params and sets, added Elevation.
-- Mark Wilson     10/19/2021 Updated to call USSP_GBL_ADDRESS_SET.
-- Mark Wilson     10/25/2021 Updated  EXEC USSP_GBL_ADDRESS_SET to remove @LanguageID
-- Steven Verner   02/13/2022 Suppressed the return of sub calls to global address set SP to keep from interfering with POCO generation.
-- Leo Tracchia	   11/21/2022 Added statements for Audit logging 
-- Leo Tracchia	   11/21/2022 Added fix for auditing and changed to call USSP_GBL_ADDRESS_SET_WITH_AUDITING
-- Testing Code
/*

EXEC	@return_value = [dbo].[USP_HUM_HUMAN_MASTER_SET]
		@HumanMasterID = NULL,
		@FirstName = N'Mark',
		@SecondName = N'C.',
		@LastName = N'Wilson',
		@DateOfBirth = N'04/18/1962',
		@DateOfDeath = N'04/18/2062',
		@ReportedAge = 59,
		@ReportAgeUOMID = 10042003,
		@HumanGenderTypeID = 10043002,
		@OccupationTypeID = 6920000004,
		@PassportNumber = N'2224446661212',
		@EmployerName = N'Georgia Tech',
		@EmployedDateLastPresent = N'2021-10-04 14:55:23.090',
		@EmployeridfsLocation = 1345350000000,
		@EmployerstrStreetName = N'Baker Street',
		@EmployerstrBuilding = N'221B',
		@EmployeridfsPostalCode = N'33300',
		@EmployerPhone = N'011222333444',
		@HumanidfsLocation = 1345350000000,
		@HumanstrStreetName = N'Elm Street',
		@HumanstrBuilding = N'1224',
		@HumanidfsPostalCode = N'33300',
		@HomePhone = N'011222333444'

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_HUMAN_MASTER_SET] (
	@HumanMasterID BIGINT = NULL,
	@CopyToHumanIndicator BIT = 0, 
	@PersonalIDType BIGINT = NULL,
	@EIDSSPersonID NVARCHAR(200) = NULL,
	@PersonalID NVARCHAR(100) = NULL,
	@FirstName NVARCHAR(200) = NULL,
	@SecondName NVARCHAR(200) = NULL,
	@LastName NVARCHAR(200),
	@DateOfBirth DATETIME = NULL,
	@DateOfDeath DATETIME = NULL,
	@ReportedAge INT = NULL,
	@ReportAgeUOMID BIGINT = NULL,
	@HumanGenderTypeID BIGINT = NULL,
	@OccupationTypeID BIGINT = NULL,
	@CitizenshipTypeID BIGINT = NULL,
	@PassportNumber NVARCHAR(20) = NULL,
	@IsEmployedTypeID BIGINT = NULL,
---------------------------------------------------------------
	@EmployerName NVARCHAR(200) = NULL,
	@EmployedDateLastPresent DATETIME = NULL,
	@EmployerForeignAddressIndicator BIT = 0,
	@EmployerForeignAddressString NVARCHAR(200) = NULL,
	@EmployerGeoLocationID BIGINT = NULL,
	@EmployeridfsLocation BIGINT = NULL,
	@EmployerstrStreetName NVARCHAR(200) = NULL,
	@EmployerstrApartment NVARCHAR(200) = NULL,
	@EmployerstrBuilding NVARCHAR(200) = NULL,
	@EmployerstrHouse NVARCHAR(200) = NULL,
	@EmployeridfsPostalCode NVARCHAR(200) = NULL,
	@EmployerPhone NVARCHAR(100) = NULL,
---------------------------------------------------------------
	@IsStudentTypeID BIGINT = NULL,
	@SchoolName NVARCHAR(200) = NULL,
	@SchoolDateLastAttended DATETIME = NULL,
	@SchoolForeignAddressIndicator BIT = 0,
	@SchoolForeignAddressString NVARCHAR(200) = NULL,
	@SchoolGeoLocationID BIGINT = NULL,
	@SchoolidfsLocation BIGINT = NULL,
	@SchoolstrStreetName NVARCHAR(200) = NULL,
	@SchoolstrApartment NVARCHAR(200) = NULL,
	@SchoolstrBuilding NVARCHAR(200) = NULL,
	@SchoolstrHouse NVARCHAR(200) = NULL,
	@SchoolidfsPostalCode NVARCHAR(200) = NULL,
	@SchoolPhone NVARCHAR(100) = NULL,
---------------------------------------------------------------
	@HumanGeoLocationID BIGINT = NULL,
	@HumanidfsLocation BIGINT = NULL,
	@HumanstrStreetName NVARCHAR(200) = NULL,
	@HumanstrApartment NVARCHAR(200) = NULL,
	@HumanstrBuilding NVARCHAR(200) = NULL,
	@HumanstrHouse NVARCHAR(200) = NULL,
	@HumanidfsPostalCode NVARCHAR(200) = NULL,
	@HumanstrLatitude FLOAT = NULL,
	@HumanstrLongitude FLOAT = NULL,
	@HumanstrElevation FLOAT = NULL,
---------------------------------------------------------------
	@HumanPermGeoLocationID BIGINT = NULL,
	@HumanPermidfsLocation BIGINT = NULL,
	@HumanPermstrStreetName NVARCHAR(200) = NULL,
	@HumanPermstrApartment NVARCHAR(200) = NULL,
	@HumanPermstrBuilding NVARCHAR(200) = NULL,
	@HumanPermstrHouse NVARCHAR(200) = NULL,
	@HumanPermidfsPostalCode NVARCHAR(200) = NULL,
---------------------------------------------------------------
	@HumanAltGeoLocationID BIGINT = NULL,
	@HumanAltForeignAddressIndicator BIT = 0,
	@HumanAltForeignAddressString NVARCHAR(200) = NULL,
	@HumanAltidfsLocation BIGINT = NULL,
	@HumanAltstrStreetName NVARCHAR(200) = NULL,
	@HumanAltstrApartment NVARCHAR(200) = NULL,
	@HumanAltstrBuilding NVARCHAR(200) = NULL,
	@HumanAltstrHouse NVARCHAR(200) = NULL,
	@HumanAltidfsPostalCode NVARCHAR(200) = NULL,
---------------------------------------------------------------
	@RegistrationPhone NVARCHAR(200) = NULL,
	@HomePhone NVARCHAR(200) = NULL,
	@WorkPhone NVARCHAR(200) = NULL,
	@ContactPhoneCountryCode INT = NULL,
	@ContactPhone NVARCHAR(200) = NULL,
	@ContactPhoneTypeID BIGINT = NULL,
	@ContactPhone2CountryCode INT = NULL,
	@ContactPhone2 NVARCHAR(200) = NULL,
	@ContactPhone2TypeID BIGINT = NULL,
	@AuditUser NVARCHAR(100) = ''
	)
AS
BEGIN
	SET NOCOUNT ON;

	IF (@AuditUser = '' OR @AuditUser IS NULL)
		SET @AuditUser = SUSER_NAME()

	DECLARE @ReturnCode INT = 0,
		@ReturnMessage NVARCHAR(MAX) = 'SUCCESS', 
		@HumanID BIGINT = NULL;

	DECLARE @SupressSelect TABLE (
		ReturnCode INT,
		ReturnMessage NVARCHAR(MAX)
		);

	DECLARE @idfsLocation BIGINT
	DECLARE @AdminLevel INT

	--Data Audit--

		DECLARE @idfUserId BIGINT = NULL;
		DECLARE @idfSiteId BIGINT = NULL;
		DECLARE @idfsDataAuditEventType bigint = NULL;
		DECLARE @idfsObjectType bigint = 10017036; -- Need to review the value --
		DECLARE @idfObject bigint = @HumanMasterID;
		DECLARE @idfObjectTable_tlbHumanActual bigint = 4573200000000;
		DECLARE @idfObjectTable_HumanActualAddlInfo bigint = 52577590000000;
		DECLARE @idfDataAuditEvent bigint = NULL;		

		DECLARE @tlbHumanActual_BeforeEdit TABLE
		(
			idfHumanActual bigint,
			idfsOccupationType bigint,
			idfsNationality bigint,
			idfsHumanGender bigint,
			idfCurrentResidenceAddress bigint,
			idfEmployerAddress bigint,
			idfRegistrationAddress bigint,
			datDateofBirth datetime,
			datDateOfDeath datetime,
			strLastName nvarchar(200),
			strSecondName nvarchar(200),
			strFirstName nvarchar(200),
			strRegistrationPhone nvarchar(200),
			strEmployerName nvarchar(200),
			strHomePhone nvarchar(200),
			strWorkPhone nvarchar(200),
			idfsPersonIDType bigint,
			strPersonID nvarchar(100),
			datEnteredDate datetime,
			datModificationDate datetime			
		)

		DECLARE @tlbHumanActual_AfterEdit TABLE
		(
			idfHumanActual bigint,
			idfsOccupationType bigint,
			idfsNationality bigint,
			idfsHumanGender bigint,
			idfCurrentResidenceAddress bigint,
			idfEmployerAddress bigint,
			idfRegistrationAddress bigint,
			datDateofBirth datetime,
			datDateOfDeath datetime,
			strLastName nvarchar(200),
			strSecondName nvarchar(200),
			strFirstName nvarchar(200),
			strRegistrationPhone nvarchar(200),
			strEmployerName nvarchar(200),
			strHomePhone nvarchar(200),
			strWorkPhone nvarchar(200),
			idfsPersonIDType bigint,
			strPersonID nvarchar(100),
			datEnteredDate datetime,
			datModificationDate datetime			
		)

		DECLARE @HumanActualAddlInfo_BeforeEdit TABLE
		(
			HumanActualAddlInfoUID bigint,
			ReportedAge int,
			ReportedAgeUOMID bigint,
			PassportNbr varchar(20),
			IsEmployedID bigint,
			EmployerPhoneNbr varchar(200),
			EmployedDTM datetime,
			IsStudentID bigint,
			SchoolName varchar(200),
			SchoolPhoneNbr varchar(200),
			SchoolAddressID bigint,
			SchoolLastAttendDTM datetime,
			ContactPhoneCountryCode int,
			ContactPhoneNbr varchar(200),
			ContactPhoneNbrTypeID bigint,
			ContactPhone2CountryCode int,
			ContactPhone2Nbr varchar(200),
			ContactPhone2NbrTypeID bigint,
			AltAddressID bigint			
		)

		DECLARE @HumanActualAddlInfo_AfterEdit TABLE
		(
			HumanActualAddlInfoUID bigint,
			ReportedAge int,
			ReportedAgeUOMID bigint,
			PassportNbr varchar(20),
			IsEmployedID bigint,
			EmployerPhoneNbr varchar(200),
			EmployedDTM datetime,
			IsStudentID bigint,
			SchoolName varchar(200),
			SchoolPhoneNbr varchar(200),
			SchoolAddressID bigint,
			SchoolLastAttendDTM datetime,
			ContactPhoneCountryCode int,
			ContactPhoneNbr varchar(200),
			ContactPhoneNbrTypeID bigint,
			ContactPhone2CountryCode int,
			ContactPhone2Nbr varchar(200),
			ContactPhone2NbrTypeID bigint,
			AltAddressID bigint			
		)

	--Data Audit--

	--Data Audit--
		-- Get and Set UserId and SiteId
		SELECT @idfUserId = userInfo.UserId, @idfSiteId = UserInfo.SiteId FROM dbo.FN_UserSiteInformation(@AuditUser) userInfo
	--Data Audit--

	BEGIN TRY
		BEGIN TRANSACTION;		

		IF NOT EXISTS (
				SELECT *
				FROM dbo.tlbHumanActual
				WHERE idfHumanActual = @HumanMasterID
					AND intRowStatus = 0
				)
		BEGIN
			INSERT INTO @SupressSelect
			EXECUTE dbo.USP_GBL_NEXTKEYID_GET 
				@tableName = N'tlbHumanActual',
				@idfsKey = @HumanMasterID OUTPUT;

			INSERT INTO dbo.tlbHumanActual (
				idfHumanActual,
				idfsNationality,
				idfsHumanGender,
				idfCurrentResidenceAddress,
				idfsOccupationType,
				idfEmployerAddress,
				idfRegistrationAddress,
				datDateofBirth,
				datDateOfDeath,
				strFirstName,
				strSecondName,
				strLastName,
				strRegistrationPhone,
				strEmployerName,
				strHomePhone,
				strWorkPhone,
				idfsPersonIDType,
				strPersonID,
				intRowStatus,
				SourceSystemNameID,
				SourceSystemKeyValue,
				AuditCreateUser,
				AuditCreateDTM,
				AuditUpdateUser,
				AuditUpdateDTM
				)
			VALUES (
				@HumanMasterID,
				@CitizenshipTypeID,
				@HumanGenderTypeID,
				@HumanGeoLocationID,
				@OccupationTypeID,
				@EmployerGeoLocationID,
				@HumanPermGeoLocationID,
				@DateOfBirth,
				@DateOfDeath,
				@FirstName,
				@SecondName,
				@LastName,
				@RegistrationPhone,
				@EmployerName,
				@HomePhone,
				@WorkPhone,
				@PersonalIDType,
				@PersonalID,
				0,
				10519001,
				'[{"idfHumanActual":' + CAST(@HumanMasterID AS NVARCHAR(300)) + '}]',
				@AuditUser,
				GETDATE(),
				@AuditUser,
				GETDATE()
				);

			--Data Audit--
			
				-- tauDataAuditEvent Event Type - Create 
				set @idfsDataAuditEventType = 10016001;
			
				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SupressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @HumanMasterID, @idfObjectTable_tlbHumanActual, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_tlbHumanActual, @HumanMasterID)
			
			--Data Audit--

			INSERT INTO @SupressSelect
			EXECUTE dbo.USP_GBL_NextNumber_GET @ObjectName = N'EIDSS Person',
				@NextNumberValue = @EIDSSPersonID OUTPUT,
				@InstallationSite = NULL;

			INSERT INTO dbo.HumanActualAddlInfo (
				HumanActualAddlInfoUID,
				EIDSSPersonID,
				ReportedAge,
				ReportedAgeUOMID,
				PassportNbr,
				IsEmployedID,
				EmployerPhoneNbr,
				EmployedDTM,
				IsStudentID,
				SchoolName,
				SchoolPhoneNbr,
				SchoolAddressID,
				SchoolLastAttendDTM,
				ContactPhoneCountryCode,
				ContactPhoneNbr,
				ContactPhoneNbrTypeID,
				ContactPhone2CountryCode,
				ContactPhone2Nbr,
				ContactPhone2NbrTypeID,
				AltAddressID,
				intRowStatus,
				SourceSystemNameID,
				SourceSystemKeyValue,
				AuditCreateUser,
				AuditCreateDTM,
				AuditUpdateUser,
				AuditUpdateDTM
				)
			VALUES (
				@HumanMasterID,
				@EIDSSPersonID,
				@ReportedAge,
				@ReportAgeUOMID,
				@PassportNumber,
				@IsEmployedTypeID,
				@EmployerPhone,
				@EmployedDateLastPresent,
				@IsStudentTypeID,
				@SchoolName,
				@SchoolPhone,
				@SchoolGeoLocationID,
				@SchoolDateLastAttended,
				@ContactPhoneCountryCode,
				@ContactPhone,
				@ContactPhoneTypeID,
				@ContactPhone2CountryCode,
				@ContactPhone2,
				@ContactPhone2TypeID,
				@HumanAltGeoLocationID,
				0,
				10519001,
				'[{"HumanActualAddlInfoUID":' + CAST(@HumanMasterID AS NVARCHAR(300)) + '}]',
				@AuditUser,
				GETDATE(),
				@AuditUser,
				GETDATE()
				);

			--Data Audit--			
				-- tauDataAuditEvent Event Type - Create 									
				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_HumanActualAddlInfo, @HumanMasterID)			
			--Data Audit--

			-- Create a human record from human actual for the laboratory module; register new sample.
			IF @CopyToHumanIndicator = 1
				BEGIN
					INSERT INTO @SupressSelect
					EXECUTE dbo.USP_HUM_COPYHUMANACTUALTOHUMAN @HumanMasterID, @HumanID OUTPUT, @ReturnCode OUTPUT, @ReturnMessage OUTPUT;
					IF @ReturnCode <> 0 
						BEGIN
							RETURN;
						END;
				END;
		END;
		ELSE
		BEGIN

			INSERT INTO @tlbHumanActual_BeforeEdit (
				idfHumanActual, 
				idfsOccupationType, 
				idfsNationality, 
				idfsHumanGender, 
				idfCurrentResidenceAddress, 
				idfEmployerAddress, 
				idfRegistrationAddress, 
				datDateofBirth, 
				datDateOfDeath, 
				strLastName, 
				strSecondName, 
				strFirstName,
				strRegistrationPhone,
				strEmployerName,
				strHomePhone,
				strWorkPhone,
				idfsPersonIDType,
				strPersonID,
				datEnteredDate,
				datModificationDate)
			SELECT 
				idfHumanActual, 
				idfsOccupationType, 
				idfsNationality, 
				idfsHumanGender, 
				idfCurrentResidenceAddress, 
				idfEmployerAddress, 
				idfRegistrationAddress, 
				datDateofBirth, 
				datDateOfDeath, 
				strLastName, 
				strSecondName, 
				strFirstName,
				strRegistrationPhone,
				strEmployerName,
				strHomePhone,
				strWorkPhone,
				idfsPersonIDType,
				strPersonID,
				datEnteredDate,
				datModificationDate
				FROM tlbHumanActual WHERE idfHumanActual = @HumanMasterID;

			UPDATE dbo.tlbHumanActual
			SET idfsNationality = @CitizenshipTypeID,
				idfsHumanGender = @HumanGenderTypeID,
				idfCurrentResidenceAddress = @HumanGeoLocationID,
				idfsOccupationType = @OccupationTypeID,
				idfEmployerAddress = @EmployerGeoLocationID,
				idfRegistrationAddress = @HumanPermGeoLocationID,
				datDateofBirth = @DateOfBirth,
				datDateOfDeath = @DateOfDeath,
				strFirstName = @FirstName,
				strSecondName = @SecondName,
				strLastName = @LastName,
				strRegistrationPhone = @RegistrationPhone,
				strEmployerName = @EmployerName,
				strHomePhone = @HomePhone,
				strWorkPhone = @WorkPhone,
				idfsPersonIDType = @PersonalIDType,
				strPersonID = @PersonalID,
				SourceSystemNameID = ISNULL(SourceSystemNameID, 10519001),
				SourceSystemKeyValue = ISNULL(SourceSystemKeyValue, '[{"idfHumanActual":' + CAST(@HumanMasterID AS NVARCHAR(300)) + '}]'),
				AuditCreateUser = @AuditUser,
				AuditCreateDTM = GETDATE(),
				AuditUpdateUser = @AuditUser,
				AuditUpdateDTM = GETDATE()
			WHERE idfHumanActual = @HumanMasterID;

			INSERT INTO @tlbHumanActual_AfterEdit (
				idfHumanActual, 
				idfsOccupationType, 
				idfsNationality, 
				idfsHumanGender, 
				idfCurrentResidenceAddress, 
				idfEmployerAddress, 
				idfRegistrationAddress, 
				datDateofBirth, 
				datDateOfDeath, 
				strLastName, 
				strSecondName, 
				strFirstName,
				strRegistrationPhone,
				strEmployerName,
				strHomePhone,
				strWorkPhone,
				idfsPersonIDType,
				strPersonID,
				datEnteredDate,
				datModificationDate)
			SELECT 
				idfHumanActual, 
				idfsOccupationType, 
				idfsNationality, 
				idfsHumanGender, 
				idfCurrentResidenceAddress, 
				idfEmployerAddress, 
				idfRegistrationAddress, 
				datDateofBirth, 
				datDateOfDeath, 
				strLastName, 
				strSecondName, 
				strFirstName,
				strRegistrationPhone,
				strEmployerName,
				strHomePhone,
				strWorkPhone,
				idfsPersonIDType,
				strPersonID,
				datEnteredDate,
				datModificationDate
				FROM tlbHumanActual WHERE idfHumanActual = @HumanMasterID;
			
			--DataAudit-- 
				--  tauDataAuditEvent  Event Type- Edit 
				set @idfsDataAuditEventType = 10016003;
			
				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SupressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_tlbHumanActual, @idfDataAuditEvent OUTPUT

				--idfsOccupationType
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573220000000,
					a.idfHumanActual,
					null,
					a.idfsOccupationType,
					b.idfsOccupationType 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.idfsOccupationType <> b.idfsOccupationType) 
					or(a.idfsOccupationType is not null and b.idfsOccupationType is null)
					or(a.idfsOccupationType is null and b.idfsOccupationType is not null)

				--idfsNationality
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573230000000,
					a.idfHumanActual,
					null,
					a.idfsNationality,
					b.idfsNationality 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.idfsNationality <> b.idfsNationality) 
					or(a.idfsNationality is not null and b.idfsNationality is null)
					or(a.idfsNationality is null and b.idfsNationality is not null)

				--idfsHumanGender
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573240000000,
					a.idfHumanActual,
					null,
					a.idfsHumanGender,
					b.idfsHumanGender 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.idfsHumanGender <> b.idfsHumanGender) 
					or(a.idfsHumanGender is not null and b.idfsHumanGender is null)
					or(a.idfsHumanGender is null and b.idfsHumanGender is not null)

				--idfCurrentResidenceAddress
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573250000000,
					a.idfHumanActual,
					null,
					a.idfCurrentResidenceAddress,
					b.idfCurrentResidenceAddress 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.idfCurrentResidenceAddress <> b.idfCurrentResidenceAddress) 
					or(a.idfCurrentResidenceAddress is not null and b.idfCurrentResidenceAddress is null)
					or(a.idfCurrentResidenceAddress is null and b.idfCurrentResidenceAddress is not null)

				--idfEmployerAddress
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573260000000,
					a.idfHumanActual,
					null,
					a.idfEmployerAddress,
					b.idfEmployerAddress 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.idfEmployerAddress <> b.idfEmployerAddress) 
					or(a.idfEmployerAddress is not null and b.idfEmployerAddress is null)
					or(a.idfEmployerAddress is null and b.idfEmployerAddress is not null)

				--idfRegistrationAddress
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573270000000,
					a.idfHumanActual,
					null,
					a.idfRegistrationAddress,
					b.idfRegistrationAddress 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.idfRegistrationAddress <> b.idfRegistrationAddress) 
					or(a.idfRegistrationAddress is not null and b.idfRegistrationAddress is null)
					or(a.idfRegistrationAddress is null and b.idfRegistrationAddress is not null)

				--datDateofBirth
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573280000000,
					a.idfHumanActual,
					null,
					a.datDateofBirth,
					b.datDateofBirth 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.datDateofBirth <> b.datDateofBirth) 
					or(a.datDateofBirth is not null and b.datDateofBirth is null)
					or(a.datDateofBirth is null and b.datDateofBirth is not null)

				--datDateOfDeath
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573290000000,
					a.idfHumanActual,
					null,
					a.datDateOfDeath,
					b.datDateOfDeath 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.datDateOfDeath <> b.datDateOfDeath) 
					or(a.datDateOfDeath is not null and b.datDateOfDeath is null)
					or(a.datDateOfDeath is null and b.datDateOfDeath is not null)

				--strLastName
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573300000000,
					a.idfHumanActual,
					null,
					a.strLastName,
					b.strLastName 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strLastName <> b.strLastName) 
					or(a.strLastName is not null and b.strLastName is null)
					or(a.strLastName is null and b.strLastName is not null)

				--strSecondName
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573310000000,
					a.idfHumanActual,
					null,
					a.strSecondName,
					b.strSecondName 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strSecondName <> b.strSecondName) 
					or(a.strSecondName is not null and b.strSecondName is null)
					or(a.strSecondName is null and b.strSecondName is not null)

				--strFirstName
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573320000000,
					a.idfHumanActual,
					null,
					a.strFirstName,
					b.strFirstName 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strFirstName <> b.strFirstName) 
					or(a.strFirstName is not null and b.strFirstName is null)
					or(a.strFirstName is null and b.strFirstName is not null)

				--strRegistrationPhone
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573330000000,
					a.idfHumanActual,
					null,
					a.strRegistrationPhone,
					b.strRegistrationPhone 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strRegistrationPhone <> b.strRegistrationPhone) 
					or(a.strRegistrationPhone is not null and b.strRegistrationPhone is null)
					or(a.strRegistrationPhone is null and b.strRegistrationPhone is not null)

				--strEmployerName
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573340000000,
					a.idfHumanActual,
					null,
					a.strEmployerName,
					b.strEmployerName 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strEmployerName <> b.strEmployerName) 
					or(a.strEmployerName is not null and b.strEmployerName is null)
					or(a.strEmployerName is null and b.strEmployerName is not null)

				--strHomePhone
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573350000000,
					a.idfHumanActual,
					null,
					a.strHomePhone,
					b.strHomePhone 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strHomePhone <> b.strHomePhone) 
					or(a.strHomePhone is not null and b.strHomePhone is null)
					or(a.strHomePhone is null and b.strHomePhone is not null)

				--strWorkPhone
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573360000000,
					a.idfHumanActual,
					null,
					a.strWorkPhone,
					b.strWorkPhone 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strWorkPhone <> b.strWorkPhone) 
					or(a.strWorkPhone is not null and b.strWorkPhone is null)
					or(a.strWorkPhone is null and b.strWorkPhone is not null)

				--idfsPersonIDType
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					12527780000000,
					a.idfHumanActual,
					null,
					a.idfsPersonIDType,
					b.idfsPersonIDType 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.idfsPersonIDType <> b.idfsPersonIDType) 
					or(a.idfsPersonIDType is not null and b.idfsPersonIDType is null)
					or(a.idfsPersonIDType is null and b.idfsPersonIDType is not null)

				--strPersonID
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					12527790000000,
					a.idfHumanActual,
					null,
					a.strPersonID,
					b.strPersonID 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strPersonID <> b.strPersonID) 
					or(a.strPersonID is not null and b.strPersonID is null)
					or(a.strPersonID is null and b.strPersonID is not null)

				--datEnteredDate
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					51389550000000,
					a.idfHumanActual,
					null,
					a.datEnteredDate,
					b.datEnteredDate 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.datEnteredDate <> b.datEnteredDate) 
					or(a.datEnteredDate is not null and b.datEnteredDate is null)
					or(a.datEnteredDate is null and b.datEnteredDate is not null)

				--datModificationDate
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					51389560000000,
					a.idfHumanActual,
					null,
					a.datModificationDate,
					b.datModificationDate 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.datModificationDate <> b.datModificationDate) 
					or(a.datModificationDate is not null and b.datModificationDate is null)
					or(a.datModificationDate is null and b.datModificationDate is not null)

			--DataAudit-- 

			INSERT INTO @HumanActualAddlInfo_BeforeEdit (
				HumanActualAddlInfoUID,
				ReportedAge, 
				ReportedAgeUOMID,
				PassportNbr,
				IsEmployedID,
				EmployerPhoneNbr,
				EmployedDTM,
				IsStudentID,
				SchoolName,
				SchoolPhoneNbr,
				SchoolAddressID,
				SchoolLastAttendDTM,
				ContactPhoneCountryCode,
				ContactPhoneNbr,
				ContactPhoneNbrTypeID,
				ContactPhone2CountryCode,
				ContactPhone2Nbr,
				ContactPhone2NbrTypeID,
				AltAddressID)			
			SELECT 
				HumanActualAddlInfoUID,
				ReportedAge, 
				ReportedAgeUOMID,
				PassportNbr,
				IsEmployedID,
				EmployerPhoneNbr,
				EmployedDTM,
				IsStudentID,
				SchoolName,
				SchoolPhoneNbr,
				SchoolAddressID,
				SchoolLastAttendDTM,
				ContactPhoneCountryCode,
				ContactPhoneNbr,
				ContactPhoneNbrTypeID,
				ContactPhone2CountryCode,
				ContactPhone2Nbr,
				ContactPhone2NbrTypeID,
				AltAddressID
				FROM HumanActualAddlInfo WHERE HumanActualAddlInfoUID = @HumanMasterID;

			UPDATE dbo.HumanActualAddlInfo
			SET ReportedAge = @ReportedAge,
				ReportedAgeUOMID = @ReportAgeUOMID,
				PassportNbr = @PassportNumber,
				IsEmployedID = @IsEmployedTypeID,
				EmployerPhoneNbr = @EmployerPhone,
				EmployedDTM = @EmployedDateLastPresent,
				IsStudentID = @IsStudentTypeID,
				SchoolName = @SchoolName,
				SchoolPhoneNbr = @SchoolPhone,
				SchoolAddressID = @SchoolGeoLocationID,
				SchoolLastAttendDTM = @SchoolDateLastAttended,
				ContactPhoneCountryCode = @ContactPhoneCountryCode,
				ContactPhoneNbr = @ContactPhone,
				ContactPhoneNbrTypeID = @ContactPhoneTypeID,
				ContactPhone2CountryCode = @ContactPhone2CountryCode,
				ContactPhone2Nbr = @ContactPhone2,
				ContactPhone2NbrTypeID = @ContactPhone2TypeID,
				AltAddressID = @HumanAltGeoLocationID,
				SourceSystemNameID = ISNULL(SourceSystemNameID, 10519001),
				SourceSystemKeyValue = ISNULL(SourceSystemKeyValue, '[{"HumanActualAddlInfoUID":' + CAST(@HumanMasterID AS NVARCHAR(300)) + '}]'),
				AuditCreateUser = @AuditUser,
				AuditCreateDTM = GETDATE(),
				AuditUpdateUser = @AuditUser,
				AuditUpdateDTM = GETDATE()
			WHERE HumanActualAddlInfoUID = @HumanMasterID;

			INSERT INTO @HumanActualAddlInfo_AfterEdit (
				HumanActualAddlInfoUID,
				ReportedAge, 
				ReportedAgeUOMID,
				PassportNbr,
				IsEmployedID,
				EmployerPhoneNbr,
				EmployedDTM,
				IsStudentID,
				SchoolName,
				SchoolPhoneNbr,
				SchoolAddressID,
				SchoolLastAttendDTM,
				ContactPhoneCountryCode,
				ContactPhoneNbr,
				ContactPhoneNbrTypeID,
				ContactPhone2CountryCode,
				ContactPhone2Nbr,
				ContactPhone2NbrTypeID,
				AltAddressID)
			SELECT 
				HumanActualAddlInfoUID,
				ReportedAge, 
				ReportedAgeUOMID,
				PassportNbr,
				IsEmployedID,
				EmployerPhoneNbr,
				EmployedDTM,
				IsStudentID,
				SchoolName,
				SchoolPhoneNbr,
				SchoolAddressID,
				SchoolLastAttendDTM,
				ContactPhoneCountryCode,
				ContactPhoneNbr,
				ContactPhoneNbrTypeID,
				ContactPhone2CountryCode,
				ContactPhone2Nbr,
				ContactPhone2NbrTypeID,
				AltAddressID			
				FROM HumanActualAddlInfo WHERE HumanActualAddlInfoUID = @HumanMasterID;

			--DataAudit-- 
			--  tauDataAuditEvent  Event Type- Edit 
			set @idfsDataAuditEventType = 10016003;
			
			-- insert record into tauDataAuditEvent - 
			--INSERT INTO @SupressSelect
			--EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_HumanActualAddlInfo, @idfDataAuditEvent OUTPUT

			--ReportedAge
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000001,
				a.HumanActualAddlInfoUID,
				null,
				a.ReportedAge,
				b.ReportedAge 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ReportedAge <> b.ReportedAge) 
				or(a.ReportedAge is not null and b.ReportedAge is null)
				or(a.ReportedAge is null and b.ReportedAge is not null)

			--ReportedAgeUOMID
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000002,
				a.HumanActualAddlInfoUID,
				null,
				a.ReportedAgeUOMID,
				b.ReportedAgeUOMID 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ReportedAgeUOMID <> b.ReportedAgeUOMID) 
				or(a.ReportedAgeUOMID is not null and b.ReportedAgeUOMID is null)
				or(a.ReportedAgeUOMID is null and b.ReportedAgeUOMID is not null)

			--PassportNbr
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000003,
				a.HumanActualAddlInfoUID,
				null,
				a.PassportNbr,
				b.PassportNbr 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.PassportNbr <> b.PassportNbr) 
				or(a.PassportNbr is not null and b.PassportNbr is null)
				or(a.PassportNbr is null and b.PassportNbr is not null)

			--IsEmployedID
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000004,
				a.HumanActualAddlInfoUID,
				null,
				a.IsEmployedID,
				b.IsEmployedID 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.IsEmployedID <> b.IsEmployedID) 
				or(a.IsEmployedID is not null and b.IsEmployedID is null)
				or(a.IsEmployedID is null and b.IsEmployedID is not null)

			--EmployerPhoneNbr
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000005,
				a.HumanActualAddlInfoUID,
				null,
				a.EmployerPhoneNbr,
				b.EmployerPhoneNbr 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.EmployerPhoneNbr <> b.EmployerPhoneNbr) 
				or(a.EmployerPhoneNbr is not null and b.EmployerPhoneNbr is null)
				or(a.EmployerPhoneNbr is null and b.EmployerPhoneNbr is not null)

			--EmployedDTM
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000006,
				a.HumanActualAddlInfoUID,
				null,
				a.EmployedDTM,
				b.EmployedDTM 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.EmployedDTM <> b.EmployedDTM) 
				or(a.EmployedDTM is not null and b.EmployedDTM is null)
				or(a.EmployedDTM is null and b.EmployedDTM is not null)

			--IsStudentID
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000007,
				a.HumanActualAddlInfoUID,
				null,
				a.IsStudentID,
				b.IsStudentID 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.IsStudentID <> b.IsStudentID) 
				or(a.IsStudentID is not null and b.IsStudentID is null)
				or(a.IsStudentID is null and b.IsStudentID is not null)

			--SchoolName
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000008,
				a.HumanActualAddlInfoUID,
				null,
				a.SchoolName,
				b.SchoolName 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.SchoolName <> b.SchoolName) 
				or(a.SchoolName is not null and b.SchoolName is null)
				or(a.SchoolName is null and b.SchoolName is not null)
				
			--SchoolPhoneNbr
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000009,
				a.HumanActualAddlInfoUID,
				null,
				a.SchoolPhoneNbr,
				b.SchoolPhoneNbr 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.SchoolPhoneNbr <> b.SchoolPhoneNbr) 
				or(a.SchoolPhoneNbr is not null and b.SchoolPhoneNbr is null)
				or(a.SchoolPhoneNbr is null and b.SchoolPhoneNbr is not null)
								
			--SchoolAddressID
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000010,
				a.HumanActualAddlInfoUID,
				null,
				a.SchoolAddressID,
				b.SchoolAddressID 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.SchoolAddressID <> b.SchoolAddressID) 
				or(a.SchoolAddressID is not null and b.SchoolAddressID is null)
				or(a.SchoolAddressID is null and b.SchoolAddressID is not null)
												
			--SchoolLastAttendDTM
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000011,
				a.HumanActualAddlInfoUID,
				null,
				a.SchoolLastAttendDTM,
				b.SchoolLastAttendDTM 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.SchoolLastAttendDTM <> b.SchoolLastAttendDTM) 
				or(a.SchoolLastAttendDTM is not null and b.SchoolLastAttendDTM is null)
				or(a.SchoolLastAttendDTM is null and b.SchoolLastAttendDTM is not null)
																
			--ContactPhoneCountryCode
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000012,
				a.HumanActualAddlInfoUID,
				null,
				a.ContactPhoneCountryCode,
				b.ContactPhoneCountryCode 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ContactPhoneCountryCode <> b.ContactPhoneCountryCode) 
				or(a.ContactPhoneCountryCode is not null and b.ContactPhoneCountryCode is null)
				or(a.ContactPhoneCountryCode is null and b.ContactPhoneCountryCode is not null)

			--ContactPhoneNbr
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000013,
				a.HumanActualAddlInfoUID,
				null,
				a.ContactPhoneNbr,
				b.ContactPhoneNbr 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ContactPhoneNbr <> b.ContactPhoneNbr) 
				or(a.ContactPhoneNbr is not null and b.ContactPhoneNbr is null)
				or(a.ContactPhoneNbr is null and b.ContactPhoneNbr is not null)

			--ContactPhoneNbrTypeID
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000014,
				a.HumanActualAddlInfoUID,
				null,
				a.ContactPhoneNbrTypeID,
				b.ContactPhoneNbrTypeID 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ContactPhoneNbrTypeID <> b.ContactPhoneNbrTypeID) 
				or(a.ContactPhoneNbrTypeID is not null and b.ContactPhoneNbrTypeID is null)
				or(a.ContactPhoneNbrTypeID is null and b.ContactPhoneNbrTypeID is not null)

			--ContactPhone2CountryCode
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000015,
				a.HumanActualAddlInfoUID,
				null,
				a.ContactPhone2CountryCode,
				b.ContactPhone2CountryCode 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ContactPhone2CountryCode <> b.ContactPhone2CountryCode) 
				or(a.ContactPhone2CountryCode is not null and b.ContactPhone2CountryCode is null)
				or(a.ContactPhone2CountryCode is null and b.ContactPhone2CountryCode is not null)
				
			--ContactPhone2Nbr
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000016,
				a.HumanActualAddlInfoUID,
				null,
				a.ContactPhone2Nbr,
				b.ContactPhone2Nbr 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ContactPhone2Nbr <> b.ContactPhone2Nbr) 
				or(a.ContactPhone2Nbr is not null and b.ContactPhone2Nbr is null)
				or(a.ContactPhone2Nbr is null and b.ContactPhone2Nbr is not null)

			--ContactPhone2NbrTypeID
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000017,
				a.HumanActualAddlInfoUID,
				null,
				a.ContactPhone2NbrTypeID,
				b.ContactPhone2NbrTypeID 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ContactPhone2NbrTypeID <> b.ContactPhone2NbrTypeID) 
				or(a.ContactPhone2NbrTypeID is not null and b.ContactPhone2NbrTypeID is null)
				or(a.ContactPhone2NbrTypeID is null and b.ContactPhone2NbrTypeID is not null)

			--AltAddressID
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000018,
				a.HumanActualAddlInfoUID,
				null,
				a.AltAddressID,
				b.AltAddressID 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.AltAddressID <> b.AltAddressID) 
				or(a.AltAddressID is not null and b.AltAddressID is null)
				or(a.AltAddressID is null and b.AltAddressID is not null)

		END;

		SET @AdminLevel = 0
		SELECT @AdminLevel = node.GetLevel() FROM dbo.gisLocation WHERE idfsLocation = @EmployeridfsLocation

		-- Set Employer Address 
		IF (@AdminLevel > 2)
			OR @EmployerForeignAddressIndicator = 1

			INSERT INTO @SupressSelect
			EXECUTE dbo.USSP_GBL_ADDRESS_SET_WITH_AUDITING 
				@GeolocationID = @EmployerGeoLocationID OUTPUT,
				@DataAuditEventID = @idfDataAuditEvent,
				@ResidentTypeID = NULL,
				@GroundTypeID = NULL,
				@GeolocationTypeID = NULL,
				@LocationID = @EmployeridfsLocation,
				@Apartment = @EmployerstrApartment,
				@Building = @EmployerstrBuilding,
				@StreetName = @EmployerstrStreetName,
				@House = @EmployerstrHouse,
				@PostalCodeString = @EmployeridfsPostalCode,
				@DescriptionString = NULL,
				@Distance = NULL,
				@Latitude = NULL,
				@Longitude = NULL,
				@Elevation = NULL,
				@Accuracy = NULL,
				@Alignment = NULL,
				@ForeignAddressIndicator = @EmployerForeignAddressIndicator,
				@ForeignAddressString = @EmployerForeignAddressString,
				@GeolocationSharedIndicator = 1,
				@AuditUserName = @AuditUser,
				@ReturnCode = @ReturnCode OUTPUT,
				@ReturnMessage = @ReturnMessage OUTPUT;

		-- Set School Address 
		SET @AdminLevel = 0
		SELECT @AdminLevel = node.GetLevel() FROM dbo.gisLocation WHERE idfsLocation = @SchoolidfsLocation
		
		IF (@AdminLevel > 2)
			OR @SchoolForeignAddressIndicator = 1

			INSERT INTO @SupressSelect
			EXECUTE dbo.USSP_GBL_ADDRESS_SET_WITH_AUDITING 
				@GeolocationID = @SchoolGeoLocationID OUTPUT,
				@DataAuditEventID = @idfDataAuditEvent,
				@ResidentTypeID = NULL,
				@GroundTypeID = NULL,
				@GeolocationTypeID = NULL,
				@LocationID = @SchoolidfsLocation,
				@Apartment = @SchoolstrApartment,
				@Building = @SchoolstrBuilding,
				@StreetName = @SchoolstrStreetName,
				@House = @SchoolstrHouse,
				@PostalCodeString = @SchoolidfsPostalCode,
				@DescriptionString = NULL,
				@Distance = NULL,
				@Latitude = NULL,
				@Longitude = NULL,
				@Elevation = NULL,
				@Accuracy = NULL,
				@Alignment = NULL,
				@ForeignAddressIndicator = @SchoolForeignAddressIndicator,
				@ForeignAddressString = @SchoolForeignAddressString,
				@GeolocationSharedIndicator = 1,
				@AuditUserName = @AuditUser,
				@ReturnCode = @ReturnCode OUTPUT,
				@ReturnMessage = @ReturnMessage OUTPUT;

		-- Set Current Address 
		SET @AdminLevel = 0
		SELECT @AdminLevel = node.GetLevel() FROM dbo.gisLocation WHERE idfsLocation = @HumanidfsLocation
		
		IF (@AdminLevel > 2)
			INSERT INTO @SupressSelect
			EXECUTE dbo.USSP_GBL_ADDRESS_SET_WITH_AUDITING 
				@GeolocationID = @HumanGeoLocationID OUTPUT,
				@DataAuditEventID = @idfDataAuditEvent,
				@ResidentTypeID = NULL,
				@GroundTypeID = NULL,
				@GeolocationTypeID = NULL,
				@LocationID = @HumanidfsLocation,
				@Apartment = @HumanstrApartment,
				@Building = @HumanstrBuilding,
				@StreetName = @HumanstrStreetName,
				@House = @HumanstrHouse,
				@PostalCodeString = @HumanidfsPostalCode,
				@DescriptionString = NULL,
				@Distance = NULL,
				@Latitude = @HumanstrLatitude,
				@Longitude = @HumanstrLongitude,
				@Elevation = @HumanstrElevation,
				@Accuracy = NULL,
				@Alignment = NULL,
				@ForeignAddressIndicator = 0,
				@ForeignAddressString = NULL,
				@GeolocationSharedIndicator = 1, 
				@AuditUserName = @AuditUser,
				@ReturnCode = @ReturnCode OUTPUT,
				@ReturnMessage = @ReturnMessage OUTPUT;

		-- Set Permanent Address 
		SET @AdminLevel = 0
		SELECT @AdminLevel = node.GetLevel() FROM dbo.gisLocation WHERE idfsLocation = @HumanPermidfsLocation
		
		IF (@AdminLevel > 2)
			INSERT INTO @SupressSelect
			EXECUTE dbo.USSP_GBL_ADDRESS_SET_WITH_AUDITING 
				@GeolocationID = @HumanPermGeoLocationID OUTPUT,
				@DataAuditEventID = @idfDataAuditEvent,
				@ResidentTypeID = NULL,
				@GroundTypeID = NULL,
				@GeolocationTypeID = NULL,
				@LocationID = @HumanPermidfsLocation,
				@Apartment =@HumanPermstrApartment,
				@Building =@HumanPermstrBuilding,
				@StreetName =@HumanPermstrStreetName,
				@House =@HumanPermstrHouse,
				@PostalCodeString =@HumanPermidfsPostalCode,
				@DescriptionString = NULL,
				@Distance = NULL,
				@Latitude = NULL,
				@Longitude = NULL,
				@Elevation = NULL,
				@Accuracy = NULL,
				@Alignment = NULL,
				@ForeignAddressIndicator = 0,
				@ForeignAddressString = NULL,
				@GeolocationSharedIndicator = 1, 
				@AuditUserName = @AuditUser,
				@ReturnCode = @ReturnCode OUTPUT,
				@ReturnMessage = @ReturnMessage OUTPUT;

		-- Set Alternate Address
		SET @AdminLevel = 0
		SELECT @AdminLevel = node.GetLevel() FROM dbo.gisLocation WHERE idfsLocation = @HumanAltidfsLocation
		
		IF (@AdminLevel > 2) OR @HumanAltForeignAddressIndicator = 1
			INSERT INTO @SupressSelect
			EXECUTE dbo.USSP_GBL_ADDRESS_SET_WITH_AUDITING
				@GeolocationID = @HumanAltGeoLocationID OUTPUT,
				@DataAuditEventID = @idfDataAuditEvent,
				@ResidentTypeID = NULL,
				@GroundTypeID = NULL,
				@GeolocationTypeID = NULL,
				@LocationID = @HumanAltidfsLocation,
				@Apartment = @HumanAltstrApartment,
				@Building = @HumanAltstrBuilding,
				@StreetName = @HumanAltstrStreetName,
				@House = @HumanAltstrHouse,
				@PostalCodeString = @HumanAltidfsPostalCode,
				@DescriptionString = NULL,
				@Distance = NULL,
				@Latitude = NULL,
				@Longitude = NULL,
				@Elevation = NULL,
				@Accuracy = NULL,
				@Alignment = NULL,
				@ForeignAddressIndicator = @HumanAltForeignAddressIndicator,
				@ForeignAddressString = @HumanAltForeignAddressString,
				@GeolocationSharedIndicator = 1, 
				@AuditUserName = @AuditUser,
				@ReturnCode = @ReturnCode OUTPUT,
				@ReturnMessage = @ReturnMessage OUTPUT;

		IF @@TRANCOUNT > 0
			COMMIT TRANSACTION;

		SELECT @ReturnCode ReturnCode,
			@ReturnMessage ReturnMessage,
			@HumanMasterID HumanMasterID,
			@EIDSSPersonID EIDSSPersonID, 
			@HumanID HumanID;
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;

		SET @ReturnCode = ERROR_NUMBER();
		SET @ReturnMessage = ERROR_MESSAGE();
		SELECT @ReturnCode ReturnCode,
			@ReturnMessage ReturnMessage,
			@HumanMasterID HumanMasterID,
			@EIDSSPersonID EIDSSPersonID, 
			@HumanID HumanID;

		THROW;
	END CATCH;
END;
GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_Copy_Observation]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_Copy_Observation]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_Case_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_Case_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USSP_HUM_COPY_HUMAN_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_HUM_COPY_HUMAN_SET]';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_DEDUPLICATION_PERSON_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_DEDUPLICATION_PERSON_SET]';


GO
PRINT N'Update complete.';


GO
