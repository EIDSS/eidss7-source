/*
Deployment script for EIDSS7_GG

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
USE [$(DatabaseName)];


GO
PRINT N'Altering Function [dbo].[FN_REF_LABTESTNAMETODISEASE_GET]...';


GO
-- ====================================================================================================
-- Name: FN_REF_LABTESTTODISEASE_GET
-- Description:	Returns a comma separated string of lab test name associated with a disease
--							
-- Author: Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -----------------------------------------------
-- Ricky Moss		01/30/2019  Initial Release
-- Ricky Moss		02/08/2019	Included active clause
-- Ann Xiong		11/07/2022	Replaced comma in lab test name with semicolon to properly disply Lab Tests in the Disease Editor when in Edit mode
-- Mark Wilson		11/16/2022	Modified to select DISTINCT lab test name
--
-- Test Code:
-- SELECT dbo.FN_REF_LABTESTNAMETODISEASE_GET('en',55540680000288) 
-- ===================================================================================================

ALTER FUNCTION [dbo].[FN_REF_LABTESTNAMETODISEASE_GET]
(
	@LangID NVARCHAR(50),
	@idfsDiagnosis BIGINT
)
RETURNS NVARCHAR(4000)
AS
BEGIN
DECLARE @CSV NVARCHAR(4000) = '';

	IF @idfsDiagnosis IS NULL RETURN NULL;
	
	IF @idfsDiagnosis <> 0
	BEGIN
        WITH Results AS        
	    ( 
           SELECT DISTINCT REPLACE(tbr.name, ',', ';') AS strTestName
           FROM trtTestForDisease td
           JOIN dbo.FN_GBL_Reference_List_GET(@LangID, 19000097) tbr ON td.idfsTestName = tbr.idfsReference
           WHERE td.idfsDiagnosis = @idfsDiagnosis AND td.intRowStatus = 0
        )

        SELECT
         @CSV = STRING_AGG(strTestName, ', ')
        FROM results;
	END

	-- Return the result of the function
	RETURN @CSV;

END
GO
PRINT N'Altering Function [dbo].[FN_REF_LABTESTTODISEASE_GET]...';


GO
-- ====================================================================================================
-- Name: FN_REF_LABTESTTODISEASE_GET
-- Description:	Returns a comma separated string of lab test identifiers associated with a disease
--							
-- Author: Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -----------------------------------------------
-- Ricky Moss		01/30/2019  Initial Release
-- Ricky Moss		02/08/2019	Included active clause
-- Ann Xiong		11/16/2022	Modified to select DISTINCT lab test identifier
--
-- Test Code:
-- SELECT dbo.FN_REF_LABTESTTODISEASE_GET('en',55540680000288) 
-- ===================================================================================================
ALTER FUNCTION [dbo].[FN_REF_LABTESTTODISEASE_GET]
(
	@LangID NVARCHAR(50),
	@idfsDiagnosis BIGINT
)
RETURNS NVARCHAR(4000)
AS
BEGIN
DECLARE @CSV NVARCHAR(4000) = '';

	IF @idfsDiagnosis IS NULL RETURN NULL;
	
	IF @idfsDiagnosis <> 0
	BEGIN
		WITH results ([idfsTestName]) AS
		(
			SELECT DISTINCT(tbr.idfsReference) FROM trtTestForDisease td
			JOIN dbo.FN_GBL_Reference_List_GET(@LangID, 19000097) tbr ON td.idfsTestName = tbr.idfsReference 
			WHERE td.idfsDiagnosis = @idfsDiagnosis AND td.intRowStatus = 0
		)
		SELECT @CSV = STRING_AGG([idfsTestName], ',')
		FROM results;
	END

	-- Return the result of the function
	RETURN @CSV;

END
GO
PRINT N'Creating Function [dbo].[FN_UserSiteInformation]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO

-- =============================================
-- Author:		Manickandan govindarajan
-- Create date: 11/15/2022
-- Description:	Get Userid, SiteId for a given UserName
-- =============================================
CREATE FUNCTION dbo.FN_UserSiteInformation
(
	@UserName AS nvarchar(255)
)
RETURNS 
 @rtetUserSiteInformation TABLE
(
	UserId  bigint,
	SiteId  bigint
)
AS
BEGIN
	insert @rtetUserSiteInformation (UserId,SiteId)
	select tu.idfUserID,tu.idfsSite from AspNetUsers u 
		inner join tstUserTable tu on u.idfUserID = tu.idfUserID
		where upper(u.UserName) = upper(@UserName)
	
	RETURN 
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_DEDUPLICATION_HUMAN_DISEASE_Report_SET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_DEDUPLICATION_HUMAN_DISEASE_Report_SET
--
-- Description:	Deduplication for Livestock and Avian disease report record.
-- 
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mark Wilson		25May2022	Initial release
-- Mark Wilson		10Jun2022	update to 
-- Stephen Long     07/06/2022 Updates for site alerts to call new stored procedure.
-- Ann Xiong		11/14/2022	Updated to pass correct parameters to USP_HUM_HUMAN_DISEASE_DEL.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_DEDUPLICATION_HUMAN_DISEASE_Report_SET]
(
    @SupersededDiseaseReportID BIGINT,
    @LanguageID NVARCHAR(50),
    @SurvivorDiseaseReportID BIGINT,
    @idfHumanCaseRelatedTo BIGINT = NULL,
    @idfHuman BIGINT = NULL,                              -- tlbHumanCase.idfHuman
    @idfHumanActual BIGINT,                               -- tlbHumanActual.idfHumanActual
    @strHumanCaseId NVARCHAR(200) = '(new)',
    @idfsFinalDiagnosis BIGINT,                           -- tlbhumancase.idfsTentativeDiagnosis/idfsFinalDiagnosis
    @datDateOfDiagnosis DATETIME = NULL,                  --tlbHumanCase.datTentativeDiagnosisDate/datFinalDiagnosisDate
    @datNotificationDate DATETIME = NULL,                 --tlbHumanCase.DatNotIFicationDate
    @idfsFinalState BIGINT = NULL,                        --tlbHumanCase.idfsFinalState
    @strLocalIdentifier NVARCHAR(200) = NULL,
    @idfSentByOffice BIGINT = NULL,                       -- tlbHumanCase.idfSentByOffice
    @strSentByFirstName NVARCHAR(200) = NULL,             --tlbHumanCase.strSentByFirstName
    @strSentByPatronymicName NVARCHAR(200) = NULL,        --tlbHumancase.strSentByPatronymicName
    @strSentByLastName NVARCHAR(200) = NULL,              --tlbHumanCase.strSentByLastName
    @idfSentByPerson BIGINT = NULL,                       --tlbHumcanCase.idfSentByPerson
    @idfReceivedByOffice BIGINT = NULL,                   -- tlbHumanCase.idfReceivedByOffice
    @strReceivedByFirstName NVARCHAR(200) = NULL,         --tlbHumanCase.strReceivedByFirstName
    @strReceivedByPatronymicName NVARCHAR(200) = NULL,    --tlbHumanCase.strReceivedByPatronymicName
    @strReceivedByLastName NVARCHAR(200) = NULL,          --tlbHuanCase.strReceivedByLastName
    @idfReceivedByPerson BIGINT = NULL,                   -- tlbHumanCase.idfReceivedByPerson
    @idfsHospitalizationStatus BIGINT = NULL,             -- tlbHumanCase.idfsHospitalizationStatus
    @idfHospital BIGINT = NULL,                           -- tlbHumanCase.idfHospital
    @strCurrentLocation NVARCHAR(200) = NULL,             -- tlbHumanCase.strCurrentLocation
    @datOnSetDate DATETIME = NULL,                        -- tlbHumanCase.datOnSetDate
    @idfsInitialCaseStatus BIGINT = NULL,                 -- tlbHumanCase.idfsInitialCaseStatus
    @idfsYNPreviouslySoughtCare BIGINT = NULL,            --idfsYNPreviouslySoughtCare
    @datFirstSoughtCareDate DATETIME = NULL,              --tlbHumanCase.datFirstSoughtCareDate
    @idfSoughtCareFacility BIGINT = NULL,                 --tlbHumanCase.idfSoughtCareFacility
    @idfsNonNotIFiableDiagnosis BIGINT = NULL,            --tlbHumanCase.idfsNonNotIFiableDiagnosis
    @idfsYNHospitalization BIGINT = NULL,                 -- tlbHumanCase.idfsYNHospitalization
    @datHospitalizationDate DATETIME = NULL,              --tlbHumanCase.datHospitalizationDate 
    @datDischargeDate DATETIME = NULL,                    -- tlbHumanCase.datDischargeDate
    @strHospitalName NVARCHAR(200) = NULL,                --tlbHumanCase.strHospitalizationPlace  
    @idfsYNAntimicrobialTherapy BIGINT = NULL,            --  tlbHumanCase.idfsYNAntimicrobialTherapy 
    @strAntibioticName NVARCHAR(200) = NULL,              -- tlbHumanCase.strAntimicrobialTherapyName
    @strDosage NVARCHAR(200) = NULL,                      --tlbHumanCase.strDosage
    @datFirstAdministeredDate DATETIME = NULL,            -- tlbHumanCase.datFirstAdministeredDate
    @strAntibioticComments NVARCHAR(MAX) = NULL,          -- tlbHumanCase.strClinicalNotes , or strSummaryNotes
    @idfsYNSpecificVaccinationAdministered BIGINT = NULL, --  tlbHumanCase.idfsYNSpecIFicVaccinationAdministered
    @idfInvestigatedByOffice BIGINT = NULL,               -- tlbHumanCase.idfInvestigatedByOffice 
    @StartDateofInvestigation DATETIME = NULL,            -- tlbHumanCase.datInvestigationStartDate
    @idfsYNRelatedToOutbreak BIGINT = NULL,               -- tlbHumanCase.idfsYNRelatedToOutbreak
    @idfOutbreak BIGINT = NULL,                           --idfOutbreak  
    @idfsYNExposureLocationKnown BIGINT = NULL,           --tlbHumanCase.idfsYNExposureLocationKnown
    @idfPointGeoLocation BIGINT = NULL,                   --tlbHumanCase.idfPointGeoLocation
    @datExposureDate DATETIME = NULL,                     -- tlbHumanCase.datExposureDate 
    @idfsGeoLocationType BIGINT = NULL,                   --tlbGeolocation.idfsGeoLocationType
    @strLocationDescription NVARCHAR(MAX) = NULL,         --tlbGeolocation.Description
    @idfsLocationCountry BIGINT = NULL,                   --tlbGeolocation.idfsCountry 
    @idfsLocationRegion BIGINT = NULL,                    --tlbGeolocation.idfsRegion
    @idfsLocationRayon BIGINT = NULL,                     --tlbGeolocation.idfsRayon
    @idfsLocationSettlement BIGINT = NULL,                --tlbGeolocation.idfsSettlement
    @intLocationLatitude FLOAT = NULL,                    --tlbGeolocation.Latittude
    @intLocationLongitude FLOAT = NULL,                   --tlbGeolocation.Longitude
    @intElevation BIGINT = NULL,                          --GISSettlement.intElevation
    @idfsLocationGroundType BIGINT = NULL,                --tlbGeolocation.GroundType
    @intLocationDistance FLOAT = NULL,                    --tlbGeolocation.Distance
    @intLocationDirection FLOAT = NULL,                   --tlbGeolocation.Alignment	
    @strForeignAddress NVARCHAR(MAX) = NULL,              --tlbGeolocation.strForeignAddress 
    @strNote NVARCHAR(MAX) = NULL,                        --tlbhumancase.strNote
    @idfsFinalCaseStatus BIGINT = NULL,                   --tlbHuanCase.idfsFinalCaseStatus 
    @idfsOutcome BIGINT = NULL,                           -- --tlbHumanCase.idfsOutcome 
    @datDateofDeath DATETIME = NULL,                      -- tlbHumanCase.datDateOfDeath 
    @idfsCaseProgressStatus BIGINT = 10109001,            --	tlbHumanCase.reportStatus, default = In-process
    @idfPersonEnteredBy BIGINT = NULL,
    @strClinicalNotes NVARCHAR(2000) = NULL,
    @idfsYNSpecimenCollected BIGINT = NULL,
    @idfsYNTestsConducted BIGINT = NULL,
    @DiseaseReportTypeID BIGINT = NULL,
    @blnClinicalDiagBasis BIT = NULL,
    @blnLabDiagBasis BIT = NULL,
    @blnEpiDiagBasis BIT = NULL,
    @DateofClassification DATETIME = NULL,
    @strSummaryNotes NVARCHAR(MAX) = NULL,
    @idfEpiObservation BIGINT = NULL,
    @idfCSObservation BIGINT = NULL,
    @idfInvestigatedByPerson BIGINT = NULL,
    @strEpidemiologistsName NVARCHAR(MAX) = NULL,
    @idfsNotCollectedReason BIGINT = NULL,
    @strNotCollectedReason NVARCHAR(200) = NULL,
    @SamplesParameters NVARCHAR(MAX) = NULL,
    @TestsParameters NVARCHAR(MAX) = NULL,
    @TestsInterpretationParameters NVARCHAR(MAX) = NULL,
    @AntiviralTherapiesParameters NVARCHAR(MAX) = NULL,
    @VaccinationsParameters NVARCHAR(MAX) = NULL,
    @ContactsParameters NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL,
    @idfsHumanAgeType BIGINT = NULL,
    @intPatientAge INT = NULL,
    @datCompletionPaperFormDate DATETIME = NULL,
    @RowStatus INT,
    @idfsSite BIGINT = NULL,
    @AuditUser NVARCHAR(100) = '',
    @idfParentMonitoringSession BIGINT = NULL
)
AS
DECLARE @returnCode INT = 0
DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS'
DECLARE @RowID BIGINT = NULL,
        @RowAction NCHAR = NULL,
        @OrderNumber INT,
        @SampleID BIGINT,
        @SampleTypeID BIGINT = NULL,
        @HumanID BIGINT,
        @HumanMasterID BIGINT = NULL,
        @CollectedByPersonID BIGINT = NULL,
        @CollectedByOrganizationID BIGINT = NULL,
        @CollectionDate DATETIME = NULL,
        @SentDate DATETIME = NULL,
        @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
        @SampleStatusTypeID BIGINT = NULL,
        @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
        @SentToOrganizationID BIGINT = NULL,
        @ReadOnlyIndicator BIT = NULL,
        @AccessionDate DATETIME = NULL,
        @AccessionConditionTypeID BIGINT = NULL,
        @AccessionComment NVARCHAR(200) = NULL,
        @AccessionByPersonID BIGINT = NULL,
        @CurrentSiteID BIGINT = NULL,
        @TestID BIGINT,
        @TestNameTypeID BIGINT = NULL,
        @TestCategoryTypeID BIGINT = NULL,
        @TestResultTypeID BIGINT = NULL,
        @TestStatusTypeID BIGINT,
        @BatchTestID BIGINT = NULL,
        @TestNumber INT = NULL,
        @StartedDate DATETIME2 = NULL,
        @ResultDate DATETIME2 = NULL,
        @TestedByPersonID BIGINT = NULL,
        @TestedByOrganizationID BIGINT = NULL,
        @ResultEnteredByOrganizationID BIGINT = NULL,
        @ResultEnteredByPersonID BIGINT = NULL,
        @ValidatedByOrganizationID BIGINT = NULL,
        @ValidatedByPersonID BIGINT = NULL,
        @NonLaboratoryTestIndicator BIT,
        @ExternalTestIndicator BIT = NULL,
        @PerformedByOrganizationID BIGINT = NULL,
        @ReceivedDate DATETIME2 = NULL,
        @ContactPersonName NVARCHAR(200) = NULL,
        @TestHumanCaseID BIGINT = NULL,
        @TestInterpretationID BIGINT,
        @InterpretedStatusTypeID BIGINT = NULL,
        @InterpretedByOrganizationID BIGINT = NULL,
        @InterpretedByPersonID BIGINT = NULL,
        @TestingInterpretations BIGINT,
        @ValidatedStatusIndicator BIT = NULL,
        @ReportSessionCreatedIndicator BIT = NULL,
        @ValidatedComment NVARCHAR(200) = NULL,
        @InterpretedComment NVARCHAR(200) = NULL,
        @ValidatedDate DATETIME = NULL,
        @InterpretedDate DATETIME = NULL,
        @EventId BIGINT,
        @EventTypeId BIGINT = NULL,
        @EventSiteId BIGINT = NULL,
        @EventObjectId BIGINT = NULL,
        @EventUserId BIGINT = NULL,
        @EventDiseaseId BIGINT = NULL,
        @EventLocationId BIGINT = NULL,
        @EventInformationString NVARCHAR(MAX) = NULL,
        @EventLoginSiteId BIGINT = NULL,
        @MonitoringSessionActionID BIGINT,
        @ActionTypeID BIGINT,
        @ActionStatusTypeID BIGINT,
        @ActionDate DATETIME = NULL,
        @Comments NVARCHAR(500) = NULL,
        @DiseaseID BIGINT,
        @idfMonitoringSessionToDiagnosis BIGINT,
        @DateEntered DATETIME = GETDATE(),
        @DeleteID BIGINT = @SupersededDiseaseReportID,
        @SaveID BIGINT = @SurvivorDiseaseReportID


SET @AuditUser = ISNULL(@AuditUser, '')

DECLARE @SamplesTemp TABLE
(
    SampleID BIGINT NOT NULL,
    SampleTypeID BIGINT NULL,
    SampleStatusTypeID BIGINT NULL,
    CollectionDate DATETIME2 NULL,
    CollectedByOrganizationID BIGINT NULL,
    CollectedByPersonID BIGINT NULL,
    SentDate DATETIME2 NULL,
    SentToOrganizationID BIGINT NULL,
    EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
    Comments NVARCHAR(200) NULL,
    SiteID BIGINT NOT NULL,
    CurrentSiteID BIGINT NULL,
    DiseaseID BIGINT NULL,
    ReadOnlyIndicator BIT NULL,
    HumanID BIGINT NULL,
    HumanMasterID BIGINT NULL,
    RowStatus INT NOT NULL,
    RowAction CHAR(1) NULL
);

DECLARE @SamplesTemp2 TABLE (SampleID BIGINT NOT NULL);

DECLARE @TestsTemp TABLE
(
    TestID BIGINT NOT NULL,
    TestNameTypeID BIGINT NULL,
    TestCategoryTypeID BIGINT NULL,
    TestResultTypeID BIGINT NULL,
    TestStatusTypeID BIGINT NOT NULL,
    DiseaseID BIGINT NULL,
    SampleID BIGINT NULL,
    BatchTestID BIGINT NULL,
    ObservationID BIGINT NULL,
    TestNumber INT NULL,
    Comments NVARCHAR NULL,
    StartedDate DATETIME2 NULL,
    ResultDate DATETIME2 NULL,
    TestedByOrganizationID BIGINT NULL,
    TestedByPersonID BIGINT NULL,
    ResultEnteredByOrganizationID BIGINT NULL,
    ResultEnteredByPersonID BIGINT NULL,
    ValidatedByOrganizationID BIGINT NULL,
    ValidatedByPersonID BIGINT NULL,
    ReadOnlyIndicator BIT NOT NULL,
    NonLaboratoryTestIndicator BIT NOT NULL,
    ExternalTestIndicator BIT NULL,
    PerformedByOrganizationID BIGINT NULL,
    ReceivedDate DATETIME2 NULL,
    ContactPersonName NVARCHAR(200) NULL,
    RowStatus INT NOT NULL,
    RowAction CHAR(1) NULL
);

DECLARE @TestsInterpretationParametersTemp TABLE
(
    TestInterpretationID BIGINT NOT NULL,
    DiseaseID BIGINT NULL,
    InterpretedStatusTypeID BIGINT NULL,
    ValidatedByOrganizationID BIGINT NULL,
    ValidatedByPersonID BIGINT NULL,
    InterpretedByOrganizationID BIGINT NULL,
    InterpretedByPersonID BIGINT NULL,
    TestID BIGINT NOT NULL,
    ValidatedStatusIndicator BIT NULL,
    ReportSessionCreatedIndicator BIT NULL,
    ValidatedComment NVARCHAR(200) NULL,
    InterpretedComment NVARCHAR(200) NULL,
    ValidatedDate DATETIME NULL,
    InterpretedDate DATETIME NULL,
    ReadOnlyIndicator BIT NOT NULL,
    RowStatus INT NOT NULL,
    RowAction INT NULL
);
DECLARE @EventsTemp TABLE
(
    EventId BIGINT NOT NULL,
    EventTypeId BIGINT NULL,
    UserId BIGINT NULL,
    SiteId BIGINT NULL,
    LoginSiteId BIGINT NULL,
    ObjectId BIGINT NULL,
    DiseaseId BIGINT NULL,
    LocationId BIGINT NULL,
    InformationString NVARCHAR(MAX) NULL
);

DECLARE @AntiViralTemp TABLE (idfAntimicrobialTherapy BIGINT);

INSERT INTO @AntiViralTemp
(
    idfAntimicrobialTherapy
)
SELECT idfAntimicrobialTherapy
FROM
    OPENJSON(@AntiviralTherapiesParameters)
    WITH
    (
        idfAntimicrobialTherapy BIGINT
    );

DECLARE @ContactsTemp TABLE (ContactedCasePersonId BIGINT NOT NULL);

INSERT INTO @ContactsTemp
(
    ContactedCasePersonId
)
SELECT ContactedCasePersonId
FROM
    OPENJSON(@ContactsParameters)
    WITH
    (
        ContactedCasePersonId BIGINT
    );


DECLARE @EventsTemp2 TABLE (EventId BIGINT NOT NULL);

DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200)
);

BEGIN
    BEGIN TRY
        SET @SamplesParameters = REPLACE(@SamplesParameters, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@SamplesParameters)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                SampleStatusTypeID BIGINT,
                CollectionDate DATETIME2,
                CollectedByOrganizationID BIGINT,
                CollectedByPersonID BIGINT,
                SentDate DATETIME2,
                SentToOrganizationID BIGINT,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                Comments NVARCHAR(200),
                SiteID BIGINT,
                CurrentSiteID BIGINT,
                DiseaseID BIGINT,
                ReadOnlyIndicator BIT,
                HumanID BIGINT,
                HumanMasterID BIGINT,
                RowStatus INT,
                RowAction CHAR(1)
            );

        INSERT INTO @SamplesTemp2
        SELECT SampleID
        FROM
            OPENJSON(@SamplesParameters)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                SampleStatusTypeID BIGINT,
                CollectionDate DATETIME2,
                CollectedByOrganizationID BIGINT,
                CollectedByPersonID BIGINT,
                SentDate DATETIME2,
                SentToOrganizationID BIGINT,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                Comments NVARCHAR(200),
                SiteID BIGINT,
                CurrentSiteID BIGINT,
                DiseaseID BIGINT,
                ReadOnlyIndicator BIT,
                HumanID BIGINT,
                HumanMasterID BIGINT,
                RowStatus INT,
                RowAction CHAR(1)
            );


        SET @TestsParameters = REPLACE(@TestsParameters, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @TestsTemp
        SELECT *
        FROM
            OPENJSON(@TestsParameters)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Comments NVARCHAR(500),
                StartedDate DATETIME2,
                ResultDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                RowStatus INT,
                RowAction CHAR(1)
            );



        INSERT INTO @TestsInterpretationParametersTemp
        SELECT *
        FROM
            OPENJSON(@TestsInterpretationParameters)
            WITH
            (
                TestInterpretationID BIGINT,
                DiseaseID BIGINT,
                InterpretedStatusTypeID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                InterpretedByOrganizationID BIGINT,
                InterpretedByPersonID BIGINT,
                TestID BIGINT,
                ValidatedStatusIndicator BIT,
                ReportSessionCreatedIndicator BIT,
                ValidatedComment NVARCHAR(200),
                InterpretedComment NVARCHAR(200),
                ValidatedDate DATETIME2,
                InterpretedDate DATETIME2,
                ReadOnlyIndicator BIT,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        INSERT INTO @EventsTemp2
        SELECT EventId
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        DECLARE @VaccinationsTemp TABLE (humanDiseaseReportVaccinationUID BIGINT NOT NULL);

        INSERT INTO @VaccinationsTemp
        SELECT *
        FROM
            OPENJSON(@VaccinationsParameters)
            WITH
            (
                humanDiseaseReportVaccinationUID BIGINT
            )


        BEGIN TRANSACTION

        DECLARE @SupressSELECT TABLE
        (
            retrunCode INT,
            returnMessage VARCHAR(200)
        )
        DECLARE @SupressSELECTHumanCase TABLE
        (
            retrunCode INT,
            returnMessage VARCHAR(200) --,
        -- idfHumanCase BIGINT
        )
        DECLARE @SupressSELECTHuman TABLE
        (
            retrunCode INT,
            returnMessage VARCHAR(200),
            idfHuman BIGINT
        )

        DECLARE @SupressSELECTGeoLocation TABLE
        (
            returnCode INT,
            returnMsg VARCHAR(200),
            idfGeoLocation BIGINT
        )


        SET @DiseaseID = @idfsFinalDiagnosis

        DECLARE @HumanDiseasereportRelnUID BIGINT

        DECLARE @COPYHUMANACTUALTOHUMAN_ReturnCode INT = 0

        -- Create a human record FROM Human Actual if not already present
        IF @idfHumanActual IS NOT NULL -- AND @idfHumanCase IS  NULL
        BEGIN
            INSERT INTO @SupressSELECTHumanCase
            EXEC dbo.USP_HUM_COPYHUMANACTUALTOHUMAN @idfHumanActual,
                                                    @idfHuman OUTPUT,
                                                    @returnCode OUTPUT,
                                                    @returnMsg OUTPUT
            IF @returnCode <> 0
            BEGIN
                RETURN
            END
        END

        --TODO: Needs to be refactored to use Hierarchy
        -- Insert or update geolocation record if any of the information is provided
        IF @idfsLocationGroundType IS NOT NULL
           OR @idfsGeoLocationType IS NOT NULL
           OR @idfsLocationCountry IS NOT NULL
           OR @idfsLocationRegion IS NOT NULL
           OR @idfsLocationRayon IS NOT NULL
           OR @idfsLocationSettlement IS NOT NULL
           OR @strLocationDescription IS NOT NULL
           OR @intLocationLatitude IS NOT NULL
           OR @intLocationLongitude IS NOT NULL
           OR @intLocationDistance IS NOT NULL
           OR @intLocationDirection IS NOT NULL
           OR @strForeignAddress IS NOT NULL
           OR @intElevation IS NOT NULL
        BEGIN
            -- Set geo location 
            IF @idfPointGeoLocation IS NULL
            BEGIN
                INSERT INTO @SupressSELECT
                EXEC dbo.USP_GBL_NEXTKEYID_GET @tableName = 'tlbGeoLocation',
                                               @idfsKey = @idfPointGeoLocation OUTPUT
            END

            BEGIN
                INSERT INTO @SupressSELECTGeoLocation
                EXECUTE [dbo].[USP_HUMAN_DISEASE_GEOLOCATION_SET] @idfPointGeoLocation,
                                                                  @idfsLocationGroundType,
                                                                  @idfsGeoLocationType,
                                                                  @idfsLocationCountry,
                                                                  @idfsLocationRegion,
                                                                  @idfsLocationRayon,
                                                                  @idfsLocationSettlement,
                                                                  @strLocationDescription,
                                                                  @intLocationLatitude,
                                                                  @intLocationLongitude,
                                                                  NULL,
                                                                  @intLocationDistance,
                                                                  @intLocationDirection,
                                                                  @strForeignAddress,
                                                                  1,
                                                                  @intElevation,
                                                                  @AuditUser
            END
        END

        BEGIN
            UPDATE dbo.tlbHumanCase
            SET strCaseId = @strHumanCaseId,
                idfsTentativeDiagnosis = @idfsFinalDiagnosis,
                idfsFinalDiagnosis = @idfsFinalDiagnosis,
                datTentativeDiagnosisDate = @datDateOfDiagnosis,
                datFinalDiagnosisDate = @datDateOfDiagnosis,
                datNotIFicationDate = @datNotificationDate,
                idfsFinalState = @idfsFinalState,
                idfSentByOffice = @idfSentByOffice,
                strSentByFirstName = @strSentByFirstName,
                strSentByPatronymicName = @strSentByPatronymicName,
                strSentByLastName = @strSentByLastName,
                idfSentByPerson = @idfSentByPerson,
                idfReceivedByOffice = @idfReceivedByOffice,
                strReceivedByFirstName = @strReceivedByFirstName,
                strReceivedByPatronymicName = @strReceivedByPatronymicName,
                strReceivedByLastName = @strReceivedByLastName,
                idfReceivedByPerson = @idfReceivedByPerson,
                strLocalIdentifier = @strLocalIdentifier,
                idfsHospitalizationStatus = @idfsHospitalizationStatus,
                idfHospital = @idfHospital,
                strCurrentLocation = @strCurrentLocation,
                datOnSetDate = @datOnSetDate,
                idfsInitialCaseStatus = @idfsInitialCaseStatus,
                idfsYNPreviouslySoughtCare = @idfsYNPreviouslySoughtCare,
                datFirstSoughtCareDate = @datFirstSoughtCareDate,
                idfSoughtCareFacility = @idfSoughtCareFacility,
                idfsNonNotIFiableDiagnosis = @idfsNonNotIFiableDiagnosis,
                idfsYNHospitalization = @idfsYNHospitalization,
                datHospitalizationDate = @datHospitalizationDate,
                datDischargeDate = @datDischargeDate,
                strHospitalizationPlace = @strHospitalName,
                idfsYNAntimicrobialTherapy = @idfsYNAntimicrobialTherapy,
                strClinicalNotes = @strClinicalNotes,
                idfsYNSpecificVaccinationAdministered = @idfsYNSpecificVaccinationAdministered,
                idfInvestigatedByOffice = @idfInvestigatedByOffice,
                datInvestigationStartDate = @StartDateofInvestigation,
                idfsYNRelatedToOutbreak = @idfsYNRelatedToOutbreak,
                idfOutbreak = @idfOutbreak,
                idfsYNExposureLocationKnown = @idfsYNExposureLocationKnown,
                idfPointGeoLocation = @idfPointGeoLocation,
                datExposureDate = @datExposureDate,
                strNote = @strNote,
                idfsFinalCaseStatus = @idfsFinalCaseStatus,
                idfsOutcome = @idfsOutcome,
                idfsCaseProgressStatus = @idfsCaseProgressStatus,
                datModificationDate = GETDATE(),
                idfsYNSpecimenCollected = @idfsYNSpecimenCollected,
                idfsYNTestsConducted = @idfsYNTestsConducted,
                DiseaseReportTypeID = @DiseaseReportTypeID,
                blnClinicalDiagBasis = @blnClinicalDiagBasis,
                blnLabDiagBasis = @blnLabDiagBasis,
                blnEpiDiagBasis = @blnEpiDiagBasis,
                datFinalCaseClassificationDate = @DateofClassification,
                strsummarynotes = @strSummaryNotes,
                idfEpiObservation = @idfEpiObservation,
                idfCSObservation = @idfCSObservation,
                strEpidemiologistsName = @strEpidemiologistsName,
                idfsNotCollectedReason = @idfsNotCollectedReason,
                strNotCollectedReason = @strNotCollectedReason,
                idfsHumanAgeType = @idfsHumanAgeType,
                intPatientAge = @intPatientAge,
                datCompletionPaperFormDate = @datCompletionPaperFormDate,
                idfInvestigatedByPerson = @idfInvestigatedByPerson,
                idfPersonEnteredBy = @idfPersonEnteredBy,
                idfsSite = @idfsSite,
                AuditUpdateUser = @AuditUser,
                AuditUpdateDTM = GETDATE(),
                idfParentMonitoringSession = @idfParentMonitoringSession
            WHERE idfHumanCase = @SaveID
                  AND intRowStatus = 0

        END

        ----set Samples for this idfHumanCase	
        IF @SamplesParameters IS NOT NULL
        BEGIN

            WHILE EXISTS (SELECT * FROM @SamplesTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = SampleID,
                    @SampleID = SampleID,
                    @SampleTypeID = SampleTypeID,
                    @CollectedByPersonID = CollectedByPersonID,
                    @CollectedByOrganizationID = CollectedByOrganizationID,
                    @CollectionDate = CAST(CollectionDate AS DATETIME),
                    @SentDate = CAST(SentDate AS DATETIME),
                    @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                    @SampleStatusTypeID = SampleStatusTypeID,
                    @Comments = Comments,
                    @idfsSite = SiteID,
                    @CurrentSiteID = CurrentSiteID,
                    @RowStatus = RowStatus,
                    @SentToOrganizationID = SentToOrganizationID,
                    @DiseaseID = DiseaseID,
                    @ReadOnlyIndicator = ReadOnlyIndicator,
                    @HumanID = HumanID,
                    @HumanMasterID = HumanMasterID,
                    @RowAction = RowAction
                FROM @SamplesTemp;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_SAMPLE_SET @AuditUserName = @AuditUser,
                                                @SampleID = @SampleID OUTPUT,
                                                @SampleTypeID = @SampleTypeID,
                                                @RootSampleID = NULL,
                                                @ParentSampleID = NULL,
                                                @HumanID = @idfHuman,
                                                @SpeciesID = NULL,
                                                @AnimalID = NULL,
                                                @VectorID = NULL,
                                                @MonitoringSessionID = NULL,
                                                @VectorSessionID = NULL,
                                                @HumanDiseaseReportID = @SaveID,
                                                @VeterinaryDiseaseReportID = NULL,
                                                @CollectionDate = @CollectionDate,
                                                @CollectedByPersonID = @CollectedByPersonID,
                                                @CollectedByOrganizationID = @CollectedByOrganizationID,
                                                @SentDate = @SentDate,
                                                @SentToOrganizationID = @SentToOrganizationID,
                                                @EIDSSLocalFieldSampleID = @EIDSSLocalOrFieldSampleID,
                                                @SiteID = @idfsSite,
                                                @EnteredDate = @DateEntered,
                                                @ReadOnlyIndicator = @ReadOnlyIndicator,
                                                @SampleStatusTypeID = @SampleStatusTypeID,
                                                @Comments = @Comments,
                                                @CurrentSiteID = @CurrentSiteID,
                                                @DiseaseID = @DiseaseID,
                                                @BirdStatusTypeID = NULL,
                                                @RowStatus = @RowStatus,
                                                @RowAction = @RowAction

                UPDATE @TestsTemp
                SET SampleID = @SampleID
                WHERE SampleID = @RowID

                DELETE FROM @SamplesTemp
                WHERE SampleID = @RowID
            END
        END
        IF @TestsParameters IS NOT NULL
        BEGIN
            WHILE EXISTS (SELECT * FROM @TestsTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = TestID,
                    @TestID = TestID,
                    @TestNameTypeID = TestNameTypeID,
                    @TestCategoryTypeID = TestCategoryTypeID,
                    @TestResultTypeID = TestResultTypeID,
                    @TestStatusTypeID = TestStatusTypeID,
                    @DiseaseID = DiseaseID,
                    @SampleID = SampleID,
                    @Comments = Comments,
                    @RowStatus = RowStatus,
                    @StartedDate = StartedDate,
                    @ResultDate = ResultDate,
                    @TestedByOrganizationID = TestedByOrganizationID,
                    @TestedByPersonID = TestedByPersonID,
                    @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                    @ResultEnteredByPersonID = ResultEnteredByPersonID,
                    @ValidatedByOrganizationID = ValidatedByOrganizationID,
                    @ValidatedByPersonID = ValidatedByPersonID,
                    @ReadOnlyIndicator = ReadOnlyIndicator,
                    @NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
                    @ExternalTestIndicator = ExternalTestIndicator,
                    @PerformedByOrganizationID = PerformedByOrganizationID,
                    @ReceivedDate = ReceivedDate,
                    @ContactPersonName = ContactPersonName,
                    @RowAction = RowAction
                FROM @TestsTemp;


                --If record is being soft-deleted, then check if the test record was originally created 
                --in the laboaratory module.  If it was, then disassociate the test record from the 
                --human monitoring session, so that the test record remains in the laboratory module 
                --for further action.
                IF @RowStatus = 1
                   AND @NonLaboratoryTestIndicator = 0
                BEGIN
                    SET @RowStatus = 0;
                END
                ELSE
                BEGIN
                    SET @TestHumanCaseID = @TestHumanCaseId
                END;

                ------set Tests for this idfHumanCase
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_TEST_SET @LanguageID = @LanguageID,
                                              @TestID = @TestID OUTPUT,
                                              @TestNameTypeID = @TestNameTypeID,
                                              @TestCategoryTypeID = @TestCategoryTypeID,
                                              @TestResultTypeID = @TestResultTypeID,
                                              @TestStatusTypeID = @TestStatusTypeID,
                                              @DiseaseID = @DiseaseID,
                                              @SampleID = @SampleID,
                                              @BatchTestID = NULL,
                                              @ObservationID = NULL,
                                              @TestNumber = NULL,
                                              @Comments = @Comments,
                                              @RowStatus = @RowStatus,
                                              @StartedDate = @StartedDate,
                                              @ResultDate = @ResultDate,
                                              @TestedByOrganizationID = @TestedByOrganizationID,
                                              @TestedByPersonID = @TestedByPersonID,
                                              @ResultEnteredByOrganizationID = @ResultEnteredByOrganizationID,
                                              @ResultEnteredByPersonID = @ResultEnteredByPersonID,
                                              @ValidatedByOrganizationID = @ValidatedByOrganizationID,
                                              @ValidatedByPersonID = @ValidatedByPersonID,
                                              @ReadOnlyIndicator = @ReadOnlyIndicator,
                                              @NonLaboratoryTestIndicator = @NonLaboratoryTestIndicator,
                                              @ExternalTestIndicator = @ExternalTestIndicator,
                                              @PerformedByOrganizationID = @PerformedByOrganizationID,
                                              @ReceivedDate = @ReceivedDate,
                                              @ContactPerson = @ContactPersonName,
                                              @MonitoringSessionID = NULL,
                                              @VectorSessionID = NULL,
                                              @HumanDiseaseReportID = @SaveID,
                                              @VeterinaryDiseaseReportID = NULL,
                                              @AuditUserName = @AuditUser,
                                              @RowAction = @RowAction;

                UPDATE @TestsInterpretationParametersTemp
                SET TestID = @TestID
                WHERE TestID = @RowID

                DELETE FROM @TestsTemp
                WHERE TestID = @RowID;
            END;
        END


        Declare @sampleCount int
        Set @sampleCount =
        (
            SELECT Count(*)
            FROM dbo.tlbMaterial
            WHERE intRowStatus = 0
                  and idfHumanCase = @SurvivorDiseaseReportID
        )

        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @SaveID
                  AND idfsYNSpecimenCollected = 10100002
        )
        Begin
            UPDATE dbo.tlbMaterial
            SET intRowStatus = 1,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @SaveID
        END
        ELSE IF EXISTS
        (
            SELECT *
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @SaveID
                  AND idfsYNSpecimenCollected = 10100003
        )
        BEGIN
            UPDATE dbo.tlbHumanCase
            SET idfsNotCollectedReason = NULL,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @SaveID;

            UPDATE dbo.tlbMaterial
            SET intRowStatus = 1,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @SaveID;

        END
        ELSE IF EXISTS
        (
            SELECT *
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @SaveID
                  AND idfsYNSpecimenCollected = 10100001
        )
        BEGIN
            UPDATE dbo.tlbHumanCase
            SET idfsNotCollectedReason = NULL,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @SaveID
            IF (@sampleCount = 0)
            BEGIN
                UPDATE dbo.tlbHumanCase
                SET idfsYNSpecimenCollected = NULL,
                    AuditUpdateUser = @AuditUser
                WHERE idfHumanCase = @SaveID
            END

        END

        IF @TestsInterpretationParameters IS NOT NULL
        BEGIN
            WHILE EXISTS (SELECT * FROM @TestsInterpretationParametersTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = TestInterpretationID,
                    @TestInterpretationID = TestInterpretationID,
                    @DiseaseID = DiseaseID,
                    @InterpretedStatusTypeID = InterpretedStatusTypeID,
                    @ValidatedByOrganizationID = ValidatedByOrganizationID,
                    @ValidatedByPersonID = ValidatedByPersonID,
                    @InterpretedByOrganizationID = InterpretedByOrganizationID,
                    @InterpretedByPersonID = InterpretedByPersonID,
                    @TestID = TestID,
                    @ValidatedStatusIndicator = ValidatedStatusIndicator,
                    @ReportSessionCreatedIndicator = ReportSessionCreatedIndicator,
                    @ValidatedComment = ValidatedComment,
                    @InterpretedComment = InterpretedComment,
                    @ValidatedDate = ValidatedDate,
                    @InterpretedDate = InterpretedDate,
                    @RowStatus = RowStatus,
                    @ReadOnlyIndicator = ReadOnlyIndicator,
                    @RowAction = RowAction
                FROM @TestsInterpretationParametersTemp;

                INSERT INTO @SuppressSelect
                EXEC dbo.USSP_GBL_TEST_INTERPRETATION_SET @AuditUserName = @AuditUser,
                                                          @TestInterpretationID = @TestInterpretationID OUTPUT,
                                                          @DiseaseID = @DiseaseID,
                                                          @InterpretedStatusTypeID = @InterpretedStatusTypeID,
                                                          @ValidatedByOrganizationID = @ValidatedByOrganizationID,
                                                          @ValidatedByPersonID = @ValidatedByPersonID,
                                                          @InterpretedByOrganizationID = @InterpretedByOrganizationID,
                                                          @InterpretedByPersonID = @InterpretedByPersonID,
                                                          @TestID = @TestID,
                                                          @ValidateStatusIndicator = @ValidatedStatusIndicator,
                                                          @ReportSessionCreatedIndicator = @ReportSessionCreatedIndicator,
                                                          @ValidationComment = @ValidatedComment,
                                                          @InterpretationComment = @InterpretedComment,
                                                          @ValidationDate = @ValidatedDate,
                                                          @InterpretationDate = @InterpretedDate,
                                                          @RowStatus = @RowStatus,
                                                          @ReadOnlyIndicator = @ReadOnlyIndicator,
                                                          @RowAction = @RowAction;

                DELETE FROM @TestsInterpretationParametersTemp
                WHERE TestInterpretationID = @RowID;
            END;
        END

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                            @EventTypeId,
                                            @EventUserId,
                                            @EventObjectId,
                                            @EventDiseaseId,
                                            @EventSiteId,
                                            @EventInformationString,
                                            @EventLoginSiteId,
                                            @EventLocationId,
                                            @AuditUser;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        --------set AntiviralTherapies for this idfHumanCase
        IF @AntiviralTherapiesParameters IS NOT NULL
        BEGIN

            EXEC dbo.USSP_HUMAN_DISEASE_ANTIVIRALTHERAPIES_SET @idfHumanCase = @SaveID,
                                                               @AntiviralTherapiesParameters = @AntiviralTherapiesParameters,
                                                               @outbreakCall = 0,
                                                               @User = @AuditUser
        END
        --------set Vaccinations for this idfHumanCase
        IF @VaccinationsParameters IS NOT NULL
        BEGIN
            EXEC dbo.USSP_HUMAN_DISEASE_VACCINATIONS_DEDUP_SET @idfHumanCase = @SaveID,
                                                               @VaccinationsParameters = @VaccinationsParameters,
                                                               @outbreakCall = 0,
                                                               @User = @AuditUser
        END

        IF @ContactsParameters IS NOT NULL
        BEGIN
            EXEC dbo.USSP_GBL_CONTACT_DEDUP_SET @Contacts = @ContactsParameters,
                                                @SiteID = @CurrentSiteID,
                                                @AuditUSerName = @AuditUser,
                                                @idfHumanCase = @SaveID
        END

        ------ UPDATE tlbHuman IF datDateofDeath is provided.
        IF @datDateofDeath IS NOT NULL
        BEGIN
            UPDATE dbo.tlbHuman
            SET datDateofDeath = @datDateofDeath,
                AuditUpdateUser = @AuditUser
            WHERE idfHuman = @idfHuman
        END

        ----------------------------------------------------------------------------------------------------------------
        -- delete the Superseded disease report
        BEGIN
            PRINT 'Delete superseded record'

            INSERT INTO @SuppressSelect
            (
                ReturnCode,
                ReturnMessage
            )
            EXEC dbo.USP_HUM_HUMAN_DISEASE_DEL 
				@idfHumanCase = @SupersededDiseaseReportID,
				@idfUserID = @EventUserId,
				@idfSiteId = @idfsSite,
				@DeduplicationIndicator = 1 -- deduplication

        END;

        ----------------------------------------------------------------------------------------------------------------
        -- remove tests associated with samples that aren't associated with survivor disease report
        UPDATE dbo.tlbTesting
        SET intRowStatus = 1,
            AuditUpdateUser = @AuditUser,
            AuditUpdateDTM = GETDATE()
        WHERE idfMaterial IN (
                                 SELECT idfMaterial
                                 FROM dbo.tlbMaterial
                                 WHERE (
                                           idfHumanCase = @SaveID
                                           OR idfHumanCase = @DeleteID
                                       )
                                       AND idfMaterial NOT IN (
                                                                  SELECT SampleID FROM @SamplesTemp2
                                                              )
                             )

        ----------------------------------------------------------------------------------------------------------------
        -- remove test interpretations associated with samples that aren't associated with survivor disease report
        UPDATE dbo.tlbTestValidation
        SET intRowStatus = 1,
            AuditUpdateUser = @AuditUser,
            AuditUpdateDTM = GETDATE()
        WHERE idfTesting IN (
                                SELECT idfTesting
                                FROM dbo.tlbTesting
                                WHERE idfMaterial IN (
                                                         SELECT idfMaterial
                                                         FROM dbo.tlbMaterial
                                                         WHERE (
                                                                   idfHumanCase = @SaveID
                                                                   OR idfHumanCase = @DeleteID
                                                               )
                                                               AND idfMaterial NOT IN (
                                                                                          SELECT SampleID FROM @SamplesTemp2
                                                                                      )
                                                     )
                            )

        ----------------------------------------------------------------------------------------------------------------
        -- remove penside tests associated with samples that aren't associated with survivor disease report
        UPDATE dbo.tlbPensideTest
        SET intRowStatus = 1,
            AuditUpdateUser = @AuditUser,
            AuditUpdateDTM = GETDATE()
        WHERE idfMaterial IN (
                                 SELECT idfMaterial
                                 FROM dbo.tlbMaterial
                                 WHERE (
                                           idfHumanCase = @SaveID
                                           OR idfHumanCase = @DeleteID
                                       )
                                       AND idfMaterial NOT IN (
                                                                  SELECT SampleID FROM @SamplesTemp2
                                                              )
                             )

        -- disease report samples that are no longer needed
        UPDATE dbo.tlbMaterial
        SET idfHumanCase = NULL,
            AuditUpdateUser = @AuditUser,
            AuditUpdateDTM = GETDATE()
        WHERE (
                  idfHumanCase = @SaveID
                  OR idfHumanCase = @DeleteID
              )
              AND idfMaterial NOT IN (
                                         SELECT SampleID FROM @SamplesTemp2
                                     )


        -- remove AntiMicrobialTherapy records from superseded report
        UPDATE dbo.tlbAntimicrobialTherapy
        SET intRowStatus = 1,
            AuditUpdateUser = @AuditUser,
            AuditUpdateDTM = GETDATE()
        WHERE (
                  idfHumanCase = @SaveID
                  OR idfHumanCase = @DeleteID
              )
              AND idfAntimicrobialTherapy NOT IN (
                                                     SELECT idfAntimicrobialTherapy FROM @AntiViralTemp
                                                 )

        ------- remove vaccination records from superseded report
        UPDATE dbo.HumanDiseaseReportVaccination
        SET intRowStatus = 1,
            AuditUpdateUser = @AuditUser,
            AuditUpdateDTM = GETDATE()
        WHERE (
                  idfHumanCase = @SaveID
                  OR idfHumanCase = @DeleteID
              )
              AND humanDiseaseReportVaccinationUID NOT IN (
                                                              SELECT humanDiseaseReportVaccinationUID FROM @VaccinationsTemp
                                                          )

        -- remove vaccination records from superseded report
        UPDATE dbo.tlbContactedCasePerson
        SET intRowStatus = 1,
            AuditUpdateUser = @AuditUser,
            AuditUpdateDTM = GETDATE()
        WHERE (
                  idfHumanCase = @SaveID
                  OR idfHumanCase = @DeleteID
              )
              AND idfContactedCasePerson NOT IN (
                                                    SELECT ContactedCasePersonId FROM @ContactsTemp
                                                )

        IF @@TRANCOUNT > 0
            COMMIT TRAN

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMsg AS ReturnMessage,
               @SurvivorDiseaseReportID AS SurvivorDiseaseReportID,
               @strHumanCaseId AS strHumanCaseID,
               @HumanID AS idfHuman

    END TRY
    BEGIN CATCH
        SELECT @ReturnCode AS ReturnCode,
               @ReturnMsg AS ReturnMessage,
               @SurvivorDiseaseReportID AS SurvivorDiseaseReportID,
               @strHumanCaseId AS strHumanCaseID,
               @HumanID AS idfHuman
        IF @@Trancount > 0
            ROLLBACK TRAN;

        THROW;

    END CATCH

END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_IE_Resource_GETList]...';


GO
--*************************************************************
-- Name 				:USP_ADMIN_IE_Resource_GETList
-- Description			:Returns all the resources that belong to a 
--						 given resource set.  These are the resources that
--						 can be edited in the interface editor.
--          
-- Author               : Mike Kornegay
--
-- Revision History
--	Name			Date		Change Detail
--	Mike Kornegay	6/22/2021	Original
--	Mike Kornegay	6/29/2021	Add parameterized sorting
--  Mike Kornegay	7/5/2021	Add search functionality
--	Mike Kornegay	7/21/2021	Add the all modules functionality
--  Mike Kornegay	9/1/2021	Update to remove idfsResourceType from trtResourceSetToResource
--	Mike Kornegay	10/15/2021	Added TotalRowCount, TotalPages, and CurrentPage and fixed paging
--  Mike Kornegay   10/27/2021  Filter out softdeleted resources (intRowStatus = 1)
--  Leo Tracchia	11/14/2022  added return for module name on search and sorting on additional fields (DevOps #4894)
-- Testing code:
/*
	EXEC USP_ADMIN_IE_Resource_GETList 40, 'en-US'
	EXEC USP_ADMIN_IE_Resource_GETList 40, 'ar-JO'
	EXEC USP_ADMIN_IE_Resource_GETList 40, 'ru'
	EXEC USP_ADMIN_IE_Resource_GETList 40, 'en-US'
	EXEC USP_ADMIN_IE_Resource_GETList 40, 'az-Latn-AZ'
*/
--*************************************************************
ALTER PROCEDURE [dbo].[USP_ADMIN_IE_Resource_GETList]
(
@moduleId bigint = null
	,@idfsResourceSet BIGINT = NULL
	,@langId NVARCHAR(10)
	,@sortColumn NVARCHAR(30) = 'strResourceName' 
	,@sortOrder NVARCHAR(4) = 'asc'
	,@searchString NVARCHAR(100) = NULL
	,@includedTypes NVARCHAR(2000) = NULL
	,@allModules BIT = NULL
	,@isRequired BIT = NULL
	,@isHidden BIT = NULL
	,@pageNo INT = 1
	,@pageSize INT = 10 
)
AS
BEGIN
	
	SET NOCOUNT ON;

	BEGIN TRY

		DECLARE	@InterfaceEditorTypes TABLE (BaseReferenceID bigint)

		IF @includedTypes IS NOT NULL
			INSERT @InterfaceEditorTypes SELECT CONVERT(bigint, value) FROM string_split(@includedTypes, ',')
		ELSE 
			INSERT @InterfaceEditorTypes SELECT idfsReference FROM dbo.FN_GBL_Reference_GETList(@langId,19000531)

		DECLARE @firstRec INT
		DECLARE @lastRec INT
		DECLARE @t TABLE( 
			idfsResourceSet bigint,
			strResourceSet nvarchar(2000),
			ModuleId bigint,
			ModuleName NVARCHAR(2000),
			idfsResource bigint,
			strResourceName nvarchar(512),
			idfsResourceType bigint,
			strResourceType nvarchar(2000),
			BaseReferenceId bigint,
			NationalName nvarchar(2000),
			LanguageId bigint,
			isHidden bit,
			isRequired bit
		)
		SET @firstRec = (@pageNo-1)* @pagesize
		SET @lastRec = (@pageNo*@pageSize+1)
		INSERT INTO @t
		SELECT 
					RSTR.idfsResourceSet,
					ISNULL(RSL.strTextString, RS.strResourceSet) AS strResourceSet,
					RSP.idfsResourceSet AS ModuleId,
					RSP.strResourceSet AS ModuleName,
					RSTR.idfsResource,
					R.strResourceName,
					R.idfsResourceType,
					RT.strDefault AS strResourceType,
					RT.idfsBaseReference AS BaseReferenceId,
					ISNULL(RL.strResourceString, R.strResourceName) AS NationalName,
					ISNULL(RL.idfsLanguage, dbo.FN_GBL_LanguageCode_GET(@langId)) as LanguageId,
					RSTR.isHidden,
					RSTR.isRequired
		FROM		dbo.trtResourceSetToResource RSTR
		INNER JOIN	dbo.trtResourceSet RS ON RS.idfsResourceSet = RSTR.idfsResourceSet
		INNER JOIN	dbo.trtResource R ON R.idfsResource = RSTR.idfsResource
		INNER JOIN	dbo.trtBaseReference RT ON RT.idfsBaseReference = R.idfsResourceType
		INNER JOIN	dbo.trtResourceSetHierarchy RSH ON RSH.idfsResourceSet = RS.idfsResourceSet
		INNER JOIN	dbo.trtResourceSetHierarchy RSHP ON RSHP.ResourceSetNode = RSH.ResourceSetNode.GetAncestor(RSH.ResourceSetNode.GetLevel() - 1)
		INNER JOIN  dbo.trtResourceSet RSP ON RSP.idfsResourceSet = RSHP.idfsResourceSet
		LEFT JOIN	dbo.trtResourceTranslation  AS RL --WITH(INDEX=XPKtrtResourceTranslation)
					ON RL.idfsResource = RSTR.idfsResource
					AND RL.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@langId)
		LEFT JOIN	dbo.trtResourceSetTranslation  AS RSL 
					ON RSL.idfsResourceSet = RSTR.idfsResourceSet
					AND RSL.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@langId)
		
		WHERE		RS.idfsResourceSet = IIF(@allModules = 1, RS.idfsResourceSet, ISNULL(@idfsResourceSet, RS.idfsResourceSet))

		AND			(RSP.idfsResourceSet = @moduleId or @moduleId is null)

		AND			(R.strResourceName LIKE IIF(@searchString IS NOT NULL, '%' + @searchString + '%', R.strResourceName)
					OR ISNULL(RL.strResourceString, R.strResourceName) LIKE IIF(@searchString IS NOT NULL, '%' + @searchString + '%', ISNULL(RL.strResourceString, R.strResourceName)))
		AND			RSTR.isHidden = ISNULL(@isHidden, RSTR.isHidden)
		AND			RSTR.isRequired = ISNULL(@isRequired, RSTR.isRequired)
        AND         R.intRowStatus = 0
		AND			EXISTS (SELECT * FROM @InterfaceEditorTypes t
						WHERE (RT.idfsBaseReference = t.BaseReferenceID))
		;
		WITH CTEResults AS
		(
			SELECT ROW_NUMBER() OVER ( ORDER BY
					CASE WHEN @sortOrder = 'asc' THEN 
						CASE 
							WHEN @sortColumn = 'strResourceName' THEN  [strResourceName]
							WHEN @sortColumn = 'NationalName' THEN [NationalName]
							WHEN @sortColumn = 'ModuleName' THEN [ModuleName]
							WHEN @sortColumn = 'StrResourceSet' THEN [strResourceSet]							
						END
					END ASC,
					CASE WHEN @sortOrder = 'desc' THEN 
						CASE 
							WHEN @sortColumn = 'strResourceName' THEN  [strResourceName]
							WHEN @sortColumn = 'NationalName' THEN [NationalName]
							WHEN @sortColumn = 'ModuleName' THEN [ModuleName]
							WHEN @sortColumn = 'StrResourceSet' THEN [strResourceSet]							
						END
					END DESC

		) AS ROWNUM,
			COUNT(*) OVER () AS TotalRowCount, 
			idfsResourceSet,
			strResourceSet,
			ModuleId,
			ModuleName,
			idfsResource,
			strResourceName,
			idfsResourceType,
			strResourceType,
			BaseReferenceId,
			NationalName,
			LanguageId,
			isHidden,
			isRequired
			FROM @t
		)
		SELECT 
			TotalRowCount,
			idfsResourceSet,
			strResourceSet,
			ModuleId,
			ModuleName,
			idfsResource,
			strResourceName,
			idfsResourceType,
			strResourceType,
			BaseReferenceId,
			NationalName,
			LanguageId,
			isHidden,
			isRequired,
			TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
			CurrentPage = @pageNo
		FROM CTEResults
		WHERE ROWNUM > @firstRec AND ROWNUM < @lastRec
		
	END TRY
	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_AS_CAMPAIGN_DEL]...';


GO
-- ================================================================================================
-- Name: USP_AS_CAMPAIGN_DEL
--
-- Description: Deletes an active surveillance campaign record for the human/vet module.
--          
-- Revision History:
-- Name               Date       Change Detail
-- ------------------ ---------- -----------------------------------------------------------------
-- Stephen Long       07/06/2019 Initial release.
-- Mark Wilson		  08/12/2021 modified to delete from tlbCampaignToDiagnosis
-- Manickandan Govindarajan 11/17/2022 Implemented Data Audit
-- Testing code:
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_AS_CAMPAIGN_DEL] (
	@LanguageID NVARCHAR(50),
	@CampaignID AS BIGINT,
	@UserName as varchar(255)
	)
AS
BEGIN
	SET NOCOUNT ON;

	--Data Audit
	
	declare @auditdDelete as TABLE
    (
      idfObject bigint,
	  idfTable bigint
    )
	declare @idfsDataAuditEventType bigint =10016002;
	declare @idfsObjectType bigint;
	declare @idfObject bigint =@CampaignID;
	declare @idfObjectTable_tlbCampaign bigint =75610000000;
	declare @idfDataAuditEvent bigint;
	declare @campaignCategoryId bigint;
	declare @idfUserID bigint;
	declare @idfSiteId bigint;
	declare @idfObjectTable_tlbCampaignToDiagnosis bigint =707000000000;


	--Data Audit

	BEGIN TRY
		DECLARE @ReturnMessage VARCHAR(MAX) = 'Success',
			@ReturnCode INT = 0,
			@MonitoringSessionCount AS INT = 0;

		--Data Audit

		select @campaignCategoryId= CampaignCategoryID from tlbCampaign where idfCampaign = @CampaignID;
		if @campaignCategoryId = 10501001
			set @idfsObjectType=10017061;
		ELSE IF @campaignCategoryId = 10501002
			set @idfsObjectType=10017073;
		
		--Data Audit

		SELECT @MonitoringSessionCount = COUNT(*)
		FROM dbo.tlbMonitoringSession
		WHERE idfCampaign = @CampaignID
			AND intRowStatus = 0;

		IF @MonitoringSessionCount = 0
		BEGIN
			
			--Data Audit
			  select @idfUserID= a.userid, @idfSiteId= a.siteid from dbo.FN_UserSiteInformation('Administrator') a;
			-- insert record into tauDataAuditEvent
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserID,@idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbCampaign, @idfDataAuditEvent OUTPUT
				-- insert into delete 

			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
				SELECT @idfDataAuditEvent, @idfObjectTable_tlbCampaignToDiagnosis, idfCampaignToDiagnosis
				 from dbo.tlbCampaignToDiagnosis WHERE idfCampaign = @CampaignID;
			--Data Audit

			-- Delete child records for species and sample types.
			UPDATE dbo.tlbCampaignToDiagnosis
			SET intRowStatus = 1, AuditUpdateUser= @UserName, AuditUpdateDTM = GETDATE()
			WHERE idfCampaign = @CampaignID;

			UPDATE dbo.tlbCampaign
			SET intRowStatus = 1,AuditUpdateUser= @UserName, AuditUpdateDTM = GETDATE()
			WHERE idfCampaign = @CampaignID;

			--Data Audit
				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
				values (@idfDataAuditEvent, @idfObjectTable_tlbCampaign,@idfObject)
			--Data Audit

		END;
		ELSE
		BEGIN
			SET @ReturnCode = 1;
			SET @ReturnMessage = 'Unable to delete this record as it contains dependent child objects.';
		END;

		IF @@TRANCOUNT > 0
			AND @returnCode = 0
			COMMIT;

		SELECT @ReturnCode ReturnCode,
			@ReturnMessage ReturnMessage;
	END TRY

	BEGIN CATCH
		IF @@Trancount > 0
			ROLLBACK TRANSACTION;

		SET @ReturnCode = ERROR_NUMBER();
		SET @ReturnMessage = ERROR_MESSAGE();

		SELECT @ReturnCode ReturnCode,
			@ReturnMessage ReturnMessage;

		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_AS_CAMPAIGN_SET]...';


GO
-- ================================================================================================
-- Name: USP_AS_CAMPAIGN_SET
--
-- Description: Insert/update active surveillance campaign record for the human module.
--          
-- Revision History:
-- Name						Date       Change Detail
-- ------------------		---------- -----------------------------------------------------------------
-- Stephen Long				07/06/2019 Initial release.
-- Stephen Long				09/30/2020 Added site ID to insert and update.
-- Manickandan Govindarajan 11/25/2020 Updated correct parameter for USP_GBL_NextNumber_GET to get the correct SCH Prefix
-- Mark Wilson				08/19/2021 Updated to handle multiple diagnosis per Campaign
-- Lamont Mitchell			08/25/2001 Removed Output declaration from @idfCampaign
-- Mark Wilson				08/27/2021 added code to clear tlbCampaignToDiagnosis
-- Mark Wilson				10/13/2021 reviewed for location udpates. minor edits
-- Mani						Consolidated for Both Human and Vet 
-- Stephen Long             07/11/2022 Added events parameter and logic for site alerts.
-- Manickandan Govindarajan 11/16/2022 - Implemented DataAudit

-- Testing code:
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_AS_CAMPAIGN_SET]
(
    @LanguageID NVARCHAR(50),
    @idfCampaign BIGINT NULL,
    @CampaignTypeID BIGINT,
    @CampaignStatusTypeID BIGINT,
    @CampaignDateStart DATETIME,
    @CampaignDateEnd DATETIME,
    @strCampaignID NVARCHAR(50),
    @CampaignName NVARCHAR(200),
    @CampaignAdministrator NVARCHAR(200),
    @Conclusion NVARCHAR(MAX),
    @SiteID BIGINT,
    @CampaignCategoryTypeID BIGINT,
    @AuditUserName NVARCHAR(200),
    @CampaignToDiagnosisCombo NVARCHAR(MAX), -- idfCampaignToDiagnosis, idfsDiagnosis, intOrder,  intPlannedNumber, idfsSpeciesType, idfsSampleType, Comments, AuditUser
    @MonitoringSessions NVARCHAR(MAX),
    @Events NVARCHAR(MAX) = NULL
)
AS
BEGIN

    DECLARE @idfRow INT
    DECLARE @ReturnCode INT = 0
    DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS'
    DECLARE @ObjectName NVARCHAR(100) = NULL
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage VARCHAR(200)
    )
    DECLARE @idfCampaignToDiagnosis BIGINT = NULL,
            @idfsDiagnosis BIGINT = NULL,
            @intOrder INT = NULL,
            @intPlannedNumber INT = NULL,
            @idfsSpeciesType BIGINT = NULL,
            @idfsSampleType BIGINT = NULL,
            @Comments NVARCHAR(500) = NULL,
            @RowID BIGINT = NULL,
            @idfMonitoringSession BIGINT = NULL,
            @EventId BIGINT,
            @EventTypeId BIGINT = NULL,
            @EventSiteId BIGINT = NULL,
            @EventObjectId BIGINT = NULL,
            @EventUserId BIGINT = NULL,
            @EventDiseaseId BIGINT = NULL,
            @EventLocationId BIGINT = NULL,
            @EventInformationString NVARCHAR(MAX) = NULL,
            @EventLoginSiteId BIGINT = NULL;

    DECLARE @tlbCampaignToDiagnosis TABLE
    (
        idfRow INT IDENTITY(1, 1) NOT NULL,
        idfCampaignToDiagnosis BIGINT NOT NULL,
        idfsDiagnosis BIGINT NULL,
        intOrder INT NOT NULL,
        intPlannedNumber INT NULL,
        idfsSpeciesType BIGINT NULL,
        idfsSampleType BIGINT NULL,
        Comments NVARCHAR(MAX) NULL
    );

    DECLARE @tlbMonitoringSession TABLE
    (
        idfMonitoringSession BIGINT NOT NULL,
        deleteFlag BIT NOT NULL
    );

    DECLARE @EventsTemp TABLE
    (
        EventId BIGINT NOT NULL,
        EventTypeId BIGINT NULL,
        UserId BIGINT NULL,
        SiteId BIGINT NULL,
        LoginSiteId BIGINT NULL,
        ObjectId BIGINT NULL,
        DiseaseId BIGINT NULL,
        LocationId BIGINT NULL,
        InformationString NVARCHAR(MAX) NULL
    );
	
	--Data Audit--
	declare @idfUserId BIGINT =NULL;
	declare @idfSiteId BIGINT = NULL;
	declare @idfsDataAuditEventType bigint =NULL;
	declare @idfsObjectType bigint=10017066; -- Need to review the value
	declare @idfObject bigint =@idfCampaign;
	declare @idfObjectTable_tlbCampaign bigint  = 706900000000;
	declare @idfDataAuditEvent bigint= NULL;
	declare @idfObjectTable_tlbCampaignToDiagnosis bigint =707000000000;
	declare @idfObjectTable_tlbMonitoringSession bigint =707040000000;

	DECLARE @tlbCampaign_BeforeEdit TABLE
	(
	  CampaignId bigint,
	  CampaignTypeID bigint,
	  CampaignStatusTypeID bigint,
      CampaignDateStart datetime,
      CampaignDateEnd datetime,
      strCampaignID varchar(255),
      strCampaignName varchar(255),
      strCampaignAdministrator varchar(255),
      strComments varchar(255),
      CampaignCategoryID bigint
	)
	DECLARE @tlbCampaign_AfterEdit TABLE
	(
	  CampaignId bigint,
	  CampaignTypeID bigint,
	  CampaignStatusTypeID bigint,
      CampaignDateStart datetime,
      CampaignDateEnd datetime,
      strCampaignID varchar(255),
      strCampaignName varchar(255),
      strCampaignAdministrator varchar(255),
      strComments varchar(255),
      CampaignCategoryID bigint
	)

	--Data Audit--


	DECLARE @idfCampaignToDiagnosisDelete TABLE
	(
		idfObject bigint,
		idfTable bigint
	);
	DECLARE @idfCampaignToDiagnosisInsert TABLE
	(
		idfObject bigint,
		idfTable bigint
	);
	DECLARE @tlbMonitoringSessionDelete TABLE
	(
		idfObject bigint,
		idfTable bigint
	);

	--Data Audit--

    BEGIN TRY
        BEGIN TRANSACTION

        INSERT INTO @tlbCampaignToDiagnosis
        (
            idfCampaignToDiagnosis,
            idfsDiagnosis,
            intOrder,
            intPlannedNumber,
            idfsSpeciesType, -- no Sample Type for human
            idfsSampleType,
            Comments
        )
        SELECT *
        FROM
            OPENJSON(@CampaignToDiagnosisCombo)
            WITH
            (
                idfCampaignToDiagnosis BIGINT,
                idfsDiagnosis BIGINT,
                intOrder INT,
                intPlannedNumber INT,
                idfsSpeciesType BIGINT,
                idfsSampleType BIGINT,
                Comments NVARCHAR(MAX)
            );

        INSERT INTO @tlbMonitoringSession
        SELECT *
        FROM
            OPENJSON(@MonitoringSessions)
            WITH
            (
                idfMonitoringSession BIGINT,
                deleteFlag BIT
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

		--Data Audit--
		-- Get and Set UserId and SiteId
		select @idfUserId =userInfo.UserId, @idfSiteId=UserInfo.SiteId from dbo.FN_UserSiteInformation(@AuditUserName) userInfo
		--Data Audit--

        IF NOT EXISTS
        (
            SELECT *
            FROM dbo.tlbCampaign
            WHERE idfCampaign = @idfCampaign
                  AND intRowStatus = 0
        )
        BEGIN
            IF @CampaignCategoryTypeID = 10501001
                SET @ObjectName = 'Human Active Surveillance Campaign';
            ELSE
                SET @ObjectName = 'Vet Active Surveillance Campaign';

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbCampaign', @idfCampaign OUTPUT;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NextNumber_GET @ObjectName,
                                               @strCampaignID OUTPUT,
                                               NULL;
            INSERT INTO dbo.tlbCampaign
            (
                idfCampaign,
                idfsCampaignType,
                idfsCampaignStatus,
                datCampaignDateStart,
                datCampaignDateEnd,
                strCampaignID,
                strCampaignName,
                strCampaignAdministrator,
                strConclusion,
                intRowStatus,
                rowguid,
                CampaignCategoryID,
                idfsSite,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                AuditCreateDTM,
                AuditUpdateUser,
                AuditUpdateDTM
            )
            VALUES
            (@idfCampaign,
             @CampaignTypeID,
             @CampaignStatusTypeID,
             @CampaignDateStart,
             @CampaignDateEnd,
             @strCampaignID,
             @CampaignName,
             @CampaignAdministrator,
             @Conclusion,
             0  ,
             NEWID(),
             @CampaignCategoryTypeID,
             @SiteID,
             10519001,
             '[{"idfCampaign":' + CAST(@idfCampaign AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             GETDATE(),
             @AuditUserName,
             GETDATE()
            );

			--Data Audit--
			-- tauDataAuditEvent Event Type - Create 
			set @idfsDataAuditEventType =10016001;
					-- insert record into tauDataAuditEvent - 
			INSERT INTO @SuppressSelect
			EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfCampaign, @idfObjectTable_tlbCampaign, @idfDataAuditEvent OUTPUT

			INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject )
				values ( @idfDataAuditEvent, @idfObjectTable_tlbCampaign, @idfCampaign)
			--Data Audit--

            UPDATE @EventsTemp
            SET ObjectId = @idfCampaign
            WHERE ObjectId = 0;

        END
        ELSE
        BEGIN
	
			insert into @tlbCampaign_BeforeEdit ( CampaignId,CampaignTypeID ,CampaignStatusTypeID,CampaignDateStart,CampaignDateEnd,strCampaignID,strCampaignName,strCampaignAdministrator,strComments)
			select idfCampaign, idfsCampaignType,idfsCampaignStatus, datCampaignDateStart, datCampaignDateEnd,strCampaignAdministrator, strCampaignName,strCampaignAdministrator, strComments from tlbCampaign where idfCampaign =@idfCampaign;

            UPDATE dbo.tlbCampaign
            SET idfsCampaignType = @CampaignTypeID,
                idfsCampaignStatus = @CampaignStatusTypeID,
                datCampaignDateStart = @CampaignDateStart,
                datCampaignDateEnd = @CampaignDateEnd,
                strCampaignID = @strCampaignID,
                strCampaignName = @CampaignName,
                strCampaignAdministrator = @CampaignAdministrator,
                strConclusion = @Conclusion,
                CampaignCategoryID = @CampaignCategoryTypeID,
                idfsSite = @SiteID,
                intRowStatus = 0, -- no reason to update a deleted record
                SourceSystemNameID = ISNULL(SourceSystemNameID, 10519001),
                SourceSystemKeyValue = ISNULL(
                                                 SourceSystemKeyValue,
                                                 '[{"idfCampaign":' + CAST(@idfCampaign AS NVARCHAR(300)) + '}]'
                                             ),
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfCampaign = @idfCampaign;

			insert into @tlbCampaign_AfterEdit (CampaignId, CampaignTypeID ,CampaignStatusTypeID,CampaignDateStart,CampaignDateEnd,strCampaignID,strCampaignName,strCampaignAdministrator,strComments)
			select idfCampaign, idfsCampaignType,idfsCampaignStatus, datCampaignDateStart, datCampaignDateEnd,strCampaignAdministrator, strCampaignName,strCampaignAdministrator, strComments  from tlbCampaign where idfCampaign =@idfCampaign;
			
			--DataAudit-- 
			--  tauDataAuditEvent  Event Type- Edit 
			set @idfsDataAuditEventType =10016003;
			-- insert record into tauDataAuditEvent - 
			INSERT INTO @SuppressSelect
			EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbCampaign, @idfDataAuditEvent OUTPUT

			--INSERT INTO tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfObject )
				--values ( @idfDataAuditEvent, @idfObjectTable_tlbCampaign, @idfCampaign)
				
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbCampaign, 706920000000,
				a.CampaignId,null,
				a.CampaignCategoryID,b.CampaignCategoryID 
			from @tlbCampaign_BeforeEdit a  inner join @tlbCampaign_AfterEdit b on a.CampaignId = b.CampaignId
			where (a.CampaignCategoryID <> b.CampaignCategoryID) 
				or(a.CampaignCategoryID is not null and b.CampaignCategoryID is null)
				or(a.CampaignCategoryID is null and b.CampaignCategoryID is not null)
				
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbCampaign, 706920000000,
				a.CampaignId,null,
				a.CampaignDateEnd,b.CampaignDateEnd 
			from @tlbCampaign_BeforeEdit a  inner join @tlbCampaign_AfterEdit b on a.CampaignId = b.CampaignId
			where (a.CampaignDateEnd <> b.CampaignDateEnd) 
				or(a.CampaignDateEnd is not null and b.CampaignDateEnd is null)
				or(a.CampaignDateEnd is null and b.CampaignDateEnd is not null)
						
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbCampaign, 706920000000,
				a.CampaignId,null,
				a.CampaignDateStart,b.CampaignDateStart 
			from @tlbCampaign_BeforeEdit a  inner join @tlbCampaign_AfterEdit b on a.CampaignId = b.CampaignId
			where (a.CampaignDateStart <> b.CampaignDateStart) 
				or(a.CampaignDateStart is not null and b.CampaignDateStart is null)
				or(a.CampaignDateStart is null and b.CampaignDateStart is not null)
			
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbCampaign, 706920000000,
				a.CampaignId,null,
				a.CampaignStatusTypeID,b.CampaignStatusTypeID 
			from @tlbCampaign_BeforeEdit a  inner join @tlbCampaign_AfterEdit b on a.CampaignId = b.CampaignId
			where (a.CampaignStatusTypeID <> b.CampaignStatusTypeID) 
				or(a.CampaignStatusTypeID is not null and b.CampaignStatusTypeID is null)
				or(a.CampaignStatusTypeID is null and b.CampaignStatusTypeID is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbCampaign, 706920000000,
				a.CampaignId,null,
				a.CampaignTypeID,b.CampaignTypeID 
			from @tlbCampaign_BeforeEdit a  inner join @tlbCampaign_AfterEdit b on a.CampaignId = b.CampaignId
			where (a.CampaignTypeID <> b.CampaignTypeID) 
				or(a.CampaignTypeID is not null and b.CampaignTypeID is null)
				or(a.CampaignTypeID is null and b.CampaignTypeID is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbCampaign, 706920000000,
				a.CampaignId,null,
				a.strCampaignAdministrator,b.strCampaignAdministrator 
			from @tlbCampaign_BeforeEdit a  inner join @tlbCampaign_AfterEdit b on a.CampaignId = b.CampaignId
			where (a.strCampaignAdministrator <> b.strCampaignAdministrator) 
				or(a.strCampaignAdministrator is not null and b.strCampaignAdministrator is null)
				or(a.strCampaignAdministrator is null and b.strCampaignAdministrator is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbCampaign, 706920000000,
				a.CampaignId,null,
				a.strCampaignName,b.strCampaignName 
			from @tlbCampaign_BeforeEdit a  inner join @tlbCampaign_AfterEdit b on a.CampaignId = b.CampaignId
			where (a.strCampaignName <> b.strCampaignName) 
				or(a.strCampaignName is not null and b.strCampaignName is null)
				or(a.strCampaignName is null and b.strCampaignName is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbCampaign, 706920000000,
				a.CampaignId,null,
				a.strCampaignID,b.strCampaignID 
			from @tlbCampaign_BeforeEdit a  inner join @tlbCampaign_AfterEdit b on a.CampaignId = b.CampaignId
			where (a.strCampaignID <> b.strCampaignID) 
				or(a.strCampaignID is not null and b.strCampaignID is null)
				or(a.strCampaignID is null and b.strCampaignID is not null)

			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, idfObjectTable, idfColumn, 
				idfObject, idfObjectDetail, 
				strOldValue, strNewValue)
			select @idfDataAuditEvent,@idfObjectTable_tlbCampaign, 706920000000,
				a.CampaignId,null,
				a.strComments,b.strComments 
			from @tlbCampaign_BeforeEdit a  inner join @tlbCampaign_AfterEdit b on a.CampaignId = b.CampaignId
			where (a.strComments <> b.strComments) 
				or(a.strComments is not null and b.strComments is null)
				or(a.strComments is null and b.strComments is not null)
			--DataAudit-- 

        END

		
        -----------------------------------------------------------------------------------------------------------------------------
        -- This is in the case of updates so that all associated records would be deleted, then re-stored by the following udpates.
        -----------------------------------------------------------------------------------------------------------------------------

        UPDATE dbo.tlbCampaignToDiagnosis
        SET intRowStatus = 1
        WHERE idfCampaign = @idfCampaign

		--Data Audit-- Delete
		if (@@ROWCOUNT>0)
		BEGIN
			insert into @idfCampaignToDiagnosisDelete(idfObject,idfTable)
			select idfCampaignToDiagnosis,@idfObjectTable_tlbCampaignToDiagnosis from tlbCampaignToDiagnosis WHERE idfCampaign = @idfCampaign and intRowStatus = 1

			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
				SELECT @idfDataAuditEvent, idfTable, idfObject FROM @idfCampaignToDiagnosisDelete
		END
		--Data Audit--

        WHILE EXISTS (SELECT * FROM @tlbCampaignToDiagnosis) -- process the temp table created from the parameter @CampaignToDiagnosisCombo 
        BEGIN

            SET @idfRow =
            (
                SELECT MIN(idfRow) FROM @tlbCampaignToDiagnosis
            )

            SELECT @RowID = idfCampaignToDiagnosis,
                   @idfsDiagnosis = idfsDiagnosis,
                   @intOrder = intOrder,
                   @intPlannedNumber = intPlannedNumber,
                   @idfsSpeciesType = idfsSpeciesType,
                   @idfsSampleType = idfsSampleType,
                   @Comments = Comments
            FROM @tlbCampaignToDiagnosis
            WHERE idfRow = @idfRow

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_HAS_CampaignToDiagnosis_SET @RowID,
                                                         @idfCampaign,
                                                         @idfsDiagnosis,
                                                         @intOrder,
                                                         @intPlannedNumber,
                                                         @idfsSpeciesType,
                                                         @idfsSampleType,
                                                         @Comments,
                                                         @AuditUserName

            DELETE FROM @tlbCampaignToDiagnosis
            WHERE idfRow = @idfRow

        END;
		
		--Data Audit-- Create
		if EXISTS(select top 1 idfCampaignToDiagnosis from tlbCampaignToDiagnosis where idfCampaign = @idfCampaign)
		BEGIN

			INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject )
				SELECT @idfDataAuditEvent, @idfObjectTable_tlbCampaignToDiagnosis, idfCampaignToDiagnosis FROM tlbCampaignToDiagnosis WHERE idfCampaign = @idfCampaign and intRowStatus = 0
		END
		--Data Audit--

		--Data Audit-- Update
			INSERT INTO tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfObject )
				SELECT @idfDataAuditEvent, @idfObjectTable_tlbMonitoringSession, idfMonitoringSession FROM @tlbMonitoringSession 
		--Data Audit--

        WHILE EXISTS (SELECT * FROM @tlbMonitoringSession WHERE deleteFlag = 0)
        BEGIN
            SELECT TOP 1
                @idfMonitoringSession = idfMonitoringSession
            FROM @tlbMonitoringSession;

            UPDATE dbo.tlbMonitoringSession
            SET idfCampaign = @idfCampaign,
                AuditUpdateDTM = GETDATE(),
                AuditCreateUser = @AuditUserName
            WHERE idfMonitoringSession = @idfMonitoringSession

            DELETE FROM @tlbMonitoringSession
            WHERE idfMonitoringSession = @idfMonitoringSession
                  AND deleteFlag = 0;
        END;

        WHILE EXISTS (SELECT * FROM @tlbMonitoringSession WHERE deleteFlag = 1)
        BEGIN
            SELECT TOP 1
                @idfMonitoringSession = idfMonitoringSession
            FROM @tlbMonitoringSession;

            UPDATE dbo.tlbMonitoringSession
            SET idfCampaign = null,
                AuditUpdateDTM = GETDATE(),
                AuditCreateUser = @AuditUserName
            WHERE idfMonitoringSession = @idfMonitoringSession

            DELETE FROM @tlbMonitoringSession
            WHERE idfMonitoringSession = @idfMonitoringSession
                  AND deleteFlag = 1;
        END;

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                            @EventTypeId,
                                            @EventUserId,
                                            @EventObjectId,
                                            @EventDiseaseId,
                                            @EventSiteId,
                                            @EventInformationString,
                                            @EventLoginSiteId,
                                            @EventLocationId,
                                            @AuditUserName;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        IF @@TRANCOUNT > 0
            COMMIT TRANSACTION;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @idfCampaign idfCampaign,
               @strCampaignID strCampaignID;

    END TRY
    BEGIN CATCH
        IF @@Trancount > 0
            ROLLBACK TRANSACTION;

        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @idfCampaign idfCampaign,
               @strCampaignID strCampaignID;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_TESTTOTESTRESULTMATRIX_GETLIST]...';


GO
-- ================================================================================================
-- NAME: USP_CONF_TESTTOTESTRESULTMATRIX_GETLIST
-- DESCRIPTION: Returns a list of test to test result relationships
-- AUTHOR: Ricky Moss
-- Revision History:
-- Name             Date        Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		03/08/2019 Initial Release
-- Stephen Long     04/07/2020 Make test name nullable for the laboratory module; for performance 
--                             purposes bring all records in one call to, so app will not have to 
--                             make repeated calls loading grid views and call on each row as 
--                             results will vary with different test names.
-- Doug Albanese	4/16/2020  This SP was generated with two different possible output structures. 
--								This is wrong and both can't be picked up by POCO.
-- Ann Xiong		11/09/2022 Modified to return no record when idfsTestName is NULL
-- Stephen Long     11/15/2022 Rolling back prior change as other areas use this sproc with null. 
--                             Modified test name to test result matrix page to only call this 
--                             procedure when a test name has been selected.
--
-- exec USP_CONF_TESTTOTESTRESULTMATRIX_GETLIST 'en', 19000097, 803960000000
-- exec USP_CONF_TESTTOTESTRESULTMATRIX_GETLIST 'en', 190000104, 807510000000
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_TESTTOTESTRESULTMATRIX_GETLIST] (
	 @langId NVARCHAR(10)
	,@idfsTestResultRelation BIGINT
	,@idfsTestName BIGINT = NULL
	,@pageNo INT = 1
	,@pageSize INT = 10 
	,@sortColumn NVARCHAR(30) = 'strTestNameDefault' 
	,@sortOrder NVARCHAR(4) = 'asc'	)
AS
BEGIN
	DECLARE @firstRec INT
	DECLARE @lastRec INT
	DECLARE @t TABLE( 
		idfsTestName bigint,
		strTestNameDefault nvarchar(2000),
		strTestName nvarchar(2000),
		idfsTestResult bigint,
		strTestResultDefault nvarchar(2000),
		strTestResultName nvarchar(2000),
		blnIndicative bit
	)

	SET @firstRec = (@pageNo-1)* @pagesize
	SET @lastRec = (@pageNo*@pageSize+1)

	BEGIN TRY
		IF @idfsTestResultRelation = 19000097
			INSERT INTO @T
			SELECT idfsTestName,
				tnbr.strDefault AS strTestNameDefault,
				tnbr.name AS strTestName,
				idfsTestResult,
				trbr.strDefault AS strTestResultDefault,
				trbr.name AS strTestResultName,
				blnIndicative
			FROM dbo.trtTestTypeToTestResult ttr
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@langId, 19000097) tnbr
				ON ttr.idfsTestName = tnbr.idfsReference
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@langId, 19000096) trbr
				ON ttr.idfsTestResult = trbr.idfsReference
			WHERE ttr.intRowStatus = 0
				AND ((idfsTestName = @idfsTestName) 
				OR (@idfsTestName IS NULL)
				)
		ELSE
			INSERT INTO @T
			SELECT idfsPensideTestName,
				ptnbr.strDefault AS strTestNameDefault,
				ptnbr.name AS strTestName,
				idfsPensideTestResult as idfsTestResult,
				ptrbr.strDefault AS strTestResultDefault,
				ptrbr.name AS strTestResultName,
				blnIndicative
			FROM dbo.trtPensideTestTypeToTestResult pttr
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@langId, 19000104) ptnbr
				ON pttr.idfsPensideTestName = ptnbr.idfsReference
			LEFT JOIN dbo.FN_GBL_Reference_GETList(@langId, 19000105) ptrbr
				ON pttr.idfsPensideTestResult = ptrbr.idfsReference
			WHERE pttr.intRowStatus = 0
				AND ((idfsPensideTestName = @idfsTestName) 
				OR (@idfsTestName IS NULL)
				)
		;
		WITH CTEResults as
		(
			SELECT ROW_NUMBER() OVER ( ORDER BY 
				CASE WHEN @sortColumn = 'strTestNameDefault' AND @SortOrder = 'asc' THEN strTestNameDefault END ASC,
				CASE WHEN @sortColumn = 'strTestNameDefault' AND @SortOrder = 'desc' THEN strTestNameDefault END DESC,
				CASE WHEN @sortColumn = 'strTestResultDefault' AND @SortOrder = 'asc' THEN strTestResultDefault END ASC,
				CASE WHEN @sortColumn = 'strTestResultDefault' AND @SortOrder = 'desc' THEN strTestResultDefault END DESC,
				CASE WHEN @sortColumn = 'strTestResultName' AND @SortOrder = 'asc' THEN strTestResultName END ASC,
				CASE WHEN @sortColumn = 'strTestResultName' AND @SortOrder = 'desc' THEN strTestResultName END DESC
		) AS ROWNUM,
		COUNT(*) OVER () AS 
				TotalRowCount, 
				idfsTestName,
				strTestNameDefault,
				strTestName,
				idfsTestResult, 
				strTestResultDefault,
				strTestResultName,
				blnIndicative
			FROM @T
		)

			SELECT
				TotalRowCount, 
				idfsTestName,
				strTestNameDefault,
				strTestName,
				idfsTestResult, 
				strTestResultDefault,
				strTestResultName,
				blnIndicative,
				TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
				CurrentPage = @pageNo 
		FROM CTEResults
		WHERE RowNum > @firstRec AND RowNum < @lastRec 
	END TRY

	BEGIN CATCH
		THROW
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_LKUP_DISEASE_GETList]...';


GO
--*************************************************************************************************
-- Name: USP_GBL_LKUP_DISEASE_GETList
--
-- Description: Returns a list of diseases filtered by a user's filtration permissions as defined 
-- per use case SAUC62.
--          
-- Author: Stephen Long
--
-- Revision History:
-- Name              Date       Change Detail
-- ----------------- ---------- ------------------------------------------------------------------
-- Stephen Long      09/29/2021 Initial release
-- Mike Kornegay	 11/03/2021 Added bitwise to where for Accessory Codes
-- Stephen Long      01/24/2022 Added ICD10 and OIE code to the query.
-- Mani				 03/10/2022	Added intHACode as return parameter
-- Leo Tracchia	     11/17/2022 Added distinct to remove possible duplicates from return
-- Testing code:
/*
-- Human standard diseases
EXEC USP_GBL_LKUP_DISEASE_GETList 'en-US', 2, 10020001, NULL, 420664190000873
-- Avian aggregate diseases
EXEC USP_GBL_LKUP_DISEASE_GETList 'en-US', 96, null, NULL, 155568340001295
-- Livestock standard diseases wildcard matching advanced search term.
EXEC USP_GBL_LKUP_DISEASE_GETList 'en-US', 32, 10020001, 'Bru', 420664190000873
*/
--*************************************************************************************************
ALTER PROCEDURE [dbo].[USP_GBL_LKUP_DISEASE_GETList]
(
    @LanguageID NVARCHAR(50),
    @AccessoryCode INT = NULL,         -- Human, Avian, Livestock, Vector, etc.
    @UsingType BIGINT = NULL,          -- Aggregate or standard disease types
    @AdvancedSearchTerm NVARCHAR(200), -- String passed to filter disease names. If nothing is passed in, no filter is applied.
    @UserEmployeeID BIGINT
)
AS
BEGIN
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator BIT NOT NULL,
        AccessToPersonalDataPermissionIndicator BIT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator BIT NOT NULL,
        WritePermissionIndicator BIT NOT NULL,
        DeletePermissionIndicator BIT NOT NULL
    );

    BEGIN TRY
        INSERT INTO @Results
        SELECT d.idfsDiagnosis,
               1,
               1,
               1,
               1,
               1
        FROM dbo.trtDiagnosis d
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                ON disease.idfsReference = d.idfsDiagnosis
        WHERE d.intRowStatus = 0
              AND (
                      (disease.intHACode & @AccessoryCode) > 0 --IN (SELECT * FROM dbo.FN_GBL_SplitHACode(@AccessoryCode, 510))
                      OR @AccessoryCode IS NULL
                  )
              AND (
                      d.idfsUsingType = @UsingType
                      OR @UsingType IS NULL
                  )
              AND (
                      disease.name LIKE '%' + @AdvancedSearchTerm + '%'
                      OR @AdvancedSearchTerm IS NULL
                  );

        -- =======================================================================================
        -- DISEASE FILTRATION RULES
        --
        -- Apply disease filtration rules from use case SAUC62.
        -- =======================================================================================
        -- 
        -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE ID IN (
                        SELECT d.idfsDiagnosis
                        FROM dbo.trtDiagnosis d
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = d.idfsDiagnosis
                                   AND oa.intRowStatus = 0
                        WHERE oa.intPermission = 1
                              AND oa.idfsObjectType = 10060001 -- Disease
                              AND oa.idfActor = -506 -- Default role
                    );

        --
        -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT d.idfsDiagnosis,
               1,
               1,
               1,
               1,
               1
        FROM dbo.trtDiagnosis d
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                ON disease.idfsReference = d.idfsDiagnosis
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = d.idfsDiagnosis
                   AND oa.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intPermission = 2 -- Allow permission
              AND d.intRowStatus = 0
              AND (
                      d.idfsUsingType = @UsingType
                      OR @UsingType IS NULL
                  )
              AND (
                      disease.intHACode = @AccessoryCode
                      OR @AccessoryCode IS NULL
                  )
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup
              AND (
                      disease.name LIKE '%' + @AdvancedSearchTerm + '%'
                      OR @AdvancedSearchTerm IS NULL
                  );

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = res.ID
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 1
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = egm.idfEmployeeGroup;

        --
        -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT d.idfsDiagnosis,
               1,
               1,
               1,
               1,
               1
        FROM dbo.trtDiagnosis d
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                ON disease.idfsReference = d.idfsDiagnosis
            INNER JOIN dbo.tstObjectAccess oa
                ON oa.idfsObjectID = d.idfsDiagnosis
                   AND oa.intRowStatus = 0
        WHERE oa.intPermission = 2 -- Allow permission
              AND d.intRowStatus = 0
              AND (
                      d.idfsUsingType = @UsingType
                      OR @UsingType IS NULL
                  )
              AND (
                      disease.intHACode = @AccessoryCode
                      OR @AccessoryCode IS NULL
                  )
              AND oa.idfsObjectType = 10060001 -- Disease
              AND oa.idfActor = @UserEmployeeID
              AND (
                      disease.name LIKE '%' + @AdvancedSearchTerm + '%'
                      OR @AdvancedSearchTerm IS NULL
                  );

        DELETE FROM @Results
        WHERE ID IN (
                        SELECT d.idfsDiagnosis
                        FROM dbo.trtDiagnosis d
                            INNER JOIN dbo.tstObjectAccess oa
                                ON oa.idfsObjectID = ID
                                   AND oa.intRowStatus = 0
                        WHERE intPermission = 1 -- Deny permission
                              AND oa.idfsObjectType = 10060001 -- Disease
                              AND idfActor = @UserEmployeeID
                    );

        SELECT distinct ID AS DiseaseID,
			   disease.intHACode,
               disease.name AS DiseaseName,			   
               diagnosis.strIDC10 AS IDC10,
               diagnosis.strOIECode AS OIECode,
			   disease.intOrder
        FROM @Results
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) disease
                ON disease.idfsReference = ID
            LEFT JOIN dbo.trtDiagnosis diagnosis
                ON diagnosis.idfsDiagnosis = ID
        ORDER BY disease.intOrder,
                 disease.name;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Creating Procedure [dbo].[USP_GBL_DataAuditEvent_Restore]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- =============================================
-- Author:		Manickandan Govindarajan
-- Create date: 11/14/2022
-- Description:	Restore Data Audit 
-- 
-- Revision History:
-- Name            Date			Change
-- --------------- ----------	--------------------------------------------------------------------
-- Mike Kornegay	11/17/2022	Remove CONCAT in dynamic query string.
--Manickandan Govindarajan 11/17/2022  changed the field type of @Object
-- ================================================================================================
-- exec USP_GBL_DataAuditEvent_Restore 58397190000001, 1100 ,155576240001452

-- =============================================
CREATE PROCEDURE [dbo].[USP_GBL_DataAuditEvent_Restore] 
	-- Add the parameters for the stored procedure here
	 @UserId BIGINT
	 ,@SiteId BIGINT
	 ,@idfDataAuditEvent BIGINT
	 
AS
BEGIN
	declare @tauDataAuditDetailDeleteTable as TABLE
	(
		idfObjectTable bigint,
		idfObject bigint,
		idfObjectTableName varchar(255)
	);

	DECLARE @SuppressSelect TABLE
	(
		ReturnCode INT,
		ReturnMessage VARCHAR(200)
	);

	
	DECLARE @returnMsg					VARCHAR(MAX) = 'SUCCESS';
	DECLARE @returnCode					BIGINT = 0;
	declare @idfsDataAuditEventType bigint =10016005;
	declare @idfsObjectType bigint;
	declare @idfObject bigint;
	declare @idfObjectTable bigint; 
	declare @auditEventId bigint;
	declare @primaryColumnName varchar(255);
	DECLARE @Cmd varchar(2000);


	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	BEGIN TRY 

		BEGIN TRANSACTION

		select @idfObject= idfMainObject , @idfsObjectType = idfsDataAuditObjectType,@idfObjectTable= idfMainObjectTable 
			from tauDataAuditEvent where idfDataAuditEvent =@idfDataAuditEvent

		insert into @tauDataAuditDetailDeleteTable (idfObjectTableName,idfObject,idfObjectTable)
			select tt.strName, d.idfObject,d.idfObjectTable from tauDataAuditDetailDelete d
			inner join tauTable tt on d.idfObjectTable= tt.idfTable where d.idfDataAuditEvent = @idfDataAuditEvent

		DECLARE restore_cursor CURSOR
		FOR SELECT idfObjectTable,idfObject,idfObjectTableName  FROM @tauDataAuditDetailDeleteTable

		OPEN restore_cursor
			DECLARE @ObjectTable bigint;
			DECLARE @Object varchar(100);
			DECLARE @ObjectTableName varchar(255);
			FETCH NEXT FROM restore_cursor  
			INTO @ObjectTable, @Object,@ObjectTableName
			WHILE (@@FETCH_STATUS = 0)
			BEGIN

				SELECT @primaryColumnName= C.COLUMN_NAME FROM  
					INFORMATION_SCHEMA.TABLE_CONSTRAINTS T  
					JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE C  
					ON C.CONSTRAINT_NAME=T.CONSTRAINT_NAME  
					WHERE  
					C.TABLE_NAME=@ObjectTableName  
					AND T.CONSTRAINT_TYPE='PRIMARY KEY';

					SET @Cmd = 'UPDATE ' + @ObjectTableName + ' SET intRowStatus = 0 WHERE ' + @primaryColumnName + ' = ' + @Object;
					EXEC(@Cmd)

			    FETCH NEXT FROM restore_cursor INTO  @ObjectTable, @Object,@ObjectTableName

			END
		CLOSE restore_cursor
		DEALLOCATE restore_cursor

		INSERT INTO @SuppressSelect
		-- Get the current event id for this user from the local context table...
		EXEC USSP_GBL_DataAuditEvent_GET @UserId,@SiteId,@idfsDataAuditEventType,@idfsObjectType,@idfObject,@idfObjectTable, @auditEventId OUTPUT;
		
		IF @@TRANCOUNT > 0 
		BEGIN
			COMMIT 
		END

		 SELECT @ReturnCode ReturnCode, @returnMsg ReturnMessage

	END TRY
	BEGIN CATCH
		--SET @returnCode = ERROR_NUMBER()
		--SET @returnMsg = 
		--'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) 
		--+ ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY())
		--+ ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE())
		--+ ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '')
		--+ ' ErrorLine: ' +  CONVERT(VARCHAR, ISNULL(ERROR_LINE(), ''))
		--+ ' ErrorMessage: '+ ERROR_MESSAGE()

		SELECT @returnCode 'ReturnCode', @returnMsg 'ReturnMessage'
		IF @@Trancount >0
				 ROLLBACK TRANSACTION;
				
	END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_DIAGNOSISREFERENCE_GETList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_DIAGNOSISREFERENCE_GETList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_DIAGNOSISREFERENCE_GETDetail]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_DIAGNOSISREFERENCE_GETDetail]';


GO
PRINT N'Update complete.';


GO
