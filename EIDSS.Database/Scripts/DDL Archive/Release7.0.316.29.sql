/*
Deployment script for EIDSS7_GG

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
USE [EIDSS7_MSTR_Shell];


GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_DATAAUDITLOG_GETList]...';


GO

-- =============================================
-- Author:		Manickandan Govindarajan
-- Create date: 06/20/2022
-- Description:	Gets the audit event list for the given parameters
-- Manickandan Govidarajan 11/22/2022 - Added additional out columns
-- =============================================
ALTER PROCEDURE [dbo].[USP_ADMIN_DATAAUDITLOG_GETList]
	@languageId AS NVARCHAR(50),
	@startDate DateTime = NULL,
	@endDate DateTime = NULL,
	@idfUserId BIGINT = NULL,
	@idfSiteId BIGINT = NULL, 
	@idfActionId BIGINT = NULL, 
	@idfObjetType BIGINT = NULL, 
	@idfObjectId BIGINT =NULL,
	@SortColumn NVARCHAR(30) = 'TransactionDate',
	@SortOrder NVARCHAR(4) = 'DESC',
	@Page INT = 1,
	@PageSize INT = 10
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @firstRec INT;
	DECLARE @lastRec INT;

	BEGIN TRY
		SET @firstRec = (@Page-1)* @pagesize
		SET @lastRec = (@Page*@pageSize+1);


		WITH CTEResults AS
		(
			SELECT ROW_NUMBER() OVER ( ORDER BY
			CASE WHEN @sortColumn = 'TransactionDate' AND @SortOrder = 'ASC' THEN ae.datEnteringDate END ASC,
			CASE WHEN @sortColumn = 'TransactionDate' AND @SortOrder = 'DESC' THEN ae.datEnteringDate END DESC,
			CASE WHEN @sortColumn = 'siteName' AND @SortOrder = 'ASC' THEN ae.idfsSite   END ASC,
			CASE WHEN @sortColumn = 'siteName' AND @SortOrder = 'DESC' THEN ae.idfsSite END DESC,
			CASE WHEN @sortColumn = 'UserName' AND @SortOrder = 'ASC' THEN ae.idfUserID   END ASC,
			CASE WHEN @sortColumn = 'UserName' AND @SortOrder = 'DESC' THEN ae.idfUserID END DESC,
			CASE WHEN @sortColumn = 'ActionName' AND @SortOrder = 'ASC' THEN ae.idfsDataAuditEventType   END ASC,
			CASE WHEN @sortColumn = 'ActionName' AND @SortOrder = 'DESC' THEN ae.idfsDataAuditEventType END DESC,
			CASE WHEN @sortColumn = 'ObjectType' AND @SortOrder = 'ASC' THEN ae.idfsDataAuditObjectType  END ASC,
			CASE WHEN @sortColumn = 'ObjectType' AND @SortOrder = 'DESC' THEN ae.idfsDataAuditObjectType END DESC
			)  AS ROWNUM,
					s.strSiteName siteName,
					ae.idfsSite siteId,
					ae.idfUserID userId,
					p.strFirstName userFirstName,
					p.strFamilyName userFamilyName,
					ae.datEnteringDate TransactionDate,
					aAction.name ActionName,
					ae.idfsDataAuditEventType actionTypeId,
					aObjectType.name ObjectType,
					ae.idfsDataAuditObjectType ObjectTypeId,
					ae.idfMainObjectTable ObjectTable,
					ae.idfMainObject ObjectId,
					ae.idfDataAuditEvent auditEventId,
					tt.strName tableName,
					COUNT(*) OVER () AS TotalRowCount
				from tauDataAuditEvent ae
				INNER join tauTable tt on ae.idfMainObjectTable = tt.idfTable
				INNER JOIN dbo.FN_GBL_ReferenceRepair(@languageID, 19000016) aAction ON ae.idfsDataAuditEventType  = aAction.idfsReference
				INNER JOIN dbo.FN_GBL_ReferenceRepair(@languageID, 19000017) aObjectType ON ae.idfsDataAuditObjectType  = aObjectType.idfsReference
				INNER JOIN tstSite s ON ae.idfsSite  = s.idfsSite
				INNER JOIN tstUserTable u ON ae.idfUserID  = u.idfUserID
				INNER JOIN tlbPerson p on p.idfPerson = u.idfPerson
				where 
					(ae.idfsSite = @idfSiteId OR @idfSiteId IS NULL) 
					AND (ae.idfUserID = @idfUserId OR @idfUserId IS NULL) 
					AND (ae.idfsDataAuditEventType = @idfActionId OR @idfActionId IS NULL) 
					AND (ae.idfsDataAuditObjectType = @idfObjetType OR @idfObjetType IS NULL) 
					AND (ae.idfMainObject = @idfObjectId OR @idfObjectId IS NULL)
					AND
					((@startdate is null and @enddate is null)
						or
						(@startdate is null and @enddate is not null and ae.datEnteringDate <= @enddate)
						or
						(@startdate is not null and @enddate is null and ae.datEnteringDate >= @startdate)
						or
						(@startdate is not null and @enddate is not null and ae.datEnteringDate BETWEEN @startdate AND @enddate))

					
					

		)
		SELECT 	auditEventId, 
				siteName,	
		        siteId,
			    userId,
				userFirstName,
				userFamilyName,
				TransactionDate,
				ActionName,
				actionTypeId,
				ObjectType,
				ObjectTypeId,
				ObjectTable,
				ObjectId,
				tableName,
				TotalRowCount,
			TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
			CurrentPage = @Page
		FROM CTEResults WHERE RowNum > @firstRec AND RowNum < @lastRec
		



END TRY

	BEGIN CATCH
		
		THROW;
	END CATCH;

	
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_STAT_GetList]...';


GO



--*************************************************************
-- Name 				: USP_ADMIN_STAT_GetList
-- Description			: ISatistical Data List
--          
-- Author               : Maheshwar D Deo
-- Revision History
--		Name       Date       Change Detail
-- Ricky Moss	  08/06/2019	Refactoring for API Method accommodation
-- Ricky Moss	  08/30/2019	Date query fix-- 
-- Ricky Moss	  11/15/2019	Added parameters to pull a certain number of fields at a time.
-- Ricky Moss	  01/21/2020	Added Region and Rayon fields to search
-- Ricky Moss	  03/18/2020	Add settlement search field
-- Ricky Moss	  04/20/2020	Refactored @idfsStatisticalDataType search capability
-- Lamont Mitchell	3/21/22   Refactored
-- Lamont Mitchell	4/26/22   Refactored Paging
--LAMONT		4-30-22		ADDED LOCATION HIERARCHY
--LAMONT		5-18-22		Removed View and replaced with Location Hierarchy Flattened. (View Used Country Name)
--Lamont Mitchell 7-6-2022	Add Case Statement to results to display Combinations of Areas according to use case and tfs bug 4464 
-- Testing code:
-- exec USP_ADMIN_STAT_GetList 'en-US', 129909620006865, null, '01/01/1992', '07/19/2022', null,  null, null, 10, 1, 1
--*************************************************************

ALTER  PROCEDURE	[dbo].[USP_ADMIN_STAT_GetList]
(
	  @LangID						NVARCHAR(50),
	  @idfsStatisticalDataType		BIGINT = NULL,
	  @idfsArea						BIGINT = NULL,
	  @datStatisticStartDateFrom	DATETIME = NULL,
	  @datStatisticStartDateTo		DATETIME = NULL,
	  @idfsRegion					BIGINT = NULL,
	  @idfsRayon					BIGINT = NULL,
	  @idfsSettlement				BIGINT = NULL,
	  @pageSize						INT = 10 ,
	  @pageNo				INT = 1,
	  @sortColumn NVARCHAR(30) = 'strName',
	  @sortOrder NVARCHAR(4) = 'asc'

)

AS
BEGIN	
	BEGIN TRY
	DECLARE @firstRec INT
	DECLARE @lastRec INT

	DECLARE @idfsLocation BIGINT = COALESCE(@idfsSettlement, @idfsRayon, @idfsRegion)

	DECLARE @t TABLE
	(
		idfStatistic bigint,
		idfsStatisticDataType bigint,
		idfsStatisticAreaType bigint,
		idfsStatisticalAgeGroup bigint,
		strStatisticalAgeGroup nvarchar(100),
		defDataTypeName nvarchar(100),
		varValue nvarchar(100),
		idfsMainBASeReference bigint,
		idfsStatisticPeriodType bigint,
		idfsArea  bigint,
		datStatisticStartDate datetime,
		setnDataTypeName nvarchar(100),
		ParameterType nvarchar(100),
		idfsParameterType bigint, 
		defParameterName nvarchar(100),
		setnParameterName nvarchar(100),
		idfsParameterName bigint,
		defAreaTypeName nvarchar(100),
		setnAreaTypeName nvarchar(100),
		defPeriodTypeName nvarchar(100),
		setnPeriodTypeName nvarchar(100),
		idfsCountry bigint,
		idfsRegion bigint,
		idfsRayon bigint,
		idfsSettlement bigint,
		setnArea nvarchar(100),
		AuditCreateDTM datetime,
		AdminLevel0Value BIGINT,
		AdminLevel0Text nvarchar(100),
		AdminLevel1Value BIGINT,
		AdminLevel1Text nvarchar(100),
		AdminLevel2Value BIGINT,
		AdminLevel2Text nvarchar(100),
		AdminLevel3Value BIGINT,
		AdminLevel3Text nvarchar(100),
		AdminLevel4Value BIGINT,
		AdminLevel4Text nvarchar(100),
		AdminLevel5Value BIGINT,
		AdminLevel5Text nvarchar(100),
		AdminLevel6Value BIGINT ,
		AdminLevel6Text nvarchar(100)
	)
	
	SET @firstRec = (@pageNo-1)* @pagesize
	SET @lastRec = (@pageNo*@pageSize+1)
	
	INSERT INTO @T
	SELECT	
		S.idfStatistic,
		S.idfsStatisticDataType,
		S.idfsStatisticAreaType,
		S.idfsStatisticalAgeGroup,
		StatisticalAgeGroup.NAME AS strStatisticalAgeGroup,
		DataType.strDefault AS defDataTypeName,
		CAST(S.[varValue] AS FLOAT) AS varValue,
		S.idfsMainBASeReference,
		S.idfsStatisticPeriodType,
		S.idfsArea AS idfsArea,
		dbo.FN_GBL_FormatDate(S.datStatisticStartDate, 'mm/dd/yyyy') As datStatisticStartDate,
		DataType.name AS setnDataTypeName,
		ParamType.name AS ParameterType,
		ParamType.idfsReference AS idfsParameterType, 
		Main.strDefault AS defParameterName,
		ISNULL(cMain.strTextString, Main.strDefault) AS setnParameterName,
		Main.idfsBASeReference AS idfsParameterName,
		AreaType.strDefault AS defAreaTypeName,
		AreaType.name AS setnAreaTypeName,
		PeriodType.strDefault AS defPeriodTypeName,
		PeriodType.name AS setnPeriodTypeName,
		gil.AdminLevel1ID as  idfsCountry,
		gil.AdminLevel2ID as  idfsRegion,
		gil.AdminLevel3ID as  idfsRayon,
		gil.AdminLevel4ID as  idfsSettlement,
		gil.AdminLevel1Name  AS setnArea,
		S.AuditCreateDTM,
		gil.AdminLevel1ID   AdminLevel0Value,
		gil.AdminLevel1Name  AS AdminLevel0Text,
		gil.AdminLevel2ID   AS AdminLevel1Value,
		gil.AdminLevel2Name  AS AdminLevel1Text,
		gil.AdminLevel3ID   AS AdminLevel2Value,
		gil.AdminLevel3Name AS AdminLevel2Text,
		gil.AdminLevel4ID   AS AdminLevel3Value,
		gil.AdminLevel4Name  AS AdminLevel3Text,
		gil.AdminLevel5ID   AS AdminLevel4Value,
		gil.AdminLevel5Name  AS AdminLevel4Text,
		gil.AdminLevel6ID   AS AdminLevel5Value,
		gil.AdminLevel6Name  AS AdminLevel5Text,
		gil.AdminLevel7ID   AS AdminLevel6Value,
		gil.AdminLevel7Name  AS AdminLevel6Text
	FROM dbo.tlbStatistic S
    LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID,19000090) DataType on DataType.idfsReference = S.idfsStatisticDataType
    LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID,19000089) AreaType on AreaType.idfsReference = S.idfsStatisticAreaType
	LEFT JOIN dbo.FN_GBL_Reference_GetList(@LangID, 19000091) PeriodType ON PeriodType.idfsReference = S.idfsStatisticPeriodType
	LEFT JOIN dbo.trtReferenceType rt ON rt.idfsReferenceType = DataType.idfsReferenceType
	LEFT JOIN dbo.FN_GBL_Reference_GetList(@LangID, 19000145) StatisticalAgeGroup	ON StatisticalAgeGroup.[idfsReference] = S.[idfsStatisticalAgeGroup]
	LEFT JOIN (dbo.trtBaseReference Main LEFT JOIN dbo.trtStringNameTranslation cMain ON Main.idfsBaseReference = cMain.idfsBASeReference
							AND cMain.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LangID)
					)
	ON Main.idfsBaseReference = S.[idfsMainBASeReference] AND ISNULL(Main.intRowStatus, 0) = 0
     JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LangID) gil ON gil.idfsLocation = S.[idfsArea]
	LEFT JOIN dbo.trtStatisticDataType sdt ON sdt.idfsStatisticDataType = S.idfsStatisticDataType
	LEFT JOIN dbo.FN_GBL_Reference_GetList(@LangID, 19000076) ParamType ON ParamType.idfsReference = sdt.idfsReferenceType
	
	WHERE S.intRowStatus = 0 				
	AND 
	(
		(S.datStatisticStartDate <= @datStatisticStartDateTo AND S.datStatisticStartDate >= @datStatisticStartDateFrom AND S.datStatisticStartDate BETWEEN @datStatisticStartDateFrom AND @datStatisticStartDateTo)
		 OR
		(S.datStatisticFinishDate >= @datStatisticStartDateFrom AND S.datStatisticFinishDate <= @datStatisticStartDateTo AND S.datStatisticFinishDate BETWEEN @datStatisticStartDateFrom AND @datStatisticStartDateTo)
	)

	AND (S.idfsStatisticDataType = @idfsStatisticalDataType OR @idfsStatisticalDataType IS NULL)
	AND (S.idfsArea = @idfsArea OR @idfsArea IS NULL);

		WITH CTEResults AS
		(
			SELECT ROW_NUMBER() OVER ( ORDER BY 
				CASE WHEN @sortColumn = 'idfStatistic' AND @SortOrder = 'asc' THEN idfStatistic END ASC,
				CASE WHEN @sortColumn = 'idfStatistic' AND @SortOrder = 'desc' THEN idfStatistic END DESC,
				CASE WHEN @sortColumn = 'varValue' AND @SortOrder = 'asc' THEN varValue END ASC,
				CASE WHEN @sortColumn = 'varValue' AND @SortOrder = 'desc' THEN varValue END DESC,
				CASE WHEN @sortColumn = 'strStatisticalAgeGroup' AND @SortOrder = 'asc' THEN strStatisticalAgeGroup END ASC,
				CASE WHEN @sortColumn = 'strStatisticalAgeGroup' AND @SortOrder = 'desc' THEN strStatisticalAgeGroup END DESC,
				CASE WHEN @sortColumn = 'ParameterType' AND @SortOrder = 'asc' THEN ParameterType END ASC,
				CASE WHEN @sortColumn = 'ParameterType' AND @SortOrder = 'desc' THEN ParameterType END DESC,
				CASE WHEN @sortColumn = 'setnParameterName' AND @SortOrder = 'asc' THEN setnParameterName END ASC,
				CASE WHEN @sortColumn = 'setnParameterName' AND @SortOrder = 'desc' THEN setnParameterName END DESC,
				CASE WHEN @sortColumn = 'setnPeriodTypeName' AND @SortOrder = 'asc' THEN setnPeriodTypeName END ASC,
				CASE WHEN @sortColumn = 'setnPeriodTypeName' AND @SortOrder = 'desc' THEN setnPeriodTypeName END DESC,
				CASE WHEN @sortColumn = 'datStatisticStartDate' AND @SortOrder = 'asc' THEN datStatisticStartDate END ASC,
				CASE WHEN @sortColumn = 'datStatisticStartDate' AND @SortOrder = 'desc' THEN datStatisticStartDate END DESC,
				CASE WHEN @sortColumn = 'setnAreaTypeName' AND @SortOrder = 'asc' THEN setnAreaTypeName END ASC,
				CASE WHEN @sortColumn = 'setnAreaTypeName' AND @SortOrder = 'desc' THEN setnAreaTypeName END DESC,
				CASE WHEN @sortColumn = 'setnArea' AND @SortOrder = 'asc' THEN setnArea END ASC,
				CASE WHEN @sortColumn = 'setnArea' AND @SortOrder = 'desc' THEN setnArea END DESC,
				CASE WHEN @sortColumn = 'idfStatistic' AND @SortOrder = 'asc' THEN idfStatistic END ASC,
				CASE WHEN @sortColumn = 'idfStatistic' AND @SortOrder = 'desc' THEN idfStatistic END DESC
		) AS ROWNUM,
		COUNT(*) OVER () AS 
				TotalRowCount 
				,idfStatistic
				,idfsStatisticDataType
				,idfsStatisticAreaType
				,idfsStatisticalAgeGroup
				,strStatisticalAgeGroup
				,defDataTypeName
				,varValue
				,idfsMainBASeReference
				,idfsStatisticPeriodType
				,idfsArea
				,datStatisticStartDate
				,setnDataTypeName
				,ParameterType
				,idfsParameterType
				,defParameterName
				,setnParameterName
				,idfsParameterName
				,defAreaTypeName
				,setnAreaTypeName
				,defPeriodTypeName
				,setnPeriodTypeName
				,idfsCountry
				,idfsRegion
				,idfsRayon
				,idfsSettlement
				--,setnArea
				,CASE
				WHEN defAreaTypeName = 'Country' THEN AdminLevel0Text
				WHEN defAreaTypeName = 'Region' THEN AdminLevel1Text 
				WHEN defAreaTypeName = 'Rayon' THEN AdminLevel1Text + ',' +  AdminLevel2Text 
				WHEN defAreaTypeName = 'Settlement' THEN AdminLevel1Text + ',' +  AdminLevel2Text + ',' +  AdminLevel3Text + ',' + AdminLevel4Text + ',' + AdminLevel5Text + ',' +   AdminLevel6Text
				ELSE ''
				END AS setnArea
				,AuditCreateDTM,
				AdminLevel0Value,
				AdminLevel0Text,
				AdminLevel1Value,
				AdminLevel1Text,
				AdminLevel2Value,
				AdminLevel2Text,
				AdminLevel3Value,
				AdminLevel3Text,
				AdminLevel4Value,
				AdminLevel4Text,
				AdminLevel5Value,
				AdminLevel5Text,
				AdminLevel6Value,
				AdminLevel6Text
			FROM @T
		)
		SELECT
				TotalRowCount 
				,idfStatistic
				,idfsStatisticDataType
				,idfsStatisticAreaType
				,idfsStatisticalAgeGroup
				,strStatisticalAgeGroup
				,defDataTypeName
				,varValue
				,idfsMainBASeReference
				,idfsStatisticPeriodType
				,idfsArea
				,datStatisticStartDate
				,setnDataTypeName
				,ParameterType
				,idfsParameterType
				,defParameterName
				,setnParameterName
				,idfsParameterName
				,defAreaTypeName
				,setnAreaTypeName
				,defPeriodTypeName
				,setnPeriodTypeName
				,idfsCountry
				,idfsRegion
				,idfsRayon
				,idfsSettlement
				,setnArea
				,AuditCreateDTM,
				AdminLevel0Value,
				AdminLevel0Text,
				AdminLevel1Value,
				AdminLevel1Text,
				AdminLevel2Value,
				AdminLevel2Text,
				AdminLevel3Value,
				AdminLevel3Text,
				AdminLevel4Value,
				AdminLevel4Text,
				AdminLevel5Value,
				AdminLevel5Text,
				AdminLevel6Value,
				AdminLevel6Text
				,TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0)
				,CurrentPage = @pageNo 
		FROM CTEResults
		WHERE RowNum > @firstRec AND RowNum < @lastRec 
	END TRY  

	BEGIN CATCH 
			THROW
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_DataAuditEvent_Restore]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- =============================================
-- Author:		Manickandan Govindarajan
-- Create date: 11/14/2022
-- Description:	Restore Data Audit 
-- 
-- Revision History:
-- Name            Date			Change
-- --------------- ----------	--------------------------------------------------------------------
-- Mike Kornegay	11/17/2022	Remove CONCAT in dynamic query string.
--Manickandan Govindarajan 11/17/2022  changed the field type of @Object
--Manickandan Govindarajan 11/17/2022  Added logic to find the selected record is restored already
-- ================================================================================================
-- exec USP_GBL_DataAuditEvent_Restore 58397190000001, 1100 ,155576240001452

-- =============================================
ALTER PROCEDURE [dbo].[USP_GBL_DataAuditEvent_Restore] 
	-- Add the parameters for the stored procedure here
	 @UserId BIGINT
	 ,@SiteId BIGINT
	 ,@idfDataAuditEvent BIGINT
	 
AS
BEGIN
	declare @tauDataAuditDetailDeleteTable as TABLE
	(
		idfObjectTable bigint,
		idfObject bigint,
		idfObjectTableName varchar(255)
	);

	DECLARE @SuppressSelect TABLE
	(
		ReturnCode INT,
		ReturnMessage VARCHAR(200)
	);

	
	DECLARE @returnMsg					VARCHAR(MAX) = 'SUCCESS';
	DECLARE @returnCode					BIGINT = 0;
	DECLARE @recordStatus				INT =-1;
	declare @idfsDataAuditEventType bigint =10016005;
	declare @idfsObjectType bigint;
	declare @idfObject bigint;
	declare @idfObjectTable bigint; 
	declare @auditEventId bigint;
	declare @primaryColumnName varchar(255);
	DECLARE @Cmd varchar(2000);
	declare @intRowStatus int =-1;
	declare @mainTableName varchar(255);
	declare @mainObject  varchar(255);
	DECLARE @SQL nvarchar(2000);
	DECLARE @Param nvarchar(200);


	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	BEGIN TRY 


		select @idfObject= idfMainObject , @idfsObjectType = idfsDataAuditObjectType,@idfObjectTable= idfMainObjectTable 
			from tauDataAuditEvent where idfDataAuditEvent =@idfDataAuditEvent

		insert into @tauDataAuditDetailDeleteTable (idfObjectTableName,idfObject,idfObjectTable)
			select tt.strName, d.idfObject,d.idfObjectTable from tauDataAuditDetailDelete d
			inner join tauTable tt on d.idfObjectTable= tt.idfTable where d.idfDataAuditEvent = @idfDataAuditEvent

		DECLARE restore_cursor CURSOR
		FOR SELECT idfObjectTable,idfObject,idfObjectTableName  FROM @tauDataAuditDetailDeleteTable

		select @mainTableName = tt.strName,  @mainObject= au.idfMainObject from tauDataAuditEvent au 
		inner join tauTable tt  on au.idfMainObjectTable= tt.idfTable
		where au.idfDataAuditEvent = @idfDataAuditEvent;


		SELECT @primaryColumnName= C.COLUMN_NAME FROM  
					INFORMATION_SCHEMA.TABLE_CONSTRAINTS T  
					JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE C  
					ON C.CONSTRAINT_NAME=T.CONSTRAINT_NAME  
					WHERE  
					C.TABLE_NAME=@mainTableName  
					AND T.CONSTRAINT_TYPE='PRIMARY KEY';


		SET @SQL = N'SELECT @intRowStatus = intRowStatus from ' + @mainTableName + ' WHERE ' + @primaryColumnName + ' = ' + @mainObject;
							SET @Param = N'@intRowStatus int OUTPUT'; 

		EXEC sp_executesql @SQL, @Param, @intRowStatus = @intRowStatus OUTPUT;


		if (@intRowStatus = 1)
		BEGIN

			BEGIN TRANSACTION
			OPEN restore_cursor
				DECLARE @ObjectTable bigint;
				DECLARE @Object varchar(100);
				DECLARE @ObjectTableName varchar(255);
				FETCH NEXT FROM restore_cursor  
				INTO @ObjectTable, @Object,@ObjectTableName
				WHILE (@@FETCH_STATUS = 0)
				BEGIN

					SELECT @primaryColumnName= C.COLUMN_NAME FROM  
						INFORMATION_SCHEMA.TABLE_CONSTRAINTS T  
						JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE C  
						ON C.CONSTRAINT_NAME=T.CONSTRAINT_NAME  
						WHERE  
						C.TABLE_NAME=@ObjectTableName  
						AND T.CONSTRAINT_TYPE='PRIMARY KEY';

				
						SET @SQL = N'SELECT @intRowStatus = intRowStatus from ' + @ObjectTableName + ' WHERE ' + @primaryColumnName + ' = ' + @Object;

						select @SQL

						SET @Param = N'@intRowStatus int OUTPUT'; 
						EXEC sp_executesql @SQL, @Param, @intRowStatus = @intRowStatus OUTPUT;

						SET @Cmd = 'UPDATE ' + @ObjectTableName + ' SET intRowStatus = 0 WHERE ' + @primaryColumnName + ' = ' + @Object;
						EXEC(@Cmd)

					FETCH NEXT FROM restore_cursor INTO  @ObjectTable, @Object,@ObjectTableName

				END
			CLOSE restore_cursor
			DEALLOCATE restore_cursor
			
			INSERT INTO @SuppressSelect
			-- Get the current event id for this user from the local context table...
			EXEC USSP_GBL_DataAuditEvent_GET @UserId,@SiteId,@idfsDataAuditEventType,@idfsObjectType,@idfObject,@idfObjectTable, @auditEventId OUTPUT;
		
			IF @@TRANCOUNT > 0 
			BEGIN
				COMMIT 
			END

			SELECT @ReturnCode ReturnCode, @returnMsg ReturnMessage,@intRowStatus 'RecordStatus'
		END
		ELSE
		BEGIN
		 SELECT @ReturnCode ReturnCode, @returnMsg ReturnMessage,@intRowStatus 'RecordStatus'
		END



	END TRY
	BEGIN CATCH
		SET @returnCode = ERROR_NUMBER()
		SET @returnMsg = 
		'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) 
		+ ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY())
		+ ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE())
		+ ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '')
		+ ' ErrorLine: ' +  CONVERT(VARCHAR, ISNULL(ERROR_LINE(), ''))
		+ ' ErrorMessage: '+ ERROR_MESSAGE()

		SELECT @returnCode 'ReturnCode', @returnMsg 'ReturnMessage',@intRowStatus 'RecordStatus'
		IF @@Trancount >0
				 ROLLBACK TRANSACTION;
				
	END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USP_HUM_HUMAN_MASTER_SET]...';


GO
-- ================================================================================================
-- Name: USP_HUM_HUMAN_MASTER_SET
--
-- Description: Insert or update a human master (actual) record.
--          
-- Revision History:
-- Name            Date       Change
-- --------------- ---------- --------------------------------------------------------------------
-- Stephen Long    11/28/2018 Initial release for new API.
-- Stephen Long    01/18/2019 Added entered date as a part of the insert human actual statement; 
--                            sets it to the system current date/time.  Syncs up with use case 
--                            HUC02.  Also added copy to human indicator for requirements in 
--                            laboratory module, use case 10.
-- Mark Wilson     09/23/2021 updated for consistency and for updates to locations.
-- Mark Wilson     10/04/2021 updated blnGeoLocationShared to correct addressing issues.
-- Mark Wilson     10/06/2021 minor cleanup.
-- Mark Wilson     10/07/2021 added Permanent location params and sets, added Elevation.
-- Mark Wilson     10/19/2021 Updated to call USSP_GBL_ADDRESS_SET.
-- Mark Wilson     10/25/2021 Updated  EXEC USSP_GBL_ADDRESS_SET to remove @LanguageID
-- Steven Verner   02/13/2022 Suppressed the return of sub calls to global address set SP to keep from interfering with POCO generation.
-- Leo Tracchia	   11/21/2022 Added statements for Audit logging 
-- Testing Code
/*

EXEC	@return_value = [dbo].[USP_HUM_HUMAN_MASTER_SET]
		@HumanMasterID = NULL,
		@FirstName = N'Mark',
		@SecondName = N'C.',
		@LastName = N'Wilson',
		@DateOfBirth = N'04/18/1962',
		@DateOfDeath = N'04/18/2062',
		@ReportedAge = 59,
		@ReportAgeUOMID = 10042003,
		@HumanGenderTypeID = 10043002,
		@OccupationTypeID = 6920000004,
		@PassportNumber = N'2224446661212',
		@EmployerName = N'Georgia Tech',
		@EmployedDateLastPresent = N'2021-10-04 14:55:23.090',
		@EmployeridfsLocation = 1345350000000,
		@EmployerstrStreetName = N'Baker Street',
		@EmployerstrBuilding = N'221B',
		@EmployeridfsPostalCode = N'33300',
		@EmployerPhone = N'011222333444',
		@HumanidfsLocation = 1345350000000,
		@HumanstrStreetName = N'Elm Street',
		@HumanstrBuilding = N'1224',
		@HumanidfsPostalCode = N'33300',
		@HomePhone = N'011222333444'

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_HUMAN_MASTER_SET] (
	@HumanMasterID BIGINT = NULL,
	@CopyToHumanIndicator BIT = 0, 
	@PersonalIDType BIGINT = NULL,
	@EIDSSPersonID NVARCHAR(200) = NULL,
	@PersonalID NVARCHAR(100) = NULL,
	@FirstName NVARCHAR(200) = NULL,
	@SecondName NVARCHAR(200) = NULL,
	@LastName NVARCHAR(200),
	@DateOfBirth DATETIME = NULL,
	@DateOfDeath DATETIME = NULL,
	@ReportedAge INT = NULL,
	@ReportAgeUOMID BIGINT = NULL,
	@HumanGenderTypeID BIGINT = NULL,
	@OccupationTypeID BIGINT = NULL,
	@CitizenshipTypeID BIGINT = NULL,
	@PassportNumber NVARCHAR(20) = NULL,
	@IsEmployedTypeID BIGINT = NULL,
---------------------------------------------------------------
	@EmployerName NVARCHAR(200) = NULL,
	@EmployedDateLastPresent DATETIME = NULL,
	@EmployerForeignAddressIndicator BIT = 0,
	@EmployerForeignAddressString NVARCHAR(200) = NULL,
	@EmployerGeoLocationID BIGINT = NULL,
	@EmployeridfsLocation BIGINT = NULL,
	@EmployerstrStreetName NVARCHAR(200) = NULL,
	@EmployerstrApartment NVARCHAR(200) = NULL,
	@EmployerstrBuilding NVARCHAR(200) = NULL,
	@EmployerstrHouse NVARCHAR(200) = NULL,
	@EmployeridfsPostalCode NVARCHAR(200) = NULL,
	@EmployerPhone NVARCHAR(100) = NULL,
---------------------------------------------------------------
	@IsStudentTypeID BIGINT = NULL,
	@SchoolName NVARCHAR(200) = NULL,
	@SchoolDateLastAttended DATETIME = NULL,
	@SchoolForeignAddressIndicator BIT = 0,
	@SchoolForeignAddressString NVARCHAR(200) = NULL,
	@SchoolGeoLocationID BIGINT = NULL,
	@SchoolidfsLocation BIGINT = NULL,
	@SchoolstrStreetName NVARCHAR(200) = NULL,
	@SchoolstrApartment NVARCHAR(200) = NULL,
	@SchoolstrBuilding NVARCHAR(200) = NULL,
	@SchoolstrHouse NVARCHAR(200) = NULL,
	@SchoolidfsPostalCode NVARCHAR(200) = NULL,
	@SchoolPhone NVARCHAR(100) = NULL,
---------------------------------------------------------------
	@HumanGeoLocationID BIGINT = NULL,
	@HumanidfsLocation BIGINT = NULL,
	@HumanstrStreetName NVARCHAR(200) = NULL,
	@HumanstrApartment NVARCHAR(200) = NULL,
	@HumanstrBuilding NVARCHAR(200) = NULL,
	@HumanstrHouse NVARCHAR(200) = NULL,
	@HumanidfsPostalCode NVARCHAR(200) = NULL,
	@HumanstrLatitude FLOAT = NULL,
	@HumanstrLongitude FLOAT = NULL,
	@HumanstrElevation FLOAT = NULL,
---------------------------------------------------------------
	@HumanPermGeoLocationID BIGINT = NULL,
	@HumanPermidfsLocation BIGINT = NULL,
	@HumanPermstrStreetName NVARCHAR(200) = NULL,
	@HumanPermstrApartment NVARCHAR(200) = NULL,
	@HumanPermstrBuilding NVARCHAR(200) = NULL,
	@HumanPermstrHouse NVARCHAR(200) = NULL,
	@HumanPermidfsPostalCode NVARCHAR(200) = NULL,
---------------------------------------------------------------
	@HumanAltGeoLocationID BIGINT = NULL,
	@HumanAltForeignAddressIndicator BIT = 0,
	@HumanAltForeignAddressString NVARCHAR(200) = NULL,
	@HumanAltidfsLocation BIGINT = NULL,
	@HumanAltstrStreetName NVARCHAR(200) = NULL,
	@HumanAltstrApartment NVARCHAR(200) = NULL,
	@HumanAltstrBuilding NVARCHAR(200) = NULL,
	@HumanAltstrHouse NVARCHAR(200) = NULL,
	@HumanAltidfsPostalCode NVARCHAR(200) = NULL,
---------------------------------------------------------------
	@RegistrationPhone NVARCHAR(200) = NULL,
	@HomePhone NVARCHAR(200) = NULL,
	@WorkPhone NVARCHAR(200) = NULL,
	@ContactPhoneCountryCode INT = NULL,
	@ContactPhone NVARCHAR(200) = NULL,
	@ContactPhoneTypeID BIGINT = NULL,
	@ContactPhone2CountryCode INT = NULL,
	@ContactPhone2 NVARCHAR(200) = NULL,
	@ContactPhone2TypeID BIGINT = NULL,
	@AuditUser NVARCHAR(100) = ''
	)
AS
BEGIN
	SET NOCOUNT ON;

	IF (@AuditUser = '' OR @AuditUser IS NULL)
		SET @AuditUser = SUSER_NAME()

	DECLARE @ReturnCode INT = 0,
		@ReturnMessage NVARCHAR(MAX) = 'SUCCESS', 
		@HumanID BIGINT = NULL;

	DECLARE @SupressSelect TABLE (
		ReturnCode INT,
		ReturnMessage NVARCHAR(MAX)
		);

	DECLARE @idfsLocation BIGINT
	DECLARE @AdminLevel INT

	--Data Audit--

		DECLARE @idfUserId BIGINT =NULL;
		DECLARE @idfSiteId BIGINT = NULL;
		DECLARE @idfsDataAuditEventType bigint = NULL;
		DECLARE @idfsObjectType bigint = 10017036; -- Need to review the value --
		DECLARE @idfObject bigint = @HumanMasterID;
		DECLARE @idfObjectTable_tlbHumanActual bigint = 4573200000000;
		DECLARE @idfObjectTable_HumanActualAddlInfo bigint = 52577590000000;
		DECLARE @idfDataAuditEvent bigint = NULL;
		--DECLARE @idfObjectTable_tlbCampaignToDiagnosis bigint = 707000000000;
		--DECLARE @idfObjectTable_tlbMonitoringSession bigint = 707040000000;	

		DECLARE @tlbHumanActual_BeforeEdit TABLE
		(
			idfHumanActual bigint,
			idfsOccupationType bigint,
			idfsNationality bigint,
			idfsHumanGender bigint,
			idfCurrentResidenceAddress bigint,
			idfEmployerAddress bigint,
			idfRegistrationAddress bigint,
			datDateofBirth datetime,
			datDateOfDeath datetime,
			strLastName nvarchar(200),
			strSecondName nvarchar(200),
			strFirstName nvarchar(200),
			strRegistrationPhone nvarchar(200),
			strEmployerName nvarchar(200),
			strHomePhone nvarchar(200),
			strWorkPhone nvarchar(200),
			idfsPersonIDType bigint,
			strPersonID nvarchar(100),
			datEnteredDate datetime,
			datModificationDate datetime			
		)

		DECLARE @tlbHumanActual_AfterEdit TABLE
		(
			idfHumanActual bigint,
			idfsOccupationType bigint,
			idfsNationality bigint,
			idfsHumanGender bigint,
			idfCurrentResidenceAddress bigint,
			idfEmployerAddress bigint,
			idfRegistrationAddress bigint,
			datDateofBirth datetime,
			datDateOfDeath datetime,
			strLastName nvarchar(200),
			strSecondName nvarchar(200),
			strFirstName nvarchar(200),
			strRegistrationPhone nvarchar(200),
			strEmployerName nvarchar(200),
			strHomePhone nvarchar(200),
			strWorkPhone nvarchar(200),
			idfsPersonIDType bigint,
			strPersonID nvarchar(100),
			datEnteredDate datetime,
			datModificationDate datetime			
		)

		DECLARE @HumanActualAddlInfo_BeforeEdit TABLE
		(
			HumanActualAddlInfoUID bigint,
			ReportedAge int,
			ReportedAgeUOMID bigint,
			PassportNbr varchar(20),
			IsEmployedID bigint,
			EmployerPhoneNbr varchar(200),
			EmployedDTM datetime,
			IsStudentID bigint,
			SchoolName varchar(200),
			SchoolPhoneNbr varchar(200),
			SchoolAddressID bigint,
			SchoolLastAttendDTM datetime,
			ContactPhoneCountryCode int,
			ContactPhoneNbr varchar(200),
			ContactPhoneNbrTypeID bigint,
			ContactPhone2CountryCode int,
			ContactPhone2Nbr varchar(200),
			ContactPhone2NbrTypeID bigint,
			AltAddressID bigint			
		)

		DECLARE @HumanActualAddlInfo_AfterEdit TABLE
		(
			HumanActualAddlInfoUID bigint,
			ReportedAge int,
			ReportedAgeUOMID bigint,
			PassportNbr varchar(20),
			IsEmployedID bigint,
			EmployerPhoneNbr varchar(200),
			EmployedDTM datetime,
			IsStudentID bigint,
			SchoolName varchar(200),
			SchoolPhoneNbr varchar(200),
			SchoolAddressID bigint,
			SchoolLastAttendDTM datetime,
			ContactPhoneCountryCode int,
			ContactPhoneNbr varchar(200),
			ContactPhoneNbrTypeID bigint,
			ContactPhone2CountryCode int,
			ContactPhone2Nbr varchar(200),
			ContactPhone2NbrTypeID bigint,
			AltAddressID bigint			
		)

	--Data Audit--

	BEGIN TRY
		BEGIN TRANSACTION;
		SET @AdminLevel = 0
		SELECT @AdminLevel = node.GetLevel() FROM dbo.gisLocation WHERE idfsLocation = @EmployeridfsLocation

		-- Set Employer Address 
		IF (@AdminLevel > 2)
			OR @EmployerForeignAddressIndicator = 1

			INSERT INTO @SupressSelect
			EXECUTE dbo.USSP_GBL_ADDRESS_SET 
				@GeolocationID = @EmployerGeoLocationID OUTPUT,
				@ResidentTypeID = NULL,
				@GroundTypeID = NULL,
				@GeolocationTypeID = NULL,
				@LocationID = @EmployeridfsLocation,
				@Apartment = @EmployerstrApartment,
				@Building = @EmployerstrBuilding,
				@StreetName = @EmployerstrStreetName,
				@House = @EmployerstrHouse,
				@PostalCodeString = @EmployeridfsPostalCode,
				@DescriptionString = NULL,
				@Distance = NULL,
				@Latitude = NULL,
				@Longitude = NULL,
				@Elevation = NULL,
				@Accuracy = NULL,
				@Alignment = NULL,
				@ForeignAddressIndicator = @EmployerForeignAddressIndicator,
				@ForeignAddressString = @EmployerForeignAddressString,
				@GeolocationSharedIndicator = 1,
				@AuditUserName = @AuditUser,
				@ReturnCode = @ReturnCode OUTPUT,
				@ReturnMessage = @ReturnMessage OUTPUT;

		-- Set School Address 
		SET @AdminLevel = 0
		SELECT @AdminLevel = node.GetLevel() FROM dbo.gisLocation WHERE idfsLocation = @SchoolidfsLocation
		
		IF (@AdminLevel > 2)
			OR @SchoolForeignAddressIndicator = 1

			INSERT INTO @SupressSelect
			EXECUTE dbo.USSP_GBL_ADDRESS_SET 
				@GeolocationID = @SchoolGeoLocationID OUTPUT,
				@ResidentTypeID = NULL,
				@GroundTypeID = NULL,
				@GeolocationTypeID = NULL,
				@LocationID = @SchoolidfsLocation,
				@Apartment = @SchoolstrApartment,
				@Building = @SchoolstrBuilding,
				@StreetName = @SchoolstrStreetName,
				@House = @SchoolstrHouse,
				@PostalCodeString = @SchoolidfsPostalCode,
				@DescriptionString = NULL,
				@Distance = NULL,
				@Latitude = NULL,
				@Longitude = NULL,
				@Elevation = NULL,
				@Accuracy = NULL,
				@Alignment = NULL,
				@ForeignAddressIndicator = @SchoolForeignAddressIndicator,
				@ForeignAddressString = @SchoolForeignAddressString,
				@GeolocationSharedIndicator = 1,
				@AuditUserName = @AuditUser,
				@ReturnCode = @ReturnCode OUTPUT,
				@ReturnMessage = @ReturnMessage OUTPUT;

		-- Set Current Address 
		SET @AdminLevel = 0
		SELECT @AdminLevel = node.GetLevel() FROM dbo.gisLocation WHERE idfsLocation = @HumanidfsLocation
		
		IF (@AdminLevel > 2)
			INSERT INTO @SupressSelect
			EXECUTE dbo.USSP_GBL_ADDRESS_SET 
				@GeolocationID = @HumanGeoLocationID OUTPUT,
				@ResidentTypeID = NULL,
				@GroundTypeID = NULL,
				@GeolocationTypeID = NULL,
				@LocationID = @HumanidfsLocation,
				@Apartment = @HumanstrApartment,
				@Building = @HumanstrBuilding,
				@StreetName = @HumanstrStreetName,
				@House = @HumanstrHouse,
				@PostalCodeString = @HumanidfsPostalCode,
				@DescriptionString = NULL,
				@Distance = NULL,
				@Latitude = @HumanstrLatitude,
				@Longitude = @HumanstrLongitude,
				@Elevation = @HumanstrElevation,
				@Accuracy = NULL,
				@Alignment = NULL,
				@ForeignAddressIndicator = 0,
				@ForeignAddressString = NULL,
				@GeolocationSharedIndicator = 1, 
				@AuditUserName = @AuditUser,
				@ReturnCode = @ReturnCode OUTPUT,
				@ReturnMessage = @ReturnMessage OUTPUT;

		-- Set Permanent Address 
		SET @AdminLevel = 0
		SELECT @AdminLevel = node.GetLevel() FROM dbo.gisLocation WHERE idfsLocation = @HumanPermidfsLocation
		
		IF (@AdminLevel > 2)
			INSERT INTO @SupressSelect
			EXECUTE dbo.USSP_GBL_ADDRESS_SET 
				@GeolocationID =@HumanPermGeoLocationID OUTPUT,
				@ResidentTypeID = NULL,
				@GroundTypeID = NULL,
				@GeolocationTypeID = NULL,
				@LocationID = @HumanPermidfsLocation,
				@Apartment =@HumanPermstrApartment,
				@Building =@HumanPermstrBuilding,
				@StreetName =@HumanPermstrStreetName,
				@House =@HumanPermstrHouse,
				@PostalCodeString =@HumanPermidfsPostalCode,
				@DescriptionString = NULL,
				@Distance = NULL,
				@Latitude = NULL,
				@Longitude = NULL,
				@Elevation = NULL,
				@Accuracy = NULL,
				@Alignment = NULL,
				@ForeignAddressIndicator = 0,
				@ForeignAddressString = NULL,
				@GeolocationSharedIndicator = 1, 
				@AuditUserName = @AuditUser,
				@ReturnCode = @ReturnCode OUTPUT,
				@ReturnMessage = @ReturnMessage OUTPUT;

		-- Set Alternate Address
		SET @AdminLevel = 0
		SELECT @AdminLevel = node.GetLevel() FROM dbo.gisLocation WHERE idfsLocation = @HumanAltidfsLocation
		
		IF (@AdminLevel > 2) OR @HumanAltForeignAddressIndicator = 1
			INSERT INTO @SupressSelect
			EXECUTE dbo.USSP_GBL_ADDRESS_SET
				@GeolocationID = @HumanAltGeoLocationID OUTPUT,
				@ResidentTypeID = NULL,
				@GroundTypeID = NULL,
				@GeolocationTypeID = NULL,
				@LocationID = @HumanAltidfsLocation,
				@Apartment = @HumanAltstrApartment,
				@Building = @HumanAltstrBuilding,
				@StreetName = @HumanAltstrStreetName,
				@House = @HumanAltstrHouse,
				@PostalCodeString = @HumanAltidfsPostalCode,
				@DescriptionString = NULL,
				@Distance = NULL,
				@Latitude = NULL,
				@Longitude = NULL,
				@Elevation = NULL,
				@Accuracy = NULL,
				@Alignment = NULL,
				@ForeignAddressIndicator = @HumanAltForeignAddressIndicator,
				@ForeignAddressString = @HumanAltForeignAddressString,
				@GeolocationSharedIndicator = 1, 
				@AuditUserName = @AuditUser,
				@ReturnCode = @ReturnCode OUTPUT,
				@ReturnMessage = @ReturnMessage OUTPUT;

		--Data Audit--
			-- Get and Set UserId and SiteId
			SELECT @idfUserId = userInfo.UserId, @idfSiteId = UserInfo.SiteId FROM dbo.FN_UserSiteInformation(@AuditUser) userInfo
		--Data Audit--

		IF NOT EXISTS (
				SELECT *
				FROM dbo.tlbHumanActual
				WHERE idfHumanActual = @HumanMasterID
					AND intRowStatus = 0
				)
		BEGIN
			INSERT INTO @SupressSelect
			EXECUTE dbo.USP_GBL_NEXTKEYID_GET 
				@tableName = N'tlbHumanActual',
				@idfsKey = @HumanMasterID OUTPUT;

			INSERT INTO dbo.tlbHumanActual (
				idfHumanActual,
				idfsNationality,
				idfsHumanGender,
				idfCurrentResidenceAddress,
				idfsOccupationType,
				idfEmployerAddress,
				idfRegistrationAddress,
				datDateofBirth,
				datDateOfDeath,
				strFirstName,
				strSecondName,
				strLastName,
				strRegistrationPhone,
				strEmployerName,
				strHomePhone,
				strWorkPhone,
				idfsPersonIDType,
				strPersonID,
				intRowStatus,
				SourceSystemNameID,
				SourceSystemKeyValue,
				AuditCreateUser,
				AuditCreateDTM,
				AuditUpdateUser,
				AuditUpdateDTM
				)
			VALUES (
				@HumanMasterID,
				@CitizenshipTypeID,
				@HumanGenderTypeID,
				@HumanGeoLocationID,
				@OccupationTypeID,
				@EmployerGeoLocationID,
				@HumanPermGeoLocationID,
				@DateOfBirth,
				@DateOfDeath,
				@FirstName,
				@SecondName,
				@LastName,
				@RegistrationPhone,
				@EmployerName,
				@HomePhone,
				@WorkPhone,
				@PersonalIDType,
				@PersonalID,
				0,
				10519001,
				'[{"idfHumanActual":' + CAST(@HumanMasterID AS NVARCHAR(300)) + '}]',
				@AuditUser,
				GETDATE(),
				@AuditUser,
				GETDATE()
				);

			--Data Audit--
			
				-- tauDataAuditEvent Event Type - Create 
				set @idfsDataAuditEventType = 10016001;
			
				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SupressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @HumanMasterID, @idfObjectTable_tlbHumanActual, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_tlbHumanActual, @HumanMasterID)
			
			--Data Audit--

			INSERT INTO @SupressSelect
			EXECUTE dbo.USP_GBL_NextNumber_GET @ObjectName = N'EIDSS Person',
				@NextNumberValue = @EIDSSPersonID OUTPUT,
				@InstallationSite = NULL;

			INSERT INTO dbo.HumanActualAddlInfo (
				HumanActualAddlInfoUID,
				EIDSSPersonID,
				ReportedAge,
				ReportedAgeUOMID,
				PassportNbr,
				IsEmployedID,
				EmployerPhoneNbr,
				EmployedDTM,
				IsStudentID,
				SchoolName,
				SchoolPhoneNbr,
				SchoolAddressID,
				SchoolLastAttendDTM,
				ContactPhoneCountryCode,
				ContactPhoneNbr,
				ContactPhoneNbrTypeID,
				ContactPhone2CountryCode,
				ContactPhone2Nbr,
				ContactPhone2NbrTypeID,
				AltAddressID,
				intRowStatus,
				SourceSystemNameID,
				SourceSystemKeyValue,
				AuditCreateUser,
				AuditCreateDTM,
				AuditUpdateUser,
				AuditUpdateDTM
				)
			VALUES (
				@HumanMasterID,
				@EIDSSPersonID,
				@ReportedAge,
				@ReportAgeUOMID,
				@PassportNumber,
				@IsEmployedTypeID,
				@EmployerPhone,
				@EmployedDateLastPresent,
				@IsStudentTypeID,
				@SchoolName,
				@SchoolPhone,
				@SchoolGeoLocationID,
				@SchoolDateLastAttended,
				@ContactPhoneCountryCode,
				@ContactPhone,
				@ContactPhoneTypeID,
				@ContactPhone2CountryCode,
				@ContactPhone2,
				@ContactPhone2TypeID,
				@HumanAltGeoLocationID,
				0,
				10519001,
				'[{"HumanActualAddlInfoUID":' + CAST(@HumanMasterID AS NVARCHAR(300)) + '}]',
				@AuditUser,
				GETDATE(),
				@AuditUser,
				GETDATE()
				);

			--Data Audit--			
				-- tauDataAuditEvent Event Type - Create 									
				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_HumanActualAddlInfo, @HumanMasterID)			
			--Data Audit--

			-- Create a human record from human actual for the laboratory module; register new sample.
			IF @CopyToHumanIndicator = 1
				BEGIN
					INSERT INTO @SupressSelect
					EXECUTE dbo.USP_HUM_COPYHUMANACTUALTOHUMAN @HumanMasterID, @HumanID OUTPUT, @ReturnCode OUTPUT, @ReturnMessage OUTPUT;
					IF @ReturnCode <> 0 
						BEGIN
							RETURN;
						END;
				END;
		END;
		ELSE
		BEGIN

			INSERT INTO @tlbHumanActual_BeforeEdit (
				idfHumanActual, 
				idfsOccupationType, 
				idfsNationality, 
				idfsHumanGender, 
				idfCurrentResidenceAddress, 
				idfEmployerAddress, 
				idfRegistrationAddress, 
				datDateofBirth, 
				datDateOfDeath, 
				strLastName, 
				strSecondName, 
				strFirstName,
				strRegistrationPhone,
				strEmployerName,
				strHomePhone,
				strWorkPhone,
				idfsPersonIDType,
				strPersonID,
				datEnteredDate,
				datModificationDate)
			SELECT 
				idfHumanActual, 
				idfsOccupationType, 
				idfsNationality, 
				idfsHumanGender, 
				idfCurrentResidenceAddress, 
				idfEmployerAddress, 
				idfRegistrationAddress, 
				datDateofBirth, 
				datDateOfDeath, 
				strLastName, 
				strSecondName, 
				strFirstName,
				strRegistrationPhone,
				strEmployerName,
				strHomePhone,
				strWorkPhone,
				idfsPersonIDType,
				strPersonID,
				datEnteredDate,
				datModificationDate
				FROM tlbHumanActual WHERE idfHumanActual = @HumanMasterID;

			UPDATE dbo.tlbHumanActual
			SET idfsNationality = @CitizenshipTypeID,
				idfsHumanGender = @HumanGenderTypeID,
				idfCurrentResidenceAddress = @HumanGeoLocationID,
				idfsOccupationType = @OccupationTypeID,
				idfEmployerAddress = @EmployerGeoLocationID,
				idfRegistrationAddress = @HumanPermGeoLocationID,
				datDateofBirth = @DateOfBirth,
				datDateOfDeath = @DateOfDeath,
				strFirstName = @FirstName,
				strSecondName = @SecondName,
				strLastName = @LastName,
				strRegistrationPhone = @RegistrationPhone,
				strEmployerName = @EmployerName,
				strHomePhone = @HomePhone,
				strWorkPhone = @WorkPhone,
				idfsPersonIDType = @PersonalIDType,
				strPersonID = @PersonalID,
				SourceSystemNameID = ISNULL(SourceSystemNameID, 10519001),
				SourceSystemKeyValue = ISNULL(SourceSystemKeyValue, '[{"idfHumanActual":' + CAST(@HumanMasterID AS NVARCHAR(300)) + '}]'),
				AuditCreateUser = @AuditUser,
				AuditCreateDTM = GETDATE(),
				AuditUpdateUser = @AuditUser,
				AuditUpdateDTM = GETDATE()
			WHERE idfHumanActual = @HumanMasterID;

			INSERT INTO @tlbHumanActual_AfterEdit (
				idfHumanActual, 
				idfsOccupationType, 
				idfsNationality, 
				idfsHumanGender, 
				idfCurrentResidenceAddress, 
				idfEmployerAddress, 
				idfRegistrationAddress, 
				datDateofBirth, 
				datDateOfDeath, 
				strLastName, 
				strSecondName, 
				strFirstName,
				strRegistrationPhone,
				strEmployerName,
				strHomePhone,
				strWorkPhone,
				idfsPersonIDType,
				strPersonID,
				datEnteredDate,
				datModificationDate)
			SELECT 
				idfHumanActual, 
				idfsOccupationType, 
				idfsNationality, 
				idfsHumanGender, 
				idfCurrentResidenceAddress, 
				idfEmployerAddress, 
				idfRegistrationAddress, 
				datDateofBirth, 
				datDateOfDeath, 
				strLastName, 
				strSecondName, 
				strFirstName,
				strRegistrationPhone,
				strEmployerName,
				strHomePhone,
				strWorkPhone,
				idfsPersonIDType,
				strPersonID,
				datEnteredDate,
				datModificationDate
				FROM tlbHumanActual WHERE idfHumanActual = @HumanMasterID;
			
			--DataAudit-- 
				--  tauDataAuditEvent  Event Type- Edit 
				set @idfsDataAuditEventType = 10016003;
			
				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SupressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_tlbHumanActual, @idfDataAuditEvent OUTPUT

				--idfsOccupationType
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573220000000,
					a.idfHumanActual,
					null,
					a.idfsOccupationType,
					b.idfsOccupationType 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.idfsOccupationType <> b.idfsOccupationType) 
					or(a.idfsOccupationType is not null and b.idfsOccupationType is null)
					or(a.idfsOccupationType is null and b.idfsOccupationType is not null)

				--idfsNationality
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573230000000,
					a.idfHumanActual,
					null,
					a.idfsNationality,
					b.idfsNationality 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.idfsNationality <> b.idfsNationality) 
					or(a.idfsNationality is not null and b.idfsNationality is null)
					or(a.idfsNationality is null and b.idfsNationality is not null)

				--idfsHumanGender
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573240000000,
					a.idfHumanActual,
					null,
					a.idfsHumanGender,
					b.idfsHumanGender 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.idfsHumanGender <> b.idfsHumanGender) 
					or(a.idfsHumanGender is not null and b.idfsHumanGender is null)
					or(a.idfsHumanGender is null and b.idfsHumanGender is not null)

				--idfCurrentResidenceAddress
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573250000000,
					a.idfHumanActual,
					null,
					a.idfCurrentResidenceAddress,
					b.idfCurrentResidenceAddress 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.idfCurrentResidenceAddress <> b.idfCurrentResidenceAddress) 
					or(a.idfCurrentResidenceAddress is not null and b.idfCurrentResidenceAddress is null)
					or(a.idfCurrentResidenceAddress is null and b.idfCurrentResidenceAddress is not null)

				--idfEmployerAddress
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573260000000,
					a.idfHumanActual,
					null,
					a.idfEmployerAddress,
					b.idfEmployerAddress 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.idfEmployerAddress <> b.idfEmployerAddress) 
					or(a.idfEmployerAddress is not null and b.idfEmployerAddress is null)
					or(a.idfEmployerAddress is null and b.idfEmployerAddress is not null)

				--idfRegistrationAddress
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573270000000,
					a.idfHumanActual,
					null,
					a.idfRegistrationAddress,
					b.idfRegistrationAddress 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.idfRegistrationAddress <> b.idfRegistrationAddress) 
					or(a.idfRegistrationAddress is not null and b.idfRegistrationAddress is null)
					or(a.idfRegistrationAddress is null and b.idfRegistrationAddress is not null)

				--datDateofBirth
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573280000000,
					a.idfHumanActual,
					null,
					a.datDateofBirth,
					b.datDateofBirth 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.datDateofBirth <> b.datDateofBirth) 
					or(a.datDateofBirth is not null and b.datDateofBirth is null)
					or(a.datDateofBirth is null and b.datDateofBirth is not null)

				--datDateOfDeath
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573290000000,
					a.idfHumanActual,
					null,
					a.datDateOfDeath,
					b.datDateOfDeath 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.datDateOfDeath <> b.datDateOfDeath) 
					or(a.datDateOfDeath is not null and b.datDateOfDeath is null)
					or(a.datDateOfDeath is null and b.datDateOfDeath is not null)

				--strLastName
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573300000000,
					a.idfHumanActual,
					null,
					a.strLastName,
					b.strLastName 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strLastName <> b.strLastName) 
					or(a.strLastName is not null and b.strLastName is null)
					or(a.strLastName is null and b.strLastName is not null)

				--strSecondName
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573310000000,
					a.idfHumanActual,
					null,
					a.strSecondName,
					b.strSecondName 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strSecondName <> b.strSecondName) 
					or(a.strSecondName is not null and b.strSecondName is null)
					or(a.strSecondName is null and b.strSecondName is not null)

				--strFirstName
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573320000000,
					a.idfHumanActual,
					null,
					a.strFirstName,
					b.strFirstName 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strFirstName <> b.strFirstName) 
					or(a.strFirstName is not null and b.strFirstName is null)
					or(a.strFirstName is null and b.strFirstName is not null)

				--strRegistrationPhone
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573330000000,
					a.idfHumanActual,
					null,
					a.strRegistrationPhone,
					b.strRegistrationPhone 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strRegistrationPhone <> b.strRegistrationPhone) 
					or(a.strRegistrationPhone is not null and b.strRegistrationPhone is null)
					or(a.strRegistrationPhone is null and b.strRegistrationPhone is not null)

				--strEmployerName
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573340000000,
					a.idfHumanActual,
					null,
					a.strEmployerName,
					b.strEmployerName 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strEmployerName <> b.strEmployerName) 
					or(a.strEmployerName is not null and b.strEmployerName is null)
					or(a.strEmployerName is null and b.strEmployerName is not null)

				--strHomePhone
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573350000000,
					a.idfHumanActual,
					null,
					a.strHomePhone,
					b.strHomePhone 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strHomePhone <> b.strHomePhone) 
					or(a.strHomePhone is not null and b.strHomePhone is null)
					or(a.strHomePhone is null and b.strHomePhone is not null)

				--strWorkPhone
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					4573360000000,
					a.idfHumanActual,
					null,
					a.strWorkPhone,
					b.strWorkPhone 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strWorkPhone <> b.strWorkPhone) 
					or(a.strWorkPhone is not null and b.strWorkPhone is null)
					or(a.strWorkPhone is null and b.strWorkPhone is not null)

				--idfsPersonIDType
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					12527780000000,
					a.idfHumanActual,
					null,
					a.idfsPersonIDType,
					b.idfsPersonIDType 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.idfsPersonIDType <> b.idfsPersonIDType) 
					or(a.idfsPersonIDType is not null and b.idfsPersonIDType is null)
					or(a.idfsPersonIDType is null and b.idfsPersonIDType is not null)

				--strPersonID
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					12527790000000,
					a.idfHumanActual,
					null,
					a.strPersonID,
					b.strPersonID 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.strPersonID <> b.strPersonID) 
					or(a.strPersonID is not null and b.strPersonID is null)
					or(a.strPersonID is null and b.strPersonID is not null)

				--datEnteredDate
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					51389550000000,
					a.idfHumanActual,
					null,
					a.datEnteredDate,
					b.datEnteredDate 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.datEnteredDate <> b.datEnteredDate) 
					or(a.datEnteredDate is not null and b.datEnteredDate is null)
					or(a.datEnteredDate is null and b.datEnteredDate is not null)

				--datModificationDate
				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, 
					idfObjectTable, 
					idfColumn, 
					idfObject, 
					idfObjectDetail, 
					strOldValue, 
					strNewValue)
				select 
					@idfDataAuditEvent,
					@idfObjectTable_tlbHumanActual, 
					51389560000000,
					a.idfHumanActual,
					null,
					a.datModificationDate,
					b.datModificationDate 
				from @tlbHumanActual_BeforeEdit a  inner join @tlbHumanActual_AfterEdit b on a.idfHumanActual = b.idfHumanActual
				where (a.datModificationDate <> b.datModificationDate) 
					or(a.datModificationDate is not null and b.datModificationDate is null)
					or(a.datModificationDate is null and b.datModificationDate is not null)

			--DataAudit-- 

			INSERT INTO @HumanActualAddlInfo_BeforeEdit (
				HumanActualAddlInfoUID,
				ReportedAge, 
				ReportedAgeUOMID,
				PassportNbr,
				IsEmployedID,
				EmployerPhoneNbr,
				EmployedDTM,
				IsStudentID,
				SchoolName,
				SchoolPhoneNbr,
				SchoolAddressID,
				SchoolLastAttendDTM,
				ContactPhoneCountryCode,
				ContactPhoneNbr,
				ContactPhoneNbrTypeID,
				ContactPhone2CountryCode,
				ContactPhone2Nbr,
				ContactPhone2NbrTypeID,
				AltAddressID)			
			SELECT 
				HumanActualAddlInfoUID,
				ReportedAge, 
				ReportedAgeUOMID,
				PassportNbr,
				IsEmployedID,
				EmployerPhoneNbr,
				EmployedDTM,
				IsStudentID,
				SchoolName,
				SchoolPhoneNbr,
				SchoolAddressID,
				SchoolLastAttendDTM,
				ContactPhoneCountryCode,
				ContactPhoneNbr,
				ContactPhoneNbrTypeID,
				ContactPhone2CountryCode,
				ContactPhone2Nbr,
				ContactPhone2NbrTypeID,
				AltAddressID
				FROM HumanActualAddlInfo WHERE HumanActualAddlInfoUID = @HumanMasterID;

			UPDATE dbo.HumanActualAddlInfo
			SET ReportedAge = @ReportedAge,
				ReportedAgeUOMID = @ReportAgeUOMID,
				PassportNbr = @PassportNumber,
				IsEmployedID = @IsEmployedTypeID,
				EmployerPhoneNbr = @EmployerPhone,
				EmployedDTM = @EmployedDateLastPresent,
				IsStudentID = @IsStudentTypeID,
				SchoolName = @SchoolName,
				SchoolPhoneNbr = @SchoolPhone,
				SchoolAddressID = @SchoolGeoLocationID,
				SchoolLastAttendDTM = @SchoolDateLastAttended,
				ContactPhoneCountryCode = @ContactPhoneCountryCode,
				ContactPhoneNbr = @ContactPhone,
				ContactPhoneNbrTypeID = @ContactPhoneTypeID,
				ContactPhone2CountryCode = @ContactPhone2CountryCode,
				ContactPhone2Nbr = @ContactPhone2,
				ContactPhone2NbrTypeID = @ContactPhone2TypeID,
				AltAddressID = @HumanAltGeoLocationID,
				SourceSystemNameID = ISNULL(SourceSystemNameID, 10519001),
				SourceSystemKeyValue = ISNULL(SourceSystemKeyValue, '[{"HumanActualAddlInfoUID":' + CAST(@HumanMasterID AS NVARCHAR(300)) + '}]'),
				AuditCreateUser = @AuditUser,
				AuditCreateDTM = GETDATE(),
				AuditUpdateUser = @AuditUser,
				AuditUpdateDTM = GETDATE()
			WHERE HumanActualAddlInfoUID = @HumanMasterID;

			INSERT INTO @HumanActualAddlInfo_AfterEdit (
				HumanActualAddlInfoUID,
				ReportedAge, 
				ReportedAgeUOMID,
				PassportNbr,
				IsEmployedID,
				EmployerPhoneNbr,
				EmployedDTM,
				IsStudentID,
				SchoolName,
				SchoolPhoneNbr,
				SchoolAddressID,
				SchoolLastAttendDTM,
				ContactPhoneCountryCode,
				ContactPhoneNbr,
				ContactPhoneNbrTypeID,
				ContactPhone2CountryCode,
				ContactPhone2Nbr,
				ContactPhone2NbrTypeID,
				AltAddressID)
			SELECT 
				HumanActualAddlInfoUID,
				ReportedAge, 
				ReportedAgeUOMID,
				PassportNbr,
				IsEmployedID,
				EmployerPhoneNbr,
				EmployedDTM,
				IsStudentID,
				SchoolName,
				SchoolPhoneNbr,
				SchoolAddressID,
				SchoolLastAttendDTM,
				ContactPhoneCountryCode,
				ContactPhoneNbr,
				ContactPhoneNbrTypeID,
				ContactPhone2CountryCode,
				ContactPhone2Nbr,
				ContactPhone2NbrTypeID,
				AltAddressID			
				FROM HumanActualAddlInfo WHERE HumanActualAddlInfoUID = @HumanMasterID;

			--DataAudit-- 
			--  tauDataAuditEvent  Event Type- Edit 
			set @idfsDataAuditEventType = 10016003;
			
			-- insert record into tauDataAuditEvent - 
			INSERT INTO @SupressSelect
			EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_HumanActualAddlInfo, @idfDataAuditEvent OUTPUT

			--ReportedAge
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000001,
				a.HumanActualAddlInfoUID,
				null,
				a.ReportedAge,
				b.ReportedAge 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ReportedAge <> b.ReportedAge) 
				or(a.ReportedAge is not null and b.ReportedAge is null)
				or(a.ReportedAge is null and b.ReportedAge is not null)

			--ReportedAgeUOMID
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000002,
				a.HumanActualAddlInfoUID,
				null,
				a.ReportedAgeUOMID,
				b.ReportedAgeUOMID 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ReportedAgeUOMID <> b.ReportedAgeUOMID) 
				or(a.ReportedAgeUOMID is not null and b.ReportedAgeUOMID is null)
				or(a.ReportedAgeUOMID is null and b.ReportedAgeUOMID is not null)

			--PassportNbr
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000003,
				a.HumanActualAddlInfoUID,
				null,
				a.PassportNbr,
				b.PassportNbr 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.PassportNbr <> b.PassportNbr) 
				or(a.PassportNbr is not null and b.PassportNbr is null)
				or(a.PassportNbr is null and b.PassportNbr is not null)

			--IsEmployedID
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000004,
				a.HumanActualAddlInfoUID,
				null,
				a.IsEmployedID,
				b.IsEmployedID 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.IsEmployedID <> b.IsEmployedID) 
				or(a.IsEmployedID is not null and b.IsEmployedID is null)
				or(a.IsEmployedID is null and b.IsEmployedID is not null)

			--EmployerPhoneNbr
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000005,
				a.HumanActualAddlInfoUID,
				null,
				a.EmployerPhoneNbr,
				b.EmployerPhoneNbr 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.EmployerPhoneNbr <> b.EmployerPhoneNbr) 
				or(a.EmployerPhoneNbr is not null and b.EmployerPhoneNbr is null)
				or(a.EmployerPhoneNbr is null and b.EmployerPhoneNbr is not null)

			--EmployedDTM
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000006,
				a.HumanActualAddlInfoUID,
				null,
				a.EmployedDTM,
				b.EmployedDTM 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.EmployedDTM <> b.EmployedDTM) 
				or(a.EmployedDTM is not null and b.EmployedDTM is null)
				or(a.EmployedDTM is null and b.EmployedDTM is not null)

			--IsStudentID
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000007,
				a.HumanActualAddlInfoUID,
				null,
				a.IsStudentID,
				b.IsStudentID 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.IsStudentID <> b.IsStudentID) 
				or(a.IsStudentID is not null and b.IsStudentID is null)
				or(a.IsStudentID is null and b.IsStudentID is not null)

			--SchoolName
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000008,
				a.HumanActualAddlInfoUID,
				null,
				a.SchoolName,
				b.SchoolName 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.SchoolName <> b.SchoolName) 
				or(a.SchoolName is not null and b.SchoolName is null)
				or(a.SchoolName is null and b.SchoolName is not null)
				
			--SchoolPhoneNbr
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000009,
				a.HumanActualAddlInfoUID,
				null,
				a.SchoolPhoneNbr,
				b.SchoolPhoneNbr 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.SchoolPhoneNbr <> b.SchoolPhoneNbr) 
				or(a.SchoolPhoneNbr is not null and b.SchoolPhoneNbr is null)
				or(a.SchoolPhoneNbr is null and b.SchoolPhoneNbr is not null)
								
			--SchoolAddressID
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000010,
				a.HumanActualAddlInfoUID,
				null,
				a.SchoolAddressID,
				b.SchoolAddressID 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.SchoolAddressID <> b.SchoolAddressID) 
				or(a.SchoolAddressID is not null and b.SchoolAddressID is null)
				or(a.SchoolAddressID is null and b.SchoolAddressID is not null)
												
			--SchoolLastAttendDTM
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000011,
				a.HumanActualAddlInfoUID,
				null,
				a.SchoolLastAttendDTM,
				b.SchoolLastAttendDTM 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.SchoolLastAttendDTM <> b.SchoolLastAttendDTM) 
				or(a.SchoolLastAttendDTM is not null and b.SchoolLastAttendDTM is null)
				or(a.SchoolLastAttendDTM is null and b.SchoolLastAttendDTM is not null)
																
			--ContactPhoneCountryCode
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000012,
				a.HumanActualAddlInfoUID,
				null,
				a.ContactPhoneCountryCode,
				b.ContactPhoneCountryCode 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ContactPhoneCountryCode <> b.ContactPhoneCountryCode) 
				or(a.ContactPhoneCountryCode is not null and b.ContactPhoneCountryCode is null)
				or(a.ContactPhoneCountryCode is null and b.ContactPhoneCountryCode is not null)

			--ContactPhoneNbr
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000013,
				a.HumanActualAddlInfoUID,
				null,
				a.ContactPhoneNbr,
				b.ContactPhoneNbr 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ContactPhoneNbr <> b.ContactPhoneNbr) 
				or(a.ContactPhoneNbr is not null and b.ContactPhoneNbr is null)
				or(a.ContactPhoneNbr is null and b.ContactPhoneNbr is not null)

			--ContactPhoneNbrTypeID
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000014,
				a.HumanActualAddlInfoUID,
				null,
				a.ContactPhoneNbrTypeID,
				b.ContactPhoneNbrTypeID 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ContactPhoneNbrTypeID <> b.ContactPhoneNbrTypeID) 
				or(a.ContactPhoneNbrTypeID is not null and b.ContactPhoneNbrTypeID is null)
				or(a.ContactPhoneNbrTypeID is null and b.ContactPhoneNbrTypeID is not null)

			--ContactPhone2CountryCode
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000015,
				a.HumanActualAddlInfoUID,
				null,
				a.ContactPhone2CountryCode,
				b.ContactPhone2CountryCode 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ContactPhone2CountryCode <> b.ContactPhone2CountryCode) 
				or(a.ContactPhone2CountryCode is not null and b.ContactPhone2CountryCode is null)
				or(a.ContactPhone2CountryCode is null and b.ContactPhone2CountryCode is not null)
				
			--ContactPhone2Nbr
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000016,
				a.HumanActualAddlInfoUID,
				null,
				a.ContactPhone2Nbr,
				b.ContactPhone2Nbr 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ContactPhone2Nbr <> b.ContactPhone2Nbr) 
				or(a.ContactPhone2Nbr is not null and b.ContactPhone2Nbr is null)
				or(a.ContactPhone2Nbr is null and b.ContactPhone2Nbr is not null)

			--ContactPhone2NbrTypeID
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000017,
				a.HumanActualAddlInfoUID,
				null,
				a.ContactPhone2NbrTypeID,
				b.ContactPhone2NbrTypeID 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.ContactPhone2NbrTypeID <> b.ContactPhone2NbrTypeID) 
				or(a.ContactPhone2NbrTypeID is not null and b.ContactPhone2NbrTypeID is null)
				or(a.ContactPhone2NbrTypeID is null and b.ContactPhone2NbrTypeID is not null)

			--AltAddressID
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@idfDataAuditEvent,
				@idfObjectTable_HumanActualAddlInfo, 
				51586590000018,
				a.HumanActualAddlInfoUID,
				null,
				a.AltAddressID,
				b.AltAddressID 
			from @HumanActualAddlInfo_BeforeEdit a inner join @HumanActualAddlInfo_AfterEdit b on a.HumanActualAddlInfoUID = b.HumanActualAddlInfoUID
			where (a.AltAddressID <> b.AltAddressID) 
				or(a.AltAddressID is not null and b.AltAddressID is null)
				or(a.AltAddressID is null and b.AltAddressID is not null)

		END;

		IF @@TRANCOUNT > 0
			COMMIT TRANSACTION;

		SELECT @ReturnCode ReturnCode,
			@ReturnMessage ReturnMessage,
			@HumanMasterID HumanMasterID,
			@EIDSSPersonID EIDSSPersonID, 
			@HumanID HumanID;
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;

		SET @ReturnCode = ERROR_NUMBER();
		SET @ReturnMessage = ERROR_MESSAGE();
		SELECT @ReturnCode ReturnCode,
			@ReturnMessage ReturnMessage,
			@HumanMasterID HumanMasterID,
			@EIDSSPersonID EIDSSPersonID, 
			@HumanID HumanID;

		THROW;
	END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_REF_SampleTypeReference_GetList]...';


GO
--=====================================================================================================
-- Author:		Original Author Unknown
-- Description:	Returns a list of active sample type references
--							
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -----------------------------------------------
-- Ricky Moss		2018/10/24	Initial Reference
-- Ricky Moss		12/13/2018	Removed return code and usp_HACode_GetCheckList Store procedure
-- Ricky Moss		05/06/2020	Orded by English Name
-- Ricky Moss		06/15/2020	Added quick search parameter field
-- Steven Verner	03/22/2021  Added paging.
-- Ann Xiong		07/14/2021  Fixed default sorting order.
-- Ann Xiong		08/05/2021	Updated default sorting order.
-- Mandar Kulkarni	08/09/2021	Updated to return LOINC NUMBER
-- Doug Albanese	 11/21/2022	 Swapped out FNReferenceRepair for FN_GBL_Repair
-- Test Code:
-- exec USP_REF_SAMPLETYPEREFERENCE_GETList 'en', 'ab';
-- exec USP_REF_SAMPLETYPEREFERENCE_GETList 'en', null;
--=====================================================================================================

ALTER PROCEDURE [dbo].[USP_REF_SampleTypeReference_GetList]
( 
	 @langID				  NVARCHAR(50)
	,@strSearchSampleType	  NVARCHAR(50) 
	,@advancedSearch		  NVARCHAR(100) = NULL
	,@pageNo				  INT = 1
	,@pageSize				  INT = 10 
	,@sortColumn			  NVARCHAR(30) = 'intOrder' 
	,@sortOrder				  NVARCHAR(4) = 'asc'
)
AS
BEGIN
	BEGIN TRY
		DECLARE @firstRec  INT
		DECLARE @lastRec   INT
		DECLARE @t		   TABLE( 
			idfsSampleType bigint, 
			strDefault nvarchar(2000), 
			strName nvarchar(2000),
			strSampleCode nvarchar(50),
			LOINC_NUMBER nvarchar(255),
			intHACode int,
			strHACode nvarchar(4000),
			strHACodeNames nvarchar(4000),
			intOrder int)

		SET @firstRec = (@pageNo-1)* @pagesize
		SET @lastRec = (@pageNo*@pageSize+1)

		IF( @advancedSearch IS NOT NULL )
		BEGIN
			INSERT INTO @T
			SELECT * FROM
				(SELECT 
				st.[idfsSampleType],
				stbr.strDefault,
				stbr.name,
				st.[strSampleCode],
				lem.LOINC_NUM AS LOINC_NUMBER,
				stbr.[intHACode],
				dbo.FN_GBL_HACode_ToCSV(@LangID, stbr.[intHACode]) as [strHACode],
				dbo.FN_GBL_HACodeNames_ToCSV(@LangID, stbr.[intHACode]) as [strHACodeNames],
				stbr.[intOrder]
			FROM dbo.[trtSampleType] as st  -- Sample Type	
			INNER JOIN dbo.FN_GBL_Repair(@LangId, 19000087)  as stbr -- Sample Type base reference
				ON st.[idfsSampleType] = stbr.[idfsReference]
			LEFT JOIN dbo.LOINCEidssMapping lem ON lem.idfsBaseReference = st.idfsSampleType
			WHERE st.[intRowStatus] = 0
			) AS S
			WHERE 
				CAST( idfsSampleType AS VARCHAR(20)) LIKE '%' + @advancedSearch + '%' OR
				strDefault LIKE '%'+ @advancedSearch + '%' OR 
				[name] LIKE '%' + @advancedSearch + '%' OR 
				strSampleCode LIKE '%' + @advancedSearch + '%' OR 
				strHACodeNames LIKE '%' + @advancedSearch + '%'
		END ELSE
		IF @strSearchSampleType IS NULL
		 begin
		   INSERT INTO @T
		   SELECT 
			   st.[idfsSampleType],
			   stbr.strDefault,
			   stbr.name,
			   st.[strSampleCode],
			   LEM.LOINC_NUM AS LOINC_NUMBER,
			   stbr.[intHACode],
			   dbo.FN_GBL_HACode_ToCSV(@LangID, stbr.[intHACode]) as [strHACode],
			   dbo.FN_GBL_HACodeNames_ToCSV(@LangID, stbr.[intHACode]) as [strHACodeNames],
			   stbr.[intOrder]
		   FROM dbo.[trtSampleType] as st  -- Sample Type	
		   INNER JOIN dbo.FN_GBL_Repair(@LangId, 19000087)  as stbr -- Sample Type base reference
			   ON st.[idfsSampleType] = stbr.[idfsReference]
		   LEFT JOIN dbo.LOINCEidssMapping lem ON lem.idfsBaseReference = st.idfsSampleType
		   WHERE st.[intRowStatus] = 0	
		 end
		ELSE
		 
		 INSERT INTO @T
		 SELECT * FROM
			(SELECT 
			st.[idfsSampleType],
			stbr.strDefault,
			stbr.name,
			st.[strSampleCode],
			LEM.LOINC_NUM AS LOINC_NUMBER,
			stbr.[intHACode],
			dbo.FN_GBL_HACode_ToCSV(@LangID, stbr.[intHACode]) AS [strHACode],
			dbo.FN_GBL_HACodeNames_ToCSV(@LangID, stbr.[intHACode]) AS [strHACodeNames],
			stbr.[intOrder]
		FROM dbo.[trtSampleType] AS st  -- Sample Type	
		INNER JOIN dbo.FN_GBL_Repair(@LangId, 19000087)  AS stbr -- Sample Type base reference
			ON st.[idfsSampleType] = stbr.[idfsReference]
		LEFT JOIN dbo.LOINCEidssMapping lem ON lem.idfsBaseReference = st.idfsSampleType
		WHERE st.[intRowStatus] = 0
		) AS S
		WHERE strDefault LIKE '%'+ @strSearchSampleType + '%' OR [name] LIKE '%' + @strSearchSampleType + '%' OR strSampleCode LIKE '%' + @strSearchSampleType + '%' OR strHACodeNames LIKE '%' + @strSearchSampleType + '%'
		
		;
		WITH CTEResults AS
		(
			SELECT ROW_NUMBER() OVER ( ORDER BY 
				CASE WHEN @sortColumn = 'idfsSampleType' AND @SortOrder = 'asc' THEN idfsSampleType END ASC,
				CASE WHEN @sortColumn = 'idfsSampleType' AND @SortOrder = 'desc' THEN idfsSampleType END DESC,
				CASE WHEN @sortColumn = 'strDefault' AND @SortOrder = 'asc' THEN strDefault END ASC,
				CASE WHEN @sortColumn = 'strDefault' AND @SortOrder = 'desc' THEN strDefault END DESC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'asc' THEN strName END ASC,
				CASE WHEN @sortColumn = 'strName' AND @SortOrder = 'desc' THEN strName END DESC,
				CASE WHEN @sortColumn = 'strSampleCode' AND @SortOrder = 'asc' THEN strSampleCode END ASC,
				CASE WHEN @sortColumn = 'strSampleCode' AND @SortOrder = 'desc' THEN strSampleCode END DESC,
				CASE WHEN @sortColumn = 'intHACode' AND @SortOrder = 'asc' THEN intHACode END ASC,
				CASE WHEN @sortColumn = 'intHACode' AND @SortOrder = 'desc' THEN intHACode END DESC,
				CASE WHEN @sortColumn = 'strHACode' AND @SortOrder = 'asc' THEN strHACode END ASC,
				CASE WHEN @sortColumn = 'strHACode' AND @SortOrder = 'desc' THEN strHACode END DESC,
				CASE WHEN @sortColumn = 'strHACodeNames' AND @SortOrder = 'asc' THEN strHACodeNames END ASC,
				CASE WHEN @sortColumn = 'strHACodeNames' AND @SortOrder = 'desc' THEN strHACodeNames END DESC,
				CASE WHEN @sortColumn = 'intorder' AND @SortOrder = 'asc' THEN intOrder END ASC,
				CASE WHEN @sortColumn = 'intorder' AND @SortOrder = 'desc' THEN intOrder END DESC
				,IIF( @sortColumn = 'intOrder',strName,NULL) ASC
		) AS ROWNUM,		
		COUNT(*) OVER () AS 
				TotalRowCount,
				idfsSampleType, 
				strDefault, 
				strName,
				strSampleCode,
				LOINC_NUMBER,
				intHACode, 
				strHACode,			
				strHACodeNames,
				intOrder
			FROM @T
		)
			SELECT
				TotalRowCount,
				idfsSampleType, 
				strDefault, 
				strName,
				strSampleCode,
				LOINC_NUMBER,
				intHACode, 
				strHACode,			
				strHACodeNames,
				intOrder,
				TotalPages = (TotalRowCount/@pageSize)+IIF(TotalRowCount%@pageSize>0,1,0),
				CurrentPage = @pageNo 
		FROM CTEResults
		WHERE RowNum > @firstRec AND RowNum < @lastRec 	
END TRY

BEGIN CATCH
	THROW;
END CATCH

END
GO
PRINT N'Creating Procedure [dbo].[USSP_GBL_COPY_GEOLOCATION_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USSP_GBL_COPY_GEOLOCATION_SET
--
-- Description:	If record with @GeoLocationIDCopy doesn't exist, new record with this ID is 
-- created. If original location record doesn't exist the empty record with @GeoLocationIDCopy is 
-- created.
--          
-- Author: Mandar Kulkarni
--
-- Revision History:
-- Name                Date       Change Detail
-- ------------------- ---------- ----------------------------------------------------------------
-- Stephen Long        11/18/2022 Initial release with data audit logic for SAUC30 and 31.
--
--Example of a call of procedure:
--DECLARE @RC int
--DECLARE @GeoLocationID bigint
--DECLARE @GeoLocationIDCopy bigint
--SET @GeoLocationID = 123890000000
--SET @GeoLocationIDCopy = 1

--EXECUTE @RC = USSP_GBL_COPY_GEOLOCATION_SET
--   @GeoLocationID
--  ,@GeoLocationIDCopy
--  ,1

-- delete dbo.tflGeoLocationFiltered WHERE idfGeoLocation = 1
-- delete dbo.tlbGeoLocation WHERE idfGeoLocation = 1
-- delete dbo.tlbGeoLocationShared WHERE idfGeoLocationShared = 1
-- ================================================================================================
CREATE PROCEDURE [dbo].[USSP_GBL_COPY_GEOLOCATION_SET]
(
    @GeoLocationID BIGINT,
    @GeoLocationIDCopy BIGINT,
    @GlobalCopyAsDefaultIndicator BIT = 0,
    @DataAuditEventID BIGINT = NULL,
    @AuditUserName NVARCHAR(200) = NULL,
    @ReturnCode INT = 0 OUTPUT,
    @ReturnMsg NVARCHAR(MAX) = 'SUCCESS' OUTPUT
)
AS
DECLARE @GlobalOriginalIndicator BIT,
        @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectID BIGINT = @GeoLocationID,
        @ObjectGeoLocationSharedTableID BIGINT = 4572590000000, -- tlbGeoLocationShared
        @ObjectGeoLocationTableID BIGINT = 75580000000;         -- tlbGeoLocation
DECLARE @GeoLocationBeforeEdit TABLE
(
    GeoLocationID BIGINT,
    ResidentTypeID BIGINT,
    GroundTypeID BIGINT,
    GeoLocationTypeID BIGINT,
    LocationID BIGINT,
    PostalCode NVARCHAR(200),
    StreetName NVARCHAR(200),
    House NVARCHAR(200),
    Building NVARCHAR(200),
    Apartment NVARCHAR(200),
    AddressDescription NVARCHAR(200),
    Distance FLOAT,
    Latitude FLOAT,
    Longitude FLOAT,
    Accuracy FLOAT,
    Alignment FLOAT,
    ForeignAddressIndicator BIT,
    ForeignAddressString NVARCHAR(200),
    ShortAddressString NVARCHAR(2000)
);
DECLARE @GeoLocationAfterEdit TABLE
(
    GeoLocationID BIGINT,
    ResidentTypeID BIGINT,
    GroundTypeID BIGINT,
    GeoLocationTypeID BIGINT,
    LocationID BIGINT,
    PostalCode NVARCHAR(200),
    StreetName NVARCHAR(200),
    House NVARCHAR(200),
    Building NVARCHAR(200),
    Apartment NVARCHAR(200),
    AddressDescription NVARCHAR(200),
    Distance FLOAT,
    Latitude FLOAT,
    Longitude FLOAT,
    Accuracy FLOAT,
    Alignment FLOAT,
    ForeignAddressIndicator BIT,
    ForeignAddressString NVARCHAR(200),
    ShortAddressString NVARCHAR(2000)
);
BEGIN
    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data Audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = UserInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        IF @GlobalCopyAsDefaultIndicator = 1
        BEGIN
            IF NOT EXISTS
            (
                SELECT *
                FROM dbo.tlbGeoLocationShared
                WHERE idfGeoLocationShared = @GeoLocationIDCopy
            )
            BEGIN
                INSERT INTO dbo.tlbGeoLocationShared
                (
                    idfGeoLocationShared
                )
                VALUES (@GeoLocationIDCopy);
                SET @GlobalOriginalIndicator = 0;

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser
                )
                VALUES
                (
                    @DataAuditEventID, 
                    @ObjectGeoLocationSharedTableID, 
                    @GeoLocationIDCopy, 
                    10519001,
                    '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300))
                    + ',"idfObjectTable":' + CAST(@ObjectGeoLocationSharedTableID AS NVARCHAR(300)) + '}]',
                    @AuditUserName
                );
                -- End data audit
            END
        END
        ELSE
        BEGIN
            IF NOT EXISTS
            (
                SELECT *
                FROM dbo.tlbGeoLocation
                WHERE idfGeoLocation = @GeoLocationIDCopy
            )
            BEGIN
                INSERT INTO dbo.tlbGeoLocation
                (
                    idfGeoLocation
                )
                VALUES (@GeoLocationIDCopy);
                SET @GlobalOriginalIndicator = 1;

                                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser
                )
                VALUES
                (
                    @DataAuditEventID, 
                    @ObjectGeoLocationTableID, 
                    @GeoLocationIDCopy, 
                    10519001,
                    '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300))
                    + ',"idfObjectTable":' + CAST(@ObjectGeoLocationTableID AS NVARCHAR(300)) + '}]',
                    @AuditUserName
                );
                -- End data audit
            END
        END

        IF NOT @GlobalOriginalIndicator = 1
        BEGIN
            IF EXISTS
            (
                SELECT *
                FROM dbo.tlbGeoLocation
                WHERE idfGeoLocation = @GeoLocationIDCopy
            )
            BEGIN
                INSERT INTO @GeoLocationBeforeEdit
                (
                    GeoLocationID,
                    ResidentTypeID,
                    GroundTypeID,
                    GeoLocationTypeID,
                    LocationID,
                    PostalCode,
                    StreetName,
                    House,
                    Building,
                    Apartment,
                    AddressDescription,
                    Distance,
                    Latitude,
                    Longitude,
                    Accuracy,
                    Alignment,
                    ForeignAddressIndicator,
                    ForeignAddressString,
                    ShortAddressString
                )
                SELECT idfGeoLocation,
                       idfsResidentType,
                       idfsGroundType,
                       idfsGeoLocationType,
                       idfsLocation,
                       strPostCode,
                       strStreetName,
                       strHouse,
                       strBuilding,
                       strApartment,
                       strDescription,
                       dblDistance,
                       dblLatitude,
                       dblLongitude,
                       dblAccuracy,
                       dblAlignment,
                       blnForeignAddress,
                       strForeignAddress,
                       strShortAddressString
                FROM dbo.tlbGeoLocation
                WHERE idfGeoLocation = @GeoLocationID;

                UPDATE new
                SET idfsGroundType = old.idfsGroundType,
                    idfsGeoLocationType = old.idfsGeoLocationType,
                    idfsCountry = old.idfsCountry,
                    idfsRegion = old.idfsRegion,
                    idfsRayon = old.idfsRayon,
                    idfsSettlement = old.idfsSettlement,
                    strDescription = old.strDescription,
                    dblDistance = old.dblDistance,
                    dblLatitude = old.dblLatitude,
                    dblLongitude = old.dblLongitude,
                    dblAccuracy = old.dblAccuracy,
                    dblAlignment = old.dblAlignment,
                    strApartment = old.strApartment,
                    strBuilding = old.strBuilding,
                    strStreetName = old.strStreetName,
                    strHouse = old.strHouse,
                    strPostCode = old.strPostCode,
                    idfsResidentType = old.idfsResidentType,
                    idfsLocation = old.idfsLocation
                FROM dbo.tlbGeoLocation old
                    INNER JOIN dbo.tlbGeoLocation new
                        ON new.idfGeoLocation = @GeoLocationIDCopy
                           AND (
                                   ISNULL(new.idfsGroundType, 0) != ISNULL(old.idfsGroundType, 0)
                                   OR ISNULL(new.idfsGeoLocationType, 0) != ISNULL(old.idfsGeoLocationType, 0)
                                   OR ISNULL(new.idfsCountry, 0) != ISNULL(old.idfsCountry, 0)
                                   OR ISNULL(new.idfsRegion, 0) != ISNULL(old.idfsRegion, 0)
                                   OR ISNULL(new.idfsRayon, 0) != ISNULL(old.idfsRayon, 0)
                                   OR ISNULL(new.idfsSettlement, 0) != ISNULL(old.idfsSettlement, 0)
                                   OR ISNULL(new.strDescription, '') != ISNULL(old.strDescription, '')
                                   OR ISNULL(new.dblDistance, 0) != ISNULL(old.dblDistance, 0)
                                   OR ISNULL(new.dblLatitude, 0) != ISNULL(old.dblLatitude, 0)
                                   OR ISNULL(new.dblLongitude, 0) != ISNULL(old.dblLongitude, 0)
                                   OR ISNULL(new.dblAccuracy, 0) != ISNULL(old.dblAccuracy, 0)
                                   OR ISNULL(new.dblAlignment, 0) != ISNULL(old.dblAlignment, 0)
                                   OR ISNULL(new.strApartment, '') != ISNULL(old.strApartment, '')
                                   OR ISNULL(new.strBuilding, '') != ISNULL(old.strBuilding, '')
                                   OR ISNULL(new.strStreetName, '') != ISNULL(old.strStreetName, '')
                                   OR ISNULL(new.strHouse, '') != ISNULL(old.strHouse, '')
                                   OR ISNULL(new.strPostCode, '') != ISNULL(old.strPostCode, '')
                                   OR ISNULL(new.idfsResidentType, 0) != ISNULL(old.idfsResidentType, 0)
                                   OR ISNULL(new.idfsLocation, 0) != ISNULL(old.idfsLocation, 0)
                               )
                WHERE old.idfGeoLocation = @GeoLocationID;

                INSERT INTO @GeoLocationAfterEdit
                (
                    GeoLocationID,
                    ResidentTypeID,
                    GroundTypeID,
                    GeoLocationTypeID,
                    LocationID,
                    PostalCode,
                    StreetName,
                    House,
                    Building,
                    Apartment,
                    AddressDescription,
                    Distance,
                    Latitude,
                    Longitude,
                    Accuracy,
                    Alignment,
                    ForeignAddressIndicator,
                    ForeignAddressString,
                    ShortAddressString
                )
                SELECT idfGeoLocation,
                       idfsResidentType,
                       idfsGroundType,
                       idfsGeoLocationType,
                       idfsLocation,
                       strPostCode,
                       strStreetName,
                       strHouse,
                       strBuilding,
                       strApartment,
                       strDescription,
                       dblDistance,
                       dblLatitude,
                       dblLongitude,
                       dblAccuracy,
                       dblAlignment,
                       blnForeignAddress,
                       strForeignAddress,
                       strShortAddressString
                FROM dbo.tlbGeoLocation
                WHERE idfGeoLocation = @GeoLocationID;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79200000000,
                       a.GeoLocationID,
                       NULL,
                       b.ResidentTypeID,
                       a.ResidentTypeID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ResidentTypeID <> b.ResidentTypeID)
                      OR (
                             a.ResidentTypeID IS NOT NULL
                             AND b.ResidentTypeID IS NULL
                         )
                      OR (
                             a.ResidentTypeID IS NULL
                             AND b.ResidentTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79170000000,
                       a.GeoLocationID,
                       NULL,
                       b.GroundTypeID,
                       a.GroundTypeID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.GroundTypeID <> b.GroundTypeID)
                      OR (
                             a.GroundTypeID IS NOT NULL
                             AND b.GroundTypeID IS NULL
                         )
                      OR (
                             a.GroundTypeID IS NULL
                             AND b.GroundTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79160000000,
                       a.GeoLocationID,
                       NULL,
                       b.GeoLocationTypeID,
                       a.GeoLocationTypeID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.GeoLocationTypeID <> b.GeoLocationTypeID)
                      OR (
                             a.GeoLocationTypeID IS NOT NULL
                             AND b.GeoLocationTypeID IS NULL
                         )
                      OR (
                             a.GeoLocationTypeID IS NULL
                             AND b.GeoLocationTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79150000000,
                       a.GeoLocationID,
                       NULL,
                       b.LocationID,
                       a.LocationID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.LocationID <> b.LocationID)
                      OR (
                             a.LocationID IS NOT NULL
                             AND b.LocationID IS NULL
                         )
                      OR (
                             a.LocationID IS NULL
                             AND b.LocationID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79260000000,
                       a.GeoLocationID,
                       NULL,
                       b.PostalCode,
                       a.PostalCode,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.PostalCode <> b.PostalCode)
                      OR (
                             a.PostalCode IS NOT NULL
                             AND b.PostalCode IS NULL
                         )
                      OR (
                             a.PostalCode IS NULL
                             AND b.PostalCode IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79270000000,
                       a.GeoLocationID,
                       NULL,
                       b.StreetName,
                       a.StreetName,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.StreetName <> b.StreetName)
                      OR (
                             a.StreetName IS NOT NULL
                             AND b.StreetName IS NULL
                         )
                      OR (
                             a.StreetName IS NULL
                             AND b.StreetName IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79250000000,
                       a.GeoLocationID,
                       NULL,
                       b.House,
                       a.House,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.House <> b.House)
                      OR (
                             a.House IS NOT NULL
                             AND b.House IS NULL
                         )
                      OR (
                             a.House IS NULL
                             AND b.House IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79230000000,
                       a.GeoLocationID,
                       NULL,
                       b.Building,
                       a.Building,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Building <> b.Building)
                      OR (
                             a.Building IS NOT NULL
                             AND b.Building IS NULL
                         )
                      OR (
                             a.Building IS NULL
                             AND b.Building IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       4577890000000,
                       a.GeoLocationID,
                       NULL,
                       b.Apartment,
                       a.Apartment,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Apartment <> b.Apartment)
                      OR (
                             a.Apartment IS NOT NULL
                             AND b.Apartment IS NULL
                         )
                      OR (
                             a.Apartment IS NULL
                             AND b.Apartment IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79240000000,
                       a.GeoLocationID,
                       NULL,
                       b.AddressDescription,
                       a.AddressDescription,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.AddressDescription <> b.AddressDescription)
                      OR (
                             a.AddressDescription IS NOT NULL
                             AND b.AddressDescription IS NULL
                         )
                      OR (
                             a.AddressDescription IS NULL
                             AND b.AddressDescription IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79110000000,
                       a.GeoLocationID,
                       NULL,
                       b.Distance,
                       a.Distance,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Distance <> b.Distance)
                      OR (
                             a.Distance IS NOT NULL
                             AND b.Distance IS NULL
                         )
                      OR (
                             a.Distance IS NULL
                             AND b.Distance IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79120000000,
                       a.GeoLocationID,
                       NULL,
                       b.Latitude,
                       a.Latitude,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Latitude <> b.Latitude)
                      OR (
                             a.Latitude IS NOT NULL
                             AND b.Latitude IS NULL
                         )
                      OR (
                             a.Latitude IS NULL
                             AND b.Latitude IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79130000000,
                       a.GeoLocationID,
                       NULL,
                       b.Longitude,
                       a.Longitude,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Longitude <> b.Longitude)
                      OR (
                             a.Longitude IS NOT NULL
                             AND b.Longitude IS NULL
                         )
                      OR (
                             a.Longitude IS NULL
                             AND b.Longitude IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79090000000,
                       a.GeoLocationID,
                       NULL,
                       b.Accuracy,
                       a.Accuracy,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Accuracy <> b.Accuracy)
                      OR (
                             a.Accuracy IS NOT NULL
                             AND b.Accuracy IS NULL
                         )
                      OR (
                             a.Accuracy IS NULL
                             AND b.Accuracy IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79100000000,
                       a.GeoLocationID,
                       NULL,
                       b.Alignment,
                       a.Alignment,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Alignment <> b.Alignment)
                      OR (
                             a.Alignment IS NOT NULL
                             AND b.Alignment IS NULL
                         )
                      OR (
                             a.Alignment IS NULL
                             AND b.Alignment IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       4578780000000,
                       a.GeoLocationID,
                       NULL,
                       b.ForeignAddressIndicator,
                       a.ForeignAddressIndicator,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ForeignAddressIndicator <> b.ForeignAddressIndicator)
                      OR (
                             a.ForeignAddressIndicator IS NOT NULL
                             AND b.ForeignAddressIndicator IS NULL
                         )
                      OR (
                             a.ForeignAddressIndicator IS NULL
                             AND b.ForeignAddressIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       4578790000000,
                       a.GeoLocationID,
                       NULL,
                       b.ForeignAddressString,
                       a.ForeignAddressString,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ForeignAddressString <> b.ForeignAddressString)
                      OR (
                             a.ForeignAddressString IS NOT NULL
                             AND b.ForeignAddressString IS NULL
                         )
                      OR (
                             a.ForeignAddressString IS NULL
                             AND b.ForeignAddressString IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       51523680000000,
                       a.GeoLocationID,
                       NULL,
                       b.ShortAddressString,
                       a.ShortAddressString,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ShortAddressString <> b.ShortAddressString)
                      OR (
                             a.ShortAddressString IS NOT NULL
                             AND b.ShortAddressString IS NULL
                         )
                      OR (
                             a.ShortAddressString IS NULL
                             AND b.ShortAddressString IS NOT NULL
                         );
            END
            ELSE IF EXISTS
            (
                SELECT *
                FROM dbo.tlbGeoLocationShared
                WHERE idfGeoLocationShared = @GeoLocationIDCopy
            )
            BEGIN
                INSERT INTO @GeoLocationBeforeEdit
                (
                    GeoLocationID,
                    ResidentTypeID,
                    GroundTypeID,
                    GeoLocationTypeID,
                    LocationID,
                    PostalCode,
                    StreetName,
                    House,
                    Building,
                    Apartment,
                    AddressDescription,
                    Distance,
                    Latitude,
                    Longitude,
                    Accuracy,
                    Alignment,
                    ForeignAddressIndicator,
                    ForeignAddressString,
                    ShortAddressString
                )
                SELECT idfGeoLocation,
                       idfsResidentType,
                       idfsGroundType,
                       idfsGeoLocationType,
                       idfsLocation,
                       strPostCode,
                       strStreetName,
                       strHouse,
                       strBuilding,
                       strApartment,
                       strDescription,
                       dblDistance,
                       dblLatitude,
                       dblLongitude,
                       dblAccuracy,
                       dblAlignment,
                       blnForeignAddress,
                       strForeignAddress,
                       strShortAddressString
                FROM dbo.tlbGeoLocation
                WHERE idfGeoLocation = @GeoLocationID;

                UPDATE new
                SET idfsGroundType = old.idfsGroundType,
                    idfsGeoLocationType = old.idfsGeoLocationType,
                    idfsCountry = old.idfsCountry,
                    idfsRegion = old.idfsRegion,
                    idfsRayon = old.idfsRayon,
                    idfsSettlement = old.idfsSettlement,
                    strDescription = old.strDescription,
                    dblDistance = old.dblDistance,
                    dblLatitude = old.dblLatitude,
                    dblLongitude = old.dblLongitude,
                    dblAccuracy = old.dblAccuracy,
                    dblAlignment = old.dblAlignment,
                    strApartment = old.strApartment,
                    strBuilding = old.strBuilding,
                    strStreetName = old.strStreetName,
                    strHouse = old.strHouse,
                    strPostCode = old.strPostCode,
                    idfsResidentType = old.idfsResidentType,
                    idfsLocation = old.idfsLocation
                FROM dbo.tlbGeoLocation old
                    INNER JOIN dbo.tlbGeoLocationShared new
                        ON new.idfGeoLocationShared = @GeoLocationIDCopy
                           AND (
                                   ISNULL(new.idfsGroundType, 0) != ISNULL(old.idfsGroundType, 0)
                                   OR ISNULL(new.idfsGeoLocationType, 0) != ISNULL(old.idfsGeoLocationType, 0)
                                   OR ISNULL(new.idfsCountry, 0) != ISNULL(old.idfsCountry, 0)
                                   OR ISNULL(new.idfsRegion, 0) != ISNULL(old.idfsRegion, 0)
                                   OR ISNULL(new.idfsRayon, 0) != ISNULL(old.idfsRayon, 0)
                                   OR ISNULL(new.idfsSettlement, 0) != ISNULL(old.idfsSettlement, 0)
                                   OR ISNULL(new.strDescription, '') != ISNULL(old.strDescription, '')
                                   OR ISNULL(new.dblDistance, 0) != ISNULL(old.dblDistance, 0)
                                   OR ISNULL(new.dblLatitude, 0) != ISNULL(old.dblLatitude, 0)
                                   OR ISNULL(new.dblLongitude, 0) != ISNULL(old.dblLongitude, 0)
                                   OR ISNULL(new.dblAccuracy, 0) != ISNULL(old.dblAccuracy, 0)
                                   OR ISNULL(new.dblAlignment, 0) != ISNULL(old.dblAlignment, 0)
                                   OR ISNULL(new.strApartment, '') != ISNULL(old.strApartment, '')
                                   OR ISNULL(new.strBuilding, '') != ISNULL(old.strBuilding, '')
                                   OR ISNULL(new.strStreetName, '') != ISNULL(old.strStreetName, '')
                                   OR ISNULL(new.strHouse, '') != ISNULL(old.strHouse, '')
                                   OR ISNULL(new.strPostCode, '') != ISNULL(old.strPostCode, '')
                                   OR ISNULL(new.idfsResidentType, 0) != ISNULL(old.idfsResidentType, 0)
                                   OR ISNULL(new.idfsLocation, 0) != ISNULL(old.idfsLocation, 0)
                               )
                WHERE old.idfGeoLocation = @GeoLocationID;

                INSERT INTO @GeoLocationAfterEdit
                (
                    GeoLocationID,
                    ResidentTypeID,
                    GroundTypeID,
                    GeoLocationTypeID,
                    LocationID,
                    PostalCode,
                    StreetName,
                    House,
                    Building,
                    Apartment,
                    AddressDescription,
                    Distance,
                    Latitude,
                    Longitude,
                    Accuracy,
                    Alignment,
                    ForeignAddressIndicator,
                    ForeignAddressString,
                    ShortAddressString
                )
                SELECT idfGeoLocation,
                       idfsResidentType,
                       idfsGroundType,
                       idfsGeoLocationType,
                       idfsLocation,
                       strPostCode,
                       strStreetName,
                       strHouse,
                       strBuilding,
                       strApartment,
                       strDescription,
                       dblDistance,
                       dblLatitude,
                       dblLongitude,
                       dblAccuracy,
                       dblAlignment,
                       blnForeignAddress,
                       strForeignAddress,
                       strShortAddressString
                FROM dbo.tlbGeoLocation
                WHERE idfGeoLocation = @GeoLocationID;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79200000000,
                       a.GeoLocationID,
                       NULL,
                       b.ResidentTypeID,
                       a.ResidentTypeID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ResidentTypeID <> b.ResidentTypeID)
                      OR (
                             a.ResidentTypeID IS NOT NULL
                             AND b.ResidentTypeID IS NULL
                         )
                      OR (
                             a.ResidentTypeID IS NULL
                             AND b.ResidentTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79170000000,
                       a.GeoLocationID,
                       NULL,
                       b.GroundTypeID,
                       a.GroundTypeID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.GroundTypeID <> b.GroundTypeID)
                      OR (
                             a.GroundTypeID IS NOT NULL
                             AND b.GroundTypeID IS NULL
                         )
                      OR (
                             a.GroundTypeID IS NULL
                             AND b.GroundTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79160000000,
                       a.GeoLocationID,
                       NULL,
                       b.GeoLocationTypeID,
                       a.GeoLocationTypeID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.GeoLocationTypeID <> b.GeoLocationTypeID)
                      OR (
                             a.GeoLocationTypeID IS NOT NULL
                             AND b.GeoLocationTypeID IS NULL
                         )
                      OR (
                             a.GeoLocationTypeID IS NULL
                             AND b.GeoLocationTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79150000000,
                       a.GeoLocationID,
                       NULL,
                       b.LocationID,
                       a.LocationID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.LocationID <> b.LocationID)
                      OR (
                             a.LocationID IS NOT NULL
                             AND b.LocationID IS NULL
                         )
                      OR (
                             a.LocationID IS NULL
                             AND b.LocationID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79260000000,
                       a.GeoLocationID,
                       NULL,
                       b.PostalCode,
                       a.PostalCode,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.PostalCode <> b.PostalCode)
                      OR (
                             a.PostalCode IS NOT NULL
                             AND b.PostalCode IS NULL
                         )
                      OR (
                             a.PostalCode IS NULL
                             AND b.PostalCode IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79270000000,
                       a.GeoLocationID,
                       NULL,
                       b.StreetName,
                       a.StreetName,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.StreetName <> b.StreetName)
                      OR (
                             a.StreetName IS NOT NULL
                             AND b.StreetName IS NULL
                         )
                      OR (
                             a.StreetName IS NULL
                             AND b.StreetName IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79250000000,
                       a.GeoLocationID,
                       NULL,
                       b.House,
                       a.House,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.House <> b.House)
                      OR (
                             a.House IS NOT NULL
                             AND b.House IS NULL
                         )
                      OR (
                             a.House IS NULL
                             AND b.House IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79230000000,
                       a.GeoLocationID,
                       NULL,
                       b.Building,
                       a.Building,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Building <> b.Building)
                      OR (
                             a.Building IS NOT NULL
                             AND b.Building IS NULL
                         )
                      OR (
                             a.Building IS NULL
                             AND b.Building IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       4577890000000,
                       a.GeoLocationID,
                       NULL,
                       b.Apartment,
                       a.Apartment,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Apartment <> b.Apartment)
                      OR (
                             a.Apartment IS NOT NULL
                             AND b.Apartment IS NULL
                         )
                      OR (
                             a.Apartment IS NULL
                             AND b.Apartment IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79240000000,
                       a.GeoLocationID,
                       NULL,
                       b.AddressDescription,
                       a.AddressDescription,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.AddressDescription <> b.AddressDescription)
                      OR (
                             a.AddressDescription IS NOT NULL
                             AND b.AddressDescription IS NULL
                         )
                      OR (
                             a.AddressDescription IS NULL
                             AND b.AddressDescription IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79110000000,
                       a.GeoLocationID,
                       NULL,
                       b.Distance,
                       a.Distance,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Distance <> b.Distance)
                      OR (
                             a.Distance IS NOT NULL
                             AND b.Distance IS NULL
                         )
                      OR (
                             a.Distance IS NULL
                             AND b.Distance IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79120000000,
                       a.GeoLocationID,
                       NULL,
                       b.Latitude,
                       a.Latitude,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Latitude <> b.Latitude)
                      OR (
                             a.Latitude IS NOT NULL
                             AND b.Latitude IS NULL
                         )
                      OR (
                             a.Latitude IS NULL
                             AND b.Latitude IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79130000000,
                       a.GeoLocationID,
                       NULL,
                       b.Longitude,
                       a.Longitude,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Longitude <> b.Longitude)
                      OR (
                             a.Longitude IS NOT NULL
                             AND b.Longitude IS NULL
                         )
                      OR (
                             a.Longitude IS NULL
                             AND b.Longitude IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79090000000,
                       a.GeoLocationID,
                       NULL,
                       b.Accuracy,
                       a.Accuracy,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Accuracy <> b.Accuracy)
                      OR (
                             a.Accuracy IS NOT NULL
                             AND b.Accuracy IS NULL
                         )
                      OR (
                             a.Accuracy IS NULL
                             AND b.Accuracy IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       79100000000,
                       a.GeoLocationID,
                       NULL,
                       b.Alignment,
                       a.Alignment,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Alignment <> b.Alignment)
                      OR (
                             a.Alignment IS NOT NULL
                             AND b.Alignment IS NULL
                         )
                      OR (
                             a.Alignment IS NULL
                             AND b.Alignment IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       4578780000000,
                       a.GeoLocationID,
                       NULL,
                       b.ForeignAddressIndicator,
                       a.ForeignAddressIndicator,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ForeignAddressIndicator <> b.ForeignAddressIndicator)
                      OR (
                             a.ForeignAddressIndicator IS NOT NULL
                             AND b.ForeignAddressIndicator IS NULL
                         )
                      OR (
                             a.ForeignAddressIndicator IS NULL
                             AND b.ForeignAddressIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       4578790000000,
                       a.GeoLocationID,
                       NULL,
                       b.ForeignAddressString,
                       a.ForeignAddressString,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ForeignAddressString <> b.ForeignAddressString)
                      OR (
                             a.ForeignAddressString IS NOT NULL
                             AND b.ForeignAddressString IS NULL
                         )
                      OR (
                             a.ForeignAddressString IS NULL
                             AND b.ForeignAddressString IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationTableID,
                       51523680000000,
                       a.GeoLocationID,
                       NULL,
                       b.ShortAddressString,
                       a.ShortAddressString,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ShortAddressString <> b.ShortAddressString)
                      OR (
                             a.ShortAddressString IS NOT NULL
                             AND b.ShortAddressString IS NULL
                         )
                      OR (
                             a.ShortAddressString IS NULL
                             AND b.ShortAddressString IS NOT NULL
                         );
            END
            ELSE IF @GlobalCopyAsDefaultIndicator = 1
            BEGIN
                INSERT INTO dbo.tlbGeoLocationShared
                (
                    idfGeoLocationShared,
                    idfsGroundType,
                    idfsGeoLocationType,
                    idfsCountry,
                    idfsRegion,
                    idfsRayon,
                    idfsSettlement,
                    strDescription,
                    dblDistance,
                    dblLatitude,
                    dblLongitude,
                    dblAccuracy,
                    dblAlignment,
                    strApartment,
                    strBuilding,
                    strStreetName,
                    strHouse,
                    strPostCode,
                    idfsResidentType,
                    idfsLocation
                )
                SELECT @GeoLocationIDCopy,
                       idfsGroundType,
                       idfsGeoLocationType,
                       idfsCountry,
                       idfsRegion,
                       idfsRayon,
                       idfsSettlement,
                       strDescription,
                       dblDistance,
                       dblLatitude,
                       dblLongitude,
                       dblAccuracy,
                       dblAlignment,
                       strApartment,
                       strBuilding,
                       strStreetName,
                       strHouse,
                       strPostCode,
                       idfsResidentType,
                       idfsLocation
                FROM dbo.tlbGeoLocation
                WHERE idfGeoLocation = @GeoLocationID;

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser
                )
                VALUES
                (
                    @DataAuditEventID, 
                    @ObjectGeoLocationSharedTableID, 
                    @GeoLocationIDCopy, 
                    10519001,
                    '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300))
                    + ',"idfObjectTable":' + CAST(@ObjectGeoLocationSharedTableID AS NVARCHAR(300)) + '}]',
                    @AuditUserName
                );
                -- End data audit
            END
            ELSE
            BEGIN
                INSERT INTO dbo.tlbGeoLocation
                (
                    idfGeoLocation,
                    idfsGroundType,
                    idfsGeoLocationType,
                    idfsCountry,
                    idfsRegion,
                    idfsRayon,
                    idfsSettlement,
                    strDescription,
                    dblDistance,
                    dblLatitude,
                    dblLongitude,
                    dblAccuracy,
                    dblAlignment,
                    strApartment,
                    strBuilding,
                    strStreetName,
                    strHouse,
                    strPostCode,
                    idfsResidentType,
                    idfsLocation
                )
                SELECT @GeoLocationIDCopy,
                       idfsGroundType,
                       idfsGeoLocationType,
                       idfsCountry,
                       idfsRegion,
                       idfsRayon,
                       idfsSettlement,
                       strDescription,
                       dblDistance,
                       dblLatitude,
                       dblLongitude,
                       dblAccuracy,
                       dblAlignment,
                       strApartment,
                       strBuilding,
                       strStreetName,
                       strHouse,
                       strPostCode,
                       idfsResidentType,
                       idfsLocation
                FROM dbo.tlbGeoLocation
                WHERE idfGeoLocation = @GeoLocationID;

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser
                )
                VALUES
                (
                    @DataAuditEventID, 
                    @ObjectGeoLocationTableID, 
                    @GeoLocationIDCopy, 
                    10519001,
                    '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300))
                    + ',"idfObjectTable":' + CAST(@ObjectGeoLocationTableID AS NVARCHAR(300)) + '}]',
                    @AuditUserName
                );
                -- End data audit
            END
        END
        ELSE
        BEGIN
            IF EXISTS
            (
                SELECT *
                FROM dbo.tlbGeoLocation
                WHERE idfGeoLocation = @GeoLocationIDCopy
            )
            BEGIN
                INSERT INTO @GeoLocationBeforeEdit
                (
                    GeoLocationID,
                    ResidentTypeID,
                    GroundTypeID,
                    GeoLocationTypeID,
                    LocationID,
                    PostalCode,
                    StreetName,
                    House,
                    Building,
                    Apartment,
                    AddressDescription,
                    Distance,
                    Latitude,
                    Longitude,
                    Accuracy,
                    Alignment,
                    ForeignAddressIndicator,
                    ForeignAddressString,
                    ShortAddressString
                )
                SELECT idfGeoLocationShared,
                       idfsResidentType,
                       idfsGroundType,
                       idfsGeoLocationType,
                       idfsLocation,
                       strPostCode,
                       strStreetName,
                       strHouse,
                       strBuilding,
                       strApartment,
                       strDescription,
                       dblDistance,
                       dblLatitude,
                       dblLongitude,
                       dblAccuracy,
                       dblAlignment,
                       blnForeignAddress,
                       strForeignAddress,
                       strShortAddressString
                FROM dbo.tlbGeoLocationShared
                WHERE idfGeoLocationShared = @GeoLocationID;

                UPDATE new
                SET idfsGroundType = old.idfsGroundType,
                    idfsGeoLocationType = old.idfsGeoLocationType,
                    idfsCountry = old.idfsCountry,
                    idfsRegion = old.idfsRegion,
                    idfsRayon = old.idfsRayon,
                    idfsSettlement = old.idfsSettlement,
                    strDescription = old.strDescription,
                    dblDistance = old.dblDistance,
                    dblLatitude = old.dblLatitude,
                    dblLongitude = old.dblLongitude,
                    dblAccuracy = old.dblAccuracy,
                    dblAlignment = old.dblAlignment,
                    strApartment = old.strApartment,
                    strBuilding = old.strBuilding,
                    strStreetName = old.strStreetName,
                    strHouse = old.strHouse,
                    strPostCode = old.strPostCode,
                    idfsResidentType = old.idfsResidentType,
                    idfsLocation = old.idfsLocation
                FROM dbo.tlbGeoLocationShared old
                    INNER JOIN dbo.tlbGeoLocation new
                        ON new.idfGeoLocation = @GeoLocationIDCopy
                WHERE old.idfGeoLocationShared = @GeoLocationID
                      AND (
                              ISNULL(new.idfsGroundType, 0) != ISNULL(old.idfsGroundType, 0)
                              OR ISNULL(new.idfsGeoLocationType, 0) != ISNULL(old.idfsGeoLocationType, 0)
                              OR ISNULL(new.idfsCountry, 0) != ISNULL(old.idfsCountry, 0)
                              OR ISNULL(new.idfsRegion, 0) != ISNULL(old.idfsRegion, 0)
                              OR ISNULL(new.idfsRayon, 0) != ISNULL(old.idfsRayon, 0)
                              OR ISNULL(new.idfsSettlement, 0) != ISNULL(old.idfsSettlement, 0)
                              OR ISNULL(new.strDescription, '') != ISNULL(old.strDescription, '')
                              OR ISNULL(new.dblDistance, 0) != ISNULL(old.dblDistance, 0)
                              OR ISNULL(new.dblLatitude, 0) != ISNULL(old.dblLatitude, 0)
                              OR ISNULL(new.dblLongitude, 0) != ISNULL(old.dblLongitude, 0)
                              OR ISNULL(new.dblAccuracy, 0) != ISNULL(old.dblAccuracy, 0)
                              OR ISNULL(new.dblAlignment, 0) != ISNULL(old.dblAlignment, 0)
                              OR ISNULL(new.strApartment, '') != ISNULL(old.strApartment, '')
                              OR ISNULL(new.strBuilding, '') != ISNULL(old.strBuilding, '')
                              OR ISNULL(new.strStreetName, '') != ISNULL(old.strStreetName, '')
                              OR ISNULL(new.strHouse, '') != ISNULL(old.strHouse, '')
                              OR ISNULL(new.strPostCode, '') != ISNULL(old.strPostCode, '')
                              OR ISNULL(new.idfsResidentType, 0) != ISNULL(old.idfsResidentType, 0)
                              OR ISNULL(new.idfsLocation, 0) != ISNULL(old.idfsLocation, 0)
                          );

                INSERT INTO @GeoLocationAfterEdit
                (
                    GeoLocationID,
                    ResidentTypeID,
                    GroundTypeID,
                    GeoLocationTypeID,
                    LocationID,
                    PostalCode,
                    StreetName,
                    House,
                    Building,
                    Apartment,
                    AddressDescription,
                    Distance,
                    Latitude,
                    Longitude,
                    Accuracy,
                    Alignment,
                    ForeignAddressIndicator,
                    ForeignAddressString,
                    ShortAddressString
                )
                SELECT idfGeoLocationShared,
                       idfsResidentType,
                       idfsGroundType,
                       idfsGeoLocationType,
                       idfsLocation,
                       strPostCode,
                       strStreetName,
                       strHouse,
                       strBuilding,
                       strApartment,
                       strDescription,
                       dblDistance,
                       dblLatitude,
                       dblLongitude,
                       dblAccuracy,
                       dblAlignment,
                       blnForeignAddress,
                       strForeignAddress,
                       strShortAddressString
                FROM dbo.tlbGeoLocationShared
                WHERE idfGeoLocationShared = @GeoLocationID;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79200000000,
                       a.GeoLocationID,
                       NULL,
                       b.ResidentTypeID,
                       a.ResidentTypeID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ResidentTypeID <> b.ResidentTypeID)
                      OR (
                             a.ResidentTypeID IS NOT NULL
                             AND b.ResidentTypeID IS NULL
                         )
                      OR (
                             a.ResidentTypeID IS NULL
                             AND b.ResidentTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79170000000,
                       a.GeoLocationID,
                       NULL,
                       b.GroundTypeID,
                       a.GroundTypeID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.GroundTypeID <> b.GroundTypeID)
                      OR (
                             a.GroundTypeID IS NOT NULL
                             AND b.GroundTypeID IS NULL
                         )
                      OR (
                             a.GroundTypeID IS NULL
                             AND b.GroundTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79160000000,
                       a.GeoLocationID,
                       NULL,
                       b.GeoLocationTypeID,
                       a.GeoLocationTypeID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.GeoLocationTypeID <> b.GeoLocationTypeID)
                      OR (
                             a.GeoLocationTypeID IS NOT NULL
                             AND b.GeoLocationTypeID IS NULL
                         )
                      OR (
                             a.GeoLocationTypeID IS NULL
                             AND b.GeoLocationTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79150000000,
                       a.GeoLocationID,
                       NULL,
                       b.LocationID,
                       a.LocationID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.LocationID <> b.LocationID)
                      OR (
                             a.LocationID IS NOT NULL
                             AND b.LocationID IS NULL
                         )
                      OR (
                             a.LocationID IS NULL
                             AND b.LocationID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79260000000,
                       a.GeoLocationID,
                       NULL,
                       b.PostalCode,
                       a.PostalCode,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.PostalCode <> b.PostalCode)
                      OR (
                             a.PostalCode IS NOT NULL
                             AND b.PostalCode IS NULL
                         )
                      OR (
                             a.PostalCode IS NULL
                             AND b.PostalCode IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79270000000,
                       a.GeoLocationID,
                       NULL,
                       b.StreetName,
                       a.StreetName,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.StreetName <> b.StreetName)
                      OR (
                             a.StreetName IS NOT NULL
                             AND b.StreetName IS NULL
                         )
                      OR (
                             a.StreetName IS NULL
                             AND b.StreetName IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79250000000,
                       a.GeoLocationID,
                       NULL,
                       b.House,
                       a.House,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.House <> b.House)
                      OR (
                             a.House IS NOT NULL
                             AND b.House IS NULL
                         )
                      OR (
                             a.House IS NULL
                             AND b.House IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79230000000,
                       a.GeoLocationID,
                       NULL,
                       b.Building,
                       a.Building,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Building <> b.Building)
                      OR (
                             a.Building IS NOT NULL
                             AND b.Building IS NULL
                         )
                      OR (
                             a.Building IS NULL
                             AND b.Building IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       4577890000000,
                       a.GeoLocationID,
                       NULL,
                       b.Apartment,
                       a.Apartment,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Apartment <> b.Apartment)
                      OR (
                             a.Apartment IS NOT NULL
                             AND b.Apartment IS NULL
                         )
                      OR (
                             a.Apartment IS NULL
                             AND b.Apartment IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79240000000,
                       a.GeoLocationID,
                       NULL,
                       b.AddressDescription,
                       a.AddressDescription,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.AddressDescription <> b.AddressDescription)
                      OR (
                             a.AddressDescription IS NOT NULL
                             AND b.AddressDescription IS NULL
                         )
                      OR (
                             a.AddressDescription IS NULL
                             AND b.AddressDescription IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79110000000,
                       a.GeoLocationID,
                       NULL,
                       b.Distance,
                       a.Distance,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Distance <> b.Distance)
                      OR (
                             a.Distance IS NOT NULL
                             AND b.Distance IS NULL
                         )
                      OR (
                             a.Distance IS NULL
                             AND b.Distance IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79120000000,
                       a.GeoLocationID,
                       NULL,
                       b.Latitude,
                       a.Latitude,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Latitude <> b.Latitude)
                      OR (
                             a.Latitude IS NOT NULL
                             AND b.Latitude IS NULL
                         )
                      OR (
                             a.Latitude IS NULL
                             AND b.Latitude IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79130000000,
                       a.GeoLocationID,
                       NULL,
                       b.Longitude,
                       a.Longitude,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Longitude <> b.Longitude)
                      OR (
                             a.Longitude IS NOT NULL
                             AND b.Longitude IS NULL
                         )
                      OR (
                             a.Longitude IS NULL
                             AND b.Longitude IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79090000000,
                       a.GeoLocationID,
                       NULL,
                       b.Accuracy,
                       a.Accuracy,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Accuracy <> b.Accuracy)
                      OR (
                             a.Accuracy IS NOT NULL
                             AND b.Accuracy IS NULL
                         )
                      OR (
                             a.Accuracy IS NULL
                             AND b.Accuracy IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79100000000,
                       a.GeoLocationID,
                       NULL,
                       b.Alignment,
                       a.Alignment,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Alignment <> b.Alignment)
                      OR (
                             a.Alignment IS NOT NULL
                             AND b.Alignment IS NULL
                         )
                      OR (
                             a.Alignment IS NULL
                             AND b.Alignment IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       4578780000000,
                       a.GeoLocationID,
                       NULL,
                       b.ForeignAddressIndicator,
                       a.ForeignAddressIndicator,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ForeignAddressIndicator <> b.ForeignAddressIndicator)
                      OR (
                             a.ForeignAddressIndicator IS NOT NULL
                             AND b.ForeignAddressIndicator IS NULL
                         )
                      OR (
                             a.ForeignAddressIndicator IS NULL
                             AND b.ForeignAddressIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       4578790000000,
                       a.GeoLocationID,
                       NULL,
                       b.ForeignAddressString,
                       a.ForeignAddressString,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ForeignAddressString <> b.ForeignAddressString)
                      OR (
                             a.ForeignAddressString IS NOT NULL
                             AND b.ForeignAddressString IS NULL
                         )
                      OR (
                             a.ForeignAddressString IS NULL
                             AND b.ForeignAddressString IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       51523680000000,
                       a.GeoLocationID,
                       NULL,
                       b.ShortAddressString,
                       a.ShortAddressString,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ShortAddressString <> b.ShortAddressString)
                      OR (
                             a.ShortAddressString IS NOT NULL
                             AND b.ShortAddressString IS NULL
                         )
                      OR (
                             a.ShortAddressString IS NULL
                             AND b.ShortAddressString IS NOT NULL
                         );
            END
            ELSE IF EXISTS
            (
                SELECT *
                FROM dbo.tlbGeoLocationShared
                WHERE idfGeoLocationShared = @GeoLocationIDCopy
            )
            BEGIN
                INSERT INTO @GeoLocationBeforeEdit
                (
                    GeoLocationID,
                    ResidentTypeID,
                    GroundTypeID,
                    GeoLocationTypeID,
                    LocationID,
                    PostalCode,
                    StreetName,
                    House,
                    Building,
                    Apartment,
                    AddressDescription,
                    Distance,
                    Latitude,
                    Longitude,
                    Accuracy,
                    Alignment,
                    ForeignAddressIndicator,
                    ForeignAddressString,
                    ShortAddressString
                )
                SELECT idfGeoLocationShared,
                       idfsResidentType,
                       idfsGroundType,
                       idfsGeoLocationType,
                       idfsLocation,
                       strPostCode,
                       strStreetName,
                       strHouse,
                       strBuilding,
                       strApartment,
                       strDescription,
                       dblDistance,
                       dblLatitude,
                       dblLongitude,
                       dblAccuracy,
                       dblAlignment,
                       blnForeignAddress,
                       strForeignAddress,
                       strShortAddressString
                FROM dbo.tlbGeoLocationShared
                WHERE idfGeoLocationShared = @GeoLocationID;

                UPDATE new
                SET idfsGroundType = old.idfsGroundType,
                    idfsGeoLocationType = old.idfsGeoLocationType,
                    idfsCountry = old.idfsCountry,
                    idfsRegion = old.idfsRegion,
                    idfsRayon = old.idfsRayon,
                    idfsSettlement = old.idfsSettlement,
                    strDescription = old.strDescription,
                    dblDistance = old.dblDistance,
                    dblLatitude = old.dblLatitude,
                    dblLongitude = old.dblLongitude,
                    dblAccuracy = old.dblAccuracy,
                    dblAlignment = old.dblAlignment,
                    strApartment = old.strApartment,
                    strBuilding = old.strBuilding,
                    strStreetName = old.strStreetName,
                    strHouse = old.strHouse,
                    strPostCode = old.strPostCode,
                    idfsResidentType = old.idfsResidentType,
                    idfsLocation = old.idfsLocation
                FROM dbo.tlbGeoLocationShared old
                    INNER JOIN dbo.tlbGeoLocationShared new
                        ON new.idfGeoLocationShared = @GeoLocationIDCopy
                WHERE old.idfGeoLocationShared = @GeoLocationID
                      AND (
                              ISNULL(new.idfsGroundType, 0) != ISNULL(old.idfsGroundType, 0)
                              OR ISNULL(new.idfsGeoLocationType, 0) != ISNULL(old.idfsGeoLocationType, 0)
                              OR ISNULL(new.idfsCountry, 0) != ISNULL(old.idfsCountry, 0)
                              OR ISNULL(new.idfsRegion, 0) != ISNULL(old.idfsRegion, 0)
                              OR ISNULL(new.idfsRayon, 0) != ISNULL(old.idfsRayon, 0)
                              OR ISNULL(new.idfsSettlement, 0) != ISNULL(old.idfsSettlement, 0)
                              OR ISNULL(new.strDescription, '') != ISNULL(old.strDescription, '')
                              OR ISNULL(new.dblDistance, 0) != ISNULL(old.dblDistance, 0)
                              OR ISNULL(new.dblLatitude, 0) != ISNULL(old.dblLatitude, 0)
                              OR ISNULL(new.dblLongitude, 0) != ISNULL(old.dblLongitude, 0)
                              OR ISNULL(new.dblAccuracy, 0) != ISNULL(old.dblAccuracy, 0)
                              OR ISNULL(new.dblAlignment, 0) != ISNULL(old.dblAlignment, 0)
                              OR ISNULL(new.strApartment, '') != ISNULL(old.strApartment, '')
                              OR ISNULL(new.strBuilding, '') != ISNULL(old.strBuilding, '')
                              OR ISNULL(new.strStreetName, '') != ISNULL(old.strStreetName, '')
                              OR ISNULL(new.strHouse, '') != ISNULL(old.strHouse, '')
                              OR ISNULL(new.strPostCode, '') != ISNULL(old.strPostCode, '')
                              OR ISNULL(new.idfsResidentType, 0) != ISNULL(old.idfsResidentType, 0)
                              OR ISNULL(new.idfsLocation, 0) != ISNULL(old.idfsLocation, 0)
                          );

                INSERT INTO @GeoLocationAfterEdit
                (
                    GeoLocationID,
                    ResidentTypeID,
                    GroundTypeID,
                    GeoLocationTypeID,
                    LocationID,
                    PostalCode,
                    StreetName,
                    House,
                    Building,
                    Apartment,
                    AddressDescription,
                    Distance,
                    Latitude,
                    Longitude,
                    Accuracy,
                    Alignment,
                    ForeignAddressIndicator,
                    ForeignAddressString,
                    ShortAddressString
                )
                SELECT idfGeoLocationShared,
                       idfsResidentType,
                       idfsGroundType,
                       idfsGeoLocationType,
                       idfsLocation,
                       strPostCode,
                       strStreetName,
                       strHouse,
                       strBuilding,
                       strApartment,
                       strDescription,
                       dblDistance,
                       dblLatitude,
                       dblLongitude,
                       dblAccuracy,
                       dblAlignment,
                       blnForeignAddress,
                       strForeignAddress,
                       strShortAddressString
                FROM dbo.tlbGeoLocationShared
                WHERE idfGeoLocationShared = @GeoLocationID;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79200000000,
                       a.GeoLocationID,
                       NULL,
                       b.ResidentTypeID,
                       a.ResidentTypeID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ResidentTypeID <> b.ResidentTypeID)
                      OR (
                             a.ResidentTypeID IS NOT NULL
                             AND b.ResidentTypeID IS NULL
                         )
                      OR (
                             a.ResidentTypeID IS NULL
                             AND b.ResidentTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79170000000,
                       a.GeoLocationID,
                       NULL,
                       b.GroundTypeID,
                       a.GroundTypeID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.GroundTypeID <> b.GroundTypeID)
                      OR (
                             a.GroundTypeID IS NOT NULL
                             AND b.GroundTypeID IS NULL
                         )
                      OR (
                             a.GroundTypeID IS NULL
                             AND b.GroundTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79160000000,
                       a.GeoLocationID,
                       NULL,
                       b.GeoLocationTypeID,
                       a.GeoLocationTypeID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.GeoLocationTypeID <> b.GeoLocationTypeID)
                      OR (
                             a.GeoLocationTypeID IS NOT NULL
                             AND b.GeoLocationTypeID IS NULL
                         )
                      OR (
                             a.GeoLocationTypeID IS NULL
                             AND b.GeoLocationTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79150000000,
                       a.GeoLocationID,
                       NULL,
                       b.LocationID,
                       a.LocationID,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.LocationID <> b.LocationID)
                      OR (
                             a.LocationID IS NOT NULL
                             AND b.LocationID IS NULL
                         )
                      OR (
                             a.LocationID IS NULL
                             AND b.LocationID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79260000000,
                       a.GeoLocationID,
                       NULL,
                       b.PostalCode,
                       a.PostalCode,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.PostalCode <> b.PostalCode)
                      OR (
                             a.PostalCode IS NOT NULL
                             AND b.PostalCode IS NULL
                         )
                      OR (
                             a.PostalCode IS NULL
                             AND b.PostalCode IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79270000000,
                       a.GeoLocationID,
                       NULL,
                       b.StreetName,
                       a.StreetName,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.StreetName <> b.StreetName)
                      OR (
                             a.StreetName IS NOT NULL
                             AND b.StreetName IS NULL
                         )
                      OR (
                             a.StreetName IS NULL
                             AND b.StreetName IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79250000000,
                       a.GeoLocationID,
                       NULL,
                       b.House,
                       a.House,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.House <> b.House)
                      OR (
                             a.House IS NOT NULL
                             AND b.House IS NULL
                         )
                      OR (
                             a.House IS NULL
                             AND b.House IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79230000000,
                       a.GeoLocationID,
                       NULL,
                       b.Building,
                       a.Building,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Building <> b.Building)
                      OR (
                             a.Building IS NOT NULL
                             AND b.Building IS NULL
                         )
                      OR (
                             a.Building IS NULL
                             AND b.Building IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       4577890000000,
                       a.GeoLocationID,
                       NULL,
                       b.Apartment,
                       a.Apartment,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Apartment <> b.Apartment)
                      OR (
                             a.Apartment IS NOT NULL
                             AND b.Apartment IS NULL
                         )
                      OR (
                             a.Apartment IS NULL
                             AND b.Apartment IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79240000000,
                       a.GeoLocationID,
                       NULL,
                       b.AddressDescription,
                       a.AddressDescription,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.AddressDescription <> b.AddressDescription)
                      OR (
                             a.AddressDescription IS NOT NULL
                             AND b.AddressDescription IS NULL
                         )
                      OR (
                             a.AddressDescription IS NULL
                             AND b.AddressDescription IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79110000000,
                       a.GeoLocationID,
                       NULL,
                       b.Distance,
                       a.Distance,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Distance <> b.Distance)
                      OR (
                             a.Distance IS NOT NULL
                             AND b.Distance IS NULL
                         )
                      OR (
                             a.Distance IS NULL
                             AND b.Distance IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79120000000,
                       a.GeoLocationID,
                       NULL,
                       b.Latitude,
                       a.Latitude,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Latitude <> b.Latitude)
                      OR (
                             a.Latitude IS NOT NULL
                             AND b.Latitude IS NULL
                         )
                      OR (
                             a.Latitude IS NULL
                             AND b.Latitude IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79130000000,
                       a.GeoLocationID,
                       NULL,
                       b.Longitude,
                       a.Longitude,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Longitude <> b.Longitude)
                      OR (
                             a.Longitude IS NOT NULL
                             AND b.Longitude IS NULL
                         )
                      OR (
                             a.Longitude IS NULL
                             AND b.Longitude IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79090000000,
                       a.GeoLocationID,
                       NULL,
                       b.Accuracy,
                       a.Accuracy,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Accuracy <> b.Accuracy)
                      OR (
                             a.Accuracy IS NOT NULL
                             AND b.Accuracy IS NULL
                         )
                      OR (
                             a.Accuracy IS NULL
                             AND b.Accuracy IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       79100000000,
                       a.GeoLocationID,
                       NULL,
                       b.Alignment,
                       a.Alignment,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.Alignment <> b.Alignment)
                      OR (
                             a.Alignment IS NOT NULL
                             AND b.Alignment IS NULL
                         )
                      OR (
                             a.Alignment IS NULL
                             AND b.Alignment IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       4578780000000,
                       a.GeoLocationID,
                       NULL,
                       b.ForeignAddressIndicator,
                       a.ForeignAddressIndicator,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ForeignAddressIndicator <> b.ForeignAddressIndicator)
                      OR (
                             a.ForeignAddressIndicator IS NOT NULL
                             AND b.ForeignAddressIndicator IS NULL
                         )
                      OR (
                             a.ForeignAddressIndicator IS NULL
                             AND b.ForeignAddressIndicator IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       4578790000000,
                       a.GeoLocationID,
                       NULL,
                       b.ForeignAddressString,
                       a.ForeignAddressString,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ForeignAddressString <> b.ForeignAddressString)
                      OR (
                             a.ForeignAddressString IS NOT NULL
                             AND b.ForeignAddressString IS NULL
                         )
                      OR (
                             a.ForeignAddressString IS NULL
                             AND b.ForeignAddressString IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectGeoLocationSharedTableID,
                       51523680000000,
                       a.GeoLocationID,
                       NULL,
                       b.ShortAddressString,
                       a.ShortAddressString,
                       @AuditUserName
                FROM @GeoLocationAfterEdit AS a
                    FULL JOIN @GeoLocationBeforeEdit AS b
                        ON a.GeoLocationID = b.GeoLocationID
                WHERE (a.ShortAddressString <> b.ShortAddressString)
                      OR (
                             a.ShortAddressString IS NOT NULL
                             AND b.ShortAddressString IS NULL
                         )
                      OR (
                             a.ShortAddressString IS NULL
                             AND b.ShortAddressString IS NOT NULL
                         );

            END
            ELSE IF @GlobalCopyAsDefaultIndicator = 1
            BEGIN
                INSERT INTO dbo.tlbGeoLocationShared
                (
                    idfGeoLocationShared,
                    idfsGroundType,
                    idfsGeoLocationType,
                    idfsCountry,
                    idfsRegion,
                    idfsRayon,
                    idfsSettlement,
                    strDescription,
                    dblDistance,
                    dblLatitude,
                    dblLongitude,
                    dblAccuracy,
                    dblAlignment,
                    strApartment,
                    strBuilding,
                    strStreetName,
                    strHouse,
                    strPostCode,
                    idfsResidentType,
                    idfsLocation
                )
                SELECT @GeoLocationIDCopy,
                       idfsGroundType,
                       idfsGeoLocationType,
                       idfsCountry,
                       idfsRegion,
                       idfsRayon,
                       idfsSettlement,
                       strDescription,
                       dblDistance,
                       dblLatitude,
                       dblLongitude,
                       dblAccuracy,
                       dblAlignment,
                       strApartment,
                       strBuilding,
                       strStreetName,
                       strHouse,
                       strPostCode,
                       idfsResidentType,
                       idfsLocation
                FROM dbo.tlbGeoLocationShared
                WHERE idfGeoLocationShared = @GeoLocationID;

                                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser
                )
                VALUES
                (
                    @DataAuditEventID, 
                    @ObjectGeoLocationSharedTableID, 
                    @GeoLocationIDCopy, 
                    10519001,
                    '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300))
                    + ',"idfObjectTable":' + CAST(@ObjectGeoLocationSharedTableID AS NVARCHAR(300)) + '}]',
                    @AuditUserName
                );
                -- End data audit
            END
            ELSE
            BEGIN
                INSERT INTO dbo.tlbGeoLocation
                (
                    idfGeoLocation,
                    idfsGroundType,
                    idfsGeoLocationType,
                    idfsCountry,
                    idfsRegion,
                    idfsRayon,
                    idfsSettlement,
                    strDescription,
                    dblDistance,
                    dblLatitude,
                    dblLongitude,
                    dblAccuracy,
                    dblAlignment,
                    strApartment,
                    strBuilding,
                    strStreetName,
                    strHouse,
                    strPostCode,
                    idfsResidentType,
                    idfsLocation
                )
                SELECT @GeoLocationIDCopy,
                       idfsGroundType,
                       idfsGeoLocationType,
                       idfsCountry,
                       idfsRegion,
                       idfsRayon,
                       idfsSettlement,
                       strDescription,
                       dblDistance,
                       dblLatitude,
                       dblLongitude,
                       dblAccuracy,
                       dblAlignment,
                       strApartment,
                       strBuilding,
                       strStreetName,
                       strHouse,
                       strPostCode,
                       idfsResidentType,
                       idfsLocation
                FROM dbo.tlbGeoLocationShared
                WHERE idfGeoLocationShared = @GeoLocationID;

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser
                )
                VALUES
                (
                    @DataAuditEventID, 
                    @ObjectGeoLocationTableID, 
                    @GeoLocationIDCopy, 
                    10519001,
                    '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300))
                    + ',"idfObjectTable":' + CAST(@ObjectGeoLocationTableID AS NVARCHAR(300)) + '}]',
                    @AuditUserName
                );
                -- End data audit
            END
        END

        SELECT @ReturnCode 'ReturnCode',
               @ReturnMsg 'ReturnMessage';
    END TRY
    BEGIN CATCH
        THROW;

    END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Procedure [dbo].[USSP_GBL_SAMPLES_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USSP_GBL_SAMPLES_SET
--
-- Description:	Inserts or updates sample records for various non-laboratory module use cases.
--
--	Revision History:
--	Name               Date       Change Detail
--	------------------ ---------- ----------------------------------------------------------------
-- Stephen Long        11/21/2022 Initial release with data audit logic for SAUC30 and 31.
-- ================================================================================================
CREATE PROCEDURE [dbo].[USSP_GBL_SAMPLES_SET]
(
    @AuditUserName NVARCHAR(200) = NULL,
    @DataAuditEventID BIGINT = NULL,
    @SampleID BIGINT OUTPUT,
    @SampleTypeID BIGINT,
    @RootSampleID BIGINT = NULL,
    @ParentSampleID BIGINT = NULL,
    @HumanID BIGINT = NULL,
    @SpeciesID BIGINT = NULL,
    @AnimalID BIGINT = NULL,
    @VectorID BIGINT = NULL,
    @MonitoringSessionID BIGINT = NULL,
    @VectorSessionID BIGINT = NULL,
    @HumanDiseaseReportID BIGINT = NULL,
    @VeterinaryDiseaseReportID BIGINT = NULL,
    @CollectionDate DATETIME = NULL,
    @CollectedByPersonID BIGINT = NULL,
    @CollectedByOrganizationID BIGINT = NULL,
    @SentDate DATETIME = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @EIDSSLocalFieldSampleID NVARCHAR(200) = NULL,
    @SiteID BIGINT,
    @EnteredDate DATETIME = NULL,
    @ReadOnlyIndicator BIT,
    @SampleStatusTypeID BIGINT = NULL,
    @Comments NVARCHAR(500) = NULL,
    @CurrentSiteID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @BirdStatusTypeID BIGINT = NULL,
    @RowStatus INT,
    @RowAction CHAR
)
AS
DECLARE @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectID BIGINT = @SampleID,
        @ObjectTableID BIGINT = 75620000000; -- tlbMaterial
DECLARE @SampleBeforeEdit TABLE
(
    SampleID BIGINT,
    SampleTypeID BIGINT,
    RootSampleID BIGINT,
    ParentSampleID BIGINT,
    HumanID BIGINT,
    SpeciesID BIGINT,
    AnimalID BIGINT,
    MonitoringSessionID BIGINT,
    FieldCollectedByPersonID BIGINT,
    FieldCollectedByOfficeID BIGINT,
    MainTestID BIGINT,
    FieldCollectionDate DATETIME,
    FieldSentDate DATETIME,
    FieldBarcodeID NVARCHAR(200),
    CalculatedCaseID NVARCHAR(200),
    CalculatedHumanName NVARCHAR(700),
    VectorSurveillanceSessionID BIGINT,
    VectorID BIGINT,
    SubdivisionID BIGINT,
    SampleStatusTypeID BIGINT,
    DepartmentID BIGINT,
    DestroyedByPersonID BIGINT,
    EnteringDate DATETIME,
    DestructionDate DATETIME,
    BarcodeID NVARCHAR(200),
    Note NVARCHAR(500),
    SendToOfficeID BIGINT,
    ReadOnlyIndicator BIT,
    BirdStatusTypeID BIGINT,
    HumanDiseaseReportID BIGINT,
    VeterinaryDiseaseReportID BIGINT,
    AccessionDate DATETIME,
    AccessionConditionTypeID BIGINT,
    Condition NVARCHAR(200),
    AccessionByPersonID BIGINT,
    DestructionMethodTypeID BIGINT,
    CurrentSiteID BIGINT,
    SampleKindTypeID BIGINT,
    AccessionIndicator INT,
    ShowInCaseOrSessionIndicator INT,
    ShowInLabListIndicator INT,
    ShowInDispositionListIndicator INT,
    ShowInAccessionInFormIndicator INT,
    MarkedForDispositionByPersonID BIGINT,
    OutOfRepositoryDate DATETIME,
    SampleStatusDate DATETIME,
    RowStatus INT
);
DECLARE @SampleAfterEdit TABLE
(
    SampleID BIGINT,
    SampleTypeID BIGINT,
    RootSampleID BIGINT,
    ParentSampleID BIGINT,
    HumanID BIGINT,
    SpeciesID BIGINT,
    AnimalID BIGINT,
    MonitoringSessionID BIGINT,
    FieldCollectedByPersonID BIGINT,
    FieldCollectedByOfficeID BIGINT,
    MainTestID BIGINT,
    FieldCollectionDate DATETIME,
    FieldSentDate DATETIME,
    FieldBarcodeID NVARCHAR(200),
    CalculatedCaseID NVARCHAR(200),
    CalculatedHumanName NVARCHAR(700),
    VectorSurveillanceSessionID BIGINT,
    VectorID BIGINT,
    SubdivisionID BIGINT,
    SampleStatusTypeID BIGINT,
    DepartmentID BIGINT,
    DestroyedByPersonID BIGINT,
    EnteringDate DATETIME,
    DestructionDate DATETIME,
    BarcodeID NVARCHAR(200),
    Note NVARCHAR(500),
    SendToOfficeID BIGINT,
    ReadOnlyIndicator BIT,
    BirdStatusTypeID BIGINT,
    HumanDiseaseReportID BIGINT,
    VeterinaryDiseaseReportID BIGINT,
    AccessionDate DATETIME,
    AccessionConditionTypeID BIGINT,
    Condition NVARCHAR(200),
    AccessionByPersonID BIGINT,
    DestructionMethodTypeID BIGINT,
    CurrentSiteID BIGINT,
    SampleKindTypeID BIGINT,
    AccessionIndicator INT,
    ShowInCaseOrSessionIndicator INT,
    ShowInLabListIndicator INT,
    ShowInDispositionListIndicator INT,
    ShowInAccessionInFormIndicator INT,
    MarkedForDispositionByPersonID BIGINT,
    OutOfRepositoryDate DATETIME,
    SampleStatusDate DATETIME,
    RowStatus INT
);
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data Audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = UserInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        --Local/field sample EIDSS ID. Only system assign when user leaves blank.
        IF @EIDSSLocalFieldSampleID IS NULL
           OR @EIDSSLocalFieldSampleID = ''
        BEGIN
            EXECUTE dbo.USP_GBL_NextNumber_GET @ObjectName = N'Sample Field Barcode',
                                               @NextNumberValue = @EIDSSLocalFieldSampleID OUTPUT,
                                               @InstallationSite = NULL;
        END;

        IF @RowAction = 'I'
           OR @RowAction = '1' -- Insert
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = N'tlbMaterial',
                                              @idfsKey = @SampleID OUTPUT;

            INSERT INTO dbo.tlbMaterial
            (
                idfMaterial,
                idfsSampleType,
                idfRootMaterial,
                idfParentMaterial,
                idfHuman,
                idfSpecies,
                idfAnimal,
                idfMonitoringSession,
                idfFieldCollectedByPerson,
                idfFieldCollectedByOffice,
                idfMainTest,
                datFieldCollectionDate,
                datFieldSentDate,
                strFieldBarcode,
                idfVectorSurveillanceSession,
                idfVector,
                idfsSampleStatus,
                datEnteringDate,
                strNote,
                idfsSite,
                intRowStatus,
                rowguid,
                idfSendToOffice,
                blnReadOnly,
                idfsBirdStatus,
                idfHumanCase,
                idfVetCase,
                idfsCurrentSite,
                SourceSystemNameID,
                SourceSystemKeyValue,
                DiseaseID,
                AuditCreateUser,
                AuditCreateDTM,
                AuditUpdateUser,
                AuditUpdateDTM,
                TestUnassignedIndicator,
                TestCompletedIndicator,
                TransferIndicator
            )
            VALUES
            (@SampleID,
             @SampleTypeID,
             @SampleID,
             @ParentSampleID,
             @HumanID,
             @SpeciesID,
             @AnimalID,
             @MonitoringSessionID,
             @CollectedByPersonID,
             @CollectedByOrganizationID,
             NULL,
             @CollectionDate,
             @SentDate,
             @EIDSSLocalFieldSampleID,
             @VectorSessionID,
             @VectorID,
             @SampleStatusTypeID,
             GETDATE(),
             @Comments,
             @SiteID,
             0  ,
             NEWID(),
             @SentToOrganizationID,
             @ReadOnlyIndicator,
             @BirdStatusTypeID,
             @HumanDiseaseReportID,
             @VeterinaryDiseaseReportID,
             @CurrentSiteID,
             10519001,
             '[{"idfMaterial":' + CAST(@SampleID AS NVARCHAR(300)) + '}]',
             @DiseaseID,
             @AuditUserName,
             GETDATE(),
             @AuditUserName,
             GETDATE(),
             1  ,
             0  ,
             0
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser
            )
            VALUES
            (
                @DataAuditEventID, 
                @ObjectTableID, 
                @SampleID, 
                10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300))
                 + ',"idfObjectTable":' + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
                @AuditUserName
            );
            -- End data audit
        END;
        ELSE
        BEGIN
            INSERT INTO @SampleBeforeEdit
            (
                SampleID,
                SampleTypeID,
                RootSampleID,
                ParentSampleID,
                HumanID,
                SpeciesID,
                AnimalID,
                MonitoringSessionID,
                FieldCollectedByPersonID,
                FieldCollectedByOfficeID,
                MainTestID,
                FieldCollectionDate,
                FieldSentDate,
                FieldBarcodeID,
                CalculatedCaseID,
                CalculatedHumanName,
                VectorSurveillanceSessionID,
                VectorID,
                SubdivisionID,
                SampleStatusTypeID,
                DepartmentID,
                DestroyedByPersonID,
                EnteringDate,
                DestructionDate,
                BarcodeID,
                Note,
                SendToOfficeID,
                ReadOnlyIndicator,
                BirdStatusTypeID,
                HumanDiseaseReportID,
                VeterinaryDiseaseReportID,
                AccessionDate,
                AccessionConditionTypeID,
                Condition,
                AccessionByPersonID,
                DestructionMethodTypeID,
                CurrentSiteID,
                SampleKindTypeID,
                AccessionIndicator,
                ShowInCaseOrSessionIndicator,
                ShowInLabListIndicator,
                ShowInDispositionListIndicator,
                ShowInAccessionInFormIndicator,
                MarkedForDispositionByPersonID,
                OutOfRepositoryDate,
                SampleStatusDate,
                RowStatus
            )
            SELECT idfMaterial,
                   idfsSampleType,
                   idfRootMaterial,
                   idfParentMaterial,
                   idfHuman,
                   idfSpecies,
                   idfAnimal,
                   idfMonitoringSession,
                   idfFieldCollectedByPerson,
                   idfFieldCollectedByOffice,
                   idfMainTest,
                   datFieldCollectionDate,
                   datFieldSentDate,
                   strFieldBarcode,
                   strCalculatedCaseID,
                   strCalculatedHumanName,
                   idfVectorSurveillanceSession,
                   idfVector,
                   idfSubdivision,
                   idfsSampleStatus,
                   idfInDepartment,
                   idfDestroyedByPerson,
                   datEnteringDate,
                   datDestructionDate,
                   strBarcode,
                   strNote,
                   idfSendToOffice,
                   blnReadOnly,
                   idfsBirdStatus,
                   idfHumanCase,
                   idfVetCase,
                   datAccession,
                   idfsAccessionCondition,
                   strCondition,
                   idfAccesionByPerson,
                   idfsDestructionMethod,
                   idfsCurrentSite,
                   idfsSampleKind,
                   blnAccessioned,
                   blnShowInCaseOrSession,
                   blnShowInLabList,
                   blnShowInDispositionList,
                   blnShowInAccessionInForm,
                   idfMarkedForDispositionByPerson,
                   datOutOfRepositoryDate,
                   datSampleStatusDate,
                   intRowStatus
            FROM dbo.tlbMaterial
            WHERE idfMaterial = @SampleID;

            UPDATE dbo.tlbMaterial
            SET idfsSampleType = @SampleTypeID,
                idfHuman = @HumanID,
                idfSpecies = @SpeciesID,
                idfAnimal = @AnimalID,
                idfMonitoringSession = @MonitoringSessionID,
                idfFieldCollectedByPerson = @CollectedByPersonID,
                idfFieldCollectedByOffice = @CollectedByOrganizationID,
                datFieldCollectionDate = @CollectionDate,
                datFieldSentDate = @SentDate,
                strFieldBarcode = @EIDSSLocalFieldSampleID,
                idfVectorSurveillanceSession = @VectorSessionID,
                idfVector = @VectorID,
                strNote = @Comments,
                idfsSite = @SiteID,
                intRowStatus = @RowStatus,
                idfSendToOffice = @SentToOrganizationID,
                blnReadOnly = @ReadOnlyIndicator,
                idfHumanCase = @HumanDiseaseReportID,
                idfVetCase = @VeterinaryDiseaseReportID,
                DiseaseID = @DiseaseID,
                idfsBirdStatus = @BirdStatusTypeID,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfMaterial = @SampleID;

            INSERT INTO @SampleAfterEdit
            (
                SampleID,
                SampleTypeID,
                RootSampleID,
                ParentSampleID,
                HumanID,
                SpeciesID,
                AnimalID,
                MonitoringSessionID,
                FieldCollectedByPersonID,
                FieldCollectedByOfficeID,
                MainTestID,
                FieldCollectionDate,
                FieldSentDate,
                FieldBarcodeID,
                CalculatedCaseID,
                CalculatedHumanName,
                VectorSurveillanceSessionID,
                VectorID,
                SubdivisionID,
                SampleStatusTypeID,
                DepartmentID,
                DestroyedByPersonID,
                EnteringDate,
                DestructionDate,
                BarcodeID,
                Note,
                SendToOfficeID,
                ReadOnlyIndicator,
                BirdStatusTypeID,
                HumanDiseaseReportID,
                VeterinaryDiseaseReportID,
                AccessionDate,
                AccessionConditionTypeID,
                Condition,
                AccessionByPersonID,
                DestructionMethodTypeID,
                CurrentSiteID,
                SampleKindTypeID,
                AccessionIndicator,
                ShowInCaseOrSessionIndicator,
                ShowInLabListIndicator,
                ShowInDispositionListIndicator,
                ShowInAccessionInFormIndicator,
                MarkedForDispositionByPersonID,
                OutOfRepositoryDate,
                SampleStatusDate,
                RowStatus
            )
            SELECT idfMaterial,
                   idfsSampleType,
                   idfRootMaterial,
                   idfParentMaterial,
                   idfHuman,
                   idfSpecies,
                   idfAnimal,
                   idfMonitoringSession,
                   idfFieldCollectedByPerson,
                   idfFieldCollectedByOffice,
                   idfMainTest,
                   datFieldCollectionDate,
                   datFieldSentDate,
                   strFieldBarcode,
                   strCalculatedCaseID,
                   strCalculatedHumanName,
                   idfVectorSurveillanceSession,
                   idfVector,
                   idfSubdivision,
                   idfsSampleStatus,
                   idfInDepartment,
                   idfDestroyedByPerson,
                   datEnteringDate,
                   datDestructionDate,
                   strBarcode,
                   strNote,
                   idfSendToOffice,
                   blnReadOnly,
                   idfsBirdStatus,
                   idfHumanCase,
                   idfVetCase,
                   datAccession,
                   idfsAccessionCondition,
                   strCondition,
                   idfAccesionByPerson,
                   idfsDestructionMethod,
                   idfsCurrentSite,
                   idfsSampleKind,
                   blnAccessioned,
                   blnShowInCaseOrSession,
                   blnShowInLabList,
                   blnShowInDispositionList,
                   blnShowInAccessionInForm,
                   idfMarkedForDispositionByPerson,
                   datOutOfRepositoryDate,
                   datSampleStatusDate,
                   intRowStatus
            FROM dbo.tlbMaterial
            WHERE idfMaterial = @SampleID;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   49545390000000,
                   a.SampleID,
                   NULL,
                   b.SampleTypeID,
                   a.SampleTypeID,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.SampleTypeID <> b.SampleTypeID)
                  OR (
                         a.SampleTypeID IS NOT NULL
                         AND b.SampleTypeID IS NULL
                     )
                  OR (
                         a.SampleTypeID IS NULL
                         AND b.SampleTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   49545400000000,
                   a.SampleID,
                   NULL,
                   b.RootSampleID,
                   a.RootSampleID,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.RootSampleID <> b.RootSampleID)
                  OR (
                         a.RootSampleID IS NOT NULL
                         AND b.RootSampleID IS NULL
                     )
                  OR (
                         a.RootSampleID IS NULL
                         AND b.RootSampleID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79970000000,
                   a.SampleID,
                   NULL,
                   b.ParentSampleID,
                   a.ParentSampleID,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.ParentSampleID <> b.ParentSampleID)
                  OR (
                         a.ParentSampleID IS NOT NULL
                         AND b.ParentSampleID IS NULL
                     )
                  OR (
                         a.ParentSampleID IS NULL
                         AND b.ParentSampleID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572430000000,
                   a.SampleID,
                   NULL,
                   b.HumanID,
                   a.HumanID,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.HumanID <> b.HumanID)
                  OR (
                         a.HumanID IS NOT NULL
                         AND b.HumanID IS NULL
                     )
                  OR (
                         a.HumanID IS NULL
                         AND b.HumanID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572440000000,
                   a.SampleID,
                   NULL,
                   b.SpeciesID,
                   a.SpeciesID,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.SpeciesID <> b.SpeciesID)
                  OR (
                         a.SpeciesID IS NOT NULL
                         AND b.SpeciesID IS NULL
                     )
                  OR (
                         a.SpeciesID IS NULL
                         AND b.SpeciesID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572450000000,
                   a.SampleID,
                   NULL,
                   b.AnimalID,
                   a.AnimalID,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.AnimalID <> b.AnimalID)
                  OR (
                         a.AnimalID IS NOT NULL
                         AND b.AnimalID IS NULL
                     )
                  OR (
                         a.AnimalID IS NULL
                         AND b.AnimalID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572470000000,
                   a.SampleID,
                   NULL,
                   b.MonitoringSessionID,
                   a.MonitoringSessionID,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.MonitoringSessionID <> b.MonitoringSessionID)
                  OR (
                         a.MonitoringSessionID IS NOT NULL
                         AND b.MonitoringSessionID IS NULL
                     )
                  OR (
                         a.MonitoringSessionID IS NULL
                         AND b.MonitoringSessionID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79950000000,
                   a.SampleID,
                   NULL,
                   b.FieldCollectedByPersonID,
                   a.FieldCollectedByPersonID,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.FieldCollectedByPersonID <> b.FieldCollectedByPersonID)
                  OR (
                         a.FieldCollectedByPersonID IS NOT NULL
                         AND b.FieldCollectedByPersonID IS NULL
                     )
                  OR (
                         a.FieldCollectedByPersonID IS NULL
                         AND b.FieldCollectedByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79940000000,
                   a.SampleID,
                   NULL,
                   b.FieldCollectedByOfficeID,
                   a.FieldCollectedByOfficeID,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.FieldCollectedByOfficeID <> b.FieldCollectedByOfficeID)
                  OR (
                         a.FieldCollectedByOfficeID IS NOT NULL
                         AND b.FieldCollectedByOfficeID IS NULL
                     )
                  OR (
                         a.FieldCollectedByOfficeID IS NULL
                         AND b.FieldCollectedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   49545410000000,
                   a.SampleID,
                   NULL,
                   b.MainTestID,
                   a.MainTestID,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.MainTestID <> b.MainTestID)
                  OR (
                         a.MainTestID IS NOT NULL
                         AND b.MainTestID IS NULL
                     )
                  OR (
                         a.MainTestID IS NULL
                         AND b.MainTestID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79920000000,
                   a.SampleID,
                   NULL,
                   b.FieldCollectionDate,
                   a.FieldCollectionDate,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.FieldCollectionDate <> b.FieldCollectionDate)
                  OR (
                         a.FieldCollectionDate IS NOT NULL
                         AND b.FieldCollectionDate IS NULL
                     )
                  OR (
                         a.FieldCollectionDate IS NULL
                         AND b.FieldCollectionDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79930000000,
                   a.SampleID,
                   NULL,
                   b.FieldSentDate,
                   a.FieldSentDate,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.FieldSentDate <> b.FieldSentDate)
                  OR (
                         a.FieldSentDate IS NOT NULL
                         AND b.FieldSentDate IS NULL
                     )
                  OR (
                         a.FieldSentDate IS NULL
                         AND b.FieldSentDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80030000000,
                   a.SampleID,
                   NULL,
                   b.FieldBarcodeID,
                   a.FieldBarcodeID,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.FieldBarcodeID <> b.FieldBarcodeID)
                  OR (
                         a.FieldBarcodeID IS NOT NULL
                         AND b.FieldBarcodeID IS NULL
                     )
                  OR (
                         a.FieldBarcodeID IS NULL
                         AND b.FieldBarcodeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572480000000,
                   a.SampleID,
                   NULL,
                   b.CalculatedCaseID,
                   a.CalculatedCaseID,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.CalculatedCaseID <> b.CalculatedCaseID)
                  OR (
                         a.CalculatedCaseID IS NOT NULL
                         AND b.CalculatedCaseID IS NULL
                     )
                  OR (
                         a.CalculatedCaseID IS NULL
                         AND b.CalculatedCaseID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572490000000,
                   a.SampleID,
                   NULL,
                   b.CalculatedHumanName,
                   a.CalculatedHumanName,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.CalculatedHumanName <> b.CalculatedHumanName)
                  OR (
                         a.CalculatedHumanName IS NOT NULL
                         AND b.CalculatedHumanName IS NULL
                     )
                  OR (
                         a.CalculatedHumanName IS NULL
                         AND b.CalculatedHumanName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4575190000000,
                   a.SampleID,
                   NULL,
                   b.VectorSurveillanceSessionID,
                   a.VectorSurveillanceSessionID,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.VectorSurveillanceSessionID <> b.VectorSurveillanceSessionID)
                  OR (
                         a.VectorSurveillanceSessionID IS NOT NULL
                         AND b.VectorSurveillanceSessionID IS NULL
                     )
                  OR (
                         a.VectorSurveillanceSessionID IS NULL
                         AND b.VectorSurveillanceSessionID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4575200000000,
                   a.SampleID,
                   NULL,
                   b.VectorID,
                   a.VectorID,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.VectorID <> b.VectorID)
                  OR (
                         a.VectorID IS NOT NULL
                         AND b.VectorID IS NULL
                     )
                  OR (
                         a.VectorID IS NULL
                         AND b.VectorID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4576340000000,
                   a.SampleID,
                   NULL,
                   b.SubdivisionID,
                   a.SubdivisionID,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.SubdivisionID <> b.SubdivisionID)
                  OR (
                         a.SubdivisionID IS NOT NULL
                         AND b.SubdivisionID IS NULL
                     )
                  OR (
                         a.SubdivisionID IS NULL
                         AND b.SubdivisionID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   49545420000000,
                   a.SampleID,
                   NULL,
                   b.SampleStatusTypeID,
                   a.SampleStatusTypeID,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.SampleStatusTypeID <> b.SampleStatusTypeID)
                  OR (
                         a.SampleStatusTypeID IS NOT NULL
                         AND b.SampleStatusTypeID IS NULL
                     )
                  OR (
                         a.SampleStatusTypeID IS NULL
                         AND b.SampleStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4576360000000,
                   a.SampleID,
                   NULL,
                   b.DepartmentID,
                   a.DepartmentID,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.DepartmentID <> b.DepartmentID)
                  OR (
                         a.DepartmentID IS NOT NULL
                         AND b.DepartmentID IS NULL
                     )
                  OR (
                         a.DepartmentID IS NULL
                         AND b.DepartmentID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4576370000000,
                   a.SampleID,
                   NULL,
                   b.DestroyedByPersonID,
                   a.DestroyedByPersonID,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.DestroyedByPersonID <> b.DestroyedByPersonID)
                  OR (
                         a.DestroyedByPersonID IS NOT NULL
                         AND b.DestroyedByPersonID IS NULL
                     )
                  OR (
                         a.DestroyedByPersonID IS NULL
                         AND b.DestroyedByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4576390000000,
                   a.SampleID,
                   NULL,
                   b.EnteringDate,
                   a.EnteringDate,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.EnteringDate <> b.EnteringDate)
                  OR (
                         a.EnteringDate IS NOT NULL
                         AND b.EnteringDate IS NULL
                     )
                  OR (
                         a.EnteringDate IS NULL
                         AND b.EnteringDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4576400000000,
                   a.SampleID,
                   NULL,
                   b.DestructionDate,
                   a.DestructionDate,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.DestructionDate <> b.DestructionDate)
                  OR (
                         a.DestructionDate IS NOT NULL
                         AND b.DestructionDate IS NULL
                     )
                  OR (
                         a.DestructionDate IS NULL
                         AND b.DestructionDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4576410000000,
                   a.SampleID,
                   NULL,
                   b.BarcodeID,
                   a.BarcodeID,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.BarcodeID <> b.BarcodeID)
                  OR (
                         a.BarcodeID IS NOT NULL
                         AND b.BarcodeID IS NULL
                     )
                  OR (
                         a.BarcodeID IS NULL
                         AND b.BarcodeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4576420000000,
                   a.SampleID,
                   NULL,
                   b.Note,
                   a.Note,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.Note <> b.Note)
                  OR (
                         a.Note IS NOT NULL
                         AND b.Note IS NULL
                     )
                  OR (
                         a.Note IS NULL
                         AND b.Note IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4578720000000,
                   a.SampleID,
                   NULL,
                   b.SendToOfficeID,
                   a.SendToOfficeID,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.SendToOfficeID <> b.SendToOfficeID)
                  OR (
                         a.SendToOfficeID IS NOT NULL
                         AND b.SendToOfficeID IS NULL
                     )
                  OR (
                         a.SendToOfficeID IS NULL
                         AND b.SendToOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4578730000000,
                   a.SampleID,
                   NULL,
                   b.ReadOnlyIndicator,
                   a.ReadOnlyIndicator,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.ReadOnlyIndicator <> b.ReadOnlyIndicator)
                  OR (
                         a.ReadOnlyIndicator IS NOT NULL
                         AND b.ReadOnlyIndicator IS NULL
                     )
                  OR (
                         a.ReadOnlyIndicator IS NULL
                         AND b.ReadOnlyIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12014480000000,
                   a.SampleID,
                   NULL,
                   b.BirdStatusTypeID,
                   a.BirdStatusTypeID,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.BirdStatusTypeID <> b.BirdStatusTypeID)
                  OR (
                         a.BirdStatusTypeID IS NOT NULL
                         AND b.BirdStatusTypeID IS NULL
                     )
                  OR (
                         a.BirdStatusTypeID IS NULL
                         AND b.BirdStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665570000000,
                   a.SampleID,
                   NULL,
                   b.HumanDiseaseReportID,
                   a.HumanDiseaseReportID,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.HumanDiseaseReportID <> b.HumanDiseaseReportID)
                  OR (
                         a.HumanDiseaseReportID IS NOT NULL
                         AND b.HumanDiseaseReportID IS NULL
                     )
                  OR (
                         a.HumanDiseaseReportID IS NULL
                         AND b.HumanDiseaseReportID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665580000000,
                   a.SampleID,
                   NULL,
                   b.VeterinaryDiseaseReportID,
                   a.VeterinaryDiseaseReportID,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.VeterinaryDiseaseReportID <> b.VeterinaryDiseaseReportID)
                  OR (
                         a.VeterinaryDiseaseReportID IS NOT NULL
                         AND b.VeterinaryDiseaseReportID IS NULL
                     )
                  OR (
                         a.VeterinaryDiseaseReportID IS NULL
                         AND b.VeterinaryDiseaseReportID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12666880000000,
                   a.SampleID,
                   NULL,
                   b.AccessionDate,
                   a.AccessionDate,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.AccessionDate <> b.AccessionDate)
                  OR (
                         a.AccessionDate IS NOT NULL
                         AND b.AccessionDate IS NULL
                     )
                  OR (
                         a.AccessionDate IS NULL
                         AND b.AccessionDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12666890000000,
                   a.SampleID,
                   NULL,
                   b.AccessionConditionTypeID,
                   a.AccessionConditionTypeID,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.AccessionConditionTypeID <> b.AccessionConditionTypeID)
                  OR (
                         a.AccessionConditionTypeID IS NOT NULL
                         AND b.AccessionConditionTypeID IS NULL
                     )
                  OR (
                         a.AccessionConditionTypeID IS NULL
                         AND b.AccessionConditionTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12666900000000,
                   a.SampleID,
                   NULL,
                   b.Condition,
                   a.Condition,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.Condition <> b.Condition)
                  OR (
                         a.Condition IS NOT NULL
                         AND b.Condition IS NULL
                     )
                  OR (
                         a.Condition IS NULL
                         AND b.Condition IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12666910000000,
                   a.SampleID,
                   NULL,
                   b.AccessionByPersonID,
                   a.AccessionByPersonID,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.AccessionByPersonID <> b.AccessionByPersonID)
                  OR (
                         a.AccessionByPersonID IS NOT NULL
                         AND b.AccessionByPersonID IS NULL
                     )
                  OR (
                         a.AccessionByPersonID IS NULL
                         AND b.AccessionByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12675260000000,
                   a.SampleID,
                   NULL,
                   b.DestructionMethodTypeID,
                   a.DestructionMethodTypeID,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.DestructionMethodTypeID <> b.DestructionMethodTypeID)
                  OR (
                         a.DestructionMethodTypeID IS NOT NULL
                         AND b.DestructionMethodTypeID IS NULL
                     )
                  OR (
                         a.DestructionMethodTypeID IS NULL
                         AND b.DestructionMethodTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   49545560000000,
                   a.SampleID,
                   NULL,
                   b.CurrentSiteID,
                   a.CurrentSiteID,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.CurrentSiteID <> b.CurrentSiteID)
                  OR (
                         a.CurrentSiteID IS NOT NULL
                         AND b.CurrentSiteID IS NULL
                     )
                  OR (
                         a.CurrentSiteID IS NULL
                         AND b.CurrentSiteID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   49545570000000,
                   a.SampleID,
                   NULL,
                   b.SampleKindTypeID,
                   a.SampleKindTypeID,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.SampleKindTypeID <> b.SampleKindTypeID)
                  OR (
                         a.SampleKindTypeID IS NOT NULL
                         AND b.SampleKindTypeID IS NULL
                     )
                  OR (
                         a.SampleKindTypeID IS NULL
                         AND b.SampleKindTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   49545580000000,
                   a.SampleID,
                   NULL,
                   b.AccessionIndicator,
                   a.AccessionIndicator,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.AccessionIndicator <> b.AccessionIndicator)
                  OR (
                         a.AccessionIndicator IS NOT NULL
                         AND b.AccessionIndicator IS NULL
                     )
                  OR (
                         a.AccessionIndicator IS NULL
                         AND b.AccessionIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   49545590000000,
                   a.SampleID,
                   NULL,
                   b.ShowInCaseOrSessionIndicator,
                   a.ShowInCaseOrSessionIndicator,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.ShowInCaseOrSessionIndicator <> b.ShowInCaseOrSessionIndicator)
                  OR (
                         a.ShowInCaseOrSessionIndicator IS NOT NULL
                         AND b.ShowInCaseOrSessionIndicator IS NULL
                     )
                  OR (
                         a.ShowInCaseOrSessionIndicator IS NULL
                         AND b.ShowInCaseOrSessionIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   49545600000000,
                   a.SampleID,
                   NULL,
                   b.ShowInLabListIndicator,
                   a.ShowInLabListIndicator,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.ShowInLabListIndicator <> b.ShowInLabListIndicator)
                  OR (
                         a.ShowInLabListIndicator IS NOT NULL
                         AND b.ShowInLabListIndicator IS NULL
                     )
                  OR (
                         a.ShowInLabListIndicator IS NULL
                         AND b.ShowInLabListIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   49545620000000,
                   a.SampleID,
                   NULL,
                   b.ShowInDispositionListIndicator,
                   a.ShowInDispositionListIndicator,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.ShowInDispositionListIndicator <> b.ShowInDispositionListIndicator)
                  OR (
                         a.ShowInDispositionListIndicator IS NOT NULL
                         AND b.ShowInDispositionListIndicator IS NULL
                     )
                  OR (
                         a.ShowInDispositionListIndicator IS NULL
                         AND b.ShowInDispositionListIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   49545610000000,
                   a.SampleID,
                   NULL,
                   b.ShowInAccessionInFormIndicator,
                   a.ShowInAccessionInFormIndicator,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.ShowInAccessionInFormIndicator <> b.ShowInAccessionInFormIndicator)
                  OR (
                         a.ShowInAccessionInFormIndicator IS NOT NULL
                         AND b.ShowInAccessionInFormIndicator IS NULL
                     )
                  OR (
                         a.ShowInAccessionInFormIndicator IS NULL
                         AND b.ShowInAccessionInFormIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   51523600000000,
                   a.SampleID,
                   NULL,
                   b.MarkedForDispositionByPersonID,
                   a.MarkedForDispositionByPersonID,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.MarkedForDispositionByPersonID <> b.MarkedForDispositionByPersonID)
                  OR (
                         a.MarkedForDispositionByPersonID IS NOT NULL
                         AND b.MarkedForDispositionByPersonID IS NULL
                     )
                  OR (
                         a.MarkedForDispositionByPersonID IS NULL
                         AND b.MarkedForDispositionByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   51528570000000,
                   a.SampleID,
                   NULL,
                   b.OutOfRepositoryDate,
                   a.OutOfRepositoryDate,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.OutOfRepositoryDate <> b.OutOfRepositoryDate)
                  OR (
                         a.OutOfRepositoryDate IS NOT NULL
                         AND b.OutOfRepositoryDate IS NULL
                     )
                  OR (
                         a.OutOfRepositoryDate IS NULL
                         AND b.OutOfRepositoryDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   51528580000000,
                   a.SampleID,
                   NULL,
                   b.SampleStatusDate,
                   a.SampleStatusDate,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE (a.SampleStatusDate <> b.SampleStatusDate)
                  OR (
                         a.SampleStatusDate IS NOT NULL
                         AND b.SampleStatusDate IS NULL
                     )
                  OR (
                         a.SampleStatusDate IS NULL
                         AND b.SampleStatusDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailRestore
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                idfObjectDetail,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   a.SampleID,
                   NULL,
                   @AuditUserName
            FROM @SampleAfterEdit AS a
                FULL JOIN @SampleBeforeEdit AS b
                    ON a.SampleID = b.SampleID
            WHERE a.RowStatus = 0
                  AND b.RowStatus = 1;
        END;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Procedure [dbo].[USSP_GBL_TEST_INTERPRETATIONS_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USSP_GBL_TEST_INTERPRETATIONS_SET
--
-- Description:	Inserts or updates test interpretation records for various use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     11/21/2022 Initial release with data audit logic for SAUC30 and 31.
-- ================================================================================================
CREATE PROCEDURE [dbo].[USSP_GBL_TEST_INTERPRETATIONS_SET]
(
    @AuditUserName NVARCHAR(200),
    @DataAuditEventID BIGINT = NULL,
    @TestInterpretationID BIGINT OUTPUT,
    @DiseaseID BIGINT,
    @InterpretedStatusTypeID BIGINT = NULL,
    @ValidatedByOrganizationID BIGINT = NULL,
    @ValidatedByPersonID BIGINT = NULL,
    @InterpretedByOrganizationID BIGINT = NULL,
    @InterpretedByPersonID BIGINT = NULL,
    @TestID BIGINT,
    @ValidateStatusIndicator BIT = NULL,
    @ReportSessionCreatedIndicator BIT = NULL,
    @ValidationComment NVARCHAR(200) = NULL,
    @InterpretationComment NVARCHAR(200) = NULL,
    @ValidationDate DATETIME = NULL,
    @InterpretationDate DATETIME = NULL,
    @RowStatus INT,
    @ReadOnlyIndicator BIT,
    @RowAction INT
)
AS
DECLARE @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectID BIGINT = @TestInterpretationID,
        @ObjectTableID BIGINT = 75750000000; -- tlbTestValidation
DECLARE @TestInterpretationBeforeEdit TABLE
(
    TestInterpretationID BIGINT,
    DiseaseID BIGINT,
    InterpretedStatusTypeID BIGINT,
    ValidatedByOfficeID BIGINT,
    ValidatedByPersonID BIGINT,
    InterpretedByOfficeID BIGINT,
    InterpretedByPersonID BIGINT,
    TestID BIGINT,
    ValidateStatusIndicator BIT,
    CaseCreatedIndicator BIT,
    ValidateComment NVARCHAR(200),
    InterpretedComment NVARCHAR(200),
    ValidationDate DATETIME,
    InterpretationDate DATETIME,
    ReadOnlyIndicator BIT,
    RowStatus INT
);
DECLARE @TestInterpretationAfterEdit TABLE
(
    TestInterpretationID BIGINT,
    DiseaseID BIGINT,
    InterpretedStatusTypeID BIGINT,
    ValidatedByOfficeID BIGINT,
    ValidatedByPersonID BIGINT,
    InterpretedByOfficeID BIGINT,
    InterpretedByPersonID BIGINT,
    TestID BIGINT,
    ValidateStatusIndicator BIT,
    CaseCreatedIndicator BIT,
    ValidateComment NVARCHAR(200),
    InterpretedComment NVARCHAR(200),
    ValidationDate DATETIME,
    InterpretationDate DATETIME,
    ReadOnlyIndicator BIT,
    RowStatus INT
);
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = UserInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        IF @RowAction = 1 -- Insert
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbTestValidation',
                                              @TestInterpretationID OUTPUT;
            print @TestInterpretationID;
            INSERT INTO dbo.tlbTestValidation
            (
                idfTestValidation,
                idfsDiagnosis,
                idfsInterpretedStatus,
                idfValidatedByOffice,
                idfValidatedByPerson,
                idfInterpretedByOffice,
                idfInterpretedByPerson,
                idfTesting,
                blnValidateStatus,
                blnCaseCreated,
                strValidateComment,
                strInterpretedComment,
                datValidationDate,
                datInterpretationDate,
                intRowStatus,
                blnReadOnly,
                AuditCreateUser,
                SourceSystemNameID,
                SourceSystemKeyValue
            )
            VALUES
            (@TestInterpretationID,
             @DiseaseID,
             @InterpretedStatusTypeID,
             @ValidatedByOrganizationID,
             @ValidatedByPersonID,
             @InterpretedByOrganizationID,
             @InterpretedByPersonID,
             @TestID,
             @ValidateStatusIndicator,
             @ReportSessionCreatedIndicator,
             @ValidationComment,
             @InterpretationComment,
             @ValidationDate,
             @InterpretationDate,
             @RowStatus,
             @ReadOnlyIndicator,
             @AuditUserName,
             10519001,
             '[{"idfTestValidation":' + CAST(@TestInterpretationID AS NVARCHAR(300)) + '}]'
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser
            )
            VALUES
            (
                @DataAuditEventID, 
                @ObjectTableID, 
                @TestInterpretationID, 
                10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300))
                 + ',"idfObjectTable":' + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
                @AuditUserName
            );
            -- End data audit
        END
        ELSE
        BEGIN
            INSERT INTO @TestInterpretationBeforeEdit
            (
                TestInterpretationID,
                DiseaseID,
                InterpretedStatusTypeID,
                ValidatedByOfficeID,
                ValidatedByPersonID,
                InterpretedByOfficeID,
                InterpretedByPersonID,
                TestID,
                ValidateStatusIndicator,
                CaseCreatedIndicator,
                ValidateComment,
                InterpretedComment,
                ValidationDate,
                InterpretationDate,
                ReadOnlyIndicator,
                RowStatus
            )
            SELECT idfTestValidation,
                   idfsDiagnosis,
                   idfsInterpretedStatus,
                   idfValidatedByOffice,
                   idfValidatedByPerson,
                   idfInterpretedByOffice,
                   idfInterpretedByPerson,
                   idfTesting,
                   blnValidateStatus,
                   blnCaseCreated,
                   strValidateComment,
                   strInterpretedComment,
                   datValidationDate,
                   datInterpretationDate,
                   blnReadOnly,
                   intRowStatus
            FROM dbo.tlbTestValidation
            WHERE idfTestValidation = @TestInterpretationID;

            UPDATE dbo.tlbTestValidation
            SET idfsDiagnosis = @DiseaseID,
                idfsInterpretedStatus = @InterpretedStatusTypeID,
                idfValidatedByOffice = @ValidatedByOrganizationID,
                idfValidatedByPerson = @ValidatedByPersonID,
                idfInterpretedByOffice = @InterpretedByOrganizationID,
                idfInterpretedByPerson = @InterpretedByPersonID,
                idfTesting = @TestID,
                blnValidateStatus = @ValidateStatusIndicator,
                blnCaseCreated = @ReportSessionCreatedIndicator,
                strValidateComment = @ValidationComment,
                strInterpretedComment = @InterpretationComment,
                datValidationDate = @ValidationDate,
                datInterpretationDate = @InterpretationDate,
                intRowStatus = @RowStatus,
                blnReadOnly = @ReadOnlyIndicator,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfTestValidation = @TestInterpretationID;

            INSERT INTO @TestInterpretationAfterEdit
            (
                TestInterpretationID,
                DiseaseID,
                InterpretedStatusTypeID,
                ValidatedByOfficeID,
                ValidatedByPersonID,
                InterpretedByOfficeID,
                InterpretedByPersonID,
                TestID,
                ValidateStatusIndicator,
                CaseCreatedIndicator,
                ValidateComment,
                InterpretedComment,
                ValidationDate,
                InterpretationDate,
                ReadOnlyIndicator,
                RowStatus
            )
            SELECT idfTestValidation,
                   idfsDiagnosis,
                   idfsInterpretedStatus,
                   idfValidatedByOffice,
                   idfValidatedByPerson,
                   idfInterpretedByOffice,
                   idfInterpretedByPerson,
                   idfTesting,
                   blnValidateStatus,
                   blnCaseCreated,
                   strValidateComment,
                   strInterpretedComment,
                   datValidationDate,
                   datInterpretationDate,
                   blnReadOnly,
                   intRowStatus
            FROM dbo.tlbTestValidation
            WHERE idfTestValidation = @TestInterpretationID;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80580000000,
                   a.TestInterpretationID,
                   NULL,
                   b.DiseaseID,
                   a.DiseaseID,
                   @AuditUserName
            FROM @TestInterpretationAfterEdit AS a
                FULL JOIN @TestInterpretationBeforeEdit AS b
                    ON a.TestInterpretationID = b.TestInterpretationID
            WHERE (a.DiseaseID <> b.DiseaseID)
                  OR (
                         a.DiseaseID IS NOT NULL
                         AND b.DiseaseID IS NULL
                     )
                  OR (
                         a.DiseaseID IS NULL
                         AND b.DiseaseID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80590000000,
                   a.TestInterpretationID,
                   NULL,
                   b.InterpretedStatusTypeID,
                   a.InterpretedStatusTypeID,
                   @AuditUserName
            FROM @TestInterpretationAfterEdit AS a
                FULL JOIN @TestInterpretationBeforeEdit AS b
                    ON a.TestInterpretationID = b.TestInterpretationID
            WHERE (a.InterpretedStatusTypeID <> b.InterpretedStatusTypeID)
                  OR (
                         a.InterpretedStatusTypeID IS NOT NULL
                         AND b.InterpretedStatusTypeID IS NULL
                     )
                  OR (
                         a.InterpretedStatusTypeID IS NULL
                         AND b.InterpretedStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80610000000,
                   a.TestInterpretationID,
                   NULL,
                   b.ValidatedByOfficeID,
                   a.ValidatedByOfficeID,
                   @AuditUserName
            FROM @TestInterpretationAfterEdit AS a
                FULL JOIN @TestInterpretationBeforeEdit AS b
                    ON a.TestInterpretationID = b.TestInterpretationID
            WHERE (a.ValidatedByOfficeID <> b.ValidatedByOfficeID)
                  OR (
                         a.ValidatedByOfficeID IS NOT NULL
                         AND b.ValidatedByOfficeID IS NULL
                     )
                  OR (
                         a.ValidatedByOfficeID IS NULL
                         AND b.ValidatedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80620000000,
                   a.TestInterpretationID,
                   NULL,
                   b.ValidatedByPersonID,
                   a.ValidatedByPersonID,
                   @AuditUserName
            FROM @TestInterpretationAfterEdit AS a
                FULL JOIN @TestInterpretationBeforeEdit AS b
                    ON a.TestInterpretationID = b.TestInterpretationID
            WHERE (a.ValidatedByPersonID <> b.ValidatedByPersonID)
                  OR (
                         a.ValidatedByPersonID IS NOT NULL
                         AND b.ValidatedByPersonID IS NULL
                     )
                  OR (
                         a.ValidatedByPersonID IS NULL
                         AND b.ValidatedByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80560000000,
                   a.TestInterpretationID,
                   NULL,
                   b.InterpretedByOfficeID,
                   a.InterpretedByOfficeID,
                   @AuditUserName
            FROM @TestInterpretationAfterEdit AS a
                FULL JOIN @TestInterpretationBeforeEdit AS b
                    ON a.TestInterpretationID = b.TestInterpretationID
            WHERE (a.InterpretedByOfficeID <> b.InterpretedByOfficeID)
                  OR (
                         a.InterpretedByOfficeID IS NOT NULL
                         AND b.InterpretedByOfficeID IS NULL
                     )
                  OR (
                         a.InterpretedByOfficeID IS NULL
                         AND b.InterpretedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80570000000,
                   a.TestInterpretationID,
                   NULL,
                   b.InterpretedByPersonID,
                   a.InterpretedByPersonID,
                   @AuditUserName
            FROM @TestInterpretationAfterEdit AS a
                FULL JOIN @TestInterpretationBeforeEdit AS b
                    ON a.TestInterpretationID = b.TestInterpretationID
            WHERE (a.InterpretedByPersonID <> b.InterpretedByPersonID)
                  OR (
                         a.InterpretedByPersonID IS NOT NULL
                         AND b.InterpretedByPersonID IS NULL
                     )
                  OR (
                         a.InterpretedByPersonID IS NULL
                         AND b.InterpretedByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80600000000,
                   a.TestInterpretationID,
                   NULL,
                   b.TestID,
                   a.TestID,
                   @AuditUserName
            FROM @TestInterpretationAfterEdit AS a
                FULL JOIN @TestInterpretationBeforeEdit AS b
                    ON a.TestInterpretationID = b.TestInterpretationID
            WHERE (a.TestID <> b.TestID)
                  OR (
                         a.TestID IS NOT NULL
                         AND b.TestID IS NULL
                     )
                  OR (
                         a.TestID IS NULL
                         AND b.TestID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80550000000,
                   a.TestInterpretationID,
                   NULL,
                   b.ValidateStatusIndicator,
                   a.ValidateStatusIndicator,
                   @AuditUserName
            FROM @TestInterpretationAfterEdit AS a
                FULL JOIN @TestInterpretationBeforeEdit AS b
                    ON a.TestInterpretationID = b.TestInterpretationID
            WHERE (a.ValidateStatusIndicator <> b.ValidateStatusIndicator)
                  OR (
                         a.ValidateStatusIndicator IS NOT NULL
                         AND b.ValidateStatusIndicator IS NULL
                     )
                  OR (
                         a.ValidateStatusIndicator IS NULL
                         AND b.ValidateStatusIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572560000000,
                   a.TestInterpretationID,
                   NULL,
                   b.CaseCreatedIndicator,
                   a.CaseCreatedIndicator,
                   @AuditUserName
            FROM @TestInterpretationAfterEdit AS a
                FULL JOIN @TestInterpretationBeforeEdit AS b
                    ON a.TestInterpretationID = b.TestInterpretationID
            WHERE (a.CaseCreatedIndicator <> b.CaseCreatedIndicator)
                  OR (
                         a.CaseCreatedIndicator IS NOT NULL
                         AND b.CaseCreatedIndicator IS NULL
                     )
                  OR (
                         a.CaseCreatedIndicator IS NULL
                         AND b.CaseCreatedIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80640000000,
                   a.TestInterpretationID,
                   NULL,
                   b.ValidateComment,
                   a.ValidateComment,
                   @AuditUserName
            FROM @TestInterpretationAfterEdit AS a
                FULL JOIN @TestInterpretationBeforeEdit AS b
                    ON a.TestInterpretationID = b.TestInterpretationID
            WHERE (a.ValidateComment <> b.ValidateComment)
                  OR (
                         a.ValidateComment IS NOT NULL
                         AND b.ValidateComment IS NULL
                     )
                  OR (
                         a.ValidateComment IS NULL
                         AND b.ValidateComment IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80630000000,
                   a.TestInterpretationID,
                   NULL,
                   b.InterpretedComment,
                   a.InterpretedComment,
                   @AuditUserName
            FROM @TestInterpretationAfterEdit AS a
                FULL JOIN @TestInterpretationBeforeEdit AS b
                    ON a.TestInterpretationID = b.TestInterpretationID
            WHERE (a.InterpretedComment <> b.InterpretedComment)
                  OR (
                         a.InterpretedComment IS NOT NULL
                         AND b.InterpretedComment IS NULL
                     )
                  OR (
                         a.InterpretedComment IS NULL
                         AND b.InterpretedComment IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572570000000,
                   a.TestInterpretationID,
                   NULL,
                   b.ValidationDate,
                   a.ValidationDate,
                   @AuditUserName
            FROM @TestInterpretationAfterEdit AS a
                FULL JOIN @TestInterpretationBeforeEdit AS b
                    ON a.TestInterpretationID = b.TestInterpretationID
            WHERE (a.ValidationDate <> b.ValidationDate)
                  OR (
                         a.ValidationDate IS NOT NULL
                         AND b.ValidationDate IS NULL
                     )
                  OR (
                         a.ValidationDate IS NULL
                         AND b.ValidationDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572580000000,
                   a.TestInterpretationID,
                   NULL,
                   b.InterpretationDate,
                   a.InterpretationDate,
                   @AuditUserName
            FROM @TestInterpretationAfterEdit AS a
                FULL JOIN @TestInterpretationBeforeEdit AS b
                    ON a.TestInterpretationID = b.TestInterpretationID
            WHERE (a.InterpretationDate <> b.InterpretationDate)
                  OR (
                         a.InterpretationDate IS NOT NULL
                         AND b.InterpretationDate IS NULL
                     )
                  OR (
                         a.InterpretationDate IS NULL
                         AND b.InterpretationDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   6617410000000,
                   a.TestInterpretationID,
                   NULL,
                   b.ReadOnlyIndicator,
                   a.ReadOnlyIndicator,
                   @AuditUserName
            FROM @TestInterpretationAfterEdit AS a
                FULL JOIN @TestInterpretationBeforeEdit AS b
                    ON a.TestInterpretationID = b.TestInterpretationID
            WHERE (a.ReadOnlyIndicator <> b.ReadOnlyIndicator)
                  OR (
                         a.ReadOnlyIndicator IS NOT NULL
                         AND b.ReadOnlyIndicator IS NULL
                     )
                  OR (
                         a.ReadOnlyIndicator IS NULL
                         AND b.ReadOnlyIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailRestore
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                idfObjectDetail,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   a.TestInterpretationID,
                   NULL,
                   @AuditUserName
            FROM @TestInterpretationAfterEdit AS a
                FULL JOIN @TestInterpretationBeforeEdit AS b
                    ON a.TestInterpretationID = b.TestInterpretationID
            where a.RowStatus = 0
                  AND b.RowStatus = 1;
        END
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Procedure [dbo].[USSP_GBL_TESTS_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USSP_GBL_TESTS_SET
--
-- Description:	Inserts or updates laboratory and field test records for various use cases.
--
-- Revision History:
-- Name                Date       Change Detail
-- ------------------- ---------- -------------------------------------------------------------------
-- Stephen Long        11/21/2022 Initial release with data audit logic for SAUC30 and 31.
-- ================================================================================================
CREATE PROCEDURE [dbo].[USSP_GBL_TESTS_SET]
(
    @LanguageID NVARCHAR(50),
    @TestID BIGINT OUTPUT,
    @TestNameTypeID BIGINT = NULL,
    @TestCategoryTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestStatusTypeID BIGINT,
    @DiseaseID BIGINT,
    @SampleID BIGINT = NULL,
    @BatchTestID BIGINT = NULL,
    @ObservationID BIGINT,
    @TestNumber INT = NULL,
    @Comments NVARCHAR(500) = NULL,
    @RowStatus INT = NULL,
    @StartedDate DATETIME = NULL,
    @ResultDate DATETIME = NULL,
    @TestedByOrganizationID BIGINT = NULL,
    @TestedByPersonID BIGINT = NULL,
    @ResultEnteredByOrganizationID BIGINT = NULL,
    @ResultEnteredByPersonID BIGINT = NULL,
    @ValidatedByOrganizationID BIGINT = NULL,
    @ValidatedByPersonID BIGINT = NULL,
    @ReadOnlyIndicator BIT,
    @NonLaboratoryTestIndicator BIT,
    @ExternalTestIndicator BIT = NULL,
    @PerformedByOrganizationID BIGINT = NULL,
    @ReceivedDate DATETIME = NULL,
    @ContactPerson NVARCHAR(200) = NULL,
    @MonitoringSessionID BIGINT = NULL,
    @VectorSessionID BIGINT = NULL,
    @HumanDiseaseReportID BIGINT = NULL,
    @VeterinaryDiseaseReportID BIGINT = NULL,
    @AuditUserName NVARCHAR(200),
    @DataAuditEventID BIGINT = NULL,
    @RowAction CHAR
)
AS
DECLARE @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectID BIGINT = @TestID,
        @ObjectTableID BIGINT = 75740000000; -- tlbTesting
DECLARE @TestBeforeEdit TABLE
(
    TestID BIGINT,
    TestNameTypeID BIGINT,
    TestCategoryTypeID BIGINT,
    TestResultTypeID BIGINT,
    TestStatusTypeID BIGINT,
    DiseaseID BIGINT,
    SampleID BIGINT,
    BatchTestID BIGINT,
    ObservationID BIGINT,
    TestNumber INT,
    Note NVARCHAR(500),
    StartedDate DATETIME,
    ConcludedDate DATETIME,
    TestedByOfficeID BIGINT,
    TestedByPersonID BIGINT,
    ResultEnteredByOfficeID BIGINT,
    ResultEnteredByPersonID BIGINT,
    ValidatedByOfficeID BIGINT,
    ValidatedByPersonID BIGINT,
    ReadOnlyIndicator BIT,
    NonLaboratoryTestIndicator BIT,
    ExternalTestIndicator BIT,
    PerformedByOfficeID BIGINT,
    ReceivedDate DATETIME,
    ContactPerson NVARCHAR(200),
    RowStatus INT
);
DECLARE @TestAfterEdit TABLE
(
    TestID BIGINT,
    TestNameTypeID BIGINT,
    TestCategoryTypeID BIGINT,
    TestResultTypeID BIGINT,
    TestStatusTypeID BIGINT,
    DiseaseID BIGINT,
    SampleID BIGINT,
    BatchTestID BIGINT,
    ObservationID BIGINT,
    TestNumber INT,
    Note NVARCHAR(500),
    StartedDate DATETIME,
    ConcludedDate DATETIME,
    TestedByOfficeID BIGINT,
    TestedByPersonID BIGINT,
    ResultEnteredByOfficeID BIGINT,
    ResultEnteredByPersonID BIGINT,
    ValidatedByOfficeID BIGINT,
    ValidatedByPersonID BIGINT,
    ReadOnlyIndicator BIT,
    NonLaboratoryTestIndicator BIT,
    ExternalTestIndicator BIT,
    PerformedByOfficeID BIGINT,
    ReceivedDate DATETIME,
    ContactPerson NVARCHAR(200),
    RowStatus INT
);
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = UserInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        IF @RowAction = 'I'
           OR @RowAction = '1' -- Insert
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbTesting', @TestID OUTPUT;

            INSERT INTO dbo.tlbTesting
            (
                idfTesting,
                idfsTestName,
                idfsTestCategory,
                idfsTestResult,
                idfsTestStatus,
                idfsDiagnosis,
                idfMaterial,
                idfBatchTest,
                idfObservation,
                intTestNumber,
                strNote,
                intRowStatus,
                datStartedDate,
                datConcludedDate,
                idfTestedByOffice,
                idfTestedByPerson,
                idfResultEnteredByOffice,
                idfResultEnteredByPerson,
                idfValidatedByOffice,
                idfValidatedByPerson,
                blnReadOnly,
                blnNonLaboratoryTest,
                blnExternalTest,
                idfPerformedByOffice,
                datReceivedDate,
                strContactPerson,
                idfMonitoringSession,
                idfVector,
                idfHumanCase,
                idfVetCase,
                AuditCreateUser,
                SourceSystemNameID,
                SourceSystemKeyValue
            )
            VALUES
            (@TestID,
             @TestNameTypeID,
             @TestCategoryTypeID,
             @TestResultTypeID,
             @TestStatusTypeID,
             @DiseaseID,
             @SampleID,
             @BatchTestID,
             @ObservationID,
             @TestNumber,
             @Comments,
             @RowStatus,
             @StartedDate,
             @ResultDate,
             @TestedByOrganizationID,
             @TestedByPersonID,
             @ResultEnteredByOrganizationID,
             @ResultEnteredByPersonID,
             @ValidatedByOrganizationID,
             @ValidatedByPersonID,
             @ReadOnlyIndicator,
             @NonLaboratoryTestIndicator,
             @ExternalTestIndicator,
             @PerformedByOrganizationID,
             @ReceivedDate,
             @ContactPerson,
             @MonitoringSessionID,
             @VectorSessionID,
             @HumanDiseaseReportID,
             @VeterinaryDiseaseReportID,
             @AuditUserName,
             10519001,
             '[{"idfTesting":' + CAST(@TestID AS NVARCHAR(300)) + '}]'
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser
            )
            VALUES
            (
                @DataAuditEventID, 
                @ObjectTableID, 
                @TestID, 
                10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300))
                 + ',"idfObjectTable":' + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
                @AuditUserName
            );
            -- End data audit
        END
        ELSE
        BEGIN
            INSERT INTO @TestBeforeEdit
            (
                TestID,
                TestNameTypeID,
                TestCategoryTypeID,
                TestResultTypeID,
                TestStatusTypeID,
                DiseaseID,
                SampleID,
                BatchTestID,
                ObservationID,
                TestNumber,
                Note,
                StartedDate,
                ConcludedDate,
                TestedByOfficeID,
                TestedByPersonID,
                ResultEnteredByOfficeID,
                ResultEnteredByPersonID,
                ValidatedByOfficeID,
                ValidatedByPersonID,
                ReadOnlyIndicator,
                NonLaboratoryTestIndicator,
                ExternalTestIndicator,
                PerformedByOfficeID,
                ReceivedDate,
                ContactPerson,
                RowStatus
            )
            SELECT idfTesting,
                   idfsTestName,
                   idfsTestCategory,
                   idfsTestResult,
                   idfsTestStatus,
                   idfsDiagnosis,
                   idfMaterial,
                   idfBatchTest,
                   idfObservation,
                   intTestNumber,
                   strNote,
                   datStartedDate,
                   datConcludedDate,
                   idfTestedByOffice,
                   idfTestedByPerson,
                   idfResultEnteredByOffice,
                   idfResultEnteredByPerson,
                   idfValidatedByOffice,
                   idfValidatedByPerson,
                   blnReadOnly,
                   blnNonLaboratoryTest,
                   blnExternalTest,
                   idfPerformedByOffice,
                   datReceivedDate,
                   strContactPerson,
                   intRowStatus
            FROM dbo.tlbTesting
            WHERE idfTesting = @TestID;

            UPDATE dbo.tlbTesting
            SET idfsTestName = @TestNameTypeID,
                idfsTestCategory = @TestCategoryTypeID,
                idfsTestResult = @TestResultTypeID,
                idfsTestStatus = @TestStatusTypeID,
                idfsDiagnosis = @DiseaseID,
                idfMaterial = @SampleID,
                idfBatchTest = @BatchTestID,
                idfObservation = @ObservationID,
                intTestNumber = @TestNumber,
                strNote = @Comments,
                intRowStatus = @RowStatus,
                datStartedDate = @StartedDate,
                datConcludedDate = @ResultDate,
                idfTestedByOffice = @TestedByOrganizationID,
                idfTestedByPerson = @TestedByPersonID,
                idfResultEnteredByOffice = @ResultEnteredByOrganizationID,
                idfResultEnteredByPerson = @ResultEnteredByPersonID,
                idfValidatedByOffice = @ValidatedByOrganizationID,
                idfValidatedByPerson = @ValidatedByPersonID,
                blnReadOnly = @ReadOnlyIndicator,
                blnNonLaboratoryTest = @NonLaboratoryTestIndicator,
                blnExternalTest = @ExternalTestIndicator,
                idfPerformedByOffice = @PerformedByOrganizationID,
                datReceivedDate = @ReceivedDate,
                strContactPerson = @ContactPerson,
                idfMonitoringSession = @MonitoringSessionID,
                idfVector = @VectorSessionID,
                idfHumanCase = @HumanDiseaseReportID,
                idfVetCase = @VeterinaryDiseaseReportID,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfTesting = @TestID;

            INSERT INTO @TestAfterEdit
            (
                TestID,
                TestNameTypeID,
                TestCategoryTypeID,
                TestResultTypeID,
                TestStatusTypeID,
                DiseaseID,
                SampleID,
                BatchTestID,
                ObservationID,
                TestNumber,
                Note,
                StartedDate,
                ConcludedDate,
                TestedByOfficeID,
                TestedByPersonID,
                ResultEnteredByOfficeID,
                ResultEnteredByPersonID,
                ValidatedByOfficeID,
                ValidatedByPersonID,
                ReadOnlyIndicator,
                NonLaboratoryTestIndicator,
                ExternalTestIndicator,
                PerformedByOfficeID,
                ReceivedDate,
                ContactPerson,
                RowStatus
            )
            SELECT idfTesting,
                   idfsTestName,
                   idfsTestCategory,
                   idfsTestResult,
                   idfsTestStatus,
                   idfsDiagnosis,
                   idfMaterial,
                   idfBatchTest,
                   idfObservation,
                   intTestNumber,
                   strNote,
                   datStartedDate,
                   datConcludedDate,
                   idfTestedByOffice,
                   idfTestedByPerson,
                   idfResultEnteredByOffice,
                   idfResultEnteredByPerson,
                   idfValidatedByOffice,
                   idfValidatedByPerson,
                   blnReadOnly,
                   blnNonLaboratoryTest,
                   blnExternalTest,
                   idfPerformedByOffice,
                   datReceivedDate,
                   strContactPerson,
                   intRowStatus
            FROM dbo.tlbTesting
            WHERE idfTesting = @TestID;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   49545430000000,
                   a.TestID,
                   NULL,
                   b.TestNameTypeID,
                   a.TestNameTypeID,
                   @AuditUserName
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.TestNameTypeID <> b.TestNameTypeID)
                  OR (
                         a.TestNameTypeID IS NOT NULL
                         AND b.TestNameTypeID IS NULL
                     )
                  OR (
                         a.TestNameTypeID IS NULL
                         AND b.TestNameTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   49545440000000,
                   a.TestID,
                   NULL,
                   b.TestCategoryTypeID,
                   a.TestCategoryTypeID,
                   @AuditUserName
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.TestCategoryTypeID <> b.TestCategoryTypeID)
                  OR (
                         a.TestCategoryTypeID IS NOT NULL
                         AND b.TestCategoryTypeID IS NULL
                     )
                  OR (
                         a.TestCategoryTypeID IS NULL
                         AND b.TestCategoryTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80510000000,
                   a.TestID,
                   NULL,
                   b.TestResultTypeID,
                   a.TestResultTypeID,
                   @AuditUserName
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.TestResultTypeID <> b.TestResultTypeID)
                  OR (
                         a.TestResultTypeID IS NOT NULL
                         AND b.TestResultTypeID IS NULL
                     )
                  OR (
                         a.TestResultTypeID IS NULL
                         AND b.TestResultTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572510000000,
                   a.TestID,
                   NULL,
                   b.TestStatusTypeID,
                   a.TestStatusTypeID,
                   @AuditUserName
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.TestStatusTypeID <> b.TestStatusTypeID)
                  OR (
                         a.TestStatusTypeID IS NOT NULL
                         AND b.TestStatusTypeID IS NULL
                     )
                  OR (
                         a.TestStatusTypeID IS NULL
                         AND b.TestStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572520000000,
                   a.TestID,
                   NULL,
                   b.DiseaseID,
                   a.DiseaseID,
                   @AuditUserName
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.DiseaseID <> b.DiseaseID)
                  OR (
                         a.DiseaseID IS NOT NULL
                         AND b.DiseaseID IS NULL
                     )
                  OR (
                         a.DiseaseID IS NULL
                         AND b.DiseaseID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4576430000000,
                   a.TestID,
                   NULL,
                   b.SampleID,
                   a.SampleID,
                   @AuditUserName
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.SampleID <> b.SampleID)
                  OR (
                         a.SampleID IS NOT NULL
                         AND b.SampleID IS NULL
                     )
                  OR (
                         a.SampleID IS NULL
                         AND b.SampleID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80470000000,
                   a.TestID,
                   NULL,
                   b.BatchTestID,
                   a.BatchTestID,
                   @AuditUserName
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.BatchTestID <> b.BatchTestID)
                  OR (
                         a.BatchTestID IS NOT NULL
                         AND b.BatchTestID IS NULL
                     )
                  OR (
                         a.BatchTestID IS NULL
                         AND b.BatchTestID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80500000000,
                   a.TestID,
                   NULL,
                   b.ObservationID,
                   a.ObservationID,
                   @AuditUserName
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.ObservationID <> b.ObservationID)
                  OR (
                         a.ObservationID IS NOT NULL
                         AND b.ObservationID IS NULL
                     )
                  OR (
                         a.ObservationID IS NULL
                         AND b.ObservationID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80540000000,
                   a.TestID,
                   NULL,
                   b.TestNumber,
                   a.TestNumber,
                   @AuditUserName
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.TestNumber <> b.TestNumber)
                  OR (
                         a.TestNumber IS NOT NULL
                         AND b.TestNumber IS NULL
                     )
                  OR (
                         a.TestNumber IS NULL
                         AND b.TestNumber IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572540000000,
                   a.TestID,
                   NULL,
                   b.Note,
                   a.Note,
                   @AuditUserName
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.Note <> b.Note)
                  OR (
                         a.Note IS NOT NULL
                         AND b.Note IS NULL
                     )
                  OR (
                         a.Note IS NULL
                         AND b.Note IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4578540000000,
                   a.TestID,
                   NULL,
                   b.StartedDate,
                   a.StartedDate,
                   @AuditUserName
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.StartedDate <> b.StartedDate)
                  OR (
                         a.StartedDate IS NOT NULL
                         AND b.StartedDate IS NULL
                     )
                  OR (
                         a.StartedDate IS NULL
                         AND b.StartedDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4578550000000,
                   a.TestID,
                   NULL,
                   b.ConcludedDate,
                   a.ConcludedDate,
                   @AuditUserName
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.ConcludedDate <> b.ConcludedDate)
                  OR (
                         a.ConcludedDate IS NOT NULL
                         AND b.ConcludedDate IS NULL
                     )
                  OR (
                         a.ConcludedDate IS NULL
                         AND b.ConcludedDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4578560000000,
                   a.TestID,
                   NULL,
                   b.TestedByOfficeID,
                   a.TestedByOfficeID,
                   @AuditUserName
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.TestedByOfficeID <> b.TestedByOfficeID)
                  OR (
                         a.TestedByOfficeID IS NOT NULL
                         AND b.TestedByOfficeID IS NULL
                     )
                  OR (
                         a.TestedByOfficeID IS NULL
                         AND b.TestedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4578570000000,
                   a.TestID,
                   NULL,
                   b.TestedByPersonID,
                   a.TestedByPersonID,
                   @AuditUserName
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.TestedByPersonID <> b.TestedByPersonID)
                  OR (
                         a.TestedByPersonID IS NOT NULL
                         AND b.TestedByPersonID IS NULL
                     )
                  OR (
                         a.TestedByPersonID IS NULL
                         AND b.TestedByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4578580000000,
                   a.TestID,
                   NULL,
                   b.ResultEnteredByOfficeID,
                   a.ResultEnteredByOfficeID,
                   @AuditUserName
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.ResultEnteredByOfficeID <> b.ResultEnteredByOfficeID)
                  OR (
                         a.ResultEnteredByOfficeID IS NOT NULL
                         AND b.ResultEnteredByOfficeID IS NULL
                     )
                  OR (
                         a.ResultEnteredByOfficeID IS NULL
                         AND b.ResultEnteredByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4578590000000,
                   a.TestID,
                   NULL,
                   b.ResultEnteredByPersonID,
                   a.ResultEnteredByPersonID,
                   @AuditUserName
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.ResultEnteredByPersonID <> b.ResultEnteredByPersonID)
                  OR (
                         a.ResultEnteredByPersonID IS NOT NULL
                         AND b.ResultEnteredByPersonID IS NULL
                     )
                  OR (
                         a.ResultEnteredByPersonID IS NULL
                         AND b.ResultEnteredByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4578600000000,
                   a.TestID,
                   NULL,
                   b.ValidatedByOfficeID,
                   a.ValidatedByOfficeID,
                   @AuditUserName
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.ValidatedByOfficeID <> b.ValidatedByOfficeID)
                  OR (
                         a.ValidatedByOfficeID IS NOT NULL
                         AND b.ValidatedByOfficeID IS NULL
                     )
                  OR (
                         a.ValidatedByOfficeID IS NULL
                         AND b.ValidatedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4578610000000,
                   a.TestID,
                   NULL,
                   b.ValidatedByPersonID,
                   a.ValidatedByPersonID,
                   @AuditUserName
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.ValidatedByPersonID <> b.ValidatedByPersonID)
                  OR (
                         a.ValidatedByPersonID IS NOT NULL
                         AND b.ValidatedByPersonID IS NULL
                     )
                  OR (
                         a.ValidatedByPersonID IS NULL
                         AND b.ValidatedByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4578740000000,
                   a.TestID,
                   NULL,
                   b.ReadOnlyIndicator,
                   a.ReadOnlyIndicator,
                   @AuditUserName
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.ReadOnlyIndicator <> b.ReadOnlyIndicator)
                  OR (
                         a.ReadOnlyIndicator IS NOT NULL
                         AND b.ReadOnlyIndicator IS NULL
                     )
                  OR (
                         a.ReadOnlyIndicator IS NULL
                         AND b.ReadOnlyIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4578760000000,
                   a.TestID,
                   NULL,
                   b.NonLaboratoryTestIndicator,
                   a.NonLaboratoryTestIndicator,
                   @AuditUserName
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.NonLaboratoryTestIndicator <> b.NonLaboratoryTestIndicator)
                  OR (
                         a.NonLaboratoryTestIndicator IS NOT NULL
                         AND b.NonLaboratoryTestIndicator IS NULL
                     )
                  OR (
                         a.NonLaboratoryTestIndicator IS NULL
                         AND b.NonLaboratoryTestIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50815850000000,
                   a.TestID,
                   NULL,
                   b.ExternalTestIndicator,
                   a.ExternalTestIndicator,
                   @AuditUserName
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.ExternalTestIndicator <> b.ExternalTestIndicator)
                  OR (
                         a.ExternalTestIndicator IS NOT NULL
                         AND b.ExternalTestIndicator IS NULL
                     )
                  OR (
                         a.ExternalTestIndicator IS NULL
                         AND b.ExternalTestIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50815860000000,
                   a.TestID,
                   NULL,
                   b.PerformedByOfficeID,
                   a.PerformedByOfficeID,
                   @AuditUserName
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.PerformedByOfficeID <> b.PerformedByOfficeID)
                  OR (
                         a.PerformedByOfficeID IS NOT NULL
                         AND b.PerformedByOfficeID IS NULL
                     )
                  OR (
                         a.PerformedByOfficeID IS NULL
                         AND b.PerformedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50815870000000,
                   a.TestID,
                   NULL,
                   b.ReceivedDate,
                   a.ReceivedDate,
                   @AuditUserName
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.ReceivedDate <> b.ReceivedDate)
                  OR (
                         a.ReceivedDate IS NOT NULL
                         AND b.ReceivedDate IS NULL
                     )
                  OR (
                         a.ReceivedDate IS NULL
                         AND b.ReceivedDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50815880000000,
                   a.TestID,
                   NULL,
                   b.ContactPerson,
                   a.ContactPerson,
                   @AuditUserName
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            WHERE (a.ContactPerson <> b.ContactPerson)
                  OR (
                         a.ContactPerson IS NOT NULL
                         AND b.ContactPerson IS NULL
                     )
                  OR (
                         a.ContactPerson IS NULL
                         AND b.ContactPerson IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailRestore
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                idfObjectDetail, 
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   a.TestID,
                   NULL,
                   @AuditUserName
            FROM @TestAfterEdit AS a
                FULL JOIN @TestBeforeEdit AS b
                    ON a.TestID = b.TestID
            where a.RowStatus = 0
                  AND b.RowStatus = 1;
        END
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Procedure [dbo].[USSP_HUM_ANTIVIRAL_THERAPIES_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USSP_HUM_ANTIVIRAL_THERAPIES_SET
--
-- Description: Add or update human disease report anti-viral therapies
--          
-- Author: Harold Prior
--
-- Revision History:
-- Name                     Date       Change Detail
-- ------------------------ ---------- -----------------------------------------------------------
-- Stephen Long             11/21/2022 Initial release with data audit logic for SAUC30 and 31.
--
-- Testing code:
-- exec USSP_HUM_ANTIVIRAL_THERAPIES_SET NULL
-- ================================================================================================
CREATE PROCEDURE [dbo].[USSP_HUM_ANTIVIRAL_THERAPIES_SET]
    @HumanDiseaseReportID BIGINT = NULL,
    @AntiviralTherapiesParameters NVARCHAR(MAX) = NULL,
    @OutbreakCall INT = 0,
    @AuditUserName NVARCHAR(200) = '',
    @DataAuditEventID BIGINT = NULL
AS
DECLARE @AntimicrobialTherapyID BIGINT = NULL,
        @FirstAdministeredDate DATETIME2 = NULL,
        @AntimicrobialTherapyName NVARCHAR(200),
        @Dosage NVARCHAR(200),
        @RowAction NVARCHAR(1),
        @RowStatus INT = 0,
        @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
        @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectID BIGINT = NULL,
        @ObjectTableID BIGINT = 75470000000; -- tlbAntimicrobialTherapy
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(MAX)
);
DECLARE @AntiviralTherapiesTemp TABLE
(
    idfAntimicrobialTherapy BIGINT NULL,
    idfHumanCase BIGINT NULL,
    datFirstAdministeredDate DATETIME2 NULL,
    strAntimicrobialTherapyName NVARCHAR(200) NULL,
    strDosage NVARCHAR(200) NULL,
    RowAction NVARCHAR NULL
);
DECLARE @AntiviralTherapiesBeforeEdit TABLE
(
    AntimicrobialTherapyID BIGINT,
    HumanDiseaseReportID BIGINT,
    FirstAdministeredDate DATETIME2,
    AntimicrobialTherapyName NVARCHAR(200),
    Dosage NVARCHAR(200),
    RowStatus INT
);
DECLARE @AntiviralTherapiesAfterEdit TABLE
(
    AntimicrobialTherapyID BIGINT,
    HumanDiseaseReportID BIGINT,
    FirstAdministeredDate DATETIME2,
    AntimicrobialTherapyName NVARCHAR(200),
    Dosage NVARCHAR(200),
    RowStatus INT
);
BEGIN
    SET NOCOUNT ON;

    INSERT INTO @AntiviralTherapiesTemp
    SELECT *
    FROM
        OPENJSON(@AntiviralTherapiesParameters)
        WITH
        (
            idfAntimicrobialTherapy BIGINT,
            idfHumanCase BIGINT,
            datFirstAdministeredDate DATETIME2,
            strAntimicrobialTherapyName NVARCHAR(200),
            strDosage NVARCHAR(200),
            RowAction NVARCHAR(1)
        );

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        WHILE EXISTS (SELECT * FROM @AntiviralTherapiesTemp)
        BEGIN
            SELECT TOP 1
                @AntimicrobialTherapyID = idfAntimicrobialTherapy,
                @FirstAdministeredDate = datFirstAdministeredDate,
                @AntimicrobialTherapyName = strAntimicrobialTherapyName,
                @Dosage = strDosage,
                @RowAction = RowAction
            FROM @AntiviralTherapiesTemp

            IF NOT EXISTS
            (
                SELECT TOP 1
                    idfAntimicrobialTherapy
                FROM dbo.tlbAntimicrobialTherapy
                WHERE idfAntimicrobialTherapy = @AntimicrobialTherapyID
            )
            BEGIN
                IF @OutbreakCall = 1
                BEGIN
                    EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbAntimicrobialTherapy',
                                                   @AntimicrobialTherapyID OUTPUT;
                END
                ELSE
                BEGIN
                    INSERT INTO @SuppressSelect
                    EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbAntimicrobialTherapy',
                                                   @AntimicrobialTherapyID OUTPUT;
                END

                INSERT INTO dbo.tlbAntimicrobialTherapy
                (
                    idfAntimicrobialTherapy,
                    idfHumanCase,
                    datFirstAdministeredDate,
                    strAntimicrobialTherapyName,
                    strDosage,
                    intRowStatus,
                    AuditCreateUser,
                    AuditCreateDTM
                )
                VALUES
                (@AntimicrobialTherapyID,
                 @HumanDiseaseReportID,
                 @FirstAdministeredDate,
                 @AntimicrobialTherapyName,
                 @Dosage,
                 0  ,
                 @AuditUserName,
                 GETDATE()
                );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser
            )
            VALUES
            (
                @DataAuditEventID, 
                @ObjectTableID, 
                @AntimicrobialTherapyID, 
                10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300))
                 + ',"idfObjectTable":' + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
                @AuditUserName
            );
            -- End data audit
            END
            ELSE
            BEGIN
                IF @RowAction = 'D'
                BEGIN
                    SET @RowStatus = 1;
                END
                ELSE
                BEGIN
                    SET @RowStatus = 0;
                END

                INSERT INTO @AntiviralTherapiesBeforeEdit
                (
                    AntimicrobialTherapyID,
                    HumanDiseaseReportID,
                    FirstAdministeredDate,
                    AntimicrobialTherapyName,
                    Dosage,
                    RowStatus
                )
                SELECT idfAntimicrobialTherapy,
                       idfHumanCase,
                       datFirstAdministeredDate,
                       strAntimicrobialTherapyName,
                       strDosage,
                       intRowStatus
                FROM dbo.tlbAntimicrobialTherapy
                WHERE idfAntimicrobialTherapy = @AntimicrobialTherapyID;

                UPDATE dbo.tlbAntimicrobialTherapy
                SET idfHumanCase = @HumanDiseaseReportID,
                    datFirstAdministeredDate = @FirstAdministeredDate,
                    strAntimicrobialTherapyName = @AntimicrobialTherapyName,
                    strDosage = @Dosage,
                    intRowStatus = @RowStatus,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE idfAntimicrobialTherapy = @AntimicrobialTherapyID
                      AND intRowStatus = 0;

                INSERT INTO @AntiviralTherapiesAfterEdit
                (
                    AntimicrobialTherapyID,
                    HumanDiseaseReportID,
                    FirstAdministeredDate,
                    AntimicrobialTherapyName,
                    Dosage,
                    RowStatus
                )
                SELECT idfAntimicrobialTherapy,
                       idfHumanCase,
                       datFirstAdministeredDate,
                       strAntimicrobialTherapyName,
                       strDosage,
                       intRowStatus
                FROM dbo.tlbAntimicrobialTherapy
                WHERE idfAntimicrobialTherapy = @AntimicrobialTherapyID;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4577800000000,
                       a.AntimicrobialTherapyID,
                       NULL,
                       b.HumanDiseaseReportID,
                       a.HumanDiseaseReportID,
                       @AuditUserName
                FROM @AntiviralTherapiesAfterEdit AS a
                    FULL JOIN @AntiviralTherapiesBeforeEdit AS b
                        ON a.AntimicrobialTherapyID = b.AntimicrobialTherapyID
                WHERE (a.HumanDiseaseReportID <> b.HumanDiseaseReportID)
                      OR (
                             a.HumanDiseaseReportID IS NOT NULL
                             AND b.HumanDiseaseReportID IS NULL
                         )
                      OR (
                             a.HumanDiseaseReportID IS NULL
                             AND b.HumanDiseaseReportID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       78350000000,
                       a.AntimicrobialTherapyID,
                       NULL,
                       b.FirstAdministeredDate,
                       a.FirstAdministeredDate,
                       @AuditUserName
                FROM @AntiviralTherapiesAfterEdit AS a
                    FULL JOIN @AntiviralTherapiesBeforeEdit AS b
                        ON a.AntimicrobialTherapyID = b.AntimicrobialTherapyID
                WHERE (a.FirstAdministeredDate <> b.FirstAdministeredDate)
                      OR (
                             a.FirstAdministeredDate IS NOT NULL
                             AND b.FirstAdministeredDate IS NULL
                         )
                      OR (
                             a.FirstAdministeredDate IS NULL
                             AND b.FirstAdministeredDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       78360000000,
                       a.AntimicrobialTherapyID,
                       NULL,
                       b.AntimicrobialTherapyName,
                       a.AntimicrobialTherapyName,
                       @AuditUserName
                FROM @AntiviralTherapiesAfterEdit AS a
                    FULL JOIN @AntiviralTherapiesBeforeEdit AS b
                        ON a.AntimicrobialTherapyID = b.AntimicrobialTherapyID
                WHERE (a.AntimicrobialTherapyName <> b.AntimicrobialTherapyName)
                      OR (
                             a.AntimicrobialTherapyName IS NOT NULL
                             AND b.AntimicrobialTherapyName IS NULL
                         )
                      OR (
                             a.AntimicrobialTherapyName IS NULL
                             AND b.AntimicrobialTherapyName IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4577810000000,
                       a.AntimicrobialTherapyID,
                       NULL,
                       b.Dosage,
                       a.Dosage,
                       @AuditUserName
                FROM @AntiviralTherapiesAfterEdit AS a
                    FULL JOIN @AntiviralTherapiesBeforeEdit AS b
                        ON a.AntimicrobialTherapyID = b.AntimicrobialTherapyID
                WHERE (a.Dosage <> b.Dosage)
                      OR (
                             a.Dosage IS NOT NULL
                             AND b.Dosage IS NULL
                         )
                      OR (
                             a.Dosage IS NULL
                             AND b.Dosage IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailRestore
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    idfObjectDetail, 
                    AuditCreateUser
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       a.AntimicrobialTherapyID,
                       NULL,
                       @AuditUserName
                FROM @AntiviralTherapiesAfterEdit AS a
                    FULL JOIN @AntiviralTherapiesBeforeEdit AS b
                        ON a.AntimicrobialTherapyID = b.AntimicrobialTherapyID
                WHERE a.RowStatus = 0
                      AND b.RowStatus = 1;
            END

            SET ROWCOUNT 1;
            DELETE FROM @AntiviralTherapiesTemp;
            SET ROWCOUNT 0;
        END

    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating Procedure [dbo].[USSP_HUM_COPY_HUMAN_SET]...';


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER OFF;


GO
-- ================================================================================================
-- Name: USSP_HUM_COPY_HUMAN_SET
--
-- Description:	Copies information from tlbHumanActual into tlbHuman if @HumanActualID is null or 
-- record with @HumanID doesn't exist in tlbHuman, then new record is created in tlbHuman.
--
-- Author: Mandar Kulkarni
--
-- Revision History:
-- Name                Date       Change Detail
-- ------------------- ---------- ----------------------------------------------------------------
-- Stephen Long        11/18/2022 Initial release with data audit logic for SAUC30 and 31.
--
--BEGIN tran
--EXEC USSP_HUM_COPY_HUMAN_SET @HumanActualID, @HumanID OUT
-- ================================================================================================
CREATE PROCEDURE [dbo].[USSP_HUM_COPY_HUMAN_SET]
(
    @HumanActualID BIGINT = NULL,
    @DataAuditEventID BIGINT = NULL,
    @AuditUserName NVARCHAR(200) = NULL, 
    @HumanID BIGINT = NULL OUTPUT,
    @ReturnCode INT = 0 OUTPUT,
    @ReturnMessage NVARCHAR(MAX) = 'SUCCESS' OUTPUT
)
AS
DECLARE @CurrentResidenceAddressID BIGINT,
        @EmployerAddressID BIGINT,
        @RegistrationAddressID BIGINT,
        @SchoolAddressID BIGINT,
        @RootCurrentResidenceAddressID BIGINT,
        @RootEmployerAddressID BIGINT,
        @RootRegistrationAddressID BIGINT,
        @RootSchoolAddressID BIGINT,
        @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectID BIGINT = @HumanID,
        @ObjectTableID BIGINT = 75600000000; -- tlbHuman

DECLARE @HumanBeforeEdit TABLE
(
    HumanID BIGINT,
    HumanActualID BIGINT,
    OccupationTypeID BIGINT,
    NationalityTypeID BIGINT,
    GenderTypeID BIGINT,
    CurrentResidenceAddressID BIGINT,
    EmployerAddressID BIGINT,
    RegistrationAddressID BIGINT,
    DateOfBirth DATETIME,
    DateOfDeath DATETIME,
    LastName NVARCHAR(200),
    SecondName NVARCHAR(200),
    FirstName NVARCHAR(200),
    RegistrationPhone NVARCHAR(200),
    EmployerName NVARCHAR(200),
    HomePhone NVARCHAR(200),
    WorkPhone NVARCHAR(200),
    PersonIDType BIGINT,
    PersonID NVARCHAR(100),
    PermanentAddressAsCurrentIndicator BIT,
    EnteredDate DATETIME,
    ModificationDate DATETIME
);
DECLARE @HumanAfterEdit TABLE
(
    HumanID BIGINT,
    HumanActualID BIGINT,
    OccupationTypeID BIGINT,
    NationalityTypeID BIGINT,
    GenderTypeID BIGINT,
    CurrentResidenceAddressID BIGINT,
    EmployerAddressID BIGINT,
    RegistrationAddressID BIGINT,
    DateOfBirth DATETIME,
    DateOfDeath DATETIME,
    LastName NVARCHAR(200),
    SecondName NVARCHAR(200),
    FirstName NVARCHAR(200),
    RegistrationPhone NVARCHAR(200),
    EmployerName NVARCHAR(200),
    HomePhone NVARCHAR(200),
    WorkPhone NVARCHAR(200),
    PersonIDType BIGINT,
    PersonID NVARCHAR(100),
    PermanentAddressAsCurrentIndicator BIT,
    EnteredDate DATETIME,
    ModificationDate DATETIME
);
BEGIN
    BEGIN TRY
        SELECT @CurrentResidenceAddressID = idfCurrentResidenceAddress,
               @EmployerAddressID = idfEmployerAddress,
               @RegistrationAddressID = idfRegistrationAddress
        FROM dbo.tlbHumanActual
        WHERE idfHumanActual = @HumanActualID;

        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = UserInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;

        IF @HumanID IS NULL
        BEGIN
            EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbHuman', @HumanID OUTPUT;
            SET @DataAuditEventTypeID = 10016001; -- Data audit create event type
        END
        ELSE
        BEGIN
            SET @DataAuditEventTypeID = 10016003; -- Data audit edit event type
        END

        -- Get ID for root idfCurrentResidenceAddress
        SET @RootCurrentResidenceAddressID = NULL;
        SELECT @RootCurrentResidenceAddressID = dbo.tlbHuman.idfCurrentResidenceAddress
        FROM dbo.tlbHuman
        WHERE dbo.tlbHuman.idfHuman = @HumanID;

        IF @RootCurrentResidenceAddressID IS NULL
           AND NOT @CurrentResidenceAddressID IS NULL
        BEGIN
            EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbGeoLocation',
                                           @RootCurrentResidenceAddressID OUTPUT;

            -- Copy address for root human
            EXEC dbo.USSP_GBL_COPY_GEOLOCATION_SET @CurrentResidenceAddressID,
                                                   @RootCurrentResidenceAddressID,
                                                   0,
                                                   @DataAuditEventID,
                                                   @AuditUserName,
                                                   @ReturnCode,
                                                   @ReturnMessage;

            IF @ReturnCode <> 0
            BEGIN
                SET @ReturnMessage = 'Failed to copy current residence address';
                SELECT @ReturnCode,
                       @ReturnMessage;
                RETURN;
            END
        END

        -- Get ID for root idfEmployerAddress
        SET @RootEmployerAddressID = NULL;
        SELECT @RootEmployerAddressID = dbo.tlbHuman.idfEmployerAddress
        FROM dbo.tlbHuman
        WHERE dbo.tlbHuman.idfHuman = @HumanID;

        IF @RootEmployerAddressID IS NULL
           AND NOT @EmployerAddressID IS NULL
        BEGIN
            EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbGeoLocation',
                                           @RootEmployerAddressID OUTPUT;

            -- Copy address for employer
            EXEC dbo.USSP_GBL_COPY_GEOLOCATION_SET @EmployerAddressID,
                                                   @RootEmployerAddressID,
                                                   0,
                                                   @DataAuditEventID,
                                                   @AuditUserName,
                                                   @ReturnCode,
                                                   @ReturnMessage;

            IF @ReturnCode <> 0
            BEGIN
                SET @ReturnMessage = 'Failed to copy employer address';
                SELECT @ReturnCode,
                       @ReturnMessage;
                RETURN;
            END
        END

        -- Get ID for root idfRegistrationAddress
        SET @RootRegistrationAddressID = NULL;
        SELECT @RootRegistrationAddressID = dbo.tlbHuman.idfRegistrationAddress
        FROM dbo.tlbHuman
        WHERE dbo.tlbHuman.idfHumanActual = @HumanID;

        IF @RootRegistrationAddressID IS NULL
           AND NOT @RegistrationAddressID IS NULL
        BEGIN
            EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbGeoLocation',
                                           @RootRegistrationAddressID OUTPUT;

            -- Copy registration address
            EXEC dbo.USSP_GBL_COPY_GEOLOCATION_SET @RegistrationAddressID,
                                                   @RootRegistrationAddressID,
                                                   0,
                                                   @DataAuditEventID,
                                                   @AuditUserName, 
                                                   @ReturnCode,
                                                   @ReturnMessage;

            IF @ReturnCode <> 0
            BEGIN
                SET @ReturnMessage = 'Failed to copy registration address';
                SELECT @ReturnCode,
                       @ReturnMessage;
                RETURN;
            END
        END


        IF EXISTS (SELECT * FROM dbo.tlbHuman WHERE idfHuman = @HumanID)
        BEGIN
            INSERT INTO @HumanBeforeEdit
            (
                HumanID,
                HumanActualID,
                OccupationTypeID,
                NationalityTypeID,
                GenderTypeID,
                CurrentResidenceAddressID,
                EmployerAddressID,
                RegistrationAddressID,
                DateOfBirth,
                DateOfDeath,
                LastName,
                SecondName,
                FirstName,
                RegistrationPhone,
                EmployerName,
                HomePhone,
                WorkPhone,
                PersonIDType,
                PersonID,
                PermanentAddressAsCurrentIndicator,
                EnteredDate,
                ModificationDate
            )
            SELECT idfHuman,
                   idfHumanActual,
                   idfsOccupationType,
                   idfsNationality,
                   idfsHumanGender,
                   idfCurrentResidenceAddress,
                   idfEmployerAddress,
                   idfRegistrationAddress,
                   datDateofBirth,
                   datDateOfDeath,
                   strLastName,
                   strSecondName,
                   strFirstName,
                   strRegistrationPhone,
                   strEmployerName,
                   strHomePhone,
                   strWorkPhone,
                   idfsPersonIDType,
                   strPersonID,
                   blnPermantentAddressAsCurrent,
                   datEnteredDate,
                   datModificationDate
            FROM dbo.tlbHuman
            WHERE idfHuman = @HumanID;

            UPDATE dbo.tlbHuman
            SET idfHumanActual = @HumanActualID,
                idfsOccupationType = ha.idfsOccupationType,
                idfsNationality = ha.idfsNationality,
                idfsHumanGender = ha.idfsHumanGender,
                idfCurrentResidenceAddress = @RootCurrentResidenceAddressID,
                idfEmployerAddress = @RootEmployerAddressID,
                idfRegistrationAddress = @RootRegistrationAddressID,
                datDateofBirth = ha.datDateofBirth,
                datDateOfDeath = ha.datDateOfDeath,
                strLastName = ha.strLastName,
                strSecondName = ha.strSecondName,
                strFirstName = ha.strFirstName,
                strRegistrationPhone = ha.strRegistrationPhone,
                strEmployerName = ha.strEmployerName,
                strHomePhone = ha.strHomePhone,
                strWorkPhone = ha.strWorkPhone,
                idfsPersonIDType = ha.idfsPersonIDType,
                strPersonID = ha.strPersonID,
                datModIFicationDate = ha.datModIFicationDate, 
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            FROM dbo.tlbHuman h
                INNER JOIN dbo.tlbHumanActual ha
                    ON ha.idfHumanActual = ha.idfHumanActual
            WHERE h.idfHuman = @HumanID;

            INSERT INTO @HumanAfterEdit
            (
                HumanID,
                HumanActualID,
                OccupationTypeID,
                NationalityTypeID,
                GenderTypeID,
                CurrentResidenceAddressID,
                EmployerAddressID,
                RegistrationAddressID,
                DateOfBirth,
                DateOfDeath,
                LastName,
                SecondName,
                FirstName,
                RegistrationPhone,
                EmployerName,
                HomePhone,
                WorkPhone,
                PersonIDType,
                PersonID,
                PermanentAddressAsCurrentIndicator,
                EnteredDate,
                ModificationDate
            )
            SELECT idfHuman,
                   idfHumanActual,
                   idfsOccupationType,
                   idfsNationality,
                   idfsHumanGender,
                   idfCurrentResidenceAddress,
                   idfEmployerAddress,
                   idfRegistrationAddress,
                   datDateofBirth,
                   datDateOfDeath,
                   strLastName,
                   strSecondName,
                   strFirstName,
                   strRegistrationPhone,
                   strEmployerName,
                   strHomePhone,
                   strWorkPhone,
                   idfsPersonIDType,
                   strPersonID,
                   blnPermantentAddressAsCurrent,
                   datEnteredDate,
                   datModificationDate
            FROM dbo.tlbHuman
            WHERE idfHuman = @HumanID;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateDTM,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4572310000000,
                   a.HumanID,
                   NULL,
                   b.HumanActualID,
                   a.HumanActualID,
                   GETDATE(),
                   @AuditUserName
            FROM @HumanAfterEdit AS a
                FULL JOIN @HumanBeforeEdit AS b
                    ON a.HumanID = b.HumanID
            WHERE (a.HumanActualID <> b.HumanActualID)
                  OR (
                         a.HumanActualID IS NOT NULL
                         AND b.HumanActualID IS NULL
                     )
                  OR (
                         a.HumanActualID IS NULL
                         AND b.HumanActualID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateDTM,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79410000000,
                   a.HumanID,
                   NULL,
                   b.OccupationTypeID,
                   a.OccupationTypeID,
                   GETDATE(),
                   @AuditUserName
            FROM @HumanAfterEdit AS a
                FULL JOIN @HumanBeforeEdit AS b
                    ON a.HumanID = b.HumanID
            WHERE (a.OccupationTypeID <> b.OccupationTypeID)
                  OR (
                         a.OccupationTypeID IS NOT NULL
                         AND b.OccupationTypeID IS NULL
                     )
                  OR (
                         a.OccupationTypeID IS NULL
                         AND b.OccupationTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateDTM,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79400000000,
                   a.HumanID,
                   NULL,
                   b.NationalityTypeID,
                   a.NationalityTypeID,
                   GETDATE(),
                   @AuditUserName
            FROM @HumanAfterEdit AS a
                FULL JOIN @HumanBeforeEdit AS b
                    ON a.HumanID = b.HumanID
            WHERE (a.NationalityTypeID <> b.NationalityTypeID)
                  OR (
                         a.NationalityTypeID IS NOT NULL
                         AND b.NationalityTypeID IS NULL
                     )
                  OR (
                         a.NationalityTypeID IS NULL
                         AND b.NationalityTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateDTM,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79390000000,
                   a.HumanID,
                   NULL,
                   b.GenderTypeID,
                   a.GenderTypeID,
                   GETDATE(),
                   @AuditUserName
            FROM @HumanAfterEdit AS a
                FULL JOIN @HumanBeforeEdit AS b
                    ON a.HumanID = b.HumanID
            WHERE (a.GenderTypeID <> b.GenderTypeID)
                  OR (
                         a.GenderTypeID IS NOT NULL
                         AND b.GenderTypeID IS NULL
                     )
                  OR (
                         a.GenderTypeID IS NULL
                         AND b.GenderTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateDTM,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79350000000,
                   a.HumanID,
                   NULL,
                   b.CurrentResidenceAddressID,
                   a.CurrentResidenceAddressID,
                   GETDATE(),
                   @AuditUserName
            FROM @HumanAfterEdit AS a
                FULL JOIN @HumanBeforeEdit AS b
                    ON a.HumanID = b.HumanID
            WHERE (a.CurrentResidenceAddressID <> b.CurrentResidenceAddressID)
                  OR (
                         a.CurrentResidenceAddressID IS NOT NULL
                         AND b.CurrentResidenceAddressID IS NULL
                     )
                  OR (
                         a.CurrentResidenceAddressID IS NULL
                         AND b.CurrentResidenceAddressID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateDTM,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79360000000,
                   a.HumanID,
                   NULL,
                   b.EmployerAddressID,
                   a.EmployerAddressID,
                   GETDATE(),
                   @AuditUserName
            FROM @HumanAfterEdit AS a
                FULL JOIN @HumanBeforeEdit AS b
                    ON a.HumanID = b.HumanID
            WHERE (a.EmployerAddressID <> b.EmployerAddressID)
                  OR (
                         a.EmployerAddressID IS NOT NULL
                         AND b.EmployerAddressID IS NULL
                     )
                  OR (
                         a.EmployerAddressID IS NULL
                         AND b.EmployerAddressID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateDTM,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79380000000,
                   a.HumanID,
                   NULL,
                   b.RegistrationAddressID,
                   a.RegistrationAddressID,
                   GETDATE(),
                   @AuditUserName
            FROM @HumanAfterEdit AS a
                FULL JOIN @HumanBeforeEdit AS b
                    ON a.HumanID = b.HumanID
            WHERE (a.RegistrationAddressID <> b.RegistrationAddressID)
                  OR (
                         a.RegistrationAddressID IS NOT NULL
                         AND b.RegistrationAddressID IS NULL
                     )
                  OR (
                         a.RegistrationAddressID IS NULL
                         AND b.RegistrationAddressID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateDTM,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79330000000,
                   a.HumanID,
                   NULL,
                   b.DateOfBirth,
                   a.DateOfBirth,
                   GETDATE(),
                   @AuditUserName
            FROM @HumanAfterEdit AS a
                FULL JOIN @HumanBeforeEdit AS b
                    ON a.HumanID = b.HumanID
            WHERE (a.DateOfBirth <> b.DateOfBirth)
                  OR (
                         a.DateOfBirth IS NOT NULL
                         AND b.DateOfBirth IS NULL
                     )
                  OR (
                         a.DateOfBirth IS NULL
                         AND b.DateOfBirth IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateDTM,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79340000000,
                   a.HumanID,
                   NULL,
                   b.DateOfDeath,
                   a.DateOfDeath,
                   GETDATE(),
                   @AuditUserName
            FROM @HumanAfterEdit AS a
                FULL JOIN @HumanBeforeEdit AS b
                    ON a.HumanID = b.HumanID
            WHERE (a.DateOfDeath <> b.DateOfDeath)
                  OR (
                         a.DateOfDeath IS NOT NULL
                         AND b.DateOfDeath IS NULL
                     )
                  OR (
                         a.DateOfDeath IS NULL
                         AND b.DateOfDeath IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateDTM,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79450000000,
                   a.HumanID,
                   NULL,
                   b.LastName,
                   a.LastName,
                   GETDATE(),
                   @AuditUserName
            FROM @HumanAfterEdit AS a
                FULL JOIN @HumanBeforeEdit AS b
                    ON a.HumanID = b.HumanID
            WHERE (a.LastName <> b.LastName)
                  OR (
                         a.LastName IS NOT NULL
                         AND b.LastName IS NULL
                     )
                  OR (
                         a.LastName IS NULL
                         AND b.LastName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateDTM,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79470000000,
                   a.HumanID,
                   NULL,
                   b.SecondName,
                   a.SecondName,
                   GETDATE(),
                   @AuditUserName
            FROM @HumanAfterEdit AS a
                FULL JOIN @HumanBeforeEdit AS b
                    ON a.HumanID = b.HumanID
            WHERE (a.SecondName <> b.SecondName)
                  OR (
                         a.SecondName IS NOT NULL
                         AND b.SecondName IS NULL
                     )
                  OR (
                         a.SecondName IS NULL
                         AND b.SecondName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateDTM,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79430000000,
                   a.HumanID,
                   NULL,
                   b.FirstName,
                   a.FirstName,
                   GETDATE(),
                   @AuditUserName
            FROM @HumanAfterEdit AS a
                FULL JOIN @HumanBeforeEdit AS b
                    ON a.HumanID = b.HumanID
            WHERE (a.FirstName <> b.FirstName)
                  OR (
                         a.FirstName IS NOT NULL
                         AND b.FirstName IS NULL
                     )
                  OR (
                         a.FirstName IS NULL
                         AND b.FirstName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateDTM,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79460000000,
                   a.HumanID,
                   NULL,
                   b.RegistrationPhone,
                   a.RegistrationPhone,
                   GETDATE(),
                   @AuditUserName
            FROM @HumanAfterEdit AS a
                FULL JOIN @HumanBeforeEdit AS b
                    ON a.HumanID = b.HumanID
            WHERE (a.RegistrationPhone <> b.RegistrationPhone)
                  OR (
                         a.RegistrationPhone IS NOT NULL
                         AND b.RegistrationPhone IS NULL
                     )
                  OR (
                         a.RegistrationPhone IS NULL
                         AND b.RegistrationPhone IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateDTM,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79420000000,
                   a.HumanID,
                   NULL,
                   b.EmployerName,
                   a.EmployerName,
                   GETDATE(),
                   @AuditUserName
            FROM @HumanAfterEdit AS a
                FULL JOIN @HumanBeforeEdit AS b
                    ON a.HumanID = b.HumanID
            WHERE (a.EmployerName <> b.EmployerName)
                  OR (
                         a.EmployerName IS NOT NULL
                         AND b.EmployerName IS NULL
                     )
                  OR (
                         a.EmployerName IS NULL
                         AND b.EmployerName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateDTM,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79440000000,
                   a.HumanID,
                   NULL,
                   b.HomePhone,
                   a.HomePhone,
                   GETDATE(),
                   @AuditUserName
            FROM @HumanAfterEdit AS a
                FULL JOIN @HumanBeforeEdit AS b
                    ON a.HumanID = b.HumanID
            WHERE (a.HomePhone <> b.HomePhone)
                  OR (
                         a.HomePhone IS NOT NULL
                         AND b.HomePhone IS NULL
                     )
                  OR (
                         a.HomePhone IS NULL
                         AND b.HomePhone IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateDTM,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   79480000000,
                   a.HumanID,
                   NULL,
                   b.WorkPhone,
                   a.WorkPhone,
                   GETDATE(),
                   @AuditUserName
            FROM @HumanAfterEdit AS a
                FULL JOIN @HumanBeforeEdit AS b
                    ON a.HumanID = b.HumanID
            WHERE (a.WorkPhone <> b.WorkPhone)
                  OR (
                         a.WorkPhone IS NOT NULL
                         AND b.WorkPhone IS NULL
                     )
                  OR (
                         a.WorkPhone IS NULL
                         AND b.WorkPhone IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateDTM,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12014460000000,
                   a.HumanID,
                   NULL,
                   b.PersonIDType,
                   a.PersonIDType,
                   GETDATE(),
                   @AuditUserName
            FROM @HumanAfterEdit AS a
                FULL JOIN @HumanBeforeEdit AS b
                    ON a.HumanID = b.HumanID
            WHERE (a.PersonIDType <> b.PersonIDType)
                  OR (
                         a.PersonIDType IS NOT NULL
                         AND b.PersonIDType IS NULL
                     )
                  OR (
                         a.PersonIDType IS NULL
                         AND b.PersonIDType IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateDTM,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12014470000000,
                   a.HumanID,
                   NULL,
                   b.PersonID,
                   a.PersonID,
                   GETDATE(),
                   @AuditUserName
            FROM @HumanAfterEdit AS a
                FULL JOIN @HumanBeforeEdit AS b
                    ON a.HumanID = b.HumanID
            WHERE (a.PersonID <> b.PersonID)
                  OR (
                         a.PersonID IS NOT NULL
                         AND b.PersonID IS NULL
                     )
                  OR (
                         a.PersonID IS NULL
                         AND b.PersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateDTM,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12675400000000,
                   a.HumanID,
                   NULL,
                   b.PermanentAddressAsCurrentIndicator,
                   a.PermanentAddressAsCurrentIndicator,
                   GETDATE(),
                   @AuditUserName
            FROM @HumanAfterEdit AS a
                FULL JOIN @HumanBeforeEdit AS b
                    ON a.HumanID = b.HumanID
            WHERE (a.PermanentAddressAsCurrentIndicator <> b.PermanentAddressAsCurrentIndicator)
                  OR (
                         a.PermanentAddressAsCurrentIndicator IS NOT NULL
                         AND b.PermanentAddressAsCurrentIndicator IS NULL
                     )
                  OR (
                         a.PermanentAddressAsCurrentIndicator IS NULL
                         AND b.PermanentAddressAsCurrentIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateDTM,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   51389530000000,
                   a.HumanID,
                   NULL,
                   b.EnteredDate,
                   a.EnteredDate,
                   GETDATE(),
                   @AuditUserName
            FROM @HumanAfterEdit AS a
                FULL JOIN @HumanBeforeEdit AS b
                    ON a.HumanID = b.HumanID
            WHERE (a.EnteredDate <> b.EnteredDate)
                  OR (
                         a.EnteredDate IS NOT NULL
                         AND b.EnteredDate IS NULL
                     )
                  OR (
                         a.EnteredDate IS NULL
                         AND b.EnteredDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateDTM,
                AuditCreateUser
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   51389540000000,
                   a.HumanID,
                   NULL,
                   b.ModificationDate,
                   a.ModificationDate,
                   GETDATE(),
                   @AuditUserName
            FROM @HumanAfterEdit AS a
                FULL JOIN @HumanBeforeEdit AS b
                    ON a.HumanID = b.HumanID
            WHERE (a.ModificationDate <> b.ModificationDate)
                  OR (
                         a.ModificationDate IS NOT NULL
                         AND b.ModificationDate IS NULL
                     )
                  OR (
                         a.ModificationDate IS NULL
                         AND b.ModificationDate IS NOT NULL
                     );
        END
        ELSE
        BEGIN
            INSERT INTO dbo.tlbHuman
            (
                idfHuman,
                idfHumanActual,
                idfsOccupationType,
                idfsNationality,
                idfsHumanGender,
                idfCurrentResidenceAddress,
                idfEmployerAddress,
                idfRegistrationAddress,
                datDateofBirth,
                datDateOfDeath,
                strLastName,
                strSecondName,
                strFirstName,
                strRegistrationPhone,
                strEmployerName,
                strHomePhone,
                strWorkPhone,
                idfsPersonIDType,
                strPersonID,
                datEnteredDate,
                datModIFicationDate,
                intRowStatus,
                AuditCreateDTM,
                AuditCreateUser
            )
            SELECT @HumanID,
                   @HumanActualID,
                   idfsOccupationType,
                   idfsNationality,
                   idfsHumanGender,
                   @RootCurrentResidenceAddressID,
                   @RootEmployerAddressID,
                   @RootRegistrationAddressID,
                   datDateofBirth,
                   datDateOfDeath,
                   strLastName,
                   strSecondName,
                   strFirstName,
                   strRegistrationPhone,
                   strEmployerName,
                   strHomePhone,
                   strWorkPhone,
                   idfsPersonIDType,
                   strPersonID,
                   datEnteredDate,
                   datModIFicationDate,
                   0,
                   GETDATE(),
                   @AuditUserName
            FROM dbo.tlbHumanActual
            WHERE idfHumanActual = @HumanActualID;

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser
            )
            VALUES
            (
                @DataAuditEventID, 
                @ObjectTableID, 
                @HumanID, 
                10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300))
                 + ',"idfObjectTable":' + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
                @AuditUserName
            );
            -- End data audit
        END

        -- Insert/Update Additional Info

        -- Get id for root idfSchoolAddress
        SET @RootSchoolAddressID = NULL;
        SELECT @RootSchoolAddressID = dbo.HumanAddlInfo.SchoolAddressID
        FROM dbo.HumanAddlInfo
        WHERE dbo.HumanAddlInfo.HumanAdditionalInfo = @HumanID;

        IF @RootSchoolAddressID IS NULL
           AND NOT @SchoolAddressID IS NULL
        BEGIN
            EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbGeoLocation',
                                           @RootSchoolAddressID OUTPUT

            -- Copy addresses for root human
            EXEC dbo.USSP_GBL_COPY_GEOLOCATION_SET @SchoolAddressID,
                                                   @RootSchoolAddressID,
                                                   0,
                                                   @DataAuditEventID,
                                                   @AuditUserName,
                                                   @ReturnCode,
                                                   @ReturnMessage;

            IF @ReturnCode <> 0
            BEGIN
                SET @ReturnMessage = 'Failed to copy school address';
                SELECT @ReturnCode 'ReturnCode',
                       @ReturnMessage 'ReturnMessage';
                RETURN;
            END
        END

        IF EXISTS
        (
            SELECT *
            FROM dbo.HumanAddlInfo
            WHERE HumanAdditionalInfo = @HumanID
        )
        BEGIN
            UPDATE dbo.HumanAddlInfo
            SET ReportedAge = haai.ReportedAge,
                ReportedAgeUOMID = haai.ReportedAgeUOMID,
                ReportedAgeDTM = haai.ReportedAgeDTM,
                PassportNbr = haai.PassportNbr,
                IsEmployedID = haai.IsEmployedID,
                EmployerPhoneNbr = haai.EmployerPhoneNbr,
                EmployedDTM = haai.EmployedDTM,
                IsStudentID = haai.IsStudentID,
                SchoolPhoneNbr = haai.SchoolPhoneNbr,
                SchoolAddressID = haai.SchoolAddressID,
                SchoolLastAttendDTM = haai.SchoolLastAttendDTM,
                ContactPhoneCountryCode = haai.ContactPhoneCountryCode,
                ContactPhoneNbr = haai.ContactPhoneNbr,
                ContactPhoneNbrTypeID = haai.ContactPhoneNbrTypeID,
                ContactPhone2CountryCode = haai.ContactPhone2CountryCode,
                ContactPhone2Nbr = haai.ContactPhone2Nbr,
                ContactPhone2NbrTypeID = haai.ContactPhone2NbrTypeID,
                AltAddressID = haai.AltAddressID,
                SchoolName = haai.SchoolName,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            FROM dbo.HumanAddlInfo hai
                INNER JOIN dbo.humanActualAddlInfo haai
                    ON hai.HumanAdditionalInfo = haai.HumanActualAddlInfoUID
            WHERE hai.HumanAdditionalInfo = @HumanID;
        END
        ELSE
        BEGIN
            INSERT INTO dbo.HumanAddlInfo
            (
                HumanAdditionalInfo,
                ReportedAge,
                ReportedAgeUOMID,
                ReportedAgeDTM,
                PassportNbr,
                IsEmployedID,
                EmployerPhoneNbr,
                EmployedDTM,
                IsStudentID,
                SchoolPhoneNbr,
                SchoolAddressID,
                SchoolLastAttendDTM,
                ContactPhoneCountryCode,
                ContactPhoneNbr,
                ContactPhoneNbrTypeID,
                ContactPhone2CountryCode,
                ContactPhone2Nbr,
                ContactPhone2NbrTypeID,
                SchoolName,
                intRowStatus,
                AuditCreateDTM,
                AuditCreateUser
            )
            SELECT @HumanID,
                   ReportedAge,
                   ReportedAgeUOMID,
                   ReportedAgeDTM,
                   PassportNbr,
                   IsEmployedID,
                   EmployerPhoneNbr,
                   EmployedDTM,
                   IsStudentID,
                   SchoolPhoneNbr,
                   @RootSchoolAddressID,
                   SchoolLastAttendDTM,
                   ContactPhoneCountryCode,
                   ContactPhoneNbr,
                   ContactPhoneNbrTypeID,
                   ContactPhone2CountryCode,
                   ContactPhone2Nbr,
                   ContactPhone2NbrTypeID,
                   SchoolName,
                   intRowStatus,
                   GETDATE(),
                   @AuditUserName
            FROM dbo.humanActualAddlInfo
            WHERE HumanActualAddlInfoUID = @HumanActualID;
        END
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Altering Procedure [dbo].[USP_HUM_HUMAN_DISEASE_SET]...';


GO
-- ================================================================================================
-- Name: USP_HUM_HUMAN_DISEASE_SET
--
-- Description:	Insert or update a human disease report record.
--          
-- Author: Mandar Kulkarni
--
-- Revision History:
-- Name                  Date       Change Detail
-- --------------------- ---------- --------------------------------------------------------------
-- JWJ	                 04/03/2018 Added new param to end for ReportStatus
-- Harold Pryor          08/01/2018 Added new @DiseaseReportTypeID input paramenter
-- Harold Pryor          11/30/2018 Added new @blnClinicalDiagBasis, @blnLabDiagBasis, 
--                                  @blnEpiDiagBasis input parameters for Basis of Diagnosis and 
--                                  new @DateofClassification input parameter 
-- Harold Pryor          12/05/2018	Added new @StartDateofInvestigation input parameter. Corrected 
--                                  @idfSoughtCareFacility input parameter spelling.	
-- Harold Pryor          12/06/2018	Removed updating Primary Key column for tlbHumanCase update.
-- Harold Pryor          12/13/2018	Removed @VaccinationName and @VaccinationDate input 
--                                  paramenters
-- Harold Pryor          12/21/2018	Changed @Sample as tlbHdrMaterialGetListSPType and @Tests as 
--                                  tlbHdrTestGetListSPType parameters and replaced as NVARCHAR
-- Harold Pryor          12/27/2018	Changed @Sample parameter to @SampleParameters and changed 
--                                  parameter @Tests to @TestsParameters. 
-- Lamont Mitchell       01/02/2018	Changed @idfHumanCase from OutputParameter and added to 
--                                  select statement
-- Harold Pryor          01/04/2018	Added new input paramters @AntiviralTherapiesParameters and 
--                                  @VaccinationsParameters	
-- Lamont Mitchell       01/11/2019	Suppressed Result Sets in ALL STORED PROCS
-- Harold Pryor          01/21/2019	Added @ContactsParameters input parameter 
-- Harold Pryor          01/27/2019	Added @strSummaryNotes input parameter
-- Harold Pryor          02/10/2019	Added @idfEpiObservation and @idfCSObservation	input 
--                                  paremeters for Flex Forms integration. 
-- Harold Pryor          03/22/2019	Updated to include @idfHuman and @DiseaseID to call to 
--                                  USSP_HUMAN_DISEASE_SAMPLES_SET stored proc 
-- Harold Pryor          04/08/2019	Updated to include @idfHumanCaseRelatedTo imput parameter for 
--                                  Changed Diagnosis Human Disease Report functionality
-- Harold Pryor          04/09/2019	For Smart key generation reference data change for V7 updated 
--                                  call to USP_GBL_NextNumber using a V6 strDocumentName ('Human 
--                                  Case').  Input parameter and replaced with V7 trDocumentName 
--                                  ('Human Disease Report') input parameter value instead.  
-- Harold Pryor          04/28/2019 Updated to properly save contacts 
-- Harold Pryor          05/28/2019 Updated to include paramter @idfHuman in call to 
--                                  USSP_HUMAN_DISEASE_CONTACT_SET
-- Harold Pryor          06/04/2019 Updated to include @strEpidemiologistsName input parameter
-- Harold Pryor          06/05/2019 Updated to include @idfsNotCollectedReason input parameter 
-- Harold Pryor          06/18/2019 Updated to include @idfsGeoLocationType input parameter
-- Harold Pryor          06/19/2019 Updated to include @intElevation and @strForeignAddress input 
--                                  parameters
-- Harold Pryor          06/19/2019 Updated to include @intLocationDirection input parameter
-- Lamont Mitchell       04/21/2020	UPDATEd tlbGeolocation Output Parameter
-- Lamont Mitchell       06/07/2020	Modified adding Connected Human disease Report
-- Lamont Mitchell       08/04/2020 Added property @idfInvestigatedByPerson and modified insert 
--                                  and update statments to include parameter
-- Lamont Mitchell       08/04/2000	Added SITE ID Property
-- Lamont Mitchell       11/02/2020	Added strNotCollectedReason to property list and add and 
--                                  update
-- Mandar Kulkani        01/18/2022	Removed two input parameters for relative latitude and 
--                                  longitude
-- Minal Shah            01/24/2022	Added strLocalIdentifier to the request
-- Minal Shah            04/04/2022	Added Site Alert Notifications
-- Doug Albanese         04/19/2022	Added tag to denote refactoring to Location Hierarchy
-- Doug Albanese         05/24/2022	Added idfParentMonitoringSession to connect a human active 
--                                  surveillance session to a disease report
-- Mark Wilson           06/02/2022	Set @AuditUser = ISNULL(@AuditUser, '') to make sure no nulls
-- Mark Wilson           06/08/2022	Defined all parameters for USSP_GBL_SAMPLE_SET
-- Stephen Long          07/06/2022 Updates for site alerts to call new stored procedure.
-- Doug Albanese         07/18/2022	Add @ConnectedTestId, so that HDR can make the association, 
--                                  after obtaining the new idfHumanCase value.
-- Doug Albanese         09/12/2022 Linked up the "Monitoring Session ID" to Samples and Tests
-- Doug Albanese         10/17/2022	Corrected the "Connected Test" to update all records for the 
--                                  existing monitoring session that have the same person and 
--                                  disease combination
-- Leo Tracchia          10/21/2022 Fix for properly deleting tests for human disease report 
--                                  DevOps defect 5006
-- Stephen Long          11/17/2022 Added data audit logic for SAUC30 and 31.
--
-- Testing Code:
-- EXEC USP_HUM_HUMAN_DISEASE_SET  NULL,  27, NULL,  '(new)',784050000000
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_HUMAN_DISEASE_SET]
(
    @LanguageID NVARCHAR(50),
    @idfHumanCase BIGINT = NULL,                          -- tlbHumanCase.idfHumanCase Primary Key
    @idfHumanCaseRelatedTo BIGINT = NULL,
    @idfHuman BIGINT = NULL,                              -- tlbHumanCase.idfHuman
    @idfHumanActual BIGINT,                               -- tlbHumanActual.idfHumanActual
    @strHumanCaseId NVARCHAR(200) = '(new)',
    @idfsFinalDiagnosis BIGINT,                           -- tlbhumancase.idfsTentativeDiagnosis/idfsFinalDiagnosis
    @datDateOfDiagnosis DATETIME = NULL,                  --tlbHumanCase.datTentativeDiagnosisDate/datFinalDiagnosisDate
    @datNotificationDate DATETIME = NULL,                 --tlbHumanCase.DatNotIFicationDate
    @idfsFinalState BIGINT = NULL,                        --tlbHumanCase.idfsFinalState
    @strLocalIdentifier NVARCHAR(200) = NULL,
    @idfSentByOffice BIGINT = NULL,                       -- tlbHumanCase.idfSentByOffice
    @strSentByFirstName NVARCHAR(200) = NULL,             --tlbHumanCase.strSentByFirstName
    @strSentByPatronymicName NVARCHAR(200) = NULL,        --tlbHumancase.strSentByPatronymicName
    @strSentByLastName NVARCHAR(200) = NULL,              --tlbHumanCase.strSentByLastName
    @idfSentByPerson BIGINT = NULL,                       --tlbHumcanCase.idfSentByPerson
    @idfReceivedByOffice BIGINT = NULL,                   -- tlbHumanCase.idfReceivedByOffice
    @strReceivedByFirstName NVARCHAR(200) = NULL,         --tlbHumanCase.strReceivedByFirstName
    @strReceivedByPatronymicName NVARCHAR(200) = NULL,    --tlbHumanCase.strReceivedByPatronymicName
    @strReceivedByLastName NVARCHAR(200) = NULL,          --tlbHuanCase.strReceivedByLastName
    @idfReceivedByPerson BIGINT = NULL,                   -- tlbHumanCase.idfReceivedByPerson
    @idfsHospitalizationStatus BIGINT = NULL,             -- tlbHumanCase.idfsHospitalizationStatus
    @idfHospital BIGINT = NULL,                           -- tlbHumanCase.idfHospital
    @strCurrentLocation NVARCHAR(200) = NULL,             -- tlbHumanCase.strCurrentLocation
    @datOnSetDate DATETIME = NULL,                        -- tlbHumanCase.datOnSetDate
    @idfsInitialCaseStatus BIGINT = NULL,                 -- tlbHumanCase.idfsInitialCaseStatus
    @idfsYNPreviouslySoughtCare BIGINT = NULL,            --idfsYNPreviouslySoughtCare
    @datFirstSoughtCareDate DATETIME = NULL,              --tlbHumanCase.datFirstSoughtCareDate
    @idfSoughtCareFacility BIGINT = NULL,                 --tlbHumanCase.idfSoughtCareFacility
    @idfsNonNotIFiableDiagnosis BIGINT = NULL,            --tlbHumanCase.idfsNonNotIFiableDiagnosis
    @idfsYNHospitalization BIGINT = NULL,                 -- tlbHumanCase.idfsYNHospitalization
    @datHospitalizationDate DATETIME = NULL,              --tlbHumanCase.datHospitalizationDate 
    @datDischargeDate DATETIME = NULL,                    -- tlbHumanCase.datDischargeDate
    @strHospitalName NVARCHAR(200) = NULL,                --tlbHumanCase.strHospitalizationPlace  
    @idfsYNAntimicrobialTherapy BIGINT = NULL,            --  tlbHumanCase.idfsYNAntimicrobialTherapy 
    @strAntibioticName NVARCHAR(200) = NULL,              -- tlbHumanCase.strAntimicrobialTherapyName
    @strDosage NVARCHAR(200) = NULL,                      --tlbHumanCase.strDosage
    @datFirstAdministeredDate DATETIME = NULL,            -- tlbHumanCase.datFirstAdministeredDate
    @strAntibioticComments NVARCHAR(MAX) = NULL,          -- tlbHumanCase.strClinicalNotes , or strSummaryNotes
    @idfsYNSpecIFicVaccinationAdministered BIGINT = NULL, --  tlbHumanCase.idfsYNSpecIFicVaccinationAdministered
    @idfInvestigatedByOffice BIGINT = NULL,               -- tlbHumanCase.idfInvestigatedByOffice 
    @StartDateofInvestigation DATETIME = NULL,            -- tlbHumanCase.datInvestigationStartDate
    @idfsYNRelatedToOutbreak BIGINT = NULL,               -- tlbHumanCase.idfsYNRelatedToOutbreak
    @idfOutbreak BIGINT = NULL,                           --idfOutbreak  
    @idfsYNExposureLocationKnown BIGINT = NULL,           --tlbHumanCase.idfsYNExposureLocationKnown
    @idfPointGeoLocation BIGINT = NULL,                   --tlbHumanCase.idfPointGeoLocation
    @datExposureDate DATETIME = NULL,                     -- tlbHumanCase.datExposureDate 
    @idfsGeoLocationType BIGINT = NULL,                   --tlbGeolocation.idfsGeoLocationType
    @strLocationDescription NVARCHAR(MAX) = NULL,         --tlbGeolocation.Description
    @idfsLocationCountry BIGINT = NULL,                   --tlbGeolocation.idfsCountry 
    @idfsLocationRegion BIGINT = NULL,                    --tlbGeolocation.idfsRegion
    @idfsLocationRayon BIGINT = NULL,                     --tlbGeolocation.idfsRayon
    @idfsLocationSettlement BIGINT = NULL,                --tlbGeolocation.idfsSettlement
    @intLocationLatitude FLOAT = NULL,                    --tlbGeolocation.Latittude
    @intLocationLongitude FLOAT = NULL,                   --tlbGeolocation.Longitude
    @intElevation BIGINT = NULL,                          --GISSettlement.intElevation
    @idfsLocationGroundType BIGINT = NULL,                --tlbGeolocation.GroundType
    @intLocationDistance FLOAT = NULL,                    --tlbGeolocation.Distance
    @intLocationDirection FLOAT = NULL,                   --tlbGeolocation.Alignment	
    @strForeignAddress NVARCHAR(MAX) = NULL,              --tlbGeolocation.strForeignAddress 
    @strNote NVARCHAR(MAX) = NULL,                        --tlbhumancase.strNote
    @idfsFinalCaseStatus BIGINT = NULL,                   --tlbHuanCase.idfsFinalCaseStatus 
    @idfsOutcome BIGINT = NULL,                           -- --tlbHumanCase.idfsOutcome 
    @datDateofDeath DATETIME = NULL,                      -- tlbHumanCase.datDateOfDeath 
    @idfsCaseProgressStatus BIGINT = 10109001,            --	tlbHumanCase.reportStatus, default = In-process
    @idfPersonEnteredBy BIGINT = NULL,
    @strClinicalNotes NVARCHAR(2000) = NULL,
    @idfsYNSpecimenCollected BIGINT = NULL,
    @idfsYNTestsConducted BIGINT = NULL,
    @DiseaseReportTypeID BIGINT = NULL,
    @blnClinicalDiagBasis BIT = NULL,
    @blnLabDiagBasis BIT = NULL,
    @blnEpiDiagBasis BIT = NULL,
    @DateofClassification DATETIME = NULL,
    @strSummaryNotes NVARCHAR(MAX) = NULL,
    @idfEpiObservation BIGINT = NULL,
    @idfCSObservation BIGINT = NULL,
    @idfInvestigatedByPerson BIGINT = NULL,
    @strEpidemiologistsName NVARCHAR(MAX) = NULL,
    @idfsNotCollectedReason BIGINT = NULL,
    @strNotCollectedReason NVARCHAR(200) = NULL,
    @SamplesParameters NVARCHAR(MAX) = NULL,
    @TestsParameters NVARCHAR(MAX) = NULL,
    @TestsInterpretationParameters NVARCHAR(MAX) = NULL,
    @AntiviralTherapiesParameters NVARCHAR(MAX) = NULL,
    @VaccinationsParameters NVARCHAR(MAX) = NULL,
    @ContactsParameters NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL,
    @idfsHumanAgeType BIGINT = NULL,
    @intPatientAge INT = NULL,
    @datCompletionPaperFormDate DATETIME = NULL,
    @RowStatus INT,
    @idfsSite BIGINT = NULL,
    @AuditUser NVARCHAR(100) = '',
    @idfParentMonitoringSession BIGINT = NULL,
    @ConnectedTestId BIGINT = NULL
)
AS
DECLARE @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
        @RowID BIGINT = NULL,
        @RowAction NCHAR = NULL,
        @OrderNumber INT,
        @SampleID BIGINT,
        @SampleTypeID BIGINT = NULL,
        @HumanID BIGINT,
        @HumanMasterID BIGINT = NULL,
        @CollectedByPersonID BIGINT = NULL,
        @CollectedByOrganizationID BIGINT = NULL,
        @CollectionDate DATETIME = NULL,
        @SentDate DATETIME = NULL,
        @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
        @SampleStatusTypeID BIGINT = NULL,
        @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
        @SentToOrganizationID BIGINT = NULL,
        @ReadOnlyIndicator BIT = NULL,
        @AccessionDate DATETIME = NULL,
        @AccessionConditionTypeID BIGINT = NULL,
        @AccessionComment NVARCHAR(200) = NULL,
        @AccessionByPersonID BIGINT = NULL,
        @CurrentSiteID BIGINT = NULL,
        @TestID BIGINT,
        @TestNameTypeID BIGINT = NULL,
        @TestCategoryTypeID BIGINT = NULL,
        @TestResultTypeID BIGINT = NULL,
        @TestStatusTypeID BIGINT,
        @BatchTestID BIGINT = NULL,
        @TestNumber INT = NULL,
        @StartedDate DATETIME2 = NULL,
        @ResultDate DATETIME2 = NULL,
        @TestedByPersonID BIGINT = NULL,
        @TestedByOrganizationID BIGINT = NULL,
        @ResultEnteredByOrganizationID BIGINT = NULL,
        @ResultEnteredByPersonID BIGINT = NULL,
        @ValidatedByOrganizationID BIGINT = NULL,
        @ValidatedByPersonID BIGINT = NULL,
        @NonLaboratoryTestIndicator BIT,
        @ExternalTestIndicator BIT = NULL,
        @PerformedByOrganizationID BIGINT = NULL,
        @ReceivedDate DATETIME2 = NULL,
        @ContactPersonName NVARCHAR(200) = NULL,
        @TestHumanCaseID BIGINT = NULL,
        @TestInterpretationID BIGINT,
        @InterpretedStatusTypeID BIGINT = NULL,
        @InterpretedByOrganizationID BIGINT = NULL,
        @InterpretedByPersonID BIGINT = NULL,
        @TestingInterpretations BIGINT,
        @ValidatedStatusIndicator BIT = NULL,
        @ReportSessionCreatedIndicator BIT = NULL,
        @ValidatedComment NVARCHAR(200) = NULL,
        @InterpretedComment NVARCHAR(200) = NULL,
        @ValidatedDate DATETIME = NULL,
        @InterpretedDate DATETIME = NULL,
        -- Site alerts/notifications
        @EventId BIGINT,
        @EventTypeId BIGINT = NULL,
        @EventSiteId BIGINT = NULL,
        @EventObjectId BIGINT = NULL,
        @EventUserId BIGINT = NULL,
        @EventDiseaseId BIGINT = NULL,
        @EventLocationId BIGINT = NULL,
        @EventInformationString NVARCHAR(MAX) = NULL,
        @EventLoginSiteId BIGINT = NULL,
        -- End site alerts/notifications
        @MonitoringSessionActionID BIGINT,
        @ActionTypeID BIGINT,
        @ActionStatusTypeID BIGINT,
        @ActionDate DATETIME = NULL,
        @Comments NVARCHAR(500) = NULL,
        @DiseaseID BIGINT,
        @idfMonitoringSessionToDiagnosis BIGINT,
        @DateEntered DATETIME = GETDATE(),
        @idfMaterial BIGINT,
        -- Data audit
        @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectTypeID BIGINT = 10017026,     -- Human disease report
        @ObjectID BIGINT = @idfHumanCase,
        @ObjectTableID BIGINT = 75610000000, -- tlbHumanCase
        @ObjectObservationTableID BIGINT = 75640000000 -- tlbObservation
        -- End data audit
SET @AuditUser = ISNULL(@AuditUser, '');

DECLARE @SamplesTemp TABLE
(
    SampleID BIGINT NOT NULL,
    SampleTypeID BIGINT NULL,
    SampleStatusTypeID BIGINT NULL,
    CollectionDate DATETIME2 NULL,
    CollectedByOrganizationID BIGINT NULL,
    CollectedByPersonID BIGINT NULL,
    SentDate DATETIME2 NULL,
    SentToOrganizationID BIGINT NULL,
    EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
    Comments NVARCHAR(200) NULL,
    SiteID BIGINT NOT NULL,
    CurrentSiteID BIGINT NULL,
    DiseaseID BIGINT NULL,
    ReadOnlyIndicator BIT NULL,
    HumanID BIGINT NULL,
    HumanMasterID BIGINT NULL,
    RowStatus INT NOT NULL,
    RowAction CHAR(1) NULL
);
DECLARE @TestsTemp TABLE
(
    TestID BIGINT NOT NULL,
    TestNameTypeID BIGINT NULL,
    TestCategoryTypeID BIGINT NULL,
    TestResultTypeID BIGINT NULL,
    TestStatusTypeID BIGINT NOT NULL,
    DiseaseID BIGINT NULL,
    SampleID BIGINT NULL,
    BatchTestID BIGINT NULL,
    ObservationID BIGINT NULL,
    TestNumber INT NULL,
    Comments NVARCHAR NULL,
    StartedDate DATETIME2 NULL,
    ResultDate DATETIME2 NULL,
    TestedByOrganizationID BIGINT NULL,
    TestedByPersonID BIGINT NULL,
    ResultEnteredByOrganizationID BIGINT NULL,
    ResultEnteredByPersonID BIGINT NULL,
    ValidatedByOrganizationID BIGINT NULL,
    ValidatedByPersonID BIGINT NULL,
    ReadOnlyIndicator BIT NOT NULL,
    NonLaboratoryTestIndicator BIT NOT NULL,
    ExternalTestIndicator BIT NULL,
    PerformedByOrganizationID BIGINT NULL,
    ReceivedDate DATETIME2 NULL,
    ContactPersonName NVARCHAR(200) NULL,
    RowStatus INT NOT NULL,
    RowAction CHAR(1) NULL
);
DECLARE @TestsInterpretationParametersTemp TABLE
(
    TestInterpretationID BIGINT NOT NULL,
    DiseaseID BIGINT NULL,
    InterpretedStatusTypeID BIGINT NULL,
    ValidatedByOrganizationID BIGINT NULL,
    ValidatedByPersonID BIGINT NULL,
    InterpretedByOrganizationID BIGINT NULL,
    InterpretedByPersonID BIGINT NULL,
    TestID BIGINT NOT NULL,
    ValidatedStatusIndicator BIT NULL,
    ReportSessionCreatedIndicator BIT NULL,
    ValidatedComment NVARCHAR(200) NULL,
    InterpretedComment NVARCHAR(200) NULL,
    ValidatedDate DATETIME NULL,
    InterpretedDate DATETIME NULL,
    ReadOnlyIndicator BIT NOT NULL,
    RowStatus INT NOT NULL,
    RowAction INT NULL
);
DECLARE @EventsTemp TABLE
(
    EventId BIGINT NOT NULL,
    EventTypeId BIGINT NULL,
    UserId BIGINT NULL,
    SiteId BIGINT NULL,
    LoginSiteId BIGINT NULL,
    ObjectId BIGINT NULL,
    DiseaseId BIGINT NULL,
    LocationId BIGINT NULL,
    InformationString NVARCHAR(MAX) NULL
);
DECLARE @HumanDiseaseReportBeforeEdit TABLE
(
    HumanDiseaseReportID BIGINT,
    HumanID BIGINT,
    FinalStateTypeID BIGINT,
    HospitalizationStatusTypeID BIGINT,
    HumanAgeTypeID BIGINT,
    AntimicrobialTherapyTypeID BIGINT,
    HospitalizationTypeID BIGINT,
    SpecimenCollectedTypeID BIGINT,
    RelatedToOutbreakTypeID BIGINT,
    OutcomeID BIGINT,
    TentativeDiagnosisID BIGINT,
    FinalDiagnosisID BIGINT,
    InitialCaseStatusTypeID BIGINT,
    FinalCaseStatusTypeID BIGINT,
    SentByOfficeID BIGINT,
    ReceivedByOfficeID BIGINT,
    InvestigatedByOfficeID BIGINT,
    PointGeoLocationID BIGINT,
    EpiObservationID BIGINT,
    CSObservationID BIGINT,
    DeduplicationResultCaseID BIGINT,
    NotificationDate DATETIME,
    CompletionPaperFormDate DATETIME,
    FirstSoughtCareDate DATETIME,
    ModificationDate DATETIME,
    HospitalizationDate DATETIME,
    FacilityLastVisitDate DATETIME,
    ExposureDate DATETIME,
    DischargeDate DATETIME,
    OnSetDate DATETIME,
    InvestigationStartDate DATETIME,
    TentativeDiagnosisDate DATETIME,
    FinalDiagnosisDate DATETIME,
    Note NVARCHAR(2000),
    CurrentLocation NVARCHAR(200),
    HospitalizationPlace NVARCHAR(200),
    LocalIdentifier NVARCHAR(200),
    SoughtCareFacility NVARCHAR(200),
    SentByFirstName NVARCHAR(200),
    SentByPatronymicName NVARCHAR(200),
    SentByLastName NVARCHAR(200),
    ReceivedByFirstName NVARCHAR(200),
    ReceivedByPatronymicName NVARCHAR(200),
    ReceivedByLastName NVARCHAR(200),
    EpidemiologistsName NVARCHAR(200),
    NotCollectedReason NVARCHAR(200),
    ClinicalDiagnosis NVARCHAR(200),
    ClinicalNotes NVARCHAR(2000),
    SummaryNotes NVARCHAR(2000),
    PatientAge INT,
    ClinicalDiagBasisIndicator BIT,
    LabDiagBasisIndicator BIT,
    EpiDiagBasisIndicator BIT,
    PersonEnteredByID BIGINT,
    SentByPersonID BIGINT,
    ReceivedByPersonID BIGINT,
    InvestigatedByPersonID BIGINT,
    TestsConductedTypeID BIGINT,
    SoughtCareFacilityID BIGINT,
    NonNotifiableDiagnosisID BIGINT,
    NotCollectedReasonTypeID BIGINT,
    OutbreakID BIGINT,
    EnteredDate DATETIME,
    CaseID NVARCHAR(200),
    CaseProgressStatusTypeID BIGINT,
    SampleNotes NVARCHAR(1000),
    OfflineCaseID UNIQUEIDENTIFIER,
    FinalCaseClassificationDate DATETIME,
    HospitalID BIGINT,
    RowStatus INT
);
DECLARE @HumanDiseaseReportAfterEdit TABLE
(
    HumanDiseaseReportID BIGINT,
    HumanID BIGINT,
    FinalStateTypeID BIGINT,
    HospitalizationStatusTypeID BIGINT,
    HumanAgeTypeID BIGINT,
    AntimicrobialTherapyTypeID BIGINT,
    HospitalizationTypeID BIGINT,
    SpecimenCollectedTypeID BIGINT,
    RelatedToOutbreakTypeID BIGINT,
    OutcomeID BIGINT,
    TentativeDiagnosisID BIGINT,
    FinalDiagnosisID BIGINT,
    InitialCaseStatusTypeID BIGINT,
    FinalCaseStatusTypeID BIGINT,
    SentByOfficeID BIGINT,
    ReceivedByOfficeID BIGINT,
    InvestigatedByOfficeID BIGINT,
    PointGeoLocationID BIGINT,
    EpiObservationID BIGINT,
    CSObservationID BIGINT,
    DeduplicationResultCaseID BIGINT,
    NotificationDate DATETIME,
    CompletionPaperFormDate DATETIME,
    FirstSoughtCareDate DATETIME,
    ModificationDate DATETIME,
    HospitalizationDate DATETIME,
    FacilityLastVisitDate DATETIME,
    ExposureDate DATETIME,
    DischargeDate DATETIME,
    OnSetDate DATETIME,
    InvestigationStartDate DATETIME,
    TentativeDiagnosisDate DATETIME,
    FinalDiagnosisDate DATETIME,
    Note NVARCHAR(2000),
    CurrentLocation NVARCHAR(200),
    HospitalizationPlace NVARCHAR(200),
    LocalIdentifier NVARCHAR(200),
    SoughtCareFacility NVARCHAR(200),
    SentByFirstName NVARCHAR(200),
    SentByPatronymicName NVARCHAR(200),
    SentByLastName NVARCHAR(200),
    ReceivedByFirstName NVARCHAR(200),
    ReceivedByPatronymicName NVARCHAR(200),
    ReceivedByLastName NVARCHAR(200),
    EpidemiologistsName NVARCHAR(200),
    NotCollectedReason NVARCHAR(200),
    ClinicalDiagnosis NVARCHAR(200),
    ClinicalNotes NVARCHAR(2000),
    SummaryNotes NVARCHAR(2000),
    PatientAge INT,
    ClinicalDiagBasisIndicator BIT,
    LabDiagBasisIndicator BIT,
    EpiDiagBasisIndicator BIT,
    PersonEnteredByID BIGINT,
    SentByPersonID BIGINT,
    ReceivedByPersonID BIGINT,
    InvestigatedByPersonID BIGINT,
    TestsConductedTypeID BIGINT,
    SoughtCareFacilityID BIGINT,
    NonNotifiableDiagnosisID BIGINT,
    NotCollectedReasonTypeID BIGINT,
    OutbreakID BIGINT,
    EnteredDate DATETIME,
    CaseID NVARCHAR(200),
    CaseProgressStatusTypeID BIGINT,
    SampleNotes NVARCHAR(1000),
    OfflineCaseID UNIQUEIDENTIFIER,
    FinalCaseClassificationDate DATETIME,
    HospitalID BIGINT,
    RowStatus INT
);
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200)
);
DECLARE @SuppressSelectHumanCase TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200)
);
DECLARE @SuppressSelectHuman TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200),
    idfHuman BIGINT
);
DECLARE @SuppressSelectGeoLocation TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200),
    idfGeoLocation BIGINT
);

BEGIN
    BEGIN TRY
        SET @SamplesParameters = REPLACE(@SamplesParameters, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@SamplesParameters)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                SampleStatusTypeID BIGINT,
                CollectionDate DATETIME2,
                CollectedByOrganizationID BIGINT,
                CollectedByPersonID BIGINT,
                SentDate DATETIME2,
                SentToOrganizationID BIGINT,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                Comments NVARCHAR(200),
                SiteID BIGINT,
                CurrentSiteID BIGINT,
                DiseaseID BIGINT,
                ReadOnlyIndicator BIT,
                HumanID BIGINT,
                HumanMasterID BIGINT,
                RowStatus INT,
                RowAction CHAR(1)
            );

        SET @TestsParameters = REPLACE(@TestsParameters, '"0001-01-01T00:00:00"', 'null')

        INSERT INTO @TestsTemp
        SELECT *
        FROM
            OPENJSON(@TestsParameters)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Comments NVARCHAR(500),
                StartedDate DATETIME2,
                ResultDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                RowStatus INT,
                RowAction CHAR(1)
            );

        INSERT INTO @TestsInterpretationParametersTemp
        SELECT *
        FROM
            OPENJSON(@TestsInterpretationParameters)
            WITH
            (
                TestInterpretationID BIGINT,
                DiseaseID BIGINT,
                InterpretedStatusTypeID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                InterpretedByOrganizationID BIGINT,
                InterpretedByPersonID BIGINT,
                TestID BIGINT,
                ValidatedStatusIndicator BIT,
                ReportSessionCreatedIndicator BIT,
                ValidatedComment NVARCHAR(200),
                InterpretedComment NVARCHAR(200),
                ValidatedDate DATETIME2,
                InterpretedDate DATETIME2,
                ReadOnlyIndicator BIT,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        BEGIN TRANSACTION

        -- Data Audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = UserInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUser) userInfo;

        IF @idfHumanCase IS NULL
        BEGIN
            SET @DataAuditEventTypeID = 10016001; -- Data audit create event type

            -- Get next key value
            INSERT INTO @SuppressSelect
            EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbHumanCase', @idfHumanCase OUTPUT;
        END
        ELSE
        BEGIN
            SET @DataAuditEventTypeID = 10016003; -- Data audit edit event type
        END

        INSERT INTO @SuppressSelect
        EXEC dbo.USSP_GBL_DataAuditEvent_GET @AuditUserID,
                                             @AuditSiteID,
                                             @DataAuditEventTypeID,
                                             @ObjectTypeID,
                                             @idfHumanCase,
                                             @ObjectTableID,
                                             @DataAuditEventID OUTPUT;
        -- Data Audit

        SET @DiseaseID = @idfsFinalDiagnosis

        DECLARE @HumanDiseasereportRelnUID BIGINT

        DECLARE @COPYHUMANACTUALTOHUMAN_ReturnCode INT = 0

        -- Create a human record from human actual if not already present
        IF @idfHumanActual IS NOT NULL -- AND @idfHumanCase IS  NULL
        BEGIN
            INSERT INTO @SuppressSelectHumanCase
            EXEC dbo.USSP_HUM_COPY_HUMAN_SET @idfHumanActual,
                                             @DataAuditEventID,
                                             @AuditUser,
                                             @idfHuman OUTPUT,
                                             @ReturnCode OUTPUT,
                                             @ReturnMessage OUTPUT;
            IF @ReturnCode <> 0
            BEGIN
                RETURN;
            END
        END

        --TODO: Needs to be refactored to use Hierarchy
        -- Insert or update geolocation record if any of the information is provided
        IF @idfsLocationGroundType IS NOT NULL
           OR @idfsGeoLocationType IS NOT NULL
           OR @idfsLocationCountry IS NOT NULL
           OR @idfsLocationRegion IS NOT NULL
           OR @idfsLocationRayon IS NOT NULL
           OR @idfsLocationSettlement IS NOT NULL
           OR @strLocationDescription IS NOT NULL
           OR @intLocationLatitude IS NOT NULL
           OR @intLocationLongitude IS NOT NULL
           OR @intLocationDistance IS NOT NULL
           OR @intLocationDirection IS NOT NULL
           OR @strForeignAddress IS NOT NULL
           OR @intElevation IS NOT NULL
        BEGIN
            -- Set geo location 
            IF @idfPointGeoLocation IS NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbGeoLocation',
                                               @idfPointGeoLocation OUTPUT;
            END

            BEGIN
                INSERT INTO @SuppressSelectGeoLocation
                EXECUTE [dbo].[USP_HUMAN_DISEASE_GEOLOCATION_SET] @idfPointGeoLocation,
                                                                  @idfsLocationGroundType,
                                                                  @idfsGeoLocationType,
                                                                  @idfsLocationCountry,
                                                                  @idfsLocationRegion,
                                                                  @idfsLocationRayon,
                                                                  @idfsLocationSettlement,
                                                                  @strLocationDescription,
                                                                  @intLocationLatitude,
                                                                  @intLocationLongitude,
                                                                  NULL,
                                                                  @intLocationDistance,
                                                                  @intLocationDirection,
                                                                  @strForeignAddress,
                                                                  1,
                                                                  @intElevation,
                                                                  @AuditUser;
            END
        END

        IF NOT EXISTS
        (
            SELECT idfHumanCase
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase
                  AND intRowStatus = 0
        )
        BEGIN
            -- Create a string ID for the disease report
            IF LEFT(ISNULL(@strHumanCaseID, '(new'), 4) = '(new'
            BEGIN
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NextNumber_GET 'Human Disease Report',
                                                @strHumanCaseID OUTPUT,
                                                NULL; --N'AS Session'
            END

            INSERT INTO dbo.tlbHumanCase
            (
                idfHumanCase,
                idfHuman,
                strCaseId,
                idfsFinalDiagnosis,
                datTentativeDiagnosisDate,
                datNotIFicationDate,
                idfsFinalState,
                strLocalIdentifier,
                idfSentByOffice,
                strSentByFirstName,
                strSentByPatronymicName,
                strSentByLastName,
                idfSentByPerson,
                idfReceivedByOffice,
                strReceivedByFirstName,
                strReceivedByPatronymicName,
                strReceivedByLastName,
                idfReceivedByPerson,
                idfsHospitalizationStatus,
                idfHospital,
                strCurrentLocation,
                datOnSetDate,
                idfsInitialCaseStatus,
                idfsYNPreviouslySoughtCare,
                datFirstSoughtCareDate,
                idfSoughtCareFacility,
                idfsNonNotIFiableDiagnosis,
                idfsYNHospitalization,
                datHospitalizationDate,
                datDischargeDate,
                strHospitalizationPlace,
                idfsYNAntimicrobialTherapy,
                strClinicalNotes,
                idfsYNSpecIFicVaccinationAdministered,
                idfInvestigatedByOffice,
                datInvestigationStartDate,
                idfsYNRelatedToOutbreak,
                idfOutbreak,
                idfPointGeoLocation,
                idfsYNExposureLocationKnown,
                datExposureDate,
                strNote,
                idfsFinalCaseStatus,
                idfsOutcome,
                intRowStatus,
                idfsCaseProgressStatus,
                datModificationDate,
                datEnteredDate,
                idfPersonEnteredBy,
                idfsYNSpecimenCollected,
                idfsYNTestsConducted,
                DiseaseReportTypeID,
                blnClinicalDiagBasis,
                blnLabDiagBasis,
                blnEpiDiagBasis,
                datFinalCaseClassificationDate,
                strsummarynotes,
                idfEpiObservation,
                idfCSObservation,
                idfInvestigatedByPerson,
                strEpidemiologistsName,
                idfsNotCollectedReason,
                strNotCollectedReason,
                idfsHumanAgeType,
                intPatientAge,
                datCompletionPaperFormDate,
                idfsSite,
                AuditCreateUser,
                idfParentMonitoringSession
            )
            VALUES
            (   @idfHumanCase,
                @idfHuman,
                @strHumanCaseId,
                @idfsFinalDiagnosis,
                @datDateOfDiagnosis,
                @datNotificationDate,
                @idfsFinalState,
                @strLocalIdentifier,
                @idfSentByOffice,
                @strSentByFirstName,
                @strSentByPatronymicName,
                @strSentByLastName,
                @idfSentByPerson,
                @idfReceivedByOffice,
                @strReceivedByFirstName,
                @strReceivedByPatronymicName,
                @strReceivedByLastName,
                @idfReceivedByPerson,
                @idfsHospitalizationStatus,
                @idfHospital,
                @strCurrentLocation,
                @datOnSetDate,
                @idfsInitialCaseStatus,
                @idfsYNPreviouslySoughtCare,
                @datFirstSoughtCareDate,
                @idfSoughtCareFacility,
                @idfsNonNotIFiableDiagnosis,
                @idfsYNHospitalization,
                @datHospitalizationDate,
                @datDischargeDate,
                @strHospitalName,
                @idfsYNAntimicrobialTherapy,
                @strClinicalNotes,
                @idfsYNSpecIFicVaccinationAdministered,
                @idfInvestigatedByOffice,
                @StartDateofInvestigation,
                @idfsYNRelatedToOutbreak,
                @idfOutbreak,
                @idfPointGeoLocation,
                @idfsYNExposureLocationKnown,
                @datExposureDate,
                @strNote,
                @idfsFinalCaseStatus,
                @idfsOutcome,
                0,
                @idfsCaseProgressStatus,
                GETDATE(), --datModificationDate	
                GETDATE(), --datEnteredDate		
                @idfPersonEnteredBy,
                @idfsYNSpecimenCollected,
                @idfsYNTestsConducted,
                @DiseaseReportTypeID,
                @blnClinicalDiagBasis,
                @blnLabDiagBasis,
                @blnEpiDiagBasis,
                @DateofClassification,
                @strSummaryNotes,
                @idfEpiObservation,
                @idfCSObservation,
                @idfInvestigatedByPerson,
                @strEpidemiologistsName,
                @idfsNotCollectedReason,
                @strNotCollectedReason,
                @idfsHumanAgeType,
                @intPatientAge,
                @datCompletionPaperFormDate,
                @idfsSite,
                @AuditUser,
                @idfParentMonitoringSession
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser
            )
            VALUES
            (
                @DataAuditEventID, 
                @ObjectTableID, 
                @idfHumanCase, 
                10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300))
                 + ',"idfObjectTable":' + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
                @AuditUser
            );

            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser
            )
            VALUES
            (
                @DataAuditEventID, 
                @ObjectObservationTableID, 
                @idfEpiObservation, 
                10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300))
                 + ',"idfObjectTable":' + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
                @AuditUser
            );

            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser
            )
            VALUES
            (
                @DataAuditEventID, 
                @ObjectObservationTableID, 
                @idfCSObservation, 
                10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300))
                 + ',"idfObjectTable":' + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
                @AuditUser
            );
            -- End data audit

            DECLARE @RelatedToRoot BIGINT;

            IF @idfHumanCaseRelatedTo IS NOT NULL
            BEGIN
                -- Establish the root
                IF NOT EXISTS
                (
                    SELECT *
                    FROM dbo.HumanDiseaseReportRelationship
                    WHERE (HumanDiseaseReportID = @idfHumanCaseRelatedTo)
                          AND (RelatedToHumanDiseaseReportIdRoot IS NOT NULL)
                          AND (intRowStatus = 0)
                )
                BEGIN
                    SET @RelatedToRoot = @idfHumanCaseRelatedTo;
                END
                ELSE
                BEGIN
                    SELECT @RelatedToRoot = RelatedToHumanDiseaseReportIdRoot
                    FROM dbo.HumanDiseaseReportRelationship
                    WHERE (HumanDiseaseReportID = @idfHumanCaseRelatedTo)
                          AND (RelatedToHumanDiseaseReportIdRoot IS NOT NULL)
                          AND (intRowStatus = 0);
                END
                -- End establishing the root

                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'HumanDiseaseReportRelationship',
                                               @HumanDiseasereportRelnUID OUTPUT;

                INSERT INTO dbo.HumanDiseaseReportRelationship
                (
                    HumanDiseasereportRelnUID,
                    HumanDiseaseReportID,
                    RelateToHumanDiseaseReportID,
                    RelatedToHumanDiseaseReportIdRoot,
                    RelationshipTypeID,
                    intRowStatus,
                    AuditCreateUser,
                    AuditCreateDTM,
                    rowguid
                )
                VALUES
                (   @HumanDiseasereportRelnUID,
                    @idfHumanCase,
                    @idfHumanCaseRelatedTo,
                    @RelatedToRoot,
                    10503001, -- Linked Copy Parent
                    0,
                    @AuditUser,
                    GETDATE(),
                    NEWID()
                );
            END
        END
        ELSE
        BEGIN
            INSERT INTO @HumanDiseaseReportBeforeEdit
            (
                HumanDiseaseReportID,
                HumanID,
                FinalStateTypeID,
                HospitalizationStatusTypeID,
                HumanAgeTypeID,
                AntimicrobialTherapyTypeID,
                HospitalizationTypeID,
                SpecimenCollectedTypeID,
                RelatedToOutbreakTypeID,
                OutcomeID,
                TentativeDiagnosisID,
                FinalDiagnosisID,
                InitialCaseStatusTypeID,
                FinalCaseStatusTypeID,
                SentByOfficeID,
                ReceivedByOfficeID,
                InvestigatedByOfficeID,
                PointGeoLocationID,
                EpiObservationID,
                CSObservationID,
                DeduplicationResultCaseID,
                NotificationDate,
                CompletionPaperFormDate,
                FirstSoughtCareDate,
                ModificationDate,
                HospitalizationDate,
                FacilityLastVisitDate,
                ExposureDate,
                DischargeDate,
                OnSetDate,
                InvestigationStartDate,
                TentativeDiagnosisDate,
                FinalDiagnosisDate,
                Note,
                CurrentLocation,
                HospitalizationPlace,
                LocalIdentifier,
                SoughtCareFacility,
                SentByFirstName,
                SentByPatronymicName,
                SentByLastName,
                ReceivedByFirstName,
                ReceivedByPatronymicName,
                ReceivedByLastName,
                EpidemiologistsName,
                NotCollectedReason,
                ClinicalDiagnosis,
                ClinicalNotes,
                SummaryNotes,
                PatientAge,
                ClinicalDiagBasisIndicator,
                LabDiagBasisIndicator,
                EpiDiagBasisIndicator,
                PersonEnteredByID,
                SentByPersonID,
                ReceivedByPersonID,
                InvestigatedByPersonID,
                TestsConductedTypeID,
                SoughtCareFacilityID,
                NonNotifiableDiagnosisID,
                NotCollectedReasonTypeID,
                OutbreakID,
                EnteredDate,
                CaseID,
                CaseProgressStatusTypeID,
                SampleNotes,
                OfflineCaseID,
                FinalCaseClassificationDate,
                HospitalID,
                RowStatus
            )
            SELECT idfHumanCase,
                   idfHuman,
                   idfsFinalState,
                   idfsHospitalizationStatus,
                   idfsHumanAgeType,
                   idfsYNAntimicrobialTherapy,
                   idfsYNHospitalization,
                   idfsYNSpecimenCollected,
                   idfsYNRelatedToOutbreak,
                   idfsOutcome,
                   idfsTentativeDiagnosis,
                   idfsFinalDiagnosis,
                   idfsInitialCaseStatus,
                   idfsFinalCaseStatus,
                   idfSentByOffice,
                   idfReceivedByOffice,
                   idfInvestigatedByOffice,
                   idfPointGeoLocation,
                   idfEpiObservation,
                   idfCSObservation,
                   idfDeduplicationResultCase,
                   datNotificationDate,
                   datCompletionPaperFormDate,
                   datFirstSoughtCareDate,
                   datModificationDate,
                   datHospitalizationDate,
                   datFacilityLastVisit,
                   datExposureDate,
                   datDischargeDate,
                   datOnSetDate,
                   datInvestigationStartDate,
                   datTentativeDiagnosisDate,
                   datFinalDiagnosisDate,
                   strNote,
                   strCurrentLocation,
                   strHospitalizationPlace,
                   strLocalIdentifier,
                   strSoughtCareFacility,
                   strSentByFirstName,
                   strSentByPatronymicName,
                   strSentByLastName,
                   strReceivedByFirstName,
                   strReceivedByPatronymicName,
                   strReceivedByLastName,
                   strEpidemiologistsName,
                   strNotCollectedReason,
                   strClinicalDiagnosis,
                   strClinicalNotes,
                   strSummaryNotes,
                   intPatientAge,
                   blnClinicalDiagBasis,
                   blnLabDiagBasis,
                   blnEpiDiagBasis,
                   idfPersonEnteredBy,
                   idfSentByPerson,
                   idfReceivedByPerson,
                   idfInvestigatedByPerson,
                   idfsYNTestsConducted,
                   idfSoughtCareFacility,
                   idfsNonNotifiableDiagnosis,
                   idfsNotCollectedReason,
                   idfOutbreak,
                   datEnteredDate,
                   strCaseID,
                   idfsCaseProgressStatus,
                   strSampleNotes,
                   uidOfflineCaseID,
                   datFinalCaseClassificationDate,
                   idfHospital,
                   intRowStatus
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase;

            UPDATE dbo.tlbHumanCase
            SET strCaseId = @strHumanCaseId,
                idfsTentativeDiagnosis = @idfsFinalDiagnosis,
                idfsFinalDiagnosis = @idfsFinalDiagnosis,
                datTentativeDiagnosisDate = @datDateOfDiagnosis,
                datFinalDiagnosisDate = @datDateOfDiagnosis,
                datNotIFicationDate = @datNotificationDate,
                idfsFinalState = @idfsFinalState,
                idfSentByOffice = @idfSentByOffice,
                strSentByFirstName = @strSentByFirstName,
                strSentByPatronymicName = @strSentByPatronymicName,
                strSentByLastName = @strSentByLastName,
                idfSentByPerson = @idfSentByPerson,
                idfReceivedByOffice = @idfReceivedByOffice,
                strReceivedByFirstName = @strReceivedByFirstName,
                strReceivedByPatronymicName = @strReceivedByPatronymicName,
                strReceivedByLastName = @strReceivedByLastName,
                idfReceivedByPerson = @idfReceivedByPerson,
                strLocalIdentifier = @strLocalIdentifier,
                idfsHospitalizationStatus = @idfsHospitalizationStatus,
                idfHospital = @idfHospital,
                strCurrentLocation = @strCurrentLocation,
                datOnSetDate = @datOnSetDate,
                idfsInitialCaseStatus = @idfsInitialCaseStatus,
                idfsYNPreviouslySoughtCare = @idfsYNPreviouslySoughtCare,
                datFirstSoughtCareDate = @datFirstSoughtCareDate,
                idfSoughtCareFacility = @idfSoughtCareFacility,
                idfsNonNotIFiableDiagnosis = @idfsNonNotIFiableDiagnosis,
                idfsYNHospitalization = @idfsYNHospitalization,
                datHospitalizationDate = @datHospitalizationDate,
                datDischargeDate = @datDischargeDate,
                strHospitalizationPlace = @strHospitalName,
                idfsYNAntimicrobialTherapy = @idfsYNAntimicrobialTherapy,
                strClinicalNotes = @strClinicalNotes,
                idfsYNSpecIFicVaccinationAdministered = @idfsYNSpecIFicVaccinationAdministered,
                idfInvestigatedByOffice = @idfInvestigatedByOffice,
                datInvestigationStartDate = @StartDateofInvestigation,
                idfsYNRelatedToOutbreak = @idfsYNRelatedToOutbreak,
                idfOutbreak = @idfOutbreak,
                idfsYNExposureLocationKnown = @idfsYNExposureLocationKnown,
                idfPointGeoLocation = @idfPointGeoLocation,
                datExposureDate = @datExposureDate,
                strNote = @strNote,
                idfsFinalCaseStatus = @idfsFinalCaseStatus,
                idfsOutcome = @idfsOutcome,
                idfsCaseProgressStatus = @idfsCaseProgressStatus,
                datModificationDate = GETDATE(),
                idfsYNSpecimenCollected = @idfsYNSpecimenCollected,
                idfsYNTestsConducted = @idfsYNTestsConducted,
                DiseaseReportTypeID = @DiseaseReportTypeID,
                blnClinicalDiagBasis = @blnClinicalDiagBasis,
                blnLabDiagBasis = @blnLabDiagBasis,
                blnEpiDiagBasis = @blnEpiDiagBasis,
                datFinalCaseClassificationDate = @DateofClassification,
                strsummarynotes = @strSummaryNotes,
                idfEpiObservation = @idfEpiObservation,
                idfCSObservation = @idfCSObservation,
                strEpidemiologistsName = @strEpidemiologistsName,
                idfsNotCollectedReason = @idfsNotCollectedReason,
                strNotCollectedReason = @strNotCollectedReason,
                idfsHumanAgeType = @idfsHumanAgeType,
                intPatientAge = @intPatientAge,
                datCompletionPaperFormDate = @datCompletionPaperFormDate,
                idfInvestigatedByPerson = @idfInvestigatedByPerson,
                idfPersonEnteredBy = @idfPersonEnteredBy,
                idfsSite = @idfsSite,
                AuditUpdateUser = @AuditUser,
                idfParentMonitoringSession = @idfParentMonitoringSession
            WHERE idfHumanCase = @idfHumanCase
                  AND intRowStatus = 0;

            INSERT INTO @HumanDiseaseReportAfterEdit
            (
                HumanDiseaseReportID,
                HumanID,
                FinalStateTypeID,
                HospitalizationStatusTypeID,
                HumanAgeTypeID,
                AntimicrobialTherapyTypeID,
                HospitalizationTypeID,
                SpecimenCollectedTypeID,
                RelatedToOutbreakTypeID,
                OutcomeID,
                TentativeDiagnosisID,
                FinalDiagnosisID,
                InitialCaseStatusTypeID,
                FinalCaseStatusTypeID,
                SentByOfficeID,
                ReceivedByOfficeID,
                InvestigatedByOfficeID,
                PointGeoLocationID,
                EpiObservationID,
                CSObservationID,
                DeduplicationResultCaseID,
                NotificationDate,
                CompletionPaperFormDate,
                FirstSoughtCareDate,
                ModificationDate,
                HospitalizationDate,
                FacilityLastVisitDate,
                ExposureDate,
                DischargeDate,
                OnSetDate,
                InvestigationStartDate,
                TentativeDiagnosisDate,
                FinalDiagnosisDate,
                Note,
                CurrentLocation,
                HospitalizationPlace,
                LocalIdentifier,
                SoughtCareFacility,
                SentByFirstName,
                SentByPatronymicName,
                SentByLastName,
                ReceivedByFirstName,
                ReceivedByPatronymicName,
                ReceivedByLastName,
                EpidemiologistsName,
                NotCollectedReason,
                ClinicalDiagnosis,
                ClinicalNotes,
                SummaryNotes,
                PatientAge,
                ClinicalDiagBasisIndicator,
                LabDiagBasisIndicator,
                EpiDiagBasisIndicator,
                PersonEnteredByID,
                SentByPersonID,
                ReceivedByPersonID,
                InvestigatedByPersonID,
                TestsConductedTypeID,
                SoughtCareFacilityID,
                NonNotifiableDiagnosisID,
                NotCollectedReasonTypeID,
                OutbreakID,
                EnteredDate,
                CaseID,
                CaseProgressStatusTypeID,
                SampleNotes,
                OfflineCaseID,
                FinalCaseClassificationDate,
                HospitalID,
                RowStatus
            )
            SELECT idfHumanCase,
                   idfHuman,
                   idfsFinalState,
                   idfsHospitalizationStatus,
                   idfsHumanAgeType,
                   idfsYNAntimicrobialTherapy,
                   idfsYNHospitalization,
                   idfsYNSpecimenCollected,
                   idfsYNRelatedToOutbreak,
                   idfsOutcome,
                   idfsTentativeDiagnosis,
                   idfsFinalDiagnosis,
                   idfsInitialCaseStatus,
                   idfsFinalCaseStatus,
                   idfSentByOffice,
                   idfReceivedByOffice,
                   idfInvestigatedByOffice,
                   idfPointGeoLocation,
                   idfEpiObservation,
                   idfCSObservation,
                   idfDeduplicationResultCase,
                   datNotificationDate,
                   datCompletionPaperFormDate,
                   datFirstSoughtCareDate,
                   datModificationDate,
                   datHospitalizationDate,
                   datFacilityLastVisit,
                   datExposureDate,
                   datDischargeDate,
                   datOnSetDate,
                   datInvestigationStartDate,
                   datTentativeDiagnosisDate,
                   datFinalDiagnosisDate,
                   strNote,
                   strCurrentLocation,
                   strHospitalizationPlace,
                   strLocalIdentifier,
                   strSoughtCareFacility,
                   strSentByFirstName,
                   strSentByPatronymicName,
                   strSentByLastName,
                   strReceivedByFirstName,
                   strReceivedByPatronymicName,
                   strReceivedByLastName,
                   strEpidemiologistsName,
                   strNotCollectedReason,
                   strClinicalDiagnosis,
                   strClinicalNotes,
                   strSummaryNotes,
                   intPatientAge,
                   blnClinicalDiagBasis,
                   blnLabDiagBasis,
                   blnEpiDiagBasis,
                   idfPersonEnteredBy,
                   idfSentByPerson,
                   idfReceivedByPerson,
                   idfInvestigatedByPerson,
                   idfsYNTestsConducted,
                   idfSoughtCareFacility,
                   idfsNonNotifiableDiagnosis,
                   idfsNotCollectedReason,
                   idfOutbreak,
                   datEnteredDate,
                   strCaseID,
                   idfsCaseProgressStatus,
                   strSampleNotes,
                   uidOfflineCaseID,
                   datFinalCaseClassificationDate,
                   idfHospital,
                   intRowStatus
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase;

            -- Data audit 
            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   4577900000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.HumanID,
                   a.HumanID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.HumanID <> b.HumanID)
                  OR (
                         a.HumanID IS NOT NULL
                         AND b.HumanID IS NULL
                     )
                  OR (
                         a.HumanID IS NULL
                         AND b.HumanID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79670000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.FinalStateTypeID,
                   a.FinalStateTypeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.FinalStateTypeID <> b.FinalStateTypeID)
                  OR (
                         a.FinalStateTypeID IS NOT NULL
                         AND b.FinalStateTypeID IS NULL
                     )
                  OR (
                         a.FinalStateTypeID IS NULL
                         AND b.FinalStateTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79680000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.HospitalizationStatusTypeID,
                   a.HospitalizationStatusTypeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.HospitalizationStatusTypeID <> b.HospitalizationStatusTypeID)
                  OR (
                         a.HospitalizationStatusTypeID IS NOT NULL
                         AND b.HospitalizationStatusTypeID IS NULL
                     )
                  OR (
                         a.HospitalizationStatusTypeID IS NULL
                         AND b.HospitalizationStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79690000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.HumanAgeTypeID,
                   a.HumanAgeTypeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.HumanAgeTypeID <> b.HumanAgeTypeID)
                  OR (
                         a.HumanAgeTypeID IS NOT NULL
                         AND b.HumanAgeTypeID IS NULL
                     )
                  OR (
                         a.HumanAgeTypeID IS NULL
                         AND b.HumanAgeTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79730000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.AntimicrobialTherapyTypeID,
                   a.AntimicrobialTherapyTypeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.AntimicrobialTherapyTypeID <> b.AntimicrobialTherapyTypeID)
                  OR (
                         a.AntimicrobialTherapyTypeID IS NOT NULL
                         AND b.AntimicrobialTherapyTypeID IS NULL
                     )
                  OR (
                         a.AntimicrobialTherapyTypeID IS NULL
                         AND b.AntimicrobialTherapyTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79740000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.HospitalizationTypeID,
                   a.HospitalizationTypeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.HospitalizationTypeID <> b.HospitalizationTypeID)
                  OR (
                         a.HospitalizationTypeID IS NOT NULL
                         AND b.HospitalizationTypeID IS NULL
                     )
                  OR (
                         a.HospitalizationTypeID IS NULL
                         AND b.HospitalizationTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79760000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SpecimenCollectedTypeID,
                   a.SpecimenCollectedTypeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SpecimenCollectedTypeID <> b.SpecimenCollectedTypeID)
                  OR (
                         a.SpecimenCollectedTypeID IS NOT NULL
                         AND b.SpecimenCollectedTypeID IS NULL
                     )
                  OR (
                         a.SpecimenCollectedTypeID IS NULL
                         AND b.SpecimenCollectedTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79750000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.RelatedToOutbreakTypeID,
                   a.RelatedToOutbreakTypeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.RelatedToOutbreakTypeID <> b.RelatedToOutbreakTypeID)
                  OR (
                         a.RelatedToOutbreakTypeID IS NOT NULL
                         AND b.RelatedToOutbreakTypeID IS NULL
                     )
                  OR (
                         a.RelatedToOutbreakTypeID IS NULL
                         AND b.RelatedToOutbreakTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79710000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.OutcomeID,
                   a.OutcomeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.OutcomeID <> b.OutcomeID)
                  OR (
                         a.OutcomeID IS NOT NULL
                         AND b.OutcomeID IS NULL
                     )
                  OR (
                         a.OutcomeID IS NULL
                         AND b.OutcomeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79720000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.TentativeDiagnosisID,
                   a.TentativeDiagnosisID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.TentativeDiagnosisID <> b.TentativeDiagnosisID)
                  OR (
                         a.TentativeDiagnosisID IS NOT NULL
                         AND b.TentativeDiagnosisID IS NULL
                     )
                  OR (
                         a.TentativeDiagnosisID IS NULL
                         AND b.TentativeDiagnosisID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79660000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.FinalDiagnosisID,
                   a.FinalDiagnosisID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.FinalDiagnosisID <> b.FinalDiagnosisID)
                  OR (
                         a.FinalDiagnosisID IS NOT NULL
                         AND b.FinalDiagnosisID IS NULL
                     )
                  OR (
                         a.FinalDiagnosisID IS NULL
                         AND b.FinalDiagnosisID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79700000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.InitialCaseStatusTypeID,
                   a.InitialCaseStatusTypeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.InitialCaseStatusTypeID <> b.InitialCaseStatusTypeID)
                  OR (
                         a.InitialCaseStatusTypeID IS NOT NULL
                         AND b.InitialCaseStatusTypeID IS NULL
                     )
                  OR (
                         a.InitialCaseStatusTypeID IS NULL
                         AND b.InitialCaseStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855690000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.FinalCaseStatusTypeID,
                   a.FinalCaseStatusTypeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.FinalCaseStatusTypeID <> b.FinalCaseStatusTypeID)
                  OR (
                         a.FinalCaseStatusTypeID IS NOT NULL
                         AND b.FinalCaseStatusTypeID IS NULL
                     )
                  OR (
                         a.FinalCaseStatusTypeID IS NULL
                         AND b.FinalCaseStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855700000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SentByOfficeID,
                   a.SentByOfficeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SentByOfficeID <> b.SentByOfficeID)
                  OR (
                         a.SentByOfficeID IS NOT NULL
                         AND b.SentByOfficeID IS NULL
                     )
                  OR (
                         a.SentByOfficeID IS NULL
                         AND b.SentByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79640000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ReceivedByOfficeID,
                   a.ReceivedByOfficeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ReceivedByOfficeID <> b.ReceivedByOfficeID)
                  OR (
                         a.ReceivedByOfficeID IS NOT NULL
                         AND b.ReceivedByOfficeID IS NULL
                     )
                  OR (
                         a.ReceivedByOfficeID IS NULL
                         AND b.ReceivedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79620000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.InvestigatedByOfficeID,
                   a.InvestigatedByOfficeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.InvestigatedByOfficeID <> b.InvestigatedByOfficeID)
                  OR (
                         a.InvestigatedByOfficeID IS NOT NULL
                         AND b.InvestigatedByOfficeID IS NULL
                     )
                  OR (
                         a.InvestigatedByOfficeID IS NULL
                         AND b.InvestigatedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79630000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.PointGeoLocationID,
                   a.PointGeoLocationID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.PointGeoLocationID <> b.PointGeoLocationID)
                  OR (
                         a.PointGeoLocationID IS NOT NULL
                         AND b.PointGeoLocationID IS NULL
                     )
                  OR (
                         a.PointGeoLocationID IS NULL
                         AND b.PointGeoLocationID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855710000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.EpiObservationID,
                   a.EpiObservationID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.EpiObservationID <> b.EpiObservationID)
                  OR (
                         a.EpiObservationID IS NOT NULL
                         AND b.EpiObservationID IS NULL
                     )
                  OR (
                         a.EpiObservationID IS NULL
                         AND b.EpiObservationID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855720000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.CSObservationID,
                   a.CSObservationID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.CSObservationID <> b.CSObservationID)
                  OR (
                         a.CSObservationID IS NOT NULL
                         AND b.CSObservationID IS NULL
                     )
                  OR (
                         a.CSObservationID IS NULL
                         AND b.CSObservationID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855730000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.DeduplicationResultCaseID,
                   a.DeduplicationResultCaseID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.DeduplicationResultCaseID <> b.DeduplicationResultCaseID)
                  OR (
                         a.DeduplicationResultCaseID IS NOT NULL
                         AND b.DeduplicationResultCaseID IS NULL
                     )
                  OR (
                         a.DeduplicationResultCaseID IS NULL
                         AND b.DeduplicationResultCaseID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855740000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.NotificationDate,
                   a.NotificationDate,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.NotificationDate <> b.NotificationDate)
                  OR (
                         a.NotificationDate IS NOT NULL
                         AND b.NotificationDate IS NULL
                     )
                  OR (
                         a.NotificationDate IS NULL
                         AND b.NotificationDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79520000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.CompletionPaperFormDate,
                   a.CompletionPaperFormDate,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.CompletionPaperFormDate <> b.CompletionPaperFormDate)
                  OR (
                         a.CompletionPaperFormDate IS NOT NULL
                         AND b.CompletionPaperFormDate IS NULL
                     )
                  OR (
                         a.CompletionPaperFormDate IS NULL
                         AND b.CompletionPaperFormDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855750000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.FirstSoughtCareDate,
                   a.FirstSoughtCareDate,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.FirstSoughtCareDate <> b.FirstSoughtCareDate)
                  OR (
                         a.FirstSoughtCareDate IS NOT NULL
                         AND b.FirstSoughtCareDate IS NULL
                     )
                  OR (
                         a.FirstSoughtCareDate IS NULL
                         AND b.FirstSoughtCareDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79590000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ModificationDate,
                   a.ModificationDate,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ModificationDate <> b.ModificationDate)
                  OR (
                         a.ModificationDate IS NOT NULL
                         AND b.ModificationDate IS NULL
                     )
                  OR (
                         a.ModificationDate IS NULL
                         AND b.ModificationDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79570000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.HospitalizationDate,
                   a.HospitalizationDate,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.HospitalizationDate <> b.HospitalizationDate)
                  OR (
                         a.HospitalizationDate IS NOT NULL
                         AND b.HospitalizationDate IS NULL
                     )
                  OR (
                         a.HospitalizationDate IS NULL
                         AND b.HospitalizationDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79550000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.FacilityLastVisitDate,
                   a.FacilityLastVisitDate,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.FacilityLastVisitDate <> b.FacilityLastVisitDate)
                  OR (
                         a.FacilityLastVisitDate IS NOT NULL
                         AND b.FacilityLastVisitDate IS NULL
                     )
                  OR (
                         a.FacilityLastVisitDate IS NULL
                         AND b.FacilityLastVisitDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79540000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ExposureDate,
                   a.ExposureDate,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ExposureDate <> b.ExposureDate)
                  OR (
                         a.ExposureDate IS NOT NULL
                         AND b.ExposureDate IS NULL
                     )
                  OR (
                         a.ExposureDate IS NULL
                         AND b.ExposureDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79530000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.DischargeDate,
                   a.DischargeDate,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.DischargeDate <> b.DischargeDate)
                  OR (
                         a.DischargeDate IS NOT NULL
                         AND b.DischargeDate IS NULL
                     )
                  OR (
                         a.DischargeDate IS NULL
                         AND b.DischargeDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855760000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.OnSetDate,
                   a.OnSetDate,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.OnSetDate <> b.OnSetDate)
                  OR (
                         a.OnSetDate IS NOT NULL
                         AND b.OnSetDate IS NULL
                     )
                  OR (
                         a.OnSetDate IS NULL
                         AND b.OnSetDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79580000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.InvestigationStartDate,
                   a.InvestigationStartDate,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.InvestigationStartDate <> b.InvestigationStartDate)
                  OR (
                         a.InvestigationStartDate IS NOT NULL
                         AND b.InvestigationStartDate IS NULL
                     )
                  OR (
                         a.InvestigationStartDate IS NULL
                         AND b.InvestigationStartDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79600000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.TentativeDiagnosisDate,
                   a.TentativeDiagnosisDate,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.TentativeDiagnosisDate <> b.TentativeDiagnosisDate)
                  OR (
                         a.TentativeDiagnosisDate IS NOT NULL
                         AND b.TentativeDiagnosisDate IS NULL
                     )
                  OR (
                         a.TentativeDiagnosisDate IS NULL
                         AND b.TentativeDiagnosisDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79560000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.FinalDiagnosisDate,
                   a.FinalDiagnosisDate,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.FinalDiagnosisDate <> b.FinalDiagnosisDate)
                  OR (
                         a.FinalDiagnosisDate IS NOT NULL
                         AND b.FinalDiagnosisDate IS NULL
                     )
                  OR (
                         a.FinalDiagnosisDate IS NULL
                         AND b.FinalDiagnosisDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79840000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.Note,
                   a.Note,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.Note <> b.Note)
                  OR (
                         a.Note IS NOT NULL
                         AND b.Note IS NULL
                     )
                  OR (
                         a.Note IS NULL
                         AND b.Note IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79790000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.CurrentLocation,
                   a.CurrentLocation,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.CurrentLocation <> b.CurrentLocation)
                  OR (
                         a.CurrentLocation IS NOT NULL
                         AND b.CurrentLocation IS NULL
                     )
                  OR (
                         a.CurrentLocation IS NULL
                         AND b.CurrentLocation IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79810000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.HospitalizationPlace,
                   a.HospitalizationPlace,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.HospitalizationPlace <> b.HospitalizationPlace)
                  OR (
                         a.HospitalizationPlace IS NOT NULL
                         AND b.HospitalizationPlace IS NULL
                     )
                  OR (
                         a.HospitalizationPlace IS NULL
                         AND b.HospitalizationPlace IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79820000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.LocalIdentifier,
                   a.LocalIdentifier,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.LocalIdentifier <> b.LocalIdentifier)
                  OR (
                         a.LocalIdentifier IS NOT NULL
                         AND b.LocalIdentifier IS NULL
                     )
                  OR (
                         a.LocalIdentifier IS NULL
                         AND b.LocalIdentifier IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79910000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SoughtCareFacility,
                   a.SoughtCareFacility,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SoughtCareFacility <> b.SoughtCareFacility)
                  OR (
                         a.SoughtCareFacility IS NOT NULL
                         AND b.SoughtCareFacility IS NULL
                     )
                  OR (
                         a.SoughtCareFacility IS NULL
                         AND b.SoughtCareFacility IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79880000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SentByFirstName,
                   a.SentByFirstName,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SentByFirstName <> b.SentByFirstName)
                  OR (
                         a.SentByFirstName IS NOT NULL
                         AND b.SentByFirstName IS NULL
                     )
                  OR (
                         a.SentByFirstName IS NULL
                         AND b.SentByFirstName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79900000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SentByPatronymicName,
                   a.SentByPatronymicName,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SentByPatronymicName <> b.SentByPatronymicName)
                  OR (
                         a.SentByPatronymicName IS NOT NULL
                         AND b.SentByPatronymicName IS NULL
                     )
                  OR (
                         a.SentByPatronymicName IS NULL
                         AND b.SentByPatronymicName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79890000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SentByLastName,
                   a.SentByLastName,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SentByLastName <> b.SentByLastName)
                  OR (
                         a.SentByLastName IS NOT NULL
                         AND b.SentByLastName IS NULL
                     )
                  OR (
                         a.SentByLastName IS NULL
                         AND b.SentByLastName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79850000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ReceivedByFirstName,
                   a.ReceivedByFirstName,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ReceivedByFirstName <> b.ReceivedByFirstName)
                  OR (
                         a.ReceivedByFirstName IS NOT NULL
                         AND b.ReceivedByFirstName IS NULL
                     )
                  OR (
                         a.ReceivedByFirstName IS NULL
                         AND b.ReceivedByFirstName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79870000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ReceivedByPatronymicName,
                   a.ReceivedByPatronymicName,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ReceivedByPatronymicName <> b.ReceivedByPatronymicName)
                  OR (
                         a.ReceivedByPatronymicName IS NOT NULL
                         AND b.ReceivedByPatronymicName IS NULL
                     )
                  OR (
                         a.ReceivedByPatronymicName IS NULL
                         AND b.ReceivedByPatronymicName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79860000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ReceivedByLastName,
                   a.ReceivedByLastName,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ReceivedByLastName <> b.ReceivedByLastName)
                  OR (
                         a.ReceivedByLastName IS NOT NULL
                         AND b.ReceivedByLastName IS NULL
                     )
                  OR (
                         a.ReceivedByLastName IS NULL
                         AND b.ReceivedByLastName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79800000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.EpidemiologistsName,
                   a.EpidemiologistsName,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.EpidemiologistsName <> b.EpidemiologistsName)
                  OR (
                         a.EpidemiologistsName IS NOT NULL
                         AND b.EpidemiologistsName IS NULL
                     )
                  OR (
                         a.EpidemiologistsName IS NULL
                         AND b.EpidemiologistsName IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79830000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.NotCollectedReason,
                   a.NotCollectedReason,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.NotCollectedReason <> b.NotCollectedReason)
                  OR (
                         a.NotCollectedReason IS NOT NULL
                         AND b.NotCollectedReason IS NULL
                     )
                  OR (
                         a.NotCollectedReason IS NULL
                         AND b.NotCollectedReason IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79780000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ClinicalDiagnosis,
                   a.ClinicalDiagnosis,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ClinicalDiagnosis <> b.ClinicalDiagnosis)
                  OR (
                         a.ClinicalDiagnosis IS NOT NULL
                         AND b.ClinicalDiagnosis IS NULL
                     )
                  OR (
                         a.ClinicalDiagnosis IS NULL
                         AND b.ClinicalDiagnosis IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855770000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ClinicalNotes,
                   a.ClinicalNotes,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ClinicalNotes <> b.ClinicalNotes)
                  OR (
                         a.ClinicalNotes IS NOT NULL
                         AND b.ClinicalNotes IS NULL
                     )
                  OR (
                         a.ClinicalNotes IS NULL
                         AND b.ClinicalNotes IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   855780000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SummaryNotes,
                   a.SummaryNotes,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SummaryNotes <> b.SummaryNotes)
                  OR (
                         a.SummaryNotes IS NOT NULL
                         AND b.SummaryNotes IS NULL
                     )
                  OR (
                         a.SummaryNotes IS NULL
                         AND b.SummaryNotes IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79770000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.PatientAge,
                   a.PatientAge,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.PatientAge <> b.PatientAge)
                  OR (
                         a.PatientAge IS NOT NULL
                         AND b.PatientAge IS NULL
                     )
                  OR (
                         a.PatientAge IS NULL
                         AND b.PatientAge IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79490000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ClinicalDiagBasisIndicator,
                   a.ClinicalDiagBasisIndicator,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ClinicalDiagBasisIndicator <> b.ClinicalDiagBasisIndicator)
                  OR (
                         a.ClinicalDiagBasisIndicator IS NOT NULL
                         AND b.ClinicalDiagBasisIndicator IS NULL
                     )
                  OR (
                         a.ClinicalDiagBasisIndicator IS NULL
                         AND b.ClinicalDiagBasisIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79510000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.LabDiagBasisIndicator,
                   a.LabDiagBasisIndicator,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.LabDiagBasisIndicator <> b.LabDiagBasisIndicator)
                  OR (
                         a.LabDiagBasisIndicator IS NOT NULL
                         AND b.LabDiagBasisIndicator IS NULL
                     )
                  OR (
                         a.LabDiagBasisIndicator IS NULL
                         AND b.LabDiagBasisIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   79500000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.EpiDiagBasisIndicator,
                   a.EpiDiagBasisIndicator,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.EpiDiagBasisIndicator <> b.EpiDiagBasisIndicator)
                  OR (
                         a.EpiDiagBasisIndicator IS NOT NULL
                         AND b.EpiDiagBasisIndicator IS NULL
                     )
                  OR (
                         a.EpiDiagBasisIndicator IS NULL
                         AND b.EpiDiagBasisIndicator IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   4577910000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.PersonEnteredByID,
                   a.PersonEnteredByID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.PersonEnteredByID <> b.PersonEnteredByID)
                  OR (
                         a.PersonEnteredByID IS NOT NULL
                         AND b.PersonEnteredByID IS NULL
                     )
                  OR (
                         a.PersonEnteredByID IS NULL
                         AND b.PersonEnteredByID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   4578390000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SentByPersonID,
                   a.SentByPersonID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SentByPersonID <> b.SentByPersonID)
                  OR (
                         a.SentByPersonID IS NOT NULL
                         AND b.SentByPersonID IS NULL
                     )
                  OR (
                         a.SentByPersonID IS NULL
                         AND b.SentByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   4578400000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.ReceivedByPersonID,
                   a.ReceivedByPersonID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.ReceivedByPersonID <> b.ReceivedByPersonID)
                  OR (
                         a.ReceivedByPersonID IS NOT NULL
                         AND b.ReceivedByPersonID IS NULL
                     )
                  OR (
                         a.ReceivedByPersonID IS NULL
                         AND b.ReceivedByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   4578410000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.InvestigatedByPersonID,
                   a.InvestigatedByPersonID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.InvestigatedByPersonID <> b.InvestigatedByPersonID)
                  OR (
                         a.InvestigatedByPersonID IS NOT NULL
                         AND b.InvestigatedByPersonID IS NULL
                     )
                  OR (
                         a.InvestigatedByPersonID IS NULL
                         AND b.InvestigatedByPersonID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   4578420000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.TestsConductedTypeID,
                   a.TestsConductedTypeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.TestsConductedTypeID <> b.TestsConductedTypeID)
                  OR (
                         a.TestsConductedTypeID IS NOT NULL
                         AND b.TestsConductedTypeID IS NULL
                     )
                  OR (
                         a.TestsConductedTypeID IS NULL
                         AND b.TestsConductedTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12014650000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SoughtCareFacilityID,
                   a.SoughtCareFacilityID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SoughtCareFacilityID <> b.SoughtCareFacilityID)
                  OR (
                         a.SoughtCareFacilityID IS NOT NULL
                         AND b.SoughtCareFacilityID IS NULL
                     )
                  OR (
                         a.SoughtCareFacilityID IS NULL
                         AND b.SoughtCareFacilityID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12014660000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.NonNotifiableDiagnosisID,
                   a.NonNotifiableDiagnosisID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.NonNotifiableDiagnosisID <> b.NonNotifiableDiagnosisID)
                  OR (
                         a.NonNotifiableDiagnosisID IS NOT NULL
                         AND b.NonNotifiableDiagnosisID IS NULL
                     )
                  OR (
                         a.NonNotifiableDiagnosisID IS NULL
                         AND b.NonNotifiableDiagnosisID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12014670000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.NotCollectedReasonTypeID,
                   a.NotCollectedReasonTypeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.NotCollectedReasonTypeID <> b.NotCollectedReasonTypeID)
                  OR (
                         a.NotCollectedReasonTypeID IS NOT NULL
                         AND b.NotCollectedReasonTypeID IS NULL
                     )
                  OR (
                         a.NotCollectedReasonTypeID IS NULL
                         AND b.NotCollectedReasonTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12665410000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.OutbreakID,
                   a.OutbreakID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.OutbreakID <> b.OutbreakID)
                  OR (
                         a.OutbreakID IS NOT NULL
                         AND b.OutbreakID IS NULL
                     )
                  OR (
                         a.OutbreakID IS NULL
                         AND b.OutbreakID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12665420000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.EnteredDate,
                   a.EnteredDate,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.EnteredDate <> b.EnteredDate)
                  OR (
                         a.EnteredDate IS NOT NULL
                         AND b.EnteredDate IS NULL
                     )
                  OR (
                         a.EnteredDate IS NULL
                         AND b.EnteredDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12665430000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.CaseID,
                   a.CaseID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.CaseID <> b.CaseID)
                  OR (
                         a.CaseID IS NOT NULL
                         AND b.CaseID IS NULL
                     )
                  OR (
                         a.CaseID IS NULL
                         AND b.CaseID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12665440000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.CaseProgressStatusTypeID,
                   a.CaseProgressStatusTypeID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.CaseProgressStatusTypeID <> b.CaseProgressStatusTypeID)
                  OR (
                         a.CaseProgressStatusTypeID IS NOT NULL
                         AND b.CaseProgressStatusTypeID IS NULL
                     )
                  OR (
                         a.CaseProgressStatusTypeID IS NULL
                         AND b.CaseProgressStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12665450000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.SampleNotes,
                   a.SampleNotes,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.SampleNotes <> b.SampleNotes)
                  OR (
                         a.SampleNotes IS NOT NULL
                         AND b.SampleNotes IS NULL
                     )
                  OR (
                         a.SampleNotes IS NULL
                         AND b.SampleNotes IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   12665460000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.OfflineCaseID,
                   a.OfflineCaseID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.OfflineCaseID <> b.OfflineCaseID)
                  OR (
                         a.OfflineCaseID IS NOT NULL
                         AND b.OfflineCaseID IS NULL
                     )
                  OR (
                         a.OfflineCaseID IS NULL
                         AND b.OfflineCaseID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   51389570000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.FinalCaseClassificationDate,
                   a.FinalCaseClassificationDate,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.FinalCaseClassificationDate <> b.FinalCaseClassificationDate)
                  OR (
                         a.FinalCaseClassificationDate IS NOT NULL
                         AND b.FinalCaseClassificationDate IS NULL
                     )
                  OR (
                         a.FinalCaseClassificationDate IS NULL
                         AND b.FinalCaseClassificationDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   51523420000000,
                   a.HumanDiseaseReportID,
                   NULL,
                   b.HospitalID,
                   a.HospitalID,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE (a.HospitalID <> b.HospitalID)
                  OR (
                         a.HospitalID IS NOT NULL
                         AND b.HospitalID IS NULL
                     )
                  OR (
                         a.HospitalID IS NULL
                         AND b.HospitalID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailRestore
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                idfObjectDetail, 
                AuditCreateUser
            )
            SELECT @DataAuditEventId,
                   @ObjectTableID,
                   a.HumanDiseaseReportID,
                   NULL,
                   @AuditUser
            FROM @HumanDiseaseReportAfterEdit AS a
                FULL JOIN @HumanDiseaseReportBeforeEdit AS b
                    ON a.HumanDiseaseReportID = b.HumanDiseaseReportID
            WHERE a.RowStatus = 0
                  AND b.RowStatus = 1;
        -- End data audit
        END

        -- Set samples
        IF @SamplesParameters IS NOT NULL
        BEGIN
            WHILE EXISTS (SELECT * FROM @SamplesTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = SampleID,
                    @SampleID = SampleID,
                    @SampleTypeID = SampleTypeID,
                    @CollectedByPersonID = CollectedByPersonID,
                    @CollectedByOrganizationID = CollectedByOrganizationID,
                    @CollectionDate = CAST(CollectionDate AS DATETIME),
                    @SentDate = CAST(SentDate AS DATETIME),
                    @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                    @SampleStatusTypeID = SampleStatusTypeID,
                    @Comments = Comments,
                    @idfsSite = SiteID,
                    @CurrentSiteID = CurrentSiteID,
                    @RowStatus = RowStatus,
                    @SentToOrganizationID = SentToOrganizationID,
                    @DiseaseID = DiseaseID,
                    @ReadOnlyIndicator = ReadOnlyIndicator,
                    @HumanID = HumanID,
                    @HumanMasterID = HumanMasterID,
                    @RowAction = RowAction
                FROM @SamplesTemp;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_SAMPLES_SET @AuditUserName = @AuditUser,
                                                 @DataAuditEventID = @DataAuditEventID,
                                                 @SampleID = @SampleID OUTPUT,
                                                 @SampleTypeID = @SampleTypeID,
                                                 @RootSampleID = NULL,
                                                 @ParentSampleID = NULL,
                                                 @HumanID = @idfHuman,
                                                 @SpeciesID = NULL,
                                                 @AnimalID = NULL,
                                                 @VectorID = NULL,
                                                 @MonitoringSessionID = @idfParentMonitoringSession,
                                                 @VectorSessionID = NULL,
                                                 @HumanDiseaseReportID = @idfHumanCase,
                                                 @VeterinaryDiseaseReportID = NULL,
                                                 @CollectionDate = @CollectionDate,
                                                 @CollectedByPersonID = @CollectedByPersonID,
                                                 @CollectedByOrganizationID = @CollectedByOrganizationID,
                                                 @SentDate = @SentDate,
                                                 @SentToOrganizationID = @SentToOrganizationID,
                                                 @EIDSSLocalFieldSampleID = @EIDSSLocalOrFieldSampleID,
                                                 @SiteID = @idfsSite,
                                                 @EnteredDate = @DateEntered,
                                                 @ReadOnlyIndicator = @ReadOnlyIndicator,
                                                 @SampleStatusTypeID = @SampleStatusTypeID,
                                                 @Comments = @Comments,
                                                 @CurrentSiteID = @CurrentSiteID,
                                                 @DiseaseID = @DiseaseID,
                                                 @BirdStatusTypeID = NULL,
                                                 @RowStatus = @RowStatus,
                                                 @RowAction = @RowAction

                UPDATE @TestsTemp
                SET SampleID = @SampleID
                WHERE SampleID = @RowID

                DELETE FROM @SamplesTemp
                WHERE SampleID = @RowID
            END
        END
        IF @TestsParameters IS NOT NULL
        BEGIN
            WHILE EXISTS (SELECT * FROM @TestsTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = TestID,
                    @TestID = TestID,
                    @TestNameTypeID = TestNameTypeID,
                    @TestCategoryTypeID = TestCategoryTypeID,
                    @TestResultTypeID = TestResultTypeID,
                    @TestStatusTypeID = TestStatusTypeID,
                    @DiseaseID = DiseaseID,
                    @SampleID = SampleID,
                    @Comments = Comments,
                    @RowStatus = RowStatus,
                    @StartedDate = StartedDate,
                    @ResultDate = ResultDate,
                    @TestedByOrganizationID = TestedByOrganizationID,
                    @TestedByPersonID = TestedByPersonID,
                    @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                    @ResultEnteredByPersonID = ResultEnteredByPersonID,
                    @ValidatedByOrganizationID = ValidatedByOrganizationID,
                    @ValidatedByPersonID = ValidatedByPersonID,
                    @ReadOnlyIndicator = ReadOnlyIndicator,
                    @NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
                    @ExternalTestIndicator = ExternalTestIndicator,
                    @PerformedByOrganizationID = PerformedByOrganizationID,
                    @ReceivedDate = ReceivedDate,
                    @ContactPersonName = ContactPersonName,
                    @RowAction = RowAction
                FROM @TestsTemp;

                -- If the record is being soft-@HumanDiseaseReportAfterEdit, then check if the test record was originally created 
                -- in the laboaratory module.  If it was, then disassociate the test record from the 
                -- human disease report, so that the test record remains in the laboratory module 
                -- for further action.
                SET @TestHumanCaseID = @idfHumanCase;

                -- If @HumanDiseaseReportAfterEdit and it's a disease report entered test, then just soft-delete the test.
                IF @RowStatus = 1
                   AND @NonLaboratoryTestIndicator = 1
                BEGIN
                    SET @RowStatus = 1;
                END

                -- If @HumanDiseaseReportAfterEdit and it's a laboratory module entered test, then just disassociate from the disease report.
                ELSE IF (@RowStatus = 1 AND @NonLaboratoryTestIndicator = 0)
                BEGIN
                    SET @RowStatus = 0;
                    SET @TestHumanCaseID = NULL;
                END;

                -- Set tests
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_TESTS_SET @LanguageID = @LanguageID,
                                               @TestID = @TestID OUTPUT,
                                               @TestNameTypeID = @TestNameTypeID,
                                               @TestCategoryTypeID = @TestCategoryTypeID,
                                               @TestResultTypeID = @TestResultTypeID,
                                               @TestStatusTypeID = @TestStatusTypeID,
                                               @DiseaseID = @DiseaseID,
                                               @SampleID = @SampleID,
                                               @BatchTestID = NULL,
                                               @ObservationID = NULL,
                                               @TestNumber = NULL,
                                               @Comments = @Comments,
                                               @RowStatus = @RowStatus,
                                               @StartedDate = @StartedDate,
                                               @ResultDate = @ResultDate,
                                               @TestedByOrganizationID = @TestedByOrganizationID,
                                               @TestedByPersonID = @TestedByPersonID,
                                               @ResultEnteredByOrganizationID = @ResultEnteredByOrganizationID,
                                               @ResultEnteredByPersonID = @ResultEnteredByPersonID,
                                               @ValidatedByOrganizationID = @ValidatedByOrganizationID,
                                               @ValidatedByPersonID = @ValidatedByPersonID,
                                               @ReadOnlyIndicator = @ReadOnlyIndicator,
                                               @NonLaboratoryTestIndicator = @NonLaboratoryTestIndicator,
                                               @ExternalTestIndicator = @ExternalTestIndicator,
                                               @PerformedByOrganizationID = @PerformedByOrganizationID,
                                               @ReceivedDate = @ReceivedDate,
                                               @ContactPerson = @ContactPersonName,
                                               @MonitoringSessionID = @idfParentMonitoringSession,
                                               @VectorSessionID = NULL,
                                               @HumanDiseaseReportID = @TestHumanCaseID,
                                               @VeterinaryDiseaseReportID = NULL,
                                               @AuditUserName = @AuditUser,
                                               @DataAuditEventID = @DataAuditEventID,
                                               @RowAction = @RowAction;

                UPDATE @TestsInterpretationParametersTemp
                SET TestID = @TestID
                WHERE TestID = @RowID;

                DELETE FROM @TestsTemp
                WHERE TestID = @RowID;
            END;
        END

        DECLARE @SampleCount INT;
        SET @SampleCount =
        (
            SELECT Count(*)
            FROM dbo.tlbMaterial
            WHERE intRowStatus = 0
                  and idfHumanCase = @idfHumanCase
        );

        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase
                  AND idfsYNSpecimenCollected = 10100002
        )
        BEGIN
            UPDATE dbo.tlbMaterial
            SET intRowStatus = 1,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @idfHumanCase;
        END
        ELSE IF EXISTS
        (
            SELECT *
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase
                  AND idfsYNSpecimenCollected = 10100003
        )
        BEGIN
            UPDATE dbo.tlbHumanCase
            Set idfsNotCollectedReason = NULL,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @idfHumanCase;

            UPDATE dbo.tlbMaterial
            SET intRowStatus = 1,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @idfHumanCase;
        END
        ELSE IF EXISTS
        (
            SELECT *
            FROM dbo.tlbHumanCase
            WHERE idfHumanCase = @idfHumanCase
                  AND idfsYNSpecimenCollected = 10100001
        )
        BEGIN
            UPDATE dbo.tlbHumanCase
            SET idfsNotCollectedReason = NULL,
                AuditUpdateUser = @AuditUser
            WHERE idfHumanCase = @idfHumanCase;
            IF (@SampleCount = 0)
            BEGIN
                UPDATE dbo.tlbHumanCase
                SET idfsYNSpecimenCollected = NULL,
                    AuditUpdateUser = @AuditUser
                WHERE idfHumanCase = @idfHumanCase;
            END
        END

        -- Set test interpretations
        IF @TestsInterpretationParameters IS NOT NULL
        BEGIN
            WHILE EXISTS (SELECT * FROM @TestsInterpretationParametersTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = TestInterpretationID,
                    @TestInterpretationID = TestInterpretationID,
                    @DiseaseID = DiseaseID,
                    @InterpretedStatusTypeID = InterpretedStatusTypeID,
                    @ValidatedByOrganizationID = ValidatedByOrganizationID,
                    @ValidatedByPersonID = ValidatedByPersonID,
                    @InterpretedByOrganizationID = InterpretedByOrganizationID,
                    @InterpretedByPersonID = InterpretedByPersonID,
                    @TestID = TestID,
                    @ValidatedStatusIndicator = ValidatedStatusIndicator,
                    @ReportSessionCreatedIndicator = ReportSessionCreatedIndicator,
                    @ValidatedComment = ValidatedComment,
                    @InterpretedComment = InterpretedComment,
                    @ValidatedDate = ValidatedDate,
                    @InterpretedDate = InterpretedDate,
                    @RowStatus = RowStatus,
                    @ReadOnlyIndicator = ReadOnlyIndicator,
                    @RowAction = RowAction
                FROM @TestsInterpretationParametersTemp;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_TEST_INTERPRETATIONS_SET @AuditUser,
                                                              @DataAuditEventID,
                                                              @TestInterpretationID OUTPUT,
                                                              @DiseaseID,
                                                              @InterpretedStatusTypeID,
                                                              @ValidatedByOrganizationID,
                                                              @ValidatedByPersonID,
                                                              @InterpretedByOrganizationID,
                                                              @InterpretedByPersonID,
                                                              @TestID,
                                                              @ValidatedStatusIndicator,
                                                              @ReportSessionCreatedIndicator,
                                                              @ValidatedComment,
                                                              @InterpretedComment,
                                                              @ValidatedDate,
                                                              @InterpretedDate,
                                                              @RowStatus,
                                                              @ReadOnlyIndicator,
                                                              @RowAction;

                DELETE FROM @TestsInterpretationParametersTemp
                WHERE TestInterpretationID = @RowID;
            END;
        END

        -- Set events
        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                            @EventTypeId,
                                            @EventUserId,
                                            @EventObjectId,
                                            @EventDiseaseId,
                                            @EventSiteId,
                                            @EventInformationString,
                                            @EventLoginSiteId,
                                            @EventLocationId,
                                            @AuditUser;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        -- Set anti-viral therapies
        IF @AntiviralTherapiesParameters IS NOT NULL
        BEGIN
            EXEC dbo.USSP_HUM_ANTIVIRAL_THERAPIES_SET @idfHumanCase,
                                                      @AntiviralTherapiesParameters,
                                                      0,
                                                      @AuditUser,
                                                      @DataAuditEventID;
        END

        -- Set vaccinations
        IF @VaccinationsParameters IS NOT NULL
        BEGIN
            EXEC dbo.USSP_HUMAN_DISEASE_VACCINATIONS_SET @idfHumanCase = @idfHumanCase,
                                                         @VaccinationsParameters = @VaccinationsParameters,
                                                         @outbreakCall = 0,
                                                         @User = @AuditUser;
        END

        -- Set contacts
        IF @ContactsParameters IS NOT NULL
        BEGIN
            EXEC USSP_GBL_CONTACT_SET @Contacts = @ContactsParameters,
                                      @SiteID = @CurrentSiteID,
                                      @AuditUSerName = @AuditUser,
                                      @idfHumanCase = @idfHumanCase;
        END

        -- Update the human record if a date of death is provided.
        IF @datDateofDeath IS NOT NULL
        BEGIN
            UPDATE dbo.tlbHuman
            SET datDateofDeath = @datDateofDeath,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUser
            WHERE idfHuman = @idfHuman;
        END

        -- Update the connected test record if a connected test ID is provided.
        IF @ConnectedTestId IS NOT NULL
        BEGIN
            SELECT @DiseaseID = T.idfsDiagnosis,
                   @HumanMasterID = HA.idfHumanActual,
                   @idfMaterial = T.idfMaterial
            FROM dbo.tlbTesting T
                INNER JOIN dbo.tlbMaterial M
                    ON M.idfMaterial = T.idfMaterial
                INNER JOIN dbo.tlbHuman H
                    ON H.idfHuman = M.idfHuman
                INNER JOIN dbo.tlbHumanActual HA
                    ON HA.idfHumanActual = H.idfHumanActual
            WHERE T.idfTesting = @ConnectedTestId;

            UPDATE dbo.tlbTesting
            SET dbo.tlbTesting.idfHumanCase = @idfHumanCase,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUser
            FROM dbo.tlbTesting T
                INNER JOIN dbo.tlbMaterial M
                    ON M.idfMaterial = T.idfMaterial
                INNER JOIN dbo.tlbHuman H
                    ON H.idfHuman = M.idfHuman
                INNER JOIN dbo.tlbHumanActual HA
                    ON HA.idfHumanActual = H.idfHumanActual
            WHERE T.idfsDiagnosis = @DiseaseID
                  AND HA.idfHumanActual = @HumanMasterID
                  AND T.idfMaterial = @idfMaterial;
        END

        IF @@TRANCOUNT > 0
            COMMIT TRAN;

        SELECT @ReturnCode 'ReturnCode',
               @ReturnMessage 'ReturnMessage',
               @idfHumanCase 'idfHumanCase',
               @strHumanCaseID 'strHumanCaseID',
               @idfHuman 'idfHuman';
    END TRY
    BEGIN CATCH
        SELECT @ReturnCode 'ReturnCode',
               @ReturnMessage 'ReturnMessage',
               @idfHumanCase 'idfHumanCase',
               @strHumanCaseID 'strHumanCaseID',
               @idfHuman 'idfHuman';

        IF @@TRANCOUNT > 0
            ROLLBACK TRAN;

        THROW;
    END CATCH
END
GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_DEDUPLICATION_PERSON_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_DEDUPLICATION_PERSON_SET]';


GO
PRINT N'Update complete.';


GO
