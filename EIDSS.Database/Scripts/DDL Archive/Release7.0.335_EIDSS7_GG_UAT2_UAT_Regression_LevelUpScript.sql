/*
Deployment script for EIDSS7_GG_UAT2

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO

/*
The column idfsSite on table [dbo].[tstAggrSetting] must be changed from NULL to NOT NULL. If the table contains data, the ALTER script may not work. To avoid this issue, you must add values to this column for all rows or mark it as allowing NULL values, or enable the generation of smart-defaults as a deployment option.
*/

--IF EXISTS (select top 1 1 from [dbo].[tstAggrSetting])
--    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

--GO

update tstAggrSetting
set idfsSite = 1100 
where idfsSite is NULL
and idfCustomizationPackage = 51577430000000
GO

PRINT N'Dropping Trigger [dbo].[TR_tstAggrSetting_I_Delete]...';


GO
DROP TRIGGER [dbo].[TR_tstAggrSetting_I_Delete];


GO
PRINT N'Dropping Default Constraint [dbo].[Def_0_2023]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] DROP CONSTRAINT [Def_0_2023];


GO
PRINT N'Dropping Default Constraint [dbo].[DF_tstAggrSetting_CreateDTM]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] DROP CONSTRAINT [DF_tstAggrSetting_CreateDTM];


GO
PRINT N'Dropping Default Constraint [dbo].[newid__2026]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] DROP CONSTRAINT [newid__2026];


GO
PRINT N'Dropping Default Constraint unnamed constraint on [Migr70].[DisabledForeignKeys]...';


GO
ALTER TABLE [Migr70].[DisabledForeignKeys] DROP CONSTRAINT [DF__DisabledF__FK_DI__4596A07C];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tlbOffice_tlbGeoLocationShared]...';


GO
ALTER TABLE [dbo].[tlbOffice] DROP CONSTRAINT [FK_tlbOffice_tlbGeoLocationShared];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference__idfsStatisticAreaType_R_1612]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] DROP CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsStatisticAreaType_R_1612];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference__idfsStatisticPeriodType_R_1613]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] DROP CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsStatisticPeriodType_R_1613];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] DROP CONSTRAINT [FK_tstAggrSetting_trtBaseReference_SourceSystemNameID];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstAggrSetting_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] DROP CONSTRAINT [FK_tstAggrSetting_tstCustomizationPackage__idfCustomizationPackage];


GO
PRINT N'Dropping Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference__idfsAggrCaseType_R_941]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] DROP CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsAggrCaseType_R_941];


GO

PRINT N'Starting rebuilding table [dbo].[tstAggrSetting]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_tstAggrSetting] (
    [idfsAggrCaseType]        BIGINT           NOT NULL,
    [idfCustomizationPackage] BIGINT           NOT NULL,
    [idfsStatisticAreaType]   BIGINT           NOT NULL,
    [idfsStatisticPeriodType] BIGINT           NOT NULL,
    [strValue]                NVARCHAR (200)   NULL,
    [intRowStatus]            INT              CONSTRAINT [Def_0_2023] DEFAULT ((0)) NOT NULL,
    [rowguid]                 UNIQUEIDENTIFIER CONSTRAINT [newid__2026] DEFAULT (newid()) ROWGUIDCOL NOT NULL,
    [SourceSystemNameID]      BIGINT           NULL,
    [SourceSystemKeyValue]    NVARCHAR (MAX)   NULL,
    [AuditCreateUser]         NVARCHAR (200)   NULL,
    [AuditCreateDTM]          DATETIME         CONSTRAINT [DF_tstAggrSetting_CreateDTM] DEFAULT (getdate()) NULL,
    [AuditUpdateUser]         NVARCHAR (200)   NULL,
    [AuditUpdateDTM]          DATETIME         NULL,
    [idfsSite]                BIGINT           NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_XPKtstAggrSetting1] PRIMARY KEY CLUSTERED ([idfsAggrCaseType] ASC, [idfCustomizationPackage] ASC, [idfsSite] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[tstAggrSetting])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_tstAggrSetting] ([idfsAggrCaseType], [idfCustomizationPackage], [idfsSite], [idfsStatisticAreaType], [idfsStatisticPeriodType], [strValue], [intRowStatus], [rowguid], [SourceSystemNameID], [SourceSystemKeyValue], [AuditCreateUser], [AuditCreateDTM], [AuditUpdateUser], [AuditUpdateDTM])
        SELECT   [idfsAggrCaseType],
                 [idfCustomizationPackage],
                 [idfsSite],
                 [idfsStatisticAreaType],
                 [idfsStatisticPeriodType],
                 [strValue],
                 [intRowStatus],
                 [rowguid],
                 [SourceSystemNameID],
                 [SourceSystemKeyValue],
                 [AuditCreateUser],
                 [AuditCreateDTM],
                 [AuditUpdateUser],
                 [AuditUpdateDTM]
        FROM     [dbo].[tstAggrSetting]
        ORDER BY [idfsAggrCaseType] ASC, [idfCustomizationPackage] ASC, [idfsSite] ASC;
    END

DROP TABLE [dbo].[tstAggrSetting];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_tstAggrSetting]', N'tstAggrSetting';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_XPKtstAggrSetting1]', N'XPKtstAggrSetting', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbOffice_tlbGeoLocationShared]...';


GO
ALTER TABLE [dbo].[tlbOffice] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbOffice_tlbGeoLocationShared] FOREIGN KEY ([idfLocation]) REFERENCES [dbo].[tlbGeoLocationShared] ([idfGeoLocationShared]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference__idfsStatisticAreaType_R_1612]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] WITH NOCHECK
    ADD CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsStatisticAreaType_R_1612] FOREIGN KEY ([idfsStatisticAreaType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference__idfsStatisticPeriodType_R_1613]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] WITH NOCHECK
    ADD CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsStatisticPeriodType_R_1613] FOREIGN KEY ([idfsStatisticPeriodType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] WITH NOCHECK
    ADD CONSTRAINT [FK_tstAggrSetting_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstAggrSetting_tstCustomizationPackage__idfCustomizationPackage]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] WITH NOCHECK
    ADD CONSTRAINT [FK_tstAggrSetting_tstCustomizationPackage__idfCustomizationPackage] FOREIGN KEY ([idfCustomizationPackage]) REFERENCES [dbo].[tstCustomizationPackage] ([idfCustomizationPackage]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstAggrSetting_trtBaseReference__idfsAggrCaseType_R_941]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] WITH NOCHECK
    ADD CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsAggrCaseType_R_941] FOREIGN KEY ([idfsAggrCaseType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tstAggrSetting_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tstAggrSetting] WITH NOCHECK
    ADD CONSTRAINT [FK_tstAggrSetting_tstSite_idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_AccessRule_trtBaseReference]...';


GO
ALTER TABLE [dbo].[AccessRule] WITH NOCHECK
    ADD CONSTRAINT [FK_AccessRule_trtBaseReference] FOREIGN KEY ([AccessRuleID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_EventSubscription_tstUserTable]...';


GO
ALTER TABLE [dbo].[EventSubscription] WITH NOCHECK
    ADD CONSTRAINT [FK_EventSubscription_tstUserTable] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_gisWHOMap_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[gisWHOMap] WITH NOCHECK
    ADD CONSTRAINT [FK_gisWHOMap_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_idfsLocation_gisLocation]...';


GO
ALTER TABLE [dbo].[gisWHOMap] WITH NOCHECK
    ADD CONSTRAINT [FK_idfsLocation_gisLocation] FOREIGN KEY ([idfsLocation]) REFERENCES [dbo].[gisLocation] ([idfsLocation]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupEIDSSMenuToEventType_BaseRef_MenuID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenuToEventType] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupEIDSSMenuToEventType_BaseRef_MenuID] FOREIGN KEY ([EIDSSMenuID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupEIDSSMenuToEventType_EventType_idfsEventTypeId]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenuToEventType] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupEIDSSMenuToEventType_EventType_idfsEventTypeId] FOREIGN KEY ([EventTypeID]) REFERENCES [dbo].[trtEventType] ([idfsEventTypeID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_LkupEIDSSMenuToEventType_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[LkupEIDSSMenuToEventType] WITH NOCHECK
    ADD CONSTRAINT [FK_LkupEIDSSMenuToEventType_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tauPINAuditEvent_tstUserTable]...';


GO
ALTER TABLE [dbo].[tauPINAuditEvent] WITH NOCHECK
    ADD CONSTRAINT [FK_tauPINAuditEvent_tstUserTable] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGridDefinition_trtBaseReference_SourceSystemNameID]...';


GO
ALTER TABLE [dbo].[tlbGridDefinition] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGridDefinition_trtBaseReference_SourceSystemNameID] FOREIGN KEY ([SourceSystemNameID]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGridDefinition_tstSite_idfsSite]...';


GO
ALTER TABLE [dbo].[tlbGridDefinition] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGridDefinition_tstSite_idfsSite] FOREIGN KEY ([idfsSite]) REFERENCES [dbo].[tstSite] ([idfsSite]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbGridDefinition_tstUserTable_idfUserID]...';


GO
ALTER TABLE [dbo].[tlbGridDefinition] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbGridDefinition_tstUserTable_idfUserID] FOREIGN KEY ([idfUserID]) REFERENCES [dbo].[tstUserTable] ([idfUserID]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSession_idfsMonitoringSessionSpeciesType]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSession] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSession_idfsMonitoringSessionSpeciesType] FOREIGN KEY ([idfsMonitoringSessionSpeciesType]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbMonitoringSessionToMaterial_trtBaseReference]...';


GO
ALTER TABLE [dbo].[tlbMonitoringSessionToMaterial] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbMonitoringSessionToMaterial_trtBaseReference] FOREIGN KEY ([idfsDisease]) REFERENCES [dbo].[trtDiagnosis] ([idfsDiagnosis]) NOT FOR REPLICATION;


GO
PRINT N'Creating Foreign Key [dbo].[FK_tlbSpecies_OutbreakCaseStatus]...';


GO
ALTER TABLE [dbo].[tlbSpecies] WITH NOCHECK
    ADD CONSTRAINT [FK_tlbSpecies_OutbreakCaseStatus] FOREIGN KEY ([idfsOutbreakCaseStatus]) REFERENCES [dbo].[trtBaseReference] ([idfsBaseReference]);


GO
PRINT N'Altering Function [dbo].[FN_GBL_TriggersWork]...';


GO

ALTER	FUNCTION [dbo].[FN_GBL_TriggersWork] ()
RETURNS BIT
AS
BEGIN
RETURN 1
--RETURN 0
END
GO
PRINT N'Creating Trigger [dbo].[TR_tstAggrSetting_A_Update]...';


GO

CREATE TRIGGER [dbo].[TR_tstAggrSetting_A_Update] ON [dbo].[tstAggrSetting]
FOR UPDATE
NOT FOR REPLICATION
AS
BEGIN

	IF (dbo.FN_GBL_TriggersWork() = 1 AND (UPDATE([idfsAggrCaseType]) OR UPDATE([idfCustomizationPackage])))  -- update to Primary Key is not allowed.
	BEGIN
		RAISERROR('Update Trigger: Not allowed to update PK.',16,1);
		ROLLBACK TRANSACTION;
	END

END
GO
PRINT N'Creating Trigger [dbo].[TR_tstAggrSetting_I_Delete]...';


GO


CREATE TRIGGER [dbo].[TR_tstAggrSetting_I_Delete] on [dbo].[tstAggrSetting]
INSTEAD OF DELETE
NOT FOR REPLICATION
AS
BEGIN

	IF (dbo.FN_GBL_TriggersWork() = 1)
	BEGIN

		WITH cteOnlyDeletedRecords([idfsAggrCaseType], [idfCustomizationPackage]) as
		(
			SELECT [idfsAggrCaseType], [idfCustomizationPackage] FROM deleted
			EXCEPT
			SELECT [idfsAggrCaseType], [idfCustomizationPackage] FROM inserted
		)

		UPDATE a
		SET  intRowStatus = 1
		FROM dbo.tstAggrSetting as a 
		INNER JOIN cteOnlyDeletedRecords as b 
			ON a.idfsAggrCaseType = b.idfsAggrCaseType
			AND a.idfCustomizationPackage = b.idfCustomizationPackage;

	END

END
GO
PRINT N'Refreshing Function [Report].[FN_AggregateSettings_GET]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[FN_AggregateSettings_GET]';


GO
PRINT N'Refreshing Function [dbo].[fnAggregateSettings]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[fnAggregateSettings]';


GO
PRINT N'Refreshing Function [Report].[FN_GBL_AggregateSettings_GET]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[FN_GBL_AggregateSettings_GET]';


GO
PRINT N'Altering Function [Report].[FN_GBL_AdressAsRow]...';


GO

--=====================================================================================================
-- Created by:				Mark Wilson
-- Description:				06/21/2017: check usp_HumanCaseDeduplication_GetDetail call this  V7 USP77: 
--                          Selects data from these tables: tlbGeoLocation(triggers);gisSettlement(triggers);
--							02/03/2023: Updated by Srini Goli To Improve performance 60B Genral Report
/*
----testing code:
select * from report.FN_GBL_AdressAsRow('ka')
*/
--=====================================================================================================
ALTER FUNCTION [Report].[FN_GBL_AdressAsRow](@LangID NVARCHAR(50))
RETURNS TABLE
AS
RETURN(

SELECT		tlbGeoLocation.idfGeoLocation,
			ISNULL(Country.[name], '') AS Country,
			ISNULL(Region.[name], '') AS Region,
			ISNULL(Rayon.[name], '') AS Rayon,
			ISNULL(tlbGeoLocation.strPostCode, '') AS PostalCode,
			ISNULL(SettlementType.[name], '') AS SettlementType,
			ISNULL(Settlement.[name], '') AS Settlement,
			ISNULL(tlbGeoLocation.strStreetName, '') AS Street,
			ISNULL(tlbGeoLocation.strHouse, '') AS House,
			ISNULL(tlbGeoLocation.strBuilding, '') AS Building,
			ISNULL(tlbGeoLocation.strApartment, '') AS Appartment,
			blnForeignAddress,
			ISNULL(tlbGeoLocation.strForeignAddress, '') AS strForeignAddress


FROM		(
		tlbGeoLocation 

		LEFT JOIN	dbo.FN_GBL_GIS_ReferenceRepair(@LangID,19000001 ) Country ON Country.idfsReference = tlbGeoLocation.idfsCountry
		LEFT JOIN	dbo.FN_GBL_GIS_ReferenceRepair(@LangID, 19000003) Region ON	Region.idfsReference = tlbGeoLocation.idfsRegion
		LEFT JOIN	dbo.FN_GBL_GIS_ReferenceRepair(@LangID, 19000002) Rayon ON Rayon.idfsReference = tlbGeoLocation.idfsRayon
		LEFT JOIN	dbo.FN_GBL_GIS_ReferenceRepair(@LangID, 19000004) Settlement ON	Settlement.idfsReference = tlbGeoLocation.idfsSettlement

		LEFT JOIN	dbo.FN_GBL_ReferenceRepair(@LangID, 19000038) GroundType ON GroundType.idfsReference = tlbGeoLocation.idfsGroundType
	)
	LEFT JOIN	(
		gisSettlement 
		INNER JOIN dbo.FN_GBL_GIS_ReferenceRepair(@LangID, 19000005) SettlementType	ON SettlementType.idfsReference = gisSettlement.idfsSettlementType
	)ON			gisSettlement.idfsSettlement = tlbGeoLocation.idfsSettlement

WHERE		tlbGeoLocation.intRowStatus = 0

)
GO
PRINT N'Altering Function [Report].[FN_REP_HumanCaseForAge_Get]...';


GO
--*************************************************************************************************
-- Name 				: FN_REP_HumanCaseForAge_Get
-- Description			: Returns Table of Human Cases for Age 
--                        span and dates  
--						
-- Author               : Mark Wilson
-- Revision History
-- June 2019 updated E6 code to E7 standards
--
--		Name       Date       Change Detail
-- --------------- ---------- --------------------------------------------------------------------
-- Stephen Long    01/31/2023 Fix for bug 5455.
--
-- Testing code:
-- SELECT * FROM report.FN_REP_HumanCaseForAge_Get (2009-01-01, '2011-01-01', 1, 100, NULL)
--
--*************************************************************************************************
ALTER FUNCTION [Report].[FN_REP_HumanCaseForAge_Get]
(
	@StartDate AS DATETIME, 
	@EndDate AS DATETIME,
	@StartAge AS INT,
	@EndAge AS INT,
	@FinalState AS BIGINT = NULL
)
RETURNS TABLE
AS

RETURN
	SELECT 
		COALESCE(HC.idfsFinalDiagnosis, HC.idfsTentativeDiagnosis) AS idfsDiagnosis,
		COUNT(HC.idfHumanCase) AS intCount
	FROM dbo.tlbHumanCase HC
         LEFT JOIN dbo.tlbGeoLocation cgl
              ON HC.idfPointGeoLocation = cgl.idfGeoLocation
                   AND cgl.intRowStatus = 0 -- added by MCW to ensure non-foreign address
	WHERE (COALESCE(HC.datOnsetDate, HC.datFinalDiagnosisDate, HC.datTentativeDiagnosisDate, HC.datNotificationDate, HC.datEnteredDate) >= @StartDate AND 
	    COALESCE(HC.datOnsetDate, HC.datFinalDiagnosisDate, HC.datTentativeDiagnosisDate, HC.datNotificationDate, HC.datEnteredDate) < @EndDate)
	AND HC.intRowStatus = 0
	AND (
	     ISNULL(cgl.idfsGeoLocationType, -1) <> 10036001 -- Foreign Address          
	     OR cgl.idfsCountry IS NULL 
		 OR cgl.idfsCountry = 780000000
    )
	AND (@FinalState IS NULL OR HC.idfsFinalState = @FinalState OR (@FinalState = 10035001 /* Deceased */ AND HC.idfsOutcome = 10770000000 /* Died */))
	AND COALESCE(HC.idfsFinalCaseStatus, HC.idfsInitialCaseStatus, 370000000) <> 370000000 -- Added to filter on case refused
	AND	((@StartAge = 0 AND @EndAge = 0)
		 OR	((@StartAge >= 1 and @EndAge >= 1) 
		     AND (HC.idfsHumanAgeType = 10042003 /* Years */ OR HC.idfsHumanAgeType IS NULL) 
			 AND (HC.intPatientAge BETWEEN @StartAge and @EndAge))
		 OR ((@StartAge <= 1 AND @EndAge <= 1)  
		     AND ((HC.intPatientAge < 12 AND HC.idfsHumanAgeType = 10042002 /* Month */) 
			      OR (HC.intPatientAge <= 31 and HC.idfsHumanAgeType = 10042001 /* Days */)))
         OR ((@StartAge >= 1 AND @EndAge >= 1) AND (HC.idfsHumanAgeType = 10042002 /* Month */) 
		     AND (HC.intPatientAge >= 12 AND CAST(HC.intPatientAge / 12 AS INT) BETWEEN @StartAge AND @EndAge))					
		)
	GROUP BY COALESCE(HC.idfsFinalDiagnosis, HC.idfsTentativeDiagnosis)
GO
PRINT N'Altering Procedure [Report].[USP_REP_HUM_MonthlyInfectiousDiseaseV61]...';


GO


--*************************************************************************
-- Name 				: report.USP_REP_HUM_MonthlyInfectiousDiseaseV61
-- DescriptiON			: SELECT data for Reportable Infectious Diseases (Monthly Form IV03) for Order 01-2N.
-- 
-- Author               : Srini Goli
-- RevisiON History
--		Name			Date       Change Detail
--	Srini Goli			2/13/2023	Added missing No_LAB_TESTED,No_LAB_CONFIRMED,TOTAL_CONFIRMED Diseases
/*
@idfsCustomReportType as bigint, 
-- 10290049 = "Form 03 by MoLHSA Order 01-02N", 10290050 = "Intermediary Form 03 by MoLHSA Order 01-2N"
-- 10290037 = "Form 03 by MoLHSA Order 01-82N", 10290038 = "Intermediate Form 03 by MoLHSA Order 01-82N"
-- 10290009 = "Form 03 by MoLHSA Order 01-27N", 10290009 = "Intermediate Form 03 by MoLHSA Order 01-27N"
*/		
-- Testing code:
/*

EXEC report.USP_REP_HUM_MonthlyInfectiousDiseaseV61 'en-US', 10290050, '2015-06-01', '2015-06-30',  37060000000, 3580000000

EXEC report.USP_REP_HUM_MonthlyInfectiousDiseaseV61 'en-US', 10290050, '2015-06-01', '2015-06-30',  37060000000, 3550000000

DECLARE @RegionID BIGINT = 37060000000
DECLARE @RayonID BIGINT = 3580000000
DECLARE @StartDate DATETIME = '20090601'
DECLARE @FinishDate DATETIME = '20090630'

EXEC report.USP_REP_HUM_MonthlyInfectiousDiseaseV61 'en-US', 10290050, '2009-06-01', '2009-06-30',  37060000000, 3580000000

EXEC report.USP_REP_HUM_MonthlyInfectiousDiseaseV61 'ka-GE', 10290050, '2015-04-01', '2015-04-30',  null, null
*/

ALTER PROCEDURE [Report].[USP_REP_HUM_MonthlyInfectiousDiseaseV61]
	(
		@LangID		AS NVARCHAR(10), 
		@idfsCustomReportType AS BIGINT, -- 10290049 = "Official Form 03 by MoLHSA Order 01-02N", 10290050 = "Intermediary Form 03 by MoLHSA Order 01-2N"
		@StartDate	AS DATETIME,	 
		@FinishDate	AS DATETIME,
		@RegionID	AS BIGINT = NULL,
		@RayonID	AS BIGINT = NULL,
		@SiteID		AS BIGINT = NULL,
		@UseArchiveData	AS BIT = 0 --if User selected Use Archive Data then 1
	)
AS	

EXEC dbo.USP_GBL_FIRSTDAY_SET
IF @RegionID IS NULL
BEGIN
	SET @RegionID = (SELECT idfsRegion FROM report.FN_GBL_GIS_Rayon_GET(@LangID, 19000002 /*Rayon*/) WHERE idfsRayon = @RayonID)
END

DECLARE	@ReportTable	TABLE
(	idfsBaseReference	BIGINT NOT NULL PRIMARY KEY,
	strDiseaseName		NVARCHAR(300) COLLATE database_default NOT NULL, --46
	strICD10			NVARCHAR(200) COLLATE database_default NULL,	--47
	intAge_0_1			FLOAT NULL,	--7
	intAge_1_4			FLOAT NULL, --8
	intAge_5_14			FLOAT NULL, --9
	intAge_15_19		FLOAT NULL, --10
	intAge_20_29		FLOAT NULL, --11
	intAge_30_59		FLOAT NULL, --12
	intAge_60_more		FLOAT NULL, --13
	intTotal			FLOAT NOT NULL, --14
	intLabTested		FLOAT NULL,		--15
	intLabConfirmed		FLOAT NULL,		--16
	intTotalConfirmed	FLOAT NULL,		--18
	intOrder			INT NOT NULL
)



DECLARE 
    
    @idfsLanguage BIGINT,
    @strICD10CodeAdaptatiON NVARCHAR(200),
    @na NVARCHAR(10),

    @FFP_Age_0_1 BIGINT,--7
    @FFP_Age_1_4 BIGINT, --8
    @FFP_Age_5_14 BIGINT, --9
    @FFP_Age_15_19 BIGINT, --10
    @FFP_Age_20_29 BIGINT, --11
    @FFP_Age_30_59 BIGINT, --12
    @FFP_Age_60_more BIGINT, --13
    @FFP_Total BIGINT, --14
    @FFP_LabTested BIGINT,		--15
    @FFP_LabConfirmed BIGINT,		--18
    @FFP_TotalConfirmed BIGINT --21
    
    
SET @idfsLanguage = report.FN_GBL_LanguageCode_GET(@LangID) 

SELECT @FFP_Age_0_1 = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'FFP_Age_0_1'
AND intRowStatus = 0

SELECT @FFP_Age_1_4 = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'FFP_Age_1_4'
AND intRowStatus = 0

SELECT @FFP_Age_5_14 = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'FFP_Age_5_14'
AND intRowStatus = 0

SELECT @FFP_Age_15_19 = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'FFP_Age_15_19'
AND intRowStatus = 0

SELECT @FFP_Age_20_29 = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'FFP_Age_20_29'
AND intRowStatus = 0

SELECT @FFP_Age_30_59= idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'FFP_Age_30_59'
AND intRowStatus = 0

SELECT @FFP_Age_60_more= idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'FFP_Age_60_more'
AND intRowStatus = 0

SELECT @FFP_Total= idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'FFP_Total'
AND intRowStatus = 0

SELECT @FFP_LabTested= idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'FFP_LabTested'
AND intRowStatus = 0

SELECT @FFP_LabConfirmed= idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'FFP_LabConfirmed'
AND intRowStatus = 0

SELECT @FFP_TotalConfirmed= idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'FFP_TotalConfirmed'
AND intRowStatus = 0




INSERT INTO @ReportTable (
	idfsBaseReference,
	strDiseaseName,
	strICD10,
	intAge_0_1,
	intAge_1_4,
	intAge_5_14,
	intAge_15_19,
	intAge_20_29,
	intAge_30_59,
	intAge_60_more,
	intTotal,
	intLabTested,
	intLabConfirmed,
	intTotalConfirmed,
	intOrder
) 
SELECT 
  rr.idfsDiagnosisOrReportDiagnosisGroup,
  ISNULL(ISNULL(snt1.strTextString, br1.strDefault) +  ' ','')  + ISNULL(snt.strTextString, br.strDefault)  ,
  ISNULL(d.strIDC10, dg.strCode) +  ISNULL(ISNULL(' ' + snt2.strTextString, br2.strDefault), ''),
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  rr.intRowOrder

  
FROM   dbo.trtReportRows rr
    LEFT JOIN trtBaseReference br
        LEFT JOIN trtStringNameTranslatiON snt
        ON br.idfsBaseReference = snt.idfsBaseReference
        AND snt.idfsLanguage = @idfsLanguage

        LEFT OUTER JOIN trtDiagnosis d
        ON br.idfsBaseReference = d.idfsDiagnosis
        
        LEFT OUTER JOIN trtReportDiagnosisGroup dg
        ON br.idfsBaseReference = dg.idfsReportDiagnosisGroup
    ON rr.idfsDiagnosisOrReportDiagnosisGroup = br.idfsBaseReference
   
    LEFT OUTER JOIN trtBaseReference br1
        LEFT OUTER JOIN trtStringNameTranslatiON snt1
        ON br1.idfsBaseReference = snt1.idfsBaseReference
        AND snt1.idfsLanguage = @idfsLanguage
    ON rr.idfsReportAdditionalText = br1.idfsBaseReference
    
    LEFT OUTER JOIN trtBaseReference br2
        LEFT OUTER JOIN trtStringNameTranslatiON snt2
        ON br2.idfsBaseReference = snt2.idfsBaseReference
        AND snt2.idfsLanguage = @idfsLanguage
    ON rr.idfsICDReportAdditionalText = br2.idfsBaseReference    
WHERE rr.idfsCustomReportType = @idfsCustomReportType 
ORDER BY rr.intRowOrder


DECLARE	@MonthlyReportDiagnosisTable	TABLE
(	idfsDiagnosis	BIGINT NOT NULL PRIMARY KEY,
  blnIsAggregate BIT,
	intAge_0_1			INT NOT NULL,	--7
	intAge_1_4			INT NOT NULL, --8
	intAge_5_14			INT NOT NULL, --9
	intAge_15_19		INT NOT NULL, --10
	intAge_20_29		INT NOT NULL, --11
	intAge_30_59		INT NOT NULL, --12
	intAge_60_more		INT NOT NULL, --13
	intTotal			INT NOT NULL, --14
	intLabTested		INT NULL,		--15
	intLabConfirmed		INT NULL,		--18
	intTotalConfirmed	INT NULL		--21
)

INSERT INTO @MonthlyReportDiagnosisTable (
	idfsDiagnosis,
  blnIsAggregate,
	intAge_0_1,
	intAge_1_4,
	intAge_5_14,
	intAge_15_19,
	intAge_20_29,
	intAge_30_59,
	intAge_60_more,
	intTotal,
	intLabTested,
	intLabConfirmed,
	intTotalConfirmed
) 
SELECT DISTINCT
  fdt.idfsDiagnosis,
  CASE WHEN  trtd.idfsUsingType = 10020002  --dutAggregatedCase
    THEN 1
    ELSE 0
  END,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0

FROM dbo.trtDiagnosisToGroupForReportType fdt
    INNER JOIN trtDiagnosis trtd
    ON trtd.idfsDiagnosis = fdt.idfsDiagnosis
    -- AND trtd.intRowStatus = 0
WHERE  fdt.idfsCustomReportType = @idfsCustomReportType 
       
       
INSERT INTO @MonthlyReportDiagnosisTable (
	idfsDiagnosis,
  blnIsAggregate,
	intAge_0_1,
	intAge_1_4,
	intAge_5_14,
	intAge_15_19,
	intAge_20_29,
	intAge_30_59,
	intAge_60_more,
	intTotal,
	intLabTested,
	intLabConfirmed,
	intTotalConfirmed
) 
SELECT 
  trtd.idfsDiagnosis,
  CASE WHEN  trtd.idfsUsingType = 10020002  --dutAggregatedCase
    THEN 1
    ELSE 0
  END,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0

FROM dbo.trtReportRows rr
    INNER JOIN trtBaseReference br
    ON br.idfsBaseReference = rr.idfsDiagnosisOrReportDiagnosisGroup
        AND br.idfsReferenceType = 19000019 --'rftDiagnosis'
    INNER JOIN trtDiagnosis trtd
    ON trtd.idfsDiagnosis = rr.idfsDiagnosisOrReportDiagnosisGroup 
        --AND trtd.intRowStatus = 0
WHERE  rr.idfsCustomReportType = @idfsCustomReportType 
       AND  rr.intRowStatus = 0 
       AND NOT EXISTS 
       (
       SELECT * FROM @MonthlyReportDiagnosisTable
       WHERE idfsDiagnosis = rr.idfsDiagnosisOrReportDiagnosisGroup
       )     

       

DECLARE @MinAdminLevel BIGINT
DECLARE @MinTimeInterval BIGINT
DECLARE @AggrCaseType BIGINT


/*

19000091	rftStatisticPeriodType:
    10091001	sptMonth	Month
    10091002	sptOnday	Day
    10091003	sptQuarter	Quarter
    10091004	sptWeek	Week
    10091005	sptYear	Year

19000089	rftStatisticAreaType
    10089001	satCountry	Country
    10089002	satRayon	Rayon
    10089003	satRegion	Region
    10089004	satSettlement	Settlement


19000102	rftAggregateCaseType:
    10102001  Aggregate Case

*/

SET @AggrCaseType = 10102001

SELECT	@MinAdminLevel = idfsStatisticAreaType,
		@MinTimeInterval = idfsStatisticPeriodType
FROM report.FN_AggregateSettings_GET (@AggrCaseType)--@AggrCaseType



DECLARE	@MonthlyReportHumanAggregateCase	TABLE
(	idfAggrCase	BIGINT NOT NULL PRIMARY KEY,
  idfCaseObservatiON BIGINT,
  datStartDate DATETIME,
  idfVersiON BIGINT
)


INSERT INTO	@MonthlyReportHumanAggregateCase
(	idfAggrCase,
  idfCaseObservation,
  datStartDate,
  idfVersion
)
SELECT		a.idfAggrCase,
          a.idfCaseObservation,
		  a.datStartDate,
		  a.idfVersion
FROM		tlbAggrCase a
LEFT JOIN	report.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001 /*Country*/) c
ON			c.idfsReference = a.idfsAdministrativeUnit
LEFT JOIN	report.FN_GBL_GIS_Region_GET(@LangID, 19000003 /*Region*/) r
ON			r.idfsRegion = a.idfsAdministrativeUnit 
LEFT JOIN	report.FN_GBL_GIS_Rayon_GET(@LangID, 19000002 /*Rayon*/) rr
ON			rr.idfsRayon = a.idfsAdministrativeUnit
LEFT JOIN	report.FN_GBL_GIS_Settlement_GET(@LangID, 19000004 /*Settlement*/) s
ON			s.idfsSettlement = a.idfsAdministrativeUnit

WHERE 			
			a.idfsAggrCaseType = @AggrCaseType
			AND (	@StartDate <= a.datStartDate
					AND a.datFinishDate < DATEADD(day, 1, @FinishDate)
				)
			AND (	(	@MinTimeInterval = 10091005 --'sptYear'
						AND DateDiff(year, a.datStartDate, a.datFinishDate) = 0
						AND DateDiff(quarter, a.datStartDate, a.datFinishDate) > 1
						AND DateDiff(month, a.datStartDate, a.datFinishDate) > 1
						AND report.FN_GBL_WeekDateDiff_GET(a.datStartDate, a.datFinishDate) > 1
						AND DateDiff(day, a.datStartDate, a.datFinishDate) > 1
					)
					or	(	@MinTimeInterval = 10091003 --'sptQuarter'
							AND DateDiff(quarter, a.datStartDate, a.datFinishDate) = 0
							AND DateDiff(month, a.datStartDate, a.datFinishDate) > 1
							AND report.FN_GBL_WeekDateDiff_GET(a.datStartDate, a.datFinishDate) > 1
							AND DateDiff(day, a.datStartDate, a.datFinishDate) > 1
						)
					or (	@MinTimeInterval = 10091001 --'sptMonth'
							AND DateDiff(month, a.datStartDate, a.datFinishDate) = 0
							AND report.FN_GBL_WeekDateDiff_GET(a.datStartDate, a.datFinishDate) > 1
							AND DateDiff(day, a.datStartDate, a.datFinishDate) > 1
						)
					or (	@MinTimeInterval = 10091004 --'sptWeek'
							AND report.FN_GBL_WeekDateDiff_GET(a.datStartDate, a.datFinishDate) = 0
							AND DateDiff(day, a.datStartDate, a.datFinishDate) > 1
						)
					or (	@MinTimeInterval = 10091002--'sptOnday'
						AND DateDiff(day, a.datStartDate, a.datFinishDate) = 0)
				)    AND		
        (	(	@MinAdminLevel = 10089001 --'satCountry' 
			    AND a.idfsAdministrativeUnit = c.idfsReference
		      )
		    or	(	@MinAdminLevel = 10089003 --'satRegion' 
				    AND a.idfsAdministrativeUnit = r.idfsRegion
				    AND (r.idfsRegiON = @RegionID OR @RegionID IS NULL)
			    )
		    or	(	@MinAdminLevel = 10089002 --'satRayon' 
				    AND a.idfsAdministrativeUnit = rr.idfsRayon
				    AND (rr.idfsRayON = @RayonID OR @RayonID IS NULL) 
				    AND (rr.idfsRegiON = @RegionID OR @RegionID IS NULL)
			    )
		    or	(	@MinAdminLevel = 10089004 --'satSettlement' 
				    AND a.idfsAdministrativeUnit = s.idfsSettlement
				    AND (s.idfsRayON = @RayonID OR @RayonID IS NULL) 
				    AND (s.idfsRegiON = @RegionID OR @RegionID IS NULL)

			    )
	      )
AND a.intRowStatus = 0	       
	      
	      


DECLARE	@MonthlyReportAggregateDiagnosisValuesTable	TABLE
(	idfsBaseReference	BIGINT NOT NULL PRIMARY KEY,
	intAge_0_1			INT NOT NULL,	--7
	intAge_1_4			INT NOT NULL, --8
	intAge_5_14			INT NOT NULL, --9
	intAge_15_19		INT NOT NULL, --10
	intAge_20_29		INT NOT NULL, --11
	intAge_30_59		INT NOT NULL, --12
	intAge_60_more		INT NOT NULL, --13
	intTotal			INT NOT NULL, --14
	intLabTested		INT NULL,		--15
	intLabConfirmed		INT NULL,		--18
	intTotalConfirmed	INT NULL		--21
)


INSERT INTO	@MonthlyReportAggregateDiagnosisValuesTable
(	idfsBaseReference,
	intAge_0_1,	--7
	intAge_1_4, --8
	intAge_5_14, --9
	intAge_15_19, --10
	intAge_20_29, --11
	intAge_30_59, --12
	intAge_60_more, --13
	intTotal, --14
	intLabTested,		--15
	intLabConfirmed,		--18
	intTotalConfirmed--21
)
SELECT		
      fdt.idfsDiagnosis      ,
			sum(CAST(ISNULL(agp_Age_0_1.varValue, 0)AS INT)),
			sum(CAST(ISNULL(agp_Age_1_4.varValue, 0)AS INT)),
			sum(CAST(ISNULL(agp_Age_5_14.varValue, 0)AS INT)),
			sum(CAST(ISNULL(agp_Age_15_19.varValue, 0)AS INT)),
			sum(CAST(ISNULL(agp_Age_20_29.varValue, 0)AS INT)),
			sum(CAST(ISNULL(agp_Age_30_59.varValue, 0)AS INT)),
			sum(CAST(ISNULL(agp_Age_60_more.varValue, 0)AS INT)),
			sum(CAST(ISNULL(agp_Total.varValue, 0)AS INT)),
			sum(CAST(ISNULL(agp_LabTested.varValue, 0)AS INT)),
			sum(CAST(ISNULL(agp_LabConfirmed.varValue, 0)AS INT)),
			sum(CAST(ISNULL(agp_TotalConfirmed.varValue, 0)AS INT))

FROM		@MonthlyReportHumanAggregateCase fhac
-- UPDATEd for versiON 6

-- Matrix version
INNER JOIN	tlbAggrMatrixVersionHeader h
ON			h.idfsMatrixType = 71190000000	-- Human Aggregate Case
			AND (	-- Get matrix versiON selected by the user in aggregate case
					h.idfVersiON = fhac.idfVersiON 
					-- If matrix versiON is not selected by the user in aggregate case, 
					-- then SELECT active matrix with the latest date activatiON that is earlier than aggregate case start date
					or (	fhac.idfVersiON is null 
							AND	h.datStartDate <= fhac.datStartDate
							AND	h.blnIsActive = 1
							AND not exists	(
										SELECT	*
										FROM	tlbAggrMatrixVersionHeader h_later
										where	h_later.idfsMatrixType = 71190000000	-- Human Aggregate Case
												AND	h_later.datStartDate <= fhac.datStartDate
												AND	h_later.blnIsActive = 1
												AND h_later.intRowStatus = 0
												AND	h_later.datStartDate > h.datStartDate
											)
						))
			AND h.intRowStatus = 0

-- Matrix row
INNER JOIN	tlbAggrHumanCaseMTX mtx
ON			mtx.idfVersiON = h.idfVersion
			AND mtx.intRowStatus = 0
INNER JOIN	@MonthlyReportDiagnosisTable fdt
ON			fdt.idfsDiagnosis = mtx.idfsDiagnosis

--Age_0_1
LEFT JOIN	dbo.tlbActivityParameters agp_Age_0_1
ON			agp_Age_0_1.idfObservatiON = fhac.idfCaseObservation
			AND	agp_Age_0_1.idfsParameter = @FFP_Age_0_1
			AND agp_Age_0_1.idfRow = mtx.idfAggrHumanCaseMTX
			AND agp_Age_0_1.intRowStatus = 0
			AND SQL_VARIANT_PROPERTY(agp_Age_0_1.varValue, 'BaseType') in ('bigint','decimal','float','int','numeric','real','smallint','tinyint')
			
--	Age_1_4
LEFT JOIN	dbo.tlbActivityParameters agp_Age_1_4
ON			agp_Age_1_4.idfObservation= fhac.idfCaseObservation
			AND	agp_Age_1_4.idfsParameter = @FFP_Age_1_4
			AND agp_Age_1_4.idfRow = mtx.idfAggrHumanCaseMTX
			AND agp_Age_1_4.intRowStatus = 0
			AND SQL_VARIANT_PROPERTY(agp_Age_1_4.varValue, 'BaseType') in ('bigint','decimal','float','int','numeric','real','smallint','tinyint')
			

--	Age_5_14		
LEFT JOIN	dbo.tlbActivityParameters agp_Age_5_14
ON			agp_Age_5_14.idfObservation= fhac.idfCaseObservation
			AND	agp_Age_5_14.idfsParameter = @FFP_Age_5_14
			AND agp_Age_5_14.idfRow = mtx.idfAggrHumanCaseMTX
			AND agp_Age_5_14.intRowStatus = 0
			AND SQL_VARIANT_PROPERTY(agp_Age_5_14.varValue, 'BaseType') in ('bigint','decimal','float','int','numeric','real','smallint','tinyint')

--	Age_15_19		
LEFT JOIN	dbo.tlbActivityParameters agp_Age_15_19
ON			agp_Age_15_19.idfObservation= fhac.idfCaseObservation
			AND	agp_Age_15_19.idfsParameter = @FFP_Age_15_19
			AND agp_Age_15_19.idfRow = mtx.idfAggrHumanCaseMTX
			AND agp_Age_15_19.intRowStatus = 0
			AND SQL_VARIANT_PROPERTY(agp_Age_15_19.varValue, 'BaseType') in ('bigint','decimal','float','int','numeric','real','smallint','tinyint')


--	Age_20_29		
LEFT JOIN	dbo.tlbActivityParameters agp_Age_20_29
ON			agp_Age_20_29.idfObservation= fhac.idfCaseObservation
			AND	agp_Age_20_29.idfsParameter = @FFP_Age_20_29
			AND agp_Age_20_29.idfRow = mtx.idfAggrHumanCaseMTX
			AND agp_Age_20_29.intRowStatus = 0
			AND SQL_VARIANT_PROPERTY(agp_Age_20_29.varValue, 'BaseType') in ('bigint','decimal','float','int','numeric','real','smallint','tinyint')


--	Age_30_59		
LEFT JOIN	dbo.tlbActivityParameters agp_Age_30_59
ON			agp_Age_30_59.idfObservation= fhac.idfCaseObservation
			AND	agp_Age_30_59.idfsParameter = @FFP_Age_30_59
			AND agp_Age_30_59.idfRow = mtx.idfAggrHumanCaseMTX
			AND agp_Age_30_59.intRowStatus = 0
			AND SQL_VARIANT_PROPERTY(agp_Age_30_59.varValue, 'BaseType') in ('bigint','decimal','float','int','numeric','real','smallint','tinyint')

--	Age_60_more		
LEFT JOIN	dbo.tlbActivityParameters agp_Age_60_more
ON			agp_Age_60_more.idfObservation= fhac.idfCaseObservation
			AND	agp_Age_60_more.idfsParameter = @FFP_Age_60_more
			AND agp_Age_60_more.idfRow = mtx.idfAggrHumanCaseMTX
			AND agp_Age_60_more.intRowStatus = 0
			AND SQL_VARIANT_PROPERTY(agp_Age_60_more.varValue, 'BaseType') in ('bigint','decimal','float','int','numeric','real','smallint','tinyint')


--	Total		
LEFT JOIN	dbo.tlbActivityParameters agp_Total
ON			agp_Total.idfObservation= fhac.idfCaseObservation
			AND	agp_Total.idfsParameter = @FFP_Total
			AND agp_Total.idfRow = mtx.idfAggrHumanCaseMTX
			AND agp_Total.intRowStatus = 0
			AND SQL_VARIANT_PROPERTY(agp_Total.varValue, 'BaseType') in ('bigint','decimal','float','int','numeric','real','smallint','tinyint')


--	LabTested		
LEFT JOIN	dbo.tlbActivityParameters agp_LabTested
ON			agp_LabTested.idfObservatiON = fhac.idfCaseObservation
			AND	agp_LabTested.idfsParameter = @FFP_LabTested
			AND agp_LabTested.idfRow = mtx.idfAggrHumanCaseMTX
			AND agp_LabTested.intRowStatus = 0
			AND SQL_VARIANT_PROPERTY(agp_LabTested.varValue, 'BaseType') in ('bigint','decimal','float','int','numeric','real','smallint','tinyint')


--	LabConfirmed		
LEFT JOIN	dbo.tlbActivityParameters agp_LabConfirmed
ON			agp_LabConfirmed.idfObservatiON = fhac.idfCaseObservation
			AND	agp_LabConfirmed.idfsParameter = @FFP_LabConfirmed
			AND agp_LabConfirmed.idfRow = mtx.idfAggrHumanCaseMTX
			AND agp_LabConfirmed.intRowStatus = 0
			AND SQL_VARIANT_PROPERTY(agp_LabConfirmed.varValue, 'BaseType') in ('bigint','decimal','float','int','numeric','real','smallint','tinyint')



--	TotalConfirmed		
LEFT JOIN	dbo.tlbActivityParameters agp_TotalConfirmed
ON			agp_TotalConfirmed.idfObservatiON = fhac.idfCaseObservation
			AND	agp_TotalConfirmed.idfsParameter = @FFP_TotalConfirmed
			AND agp_TotalConfirmed.idfRow = mtx.idfAggrHumanCaseMTX
			AND agp_TotalConfirmed.intRowStatus = 0
			AND SQL_VARIANT_PROPERTY(agp_TotalConfirmed.varValue, 'BaseType') in ('bigint','decimal','float','int','numeric','real','smallint','tinyint')

group by	fdt.idfsDiagnosis



DECLARE	@MonthlyReportCaseTable	TABLE
(	idfsDiagnosis			BIGINT  NOT NULL,
	idfCase				BIGINT NOT NULL PRIMARY KEY,
	intYear					int NULL,
	blnLabTested  BIT,
	blnLabConfirmed   BIT,
	blnLabEpiConfirmed BIT
)

INSERT INTO	@MonthlyReportCaseTable
(	idfsDiagnosis,
	idfCase,
	intYear,
	blnLabTested,
	blnLabConfirmed,
	blnLabEpiConfirmed
)
SELECT DISTINCT
			fdt.idfsDiagnosis,
			hc.idfHumanCase AS idfCase,
			CASE
				WHEN	ISNULL(hc.idfsHumanAgeType, -1) = 10042003	-- Years 
						AND (ISNULL(hc.intPatientAge, -1) >= 0 AND ISNULL(hc.intPatientAge, -1) <= 200)
					THEN	hc.intPatientAge
				WHEN	ISNULL(hc.idfsHumanAgeType, -1) = 10042002	-- Months
						AND (ISNULL(hc.intPatientAge, -1) >= 0 AND ISNULL(hc.intPatientAge, -1) <= 60)
					THEN	cast(hc.intPatientAge / 12 as int)
				WHEN	ISNULL(hc.idfsHumanAgeType, -1) = 10042001	-- Days
						AND (ISNULL(hc.intPatientAge, -1) >= 0)
					THEN	0
				ELSE	null
			END,
			CASE WHEN hc.idfsYNTestsConducted = 10100001 THEN 1 ELSE 0 END,
			CASE 
			  WHEN  hc.blnLabDiagBasis = 1 AND 
			        hc.idfsYNTestsConducted = 10100001 AND 
			        (
			          hc.idfsFinalCaseStatus = 350000000 /*Confirmed Case*/ or
			          (hc.idfsFinalCaseStatus is null AND 
			          hc.idfsInitialCaseStatus = 350000000 /*Confirmed Case*/) 
			        )
			  THEN 1 ELSE 0 
			END,
			CASE 
			  WHEN ( (hc.blnLabDiagBasis = 1 AND hc.idfsYNTestsConducted = 10100001)  or  
			          hc.blnEpiDiagBasis = 1) 
			       and
			        (
			          hc.idfsFinalCaseStatus = 350000000 /*Confirmed Case*/ or
			          (hc.idfsFinalCaseStatus is null AND 
			          hc.idfsInitialCaseStatus = 350000000 /*Confirmed Case*/) 
			        )			        
			  THEN 1 ELSE 0 
			END
			
FROM tlbHumanCase hc     

    INNER JOIN	@MonthlyReportDiagnosisTable fdt
    ON	fdt.idfsDiagnosis = COALESCE(hc.idfsFinalDiagnosis, hc.idfsTentativeDiagnosis)

    INNER JOIN tlbHuman h
      LEFT OUTER JOIN tlbGeoLocatiON gl
      ON h.idfCurrentResidenceAddress = gl.idfGeoLocation
    	AND gl.intRowStatus = 0
    ON hc.idfHuman = h.idfHuman
       AND h.intRowStatus = 0
    			
    LEFT OUTER JOIN  tlbGeoLocatiON cgl
    ON hc.idfPointGeoLocatiON = cgl.idfGeoLocation
    AND cgl.intRowStatus = 0
			
WHERE	
		(	@StartDate <= ISNULL(hc.datOnSetDate, ISNULL(hc.datFinalDiagnosisDate, ISNULL(hc.datTentativeDiagnosisDate, ISNULL(hc.datNotificationDate, hc.datEnteredDate))))
				AND ISNULL(hc.datOnSetDate, ISNULL(hc.datFinalDiagnosisDate, ISNULL(hc.datTentativeDiagnosisDate, ISNULL(hc.datNotificationDate, hc.datEnteredDate)))) < DATEADD(day, 1, @FinishDate)
		) AND
		(	ISNULL(cgl.idfsGeoLocationType, -1) <> 10036001 --Foreign Address
			or cgl.idfsCountry is NULL or cgl.idfsCountry = 780000000
		) AND
		(	
			(	cgl.idfsRegiON is NOT NULL /*AND cgl.idfsRayON is NOT NULL*/ AND @RegionID is NOT NULL
				AND (cgl.idfsRegiON = @RegionID)
				AND (cgl.idfsRayON = @RayonID or @RayonID is NULL)
			)
			or	(	cgl.idfsRegiON is NULL AND gl.idfsRegiON is NOT NULL /*AND gl.idfsRayON is NOT NULL*/ AND @RegionID is NOT NULL
					AND (gl.idfsRegiON = @RegionID)
					AND (gl.idfsRayON = @RayonID or @RayonID is NULL)
				)
			or @RegionID is NULL
		)
		AND hc.intRowStatus = 0 
		AND COALESCE(hc.idfsFinalCaseStatus, hc.idfsInitialCaseStatus, 370000000) <> 370000000 --'casRefused'
    

--Total
DECLARE	@MonthlyReportCaseDiagnosisTotalValuesTable	TABLE
(	idfsDiagnosis		BIGINT NOT NULL PRIMARY KEY,
	intTotal				INT NOT NULL
)

INSERT INTO	@MonthlyReportCaseDiagnosisTotalValuesTable
(	idfsDiagnosis,
	intTotal
)
SELECT fct.idfsDiagnosis,
			count(fct.idfCase)
FROM		@MonthlyReportCaseTable fct
group by	fct.idfsDiagnosis



--Total Age_0_1
DECLARE	@MonthlyReportCaseDiagnosis_Age_0_1_TotalValuesTable	TABLE
(	idfsDiagnosis			BIGINT NOT NULL PRIMARY KEY,
	intAge_0_1				INT NOT NULL
)

INSERT INTO	@MonthlyReportCaseDiagnosis_Age_0_1_TotalValuesTable
(	idfsDiagnosis,
	intAge_0_1
)
SELECT		fct.idfsDiagnosis,
			count(fct.idfCase)
FROM		@MonthlyReportCaseTable fct
where		(fct.intYear >= 0 AND fct.intYear < 1)
group by	fct.idfsDiagnosis


--Total Age_1_4
DECLARE	@MonthlyReportCaseDiagnosis_Age_1_4_TotalValuesTable	TABLE
(	idfsDiagnosis			BIGINT NOT NULL PRIMARY KEY,
	intAge_1_4				INT NOT NULL
)

INSERT INTO	@MonthlyReportCaseDiagnosis_Age_1_4_TotalValuesTable
(	idfsDiagnosis,
	intAge_1_4
)
SELECT		fct.idfsDiagnosis,
			count(fct.idfCase)
FROM		@MonthlyReportCaseTable fct
where		(fct.intYear >= 1 AND fct.intYear <= 4)
group by	fct.idfsDiagnosis


--Total Age_5_14
DECLARE	@MonthlyReportCaseDiagnosis_Age_5_14_TotalValuesTable	TABLE
(	idfsDiagnosis			BIGINT NOT NULL PRIMARY KEY,
	intAge_5_14				INT NOT NULL
)

INSERT INTO	@MonthlyReportCaseDiagnosis_Age_5_14_TotalValuesTable
(	idfsDiagnosis,
	intAge_5_14
)
SELECT		fct.idfsDiagnosis,
			count(fct.idfCase)
FROM		@MonthlyReportCaseTable fct
where		(fct.intYear >= 5 AND fct.intYear <= 14)
group by	fct.idfsDiagnosis


--Total Age_15_19
DECLARE	@MonthlyReportCaseDiagnosis_Age_15_19_TotalValuesTable	TABLE
(	idfsDiagnosis			BIGINT NOT NULL PRIMARY KEY,
	intAge_15_19				INT NOT NULL
)

INSERT INTO	@MonthlyReportCaseDiagnosis_Age_15_19_TotalValuesTable
(	idfsDiagnosis,
	intAge_15_19
)
SELECT		fct.idfsDiagnosis,
			count(fct.idfCase)
FROM		@MonthlyReportCaseTable fct
where		(fct.intYear >= 15 AND fct.intYear <= 19)
group by	fct.idfsDiagnosis


--Total Age_20_29
DECLARE	@MonthlyReportCaseDiagnosis_Age_20_29_TotalValuesTable	TABLE
(	idfsDiagnosis			BIGINT NOT NULL PRIMARY KEY,
	intAge_20_29				INT NOT NULL
)

INSERT INTO	@MonthlyReportCaseDiagnosis_Age_20_29_TotalValuesTable
(	idfsDiagnosis,
	intAge_20_29
)
SELECT		fct.idfsDiagnosis,
			count(fct.idfCase)
FROM		@MonthlyReportCaseTable fct
where		(fct.intYear >= 20 AND fct.intYear <= 29)
group by	fct.idfsDiagnosis


--Total Age_30_59
DECLARE	@MonthlyReportCaseDiagnosis_Age_30_59_TotalValuesTable	TABLE
(	idfsDiagnosis			BIGINT NOT NULL PRIMARY KEY,
	intAge_30_59				INT NOT NULL
)

INSERT INTO	@MonthlyReportCaseDiagnosis_Age_30_59_TotalValuesTable
(	idfsDiagnosis,
	intAge_30_59
)
SELECT		fct.idfsDiagnosis,
			count(fct.idfCase)
FROM		@MonthlyReportCaseTable fct
where		(fct.intYear >= 30 AND fct.intYear <= 59)
group by	fct.idfsDiagnosis


--Total Age_60_more
DECLARE	@MonthlyReportCaseDiagnosis_Age_60_more_TotalValuesTable	TABLE
(	idfsDiagnosis			BIGINT NOT NULL PRIMARY KEY,
	intAge_60_more				INT NOT NULL
)

INSERT INTO	@MonthlyReportCaseDiagnosis_Age_60_more_TotalValuesTable
(	idfsDiagnosis,
	intAge_60_more
)
SELECT		fct.idfsDiagnosis,
			count(fct.idfCase)
FROM		@MonthlyReportCaseTable fct
where		(fct.intYear >= 60)
group by	fct.idfsDiagnosis


--Total LabTested 
DECLARE	@MonthlyReportCaseDiagnosis_LabTested_TotalValuesTable	TABLE
(	idfsDiagnosis			BIGINT NOT NULL PRIMARY KEY,
	intLabTested				INT NOT NULL
)

INSERT INTO	@MonthlyReportCaseDiagnosis_LabTested_TotalValuesTable
(	idfsDiagnosis,
	intLabTested
)
SELECT		fct.idfsDiagnosis,
			count(fct.idfCase)
FROM		@MonthlyReportCaseTable fct
where		fct.blnLabTested = 1
group by	fct.idfsDiagnosis



--Total LabConfirmed 
DECLARE	@MonthlyReportCaseDiagnosis_LabConfirmed_TotalValuesTable	TABLE
(	idfsDiagnosis			BIGINT NOT NULL PRIMARY KEY,
	intLabConfirmed				INT NOT NULL
)

INSERT INTO	@MonthlyReportCaseDiagnosis_LabConfirmed_TotalValuesTable
(	idfsDiagnosis,
	intLabConfirmed
)
SELECT		fct.idfsDiagnosis,
			count(fct.idfCase)
FROM		@MonthlyReportCaseTable fct
where		fct.blnLabConfirmed = 1
group by	fct.idfsDiagnosis

--Total TotalConfirmed
DECLARE	@MonthlyReportCaseDiagnosis_TotalConfirmed_TotalValuesTable	TABLE
(	idfsDiagnosis			BIGINT NOT NULL PRIMARY KEY,
	intTotalConfirmed				INT NOT NULL
)

INSERT INTO	@MonthlyReportCaseDiagnosis_TotalConfirmed_TotalValuesTable
(	idfsDiagnosis,
	intTotalConfirmed
)
SELECT		fct.idfsDiagnosis,
			count(fct.idfCase)
FROM		@MonthlyReportCaseTable fct
where		fct.blnLabEpiConfirmed = 1
group by	fct.idfsDiagnosis

--aggregate cases
UPDATE		fdt
SET				
	fdt.intAge_0_1 = fadvt.intAge_0_1,
	fdt.intAge_1_4 = fadvt.intAge_1_4,
	fdt.intAge_5_14 = fadvt.intAge_5_14,	
	fdt.intAge_15_19 = fadvt.intAge_15_19,	
	fdt.intAge_20_29 = fadvt.intAge_20_29,	
	fdt.intAge_30_59 = fadvt.intAge_30_59,
	fdt.intAge_60_more = fadvt.intAge_60_more,	
	fdt.intTotal = fadvt.intTotal,	
	fdt.intLabTested = fadvt.intLabTested,	
	fdt.intLabConfirmed = fadvt.intLabConfirmed,	
	fdt.intTotalConfirmed = fadvt.intTotalConfirmed		
FROM		@MonthlyReportDiagnosisTable fdt
    INNER JOIN	@MonthlyReportAggregateDiagnosisValuesTable fadvt
    ON			fadvt.idfsBaseReference = fdt.idfsDiagnosis
--where		fdt.blnIsAggregate = 1


--standard cases
UPDATE		fdt
SET			fdt.intTotal = ISNULL (fdt.intTotal, 0) + fcdvt.intTotal
FROM		@MonthlyReportDiagnosisTable fdt
INNER JOIN	@MonthlyReportCaseDiagnosisTotalValuesTable fcdvt
ON			fcdvt.idfsDiagnosis = fdt.idfsDiagnosis
--where		fdt.blnIsAggregate = 0

UPDATE		fdt
SET			fdt.intAge_0_1 = ISNULL (fdt.intAge_0_1, 0) + fcdvt.intAge_0_1
FROM		@MonthlyReportDiagnosisTable fdt
INNER JOIN	@MonthlyReportCaseDiagnosis_Age_0_1_TotalValuesTable fcdvt
ON			fcdvt.idfsDiagnosis = fdt.idfsDiagnosis
--where		fdt.blnIsAggregate = 0

UPDATE		fdt
SET			fdt.intAge_1_4 = ISNULL (fdt.intAge_1_4, 0) + fcdvt.intAge_1_4
FROM		@MonthlyReportDiagnosisTable fdt
INNER JOIN	@MonthlyReportCaseDiagnosis_Age_1_4_TotalValuesTable fcdvt
ON			fcdvt.idfsDiagnosis = fdt.idfsDiagnosis
--where		fdt.blnIsAggregate = 0

UPDATE		fdt
SET			fdt.intAge_5_14 = ISNULL (fdt.intAge_5_14, 0) + fcdvt.intAge_5_14
FROM		@MonthlyReportDiagnosisTable fdt
INNER JOIN	@MonthlyReportCaseDiagnosis_Age_5_14_TotalValuesTable fcdvt
ON			fcdvt.idfsDiagnosis = fdt.idfsDiagnosis
--where		fdt.blnIsAggregate = 0
	
UPDATE		fdt
SET			fdt.intAge_15_19 =  ISNULL (fdt.intAge_15_19, 0) +fcdvt.intAge_15_19
FROM		@MonthlyReportDiagnosisTable fdt
INNER JOIN	@MonthlyReportCaseDiagnosis_Age_15_19_TotalValuesTable fcdvt
ON			fcdvt.idfsDiagnosis = fdt.idfsDiagnosis
--where		fdt.blnIsAggregate = 0	
	
UPDATE		fdt
SET			fdt.intAge_20_29 =  ISNULL (fdt.intAge_20_29, 0) +fcdvt.intAge_20_29
FROM		@MonthlyReportDiagnosisTable fdt
INNER JOIN	@MonthlyReportCaseDiagnosis_Age_20_29_TotalValuesTable fcdvt
ON			fcdvt.idfsDiagnosis = fdt.idfsDiagnosis
--where		fdt.blnIsAggregate = 0		
	
UPDATE		fdt
SET			fdt.intAge_30_59 = ISNULL (fdt.intAge_30_59, 0) + fcdvt.intAge_30_59
FROM		@MonthlyReportDiagnosisTable fdt
INNER JOIN	@MonthlyReportCaseDiagnosis_Age_30_59_TotalValuesTable fcdvt
ON			fcdvt.idfsDiagnosis = fdt.idfsDiagnosis
--where		fdt.blnIsAggregate = 0		
	
UPDATE		fdt
SET			fdt.intAge_60_more = ISNULL (fdt.intAge_60_more, 0) + fcdvt.intAge_60_more
FROM		@MonthlyReportDiagnosisTable fdt
INNER JOIN	@MonthlyReportCaseDiagnosis_Age_60_more_TotalValuesTable fcdvt
ON			fcdvt.idfsDiagnosis = fdt.idfsDiagnosis
--where		fdt.blnIsAggregate = 0		
	
	
UPDATE		fdt
SET			fdt.intLabTested = ISNULL (fdt.intLabTested, 0) + fcdvt.intLabTested
FROM		@MonthlyReportDiagnosisTable fdt
INNER JOIN	@MonthlyReportCaseDiagnosis_LabTested_TotalValuesTable fcdvt
ON			fcdvt.idfsDiagnosis = fdt.idfsDiagnosis
--where		fdt.blnIsAggregate = 0		
	
	
UPDATE		fdt
SET			fdt.intLabConfirmed = ISNULL (fdt.intLabConfirmed, 0) + fcdvt.intLabConfirmed
FROM		@MonthlyReportDiagnosisTable fdt
INNER JOIN	@MonthlyReportCaseDiagnosis_LabConfirmed_TotalValuesTable fcdvt
ON			fcdvt.idfsDiagnosis = fdt.idfsDiagnosis
--where		fdt.blnIsAggregate = 0		
	
	
UPDATE		fdt
SET			fdt.intTotalConfirmed =  ISNULL (fdt.intTotalConfirmed, 0) +fcdvt.intTotalConfirmed
FROM		@MonthlyReportDiagnosisTable fdt
INNER JOIN	@MonthlyReportCaseDiagnosis_TotalConfirmed_TotalValuesTable fcdvt
ON			fcdvt.idfsDiagnosis = fdt.idfsDiagnosis
--where		fdt.blnIsAggregate = 0		
	
	
	

	

DECLARE	@MonthlyReportDiagnosisGroupTable	TABLE
(	idfsDiagnosisGroup	BIGINT NOT NULL PRIMARY KEY,
	intAge_0_1			INT NOT NULL,	--7
	intAge_1_4			INT NOT NULL, --8
	intAge_5_14			INT NOT NULL, --9
	intAge_15_19		INT NOT NULL, --10
	intAge_20_29		INT NOT NULL, --11
	intAge_30_59		INT NOT NULL, --12
	intAge_60_more		INT NOT NULL, --13
	intTotal			INT NOT NULL, --14
	intLabTested		INT NULL,		--15
	intLabConfirmed		INT NULL,		--18
	intTotalConfirmed	INT NULL		--21
)
	
	
INSERT INTO	@MonthlyReportDiagnosisGroupTable
(	idfsDiagnosisGroup,
	intAge_0_1,	
	intAge_1_4, 
	intAge_5_14, 
	intAge_15_19, 
	intAge_20_29, 
	intAge_30_59, 
	intAge_60_more, 
	intTotal, 
	intLabTested,		
	intLabConfirmed,		
	intTotalConfirmed
)
SELECT		dtg.idfsReportDiagnosisGroup,
	    sum(intAge_0_1),	
	    sum(intAge_1_4), 
	    sum(intAge_5_14), 
	    sum(intAge_15_19), 
	    sum(intAge_20_29), 
	    sum(intAge_30_59), 
	    sum(intAge_60_more), 
	    sum(intTotal), 
	    sum(intLabTested),		
	    sum(intLabConfirmed),		
	    sum(intTotalConfirmed)
FROM		@MonthlyReportDiagnosisTable fdt
INNER JOIN	dbo.trtDiagnosisToGroupForReportType dtg
ON			dtg.idfsDiagnosis = fdt.idfsDiagnosis AND
dtg.idfsCustomReportType = @idfsCustomReportType
group by	dtg.idfsReportDiagnosisGroup	
	
	

  	
UPDATE		ft
SET	
  ft.intAge_0_1 = CASE WHEN fdt.intAge_0_1 = 0 THEN NULL ELSE fdt.intAge_0_1 END,
	ft.intAge_1_4 = CASE WHEN fdt.intAge_1_4 = 0 THEN NULL ELSE fdt.intAge_1_4 END, 
	ft.intAge_5_14 = CASE WHEN fdt.intAge_5_14 = 0 THEN NULL ELSE fdt.intAge_5_14 END, 
	ft.intAge_15_19 = CASE WHEN fdt.intAge_15_19 = 0 THEN NULL ELSE fdt.intAge_15_19 END, 
	ft.intAge_20_29 = CASE WHEN fdt.intAge_20_29 = 0 THEN NULL ELSE fdt.intAge_20_29 END, 
	ft.intAge_30_59 = CASE WHEN fdt.intAge_30_59 = 0 THEN NULL ELSE fdt.intAge_30_59 END, 
	ft.intAge_60_more = CASE WHEN fdt.intAge_60_more = 0 THEN NULL ELSE fdt.intAge_60_more END, 
	ft.intTotal = fdt.intTotal, 
	ft.intLabTested = CASE WHEN fdt.intLabTested = 0 THEN NULL ELSE fdt.intLabTested END,
	ft.intLabConfirmed = CASE WHEN fdt.intLabConfirmed = 0 THEN NULL ELSE fdt.intLabConfirmed END,
	ft.intTotalConfirmed = CASE WHEN fdt.intTotalConfirmed = 0 THEN NULL ELSE fdt.intTotalConfirmed END 
FROM		@ReportTable ft
INNER JOIN	@MonthlyReportDiagnosisTable fdt
ON			fdt.idfsDiagnosis = ft.idfsBaseReference	
	
	
UPDATE		ft
SET	
  ft.intAge_0_1 = CASE WHEN fdgt.intAge_0_1 = 0 THEN NULL ELSE fdgt.intAge_0_1 END,	
	ft.intAge_1_4 = CASE WHEN fdgt.intAge_1_4 = 0 THEN NULL ELSE fdgt.intAge_1_4 END,  
	ft.intAge_5_14 = CASE WHEN fdgt.intAge_5_14 = 0 THEN NULL ELSE fdgt.intAge_5_14 END, 
	ft.intAge_15_19 = CASE WHEN fdgt.intAge_15_19 = 0 THEN NULL ELSE fdgt.intAge_15_19 END, 
	ft.intAge_20_29 = CASE WHEN fdgt.intAge_20_29 = 0 THEN NULL ELSE fdgt.intAge_20_29 END, 
	ft.intAge_30_59 = CASE WHEN fdgt.intAge_30_59 = 0 THEN NULL ELSE fdgt.intAge_30_59 END , 
	ft.intAge_60_more = CASE WHEN fdgt.intAge_60_more = 0 THEN NULL ELSE fdgt.intAge_60_more END, 
	ft.intTotal = fdgt.intTotal, 
	ft.intLabTested = CASE WHEN fdgt.intLabTested = 0 THEN NULL ELSE fdgt.intLabTested END,	
	ft.intLabConfirmed = CASE WHEN fdgt.intLabConfirmed = 0 THEN NULL ELSE fdgt.intLabConfirmed END,	
	ft.intTotalConfirmed = CASE WHEN fdgt.intTotalConfirmed = 0 THEN NULL ELSE fdgt.intTotalConfirmed END 
FROM		@ReportTable ft
INNER JOIN	@MonthlyReportDiagnosisGroupTable fdgt
ON			fdgt.idfsDiagnosisGroup = ft.idfsBaseReference		
	
	
	




SELECT	@na = ISNULL(RTrim(r.[name]) + N' ', N'')
FROM	report.FN_GBL_ReferenceRepair_GET(@LangID, 19000132) r	-- Additional report Text
where	r.strDefault = N'N/A'


SELECT	@strICD10CodeAdaptatiON = ISNULL(RTrim(r.[name]) + N' ', N'')
FROM	report.FN_GBL_ReferenceRepair_GET(@LangID, 19000132) r	-- Additional report Text
  INNER JOIN trtBaseReference br
  ON br.idfsBaseReference = r.idfsReference
WHERE	br.strBaseReferenceCode = N'ICD-10 Code Adaptation'


UPDATE		ft
SET	
	 ft.strICD10 = CASE WHEN rr.intNullValueInsteadZero & 1 > 0 THEN ft.strICD10 + ISNULL(' ' + @strICD10CodeAdaptation, '') ELSE ft.strICD10 END		
	,ft.intLabTested = CASE WHEN rr.intNullValueInsteadZero & 2 > 0 THEN null /*@na*/ ELSE ft.intLabTested END		
	,ft.intLabConfirmed = CASE WHEN rr.intNullValueInsteadZero & 4 > 0 THEN null /*@na*/ ELSE ft.intLabConfirmed END		
  ,ft.intTotalConfirmed = CASE WHEN rr.intNullValueInsteadZero & 8 > 0  THEN null /*@na*/ ELSE ft.intTotalConfirmed END 
FROM		@ReportTable ft
  INNER JOIN 	dbo.trtReportRows rr
  ON rr.idfsCustomReportType = @idfsCustomReportType
  AND rr.idfsDiagnosisOrReportDiagnosisGroup = ft.idfsBaseReference	
  	

DECLARE	@NA_DiseaseTable	TABLE
(	strDiseaseName		NVARCHAR(300) collate database_default NOT NULL, --46
	No_LAB_TESTED		smallint,
	No_LAB_CONFIRMED	smallint,
	TOTAL_CONFIRMED		smallint
)

INSERT INTO @NA_DiseaseTable(strDiseaseName,No_LAB_TESTED,No_LAB_CONFIRMED,TOTAL_CONFIRMED) 	
SELECT Disease,No_LAB_TESTED,No_LAB_CONFIRMED,TOTAL_CONFIRMED 
FROM (
SELECT N'Tetanus' AS Disease,1 AS No_LAB_TESTED,1 AS No_LAB_CONFIRMED,1 AS TOTAL_CONFIRMED,'en-US' strLanguage UNION ALL
SELECT N'AFP/Acute poliomyelitis',0,0,1,'en-US' UNION ALL
SELECT N'Probable food-borne intoxication',0,1,1,'en-US' UNION ALL
SELECT N'Unspecified infectious diarrheal diseases',0,1,1,'en-US' UNION ALL
SELECT N'Arthropods transmitted viral fevers and viral hemorrhagic fevers',0,1,1,'en-US' UNION ALL
SELECT N'15-49 Female Mortality',1,1,1,'en-US' UNION ALL
SELECT N'0-5 Children Mortality',1,1,1,'en-US' UNION ALL
SELECT N'Contact with and exposure to rabies',1,1,1,'en-US' UNION ALL
SELECT N'Contact with venomous snakes and lizards',1,1,1,'en-US' UNION ALL
SELECT N'Contact with venomous insects',1,1,1,'en-US' UNION ALL
SELECT N'HIV - AIDS Tested',1,1,1,'en-US' UNION ALL
SELECT N'HIV - AIDS Tested Pregnant',1,1,1,'en-US' UNION ALL
SELECT N'ტეტანუსი',1,1,1,'ka-GE' UNION ALL
SELECT N'მდდ/მწვავე პოლიომიელიტი',0,0,1,'ka-GE' UNION ALL
SELECT N'სავარაუდო საკვებისმიერი მოშხამვა',0,1,1,'ka-GE' UNION ALL
SELECT N'სავარაუდო ინფექციური წარმოშობის დიარეები',0,1,1,'ka-GE' UNION ALL
SELECT N'სავარაუდო ვირუსული ჰემორაგიული ცხელებები',0,1,1,'ka-GE' UNION ALL
SELECT N'15-49 წლის ასაკის ქალის სიკვდილი',1,1,1,'ka-GE' UNION ALL
SELECT N'0-5 წლამდე ბავშვის სიკვდილი',1,1,1,'ka-GE' UNION ALL
SELECT N'ცოფის რისკის მქონე ექსპოზიცია ',1,1,1,'ka-GE' UNION ALL
SELECT N'შხამიანი ქვეწარმავლის ნაკბენი',1,1,1,'ka-GE' UNION ALL
SELECT N'შხამიანი მწერის ნაკბენი',1,1,1,'ka-GE' UNION ALL
SELECT N'აივ - შიდსზე ტესტირებული',1,1,1,'ka-GE' UNION ALL
SELECT N'აივ - შიდსზე ტესტირებული ორსულები',1,1,1,'ka-GE' UNION ALL
SELECT N'Столбняк' AS Disease,1 AS No_LAB_TESTED,1 AS No_LAB_CONFIRMED,1 AS TOTAL_CONFIRMED,'ru-RU' strLanguage UNION ALL
SELECT N'ОВП/острый полиомиелит',0,0,1,'ru-RU' UNION ALL
SELECT N'Возможные пищевые отравления',0,1,1,'ru-RU' UNION ALL
SELECT N'Диарея и гастроэнтерит предположительно инфекционного происхождения',0,1,1,'ru-RU' UNION ALL
SELECT N'Вирусные лихорадки, передаваемые членистоногими и вирусные геморрагические лихорадки',0,1,1,'ru-RU' UNION ALL
SELECT N'Смерть женщины в возрасте от 15 до 49 лет',1,1,1,'ru-RU' UNION ALL
SELECT N'Смерть ребенка в возрасте от 0 до 5 лет',1,1,1,'ru-RU' UNION ALL
SELECT N'Контакт с больным и возможность заражения бешенством',1,1,1,'ru-RU' UNION ALL
SELECT N'Контакт с ядовитыми змеями и ящерицами',1,1,1,'ru-RU' UNION ALL
SELECT N'Контакт с ядовитыми насекомыми',1,1,1,'ru-RU' UNION ALL
SELECT N'Протестированные на ВИЧ - СПИД',1,1,1,'ru-RU' UNION ALL
SELECT N'Протестированные на ВИЧ - СПИД беременные',1,1,1,'ru-RU'
) A
WHERE strLanguage=@LangID

DECLARE @NAVALUE AS NVARCHAR(10)
SELECT @NAVALUE=CASE WHEN @LangID='ka-GE' THEN N'ა/შ' ELSE 'N/A' END  	

SELECT 
	R.idfsBaseReference,
	R.strDiseaseName,
	R.strICD10,
	R.intAge_0_1,
	R.intAge_1_4,
	R.intAge_5_14,
	R.intAge_15_19,
	R.intAge_20_29,
	R.intAge_30_59,
	R.intAge_60_more,
	R.intTotal,
	CASE WHEN ISNULL(NA.No_LAB_TESTED,0)=1 THEN @NAVALUE ELSE CAST(R.intLabTested AS NVARCHAR(5)) END intLabTested,
	CASE WHEN ISNULL(NA.No_LAB_CONFIRMED,0)=1 THEN @NAVALUE ELSE CAST(R.intLabConfirmed  AS NVARCHAR(5)) END intLabConfirmed,
	CASE WHEN ISNULL(NA.TOTAL_CONFIRMED,0)=1 THEN @NAVALUE ELSE CAST(R.intTotalConfirmed AS NVARCHAR(5))END intTotalConfirmed,
	R.intOrder
FROM @ReportTable R
LEFT JOIN @NA_DiseaseTable NA ON NA.strDiseaseName=R.strDiseaseName
order by intOrder
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_DIAGNOSISREFERENCE_GETList]...';


GO
--=================================================================================================
-- Name: USP_REF_DIAGNOSISREFERENCE_GETList
--
-- Description:	Returns list of diagnosis/disease references
--							
-- Author:  Philip Shaffer
--
-- Revision History:
-- Name				 Date		 Change Detail
-- ----------------	 ----------	 -------------------------------------------------------------------
-- Doug Albanese	 07/16/2021	 Initial Release
-- Doug Albanese	 07/07/2022	 Rewrote entire SP for better performance and filtering of correct diagnosises, used for the FFD Determinants
-- Doug Albanese	 09/22/2022	 Rewrite to include other determinant types that aren't disease releated
-- Doug Albanese	 02/08/2023	 Changed how exlucsions are determined for the Determinants list.
-- Doug Albanese	 02/16/2023	 Changing the method on pulling determinanta again. Found another problem that didn't work for all situations
-- Test Code:
-- exec USP_REF_DIAGNOSISREFERENCE_GETList 'en', NULL, NULL
-- exec USP_REF_DIAGNOSISREFERENCE_GETList 'en', 'Hu', NULL
-- exec USP_REF_DIAGNOSISREFERENCE_GETList 'en', NULL, 32
--=================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_DIAGNOSISREFERENCE_GETList] 
	@LangID				   NVARCHAR(50)
	,@idfsFormTemplate	   BIGINT
	,@idfsFormType		   BIGINT
AS
BEGIN
	DECLARE @AccessoryCode INT = 510
	DECLARE @NonDisease	   BIT = 0

	DECLARE @idfsDiagnosisExclusions TABLE (
		idfsDiagnosis		BIGINT
	)

   DECLARE @Determinants TABLE (
	  idfsDiagnosis BIGINT,
	  strName  NVARCHAR(200)
   )

   BEGIN TRY
	  IF (@idfsFormType = 10034018 or @idfsFormType = 10034019) --Test Details / Test Run
		 BEGIN
			SET @NonDisease = 1

			INSERT INTO @Determinants
			SELECT
			   BR.idfsBaseReference AS idfsDiagnosis,
			   BRT.name AS strName
			FROM 
			   trtBaseReference BR
			INNER JOIN FN_GBL_ReferenceRepair('en-us', 19000097) BRT
			ON BRT.idfsReference = BR.idfsBaseReference
			WHERE
			   BR.intRowStatus = 0
		 END

	  IF @idfsFormType = 10034025 --Vector type specific data
		 BEGIN
			SET @NonDisease = 1

			INSERT INTO @Determinants
			SELECT
			   VT.idfsVectorType AS idfsDiagnosis,
			   VTT.name AS strName
			FROM 
			   trtVectorType VT
			INNER JOIN FN_GBL_ReferenceRepair('en-us', 19000140) VTT
			ON VTT.idfsReference = VT.idfsVectorType
			WHERE
			   VT.intRowStatus = 0
		 END

	   DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS',
	   @returnCode BIGINT = 0;
	
	  IF @NonDisease = 0
		 BEGIN
			
			  SELECT
				  @AccessoryCode = intHACode 
			  FROM 
				  trtBaseReference 
			  WHERE 
				  idfsReferenceType = 19000034 AND
				  introwStatus = 0 AND
				  idfsBaseReference = @idfsFormType
		
			  IF (@AccessoryCode IS NULL) SET @AccessoryCode = 510

			  INSERT INTO @idfsDiagnosisExclusions
			  SELECT
				  dv.idfsBaseReference
			  FROM
				  ffDeterminantValue dv
			  WHERE
				  dv.idfsFormTemplate = @idfsFormTemplate AND
				  dv.intRowStatus = 0	
			
			INSERT INTO @Determinants
			  SELECT d.idfsDiagnosis,
				  dbr.[name] AS strName
			  FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS dbr
			  INNER JOIN dbo.trtDiagnosis d
				  ON d.idfsDiagnosis = dbr.idfsReference
			  LEFT JOIN dbo.FN_GBL_Reference_GETList(@LangID, 19000020) AS ut
				  ON d.idfsUsingType = ut.idfsReference
			  WHERE (
					  dbr.intHACode IS NULL
					  OR dbr.intHACode > 0
					  )
				  AND d.intRowStatus = 0
				  AND dbr.intRowStatus = 0
				  AND (
				  (
					  @AccessoryCode IN (
						  SELECT *
						  FROM dbo.FN_GBL_SplitHACode(dbr.intHaCode, 510)
						  )
					  )
				  OR (@AccessoryCode IS NULL)
				  ) AND
				  idfsDiagnosis NOT IN (
					  SELECT idfsDiagnosis FROM @idfsDiagnosisExclusions
				  )
			  ORDER BY dbr.[name];
		 ENd


		 SELECT
			idfsDiagnosis,
			strName
		 FROM
			@Determinants
		 ORDER BY
			strName

	END TRY
	BEGIN CATCH
		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_FlexForm_Get]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_FlexForm_Get
-- Description: Gets list of the Parameters.
--          
-- Revision History:
-- Name				Date			Change
-- ---------------	----------	--------------------------------------------------------------------
-- Doug Albabese	01/06/2020	Initial release for new API.
-- Doug Albanese	07/02/2020	Added field blnGrid to denote the displaying of data in a table format
-- Doug Albanese	09/30/2020	Added filtering for language on the Design Option Tables
-- Doug Albanese	01/06/2021	Added idfsEditMode to clarify if the parameter is required or not.
-- Doug Albanese	02/02/2021	Found a static value for English in this procedure.
-- Doug Albanese	08/01/2021	Added idfsFormTemplate for ease of access
-- Mark Wilson		09/29/2021	Updated to remove E7 FN_FF_DesignLanguageForParameter_GET, 
--								removed unused parameters
-- Doug Albanese	03/17/2022	Added a "commented out" section to replace, when development is not happening during core hours
--	Doug Albanese	08/02/2022	Fix for IGAT #400. Extra parameters showing up that didn't belong to questionnnaire on matrix.
-- Doug Albanese	 01/0/2023	 Changed up a join to see if the displayed labeling will work better for the customer.
-- Doug Albanese	 02/06/2023	 Changed how Parameters, whith no sections, or ordered.
/*
DECLARE    @return_value int

 

EXEC    @return_value = [dbo].[USP_ADMIN_FF_FlexForm_Get]
        @LangID = N'en-US',
        @idfsDiagnosis = 7719020000000,
        @idfsFormType = 10034010,
        @idfsFormTemplate = NULL

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_FlexForm_Get] (
	@LangID						NVARCHAR(50) = NULL
	,@idfsDiagnosis				BIGINT = NULL
	,@idfsFormType				BIGINT = NULL
	,@idfsFormTemplate			BIGINT = NULL
	)
AS
BEGIN
	DECLARE @idfsCountry AS BIGINT,
			@idfsLanguage BIGINT = dbo.FN_GBL_LanguageCode_GET(@LangID)
	DECLARE @tmpTemplate AS TABLE (
		idfsFormTemplate BIGINT
		,IsUNITemplate BIT
		)
	DECLARE @returnCode INT = 0;
	DECLARE @returnMsg NVARCHAR(MAX) = 'SUCCESS';

	BEGIN TRY
		IF @idfsFormTemplate IS NULL
			BEGIN
				--Obtain idfsFormTemplate, via given parameters of idfsDiagnosis and idfsFormType
				---------------------------------------------------------------------------------
				SET @idfsCountry = dbo.FN_GBL_CurrentCountry_GET()

				INSERT INTO @tmpTemplate
				EXECUTE dbo.USP_ADMIN_FF_ActualTemplate_GET 
					@idfsCountry,
					@idfsDiagnosis,
					@idfsFormType

				SELECT TOP 1 @idfsFormTemplate = idfsFormTemplate
				FROM @tmpTemplate

				IF @idfsFormTemplate = - 1
					SET @idfsFormTemplate = NULL

				---------------------------------------------------------------------------------
			END
	  
		SELECT 
			s.idfsParentSection
			,COALESCE(p.idfsSection,0) AS idfsSection
			,p.idfsParameter
			,RF.Name AS SectionName
			,PN.Name AS ParameterName
			,PTR.Name AS parameterType
			,p.idfsParameterType
			,pt.idfsReferenceType
			,p.idfsEditor
			,COALESCE(sdo.intOrder,2147483646) AS SectionOrder
			,PDO.intOrder	AS ParameterOrder
			,s.blnGrid
			,s.blnFixedRowSet
			,PFT.idfsEditMode
			,pft.idfsFormTemplate
		FROM dbo.ffParameter p
		LEFT JOIN dbo.ffParameterForTemplate PFT ON PFT.idfsParameter = p.idfsParameter AND PFT.intRowStatus = 0
		LEFT JOIN dbo.ffSection s ON s.idfsSection = p.idfsSection
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000101) RF ON S.idfsSection = RF.idfsReference
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000071) PTR ON PTR.idfsReference = P.idfsParameterType
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000070) PN ON PN.idfsReference = P.idfsParameterCaption
		LEFT JOIN dbo.ffParameterDesignOption PDO ON PFT.idfsParameter = PDO.idfsParameter
			AND PFT.idfsFormTemplate = PDO.idfsFormTemplate
			AND PDO.idfsLanguage = @idfsLanguage
			AND PDO.intRowStatus = 0
		LEFT JOIN dbo.ffSectionDesignOption sdo ON sdo.idfsSection = s.idfsSection 
			AND sdo.idfsFormTemplate = @idfsFormTemplate 
			AND sdo.idfsLanguage = @idfsLanguage
			AND sdo.intRowStatus = 0
		LEFT JOIN dbo.ffParameterType PT
			ON pt.idfsParameterType = p.idfsParameterType
		WHERE PFT.idfsFormTemplate = @idfsFormTemplate
		ORDER BY  SectionOrder
			,pdo.intOrder
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT = 1
			ROLLBACK;

		SET @returnCode = ERROR_NUMBER();
		SET @returnMsg = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: ' + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE()) + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: ' + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();;

		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_SITE_DEL]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_SITE_DEL
--
-- Description:	Sets a site record to "inactive".
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     11/12/2019 Initial release.
-- Mark Wilson      02/07/2023 Removed checks for child objects per conversation with Anatoliy.
--                             Also, added code to deactivate users and roles associated with the site.

/*

EXEC dbo.USP_ADMIN_SITE_DEL 
	@LanguageID = 'en-US',
	@SiteID = 3614,
	@UserName = 'Mark'


*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_SITE_DEL] 
(
	@LanguageID NVARCHAR(50) = NULL,
	@SiteID BIGINT,
	@UserName NVARCHAR(200)
)
AS
BEGIN
	SET NOCOUNT ON;

	BEGIN TRY
		DECLARE @ReturnCode INT = 0,
				@ReturnMessage NVARCHAR(MAX) = 'SUCCESS'

		-- table to hold list of Employees to delete
		DECLARE @tlbEmployee TABLE
		(
			idfEmployee BIGINT

		);
--------------------------------------------------------------------------------------------------------------------
--- Disable all users and roles associated with this site before the site is de-activated
--------------------------------------------------------------------------------------------------------------------
			INSERT INTO @tlbEmployee
			SELECT idfEmployee FROM dbo.tlbEmployee WHERE idfsSite = @SiteID;

			UPDATE dbo.tlbEmployeeGroup
			SET intRowStatus = 1,
				AuditUpdateDTM = GETDATE(),
				AuditUpdateUser = @UserName
			WHERE idfsSite = @SiteID;

			UPDATE dbo.tlbEmployee
			SET intRowStatus = 1,
				AuditUpdateDTM = GETDATE(),
				AuditUpdateUser = @UserName
			WHERE idfsSite = @SiteID;

			UPDATE dbo.LkupRoleSystemFunctionAccess
			SET intRowStatus = 1,
				AuditUpdateDTM = GETDATE(),
				AuditUpdateUser = @UserName
			WHERE idfEmployee IN (SELECT idfEmployee FROM @tlbEmployee);
			
--------------------------------------------------------------------------------------------------------------------
--- preceding lines were added to disable users and roles associated with the deleted sites
--------------------------------------------------------------------------------------------------------------------		
		
		UPDATE dbo.tstSite
		SET intRowStatus = 1,
			AuditUpdateDTM = GETDATE(),
			AuditUpdateUser = @UserName
		WHERE idfsSite = @SiteID;
		

		IF @@TRANCOUNT > 0
			AND @returnCode = 0
			COMMIT;

		SELECT @ReturnCode ReturnCode
			,@ReturnMessage ReturnMessage;
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;

		SET @ReturnCode = ERROR_NUMBER();
		SET @ReturnMessage = ERROR_MESSAGE();

		SELECT @ReturnCode ReturnCode
			,@ReturnMessage ReturnMessage;

		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_TESTS_GetList]...';


GO
-- ================================================================================================
-- Name: USP_HUM_TESTS_GetList
--
-- Description: List human disease report tests by human disease report identifier.
--          
-- Author: JWJ
--
-- Revision History:
-- Name	            Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- JWJ				20180603   created 
-- HAP				2018110    Added strTestResult field to result set 
-- HAP              20181109   Added TestValidation fields to result set 
-- LJM				20201230   Added strTestedByPerson and strTestedByOffice as output 
--                             parameters
-- LJM				20210105   Added strTestCategory and blnNonLaboratoryTest, 
--                             idfInterpretedByPerson,idfValidatedByPerson as output parameters.
-- Leo Tracchia		10/21/2022 Fix for properly deleting tests for human disease report DevOps 
--                             defect 5006
-- Stephen Long     01/04/2023 Added check for deleted test status.  Fixed main table to be
--                             tlbTesting and not the material table.  Changed to join.
-- Doug Albanese    01/06/2023 Removed the coalescing of null values on Interpreted and Validated 
--                             dates. They have to be done on the application side.
-- Stephen Long     01/09/2023 Fix to show the validated by person from tlbTesting when the test 
--                             record was created and updated from the laboratory module.
-- Stephen Long     01/16/2023 Fix to look at test status types when a laboratory assigned test 
--                             to determine if validated or not (final and amended status types).
-- Stephen Long     02/06/2023 Fix for bug 5620; removed unneeded joins and fields.
-- 
--
-- Testing code:
-- EXEC USP_HUM_TESTS_GetList 'en', @idfHumanCase=19  --10
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_HUM_TESTS_GetList]
    @LangID NVARCHAR(50),
    @idfHumanCase BIGINT = NULL,
    @SearchDiagnosis BIGINT = NULL
AS
BEGIN
    BEGIN TRY
        SELECT Samples.idfHumanCase,
               Samples.idfMaterial,
               Samples.strBarcode,          -- Lab sample ID
               Samples.strFieldBarcode,     -- Local Sample ID
               Samples.idfsSampleType,
               SampleType.name AS strSampleTypeName,
               Samples.datFieldCollectionDate,
               Samples.idfSendToOffice,
               Samples.idfFieldCollectedByOffice,
               Samples.datFieldSentDate,
               Samples.idfsSampleStatus,
               sampleStatus.name AS SampleStatusTypeName,
               Samples.idfFieldCollectedByPerson,
               Samples.datSampleStatusDate,
               Samples.rowGuid AS sampleGuid,
               t.idfTesting,
               t.idfsTestName,
               t.idfsTestCategory,
               testCat.name AS strTestCategory,
               t.idfsTestResult,
               t.idfsTestStatus,
               t.idfsDiagnosis,
               disease.name AS strDiagnosis,
               tstatus.name AS strTestStatus,
               tresult.name AS strTestResult,
               TestName.name,
               t.datReceivedDate,
               t.datConcludedDate,
               t.idfTestedByPerson,
               t.idfTestedByOffice,
			   tv.datInterpretationDate AS datInterpretedDate,
               tv.idfsInterpretedStatus,
               testinterpretedstatus.name AS strInterpretedStatus,
               tv.strInterpretedComment,
               ISNULL(interpretedByPerson.strFamilyName, N'') + ISNULL(', ' + interpretedByPerson.strFirstName, N'')
                   + ISNULL(' ' + interpretedByPerson.strSecondName, N'') AS strInterpretedBy,
               tv.datValidationDate AS datValidationDate,
               ISNULL(tv.blnValidateStatus, 0) AS blnValidateStatus,
               tv.strValidateComment,
               ISNULL(validatedByPerson.strFamilyName, N'') + ISNULL(', ' + validatedByPerson.strFirstName, N'')
                   + ISNULL(' ' + validatedByPerson.strSecondName, N'') AS strValidatedBy,
               t.rowGuid AS testGuid,
               t.intRowStatus,
               testedbyPerson.strFirstName + ' ' + ISNULL(testedbyPerson.strSecondName, '') + '  '
               + testedbyPerson.strFamilyName AS strTestedByPerson,
               testedByOffice.FullName AS strTestedByOffice,
               ISNULL(t.blnNonLaboratoryTest, 0) AS blnNonLaboratoryTest,
               tv.idfInterpretedByPerson,
               tv.idfValidatedByPerson AS idfValidatedByPerson,
               tv.idfTestValidation
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial Samples
                ON Samples.idfMaterial = t.idfMaterial
            INNER JOIN dbo.tlbHumanCase hc
                ON Samples.idfHumanCase = hc.idfHumanCase
            INNER JOIN dbo.FN_GBL_REFERENCEREPAIR(@LangID, 19000087) SampleType
                ON SampleType.idfsReference = Samples.idfsSampleType
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) disease
                ON disease.idfsReference = t.idfsDiagnosis
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000015) sampleStatus
                ON sampleStatus.idfsReference = Samples.idfsSampleStatus
            LEFT JOIN dbo.FN_GBL_REFERENCEREPAIR(@LangID, 19000097) TestName
                ON TestName.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000001) tstatus
                ON tstatus.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000096) tresult
                ON tresult.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.tlbTestValidation tv
                ON tv.idfTesting = t.idfTesting
                   AND tv.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson interpretedByPerson
                ON interpretedByPerson.idfPerson = tv.idfInterpretedByPerson
            LEFT JOIN dbo.tlbPerson testedbyPerson
                ON (testedbyPerson.idfPerson = t.idfTestedByPerson)
            LEFT JOIN dbo.FN_GBL_INSTITUTION(@LangID) testedByOffice
                ON testedByOffice.idfOffice = t.idfTestedByOffice
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000095) testCat
                ON testCat.idfsReference = t.idfsTestCategory
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000106) testinterpretedstatus
                ON testinterpretedstatus.idfsReference = tv.idfsInterpretedStatus
            LEFT JOIN dbo.tlbPerson validatedByPerson
                ON (validatedByPerson.idfPerson = tv.idfValidatedByPerson)
        WHERE Samples.idfHumanCase = @idfHumanCase
              AND Samples.intRowStatus = 0
              and t.idfHumanCase is not null
              AND t.intRowStatus = 0
              AND t.idfsTestStatus <> 10001007; -- Deleted
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_SAMPLE_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_SAMPLE_GETList
--
-- Description:	Get sample list for the laboratory module use case LUC01.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     07/18/2018 Initial release.
-- Stephen Long	    12/19/2018 Added pagination logic.
-- Stephen Long     01/14/2019 Split out search functionality (where conditions) for better 
--                             performance on this procedure.
-- Stephen Long     01/30/2019 Added sample disease reference join and removed the vector 
--                             surveillance session joins as they are no longer needed.
-- Stephen Long     02/11/2019 Fix to the value used for the test completed indicator.  It was 
--                             using the wrong base reference value.
-- Stephen Long     02/21/2019 Changed field collection and field sent to collection and sent to 
--                             be consistent on naming.  Added parent sample ID to support the 
--                             edit transfer use case.
-- Stephen Long     03/28/2019 Removed test status 'Not Started' as criteria for the test assigned 
--                             indicator and test assigned count.
-- Stephen Long     06/22/2019 Removal of herd join and joined species on the sample table.
-- Stephen Long     07/01/2019 Corrected reference type on monitoring session category.
-- Stephen Long     07/09/2019 Added human master ID to select as placeholder for model.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     07/17/2019 Added vector join and field vector ID to the patient/species/vector.
-- Stephen Long     07/28/2019 Corrected sample kind ID where clause for aliquots/derivatives.
-- Stephen Long     08/12/2019 Corrected parenthesis for POCO error on sample kind where clause.
-- Stephen Long     08/30/2019 Removed commented out IF ELSE for individual sample.
-- Stephen Long     09/11/2019 Added sample destroyed status to sample status where clause.  Added 
--                             pagination set 0 to bring back "all" records.
-- Stephen Long     09/26/2019 Added sample list parameter and where clause.
-- Stephen Long     10/03/2019 Added comma to split sample list delimeter.
-- Stephen Long     10/17/2019 Added intRowStatus and non-laboratory test check on test completed 
--                             and test assigned indicators, and test assigned count.
-- Stephen Long     01/21/2020 Converted site ID to site list for site filtration.
-- Stephen Long     02/19/2020 Corrected left joins needing intRowStatus = 0.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     03/16/2020 Added sample status type of transferred out to include in the list.
-- Stephen Long     04/16/2020 Correction on vector surveillance session disease ID's and names.
-- Stephen Long     04/20/2020 Added vector type ID and vector species type ID to the model.
-- Stephen Long     05/05/2020 Added transfer status type ID of final when sample status type ID 
--                             is transferred out.
-- Stephen Long     06/21/2020 Added additional criteria to show samples with a final or amended 
--                             test to be selected within the accession timeframe.
-- Stephen Long     06/30/2020 Added additional criteria to pull back transferred in records after
--                             accessioned in.
-- Stephen Long     07/06/2020 Added lab module source indicator to model.
-- Stephen Long     10/27/2020 Removed test assigned indicator, and split out queries for better 
--                             performance.
-- Stephen Long     10/29/2020 Added test unassigned and test completed parameters and where 
--                             criteria.
-- Stephen Long     10/31/2020 Correct disease report/session query where criteria; prevent dups.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/15/2020 Changed join for vector surveillance session diseases to the sample
--                             table.
-- Stephen Long     12/31/2020 Correct record and unaccessioned counts.
-- Stephen Long     01/21/2021 Change counts from distinct count to group by with sub-query.
-- Stephen Long     02/08/2021 Change where criteria to handle null organization for the central
--                             data repository.
-- Stephen Long     06/28/2021 Applied new pagination parameters.
-- Mark Wilson		08/11/2021 updated to join tlbMonitoringSessionToDiagnosis
-- Stephen Long     09/18/2021 Removed unneeded fields and joins to improve performance.
-- Stephen Long     12/14/2021 Added sample status date to the query.
-- Stephen Long     02/03/2022 Corrected monitoring session to diagnosis join.
-- Stephen Long     02/07/2022 Removed unneeded joins on the disease fields.
-- Stephen Long     02/17/2022 Fix on where criteria for test status types.
-- Stephen Long     03/10/2022 Changed note to comment and transfer count to transferred count.
-- Stephen Long     03/24/2022 Added final results table variable to account for duplicates that 
--                             may return from filtration rules.
-- Stephen Long     04/15/2022 Fix to filtration query grouping.
-- Stephen Long     05/17/2022 Removed primary key from monitoring and vector session disease 
--                             table variables.
-- Stephen Long     05/20/2022 Added string agg to session diseases.
-- Stephen Long     05/23/2022 Added check on testing table to only look for laboratory tests and
--                             rejected samples check within sample window.
-- Stephen Long     06/20/2022 Added row status check when looking for parent samples.
-- Stephen Long     06/28/2022 Added check to include transferred out samples only when the 
--                             transfer is final and within the accession date window.
-- Stephen Long     07/26/2022 Updated case statement on disease id and name.
-- Stephen Long     08/17/2022 Added collection and entered date to the default sort order.
-- Stephen Long     09/21/2022 Removed test status types of final and amended from the in 
--                             repository samples within the accession date window check.  Changed 
--                             rejected samples to use collection date or entered date against the 
--                             date window (number of days for samples to stay in the list).
-- Stephen Long     10/04/2022 Bug fix on item 5057; don't show marked for deletion or marked 
--                             for destruction in the default listing.
-- Stephen Long     10/21/2022 Added display disease names separated by comma.
-- Stephen Long     11/03/2022 Added date to the table variable to store the collection date, if 
--                             available, otherwise entered date.  Sort order for default base on 
--                             this new date field.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/03/2023 Added check for user's site identifier when the sent to organization 
--                             is not present.
-- Stephen Long     01/10/2023 Updated for site filtration queries.
-- Stephen Long     02/07/2023 Fix for rejected samples - bug 5610.
-- 
-- Testing Code:
/*
DECLARE	@return_value int

EXEC	@return_value = [dbo].[USP_LAB_SAMPLE_GETList]
		@LanguageID = N'en-US',
		@SampleID = NULL,
		@ParentSampleID = NULL,
		@DaysFromAccessionDate = 60,
		@SampleList = NULL,
		@TestUnassignedIndicator = NULL,
		@TestCompletedIndicator = NULL,
		@UserID = 161287150000872, --rykermase
		@UserEmployeeID = 420664190000872,
		@UserSiteID = 864,
		@UserOrganizationID = 758210000000,
		@UserSiteGroupID = NULL,
		@Page = 1,
		@PageSize = 100,
		@SortColumn = N'AccessionDate',
		@SortOrder = N'ASC'

SELECT	'Return Value' = @return_value

GO
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_SAMPLE_GETList]
(
    @LanguageID NVARCHAR(50),
    @SampleID BIGINT = NULL,
    @ParentSampleID BIGINT = NULL,
    @DaysFromAccessionDate INT,
    @SampleList VARCHAR(MAX) = NULL,
    @TestUnassignedIndicator BIT = NULL,
    @TestCompletedIndicator BIT = NULL,
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL,
    @SortColumn VARCHAR(200) = 'Default'
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @UnaccessionedCount INT = 0,
            @TotalRowCount INT = 0;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        AccessionedIndicator BIT NOT NULL,
        AccessionConditionTypeID BIGINT NULL,
        DestructionDate DATETIME NULL, 
        SortDate DATETIME NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        AccessionedIndicator BIT NOT NULL,
        AccessionConditionTypeID BIGINT NULL,
        DestructionDate DATETIME NULL, 
        SortDate DATETIME NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @MonitoringSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @VectorSessionDiseases TABLE
    (
        ID BIGINT NOT NULL INDEX IX1 CLUSTERED,
        DiseaseIdentifiers VARCHAR(MAX) NOT NULL,
        DiseaseNames NVARCHAR(MAX) NOT NULL,
        DisplayDiseaseNames NVARCHAR(MAX) NOT NULL
    );
    DECLARE @SampleListTable TABLE (ID BIGINT NOT NULL);
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML;

    IF @SampleList IS NOT NULL
        INSERT INTO @SampleListTable
        SELECT CAST([Value] AS BIGINT)
        FROM dbo.FN_GBL_SYS_SplitList(@SampleList, NULL, ',')

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        INSERT INTO @MonitoringSessionDiseases
        SELECT MonitoringSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_MONITORING_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY MonitoringSessionID;

        INSERT INTO @VectorSessionDiseases
        SELECT VectorSurveillanceSessionID,
               STRING_AGG(DiseaseID, ',') AS DiseaseIdentifiers,
               STRING_AGG(DiseaseName, '|') AS DiseaseNames,
               REPLACE(STRING_AGG(DiseaseName, '|'), '|', ', ') AS DisplayDiseaseNames
        FROM dbo.FN_LAB_VECTOR_SESSION_DISEASES_GET(@LanguageID)
        GROUP BY VectorSurveillanceSessionID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        IF @SampleID IS NOT NULL
           OR @SampleList IS NOT NULL
           OR @ParentSampleID IS NOT NULL
        BEGIN
            INSERT INTO @FinalResults
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   CASE
                       WHEN m.datFieldCollectionDate IS NULL THEN
                           m.datEnteringDate
                       ELSE
                           m.datFieldCollectionDate
                   END,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbMaterial m
            WHERE m.intRowStatus = 0
                  AND (
                          @SampleList IS NULL
                          OR m.idfMaterial IN (
                                                  SELECT ID FROM @SampleListTable
                                              )
                      )
                  AND (
                          @SampleID IS NULL
                          OR m.idfMaterial = @SampleID
                      )
                  AND (
                          @ParentSampleID IS NULL
                          OR m.idfParentMaterial = @ParentSampleID
                      );
        END
        ELSE
        BEGIN
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   CASE
                       WHEN m.datFieldCollectionDate IS NULL THEN
                           m.datEnteringDate
                       ELSE
                           m.datFieldCollectionDate
                   END,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbMaterial m
            WHERE m.intRowStatus = 0
                  AND m.blnReadOnly = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND (
                          (
                              m.idfSendToOffice = @UserOrganizationID
                              AND m.idfSendToOffice IS NOT NULL
                          )
                          OR (
                                 m.idfsSite = @UserSiteID
                                 AND m.idfSendToOffice IS NULL
                             )
                      )
                  AND (
                          (
                              GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                              AND
                              (
                                  SELECT COUNT(*)
                                  FROM dbo.tlbTesting t
                                  WHERE t.idfMaterial = m.idfMaterial
                                        AND t.intRowStatus = 0
                                        AND t.blnNonLaboratoryTest = 0
                                        AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                              ) = 0
                              AND @TestUnassignedIndicator IS NOT NULL
                              AND m.blnAccessioned = 1
                              AND m.datAccession IS NOT NULL
                              AND m.idfsAccessionCondition IS NOT NULL
                              AND m.idfsSampleStatus = 10015007 -- In Repository
                          )
                          OR (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND
                                 (
                                     SELECT COUNT(*)
                                     FROM dbo.tlbTesting t
                                     WHERE t.idfMaterial = m.idfMaterial
                                           AND t.intRowStatus = 0
                                           AND t.blnNonLaboratoryTest = 0
                                           AND t.idfsTestStatus IN ( 10001001, 10001006 ) -- Final and Amended
                                 ) > 0
                                 AND @TestCompletedIndicator IS NOT NULL
                             )
                          OR (
                                 m.blnAccessioned = 0
                                 AND m.idfsAccessionCondition IS NULL
                                 AND m.idfsSampleStatus IS NULL
                                 AND @TestCompletedIndicator IS NULL
                                 AND @TestUnassignedIndicator IS NULL
                             )
                          OR ( -- Accessioned In with no in progress, preliminary tests assigned, Deleted or Destroyed
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND
                                 (
                                     SELECT COUNT(*)
                                     FROM dbo.tlbTesting t
                                     WHERE t.idfMaterial = m.idfMaterial
                                           AND t.intRowStatus = 0
                                           AND t.blnNonLaboratoryTest = 0
                                           AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                                 ) = 0
                                 AND m.idfsSampleStatus IN ( 10015007, 10015008, 10015009 ) -- In Repository, Deleted, Destroyed
                                 AND @TestUnassignedIndicator IS NULL
                                 AND @TestCompletedIndicator IS NULL
                             )
                          OR (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND m.idfsSampleStatus = 10015010 -- Transferred Out
                                 AND
                                 (
                                     SELECT COUNT(tr.idfTransferOut)
                                     FROM dbo.tlbTransferOutMaterial tom
                                         INNER JOIN dbo.tlbTransferOUT tr
                                             ON tr.idfTransferOut = tom.idfTransferOut
                                     WHERE tom.idfMaterial = m.idfMaterial
                                           AND tr.intRowStatus = 0
                                           AND tr.idfsTransferStatus IN ( 10001003 ) -- Final
                                 ) = 0
                                 AND @TestCompletedIndicator IS NULL
                                 AND @TestUnassignedIndicator IS NULL
                             ) --Transferred Out and Final
                          OR (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate))
                                 AND m.blnAccessioned = 0
                                 AND m.idfsAccessionCondition = 10108003 -- Rejected sample
                             )
                      );
        END

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        IF @UserOrganizationID IS NOT NULL --First-level sites (central data repository, general data repository, etc.) do not filter results.
        BEGIN
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   COALESCE(m.datFieldCollectionDate, m.datEnteringDate),
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = @UserSiteGroupID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND @UserSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   COALESCE(m.datFieldCollectionDate, m.datEnteringDate),
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's employee group level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   COALESCE(m.datFieldCollectionDate, m.datEnteringDate),
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            -- 
            -- Apply at the user's ID level, granted by a site group.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   COALESCE(m.datFieldCollectionDate, m.datEnteringDate),
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                    ON grantingSGS.idfsSite = m.idfsSite
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND ar.GrantingActorSiteGroupID IS NOT NULL
                  AND ar.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

            --
            -- Apply at the user's site group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   COALESCE(m.datFieldCollectionDate, m.datEnteringDate),
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tflSiteToSiteGroup sgs
                    ON sgs.idfSiteGroup = @UserSiteGroupID
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
            WHERE m.intRowStatus = 0
                  AND @UserSiteGroupID IS NOT NULL
                  AND sgs.idfsSite = m.idfsSite;

            -- 
            -- Apply at the user's site level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   COALESCE(m.datFieldCollectionDate, m.datEnteringDate),
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRule ar
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorSiteID = @UserSiteID
                       AND ara.ActorEmployeeGroupID IS NULL
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbMaterial m
                    ON m.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND m.idfsSite = ar.GrantingActorSiteID;

            DECLARE @UserEmployeeGroupID BIGINT = (
                                                      SELECT TOP 1
                                                          egm.idfEmployeeGroup
                                                      FROM dbo.tlbEmployeeGroupMember egm
                                                      WHERE egm.idfEmployee = @UserEmployeeID
                                                            AND egm.intRowStatus = 0
                                                  );

            -- Apply at the user's employee group level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   COALESCE(m.datFieldCollectionDate, m.datEnteringDate),
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRuleActor ara
                INNER JOIN dbo.AccessRule ar
                    ON ar.AccessRuleID = ara.AccessRuleID
                       AND ar.intRowStatus = 0
                       AND ar.GrantingActorSiteID IS NOT NULL
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfsSite = ar.GrantingActorSiteID
                       AND m.intRowStatus = 0
            WHERE ara.ActorEmployeeGroupID = @UserEmployeeGroupID
                  AND ara.intRowStatus = 0;

            -- 
            -- Apply at the user's ID level, granted by a site.
            --
            INSERT INTO @Results
            SELECT m.idfMaterial,
                   m.blnAccessioned,
                   m.idfsAccessionCondition,
                   m.datDestructionDate,
                   COALESCE(m.datFieldCollectionDate, m.datEnteringDate),
                   ar.ReadPermissionIndicator,
                   ar.AccessToPersonalDataPermissionIndicator,
                   ar.AccessToGenderAndAgeDataPermissionIndicator,
                   ar.WritePermissionIndicator,
                   ar.DeletePermissionIndicator
            FROM dbo.AccessRule ar
                INNER JOIN dbo.tstUserTable u
                    ON u.idfPerson = @UserEmployeeID
                       AND u.intRowStatus = 0
                INNER JOIN dbo.AccessRuleActor ara
                    ON ara.ActorUserID = u.idfUserID
                       AND ara.intRowStatus = 0
                INNER JOIN dbo.tlbMaterial m
                    ON m.intRowStatus = 0
            WHERE ar.GrantingActorSiteID IS NOT NULL
                  AND m.idfsSite = ar.GrantingActorSiteID;
        END;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE m.intRowStatus = 0
                  AND oa.idfsObjectOperation = 10059003 -- Read permission
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003 -- Read permission
              AND NOT EXISTS (
                              SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
              );

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT m.idfMaterial
            FROM dbo.tlbMaterial m
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        IF @SortColumn <> 'Query'
        BEGIN
            INSERT INTO @FinalResults
            SELECT res.ID,
                   res.AccessionedIndicator,
                   MAX(res.AccessionConditionTypeID),
                   MAX(res.DestructionDate), 
                   MAX(res.SortDate),
                   MAX(res.ReadPermissionIndicator),
                   MAX(res.AccessToPersonalDataPermissionIndicator),
                   MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
                   MAX(res.WritePermissionIndicator),
                   MAX(res.DeletePermissionIndicator)
            FROM @Results res
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = res.ID
                                      AND m.intRowStatus = 0
            WHERE (res.ReadPermissionIndicator IN ( 1, 3, 5 )
                  AND m.blnReadOnly = 0
                  AND m.idfsSampleType <> 10320001 --Unknown
                  AND (
                          (
                              GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                              AND
                              (
                                  SELECT COUNT(*)
                                  FROM dbo.tlbTesting t
                                  WHERE t.idfMaterial = m.idfMaterial
                                        AND t.intRowStatus = 0
                                        AND t.blnNonLaboratoryTest = 0
                                        AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                              ) = 0
                              AND @TestUnassignedIndicator IS NOT NULL
                              AND m.blnAccessioned = 1
                              AND m.datAccession IS NOT NULL
                              AND m.idfsAccessionCondition IS NOT NULL
                              AND m.idfsSampleStatus = 10015007 -- In Repository
                          )
                          OR (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND
                                 (
                                     SELECT COUNT(*)
                                     FROM dbo.tlbTesting t
                                     WHERE t.idfMaterial = m.idfMaterial
                                           AND t.intRowStatus = 0
                                           AND t.blnNonLaboratoryTest = 0
                                           AND t.idfsTestStatus IN ( 10001001, 10001006 ) -- Final and Amended
                                 ) > 0
                                 AND @TestCompletedIndicator IS NOT NULL
                             )
                          OR (
                                 m.blnAccessioned = 0
                                 AND m.idfsAccessionCondition IS NULL
                                 AND m.idfsSampleStatus IS NULL
                                 AND @TestCompletedIndicator IS NULL
                                 AND @TestUnassignedIndicator IS NULL
                             )
                          OR (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND
                                 (
                                     SELECT COUNT(*)
                                     FROM dbo.tlbTesting t
                                     WHERE t.idfMaterial = m.idfMaterial
                                           AND t.intRowStatus = 0
                                           AND t.blnNonLaboratoryTest = 0
                                           AND t.idfsTestStatus IN ( 10001003, 10001004, 10001005 ) -- In Progress, Preliminary and Not Started
                                 ) = 0
                                 AND m.idfsSampleStatus IN ( 10015007, 10015008, 10015009 ) -- In Repository, Deleted, Destroyed
                                 AND @TestUnassignedIndicator IS NULL
                                 AND @TestCompletedIndicator IS NULL
                             )
                          OR (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, m.datAccession)
                                 AND m.idfsSampleStatus = 10015010 -- Transferred Out
                                 AND
                                 (
                                     SELECT COUNT(tr.idfTransferOut)
                                     FROM dbo.tlbTransferOutMaterial tom
                                         INNER JOIN dbo.tlbTransferOUT tr
                                             ON tr.idfTransferOut = tom.idfTransferOut
                                     WHERE tom.idfMaterial = m.idfMaterial
                                           AND tr.intRowStatus = 0
                                           AND tr.idfsTransferStatus IN ( 10001003 ) -- Final
                                 ) = 0
                                 AND @TestCompletedIndicator IS NULL
                                 AND @TestUnassignedIndicator IS NULL
                             ) --Transferred Out and Final
                          OR (
                                 GETDATE() <= DATEADD(DAY, @DaysFromAccessionDate, COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate))
                                 AND m.blnAccessioned = 0
                                 AND m.idfsAccessionCondition = 10108003 -- Rejected sample
                             )
                      )
                      )
            GROUP BY res.ID, 
                     res.AccessionedIndicator;
        END

        SET @TotalRowCount =
        (
            SELECT COUNT(ID) FROM @FinalResults
        );
        SET @UnaccessionedCount =
        (
            SELECT COUNT(ID)
            FROM @FinalResults
            WHERE AccessionedIndicator = 0
                  AND AccessionConditionTypeID IS NULL
                  AND DestructionDate IS NULL 
        );

        SELECT m.idfMaterial AS SampleID,
               m.strBarcode AS EIDSSLaboratorySampleID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.idfsSampleType AS SampleTypeID,
               sampleType.name AS SampleTypeName,
               m.idfHuman AS HumanID,
               m.strCalculatedHumanName AS PatientOrFarmOwnerName,
               m.idfSpecies AS SpeciesID,
               m.idfAnimal AS AnimalID,
               a.strAnimalCode AS EIDSSAnimalID,
               m.idfVector AS VectorID,
               m.idfMonitoringSession AS MonitoringSessionID,
               m.idfVectorSurveillanceSession AS VectorSessionID,
               m.idfHumanCase AS HumanDiseaseReportID,
               m.idfVetCase AS VeterinaryDiseaseReportID,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               '' AS ReportOrSessionTypeName,
               m.TestCompletedIndicator,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       CAST(m.DiseaseID AS NVARCHAR(MAX))
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseIdentifiers
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseIdentifiers
                   ELSE
                       ''
               END AS DiseaseID,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DiseaseNames
                   ELSE
                       ''
               END AS DiseaseName,
               CASE
                   WHEN m.DiseaseID IS NOT NULL THEN
                       diseaseName.name
                   WHEN (NOT ISNULL(m.idfMonitoringSession, '') = '') THEN
                       msDiseases.DisplayDiseaseNames
                   WHEN
                   (
                       m.DiseaseID IS NULL
                       AND ISNULL(m.idfVectorSurveillanceSession, '') = ''
                   ) THEN
                       vsDiseases.DisplayDiseaseNames
                   ELSE
                       ''
               END AS DisplayDiseaseName,
               m.idfInDepartment AS FunctionalAreaID,
               functionalArea.name AS FunctionalAreaName,
               m.idfSubdivision AS FreezerSubdivisionID,
               m.StorageBoxPlace,
               m.datFieldCollectionDate AS CollectionDate,
               m.idfFieldCollectedByPerson AS CollectedByPersonID,
               m.idfFieldCollectedByOffice AS CollectedByOrganizationID,
               m.datFieldSentDate AS SentDate,
               m.idfSendToOffice AS SentToOrganizationID,
               m.idfsSite AS SiteID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               m.datEnteringDate AS EnteredDate,
               m.datOutOfRepositoryDate AS OutOfRepositoryDate,
               m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID,
               m.blnReadOnly AS ReadOnlyIndicator,
               m.blnAccessioned AS AccessionIndicator,
               m.datAccession AS AccessionDate,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               CASE
                   WHEN m.blnAccessioned = 0
                        AND m.idfsAccessionCondition IS NULL THEN
                       'Un-accessioned'
                   WHEN m.idfsSampleStatus IS NULL THEN
                       accessionConditionType.name
                   WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                       accessionConditionType.name
                   ELSE
                       sampleStatusType.name
               END AS AccessionConditionOrSampleStatusTypeName,
               m.idfAccesionByPerson AS AccessionByPersonID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               m.datSampleStatusDate AS SampleStatusDate,
               m.strCondition AS AccessionComment,
               m.idfsDestructionMethod AS DestructionMethodTypeID,
               m.datDestructionDate AS DestructionDate,
               m.idfDestroyedByPerson AS DestroyedByPersonID,
               CASE
                   WHEN m.TestUnassignedIndicator = 1 THEN
                       0
                   ELSE
                       1
               END AS TestAssignedCount,
               m.TransferIndicator AS TransferredCount,
               m.strNote AS Comment,
               m.idfsCurrentSite AS CurrentSiteID,
               m.idfsBirdStatus AS BirdStatusTypeID,
               m.idfMainTest AS MainTestID,
               m.idfsSampleKind AS SampleKindTypeID,
               m.PreviousSampleStatusID AS PreviousSampleStatusTypeID,
               m.LabModuleSourceIndicator,
               m.intRowStatus AS RowStatus,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               @TotalRowCount AS TotalRowCount,
               @UnaccessionedCount AS UnaccessionedSampleCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = res.ID
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) diseaseName
                ON diseaseName.idfsReference = m.DiseaseID
            LEFT JOIN @MonitoringSessionDiseases msDiseases
                ON msDiseases.ID = m.idfMonitoringSession
            LEFT JOIN @VectorSessionDiseases vsDiseases
                ON vsDiseases.ID = m.idfVectorSurveillanceSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
        ORDER BY m.blnAccessioned,
                 m.idfsSampleStatus DESC,
                 m.idfsAccessionCondition,
                 res.SortDate DESC;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_LAB_TEST_ADVANCED_SEARCH_GETList]...';


GO
-- ================================================================================================
-- Name: USP_LAB_TEST_ADVANCED_SEARCH_GETList
--
-- Description:	Get laboratory tests list for the various lab use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/21/2019 Initial release.
-- Stephen Long     03/28/2019 Added EIDSS local/field sample ID field.
-- Stephen Long     04/27/2019 Added EIDSS batch ID, observation ID and batch status type name for 
--                             additional test information.
-- Stephen Long     07/10/2019 Corrected accession condition/sample status case on un-accessioned.
-- Stephen Long     10/07/2019 Removed @CampaignID variable; just use EIDSSReportCampaignSessionID.
-- Stephen Long     01/22/2020 Converted site ID to site list for site filtration.
-- Stephen Long     02/03/2020 Added non-laboratory test indicator where clause.
-- Stephen Long     03/11/2020 Corrected joins with intRowStatus = 0.
-- Stephen Long     04/16/2020 Added test list parameter and where clause criteria.
-- Stephen Long     04/26/2020 Added sent to organization ID to the model.
-- Stephen Long     06/06/2020 Added batch status type ID to the model.
-- Stephen Long     08/25/2020 Added criteria to ignore time on date betweens.
-- Stephen Long     09/02/2020 Changed accessioned indicator from int to varchar to handle searches
--                             with un-accessioned and accessioned samples in the same query.
-- Stephen Long     10/30/2020 Remove unneeded joins.
-- Stephen Long     11/28/2020 Added configurable site filtration rules.
-- Stephen Long     12/23/2020 Correction on accession indicator list where criteria.
-- Stephen Long     12/31/2020 Change function on reference data to handle inactive records.
-- Stephen Long     01/03/2020 Added option recompile to select queries.
-- Stephen Long     01/21/2021 Changed counts to use group by in sub-query instead of count 
--                             distinct and added with recompile to handle number of nullable 
--                             parameters.
-- Stephen Long     01/24/2021 Correct where criteria on accession indicator list.
-- Mark Wilson		08/20/2021 Join tlbMonitoringSessionToDiagnosis to get diagnosis
-- Stephen Long     09/25/2021 Added new pagination and order by.
-- Stephen Long     10/14/2021 Changed report or session type ID to bigint.
-- Stephen Long     12/08/2021 Changed pagination logic and removed option recompile.
-- Stephen Long     12/15/2021 Added configurable filtration rules.
-- Stephen Long     03/24/2022 Removed primary key from final results table variable.
-- Mike Kornegay	06/14/2022 Added new additional SessionCategoryID for Vet Avian / Vet Livestock 
--                             breakout.
-- Stephen Long     07/26/2022 Changed from repair to reference repair function.
-- Stephen Long     08/09/2022 Added batch test association indicator parameter.
-- Stephen Long     08/12/2022 Removed where criteria for surveillance type of both; de-activated 
--                             base reference record.
-- Stephen Long     08/26/2022 Added additional checks on accession and entered date range checks.
-- Stephen Long     10/18/2022 Fix on external test indicator to use the field on the testing 
--                             table.
-- Stephen Long     10/21/2022 Added human disease report, veterinary disease report, monitoring 
--                             session and vector identifiers to the query.
-- Stephen Long     12/29/2022 Removed sorting and pagination logic; business decision so records
--                             pending save could be shown at the top of the list prior to saving.
-- Stephen Long     01/11/2023 Updated for site filtration queries.
-- Stephen Long     01/31/2023 Added coalesce on collection and entered dates.
-- Stephen Long     02/03/2023 Added filtration indicator logic.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_LAB_TEST_ADVANCED_SEARCH_GETList]
(
    @LanguageID NVARCHAR(50),
    @ReportOrSessionTypeID BIGINT = NULL,
    @SurveillanceTypeID BIGINT = NULL,
    @SampleStatusTypeList VARCHAR(MAX) = NULL,
    @AccessionedIndicatorList VARCHAR(3) = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSReportCampaignOrSessionID NVARCHAR(200) = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @TransferredToOrganizationID BIGINT = NULL,
    @EIDSSTransferID NVARCHAR(200) = NULL,
    @ResultsReceivedFromID BIGINT = NULL,
    @DateFrom DATETIME = NULL,
    @DateTo DATETIME = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SampleTypeID BIGINT = NULL,
    @TestNameTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @TestStatusTypeID BIGINT = NULL,
    @TestResultTypeID BIGINT = NULL,
    @TestResultDateFrom DATETIME = NULL,
    @TestResultDateTo DATETIME = NULL,
    @PatientName NVARCHAR(200) = NULL,
    @FarmOwnerName NVARCHAR(200) = NULL,
    @SpeciesTypeID BIGINT = NULL,
    @TestList VARCHAR(MAX) = NULL,
    @BatchTestAssociationIndicator BIT = NULL,
    @FiltrationIndicator BIT = 1, 
    @UserID BIGINT,
    @UserEmployeeID BIGINT,
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT = NULL,
    @UserSiteGroupID BIGINT = NULL
)
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @ReturnMessage VARCHAR(MAX) = 'SUCCESS',
            @ReturnCode INT = 0,
            @InProgressCount INT;
    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL INDEX IDX_1,
        TestStatusTypeID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL INDEX IDX_1,
        TestStatusTypeID BIGINT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @Favorites XML;

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        SET @Favorites =
        (
            SELECT PreferenceDetail
            FROM dbo.UserPreference Laboratory
            WHERE idfUserID = @UserID
                  AND ModuleConstantID = 10508006
                  AND intRowStatus = 0
        );

        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               1,
               CASE
                   WHEN m.idfsSite = @UserSiteID OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END,
               CASE
                   WHEN m.idfsSite = @UserSiteID OR @FiltrationIndicator = 0 THEN
                       1
                   ELSE
                       0
               END
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        -- =======================================================================================
        -- CONFIGURABLE FILTRATION RULES
        -- 
        -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
        -- overlap the non-configurable rules.
        -- =======================================================================================
        --
        -- Apply at the user's site group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                ON userSiteGroup.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's employee group level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        -- 
        -- Apply at the user's ID level, granted by a site group.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                ON grantingSGS.idfsSite = m.idfsSite
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

        --
        -- Apply at the user's site group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tflSiteToSiteGroup sgs
                ON sgs.idfsSite = @UserSiteID
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND sgs.idfsSite = m.idfsSite;

        -- 
        -- Apply at the user's site level, granted by a site.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorSiteID = @UserSiteID
                   AND ara.ActorEmployeeGroupID IS NULL
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's employee group level, granted by a site.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- 
        -- Apply at the user's ID level, granted by a site.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               a.ReadPermissionIndicator,
               a.AccessToPersonalDataPermissionIndicator,
               a.AccessToGenderAndAgeDataPermissionIndicator,
               a.WritePermissionIndicator,
               a.DeletePermissionIndicator
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.tstUserTable u
                ON u.idfPerson = @UserEmployeeID
                   AND u.intRowStatus = 0
            INNER JOIN dbo.AccessRuleActor ara
                ON ara.ActorUserID = u.idfUserID
                   AND ara.intRowStatus = 0
            INNER JOIN dbo.AccessRule a
                ON a.AccessRuleID = ara.AccessRuleID
                   AND a.intRowStatus = 0
                   AND a.DefaultRuleIndicator = 0
        WHERE t.intRowStatus = 0
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)))
              AND a.GrantingActorSiteID = m.idfsSite;

        -- =======================================================================================
        -- SITE FILTRATION RULES
        --
        -- Apply site filtration rules from use case SAUC29.
        -- =======================================================================================
        -- 
        -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
        -- as all records have been pulled above with or without site filtration rules applied.
        --
        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = m.idfsSite
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroup eg
                    ON eg.idfsSite = @UserSiteID
                       AND eg.intRowStatus = 0
                INNER JOIN dbo.trtBaseReference br
                    ON br.idfsBaseReference = eg.idfEmployeeGroup
                       AND br.intRowStatus = 0
                       AND br.blnSystem = 1
            WHERE t.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060011 -- Site
                  AND oa.idfActor = eg.idfEmployeeGroup -- Default role
        );

        --
        -- Apply level 1 site filtration rules for an employee's associated user group(s).  
        -- Allows and denies will supersede level 0.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserGroupSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserGroupSitePermissions WHERE SiteID = m.idfsSite
        )
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE res
        FROM @Results res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN @UserGroupSitePermissions ugsp
                ON ugsp.SiteID = m.idfsSite
        WHERE ugsp.Permission = 2 -- Deny permission
              AND ugsp.PermissionTypeID = 10059003; -- Read permission

        --
        -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
        -- will supersede level 1.
        --
        INSERT INTO @Results
        SELECT t.idfTesting,
               t.idfsTestStatus,
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059003
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059006
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059007
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059004
               ),
               (
                   SELECT Permission
                   FROM @UserSitePermissions
                   WHERE SiteID = m.idfsSite
                         AND PermissionTypeID = 10059002
               )
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbBatchTest b
                ON b.idfBatchTest = t.idfBatchTest
                   AND b.intRowStatus = 0
        WHERE t.intRowStatus = 0
              AND EXISTS
        (
            SELECT * FROM @UserSitePermissions WHERE SiteID = m.idfsSite
        )
              AND t.blnNonLaboratoryTest = 0
              AND t.idfsTestName IS NOT NULL
              AND m.idfsSampleType <> 10320001 --Unknown
              AND COALESCE(m.datAccession, m.datFieldCollectionDate, m.datEnteringDate)
                  BETWEEN @DateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @DateTo)));

        DELETE FROM @Results
        WHERE EXISTS
        (
            SELECT t.idfTesting
            FROM dbo.tlbTesting t
                INNER JOIN dbo.tlbMaterial m
                    ON m.idfMaterial = t.idfMaterial
                       AND m.intRowStatus = 0
                INNER JOIN @UserSitePermissions usp
                    ON usp.SiteID = m.idfsSite
            WHERE usp.Permission = 4 -- Deny permission
                  AND usp.PermissionTypeID = 10059003 -- Read permission
        );

        INSERT INTO @FinalResults
        SELECT res.ID,
               res.TestStatusTypeID,
               MAX(ReadPermissionIndicator),
               MAX(AccessToPersonalDataPermissionIndicator),
               MAX(AccessToGenderAndAgeDataPermissionIndicator),
               MAX(WritePermissionIndicator),
               MAX(DeletePermissionIndicator)
        FROM @Results res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            LEFT JOIN dbo.tlbMonitoringSession ms
                ON ms.idfMonitoringSession = m.idfMonitoringSession
                   AND ms.intRowStatus = 0
            LEFT JOIN dbo.tlbCampaign c
                ON c.idfCampaign = ms.idfCampaign
                   AND c.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbSpecies species
                ON species.idfSpecies = m.idfSpecies
                   AND species.intRowStatus = 0
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
              AND (
                      (
                          t.idfBatchTest IS NULL
                          AND t.idfsTestResult IS NULL
                          AND @BatchTestAssociationIndicator = 1
                      )
                      OR @BatchTestAssociationIndicator IS NULL
                  ) -- Adding a test to a batch, so should not currently be a batch test ID.
              AND (
                      (t.idfTesting IN (
                                           SELECT CAST([Value] AS BIGINT)
                                           FROM dbo.FN_GBL_SYS_SplitList(@TestList, NULL, ',')
                                       )
                      )
                      OR (@TestList IS NULL)
                  )
              AND (
                      (
                          @ReportOrSessionTypeID = 10012001 --Human Disease Report
                          AND (
                                  (m.idfHumanCase IS NOT NULL)
                                  OR (
                                         m.idfMonitoringSession IS NOT NULL
                                         AND ms.SessionCategoryID = 10502001 --Human Active Surveillance Session
                                     )
                              )
                      )
                      OR (
                             @ReportOrSessionTypeID = 10012006 --Vector Surveillance Session
                             AND m.idfVectorSurveillanceSession IS NOT NULL
                         )
                      OR (
                             @ReportOrSessionTypeID = 10012005 --Veterinary Disease Report
                             AND (
                                     (m.idfVetCase IS NOT NULL)
                                     OR (
                                            m.idfMonitoringSession IS NOT NULL
                                            AND ms.SessionCategoryID IN ( 10502002, 10502009 ) --Veterinary Active Surveillance Session
                                        )
                                 )
                         )
                      OR (@ReportOrSessionTypeID IS NULL)
                  )
              AND (
                      (
                          @SurveillanceTypeID = 4578940000001 --Active
                          AND (
                                  m.idfMonitoringSession IS NOT NULL
                                  OR m.idfVectorSurveillanceSession IS NOT NULL
                              )
                      )
                      OR (
                             @SurveillanceTypeID = 4578940000002 --Passive
                             AND (
                                     m.idfHumanCase IS NOT NULL
                                     OR m.idfVetCase IS NOT NULL
                                 )
                         )
                      OR (@SurveillanceTypeID IS NULL)
                  )
              AND (
                      (
                          (
                              m.blnAccessioned = @AccessionedIndicatorList
                              AND m.idfsAccessionCondition IS NULL
                          )
                          OR (
                                 @AccessionedIndicatorList IS NULL
                                 AND @SampleStatusTypeList IS NULL
                             )
                      )
                      OR (
                             (
                                 (m.idfsSampleStatus IN (
                                                            SELECT CAST([Value] AS BIGINT)
                                                            FROM dbo.FN_GBL_SYS_SplitList(
                                                                                             @SampleStatusTypeList,
                                                                                             NULL,
                                                                                             ','
                                                                                         )
                                                        )
                                 )
                                 OR (
                                        m.idfsAccessionCondition IN (
                                                                        SELECT CAST([Value] AS BIGINT)
                                                                        FROM dbo.FN_GBL_SYS_SplitList(
                                                                                                         @SampleStatusTypeList,
                                                                                                         NULL,
                                                                                                         ','
                                                                                                     )
                                                                    )
                                        AND (
                                                m.idfsSampleStatus IS NULL
                                                OR m.idfsSampleStatus = 10015007 --In Repository
                                            )
                                    )
                             )
                             OR (
                                    @SampleStatusTypeList IS NULL
                                    AND @AccessionedIndicatorList IS NULL
                                )
                         )
                  )
              AND (
                      m.idfSendToOffice = @SentToOrganizationID
                      OR @SentToOrganizationID IS NULL
                  )
              AND (
                      tro.idfSendToOffice = @TransferredToOrganizationID
                      OR @TransferredToOrganizationID IS NULL
                  )
              AND (
                      t.idfTestedByOffice = @ResultsReceivedFromID
                      OR @ResultsReceivedFromID IS NULL
                  )
              AND (
                      m.idfsSampleType = @SampleTypeID
                      OR @SampleTypeID IS NULL
                  )
              AND (
                      t.idfsTestName = @TestNameTypeID
                      OR @TestNameTypeID IS NULL
                  )
              AND (
                      t.idfsDiagnosis = @DiseaseID
                      OR @DiseaseID IS NULL
                  )
              AND (
                      t.idfsTestStatus = @TestStatusTypeID
                      OR @TestStatusTypeID IS NULL
                  )
              AND (
                      t.idfsTestResult = @TestResultTypeID
                      OR @TestResultTypeID IS NULL
                  )
              AND (
                      species.idfsSpeciesType = @SpeciesTypeID
                      OR @SpeciesTypeID IS NULL
                  )
              AND (
                      (t.datConcludedDate
              BETWEEN @TestResultDateFrom AND DATEADD(SECOND, -1, (DATEADD(DAY, 1, @TestResultDateTo)))
                      )
                      OR (
                             @TestResultDateFrom IS NULL
                             OR @TestResultDateTo IS NULL
                         )
                  )
              AND (
                      (
                          m.strCalculatedCaseID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                          OR c.strCampaignID LIKE '%' + @EIDSSReportCampaignOrSessionID + '%'
                      )
                      OR @EIDSSReportCampaignOrSessionID IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @PatientName + '%'
                      OR @PatientName IS NULL
                  )
              AND (
                      m.strCalculatedHumanName LIKE '%' + @FarmOwnerName + '%'
                      OR @FarmOwnerName IS NULL
                  )
              AND (
                      m.strFieldBarcode LIKE '%' + @EIDSSLocalOrFieldSampleID + '%'
                      OR @EIDSSLocalOrFieldSampleID IS NULL
                  )
              AND (
                      tro.strBarcode LIKE '%' + @EIDSSTransferID + '%'
                      OR @EIDSSTransferID IS NULL
                  )
              AND (
                      m.strBarcode LIKE '%' + @EIDSSLaboratorySampleID + '%'
                      OR @EIDSSLaboratorySampleID IS NULL
                  )
        GROUP BY res.ID,
                 res.TestStatusTypeID
        OPTION (RECOMPILE);

        SET @InProgressCount =
        (
            SELECT COUNT(*)
            FROM @FinalResults res
                INNER JOIN dbo.tlbTesting t
                    ON t.idfTesting = res.ID
                       AND t.intRowStatus = 0
                LEFT JOIN dbo.tlbBatchTest b
                    ON b.idfBatchTest = t.idfBatchTest
                       AND b.intRowStatus = 0
            WHERE t.idfsTestStatus = 10001003
                  AND t.idfsTestName IS NOT NULL
                  AND t.blnNonLaboratoryTest = 0
                  AND (
                          (
                              t.idfBatchTest IS NULL
                              AND (
                                      t.idfsTestStatus = 10001001 --Final
                                      OR t.idfsTestStatus = 10001003 --In Progress
                                      OR t.idfstestStatus = 10001006 --Amended
                                  )
                          )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001003 --In Progress
                                 AND (
                                         t.idfsTestStatus = 10001001 --Final 
                                         OR t.idfstestStatus = 10001006 --Amended
                                     )
                             )
                          OR (
                                 t.idfBatchTest IS NOT NULL
                                 AND b.idfsBatchStatus = 10001001 --Closed
                                 AND (
                                         t.idfsTestStatus = 10001001 --Final
                                         OR t.idfsTestStatus = 10001003 --In Progress
                                         OR t.idfsTestStatus = 10001004 --Preliminary
                                         OR t.idfstestStatus = 10001006 --Amended
                                     )
                             )
                      )
        );

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        SELECT t.idfTesting AS TestID,
               CASE
                   WHEN f.SampleID IS NULL THEN
                       0
                   ELSE
                       1
               END AS FavoriteIndicator,
               m.idfsSite AS SiteID,
               m.idfsCurrentSite AS CurrentSiteID,
               t.idfsTestName AS TestNameTypeID,
               t.idfsTestCategory AS TestCategoryTypeID,
               t.idfsTestResult AS TestResultTypeID,
               t.idfsTestStatus AS TestStatusTypeID,
               t.PreviousTestStatusID AS PreviousTestStatusTypeID,
               t.idfsDiagnosis AS DiseaseID,
               m.idfMaterial AS SampleID,
               m.idfRootMaterial AS RootSampleID,
               m.idfParentMaterial AS ParentSampleID,
               m.idfSendToOffice AS SentToOrganizationID,
               t.idfBatchTest AS BatchTestID,
               t.idfObservation AS ObservationID,
               t.intTestNumber AS TestNumber,
               t.strNote AS Note,
               t.datStartedDate AS StartedDate,
               t.datConcludedDate AS ResultDate,
               t.idfTestedByOffice AS TestedByOrganizationID,
               t.idfTestedByPerson AS TestedByPersonID,
               t.idfResultEnteredByOffice AS ResultEnteredByOrganizationID,
               t.idfResultEnteredByPerson AS ResultEnteredByPersonID,
               t.idfValidatedByOffice AS ValidatedByOrganizationID,
               t.idfValidatedByPerson AS ValidatedByPersonID,
               t.blnReadOnly AS ReadOnlyIndicator,
               t.blnNonLaboratoryTest AS NonLaboratoryTestIndicator,
               t.blnExternalTest AS ExternalTestIndicator,
               t.idfPerformedByOffice AS PerformedByOrganizationID,
               t.datReceivedDate AS ReceivedDate,
               t.strContactPerson AS ContactPersonName,
               m.strCalculatedCaseID AS EIDSSReportOrSessionID,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 0 THEN
                       '**********'
                   ELSE
                       m.strCalculatedHumanName
               END AS PatientOrFarmOwnerName,
               sampleType.name AS SampleTypeName,
               disease.name AS DiseaseName,
               m.strBarcode AS EIDSSLaboratorySampleID,
               m.strFieldBarcode AS EIDSSLocalOrFieldSampleID,
               testNameType.name AS TestNameTypeName,
               testStatusType.name AS TestStatusTypeName,
               testResultType.name AS TestResultTypeName,
               testCategoryType.name AS TestCategoryTypeName,
               m.datAccession AS AccessionDate,
               functionalArea.name AS FunctionalAreaName,
               m.idfsAccessionCondition AS AccessionConditionTypeID,
               m.idfsSampleStatus AS SampleStatusTypeID,
               (CASE
                    WHEN m.blnAccessioned = 0
                         AND m.idfsAccessionCondition IS NULL THEN
                        'Un-accessioned'
                    WHEN m.idfsSampleStatus IS NULL THEN
                        accessionConditionType.name
                    WHEN m.idfsSampleStatus = 10015007 --In Repository
               THEN
                        accessionConditionType.name
                    ELSE
                        sampleStatusType.name
                END
               ) AS AccessionConditionOrSampleStatusTypeName,
               m.strCondition AS AccessionComment,
               a.strAnimalCode AS EIDSSAnimalID,
               ISNULL(
               (
                   SELECT COUNT(NULLIF(tom2.idfTransferOUT, 0))
                   FROM dbo.tlbTransferOutMaterial tom2
                   WHERE tom2.idfMaterial = m.idfMaterial
                         AND tom2.intRowStatus = 0
               ),
               0
                     ) AS TransferCount,
               tro.idfTransferOut AS TransferID,
               t.idfHumanCase AS HumanDiseaseReportID,
               t.idfVetCase AS VeterinaryDiseaseReportID,
               t.idfMonitoringSession AS MonitoringSessionID,
               t.idfVector AS VectorID,
               t.intRowStatus AS RowStatus,
               CASE
                   WHEN res.ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN res.AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN res.WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN res.DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN res.DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN res.DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, res.DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               0 AS RowAction,
               0 AS RowSelectionIndicator,
               COUNT(*) OVER () AS TotalRowCount,
               @InProgressCount AS InProgressCount
        FROM @FinalResults res
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = res.ID
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000019) disease
                ON disease.idfsReference = t.idfsDiagnosis
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000087) sampleType
                ON sampleType.idfsReference = m.idfsSampleType
            LEFT JOIN
            (
                SELECT SampleID = UserPref.value('@SampleID', 'bigint')
                FROM @Favorites.nodes('/Favorites/Favorite') AS Tbl(UserPref)
            ) f
                ON m.idfMaterial = f.SampleID
            LEFT JOIN dbo.tlbTransferOutMaterial tom
                ON tom.idfMaterial = m.idfMaterial
                   AND tom.intRowStatus = 0
            LEFT JOIN dbo.tlbTransferOUT tro
                ON tro.idfTransferOut = tom.idfTransferOut
                   AND tro.intRowStatus = 0
            LEFT JOIN dbo.tlbAnimal a
                ON a.idfAnimal = m.idfAnimal
                   AND a.intRowStatus = 0
            LEFT JOIN dbo.tlbDepartment d
                ON d.idfDepartment = m.idfInDepartment
                   AND d.intRowStatus = 0
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000164) functionalArea
                ON functionalArea.idfsReference = d.idfsDepartmentName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000097) testNameType
                ON testNameType.idfsReference = t.idfsTestName
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000001) testStatusType
                ON testStatusType.idfsReference = t.idfsTestStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000096) testResultType
                ON testResultType.idfsReference = t.idfsTestResult
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000095) testCategoryType
                ON testCategoryType.idfsReference = t.idfsTestCategory
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000110) accessionConditionType
                ON accessionConditionType.idfsReference = m.idfsAccessionCondition
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000015) sampleStatusType
                ON sampleStatusType.idfsReference = m.idfsSampleStatus
            OPTION (RECOMPILE);
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [dbo].[USP_OMM_Session_GetList]...';


GO
-- ================================================================================================
-- Name: USP_OMM_Session_GetList
--
-- Description: Get a list of outbreak sessions for the outbreak module.
--          
-- Author: Doug Albanese
--
-- Revision History:
-- Name            Date       Change Detail
-- --------------- ---------- --------------------------------------------------------------------
-- Lamont Mitchell 01/09/2019 Removed ReturnCode and Return Message
-- Stephen Long	   01/13/2020 Changed from strDefault to name to pick up language translation.
-- Stephen Long	   01/26/2020 Added site list parameter for site filtration.
-- Stephen Long	   05/19/2020 Added disease filtration rules from use case SAUC62.
-- Stephen Long	   11/18/2020 Added site ID to the query.
-- Stephen Long	   11/27/2020 Added configurable site filtration rules.
-- Stephen Long	   12/13/2020 Added apply configurable filtration indicator parameter.
-- Stephen Long	   12/24/2020 Modified join on disease filtration default role rule.  Changed 
--                            function call to bring back inactive outbreak status and type to 
--                            handle v6.1 data that has been made obsolete.
-- Stephen Long	   12/29/2020 Changed function call on reference data for inactive records.
-- Stephen Long	   04/04/2021 Added updated pagination and location hierarchy.
-- Stephen Long	   08/16/2021 Added gisLocation and location joins where IsDescendent is called.
-- Doug Albanese   11/17/2021 Fixed the default range for returning Outbreak for the past year only.
-- Doug Albanese   12/03/2021 Integrated the new FN_GBL_LocationHierarchy_Flattened for use with 
--                             the Location Hierarchy
-- Stephen Long    03/29/2022 Fix to site filtration to pull back a user's own site records.
-- Doug Albanese   05/16/2022 Corrected Date Range, when not passed. This causes other searches 
--                             not to work well.
-- Stephen Long    06/03/2022 Updated to point default access rules to base reference.
-- Doug Albanese   01/10/2023 Changed the default sorting to correctly sort for "Status" and then 
--                            "Start Date"
-- Stephen Long    01/11/2023 Updated for site filtration queries.
-- Doug Albanese   01/12/2023 Further correction on default sorting on initial load.
-- Stephen Long    01/14/2023 Fix on site filtration queries; added site permission table 
--                            variables.
-- Doug Albanese   01/25/2023 Added logic to exclude migration status in the base reference
-- Doug Albanese   01/25/2023 Included "intOrder" for Outbreak Status to correctly order the initial listing of sessions
-- Doug Albanese   02/10/2023 Change the "Quick Search" to operate against "Name" instead of "Default"
-- Doug Albanese   03/10/2023 Defect 5586: Migrated data, with foreign addresses, are not searchable.
--
-- exec [dbo].[USP_OMM_Session_GetList] @LanguageId= 'en-us', @UserSiteId = 0, @UserOrganizationID = 0, @UserEmployeeId = 0
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_OMM_Session_GetList]
(
    @LanguageID NVARCHAR(50),
    @OutbreakID NVARCHAR(200) = NULL,
    @OutbreakTypeID BIGINT = NULL,
    @SearchDiagnosesGroup BIGINT = NULL,
    @StartDateFrom DATETIME = NULL,
    @StartDateTo DATETIME = NULL,
    @OutbreakStatusTypeID BIGINT = NULL,
    @AdministrativeLevelID BIGINT = NULL,
    @QuickSearch NVARCHAR(200) = '',
    @UserSiteID BIGINT,
    @UserOrganizationID BIGINT,
    @UserEmployeeID BIGINT,
    @ApplySiteFiltrationIndicator BIT = 0,
    @SortColumn NVARCHAR(30) = 'INIT',
    @SortOrder NVARCHAR(4) = 'DESC',
    @PageNumber INT = 1,
    @PageSize INT = 10
)
AS
BEGIN
        SET NOCOUNT ON;

    IF @StartDateFrom IS NULL
       or @StartDateFrom = NULL
    BEGIN
        SET @StartDateFrom = CAST(CAST(CAST(0xD1BA AS BIGINT) * -1 AS DATETIME) AS DATE)
    END

    IF @StartDateTo IS NULL
       OR @StartDateTo = NULL
    BEGIN
        SET @StartDateTo = CAST(CAST(CAST(0x2D247f AS BIGINT) AS DATETIME) AS DATE)
    END

    DECLARE @firstRec INT
    DECLARE @lastRec INT
    SET @firstRec = (@PageNumber - 1) * @pagesize
    SET @lastRec = (@PageNumber * @pageSize + 1)

    DECLARE @AdministrativeLevelNode AS HIERARCHYID;
    DECLARE @RuleActiveStatus INT = 0;
    DECLARE @AdministrativeLevelTypeID INT;
    DECLARE @OrganizationAdministrativeLevelNode HIERARCHYID;
    DECLARE @DefaultAccessRules AS TABLE
    (
        AccessRuleID BIGINT NOT NULL,
        ActiveIndicator INT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL,
        AdministrativeLevelTypeID INT NULL
    );

    DECLARE @Results TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @FilteredResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL, INDEX IDX_ID (ID
                                                             ));
    DECLARE @FinalResults TABLE
    (
        ID BIGINT NOT NULL,
        ReadPermissionIndicator INT NOT NULL,
        AccessToPersonalDataPermissionIndicator INT NOT NULL,
        AccessToGenderAndAgeDataPermissionIndicator INT NOT NULL,
        WritePermissionIndicator INT NOT NULL,
        DeletePermissionIndicator INT NOT NULL
    );
    DECLARE @UserSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );
    DECLARE @UserGroupSitePermissions TABLE
    (
        SiteID BIGINT NOT NULL,
        PermissionTypeID BIGINT NOT NULL,
        Permission INT NOT NULL
    );

    -- Set defaults for invalid passed parameters
    IF (@StartDateFrom IS NULL)
    BEGIN
        SET @StartDateFrom = DATEADD(day, -365, GETDATE())
    END

    IF (@StartDateTo IS NULL)
    BEGIN
        SET @StartDateTo = GETDATE()
    END

    BEGIN TRY
        INSERT INTO @UserGroupSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       3
                   ELSE
                       2
               END
        FROM dbo.tstObjectAccess oa
            INNER JOIN dbo.tlbEmployeeGroupMember egm
                ON egm.idfEmployee = @UserEmployeeID
                   AND egm.intRowStatus = 0
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = egm.idfEmployeeGroup;

        INSERT INTO @UserSitePermissions
        SELECT oa.idfsOnSite,
               oa.idfsObjectOperation,
               CASE
                   WHEN oa.intPermission = 2 THEN
                       5
                   ELSE
                       4
               END
        FROM dbo.tstObjectAccess oa
        WHERE oa.intRowStatus = 0
              AND oa.idfsObjectType = 10060011 -- Site
              AND oa.idfActor = @UserEmployeeID;

        IF @AdministrativeLevelID IS NOT NULL
        BEGIN
            SELECT @AdministrativeLevelNode = node
            FROM dbo.gisLocation
            WHERE idfsLocation = @AdministrativeLevelID;
        END;

        IF @QuickSearch = ''
           OR @QuickSearch IS NULL
        BEGIN
            -- ========================================================================================
            -- NO CONFIGURABLE FILTRATION RULES APPLIED
            --
            -- For first and second level sites, do not apply any site configurable rules.
            -- ========================================================================================
            IF @ApplySiteFiltrationIndicator = 0
            BEGIN
                INSERT INTO @Results
                SELECT idfOutbreak,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN dbo.gisLocation g
                        ON g.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND o.datStartDate
                      BETWEEN @StartDateFrom AND @StartDateTo
                      AND (
                              (o.OutbreakTypeID = CASE ISNULL(@OutbreakTypeID, '')
                                                      WHEN '' THEN
                                                          OutbreakTypeID
                                                      ELSE
                                                          @OutbreakTypeID
                                                  END
                              )
                              OR @OutbreakTypeID IS NULL
                          )
                      AND (
                              (o.idfsOutbreakStatus = CASE ISNULL(@OutbreakStatusTypeID, '')
                                                          WHEN '' THEN
                                                              idfsOutbreakStatus
                                                          ELSE
                                                              @OutbreakStatusTypeID
                                                      END
                              )
                              OR @OutbreakStatusTypeID IS NULL
                          )
                      AND (
                              g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                              OR @AdministrativeLevelID IS NULL
                          )
                      AND (
                              (o.idfsDiagnosisOrDiagnosisGroup = CASE ISNULL(@SearchDiagnosesGroup, '')
                                                                     WHEN '' THEN
                                                                         o.idfsDiagnosisOrDiagnosisGroup
                                                                     ELSE
                                                                         @SearchDiagnosesGroup
                                                                 END
                              )
                              OR @SearchDiagnosesGroup IS NULL
                          )
                      AND (strOutbreakID LIKE CASE ISNULL(@OutbreakID, '')
                                                  WHEN '' THEN
                                                      '%%'
                                                  ELSE
                                                      '%' + @OutbreakID + '%'
                                              END
                          );
            END
            ELSE
            BEGIN
                -- =======================================================================================
                -- CONFIGURABLE FILTRATION RULES
                -- 
                -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
                -- overlap the default rules.
                -- =======================================================================================
                INSERT INTO @Results
                SELECT idfOutbreak,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN dbo.gisLocation g
                        ON g.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND o.idfsSite = @UserSiteID
                      AND o.datStartDate
                      BETWEEN @StartDateFrom AND @StartDateTo
                      AND (
                              (o.OutbreakTypeID = CASE ISNULL(@OutbreakTypeID, '')
                                                      WHEN '' THEN
                                                          OutbreakTypeID
                                                      ELSE
                                                          @OutbreakTypeID
                                                  END
                              )
                              OR @OutbreakTypeID IS NULL
                          )
                      AND (
                              (o.idfsOutbreakStatus = CASE ISNULL(@OutbreakStatusTypeID, '')
                                                          WHEN '' THEN
                                                              idfsOutbreakStatus
                                                          ELSE
                                                              @OutbreakStatusTypeID
                                                      END
                              )
                              OR @OutbreakStatusTypeID IS NULL
                          )
                      AND (
                              g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                              OR @AdministrativeLevelID IS NULL
                          )
                      AND (
                              (o.idfsDiagnosisOrDiagnosisGroup = CASE ISNULL(@SearchDiagnosesGroup, '')
                                                                     WHEN '' THEN
                                                                         o.idfsDiagnosisOrDiagnosisGroup
                                                                     ELSE
                                                                         @SearchDiagnosesGroup
                                                                 END
                              )
                              OR @SearchDiagnosesGroup IS NULL
                          )
                      AND (strOutbreakID LIKE CASE ISNULL(@OutbreakID, '')
                                                  WHEN '' THEN
                                                      '%%'
                                                  ELSE
                                                      '%' + @OutbreakID + '%'
                                              END
                          );

                -- =======================================================================================
                -- DEFAULT CONFIGURABLE FILTRATION RULES
                --
                -- Apply active default configurable filtration rules for third level sites.
                -- =======================================================================================
                INSERT INTO @DefaultAccessRules
                SELECT AccessRuleID,
                       a.intRowStatus,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator,
                       a.AdministrativeLevelTypeID
                FROM dbo.AccessRule a
                WHERE AccessRuleID = 10537022;

                SELECT @RuleActiveStatus = ActiveIndicator
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537022;

                IF @RuleActiveStatus = 0
                BEGIN
                    SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                    FROM @DefaultAccessRules
                    WHERE AccessRuleID = 10537022;

                    SELECT @AdministrativeLevelNode
                        = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                    FROM dbo.tlbOffice o
                        INNER JOIN dbo.tlbGeoLocationShared AS l
                            ON l.idfGeoLocationShared = o.idfLocation
                        INNER JOIN dbo.gisLocation g
                            ON g.idfsLocation = l.idfsLocation
                               AND g.intRowStatus = 0
                    WHERE o.idfOffice = @UserOrganizationID
                          AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

                    -- Administrative level specified in the rule of the site where the session was created.
                    INSERT INTO @FilteredResults
                    SELECT ob.idfOutbreak,
                           a.ReadPermissionIndicator,
                           a.AccessToPersonalDataPermissionIndicator,
                           a.AccessToGenderAndAgeDataPermissionIndicator,
                           a.WritePermissionIndicator,
                           a.DeletePermissionIndicator
                    FROM dbo.tlbOutbreak ob
                        INNER JOIN dbo.tstSite s
                            ON ob.idfsSite = s.idfsSite
                        INNER JOIN dbo.tlbOffice o
                            ON o.idfOffice = s.idfOffice
                               AND o.intRowStatus = 0
                        INNER JOIN dbo.tlbGeoLocationShared l
                            ON l.idfGeoLocationShared = o.idfLocation
                               AND l.intRowStatus = 0
                        INNER JOIN dbo.gisLocation g
                            ON g.idfsLocation = l.idfsLocation
                               AND g.intRowStatus = 0
                        INNER JOIN @DefaultAccessRules a
                            ON a.AccessRuleID = 10537022
                    WHERE ob.intRowStatus = 0
                          AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;
                END;

                --
                -- Apply at the user's site group level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                        ON userSiteGroup.idfsSite = @UserSiteID
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                --
                -- Apply at the user's site level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteID = @UserSiteID
                           AND ara.ActorEmployeeGroupID IS NULL
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                -- 
                -- Apply at the user's employee group level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tlbEmployeeGroupMember egm
                        ON egm.idfEmployee = @UserEmployeeID
                           AND egm.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                -- 
                -- Apply at the user's ID level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tstUserTable u
                        ON u.idfPerson = @UserEmployeeID
                           AND u.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorUserID = u.idfUserID
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                --
                -- Apply at the user's site group level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup sgs
                        ON sgs.idfsSite = @UserSiteID
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND sgs.idfsSite = o.idfsSite;

                -- 
                -- Apply at the user's site level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteID = @UserSiteID
                           AND ara.ActorEmployeeGroupID IS NULL
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- 
                -- Apply at the user's employee group level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tlbEmployeeGroupMember egm
                        ON egm.idfEmployee = @UserEmployeeID
                           AND egm.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- 
                -- Apply at the user's ID level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tstUserTable u
                        ON u.idfPerson = @UserEmployeeID
                           AND u.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorUserID = u.idfUserID
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- Copy filtered results to results and use search criteria
                INSERT INTO @Results
                SELECT ID,
                       ReadPermissionIndicator,
                       AccessToPersonalDataPermissionIndicator,
                       AccessToGenderAndAgeDataPermissionIndicator,
                       WritePermissionIndicator,
                       DeletePermissionIndicator
                FROM @FilteredResults
                    INNER JOIN dbo.tlbOutbreak o
                        ON o.idfOutbreak = ID
                    INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN dbo.gisLocation g
                        ON g.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND o.datStartDate
                      BETWEEN @StartDateFrom AND @StartDateTo
                      AND (
                              (o.OutbreakTypeID = CASE ISNULL(@OutbreakTypeID, '')
                                                      WHEN '' THEN
                                                          OutbreakTypeID
                                                      ELSE
                                                          @OutbreakTypeID
                                                  END
                              )
                              OR @OutbreakTypeID IS NULL
                          )
                      AND (
                              (o.idfsOutbreakStatus = CASE ISNULL(@OutbreakStatusTypeID, '')
                                                          WHEN '' THEN
                                                              idfsOutbreakStatus
                                                          ELSE
                                                              @OutbreakStatusTypeID
                                                      END
                              )
                              OR @OutbreakStatusTypeID IS NULL
                          )
                      AND (
                              g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                              OR @AdministrativeLevelID IS NULL
                          )
                      AND (
                              (o.idfsDiagnosisOrDiagnosisGroup = CASE ISNULL(@SearchDiagnosesGroup, '')
                                                                     WHEN '' THEN
                                                                         o.idfsDiagnosisOrDiagnosisGroup
                                                                     ELSE
                                                                         @SearchDiagnosesGroup
                                                                 END
                              )
                              OR @SearchDiagnosesGroup IS NULL
                          )
                      AND (strOutbreakID LIKE CASE ISNULL(@OutbreakID, '')
                                                  WHEN '' THEN
                                                      '%%'
                                                  ELSE
                                                      '%' + @OutbreakID + '%'
                                              END
                          )
                GROUP BY ID,
                         ReadPermissionIndicator,
                         AccessToPersonalDataPermissionIndicator,
                         AccessToGenderAndAgeDataPermissionIndicator,
                         WritePermissionIndicator,
                         DeletePermissionIndicator;
            END;

            -- =======================================================================================
            -- DISEASE FILTRATION RULES
            --
            -- Apply disease filtration rules from use case SAUC62.
            -- =======================================================================================		
            -- 
            -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without site filtration rules applied.
            --
            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN dbo.tstObjectAccess oa
                                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                                       AND oa.intRowStatus = 0
                            WHERE o.intRowStatus = 0
                                  AND oa.intPermission = 1
                                  AND oa.idfsObjectType = 10060001 -- Disease
                                  AND oa.idfActor = -506 -- Default role
                        );

            --
            -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
            WHERE oa.intPermission = 2 -- Allow permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND o.intRowStatus = 0
                  AND oa.idfActor = egm.idfEmployeeGroup
                  AND datStartDate
                  BETWEEN @StartDateFrom AND @StartDateTo
                  AND (
                          (OutbreakTypeID = CASE ISNULL(@OutbreakTypeID, '')
                                                WHEN '' THEN
                                                    OutbreakTypeID
                                                ELSE
                                                    @OutbreakTypeID
                                            END
                          )
                          OR @OutbreakTypeID IS NULL
                      )
                  AND (
                          (idfsOutbreakStatus = CASE ISNULL(@OutbreakStatusTypeID, '')
                                                    WHEN '' THEN
                                                        idfsOutbreakStatus
                                                    ELSE
                                                        @OutbreakStatusTypeID
                                                END
                          )
                          OR @OutbreakStatusTypeID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (o.idfsDiagnosisOrDiagnosisGroup = CASE ISNULL(@SearchDiagnosesGroup, '')
                                                                 WHEN '' THEN
                                                                     o.idfsDiagnosisOrDiagnosisGroup
                                                                 ELSE
                                                                     @SearchDiagnosesGroup
                                                             END
                          )
                          OR @SearchDiagnosesGroup IS NULL
                      )
                  AND (strOutbreakID LIKE CASE ISNULL(@OutbreakID, '')
                                              WHEN '' THEN
                                                  '%%'
                                              ELSE
                                                  '%' + @OutbreakID + '%'
                                          END
                      );

            DELETE res
            FROM @Results res
                INNER JOIN dbo.tlbOutbreak o
                    ON o.idfOutbreak = res.ID
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
            WHERE o.intRowStatus = 0
                  AND oa.intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = egm.idfEmployeeGroup;

            --
            -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
            WHERE oa.intPermission = 2 -- Allow permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND o.intRowStatus = 0
                  AND oa.idfActor = @UserEmployeeID
                  AND datStartDate
                  BETWEEN @StartDateFrom AND @StartDateTo
                  AND (
                          (OutbreakTypeID = CASE ISNULL(@OutbreakTypeID, '')
                                                WHEN '' THEN
                                                    OutbreakTypeID
                                                ELSE
                                                    @OutbreakTypeID
                                            END
                          )
                          OR @OutbreakTypeID IS NULL
                      )
                  AND (
                          (idfsOutbreakStatus = CASE ISNULL(@OutbreakStatusTypeID, '')
                                                    WHEN '' THEN
                                                        idfsOutbreakStatus
                                                    ELSE
                                                        @OutbreakStatusTypeID
                                                END
                          )
                          OR @OutbreakStatusTypeID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (o.idfsDiagnosisOrDiagnosisGroup = CASE ISNULL(@SearchDiagnosesGroup, '')
                                                                 WHEN '' THEN
                                                                     o.idfsDiagnosisOrDiagnosisGroup
                                                                 ELSE
                                                                     @SearchDiagnosesGroup
                                                             END
                          )
                          OR @SearchDiagnosesGroup IS NULL
                      )
                  AND (strOutbreakID LIKE CASE ISNULL(@OutbreakID, '')
                                              WHEN '' THEN
                                                  '%%'
                                              ELSE
                                                  '%' + @OutbreakID + '%'
                                          END
                      );

            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN dbo.tstObjectAccess oa
                                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                                       AND oa.intRowStatus = 0
                            WHERE o.intRowStatus = 0
                                  AND oa.intPermission = 1 -- Deny permission
                                  AND oa.idfsObjectType = 10060001 -- Disease
                                  AND idfActor = @UserEmployeeID
                        );

            -- =======================================================================================
            -- SITE FILTRATION RULES
            --
            -- Apply site filtration rules from use case SAUC29.
            -- =======================================================================================		
            -- 
            -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without filtration rules applied.
            --
            DELETE FROM @Results
            WHERE EXISTS
            (
                SELECT o.idfOutbreak
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tstObjectAccess oa
                        ON oa.idfsObjectID = o.idfsSite
                           AND oa.intRowStatus = 0
                    INNER JOIN dbo.tlbEmployeeGroup eg
                        ON eg.idfsSite = @UserSiteID
                           AND eg.intRowStatus = 0
                    INNER JOIN dbo.trtBaseReference br
                        ON br.idfsBaseReference = eg.idfEmployeeGroup
                           AND br.intRowStatus = 0
                           AND br.blnSystem = 1
                WHERE o.intRowStatus = 0
                      AND oa.idfsObjectOperation = 10059003 -- Read permission
                      AND oa.intPermission = 1 -- Deny permission
                      AND oa.idfsObjectType = 10060011 -- Site
                      AND oa.idfActor = eg.idfEmployeeGroup
            );

            --
            -- Apply level 1 site filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059003
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059006
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059007
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059004
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059002
                   )
            FROM dbo.tlbOutbreak o
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
            WHERE o.intRowStatus = 0
                  AND EXISTS
            (
                SELECT * FROM @UserGroupSitePermissions WHERE SiteID = o.idfsSite
            )
                  AND datStartDate
                  BETWEEN @StartDateFrom AND @StartDateTo
                  AND (
                          (OutbreakTypeID = CASE ISNULL(@OutbreakTypeID, '')
                                                WHEN '' THEN
                                                    OutbreakTypeID
                                                ELSE
                                                    @OutbreakTypeID
                                            END
                          )
                          OR @OutbreakTypeID IS NULL
                      )
                  AND (
                          (idfsOutbreakStatus = CASE ISNULL(@OutbreakStatusTypeID, '')
                                                    WHEN '' THEN
                                                        idfsOutbreakStatus
                                                    ELSE
                                                        @OutbreakStatusTypeID
                                                END
                          )
                          OR @OutbreakStatusTypeID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (o.idfsDiagnosisOrDiagnosisGroup = CASE ISNULL(@SearchDiagnosesGroup, '')
                                                                 WHEN '' THEN
                                                                     o.idfsDiagnosisOrDiagnosisGroup
                                                                 ELSE
                                                                     @SearchDiagnosesGroup
                                                             END
                          )
                          OR @SearchDiagnosesGroup IS NULL
                      )
                  AND (strOutbreakID LIKE CASE ISNULL(@OutbreakID, '')
                                              WHEN '' THEN
                                                  '%%'
                                              ELSE
                                                  '%' + @OutbreakID + '%'
                                          END
                      );

            DELETE res
            FROM @Results res
                INNER JOIN dbo.tlbOutbreak o
                    ON o.idfOutbreak = res.ID
                INNER JOIN @UserGroupSitePermissions ugsp
                    ON ugsp.SiteID = o.idfsSite
            WHERE ugsp.Permission = 2 -- Deny permission
                  AND ugsp.PermissionTypeID = 10059003; -- Read permission

            --
            -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059003
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059006
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059007
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059004
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059002
                   )
            FROM dbo.tlbOutbreak o
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.gisLocation g
                    ON g.idfsLocation = gl.idfsLocation
            WHERE o.intRowStatus = 0
                  AND EXISTS
            (
                SELECT * FROM @UserSitePermissions WHERE SiteID = o.idfsSite
            )
                  AND datStartDate
                  BETWEEN @StartDateFrom AND @StartDateTo
                  AND (
                          (OutbreakTypeID = CASE ISNULL(@OutbreakTypeID, '')
                                                WHEN '' THEN
                                                    OutbreakTypeID
                                                ELSE
                                                    @OutbreakTypeID
                                            END
                          )
                          OR @OutbreakTypeID IS NULL
                      )
                  AND (
                          (idfsOutbreakStatus = CASE ISNULL(@OutbreakStatusTypeID, '')
                                                    WHEN '' THEN
                                                        idfsOutbreakStatus
                                                    ELSE
                                                        @OutbreakStatusTypeID
                                                END
                          )
                          OR @OutbreakStatusTypeID IS NULL
                      )
                  AND (
                          g.node.IsDescendantOf(@AdministrativeLevelNode) = 1
                          OR @AdministrativeLevelID IS NULL
                      )
                  AND (
                          (o.idfsDiagnosisOrDiagnosisGroup = CASE ISNULL(@SearchDiagnosesGroup, '')
                                                                 WHEN '' THEN
                                                                     o.idfsDiagnosisOrDiagnosisGroup
                                                                 ELSE
                                                                     @SearchDiagnosesGroup
                                                             END
                          )
                          OR @SearchDiagnosesGroup IS NULL
                      )
                  AND (strOutbreakID LIKE CASE ISNULL(@OutbreakID, '')
                                              WHEN '' THEN
                                                  '%%'
                                              ELSE
                                                  '%' + @OutbreakID + '%'
                                          END
                      );

            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN @UserSitePermissions usp
                                    ON usp.SiteID = o.idfsSite
                            WHERE usp.Permission = 4 -- Deny permission
                                  AND usp.PermissionTypeID = 10059003 -- Read permission
                        );
        END
        ELSE
        BEGIN
            -- ========================================================================================
            -- NO CONFIGURABLE FILTRATION RULES APPLIED
            --
            -- For first and second level sites, do not apply any configurable filtration rules.
            -- ========================================================================================
            IF @ApplySiteFiltrationIndicator = 0
            BEGIN
                INSERT INTO @Results
                SELECT idfOutbreak,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                        ON lh.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND (
                              strOutbreakID LIKE '%' + @QuickSearch + '%'
                              OR d.name LIKE '%' + @QuickSearch + '%'
                              OR os.name LIKE '%' + @QuickSearch + '%'
                              OR ot.name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                              OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                          );
            END
            ELSE
            BEGIN
                -- =======================================================================================
                -- CONFIGURABLE FILTRATION RULES
                -- 
                -- Apply configurable filtration rules for use case SAUC34. Some of these rules may 
                -- overlap the default rules.
                -- =======================================================================================
                INSERT INTO @Results
                SELECT idfOutbreak,
                       1,
                       1,
                       1,
                       1,
                       1
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                        ON lh.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND o.idfsSite = @UserSiteID
                      AND (
                              strOutbreakID LIKE '%' + @QuickSearch + '%'
                              OR d.name LIKE '%' + @QuickSearch + '%'
                              OR os.name LIKE '%' + @QuickSearch + '%'
                              OR ot.name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                              OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                          );


                -- =======================================================================================
                -- DEFAULT CONFIGURABLE FILTRATION RULES
                --
                -- Apply active default configurable filtration rules for third level sites.
                -- =======================================================================================
                INSERT INTO @DefaultAccessRules
                SELECT AccessRuleID,
                       a.intRowStatus,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator,
                       a.AdministrativeLevelTypeID
                FROM dbo.AccessRule a
                WHERE AccessRuleID = 10537022;

                SELECT @RuleActiveStatus = ActiveIndicator
                FROM @DefaultAccessRules
                WHERE AccessRuleID = 10537022;

                IF @RuleActiveStatus = 0
                BEGIN
                    SELECT @AdministrativeLevelTypeID = AdministrativeLevelTypeID
                    FROM @DefaultAccessRules
                    WHERE AccessRuleID = 10537022;

                    SELECT @AdministrativeLevelNode
                        = g.node.GetAncestor(g.node.GetLevel() - @AdministrativeLevelTypeID)
                    FROM dbo.tlbOffice o
                        INNER JOIN dbo.tlbGeoLocationShared AS l
                            ON l.idfGeoLocationShared = o.idfLocation
                        INNER JOIN dbo.gisLocation g
                            ON g.idfsLocation = l.idfsLocation
                               AND g.intRowStatus = 0
                    WHERE o.idfOffice = @UserOrganizationID
                          AND g.node.GetLevel() >= @AdministrativeLevelTypeID;

                    -- Administrative level specified in the rule of the site where the session was created.
                    INSERT INTO @FilteredResults
                    SELECT ob.idfOutbreak,
                           a.ReadPermissionIndicator,
                           a.AccessToPersonalDataPermissionIndicator,
                           a.AccessToGenderAndAgeDataPermissionIndicator,
                           a.WritePermissionIndicator,
                           a.DeletePermissionIndicator
                    FROM dbo.tlbOutbreak ob
                        INNER JOIN dbo.tstSite s
                            ON ob.idfsSite = s.idfsSite
                        INNER JOIN dbo.tlbOffice o
                            ON o.idfOffice = s.idfOffice
                               AND o.intRowStatus = 0
                        INNER JOIN dbo.tlbGeoLocationShared l
                            ON l.idfGeoLocationShared = o.idfLocation
                               AND l.intRowStatus = 0
                        INNER JOIN dbo.gisLocation g
                            ON g.idfsLocation = l.idfsLocation
                               AND g.intRowStatus = 0
                        INNER JOIN @DefaultAccessRules a
                            ON a.AccessRuleID = 10537022
                    WHERE ob.intRowStatus = 0
                          AND g.node.IsDescendantOf(@OrganizationAdministrativeLevelNode) = 1;
                END;

                --
                -- Apply at the user's site group level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tflSiteToSiteGroup userSiteGroup
                        ON userSiteGroup.idfsSite = @UserSiteID
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteGroupID = userSiteGroup.idfSiteGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                --
                -- Apply at the user's site level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteID = @UserSiteID
                           AND ara.ActorEmployeeGroupID IS NULL
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                -- 
                -- Apply at the user's employee group level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tlbEmployeeGroupMember egm
                        ON egm.idfEmployee = @UserEmployeeID
                           AND egm.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                -- 
                -- Apply at the user's ID level, granted by a site group.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup grantingSGS
                        ON grantingSGS.idfsSite = o.idfsSite
                    INNER JOIN dbo.tstUserTable u
                        ON u.idfPerson = @UserEmployeeID
                           AND u.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorUserID = u.idfUserID
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteGroupID = grantingSGS.idfSiteGroup;

                --
                -- Apply at the user's site group level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tflSiteToSiteGroup sgs
                        ON sgs.idfsSite = @UserSiteID
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteGroupID = sgs.idfSiteGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND sgs.idfsSite = o.idfsSite;

                -- 
                -- Apply at the user's site level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorSiteID = @UserSiteID
                           AND ara.ActorEmployeeGroupID IS NULL
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- 
                -- Apply at the user's employee group level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tlbEmployeeGroupMember egm
                        ON egm.idfEmployee = @UserEmployeeID
                           AND egm.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorEmployeeGroupID = egm.idfEmployeeGroup
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- 
                -- Apply at the user's ID level, granted by a site.
                --
                INSERT INTO @FilteredResults
                SELECT o.idfOutbreak,
                       a.ReadPermissionIndicator,
                       a.AccessToPersonalDataPermissionIndicator,
                       a.AccessToGenderAndAgeDataPermissionIndicator,
                       a.WritePermissionIndicator,
                       a.DeletePermissionIndicator
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tstUserTable u
                        ON u.idfPerson = @UserEmployeeID
                           AND u.intRowStatus = 0
                    INNER JOIN dbo.AccessRuleActor ara
                        ON ara.ActorUserID = u.idfUserID
                           AND ara.intRowStatus = 0
                    INNER JOIN dbo.AccessRule a
                        ON a.AccessRuleID = ara.AccessRuleID
                           AND a.intRowStatus = 0
                           AND a.DefaultRuleIndicator = 0
                WHERE o.intRowStatus = 0
                      AND a.GrantingActorSiteID = o.idfsSite;

                -- Copy filtered results to results and use search criteria
                INSERT INTO @Results
                SELECT ID,
                       ReadPermissionIndicator,
                       AccessToPersonalDataPermissionIndicator,
                       AccessToGenderAndAgeDataPermissionIndicator,
                       WritePermissionIndicator,
                       DeletePermissionIndicator
                FROM @FilteredResults
                    INNER JOIN dbo.tlbOutbreak o
                        ON o.idfOutbreak = ID
                    INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                        ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                    INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                        ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                    LEFT JOIN dbo.tlbGeoLocation gl
                        ON o.idfGeoLocation = gl.idfGeoLocation
                    LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                        ON lh.idfsLocation = gl.idfsLocation
                    LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                        ON ot.idfsReference = o.OutbreakTypeId
                WHERE o.intRowStatus = 0
                      AND (
                              strOutbreakID LIKE '%' + @QuickSearch + '%'
                              OR d.name LIKE '%' + @QuickSearch + '%'
                              OR os.name LIKE '%' + @QuickSearch + '%'
                              OR ot.name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                              OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                              OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                          )
                GROUP BY ID,
                         ReadPermissionIndicator,
                         AccessToPersonalDataPermissionIndicator,
                         AccessToGenderAndAgeDataPermissionIndicator,
                         WritePermissionIndicator,
                         DeletePermissionIndicator;
            END;

            -- =======================================================================================
            -- DISEASE FILTRATION RULES
            --
            -- Apply disease filtration rules from use case SAUC62.
            -- =======================================================================================		
            -- 
            -- Apply level 0 disease filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without site filtration rules applied.
            --
            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN dbo.tstObjectAccess oa
                                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                                       AND oa.intRowStatus = 0
                            WHERE o.intRowStatus = 0
                                  AND oa.intPermission = 1
                                  AND oa.idfsObjectType = 10060001 -- Disease
                                  AND oa.idfActor = -506 -- Default role
                        );

            --
            -- Apply level 1 disease filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                    ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                    ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                    ON ot.idfsReference = o.OutbreakTypeId
            WHERE oa.intPermission = 2 -- Allow permission
                  AND o.intRowStatus = 0
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = egm.idfEmployeeGroup
                  AND (
                          strOutbreakID LIKE '%' + @QuickSearch + '%'
                          OR d.name LIKE '%' + @QuickSearch + '%'
                          OR os.name LIKE '%' + @QuickSearch + '%'
                          OR ot.name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                          OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                      );

            DELETE res
            FROM @Results res
                INNER JOIN dbo.tlbOutbreak o
                    ON o.idfOutbreak = res.ID
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
            WHERE intPermission = 1 -- Deny permission
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = egm.idfEmployeeGroup;

            --
            -- Apply level 2 disease filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   1,
                   1,
                   1,
                   1,
                   1
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.tstObjectAccess oa
                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                       AND oa.intRowStatus = 0
                INNER JOIN dbo.tlbEmployeeGroupMember egm
                    ON egm.idfEmployee = @UserEmployeeID
                       AND egm.intRowStatus = 0
                INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                    ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                    ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                    ON ot.idfsReference = o.OutbreakTypeId
            WHERE oa.intPermission = 2 -- Allow permission
                  AND o.intRowStatus = 0
                  AND oa.idfsObjectType = 10060001 -- Disease
                  AND oa.idfActor = @UserEmployeeID
                  AND (
                          strOutbreakID LIKE '%' + @QuickSearch + '%'
                          OR d.name LIKE '%' + @QuickSearch + '%'
                          OR os.name LIKE '%' + @QuickSearch + '%'
                          OR ot.name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                          OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                      );

            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN dbo.tstObjectAccess oa
                                    ON oa.idfsObjectID = o.idfsDiagnosisOrDiagnosisGroup
                                       AND oa.intRowStatus = 0
                            WHERE o.intRowStatus = 0
                                  AND oa.intPermission = 1 -- Deny permission
                                  AND oa.idfsObjectType = 10060001 -- Disease
                                  AND idfActor = @UserEmployeeID
                        );

            -- =======================================================================================
            -- SITE FILTRATION RULES
            --
            -- Apply site filtration rules from use case SAUC29.
            -- =======================================================================================		
            -- 
            -- Apply level 0 site filtration rules for the employee default user group - Denies ONLY
            -- as all records have been pulled above with or without site filtration rules applied.
            --
            DELETE FROM @Results
            WHERE EXISTS
            (
                SELECT o.idfOutbreak
                FROM dbo.tlbOutbreak o
                    INNER JOIN dbo.tstObjectAccess oa
                        ON oa.idfsObjectID = o.idfsSite
                           AND oa.intRowStatus = 0
                    INNER JOIN dbo.tlbEmployeeGroup eg
                        ON eg.idfsSite = @UserSiteID
                           AND eg.intRowStatus = 0
                    INNER JOIN dbo.trtBaseReference br
                        ON br.idfsBaseReference = eg.idfEmployeeGroup
                           AND br.intRowStatus = 0
                           AND br.blnSystem = 1
                WHERE o.intRowStatus = 0
                      AND oa.idfsObjectOperation = 10059003 -- Read permission
                      AND oa.intPermission = 1 -- Deny permission
                      AND oa.idfsObjectType = 10060011 -- Site
                      AND oa.idfActor = eg.idfEmployeeGroup
            );

            --
            -- Apply level 1 site filtration rules for an employee's associated user group(s).  
            -- Allows and denies will supersede level 0.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059003
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059006
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059007
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059004
                   ),
                   (
                       SELECT Permission
                       FROM @UserGroupSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059002
                   )
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                    ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                    ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                    ON ot.idfsReference = o.OutbreakTypeId
            WHERE o.intRowStatus = 0
                  AND EXISTS
            (
                SELECT * FROM @UserGroupSitePermissions WHERE SiteID = o.idfsSite
            )
                  AND (
                          strOutbreakID LIKE '%' + @QuickSearch + '%'
                          OR d.name LIKE '%' + @QuickSearch + '%'
                          OR os.name LIKE '%' + @QuickSearch + '%'
                          OR ot.name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                          OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                      );

            DELETE res
            FROM @Results res
                INNER JOIN dbo.tlbOutbreak o
                    ON o.idfOutbreak = res.ID
                INNER JOIN @UserGroupSitePermissions ugsp
                    ON ugsp.SiteID = o.idfsSite
            WHERE ugsp.Permission = 2 -- Deny permission
                  AND ugsp.PermissionTypeID = 10059003; -- Read permission

            --
            -- Apply level 2 site filtration rules for the employee's identity.  Allows and denies 
            -- will supersede level 1.
            --
            INSERT INTO @Results
            SELECT o.idfOutbreak,
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059003
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059006
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059007
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059004
                   ),
                   (
                       SELECT Permission
                       FROM @UserSitePermissions
                       WHERE SiteID = o.idfsSite
                             AND PermissionTypeID = 10059002
                   )
            FROM dbo.tlbOutbreak o
                INNER JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000019) d
                    ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                    ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                    ON ot.idfsReference = o.OutbreakTypeId
            WHERE o.intRowStatus = 0
                  AND EXISTS
            (
                SELECT * FROM @UserSitePermissions WHERE SiteID = o.idfsSite
            )
                  AND (
                          strOutbreakID LIKE '%' + @QuickSearch + '%'
                          OR d.name LIKE '%' + @QuickSearch + '%'
                          OR os.name LIKE '%' + @QuickSearch + '%'
                          OR ot.name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel1Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel2Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel3Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel4Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel5Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel6Name LIKE '%' + @QuickSearch + '%'
                          OR lh.AdminLevel7Name LIKE '%' + @QuickSearch + '%'
                          OR o.datStartDate LIKE '%' + @QuickSearch + '%'
                      );

            DELETE FROM @Results
            WHERE ID IN (
                            SELECT o.idfOutbreak
                            FROM dbo.tlbOutbreak o
                                INNER JOIN @UserSitePermissions usp
                                    ON usp.SiteID = o.idfsSite
                            WHERE usp.Permission = 4 -- Deny permission
                                  AND usp.PermissionTypeID = 10059003 -- Read permission
                        );
        END;

        -- ========================================================================================
        -- FINAL QUERY, PAGINATION AND COUNTS
        -- ========================================================================================
        INSERT INTO @FinalResults
        SELECT ID,
               MAX(res.ReadPermissionIndicator),
               MAX(res.AccessToPersonalDataPermissionIndicator),
               MAX(res.AccessToGenderAndAgeDataPermissionIndicator),
               MAX(res.WritePermissionIndicator),
               MAX(res.DeletePermissionIndicator)
        FROM @Results res
        WHERE res.ReadPermissionIndicator IN ( 1, 3, 5 )
        GROUP BY ID;
		

        WITH paging
        AS (SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'OutbreakID'
                                                        AND @SortOrder = 'ASC' THEN
                                          (os.name + ' ' + o.strOutbreakID)
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'OutbreakID'
                                                        AND @SortOrder = 'DESC' THEN
                                               (os.name + ' ' + o.strOutbreakID)
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'OutbreakStatusTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       os.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'OutbreakStatusTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       os.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'OutbreakTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ot.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'OutbreakTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ot.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel1Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel1Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel1Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel1Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel2Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel2Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel2Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel3Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel3Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel3Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel3Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel4Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel4Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel4Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel4Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel5Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel5Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel5Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel5Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel6Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel6Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel6Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel6Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel7Name'
                                                        AND @SortOrder = 'ASC' THEN
                                                       lh.AdminLevel7Name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'AdministrativeLevel7Name'
                                                        AND @SortOrder = 'DESC' THEN
                                                       lh.AdminLevel7Name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       d.name
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DiseaseName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       d.name
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'StartDate'
                                                        AND @SortOrder = 'ASC' THEN
                                                       o.datStartDate
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'StartDate'
                                                        AND @SortOrder = 'DESC' THEN
                                                       o.datStartDate
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'INIT' THEN
                                                       CAST(os.intOrder AS NVARCHAR) + ',' + CONVERT(NVARCHAR, o.datStartDate, 12) + ' DESC'
                                               END DESC
                                     ) AS ROWNUM,
                   ID,
                   c = COUNT(*) OVER ()
            FROM @FinalResults res
                INNER JOIN dbo.tlbOutbreak AS o
                    ON o.idfOutbreak = res.ID
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) d
                    ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
                INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                    ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
                LEFT JOIN dbo.tlbGeoLocation gl
                    ON o.idfGeoLocation = gl.idfGeoLocation
                LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = gl.idfsLocation
                LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                    ON ot.idfsReference = o.OutbreakTypeId
           )
        SELECT paging.ROWNUM,
               o.idfOutbreak,
               strOutbreakID AS OutbreakID,
               d.name AS DiseaseName,
               os.name AS OutbreakStatusTypeName,
               ot.name AS OutbreakTypeName,
               lh.AdminLevel1Name AS AdministrativeLevel1Name,
               lh.AdminLevel2Name AS AdministrativeLevel2Name,
               lh.AdminLevel3Name AS AdministrativeLevel3Name,
               lh.AdminLevel4Name AS AdministrativeLevel4Name,
               lh.AdminLevel5Name AS AdministrativeLevel5Name,
               lh.AdminLevel6Name AS AdministrativeLevel6Name,
               lh.AdminLevel7Name AS AdministrativeLevel7Name,
               o.datStartDate AS StartDate,
               o.idfsSite AS SiteID,
               CASE
                   WHEN ReadPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN ReadPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN ReadPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN ReadPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, ReadPermissionIndicator)
               END AS ReadPermissionindicator,
               CASE
                   WHEN AccessToPersonalDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToPersonalDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN AccessToPersonalDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToPersonalDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, AccessToPersonalDataPermissionIndicator)
               END AS AccessToPersonalDataPermissionIndicator,
               CASE
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN AccessToGenderAndAgeDataPermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, AccessToGenderAndAgeDataPermissionIndicator)
               END AS AccessToGenderAndAgeDataPermissionIndicator,
               CASE
                   WHEN WritePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN WritePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN WritePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN WritePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, WritePermissionIndicator)
               END AS WritePermissionIndicator,
               CASE
                   WHEN DeletePermissionIndicator = 5 THEN
                       CONVERT(BIT, 1)
                   WHEN DeletePermissionIndicator = 4 THEN
                       CONVERT(BIT, 0)
                   WHEN DeletePermissionIndicator = 3 THEN
                       CONVERT(BIT, 1)
                   WHEN DeletePermissionIndicator = 2 THEN
                       CONVERT(BIT, 0)
                   ELSE
                       CONVERT(BIT, DeletePermissionIndicator)
               END AS DeletePermissionIndicator,
               c AS RecordCount,
               (
                   SELECT COUNT(*) FROM dbo.tlbOutbreak WHERE intRowStatus = 0
               ) AS TotalCount,
               CurrentPage = @PageNumber,
               TotalPages = (c / @PageSize) + IIF(c % @PageSize > 0, 1, 0)
        FROM @FinalResults res
            INNER JOIN paging
                ON paging.ID = res.ID
            INNER JOIN dbo.tlbOutbreak o
                ON o.idfOutbreak = res.ID
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000019) d
                ON d.idfsReference = o.idfsDiagnosisOrDiagnosisGroup
            INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000063) os
                ON os.idfsReference = o.idfsOutbreakStatus AND os.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation gl
                ON o.idfGeoLocation = gl.idfGeoLocation
            LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                ON lh.idfsLocation = gl.idfsLocation
            LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000513) ot
                ON ot.idfsReference = o.OutbreakTypeId
        WHERE RowNum > @firstRec
              AND RowNum < @lastRec
        ORDER BY paging.ROWNUM;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;

END
GO
PRINT N'Altering Procedure [dbo].[USP_VCTS_DetailedCollections_Copy]...';


GO
--*************************************************************
-- Name 				: USP_VCTS_DetailedCollections_Copy
-- Description			: Create replicas of the given idfVector ids
--          
-- Author               : Doug Albanese
-- Revision History
--	Name			Date			Change Detail
--	Doug Albanese	01/21/2020		Initial Creation
--	Doug Albanese	11/5/2020		Re-worked to get the copy to associate samples and tests for the new vector.
--	Doug Albanese	 10/20/2022		Create parameters to denote which parts of a vector, needs to be copyied.
--									Also changed the SP name to conform to standards
--	Mike Kornegay	01/26/2023		Correct return type to match APIPostReturn\
--	Mike Kornegay	02/03/2023		Changed fields that should be null upon copy. (Field Sample Id, Test Result, etc.)
--									and correct query to pull field tests.
--  Mike Kornegay	02/09/2023		Added DiseaseID to tlbMaterial.
--
--*************************************************************

ALTER PROCEDURE [dbo].[USP_VCTS_DetailedCollections_Copy]
(
    @idfVector							  BIGINT,
	@VectorData							  BIT = 0,
	@Samples							  BIT = 0,
	@Tests								  BIT = 0
)

AS 

BEGIN
	DECLARE @returnCode						INT = 0
	DECLARE	@returnMsg						NVARCHAR(max) = 'SUCCESS' 
	DECLARE @idfVectorNew					BIGINT

	DECLARE @SupressSelect TABLE
	( retrunCode INT,
		returnMsg NVARCHAR(200)
	)

	DECLARE @idfMaterials TABLE (
		idfMaterial BIGINT
	);

	DECLARE @idfTestings TABLE (
		idfTesting BIGINT,
		idfMaterial BIGINT
	);

	IF @Samples = 1
	  BEGIN
		 INSERT INTO @idfMaterials
			SELECT
			   DISTINCT idfMaterial
			FROM
			   tlbMaterial
			WHERE
			   idfVector = @idfVector
	  
		 IF @Tests = 1
			BEGIN
				INSERT INTO @idfTestings
				SELECT
					 DISTINCT t.idfTesting, t.idfMaterial
				  FROM			tlbTesting t
				  INNER JOIN	tlbMaterial m
				  ON			m.idfMaterial = t.idfMaterial
				  WHERE			m.idfVector = @idfVector

			END
	  END

	DECLARE @rowId							BIGINT
	DECLARE @idfMaterial					BIGINT
	DECLARE @idfMaterialNew					BIGINT
	DECLARE @idfVectorSurveillanceSession	BIGINT
	DECLARE @idfHostVector					BIGINT = NULL
	DECLARE @strVectorID					NVARCHAR(50)
	DECLARE @strFieldVectorID				NVARCHAR(50) = NULL
	DECLARE @idfLocation					BIGINT = NULL
	DECLARE @intElevation					BIGINT = NULL
	DECLARE @idfsSurrounding				BIGINT = NULL
	DECLARE @strGEOReferenceSources			NVARCHAR(500) = NULL
	DECLARE @idfCollectedByOffice			BIGINT
	DECLARE @idfCollectedByPerson			BIGINT = NULL
	DECLARE @datCollectionDateTime			DATETIME
	DECLARE @idfsCollectionMethod			BIGINT = NULL
	DECLARE @idfsBasisOfRecord				BIGINT = NULL
	DECLARE @idfsVectorType					BIGINT
	DECLARE @idfsVectorSubType				BIGINT
	DECLARE @intQuantity					INT
	DECLARE @idfsSex						BIGINT = NULL
	DECLARE @idfIdentIFiedByOffice			BIGINT = NULL
	DECLARE @idfIdentIFiedByPerson			BIGINT = NULL
	DECLARE @datIdentIFiedDateTime			DATETIME = NULL
	DECLARE @idfsIdentIFicationMethod		BIGINT = NULL
	DECLARE @idfObservation					BIGINT = NULL
	DECLARE @idfsDayPeriod					BIGINT = NULL
	DECLARE @strComment						NVARCHAR(500) = NULL
	DECLARE @idfsEctoparASitesCollected		BIGINT = NULL

	DECLARE @idfsSampleType 				BIGINT
	DECLARE @idfRootMaterial 				BIGINT = NULL
	DECLARE @idfParentMaterial 				BIGINT = NULL
	DECLARE @idfHuman 						BIGINT = NULL
	DECLARE @idfSpecies 					BIGINT = NULL
	DECLARE @idfAnimal 						BIGINT = NULL
	DECLARE @idfMonitoringSession 			BIGINT = NULL
	DECLARE @idfFieldCollectedByPerson 		BIGINT = NULL
	DECLARE @idfFieldCollectedByOffice 		BIGINT = NULL
	DECLARE @idfMainTest 					BIGINT = NULL
	DECLARE @datFieldCollectionDate 		DATETIME = NULL
	DECLARE @datFieldSentDate 				DATETIME = NULL
	DECLARE @strFieldBarcode 				NVARCHAR(200) = NULL
	DECLARE @strCalculatedCaseID 			NVARCHAR(200) = NULL
	DECLARE @strCalculatedHumanName 		NVARCHAR(700) = NULL
	DECLARE @idfSubdivision 				BIGINT = NULL	
	DECLARE @idfsSampleStatus 				BIGINT = NULL
	DECLARE @idfInDepartment 				BIGINT = NULL
	DECLARE @idfDestroyedByPerson 			BIGINT = NULL
	DECLARE @datEnteringDate 				DATETIME = NULL
	DECLARE @datDestructionDate 			DATETIME = NULL
	DECLARE @strBarcode 					NVARCHAR(200) = NULL
	DECLARE @strNote 						NVARCHAR(500) = NULL
	DECLARE @idfsSite 						BIGINT
	DECLARE @intRowStatus 					INT = 0
	DECLARE @idfSendToOffice 				BIGINT = NULL
	DECLARE @blnReadOnly 					BIT
	DECLARE @idfsBirdStatus 				BIGINT = NULL
	DECLARE @idfHumanCase 					BIGINT = NULL
	DECLARE @idfVetCase 					BIGINT = NULL
	DECLARE @datAccession 					DATETIME = NULL
	DECLARE @idfsAccessionCondition 		BIGINT = NULL
	DECLARE @strCondition 					NVARCHAR(200) = NULL
	DECLARE @idfAccesionByPerson 			BIGINT = NULL
	DECLARE @idfsDestructionMethod 			BIGINT = NULL
	DECLARE @idfsCurrentSite 				BIGINT = NULL
	DECLARE @idfsSampleKind 				BIGINT = NULL
	DECLARE @idfMarkedForDispositionByPerson BIGINT = NULL
	DECLARE @datOutOfRepositoryDate 		DATETIME = NULL
	DECLARE @strMaintenanceFlag 			NVARCHAR(20) = NULL

	DECLARE @idfTesting						BIGINT
	DECLARE @idfTestingNew					BIGINT
	DECLARE @idfsTestName					BIGINT = NULL
	DECLARE @idfsTestCategory				BIGINT = NULL
	DECLARE @idfsTestResult					BIGINT = NULL
	DECLARE @idfsTestStatus					BIGINT
	DECLARE @idfsDiagnosis					BIGINT
	DECLARE @idfBatchTest					BIGINT = NULL
	DECLARE @intTestNumber					INT = NULL
	DECLARE @datStartedDate					DATETIME = NULL
	DECLARE @datConcludedDate				DATETIME = NULL
	DECLARE @idfTestedByOffice				BIGINT = NULL
	DECLARE @idfTestedByPerson				BIGINT = NULL
	DECLARE @idfResultEnteredByOffice		BIGINT = NULL
	DECLARE @idfResultEnteredByPerson		BIGINT = NULL
	DECLARE @idfValidatedByOffice			BIGINT = NULL
	DECLARE @idfValidatedByPerson			BIGINT = NULL
	DECLARE @blnNonLaboratoryTest			BIT
	DECLARE @blnExternalTest				BIT = NULL
	DECLARE @idfPerformedByOffice			BIGINT = NULL
	DECLARE @datReceivedDate				DATETIME = NULL
	DECLARE @strContactPerson				NVARCHAR(200) = NULL

	BEGIN TRY
		 BEGIN
			   SELECT
					 @idfVectorSurveillanceSession = idfVectorSurveillanceSession, 
					 @idfHostVector = idfHostVector, 
					 @strFieldVectorID = strFieldVectorID, 
					 @idfLocation = idfLocation, 
					 @intElevation = intElevation, 
					 @idfsSurrounding = idfsSurrounding, 
					 @strGEOReferenceSources = strGEOReferenceSources, 
					 @idfCollectedByOffice = idfCollectedByOffice, 
					 @idfCollectedByPerson = idfCollectedByPerson, 
					 @datCollectionDateTime = datCollectionDateTime, 
					 @idfsCollectionMethod = idfsCollectionMethod, 
					 @idfsBASisOfRecord = idfsBASisOfRecord, 
					 @idfsVectorType = idfsVectorType, 
					 @idfsVectorSubType = idfsVectorSubType, 
					 @intQuantity = intQuantity, 
					 @idfsSex = idfsSex, 
					 @idfIdentIFiedByOffice = idfIdentIFiedByOffice, 
					 @idfIdentIFiedByPerson = idfIdentIFiedByPerson, 
					 @datIdentIFiedDateTime = datIdentIFiedDateTime, 
					 @idfsIdentIFicationMethod = idfsIdentIFicationMethod, 
					 @idfObservation = idfObservation,
					 @idfsDayPeriod = idfsDayPeriod,
					 @strComment = strComment,
					 @idfsEctoparASitesCollected = idfsEctoparASitesCollected
			   FROM
				  tlbVector
			   WHERE
					 idfVector = @idfVector

			   INSERT INTO @SupressSelect
			   EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbVector', @idfVectorNew OUTPUT

			   INSERT INTO @SupressSelect
			   EXEC dbo.USP_GBL_NextNumber_GET 'Vector Surveillance Vector', @strVectorID OUTPUT , NULL --N'AS Session'

			   INSERT INTO dbo.tlbVector
				  (
						idfVector, 
						idfVectorSurveillanceSession, 
						idfHostVector, 
						strVectorID, 
						strFieldVectorID, 
						idfLocation, 
						intElevation, 
						idfsSurrounding, 
						strGEOReferenceSources, 
						idfCollectedByOffice, 
						idfCollectedByPerson, 
						datCollectionDateTime, 
						idfsCollectionMethod, 
						idfsBasisOfRecord, 
						idfsVectorType, 
						idfsVectorSubType, 
						intQuantity, 
						idfsSex, 
						idfIdentIFiedByOffice, 
						idfIdentIFiedByPerson, 
						datIdentIFiedDateTime, 
						idfsIdentIFicationMethod, 
						idfObservation
						,idfsDayPeriod
						,strComment
						,idfsEctoparASitesCollected
				  )
			   VALUES
				  (
						@idfVectorNew, 
						@idfVectorSurveillanceSession, 
						@idfHostVector, 
						@strVectorID, 
						NULL, 
						@idfLocation, 
						@intElevation, 
						@idfsSurrounding, 
						@strGEOReferenceSources, 
						@idfCollectedByOffice, 
						@idfCollectedByPerson, 
						@datCollectionDateTime, 
						@idfsCollectionMethod, 
						@idfsBasisOfRecord, 
						@idfsVectorType, 
						@idfsVectorSubType, 
						@intQuantity, 
						@idfsSex, 
						@idfIdentifiedByOffice, 
						@idfIdentIFiedByPerson, 
						@datIdentIFiedDateTime, 
						@idfsIdentIFicationMethod, 
						@idfObservation,
						@idfsDayPeriod,
						@strComment,
						@idfsEctoparASitesCollected
			   )
		 END;
		
		 IF @Samples = 1
			BEGIN
			   WHILE EXISTS ( SELECT * FROM @idfMaterials )
				  BEGIN
					 SELECT
						TOP 1
						@rowId = idfMaterial
					 FROM 
						@idfMaterials

					 SELECT
						@idfsSampleType = idfsSampleType, 
						@idfRootMaterial = idfRootMaterial, 
						@idfParentMaterial = idfParentMaterial, 
						@idfsDiagnosis = DiseaseID,
						@idfHuman = idfHuman, 
						@idfSpecies = idfSpecies, 
						@idfAnimal = idfAnimal, 
						@idfMonitoringSession = idfMonitoringSession, 
						@idfFieldCollectedByPerson = idfFieldCollectedByPerson, 
						@idfFieldCollectedByOffice = idfFieldCollectedByOffice, 
						@idfMainTest = idfMainTest, 
						@datFieldCollectionDate = datFieldCollectionDate, 
						@datFieldSentDate = datFieldSentDate, 
						@strFieldBarcode = strFieldBarcode, 
						@strCalculatedCaseID = strCalculatedCaseID, 
						@strCalculatedHumanName = strCalculatedHumanName, 
						@idfVectorSurveillanceSession = idfVectorSurveillanceSession, 
						@idfVector = @idfVectorNew, 
						@idfSubdivision = idfSubdivision, 
						@idfsSampleStatus = idfsSampleStatus, 
						@idfInDepartment = idfInDepartment, 
						@idfDestroyedByPerson = idfDestroyedByPerson, 
						@datEnteringDate = datEnteringDate, 
						@datDestructionDate = datDestructionDate, 
						@strBarcode = strBarcode, 
						@strNote = strNote, 
						@idfsSite = idfsSite, 
						@intRowStatus = intRowStatus, 
						@idfSendToOffice = idfSendToOffice, 
						@blnReadOnly = blnReadOnly, 
						@idfsBirdStatus = idfsBirdStatus, 
						@idfHumanCase = idfHumanCase, 
						@idfVetCase = idfVetCase, 
						@datAccession = datAccession, 
						@idfsAccessionCondition = idfsAccessionCondition, 
						@strCondition = strCondition, 
						@idfAccesionByPerson = idfAccesionByPerson, 
						@idfsDestructionMethod = idfsDestructionMethod, 
						@idfsCurrentSite = idfsCurrentSite, 
						@idfsSampleKind = idfsSampleKind, 
						@idfMarkedForDispositionByPerson = idfMarkedForDispositionByPerson, 
						@datOutOfRepositoryDate = datOutOfRepositoryDate, 
						@strMaintenanceFlag = strMaintenanceFlag 
					 FROM
						tlbMaterial
					 WHERE
						idfMaterial = @rowId

					 INSERT INTO @SupressSelect
					 EXEC	dbo.USP_GBL_NEXTKEYID_GET 'tlbMaterial', @idfMaterialNew OUTPUT;

					 INSERT INTO @SupressSelect
					 EXEC	dbo.USP_GBL_NextNumber_GET 'Sample Field Barcode', @strBarcode OUTPUT, NULL 

					 --Update the temp table so that we will have the association between the new material and tests
					 UPDATE @idfTestings
					 SET idfMaterial = @idfMaterialNew
					 WHERE 
						idfMaterial = @rowid

					 INSERT INTO	dbo.tlbMaterial
						(						
								 idfMaterial, 
								 idfsSampleType, 
								 idfRootMaterial, 
								 idfParentMaterial, 
								 idfHuman, 
								 idfSpecies, 
								 idfAnimal, 
								 idfMonitoringSession, 
								 idfFieldCollectedByPerson, 
								 idfFieldCollectedByOffice, 
								 idfMainTest, 
								 datFieldCollectionDate, 
								 datFieldSentDate, 
								 strFieldBarcode, 
								 strCalculatedCaseID, 
								 strCalculatedHumanName, 
								 idfVectorSurveillanceSession, 
								 idfVector, 
								 idfSubdivision, 
								 idfsSampleStatus, 
								 idfInDepartment, 
								 idfDestroyedByPerson, 
								 datEnteringDate, 
								 datDestructionDate, 
								 strBarcode, 
								 strNote, 
								 idfsSite, 
								 intRowStatus, 
								 idfSendToOffice, 
								 blnReadOnly, 
								 idfsBirdStatus, 
								 idfHumanCase, 
								 idfVetCase, 
								 datAccession, 
								 idfsAccessionCondition, 
								 strCondition, 
								 idfAccesionByPerson, 
								 idfsDestructionMethod, 
								 idfsCurrentSite, 
								 idfsSampleKind, 
								 idfMarkedForDispositionByPerson, 
								 datOutOfRepositoryDate, 
								 strMaintenanceFlag,
								 DiseaseID
						)
						VALUES
						(
								 @idfMaterialNew, 
								 @idfsSampleType, 
								 @idfRootMaterial, 
								 @idfParentMaterial, 
								 @idfHuman, 
								 @idfSpecies, 
								 @idfAnimal, 
								 @idfMonitoringSession, 
								 @idfFieldCollectedByPerson, 
								 @idfFieldCollectedByOffice, 
								 @idfMainTest, 
								 @datFieldCollectionDate, 
								 @datFieldSentDate, 
								 NULL, 
								 @strCalculatedCaseID, 
								 @strCalculatedHumanName, 
								 @idfVectorSurveillanceSession, 
								 @idfVectorNew, 
								 @idfSubdivision, 
								 @idfsSampleStatus, 
								 @idfInDepartment, 
								 @idfDestroyedByPerson, 
								 @datEnteringDate, 
								 @datDestructionDate, 
								 @strBarcode, 
								 @strNote, 
								 @idfsSite, 
								 @intRowStatus, 
								 NULL, 
								 @blnReadOnly, 
								 @idfsBirdStatus, 
								 @idfHumanCase, 
								 @idfVetCase, 
								 @datAccession, 
								 @idfsAccessionCondition, 
								 @strCondition, 
								 @idfAccesionByPerson, 
								 @idfsDestructionMethod, 
								 @idfsCurrentSite, 
								 @idfsSampleKind, 
								 @idfMarkedForDispositionByPerson, 
								 @datOutOfRepositoryDate, 
								 @strMaintenanceFlag,
								 @idfsDiagnosis
						);
					
					 DELETE FROM @idfMaterials
					 WHERE idfMaterial = @rowId
				  END;
				  IF @Tests = 1
					 BEGIN
						WHILE EXISTS ( SELECT * FROM @idfTestings )
						   BEGIN
								 SELECT
									TOP 1
									@rowId = idfTesting
								 FROM 
									@idfTestings

								 SELECT
									@idfsTestName = idfsTestName, 
									@idfsTestCategory = idfsTestCategory, 
									@idfsTestResult = idfsTestResult, 
									@idfsTestStatus = idfsTestStatus, 
									@idfsDiagnosis = idfsDiagnosis, 
									@idfBatchTest = idfBatchTest, 
									@idfObservation = idfObservation, 
									@intTestNumber = intTestNumber, 
									@strNote = strNote, 
									@intRowStatus = intRowStatus, 
									@datStartedDate = datStartedDate, 
									@datConcludedDate = datConcludedDate, 
									@idfTestedByOffice = idfTestedByOffice, 
									@idfTestedByPerson = idfTestedByPerson, 
									@idfResultEnteredByOffice = idfResultEnteredByOffice, 
									@idfResultEnteredByPerson = idfResultEnteredByPerson, 
									@idfValidatedByOffice = idfValidatedByOffice, 
									@idfValidatedByPerson = idfValidatedByPerson, 
									@blnReadOnly = blnReadOnly, 
									@blnNonLaboratoryTest = blnNonLaboratoryTest, 
									@blnExternalTest = blnExternalTest, 
									@idfPerformedByOffice = idfPerformedByOffice, 
									@datReceivedDate = datReceivedDate, 
									@strContactPerson = strContactPerson, 
									@strMaintenanceFlag = strMaintenanceFlag
								 FROM
									tlbTesting
								 WHERE
									idfTesting = @rowId

								 INSERT INTO @SupressSelect
								 EXEC	dbo.USP_GBL_NEXTKEYID_GET 'tlbTesting', @idfTestingNew OUTPUT;

								 SELECT
									@idfMaterialNew = idfMaterial
								 FROM
									@idfTestings
								 WHERE
									idfTesting = @rowId

								 INSERT INTO	dbo.tlbTesting
								 (						
									   idfTesting, 
									   idfsTestName, 
									   idfsTestCategory, 
									   idfsTestResult, 
									   idfsTestStatus, 
									   idfsDiagnosis, 
									   idfMaterial, 
									   idfBatchTest, 
									   idfObservation, 
									   intTestNumber, 
									   strNote, 
									   intRowStatus, 
									   datStartedDate, 
									   datConcludedDate, 
									   idfTestedByOffice, 
									   idfTestedByPerson, 
									   idfResultEnteredByOffice, 
									   idfResultEnteredByPerson, 
									   idfValidatedByOffice, 
									   idfValidatedByPerson, 
									   blnReadOnly, 
									   blnNonLaboratoryTest, 
									   blnExternalTest, 
									   idfPerformedByOffice, 
									   datReceivedDate, 
									   strContactPerson, 
									   strMaintenanceFlag,
									   idfVector
								)
								 VALUES
								 (
									   @idfTestingNew, 
									   @idfsTestName, 
									   @idfsTestCategory, 
									   NULL, 
									   @idfsTestStatus, 
									   @idfsDiagnosis, 
									   @idfMaterialNew, 
									   @idfBatchTest, 
									   @idfObservation, 
									   @intTestNumber, 
									   @strNote, 
									   @intRowStatus, 
									   @datStartedDate, 
									   @datConcludedDate, 
									   @idfTestedByOffice, 
									   @idfTestedByPerson, 
									   @idfResultEnteredByOffice, 
									   @idfResultEnteredByPerson, 
									   @idfValidatedByOffice, 
									   @idfValidatedByPerson, 
									   @blnReadOnly, 
									   @blnNonLaboratoryTest, 
									   @blnExternalTest, 
									   @idfPerformedByOffice, 
									   @datReceivedDate, 
									   @strContactPerson, 
									   @strMaintenanceFlag,
									   @idfVectorNew
								 );
				
								 DELETE FROM @idfTestings
								 WHERE idfTesting = @rowId
						   END;
					 END
		 END
											
		IF @@TRANCOUNT > 0 AND @returnCode =0
			COMMIT
	END TRY

	BEGIN CATCH
			IF @@Trancount > 0
				ROLLBACK
				SET @returnCode = ERROR_NUMBER()
				SET @returnMsg = 
			   'ErrorNumber: ' + convert(varchar, ERROR_NUMBER() ) 
			   + ' ErrorSeverity: ' + convert(varchar, ERROR_SEVERITY() )
			   + ' ErrorState: ' + convert(varchar,ERROR_STATE())
			   + ' ErrorProcedure: ' + isnull(ERROR_PROCEDURE() ,'')
			   + ' ErrorLine: ' +  convert(varchar,isnull(ERROR_LINE() ,''))
			   + ' ErrorMessage: '+ ERROR_MESSAGE();
			   THROW;

	END CATCH

	SELECT 
		@returnCode AS ReturnCode
		,@returnMsg AS ReturnMessage

END
GO
PRINT N'Altering Procedure [dbo].[USSP_GBL_BASE_REFERENCE_SET]...';


GO
-- ================================================================================================
-- Name: USSP_GBL_BASE_REFERENCE_SET
--
-- Description: Insert/update base reference data.  Non-API stored procedure.  Only call via 
-- other stored procedures.
--           
-- Revision History:
-- Name				Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long		12/13/2022 Initial release for data auditing for SAUC30 and 31.
-- Stephen Long     02/13/2023 Changed default name from varchar to nvarchar.
--
-- Testing Code:
/*
DECLARE @idfsSpeciesType BIGINT

EXEC dbo.USSP_GBL_Base_Reference_SET @idfsSpeciesType OUTPUT, 19000086, 'en-US', 'Mark', 'Mark', 0, 0, 'System'
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_GBL_BASE_REFERENCE_SET]
(
    @BaseReferenceID BIGINT = NULL OUTPUT,
    @BaseReferenceTypeID BIGINT,
    @LanguageID NVARCHAR(50),
    @DefaultName NVARCHAR(200),          -- Default reference name, used if there is no reference translation
    @NationalName NVARCHAR(200) = NULL, -- Reference name in the language defined by @LanguageID
    @AccessoryCode INT = NULL,          -- Bit mask for reference using
    @Order INT = NULL,                  -- Reference record order for sorting
    @SystemValueIndicator BIT = 0,
    @AuditUserName NVARCHAR(200),
    @DataAuditEventID BIGINT = NULL,
    @EIDSSObjectID NVARCHAR(200) = NULL,
    @UniqueDefaultValueIndicator BIT = 'TRUE' OUTPUT
)
AS
-- Data audit
DECLARE @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @CustomizationPackageID BIGINT,
        @ObjectTypeID BIGINT = 10017042,     -- Base Reference
        @ObjectID BIGINT = @BaseReferenceID,
        @ObjectTableID BIGINT = 75820000000; -- trtBaseReference

DECLARE @BaseReferenceAfterEdit TABLE
(
    BaseReferenceID BIGINT,
    BaseReferenceTypeID BIGINT,
    BaseReferenceCode VARCHAR(36),
    DefaultValue NVARCHAR(2000),
    AccessoryCode INT,
    OrderValue INT,
    SystemValueIndicator BIT
);
DECLARE @BaseReferenceBeforeEdit TABLE
(
    BaseReferenceID BIGINT,
    BaseReferenceTypeID BIGINT,
    BaseReferenceCode VARCHAR(36),
    DefaultValue NVARCHAR(2000),
    AccessoryCode INT,
    OrderValue INT,
    SystemValueIndicator BIT
);
-- End data audit
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        IF EXISTS
        (
            SELECT idfsBaseReference
            FROM dbo.trtBaseReference
            WHERE idfsBaseReference = @BaseReferenceID
                  AND intRowStatus = 0
        )
        BEGIN
            -- Data audit
            INSERT INTO @BaseReferenceBeforeEdit
            (
                BaseReferenceID,
                BaseReferenceTypeID,
                BaseReferenceCode,
                DefaultValue,
                AccessoryCode,
                OrderValue,
                SystemValueIndicator
            )
            SELECT idfsBaseReference,
                   idfsReferenceType,
                   strBaseReferenceCode,
                   strDefault,
                   intHACode,
                   intOrder,
                   blnSystem
            FROM dbo.trtBaseReference
            WHERE idfsBaseReference = @BaseReferenceID;
            -- End data audit

            UPDATE dbo.trtBaseReference
            SET idfsReferenceType = @BaseReferenceTypeID,
                strDefault = ISNULL(@DefaultName, strDefault),
                intHACode = ISNULL(@AccessoryCode, intHACode),
                intOrder = ISNULL(@Order, intOrder),
                blnSystem = ISNULL(@SystemValueIndicator, blnSystem),
                rowguid = ISNULL(rowguid, NEWID()),
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfsBaseReference = @BaseReferenceID;

            -- Data audit
            INSERT INTO @BaseReferenceAfterEdit
            (
                BaseReferenceID,
                BaseReferenceTypeID,
                BaseReferenceCode,
                DefaultValue,
                AccessoryCode,
                OrderValue,
                SystemValueIndicator
            )
            SELECT idfsBaseReference,
                   idfsReferenceType,
                   strBaseReferenceCode,
                   strDefault,
                   intHACode,
                   intOrder,
                   blnSystem
            FROM dbo.trtBaseReference
            WHERE idfsBaseReference = @BaseReferenceID;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   81080000000,
                   a.BaseReferenceID,
                   NULL,
                   b.BaseReferenceTypeID,
                   a.BaseReferenceTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @BaseReferenceAfterEdit AS a
                FULL JOIN @BaseReferenceBeforeEdit AS b
                    ON a.BaseReferenceID = b.BaseReferenceID
            WHERE (a.BaseReferenceTypeID <> b.BaseReferenceTypeID)
                  OR (
                         a.BaseReferenceTypeID IS NOT NULL
                         AND b.BaseReferenceTypeID IS NULL
                     )
                  OR (
                         a.BaseReferenceTypeID IS NULL
                         AND b.BaseReferenceTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   81110000000,
                   a.BaseReferenceID,
                   NULL,
                   b.BaseReferenceCode,
                   a.BaseReferenceCode,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @BaseReferenceAfterEdit AS a
                FULL JOIN @BaseReferenceBeforeEdit AS b
                    ON a.BaseReferenceID = b.BaseReferenceID
            WHERE (a.BaseReferenceCode <> b.BaseReferenceCode)
                  OR (
                         a.BaseReferenceCode IS NOT NULL
                         AND b.BaseReferenceCode IS NULL
                     )
                  OR (
                         a.BaseReferenceCode IS NULL
                         AND b.BaseReferenceCode IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   81120000000,
                   a.BaseReferenceID,
                   NULL,
                   b.DefaultValue,
                   a.DefaultValue,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @BaseReferenceAfterEdit AS a
                FULL JOIN @BaseReferenceBeforeEdit AS b
                    ON a.BaseReferenceID = b.BaseReferenceID
            WHERE (a.DefaultValue <> b.DefaultValue)
                  OR (
                         a.DefaultValue IS NOT NULL
                         AND b.DefaultValue IS NULL
                     )
                  OR (
                         a.DefaultValue IS NULL
                         AND b.DefaultValue IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   81090000000,
                   a.BaseReferenceID,
                   NULL,
                   b.AccessoryCode,
                   a.AccessoryCode,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @BaseReferenceAfterEdit AS a
                FULL JOIN @BaseReferenceBeforeEdit AS b
                    ON a.BaseReferenceID = b.BaseReferenceID
            WHERE (a.AccessoryCode <> b.AccessoryCode)
                  OR (
                         a.AccessoryCode IS NOT NULL
                         AND b.AccessoryCode IS NULL
                     )
                  OR (
                         a.AccessoryCode IS NULL
                         AND b.AccessoryCode IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   81100000000,
                   a.BaseReferenceID,
                   NULL,
                   b.OrderValue,
                   a.OrderValue,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @BaseReferenceAfterEdit AS a
                FULL JOIN @BaseReferenceBeforeEdit AS b
                    ON a.BaseReferenceID = b.BaseReferenceID
            WHERE (a.OrderValue <> b.OrderValue)
                  OR (
                         a.OrderValue IS NOT NULL
                         AND b.OrderValue IS NULL
                     )
                  OR (
                         a.OrderValue IS NULL
                         AND b.OrderValue IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   747460000000,
                   a.BaseReferenceID,
                   NULL,
                   b.SystemValueIndicator,
                   a.SystemValueIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @BaseReferenceAfterEdit AS a
                FULL JOIN @BaseReferenceBeforeEdit AS b
                    ON a.BaseReferenceID = b.BaseReferenceID
            WHERE (a.SystemValueIndicator <> b.SystemValueIndicator)
                  OR (
                         a.SystemValueIndicator IS NOT NULL
                         AND b.SystemValueIndicator IS NULL
                     )
                  OR (
                         a.SystemValueIndicator IS NULL
                         AND b.SystemValueIndicator IS NOT NULL
                     );
        -- End data audit
        END
        ELSE
        BEGIN
            IF @BaseReferenceID IS NULL
            BEGIN
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'trtBaseReference',
                                               @BaseReferenceID OUTPUT;
            END

            IF @Order IS NULL
            BEGIN
                SET @Order = 0;
            END

            IF EXISTS
            (
                SELECT *
                FROM dbo.trtBaseReference
                WHERE strDefault = @DefaultName
                      AND idfsReferenceType = @BaseReferenceTypeID
            )
                SET @UniqueDefaultValueIndicator = 'FALSE';
            ELSE
                SET @UniqueDefaultValueIndicator = 'TRUE';

            INSERT INTO dbo.trtBaseReference
            (
                idfsBaseReference,
                idfsReferenceType,
                strBaseReferenceCode,
                strDefault,
                intHACode,
                intOrder,
                blnSystem,
                intRowStatus,
                rowguid,
                strMaintenanceFlag,
                strReservedAttribute,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateDTM,
                AuditCreateUser
            )
            VALUES
            (@BaseReferenceID,
             @BaseReferenceTypeID,
             NULL,
             @DefaultName,
             NULL,
             @Order,
             0  ,
             0  ,
             NEWID(),
             'ADD',
             'EIDSS7 new reference data',
             10519001,
             N'[{"idfsBaseReference":' + CAST(@BaseReferenceID AS NVARCHAR(300)) + '}]',
             GETDATE(),
             @AuditUserName
            );

            SELECT @CustomizationPackageID = dbo.FN_GBL_CustomizationPackage_GET();

            IF @CustomizationPackageID IS NOT NULL
               AND @CustomizationPackageID <> 51577300000000 -- The USA
            BEGIN
                EXEC dbo.USP_GBL_BaseReferenceToCP_SET @BaseReferenceID,
                                                       @CustomizationPackageID;
            END

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @BaseReferenceID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @EIDSSObjectID
            );
        -- End data audit
        END

        EXEC dbo.USSP_GBL_StringTranslation_SET @BaseReferenceID,
                                                @LanguageID,
                                                @NationalName;

        RETURN;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USSP_GBL_BaseReference_SET]...';


GO
-- ================================================================================================
-- Name: USSP_GBL_BaseReference_SET
--
-- Description: Insert/update base reference data.  Non-API stored procedure.  Only call via 
-- other USP stored procedures.
--           
-- Revision History:
-- Name				Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long		08/20/2019 Initial release.
-- Mark Wilson		05/13/2021 Updated to insert when duplicate value is used
-- Stephen Long     06/26/2021 Added return to end and added set nocount on so output param will
--                             return to calling stored procedure.
-- Mark Wilson		08/10/2021 Updated remove unused parameter from USSP_GBL_StringTranslation_SET
-- Stephen Long     08/12/2021 Corrected to use order parameter on insert instead of 0.
-- Stephen Long     02/13/2023 Changed default name from varchar to nvarchar.
/*
DECLARE @idfsSpeciesType BIGINT

EXEC dbo.USSP_GBL_BaseReference_SET @idfsSpeciesType OUTPUT, 19000086, 'en-US', 'Mark', 'Mark', 0, 0


*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_GBL_BaseReference_SET] 
(
	@ReferenceID BIGINT = NULL OUTPUT,
	@ReferenceType BIGINT,
	@LangID NVARCHAR(50),
	@DefaultName NVARCHAR(200), -- Default reference name, used if there is no reference translation
	@NationalName NVARCHAR(200) = NULL, -- Reference name in the language defined by @LangID
	@HACode INT = NULL, -- Bit mask for reference using
	@Order INT = NULL, -- Reference record order for sorting
	@System BIT = 0,
	@Unique_strDefault BIT = 'TRUE' OUTPUT
    
)
AS
BEGIN
	SET NOCOUNT ON;
	DECLARE @idfCustomizationPackage BIGINT;

	BEGIN TRY
		IF EXISTS (
				SELECT idfsBaseReference
				FROM dbo.trtBaseReference
				WHERE idfsBaseReference = @ReferenceID
					AND intRowStatus = 0
				)
		BEGIN
			UPDATE dbo.trtBaseReference
			SET idfsReferenceType = @ReferenceType,
				strDefault = ISNULL(@DefaultName, strDefault),
				intHACode = ISNULL(@HACode, intHACode),
				intOrder = ISNULL(@Order, intOrder),
				blnSystem = ISNULL(@System, blnSystem),
				rowguid = ISNULL(rowguid, NEWID()),
				AuditUpdateDTM = GETDATE()
			WHERE idfsBaseReference = @ReferenceID;
		END
		ELSE

		BEGIN
			IF @ReferenceID IS NULL
			BEGIN
				EXEC dbo.USP_GBL_NEXTKEYID_GET 'trtBaseReference',
					@ReferenceID OUTPUT;
			END

			IF @Order IS NULL 
			BEGIN
				SET @Order = 0;
			END

			IF EXISTS (SELECT * FROM dbo.trtBaseReference WHERE strDefault = @DefaultName AND idfsReferenceType = @ReferenceType)
				SET @Unique_strDefault = 'FALSE'
			ELSE
				SET @Unique_strDefault = 'TRUE'

			INSERT INTO dbo.trtBaseReference
			(
				idfsBaseReference,
				idfsReferenceType,
				strBaseReferenceCode,
				strDefault,
				intHACode,
				intOrder,
				blnSystem,
				intRowStatus,
				rowguid,
				strMaintenanceFlag,
				strReservedAttribute,
				SourceSystemNameID,
				SourceSystemKeyValue,
				AuditCreateDTM,
				AuditUpdateDTM
			)
			VALUES (
				@ReferenceID,
				@ReferenceType,
				NULL,
				@DefaultName,
				NULL,
				@Order,
				0,
				0,
				NEWID(),
				'ADD',
				'EIDSS7 new reference data',
				10519001,
				N'[{"idfsBaseReference":' + CAST(@ReferenceID AS NVARCHAR(300)) + '}]',
				GETDATE(),
				GETDATE()
			);

			SELECT @idfCustomizationPackage = dbo.FN_GBL_CustomizationPackage_GET();

			IF @idfCustomizationPackage IS NOT NULL
				AND @idfCustomizationPackage <> 51577300000000 --The USA
			BEGIN
				EXEC dbo.USP_GBL_BaseReferenceToCP_SET @ReferenceID,
					@idfCustomizationPackage;
			END
		END
		
		EXEC dbo.USSP_GBL_StringTranslation_SET 
			@ReferenceID,
			@LangID,
			@NationalName;

		RETURN;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USSP_LAB_SAMPLE_SET]...';


GO
-- ================================================================================================
-- Name: USSP_LAB_SAMPLE_SET
--
-- Description:	Inserts or updates sample records for various laboratory module use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     11/08/2018 Initial release.
-- Stephen Long		01/24/2019 Added storage box place to support the location in the freezer 
--                             subdivision.  Changed freezer ID to freezer subdivision ID.
-- Stephen Long     01/30/2019 Added disease ID parameter and to insert/update statements.
-- Stephen Long     02/21/2019 Added root sample ID and sample kind type ID.
-- Stephen Long     03/08/2019 Added row action 'D' for aliquot/derivative, so new lab sample ID 
--                             is not created, rather a number or country decides on a customized 
--                             method.
-- Stephen Long     03/28/2019 Added parameter @EIDSSLaboratorySampleID for aliquots/derivatives. 
--                             These are assigned in the EIDSS application from the derived off of
--                             the original (parent) sample ID.
-- Stephen Long     04/16/2019 Added copy of human master to human for new sample records.
-- Stephen Long     07/09/2019 Added human master ID parameter.  Updated human copy call.
-- Stephen Long     08/29/2019 Corrected root sample ID on insert portion.
-- Stephen Long     11/05/2019 Set root sample ID to sample ID when aliquot/derivative action.
-- Stephen Long     03/11/2020 Changed entered date to use GETDATE on insert.
-- Stephen Long     03/17/2020 Added logic to process transferred out sample's status.
-- Stephen Long     03/18/2020 Added logic to mark transfer final when sample accessioned in or 
--                             rejected at the receiving laboratory.
-- Stephen Long     03/30/2020 Added set of audit update time and user on record inserts/updates.
--                             Removed setting of root sample ID to sample ID of parent when 
--                             aliquot/derivative row action.  Root sample ID set to parent sample 
--                             ID in the application.
-- Stephen Long     04/17/2020 Renamed original sample ID to parent sample ID to be inline with the
--                             business terminology. Root is more along the line of original.  Also
--                             changed not to set the parent sample ID unless it is an aliquot/
--                             derivative which is handled in the app.
-- Stephen Long     05/05/2020 Removed update of transfer sample out record.  Handled in the 
--                             application.
-- Stephen Long     07/06/2020 Add set of lab module source indicator.
-- Stephen Long     09/03/2020 Removal of laboratory sample ID next number get call for 
--                             samples being accessioned and saved.  The laboratory sample ID get
--                             call has been moved to occur prior to save.
-- Stephen Long     09/24/2021 Removed language ID parameter as it is not needed.
-- Stephen Long     01/07/2022 Removed copy human actual to human; moved to parent stored 
--                             procedure.
-- Stephen Long     01/31/2022 Added source system name and key value update on insert.
-- Stephen Long     05/23/2022 Commented out update of disease ID; should never happen in the lab 
--                             module.
-- Stephen Long     10/01/2022 Changed to set EIDSS lab sample ID on a rejected sample.  Business 
--                             requirement retained from 6.1.
-- Stephen Long     01/03/2023 Added update to specimen collected field on human disease report 
--                             when a sample is added.
-- Stephen Long     02/07/2023 Fix to not populate strBarcode when sample is rejected.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_LAB_SAMPLE_SET]
(
    @SampleID BIGINT OUTPUT,
    @SampleTypeID BIGINT,
    @RootSampleID BIGINT = NULL,
    @ParentSampleID BIGINT = NULL,
    @HumanMasterID BIGINT = NULL,
    @HumanID BIGINT = NULL,
    @SpeciesID BIGINT = NULL,
    @AnimalID BIGINT = NULL,
    @VectorID BIGINT = NULL,
    @MonitoringSessionID BIGINT = NULL,
    @VectorSessionID BIGINT = NULL,
    @HumanDiseaseReportID BIGINT = NULL,
    @VeterinaryDiseaseReportID BIGINT = NULL,
    @CollectionDate DATETIME = NULL,
    @CollectedByPersonID BIGINT = NULL,
    @CollectedByOrganizationID BIGINT = NULL,
    @SentDate DATETIME = NULL,
    @SentToOrganizationID BIGINT = NULL,
    @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
    @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
    @SiteID BIGINT,
    @FunctionalAreaID BIGINT = NULL,
    @FreezerSubdivisionID BIGINT = NULL,
    @StorageBoxPlace NVARCHAR(200) = NULL,
    @EnteredDate DATETIME = NULL,
    @OutOfRepositoryDate DATETIME = NULL,
    @MarkedForDispositionByPersonID BIGINT = NULL,
    @DestructionDate DATETIME = NULL,
    @DestructionMethodTypeID BIGINT = NULL,
    @DestroyedByPersonID BIGINT = NULL,
    @ReadOnlyIndicator BIT,
    @AccessionDate DATETIME = NULL,
    @AccessionConditionTypeID BIGINT = NULL,
    @AccessionByPersonID BIGINT = NULL,
    @SampleStatusTypeID BIGINT = NULL,
    @PreviousSampleStatusTypeID BIGINT = NULL,
    @AccessionComment NVARCHAR(200) = NULL,
    @Note NVARCHAR(500) = NULL,
    @CurrentSiteID BIGINT = NULL,
    @SampleKindTypeID BIGINT = NULL,
    @DiseaseID BIGINT = NULL,
    @RowStatus INT,
    @RowAction INT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';

        IF @RowAction = 1 -- Standard insert
           OR @RowAction = 5 -- Insert and accession (LUC01)
           OR @RowAction = 6 -- Create aliquot/derivative and accession (LUC02)
           OR @RowAction = 7 -- Create transfer in sample and do not accession (LUC03)
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = N'tlbMaterial',
                                              @idfsKey = @SampleID OUTPUT;

            IF @RowAction <> 6
               AND @RowAction <> 7
            BEGIN
                SET @RootSampleID = @SampleID;
            END

            --Local/field sample EIDSS ID. Only system assign when user leaves blank.
            IF @RowAction = 1
            BEGIN
                IF @EIDSSLocalOrFieldSampleID IS NULL
                   OR @EIDSSLocalOrFieldSampleID = ''
                BEGIN
                    EXECUTE dbo.USP_GBL_NextNumber_GET @ObjectName = N'Sample Field Barcode',
                                                       @NextNumberValue = @EIDSSLocalOrFieldSampleID OUTPUT,
                                                       @InstallationSite = NULL;
                END
            END

            INSERT INTO dbo.tlbMaterial
            (
                idfMaterial,
                idfsSampleType,
                idfRootMaterial,
                idfParentMaterial,
                idfHuman,
                idfSpecies,
                idfAnimal,
                idfVector,
                idfMonitoringSession,
                idfVectorSurveillanceSession,
                idfHumanCase,
                idfVetCase,
                datFieldCollectionDate,
                idfFieldCollectedByPerson,
                idfFieldCollectedByOffice,
                datFieldSentDate,
                idfSendToOffice,
                strFieldBarcode,
                strBarcode,
                idfsSite,
                idfInDepartment,
                idfSubdivision,
                StorageBoxPlace,
                datEnteringDate,
                datOutOfRepositoryDate,
                idfMarkedForDispositionByPerson,
                datDestructionDate,
                idfsDestructionMethod,
                idfDestroyedByPerson,
                blnReadOnly,
                datAccession,
                idfsAccessionCondition,
                idfAccesionByPerson,
                idfsSampleStatus,
                strCondition,
                strNote,
                idfsCurrentSite,
                idfsSampleKind,
                PreviousSampleStatusID,
                DiseaseID,
                LabModuleSourceIndicator,
                intRowStatus,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser
            )
            VALUES
            (@SampleID,
             @SampleTypeID,
             @RootSampleID,
             @ParentSampleID,
             @HumanID,
             @SpeciesID,
             @AnimalID,
             @VectorID,
             @MonitoringSessionID,
             @VectorSessionID,
             @HumanDiseaseReportID,
             @VeterinaryDiseaseReportID,
             @CollectionDate,
             @CollectedByPersonID,
             @CollectedByOrganizationID,
             @SentDate,
             @SentToOrganizationID,
             @EIDSSLocalOrFieldSampleID,
             @EIDSSLaboratorySampleID,
             @SiteID,
             @FunctionalAreaID,
             @FreezerSubdivisionID,
             @StorageBoxPlace,
             GETDATE(),
             @OutOfRepositoryDate,
             @MarkedForDispositionByPersonID,
             @DestructionDate,
             @DestructionMethodTypeID,
             @DestroyedByPersonID,
             @ReadOnlyIndicator,
             @AccessionDate,
             @AccessionConditionTypeID,
             @AccessionByPersonID,
             @SampleStatusTypeID,
             @AccessionComment,
             @Note,
             @CurrentSiteID,
             @SampleKindTypeID,
             @PreviousSampleStatusTypeID,
             @DiseaseID,
             1  ,
             0  ,
             10519001,
             '[{"idfMaterial":' + CAST(@SampleID AS NVARCHAR(300)) + '}]',
             @AuditUserName
            );

            IF @HumanDiseaseReportID IS NOT NULL
            BEGIN
                UPDATE dbo.tlbHumanCase SET idfsYNSpecimenCollected = 10100001, AuditUpdateDTM = GETDATE(), AuditUpdateUser = @AuditUserName WHERE idfHumanCase = @HumanDiseaseReportID;
            END
        END;
        ELSE
        BEGIN
            --Sample is being accessioned, so get the next lab sample code allowing the user the option to print the barcode.
            IF @RowAction = 4
               OR @RowAction = 8 --Update and accession (LUC01)
            BEGIN
                --Transferred in sample accessioned in, so update the transfer record's transfer status type ID to final. 
                IF @RowAction = 8
                BEGIN
                    UPDATE t
                    SET t.idfsTransferStatus = 10001001,
                        --Final
                        t.AuditUpdateUser = @AuditUserName,
                        t.AuditUpdateDTM = GETDATE()
                    FROM dbo.tlbTransferOUT AS t
                        INNER JOIN dbo.tlbTransferOutMaterial AS tom
                            ON tom.idfTransferOut = t.idfTransferOut
                    WHERE tom.idfMaterial = @RootSampleID;
                END;

                UPDATE dbo.tlbMaterial
                SET idfsSampleType = @SampleTypeID,
                    idfRootMaterial = @RootSampleID,
                    idfParentMaterial = @ParentSampleID,
                    idfHuman = @HumanID,
                    idfSpecies = @SpeciesID,
                    idfAnimal = @AnimalID,
                    idfMonitoringSession = @MonitoringSessionID,
                    idfFieldCollectedByPerson = @CollectedByPersonID,
                    idfFieldCollectedByOffice = @CollectedByOrganizationID,
                    datFieldCollectionDate = @CollectionDate,
                    datFieldSentDate = @SentDate,
                    strFieldBarcode = @EIDSSLocalOrFieldSampleID,
                    idfVectorSurveillanceSession = @VectorSessionID,
                    idfVector = @VectorID,
                    idfSubdivision = @FreezerSubdivisionID,
                    StorageBoxPlace = @StorageBoxPlace,
                    idfsSampleStatus = @SampleStatusTypeID,
                    idfInDepartment = @FunctionalAreaID,
                    idfDestroyedByPerson = @DestroyedByPersonID,
                    datEnteringDate = @EnteredDate,
                    datDestructionDate = @DestructionDate,
                    strBarcode = @EIDSSLaboratorySampleID,
                    strNote = @Note,
                    idfsSite = @SiteID,
                    idfsCurrentSite = @CurrentSiteID,
                    idfsSampleKind = @SampleKindTypeID,
                    intRowStatus = @RowStatus,
                    idfSendToOffice = @SentToOrganizationID,
                    blnReadOnly = @ReadOnlyIndicator,
                    idfHumanCase = @HumanDiseaseReportID,
                    idfVetCase = @VeterinaryDiseaseReportID,
                    datAccession = @AccessionDate,
                    idfsAccessionCondition = @AccessionConditionTypeID,
                    strCondition = @AccessionComment,
                    idfAccesionByPerson = @AccessionByPersonID,
                    idfsDestructionMethod = @DestructionMethodTypeID,
                    idfMarkedForDispositionByPerson = @MarkedForDispositionByPersonID,
                    datOutOfRepositoryDate = @OutOfRepositoryDate,
                    PreviousSampleStatusID = @PreviousSampleStatusTypeID,
                    --DiseaseID = @DiseaseID,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE idfMaterial = @SampleID;
            END
            ELSE
            BEGIN
                --Transferred in sample rejected, so update the transferred out sample's status to transferred out. 
                IF @RowAction = 9
                BEGIN
                    UPDATE dbo.tlbMaterial
                    SET idfsSampleStatus = 10015010,
                        --Transferred Out
                        AuditUpdateUser = @AuditUserName,
                        AuditUpdateDTM = GETDATE()
                    WHERE idfMaterial = @RootSampleID;

                    UPDATE t
                    SET t.idfsTransferStatus = 10001001,
                        --Final 
                        AuditUpdateUser = @AuditUserName,
                        AuditUpdateDTM = GETDATE()
                    FROM dbo.tlbTransferOUT AS t
                        INNER JOIN dbo.tlbTransferOutMaterial AS tom
                            ON tom.idfTransferOut = t.idfTransferOut
                    WHERE tom.idfMaterial = @RootSampleID;
                END;

                IF @RowAction = 2
                   AND @AccessionConditionTypeID = 10108003 -- Rejected
                BEGIN
                    UPDATE dbo.tlbMaterial
                    SET idfsSampleType = @SampleTypeID,
                        idfRootMaterial = @RootSampleID,
                        idfParentMaterial = @ParentSampleID,
                        idfHuman = @HumanID,
                        idfSpecies = @SpeciesID,
                        idfAnimal = @AnimalID,
                        idfMonitoringSession = @MonitoringSessionID,
                        idfFieldCollectedByPerson = @CollectedByPersonID,
                        idfFieldCollectedByOffice = @CollectedByOrganizationID,
                        datFieldCollectionDate = @CollectionDate,
                        datFieldSentDate = @SentDate,
                        strFieldBarcode = @EIDSSLocalOrFieldSampleID,
                        idfVectorSurveillanceSession = @VectorSessionID,
                        idfVector = @VectorID,
                        idfSubdivision = @FreezerSubdivisionID,
                        StorageBoxPlace = @StorageBoxPlace,
                        idfsSampleStatus = @SampleStatusTypeID,
                        idfInDepartment = @FunctionalAreaID,
                        idfDestroyedByPerson = @DestroyedByPersonID,
                        datEnteringDate = @EnteredDate,
                        datDestructionDate = @DestructionDate,
                        strNote = @Note,
                        idfsSite = @SiteID,
                        idfsCurrentSite = @CurrentSiteID,
                        idfsSampleKind = @SampleKindTypeID,
                        intRowStatus = @RowStatus,
                        idfSendToOffice = @SentToOrganizationID,
                        blnReadOnly = @ReadOnlyIndicator,
                        idfHumanCase = @HumanDiseaseReportID,
                        idfVetCase = @VeterinaryDiseaseReportID,
                        datAccession = @AccessionDate,
                        idfsAccessionCondition = @AccessionConditionTypeID,
                        strCondition = @AccessionComment,
                        idfAccesionByPerson = @AccessionByPersonID,
                        idfsDestructionMethod = @DestructionMethodTypeID,
                        idfMarkedForDispositionByPerson = @MarkedForDispositionByPersonID,
                        datOutOfRepositoryDate = @OutOfRepositoryDate,
                        PreviousSampleStatusID = @PreviousSampleStatusTypeID,
                        AuditUpdateUser = @AuditUserName,
                        AuditUpdateDTM = GETDATE()
                    WHERE idfMaterial = @SampleID;
                END
                ELSE
                BEGIN
                    UPDATE dbo.tlbMaterial
                    SET idfsSampleType = @SampleTypeID,
                        idfRootMaterial = @RootSampleID,
                        idfParentMaterial = @ParentSampleID,
                        idfHuman = @HumanID,
                        idfSpecies = @SpeciesID,
                        idfAnimal = @AnimalID,
                        idfMonitoringSession = @MonitoringSessionID,
                        idfFieldCollectedByPerson = @CollectedByPersonID,
                        idfFieldCollectedByOffice = @CollectedByOrganizationID,
                        datFieldCollectionDate = @CollectionDate,
                        datFieldSentDate = @SentDate,
                        strFieldBarcode = @EIDSSLocalOrFieldSampleID,
                        idfVectorSurveillanceSession = @VectorSessionID,
                        idfVector = @VectorID,
                        idfSubdivision = @FreezerSubdivisionID,
                        StorageBoxPlace = @StorageBoxPlace,
                        idfsSampleStatus = @SampleStatusTypeID,
                        idfInDepartment = @FunctionalAreaID,
                        idfDestroyedByPerson = @DestroyedByPersonID,
                        datEnteringDate = @EnteredDate,
                        datDestructionDate = @DestructionDate,
                        strNote = @Note,
                        idfsSite = @SiteID,
                        idfsCurrentSite = @CurrentSiteID,
                        idfsSampleKind = @SampleKindTypeID,
                        intRowStatus = @RowStatus,
                        idfSendToOffice = @SentToOrganizationID,
                        blnReadOnly = @ReadOnlyIndicator,
                        idfHumanCase = @HumanDiseaseReportID,
                        idfVetCase = @VeterinaryDiseaseReportID,
                        datAccession = @AccessionDate,
                        idfsAccessionCondition = @AccessionConditionTypeID,
                        strCondition = @AccessionComment,
                        idfAccesionByPerson = @AccessionByPersonID,
                        idfsDestructionMethod = @DestructionMethodTypeID,
                        idfMarkedForDispositionByPerson = @MarkedForDispositionByPersonID,
                        datOutOfRepositoryDate = @OutOfRepositoryDate,
                        PreviousSampleStatusID = @PreviousSampleStatusTypeID,
                        AuditUpdateUser = @AuditUserName,
                        AuditUpdateDTM = GETDATE()
                    WHERE idfMaterial = @SampleID;
                END
            END;
        END;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Altering Procedure [report].[USP_REP_LAB_Journal60B]...';


GO


--*************************************************************************
-- Name 				: report.USP_REP_LAB_Journal60B
-- Description			: Select data for 60B Journal.
--                  
-- Author               : Srini Goli
-- Revision History
--		Name			Date            Change Detail
--		Srini Goli      02/07/2023      Data not pulling correctly and Concentrated on Performance

-- Testing code:
/*
 EXEC report.USP_REP_LAB_Journal60B 'ka', '20150101', '20151231', 9844050000000, 1101
 
 EXEC report.USP_REP_LAB_Journal60B 'en-US', '20150101', '20151231', 9844050000000, 1101

 EXEC report.USP_REP_LAB_Journal60B 'en-US', '20150101', '20150630', NULL,NULL

 EXEC report.USP_REP_LAB_Journal60B 'en-US', '20230101', '20230201', NULL,NULL
 */
  --*************************************************************************
 
 ALTER Procedure [report].[USP_REP_LAB_Journal60B]
 	(
 		@LangID		AS NVARCHAR(10), 
 		@StartDate	AS DATETIME,	 
 		@FinishDate	AS DATETIME,
 		@Diagnosis	AS BIGINT	=NULL,		-- filter value ofa drop-down list of all diseases accounted in EIDSS as case-based diseases with HA Code �Human� or �Human, Livestock� or �Human, Avian� or �Human, Avian, Livestock� (non-mandatory field).
 		@SiteID		AS BIGINT = NULL
 	)
 AS	
 
 -- Field description may be found here
 -- "https://repos.btrp.net/BTRP/Project_Documents/08x-Implementation/Customizations/GG/Reports/Specification for report development - 60B Journal Human GG v1.0.doc"
 -- by number marked red at screen form prototype 
 
 DECLARE	@ReportTable 	TABLE
 (	
 	strName						NVARCHAR(2000), --2	
	LegacyCaseID				NVARCHAR(100),
	intRow						NVARCHAR(100),
 	strAge						NVARCHAR(2000), --3
 	strGender					NVARCHAR(2000), --4
 	strAddress					NVARCHAR(2000), --5
 	strPlaceOfStudyWork			NVARCHAR(2000), --6
 	datDiseaseOnsetDate			DATETIME, --7
 	datDateOfFirstPresentation		DATETIME, --8
 	strFacilityThatSentNotification NVARCHAR(2000), --9
 	strProvisionalDiagnosis			NVARCHAR(2000), --10
 	datDateProvisionalDiagnosis		DATETIME, --11
 	datDateSpecificTreatment		DATETIME, --12
 	datDateSpecimenTaken			NVARCHAR(MAX), --13
 	strResultAndDate			NVARCHAR(MAX), --14
 	strVaccinationStatus		NVARCHAR(2000), --15
 	datDateCaseInvestigation	DATETIME, --16
 	strFinalDS					NVARCHAR(2000), --17
 	strFinalClassification		NVARCHAR(2000), --18
 	datDateFinalDS				DATETIME, --19
 	strOutcome					NVARCHAR(2000), --20
 	strCaseStatus				NVARCHAR(2000), --24
 	strComments					NVARCHAR(MAX), --25
 	strCaseID					NVARCHAR(200),
 	-- todo: fill this new field:
 	datEnteredDate				DATETIME  -- for sorting in EIDSS
 )	
 
 PRINT ISNULL(@SiteID, dbo.FN_GBL_SITEID_GET())
 
 DECLARE	@OutbreakID	NVARCHAR(300)
 SELECT	@OutbreakID = ISNULL(RTRIM(r.[name]) + N' ', N'')
 FROM	dbo.FN_GBL_ReferenceRepair(@LangID, 19000132) r	-- Additional report Text
 WHERE	r.strDefault = N'Outbreak ID'
 PRINT @OutbreakID
 
 DECLARE	@CurrentResidence	NVARCHAR(300)
 SELECT	@CurrentResidence = ISNULL(RTRIM(r.[name]) + N' ' , N'') 
 FROM	dbo.FN_GBL_ReferenceRepair(@LangID, 19000132) r	-- Additional report Text
 WHERE	r.strDefault = N'Current Residence:'
 
 --PRINT @CurrentResidence
 
 DECLARE	@PermanentResidence	NVARCHAR(300)
 SELECT	@PermanentResidence = ISNULL(RTRIM(r.[name]) + N' ' , N'') 
 FROM	dbo.FN_GBL_ReferenceRepair(@LangID, 19000132) r	-- Additional report Text
 WHERE	r.strDefault = N'Permanent Residence:'
 
 --PRINT @PermanentResidence
 
 DECLARE 
	 @OPV5field BIGINT
	,@OPV4field BIGINT
	,@OPV3field BIGINT
	,@OPV2field BIGINT
	,@OPV1field BIGINT
	,@Thirdfield BIGINT
	,@Secondfield BIGINT
	,@Firstfield BIGINT 
	,@NumberOfImmunizationsReceived BIGINT
	,@ArePatientsImmunizationRecordsAvailable BIGINT
	,@WasSpecificVaccinationAdministered BIGINT
	,@VaccinatedAgainstRubella BIGINT
	,@NumberOfReceivedDoses_WithDiphtheriaComponent BIGINT
	,@RabiesVaccineGiven BIGINT
	,@NumberOfReceivedDoses_WithMeaslesComponent BIGINT
	,@HibVaccinationStatus BIGINT
	,@NumberOfReceivedDoses_WithMumpsComponent BIGINT
	,@MothersTetanusToxoidHistoryPriorToChildsDisease BIGINT
	,@NumberOfReceivedDoses_WithPertussisComponent BIGINT
	,@NumberOfReceivedDoses_WithRubellaComponent BIGINT
	,@IncludeDosesOfALLTetanusContainingToxoids BIGINT
	,@WasVaccinationAdministered BIGINT
	,@Revaccination BIGINT
	,@DateOfVaccination BIGINT
	,@DateOfRevaccination BIGINT
	,@ImmunizationHistory_DateOfLastVaccination BIGINT
	,@SpecificVaccination_DateOfLastVaccination BIGINT
	,@IfYes_IndicateDatesOfDoses BIGINT
	,@IfYes_NumberOfVaccinesReceived BIGINT
	,@IntervalSinceLastTetanusToxoidDose BIGINT
	,@DateOfLastOPVDoseReceived BIGINT
	,@NameVaccine BIGINT
	
	--NEW!!!
	--Is patient vaccinated against leptospirosis?
	,@IsPatientVaccinatedAgainstLeptospirosis BIGINT
	
	--Date of vaccination of patient against leptospirosis
	,@DateOfVaccinationOfPatientAgainstLeptospirosis BIGINT


	--NEW!!! 22.06.2016
	--Rabies vaccine dose
	,@RabiesVaccineDose BIGINT
	
	--Rabies vaccination date
	,@RabiesVaccinationDate BIGINT

	--HEI S. pneumonae caused infection GG: S. pneumonae vaccination status
	,@PneumonaeVaccinationStatus BIGINT
	
	--HEI S. pneumonae caused infection GG: Number of received doses of S. pneumonae vaccine
	,@PneumonaeNumberReceivedDoses BIGINT
	
	--HEI S. pneumonae caused infection GG: Date of last vaccination
	,@PneumonaeDateLastVaccination BIGINT
	
	--HEI Acute Viral Hepatitis A GG: Number of received doses of Hepatitis A vaccine
	,@HepatitisANumberReceivedDoses BIGINT
	
	--HEI Acute Viral Hepatitis A GG: Date of last vaccination
	,@HepatitisADateLastVaccination BIGINT


	,@Section_AdditionalOPVdoses BIGINT
	,@Section_Maternalhistory BIGINT

	,@PVT_Immunization3 BIGINT
	,@PVT_Immunization5 BIGINT
	,@PVT_VaccineTypes BIGINT
	,@PVT_OPVDoses BIGINT
	,@PVT_Y_N_Unk BIGINT
     
     
	,@ft_HEI_Acute_viral_hepatitis_B_GG BIGINT
	,@ft_HEI_AFP_Acute_poliomyelitis_GG BIGINT
	,@ft_HEI_Anthrax_GG BIGINT
	,@ft_HEI_Botulism_GG BIGINT
	,@ft_HEI_Brucellosis_GG BIGINT
	,@ft_HEI_CRS_GG BIGINT
	,@ft_HEI_Congenital_Syphilis_GG BIGINT
	,@ft_HEI_CCHF_GG BIGINT
	,@ft_HEI_Diphtheria_GG BIGINT
	,@ft_HEI_Gonococcal_Infection_GG BIGINT
	,@ft_HEI_Bacterial_Meningitis_GG BIGINT
	,@ft_HEI_HFRS_GG BIGINT
	,@ft_HEI_Influenza_Virus_GG BIGINT
	,@ft_HEI_Measles_GG BIGINT
	,@ft_HEI_Mumps_GG BIGINT
	,@ft_HEI_Pertussis_GG BIGINT
	,@ft_HEI_Plague_GG BIGINT
	,@ft_HEI_Post_vaccination_unusual_reactions_and_complications_GG BIGINT
	,@ft_HEI_Rabies_GG BIGINT
	,@ft_HEI_Rubella_GG BIGINT
	,@ft_HEI_Smallpox_GG BIGINT
	,@ft_HEI_Syphilis_GG BIGINT
	,@ft_HEI_Tetanus_GG BIGINT
	,@ft_HEI_TBE_GG BIGINT
	,@ft_HEI_Tularemia_GG BIGINT
	,@ft_UNI_HEI_GG BIGINT
	--NEW!!!
	,@ft_HEI_Leptospirosis_GG BIGINT
	--NEW!!! 22.06.2016
	,@ft_HEI_Pneumonae_GG BIGINT
	,@ft_HEI_Acute_Viral_Hepatitis_A_GG BIGINT

    
	,@DG_MotherTtetanusToxoidHistoryPriorToChildDisease BIGINT

	,@idfsCustomReportType BIGINT
 
 
SET @idfsCustomReportType = 10290013 --GG 60B Journal


SELECT @OPV5field = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'OPV5field'
AND intRowStatus = 0

SELECT @OPV4field = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'OPV4field'
AND intRowStatus = 0

SELECT @OPV3field = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'OPV3field'
AND intRowStatus = 0

SELECT @OPV2field = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'OPV2field'
AND intRowStatus = 0

SELECT @OPV1field = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'OPV1field'
AND intRowStatus = 0

SELECT @Thirdfield = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'Thirdfield'
AND intRowStatus = 0

SELECT @Secondfield = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'Secondfield'
AND intRowStatus = 0

SELECT @Firstfield = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'Firstfield'
AND intRowStatus = 0

SELECT @NumberOfImmunizationsReceived = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'NumberOfImmunizationsReceived'
AND intRowStatus = 0

SELECT @ArePatientsImmunizationRecordsAvailable = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ArePatientsImmunizationRecordsAvailable'
AND intRowStatus = 0

SELECT @WasSpecificVaccinationAdministered = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'WasSpecificVaccinationAdministered'
AND intRowStatus = 0

SELECT @VaccinatedAgainstRubella = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'VaccinatedAgainstRubella'
AND intRowStatus = 0

SELECT @NumberOfReceivedDoses_WithDiphtheriaComponent = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'NumberOfReceivedDoses_WithDiphtheriaComponent'
AND intRowStatus = 0

SELECT @RabiesVaccineGiven = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'RabiesVaccineGiven'
AND intRowStatus = 0

SELECT @NumberOfReceivedDoses_WithMeaslesComponent = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'NumberOfReceivedDoses_WithMeaslesComponent'
AND intRowStatus = 0

SELECT @HibVaccinationStatus = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'HibVaccinationStatus'
AND intRowStatus = 0

SELECT @NumberOfReceivedDoses_WithMumpsComponent = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'NumberOfReceivedDoses_WithMumpsComponent'
AND intRowStatus = 0

SELECT @MothersTetanusToxoidHistoryPriorToChildsDisease = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'MothersTetanusToxoidHistoryPriorToChildsDisease'
AND intRowStatus = 0

SELECT @NumberOfReceivedDoses_WithPertussisComponent = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'NumberOfReceivedDoses_WithPertussisComponent'
AND intRowStatus = 0

SELECT @NumberOfReceivedDoses_WithRubellaComponent = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'NumberOfReceivedDoses_WithRubellaComponent'
AND intRowStatus = 0

SELECT @IncludeDosesOfALLTetanusContainingToxoids = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'IncludeDosesOfALLTetanusContainingToxoids'
AND intRowStatus = 0

SELECT @WasVaccinationAdministered = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'WasVaccinationAdministered'
AND intRowStatus = 0

SELECT @Revaccination = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'Revaccination'
AND intRowStatus = 0

SELECT @DateOfVaccination = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'DateOfVaccination'
AND intRowStatus = 0

SELECT @DateOfRevaccination = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'DateOfRevaccination'
AND intRowStatus = 0

SELECT @ImmunizationHistory_DateOfLastVaccination = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ImmunizationHistory_DateOfLastVaccination'
AND intRowStatus = 0

SELECT @SpecificVaccination_DateOfLastVaccination = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'SpecificVaccination_DateOfLastVaccination'
AND intRowStatus = 0

SELECT @IfYes_IndicateDatesOfDoses = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'IfYes_IndicateDatesOfDoses'
AND intRowStatus = 0

SELECT @IfYes_NumberOfVaccinesReceived = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'IfYes_NumberOfVaccinesReceived'
AND intRowStatus = 0

SELECT @IntervalSinceLastTetanusToxoidDose = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'IntervalSinceLastTetanusToxoidDose'
AND intRowStatus = 0

SELECT @DateOfLastOPVDoseReceived = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'DateOfLastOPVDoseReceived'
AND intRowStatus = 0

SELECT @NameVaccine = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'NameVaccine' --Vaccine type that caused post vaccination complications: Name of vaccine
AND intRowStatus = 0

--NEW!!!
SELECT @IsPatientVaccinatedAgainstLeptospirosis = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'IsPatientVaccinatedAgainstLeptospirosis'
AND intRowStatus = 0

SELECT @DateOfVaccinationOfPatientAgainstLeptospirosis = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'DateOfVaccinationOfPatientAgainstLeptospirosis'
AND intRowStatus = 0

--NEW!!! 22.06.2016
SELECT @RabiesVaccineDose = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'RabiesVaccineDose'
AND intRowStatus = 0	

SELECT @RabiesVaccinationDate = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'RabiesVaccinationDate'
AND intRowStatus = 0		

SELECT @PneumonaeVaccinationStatus = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'PneumonaeVaccinationStatus'
AND intRowStatus = 0	
	
SELECT @PneumonaeNumberReceivedDoses = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'PneumonaeNumberReceivedDoses'
AND intRowStatus = 0	
	
SELECT @PneumonaeDateLastVaccination = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'PneumonaeDateLastVaccination'
AND intRowStatus = 0	
	
SELECT @HepatitisANumberReceivedDoses = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'HepatitisANumberReceivedDoses'
AND intRowStatus = 0		
	
SELECT @HepatitisADateLastVaccination = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'HepatitisADateLastVaccination'
AND intRowStatus = 0	

--SELECT 
--@RabiesVaccineDose as RabiesVaccineDose
--,@RabiesVaccinationDate as RabiesVaccinationDate
--,@PneumonaeVaccinationStatus as PneumonaeVaccinationStatus
--,@PneumonaeNumberReceivedDoses as PneumonaeNumberReceivedDoses
--,@PneumonaeDateLastVaccination as PneumonaeDateLastVaccination
--,@HepatitisANumberReceivedDoses as HepatitisANumberReceivedDoses
--,@HepatitisADateLastVaccination as HepatitisADateLastVaccination




-- sections
SELECT @Section_AdditionalOPVdoses = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'Section_AdditionalOPVdoses'
AND intRowStatus = 0    
 
SELECT @Section_Maternalhistory = idfsFFObject FROM trtFFObjectForCustomReport
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'Section_Maternalhistory'
AND intRowStatus = 0

--parameter values type
SELECT @PVT_Immunization3 = pt.idfsReferenceType FROM trtFFObjectForCustomReport pfc
	INNER JOIN dbo.ffParameterType  pt
	on pfc.idfsFFObject = pt.idfsParameterType
	AND pt.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'PVT_Immunization3'
AND pfc.intRowStatus = 0

SELECT @PVT_Immunization5 = pt.idfsReferenceType FROM trtFFObjectForCustomReport pfc
	INNER JOIN dbo.ffParameterType  pt
	on pfc.idfsFFObject = pt.idfsParameterType
	AND pt.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'PVT_Immunization5'
AND pfc.intRowStatus = 0

SELECT @PVT_VaccineTypes = pt.idfsReferenceType FROM trtFFObjectForCustomReport pfc
	INNER JOIN dbo.ffParameterType  pt
	on pfc.idfsFFObject = pt.idfsParameterType
	AND pt.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'PVT_VaccineTypes'
AND pfc.intRowStatus = 0

SELECT @PVT_OPVDoses = pt.idfsReferenceType FROM trtFFObjectForCustomReport pfc
	INNER JOIN dbo.ffParameterType  pt
	on pfc.idfsFFObject = pt.idfsParameterType
	AND pt.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'PVT_OPVDoses'
AND pfc.intRowStatus = 0

SELECT @PVT_Y_N_Unk = pt.idfsReferenceType FROM trtFFObjectForCustomReport pfc
	INNER JOIN dbo.ffParameterType  pt
	on pfc.idfsFFObject = pt.idfsParameterType
	AND pt.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'PVT_Y_N_Unk'
AND pfc.intRowStatus = 0
     

--Templates
--ft_HEI_Acute_viral_hepatitis_B_GG
SELECT @ft_HEI_Acute_viral_hepatitis_B_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Acute_viral_hepatitis_B_GG'
AND pfc.intRowStatus = 0

--ft_HEI_AFP_Acute_poliomyelitis_GG
SELECT @ft_HEI_AFP_Acute_poliomyelitis_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_AFP_Acute_poliomyelitis_GG'
AND pfc.intRowStatus = 0
	
--ft_HEI_Anthrax_GG
SELECT @ft_HEI_Anthrax_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Anthrax_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Botulism_GG
SELECT @ft_HEI_Botulism_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Botulism_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Brucellosis_GG
SELECT @ft_HEI_Brucellosis_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Brucellosis_GG'
AND pfc.intRowStatus = 0

--ft_HEI_CRS_GG
SELECT @ft_HEI_CRS_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_CRS_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Congenital_Syphilis_GG
SELECT @ft_HEI_Congenital_Syphilis_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Congenital_Syphilis_GG'
AND pfc.intRowStatus = 0

--ft_HEI_CCHF_GG
SELECT @ft_HEI_CCHF_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_CCHF_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Diphtheria_GG
SELECT @ft_HEI_Diphtheria_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Diphtheria_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Gonococcal_Infection_GG
SELECT @ft_HEI_Gonococcal_Infection_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Gonococcal_Infection_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Bacterial_Meningitis_GG
SELECT @ft_HEI_Bacterial_Meningitis_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Bacterial_Meningitis_GG'
AND pfc.intRowStatus = 0

--ft_HEI_HFRS_GG
SELECT @ft_HEI_HFRS_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_HFRS_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Influenza_Virus_GG
SELECT @ft_HEI_Influenza_Virus_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Influenza_Virus_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Measles_GG
SELECT @ft_HEI_Measles_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Measles_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Mumps_GG
SELECT @ft_HEI_Mumps_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Mumps_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Pertussis_GG
SELECT @ft_HEI_Pertussis_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Pertussis_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Plague_GG
SELECT @ft_HEI_Plague_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Plague_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Post_vaccination_unusual_reactions_and_comp
SELECT @ft_HEI_Post_vaccination_unusual_reactions_and_complications_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Post_vaccination_unusual_reactions_and_comp'
AND pfc.intRowStatus = 0

--ft_HEI_Rabies_GG
SELECT @ft_HEI_Rabies_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Rabies_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Rubella_GG
SELECT @ft_HEI_Rubella_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Rubella_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Smallpox_GG
SELECT @ft_HEI_Smallpox_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Smallpox_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Syphilis_GG
SELECT @ft_HEI_Syphilis_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Syphilis_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Tetanus_GG
SELECT @ft_HEI_Tetanus_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Tetanus_GG'
AND pfc.intRowStatus = 0

--ft_HEI_TBE_GG
SELECT @ft_HEI_TBE_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_TBE_GG'
AND pfc.intRowStatus = 0

--ft_HEI_Tularemia_GG
SELECT @ft_HEI_Tularemia_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Tularemia_GG'
AND pfc.intRowStatus = 0

--ft_UNI_HEI_GG
SELECT @ft_UNI_HEI_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_UNI_HEI_GG'
AND pfc.intRowStatus = 0

--NEW!!!
--ft_HEI_Leptospirosis_GG
SELECT @ft_HEI_Leptospirosis_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Leptospirosis_GG'
AND pfc.intRowStatus = 0


--NEW!!! 22.06.2016
--@ft_HEI_Pneumonae_GG 
SELECT @ft_HEI_Pneumonae_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Pneumonae_GG'
AND pfc.intRowStatus = 0
	
--@ft_HEI_Acute_Viral_Hepatitis_A_GG 
SELECT @ft_HEI_Acute_Viral_Hepatitis_A_GG = ft.idfsFormTemplate 
FROM trtFFObjectForCustomReport pfc
	INNER JOIN ffFormTemplate ft
	on pfc.idfsFFObject = ft.idfsFormTemplate
	AND ft.intRowStatus = 0
WHERE idfsCustomReportType = @idfsCustomReportType AND strFFObjectAlias = 'ft_HEI_Acute_Viral_Hepatitis_A_GG'
AND pfc.intRowStatus = 0	

--SELECT 
--	 @ft_HEI_Acute_viral_hepatitis_B_GG 
--	,@ft_HEI_AFP_Acute_poliomyelitis_GG 
--	,@ft_HEI_Anthrax_GG 
--	,@ft_HEI_Botulism_GG 
--	,@ft_HEI_Brucellosis_GG 
--	,@ft_HEI_CRS_GG 
--	,@ft_HEI_Congenital_Syphilis_GG 
--	,@ft_HEI_CCHF_GG 
--	,@ft_HEI_Diphtheria_GG 
--	,@ft_HEI_Gonococcal_Infection_GG 
--	,@ft_HEI_Bacterial_Meningitis_GG 
--	,@ft_HEI_HFRS_GG 
--	,@ft_HEI_Influenza_Virus_GG 
--	,@ft_HEI_Measles_GG 
--	,@ft_HEI_Mumps_GG 
--	,@ft_HEI_Pertussis_GG 
--	,@ft_HEI_Plague_GG 
--	,@ft_HEI_Post_vaccination_unusual_reactions_AND_complications_GG 
--	,@ft_HEI_Rabies_GG 
--	,@ft_HEI_Rubella_GG 
--	,@ft_HEI_Smallpox_GG 
--	,@ft_HEI_Syphilis_GG 
--	,@ft_HEI_Tetanus_GG 
--	,@ft_HEI_TBE_GG 
--	,@ft_HEI_Tularemia_GG 
--	,@ft_UNI_HEI_GG 
--	,@ft_HEI_Leptospirosis_GG  as ft_HEI_Leptospirosis_GG
--	,@ft_HEI_Pneumonae_GG as ft_HEI_Pneumonae_GG
--	,@ft_HEI_Acute_Viral_Hepatitis_A_GG as ft_HEI_Acute_Viral_Hepatitis_A_GG
	

---- Diagnosis groups
  
--DG_MotherTtetanusToxoidHistoryPriorToChildDisease
SELECT @DG_MotherTtetanusToxoidHistoryPriorToChildDisease = dg.idfsReportDiagnosisGroup
FROM dbo.trtReportDiagnosisGroup dg
WHERE dg.intRowStatus = 0 AND
   dg.strDiagnosisGroupAlias = 'DG_MotherTtetanusToxoidHistoryPriorToChildDisease'      
    

      
      
 
 INSERT INTO @ReportTable (
 	strName,
	LegacyCaseID,
	intRow,
 	strAge,
 	strGender,
 	strAddress,
 	strPlaceOfStudyWork,
 	datDiseaseOnsetDate,
 	datDateOfFirstPresentation,
 	strFacilityThatSentNotification,
 	strProvisionalDiagnosis,
 	datDateProvisionalDiagnosis,
 	datDateSpecificTreatment,
 	datDateSpecimenTaken,
 	strResultAndDate,
 	strVaccinationStatus,
 	datDateCaseInvestigation,
 	strFinalDS,
 	strFinalClassification,
 	datDateFinalDS,
 	strOutcome,
 	strCaseStatus,
 	strComments,
 	strCaseID
 ) 
 SELECT
   dbo.FN_GBL_ConcatFullName(h.strLastName, h.strFirstName, h.strSecondName) AS strName,
   hc.LegacyCaseID,
   ROW_NUMBER() OVER (PARTITION BY hc.LegacyCaseID ORDER BY hc.idfHumanCase),
   CAST(hc.intPatientAge AS VARCHAR(10)) + N' (' + ref_AgeType.[name] + N')' +
     CASE WHEN	(ISNULL(hc.intPatientAge, 100) < 15 AND ISNULL(hc.idfsHumanAgeType, 10042003) = 10042003 /*years*/)
 				or (ISNULL(hc.idfsHumanAgeType, 10042003) <> 10042003 /*years*/)
          THEN ISNULL(N', ' + CONVERT(VARCHAR(10), h.datDateofBirth , 104), N'')
          ELSE N'' 
     END AS strAge,
   ref_hg.[name] AS strGender,
   ISNULL(@CurrentResidence, N'') + 
 		report.FN_REP_CreateAddressString
 				(	gl_cr.Country,
 					gl_cr.Region,
 					gl_cr.Rayon,
 					gl_cr.PostalCode,
 					gl_cr.SettlementType,
 					gl_cr.Settlement,
 					gl_cr.Street,
 					gl_cr.House,
 					gl_cr.Building,
 					gl_cr.Appartment,
 					gl_cr.blnForeignAddress,
 					gl_cr.strForeignAddress
 				) +
     CASE WHEN report.FN_REP_CreateAddressString
 				(	gl_cr.Country,
 					gl_cr.Region,
 					gl_cr.Rayon,
 					gl_cr.PostalCode,
 					gl_cr.SettlementType,
 					gl_cr.Settlement,
 					gl_cr.Street,
 					gl_cr.House,
 					gl_cr.Building,
 					gl_cr.Appartment,
 					gl_cr.blnForeignAddress,
 					gl_cr.strForeignAddress
 				) <> 
 			report.FN_REP_CreateAddressString
 				(	gl_r.Country,
 					gl_r.Region,
 					gl_r.Rayon,
 					gl_r.PostalCode,
 					gl_r.SettlementType,
 					gl_r.Settlement,
 					gl_r.Street,
 					gl_r.House,
 					gl_r.Building,
 					gl_r.Appartment,
 					gl_r.blnForeignAddress,
 					gl_r.strForeignAddress
 				)
 				AND ISNULL(gl_r.Region, N'') <> N''
          THEN '; ' +  ISNULL(@PermanentResidence, N'') + 
 				report.FN_REP_CreateAddressString
 						(	gl_r.Country,
 							gl_r.Region,
 							gl_r.Rayon,
 							gl_r.PostalCode,
 							gl_r.SettlementType,
 							gl_r.Settlement,
 							gl_r.Street,
 							gl_r.House,
 							gl_r.Building,
 							gl_r.Appartment,
 							gl_r.blnForeignAddress,
 							gl_r.strForeignAddress
 						)
 		ELSE N''
     END AS strAddress,
   ISNULL(CASE WHEN h.strEmployerName = '' THEN NULL ELSE h.strEmployerName END + '; ', N'') + 
     CASE WHEN ISNULL(gl_em.Region, N'') <> N''
          THEN 		ISNULL(report.FN_REP_CreateAddressString
 					(	gl_em.Country,
 						gl_em.Region,
 						gl_em.Rayon,
 						gl_em.PostalCode,
 						gl_em.SettlementType,
 						gl_em.Settlement,
 						gl_em.Street,
 						gl_em.House,
 						gl_em.Building,
 						gl_em.Appartment,
 						gl_em.blnForeignAddress,
 						gl_em.strForeignAddress
 					), '')
 		ELSE N''
 	END AS   strPlaceOfStudyWork,
   hc.datOnSetDate AS datDiseaseOnsetDate,
   hc.datFirstSoughtCareDate AS datDateOfFirstPresentation,
   ISNULL(fi.name, '') + 
 	ISNULL(', ' + tp.strFamilyName, '') + ISNULL(' ' + tp.strFirstName, '') + ISNULL(' ' + tp.strSecondName, '') + 
     ISNULL(', ' + CONVERT(VARCHAR(10),hc.datNotificationDate, 104),'') AS strFacilityThatSentNotification,
   ref_diag.[name] AS strProvisionalDiagnosis,
   hc.datTentativeDiagnosisDate AS datDateProvisionalDiagnosis,
   CASE WHEN hc.idfsYNAntimicrobialTherapy = 10100001 THEN
         (SELECT TOP 1 a.datFirstAdministeredDate 
           FROM tlbAntimicrobialTherapy a
           WHERE a.idfHumanCase = hc.idfHumanCase 
 				AND a.intRowStatus = 0
           ORDER BY 1 ASC)
      ELSE NULL END AS datDateSpecificTreatment,
 	CAST((SELECT 	
   	          ref_st_collected.[name] +
   	          ISNULL(', ' + CONVERT(VARCHAR, m_collected.datFieldCollectionDate, 103), '') + '; '
 			FROM tlbMaterial m_collected
 			INNER JOIN	dbo.FN_GBL_ReferenceRepair(@LangID, 19000087 /*rftSpecimenType*/) ref_st_collected
   						ON ref_st_collected.idfsReference = m_collected.idfsSampleType
 			WHERE m_collected.idfHuman = h.idfHuman
 				AND m_collected.idfHumanCase = hc.idfHumanCase
 				AND m_collected.blnShowInLabList = 1
 					AND m_collected.intRowStatus = 0
 					
 			ORDER BY	m_collected.datFieldCollectionDate 	                
   	        FOR XML PATH('')		
     ) AS NVARCHAR(MAX))  AS datDateSpecimenTaken,
 	CAST((SELECT 	
   	          ref_st.[name] +
   	          ISNULL(', ' + ref_tt.[name], '') +
   	          ISNULL(', ' + ref_tr.[name], '') +
   	          ISNULL(', ' + CONVERT(VARCHAR, b.datValidatedDate, 103), '') + '; '
   	        FROM	(
 				tlbTesting t
   	            INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000097 /*rftTestName*/)  AS ref_tt
   	            ON ref_tt.idfsReference = t.idfsTestName
 					)
 			INNER JOIN	(
 				tlbMaterial m
   	                INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000087 /*rftSpecimenType*/) ref_st
   	                ON ref_st.idfsReference = m.idfsSampleType
 						)
   	            ON m.idfMaterial = t.idfMaterial AND
   	               m.intRowStatus = 0
   	            LEFT OUTER JOIN tlbBatchTest b
   	            ON t.idfBatchTest = b.idfBatchTest
 					AND b.intRowStatus = 0
   	            
   	            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000096 /*rftTestResult*/)  AS ref_tr
   	            ON ref_tr.idfsReference = t.idfsTestResult
   	         WHERE t.intRowStatus = 0 AND
   	                m.idfHuman = h.idfHuman
   	        ORDER BY	b.datValidatedDate
   	        FOR XML PATH('')		
     ) AS NVARCHAR(MAX))  AS strResultANDDate,
   --------------------------------------------------------------------------------------------------------------------
   CASE 
 --------------------
     /*Number of immunizations received + Date of last vaccination*/ 
     WHEN obs.idfsFormTemplate in (@ft_HEI_Acute_viral_hepatitis_B_GG) 
         THEN ISNULL(ref_ap1.name + ', ','') + CONVERT(VARCHAR(10), CAST(ap18.varValue AS DATETIME), 103) 
 --------------------    
     /*Are patient is immunization records available*/    
     WHEN obs.idfsFormTemplate in (@ft_HEI_AFP_Acute_poliomyelitis_GG) 
         /*
			Show the following string "{1} [- {2} - {3}; ][[{4}: {5} - {6}; ]]{7}", 
			WHERE {1} is the value of the parameter with tooltip "Are patient's immunization records available";
			{2} is the tooltip of the first not blank parameter with a value different 
				from "Unknown", which is taken from the following list 
				in specified order: "OPV-5", "OPV-4", "OPV-3", "OPV-2", and "OPV-1";
			{3} is the value of the parameter SELECTed for {2};
			{4} is the name of the section with full 
				path “Immunization history>Additional OPV doses received during mass campaigns”;
			{5} is the tooltip of the first not blank parameter with a value different 
				from "Unknown", which is taken from the following list in specified order: 
				"Third additional OPV dose", "Second additional OPV dose", "First additional OPV dose";
			{6} is the value of the parameter SELECTed for {5};
			{7} is the value of the parameter with tooltip "Date of last OPV dose received";
			and the parts [...] and [[...]] are optional and depend on the following conditions:
			- the part [...] shall be displayed if {1} is equal to "Yes"
			- the part [[...]] shall be displayed if {6} is not blank;
			the square brackets that indicate the beginning and end of the optional parts 
			shall not be displayed in the report
		*/
         THEN 
             /*{1} -*/
              ISNULL(ref_ap2.name + '- ', '')
             /*{2} - {3};*/  
              +
              CASE WHEN ref_ap2.idfsReference = 10100001 /*yes*/
                   THEN 
                     CASE WHEN ref_ap26.name IS NOT NULL AND ref_ap26.idfsReference <> 995360000000 /*Unknown*/ 
                          THEN (SELECT [name] 
                                 FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000066/*rftParameter*/) 
                                 WHERE idfsReference = @OPV5field -- /*"OPV-5" field*/
                                ) + '-' + ref_ap26.name + '; '
                          ELSE
                          CASE WHEN ref_ap25.name IS NOT NULL AND ref_ap25.idfsReference <> 995360000000 /*Unknown*/ 
                              THEN (SELECT [name] 
                                     FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000066/*rftParameter*/) 
                                     WHERE idfsReference = @OPV4field -- /*"OPV-4" field*/
                                    ) + '-' + ref_ap25.name + '; '
                              ELSE
                              CASE WHEN ref_ap24.name IS NOT NULL AND ref_ap24.idfsReference <> 995360000000 /*Unknown*/ 
                                  THEN (SELECT [name] 
                                         FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000066/*rftParameter*/) 
                                         WHERE idfsReference = @OPV3field -- /*"OPV-3" field*/
                                        ) + '-' + ref_ap24.name + '; '
                                  ELSE
                                  CASE WHEN ref_ap23.name IS NOT NULL AND ref_ap23.idfsReference <> 995360000000 /*Unknown*/ 
                                      THEN (SELECT [name] 
                                             FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000066/*rftParameter*/) 
                                             WHERE idfsReference = @OPV2field -- /*"OPV-2" field*/
                                            ) + '-' + ref_ap23.name + '; '
                                      ELSE
                                      CASE WHEN ref_ap22.name IS NOT NULL AND ref_ap22.idfsReference <> 995360000000 /*Unknown*/ 
                                          THEN (SELECT [name] 
                                                 FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000066/*rftParameter*/) 
                                                 WHERE idfsReference = @OPV1field -- /*"OPV-1" field*/
                                                ) + '-' + ref_ap22.name + '; '
                                          ELSE ''
                                      END /*OPV-1*/                                      
                                  END /*OPV-2*/                              
                              END /*OPV-3*/                              
                          END /*OPV-4*/   
                      END /*OPV-5*/          
                   ELSE ''
              END --CASE WHEN ref_ap2.idfsReference = 10100001 /*yes*/    
             /* {4} : */  
              +
              CASE WHEN ref_ap29.name /*"Third" field*/ IS NOT NULL OR 
                        ref_ap28.name /*"Second" field*/ IS NOT NULL OR
                        ref_ap27.name /*"First" field*/ IS NOT NULL
                   THEN (SELECT snt.strTextString FROM trtStringNameTranslation snt
                            WHERE snt.idfsBaseReference = @Section_AdditionalOPVdoses /*section name - Additional OPV doses received during mass campaigns*/
                                   AND snt.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LangID) 
                                   AND snt.intRowStatus = 0                
                         ) + ':' +
                             /*{5} - {6}; */  
                             CASE WHEN ref_ap29.name IS NOT NULL AND ref_ap29.idfsReference <> 995360000000 /*Unknown*/ 
                                  THEN (SELECT [name] 
                                         FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000066/*rftParameter*/) 
                                         WHERE idfsReference = @Thirdfield -- /*"Third" field*/
                                        ) + '-' + ref_ap29.name
                                  ELSE
                                  CASE WHEN ref_ap28.name IS NOT NULL AND ref_ap28.idfsReference <> 995360000000 /*Unknown*/ 
                                      THEN (SELECT [name] 
                                             FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000066/*rftParameter*/) 
                                             WHERE idfsReference = @Secondfield -- /*"Second" field*/
                                            ) + '-' + ref_ap28.name
                                      ELSE
                                      CASE WHEN ref_ap27.name IS NOT NULL AND ref_ap27.idfsReference <> 995360000000 /*Unknown*/ 
                                          THEN (SELECT [name] 
                                                 FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000066/*rftParameter*/) 
                                                 WHERE idfsReference = @Firstfield -- /*"First" field*/
                                                ) + '-' + ref_ap27.name
                                          ELSE ''
                                      END /*First*/               
                                  END /*Second*/
                              END /*Third*/  
                              /*7)*/
                              + '; '                       
                   ELSE ''
              END  
             /* {7} */  
              +    
             CONVERT(VARCHAR(10), CAST(ap30.varValue AS DATETIME), 103) 
 
 --------------------    
     /*Was specific vaccination administered? + Date of last vaccination*/
     WHEN  obs.idfsFormTemplate IN  (
     									@ft_HEI_Anthrax_GG,
     									@ft_HEI_Botulism_GG,
     									@ft_HEI_Brucellosis_GG,
     									@ft_HEI_Congenital_Syphilis_GG,
     									@ft_HEI_CCHF_GG,    
     									@ft_HEI_Gonococcal_Infection_GG, 
     									@ft_HEI_HFRS_GG,
     									@ft_HEI_Plague_GG ,
     									@ft_HEI_Smallpox_GG,
     									@ft_HEI_Syphilis_GG,
     									@ft_HEI_TBE_GG,
     									@ft_HEI_Tularemia_GG   
     
									)
         THEN ISNULL(ref_ap3.name + ', ','') + CONVERT(VARCHAR(10), CAST(ap18_2.varValue AS DATETIME), 103) 
 --------------------    
     /*Vaccinated against rubella
		 name of section "Maternal history" then ":" then name of "Vaccinated against rubella" 
		 then "-" and value in "Vaccinated against rubella".*/    
     WHEN obs.idfsFormTemplate IN  (
     									@ft_HEI_CRS_GG         
									)
         THEN (SELECT snt.strTextString FROM trtStringNameTranslation snt
                 WHERE snt.idfsBaseReference = @Section_Maternalhistory /*name of section "Maternal history"*/
                       AND snt.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LangID) 
                       AND snt.intRowStatus = 0                
               ) + ':' + 
               (SELECT [name] 
                 FROM dbo.FN_GBL_ReferenceRepair(@LangID, 19000066/*rftParameter*/) 
                 WHERE idfsReference = @VaccinatedAgainstRubella
                ) + '-' +  ref_ap4.name
 --------------------    
     /* Number of received doses (any vaccine with diphtheria component) + Date of last vaccination
        1) value in "Number of received doses (any vaccine with diphtheria component)"; 
        2) if value in 1) is not blank then "," otherwise nothing; 
        3) value in "Immunization history: Date of last vaccination". 
     */    
     WHEN obs.idfsFormTemplate IN  (
     									@ft_HEI_Diphtheria_GG         
									)
         
         THEN ISNULL(ref_ap5.name + ', ','') + CONVERT(VARCHAR(10), CAST(ap18.varValue AS DATETIME), 103) 
 --------------------    
     /*Hib vaccination status + If "Yes", number of vaccines received + Date of last vaccination
      1) value in "Hib vaccination status"; 
      2) if value in 1) is not blank then "," otherwise nothing;
      3) value in "Number of Hib vaccines received"; 
      4) if value in 3) is not blank then "," otherwise nothing; 
      5) value in "Immunization history: Date of last vaccination".
     */    
     WHEN obs.idfsFormTemplate IN  (
     									@ft_HEI_Bacterial_Meningitis_GG         
									)
         THEN ISNULL(ref_ap8.name + ', ','') + 
              ISNULL(ref_ap20.name + ', ','') + 
              CONVERT(VARCHAR(10), CAST(ap18.varValue AS DATETIME), 103) 
 --------------------    
     /*Number of received doses (any vaccine with measles component) + Date of last vaccination
     1) value in "Number of received doses (any vaccine with measles component)"; 
     2) if value in 1) is not blank then "," otherwise nothing; 
     3) value in "Immunization history: Date of last vaccination".
     */    
     WHEN obs.idfsFormTemplate IN  (
     									@ft_HEI_Measles_GG         
									)
         THEN ISNULL(ref_ap7.name + ', ','') + CONVERT(VARCHAR(10), CAST(ap18.varValue AS DATETIME), 103) 
--------------------    
     /*Number of received doses (any vaccine with mumps component) + Date of last vaccination
     1) value in "Number of received doses (any vaccine with mumps component)"; 
     2) if value in 1) is not blank then "," otherwise nothing; 
     3) value in "Immunization history: Date of last vaccination".
     */    
     WHEN obs.idfsFormTemplate IN  (
     									@ft_HEI_Mumps_GG         
									)
         THEN ISNULL(ref_ap9.name+ ', ','') + CONVERT(VARCHAR(10), CAST(ap18.varValue AS DATETIME), 103)  
--------------------    
     /*Number of received doses (any vaccine with pertussis component) + Date of last vaccination
     1) value in "Number of received doses (any vaccine with pertussis component)";
     2) if value in 1) is not blank then "," otherwise nothing; 
     3) value in "Immunization history: Date of last vaccination".
     */    
     WHEN  obs.idfsFormTemplate IN  (
     									@ft_HEI_Pertussis_GG         
									)
         THEN ISNULL(ref_ap11.name+ ', ','') + CONVERT(VARCHAR(10), CAST(ap18.varValue AS DATETIME), 103)
 --------------------    
     /*Vaccine type that caused post vaccination complications: Name of vaccine
     Show all distinct values from the column of the table section, 
     which is linked to the parameter tooltip "Vaccine type that caused post vaccination complications: Name of vaccine", 
     combined in the string of the following format: "{1};{2};{3}", WHERE {n} is a unique value from the specified column.
     */    
     WHEN obs.idfsFormTemplate IN  (
     									@ft_HEI_Post_vaccination_unusual_reactions_and_complications_GG         
									)
         THEN 
			cast(	(	SELECT distinct
							ISNULL(ref_ap34.name + '; ', '') 
     	 				FROM	tlbObservation obs34
							 INNER JOIN tlbActivityParameters ap34
							 ON ap34.idfObservation = obs34.idfObservation AND
								ap34.idfsParameter = @NameVaccine /* Vaccine type that caused post vaccination complications: Name of vaccine*/ AND 
								ap34.intRowStatus = 0   
				 
							 LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_VaccineTypes /*Vaccine types*/)  ref_ap34
							 ON ref_ap34.idfsReference = ap34.varValue
			     	 	WHERE	obs34.idfObservation = hc.idfEpiObservation AND
								obs34.intRowStatus = 0  
					FOR	XML PATH('')
					) AS NVARCHAR(MAX)
				)         	
 --------------------    
	-- UPDATED
     /*Show combination of following: 
     *	1) value in "Rabies vaccine given?"; 
     *	2) if value in 1) is not blank then ";" otherwise nothing; 
     *	3) value from "Rabies vaccine dose" field that corresponds the latest value in "Rabies vaccination date" field of table 
     *	section "Rabies Immunization Details" followed by ","; 
     *	4) respective value in "Rabies vaccination date" field.
     */    
     WHEN obs.idfsFormTemplate IN  (
     									@ft_HEI_Rabies_GG         
									)
         THEN ISNULL(ref_ap6.name+ '; ','') + ISNULL(RabiesVacination.RabiesVaccinationDate + ', ', '') + ISNULL(RabiesVacination.RabiesVaccineDose, '')
---------------------   
     /*Number of received doses (any vaccine with rubella component) + Date of last vaccination
     1) value in "Number of received doses (any vaccine with rubella component)"; 
     2) if value in 1) is not blank then "," otherwise nothing; 
     3) value in "Immunization history: Date of last vaccination".
     */    
     WHEN obs.idfsFormTemplate IN  (
     									@ft_HEI_Rubella_GG         
									)
         THEN ISNULL(ref_ap12.name+ ', ','')  + CONVERT(VARCHAR(10), CAST(ap18.varValue AS DATETIME), 103)       
                 
 --------------------    
     /*Mother's tetanus toxoid history prior to child's disease (known doses only) + Interval since last tetanus toxoid dose (years)
     For cases, WHERE "Final Diagnosis" = "Neonatal Tetanus": show combination of following: 
     1) value in "Mother's tetanus toxoid history prior to child's disease (known doses only)"; 
     2) if value in 1) is not blank then ";" otherwise nothing; 
     3) value in "Interval since last tetanus toxoid dose (years) (mother's)"
     */    
     when	obs.idfsFormTemplate in		(
     										@ft_HEI_Tetanus_GG         
										) 
			AND				
			COALESCE(hc.idfsFinalDiagnosis, hc.idfsTentativeDiagnosis) IN
			(SELECT idfsDiagnosis 
				FROM dbo.trtDiagnosisToGroupForReportType 
				WHERE idfsCustomReportType = @idfsCustomReportType
				AND idfsReportDiagnosisGroup = @DG_MotherTtetanusToxoidHistoryPriorToChildDisease --"Final Diagnosis" = "Neonatal Tetanus"
			)
         THEN ISNULL(ref_ap10.name + '; ', '') + CAST(ap21.varValue AS NVARCHAR(300))
 --------------------    
     /*Include doses of ALL tetanus-containing toxoids. Exclude doses received after this particular injury + 
      Interval since last tetanus toxoid dose (years)
     For cases, WHERE "Final Diagnosis" does not equal to "Neonatal Tetanus": show combination of following: 
     1) value in "Include doses of ALL tetanus-containing toxoids. Exclude doses received after this particular injury"; 
     2) if value in 1) is not blank then "," otherwise nothing 
     3) value in "Interval since last tetanus toxoid dose (years)".
     */    
     WHEN obs.idfsFormTemplate in		(
     										@ft_HEI_Tetanus_GG         
										) 
			AND				
			COALESCE(hc.idfsFinalDiagnosis, hc.idfsTentativeDiagnosis) not IN
			(SELECT idfsDiagnosis 
				FROM dbo.trtDiagnosisToGroupForReportType 
				WHERE idfsCustomReportType = @idfsCustomReportType
				AND idfsReportDiagnosisGroup = @DG_MotherTtetanusToxoidHistoryPriorToChildDisease --"Final Diagnosis" = "Neonatal Tetanus"
			)
         THEN ISNULL(ref_ap13.name  + '; ','') + CAST(ap21.varValue AS NVARCHAR(300))
         
 --------------------    
     /*Revaccination + Date of revaccination
     1)  if the value in "Revaccination" is "Yes" show the combination of the following:
     a) the value in "Revaccination"
     b) if the value in 1a) is not blank then "," otherwise nothing
     c) the value in "Date of revaccination" 
     */    
     WHEN  obs.idfsFormTemplate in		(
     										@ft_UNI_HEI_GG         
										)
         AND ref_ap15.idfsReference = 10100001
         THEN ISNULL(ref_ap15.name + ', ','') + CONVERT(VARCHAR(10), CAST(ap17.varValue AS DATETIME), 103)
 
 --------------------    
     /*Was vaccination administered? + Date of vaccination
     if the value in "Revaccination" is empty, or equals to "No", or "Unknown" show the combination of the following:
     a) the value in "Was vaccination administered?"
     b) if the value in 2a) is not blank then "," otherwise nothing
     c) the value in "Date of vaccination"
     */    
     WHEN obs.idfsFormTemplate in		(
     										@ft_UNI_HEI_GG         
										)
         AND ref_ap15.idfsReference <> 10100001
         THEN ISNULL(ref_ap14.name + ', ','') + CONVERT(VARCHAR(10), CAST(ap16.varValue AS DATETIME), 103)        
         
  
 
  --------------------    
  --NEW!!!
     /*Show combination of following: 
     *			1) value in "Is patient vaccinated against leptospirosis?"; 
     *			2) if value in 1) is not blank then "," otherwise nothing; 
     *			3) value in "Date of vaccination of patient against leptospirosis".
     */    
     WHEN obs.idfsFormTemplate IN		(
     										@ft_HEI_Leptospirosis_GG         
										)
         THEN ISNULL(ref_ap31.name,'') + CASE WHEN ref_ap31.name IS NOT NULL AND ap32.varValue IS NOT NULL THEN ',' ELSE '' END +   ISNULL( CONVERT(VARCHAR(10),CAST(ap32.varValue AS DATETIME), 103), '')      
         
  
 
  --------------------      
  --NEW!!!
     /*Show combination of following: 
     * 1) value in "HEI S. pneumonae caused infection GG: S. pneumonae vaccination status"; 
     * 2) if value in 1) is not blank then "," otherwise nothing; 
     * 3) value in "HEI S. pneumonae caused infection GG: Number of received doses of S. pneumonae vaccine"; 
     * 4) if value in 3) is not blank then "," otherwise nothing; 
     * 5) value in "HEI S. pneumonae caused infection GG: Date of last vaccination".
     */    
     WHEN obs.idfsFormTemplate in		(
     										@ft_HEI_Pneumonae_GG         
										)
         THEN ISNULL(ref_ap37.name, '') + ISNULL(', ' + ref_ap38.name, '') + ISNULL( ', ' + CONVERT(VARCHAR(10),CAST(ap39.varValue AS DATETIME), 103), '')      

  --------------------    
  --NEW!!!
     /*Show combination of following: 
     * 1) value in "HEI Acute Viral Hepatitis A GG: Number of received doses of Hepatitis A vaccine"; 
     * 2) if value in 1) is not blank then "," otherwise nothing; 
     * 3) value in "HEI Acute Viral Hepatitis A GG: Date of last vaccination".
     */    
     WHEN obs.idfsFormTemplate in		(
     										@ft_HEI_Acute_Viral_Hepatitis_A_GG         
										)
         THEN ISNULL(ref_ap40.name,'') + CASE WHEN ref_ap40.name IS NOT NULL AND ap41.varValue IS NOT NULL THEN ',' ELSE '' END +   ISNULL( CONVERT(VARCHAR(10),CAST(ap41.varValue AS DATETIME), 103), '')      
         

  --------------------      
  
  
     ELSE NULL
   END AS strVaccinationStatus,
  
 ----------------------------------------------------------------------------------------------
   hc.datInvestigationStartDate AS datDateCaseInvestigation,
   ISNULL(ref_diag_f.[name], ref_diag.[name]) AS strFinalDS,
   ISNULL(ref_final_cs.[name], ref_init_cs.[name]) AS strFinalClassification,
   CASE WHEN hc.datFinalDiagnosisDate IS NULL AND ref_diag_f.idfsReference IS NULL 
         THEN hc.datTentativeDiagnosisDate
         ELSE hc.datFinalDiagnosisDate 
        END AS datDateFinalDS,
   ref_outcome.[name] +  CASE WHEN hc.idfsOutcome = 10760000000 /*outRecovered*/ 
                                 THEN ISNULL(', ' + CONVERT(VARCHAR(10),hc.datDischargeDate, 104), '')
                              WHEN hc.idfsOutcome = 10770000000 /*outDied*/ 
                                 THEN ISNULL(', ' + CONVERT(VARCHAR(10),h.datDateOfDeath, 104), '')
                              ELSE ''
                          END AS strOutcome      ,
   ISNULL(@OutbreakID, N'') + o.strOutbreakID  AS  strCaseStatus,
 	ISNULL(CASE WHEN hc.strNote = '' THEN NULL ELSE hc.strNote END + N'; ', N'') + 
 		ISNULL(CASE WHEN hc.strClinicalNotes = '' THEN NULL ELSE hc.strClinicalNotes END + N'; ', N'') + 
 		ISNULL(CASE WHEN hc.strSummaryNotes = '' THEN NULL ELSE hc.strSummaryNotes END + N';', N'') AS strComments,
 ----------------------------------------------------------------------------------------------
          
   hc.strCaseID
   
 FROM tlbHumanCase hc
		INNER JOIN 
		(tlbHuman h
		   LEFT OUTER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000043/*rftHumanGender*/) ref_hg
		   ON ref_hg.idfsReference = h.idfsHumanGender
		    
		   LEFT JOIN		report.FN_GBL_AdressAsRow(@LangID) gl_cr
					on			gl_cr.idfGeoLocation = h.idfCurrentResidenceAddress
		    
		   LEFT JOIN		report.FN_GBL_AdressAsRow(@LangID) gl_r
					on			gl_r.idfGeoLocation = h.idfRegistrationAddress
		    
		   LEFT JOIN		report.FN_GBL_AdressAsRow(@LangID) gl_em
					on			gl_em.idfGeoLocation = h.idfEmployerAddress
		)
		ON hc.idfHuman = h.idfHuman AND
		  h.intRowStatus = 0
             
             
         LEFT OUTER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000042/*rftHumanAgeType*/) ref_AgeType
         ON ref_AgeType.idfsReference = hc.idfsHumanAgeType
         
         INNER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019/*rftDiagnosis*/) ref_diag
         ON ref_diag.idfsReference = hc.idfsTentativeDiagnosis
         
         LEFT OUTER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019/*rftDiagnosis*/) ref_diag_f
         ON ref_diag_f.idfsReference = hc.idfsFinalDiagnosis
         
         LEFT OUTER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000011/*rftCaseStatus*/) ref_final_cs
         ON ref_final_cs.idfsReference = hc.idfsFinalCaseStatus
         
         LEFT OUTER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000011/*rftCaseStatus*/) ref_init_cs
         ON ref_init_cs.idfsReference = hc.idfsInitialCaseStatus
 
         LEFT OUTER JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000064 /*rftOutcome*/) ref_outcome
         ON ref_outcome.idfsReference = hc.idfsOutcome
         
         LEFT OUTER JOIN tlbObservation obs
         ON obs.idfObservation = hc.idfEpiObservation AND
            obs.intRowStatus = 0
                     
         LEFT OUTER JOIN 
         (tlbObservation obs1
             INNER JOIN tlbActivityParameters ap1
             ON ap1.idfObservation = obs1.idfObservation AND
                ap1.idfsParameter = @NumberOfImmunizationsReceived --  /*Number of immunizations received*/ 
                AND ap1.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization5 /*Immunization 5+*/)  ref_ap1
             ON ref_ap1.idfsReference = ap1.varValue 
         )
         ON obs1.idfObservation = hc.idfEpiObservation AND
            obs1.intRowStatus = 0
            
         LEFT OUTER JOIN 
         (tlbObservation obs2
             INNER JOIN tlbActivityParameters ap2
             ON ap2.idfObservation = obs2.idfObservation AND
                ap2.idfsParameter =  @ArePatientsImmunizationRecordsAvailable/* Are patient�s immunization records available*/ AND 
                ap2.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Y_N_Unk /*Y_N_Unk*/)  ref_ap2
             ON ref_ap2.idfsReference = ap2.varValue 
         )
         ON obs2.idfObservation = hc.idfEpiObservation AND
            obs2.intRowStatus = 0
      
         LEFT OUTER JOIN 
         (tlbObservation obs3
             INNER JOIN tlbActivityParameters ap3
             ON ap3.idfObservation = obs3.idfObservation AND
                ap3.idfsParameter =  @WasSpecificVaccinationAdministered/* Was specific vaccination administered?*/ AND 
                ap3.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Y_N_Unk /*Y_N_Unk*/)  ref_ap3
             ON ref_ap3.idfsReference = ap3.varValue 
         )
         ON obs3.idfObservation = hc.idfEpiObservation AND
            obs3.intRowStatus = 0  
               
         LEFT OUTER JOIN 
         (tlbObservation obs4
             INNER JOIN tlbActivityParameters ap4
             ON ap4.idfObservation = obs4.idfObservation AND
                ap4.idfsParameter =  @VaccinatedAgainstRubella/* Vaccinated against rubella*/ AND 
                ap4.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Y_N_Unk /*Y_N_Unk*/)  ref_ap4
             ON ref_ap4.idfsReference = ap4.varValue 
         )
         ON obs4.idfObservation = hc.idfEpiObservation AND
            obs4.intRowStatus = 0     
            
         LEFT OUTER JOIN 
         (tlbObservation obs5
             INNER JOIN tlbActivityParameters ap5
             ON ap5.idfObservation = obs5.idfObservation AND
                ap5.idfsParameter =  @NumberOfReceivedDoses_WithDiphtheriaComponent/* Number of received doses (any vaccine with diphtheria component)*/ AND 
                ap5.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization5 /*Immunization 5+*/)  ref_ap5
             ON ref_ap5.idfsReference = ap5.varValue 
         )
         ON obs5.idfObservation = hc.idfEpiObservation AND
            obs5.intRowStatus = 0             
            
         LEFT OUTER JOIN 
         (tlbObservation obs6
             INNER JOIN tlbActivityParameters ap6
             ON ap6.idfObservation = obs6.idfObservation AND
                ap6.idfsParameter =  @RabiesVaccineGiven/* Rabies vaccine given?*/ AND 
                ap6.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Y_N_Unk /*Y_N_Unk*/)  ref_ap6
             ON ref_ap6.idfsReference = ap6.varValue 
         )
         ON obs6.idfObservation = hc.idfEpiObservation AND
            obs6.intRowStatus = 0             
            
            
         LEFT OUTER JOIN 
         (tlbObservation obs7
             INNER JOIN tlbActivityParameters ap7
             ON ap7.idfObservation = obs7.idfObservation AND
                ap7.idfsParameter =  @NumberOfReceivedDoses_WithMeaslesComponent/* Number of received doses (any vaccine with measles component)*/ AND 
                ap7.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization3 /*Immunization 3+*/)  ref_ap7
             ON ref_ap7.idfsReference = ap7.varValue 
         )
         ON obs7.idfObservation = hc.idfEpiObservation AND
            obs7.intRowStatus = 0             
            
            
         LEFT OUTER JOIN 
         (tlbObservation obs8
             INNER JOIN tlbActivityParameters ap8
             ON ap8.idfObservation = obs8.idfObservation AND
                ap8.idfsParameter =  @HibVaccinationStatus/* Hib vaccination status*/ AND 
                ap8.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Y_N_Unk /*Y_N_Unk*/)  ref_ap8
             ON ref_ap8.idfsReference = ap8.varValue 
         )
         ON obs8.idfObservation = hc.idfEpiObservation AND
            obs8.intRowStatus = 0                 
            
         LEFT OUTER JOIN 
         (tlbObservation obs9
             INNER JOIN tlbActivityParameters ap9
             ON ap9.idfObservation = obs9.idfObservation AND
                ap9.idfsParameter =  @NumberOfReceivedDoses_WithMumpsComponent/* Number of received doses (any vaccine with mumps component)*/ AND 
                ap9.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization3 /*Immunization 3+*/)  ref_ap9
             ON ref_ap9.idfsReference = ap9.varValue 
         )
         ON obs9.idfObservation = hc.idfEpiObservation AND
            obs9.intRowStatus = 0      
                    
         LEFT OUTER JOIN 
         (tlbObservation obs10
             INNER JOIN tlbActivityParameters ap10
             ON ap10.idfObservation = obs10.idfObservation AND
                ap10.idfsParameter =  @MothersTetanusToxoidHistoryPriorToChildsDisease/* Mother's tetanus toxoid history prior to child's disease (known doses only)*/ AND 
                ap10.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization5 /*Immunization 5+*/)  ref_ap10
             ON ref_ap10.idfsReference = ap10.varValue 
         )
         ON obs10.idfObservation = hc.idfEpiObservation AND
            obs10.intRowStatus = 0      
               
         LEFT OUTER JOIN 
         (tlbObservation obs11
             INNER JOIN tlbActivityParameters ap11
             ON ap11.idfObservation = obs11.idfObservation AND
                ap11.idfsParameter =  @NumberOfReceivedDoses_WithPertussisComponent/* Number of received doses (any vaccine with pertussis component)*/ AND 
                ap11.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization5 /*Immunization 5+*/)  ref_ap11
             ON ref_ap11.idfsReference = ap11.varValue 
         )
         ON obs11.idfObservation = hc.idfEpiObservation AND
            obs11.intRowStatus = 0      
                             
         LEFT OUTER JOIN 
         (tlbObservation obs12
             INNER JOIN tlbActivityParameters ap12
             ON ap12.idfObservation = obs12.idfObservation AND
                ap12.idfsParameter =  @NumberOfReceivedDoses_WithRubellaComponent/* Number of received doses (any vaccine with rubella component)*/ AND 
                ap12.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization3 /*Immunization 3+*/)  ref_ap12
             ON ref_ap12.idfsReference = ap12.varValue 
         )
         ON obs12.idfObservation = hc.idfEpiObservation AND
            obs12.intRowStatus = 0      
                
         LEFT OUTER JOIN 
         (tlbObservation obs13
             INNER JOIN tlbActivityParameters ap13
             ON ap13.idfObservation = obs13.idfObservation AND
                ap13.idfsParameter = @IncludeDosesOfALLTetanusContainingToxoids /* Include doses of ALL tetanus-containing toxoids. Exclude doses received after this particular injury*/ AND 
                ap13.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization5 /*Immunization 5+*/)  ref_ap13
             ON ref_ap13.idfsReference = ap13.varValue 
         )
         ON obs13.idfObservation = hc.idfEpiObservation AND
            obs13.intRowStatus = 0                 
                
         LEFT OUTER JOIN 
         (tlbObservation obs14
             INNER JOIN tlbActivityParameters ap14
             ON ap14.idfObservation = obs14.idfObservation AND
                ap14.idfsParameter =  @WasVaccinationAdministered /* Was vaccination administered?*/ AND 
                ap14.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Y_N_Unk /*Y_N_Unk*/)  ref_ap14
             ON ref_ap14.idfsReference = ap14.varValue 
         )
         ON obs14.idfObservation = hc.idfEpiObservation AND
            obs14.intRowStatus = 0                      
                      
         LEFT OUTER JOIN 
         (tlbObservation obs15
             INNER JOIN tlbActivityParameters ap15
             ON ap15.idfObservation = obs15.idfObservation AND
                ap15.idfsParameter = @Revaccination /*Revaccination*/ AND 
                ap15.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Y_N_Unk /*Y_N_Unk*/)  ref_ap15
             ON ref_ap15.idfsReference = ap15.varValue 
         )
         ON obs15.idfObservation = hc.idfEpiObservation AND
            obs15.intRowStatus = 0 
         LEFT OUTER JOIN 
         (tlbObservation obs16
             INNER JOIN tlbActivityParameters ap16
             ON ap16.idfObservation = obs16.idfObservation AND
                ap16.idfsParameter = @DateOfVaccination /* Date of vaccination*/ AND 
                ap16.intRowStatus = 0
         )
         ON obs16.idfObservation = hc.idfEpiObservation AND
            obs16.intRowStatus = 0            
            
                         
         LEFT OUTER JOIN 
         (tlbObservation obs17
             INNER JOIN tlbActivityParameters ap17
             ON ap17.idfObservation = obs17.idfObservation AND
                ap17.idfsParameter = @DateOfRevaccination /* Date of revaccination*/ AND 
                ap17.intRowStatus = 0
         )
         ON obs17.idfObservation = hc.idfEpiObservation AND
            obs17.intRowStatus = 0     
         LEFT OUTER JOIN 
         (tlbObservation obs18
             INNER JOIN tlbActivityParameters ap18
             ON ap18.idfObservation = obs18.idfObservation AND
                ap18.idfsParameter = @ImmunizationHistory_DateOfLastVaccination /* Date of last vaccination*/ AND 
                ap18.intRowStatus = 0
         )
         ON obs18.idfObservation = hc.idfEpiObservation AND
            obs18.intRowStatus = 0   
                      
         LEFT OUTER JOIN 
         (tlbObservation obs18_2
             INNER JOIN tlbActivityParameters ap18_2
             ON ap18_2.idfObservation = obs18_2.idfObservation AND
                ap18_2.idfsParameter =  @SpecificVaccination_DateOfLastVaccination /* Date of last vaccination*/ AND 
                ap18_2.intRowStatus = 0
         )
         ON obs18_2.idfObservation = hc.idfEpiObservation AND
            obs18_2.intRowStatus = 0             
 
         --LEFT OUTER JOIN 
         --(tlbObservation obs19
         --    INNER JOIN tlbActivityParameters ap19
         --    ON ap19.idfObservation = obs19.idfObservation AND
         --       ap19.idfsParameter = @IfYes_IndicateDatesOfDoses /* Dates and doses of rabies vaccine given*/ AND 
         --       ap19.intRowStatus = 0
         --)
         --ON obs19.idfObservation = hc.idfEpiObservation AND
         --   obs19.intRowStatus = 0     
         
         OUTER APPLY(
         		SELECT TOP 1
         					convert(VARCHAR(10),cast(ap35.varValue as DATETIME), 104) as RabiesVaccinationDate,
         					cast(ap36.varValue as NVARCHAR(20)) as RabiesVaccineDose
     	 				FROM	tlbObservation obs35
							 INNER JOIN tlbActivityParameters ap35
							 on ap35.idfObservation = obs35.idfObservation AND
								ap35.idfsParameter = @RabiesVaccinationDate /* Rabies vaccination date*/ AND 
								ap35.intRowStatus = 0   
								AND (cast(SQL_VARIANT_PROPERTY(ap35.varValue, 'BaseType') as NVARCHAR) like N'%date%' or
									(
										cast(SQL_VARIANT_PROPERTY(ap35.varValue, 'BaseType') as NVARCHAR) like N'%char%' AND ISDATE(cast(ap35.varValue as NVARCHAR)) = 1 )	)
							 left  JOIN tlbActivityParameters ap36
							 on ap36.idfObservation = obs35.idfObservation AND
								ap36.idfsParameter = @RabiesVaccineDose /* Rabies vaccination dose*/ AND 
								ap36.intRowStatus = 0   
								AND ap35.idfRow = ap36.idfRow
			     	 	WHERE	obs35.idfObservation = hc.idfEpiObservation AND
								obs35.intRowStatus = 0  
         		ORDER BY cast(ap35.varValue as DATETIME) desc
         ) as RabiesVacination
 
         LEFT OUTER JOIN 
         (tlbObservation obs20
             INNER JOIN tlbActivityParameters ap20
             ON ap20.idfObservation = obs20.idfObservation AND
                ap20.idfsParameter = @IfYes_NumberOfVaccinesReceived /* Number of vaccines received*/ AND 
                ap20.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization5 /*Immunization 5+*/)  ref_ap20
             ON ref_ap20.idfsReference = ap20.varValue 
         )
         ON obs20.idfObservation = hc.idfEpiObservation AND
            obs20.intRowStatus = 0 
 
         LEFT OUTER JOIN 
         (tlbObservation obs21
             INNER JOIN tlbActivityParameters ap21
             ON ap21.idfObservation = obs21.idfObservation AND
                ap21.idfsParameter = @IntervalSinceLastTetanusToxoidDose /* Interval since last tetanus toxoid dose (years)*/ AND 
                ap21.intRowStatus = 0     
         )
         ON obs21.idfObservation = hc.idfEpiObservation AND
            obs21.intRowStatus = 0  
 
         --LEFT OUTER JOIN 
         --(tlbObservation obs21_2
         --    INNER JOIN tlbActivityParameters ap21_2
         --    ON ap21_2.idfObservation = obs21_2.idfObservation AND
         --       ap21_2.idfsParameter = @IntervalSinceLastTetanusToxoidDose1 /* Interval since last tetanus toxoid dose (years)*/ AND 
         --       ap21_2.intRowStatus = 0     
         --)
         --ON obs21_2.idfObservation = hc.idfEpiObservation AND
         --   obs21_2.intRowStatus = 0  
 
         LEFT OUTER JOIN 
         (tlbObservation obs22
             INNER JOIN tlbActivityParameters ap22
             ON ap22.idfObservation = obs22.idfObservation AND
                ap22.idfsParameter = @OPV1field   /* OPV-1*/ 
                AND ap22.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_OPVDoses /*OPV Doses*/)  ref_ap22
             ON ref_ap22.idfsReference = ap22.varValue 
         )
         ON obs22.idfObservation = hc.idfEpiObservation AND
            obs22.intRowStatus = 0 
 
         LEFT OUTER JOIN 
         (tlbObservation obs23
             INNER JOIN tlbActivityParameters ap23
             ON ap23.idfObservation = obs23.idfObservation AND
                ap23.idfsParameter = @OPV2field  /* OPV-2*/ 
                AND ap23.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_OPVDoses /*OPV Doses*/)  ref_ap23
             ON ref_ap23.idfsReference = ap23.varValue 
         )
         ON obs23.idfObservation = hc.idfEpiObservation AND
            obs23.intRowStatus = 0
 
         LEFT OUTER JOIN 
         (tlbObservation obs24
             INNER JOIN tlbActivityParameters ap24
             ON ap24.idfObservation = obs24.idfObservation AND
                ap24.idfsParameter = @OPV3field  /* OPV-3*/ 
                AND ap24.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_OPVDoses /*OPV Doses*/)  ref_ap24
             ON ref_ap24.idfsReference = ap24.varValue 
         )
         ON obs24.idfObservation = hc.idfEpiObservation AND
            obs24.intRowStatus = 0
 
         LEFT OUTER JOIN 
         (tlbObservation obs25
             INNER JOIN tlbActivityParameters ap25
             ON ap25.idfObservation = obs25.idfObservation AND
                ap25.idfsParameter = @OPV4field  /* OPV-4*/  
                AND ap25.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_OPVDoses /*OPV Doses*/)  ref_ap25
             ON ref_ap25.idfsReference = ap25.varValue 
         )
         ON obs25.idfObservation = hc.idfEpiObservation AND
            obs25.intRowStatus = 0
 
         LEFT OUTER JOIN 
         (tlbObservation obs26
             INNER JOIN tlbActivityParameters ap26
             ON ap26.idfObservation = obs26.idfObservation AND
                ap26.idfsParameter = @OPV5field  /* OPV-5*/  
                AND ap26.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_OPVDoses /*OPV Doses*/)  ref_ap26
             ON ref_ap26.idfsReference = ap26.varValue 
         )
         ON obs26.idfObservation = hc.idfEpiObservation AND
            obs26.intRowStatus = 0
 
         LEFT OUTER JOIN 
         (tlbObservation obs27
             INNER JOIN tlbActivityParameters ap27
             ON ap27.idfObservation = obs27.idfObservation AND
                ap27.idfsParameter = @Firstfield  /* First*/ 
                AND ap27.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_OPVDoses /*OPV Doses*/)  ref_ap27
             ON ref_ap27.idfsReference = ap27.varValue 
         )
         ON obs27.idfObservation = hc.idfEpiObservation AND
            obs27.intRowStatus = 0
 
         LEFT OUTER JOIN 
         (tlbObservation obs28
             INNER JOIN tlbActivityParameters ap28
             ON ap28.idfObservation = obs28.idfObservation AND
                ap28.idfsParameter = @Secondfield  /* Second*/ 
                AND ap28.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_OPVDoses /*OPV Doses*/)  ref_ap28
             ON ref_ap28.idfsReference = ap28.varValue 
         )
         ON obs28.idfObservation = hc.idfEpiObservation AND
            obs28.intRowStatus = 0
 
         LEFT OUTER JOIN 
         (tlbObservation obs29
             INNER JOIN tlbActivityParameters ap29
             ON ap29.idfObservation = obs29.idfObservation AND
                ap29.idfsParameter = @Thirdfield   /* Third*/ 
                AND ap29.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_OPVDoses /*OPV Doses*/)  ref_ap29
             ON ref_ap29.idfsReference = ap29.varValue 
         )
         ON obs29.idfObservation = hc.idfEpiObservation AND
            obs29.intRowStatus = 0
 
         LEFT OUTER JOIN 
         (tlbObservation obs30
             INNER JOIN tlbActivityParameters ap30
             ON ap30.idfObservation = obs30.idfObservation AND
                ap30.idfsParameter = @DateOfLastOPVDoseReceived /* Date of last OPV dose received*/ AND 
                ap30.intRowStatus = 0     
         )
         ON obs30.idfObservation = hc.idfEpiObservation AND
            obs30.intRowStatus = 0  
		
		--NEW!!!
		 LEFT OUTER JOIN 
         (tlbObservation obs31
             INNER JOIN tlbActivityParameters ap31
             ON ap31.idfObservation = obs31.idfObservation AND
                ap31.idfsParameter =  @IsPatientVaccinatedAgainstLeptospirosis /*Is patient vaccinated against leptospirosis?*/ AND 
                ap31.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Y_N_Unk /*Y_N_Unk*/)  ref_ap31
             ON ref_ap31.idfsReference = ap31.varValue 
         )
         ON obs31.idfObservation = hc.idfEpiObservation AND
            obs31.intRowStatus = 0   
            
         LEFT OUTER JOIN 
         (tlbObservation obs32
             INNER JOIN tlbActivityParameters ap32
             ON ap32.idfObservation = obs32.idfObservation AND
                ap32.idfsParameter = @DateOfVaccinationOfPatientAgainstLeptospirosis /*Date of vaccination of patient against leptospirosis*/ AND 
                ap32.intRowStatus = 0     
         )
         ON obs32.idfObservation = hc.idfEpiObservation AND
            obs32.intRowStatus = 0              
 
         --LEFT OUTER JOIN 
         --(tlbObservation obs31
         --    INNER JOIN tlbActivityParameters ap31
         --    ON ap31.idfObservation = obs31.idfObservation AND
         --       ap31.idfsParameter = @NameVaccine1 /* Vaccine 1: Name of vaccine*/ AND 
         --       ap31.intRowStatus = 0   
 
         --    LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_VaccineTypes /*Vaccine types*/)  ref_ap31
         --    ON ref_ap31.idfsReference = ap31.varValue 
                  
         --)
         --ON obs31.idfObservation = hc.idfEpiObservation AND
         --   obs31.intRowStatus = 0  
 
         --LEFT OUTER JOIN 
         --(tlbObservation obs32
         --    INNER JOIN tlbActivityParameters ap32
         --    ON ap32.idfObservation = obs32.idfObservation AND
         --       ap32.idfsParameter = @NameVaccine2 /* Vaccine 2: Name of vaccine*/ AND 
         --       ap32.intRowStatus = 0   
 
         --    LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_VaccineTypes /*Vaccine types*/)  ref_ap32
         --    ON ref_ap32.idfsReference = ap32.varValue 
                  
         --)
         --ON obs32.idfObservation = hc.idfEpiObservation AND
         --   obs32.intRowStatus = 0  
            
         --LEFT OUTER JOIN 
         --(tlbObservation obs33
         --    INNER JOIN tlbActivityParameters ap33
         --    ON ap33.idfObservation = obs33.idfObservation AND
         --       ap33.idfsParameter = @NameVaccine3 /* Vaccine 3: Name of vaccine*/ AND 
         --       ap33.intRowStatus = 0   
 
         --    LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_VaccineTypes /*Vaccine types*/)  ref_ap33
         --    ON ref_ap33.idfsReference = ap33.varValue 
                  
         --)
         --ON obs33.idfObservation = hc.idfEpiObservation AND
         --   obs33.intRowStatus = 0         
         
     LEFT OUTER JOIN 
         (tlbObservation obs37
             INNER JOIN tlbActivityParameters ap37
             ON ap37.idfObservation = obs37.idfObservation AND
                ap37.idfsParameter =  @PneumonaeNumberReceivedDoses/*HEI S. pneumonae caused infection GG: Number of received doses of S. pneumonae vaccine*/ AND 
                ap37.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization3 /*Immunization 3+*/)  ref_ap37
             ON ref_ap37.idfsReference = ap37.varValue 
         )
         ON obs37.idfObservation = hc.idfEpiObservation AND
            obs37.intRowStatus = 0    
     
     LEFT OUTER JOIN 
         (tlbObservation obs38
             INNER JOIN tlbActivityParameters ap38
             ON ap38.idfObservation = obs38.idfObservation AND
                ap38.idfsParameter =  @PneumonaeVaccinationStatus /*HEI S. pneumonae caused infection GG: S. pneumonae vaccination status*/ AND 
                ap38.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Y_N_Unk /*Y_N_Unk*/)  ref_ap38
             ON ref_ap38.idfsReference = ap38.varValue 
         )
         ON obs38.idfObservation = hc.idfEpiObservation AND
            obs38.intRowStatus = 0     
            
     LEFT OUTER JOIN 
         (tlbObservation obs39
             INNER JOIN tlbActivityParameters ap39
             ON ap39.idfObservation = obs39.idfObservation AND
                ap39.idfsParameter = @PneumonaeDateLastVaccination /*HEI S. pneumonae caused infection GG: Date of last vaccination*/ AND 
                ap39.intRowStatus = 0     
                AND (cast(SQL_VARIANT_PROPERTY(ap39.varValue, 'BaseType') as NVARCHAR) like N'%date%' or
					(cast(SQL_VARIANT_PROPERTY(ap39.varValue, 'BaseType') as NVARCHAR) like N'%char%' AND ISDATE(cast(ap39.varValue as NVARCHAR)) = 1 )	)
         )
         ON obs39.idfObservation = hc.idfEpiObservation AND
            obs39.intRowStatus = 0         

         LEFT OUTER JOIN 
         (tlbObservation obs40
             INNER JOIN tlbActivityParameters ap40
             ON ap40.idfObservation = obs40.idfObservation AND
                ap40.idfsParameter = @HepatitisANumberReceivedDoses /* HEI Acute Viral Hepatitis A GG: Number of received doses of Hepatitis A vaccine*/ AND 
                ap40.intRowStatus = 0
             LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, @PVT_Immunization5 /*Immunization 5+*/)  ref_ap40
             ON ref_ap40.idfsReference = ap40.varValue 
         )
         ON obs40.idfObservation = hc.idfEpiObservation AND
            obs40.intRowStatus = 0             
            
      LEFT OUTER JOIN 
         (tlbObservation obs41
             INNER JOIN tlbActivityParameters ap41
             ON ap41.idfObservation = obs41.idfObservation AND
                ap41.idfsParameter = @HepatitisADateLastVaccination /*HEI Acute Viral Hepatitis A GG: Date of last vaccination*/ AND 
                ap41.intRowStatus = 0     
                AND (cast(SQL_VARIANT_PROPERTY(ap41.varValue, 'BaseType') as NVARCHAR) like N'%date%' or
					(cast(SQL_VARIANT_PROPERTY(ap41.varValue, 'BaseType') as NVARCHAR) like N'%char%' AND ISDATE(cast(ap41.varValue as NVARCHAR)) = 1 )	)
         )
         ON obs41.idfObservation = hc.idfEpiObservation AND
            obs41.intRowStatus = 0   
 
 
 
 
     LEFT OUTER JOIN tlbOutbreak o
     ON hc.idfOutbreak = o.idfOutbreak
 		AND o.intRowStatus = 0
 		
 	LEFT JOIN tlbPerson tp ON
 		tp.idfPerson = hc.idfSentByPerson
 
 	LEFT JOIN dbo.FN_GBL_Institution(@LangID) fi ON
 		fi.idfOffice = hc.idfSentByOffice
 		
 		
 		
 WHERE    hc.idfsSite = ISNULL(@SiteID, dbo.FN_GBL_SITEID_GET()) AND
          hc.intRowStatus = 0 AND 
          DATEDIFF(D, @StartDate, ISNULL(hc.datNotificationDate ,hc.datEnteredDate)) >= 0 AND
          DATEDIFF(D, @FinishDate, ISNULL(hc.datNotificationDate ,hc.datEnteredDate)) <= 0 AND
 			(ISNULL(hc.idfsFinalDiagnosis, hc.idfsTentativeDiagnosis) = @Diagnosis OR @Diagnosis is null)
 		
 		
SELECT
	strName,	
 	strAge, 
 	strGender,
 	strAddress,
 	strPlaceOfStudyWork,
 	datDiseaseOnsetDate,
 	datDateOfFirstPresentation,
 	strFacilityThatSentNotification,
 	strProvisionalDiagnosis,
 	datDateProvisionalDiagnosis,
 	datDateSpecificTreatment,
 	datDateSpecimenTaken,
 	strResultAndDate,
 	strVaccinationStatus,
 	datDateCaseInvestigation,
 	strFinalDS,
 	strFinalClassification,
 	datDateFinalDS,
 	strOutcome,
 	strCaseStatus,
 	strComments,
 	strCaseID,
	datEnteredDate
FROM @ReportTable
ORDER BY datEnteredDate
GO
PRINT N'Creating Extended Property [dbo].[tstAggrSetting].[idfCustomizationPackage].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = 'Country identifier', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tstAggrSetting', @level2type = N'COLUMN', @level2name = N'idfCustomizationPackage';


GO
PRINT N'Creating Extended Property [dbo].[tstAggrSetting].[strValue].[MS_Description]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_Description', @value = 'Value', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'TABLE', @level1name = N'tstAggrSetting', @level2type = N'COLUMN', @level2name = N'strValue';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_SITE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_SITE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_AggregateSetting_GetList]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_AggregateSetting_GetList]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_AggregateSetting_GetList_WithName]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_AggregateSetting_GetList_WithName]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_CONF_AggregateSetting_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_CONF_AggregateSetting_SET]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_MonthlyInfectiousDiseaseV6]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_MonthlyInfectiousDiseaseV6]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_MonthlyInfectiousDiseaseNew]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_MonthlyInfectiousDiseaseNew]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_AnnualInfectiousDisease]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_AnnualInfectiousDisease]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_VET_Form1ADiagnosticInvestigationsAZ]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_VET_Form1ADiagnosticInvestigationsAZ]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_VET_Form1ASanitaryMeasuresAZ]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_VET_Form1ASanitaryMeasuresAZ]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_VET_Form1AVaccinationMeasuresAZ]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_VET_Form1AVaccinationMeasuresAZ]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_VET_SummaryAggregateActionsAZ]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_VET_SummaryAggregateActionsAZ]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_Comparative_Calculations]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_Comparative_Calculations]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_ExternalComparative_Calculations]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_ExternalComparative_Calculations]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_ComparativeTwoYears_Calculations]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_ComparativeTwoYears_Calculations]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_BorderRayonsComparativeReport_Calculations]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_BorderRayonsComparativeReport_Calculations]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_Hum_ComparativeGG_Calculations]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_Hum_ComparativeGG_Calculations]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_ComparativeSeveralYearsByMonthsGG_Calculations]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_ComparativeSeveralYearsByMonthsGG_Calculations]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_MonthlyInfectiousDisease]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_MonthlyInfectiousDisease]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_MonthlyInfectiousDiseaseFatal]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_MonthlyInfectiousDiseaseFatal]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_FormN1InfectiousDiseases]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_FormN1InfectiousDiseases]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_FormN1InfectiousDiseases_IntrahospitalInfections]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_FormN1InfectiousDiseases_IntrahospitalInfections]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_CasesByRayonAndDiseaseSummary]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_CasesByRayonAndDiseaseSummary]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_Comparative]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_Comparative]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_ExternalComparative]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_ExternalComparative]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_ComparativeTwoYears]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_ComparativeTwoYears]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_ComparativeTwoYears_Graph]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_ComparativeTwoYears_Graph]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_Hum_ComparativeGG]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_Hum_ComparativeGG]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_ComparativeSeveralYearsByMonthsGG]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_ComparativeSeveralYearsByMonthsGG]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_Veterinary_Aggregate_Disease_Summary_Report_Detail]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_Human_Aggregate_Disease_Summary_Report_Detail]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_Human_Aggregate_Disease_Summary_Report_Detail]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_DEPARTMENTS_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_DEPARTMENTS_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_DEPARTMENT_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_DEPARTMENT_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_MatrixSeed_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_MatrixSeed_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_ParameterFixedPresetValue_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_ParameterFixedPresetValue_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_Parameters_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_Parameters_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_ParameterTypes_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_ParameterTypes_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_Rules_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_Rules_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_Sections_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_Sections_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_Template_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_Template_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_ORG_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_ORG_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_FF_Copy_Template]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_FF_Copy_Template]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_REF_VECTORTYPEREFERENCE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_REF_VECTORTYPEREFERENCE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_Parameter_Copy]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_Parameter_Copy]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_LAB_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_LAB_SET]';


GO
PRINT N'Refreshing Procedure [Report].[USP_REP_HUM_MonthlyMorbidityMortality]...';


GO
EXECUTE sp_refreshsqlmodule N'[Report].[USP_REP_HUM_MonthlyMorbidityMortality]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_Copy_Template]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_Copy_Template]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_FF_Section_Copy]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_FF_Section_Copy]';


GO
PRINT N'Checking existing data against newly created constraints';

GO
ALTER TABLE [dbo].[tlbOffice] WITH CHECK CHECK CONSTRAINT [FK_tlbOffice_tlbGeoLocationShared];

ALTER TABLE [dbo].[tstAggrSetting] WITH CHECK CHECK CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsStatisticAreaType_R_1612];

ALTER TABLE [dbo].[tstAggrSetting] WITH CHECK CHECK CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsStatisticPeriodType_R_1613];

ALTER TABLE [dbo].[tstAggrSetting] WITH CHECK CHECK CONSTRAINT [FK_tstAggrSetting_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tstAggrSetting] WITH CHECK CHECK CONSTRAINT [FK_tstAggrSetting_tstCustomizationPackage__idfCustomizationPackage];

ALTER TABLE [dbo].[tstAggrSetting] WITH CHECK CHECK CONSTRAINT [FK_tstAggrSetting_trtBaseReference__idfsAggrCaseType_R_941];

ALTER TABLE [dbo].[tstAggrSetting] WITH CHECK CHECK CONSTRAINT [FK_tstAggrSetting_tstSite_idfsSite];

ALTER TABLE [dbo].[AccessRule] WITH CHECK CHECK CONSTRAINT [FK_AccessRule_trtBaseReference];

ALTER TABLE [dbo].[EventSubscription] WITH CHECK CHECK CONSTRAINT [FK_EventSubscription_tstUserTable];

ALTER TABLE [dbo].[gisWHOMap] WITH CHECK CHECK CONSTRAINT [FK_gisWHOMap_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[gisWHOMap] WITH CHECK CHECK CONSTRAINT [FK_idfsLocation_gisLocation];

ALTER TABLE [dbo].[LkupEIDSSMenuToEventType] WITH CHECK CHECK CONSTRAINT [FK_LkupEIDSSMenuToEventType_BaseRef_MenuID];

ALTER TABLE [dbo].[LkupEIDSSMenuToEventType] WITH CHECK CHECK CONSTRAINT [FK_LkupEIDSSMenuToEventType_EventType_idfsEventTypeId];

ALTER TABLE [dbo].[LkupEIDSSMenuToEventType] WITH CHECK CHECK CONSTRAINT [FK_LkupEIDSSMenuToEventType_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tauPINAuditEvent] WITH CHECK CHECK CONSTRAINT [FK_tauPINAuditEvent_tstUserTable];

ALTER TABLE [dbo].[tlbGridDefinition] WITH CHECK CHECK CONSTRAINT [FK_tlbGridDefinition_trtBaseReference_SourceSystemNameID];

ALTER TABLE [dbo].[tlbGridDefinition] WITH CHECK CHECK CONSTRAINT [FK_tlbGridDefinition_tstSite_idfsSite];

ALTER TABLE [dbo].[tlbGridDefinition] WITH CHECK CHECK CONSTRAINT [FK_tlbGridDefinition_tstUserTable_idfUserID];

ALTER TABLE [dbo].[tlbMonitoringSession] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSession_idfsMonitoringSessionSpeciesType];

ALTER TABLE [dbo].[tlbMonitoringSessionToMaterial] WITH CHECK CHECK CONSTRAINT [FK_tlbMonitoringSessionToMaterial_trtBaseReference];

ALTER TABLE [dbo].[tlbSpecies] WITH CHECK CHECK CONSTRAINT [FK_tlbSpecies_OutbreakCaseStatus];


GO
PRINT N'Update complete.';


GO
