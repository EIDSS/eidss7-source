/*
Deployment script for EIDSS7_GG_UAT

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO

PRINT N'Altering Procedure [dbo].[USP_ADMIN_FF_TemplateDesign_GET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_FF_TemplateDesign_GET
-- Description: Returns list of Sections/Parameters
--          
--	Revision History:
--	Name            Date		Change
--	--------------- ----------	--------------------------------------------------------------------
--	Doug Albanese	02/26/2020	Initial release for new API.
--	Doug Albanese	04/06/2020	Addition of automatic intOrder assignment for NULL or zero values
--	Doug Albanese	04/07/2020	return column name change to seperate section from parameters for intOrder
--	Doug Albanese	04/27/2020	Clean up for new templates created where nulls are only the response
--	Doug Albanese	05/11/2020	Correct for duplicate rows being returned
--	Doug Albanese	10/28/2020	Corrected the result to handle missing section data.
--	Doug Albanese	01/06/2021	Added idfsEditMode to handle the status of a parameter's required validation
--	Doug Albanese	01/21/2021	Correction to force the ordering of sections and parameters for a flex form, plus used the new translation function
--	Doug Albanese	01/22/2021	Design Option join didn't include the base reference language id.
--	Doug Albanese	05/21/2021	Refactored to produce "Sectionless" parameters
--	Doug Albanese	05/25/2021	Corrected an intRowStatus problem for parameters getting picked up, when they were deleted.
--	Doug Albanese	07/04/2021  Correction to force template design to come through for the Flex Form Designer
--	Doug Albanese	07/06/2021	Added Observations to the output to determine if a template is locked for specific funtionality
--	Doug Albanese	07/08/2021	Removed idfsSection and idfsParameter from ordering
--	Doug Albanese	10/28/2021	Removed the old concept of reordering parameters/sections, when they have 0 for intOrder
--	Doug Albanese	03/15/2022	Added a USSP to resolve any design option problems. Also added auditing information for the user requesting this call
--	Doug Albanese	03/16/2022	Changed out USSP_ADMIN_FF_DesignOptionsRefresh with USSP_ADMIN_FF_DesignOptionsRefresh_SET
--	Doug Albanese	05/09/2022	Cleaning up duplicates
--	Doug Albanese	05/23/2022	Missing Section Options requires a LEFT JOIN to continue without error
--	Doug Albanese	06/07/2022	Filtered output to only display items that have parameters. Nulls were showing up previously
--  Doug Albanese	03/03/2023	Added Editor Type to the return
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_FF_TemplateDesign_GET] (
	@langid				NVARCHAR(50),
	@idfsFormTemplate	BIGINT = NULL,
	@User				NVARCHAR(50)
)
AS
BEGIN
	SET NOCOUNT ON;

	DECLARE		@langid_int				BIGINT
				,@returnCode			BIGINT
				,@returnMsg				NVARCHAR(MAX)

	BEGIN TRY
		BEGIN TRANSACTION

		SET @langid_int = dbo.FN_GBL_LanguageCode_GET(@LangID);

		--On occasion, Parameters and Sections do not have any Design Options associated with them. The following SP will create them so that ordering information will be available.
		--If ordering information is all null, or zeros...then they will be reassigned new numbers, and kept in the same order as they were before.
		EXEC USSP_ADMIN_FF_DesignOptionsRefresh_SET @LangId= @langid, @idfsFormTemplate = @idfsFormTemplate, @User = ''

		DECLARE @TemplateDesign TABLE (
			idfsSection					BIGINT,
			idfsParentSection			BIGINT,
			idfsParameter				BIGINT,
			idfsEditor					BIGINT,
			idfsParameterType			BIGINT,
			idfsParameterCaption		BIGINT,
			intSectionOrder				INT,
			intParameterOrder			INT,
			ParameterName				NVARCHAR(200),
			SectionName					NVARCHAR(200),
			idfsEditMode				BIGINT,
			sdoIntOrder					INT,
			pdoIntOrder					INT,
			Observations				INT
		)
		
		DECLARE @iObservations		INT

		SELECT
			@iObservations = COUNT(idfObservation)
		FROM
			tlbObservation O
		INNER JOIN ffFormTemplate FT
			ON FT.idfsFormTemplate = O.idfsFormTemplate
			AND FT.intRowStatus = 0
		WHERE
			O.idfsFormTemplate = @idfsFormTemplate

		INSERT INTO @TemplateDesign (idfsSection,idfsParentSection,idfsParameter,idfsEditor,idfsParameterType,idfsParameterCaption,intSectionOrder,intParameterOrder,ParameterName,SectionName,idfsEditMode,sdoIntOrder,pdoIntOrder,Observations)
			SELECT 
				COALESCE(s.idfsSection, -1) AS idfsSection
				,s.idfsParentSection
				,p.idfsParameter
				,p.idfsEditor
				,p.idfsParameterType
				,p.idfsParameterCaption
				,sdo.intOrder AS intSectionOrder
				,pdo.intOrder AS intParameterOrder
				,pn.name AS ParameterName
				,sn.name AS SectionName
				,pft.idfsEditMode
				,sdo.intOrder AS sdoIntOrder
				,pdo.intOrder AS pdoIntOrder
				,@iObservations AS Observations
			FROM
				ffFormTemplate ft
			LEFT JOIN ffParameterForTemplate pft ON pft.idfsFormTemplate = ft.idfsFormTemplate and pft.intRowStatus = 0
			LEFT JOIN ffParameter p ON p.idfsParameter = pft.idfsParameter and p.intRowStatus = 0
			INNER JOIN ffSection s ON s.idfsSection = p.idfsSection and s.intRowStatus = 0
			LEFT JOIN ffSectionForTemplate sft ON sft.idfsSection = s.idfsSection and sft.idfsFormTemplate = @idfsFormTemplate and sft.intRowStatus = 0
			LEFT JOIN ffParameterDesignOption pdo ON pdo.idfsParameter = p.idfsParameter and pdo.idfsFormTemplate = @idfsFormTemplate and pdo.idfsLanguage = @langid_int and pdo.intRowStatus = 0
			LEFT JOIN ffSectionDesignOption sdo ON sdo.idfsSection = s.idfsSection and sdo.idfsFormTemplate = @idfsFormTemplate and sdo.idfsLanguage = @langid_int and sdo.intRowStatus = 0
			LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000066) pn
							ON pn.idfsReference = p.idfsParameter
			LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000101) sn
							ON sn.idfsReference = s.idfsSection
			WHERE 
				ft.idfsFormTemplate = @idfsFormTemplate 

			INSERT INTO @TemplateDesign (idfsSection,idfsParentSection,idfsParameter,idfsEditor,idfsParameterType,idfsParameterCaption,intSectionOrder,intParameterOrder,ParameterName,SectionName,idfsEditMode,sdoIntOrder,pdoIntOrder,Observations)
			SELECT 
				-1 AS idfsSection --????
				,NULL As idfsParentSection
				,p.idfsParameter
				,p.idfsEditor
				,p.idfsParameterType
				,p.idfsParameterCaption
				,0 AS intSectionOrder
				,pdo.intOrder AS intParameterOrder
				,pn.name AS ParameterName
				,'' AS SectionName
				,pft.idfsEditMode
				,NULL AS sdoIntOrder
				,pdo.intOrder AS pdoIntOrder
				,@iObservations AS Observations
			FROM
				ffFormTemplate ft
			LEFT JOIN ffParameterForTemplate pft 
				ON pft.idfsFormTemplate = ft.idfsFormTemplate and pft.intRowStatus = 0
			LEFT JOIN ffParameter p ON p.idfsParameter = pft.idfsParameter and p.intRowStatus = 0
			LEFT JOIN ffParameterDesignOption pdo ON pdo.idfsParameter = p.idfsParameter and pdo.idfsFormTemplate = @idfsFormTemplate and pdo.idfsLanguage = @langid_int and pdo.intRowStatus = 0
			LEFT JOIN dbo.FN_GBL_ReferenceRepair(@langid, 19000066) pn
							ON pn.idfsReference = p.idfsParameter
			WHERE 
				ft.idfsFormTemplate = @idfsFormTemplate and 
				p.idfsSection IS NULL
		
		SELECT
			idfsSection,
			idfsParentSection,
			idfsParameter,
			idfsEditor,
			idfsParameterType,
			idfsParameterCaption,
			intSectionOrder,
			intParameterOrder,
			ParameterName,
			SectionName,
			idfsEditMode,
			sdoIntOrder,
			pdoIntOrder,
			Observations
		FROM
			@TemplateDesign
		WHERE
			idfsParameter IS NOT NULL
		ORDER BY
			sdoIntOrder,
			pdoIntOrder

		COMMIT TRANSACTION;
	END TRY

	BEGIN CATCH
		IF @@TRANCOUNT > 0
			ROLLBACK TRANSACTION;

		THROW;
	END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_ORG_DEL]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_ORG_DEL
--
-- Description:	Set an organization record to inactive.
--                      
-- Author: Ricky Moss
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		06/14/2019 Initial release.
-- Ricky Moss		06/11/2020 Set References of organization names to inactive.
-- Stephen Long     04/24/2021 Added dbo prefix.
-- Stephen Long     06/18/2021 Added check for site association; return 1 when site ID is not null.
-- Stephen Long     03/06/2023 Added data audit logic for SAUC30.
--
-- Testing Code:
--
-- EXEC USP_ADMIN_ORG_DEL, 'Administrator', 1
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_ORG_DEL]
(
    @OrganizationKey BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
DECLARE @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
        @OrganizationAbbreviatedNameID BIGINT,
        @OrganizationFullNameID BIGINT,
        @DataAuditEventTypeid BIGINT = 10016002,                  -- Delete audit event type
        @ObjectTypeID BIGINT = 10017034,                          -- Organization
        @ObjectID BIGINT = @OrganizationKey,
        @ObjectTableID BIGINT = 75650000000,                      -- tlbOffice
        @ObjectBaseReferenceTableID BIGINT = 75820000000,         -- trtBaseReference
        @ObjectStringNameTranslationTableID BIGINT = 75990000000, -- tstStringNameTranslation
        @DataAuditEventID BIGINT,
        @AuditUserID BIGINT,
        @AuditSiteID BIGINT,
        @EIDSSObjectID NVARCHAR(200) = (
                                           SELECT strOrganizationID
                                           FROM dbo.tlbOffice
                                           WHERE idfOffice = @OrganizationKey
                                       ),
        @SiteID BIGINT = NULL;
DECLARE @SuppressSelect TABLE
(
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
);
BEGIN
    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        SELECT @SiteID =
        (
            SELECT s.idfsSite
            FROM dbo.tlbOffice o
                INNER JOIN dbo.tstSite s
                    ON s.idfOffice = o.idfOffice
            WHERE o.idfOffice = @OrganizationKey
        );

        IF @SiteID IS NULL
        BEGIN
            -- Data audit
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      @DataAuditEventTypeID,
                                                      @ObjectTypeID,
                                                      @OrganizationKey,
                                                      @ObjectTableID,
                                                      @EIDSSObjectID, 
                                                      @DataAuditEventID OUTPUT;
            -- End data audit

            SELECT @OrganizationAbbreviatedNameID =
            (
                SELECT idfsOfficeAbbreviation
                FROM dbo.tlbOffice
                WHERE idfOffice = @OrganizationKey
            );

            SELECT @OrganizationFullNameID =
            (
                SELECT idfsOfficeName
                FROM dbo.tlbOffice
                WHERE idfOffice = @OrganizationKey
            );

            UPDATE dbo.trtBaseReference
            SET intRowStatus = 1
            WHERE idfsBaseReference IN ( @OrganizationAbbreviatedNameID, @OrganizationFullNameID );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailDelete
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectBaseReferenceTableID,
                   @OrganizationAbbreviatedNameID,
                   @AuditUserName,
                   @EIDSSObjectID;

            INSERT INTO dbo.tauDataAuditDetailDelete
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectBaseReferenceTableID,
                   @OrganizationFullNameID,
                   @AuditUserName,
                   @EIDSSObjectID;
            -- End data audit

            UPDATE dbo.trtStringNameTranslation
            SET intRowStatus = 1
            WHERE idfsBaseReference IN ( @OrganizationAbbreviatedNameID, @OrganizationFullNameID );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailDelete
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectStringNameTranslationTableID,
                   @OrganizationAbbreviatedNameID,
                   @AuditUserName,
                   @EIDSSObjectID;

            INSERT INTO dbo.tauDataAuditDetailDelete
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectStringNameTranslationTableID,
                   @OrganizationFullNameID,
                   @AuditUserName,
                   @EIDSSObjectID;
            -- End data audit

            UPDATE dbo.tlbOffice
            SET intRowStatus = 1
            WHERE idfOffice = @OrganizationKey;

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailDelete
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   @OrganizationKey,
                   @AuditUserName,
                   @EIDSSObjectID;
        -- End data audit
        END
        ELSE
        BEGIN
            SET @ReturnCode = 1;
            SET @ReturnMessage = 'IN USE';
        END;

        SELECT @ReturnCode 'ReturnCode',
               @ReturnMessage 'ReturnMessage';
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_ORG_GETDetail]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_ORG_GETDetail
--
-- Created by:				Mandar Kulkarni
--
-- Description:				Gets an organization record's details.
--
-- Revision History:
-- Name            Date       Change
-- --------------- ---------- --------------------------------------------------------------------
-- Mandar Kulkarni            Initial release.
-- Mark Wilson     12/30/2020 Updated to use FN_GBL_InstitionRepair.
-- Stephen Long    04/23/2021 Updated for location hierarchy.
-- Stephen Long    06/18/2021 Corrected typo on schema for gisLocation and added additional 
--                            fields.
-- Stephen Long    06/23/2021 Added accessory code IDs and names comma-delimeted strings.
-- Stephen Long    07/29/2021 Added street and postal code ID's and joins.
-- Stephen Long    03/08/2023 Fixed reference type ID for main form of activity type.
--
-- Testing Code:
--
-- DECLARE @idfOffice bigint
-- EXECUTE USP_ADMIN_ORG_GETDetail 49860000000, 'ru'
-- EXECUTE USP_ADMIN_ORG_GETDetail NULL, 'en'
-- EXECUTE USP_ADMIN_ORG_GETDetail 77233290000792, 'az-l'
--=================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_ORG_GETDetail] (
	@LanguageID AS NVARCHAR(50)
	,@OrganizationKey AS BIGINT
	)
AS
BEGIN
	BEGIN TRY
		SELECT o.idfOffice AS OrganizationKey
			,o.strOrganizationID AS OrganizationID
			,o.OrganizationTypeID
			,organizationType.name AS OrganizationTypeName
			,o.idfsOfficeAbbreviation AS AbbreviatedNameReferenceID
			,b2.strDefault AS AbbreviatedNameDefaultValue
			,o.idfsOfficeName AS FullNameReferenceID
			,b1.strDefault AS FullNameDefaultValue
			,ISNULL(s2.strTextString, b2.strDefault) AS AbbreviatedNameNationalValue
			,ISNULL(s1.strTextString, b1.strDefault) AS FullNameNationalValue
			,adminLevel0.idfsReference AS CountryID
			,adminLevel1.idfsReference AS AdministrativeLevel1ID
			,adminLevel1.name AS AdministrativeLevel1Name
			,adminLevel2.idfsReference AS AdministrativeLevel2ID
			,adminLevel2.name AS AdministrativeLevel2Name
			,NULL AS AdministrativeLevel3ID
			,NULL AS AdministrativeLevel3Name
			,settlement.idfsReference AS SettlementID
			,settlement.name AS SettlementName
			,pc.idfPostalCode AS PostalCodeID 
			,gls.strPostCode AS PostalCode
			,st.idfStreet AS StreetID 
			,gls.strStreetName AS StreetName
			,gls.strHouse AS House
			,gls.strBuilding AS Building
			,gls.strApartment AS Apartment
			,gls.blnForeignAddress AS ForeignAddressIndicator
			,gls.strForeignAddress AS ForeignAddressString
			,o.idfLocation AS AddressID
			,gls.strAddressString AS AddressString
			,o.strContactPhone AS ContactPhone
			,o.OwnershipFormID AS OwnershipFormTypeID
			,ownershipFormType.name AS OwnershipFormTypeName
			,o.LegalFormID AS LegalFormTypeID
			,legalFormType.name AS LegalFormTypeName
			,o.MainFormOfActivityID AS MainFormOfActivityTypeID
			,mainFormOfActivityType.name AS MainFormOfActivityTypeName
			,dbo.FN_GBL_HACode_ToCSV(@LanguageID, o.intHACode) AS AccessoryCodeIDsString
			,dbo.FN_GBL_HACodeNames_ToCSV(@LanguageID, o.intHACode) AS AccessoryCodeNamesString
			,o.intHACode AS AccessoryCode
			,b2.intOrder AS [Order]
			,o.idfsSite AS SiteID
			,o.intRowStatus AS RowStatus
		FROM dbo.tlbOffice o
		LEFT JOIN dbo.tlbGeoLocationShared gls ON gls.idfGeoLocationShared = o.idfLocation
		LEFT JOIN dbo.gisLocation g ON g.idfsLocation = gls.idfsLocation
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000001) adminLevel0 ON adminLevel0.node = g.node.GetAncestor(dbo.FN_GIS_Location_GetLevel0Ancestor(g.node.GetLevel()))
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000003) adminLevel1 ON adminLevel1.node = g.node.GetAncestor(dbo.FN_GIS_Location_GetLevel1Ancestor(g.node.GetLevel()))
		LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LanguageID, 19000002) adminLevel2 ON adminLevel2.node = g.node.GetAncestor(dbo.FN_GIS_Location_GetLevel2Ancestor(g.node.GetLevel()))
		LEFT JOIN dbo.FN_GBL_GIS_REFERENCE(@LanguageID, 19000004) settlement ON settlement.idfsReference = gls.idfsLocation
		LEFT OUTER JOIN dbo.trtBaseReference AS b1 ON o.idfsOfficeName = b1.idfsBaseReference
		LEFT JOIN dbo.trtStringNameTranslation AS s1 ON b1.idfsBaseReference = s1.idfsBaseReference
			AND s1.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
		LEFT OUTER JOIN dbo.trtBaseReference AS b2 ON o.idfsOfficeAbbreviation = b2.idfsBaseReference
		LEFT JOIN dbo.trtStringNameTranslation AS s2 ON b2.idfsBaseReference = s2.idfsBaseReference
			AND s2.idfsLanguage = dbo.FN_GBL_LanguageCode_GET(@LanguageID)
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000504) organizationType ON o.OrganizationTypeID = organizationType.idfsReference
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000523) mainFormOfActivityType ON o.MainFormOfActivityID = mainFormOfActivityType.idfsReference
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000521) ownershipFormType ON o.OwnershipFormID = ownershipFormType.idfsReference
		LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LanguageID, 19000522) legalFormType ON o.LegalFormID = legalFormType.idfsReference
		LEFT JOIN dbo.tlbStreet st ON st.idfsLocation = gls.idfsLocation AND st.strStreetName = gls.strStreetName
		LEFT JOIN dbo.tlbPostalCode pc ON pc.idfsLocation = gls.idfsLocation AND pc.strPostCode = gls.strPostCode
		WHERE o.idfOffice = @OrganizationKey;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_AGG_REPORT_DELETE]...';


GO
-- ================================================================================================
-- Name: USP_AGG_REPORT_DELETE
--
-- Description: Deletes aggregate disease report records.
--          
-- Author: Mike Kornegay
--
-- Revision History:
-- Name                     Date       Change Detail
-- ------------------------ ---------- -----------------------------------------------------------
-- Mike Kornegay            04/08/2022 Original
-- Manickandan Govindarajan 12/06/2022 DataAudit SAUC30 and 31
-- Stephen Long             03/08/2023 Fix to call data audit event set to pass EIDSS ID.
--
-- Testing code: 
/*
	DECLARE @ID BIGINT = 34390000806
	EXECUTE USP_AGG_REPORT_DELETE  @ID, 'rykermase'

*/
--	@ID is AggregateCaseID
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_AGG_REPORT_DELETE]
(
    @ID AS BIGINT,
    @User NVARCHAR(100) = NULL
)
AS
DECLARE @ReturnCode INT = 0;
DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
DECLARE @idfDiagnosticObservation BIGINT;
DECLARE @idfProphylacticObservation BIGINT;
DECLARE @idfSanitaryObservation BIGINT;
--dataAudit
DECLARE @idfsDataAuditEventType bigint = 10016002;
DECLARE @idfsObjectType bigint;
DECLARE @idfObject bigint = @ID;
DECLARE @idfObjectTable_tlbAggrCase bigint = 75420000000;
DECLARE @idfDataAuditEvent bigint;
DECLARE @campaignCategoryId bigint;
DECLARE @idfUserID bigint;
DECLARE @idfSiteId bigint;
DECLARE @idfObjectTable_tlbCampaignToDiagnosis bigint = 707000000000;
DECLARE @aggrTypeId bigint;
DECLARE @EIDSSAggregateDiseaseReportID NVARCHAR(200)
    =   (
            SELECT strCaseID FROM dbo.tlbAggrCase WHERE idfAggrCase = @ID
        );
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200)
);

--dataudit

BEGIN
    BEGIN TRANSACTION;

    BEGIN TRY
        --Data Audit
        SELECT @aggrTypeId = idfsAggrCaseType
        FROM dbo.tlbAggrCase
        WHERE idfAggrCase = @ID;
        --Data Audit

        IF @aggrTypeId = 10102001
            SET @idfsObjectType = 10017006;
        IF @aggrTypeId = 10102002
            SET @idfsObjectType = 10017005;
        IF @aggrTypeId = 10102003
            SET @idfsObjectType = 10017004;
        --Data Audit

        SELECT @idfDiagnosticObservation = idfDiagnosticObservation
        FROM dbo.tlbAggrCase
        WHERE idfAggrCase = @ID;

        SELECT @idfProphylacticObservation = idfProphylacticObservation
        FROM dbo.tlbAggrCase
        WHERE idfAggrCase = @ID;

        SELECT @idfSanitaryObservation = idfSanitaryObservation
        FROM dbo.tlbAggrCase
        WHERE idfAggrCase = @ID;

        BEGIN
            DELETE FROM dbo.tflAggrCaseFiltered
            WHERE idfAggrCase = @ID;

            --Data Audit
            select @idfUserID = a.userid,
                   @idfSiteId = a.siteid
            from dbo.FN_UserSiteInformation(@User) a;
            -- insert record into tauDataAuditEvent
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @idfUserID,
                                                      @idfSiteId,
                                                      @idfsDataAuditEventType,
                                                      @idfsObjectType,
                                                      @idfObject,
                                                      @idfObjectTable_tlbAggrCase,
                                                      @EIDSSAggregateDiseaseReportID,
                                                      @idfDataAuditEvent OUTPUT;
            -- insert into delete 


            INSERT INTO dbo.tauDataAuditDetailDelete
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject
            )
            SELECT @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrCase,
                   idfAggrCase
            FROM dbo.tlbAggrCase
            WHERE idfAggrCase = @Id;
            --Data Audit

            UPDATE dbo.tlbAggrCase
            SET intRowStatus = 1,
                AuditUpdateUser = @User,
                AuditUpdateDTM = GETDATE()
            WHERE idfAggrCase = @ID;

            EXEC dbo.USP_OBSERVATION_DELETE @ID = @idfDiagnosticObservation,
                                            @User = @User,
                                            @idfDataAuditEvent = @idfDataAuditEvent;

            EXEC dbo.USP_OBSERVATION_DELETE @ID = @idfProphylacticObservation,
                                            @User = @User,
                                            @idfDataAuditEvent = @idfDataAuditEvent;

            EXEC dbo.USP_OBSERVATION_DELETE @ID = @idfSanitaryObservation,
                                            @User = @User,
                                            @idfDataAuditEvent = @idfDataAuditEvent;
        END

        IF @@TRANCOUNT > 0
           AND @ReturnCode = 0
            COMMIT;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage;

    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage;
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_AGG_REPORT_SET]...';


GO
-- ================================================================================================
-- Name: USP_AGG_REPORT_SET
--
-- Description: Inserts and updates human and veterinary aggregate disease reports, and veterinary 
-- aggregate action report records.
--          
-- Author: Stephen Long
-- Revision History:
--
-- Name                     Date       Change Detail
-- ------------------------ ---------- -----------------------------------------------------------
-- Stephen Long             05/17/2022 Initial release.
-- Stephen Long             07/06/2022 Updates for site alerts to call new stored procedure.
-- Manickandan Govindarajan 02/06/2022 Data Audit SAUC30 and 31
-- Stephen Long             03/06/2023 Updated object type ID for human aggregate to use 7.0 
--                                     version.
--
-- Testing code:
--
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_AGG_REPORT_SET]
    @AggregateReportID BIGINT = NULL,
    @EIDSSAggregateReportID NVARCHAR(200) = NULL,
    @AggregateReportTypeID BIGINT,
    @GeographicalAdministrativeUnitID BIGINT = NULL,   -- Geographical Statistical Area Type
    @OrganizationalAdministrativeUnitID BIGINT = NULL, -- Organizational Statistical Area Type
    @ReceivedByOrganizationID BIGINT,
    @ReceivedByPersonID BIGINT,
    @SentByOrganizationID BIGINT,
    @SentByPersonID BIGINT,
    @EnteredByOrganizationID BIGINT,
    @EnteredByPersonID BIGINT,
    @CaseObservationID BIGINT = NULL,
    @CaseObservationFormTemplateID BIGINT = NULL,
    @DiagnosticObservationID BIGINT = NULL,
    @DiagnosticObservationFormTemplateID BIGINT = NULL,
    @ProphylacticObservationID BIGINT = NULL,
    @ProphylacticObservationFormTemplateID BIGINT = NULL,
    @SanitaryObservationID BIGINT = NULL,
    @SanitaryObservationFormTemplateID BIGINT = NULL,
    @CaseVersion BIGINT = NULL,
    @DiagnosticVersion BIGINT = NULL,
    @ProphylacticVersion BIGINT = NULL,
    @SanitaryVersion BIGINT = NULL,
    @ReceivedByDate DATETIME,
    @SentByDate DATETIME,
    @EnteredByDate DATETIME,
    @StartDate DATETIME,
    @FinishDate DATETIME,
    @SiteID BIGINT,
    @AuditUserName NVARCHAR(200),
    @UserID BIGINT,
    @Events NVARCHAR(MAX) = NULL
AS
DECLARE @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
        @RowID BIGINT,
        @EventId BIGINT,
        @EventTypeId BIGINT = NULL,
        @EventSiteId BIGINT = NULL,
        @EventObjectId BIGINT = NULL,
        @EventUserId BIGINT = NULL,
        @EventDiseaseId BIGINT = NULL,
        @EventLocationId BIGINT = NULL,
        @EventInformationString NVARCHAR(MAX) = NULL,
        @EventLoginSiteId BIGINT = NULL;
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200)
);
DECLARE @EventsTemp TABLE
(
    EventId BIGINT NOT NULL,
    EventTypeId BIGINT NULL,
    UserId BIGINT NULL,
    SiteId BIGINT NULL,
    LoginSiteId BIGINT NULL,
    ObjectId BIGINT NULL,
    DiseaseId BIGINT NULL,
    LocationId BIGINT NULL,
    InformationString NVARCHAR(MAX) NULL
);

-- Data audit
DECLARE @idfsDataAuditEventType BIGINT,
        @idfsObjectType BIGINT,
  @idfObject BIGINT,
  @idfObjectTable_tlbAggrCase BIGINT = 75420000000,
  @idfDataAuditEvent BIGINT,
  @idfUserID BIGINT = @UserID,
  @idfSiteId BIGINT = @SiteID,
  @CaseObservation_table BIGINT;
DECLARE @tlbAggrCase_BeforeEdit TABLE
(
    datEnteredByDate datetime,
    datFinishDate datetime,
    datReceivedByDate datetime,
    datSentByDate datetime,
    datStartDate datetime,
    idfAggrCase bigint,
    idfsAggrCaseType bigint,
    idfsAdministrativeUnit bigint,
    idfReceivedByOffice bigint,
    idfReceivedByPerson bigint,
    idfSentByOffice bigint,
    idfSentByPerson bigint,
    idfEnteredByOffice bigint,
    idfEnteredByPerson bigint,
    idfCaseObservation bigint,
    idfDiagnosticObservation bigint,
    idfProphylacticObservation bigint,
    idfSanitaryObservation bigint,
    idfVersion bigint,
    idfDiagnosticVersion bigint,
    idfProphylacticVersion bigint,
    idfSanitaryVersion bigint,
    strCaseID varchar(200)
);
DECLARE @tlbAggrCase_AfterEdit TABLE
(
    datEnteredByDate datetime,
    datFinishDate datetime,
    datReceivedByDate datetime,
    datSentByDate datetime,
    datStartDate datetime,
    idfAggrCase bigint,
    idfsAggrCaseType bigint,
    idfsAdministrativeUnit bigint,
    idfReceivedByOffice bigint,
    idfReceivedByPerson bigint,
    idfSentByOffice bigint,
    idfSentByPerson bigint,
    idfEnteredByOffice bigint,
    idfEnteredByPerson bigint,
    idfCaseObservation bigint,
    idfDiagnosticObservation bigint,
    idfProphylacticObservation bigint,
    idfSanitaryObservation bigint,
    idfVersion bigint,
    idfDiagnosticVersion bigint,
    idfProphylacticVersion bigint,
    idfSanitaryVersion bigint,
    strCaseID varchar(200)
);
-- End data audit

BEGIN
    BEGIN TRY
        BEGIN TRANSACTION

        -- Data audit
        IF @AggregateReportTypeID = 10102001
            SET @idfsObjectType = 10017077; -- Human aggregate disease report
        IF @AggregateReportTypeID = 10102002
            SET @idfsObjectType = 10017005;
        IF @AggregateReportTypeID = 10102003
            SET @idfsObjectType = 10017004;
        --End data audit

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbAggrCase
            WHERE idfAggrCase = @AggregateReportID
        )
        BEGIN
            SET @idfsDataAuditEventType = 10016003;
            SET @idfObject = @AggregateReportID;

            --Data Audit
            -- insert record into tauDataAuditEvent
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @idfUserID,
                                                      @idfSiteId,
                                                      @idfsDataAuditEventType,
                                                      @idfsObjectType,
                                                      @idfObject,
                                                      @idfObjectTable_tlbAggrCase,
                                                      @EIDSSAggregateReportID, 
                                                      @idfDataAuditEvent OUTPUT;

            UPDATE dbo.tauDataAuditEvent
            SET strMainObject = @EIDSSAggregateReportID
            WHERE idfDataAuditEvent = @idfDataAuditEvent;

            --Data Audit

            IF NOT @CaseObservationID IS NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_AGG_OBSERVATION_SET @CaseObservationID,
                                                 @CaseObservationFormTemplateID,
                                                 @idfDataAuditEvent;

                UPDATE dbo.tauDataAuditDetailCreate
                SET idfDataAuditEvent = @idfDataAuditEvent,
                    strObject = @EIDSSAggregateReportID
                WHERE idfObjectDetail = @CaseObservationID
                      AND idfDataAuditEvent IS NULL;

                UPDATE dbo.tauDataAuditDetailUpdate
                SET idfDataAuditEvent = @idfDataAuditEvent,
                    strObject = @EIDSSAggregateReportID
                WHERE idfObjectDetail = @CaseObservationID
                      AND idfDataAuditEvent IS NULL;
            END

            IF NOT @DiagnosticObservationID IS NULL
            BEGIN
                print '@DiagnosticObservationID'
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_AGG_OBSERVATION_SET @DiagnosticObservationID,
                                                 @DiagnosticObservationFormTemplateID,
                                                 @idfDataAuditEvent;

                UPDATE dbo.tauDataAuditDetailCreate
                SET idfDataAuditEvent = @idfDataAuditEvent,
                    strObject = @EIDSSAggregateReportID
                WHERE idfObjectDetail = @DiagnosticObservationID
                      AND idfDataAuditEvent IS NULL;


                UPDATE dbo.tauDataAuditDetailUpdate
                SET idfDataAuditEvent = @idfDataAuditEvent,
                    strObject = @EIDSSAggregateReportID
                WHERE idfObjectDetail = @DiagnosticObservationID
                      AND idfDataAuditEvent IS NULL;
            END

            IF NOT @ProphylacticObservationID IS NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_AGG_OBSERVATION_SET @ProphylacticObservationID,
                                                 @ProphylacticObservationFormTemplateID,
                                                 @idfDataAuditEvent;
                UPDATE dbo.tauDataAuditDetailCreate
                SET idfDataAuditEvent = @idfDataAuditEvent,
                    strObject = @EIDSSAggregateReportID
                WHERE idfObjectDetail = @ProphylacticObservationID
                      AND idfDataAuditEvent IS NULL;

                UPDATE dbo.tauDataAuditDetailUpdate
                SET idfDataAuditEvent = @idfDataAuditEvent,
                    strObject = @EIDSSAggregateReportID
                WHERE idfObjectDetail = @ProphylacticObservationID
                      AND idfDataAuditEvent IS NULL;
            END

            IF NOT @SanitaryObservationID IS NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_AGG_OBSERVATION_SET @SanitaryObservationID,
                                                 @SanitaryObservationFormTemplateID,
                                                 @idfDataAuditEvent;
                UPDATE dbo.tauDataAuditDetailCreate
                SET idfDataAuditEvent = @idfDataAuditEvent,
                    strObject = @EIDSSAggregateReportID
                WHERE idfObjectDetail = @SanitaryObservationID
                      AND idfDataAuditEvent IS NULL;

                UPDATE dbo.tauDataAuditDetailUpdate
                SET idfDataAuditEvent = @idfDataAuditEvent,
                    strObject = @EIDSSAggregateReportID
                WHERE idfObjectDetail = @SanitaryObservationID
                      AND idfDataAuditEvent IS NULL;


            END


            insert into @tlbAggrCase_BeforeEdit
            (
                datEnteredByDate,
                datFinishDate,
                datReceivedByDate,
                datSentByDate,
                datStartDate,
                idfAggrCase,
                idfsAggrCaseType,
                idfsAdministrativeUnit,
                idfReceivedByOffice,
                idfReceivedByPerson,
                idfSentByOffice,
                idfSentByPerson,
                idfEnteredByOffice,
                idfEnteredByPerson,
                idfCaseObservation,
                idfDiagnosticObservation,
                idfProphylacticObservation,
                idfSanitaryObservation,
                idfVersion,
                idfDiagnosticVersion,
                idfProphylacticVersion,
                idfSanitaryVersion,
                strCaseID
            )
            select datEnteredByDate,
                   datFinishDate,
                   datReceivedByDate,
                   datSentByDate,
                   datStartDate,
                   idfAggrCase,
                   idfsAggrCaseType,
                   idfsAdministrativeUnit,
                   idfReceivedByOffice,
                   idfReceivedByPerson,
                   idfSentByOffice,
                   idfSentByPerson,
                   idfEnteredByOffice,
                   idfEnteredByPerson,
                   idfCaseObservation,
                   idfDiagnosticObservation,
                   idfProphylacticObservation,
                   idfSanitaryObservation,
                   idfVersion,
                   idfDiagnosticVersion,
                   idfProphylacticVersion,
                   idfSanitaryVersion,
                   strCaseID
            from tlbAggrCase
            where idfAggrCase = @AggregateReportID;


            UPDATE dbo.tlbAggrCase
            SET idfsAggrCaseType = @AggregateReportTypeID,
                idfsAdministrativeUnit = @GeographicalAdministrativeUnitID,
                idfOffice = @OrganizationalAdministrativeUnitID,
                idfReceivedByOffice = @ReceivedByOrganizationID,
                idfReceivedByPerson = @ReceivedByPersonID,
                idfSentByOffice = @SentByOrganizationID,
                idfSentByPerson = @SentByPersonID,
                idfCaseObservation = @CaseObservationID,
                idfDiagnosticObservation = @DiagnosticObservationID,
                idfProphylacticObservation = @ProphylacticObservationID,
                idfSanitaryObservation = @SanitaryObservationID,
                idfVersion = @CaseVersion,
                idfDiagnosticVersion = @DiagnosticVersion,
                idfProphylacticVersion = @ProphylacticVersion,
                idfSanitaryVersion = @SanitaryVersion,
                datReceivedByDate = @ReceivedByDate,
                datSentByDate = @SentByDate,
                datStartDate = @StartDate,
                datFinishDate = @FinishDate,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName,
                idfsSite = @SiteID
            WHERE idfAggrCase = @AggregateReportID;

            --Data Audit
            insert into @tlbAggrCase_AfterEdit
            (
                datEnteredByDate,
                datFinishDate,
                datReceivedByDate,
                datSentByDate,
                datStartDate,
                idfAggrCase,
                idfsAggrCaseType,
                idfsAdministrativeUnit,
                idfReceivedByOffice,
                idfReceivedByPerson,
                idfSentByOffice,
                idfSentByPerson,
                idfEnteredByOffice,
                idfEnteredByPerson,
                idfCaseObservation,
                idfDiagnosticObservation,
                idfProphylacticObservation,
                idfSanitaryObservation,
                idfVersion,
                idfDiagnosticVersion,
                idfProphylacticVersion,
                idfSanitaryVersion,
                strCaseID
            )
            select datEnteredByDate,
                   datFinishDate,
                   datReceivedByDate,
                   datSentByDate,
                   datStartDate,
                   idfAggrCase,
                   idfsAggrCaseType,
                   idfsAdministrativeUnit,
                   idfReceivedByOffice,
                   idfReceivedByPerson,
                   idfSentByOffice,
                   idfSentByPerson,
                   idfEnteredByOffice,
                   idfEnteredByPerson,
                   idfCaseObservation,
                   idfDiagnosticObservation,
                   idfProphylacticObservation,
                   idfSanitaryObservation,
                   idfVersion,
                   idfDiagnosticVersion,
                   idfProphylacticVersion,
                   idfSanitaryVersion,
                   strCaseID
            from tlbAggrCase
            where idfAggrCase = @AggregateReportID;

            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrCase,
                   78200000000,
                   a.idfAggrCase,
                   null,
                   a.datEnteredByDate,
                   b.datEnteredByDate
            from @tlbAggrCase_BeforeEdit a
                inner join @tlbAggrCase_AfterEdit b
                    on a.idfAggrCase = b.idfAggrCase
            where (a.datEnteredByDate <> b.datEnteredByDate)
                  or (
                         a.datEnteredByDate is not null
                         and b.datEnteredByDate is null
                     )
                  or (
                         a.datEnteredByDate is null
                         and b.datEnteredByDate is not null
                     )

            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrCase,
                   78210000000,
                   a.idfAggrCase,
                   null,
                   a.datFinishDate,
                   b.datFinishDate
            from @tlbAggrCase_BeforeEdit a
                inner join @tlbAggrCase_AfterEdit b
                    on a.idfAggrCase = b.idfAggrCase
            where (a.datFinishDate <> b.datFinishDate)
                  or (
                         a.datFinishDate is not null
                         and b.datFinishDate is null
                     )
                  or (
                         a.datFinishDate is null
                         and b.datFinishDate is not null
                     )

            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrCase,
                   78220000000,
                   a.idfAggrCase,
                   null,
                   a.datReceivedByDate,
                   b.datReceivedByDate
            from @tlbAggrCase_BeforeEdit a
                inner join @tlbAggrCase_AfterEdit b
                    on a.idfAggrCase = b.idfAggrCase
            where (a.datReceivedByDate <> b.datReceivedByDate)
                  or (
                         a.datReceivedByDate is not null
                         and b.datReceivedByDate is null
                     )
                  or (
                         a.datReceivedByDate is null
                         and b.datReceivedByDate is not null
                     )

            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrCase,
                   78230000000,
                   a.idfAggrCase,
                   null,
                   a.datSentByDate,
                   b.datSentByDate
            from @tlbAggrCase_BeforeEdit a
                inner join @tlbAggrCase_AfterEdit b
                    on a.idfAggrCase = b.idfAggrCase
            where (a.datSentByDate <> b.datSentByDate)
                  or (
                         a.datSentByDate is not null
                         and b.datSentByDate is null
                     )
                  or (
                         a.datSentByDate is null
                         and b.datSentByDate is not null
                     )

            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrCase,
                   78240000000,
                   a.idfAggrCase,
                   null,
                   a.datStartDate,
                   b.datStartDate
            from @tlbAggrCase_BeforeEdit a
                inner join @tlbAggrCase_AfterEdit b
                    on a.idfAggrCase = b.idfAggrCase
            where (a.datStartDate <> b.datStartDate)
                  or (
                         a.datStartDate is not null
                         and b.datStartDate is null
                     )
                  or (
                         a.datStartDate is null
                         and b.datStartDate is not null
                     )

            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrCase,
                   78260000000,
                   a.idfAggrCase,
                   null,
                   a.idfsAggrCaseType,
                   b.idfsAggrCaseType
            from @tlbAggrCase_BeforeEdit a
                inner join @tlbAggrCase_AfterEdit b
                    on a.idfAggrCase = b.idfAggrCase
            where (a.idfsAggrCaseType <> b.idfsAggrCaseType)
                  or (
                         a.idfsAggrCaseType is not null
                         and b.idfsAggrCaseType is null
                     )
                  or (
                         a.idfsAggrCaseType is null
                         and b.idfsAggrCaseType is not null
                     )

            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrCase,
                   4577520000000,
                   a.idfAggrCase,
                   null,
                   a.idfsAdministrativeUnit,
                   b.idfsAdministrativeUnit
            from @tlbAggrCase_BeforeEdit a
                inner join @tlbAggrCase_AfterEdit b
                    on a.idfAggrCase = b.idfAggrCase
            where (a.idfsAdministrativeUnit <> b.idfsAdministrativeUnit)
                  or (
                         a.idfsAdministrativeUnit is not null
                         and b.idfsAdministrativeUnit is null
                     )
                  or (
                         a.idfsAdministrativeUnit is null
                         and b.idfsAdministrativeUnit is not null
                     )

            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrCase,
                   4577530000000,
                   a.idfAggrCase,
                   null,
                   a.idfReceivedByOffice,
                   b.idfReceivedByOffice
            from @tlbAggrCase_BeforeEdit a
                inner join @tlbAggrCase_AfterEdit b
                    on a.idfAggrCase = b.idfAggrCase
            where (a.idfReceivedByOffice <> b.idfReceivedByOffice)
                  or (
                         a.idfReceivedByOffice is not null
                         and b.idfReceivedByOffice is null
                     )
                  or (
                         a.idfReceivedByOffice is null
                         and b.idfReceivedByOffice is not null
                     )

            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrCase,
                   4577540000000,
                   a.idfAggrCase,
                   null,
                   a.idfReceivedByPerson,
                   b.idfReceivedByPerson
            from @tlbAggrCase_BeforeEdit a
                inner join @tlbAggrCase_AfterEdit b
                    on a.idfAggrCase = b.idfAggrCase
            where (a.idfReceivedByPerson <> b.idfReceivedByPerson)
                  or (
                         a.idfReceivedByPerson is not null
                         and b.idfReceivedByPerson is null
                     )
                  or (
                         a.idfReceivedByPerson is null
                         and b.idfReceivedByPerson is not null
                     )

            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrCase,
                   4577550000000,
                   a.idfAggrCase,
                   null,
                   a.idfSentByOffice,
                   b.idfSentByOffice
            from @tlbAggrCase_BeforeEdit a
                inner join @tlbAggrCase_AfterEdit b
                    on a.idfAggrCase = b.idfAggrCase
            where (a.idfSentByOffice <> b.idfSentByOffice)
                  or (
                         a.idfSentByOffice is not null
                         and b.idfSentByOffice is null
                     )
                  or (
                         a.idfSentByOffice is null
                         and b.idfSentByOffice is not null
                     )

            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrCase,
                   4577560000000,
                   a.idfAggrCase,
                   null,
                   a.idfSentByPerson,
                   b.idfSentByPerson
            from @tlbAggrCase_BeforeEdit a
                inner join @tlbAggrCase_AfterEdit b
                    on a.idfAggrCase = b.idfAggrCase
            where (a.idfSentByPerson <> b.idfSentByPerson)
                  or (
                         a.idfSentByPerson is not null
                         and b.idfSentByPerson is null
                     )
                  or (
                         a.idfSentByPerson is null
                         and b.idfSentByPerson is not null
                     )

            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrCase,
                   4577570000000,
                   a.idfAggrCase,
                   null,
                   a.idfEnteredByOffice,
                   b.idfEnteredByOffice
            from @tlbAggrCase_BeforeEdit a
                inner join @tlbAggrCase_AfterEdit b
                    on a.idfAggrCase = b.idfAggrCase
            where (a.idfEnteredByOffice <> b.idfEnteredByOffice)
                  or (
                         a.idfEnteredByOffice is not null
                         and b.idfEnteredByOffice is null
                     )
                  or (
                         a.idfEnteredByOffice is null
                         and b.idfEnteredByOffice is not null
                     )

            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrCase,
                   4577580000000,
                   a.idfAggrCase,
                   null,
                   a.idfEnteredByPerson,
                   b.idfEnteredByPerson
            from @tlbAggrCase_BeforeEdit a
                inner join @tlbAggrCase_AfterEdit b
                    on a.idfAggrCase = b.idfAggrCase
            where (a.idfEnteredByPerson <> b.idfEnteredByPerson)
                  or (
                         a.idfEnteredByPerson is not null
                         and b.idfEnteredByPerson is null
                     )
                  or (
                         a.idfEnteredByPerson is null
                         and b.idfEnteredByPerson is not null
                     )

            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrCase,
                   4577590000000,
                   a.idfAggrCase,
                   null,
                   a.idfCaseObservation,
                   b.idfCaseObservation
            from @tlbAggrCase_BeforeEdit a
                inner join @tlbAggrCase_AfterEdit b
                    on a.idfAggrCase = b.idfAggrCase
            where (a.idfCaseObservation <> b.idfCaseObservation)
                  or (
                         a.idfCaseObservation is not null
                         and b.idfCaseObservation is null
                     )
                  or (
                         a.idfCaseObservation is null
                         and b.idfCaseObservation is not null
                     )

            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrCase,
                   4577600000000,
                   a.idfAggrCase,
                   null,
                   a.idfDiagnosticObservation,
                   b.idfDiagnosticObservation
            from @tlbAggrCase_BeforeEdit a
                inner join @tlbAggrCase_AfterEdit b
                    on a.idfAggrCase = b.idfAggrCase
            where (a.idfDiagnosticObservation <> b.idfDiagnosticObservation)
                  or (
                         a.idfDiagnosticObservation is not null
                         and b.idfDiagnosticObservation is null
                     )
                  or (
                         a.idfDiagnosticObservation is null
                         and b.idfDiagnosticObservation is not null
                     )

            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrCase,
                   4577610000000,
                   a.idfAggrCase,
                   null,
                   a.idfProphylacticObservation,
                   b.idfProphylacticObservation
            from @tlbAggrCase_BeforeEdit a
                inner join @tlbAggrCase_AfterEdit b
                    on a.idfAggrCase = b.idfAggrCase
            where (a.idfProphylacticObservation <> b.idfProphylacticObservation)
                  or (
                         a.idfProphylacticObservation is not null
                         and b.idfProphylacticObservation is null
                     )
                  or (
                         a.idfProphylacticObservation is null
                         and b.idfProphylacticObservation is not null
                     )

            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrCase,
                   4577620000000,
                   a.idfAggrCase,
                   null,
                   a.idfSanitaryObservation,
                   b.idfSanitaryObservation
            from @tlbAggrCase_BeforeEdit a
                inner join @tlbAggrCase_AfterEdit b
                    on a.idfAggrCase = b.idfAggrCase
            where (a.idfSanitaryObservation <> b.idfSanitaryObservation)
                  or (
                         a.idfSanitaryObservation is not null
                         and b.idfSanitaryObservation is null
                     )
                  or (
                         a.idfSanitaryObservation is null
                         and b.idfSanitaryObservation is not null
                     )

            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrCase,
                   4577630000000,
                   a.idfAggrCase,
                   null,
                   a.idfVersion,
                   b.idfVersion
            from @tlbAggrCase_BeforeEdit a
                inner join @tlbAggrCase_AfterEdit b
                    on a.idfAggrCase = b.idfAggrCase
            where (a.idfVersion <> b.idfVersion)
                  or (
                         a.idfVersion is not null
                         and b.idfVersion is null
                     )
                  or (
                         a.idfVersion is null
                         and b.idfVersion is not null
                     )

            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrCase,
                   4577640000000,
                   a.idfAggrCase,
                   null,
                   a.idfDiagnosticVersion,
                   b.idfDiagnosticVersion
            from @tlbAggrCase_BeforeEdit a
                inner join @tlbAggrCase_AfterEdit b
                    on a.idfAggrCase = b.idfAggrCase
            where (a.idfDiagnosticVersion <> b.idfDiagnosticVersion)
                  or (
                         a.idfDiagnosticVersion is not null
                         and b.idfDiagnosticVersion is null
                     )
                  or (
                         a.idfDiagnosticVersion is null
                         and b.idfDiagnosticVersion is not null
                     )

            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrCase,
                   4577650000000,
                   a.idfAggrCase,
                   null,
                   a.idfProphylacticVersion,
                   b.idfProphylacticVersion
            from @tlbAggrCase_BeforeEdit a
                inner join @tlbAggrCase_AfterEdit b
                    on a.idfAggrCase = b.idfAggrCase
            where (a.idfProphylacticVersion <> b.idfProphylacticVersion)
                  or (
                         a.idfProphylacticVersion is not null
                         and b.idfProphylacticVersion is null
                     )
                  or (
                         a.idfProphylacticVersion is null
                         and b.idfProphylacticVersion is not null
                     )

            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrCase,
                   4577660000000,
                   a.idfAggrCase,
                   null,
                   a.idfSanitaryVersion,
                   b.idfSanitaryVersion
            from @tlbAggrCase_BeforeEdit a
                inner join @tlbAggrCase_AfterEdit b
                    on a.idfAggrCase = b.idfAggrCase
            where (a.idfSanitaryVersion <> b.idfSanitaryVersion)
                  or (
                         a.idfSanitaryVersion is not null
                         and b.idfSanitaryVersion is null
                     )
                  or (
                         a.idfSanitaryVersion is null
                         and b.idfSanitaryVersion is not null
                     )

            insert into dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue
            )
            select @idfDataAuditEvent,
                   @idfObjectTable_tlbAggrCase,
                   4577670000000,
                   a.idfAggrCase,
                   null,
                   a.strCaseID,
                   b.strCaseID
            from @tlbAggrCase_BeforeEdit a
                inner join @tlbAggrCase_AfterEdit b
                    on a.idfAggrCase = b.idfAggrCase
            where (a.strCaseID <> b.strCaseID)
                  or (
                         a.strCaseID is not null
                         and b.strCaseID is null
                     )
                  or (
                         a.strCaseID is null
                         and b.strCaseID is not null
                     )

        --Data Audit
        END
        ELSE
        BEGIN
            INSERT INTO @SuppressSelect
            EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbAggrCase', @AggregateReportID OUTPUT;

            IF ISNULL(@EIDSSAggregateReportID, N'') = N''
               OR LEFT(ISNULL(@EIDSSAggregateReportID, N''), 4) = '(new'
            BEGIN
                DECLARE @ObjectName NVARCHAR(600);

                SET @ObjectName = CASE @AggregateReportTypeID
                                      WHEN 10102001 THEN
                                          'Human Aggregate Disease Report' --tstNextNumbers.idfsNumberName = 10057001
                                      WHEN 10102002 THEN
                                          'Vet Aggregate Disease Report'   --tstNextNumbers.idfsNumberName = 10057003
                                      WHEN 10102003 THEN
                                          'Vet Aggregate Action'           --tstNextNumbers.idfsNumberName = 10057002
                                  END;

                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NextNumber_GET @ObjectName,
                                                @EIDSSAggregateReportID OUTPUT,
                                                NULL;
            END

            SET @idfsDataAuditEventType = 10016001;
            SET @idfObject = @AggregateReportID;

            DECLARE @MatrixTypeID BIGINT;
            SET @MatrixTypeID = CASE @AggregateReportTypeID
                                    WHEN 10102001 -- Human Aggregate Disease Report
            THEN
                                        71190000000 --tstNextNumbers.idfsNumberName = 10057001
                                    WHEN 10102002 -- Veterinary Aggregate Disease Report
            THEN
                                        71090000000 --tstNextNumbers.idfsNumberName = 10057003
                                END;

            INSERT INTO dbo.tlbAggrCase
            (
                idfAggrCase,
                idfsAggrCaseType,
                idfsAdministrativeUnit,
                idfOffice,
                idfReceivedByOffice,
                idfReceivedByPerson,
                idfSentByOffice,
                idfSentByPerson,
                idfEnteredByOffice,
                idfEnteredByPerson,
                idfCaseObservation,
                idfDiagnosticObservation,
                idfProphylacticObservation,
                idfSanitaryObservation,
                idfVersion,
                idfDiagnosticVersion,
                idfProphylacticVersion,
                idfSanitaryVersion,
                datReceivedByDate,
                datSentByDate,
                datEnteredByDate,
                datStartDate,
                datFinishDate,
                strCaseID,
                idfsSite,
                AuditCreateDTM,
                AuditCreateUser,
                SourceSystemKeyValue,
                SourceSystemNameID
            )
            VALUES
            (@AggregateReportID,
             @AggregateReportTypeID,
             @GeographicalAdministrativeUnitID,
             @OrganizationalAdministrativeUnitID,
             @ReceivedByOrganizationID,
             @ReceivedByPersonID,
             @SentByOrganizationID,
             @SentByPersonID,
             @EnteredByOrganizationID,
             @EnteredByPersonID,
             @CaseObservationID,
             @DiagnosticObservationID,
             @ProphylacticObservationID,
             @SanitaryObservationID,
             @CaseVersion,
             @DiagnosticVersion,
             @ProphylacticVersion,
             @SanitaryVersion,
             @ReceivedByDate,
             @SentByDate,
             @EnteredByDate,
             @StartDate,
             @FinishDate,
             @EIDSSAggregateReportID,
             @SiteID,
             GETDATE(),
             @AuditUserName,
             '[{"idfAggrCase":' + CAST(@AggregateReportID AS NVARCHAR(300)) + '}]',
             10519001
            );

            --Data Audit--

            --Data Audit
            -- insert record into tauDataAuditEvent
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @idfUserID,
                                                      @idfSiteId,
                                                      @idfsDataAuditEventType,
                                                      @idfsObjectType,
                                                      @idfObject,
                                                      @idfObjectTable_tlbAggrCase,
                                                      @EIDSSAggregateReportID, 
                                                      @idfDataAuditEvent OUTPUT;

            UPDATE dbo.tauDataAuditEvent
            SET strMainObject = @EIDSSAggregateReportID
            WHERE idfDataAuditEvent = @idfDataAuditEvent;

            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                strObject
            )
            VALUES
            (@idfDataAuditEvent, @idfObjectTable_tlbAggrCase, @AggregateReportID, @EIDSSAggregateReportID);
            --Data Audit

            IF NOT @CaseObservationID IS NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_AGG_OBSERVATION_SET @CaseObservationID,
                                                 @CaseObservationFormTemplateID,
                                                 @idfDataAuditEvent;
                UPDATE dbo.tauDataAuditDetailCreate
                SET idfDataAuditEvent = @idfDataAuditEvent,
                    strObject = @EIDSSAggregateReportID
                WHERE idfObjectDetail = @CaseObservationID
                      AND idfDataAuditEvent IS NULL;

                UPDATE dbo.tauDataAuditDetailUpdate
                SET idfDataAuditEvent = @idfDataAuditEvent,
                    strObject = @EIDSSAggregateReportID
                WHERE idfObjectDetail = @CaseObservationID
                      AND idfDataAuditEvent IS NULL;
            END

            IF NOT @DiagnosticObservationID IS NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_AGG_OBSERVATION_SET @DiagnosticObservationID,
                                                 @DiagnosticObservationFormTemplateID,
                                                 @idfDataAuditEvent;
                UPDATE dbo.tauDataAuditDetailCreate
                SET idfDataAuditEvent = @idfDataAuditEvent,
                    strObject = @EIDSSAggregateReportID
                WHERE idfObjectDetail = @DiagnosticObservationID
                      AND idfDataAuditEvent IS NULL;

                UPDATE dbo.tauDataAuditDetailUpdate
                SET idfDataAuditEvent = @idfDataAuditEvent,
                    strObject = @EIDSSAggregateReportID
                WHERE idfObjectDetail = @DiagnosticObservationID
                      AND idfDataAuditEvent IS NULL;
            END

            IF NOT @ProphylacticObservationID IS NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_AGG_OBSERVATION_SET @ProphylacticObservationID,
                                                 @ProphylacticObservationFormTemplateID,
                                                 @idfDataAuditEvent;

                UPDATE dbo.tauDataAuditDetailCreate
                SET idfDataAuditEvent = @idfDataAuditEvent,
                    strObject = @EIDSSAggregateReportID
                WHERE idfObjectDetail = @ProphylacticObservationID
                      AND idfDataAuditEvent IS NULL;

                UPDATE dbo.tauDataAuditDetailUpdate
                SET idfDataAuditEvent = @idfDataAuditEvent,
                    strObject = @EIDSSAggregateReportID
                WHERE idfObjectDetail = @ProphylacticObservationID
                      AND idfDataAuditEvent IS NULL;
            END

            IF NOT @SanitaryObservationID IS NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_AGG_OBSERVATION_SET @SanitaryObservationID,
                                                 @SanitaryObservationFormTemplateID,
                                                 @idfDataAuditEvent;

                UPDATE dbo.tauDataAuditDetailCreate
                SET idfDataAuditEvent = @idfDataAuditEvent,
                    strObject = @EIDSSAggregateReportID
                WHERE idfObjectDetail = @SanitaryObservationID
                      AND idfDataAuditEvent IS NULL;

                UPDATE dbo.tauDataAuditDetailUpdate
                SET idfDataAuditEvent = @idfDataAuditEvent,
                    strObject = @EIDSSAggregateReportID
                WHERE idfObjectDetail = @SanitaryObservationID
                      AND idfDataAuditEvent IS NULL;

            END

            UPDATE @EventsTemp
            SET ObjectId = @AggregateReportID
            WHERE ObjectId = 0;
        END

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                            @EventTypeId,
                                            @EventUserId,
                                            @EventObjectId,
                                            @EventDiseaseId,
                                            @EventSiteId,
                                            @EventInformationString,
                                            @EventLoginSiteId,
                                            @EventLocationId,
                                            @AuditUserName;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        IF @@TRANCOUNT > 0
            COMMIT;

        SELECT @ReturnCode 'ReturnCode',
               @ReturnMessage 'ReturnMessage',
               @AggregateReportID 'AggregateReportID',
               @CaseVersion 'CaseVersion',
               @EIDSSAggregateReportID 'EIDSSAggregateReportID';
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_HumanAggregateCaseMatrixReport_DELETE]...';


GO
/*******************************************************
NAME						: [USP_CONF_AggregateCaseMatrixVersionReport_POST]	


Description					: Deletes Entries For Human Aggregate Case Matrix Report and Version

Author						: Lamont Mitchell

Revision History
		
			Name							Date								Change Detail
			Lamont Mitchell					01/24/19							Initial Created
--			Ann Xiong						02/21/2023							Implemented Data Audit
*******************************************************/
ALTER PROCEDURE [dbo].[USP_CONF_HumanAggregateCaseMatrixReport_DELETE]
@idfAggrHumanCaseMTX	BIGINT NULL,
@idfVersion				BIGINT NULL, 
@idfsDiagnosis			BIGINT NULL, 
@intNumRow				INT	

AS BEGIN
	DECLARE @returnMsg					VARCHAR(MAX) = 'SUCCESS';
	DECLARE @returnCode					BIGINT = 0;
	Declare @idfsReferenceType			BIGINT ;

	SET NOCOUNT ON;
		Declare @SupressSelect table
	( 
		retrunCode int,
		returnMessage varchar(200)
	)

	--Data Audit--
	declare @idfUserId BIGINT = NULL;
	declare @idfSiteId BIGINT = NULL;
	declare @idfsDataAuditEventType bigint = NULL;
	declare @idfsObjectType bigint = 10017003;                         -- Matrix for Aggregate Reports
	declare @idfObject bigint = @idfVersion;
	declare @idfObjectTable_tlbAggrHumanCaseMTX bigint = 12666620000000;
	declare @idfDataAuditEvent bigint= NULL;
	declare @idfObjectTable_tlbAggrMatrixVersionHeader bigint = 707330000000;

	-- Get and Set UserId and SiteId
	select @idfUserId =userInfo.UserId, @idfSiteId=UserInfo.SiteId from dbo.FN_UserSiteInformation('Administrator') userInfo

	--Data Audit--

	BEGIN TRY
		--Data Audit

		-- tauDataAuditEvent Event Type - Delete
		set @idfsDataAuditEventType =10016002;

		-- insert record into tauDataAuditEvent
		EXEC USSP_GBL_DataAuditEvent_GET @idfUserID,@idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbAggrHumanCaseMTX, @idfDataAuditEvent OUTPUT

		--Data Audit--

		DELETE FROM [dbo].[tlbAggrHumanCaseMTX] where [idfVersion] = @idfVersion

        -- Data audit
		INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
				SELECT @idfDataAuditEvent, @idfObjectTable_tlbAggrHumanCaseMTX, @idfObject
        -- End data audit

		DELETE FROM [tlbAggrMatrixVersionHeader]  where [idfVersion] = @idfVersion

        -- Data audit
		INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
				SELECT @idfDataAuditEvent, @idfObjectTable_tlbAggrMatrixVersionHeader, @idfObject
        -- End data audit

		SELECT @returnCode 'ReturnCode', @returnMsg 'ReturnMessage'
	END TRY
	BEGIN CATCH
				THROW;
		END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_HumanAggregateCaseMatrixReport_SET]...';


GO
-- ================================================================================================
-- Name: USP_CONF_HumanAggregateCaseMatrixReport_SET
--
-- Description: Saves Entries For Human Aggregate Case Matrix Report FROM A JSON STRING
-- 
-- Author: Lamont Mitchell
--
-- Revision History:
-- Name                         Date       Change Detail
-- ---------------------------- ---------- -------------------------------------------------------
-- Lamont Mitchell              03/04/2019 Initial Created
-- Stephen Long                 07/15/2022 Added site alert and renamed sproc to standard SET.
-- Leo Tracchia					10/24/2022 Removed select from @Disease for IdfVersion, replaced with @idfVersion
-- Ann Xiong					02/21/2023 Implemented Data Audit
-- Ann Xiong					03/08/2023 Added check for @idfDataAuditEvent IS NULL to only create @idfDataAuditEvent once
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_HumanAggregateCaseMatrixReport_SET]
    @idfAggrHumanCaseMTX BIGINT NULL,
    @idfVersion BIGINT NULL,
    @inJsonString VARCHAR(MAX) NULL,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
AS
BEGIN
    DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
            @ReturnCode BIGINT = 0,
            @idfsReferenceType BIGINT,
            @JsonString VARCHAR(MAX),
            @EventId BIGINT = -1,
            @EventSiteId BIGINT = @SiteId,
            @EventUserId BIGINT = @UserId,
            @EventDiseaseId BIGINT = NULL,
            @EventLocationId BIGINT = @LocationId,
            @EventInformationString NVARCHAR(MAX) = NULL,
            @EventLoginSiteId BIGINT = @SiteId;
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );
    DECLARE @Disease TABLE
    (
        IntNumRow INT,
        --IdfVersion BIGINT,
        IdfsDiagnosis BIGINT
    );

	--Data Audit--
	declare @idfUserId BIGINT = @UserId;
	declare @idfSiteId BIGINT = @SiteId;
	declare @idfsDataAuditEventType bigint = NULL;
	declare @idfsObjectType bigint = 10017003;                         -- Matrix for Aggregate Reports
	declare @idfObject bigint = @idfAggrHumanCaseMTX;
	declare @idfObjectTable_tlbAggrHumanCaseMTX bigint = 12666620000000;
	declare @idfDataAuditEvent bigint= NULL;

	DECLARE @tlbAggrHumanCaseMTX_BeforeEdit TABLE
	(
        		AggrHumanCaseMTXID BIGINT,
        		IntNumRow INT
	);
	DECLARE @tlbAggrHumanCaseMTX_AfterEdit TABLE
	(
        		AggrHumanCaseMTXID BIGINT,
        		IntNumRow INT
	);
	--Data Audit--

    SET NOCOUNT ON;

    BEGIN TRY
        SET @JsonString = @inJsonString;
        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbAggrHumanCaseMTX
            WHERE idfVersion = @idfVersion
        )
        BEGIN
            UPDATE dbo.tlbAggrHumanCaseMTX
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfVersion = @idfVersion;
        END

        INSERT INTO @Disease
        SELECT *
        FROM
            OPENJSON(@inJsonString)
            WITH
            (
                IntNumRow INT,
                --IdfVersion BIGINT,
                IdfsDiagnosis BIGINT
            );

        DECLARE @rowCount INT = 0;
        SET @rowCount =
        (
            SELECT MAX(IntNumRow) FROM @Disease
        );
        DECLARE @_int INT = 1;
        WHILE @_int <= @rowCount
        BEGIN
            IF EXISTS
            (
                SELECT *
                FROM dbo.tlbAggrHumanCaseMTX
                WHERE idfVersion = @idfVersion
                      AND idfsDiagnosis =
                      (
                          SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                      )
            )
            BEGIN
                DECLARE @aggHumanCaseMtxId BIGINT;
                SET @aggHumanCaseMtxId =
                (
                    SELECT idfAggrHumanCaseMTX
                    FROM dbo.tlbAggrHumanCaseMTX
                    WHERE idfVersion = @idfVersion
                          AND idfsDiagnosis =
                          (
                              SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                          )
                );

                -- Data audit
                INSERT INTO @tlbAggrHumanCaseMTX_BeforeEdit
                (
                        AggrHumanCaseMTXID,
                        intNumRow
                 )
                 SELECT 	idfAggrHumanCaseMTX,
                    		intNumRow
                 FROM		dbo.tlbAggrHumanCaseMTX
                 WHERE		idfVersion = @idfVersion
                          AND idfsDiagnosis =
                          (
                              SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                          )

                -- End data audit

                UPDATE dbo.tlbAggrHumanCaseMTX
                SET intRowStatus = 0,
                    intNumRow = @_int,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfsDiagnosis =
                (
                    SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                )
                      AND idfVersion = @IdfVersion
                      --(
                      --    SELECT IdfVersion FROM @Disease WHERE IntNumRow = @_int
                      --)
                      AND idfAggrHumanCaseMTX = @aggHumanCaseMtxId;

                -- Data audit
                INSERT INTO @tlbAggrHumanCaseMTX_AfterEdit
                (
                        AggrHumanCaseMTXID,
                        IntNumRow
                 )
                 SELECT 	idfAggrHumanCaseMTX,
                    		intNumRow
                 FROM		dbo.tlbAggrHumanCaseMTX
                 WHERE		idfVersion = @idfVersion
                          AND idfsDiagnosis =
                          (
                              SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                          )

        	    IF @idfDataAuditEvent IS NULL
        	    BEGIN 
					--  tauDataAuditEvent  Event Type- Edit 
					set @idfsDataAuditEventType =10016003;
					-- insert record into tauDataAuditEvent - 
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@aggHumanCaseMtxId, @idfObjectTable_tlbAggrHumanCaseMTX, @idfDataAuditEvent OUTPUT
				END

                INSERT INTO dbo.tauDataAuditDetailUpdate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue
                    )
                    SELECT @idfDataAuditEvent,
                           @idfObjectTable_tlbAggrHumanCaseMTX,
                           12666660000000,
                           a.AggrHumanCaseMTXID,
                           NULL,
                           b.IntNumRow,
                           a.IntNumRow
                    FROM @tlbAggrHumanCaseMTX_AfterEdit AS a
                        FULL JOIN @tlbAggrHumanCaseMTX_BeforeEdit AS b
                            ON a.AggrHumanCaseMTXID = b.AggrHumanCaseMTXID
                    WHERE (a.IntNumRow <> b.IntNumRow)
                          OR (
                                 a.IntNumRow IS NOT NULL
                                 AND b.IntNumRow IS NULL
                             )
                          OR (
                                 a.IntNumRow IS NULL
                                 AND b.IntNumRow IS NOT NULL
                             );
                -- End data audit
            END
            ELSE
            BEGIN
                IF EXISTS (SELECT * FROM @Disease WHERE IntNumRow = @_int)
                BEGIN
                    INSERT INTO @SuppressSelect
                    EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbAggrHumanCaseMTX',
                                                   @idfAggrHumanCaseMTX OUTPUT;

                    INSERT INTO dbo.tlbAggrHumanCaseMTX
                    (
                        idfAggrHumanCaseMTX,
                        idfVersion,
                        idfsDiagnosis,
                        intNumRow,
                        intRowStatus,
                        AuditCreateDTM,
                        AuditCreateUser
                    )
                    SELECT @idfAggrHumanCaseMTX,
                           @IdfVersion,
                           IdfsDiagnosis,
                           IntNumRow,
                           0,
                           GETDATE(),
                           @AuditUserName
                    FROM @Disease
                    WHERE IntNumRow = @_int;

					--Data Audit--

        	        IF @idfDataAuditEvent IS NULL
        	        BEGIN 
						-- tauDataAuditEvent Event Type - Create 
						set @idfsDataAuditEventType =10016001;
						-- insert record into tauDataAuditEvent - 
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfAggrHumanCaseMTX, @idfObjectTable_tlbAggrHumanCaseMTX, @idfDataAuditEvent OUTPUT
					END

					INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject )
						values ( @idfDataAuditEvent, @idfObjectTable_tlbAggrHumanCaseMTX, @idfAggrHumanCaseMTX)
					--Data Audit--
                END
            END

            SET @_int = @_int + 1;
        END

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                        @EventTypeId,
                                        @EventUserId,
                                        @idfAggrHumanCaseMTX,
                                        @EventDiseaseId,
                                        @EventSiteId,
                                        @EventInformationString,
                                        @EventLoginSiteId,
                                        @EventLocationId,
                                        @AuditUserName;

        SELECT @ReturnCode AS 'ReturnCode',
               @ReturnMessage AS 'ReturnMessage',
               @idfAggrHumanCaseMTX AS 'idfAggrHumanCaseMTX';
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_HumanAggregateCaseMatrixReportRecord_DELETE]...';


GO
/*******************************************************
NAME						: [USP_CONF_HumanAggregateCaseMatrixReportRecord_DELETE]


Description					: Deletes Entries For Human Aggregate Case Matrix Report 

Author						: Lamont Mitchell

Revision History
		
			Name							Date								Change Detail
			Lamont Mitchell					3/12/19								Initial Created
--			Ann Xiong						02/22/2023							Implemented Data Audit
*******************************************************/
ALTER PROCEDURE [dbo].[USP_CONF_HumanAggregateCaseMatrixReportRecord_DELETE]
@idfAggrHumanCaseMTX	BIGINT

AS 
BEGIN
	DECLARE @returnMsg					VARCHAR(MAX) = 'SUCCESS';
	DECLARE @returnCode					BIGINT = 0;
	SET NOCOUNT ON;

	--Data Audit--
	declare @idfUserId BIGINT = NULL;
	declare @idfSiteId BIGINT = NULL;
	declare @idfsDataAuditEventType bigint = NULL;
	declare @idfsObjectType bigint = 10017003;                         -- Matrix for Aggregate Reports
	declare @idfObject bigint = @idfAggrHumanCaseMTX;
	declare @idfObjectTable_tlbAggrHumanCaseMTX bigint = 12666620000000;
	declare @idfDataAuditEvent bigint= NULL;

	-- Get and Set UserId and SiteId
	select @idfUserId =userInfo.UserId, @idfSiteId=UserInfo.SiteId from dbo.FN_UserSiteInformation('Administrator') userInfo

	--Data Audit--

	BEGIN TRY
			IF EXISTS (SELECT * FROM [dbo].[tlbAggrHumanCaseMTX] WHERE idfAggrHumanCaseMTX = @idfAggrHumanCaseMTX)
			BEGIN
					
				DELETE FROM [tlbAggrHumanCaseMTX] WHERE idfAggrHumanCaseMTX = @idfAggrHumanCaseMTX ;

				--Data Audit

				-- tauDataAuditEvent Event Type - Delete
				set @idfsDataAuditEventType =10016002;

				-- insert record into tauDataAuditEvent
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserID,@idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbAggrHumanCaseMTX, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
					SELECT @idfDataAuditEvent, @idfObjectTable_tlbAggrHumanCaseMTX, @idfObject
				-- End data audit

				Print 'Deleted';
			END
			SELECT @returnCode 'ReturnCode', @returnMsg 'ReturnMessage',@idfAggrHumanCaseMTX 'idfAggrHumanCaseMTX'
		END TRY
		BEGIN CATCH
				THROW;
		END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_HumanAggregateCaseMatrixVersion_DELETE]...';


GO
/*******************************************************
NAME						: [USP_CONF_HumanAggregateCaseMatrixVersion_DELETE]		


Description					: Deletes[o Entries For Human Aggregate Case Matrix Version

Author						: Lamont Mitchell

Revision History
		
			Name							Date								Change Detail
			Lamont Mitchell					01/24/19							Initial Created
--			Ann Xiong						02/21/2023							Implemented Data Audit
*******************************************************/
ALTER PROCEDURE [dbo].[USP_CONF_HumanAggregateCaseMatrixVersion_DELETE]
	
@idfVersion								BIGINT = NULL
AS BEGIN
	DECLARE @returnMsg					VARCHAR(MAX) = 'SUCCESS';
	DECLARE @returnCode					BIGINT = 0;
	SET NOCOUNT ON;

	--Data Audit--
	declare @idfUserId BIGINT = NULL;
	declare @idfSiteId BIGINT = NULL;
	declare @idfsDataAuditEventType bigint = NULL;
	declare @idfsObjectType bigint = 10017003;                         -- Matrix for Aggregate Reports
	declare @idfObject bigint = @idfVersion;
	declare @idfDataAuditEvent bigint= NULL;
	declare @idfObjectTable_tlbAggrMatrixVersionHeader bigint = 707330000000;

	-- Get and Set UserId and SiteId
	select @idfUserId =userInfo.UserId, @idfSiteId=UserInfo.SiteId from dbo.FN_UserSiteInformation('Administrator') userInfo

	--End data audit

	BEGIN TRY
			IF EXISTS(SELECT * from [tlbAggrMatrixVersionHeader] WHERE idfVersion =  @idfVersion )
			 BEGIN
				DELETE FROM [tlbAggrMatrixVersionHeader] WHERE idfVersion =  @idfVersion 

			--Data Audit

			-- tauDataAuditEvent Event Type - Delete
			set @idfsDataAuditEventType =10016002;

			-- insert record into tauDataAuditEvent
			EXEC USSP_GBL_DataAuditEvent_GET @idfUserID,@idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbAggrMatrixVersionHeader, @idfDataAuditEvent OUTPUT

			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
				SELECT @idfDataAuditEvent, @idfObjectTable_tlbAggrMatrixVersionHeader, @idfObject
            -- End data audit

				SELECT @returnCode 'ReturnCode', @returnMsg 'ReturnMessage'
			 END
			ELSE
			BEGIN
				SET @returnMsg = 'Record does not exists'
				SELECT @returnCode 'ReturnCode', @returnMsg 'ReturnMessage'
			END
		END TRY
		BEGIN CATCH
				THROW;
		END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_HumanAggregateCaseMatrixVersion_SET]...';


GO
-- ================================================================================================
-- Name: USP_CONF_HumanAggregateCaseMatrixVersion_SET
--
-- Description: Saves Entries For Human Aggregate Case Matrix Version
--
-- Author: Lamont Mitchell
-- 
-- Revision History:
-- Name                    Date       Change Detail
-- ----------------------- ---------- ------------------------------------------------------------
-- Lamont Mitchell         01/24/2019 Initial Created
-- Stephen Long            08/17/2022 Renamed to meet standard, and added site alert logic.
-- Ann Xiong			   02/21/2023 Implemented Data Audit
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_HumanAggregateCaseMatrixVersion_SET]
    @idfVersion BIGINT = NULL,
    @idfsMatrixType BIGINT,
    @datStartDate DATETIME,
    @MatrixName NVARCHAR(200),
    @blnIsActive BIT = 0,
    @blnIsDefault BIT = 0,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
AS
BEGIN
    DECLARE @ReturnMessage VARCHAR(MAX) = 'SUCCESS',
            @ReturnCode BIGINT = 0,
            @idfsReferenceType BIGINT,
            @EventId BIGINT = -1,
            @EventSiteId BIGINT = @SiteId,
            @EventUserId BIGINT = @UserId,
            @EventDiseaseId BIGINT = NULL,
            @EventLocationId BIGINT = @LocationId,
            @EventInformationString NVARCHAR(MAX) = NULL,
            @EventLoginSiteId BIGINT = @SiteId;
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage VARCHAR(200)
    );

	--Data Audit--
	declare @idfUserId BIGINT = NULL;
	declare @idfSiteId BIGINT = NULL;
	declare @idfsDataAuditEventType bigint = NULL;
	declare @idfsObjectType bigint = 10017003;                         -- Matrix for Aggregate Reports
	declare @idfObject bigint = @idfVersion;
	declare @idfDataAuditEvent bigint= NULL;
	declare @idfObjectTable_tlbAggrMatrixVersionHeader bigint = 707330000000;

	DECLARE @tlbAggrMatrixVersionHeader_BeforeEdit TABLE
	(
        	VersionID BIGINT,
        	MatrixName varchar(200),
      		StartDate datetime,
      		IsActive BIT, 
      		IsDefault BIT
	);
	DECLARE @tlbAggrMatrixVersionHeader_AfterEdit TABLE
	(
        	VersionID BIGINT,
        	MatrixName varchar(200),
      		StartDate datetime,
      		IsActive BIT, 
      		IsDefault BIT
	);

	-- Get and Set UserId and SiteId
	select @idfUserId =userInfo.UserId, @idfSiteId=UserInfo.SiteId from dbo.FN_UserSiteInformation(@AuditUserName) userInfo

	--Data Audit--

    SET NOCOUNT ON;
    BEGIN TRY
        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbAggrMatrixVersionHeader
            WHERE idfVersion = @idfVersion
        )
        BEGIN
            IF @blnIsActive = 1
            BEGIN
                UPDATE dbo.tlbAggrMatrixVersionHeader
                SET blnIsActive = 0,
                    blnIsDefault = 0,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfsMatrixType = @idfsMatrixType;
            END

            -- Data audit
            INSERT INTO @tlbAggrMatrixVersionHeader_BeforeEdit
            (
                VersionID,
                MatrixName,
                StartDate,
      			IsActive, 
      			IsDefault
             )
             SELECT 	idfVersion,
                    	MatrixName,
                    	datStartDate,
                    	blnIsActive,
                    	blnIsDefault
            FROM 		dbo.tlbAggrMatrixVersionHeader
            WHERE 		idfVersion = @idfVersion

            -- End data audit

            UPDATE dbo.tlbAggrMatrixVersionHeader
            SET MatrixName = @MatrixName,
                datStartDate = @datStartDate,
                blnIsActive = @blnIsActive,
                intRowStatus = 0,
                blnIsDefault = @blnIsDefault,
                strMaintenanceFlag = NULL,
                strReservedAttribute = NULL,
                AuditCreateDTM = GETDATE(),
                AuditCreateUser = @AuditUserName
            WHERE idfVersion = @idfVersion;

            -- Data audit
            INSERT INTO @tlbAggrMatrixVersionHeader_AfterEdit
            (
                VersionID,
                MatrixName,
                StartDate,
      			IsActive, 
      			IsDefault
             )
             SELECT 	idfVersion,
                    	MatrixName,
                    	datStartDate,
                    	blnIsActive,
                    	blnIsDefault
            FROM 		dbo.tlbAggrMatrixVersionHeader
            WHERE 		idfVersion = @idfVersion

			--  tauDataAuditEvent  Event Type- Edit 
			set @idfsDataAuditEventType =10016003;
			-- insert record into tauDataAuditEvent - 
			EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfVersion, @idfObjectTable_tlbAggrMatrixVersionHeader, @idfDataAuditEvent OUTPUT

				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, idfObjectTable, idfColumn, 
					idfObject, idfObjectDetail, 
					strOldValue, strNewValue)
				select @idfDataAuditEvent,@idfObjectTable_tlbAggrMatrixVersionHeader, 707360000000,
					a.VersionID,null,
					a.MatrixName,b.MatrixName
				from @tlbAggrMatrixVersionHeader_BeforeEdit a  inner join @tlbAggrMatrixVersionHeader_AfterEdit b on a.VersionID = b.VersionID
				where (a.MatrixName <> b.MatrixName) 
					or(a.MatrixName is not null and b.MatrixName is null)
					or(a.MatrixName is null and b.MatrixName is not null)

				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, idfObjectTable, idfColumn, 
					idfObject, idfObjectDetail, 
					strOldValue, strNewValue)
				select @idfDataAuditEvent,@idfObjectTable_tlbAggrMatrixVersionHeader, 707370000000,
					a.VersionID,null,
					a.StartDate,b.StartDate
				from @tlbAggrMatrixVersionHeader_BeforeEdit a  inner join @tlbAggrMatrixVersionHeader_AfterEdit b on a.VersionID = b.VersionID
				where (a.StartDate <> b.StartDate) 
					or(a.StartDate is not null and b.StartDate is null)
					or(a.StartDate is null and b.StartDate is not null)

				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, idfObjectTable, idfColumn, 
					idfObject, idfObjectDetail, 
					strOldValue, strNewValue)
				select @idfDataAuditEvent,@idfObjectTable_tlbAggrMatrixVersionHeader, 707380000000,
					a.VersionID,null,
					a.IsActive,b.IsActive
				from @tlbAggrMatrixVersionHeader_BeforeEdit a  inner join @tlbAggrMatrixVersionHeader_AfterEdit b on a.VersionID = b.VersionID
				where (a.IsActive <> b.IsActive) 
					or(a.IsActive is not null and b.IsActive is null)
					or(a.IsActive is null and b.IsActive is not null)

				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, idfObjectTable, idfColumn, 
					idfObject, idfObjectDetail, 
					strOldValue, strNewValue)
				select @idfDataAuditEvent,@idfObjectTable_tlbAggrMatrixVersionHeader, 840870000000,
					a.VersionID,null,
					a.IsDefault,b.IsDefault
				from @tlbAggrMatrixVersionHeader_BeforeEdit a  inner join @tlbAggrMatrixVersionHeader_AfterEdit b on a.VersionID = b.VersionID
				where (a.IsDefault <> b.IsDefault) 
					or(a.IsDefault is not null and b.IsDefault is null)
					or(a.IsDefault is null and b.IsDefault is not null)

               -- End data audit

        END
        ELSE
        BEGIN
            INSERT INTO @SuppressSelect
            EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbAggrMatrixVersionHeader',
                                           @idfVersion OUTPUT;
            INSERT INTO dbo.tlbAggrMatrixVersionHeader
            (
                idfVersion,
                idfsMatrixType,
                MatrixName,
                datStartDate,
                blnIsActive,
                blnIsDefault,
                AuditCreateDTM
            )
            VALUES
            (@idfVersion, @idfsMatrixType, @MatrixName, @datStartDate, @blnIsActive, @blnIsDefault, GETDATE())

			--Data Audit--
			-- tauDataAuditEvent Event Type - Create 
			set @idfsDataAuditEventType =10016001;
			-- insert record into tauDataAuditEvent - 
			EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfVersion, @idfObjectTable_tlbAggrMatrixVersionHeader, @idfDataAuditEvent OUTPUT

			INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject )
						values ( @idfDataAuditEvent, @idfObjectTable_tlbAggrMatrixVersionHeader, @idfVersion)
            -- End data audit
        END

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                        @EventTypeId,
                                        @EventUserId,
                                        @idfVersion,
                                        @EventDiseaseId,
                                        @EventSiteId,
                                        @EventInformationString,
                                        @EventLoginSiteId,
                                        @EventLocationId,
                                        @AuditUserName;

        SELECT idfVersion,
               idfsMatrixType,
               MatrixName,
               datStartDate,
               blnIsActive,
               blnIsDefault,
               @ReturnCode 'ReturnCode',
               @ReturnMessage 'ReturnMessage'
        FROM dbo.tlbAggrMatrixVersionHeader
        WHERE idfVersion = @idfVersion;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_ProphylacticMatrixReportRecord_DELETE]...';


GO
/*******************************************************
NAME						: [USP_CONF_ProphylacticMatrixReportRecord_DELETE]


Description					: Deletes Entries For Prophylactic Matrix Report 

Author						: Lamont Mitchell

Revision History
		
			Name							Date								Change Detail
			Lamont Mitchell					3/12/19								Initial Created
			Ann Xiong						02/24/2023							Implemented Data Audit
*******************************************************/
ALTER PROCEDURE [dbo].[USP_CONF_ProphylacticMatrixReportRecord_DELETE]	
@idfAggrProphylacticActionMTX		BIGINT
AS 
BEGIN
	DECLARE @returnMsg					VARCHAR(MAX) = 'SUCCESS';
	DECLARE @returnCode					BIGINT = 0;
	SET NOCOUNT ON;

	--Data Audit--
	declare @idfUserId BIGINT = NULL;
	declare @idfSiteId BIGINT = NULL;
	declare @idfsDataAuditEventType bigint = NULL;
	declare @idfsObjectType bigint = 10017003;                         -- Matrix for Aggregate Reports
	declare @idfObject bigint = @idfAggrProphylacticActionMTX;
	declare @idfObjectTable_tlbAggrProphylacticActionMTX bigint = 75440000000;
	declare @idfDataAuditEvent bigint= NULL;

	-- Get and Set UserId and SiteId
	select @idfUserId =userInfo.UserId, @idfSiteId=UserInfo.SiteId from dbo.FN_UserSiteInformation('Administrator') userInfo

	--Data Audit--

	BEGIN TRY
			IF EXISTS (SELECT * FROM [dbo].[tlbAggrProphylacticActionMTX] WHERE idfAggrProphylacticActionMTX = @idfAggrProphylacticActionMTX)
			BEGIN
					
				DELETE FROM [dbo].[tlbAggrProphylacticActionMTX] WHERE idfAggrProphylacticActionMTX = @idfAggrProphylacticActionMTX ;

				--Data Audit

				-- tauDataAuditEvent Event Type - Delete
				set @idfsDataAuditEventType =10016002;

				-- insert record into tauDataAuditEvent
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserID,@idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbAggrProphylacticActionMTX, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
					SELECT @idfDataAuditEvent, @idfObjectTable_tlbAggrProphylacticActionMTX, @idfObject
				-- End data audit

				Print 'Deleted';
			END
			SELECT @returnCode 'ReturnCode', @returnMsg 'ReturnMessage',@idfAggrProphylacticActionMTX 'idfAggrHumanCaseMTX'
		END TRY
		BEGIN CATCH
				THROW;
		END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_SanitaryMatrixReportRecord_DELETE]...';


GO
/*******************************************************
NAME						: [USP_CONF_SanitaryMatrixReportRecord_DELETE]


Description					: Deletes Entries For Sanitary Matrix Report 

Author						: Lamont Mitchell

Revision History
		
			Name							Date								Change Detail
			Lamont Mitchell					3/12/19								Initial Created
			Ann Xiong						02/24/2023							Implemented Data Audit
*******************************************************/
ALTER PROCEDURE [dbo].[USP_CONF_SanitaryMatrixReportRecord_DELETE]	
@idfAggrSanitaryActionMTX		BIGINT
AS 
BEGIN
	DECLARE @returnMsg					VARCHAR(MAX) = 'SUCCESS';
	DECLARE @returnCode					BIGINT = 0;

	--Data Audit--
	declare @idfUserId BIGINT = NULL;
	declare @idfSiteId BIGINT = NULL;
	declare @idfsDataAuditEventType bigint = NULL;
	declare @idfsObjectType bigint = 10017003;                         -- Matrix for Aggregate Reports
	declare @idfObject bigint = @idfAggrSanitaryActionMTX;
	declare @idfObjectTable_tlbAggrSanitaryActionMTX bigint = 12666690000000;
	declare @idfDataAuditEvent bigint= NULL;

	-- Get and Set UserId and SiteId
	select @idfUserId =userInfo.UserId, @idfSiteId=UserInfo.SiteId from dbo.FN_UserSiteInformation('Administrator') userInfo

	--Data Audit--

	SET NOCOUNT ON;

	BEGIN TRY
			IF EXISTS (SELECT * FROM [dbo].[tlbAggrSanitaryActionMTX] WHERE idfAggrSanitaryActionMTX = @idfAggrSanitaryActionMTX)
			BEGIN
					
				DELETE FROM [tlbAggrSanitaryActionMTX] WHERE idfAggrSanitaryActionMTX = @idfAggrSanitaryActionMTX ;

				--Data Audit

				-- tauDataAuditEvent Event Type - Delete
				set @idfsDataAuditEventType =10016002;

				-- insert record into tauDataAuditEvent
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserID,@idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbAggrSanitaryActionMTX, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
					SELECT @idfDataAuditEvent, @idfObjectTable_tlbAggrSanitaryActionMTX, @idfObject
				-- End data audit

				Print 'Deleted';
			END
			SELECT @returnCode 'ReturnCode', @returnMsg 'ReturnMessage',@idfAggrSanitaryActionMTX 'idfAggrHumanCaseMTX'
		END TRY
		BEGIN CATCH
		Select @returnCode = 1;
		Select @returnMsg = @@ERROR;
				THROW;
				
		END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_VETAggregateCaseMatrixReportRecord_DELETE]...';


GO
/*******************************************************
NAME						: [USP_CONF_VETAggregateCaseMatrixReportRecord_DELETE]


Description					: Deletes Entries For VET Aggregate Case Matrix Report 

Author						: Lamont Mitchell

Revision History
		
			Name							Date								Change Detail
			Lamont Mitchell					3/12/19								Initial Created
--			Ann Xiong						02/23/2023							Implemented Data Audit
*******************************************************/
ALTER PROCEDURE [dbo].[USP_CONF_VETAggregateCaseMatrixReportRecord_DELETE]	
@idfAggrVetCaseMTX	BIGINT
AS 
BEGIN
	DECLARE @returnMsg					VARCHAR(MAX) = 'SUCCESS';
	DECLARE @returnCode					BIGINT = 0;
	SET NOCOUNT ON;

	--Data Audit--
	declare @idfUserId BIGINT = NULL;
	declare @idfSiteId BIGINT = NULL;
	declare @idfsDataAuditEventType bigint = NULL;
	declare @idfsObjectType bigint = 10017003;                         -- Matrix for Aggregate Reports
	declare @idfObject bigint = @idfAggrVetCaseMTX;
	declare @idfObjectTable_tlbAggrVetCaseMTX bigint = 75450000000;
	declare @idfDataAuditEvent bigint= NULL;

	-- Get and Set UserId and SiteId
	select @idfUserId =userInfo.UserId, @idfSiteId=UserInfo.SiteId from dbo.FN_UserSiteInformation('Administrator') userInfo

	--Data Audit--

	BEGIN TRY
			IF EXISTS (SELECT * FROM [dbo].[tlbAggrVetCaseMTX] WHERE idfAggrVetCaseMTX = @idfAggrVetCaseMTX)
			BEGIN					
				DELETE FROM [tlbAggrVetCaseMTX] WHERE idfAggrVetCaseMTX = @idfAggrVetCaseMTX ;

				--Data Audit

				-- tauDataAuditEvent Event Type - Delete
				set @idfsDataAuditEventType =10016002;

				-- insert record into tauDataAuditEvent
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserID,@idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbAggrVetCaseMTX, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
					SELECT @idfDataAuditEvent, @idfObjectTable_tlbAggrVetCaseMTX, @idfObject
				-- End data audit

				Print 'Deleted';
			END
			SELECT @returnCode 'ReturnCode', @returnMsg 'ReturnMessage',@idfAggrVetCaseMTX 'idfAggrVetCaseMTX'
		END TRY
		BEGIN CATCH
				THROW;
		END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_VetDiagnosisMatrixReportRecord_DELETE]...';


GO
/*******************************************************
NAME						: [USP_CONF_VetDiagnosisMatrixReportRecord_DELETE]


Description					: Deletes Entries For Vet Diagnosis Matrix Report FROM A JSON STRING

Author						: Lamont Mitchell

Revision History
		
			Name							Date								Change Detail
			Lamont Mitchell					3/12/19								Initial Created
			Ann Xiong						02/23/2023							Implemented Data Audit
*******************************************************/
ALTER PROCEDURE [dbo].[USP_CONF_VetDiagnosisMatrixReportRecord_DELETE]
	

@idfAggrDiagnosticActionMTX 	BIGINT

AS 
BEGIN
	DECLARE @returnMsg					VARCHAR(MAX) = 'SUCCESS';
	DECLARE @returnCode					BIGINT = 0;
	Declare @idfsReferenceType			BIGINT ;
	Declare @JsonString				 Varchar(Max); 

	--Data Audit--
	declare @idfUserId BIGINT = NULL;
	declare @idfSiteId BIGINT = NULL;
	declare @idfsDataAuditEventType bigint = NULL;
	declare @idfsObjectType bigint = 10017003;                         -- Matrix for Aggregate Reports
	declare @idfObject bigint = @idfAggrDiagnosticActionMTX;
	declare @idfObjectTable_tlbAggrDiagnosticActionMTX bigint = 75430000000;
	declare @idfDataAuditEvent bigint= NULL;

	-- Get and Set UserId and SiteId
	select @idfUserId =userInfo.UserId, @idfSiteId=UserInfo.SiteId from dbo.FN_UserSiteInformation('Administrator') userInfo

	--Data Audit--

	SET NOCOUNT ON;

	BEGIN TRY
			IF EXISTS (SELECT * FROM [dbo].[tlbAggrDiagnosticActionMTX] WHERE idfAggrDiagnosticActionMTX = @idfAggrDiagnosticActionMTX)
			BEGIN
					
				DELETE FROM [tlbAggrDiagnosticActionMTX] WHERE idfAggrDiagnosticActionMTX = @idfAggrDiagnosticActionMTX ;

				--Data Audit

				-- tauDataAuditEvent Event Type - Delete
				set @idfsDataAuditEventType =10016002;

				-- insert record into tauDataAuditEvent
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserID,@idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_tlbAggrDiagnosticActionMTX, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
					SELECT @idfDataAuditEvent, @idfObjectTable_tlbAggrDiagnosticActionMTX, @idfObject
				-- End data audit

				Print 'Deleted';
			END
			SELECT @returnCode 'ReturnCode', @returnMsg 'ReturnMessage',@idfAggrDiagnosticActionMTX 'idfAggrHumanCaseMTX'
		END TRY
		BEGIN CATCH
				THROW;
		END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_VeterinaryAggregateCaseMatrixReport_SET]...';


GO
-- ================================================================================================
-- Name: USP_CONF_VeterinaryAggregateCaseMatrixReport_SET
--
-- Description: Saves entries for veterinary aggregate case matrix report.
-- 
-- Author: Lamont Mitchell
--
-- Revision History:
-- Name                         Date       Change Detail
-- ---------------------------- ---------- -------------------------------------------------------
-- Lamont Mitchell              03/04/2019 Initial Created
-- Stephen Long                 07/15/2022 Added site alert and renamed sproc to standard SET.
-- Leo Tracchia					10/24/2022 Removed select from @Disease for IdfVersion, replaced with @idfVersion
-- Ann Xiong					02/23/2023 Implemented Data Audit
-- Ann Xiong					03/08/2023 Added check for @idfDataAuditEvent IS NULL to only create @idfDataAuditEvent once
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_VeterinaryAggregateCaseMatrixReport_SET]
    @idfAggrVetCaseMTX BIGINT NULL,
    @idfVersion BIGINT NULL,
    @inJsonString VARCHAR(MAX) NULL,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
AS
BEGIN
    DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
            @ReturnCode BIGINT = 0,
            @idfsReferenceType BIGINT,
            @JsonString VARCHAR(MAX),
            @EventId BIGINT = -1,
            @EventSiteId BIGINT = @SiteId,
            @EventUserId BIGINT = @UserId,
            @EventDiseaseId BIGINT = NULL,
            @EventLocationId BIGINT = @LocationId,
            @EventInformationString NVARCHAR(MAX) = NULL,
            @EventLoginSiteId BIGINT = @SiteId;
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );
    Declare @Disease Table
    (
        IntNumRow INT,
        IdfAggrVetCaseMTX BIGINT,
        --IdfVersion BIGINT,
        IdfsDiagnosis BIGINT,
        IdfsSpeciesType BIGINT
    );

	--Data Audit--
	declare @idfsDataAuditEventType bigint = NULL;
	declare @idfsObjectType bigint = 10017003;                         -- Matrix for Aggregate Reports
	declare @idfObject bigint = @idfAggrVetCaseMTX;
	declare @idfObjectTable_tlbAggrVetCaseMTX bigint = 75450000000;
	declare @idfDataAuditEvent bigint= NULL;

	DECLARE @tlbAggrVetCaseMTX_BeforeEdit TABLE
	(
        		AggrVetCaseMTXID BIGINT,
        		IntNumRow INT
	);
	DECLARE @tlbAggrVetCaseMTX_AfterEdit TABLE
	(
        		AggrVetCaseMTXID BIGINT,
        		IntNumRow INT
	);

	--Data Audit--

    SET NOCOUNT ON;

    BEGIN TRY
        SET @JsonString = @inJsonString;
        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbAggrVetCaseMTX
            WHERE idfVersion = @idfVersion
        )
        BEGIN
            UPDATE dbo.tlbAggrVetCaseMTX
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfVersion = @idfVersion;

        END

        INSERT INTO @Disease
        (
            IdfAggrVetCaseMTX,
            --IdfVersion,
            IdfsDiagnosis,
            IdfsSpeciesType,
            IntNumRow
        )
        SELECT *
        FROM
            OPENJSON(@JsonString)
            WITH
            (
                IdfAggrVetCaseMTX BIGINT,
                --IdfVersion BIGINT,
                IdfsDiagnosis BIGINT,
                IdfsSpeciesType BIGINT,
                IntNumRow INT
            )
        DECLARE @rowCount INT = 0;
        SET @rowCount =
        (
            SELECT MAX(IntNumRow) FROM @Disease
        );
        DECLARE @_int INT = 1;
        WHILE @_int <= @rowCount
        BEGIN
            IF EXISTS
            (
                SELECT *
                FROM dbo.tlbAggrVetCaseMTX
                WHERE idfVersion = @idfVersion
					--(
					--	SELECT IdfVersion FROM @Disease WHERE IntNumRow = @_int
					--)
                      AND idfsDiagnosis =
                      (
                          SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                      )
                      AND idfsSpeciesType =
                      (
                          SELECT IdfsSpeciesType FROM @Disease WHERE IntNumRow = @_int
                      )
            )
            BEGIN
                DECLARE @aggVeterinaryCaseMtxId BIGINT;
                SET @aggVeterinaryCaseMtxId =
                (
                    SELECT idfAggrVetCaseMTX
                    FROM dbo.tlbAggrVetCaseMTX
                    WHERE idfVersion = @idfVersion
                          AND idfsDiagnosis =
                          (
                              SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                          )
                          AND idfsSpeciesType =
                          (
                              SELECT IdfsSpeciesType FROM @Disease WHERE IntNumRow = @_int
                          )
                )

                -- Data audit
                INSERT INTO @tlbAggrVetCaseMTX_BeforeEdit
                (
                        AggrVetCaseMTXID,
                        IntNumRow
                 )
                 SELECT 	idfAggrVetCaseMTX,
                    		intNumRow
                 FROM		dbo.tlbAggrVetCaseMTX
                 WHERE		idfVersion = @idfVersion
                          AND idfsDiagnosis =
                          (
                              SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                          )
                      AND idfsSpeciesType =
                      (
                          SELECT IdfsSpeciesType FROM @Disease WHERE IntNumRow = @_int
                      );

                -- End data audit

                UPDATE dbo.tlbAggrVetCaseMTX
                SET intRowStatus = 0,
                    intNumRow = @_int,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfsDiagnosis =
                (
                    SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                )
                      AND idfVersion = @idfVersion
                      --(
                      --    SELECT IdfVersion FROM @Disease WHERE IntNumRow = @_int
                      --)
                      AND idfsSpeciesType =
                      (
                          SELECT IdfsSpeciesType FROM @Disease WHERE IntNumRow = @_int
                      );

                -- Data audit
                INSERT INTO @tlbAggrVetCaseMTX_AfterEdit
                (
                        AggrVetCaseMTXID,
                        IntNumRow
                 )
                 SELECT 	idfAggrVetCaseMTX,
                    		intNumRow
                 FROM		dbo.tlbAggrVetCaseMTX
                 WHERE		idfVersion = @idfVersion
                          AND idfsDiagnosis =
                          (
                              SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                          )
						AND idfsSpeciesType =
						(
							SELECT IdfsSpeciesType FROM @Disease WHERE IntNumRow = @_int
						);

        	        IF @idfDataAuditEvent IS NULL
        	        BEGIN 
						--  tauDataAuditEvent  Event Type- Edit 
			    		set @idfsDataAuditEventType =10016003;
			    		-- insert record into tauDataAuditEvent - 
			    		EXEC USSP_GBL_DataAuditEvent_GET @UserId, @SiteId, @idfsDataAuditEventType,@idfsObjectType,@aggVeterinaryCaseMtxId, @idfObjectTable_tlbAggrVetCaseMTX, @idfDataAuditEvent OUTPUT
					END

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue
                )
                SELECT	@idfDataAuditEvent,
                           @idfObjectTable_tlbAggrVetCaseMTX,
                           12666750000000,
                           a.AggrVetCaseMTXID,
                           NULL,
                           b.IntNumRow,
                           a.IntNumRow
                FROM @tlbAggrVetCaseMTX_AfterEdit AS a
                        FULL JOIN @tlbAggrVetCaseMTX_BeforeEdit AS b
                            ON a.AggrVetCaseMTXID = b.AggrVetCaseMTXID
                WHERE (a.IntNumRow <> b.IntNumRow)
                          OR (
                                 a.IntNumRow IS NOT NULL
                                 AND b.IntNumRow IS NULL
                             )
                          OR (
                                 a.IntNumRow IS NULL
                                 AND b.IntNumRow IS NOT NULL
                             );

                -- End data audit
            END
            ELSE
            BEGIN
                IF EXISTS (SELECT * FROM @Disease WHERE IntNumRow = @_int)
                BEGIN
                    INSERT INTO @SuppressSelect
                    EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbAggrVetCaseMTX',
                                                   @idfAggrVetCaseMTX OUTPUT;
                    INSERT INTO dbo.tlbAggrVetCaseMTX
                    (
                        idfAggrVetCaseMTX,
                        idfVersion,
                        idfsDiagnosis,
                        idfsSpeciesType,
                        intNumRow,
                        intRowStatus,
                        AuditCreateDTM,
                        AuditCreateUser
                    )
                    SELECT @idfAggrVetCaseMTX,
                           @IdfVersion,
                           IdfsDiagnosis,
                           IdfsSpeciesType,
                           IntNumRow,
                           0,
                           GETDATE(),
                           @AuditUserName
                    FROM @Disease
                    WHERE IntNumRow = @_int;

					--Data Audit--
        	        IF @idfDataAuditEvent IS NULL
        	        BEGIN 
						-- tauDataAuditEvent Event Type - Create 
						set @idfsDataAuditEventType =10016001;
						-- insert record into tauDataAuditEvent - 
						EXEC USSP_GBL_DataAuditEvent_GET @UserId, @SiteId, @idfsDataAuditEventType,@idfsObjectType,@idfAggrVetCaseMTX, @idfObjectTable_tlbAggrVetCaseMTX, @idfDataAuditEvent OUTPUT
        	        END

					INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject )
						values ( @idfDataAuditEvent, @idfObjectTable_tlbAggrVetCaseMTX, @idfAggrVetCaseMTX)
					--Data Audit--
                END
            END

            SET @_int = @_int + 1;
        END

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                        @EventTypeId,
                                        @EventUserId,
                                        @idfAggrVetCaseMTX,
                                        @EventDiseaseId,
                                        @EventSiteId,
                                        @EventInformationString,
                                        @EventLoginSiteId,
                                        @EventLocationId,
                                        @AuditUserName;

        SELECT @ReturnCode AS 'ReturnCode',
               @ReturnMessage AS 'ReturnMessage',
               @idfAggrVetCaseMTX AS 'idfAggrVetCaseMTX';
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_VeterinaryDiagnosticInvestigationMatrixReport_SET]...';


GO
-- ================================================================================================
-- Name: USP_CONF_VeterinaryDiagnosticInvestigationMatrixReport_SET
--
-- Description: Saves entries for veterinary aggregate action diagnostic investigation matrix.
-- 
-- Author: Lamont Mitchell
--
-- Revision History:
-- Name                         Date       Change Detail
-- ---------------------------- ---------- -------------------------------------------------------
-- Lamont Mitchell              03/04/2019 Initial Created
-- Stephen Long                 07/15/2022 Added site alert and renamed sproc to standard SET.
-- Leo Tracchia					10/24/2022 Removed select from @Disease for IdfVersion, replaced with @idfVersion
-- Ann Xiong					02/23/2023 Implemented Data Audit
-- Ann Xiong					03/08/2023 Added check for @idfDataAuditEvent IS NULL to only create @idfDataAuditEvent once
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_VeterinaryDiagnosticInvestigationMatrixReport_SET]
    @idfAggrDiagnosticActionMTX BIGINT NULL,
    @idfVersion BIGINT NULL,
    @inJsonString Varchar(Max) NULL,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
AS
BEGIN
    DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
            @ReturnCode BIGINT = 0,
            @idfsReferenceType BIGINT,
            @JsonString VARCHAR(MAX),
            @EventId BIGINT = -1,
            @EventSiteId BIGINT = @SiteId,
            @EventUserId BIGINT = @UserId,
            @EventDiseaseId BIGINT = NULL,
            @EventLocationId BIGINT = @LocationId,
            @EventInformationString NVARCHAR(MAX) = NULL,
            @EventLoginSiteId BIGINT = @SiteId;
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );
    DECLARE @Disease TABLE
    (
        IntNumRow INT,
        --IdfVersion BIGINT,
        IdfAggrDiagnosticActionMTX BIGINT,
        IdfsDiagnosticAction BIGINT,
        IdfsSpeciesType BIGINT,
        IdfsDiagnosis BIGINT
    );

		--Data Audit--
	declare @idfsDataAuditEventType bigint = NULL;
	declare @idfsObjectType bigint = 10017003;                         -- Matrix for Aggregate Reports
	declare @idfObject bigint = @idfAggrDiagnosticActionMTX;
	declare @idfObjectTable_tlbAggrDiagnosticActionMTX bigint = 75430000000;
	declare @idfDataAuditEvent bigint= NULL;

	DECLARE @tlbAggrDiagnosticActionMTX_BeforeEdit TABLE
	(
        		AggrDiagnosticActionMTXID BIGINT,
        		IntNumRow INT
	);
	DECLARE @tlbAggrDiagnosticActionMTX_AfterEdit TABLE
	(
        		AggrDiagnosticActionMTXID BIGINT,
        		IntNumRow INT
	);

	--Data Audit--

    SET NOCOUNT ON;

    BEGIN TRY
        SET @JsonString = @inJsonString;
        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbAggrDiagnosticActionMTX
            WHERE idfVersion = @idfVersion
        )
        BEGIN
            UPDATE dbo.tlbAggrDiagnosticActionMTX
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfVersion = @idfVersion;
        END

        INSERT INTO @Disease
        (
            IntNumRow,
            --IdfVersion,
            IdfAggrDiagnosticActionMTX,
            IdfsDiagnosticAction,
            IdfsSpeciesType,
            IdfsDiagnosis
        )
        SELECT *
        FROM
            OPENJSON(@JsonString)
            WITH
            (
                IntNumRow INT,
                --IdfVersion BIGINT,
                IdfAggrDiagnosticActionMTX BIGINT,
                IdfsDiagnosticAction BIGINT,
                IdfsSpeciesType BIGINT,
                IdfsDiagnosis BIGINT
            )
        DECLARE @rowCount INT = 0;
        SET @rowCount =
        (
            SELECT MAX(IntNumRow) FROM @Disease
        );
        DECLARE @_int INT = 1;
        WHILE @_int <= @rowCount
        BEGIN
            IF EXISTS
            (
                SELECT *
                FROM dbo.tlbAggrDiagnosticActionMTX
                WHERE idfVersion = @idfVersion
                      AND idfsDiagnosis =
                      (
                          SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                      )
                      AND idfsSpeciesType =
                      (
                          SELECT IdfsSpeciesType FROM @Disease WHERE IntNumRow = @_int
                      )
                      AND idfsDiagnosticAction =
                      (
                          SELECT IdfsDiagnosticAction FROM @Disease WHERE IntNumRow = @_int
                      )
            )
            BEGIN
                DECLARE @aggCaseMtxId BIGINT;

                SET @aggCaseMtxId =
                (
                    SELECT idfAggrDiagnosticActionMTX
                    FROM dbo.tlbAggrDiagnosticActionMTX
                    WHERE idfVersion = @idfVersion
                          AND idfsDiagnosis =
                          (
                              SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                          )
                          AND idfsSpeciesType =
                          (
                              SELECT IdfsSpeciesType FROM @Disease WHERE IntNumRow = @_int
                          )
                          AND idfsDiagnosticAction =
                          (
                              SELECT IdfsDiagnosticAction FROM @Disease WHERE IntNumRow = @_int
                          )
                );

                -- Data audit
                INSERT INTO @tlbAggrDiagnosticActionMTX_BeforeEdit
                (
                        AggrDiagnosticActionMTXID,
                        IntNumRow
                 )
                 SELECT 	idfAggrDiagnosticActionMTX,
                    		intNumRow
                 FROM		dbo.tlbAggrDiagnosticActionMTX
                 WHERE		idfAggrDiagnosticActionMTX = @aggCaseMtxId;

                -- End data audit

                UPDATE dbo.tlbAggrDiagnosticActionMTX
                SET intRowStatus = 0,
                    intNumRow = @_int,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfsDiagnosis =
                (
                    SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                )
                      AND idfsSpeciesType =
                      (
                          SELECT IdfsSpeciesType FROM @Disease WHERE IntNumRow = @_int
                      )
                      AND idfsDiagnosticAction =
                      (
                          SELECT IdfsDiagnosticAction FROM @Disease WHERE IntNumRow = @_int
                      )
                      AND idfVersion = @idfVersion
                      --(
                      --    SELECT IdfVersion FROM @Disease WHERE IntNumRow = @_int
                      --)
                      AND idfAggrDiagnosticActionMTX = @aggCaseMtxId;

                -- Data audit
                INSERT INTO @tlbAggrDiagnosticActionMTX_AfterEdit
                (
                        AggrDiagnosticActionMTXID,
                        IntNumRow
                 )
                 SELECT 	idfAggrDiagnosticActionMTX,
                    		intNumRow
                 FROM		dbo.tlbAggrDiagnosticActionMTX
                 WHERE		idfAggrDiagnosticActionMTX = @aggCaseMtxId;

        	    IF @idfDataAuditEvent IS NULL
        	    BEGIN 
					--  tauDataAuditEvent  Event Type- Edit 
					set @idfsDataAuditEventType =10016003;
					-- insert record into tauDataAuditEvent - 
					EXEC USSP_GBL_DataAuditEvent_GET @UserId, @SiteId, @idfsDataAuditEventType,@idfsObjectType,@aggCaseMtxId, @idfObjectTable_tlbAggrDiagnosticActionMTX, @idfDataAuditEvent OUTPUT
        	    END

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue
                )
                SELECT	@idfDataAuditEvent,
                           @idfObjectTable_tlbAggrDiagnosticActionMTX,
                           12666610000000,
                           a.AggrDiagnosticActionMTXID,
                           NULL,
                           b.IntNumRow,
                           a.IntNumRow
                FROM @tlbAggrDiagnosticActionMTX_AfterEdit AS a
                        FULL JOIN @tlbAggrDiagnosticActionMTX_BeforeEdit AS b
                            ON a.AggrDiagnosticActionMTXID = b.AggrDiagnosticActionMTXID
                WHERE (a.IntNumRow <> b.IntNumRow)
                          OR (
                                 a.IntNumRow IS NOT NULL
                                 AND b.IntNumRow IS NULL
                             )
                          OR (
                                 a.IntNumRow IS NULL
                                 AND b.IntNumRow IS NOT NULL
                             );

                -- End data audit
            END
            ELSE
            BEGIN
                IF EXISTS (SELECT * FROM @Disease WHERE IntNumRow = @_int)
                BEGIN
                    INSERT INTO @SuppressSelect
                    EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbAggrDiagnosticActionMTX',
                                                   @idfAggrDiagnosticActionMTX OUTPUT;
                    INSERT INTO dbo.tlbAggrDiagnosticActionMTX
                    (
                        idfAggrDiagnosticActionMTX,
                        idfVersion,
                        idfsDiagnosis,
                        idfsSpeciesType,
                        idfsDiagnosticAction,
                        intNumRow,
                        intRowStatus,
                        AuditCreateDTM,
                        AuditCreateUser
                    )
                    SELECT @idfAggrDiagnosticActionMTX,
                           @idfVersion,
                           IdfsDiagnosis,
                           IdfsSpeciesType,
                           IdfsDiagnosticAction,
                           IntNumRow,
                           0,
                           GETDATE(),
                           @AuditUserName
                    FROM @Disease
                    WHERE IntNumRow = @_int;

					--Data Audit--
        	        IF @idfDataAuditEvent IS NULL
        	        BEGIN 
						-- tauDataAuditEvent Event Type - Create 
						set @idfsDataAuditEventType =10016001;
						-- insert record into tauDataAuditEvent - 
						EXEC USSP_GBL_DataAuditEvent_GET @UserId, @SiteId, @idfsDataAuditEventType,@idfsObjectType,@idfAggrDiagnosticActionMTX, @idfObjectTable_tlbAggrDiagnosticActionMTX, @idfDataAuditEvent OUTPUT
        			END

					INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject )
						values ( @idfDataAuditEvent, @idfObjectTable_tlbAggrDiagnosticActionMTX, @idfAggrDiagnosticActionMTX)
					--Data Audit--
                END
            END

            SET @_int = @_int + 1;
        END

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                        @EventTypeId,
                                        @EventUserId,
                                        @idfAggrDiagnosticActionMTX,
                                        @EventDiseaseId,
                                        @EventSiteId,
                                        @EventInformationString,
                                        @EventLoginSiteId,
                                        @EventLocationId,
                                        @AuditUserName;

        SELECT @ReturnCode AS 'ReturnCode',
               @ReturnMessage AS 'ReturnMessage',
               @idfAggrDiagnosticActionMTX AS 'idfAggrDiagnosticActionMTX'
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_VeterinaryProphylacticMatrixReport_SET]...';


GO
-- ================================================================================================
-- Name: USP_CONF_VeterinaryProphylacticMatrixReport_SET
--
-- Description: Saves Entries For Veterinary Aggregate Case Matrix Report.
-- 
-- Author: Lamont Mitchell
--
-- Revision History:
-- Name                         Date       Change Detail
-- ---------------------------- ---------- -------------------------------------------------------
-- Lamont Mitchell              03/04/2019 Initial Created
-- Stephen Long                 07/15/2022 Added site alert and renamed sproc to standard SET.
-- Leo Tracchia                 10/06/2022 Fix for bug 5202 ADM 16 - Vet Prophylactic Measure Matrix #456 
-- Leo Tracchia					10/24/2022 Removed select from @Disease for IdfVersion, replaced with @idfVersion
-- Ann Xiong					02/23/2023 Implemented Data Audit
-- Ann Xiong					03/08/2023 Added check for @idfDataAuditEvent IS NULL to only create @idfDataAuditEvent once
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_VeterinaryProphylacticMatrixReport_SET]
    @idfAggrProphylacticActionMTX BIGINT NULL,
    @idfVersion BIGINT NULL,
    @inJsonString Varchar(Max) NULL,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
AS
BEGIN
    DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
            @ReturnCode BIGINT = 0,
            @idfsReferenceType BIGINT,
            @JsonString VARCHAR(MAX),
            @EventId BIGINT = -1,
            @EventSiteId BIGINT = @SiteId,
            @EventUserId BIGINT = @UserId,
            @EventDiseaseId BIGINT = NULL,
            @EventLocationId BIGINT = @LocationId,
            @EventInformationString NVARCHAR(MAX) = NULL,
            @EventLoginSiteId BIGINT = @SiteId;
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );
    DECLARE @Disease TABLE
    (
        IntNumRow INT,
        --IdfVersion BIGINT,
        IdfAggrProphylacticActionMTX BIGINT, 
        IdfsProphilacticAction BIGINT,
        IdfsSpeciesType BIGINT,
        IdfsDiagnosis BIGINT
    );

	--Data Audit--
	declare @idfsDataAuditEventType bigint = NULL;
	declare @idfsObjectType bigint = 10017003;                         -- Matrix for Aggregate Reports
	declare @idfObject bigint = @idfAggrProphylacticActionMTX;
	declare @idfObjectTable_tlbAggrProphylacticActionMTX bigint = 75440000000;
	declare @idfDataAuditEvent bigint= NULL;

	DECLARE @tlbAggrProphylacticActionMTX_BeforeEdit TABLE
	(
        		AggrProphylacticActionMTXID BIGINT,
        		IntNumRow INT
	);
	DECLARE @tlbAggrProphylacticActionMTX_AfterEdit TABLE
	(
        		AggrProphylacticActionMTXID BIGINT,
        		IntNumRow INT
	);

	--Data Audit--

    SET NOCOUNT ON;

    BEGIN TRY
        SET @JsonString = @inJsonString;
        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbAggrProphylacticActionMTX
            WHERE idfVersion = @idfVersion
        )
        BEGIN
            UPDATE dbo.tlbAggrProphylacticActionMTX
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfVersion = @idfVersion;
        END

        INSERT INTO @Disease
        (
            IntNumRow,
            --IdfVersion,
            IdfAggrProphylacticActionMTX,
            IdfsProphilacticAction,
            IdfsSpeciesType,
            IdfsDiagnosis
        )
        SELECT *
        FROM
            OPENJSON(@JsonString)
            WITH
            (
                IntNumRow INT,
                --IdfVersion BIGINT,
                IdfAggrProphylacticActionMTX BIGINT, 
                IdfsProphilacticAction BIGINT,
                IdfsSpeciesType BIGINT,
                IdfsDiagnosis BIGINT
            );
        DECLARE @rowCount INT = 0;
        SET @rowCount =
        (
            SELECT MAX(IntNumRow) FROM @Disease
        );
        DECLARE @_int INT = 1;
        WHILE @_int <= @rowCount
        BEGIN
            IF EXISTS
            (
                SELECT *
                FROM dbo.tlbAggrProphylacticActionMTX
                WHERE idfVersion = @idfVersion
                      AND idfsDiagnosis =
                      (
                          SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                      )
                      AND idfsSpeciesType =
                      (
                          SELECT IdfsSpeciesType FROM @Disease WHERE IntNumRow = @_int
                      )
                      AND idfsProphilacticAction =
                      (
                          SELECT IdfsProphilacticAction FROM @Disease WHERE IntNumRow = @_int
                      )
            )
            BEGIN
                -- Data audit
                DECLARE @aggCaseMtxId BIGINT;

                SET @aggCaseMtxId =
                (
                    SELECT	idfAggrProphylacticActionMTX
                 	  FROM	dbo.tlbAggrProphylacticActionMTX
                	  WHERE idfVersion = @idfVersion
                      		AND idfsDiagnosis =
                      		(
                          		SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                      		)
                      		AND idfsSpeciesType =
                      		(
                          		SELECT IdfsSpeciesType FROM @Disease WHERE IntNumRow = @_int
                      		)
                      		AND idfsProphilacticAction =
                      		(
                          		SELECT IdfsProphilacticAction FROM @Disease WHERE IntNumRow = @_int
                      		)
                );

                INSERT INTO @tlbAggrProphylacticActionMTX_BeforeEdit
                (
                        AggrProphylacticActionMTXID,
                        IntNumRow
                 )
                 SELECT 	idfAggrProphylacticActionMTX,
                    		intNumRow
                 FROM		dbo.tlbAggrProphylacticActionMTX
                 WHERE		idfAggrProphylacticActionMTX = @aggCaseMtxId;

                -- End data audit

                UPDATE dbo.tlbAggrProphylacticActionMTX
                SET intRowStatus = 0,
                    intNumRow = @_int,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfsDiagnosis =
                (
                    SELECT IdfsDiagnosis FROM @Disease WHERE IntNumRow = @_int
                )
                      AND idfVersion = @idfVersion
                      --(
                      --    SELECT IdfVersion FROM @Disease WHERE IntNumRow = @_int
                      --)
                      AND idfsSpeciesType =
                      (
                          SELECT IdfsSpeciesType FROM @Disease WHERE IntNumRow = @_int
                      )
                      AND idfsProphilacticAction =
                      (
                          SELECT IdfsProphilacticAction FROM @Disease WHERE IntNumRow = @_int
                      );

                -- Data audit
                INSERT INTO @tlbAggrProphylacticActionMTX_AfterEdit
                (
                        AggrProphylacticActionMTXID,
                        IntNumRow
                 )
                 SELECT 	idfAggrProphylacticActionMTX,
                    		intNumRow
                 FROM		dbo.tlbAggrProphylacticActionMTX
                 WHERE		idfAggrProphylacticActionMTX = @aggCaseMtxId;

        	    IF @idfDataAuditEvent IS NULL
        	    BEGIN 
					--  tauDataAuditEvent  Event Type- Edit 
					set @idfsDataAuditEventType =10016003;
					-- insert record into tauDataAuditEvent - 
					EXEC USSP_GBL_DataAuditEvent_GET @UserId, @SiteId, @idfsDataAuditEventType,@idfsObjectType,@aggCaseMtxId, @idfObjectTable_tlbAggrProphylacticActionMTX, @idfDataAuditEvent OUTPUT
        	    END

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue
                )
                SELECT	@idfDataAuditEvent,
                           @idfObjectTable_tlbAggrProphylacticActionMTX,
                           12666680000000,
                           a.AggrProphylacticActionMTXID,
                           NULL,
                           b.IntNumRow,
                           a.IntNumRow
                FROM @tlbAggrProphylacticActionMTX_AfterEdit AS a
                        FULL JOIN @tlbAggrProphylacticActionMTX_BeforeEdit AS b
                            ON a.AggrProphylacticActionMTXID = b.AggrProphylacticActionMTXID
                WHERE (a.IntNumRow <> b.IntNumRow)
                          OR (
                                 a.IntNumRow IS NOT NULL
                                 AND b.IntNumRow IS NULL
                             )
                          OR (
                                 a.IntNumRow IS NULL
                                 AND b.IntNumRow IS NOT NULL
                             );

                -- End data audit
            END
            ELSE
            BEGIN
                IF EXISTS (SELECT * FROM @Disease WHERE IntNumRow = @_int)
                BEGIN
                    INSERT INTO @SuppressSelect
                    EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbAggrProphylacticActionMTX',
                                                   @idfAggrProphylacticActionMTX OUTPUT;

                    INSERT INTO dbo.tlbAggrProphylacticActionMTX
                    (
                        idfAggrProphylacticActionMTX,
                        idfVersion,
                        idfsDiagnosis,
                        idfsSpeciesType,
                        idfsProphilacticAction,
                        intNumRow,
                        intRowStatus,
                        AuditCreateDTM,
                        AuditCreateUser
                    )
                    SELECT @idfAggrProphylacticActionMTX,
                           --IdfVersion,
						   @idfVersion,
                           IdfsDiagnosis,
                           IdfsSpeciesType,
                           IdfsProphilacticAction,
                           IntNumRow,
                           0,
                           GETDATE(),
                           @AuditUserName
                    FROM @Disease
                    WHERE IntNumRow = @_int;

					--Data Audit--
        	        IF @idfDataAuditEvent IS NULL
        	        BEGIN 
						-- tauDataAuditEvent Event Type - Create 
						set @idfsDataAuditEventType =10016001;
						-- insert record into tauDataAuditEvent - 
						EXEC USSP_GBL_DataAuditEvent_GET @UserId, @SiteId, @idfsDataAuditEventType,@idfsObjectType,@idfAggrProphylacticActionMTX, @idfObjectTable_tlbAggrProphylacticActionMTX, @idfDataAuditEvent OUTPUT
        			END

					INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject )
						values ( @idfDataAuditEvent, @idfObjectTable_tlbAggrProphylacticActionMTX, @idfAggrProphylacticActionMTX)
					--Data Audit--
                END
            END

            SET @_int = @_int + 1;
        END

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                        @EventTypeId,
                                        @EventUserId,
                                        @idfAggrProphylacticActionMTX,
                                        @EventDiseaseId,
                                        @EventSiteId,
                                        @EventInformationString,
                                        @EventLoginSiteId,
                                        @EventLocationId,
                                        @AuditUserName;

        SELECT @ReturnCode AS 'ReturnCode',
               @ReturnMessage AS 'ReturnMessage',
               @idfAggrProphylacticActionMTX AS 'idfAggrProphylacticActionMTX'
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_CONF_VeterinarySanitaryActionMatrixReport_SET]...';


GO
-- ================================================================================================
-- Name: USP_CONF_VeterinarySanitaryActionMatrixReport_SET
--
-- Description: Saves entries for veterinary aggregate action sanitary actions matrix.
-- 
-- Author: Lamont Mitchell
--
-- Revision History:
-- Name                         Date       Change Detail
-- ---------------------------- ---------- -------------------------------------------------------
-- Lamont Mitchell              03/04/2019 Initial Created
-- Stephen Long                 07/15/2022 Added site alert and renamed sproc to standard SET.
-- Leo Tracchia					10/24/2022 Removed select from @Disease for IdfVersion, replaced with @idfVersion
-- Ann Xiong					02/24/2023 Implemented Data Audit
-- Ann Xiong					03/08/2023 Added check for @idfDataAuditEvent IS NULL to only create @idfDataAuditEvent once
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_CONF_VeterinarySanitaryActionMatrixReport_SET]
    @idfAggrSanitaryActionMTX BIGINT NULL,
    @idfVersion BIGINT NULL,
    @inJsonString VARCHAR(MAX) NULL,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
AS
BEGIN
    DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
            @ReturnCode BIGINT = 0,
            @idfsReferenceType BIGINT,
            @JsonString VARCHAR(MAX),
            @EventId BIGINT = -1,
            @EventSiteId BIGINT = @SiteId,
            @EventUserId BIGINT = @UserId,
            @EventDiseaseId BIGINT = NULL,
            @EventLocationId BIGINT = @LocationId,
            @EventInformationString NVARCHAR(MAX) = NULL,
            @EventLoginSiteId BIGINT = @SiteId;
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );
    DECLARE @Disease TABLE
    (
        IntNumRow INT,
        --IdfVersion BIGINT,
        IdfAggrSanitaryActionMTX BIGINT,
        IdfsSanitaryAction BIGINT
    );

	--Data Audit--
	declare @idfsDataAuditEventType bigint = NULL;
	declare @idfsObjectType bigint = 10017003;                         -- Matrix for Aggregate Reports
	declare @idfObject bigint = @idfAggrSanitaryActionMTX;
	declare @idfObjectTable_tlbAggrSanitaryActionMTX bigint = 12666690000000;
	declare @idfDataAuditEvent bigint= NULL;

	DECLARE @tlbAggrSanitaryActionMTX_BeforeEdit TABLE
	(
        		AggrSanitaryActionMTXID BIGINT,
        		IntNumRow INT
	);
	DECLARE @tlbAggrSanitaryActionMTX_AfterEdit TABLE
	(
        		AggrSanitaryActionMTXID BIGINT,
        		IntNumRow INT
	);

	--Data Audit--

    SET NOCOUNT ON;

    BEGIN TRY
        SET @JsonString = @inJsonString;
        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbAggrSanitaryActionMTX
            WHERE idfVersion = @idfVersion
        )
        BEGIN
            UPDATE dbo.tlbAggrSanitaryActionMTX
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfVersion = @idfVersion;
        END

        INSERT INTO @Disease
        (
            IntNumRow,
            --IdfVersion,
            IdfAggrSanitaryActionMTX,
            IdfsSanitaryAction
        )
        SELECT *
        FROM
            OPENJSON(@JsonString)
            WITH
            (
                IntNumRow INT,
                --IdfVersion BIGINT,
                IdfAggrSanitaryActionMTX BIGINT,
                IdfsSanitaryAction BIGINT
            );
        DECLARE @rowCount INT = 0;
        SET @rowCount =
        (
            SELECT MAX(IntNumRow) FROM @Disease
        );
        DECLARE @_int INT = 0;
        WHILE @_int <= @rowCount
        BEGIN

            IF EXISTS
            (
                SELECT *
                FROM dbo.tlbAggrSanitaryActionMTX
                WHERE idfVersion = @idfVersion
                      AND idfsSanitaryAction =
                      (
                          SELECT IdfsSanitaryAction FROM @Disease WHERE IntNumRow = @_int
                      )
            )
            BEGIN
                DECLARE @aggCaseMtxId BIGINT;
                SET @aggCaseMtxId =
                (
                    SELECT idfAggrSanitaryActionMTX
                    FROM dbo.tlbAggrSanitaryActionMTX
                    WHERE idfVersion = @idfVersion
                          AND idfsSanitaryAction =
                          (
                              SELECT IdfsSanitaryAction FROM @Disease WHERE IntNumRow = @_int
                          )
                );

                -- Data audit
                INSERT INTO @tlbAggrSanitaryActionMTX_BeforeEdit
                (
                        AggrSanitaryActionMTXID,
                        IntNumRow
                 )
                 SELECT 	idfAggrSanitaryActionMTX,
                    		intNumRow
                 FROM		dbo.tlbAggrSanitaryActionMTX
                 WHERE		idfAggrSanitaryActionMTX = @aggCaseMtxId;

                -- End data audit

                UPDATE dbo.tlbAggrSanitaryActionMTX
                SET intRowStatus = 0,
                    intNumRow = @_int,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfsSanitaryAction =
                (
                    SELECT IdfsSanitaryAction FROM @Disease WHERE IntNumRow = @_int
                )
                      AND idfVersion = @idfVersion
                      --(
                      --    SELECT IdfVersion FROM @Disease WHERE IntNumRow = @_int
                      --)
                      AND idfAggrSanitaryActionMTX = @aggCaseMtxId;

                -- Data audit
                INSERT INTO @tlbAggrSanitaryActionMTX_AfterEdit
                (
                        AggrSanitaryActionMTXID,
                        IntNumRow
                 )
                 SELECT 	idfAggrSanitaryActionMTX,
                    		intNumRow
                 FROM		dbo.tlbAggrSanitaryActionMTX
                 WHERE		idfAggrSanitaryActionMTX = @aggCaseMtxId;

        	    IF @idfDataAuditEvent IS NULL
        	    BEGIN 
					--  tauDataAuditEvent  Event Type- Edit 
					set @idfsDataAuditEventType =10016003;
					-- insert record into tauDataAuditEvent - 
					EXEC USSP_GBL_DataAuditEvent_GET @UserId, @SiteId, @idfsDataAuditEventType,@idfsObjectType,@aggCaseMtxId, @idfObjectTable_tlbAggrSanitaryActionMTX, @idfDataAuditEvent OUTPUT
        	    END

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue
                )
                SELECT	@idfDataAuditEvent,
                           @idfObjectTable_tlbAggrSanitaryActionMTX,
                           12666730000000,
                           a.AggrSanitaryActionMTXID,
                           NULL,
                           b.IntNumRow,
                           a.IntNumRow
                FROM @tlbAggrSanitaryActionMTX_AfterEdit AS a
                        FULL JOIN @tlbAggrSanitaryActionMTX_BeforeEdit AS b
                            ON a.AggrSanitaryActionMTXID = b.AggrSanitaryActionMTXID
                WHERE (a.IntNumRow <> b.IntNumRow)
                          OR (
                                 a.IntNumRow IS NOT NULL
                                 AND b.IntNumRow IS NULL
                             )
                          OR (
                                 a.IntNumRow IS NULL
                                 AND b.IntNumRow IS NOT NULL
                             );

                -- End data audit
            END
            ELSE
            BEGIN
                IF EXISTS (SELECT * FROM @Disease WHERE IntNumRow = @_int)
                BEGIN
                    INSERT INTO @SuppressSelect
                    EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbAggrSanitaryActionMTX',
                                                   @idfAggrSanitaryActionMTX OUTPUT;

                    INSERT INTO dbo.tlbAggrSanitaryActionMTX
                    (
                        idfAggrSanitaryActionMTX,
                        idfVersion,
                        idfsSanitaryAction,
                        intNumRow,
                        intRowStatus,
                        AuditCreateDTM,
                        AuditCreateUser
                    )
                    SELECT @idfAggrSanitaryActionMTX,
                           @idfVersion,
                           IdfsSanitaryAction,
                           IntNumRow,
                           0,
                           GETDATE(),
                           @AuditUserName
                    FROM @Disease
                    WHERE IntNumRow = @_int;

					--Data Audit--
        	        IF @idfDataAuditEvent IS NULL
        	        BEGIN 
						-- tauDataAuditEvent Event Type - Create 
						set @idfsDataAuditEventType =10016001;
						-- insert record into tauDataAuditEvent - 
						EXEC USSP_GBL_DataAuditEvent_GET @UserId, @SiteId, @idfsDataAuditEventType,@idfsObjectType,@idfAggrSanitaryActionMTX, @idfObjectTable_tlbAggrSanitaryActionMTX, @idfDataAuditEvent OUTPUT
        			END

					INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject )
						values ( @idfDataAuditEvent, @idfObjectTable_tlbAggrSanitaryActionMTX, @idfAggrSanitaryActionMTX)
					--Data Audit--
                END
            END

            SET @_int = @_int + 1;
        END

        INSERT INTO @SuppressSelect
        EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                        @EventTypeId,
                                        @EventUserId,
                                        @idfAggrSanitaryActionMTX,
                                        @EventDiseaseId,
                                        @EventSiteId,
                                        @EventInformationString,
                                        @EventLoginSiteId,
                                        @EventLocationId,
                                        @AuditUserName;

        SELECT @ReturnCode AS 'ReturnCode',
               @ReturnMessage AS 'ReturnMessage',
               @idfAggrSanitaryActionMTX AS 'idfAggrSanitaryActionMTX';
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_GBL_DataAuditEvent_Restore]...';


GO
-- ================================================================================================
-- Author:		Manickandan Govindarajan
-- Create date: 11/14/2022
-- Description:	Restore Data Audit 
-- 
-- Revision History:
-- Name                     Date       Change
-- ------------------------ ---------- -----------------------------------------------------------
-- Mike Kornegay            11/17/2022 Remove CONCAT in dynamic query string.
-- Manickandan Govindarajan 11/17/2022 changed the field type of @Object
-- Manickandan Govindarajan 11/17/2022 Added logic to find the selected record is restored already
-- Stephen Long             03/08/2023 Fix to pass strMainObject to restore data audit event.
-- 
-- exec USP_GBL_DataAuditEvent_Restore 58397190000001, 1100 ,155576240001452
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_GBL_DataAuditEvent_Restore]
    @UserId BIGINT,
    @SiteId BIGINT,
    @idfDataAuditEvent BIGINT
AS
BEGIN
    DECLARE @tauDataAuditDetailDeleteTable AS TABLE
    (
        idfObjectTable BIGINT,
        idfObject BIGINT,
        idfObjectTableName VARCHAR(255)
    );

    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage VARCHAR(200)
    );

    DECLARE @returnMsg VARCHAR(MAX) = 'SUCCESS';
    DECLARE @returnCode BIGINT = 0;
    DECLARE @idfsDataAuditEventType BIGINT = 10016005;
    DECLARE @idfsObjectType BIGINT;
    DECLARE @idfObject BIGINT;
    DECLARE @idfObjectTable BIGINT;
    DECLARE @auditEventId BIGINT;
    DECLARE @primaryColumnName VARCHAR(255);
    DECLARE @Cmd VARCHAR(2000);
    DECLARE @mainTableName VARCHAR(255);
    DECLARE @mainObject VARCHAR(255);
    DECLARE @strMainObject NVARCHAR(200);
    DECLARE @SQL NVARCHAR(2000);
    DECLARE @Param NVARCHAR(200);
    DECLARE @intRowStatus INT = -1;
    DECLARE @maxIdfDataAuditEvent BIGINT;

    SET NOCOUNT ON;

    BEGIN TRY
        SELECT @mainTableName = tt.strName,
               @mainObject = au.idfMainObject
        FROM dbo.tauDataAuditEvent au
            INNER JOIN dbo.tauTable tt
                ON au.idfMainObjectTable = tt.idfTable
        WHERE au.idfDataAuditEvent = @idfDataAuditEvent;

        SELECT @maxIdfDataAuditEvent = MAX(idfDataAuditEvent)
        FROM dbo.tauDataAuditEvent
        WHERE idfMainObject = @mainObject;
        IF (@maxIdfDataAuditEvent = @idfDataAuditEvent)
        BEGIN
            SELECT @primaryColumnName = C.COLUMN_NAME
            FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS T
                JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE C
                    ON C.CONSTRAINT_NAME = T.CONSTRAINT_NAME
            WHERE C.TABLE_NAME = @mainTableName
                  AND T.CONSTRAINT_TYPE = 'PRIMARY KEY';

            SET @SQL
                = N'SELECT @intRowStatus = intRowStatus FROM ' + @mainTableName + ' WHERE ' + @primaryColumnName
                  + ' = ' + @mainObject;
            SET @Param = N'@intRowStatus INT OUTPUT';

            INSERT INTO @SuppressSelect
            EXECUTE sp_executesql @SQL, @Param, @intRowStatus = @intRowStatus OUTPUT;

            SET @SQL
                = 'UPDATE ' + @mainTableName + ' SET auditUpdateDTM = GETDATE()  WHERE ' + @primaryColumnName + ' = '
                  + @mainObject;
            EXECUTE (@SQL);

            IF (@intRowStatus = 1)
            BEGIN
                BEGIN TRANSACTION

                SELECT @idfObject = idfMainObject,
                       @idfsObjectType = idfsDataAuditObjectType,
                       @idfObjectTable = idfMainObjectTable,
                       @strMainObject = strMainObject
                FROM dbo.tauDataAuditEvent
                WHERE idfDataAuditEvent = @idfDataAuditEvent;

                INSERT INTO @tauDataAuditDetailDeleteTable
                (
                    idfObjectTableName,
                    idfObject,
                    idfObjectTable
                )
                SELECT tt.strName,
                       d.idfObject,
                       d.idfObjectTable
                FROM dbo.tauDataAuditDetailDelete d
                    INNER JOIN dbo.tauTable tt
                        on d.idfObjectTable = tt.idfTable
                WHERE d.idfDataAuditEvent = @idfDataAuditEvent;

                DECLARE restore_cursor CURSOR FOR
                SELECT idfObjectTable,
                       idfObject,
                       idfObjectTableName
                FROM @tauDataAuditDetailDeleteTable;

                OPEN restore_cursor;
                DECLARE @ObjectTable BIGINT;
                DECLARE @Object VARCHAR(100);
                DECLARE @ObjectTableName VARCHAR(255);
                FETCH NEXT FROM restore_cursor
                INTO @ObjectTable,
                     @Object,
                     @ObjectTableName
                WHILE (@@FETCH_STATUS = 0)
                BEGIN
                    SELECT @primaryColumnName = C.COLUMN_NAME
                    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS T
                        JOIN INFORMATION_SCHEMA.CONSTRAINT_COLUMN_USAGE C
                            ON C.CONSTRAINT_NAME = T.CONSTRAINT_NAME
                    WHERE C.TABLE_NAME = @ObjectTableName
                          AND T.CONSTRAINT_TYPE = 'PRIMARY KEY';

                    SET @Cmd
                        = 'UPDATE ' + @ObjectTableName + ' SET intRowStatus = 0 WHERE ' + @primaryColumnName + ' = '
                          + @Object;
                    EXECUTE (@Cmd);
                    FETCH NEXT FROM restore_cursor
                    INTO @ObjectTable,
                         @Object,
                         @ObjectTableName;
                END
                CLOSE restore_cursor;
                DEALLOCATE restore_cursor;

                INSERT INTO @SuppressSelect
                -- Get the current event id for this user from the local context table...
                EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @UserId,
                                                          @SiteId,
                                                          @idfsDataAuditEventType,
                                                          @idfsObjectType,
                                                          @idfObject,
                                                          @idfObjectTable,
                                                          @strMainObject,
                                                          @auditEventId OUTPUT;

                IF @@TRANCOUNT > 0
                BEGIN
                    COMMIT;
                END

                SELECT @ReturnCode ReturnCode,
                       @returnMsg ReturnMessage,
                       @intRowStatus RecordStatus;
            END
            ELSE
            BEGIN
                SET @intRowStatus = 0;
                SELECT @ReturnCode ReturnCode,
                       @returnMsg ReturnMessage,
                       @intRowStatus RecordStatus;
            END
        END
        ELSE
        BEGIN
            SET @intRowStatus = 0;
            SELECT @ReturnCode ReturnCode,
                   @returnMsg ReturnMessage,
                   @intRowStatus RecordStatus;
        END
    END TRY
    BEGIN CATCH
        SET @returnCode = ERROR_NUMBER();
        SET @returnMsg
            = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: '
              + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE())
              + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: '
              + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();

        SELECT @returnCode 'ReturnCode',
               @returnMsg 'ReturnMessage',
               @intRowStatus RecordStatus;

        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_HUM_DISEASE_GETDetail]...';


GO
--*************************************************************
-- Name 				: USP_HUM_DISEASE_GETDetail
-- Description			: List Human Disease Report
--          
-- Author               : Mandar Kulkarni
-- Revision History
-- Name	Date		Change Detail
-- JWJ	20180418	Added cols for hum disease summary section of the hum disease page
-- HAP  20180801    Added columns DiseaseReportTypeID and strMonitoringSessionID to be returned
-- HAP  20181102    Added column LegacyCaseID to be returned 
-- HAP  20181130    Added columns blnClinicalDiagBasis, blnLabDiagBasis, blnEpiDiagBasis, DateofClassification, idfsYNExposureLocationKnown to be returned
-- HAP  20181207    Added column tlbOutBreak.strOutbreakID to be returned
-- HAP  20181213    Removed VaccinationName and VaccinationDate columns to be returned
-- HAP  20190210    Added column idfCSObservation to be returned for Flex Form integration
-- HAP  20190409    Added columns parentHumanDiseaseReportID and relatedHumanDiseaseReportIdList to be returned for use case HUC11 Changed Diagnosis Human Disease Report​ 
-- HAP  20190614    Added columns for Point location values to be returned
-- HAP  20190629    Added column strPointForeignAddress to be returned
-- SLV	20190703	Removed redundant call to FN_GBL_ReferenceRepair
-- Ann Xiong	   09/12/2019 Added script to select PatientStatus, HospitalName, PreviouslySoughtCare, 
--                            YNSpecificVaccinationAdministered, YNSpecimenCollected, YNExposureLocationKnown, 
--                            ExposureLocationType, ExposureLocationDescription, Country, Settlement for Human Disease Report Deduplication.
-- Ann Xiong	   09/13/2019 Modified SP to replace InitialCaseClassification.idfsReferenceType = 19000111 with InitialCaseClassification.idfsReferenceType = 19000011,
-- 							  replace NonNotifiableDiagnosis.idfsReferenceType = 19000019 with NonNotifiableDiagnosis.idfsReferenceType = 19000149
-- Ann Xiong	   09/16/2019 Modified SP to replace SoughtCareFacility.name as strSoughtCareFacility with tlbHumanCase.strSoughtCareFacility
-- 							  replace HospitalizationStatus.idfsReferenceType = 19000100 with HospitalizationStatus.idfsReferenceType = 19000041
-- Stephen Long    10/02/2019 Changed select person calls over to left joins to person.  POCO was not generating with the function call.
-- Ann Xiong	   03/13/2020 Uncommented 10 fields of Human Disease Report Deduplication were commented out
-- LM				06/07/2020 Updated Selecting Connected Disease Reports
-- LM				11/02/2020 Added strNotCollectedReason To Ouput
-- Mark Wilson		12/22/2020 Changed Institution join to E7 SP
-- Mike Kornegay	09/23/2021 Removed duplicate fields from select.
-- Mark Wilson		09/23/2021 Fixed Locations and offices
-- Mark Wilson		10/01/2021 updated join to gisLocation
-- Minal Shah	    10/22/2021 Added strGroundType, dblPointAccuracy and dblPointAlignment
-- Minal Shah		11/03/2021 Added blnInitialSSD and blnFinalSSD columns
-- Minal Shah		01/25/2021 Replaced long name to org abbrev
-- Stephen Long     01/16/2023 Fixes to use translated values on reference types.
--
-- Testing code:
-- 
/* 
EXEC USP_HUM_DISEASE_GETDetail 'en-US', 71413

*/
--*************************************************************
ALTER PROCEDURE [dbo].[USP_HUM_DISEASE_GETDetail]
(
    @LangID NVARCHAR(50),
    @SearchHumanCaseId BIGINT = NULL
)
AS
BEGIN
    BEGIN TRY
        SET NOCOUNT ON;

        DECLARE @ReturnMessage VARCHAR(MAX) = 'Success';
        DECLARE @ReturnCode BIGINT = 0;
        --Declare @ConnectedReports Varchar(Max);
        --		Select @ConnectedReports = ( SELECT ',' + CAST(RelatedToHumanDiseaseReportIdRoot AS VARCHAR)  + '-' +  (Select strCaseId from tlbhumancase where idfHumancase =  RelatedToHumanDiseaseReportIdRoot)
        --		From  dbo.HumanDiseaseReportRelationship where RelatedToHumanDiseaseReportIdRoot =  @SearchHumanCaseId)
        DECLARE @parentHumanCaseId int
        DECLARE @ParentCaseId int
        DECLARE @ChildCaseId int
        SET @ParentCaseId =
        (
            SELECT TOP 1
                RelatedToHumanDiseaseReportIdRoot
            FROM dbo.HumanDiseaseReportRelationship
            WHERE (HumanDiseaseReportID = @SearchHumanCaseId)
        )
        SET @ChildCaseId =
        (
            SELECT TOP 1
                HumanDiseaseReportID
            FROM dbo.HumanDiseaseReportRelationship
            WHERE (RelatedToHumanDiseaseReportIdRoot = @SearchHumanCaseId)
        )
        SELECT hc.idfHumanCase,
               NULL AS parentHumanDiseaseReportID,     --HumanDiseaseReportRelationship.RelateToHumanDiseaseReportID as parentHumanDiseaseReportID,  
               (
                   SELECT DISTINCT
                       STUFF(
                       (
                           SELECT ',' + CAST(t2.RelatedToHumanDiseaseReportIdRoot AS VARCHAR) + '-' +
                                  (
                                      SELECT strCaseId
                                      FROM dbo.tlbhumancase
                                      WHERE idfHumancase = t2.RelatedToHumanDiseaseReportIdRoot
                                  )
                           FROM dbo.HumanDiseaseReportRelationship t2
                           WHERE t2.RelatedToHumanDiseaseReportIdRoot = @ParentCaseId -- (Select top 1 RelatedToHumanDiseaseReportIdRoot  from HumanDiseaseReportRelationship where (HumanDiseaseReportID = @SearchHumanCaseId) )
                                 --AND ((t2.RelateToHumanDiseaseReportID = hc.idfHumanCase) or (t2.HumanDiseaseReportID = hc.idfHumanCase)))
                                 AND t2.intRowStatus = 0
                           FOR XML PATH('')
                       ),
                       1,
                       1,
                       ''
                            )
                   FROM dbo.HumanDiseaseReportRelationship t1
               --NULL
               ) AS relatedParentHumanDiseaseReportIdList,
               (
                   SELECT DISTINCT
                       STUFF(
                       (
                           SELECT ',' + CAST(t2.HumanDiseaseReportID AS VARCHAR) + '-' +
                                  (
                                      SELECT strCaseId
                                      FROM dbo.tlbhumancase
                                      WHERE idfHumancase = t2.HumanDiseaseReportID
                                  )
                           FROM dbo.HumanDiseaseReportRelationship t2
                           WHERE t2.HumanDiseaseReportID = @ChildCaseId -- (Select top 1 RelatedToHumanDiseaseReportIdRoot  from HumanDiseaseReportRelationship where (HumanDiseaseReportID = @SearchHumanCaseId) )
                                 --AND ((t2.RelateToHumanDiseaseReportID = hc.idfHumanCase) or (t2.HumanDiseaseReportID = hc.idfHumanCase)))
                                 AND t2.intRowStatus = 0
                           FOR XML PATH('')
                       ),
                       1,
                       1,
                       ''
                            )
                   FROM dbo.HumanDiseaseReportRelationship t1
               --NULL
               ) AS relatedChildHumanDiseaseReportIdList,
               hc.idfHuman,
               hc.idfsHospitalizationStatus,
               hc.idfsYNSpecimenCollected,
               hc.idfsHumanAgeType,
               hc.idfsYNAntimicrobialTherapy,
               hc.idfsYNHospitalization,
               hc.idfsYNRelatedToOutbreak,
               hc.idfsOutCome,
               hc.idfsInitialCaseStatus,
               hc.idfsFinalDiagnosis,
               FinalDiagnosis.name AS strFinalDiagnosis,
               hc.idfsFinalCaseStatus,
               FinalCaseClassification.name AS strFinalCaseStatus,
               hc.idfSentByOffice,
               hc.idfInvestigatedByOffice,
               hc.idfReceivedByOffice,
               hc.idfEpiObservation,
               hc.idfCSObservation,
               hc.datNotificationDate,
               hc.datCompletionPaperFormDate,
               hc.datFirstSoughtCareDate,
               hc.datHospitalizationDate,
               hc.datFacilityLastVisit,
               hc.datExposureDate,
               hc.datDischargeDate,
               hc.datOnSetDate,
               hc.datInvestigationStartDate AS StartDateofInvestigation,
               hc.datFinalDiagnosisDate AS datDateOfDiagnosis,
               hc.datFinalDiagnosisDate,
               hc.strNote,
               hc.strCurrentLocation,
               hc.strHospitalizationPlace,
               hc.strLocalIdentifier,
               SoughtByOfficeRef.name AS strSoughtCareFacility,
               hc.strSentByFirstName,
               hc.strSentByPatronymicName,
               hc.strSentByLastName,
               hc.strReceivedByFirstName,
               hc.strReceivedByPatronymicName,
               hc.strReceivedByLastName,
               hc.strEpidemiologistsName,
               hc.strClinicalDiagnosis,
               hc.strClinicalNotes,
               hc.strSummaryNotes,
               hc.intPatientAge,
               hc.blnClinicalDiagBasis,
               hc.blnLabDiagBasis,
               hc.blnEpiDiagBasis,
               hc.idfPersonEnteredBy,
               hc.idfPointGeoLocation,
               gl.idfsGroundType AS idfsPointGroundType,
               gl.idfsGeoLocationType AS idfsPointGeoLocationType,
               gl.idfsCountry AS idfsPointCountry,
               gl.idfsRegion AS idfsPointRegion,
               gl.idfsRayon AS idfsPointRayon,
               gl.idfsSettlement AS idfsPointSettlement,
               gl.dblDistance AS dblPointDistance,
               gl.dblLatitude AS dblPointLatitude,
               gl.dblLongitude AS dblPointLongitude,
               gl.dblElevation AS dblPointElevation,
               gl.dblAlignment AS dblPointAlignment,
               gl.dblAccuracy AS dblPointAccuracy,
               gl.strForeignAddress AS strPointForeignAddress,
               hc.idfSentByPerson,
               hc.idfReceivedByPerson,
               hc.idfInvestigatedByPerson,
               hc.idfsYNTestsConducted,
               hc.idfSoughtCareFacility,
               hc.idfsNonNotifiableDiagnosis,
               NonNotifiableDiagnosisRef.name AS stridfsNonNotifiableDiagnosis,
               hc.idfOutbreak,
               hc.strCaseId,
               hc.idfsCaseProgressStatus,
               hc.idfsSite,
               hc.strSampleNotes,
               hc.uidOfflineCaseID,
               hc.datFinalCaseClassificationDate,
               hc.idfHospital,
               hc.idfsYNSpecificVaccinationAdministered,
               hc.idfsNotCollectedReason,
               hc.strNotCollectedReason,
               hc.idfsYNPreviouslySoughtCare,
               hc.idfsYNExposureLocationKnown,
               hc.datEnteredDate,
               hc.datModificationDate,
               hc.idfsFinalDiagnosis AS idfsDiagnosis, --possible duplicate
               hc.idfsFinalState,
               hc.DiseaseReportTypeID,
               ReportTypeRef.name AS 'ReportType',
               hc.LegacyCaseID,
               hc.datFinalCaseClassificationDate AS DateofClassification,
               o.strOutbreakID,
               o.strDescription,
               h.strPersonId,
               h.datDateOfDeath,
               RegionRef.[name] AS Region,
               RayonRef.[name] AS Rayon,
               HumanAgeRef.[name] AS HumanAgeType,
               OutcomeRef.[name] AS Outcome,
               NonNotifiableDiagnosisRef.[name] AS NonNotifiableDiagnosis,
               NotCollectedReasonRef.[name] AS NotCollectedReason,
               CaseProgressStatusRef.[name] AS CaseProgressStatus,
               SpecificVaccinationAdministered.[name] AS YNSpecificVaccinationAdministered,
               PreviouslySoughtCareRef.[name] AS PreviouslySoughtCare,
               ExposureLocationKnown.[name] AS YNExposureLocationKnown,
               HospitalizationStatusRef.[name] AS HospitalizationStatus,
               Hospitalization.[name] AS YNHospitalization,
               AntimicrobialTherapy.[name] AS YNAntimicrobialTherapy,
               SpecimenCollection.[name] AS YNSpecimenCollected,
               RelatedToOutBreak.[name] AS YNRelatedToOutBreak,
               tentativeDiagnosisRef.[name] AS TentativeDiagnosis,
               FinalDiagnosis.[name] AS SummaryIdfsFinalDiagnosis,
               InitialCaseClassification.[name] AS InitialCaseStatus,
               FinalCaseClassification.[name] AS FinalCaseStatus,
               SentByOfficeRef.LongName AS SentByOffice,
               ReceivedByOfficeRef.LongName AS ReceivedByOffice,
               HospitalRef.LongName AS HospitalName,
               InvestigateByOfficeRef.LongName AS InvestigatedByOffice,
               TestConducted.[name] AS YNTestConducted,
               MonitoringSession.strMonitoringSessionID,
               ExposureLocationTypeRef.[name] AS ExposureLocationType,
               groundTypeRef.[name] AS strGroundType,
               gl.strDescription AS ExposureLocationDescription,
               ISNULL(FinalCaseClassification.[name], InitialCaseClassification.[name]) AS SummaryCaseClassification,
               ISNULL(sentByPersonRef.strFamilyName, N'') + ISNULL(' ' + sentByPersonRef.strFirstName, '')
               + ISNULL(' ' + sentByPersonRef.strSecondName, '') AS SentByPerson,
               ISNULL(receivedByPersonRef.strFamilyName, N'') + ISNULL(' ' + receivedByPersonRef.strFirstName, '')
               + ISNULL(' ' + receivedByPersonRef.strSecondName, '') AS ReceivedByPerson,
               ISNULL(investigatedByPersonRef.strFamilyName, N'')
               + ISNULL(' ' + investigatedByPersonRef.strFirstName, '')
               + ISNULL(' ' + investigatedByPersonRef.strSecondName, '') AS InvestigatedByPerson,
               dbo.fnConcatFullName(
                                       personEnteredByRef.strFamilyName,
                                       personEnteredByRef.strFirstName,
                                       personEnteredByRef.strSecondName
                                   ) AS EnteredByPerson,
               tlbEnteredByOffice.name AS strOfficeEnteredBy,
               tlbEnteredByOffice.idfOffice AS idfOfficeEnteredBy,
               SentByOfficeRef.name AS strNotificationSentby,
               '' AS strNotificationReceivedby,
               PatientState.[name] AS PatientStatus,
               CountryRef.[name] AS Country,
               SettlementRef.[name] AS Settlement,
               ISNULL(ha.strFirstName, '') + ' ' + ISNULL(ha.strLastName, '') AS PatientFarmOwnerName,
               addinfo.EIDSSPersonID AS EIDSSPersonID,
               ha.idfHumanActual AS HumanActualId,
               initialSyndromicSurveielanceDiseases.blnSyndrome AS blnInitialSSD,
               finalSyndromicSurveielanceDiseases.blnSyndrome AS blnFinalSSD,
               relatedTo.RelateToHumanDiseaseReportID AS RelateToHumanDiseaseReportID,
               relatedToReport.strCaseID AS RelatedToHumanDiseaseEIDSSReportID,
               connectedTo.HumanDiseaseReportID AS ConnectedDiseaseReportID,
               connectedToReport.strCaseID AS ConnectedDiseaseEIDSSReportID
        FROM dbo.tlbHumanCase hc WITH (NOLOCK)
            LEFT JOIN dbo.tlbOutbreak AS o
                ON o.idfOutbreak = hc.idfOutbreak
            LEFT JOIN dbo.tlbHuman AS h
                ON h.idfHuman = hc.idfHuman
            LEFT JOIN dbo.tlbHumanActual AS ha
                ON ha.idfHumanActual = h.idfHumanActual
                   AND h.intRowStatus = 0
            LEFT JOIN dbo.HumanActualAddlInfo AS addinfo
                ON addinfo.HumanActualAddlInfoUID = h.idfHumanActual
                   AND addinfo.intRowStatus = 0
            LEFT JOIN dbo.tlbGeoLocation AS gl
                ON gl.idfGeoLocation = hc.idfPointGeoLocation
                   AND gl.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson AS sentByPersonRef
                ON sentByPersonRef.idfPerson = hc.idfSentByPerson
                   AND sentByPersonRef.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson AS receivedByPersonRef
                ON receivedByPersonRef.idfPerson = hc.idfReceivedByPerson
                   AND receivedByPersonRef.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson AS investigatedByPersonRef
                ON investigatedByPersonRef.idfPerson = hc.idfInvestigatedByPerson
                   AND investigatedByPersonRef.intRowStatus = 0
            LEFT JOIN dbo.tlbPerson AS personEnteredByRef
                ON personEnteredByRef.idfPerson = hc.idfPersonEnteredBy
                   AND personEnteredByRef.intRowStatus = 0
            LEFT JOIN dbo.gisLocation L
                ON L.idfsLocation = gl.idfsLocation
            LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000001) AS CountryRef
                ON L.node.IsDescendantOf(CountryRef.node) = 1
            LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000003) AS RegionRef
                ON L.node.IsDescendantOf(RegionRef.node) = 1
            LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000002) AS RayonRef
                ON L.node.IsDescendantOf(RayonRef.node) = 1
            LEFT JOIN dbo.FN_GBL_GIS_ReferenceRepair_GET(@LangID, 19000004) AS SettlementRef
                ON L.node.IsDescendantOf(SettlementRef.node) = 1
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000042) AS HumanAgeRef
                ON HumanAgeRef.idfsReference = hc.idfsHumanAgeType
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000064) AS OutcomeRef
                ON OutcomeRef.idfsReference = hc.idfsOutcome
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS FinalDiagnosis
                ON FinalDiagnosis.idfsReference = hc.idfsFinalDiagnosis
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000011) AS InitialCaseClassification
                ON InitialCaseClassification.idfsReference = hc.idfsInitialCaseStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000011) AS FinalCaseClassification
                ON FinalCaseClassification.idfsReference = hc.idfsFinalCaseStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000149) AS NonNotifiableDiagnosisRef
                ON NonNotifiableDiagnosisRef.idfsReference = hc.idfsNonNotifiableDiagnosis
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000144) AS ReportTypeRef
                ON ReportTypeRef.idfsReference = hc.DiseaseReportTypeID
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS NotCollectedReasonRef
                ON NotCollectedReasonRef.idfsReference = hc.idfsNotCollectedReason
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000111) CaseProgressStatusRef
                ON CaseProgressStatusRef.idfsReference = hc.idfsCaseProgressStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS SpecificVaccinationAdministered
                ON SpecificVaccinationAdministered.idfsReference = hc.idfsYNSpecificVaccinationAdministered
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS PreviouslySoughtCareRef
                ON PreviouslySoughtCareRef.idfsReference = hc.idfsYNPreviouslySoughtCare
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS ExposureLocationKnown
                ON ExposureLocationKnown.idfsReference = hc.idfsYNExposureLocationKnown
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000041) AS HospitalizationStatusRef
                ON HospitalizationStatusRef.idfsReference = hc.idfsHospitalizationStatus
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS Hospitalization
                ON Hospitalization.idfsReference = hc.idfsYNHospitalization
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS AntimicrobialTherapy
                ON AntimicrobialTherapy.idfsReference = hc.idfsYNAntimicrobialTherapy
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS SpecimenCollection
                ON SpecimenCollection.idfsReference = hc.idfsYNSpecimenCollected
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS RelatedToOutBreak
                ON RelatedToOutBreak.idfsReference = hc.idfsYNRelatedToOutbreak
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000036) AS ExposureLocationTypeRef
                ON ExposureLocationTypeRef.idfsReference = gl.idfsGeoLocationType
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000019) AS tentativeDiagnosisRef
                ON tentativeDiagnosisRef.idfsReference = hc.idfsTentativeDiagnosis
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000038) AS groundTypeRef
                ON groundTypeRef.idfsReference = gl.idfsGroundType
            LEFT JOIN dbo.tlbOffice RBO
                ON RBO.idfOffice = hc.idfReceivedByOffice
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) ReceivedByOfficeRef
                ON ReceivedByOfficeRef.idfsReference = RBO.idfsOfficeAbbreviation
            LEFT JOIN dbo.tlbOffice IBO
                ON IBO.idfOffice = hc.idfInvestigatedByOffice
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) InvestigateByOfficeRef
                ON InvestigateByOfficeRef.idfsReference = IBO.idfsOfficeAbbreviation
            LEFT JOIN dbo.tlbOffice SBO
                ON SBO.idfOffice = hc.idfSentByOffice
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) SentByOfficeRef
                ON SentByOfficeRef.idfsReference = SBO.idfsOfficeAbbreviation
            LEFT JOIN dbo.tlbOffice SoughtByOffice
                ON SBO.idfOffice = hc.idfSoughtCareFacility
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) SoughtByOfficeRef
                ON SoughtByOfficeRef.idfsReference = SoughtByOffice.idfsOfficeAbbreviation
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000100) AS TestConducted
                ON TestConducted.idfsReference = hc.idfsYNTestsConducted
            LEFT JOIN dbo.tlbMonitoringSession AS MonitoringSession
                ON MonitoringSession.idfMonitoringSession = hc.idfParentMonitoringSession
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000035) AS PatientState
                ON PatientState.idfsReference = hc.idfsFinalState
            LEFT JOIN dbo.tlbOffice Hospital
                ON Hospital.idfOffice = hc.idfHospital
            LEFT JOIN dbo.FN_GBL_ReferenceRepair(@LangID, 19000045) HospitalRef
                ON HospitalRef.idfsReference = Hospital.idfsOfficeAbbreviation
            LEFT JOIN dbo.tstSite S
                ON S.idfsSite = hc.idfsSite
            LEFT JOIN dbo.FN_HUM_Institution_GET(@LangID) AS tlbEnteredByOffice
                ON tlbEnteredByOffice.idfOffice = S.idfOffice
                   AND tlbEnteredByOffice.idfsSite = hc.idfsSite
            LEFT JOIN dbo.trtDiagnosis AS finalSyndromicSurveielanceDiseases
                ON finalSyndromicSurveielanceDiseases.idfsDiagnosis = hc.idfsFinalDiagnosis
            LEFT JOIN dbo.trtDiagnosis AS initialSyndromicSurveielanceDiseases
                ON initialSyndromicSurveielanceDiseases.idfsDiagnosis = hc.idfsTentativeDiagnosis
            LEFT JOIN dbo.HumanDiseaseReportRelationship relatedTo
                ON relatedTo.HumanDiseaseReportID = hc.idfHumanCase
                   AND relatedTo.intRowStatus = 0
                   AND relatedTo.RelationshipTypeID = 10503001
            LEFT JOIN dbo.tlbHumanCase relatedToReport
                ON relatedToReport.idfHumanCase = relatedTo.RelateToHumanDiseaseReportID
                   AND relatedToReport.intRowStatus = 0
            LEFT JOIN dbo.HumanDiseaseReportRelationship connectedTo
                ON connectedTo.RelateToHumanDiseaseReportID = hc.idfHumanCase
                   AND connectedTo.intRowStatus = 0
                   AND connectedTo.RelationshipTypeID = 10503001
            LEFT JOIN dbo.tlbHumanCase connectedToReport
                ON connectedToReport.idfHumanCase = connectedTo.HumanDiseaseReportID
                   AND connectedToReport.intRowStatus = 0
        WHERE hc.idfHumanCase = @SearchHumanCaseId
              OR @SearchHumanCaseId IS NULL;
    END TRY
    BEGIN CATCH
        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ILI_Aggregate_Delete]...';


GO
-- ================================================================================================
-- Name: USP_ILI_Aggregate_Delete
--
-- Description: Deletes data for ILI Aggregate  
--          
-- Author: Arnold Kennedy
--
-- Revision History:
-- Name                     Date       Change Detail
-- ------------------------ ---------- -----------------------------------------------------------
-- Mark Wilson				04/22/2019 Updated to DELETE instead of UPDATE
-- Leo Tracchia             09/05/2021 Removed hard deletes, updated to soft deletes.
-- Stephen Long             12/01/2022 Added data audit logic for SAUC30 and 31.
-- Stephen Long             03/06/2023 Fix to use correct object type on data audit.
--
-- Testing code:
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ILI_Aggregate_Delete]
(
    @idfAggregateHeader AS BIGINT, -- This can be deleted and you can retrieve the value from the detail row if preferred
    @AuditUserName NVARCHAR(200)
)
AS
DECLARE @ReturnMessage VARCHAR(MAX) = 'Success',
        @ReturnCode BIGINT = 0,
        @DataAuditEventTypeid BIGINT = 10016002,
        @ObjectTypeID BIGINT = 10017075,                       -- ILI aggregate
        @ObjectID BIGINT = @idfAggregateHeader,
        @ObjectAggregateHeaderTableID BIGINT = 50791690000000, -- tlbBasicSyndromicSurveillanceAggregateHeader
        @ObjectAggregateDetailTableID BIGINT = 50791790000000, -- tlbBasicSyndromicSurveillanceAggregateDetail
        @DataAuditEventID BIGINT,
        @UserID BIGINT,
        @SiteID BIGINT,
        @EIDSSObjectID NVARCHAR(200) = (
                                           SELECT strFormID
                                           FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader
                                           WHERE idfAggregateHeader = @idfAggregateHeader
                                       );
BEGIN
    BEGIN TRY
        BEGIN TRANSACTION;

        --Data audit
        SELECT @UserID = a.userid,
               @SiteID = a.siteid
        FROM dbo.FN_UserSiteInformation(@AuditUserName) a;

        EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @UserID,
                                                  @SiteID,
                                                  @DataAuditEventTypeID,
                                                  @ObjectTypeID,
                                                  @ObjectID,
                                                  @ObjectAggregateHeaderTableID,
                                                  @EIDSSObjectID, 
                                                  @DataAuditEventID OUTPUT;

        INSERT INTO dbo.tauDataAuditDetailDelete
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfObject,
            AuditCreateUser,
            strObject
        )
        SELECT @DataAuditEventID,
               @ObjectAggregateDetailTableID,
               idfAggregateDetail,
               @AuditUserName,
               @EIDSSObjectID
        FROM dbo.tlbBasicSyndromicSurveillanceAggregateDetail
        WHERE idfAggregateHeader = @idfAggregateHeader 
              AND intRowStatus = 0;
        -- End data audit

        UPDATE dbo.tlbBasicSyndromicSurveillanceAggregateDetail
        SET intRowStatus = 1,
            AuditUpdateDTM = GETDATE(), 
            AuditUpdateUser = @AuditUserName
        WHERE idfAggregateHeader = @idfAggregateHeader;

        UPDATE dbo.tlbBasicSyndromicSurveillanceAggregateHeader
        SET intRowStatus = 1, 
            AuditUpdateDTM = GETDATE(), 
            AuditUpdateUser = @AuditUserName
        WHERE idfAggregateHeader = @idfAggregateHeader;

        -- Data audit
        INSERT INTO dbo.tauDataAuditDetailDelete
        (
            idfDataAuditEvent,
            idfObjectTable,
            idfObject,
            AuditCreateUser,
            strObject
        )
        VALUES
        (@DataAuditEventID, @ObjectAggregateHeaderTableID, @ObjectID, @AuditUserName, @EIDSSObjectID);
        -- End data audit

        IF @@TRANCOUNT > 0
            COMMIT;

        SELECT @ReturnCode 'ReturnCode',
               @ReturnMessage 'ReturnMessage';
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK;

        SET @ReturnMessage
            = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: '
              + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE())
              + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: '
              + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();

        SET @ReturnCode = ERROR_NUMBER();

        SELECT @ReturnCode 'ReturnCode',
               @ReturnMessage 'ReturnMessage';
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ILI_Aggregate_Set]...';


GO
-- ================================================================================================
-- Name: USP_ILI_Aggregate_Set
--
-- Description: Insert and update for ILI aggregate forms.
--          
-- Author: Arnold Kennedy
--
-- Revision History:
-- Name                    Date       Change Detail
-- ----------------------- ---------- ------------------------------------------------------------
-- Lamont Mitchell         07/13/2019 Udated to include FormId
-- Ann Xiong               02/28/2020 Modified to save a list of rows instead of one single row to 
--                                    table tlbBasicSyndromicSurveillanceAggregateDetail 
-- Leo Tracchia            03/13/2022 Altered logic for better handling of updates
-- Stephen Long            07/12/2022 Added events parameter and site alert logic.
-- Stephen Long            12/01/2022 Added data audit logic for SAUC30 and 31.
-- Stephen Long            03/06/2023 Fix to use correct object type on data audit.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ILI_Aggregate_Set]
(
    @idfAggregateHeader BIGINT = -1,
    @idfEnteredBy BIGINT,
    @idfsSite BIGINT,
    @intYear INT,
    @intWeek INT,
    @datStartDate DATETIME,
    @datFinishDate DATETIME,
    @strFormId VARCHAR(MAX) = NULL,
    @RowStatus INT,
    @AuditUserName NVARCHAR(200),
    @ILITables NVARCHAR(MAX),
    @Events NVARCHAR(MAX) = NULL
)
AS
BEGIN
    DECLARE @ReturnCode INT = 0,
            @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
            @EventID BIGINT,
            @EventTypeID BIGINT = NULL,
            @EventSiteID BIGINT = NULL,
            @EventObjectID BIGINT = NULL,
            @EventUserID BIGINT = NULL,
            @EventDiseaseID BIGINT = NULL,
            @EventLocationID BIGINT = NULL,
            @EventInformationString NVARCHAR(MAX) = NULL,
            @EventLoginSiteID BIGINT = NULL,
                                                    -- Data audit
            @AuditUserID BIGINT = NULL,
            @AuditSiteID BIGINT = NULL,
            @DataAuditEventID BIGINT = NULL,
            @DataAuditEventTypeID BIGINT = NULL,
            @ObjectTypeID BIGINT = 10017075,        -- ILI aggregate
            @ObjectID BIGINT = @idfAggregateHeader,
            @ObjectTableID BIGINT = 50791690000000; -- tlbBasicSyndromicSurveillanceAggregateHeader
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );
    DECLARE @idfHospital BIGINT,
            @idfAggregateDetail BIGINT,
            @intAge0_4 INT = NULL,
            @intAge5_14 INT = NULL,
            @intAge15_29 INT = NULL,
            @intAge30_64 INT = NULL,
            @intAge65 INT = NULL,
            @inTotalILI INT = NULL,
            @intTotalAdmissions INT = NULL,
            @intILISamples INT = NULL,
            @RowID BIGINT = NULL,
            @RowAction CHAR(1) = NULL;
    DECLARE @ILITablesTemp TABLE
    (
        idfAggregateDetail BIGINT NOT NULL,
        idfHospital BIGINT NULL,
        intAge0_4 INT,
        intAge5_14 INT,
        intAge15_29 INT,
        intAge30_64 INT,
        intAge65 INT,
        inTotalILI INT,
        intTotalAdmissions INT,
        intILISamples INT,
        RowStatus INT NULL,
        RowAction CHAR(1) NULL,
        RowId BIGINT
    );
    DECLARE @ILIAggregateHeaderBeforeEdit TABLE
    (
        AggregateHeaderID BIGINT,
        FormID NVARCHAR(200),
        DateEntered DATETIME,
        DateLastSaved DATETIME,
        EnteredByID BIGINT,
        YearValue INT,
        WeekValue INT,
        StartDate DATETIME,
        FinishDate DATETIME
    );
    DECLARE @ILIAggregateHeaderAfterEdit TABLE
    (
        AggregateHeaderID BIGINT,
        FormID NVARCHAR(200),
        DateEntered DATETIME,
        DateLastSaved DATETIME,
        EnteredByID BIGINT,
        YearValue INT,
        WeekValue INT,
        StartDate DATETIME,
        FinishDate DATETIME
    );
    DECLARE @EventsTemp TABLE
    (
        EventId BIGINT NOT NULL,
        EventTypeId BIGINT NULL,
        UserId BIGINT NULL,
        SiteId BIGINT NULL,
        LoginSiteId BIGINT NULL,
        ObjectId BIGINT NULL,
        DiseaseId BIGINT NULL,
        LocationId BIGINT NULL,
        InformationString NVARCHAR(MAX) NULL
    );

    BEGIN TRY
        BEGIN TRANSACTION

        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        INSERT INTO @ILITablesTemp
        SELECT *
        FROM
            OPENJSON(@ILITables)
            WITH
            (
                IdfAggregateDetail BIGINT,
                IdfHospital BIGINT,
                IntAge0_4 INT,
                IntAge5_14 INT,
                IntAge15_29 INT,
                IntAge30_64 INT,
                IntAge65 INT,
                InTotalILI INT,
                IntTotalAdmissions INT,
                IntILISamples INT,
                RowStatus INT,
                RowAction CHAR(1),
                RowId BIGINT
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        -- Update the header if this is an edit
        IF EXISTS
        (
            SELECT *
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader
            WHERE idfAggregateHeader = @idfAggregateHeader
        )
        BEGIN
            -- Data audit
            SET @DataAuditEventTypeID = 10016003; -- Data audit edit event type

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      @DataAuditEventTypeID,
                                                      @ObjectTypeID,
                                                      @idfAggregateHeader,
                                                      @ObjectTableID,
                                                      @strFormID, 
                                                      @DataAuditEventID OUTPUT;

            INSERT INTO @ILIAggregateHeaderBeforeEdit
            (
                AggregateHeaderID,
                FormID,
                DateEntered,
                DateLastSaved,
                EnteredByID,
                YearValue,
                WeekValue,
                StartDate,
                FinishDate
            )
            SELECT idfAggregateHeader,
                   strFormID,
                   datDateEntered,
                   datDateLastSaved,
                   idfEnteredBy,
                   intYear,
                   intWeek,
                   datStartDate,
                   datFinishDate
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader
            WHERE idfAggregateHeader = @idfAggregateHeader;
            -- End data audit

            UPDATE dbo.tlbBasicSyndromicSurveillanceAggregateHeader
            SET intYear = @intYear,
                intWeek = @intWeek,
                datStartDate = @datStartDate,
                datFinishDate = @datFinishDate,
                datDateLastSaved = GETDATE(),
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfAggregateHeader = @idfAggregateHeader;

            -- Data audit
            INSERT INTO @ILIAggregateHeaderAfterEdit
            (
                AggregateHeaderID,
                FormID,
                DateEntered,
                DateLastSaved,
                EnteredByID,
                YearValue,
                WeekValue,
                StartDate,
                FinishDate
            )
            SELECT idfAggregateHeader,
                   strFormID,
                   datDateEntered,
                   datDateLastSaved,
                   idfEnteredBy,
                   intYear,
                   intWeek,
                   datStartDate,
                   datFinishDate
            FROM dbo.tlbBasicSyndromicSurveillanceAggregateHeader
            WHERE idfAggregateHeader = @idfAggregateHeader;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791710000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.FormID,
                   a.FormID,
                   a.FormID
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.FormID <> b.FormID)
                  OR (
                         a.FormID IS NOT NULL
                         AND b.FormID IS NULL
                     )
                  OR (
                         a.FormID IS NULL
                         AND b.FormID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791720000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.DateEntered,
                   a.DateEntered, 
                   a.FormID
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.DateEntered <> b.DateEntered)
                  OR (
                         a.DateEntered IS NOT NULL
                         AND b.DateEntered IS NULL
                     )
                  OR (
                         a.DateEntered IS NULL
                         AND b.DateEntered IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791730000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.DateLastSaved,
                   a.DateLastSaved,
                   a.FormID
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.DateLastSaved <> b.DateLastSaved)
                  OR (
                         a.DateLastSaved IS NOT NULL
                         AND b.DateLastSaved IS NULL
                     )
                  OR (
                         a.DateLastSaved IS NULL
                         AND b.DateLastSaved IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue, 
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791740000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.EnteredByID,
                   a.EnteredByID,
                   a.FormID 
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.EnteredByID <> b.EnteredByID)
                  OR (
                         a.EnteredByID IS NOT NULL
                         AND b.EnteredByID IS NULL
                     )
                  OR (
                         a.EnteredByID IS NULL
                         AND b.EnteredByID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791750000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.YearValue,
                   a.YearValue,
                   a.FormID
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.YearValue <> b.YearValue)
                  OR (
                         a.YearValue IS NOT NULL
                         AND b.YearValue IS NULL
                     )
                  OR (
                         a.YearValue IS NULL
                         AND b.YearValue IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791760000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.WeekValue,
                   a.WeekValue,
                   a.FormID
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.WeekValue <> b.WeekValue)
                  OR (
                         a.WeekValue IS NOT NULL
                         AND b.WeekValue IS NULL
                     )
                  OR (
                         a.WeekValue IS NULL
                         AND b.WeekValue IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791770000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.StartDate,
                   a.StartDate,
                   a.FormID 
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.StartDate <> b.StartDate)
                  OR (
                         a.StartDate IS NOT NULL
                         AND b.StartDate IS NULL
                     )
                  OR (
                         a.StartDate IS NULL
                         AND b.StartDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   50791780000000,
                   a.AggregateHeaderID,
                   NULL,
                   b.FinishDate,
                   a.FinishDate,
                   a.FormID
            FROM @ILIAggregateHeaderAfterEdit AS a
                FULL JOIN @ILIAggregateHeaderBeforeEdit AS b
                    ON a.AggregateHeaderID = b.AggregateHeaderID
            WHERE (a.FinishDate <> b.FinishDate)
                  OR (
                         a.FinishDate IS NOT NULL
                         AND b.FinishDate IS NULL
                     )
                  OR (
                         a.FinishDate IS NULL
                         AND b.FinishDate IS NOT NULL
                     );
        -- End data audit
        END
        ELSE
        BEGIN
            -- Get new PK for insert
            BEGIN
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbBasicSyndromicSurveillanceAggregateHeader',
                                               @idfAggregateHeader OUTPUT;
            END

            -- Data audit
            SET @DataAuditEventTypeID = 10016001; -- Data audit create event type

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      @DataAuditEventTypeID,
                                                      @ObjectTypeID,
                                                      @idfAggregateHeader,
                                                      @ObjectTableID,
                                                      @strFormID, 
                                                      @DataAuditEventID OUTPUT;
            -- End data audit

            -- Get New Smartkey
            IF ISNULL(@strFormID, N'') = N''
               OR LEFT(ISNULL(@strFormID, N''), 4) = '(new'
            BEGIN
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NextNumber_GET 'Basic Syndromic Surveillance Aggregate Form',
                                                @strFormID OUTPUT,
                                                NULL;
            END

            INSERT INTO dbo.tlbBasicSyndromicSurveillanceAggregateHeader
            (
                idfAggregateHeader,
                strFormID,
                datDateEntered,
                datDateLastSaved,
                idfEnteredBy,
                idfsSite,
                intYear,
                intWeek,
                datStartDate,
                datFinishDate,
                datModificationForArchiveDate,
                strMaintenanceFlag,
                strReservedAttribute,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateDTM,
                AuditCreateUser
            )
            VALUES
            (   @idfAggregateHeader,
                @strFormID,
                GETDATE(),
                GETDATE(),
                @idfEnteredBy,
                @idfsSite,
                @intYear,
                @intWeek,
                @datStartDate,
                @datFinishDate,
                GETDATE(),
                'system',
                'V7 ILI Syndromic Surveillance Aggregate Form',
                10519001, -- EIDSS7
                '[{"idfAggregateHeader":' + CAST(@idfAggregateHeader AS NVARCHAR(300)) + '}]',
                GETDATE(),
                @AuditUserName
            );

            UPDATE @EventsTemp
            SET ObjectId = @idfAggregateHeader
            WHERE ObjectId = 0;

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser, 
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @idfAggregateHeader,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName, 
             @strFormID
            );
        -- End data audit
        END

        WHILE EXISTS (SELECT * FROM @ILITablesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = RowId,
                @idfAggregateDetail = idfAggregateDetail,
                @RowStatus = RowStatus,
                @idfHospital = idfHospital,
                @intAge0_4 = intAge0_4,
                @intAge5_14 = intAge5_14,
                @intAge15_29 = intAge15_29,
                @intAge30_64 = intAge30_64,
                @intAge65 = intAge65,
                @inTotalILI = inTotalILI,
                @intTotalAdmissions = intTotalAdmissions,
                @intILISamples = intILISamples,
                @RowAction = RowAction
            FROM @ILITablesTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ILI_Aggregate_Detail_SET @idfAggregateDetail,
                                                     @idfAggregateHeader,
                                                     @RowStatus,
                                                     @idfHospital,
                                                     @intAge0_4,
                                                     @intAge5_14,
                                                     @intAge15_29,
                                                     @intAge30_64,
                                                     @intAge65,
                                                     @inTotalILI,
                                                     @intTotalAdmissions,
                                                     @intILISamples,
                                                     @AuditUserName,
                                                     @DataAuditEventID, 
                                                     @strFormID, 
                                                     @RowAction;

            DELETE FROM @ILITablesTemp
            WHERE RowId = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventID = EventId,
                @EventTypeID = EventTypeId,
                @EventUserID = UserId,
                @EventObjectID = ObjectId,
                @EventSiteID = SiteId,
                @EventDiseaseID = DiseaseId,
                @EventLocationID = LocationId,
                @EventInformationString = InformationString,
                @EventLoginSiteID = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_ADMIN_EVENT_SET @EventID,
                                             @EventTypeID,
                                             @EventUserID,
                                             @EventObjectID,
                                             @EventDiseaseID,
                                             @EventSiteID,
                                             @EventInformationString,
                                             @EventLoginSiteID,
                                             @EventLocationID,
                                             @AuditUserName, 
                                             @DataAuditEventID, 
                                             @strFormID;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventID;
        END;

        IF @@TRANCOUNT > 0
            COMMIT;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK;

        THROW;
    END CATCH
    SELECT @ReturnCode 'ReturnCode',
           @ReturnMessage 'ReturnMessage',
           @strFormID 'strFormID',
           @idfAggregateHeader 'idfAggregateHeader',
           @idfAggregateDetail 'idfAggregateDetail';
END
GO
PRINT N'Altering Procedure [dbo].[USP_OMM_Session_Set]...';


GO
-- ================================================================================================
-- Name: USP_OMM_Session_Set
-- 
-- Description: Insert/Update for Campaign Monitoring Session
--          
-- Author: Doug Albanese
-- Revision History:
-- Name	                     Date       Change Detail
-- ------------------------- ---------- ----------------------------------------------------------
-- Doug Albanese             10/08/2020 Adding Auditing information
-- Doug Albanese             09/02/2021 Refactored for cleaner model to contain only relavent 
--                                      parameters
-- Doug Albanese             09/08/2021 Replaced USP_GBL_ADDRESS_SET with USSP_GBL_ADDRESS_SET
-- Doug Albanese             09/10/2021 Removed SQL statements left in for debugging, supressed 
--                                      the use of USSP_GBL_ADDRESS_SET...which was recently 
--                                      swapped out
-- Mark Wilson	             09/13/2021 updated to use USP_GBL_ADDRESS_SET, corrected addl fields
-- Doug Albanese             09/14/2021 Corrected the parameters passed to USP_GBL_ADDRESS_SET
-- Mark Wilson               10/06/2021 updated to add Elevation to USP_GBL_ADDRESS_SET
-- Doug Albanese             11/02/2021 Remove condition to allow NULL storage of species 
--                                      parameters
-- Stephen Long              07/12/2022 Added events parameter for site alerts and removed language 
--                                      ID.
-- Mike Kornegay			 09/14/2022 Added null to note field for input to USP_ADMIN_EVENT_SET.
-- Doug Albanese			 03/08/2023	Implemented Data Auditing
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_OMM_Session_Set]
(
    @idfOutbreak BIGINT = NULL,
    @idfsDiagnosisOrDiagnosisGroup BIGINT = NULL,
    @idfsOutbreakStatus BIGINT = NULL,
    @OutbreakTypeId BIGINT = NULL,
    @idfsLocation BIGINT = NULL,
    @datStartDate DATETIME = NULL,
    @datCloseDate DATETIME = NULL,
    @strOutbreakID NVARCHAR(200) = NULL,
    @strDescription NVARCHAR(2000) = NULL,
    @intRowStatus INT = 0,
    @datModificationForArchiveDate DATETIME = NULL,
    @idfPrimaryCaseOrSession BIGINT = NULL,
    @idfsSite BIGINT,
    @outbreakParameters NVARCHAR(MAX) = NULL,
    @User NVARCHAR(200) = '',
    @Events NVARCHAR(MAX) = NULL
)
AS
BEGIN
    DECLARE @returnCode INT = 0,
            @returnMsg NVARCHAR(MAX) = 'SUCCESS',
            @EventId BIGINT,
            @EventTypeId BIGINT = NULL,
            @EventSiteId BIGINT = NULL,
            @EventObjectId BIGINT = NULL,
            @EventUserId BIGINT = NULL,
            @EventDiseaseId BIGINT = NULL,
            @EventLocationId BIGINT = NULL,
            @EventInformationString NVARCHAR(MAX) = NULL,
            @EventLoginSiteId BIGINT = NULL,

			-- Data audit
		   @AuditUserID BIGINT = NULL,
		   @AuditSiteID BIGINT = NULL,
		   @DataAuditEventID BIGINT = NULL,
		   @DataAuditEventTypeID BIGINT = NULL,
		   @ObjectTypeID BIGINT = 10017081,   
		   @ObjectID BIGINT = @idfOutbreak,
		   @ObjectTableID BIGINT = 75660000000; 

    DECLARE @EventsTemp TABLE
    (
        EventId BIGINT NOT NULL,
        EventTypeId BIGINT NULL,
        UserId BIGINT NULL,
        SiteId BIGINT NULL,
        LoginSiteId BIGINT NULL,
        ObjectId BIGINT NULL,
        DiseaseId BIGINT NULL,
        LocationId BIGINT NULL,
        InformationString NVARCHAR(MAX) NULL
    );

	DECLARE @OutbreakSessionBeforeEdit TABLE (
	  idfGeoLocation				   BIGINT,
	  idfOutbreak					   BIGINT,
	  idfsOutbreakStatus			   BIGINT,
	  datStartDate					   DATETIME,
	  datFinishDate					   DATETIME,
	  strOutbreakID					   NVARCHAR(200),
	  strDescription				   NVARCHAR(2000),
	  idfsDiagnosisOrDiagnosisGroup	   BIGINT,
	  idfPrimaryCaseOrSession		   BIGINT
	)

   DECLARE @OutbreakSessionAfterEdit TABLE (
	  idfGeoLocation				   BIGINT,
	  idfOutbreak					   BIGINT,
	  idfsOutbreakStatus			   BIGINT,
	  datStartDate					   DATETIME,
	  datFinishDate					   DATETIME,
	  strOutbreakID					   NVARCHAR(200),
	  strDescription				   NVARCHAR(2000),
	  idfsDiagnosisOrDiagnosisGroup	   BIGINT,
	  idfPrimaryCaseOrSession		   BIGINT
	)

    IF @idfsSite IS NULL
    BEGIN
        SELECT @returnCode as ReturnCode,
               @returnMsg as ReturnMessage,
               @idfOutbreak as idfOutbreak,
               @strOutbreakID as strOutbreakID;
    END
    ELSE
    BEGIN
        DECLARE @outbreakLocation BIGINT = NULL;
        DECLARE @OutbreakSpeciesParameterUID BIGINT;
        DECLARE @OutbreakSpeciesTypeID BIGINT;
        DECLARE @CaseMonitoringDuration INT;
        DECLARE @CaseMonitoringFrequency INT;
        DECLARE @ContactTracingDuration INT;
        DECLARE @ContactTracingFrequency INT;

        DECLARE @ParameterSpeciesTypes TABLE (OutbreakSpeciesTypeID BIGINT);

        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );

		 -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@User) userInfo;
        -- End data audit


		 IF @idfOutbreak IS NULL
            BEGIN
			   --IF ISNULL(@idfOutbreak, -1) < 0
                --BEGIN
                  INSERT INTO @SuppressSelect
                  EXEC dbo.USP_GBL_NEXTKEYID_GET @tableName = 'tlbOutbreak',
                                                @idfsKey = @idfOutbreak OUTPUT;

                  INSERT INTO @SuppressSelect
                  EXEC dbo.USP_GBL_NextNumber_GET @ObjectName = 'Outbreak Session',
                                                   @NextNumberValue = @strOutbreakID OUTPUT,
                                                   @InstallationSite = NULL;
                --END

                -- Data audit (Create)
                SET @DataAuditEventTypeID = 10016001; -- Data audit create event type

				 INSERT INTO @SuppressSelect            
				 EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,                                                      
					@AuditSiteID,                                                      
					@DataAuditEventTypeID,                                                      
					@ObjectTypeID,                                                      
					@idfOutbreak,                                                      
					@ObjectTableID,                                                      
					@strOutbreakID,                                                       
					@DataAuditEventID OUTPUT;
            END
         ELSE
            BEGIN
			   SELECT
				  @strOutbreakID = strOutbreakID
			   FROM
				  tlbOutbreak
			   WHERE
				  idfOutbreak = @idfOutbreak

			   IF @intRowStatus = 1
				  BEGIN
					 -- Data audit (Delete)
					  SET @DataAuditEventTypeID = 10016002; -- Data audit edit event type
					   INSERT INTO @SuppressSelect            
					   EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,                                                      
						  @AuditSiteID,                                                      
						  @DataAuditEventTypeID,                                                      
						  @ObjectTypeID,                                                      
						  @idfOutbreak,                                                      
						  @ObjectTableID,                                                      
						  @strOutbreakID,                                                       
						  @DataAuditEventID OUTPUT;
				  END
			   ELSE
				  BEGIN
					  -- Data audit (Edit)
					  SET @DataAuditEventTypeID = 10016003; -- Data audit edit event type

					   INSERT INTO @SuppressSelect            
					   EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,                                                      
						  @AuditSiteID,                                                      
						  @DataAuditEventTypeID,                                                      
						  @ObjectTypeID,                                                      
						  @idfOutbreak,                                                      
						  @ObjectTableID,                                                      
						  @strOutbreakID,                                                       
						  @DataAuditEventID OUTPUT;
				  END
            END
         -- End data audit

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX)
            );

        IF @outbreakLocation = NULL
           or @outbreakLocation IS NULL
        BEGIN
            INSERT INTO @SuppressSelect
            EXEC dbo.USSP_GBL_ADDRESS_SET @GeoLocationID = @outbreakLocation OUTPUT,
                                          @ResidentTypeID = NULL,
                                          @GroundTypeID = NULL,
                                          @GeolocationTypeID = 10036004, -- Relative
                                          @LocationID = @idfsLocation,
                                          @Apartment = NULL,
                                          @Building = NULL,
                                          @StreetName = NULL,
                                          @House = NULL,
                                          @PostalCodeString = NULL,
                                          @DescriptionString = NULL,
                                          @Distance = NULL,
                                          @Latitude = NULL,
                                          @Longitude = NULL,
                                          @Elevation = NULL,
                                          @Accuracy = NULL,
                                          @Alignment = NULL,
                                          @ForeignAddressIndicator = 0,
                                          @ForeignAddressString = NULL,
                                          @GeolocationSharedIndicator = 0,
                                          @AuditUserName = @User;
        END

        BEGIN TRY
            SET @returnCode = 0;
            SET @returnMsg = 'SUCCESS';

            DECLARE @convertedParameters TABLE
            (
                OutbreakSpeciesParameterUID BIGINT,
                OutbreakSpeciesTypeID BIGINT NULL,
                CaseMonitoringDuration INT NULL,
                CaseMonitoringFrequency INT NULL,
                ContactTracingDuration INT NULL,
                ContactTracingFrequency INT NULL,
                intRowStatus INT
            );

            INSERT INTO @convertedParameters
            SELECT *
            FROM
                OPENJSON(@outbreakParameters)
                WITH
                (
                    OutbreakSpeciesParameterUID BIGINT,
                    OutbreakSpeciesTypeID BIGINT,
                    CaseMonitoringDuration INT,
                    CaseMonitoringFrequency INT,
                    ContactTracingDuration INT,
                    ContactTracingFrequency INT,
                    intRowStatus INT
                );

            IF EXISTS (SELECT * FROM dbo.tlbOutbreak WHERE idfOutbreak = @idfOutbreak)
            BEGIN
			   --Data Audit (Gather previous record items before edit)
			   INSERT INTO @OutbreakSessionBeforeEdit (
			   	  idfGeoLocation,
				  idfOutbreak,
				  idfsOutbreakStatus,
				  datStartDate,
				  datFinishDate,
				  strOutbreakID,
				  strDescription,
				  idfsDiagnosisOrDiagnosisGroup,
				  idfPrimaryCaseOrSession   
			   )
			   SELECT
				  idfGeoLocation,
				  idfOutbreak,
				  idfsOutbreakStatus,
				  datStartDate,
				  datFinishDate,
				  strOutbreakID,
				  strDescription,
				  idfsDiagnosisOrDiagnosisGroup,
				  idfPrimaryCaseOrSession  
			   FROM
				  tlbOutbreak
			   WHERE
				  idfOutbreak = @idfOutbreak
			   --Data Autdit End

                UPDATE dbo.tlbOutbreak
                SET idfsDiagnosisOrDiagnosisGroup = @idfsDiagnosisOrDiagnosisGroup,
                    idfsOutbreakStatus = @idfsOutbreakStatus,
                    OutbreakTypeID = @OutbreakTypeID,
                    idfGeoLocation = @outbreakLocation,
                    datStartDate = @datStartDate,
                    datFinishDate = @datCloseDate,
                    strDescription = @strDescription,
                    intRowStatus = COALESCE(@intRowStatus, 0),
                    datModificationForArchiveDate = @datModificationForArchiveDate,
                    idfPrimaryCaseOrSession = @idfPrimaryCaseOrSession,
                    idfsSite = @idfsSite,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = ISNULL(@User, SUSER_NAME())
                WHERE idfOutbreak = @idfOutbreak;

			   --Data Audit (Gather previous record items before edit)
			   INSERT INTO @OutbreakSessionAfterEdit (
			   	  idfGeoLocation,
				  idfOutbreak,
				  idfsOutbreakStatus,
				  datStartDate,
				  datFinishDate,
				  strOutbreakID,
				  strDescription,
				  idfsDiagnosisOrDiagnosisGroup,
				  idfPrimaryCaseOrSession   
			   )
			   SELECT
				  idfGeoLocation,
				  idfOutbreak,
				  idfsOutbreakStatus,
				  datStartDate,
				  datFinishDate,
				  strOutbreakID,
				  strDescription,
				  idfsDiagnosisOrDiagnosisGroup,
				  idfPrimaryCaseOrSession  
			   FROM
				  tlbOutbreak
			   WHERE
				  idfOutbreak = @idfOutbreak
			   
			   INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80160000000, --idfGeoLocation
                       a.idfOutbreak,
                       NULL,
                       b.idfGeoLocation,
                       a.idfGeoLocation,
                       @User,
                       @idfOutbreak
                FROM @OutbreakSessionAfterEdit AS a
                    FULL JOIN @OutbreakSessionBeforeEdit AS b
                        ON a.idfOutbreak = b.idfOutbreak
                WHERE (a.idfGeoLocation <> b.idfGeoLocation)
                      OR (
                             a.idfGeoLocation IS NOT NULL
                             AND b.idfGeoLocation IS NULL
                         )
                      OR (
                             a.idfGeoLocation IS NULL
                             AND b.idfGeoLocation IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80190000000, --idfsOutbreakStatus
                       a.idfOutbreak,
                       NULL,
                       b.idfsOutbreakStatus,
                       a.idfsOutbreakStatus,
                       @User,
                       @idfOutbreak
                FROM @OutbreakSessionAfterEdit AS a
                    FULL JOIN @OutbreakSessionBeforeEdit AS b
                        ON a.idfOutbreak = b.idfOutbreak
                WHERE (a.idfsOutbreakStatus <> b.idfsOutbreakStatus)
                      OR (
                             a.idfsOutbreakStatus IS NOT NULL
                             AND b.idfsOutbreakStatus IS NULL
                         )
                      OR (
                             a.idfsOutbreakStatus IS NULL
                             AND b.idfsOutbreakStatus IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       746510000000, --datStartDate
                       a.idfOutbreak,
                       NULL,
                       b.datStartDate,
                       a.datStartDate,
                       @User,
                       @idfOutbreak
                FROM @OutbreakSessionAfterEdit AS a
                    FULL JOIN @OutbreakSessionBeforeEdit AS b
                        ON a.idfOutbreak = b.idfOutbreak
                WHERE (a.datStartDate <> b.datStartDate)
                      OR (
                             a.datStartDate IS NOT NULL
                             AND b.datStartDate IS NULL
                         )
                      OR (
                             a.datStartDate IS NULL
                             AND b.datStartDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       746520000000, --datFinishDate
                       a.idfOutbreak,
                       NULL,
                       b.datFinishDate,
                       a.datFinishDate,
                       @User,
                       @idfOutbreak
                FROM @OutbreakSessionAfterEdit AS a
                    FULL JOIN @OutbreakSessionBeforeEdit AS b
                        ON a.idfOutbreak = b.idfOutbreak
                WHERE (a.datFinishDate <> b.datFinishDate)
                      OR (
                             a.datFinishDate IS NOT NULL
                             AND b.datFinishDate IS NULL
                         )
                      OR (
                             a.datFinishDate IS NULL
                             AND b.datFinishDate IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       746540000000, --strDescription
                       a.idfOutbreak,
                       NULL,
                       b.strDescription,
                       a.strDescription,
                       @User,
                       @idfOutbreak
                FROM @OutbreakSessionAfterEdit AS a
                    FULL JOIN @OutbreakSessionBeforeEdit AS b
                        ON a.idfOutbreak = b.idfOutbreak
                WHERE (a.strDescription <> b.strDescription)
                      OR (
                             a.strDescription IS NOT NULL
                             AND b.strDescription IS NULL
                         )
                      OR (
                             a.strDescription IS NULL
                             AND b.strDescription IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       12675310000000, --idfsDiagnosisOrDiagnosisGroup
                       a.idfOutbreak,
                       NULL,
                       b.idfsDiagnosisOrDiagnosisGroup,
                       a.idfsDiagnosisOrDiagnosisGroup,
                       @User,
                       @idfOutbreak
                FROM @OutbreakSessionAfterEdit AS a
                    FULL JOIN @OutbreakSessionBeforeEdit AS b
                        ON a.idfOutbreak = b.idfOutbreak
                WHERE (a.idfsDiagnosisOrDiagnosisGroup <> b.idfsDiagnosisOrDiagnosisGroup)
                      OR (
                             a.idfsDiagnosisOrDiagnosisGroup IS NOT NULL
                             AND b.idfsDiagnosisOrDiagnosisGroup IS NULL
                         )
                      OR (
                             a.idfsDiagnosisOrDiagnosisGroup IS NULL
                             AND b.idfsDiagnosisOrDiagnosisGroup IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       12675370000000, --idfPrimaryCaseOrSession
                       a.idfOutbreak,
                       NULL,
                       b.idfPrimaryCaseOrSession,
                       a.idfPrimaryCaseOrSession,
                       @User,
                       @idfOutbreak
                FROM @OutbreakSessionAfterEdit AS a
                    FULL JOIN @OutbreakSessionBeforeEdit AS b
                        ON a.idfOutbreak = b.idfOutbreak
                WHERE (a.idfPrimaryCaseOrSession <> b.idfPrimaryCaseOrSession)
                      OR (
                             a.idfPrimaryCaseOrSession IS NOT NULL
                             AND b.idfPrimaryCaseOrSession IS NULL
                         )
                      OR (
                             a.idfPrimaryCaseOrSession IS NULL
                             AND b.idfPrimaryCaseOrSession IS NOT NULL
                         );
            -- End data audit
            END
            ELSE
            BEGIN
                INSERT INTO dbo.tlbOutbreak
                (
                    idfOutbreak,
                    idfsDiagnosisOrDiagnosisGroup,
                    idfsOutbreakStatus,
                    OutbreakTypeID,
                    idfGeoLocation,
                    datStartDate,
                    datFinishDate,
                    strOutbreakID,
                    strDescription,
                    intRowStatus,
                    rowguid,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    datModificationForArchiveDate,
                    idfPrimaryCaseOrSession,
                    idfsSite,
                    AuditCreateDTM,
                    AuditCreateUser,
                    AuditUpdateDTM,
                    AuditUpdateUser
                )
                VALUES
                (@idfOutbreak,
                 @idfsDiagnosisOrDiagnosisGroup,
                 @idfsOutbreakStatus,
                 @OutbreakTypeId,
                 @outbreakLocation,
                 @datStartDate,
                 @datCloseDate,
                 @strOutbreakID,
                 @strDescription,
                 0  ,
                 NEWID(),
                 10519001,
                 '[{"idfOutbreak":' + CAST(@idfOutbreak AS NVARCHAR(300)) + '}]',
                 @datModificationForArchiveDate,
                 @idfPrimaryCaseOrSession,
                 @idfsSite,
                 GETDATE(),
                 ISNULL(@User, SUSER_NAME()),
                 GETDATE(),
                 ISNULL(@User, SUSER_NAME())
                );

                UPDATE @EventsTemp
                SET ObjectId = @idfOutbreak
                WHERE ObjectId = 0;

				-- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    strObject
                )
                VALUES
                (@DataAuditEventID,
                 @ObjectTableID,
                 @idfOutbreak,
                 10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                 + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
                 @User,
                 @idfOutbreak
                );
			   -- End data audit


            END

            --Modifications to a Table Variable prevents Adding a column. Code was modified to produce this feild
            --Now we need to get a FK for each row and insert it one at a time so that the "Next Key" generation will be proper.
            WHILE
            (SELECT COUNT(OutbreakSpeciesTypeID) FROM @convertedParameters) > 0
            BEGIN
                --Identify the first Outbreak Species Type so that we can modify one row at a time.
                --Using table variable with species types only
                SELECT TOP 1
                    @OutbreakSpeciesParameterUID = OutbreakSpeciesParameterUID,
                    @OutbreakSpeciesTypeID = OutbreakSpeciesTypeID,
                    @CaseMonitoringDuration = CaseMonitoringDuration,
                    @CaseMonitoringFrequency = CaseMonitoringFrequency,
                    @ContactTracingDuration = ContactTracingDuration,
                    @ContactTracingFrequency = ContactTracingFrequency,
                    @intRowStatus = intRowStatus
                FROM @convertedParameters;

                IF EXISTS
                (
                    SELECT OutbreakSpeciesParameterUID
                    FROM dbo.OutbreakSpeciesParameter
                    WHERE OutbreakSpeciesParameterUID = @OutbreakSpeciesParameterUID
                )
                BEGIN
                    UPDATE dbo.OutbreakSpeciesParameter
                    SET CaseMonitoringDuration = @CaseMonitoringDuration,
                        CaseMonitoringFrequency = @CaseMonitoringFrequency,
                        ContactTracingDuration = @ContactTracingDuration,
                        ContactTracingFrequency = @ContactTracingFrequency,
                        intRowStatus = @intRowStatus,
                        AuditUpdateUser = ISNULL(@User, SUSER_NAME()),
                        AuditUpdateDTM = GETDATE()
                    WHERE OutbreakSpeciesParameterUID = @OutbreakSpeciesParameterUID;
                END
                ELSE
                BEGIN
                    --IF @CaseMonitoringDuration > 0 AND @ContactTracingDuration > 0
                    --	BEGIN
                    INSERT INTO @SuppressSelect
                    EXEC dbo.USP_GBL_NEXTKEYID_GET @tableName = 'OutbreakSpeciesParameter',
                                                   @idfsKey = @OutbreakSpeciesParameterUID OUTPUT;

                    --Update the JSON data that was converted over to a table variable
                    UPDATE @convertedParameters
                    SET OutbreakSpeciesParameterUID = @OutbreakSpeciesParameterUID
                    WHERE OutbreakSpeciesTypeID = @OutbreakSpeciesTypeID;

                    --Because USP_GBL_NEXTKEYID_GET will need to have the record in the destination table, we will have to insert it now,
                    --so that the next key will be generated.
                    INSERT INTO OutbreakSpeciesParameter
                    (
                        OutbreakSpeciesParameterUID,
                        idfOutbreak,
                        OutbreakSpeciesTypeID,
                        CaseMonitoringDuration,
                        CaseMonitoringFrequency,
                        ContactTracingDuration,
                        ContactTracingFrequency,
                        intRowStatus,
                        rowguid,
                        SourceSystemNameID,
                        SourceSystemKeyValue,
                        AuditCreateUser,
                        AuditCreateDTM
                    )
                    VALUES
                    (@OutbreakSpeciesParameterUID,
                     @idfOutbreak,
                     @OutbreakSpeciesTypeID,
                     @CaseMonitoringDuration,
                     @CaseMonitoringFrequency,
                     @ContactTracingDuration,
                     @ContactTracingFrequency,
                     0  ,
                     NEWID(),
                     10519001,
                     '[{"OutbreakSpeciesParameterUID":' + CAST(@OutbreakSpeciesParameterUID AS NVARCHAR(300)) + '}]',
                     ISNULL(@User, SUSER_NAME()),
                     GETDATE()
                    );
                --END
                END

                --Delete the Species type that we have been working with so that the loop will decrement and fall out when 0.
                SET ROWCOUNT 1;

                DELETE FROM @convertedParameters;

                SET ROWCOUNT 0;
            END

            WHILE EXISTS (SELECT * FROM @EventsTemp)
            BEGIN
                SELECT TOP 1
                    @EventId = EventId,
                    @EventTypeId = EventTypeId,
                    @EventUserId = UserId,
                    @EventObjectId = ObjectId,
                    @EventSiteId = SiteId,
                    @EventDiseaseId = DiseaseId,
                    @EventLocationId = LocationId,
                    @EventInformationString = InformationString,
                    @EventLoginSiteId = LoginSiteId
                FROM @EventsTemp;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_ADMIN_EVENT_SET @EventId,
                                                @EventTypeId,
                                                @EventUserId,
                                                @EventObjectId,
                                                @EventDiseaseId,
                                                @EventSiteId,
                                                @EventInformationString,
												--null,
                                                @EventLoginSiteId,
                                                @EventLocationId,
                                                @User;

                DELETE FROM @EventsTemp
                WHERE EventId = @EventId;
            END;
        END TRY
        BEGIN CATCH
            IF @@TRANCOUNT = 1
                ROLLBACK;

            SET @returnCode = ERROR_NUMBER();
            SET @returnMsg
                = 'ErrorNumber: ' + CONVERT(VARCHAR, ERROR_NUMBER()) + ' ErrorSeverity: '
                  + CONVERT(VARCHAR, ERROR_SEVERITY()) + ' ErrorState: ' + CONVERT(VARCHAR, ERROR_STATE())
                  + ' ErrorProcedure: ' + ISNULL(ERROR_PROCEDURE(), '') + ' ErrorLine: '
                  + CONVERT(VARCHAR, ISNULL(ERROR_LINE(), '')) + ' ErrorMessage: ' + ERROR_MESSAGE();

            ; THROW;
        END CATCH

        SELECT @returnCode AS ReturnCode,
               @returnMsg AS ReturnMessage,
               @idfOutbreak AS idfOutbreak,
               @strOutbreakID AS strOutbreakID;
    END
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_SPECIESTYPE_DEL]...';


GO
--=================================================================================================
-- Name: USP_REF_SPECIESTYPE_DEL
--
-- Description:	Removes species type from active list of species types.
--
-- Author:		Ricky Moss
--							
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss		09/26/2018 Initial Release
-- Ricky Moss		01/03/2019 Added deleteAnyway parameter
-- Doug Albanese	08/03/2021 Added the deletion routine to deactivate the record tied to the 
--                             base reference
-- Stephen Long     11/01/2022 Added site alert logic.
-- Ann Xiong		02/24/2023 Implemented Data Audit
--
-- Test Code:
-- exec USP_REF_SPECIESTYPE_DEL 55615180000088, 0
--=================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_SPECIESTYPE_DEL]
(
    @IdfsSpeciesType BIGINT,
    @DeleteAnyway BIT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );

	--Data Audit--
	declare @idfUserId BIGINT = NULL;
	declare @idfSiteId BIGINT = NULL;
	declare @idfsDataAuditEventType bigint = NULL;
	declare @idfsObjectType bigint = 10017009;                         -- Species
	declare @idfObject bigint = @IdfsSpeciesType;
	declare @idfObjectTable_trtSpeciesType bigint = 75960000000;
	declare @idfDataAuditEvent bigint= NULL;
	declare @idfObjectTable_trtBaseReference bigint = 75820000000;
	declare @idfObjectTable_trtStringNameTranslation bigint = 75990000000;

	-- Get and Set UserId and SiteId
	select @idfUserId =userInfo.UserId, @idfSiteId=UserInfo.SiteId from dbo.FN_UserSiteInformation('Administrator') userInfo

	--Data Audit--

        IF (
               NOT EXISTS
        (
            SELECT idfAggrDiagnosticActionMTX
            FROM dbo.tlbAggrDiagnosticActionMTX
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfAggrProphylacticActionMTX
            FROM dbo.tlbAggrProphylacticActionMTX
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfAggrVetCaseMTX
            FROM dbo.tlbAggrVetCaseMTX
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfCampaignToDiagnosis
            FROM dbo.tlbCampaignToDiagnosis
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfMonitoringSessionToDiagnosis
            FROM dbo.tlbMonitoringSessionToDiagnosis
            WHERE @IdfsSpeciesType = @idfsSpeciesType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfCampaignToDiagnosis
            FROM dbo.tlbCampaignToDiagnosis
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfSpecies
            FROM dbo.tlbSpecies
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT MonitoringSessionToSampleType
            FROM dbo.MonitoringSessionToSampleType
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfSpeciesActual
            FROM dbo.tlbSpeciesActual
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfSpeciesToGroupForCustomReport
            FROM dbo.trtSpeciesToGroupForCustomReport
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0
        )
               AND NOT EXISTS
        (
            SELECT idfSpeciesTypeToAnimalAge
            FROM dbo.trtSpeciesTypeToAnimalAge
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0
        )
           )
           OR @DeleteAnyway = 1
        BEGIN
            UPDATE trtSpeciesType
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsSpeciesType = @IdfsSpeciesType
                  AND intRowStatus = 0;

			--Data Audit

			-- tauDataAuditEvent Event Type - Delete
			set @idfsDataAuditEventType =10016002;

			-- insert record into tauDataAuditEvent
			EXEC USSP_GBL_DataAuditEvent_GET @idfUserID,@idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@idfObject, @idfObjectTable_trtSpeciesType, @idfDataAuditEvent OUTPUT

			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
					SELECT @idfDataAuditEvent, @idfObjectTable_trtSpeciesType, @idfObject
			-- End data audit

            UPDATE trtBaseReference
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @IdfsSpeciesType
                  AND intRowStatus = 0;

			--Data Audit
			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
					SELECT @idfDataAuditEvent, @idfObjectTable_trtBaseReference, @idfObject
			-- End data audit

            UPDATE trtStringNameTranslation
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @IdfsSpeciesType;

			--Data Audit
			INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject )
					SELECT @idfDataAuditEvent, @idfObjectTable_trtStringNameTranslation, @idfObject
			-- End data audit

            UPDATE trtBaseReference
            SET intRowStatus = 1,
                AuditUpdateDTM = GETDATE(),
                AuditUpdateUser = @AuditUserName
            WHERE idfsBaseReference = @IdfsSpeciesType;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                           @EventTypeId,
                                           @UserId,
                                           @IdfsSpeciesType,
                                           NULL,
                                           @SiteId,
                                           NULL,
                                           @SiteId,
                                           @LocationId,
                                           @AuditUserName;
        END
        ELSE IF (
                    EXISTS
             (
                 SELECT idfAggrDiagnosticActionMTX
                 FROM dbo.tlbAggrDiagnosticActionMTX
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                    OR EXISTS
             (
                 SELECT idfAggrProphylacticActionMTX
                 FROM dbo.tlbAggrProphylacticActionMTX
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                    OR EXISTS
             (
                 SELECT idfAggrVetCaseMTX
                 FROM dbo.tlbAggrVetCaseMTX
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                    OR EXISTS
             (
                 SELECT idfCampaignToDiagnosis
                 FROM dbo.tlbCampaignToDiagnosis
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                    OR EXISTS
             (
                 SELECT idfMonitoringSessionToDiagnosis
                 FROM dbo.tlbMonitoringSessionToDiagnosis
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                    OR EXISTS
             (
                 SELECT idfCampaignToDiagnosis
                 FROM dbo.tlbCampaignToDiagnosis
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                    OR EXISTS
             (
                 SELECT idfSpecies
                 FROM dbo.tlbSpecies
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                    OR EXISTS
             (
                 SELECT MonitoringSessionToSampleType
                 FROM dbo.MonitoringSessionToSampleType
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                    OR EXISTS
             (
                 SELECT idfSpeciesActual
                 FROM dbo.tlbSpeciesActual
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                    OR EXISTS
             (
                 SELECT idfSpeciesToGroupForCustomReport
                 FROM dbo.trtSpeciesToGroupForCustomReport
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                    OR EXISTS
             (
                 SELECT idfSpeciesTypeToAnimalAge
                 FROM dbo.trtSpeciesTypeToAnimalAge
                 WHERE idfsSpeciesType = @IdfsSpeciesType
                       AND intRowStatus = 0
             )
                )
        BEGIN
            SELECT @ReturnCode = -1;
            SELECT @ReturnMessage = 'IN USE';
        END

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_STATISTICDATATYPE_DEL]...';


GO
--=====================================================================================================
-- Name: USP_REF_STATISTICDATATYPE_DEL
-- Description:	Removes a statistic data type from the active list
--							
-- Author:		Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -----------------------------------------------
-- Ricky Moss		2018/10/12 Initial Release
-- Ricky Moss		12/13/2018	Removed the return code
-- Doug Albanese	08/03/2021	Added the deletion routine to deactivate the record tied to the 
--                             base reference.
-- Stephen Long     11/01/2022 Added site alert logic.
-- Leo Tracchia     02/27/2023 Added data audit logic.
-- 
-- Test Code:
-- exec USP_REF_STATISTICDATATYPE_DEL 55615180000061
-- 
--=====================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_STATISTICDATATYPE_DEL]
(
    @idfsStatisticDataType BIGINT,
    @DeleteAnyway BIT,
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    BEGIN TRY

        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );

        IF NOT EXISTS
        (
            SELECT idfsStatisticDataType
            FROM dbo.tlbStatistic
            WHERE idfsStatisticDataType = @idfsStatisticDataType
                  AND intRowStatus = 0
        ) OR @DeleteAnyway = 1

			BEGIN

				--Begin: Data Audit--	

				DECLARE @idfUserId BIGINT = @UserId;
				DECLARE @idfSiteId BIGINT = @SiteId;
				DECLARE @idfsDataAuditEventType bigint = NULL;
				DECLARE @idfsObjectType bigint = 10017050; --select * from trtBaseReference where idfsReferenceType = 19000017 and strdefault like '%stat%'
				DECLARE @idfObject bigint = @idfsStatisticDataType;
				DECLARE @idfObjectTable_trtStatisticDataType bigint = 75980000000;		
				DECLARE @idfObjectTable_trtBaseReference bigint = 75820000000;
				DECLARE @idfObjectTable_trtStringNameTranslation bigint = 75990000000;
				DECLARE @idfDataAuditEvent bigint = NULL;	

				-- tauDataAuditEvent Event Type - Delete 
				set @idfsDataAuditEventType = 10016002;
			
				--End: Data Audit--	

				UPDATE dbo.trtStatisticDataType
				SET intRowStatus = 1,
					AuditUpdateDTM = GETDATE(),
					AuditUpdateUser = @AuditUserName
				WHERE idfsStatisticDataType = @idfsStatisticDataType
					  AND intRowStatus = 0;

				--Begin: Data Audit, trtStatisticDataType--				

				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_trtStatisticDataType, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_trtStatisticDataType, @idfObject)

				--End: Data Audit, trtStatisticDataType--

				UPDATE dbo.trtBaseReference
				SET intRowStatus = 1,
					AuditUpdateDTM = GETDATE(),
					AuditUpdateUser = @AuditUserName
				WHERE idfsBaseReference = @idfsStatisticDataType
					  AND intRowStatus = 0;

				--Begin: Data Audit, trtBaseReference--				

				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_trtBaseReference, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_trtBaseReference, @idfObject)

				--End: Data Audit, trtBaseReference--

				UPDATE dbo.trtStringNameTranslation
				SET intRowStatus = 1,
					AuditUpdateDTM = GETDATE(),
					AuditUpdateUser = @AuditUserName
				WHERE idfsBaseReference = @idfsStatisticDataType;

				--Begin: Data Audit, trtStringNameTranslation--				

				-- insert record into tauDataAuditEvent - 
				INSERT INTO @SuppressSelect
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfObject, @idfObjectTable_trtStringNameTranslation, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailDelete(idfDataAuditEvent, idfObjectTable, idfObject)
				VALUES (@idfDataAuditEvent, @idfObjectTable_trtStringNameTranslation, @idfObject)

				--End: Data Audit, trtStringNameTranslation--

				UPDATE dbo.trtBaseReference
				SET intRowStatus = 1,
					AuditUpdateDTM = GETDATE(),
					AuditUpdateUser = @AuditUserName
				WHERE idfsBaseReference = @idfsStatisticDataType;

				INSERT INTO @SuppressSelect
				EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
											   @EventTypeId,
											   @UserId,
											   @idfsStatisticDataType,
											   NULL,
											   @SiteId,
											   NULL,
											   @SiteId,
											   @LocationId,
											   @AuditUserName;
			END

        ELSE IF EXISTS
        (
            SELECT idfsStatisticDataType
            FROM dbo.tlbStatistic
            WHERE idfsStatisticDataType = @idfsStatisticDataType
                  and intRowStatus = 0
        )
			BEGIN
				SELECT @ReturnCode = -1;
				SELECT @ReturnMessage = 'IN USE';
			END

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_STATISTICDATATYPE_SET]...';


GO
-- ================================================================================================
-- Name: USP_REF_STATISTICDATATYPE_SET
--
-- Description:	Creates or updates a statistical data type.
--                      
-- Author: Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss       09/28/2018 Initial release.
-- Ricky Moss		12/13/2018 Removed the return code and reference id variables
-- Ricky Moss		12/20/2018 Merged SET AND DOESEXIST stored procedures
-- Ricky Moss		02/11/2019 Checks to see when updating a statistical data type that the name 
--                             does not exists in another reference
-- Ricky Moss		09/20/2019 Refactored duplication check code
-- Ricky Moss		02/17/2020 Refactored to check for duplicates and translated values and update
-- Ricky Moss		03/18/2020 corrected update portion
-- Ricky Moss		03/20/2020 corrected table name
-- Ricky Moss		04/16/2020 reactivated inactive record if being readded
-- Doug Albanese	04/12/2020 Refactored to make use of USSP_GBL_BaseReference_SET, and to change 
--                             the branch decisions for insert/update.
-- Doug Albanese	07/31/2021 Added duplication fix
-- Doug Albanese	08/03/2021 Modified duplication detection to handle the existence of 
--                             previously deleted items
-- Doug Albanese	08/09/2021 Refactored against changes, provided by Mark Wilson, to complete 
--                             the work on this
-- Stephen Long     07/18/2022 Added site alert logic.
-- Leo Tracchia     02/27/2023 Added data auditing logic.
/*

exec USP_REF_STATISTICDATATYPE_SET NULL, 'Mark Wilson Test Number 02468', 'Test Locally', 19000090, 10091005, 10089002, 1, 'en-US'

exec USP_REF_STATISTICDATATYPE_SET 39850000000, 'Population', 'Population', 19000090, 10091005, 10089001, 1, 'en'

exec USP_REF_STATISTICDATATYPE_SET 389445040003919, 'Change to something else new', 'Population', 19000090, 10091005, 10089001, 1, 'en-US'

*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_STATISTICDATATYPE_SET]
(
    @idfsStatisticDataType AS BIGINT = NULL,
    @strDefault AS NVARCHAR(200),
    @strName AS NVARCHAR(200),
    @idfsReferenceType AS BIGINT,
    @idfsStatisticPeriodType AS BIGINT,
    @idfsStatisticAreaType AS BIGINT = NULL,
    @blnRelatedWithAgeGroup AS BIT,
    @LangID AS NVARCHAR(50),
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN

    DECLARE @ReturnMessage NVARCHAR(MAX) = N'SUCCESS',
            @ReturnCode INT = 0,
            @DuplicateDefault INT = 0 -- updated to capture 0 or 1. 1 indicates a duplicate and will not execute the set.

    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );
    BEGIN TRY
        IF @idfsStatisticDataType IS NULL
			BEGIN -- this is an insert.  check if the strDefault is a duplicate
				IF EXISTS
				(
					SELECT *
					FROM dbo.trtBaseReference
					WHERE strDefault = @strDefault
						  AND idfsReferenceType = 19000090
						  AND trtBaseReference.intRowStatus = 0
				)
				BEGIN
					SET @DuplicateDefault = 1;
				END
			END
        ELSE
			BEGIN -- this is an update.  check if the strDefault is a duplicate
				IF EXISTS
				(
					SELECT *
					FROM dbo.trtBaseReference
					WHERE idfsBaseReference <> @idfsStatisticDataType
						  AND strDefault = @strDefault
						  AND idfsReferenceType = 19000090
						  AND trtBaseReference.intRowStatus = 0
				)
				BEGIN
					SET @DuplicateDefault = 1;
				END
			END

        IF @DuplicateDefault = 1 -- No need to go any further, as the strDefault is a duplicate

			BEGIN
				SET @ReturnMessage = 'DOES EXIST';
			END

        ELSE -- there is no duplicate, so continue

			BEGIN

			--Begin: Data Audit Declarations--

			DECLARE @idfUserId BIGINT = @UserId;
			DECLARE @idfSiteId BIGINT = @SiteId;
			DECLARE @idfsDataAuditEventType bigint = NULL;
			DECLARE @idfsObjectType bigint = 10017050; -- select * from trtBaseReference where idfsReferenceType = 19000017 and strdefault like '%stat%'
			DECLARE @idfObject bigint = @idfsStatisticDataType;
			DECLARE @idfObjectTable_trtStatisticDataType bigint = 75980000000;		
			DECLARE @idfDataAuditEvent bigint = NULL;		

			DECLARE @trtStatisticDataType_BeforeEdit TABLE
			(
				idfsStatisticDataType bigint,
				idfsReferenceType bigint,
				idfsStatisticAreaType bigint,
				idfsStatisticPeriodType bigint,									
				blnRelatedWithAgeGroup bit					
			)

			DECLARE @trtStatisticDataType_AfterEdit TABLE
			(
				idfsStatisticDataType bigint,
				idfsReferenceType bigint,
				idfsStatisticAreaType bigint,
				idfsStatisticPeriodType bigint,									
				blnRelatedWithAgeGroup bit	
			)				

			--End: Data Audit--			

			INSERT INTO @SuppressSelect
			EXEC dbo.USP_GBL_BaseReference_SET @ReferenceID = @idfsStatisticDataType OUTPUT,
												@ReferenceType = 19000090,
												@LangID = @LangID,
												@DefaultName = @strDefault,
												@NationalName = @strName,
												@HACode = NULL,
												@Order = NULL,
												@System = 0,
												@User = @AuditUserName;

				IF NOT EXISTS
				(
					SELECT *
					FROM dbo.trtStatisticDataType
					WHERE idfsStatisticDataType = @idfsStatisticDataType
				)
				BEGIN

					--Begin: Data Audit for INSERT--

					-- tauDataAuditEvent Event Type - Create 
					set @idfsDataAuditEventType = 10016001;
			
					-- insert record into tauDataAuditEvent - 
					INSERT INTO @SuppressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfsStatisticDataType, @idfObjectTable_trtStatisticDataType, @idfDataAuditEvent OUTPUT

					--End: Data Audit for INSERT--

					INSERT INTO dbo.trtStatisticDataType
					(
						idfsStatisticDataType,
						idfsReferenceType,
						idfsStatisticAreaType,
						idfsStatisticPeriodType,
						intRowStatus,
						rowguid,
						blnRelatedWithAgeGroup,
						strMaintenanceFlag,
						strReservedAttribute,
						SourceSystemNameID,
						SourceSystemKeyValue,
						AuditCreateDTM,
						AuditCreateUser
					)
					VALUES
					(@idfsStatisticDataType,
					 @idfsReferenceType,
					 @idfsStatisticAreaType,
					 @idfsStatisticPeriodType,
					 0  ,
					 NEWID(),
					 @blnRelatedWithAgeGroup,
					 NULL,
					 NULL,
					 10519001,
					 '[{"idfsBaseReference":' + CAST(@idfsStatisticDataType AS NVARCHAR(300)) + '}]',
					 GETDATE(),
					 @AuditUserName
					);

					--Begin: Data Audit for INSERT--					

					INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject)
					VALUES (@idfDataAuditEvent, @idfObjectTable_trtStatisticDataType, @idfsStatisticDataType)
			
					--End: Data Audit for INSERT--

				END
            ELSE
				BEGIN

					--Begin: Data Audit for UPDATE--
				
					--  tauDataAuditEvent  Event Type - Edit 
					set @idfsDataAuditEventType = 10016003;
			
					-- insert record into tauDataAuditEvent - 
					INSERT INTO @SuppressSelect
					EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType, @idfsObjectType, @idfsStatisticDataType, @idfObjectTable_trtStatisticDataType, @idfDataAuditEvent OUTPUT

					INSERT INTO @trtStatisticDataType_BeforeEdit (
						idfsStatisticDataType,
						idfsReferenceType,
						idfsStatisticAreaType,
						idfsStatisticPeriodType,									
						blnRelatedWithAgeGroup)
					SELECT 
						idfsStatisticDataType,
						idfsReferenceType,
						idfsStatisticAreaType,
						idfsStatisticPeriodType,									
						blnRelatedWithAgeGroup
					FROM trtStatisticDataType WHERE idfsStatisticDataType = @idfsStatisticDataType;

					--End: Data Audit for UPDATE--

					UPDATE dbo.trtStatisticDataType
					SET idfsReferenceType = @idfsReferenceType,
						idfsStatisticAreaType = @idfsStatisticAreaType,
						idfsStatisticPeriodType = @idfsStatisticPeriodType,
						blnRelatedWithAgeGroup = @blnRelatedWithAgeGroup,
						intRowStatus = 0,
						rowguid = ISNULL(rowguid, NEWID()),
						AuditUpdateDTM = GETDATE(),
						AuditUpdateUser = @AuditUserName
					WHERE idfsStatisticDataType = @idfsStatisticDataType;

					--Begin: Data Audit for UPDATE--

					INSERT INTO @trtStatisticDataType_AfterEdit (
						idfsStatisticDataType,
						idfsReferenceType,
						idfsStatisticAreaType,
						idfsStatisticPeriodType,									
						blnRelatedWithAgeGroup)
					SELECT 
						idfsStatisticDataType,
						idfsReferenceType,
						idfsStatisticAreaType,
						idfsStatisticPeriodType,									
						blnRelatedWithAgeGroup
					FROM trtStatisticDataType WHERE idfsStatisticDataType = @idfsStatisticDataType;

					--idfsReferenceType
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_trtStatisticDataType, 
						81350000000,
						a.idfsStatisticDataType,
						null,
						a.idfsReferenceType,
						b.idfsReferenceType 
					from @trtStatisticDataType_BeforeEdit a  inner join @trtStatisticDataType_AfterEdit b on a.idfsStatisticDataType = b.idfsStatisticDataType
					where (a.idfsReferenceType <> b.idfsReferenceType) 
						or(a.idfsReferenceType is not null and b.idfsReferenceType is null)
						or(a.idfsReferenceType is null and b.idfsReferenceType is not null)

					--idfsStatisticAreaType
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_trtStatisticDataType, 
						4578150000000,
						a.idfsStatisticDataType,
						null,
						a.idfsStatisticAreaType,
						b.idfsStatisticAreaType 
					from @trtStatisticDataType_BeforeEdit a  inner join @trtStatisticDataType_AfterEdit b on a.idfsStatisticDataType = b.idfsStatisticDataType
					where (a.idfsStatisticAreaType <> b.idfsStatisticAreaType) 
						or(a.idfsStatisticAreaType is not null and b.idfsStatisticAreaType is null)
						or(a.idfsStatisticAreaType is null and b.idfsStatisticAreaType is not null)

					--idfsStatisticPeriodType
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_trtStatisticDataType, 
						4578160000000,
						a.idfsStatisticDataType,
						null,
						a.idfsStatisticPeriodType,
						b.idfsStatisticPeriodType 
					from @trtStatisticDataType_BeforeEdit a  inner join @trtStatisticDataType_AfterEdit b on a.idfsStatisticDataType = b.idfsStatisticDataType
					where (a.idfsStatisticPeriodType <> b.idfsStatisticPeriodType) 
						or(a.idfsStatisticPeriodType is not null and b.idfsStatisticPeriodType is null)
						or(a.idfsStatisticPeriodType is null and b.idfsStatisticPeriodType is not null)

					--blnRelatedWithAgeGroup
					insert into dbo.tauDataAuditDetailUpdate(
						idfDataAuditEvent, 
						idfObjectTable, 
						idfColumn, 
						idfObject, 
						idfObjectDetail, 
						strOldValue, 
						strNewValue)
					select 
						@idfDataAuditEvent,
						@idfObjectTable_trtStatisticDataType, 
						12014490000000,
						a.idfsStatisticDataType,
						null,
						a.blnRelatedWithAgeGroup,
						b.blnRelatedWithAgeGroup 
					from @trtStatisticDataType_BeforeEdit a  inner join @trtStatisticDataType_AfterEdit b on a.idfsStatisticDataType = b.idfsStatisticDataType
					where (a.blnRelatedWithAgeGroup <> b.blnRelatedWithAgeGroup) 
						or(a.blnRelatedWithAgeGroup is not null and b.blnRelatedWithAgeGroup is null)
						or(a.blnRelatedWithAgeGroup is null and b.blnRelatedWithAgeGroup is not null)

					--End: Data Audit for UPDATE--
				END

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                           @EventTypeId,
                                           @UserId,
                                           @idfsStatisticDataType,
                                           NULL,
                                           @SiteId,
                                           NULL,
                                           @SiteId,
                                           @LocationId,
                                           @AuditUserName;
        END

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage,
               @idfsStatisticDataType AS idfsStatisticDataType;

    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_VAS_MONITORING_SESSION_SAMPLE_GETList]...';


GO
-- ================================================================================================
-- Name: USP_VAS_MONITORING_SESSION_SAMPLE_GETList
--
-- Description:	Gets sample records for veterinary surveillance session report use cases.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mike	Kornegay 01/17/2022 Initial release (copied from USP_VET_SAMPLE_GETList)
-- Mike	Kornegay 09/30/2022 Correct species type to look at HACode instead of idfsBaseReference.
-- Mike Kornegay 10/10/2022 Add disease name to group by.
-- Mike Kornegay 10/16/2022 Correct test count to show 1 when tests exist.
-- Mike Kornegay 10/31/2022 Add comma separated disease name list.
-- Mike Kornegay 03/06/2023 Add TotalSamples and TotalAnimalsSampled to stored proc.
--
--
-- EXEC	@return_value = [dbo].[USP_VCT_MONITORING_SESSION_SAMPLE_GETList]
		--@LanguageID = N'en-US',
		--@PageNumber = 1,
		--@PageSize = 10,
		--@SortColumn = NULL,
		--@SortOrder = NULL,
		--@MonitoringSessionID = 10,
		--@ParentSampleID = NULL,
		--@RootSampleID = NULL 
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VAS_MONITORING_SESSION_SAMPLE_GETList] (
	@LanguageID NVARCHAR(50)
	,@PageNumber INT = 1
	,@PageSize INT = 10
	,@SortColumn NVARCHAR(30) = 'SampleTypeName'
	,@SortOrder NVARCHAR(4) = 'ASC'
	,@MonitoringSessionID BIGINT = NULL
	,@ParentSampleID BIGINT = NULL
	,@RootSampleID BIGINT = NULL
	)
AS
BEGIN
	DECLARE @firstRec INT
		,@lastRec INT
		,@TotalRowCount INT = 0;
	DECLARE @Results TABLE (
		SampleID BIGINT NOT NULL
	);

	SET @firstRec = (@PageNumber - 1) * @PageSize;
	SET @lastRec = (@PageNumber * @PageSize + 1);
	SET NOCOUNT ON;

	BEGIN TRY
		INSERT INTO @Results
		SELECT
			m.idfMaterial 
		FROM dbo.tlbMaterial m
		WHERE m.intRowStatus = 0
			AND m.idfMonitoringSession IS NOT NULL 
			AND (m.idfMonitoringSession = @MonitoringSessionID OR @MonitoringSessionID IS NULL)
			AND (
				(
					m.idfParentMaterial = @ParentSampleID
					AND m.idfsSampleKind IS NOT NULL --Get any samples aliquoted or derived once.
					)
				OR (@ParentSampleID IS NULL)
				)
			AND (
				(
					m.idfRootMaterial = @RootSampleID
					AND m.idfsSampleKind IS NOT NULL
					AND m.idfParentMaterial IS NOT NULL
					) --Get any aliquots or derivatives for the root sample.
				OR (@RootSampleID IS NULL)
				);

		SELECT SampleID
			,SampleTypeID
			,SampleTypeName
			,RootSampleID
			,OriginalSampleID
			,HumanID
			,SpeciesID
			,SpeciesTypeID
			,SpeciesTypeName
			,AnimalID
			,EIDSSAnimalID
			,AnimalGenderTypeID
			,AnimalGenderTypeName
			,AnimalAgeTypeID
			,AnimalAgeTypeName
			,AnimalColor
			,AnimalName
			,MonitoringSessionID
			,CollectedByPersonID
			,CollectedByPersonName
			,CollectedByOrganizationID
			,CollectedByOrganizationName
			,MainTestID
			,CollectionDate
			,SentDate
			,EIDSSLocalOrFieldSampleID
			,EIDSSReportSessionID
			,PatientFarmOwnerName
			,VectorSessionID
			,VectorID
			,FreezerID
			,SampleStatusTypeID
			,SampleStatusTypeName
			,FunctionalAreaID
			,FunctionalAreaName
			,DestroyedByPersonID
			,EnteredDate
			,DestructionDate
			,EIDSSLaboratorySampleID
			,Comments
			,SiteID
			,SentToOrganizationID
			,SentToOrganizationName
			,ReadOnlyIndicator
			,BirdStatusTypeID
			,BirdStatusTypeName
			,HumanDiseaseReportID
			,VeterinaryDiseaseReportID
			,AccessionDate
			,AccessionConditionTypeID
			,AccessionConditionTypeName
			,AccessionComment
			,AccessionByPersonID
			,DestructionMethodTypeID
			,CurrentSiteID
			,SampleKindTypeID
			,SampleKindTypeName
			,AccessionedIndicator
			,ShowInReportSessionListIndicator
			,ShowInLaboratoryListIndicator
			,ShowInDispositionListIndicator
			,ShowInAccessionListIndicator
			,MarkedForDispositionByPersonID
			,OutOfRepositoryDate
			,SampleStatusDate
			,DiseaseID
			,DiseaseNames
			,TestsCount
			,FarmID
			,FarmMasterID
			,EIDSSFarmID
			,Species
			,EIDSSLaboratoryOrLocalFieldSampleID
			,LabModuleSourceIndicator
			,TotalAnimalsSampled
			,TotalSamples
			,RowStatus 
			,RowAction
			,TotalRowCount
			,CurrentPage
			,TotalPages
		FROM (
			SELECT ROW_NUMBER() OVER (
					ORDER BY CASE 
							WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
								AND @SortOrder = 'ASC'
								THEN m.strFieldBarcode
							END ASC
						,CASE 
							WHEN @SortColumn = 'EIDSSLocalOrFieldSampleID'
								AND @SortOrder = 'DESC'
								THEN m.strFieldBarcode
							END DESC
						,CASE 
							WHEN @SortColumn = 'SampleTypeName'
								AND @SortOrder = 'ASC'
								THEN sampleType.name
							END ASC
						,CASE 
							WHEN @SortColumn = 'SampleTypeName'
								AND @SortOrder = 'DESC'
								THEN sampleType.name
							END DESC
					) AS RowNum
			,m.idfMaterial AS SampleID
			,m.idfsSampleType AS SampleTypeID
			,sampleType.name AS SampleTypeName
			,m.idfRootMaterial AS RootSampleID
			,m.idfParentMaterial AS OriginalSampleID
			,m.idfHuman AS HumanID
			,m.idfSpecies AS SpeciesID
			,speciesType.idfsReference AS SpeciesTypeID
			,speciesType.name AS SpeciesTypeName
			,m.idfAnimal AS AnimalID
			,a.strAnimalCode AS EIDSSAnimalID
			,a.idfsAnimalGender AS AnimalGenderTypeID
			,animalSexType.name AS AnimalGenderTypeName
			,a.idfsAnimalAge AS AnimalAgeTypeID
			,animalAgeType.name AS AnimalAgeTypeName
			,a.strColor AS AnimalColor
			,a.strName AS AnimalName
			,m.idfMonitoringSession AS MonitoringSessionID
			,m.idfFieldCollectedByPerson AS CollectedByPersonID
			,ISNULL(collectedByPerson.strFamilyName, N'') + ISNULL(', ' + collectedByPerson.strFirstName, '') + ISNULL(' ' + collectedByPerson.strSecondName, '') AS CollectedByPersonName
			,m.idfFieldCollectedByOffice AS CollectedByOrganizationID
			,collectedByOrganization.name AS CollectedByOrganizationName
			,m.idfMainTest AS MainTestID
			,m.datFieldCollectionDate AS CollectionDate
			,m.datFieldSentDate AS SentDate
			,m.strFieldBarcode AS EIDSSLocalOrFieldSampleID
			,m.strCalculatedCaseID AS EIDSSReportSessionID
			,m.strCalculatedHumanName AS PatientFarmOwnerName
			,m.idfVectorSurveillanceSession AS VectorSessionID
			,m.idfVector AS VectorID
			,m.idfSubdivision AS FreezerID
			,m.idfsSampleStatus AS SampleStatusTypeID
			,sampleStatusType.name AS SampleStatusTypeName
			,m.idfInDepartment AS FunctionalAreaID
			,functionalArea.name AS FunctionalAreaName
			,m.idfDestroyedByPerson AS DestroyedByPersonID
			,m.datEnteringDate AS EnteredDate
			,m.datDestructionDate AS DestructionDate
			,m.strBarcode AS EIDSSLaboratorySampleID
			,m.strNote AS Comments
			,m.idfsSite AS SiteID
			,m.idfSendToOffice AS SentToOrganizationID
			,sentToOrganization.name AS SentToOrganizationName
			,m.blnReadOnly AS ReadOnlyIndicator
			,m.idfsBirdStatus AS BirdStatusTypeID
			,birdStatusType.name AS BirdStatusTypeName
			,m.idfHumanCase AS HumanDiseaseReportID
			,m.idfVetCase AS VeterinaryDiseaseReportID
			,m.datAccession AS AccessionDate
			,m.idfsAccessionCondition AS AccessionConditionTypeID
			,accessionConditionType.name AS AccessionConditionTypeName
			,m.strCondition AS AccessionComment
			,m.idfAccesionByPerson AS AccessionByPersonID
			,m.idfsDestructionMethod AS DestructionMethodTypeID
			,m.idfsCurrentSite AS CurrentSiteID
			,m.idfsSampleKind AS SampleKindTypeID
			,sampleKindType.name AS SampleKindTypeName
			,m.blnAccessioned AS AccessionedIndicator
			,m.blnShowInCaseOrSession AS ShowInReportSessionListIndicator
			,m.blnShowInLabList AS ShowInLaboratoryListIndicator
			,m.blnShowInDispositionList AS ShowInDispositionListIndicator
			,m.blnShowInAccessionInForm AS ShowInAccessionListIndicator
			,m.idfMarkedForDispositionByPerson AS MarkedForDispositionByPersonID
			,m.datOutOfRepositoryDate AS OutOfRepositoryDate
			,m.datSampleStatusDate AS SampleStatusDate
			,m.DiseaseID
			,diseases AS DiseaseNames
			,CASE WHEN (SELECT Count(*) FROM dbo.tlbTesting t WHERE t.idfMaterial = m.idfMaterial) = 0 THEN 0 ELSE 1 END AS TestsCount
			,f.idfFarm AS FarmID
			,f.idfFarmActual AS FarmMasterID
			,f.strFarmCode AS EIDSSFarmID
			,(
				CASE 
					WHEN ms.idfsMonitoringSessionSpeciesType = 129909620007070
						THEN 'Herd ' + hd.strHerdCode + ' - ' + speciesType.name
					ELSE 'Flock ' + hd.strHerdCode + ' - ' + speciesType.name
					END
				) AS Species
			,CASE 
				WHEN m.strBarcode IS NULL
					THEN m.strFieldBarcode
				ELSE m.strBarcode
				END AS EIDSSLaboratoryOrLocalFieldSampleID
			,m.LabModuleSourceIndicator
			,COUNT(*) OVER() AS TotalSamples
			,COUNT(DISTINCT a.strAnimalCode) AS TotalAnimalsSampled
			,m.intRowStatus AS RowStatus
			,0 AS RowAction
			,COUNT(*) OVER () AS TotalRowCount
			,CurrentPage = @PageNumber
			,TotalPages = (@TotalRowCount / @PageSize) + IIF(COUNT(*) % @PageSize > 0, 1, 0)
		FROM @Results res
		INNER JOIN dbo.tlbMaterial m ON m.idfMaterial = res.SampleID 
		INNER JOIN dbo.FN_GBL_Repair(@LanguageID, 19000087) sampleType ON sampleType.idfsReference = m.idfsSampleType
		INNER JOIN dbo.tlbMonitoringSession ms ON ms.idfMonitoringSession = m.idfMonitoringSession
			AND ms.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) collectedByOrganization ON collectedByOrganization.idfOffice = m.idfFieldCollectedByOffice
		LEFT JOIN dbo.tlbDepartment d ON d.idfDepartment = m.idfInDepartment
			AND d.intRowStatus = 0
		LEFT JOIN dbo.tlbOffice departmentOffice ON departmentOffice.idfOffice = d.idfOrganization
			AND departmentOffice.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000164) functionalArea ON functionalArea.idfsReference = d.idfsDepartmentName
		LEFT JOIN dbo.FN_GBL_Institution(@LanguageID) sentToOrganization ON sentToOrganization.idfOffice = m.idfSendToOffice
		LEFT JOIN dbo.tlbPerson collectedByPerson ON collectedByPerson.idfPerson = m.idfFieldCollectedByPerson
			AND collectedByPerson.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000015) sampleStatusType ON sampleStatusType.idfsReference = m.idfsSampleStatus
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000006) birdStatusType ON birdStatusType.idfsReference = m.idfsBirdStatus
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000110) accessionConditionType ON accessionConditionType.idfsReference = m.idfsAccessionCondition
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000158) sampleKindType ON sampleKindType.idfsReference = m.idfsSampleKind
		LEFT JOIN dbo.tlbAnimal a ON a.idfAnimal = m.idfAnimal
			AND a.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000005) animalAgeType ON animalAgeType.idfsReference = a.idfsAnimalAge
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000007) animalSexType ON animalSexType.idfsReference = a.idfsAnimalGender
		CROSS APPLY (SELECT dbo.FN_VAS_SESSION_SAMPLE_DIAGNOSESNAMES_GET(ms.idfMonitoringSession, @LanguageID, m.idfMaterial) diseases) diseaseNames
		LEFT JOIN dbo.tlbSpecies s ON s.idfSpecies = CASE 
				WHEN m.idfAnimal IS NULL
					THEN m.idfSpecies
				ELSE a.idfSpecies
				END
			AND s.intRowStatus = 0
		LEFT JOIN dbo.FN_GBL_Repair(@LanguageID, 19000086) speciesType ON speciesType.idfsReference = s.idfsSpeciesType
		LEFT JOIN dbo.tlbHerd hd ON hd.idfHerd = s.idfHerd
			AND hd.intRowStatus = 0
		LEFT JOIN dbo.tlbFarm f ON f.idfFarm = hd.idfFarm
			AND f.intRowStatus = 0
		GROUP BY m.idfMaterial
			,m.idfsSampleType
			,sampleType.name
			,m.idfRootMaterial
			,m.idfParentMaterial
			,m.idfHuman
			,m.idfSpecies
			,speciesType.idfsReference
			,speciesType.name
			,m.idfAnimal
			,a.strAnimalCode
			,a.idfsAnimalGender
			,animalSexType.name
			,a.idfsAnimalAge
			,animalAgeType.name
			,a.strColor
			,a.strName
			,m.idfMonitoringSession
			,m.idfFieldCollectedByPerson
			,collectedByPerson.strFamilyName
			,collectedByPerson.strFirstName
			,collectedByPerson.strSecondName
			,m.idfFieldCollectedByOffice
			,collectedByOrganization.name
			,m.idfMainTest
			,m.datFieldCollectionDate
			,m.datFieldSentDate
			,m.strFieldBarcode
			,m.strCalculatedCaseID
			,m.strCalculatedHumanName
			,m.idfVectorSurveillanceSession
			,m.idfVector
			,m.idfSubdivision
			,m.idfsSampleStatus
			,sampleStatusType.name
			,m.idfInDepartment
			,functionalArea.name 
			,m.idfDestroyedByPerson
			,m.datEnteringDate
			,m.datDestructionDate
			,m.strBarcode
			,m.strNote
			,m.idfsSite
			,m.intRowStatus
			,m.idfSendToOffice
			,sentToOrganization.name
			,m.blnReadOnly
			,m.idfsBirdStatus
			,birdStatusType.name
			,m.idfHumanCase
			,m.idfVetCase
			,m.datAccession
			,m.idfsAccessionCondition
			,accessionConditionType.name
			,m.strCondition
			,m.idfAccesionByPerson
			,m.idfsDestructionMethod
			,m.idfsCurrentSite
			,m.idfsSampleKind
			,sampleKindType.name 
			,m.blnAccessioned 
			,m.blnShowInCaseOrSession 
			,m.blnShowInLabList 
			,m.blnShowInDispositionList 
			,m.blnShowInAccessionInForm 
			,m.idfMarkedForDispositionByPerson 
			,m.datOutOfRepositoryDate 
			,m.datSampleStatusDate 
			,m.DiseaseID
			,diseases
			,hd.strHerdCode
			,f.idfFarm 
			,f.idfFarmActual 
			,f.strFarmCode
			,ms.idfsMonitoringSessionSpeciesType
			,m.LabModuleSourceIndicator
		) AS x
		WHERE RowNum > @firstRec
			AND RowNum < @lastRec
		ORDER BY RowNum;
	END TRY

	BEGIN CATCH
		THROW;
	END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USP_VET_DISEASE_REPORT_DEL]...';


GO
-- ================================================================================================
-- Name: USP_VET_DISEASE_REPORT_DEL
--
-- Description:	Sets a disease report record to "inactive".
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     04/25/2019 Initial release.
-- Stephen Long     12/13/2019 Added comment for rollback statement.
-- Ann Xiong        03/23/2020 Added paramter @DeduplicationIndicator to skip checking 
--                             HerdFlockCount and SpeciesCount when @DeduplicationIndicator = 1
-- Ann Xiong        03/27/2020 Modified to skip checking any dependent child objects for 
--                             Deduplication.
-- Stephen Long     11/29/2021 Removed language ID parameter as it is not needed.
-- Stephen Long     12/08/2022 Added data audit logic for SAUC30 and 31.
-- Stephen Long     03/06/2023 Changed data audit call to USSP_GBL_DATA_AUDIT_EVENT_SET.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VET_DISEASE_REPORT_DEL]
(
    @DiseaseReportID BIGINT,
    @DeduplicationIndicator BIT = 0,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        BEGIN TRANSACTION;

        DECLARE @ReturnCode INT
            = 0,
                @ReturnMessage NVARCHAR(MAX) = N'SUCCESS',
                @FarmCount AS INT = 0,
                @HerdFlockCount AS INT = 0,
                @SpeciesCount AS INT = 0,
                @AnimalCount AS INT = 0,
                @VaccinationCount AS INT = 0,
                @SampleCount AS INT = 0,
                @PensideTestCount AS INT = 0,
                @LabTestCount AS INT = 0,
                @TestInterpretationCount AS INT = 0,
                @ReportLogCount AS INT = 0,
                @OutbreakSessionCount AS INT = 0,
                @DataAuditEventTypeid BIGINT = 10016002,               -- Delete audit event type
                @ObjectTypeID BIGINT = 10017085,                       -- Veterinary disease report
                @ObjectID BIGINT = @DiseaseReportID,
                @ObjectTableID BIGINT = 75800000000,                   -- tlbVetCase
                @ObjectFarmTableID BIGINT = 75550000000,               -- tlbFarm
                @ObjectActivityParametersTableID BIGINT = 75410000000, -- tlbActivityParameters
                @ObjectObservationTableID BIGINT = 75640000000,        -- tlbObservation
                @DataAuditEventID BIGINT,
                @AuditUserID BIGINT,
                @AuditSiteID BIGINT,
                @EIDSSObjectID NVARCHAR(200) = (
                                                   SELECT strCaseID FROM dbo.tlbVetCase WHERE idfVetCase = @DiseaseReportID
                                               ),
                @FarmID BIGINT = (
                                     SELECT idfFarm FROM dbo.tlbVetCase WHERE idfVetCase = @DiseaseReportID
                                 );
        DECLARE @ControlMeasuresObservationID BIGINT = (
                                                           SELECT idfObservation
                                                           FROM dbo.tlbVetCase
                                                           WHERE idfVetCase = @DiseaseReportID
                                                       ),
                @FarmEpiObservationID BIGINT = (
                                                   SELECT idfObservation FROM dbo.tlbFarm WHERE idfFarm = @FarmID
                                               );

        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        SELECT @HerdFlockCount = COUNT(*)
        FROM dbo.tlbHerd h
            INNER JOIN dbo.tlbFarm f
                ON f.idfFarm = h.idfFarm
                   AND f.intRowStatus = 0
            INNER JOIN dbo.tlbVetCase v
                ON v.idfFarm = f.idfFarm
        WHERE v.idfVetCase = @DiseaseReportID
              AND h.intRowStatus = 0;

        SELECT @SpeciesCount = COUNT(*)
        FROM dbo.tlbSpecies s
            INNER JOIN dbo.tlbHerd h
                ON h.idfHerd = s.idfHerd
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbFarm f
                ON f.idfFarm = h.idfFarm
                   AND f.intRowStatus = 0
            INNER JOIN dbo.tlbVetCase v
                ON v.idfFarm = f.idfFarm
        WHERE v.idfVetCase = @DiseaseReportID
              AND s.intRowStatus = 0;

        SELECT @AnimalCount = COUNT(*)
        FROM dbo.tlbAnimal a
            INNER JOIN dbo.tlbSpecies s
                ON s.idfSpecies = a.idfSpecies
                   AND s.intRowStatus = 0
            INNER JOIN dbo.tlbHerd h
                ON h.idfHerd = s.idfHerd
                   AND h.intRowStatus = 0
            INNER JOIN dbo.tlbFarm f
                ON f.idfFarm = h.idfFarm
                   AND f.intRowStatus = 0
            INNER JOIN dbo.tlbVetCase v
                ON v.idfFarm = f.idfFarm
        WHERE v.idfVetCase = @DiseaseReportID
              AND a.intRowStatus = 0;

        SELECT @VaccinationCount = COUNT(*)
        FROM dbo.tlbVaccination
        WHERE idfVetCase = @DiseaseReportID
              AND intRowStatus = 0;

        SELECT @SampleCount = COUNT(*)
        FROM dbo.tlbMaterial
        WHERE idfVetCase = @DiseaseReportID
              AND intRowStatus = 0;

        SELECT @PensideTestCount = COUNT(*)
        FROM dbo.tlbPensideTest p
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = p.idfMaterial
                   AND m.intRowStatus = 0
        WHERE m.idfVetCase = @DiseaseReportID
              AND p.intRowStatus = 0;

        SELECT @LabTestCount = COUNT(*)
        FROM dbo.tlbTesting t
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
        WHERE m.idfVetCase = @DiseaseReportID
              AND t.intRowStatus = 0;

        SELECT @TestInterpretationCount = COUNT(*)
        FROM dbo.tlbTestValidation tv
            INNER JOIN dbo.tlbTesting t
                ON t.idfTesting = tv.idfTesting
                   AND t.intRowStatus = 0
            INNER JOIN dbo.tlbMaterial m
                ON m.idfMaterial = t.idfMaterial
                   AND m.intRowStatus = 0
        WHERE m.idfVetCase = @DiseaseReportID
              AND tv.intRowStatus = 0;

        SELECT @ReportLogCount = COUNT(*)
        FROM dbo.tlbVetCaseLog
        WHERE idfVetCase = @DiseaseReportID
              AND intRowStatus = 0;

        SELECT @OutbreakSessionCount = COUNT(*)
        FROM dbo.tlbVetCase v
            INNER JOIN dbo.tlbOutbreak o
                ON o.idfOutbreak = v.idfOutbreak
                   AND o.intRowStatus = 0
        WHERE v.idfVetCase = @DiseaseReportID
              AND v.idfOutbreak IS NOT NULL

        IF @DeduplicationIndicator = 0
        BEGIN
            IF @AnimalCount = 0
               AND @VaccinationCount = 0
               AND @SampleCount = 0
               AND @PensideTestCount = 0
               AND @LabTestCount = 0
               AND @TestInterpretationCount = 0
               AND @ReportLogCount = 0
               AND @OutbreakSessionCount = 0
               AND @HerdFlockCount = 0
               AND @SpeciesCount = 0
            BEGIN
                -- Data audit
                EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                          @AuditSiteID,
                                                          @DataAuditEventTypeID,
                                                          @ObjectTypeID,
                                                          @DiseaseReportID,
                                                          @ObjectTableID,
                                                          @EIDSSObjectID, 
                                                          @DataAuditEventID OUTPUT;
                -- End data audit

                UPDATE dbo.tlbVetCase
                SET idfParentMonitoringSession = NULL,
                    idfOutbreak = NULL
                WHERE idfVetCase = @DiseaseReportID;

                IF @ControlMeasuresObservationID IS NOT NULL
                BEGIN
                    UPDATE dbo.tlbActivityParameters
                    SET intRowStatus = 1
                    WHERE idfObservation = @ControlMeasuresObservationID
                          AND intRowStatus = 0;

                    -- Data audit
                    INSERT INTO dbo.tauDataAuditDetailDelete
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectActivityParametersTableID,
                           idfActivityParameters,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM dbo.tlbActivityParameters
                    WHERE idfObservation = @ControlMeasuresObservationID
                          AND intRowStatus = 1;
                    -- End data audit

                    UPDATE dbo.tlbObservation
                    SET intRowStatus = 1
                    WHERE idfObservation = @ControlMeasuresObservationID;

                    -- Data audit
                    INSERT INTO dbo.tauDataAuditDetailDelete
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectObservationTableID,
                           @ControlMeasuresObservationID,
                           @AuditUserName,
                           @EIDSSObjectID;
                -- End data audit
                END

                UPDATE dbo.tlbVetCase
                SET intRowStatus = 1,
                    datModificationForArchiveDate = GETDATE()
                WHERE idfVetCase = @DiseaseReportID;

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       @DiseaseReportID,
                       @AuditUserName,
                       @EIDSSObjectID;
                -- End data audit

                IF @FarmEpiObservationID IS NOT NULL
                BEGIN
                    UPDATE dbo.tlbActivityParameters
                    SET intRowStatus = 1
                    WHERE idfObservation = @FarmEpiObservationID
                          AND intRowStatus = 0;

                    -- Data audit
                    INSERT INTO dbo.tauDataAuditDetailDelete
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectActivityParametersTableID,
                           idfActivityParameters,
                           @AuditUserName,
                           @EIDSSObjectID
                    FROM dbo.tlbActivityParameters
                    WHERE idfObservation = @FarmEpiObservationID
                          AND intRowStatus = 1;
                    -- End data audit

                    UPDATE dbo.tlbObservation
                    SET intRowStatus = 1
                    WHERE idfObservation = @FarmEpiObservationID;

                    -- Data audit
                    INSERT INTO dbo.tauDataAuditDetailDelete
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        AuditCreateUser,
                        strObject
                    )
                    SELECT @DataAuditEventID,
                           @ObjectObservationTableID,
                           @FarmEpiObservationID,
                           @AuditUserName,
                           @EIDSSObjectID;
                -- End data audit
                END

                UPDATE dbo.tlbFarm
                SET intRowStatus = 1
                WHERE idfFarm =
                (
                    SELECT idfFarm FROM dbo.tlbVetCase WHERE idfVetCase = @DiseaseReportID
                );

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectFarmTableID,
                       @FarmID,
                       @AuditUserName,
                       @EIDSSObjectID;
            -- End data audit
            END
            ELSE
            BEGIN
                IF @OutbreakSessionCount > 0
                BEGIN
                    SET @ReturnCode = 2;
                    SET @ReturnMessage = 'Unable to delete this record as it is dependent on another object.';
                END;
                ELSE
                BEGIN
                    SET @ReturnCode = 1;
                    SET @ReturnMessage = 'Unable to delete this record as it contains dependent child objects.';
                END;
            END;
        END
        ELSE
        BEGIN
            -- Data audit
            EXEC dbo.USSP_GBL_DataAuditEvent_GET @AuditUserID,
                                                 @AuditSiteID,
                                                 @DataAuditEventTypeID,
                                                 @ObjectTypeID,
                                                 @ObjectID,
                                                 @ObjectTableID,
                                                 @DataAuditEventID OUTPUT;

            UPDATE dbo.tlbVetCase
            SET idfParentMonitoringSession = NULL,
                idfOutbreak = NULL
            WHERE idfVetCase = @DiseaseReportID;

            IF @ControlMeasuresObservationID IS NOT NULL
            BEGIN
                UPDATE dbo.tlbActivityParameters
                SET intRowStatus = 1
                WHERE idfObservation = @ControlMeasuresObservationID
                      AND intRowStatus = 0;

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectActivityParametersTableID,
                       idfActivityParameters,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM dbo.tlbActivityParameters
                WHERE idfObservation = @ControlMeasuresObservationID
                      AND intRowStatus = 1;
                -- End data audit

                UPDATE dbo.tlbObservation
                SET intRowStatus = 1
                WHERE idfObservation = @ControlMeasuresObservationID;

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectObservationTableID,
                       @ControlMeasuresObservationID,
                       @AuditUserName,
                       @EIDSSObjectID;
            -- End data audit
            END

            UPDATE dbo.tlbVetCase
            SET intRowStatus = 1,
                datModificationForArchiveDate = GETDATE()
            WHERE idfVetCase = @DiseaseReportID;

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailDelete
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   @DiseaseReportID,
                   @AuditUserName,
                   @EIDSSObjectID;
            -- End data audit

            IF @FarmEpiObservationID IS NOT NULL
            BEGIN
                UPDATE dbo.tlbActivityParameters
                SET intRowStatus = 1
                WHERE idfObservation = @FarmEpiObservationID
                      AND intRowStatus = 0;

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectActivityParametersTableID,
                       idfActivityParameters,
                       @AuditUserName,
                       @EIDSSObjectID
                FROM dbo.tlbActivityParameters
                WHERE idfObservation = @FarmEpiObservationID
                      AND intRowStatus = 0;
                -- End data audit

                UPDATE dbo.tlbObservation
                SET intRowStatus = 1
                WHERE idfObservation = @FarmEpiObservationID;

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailDelete
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectObservationTableID,
                       @FarmEpiObservationID,
                       @AuditUserName,
                       @EIDSSObjectID;
            -- End data audit
            END

            UPDATE dbo.tlbFarm
            SET intRowStatus = 1
            WHERE idfFarm =
            (
                SELECT idfFarm FROM dbo.tlbVetCase WHERE idfVetCase = @DiseaseReportID
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailDelete
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectFarmTableID,
                   @FarmID,
                   @AuditUserName,
                   @EIDSSObjectID;
        -- End data audit
        END

        IF @@TRANCOUNT > 0
           AND @returnCode = 0
            COMMIT;
        ELSE
            ROLLBACK;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        SET @ReturnCode = ERROR_NUMBER();
        SET @ReturnMessage = ERROR_MESSAGE();

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_VET_DISEASE_REPORT_SET]...';


GO
-- ================================================================================================
-- Name: USP_VET_DISEASE_REPORT_SET
--
-- Description:	Inserts or updates veterinary "case" for the avian and livestock veterinary disease 
-- report use cases.
--                      
-- Revision History:
-- Name            Date       Change Detail
-- --------------- ---------- -------------------------------------------------------------------
-- Stephen Long    04/02/2018 Initial release.
-- Stephen Long    04/17/2019 Updated for API; use case updates.
-- Stephen Long    04/23/2019 Added updates for herd master and species master if new ones are 
--                            added to the farm during disease report creation.
-- Stephen Long    04/29/2019 Added related to veterinary disease report fields for use case VUC11 
--                            and VUC12.
-- Stephen Long    05/26/2019 Made corrections to farm copy observation ID and species table 
--                            observation ID for flexible form saving.
-- Stephen Long    06/01/2019 Made corrections to JSON for herds and species parameters.
-- Stephen Long    06/10/2019 Added farm owner ID output parameter to USSP_VET_FARM_COPY call.
-- Stephen Long    06/19/2019 Added diagnosis date and tests conducted indicator parameters.
-- Stephen Long    06/22/2019 Added read only indicator parameter for sample set - sample import.
-- Stephen Long    06/24/2019 Update to match new parameter for USSP_VET_FARM_COPY call.
-- Stephen Long    07/26/2019 Corrected farm counts (total, sick and dead).
-- Stephen Long    09/14/2019 Corrected root sample ID/parent sample ID on sample update call.
-- Stephen Long    10/01/2019 Added monitoring session ID parameter to farm copy for the sceanrio 
--                            where a disease report is tied to a monitoring session.
-- Stephen Long    12/23/2019 Added farm latitude and longitude parameters.
-- Stephen Long    02/05/2020 Updated sample set to account for the current site ID when samples 
--                            are imported from the laboratory module.
-- Stephen Long    02/16/2020 Add logic to copy activity parameters, and add observation record for 
--                            connected disease reports.
-- Stephen Long    04/21/2020 Added additional check on clinical signs when related disease report.
-- Stephen Long    04/24/2020 Added clinical signs indicator for the animal set call.
-- Stephen Long    08/12/2020 Corrected status on report log from status type to log status type.
-- Stephen Long    08/25/2020 Added observation ID set for the update of the vet case table.
-- Stephen Long    09/18/2020 Check for null related to observation ID
-- Stephen Long    12/20/2020 Updated USSP_GBL_TEST_SET call with four new parameters.
-- Stephen Long    11/29/2021 Removed language ID and added audit user name to USSP calls.
-- Stephen Long    01/19/2022 Added missing audit user name on ussp calls, and added events.
-- Stephen Long    01/22/2022 Made disease ID nullable on SamplesTemp table variable.
-- Stephen Long    01/24/2022 Added link local or field sample ID to report ID parameter.
-- Stephen Long    01/28/2022 Removed herd actual and species actual, no longer used.
-- Stephen Long    02/18/2022 Added lab module source indicator check on sample set.
-- Stephen Long    03/08/2022 Set notification object ID after saving disease report.
-- Stephen Long    04/12/2022 Added outbreak veterinary case parameters and logic.
-- Stephen Long    04/27/2022 Added additional outbreak case parameters: status type and case 
--                            questionnaire observation ID.
-- Stephen Long    05/09/2022 Bug fix on item 4199 - local/field sample ID iteration.
-- Stephen Long    06/16/2022 Added status type ID to species set.
-- Stephen Long    07/06/2022 Updates for site alerts to call new stored procedure.
-- Stephen Long    09/15/2022 Added note parameter to event set call.  Temporarily removed!
-- Stephen Long    12/07/2022 Added data audit logic for SAUC30 and 31.
-- Stephen Long    12/09/2022 Changed object type ID reference for veterinary disease report, 
--                            and added EIDSS object ID to samples, tests and test 
--                            interpretations calls.
-- Stephen Long    12/14/2022 Fix to observation ID when adding a connected disease report; site 
--                            identifier was not picked up from the original record.
-- Stephen Long    12/17/2022 Fix to importing sample when the disease report has not been saved.
-- Stephwn Long    12/19/2022 Added connected disease laboratory test ID to the list of output.
-- Stephen Long    02/03/2023 Changed to data audit call with strMainObject.
-- Stephen Long    03/08/2023 Fix to call data audit set and pass EIDSS report ID.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_VET_DISEASE_REPORT_SET]
(
    @DiseaseReportID BIGINT,
    @EIDSSReportID NVARCHAR(200) = NULL,
    @FarmID BIGINT,
    @FarmMasterID BIGINT,
    @FarmOwnerID BIGINT = NULL,
    @MonitoringSessionID BIGINT = NULL,
    @OutbreakID BIGINT = NULL,
    @RelatedToDiseaseReportID BIGINT = NULL,
    @EIDSSFieldAccessionID NVARCHAR(200) = NULL,
    @DiseaseID BIGINT,
    @EnteredByPersonID BIGINT = NULL,
    @ReportedByOrganizationID BIGINT = NULL,
    @ReportedByPersonID BIGINT = NULL,
    @InvestigatedByOrganizationID BIGINT = NULL,
    @InvestigatedByPersonID BIGINT = NULL,
    @ReceivedByOrganizationID BIGINT = NULL,
    @ReceivedByPersonID BIGINT = NULL,
    @SiteID BIGINT,
    @DiagnosisDate DATETIME = NULL,
    @EnteredDate DATETIME = NULL,
    @ReportDate DATETIME = NULL,
    @AssignedDate DATETIME = NULL,
    @InvestigationDate DATETIME = NULL,
    @RowStatus INT,
    @ReportTypeID BIGINT = NULL,
    @ClassificationTypeID BIGINT = NULL,
    @StatusTypeID BIGINT = NULL,
    @ReportCategoryTypeID BIGINT,
    @FarmTotalAnimalQuantity INT = NULL,
    @FarmSickAnimalQuantity INT = NULL,
    @FarmDeadAnimalQuantity INT = NULL,
    @FarmLatitude FLOAT = NULL,
    @FarmLongitude FLOAT = NULL,
    @FarmEpidemiologicalObservationID BIGINT = NULL,
    @ControlMeasuresObservationID BIGINT = NULL,
    @TestsConductedIndicator BIGINT = NULL,
    @AuditUserName NVARCHAR(200),
    @FlocksOrHerds NVARCHAR(MAX) = NULL,
    @Species NVARCHAR(MAX) = NULL,
    @Animals NVARCHAR(MAX) = NULL,
    @Vaccinations NVARCHAR(MAX) = NULL,
    @Samples NVARCHAR(MAX) = NULL,
    @PensideTests NVARCHAR(MAX) = NULL,
    @LaboratoryTests NVARCHAR(MAX) = NULL,
    @LaboratoryTestInterpretations NVARCHAR(MAX) = NULL,
    @CaseLogs NVARCHAR(MAX) = NULL,
    @ClinicalInformation NVARCHAR(MAX) = NULL,
    @Contacts NVARCHAR(MAX) = NULL,
    @CaseMonitorings NVARCHAR(MAX) = NULL,
    @Events NVARCHAR(MAX) = NULL,
    @UserID BIGINT,
    @LinkLocalOrFieldSampleIDToReportID BIT = 0,
    @OutbreakCaseIndicator BIT = 0,
    @OutbreakCaseReportUID BIGINT = NULL,
    @OutbreakCaseStatusTypeID BIGINT = NULL,
    @OutbreakCaseQuestionnaireObservationID BIGINT = NULL,
    @PrimaryCaseIndicator BIT = 0
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT
            = 0,
                @ReturnMessage NVARCHAR(MAX) = N'SUCCESS',
                @ConnectedDiseaseReportLaboratoryTestID BIGINT = NULL,
                @RowAction INT = NULL,
                @RowID BIGINT,
                @Iteration INT = 0,
                @NewFarmOwnerID BIGINT = NULL,
                @FlockOrHerdID BIGINT = NULL,
                @FlockOrHerdMasterID BIGINT = NULL,
                @EIDSSFlockOrHerdID NVARCHAR(200) = NULL,
                @SickAnimalQuantity INT = NULL,
                @TotalAnimalQuantity INT = NULL,
                @DeadAnimalQuantity INT = NULL,
                @Comments NVARCHAR(2000) = NULL,
                @SpeciesID BIGINT = NULL,
                @SpeciesMasterID BIGINT = NULL,
                @SpeciesTypeID BIGINT = NULL,
                @StartOfSignsDate DATETIME = NULL,
                @AverageAge NVARCHAR(200) = NULL,
                @ObservationID BIGINT = NULL,
                @OutbreakSpeciesCaseStatusTypeID BIGINT = NULL,
                @AnimalID BIGINT = NULL,
                @SexTypeID BIGINT = NULL,
                @ConditionTypeID BIGINT = NULL,
                @AgeTypeID BIGINT = NULL,
                @EIDSSAnimalID NVARCHAR(200) = NULL,
                @AnimalName NVARCHAR(200) = NULL,
                @Color NVARCHAR(200) = NULL,
                @AnimalDescription NVARCHAR(200) = NULL,
                @ClinicalSignsIndicator BIGINT = NULL,
                @VaccinationID BIGINT,
                @VaccinationTypeID BIGINT = NULL,
                @RouteTypeID BIGINT = NULL,
                @VaccinationDate DATETIME = NULL,
                @Manufacturer NVARCHAR(200) = NULL,
                @LotNumber NVARCHAR(200) = NULL,
                @NumberVaccinated INT = NULL,
                @SampleID BIGINT,
                @SampleTypeID BIGINT = NULL,
                @RootSampleID BIGINT = NULL,
                @ParentSampleID BIGINT = NULL,
                @CollectedByPersonID BIGINT = NULL,
                @CollectedByOrganizationID BIGINT = NULL,
                @CollectionDate DATETIME = NULL,
                @SentDate DATETIME = NULL,
                @EIDSSLocalOrFieldSampleID NVARCHAR(200) = NULL,
                @SampleStatusTypeID BIGINT = NULL,
                @EIDSSLaboratorySampleID NVARCHAR(200) = NULL,
                @SentToOrganizationID BIGINT = NULL,
                @ReadOnlyIndicator BIT = NULL,
                @CurrentSiteID BIGINT = NULL,
                @BirdStatusTypeID BIGINT = NULL,
                @PensideTestID BIGINT = NULL,
                @PensideTestResultTypeID BIGINT = NULL,
                @PensideTestNameTypeID BIGINT = NULL,
                @TestedByPersonID BIGINT = NULL,
                @TestedByOrganizationID BIGINT = NULL,
                @TestDate DATETIME = NULL,
                @PensideTestCategoryTypeID BIGINT = NULL,
                @TestID BIGINT = NULL,
                @TestNameTypeID BIGINT = NULL,
                @TestCategoryTypeID BIGINT = NULL,
                @TestResultTypeID BIGINT = NULL,
                @TestStatusTypeID BIGINT,
                @BatchTestID BIGINT = NULL,
                @StartedDate DATETIME = NULL,
                @ResultDate DATETIME = NULL,
                @ResultEnteredByOrganizationID BIGINT = NULL,
                @ResultEnteredByPersonID BIGINT = NULL,
                @ValidatedByOrganizationID BIGINT = NULL,
                @ValidatedByPersonID BIGINT = NULL,
                @NonLaboratoryTestIndicator BIT,
                @ExternalTestIndicator BIT = NULL,
                @PerformedByOrganizationID BIGINT = NULL,
                @ReceivedDate DATETIME = NULL,
                @ContactPersonName NVARCHAR(200) = NULL,
                @TestDiseaseReportID BIGINT = NULL,
                @TestInterpretationID BIGINT,
                @InterpretedStatusTypeID BIGINT = NULL,
                @InterpretedByOrganizationID BIGINT = NULL,
                @InterpretedByPersonID BIGINT = NULL,
                @TestingInterpretations BIGINT,
                @ValidatedStatusIndicator BIT = NULL,
                @ReportSessionCreatedIndicator BIT = NULL,
                @ValidatedComment NVARCHAR(200) = NULL,
                @InterpretedComment NVARCHAR(200) = NULL,
                @ValidatedDate DATETIME = NULL,
                @InterpretedDate DATETIME = NULL,
                @CaseLogID BIGINT,
                @LogStatusTypeID BIGINT = NULL,
                @LoggedByPersonID BIGINT = NULL,
                @LogDate DATETIME = NULL,
                @ActionRequired NVARCHAR(200) = NULL,
                @VeterinaryDiseaseReportRelationshipID BIGINT = NULL,
                @RelatedToSpeciesID BIGINT = NULL,
                @RelatedToAnimalID BIGINT = NULL,
                @RelatedToObservationID BIGINT = NULL,
                @FormTemplateID BIGINT,
                @ObservationSiteID BIGINT,
                @ActivityID BIGINT = NULL,
                @ActivityIDNew BIGINT = NULL,
                @ParameterID BIGINT = NULL,
                @ParameterValue SQL_VARIANT = NULL,
                @ParameterRowID BIGINT = NULL,
                @EventId BIGINT,
                @EventTypeId BIGINT = NULL,
                @EventSiteId BIGINT = NULL,
                @EventObjectId BIGINT = NULL,
                @EventUserId BIGINT = NULL,
                @EventDiseaseId BIGINT = NULL,
                @EventLocationId BIGINT = NULL,
                @EventInformationString NVARCHAR(MAX) = NULL,
                @EventNote NVARCHAR(MAX) = NULL,
                @EventLoginSiteId BIGINT = NULL,
                                                                                           -- Data audit
                @AuditUserID BIGINT = NULL,
                @AuditSiteID BIGINT = NULL,
                @DataAuditEventID BIGINT = NULL,
                @DataAuditEventTypeID BIGINT = NULL,
                @ObjectTypeID BIGINT = 10017085,                                           -- Veterinary disease report
                @ObjectID BIGINT = @DiseaseReportID,
                @ObjectTableID BIGINT = 75800000000,                                       -- tlbVetCase
                @ObjectVeterinaryDiseaseReportRelationshipTableID BIGINT = 53577790000004, -- VetDiseaseReportRelationship
                @ObjectObservationTableID BIGINT = 75640000000,                            -- tlbObservation
                @ObjectActivityParametersTableID BIGINT = 75410000000,                     -- tlbActivityParameters
                                                                                           -- End data audit
                @LabModuleSourceIndicator INT = 0,
                @SampleDiseaseReportID BIGINT = NULL,
                @EIDSSCaseID NVARCHAR(200) = NULL;
        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );
        DECLARE @FlocksOrHerdsTemp TABLE
        (
            FlockOrHerdID BIGINT NOT NULL,
            FarmID BIGINT NULL,
            FlockOrHerdMasterID BIGINT NULL,
            EIDSSFlockOrHerdID NVARCHAR(200) NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            RowStatus INT NULL,
            RowAction INT NULL
        );
        DECLARE @SpeciesTemp TABLE
        (
            SpeciesID BIGINT NOT NULL,
            SpeciesMasterID BIGINT NULL,
            FlockOrHerdID BIGINT NOT NULL,
            SpeciesTypeID BIGINT NOT NULL,
            SickAnimalQuantity INT NULL,
            TotalAnimalQuantity INT NULL,
            DeadAnimalQuantity INT NULL,
            StartOfSignsDate DATETIME NULL,
            AverageAge NVARCHAR(200) NULL,
            ObservationID BIGINT NULL,
            Comments NVARCHAR(2000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToSpeciesID BIGINT NULL,
            RelatedToObservationID BIGINT NULL,
            OutbreakCaseStatusTypeID BIGINT NULL
        );
        DECLARE @AnimalsTemp TABLE
        (
            AnimalID BIGINT NOT NULL,
            SexTypeID BIGINT NULL,
            ConditionTypeID BIGINT NULL,
            AgeTypeID BIGINT NULL,
            SpeciesID BIGINT NULL,
            ObservationID BIGINT NULL,
            EIDSSAnimalID NVARCHAR(200) NULL,
            AnimalName NVARCHAR(200) NULL,
            Color NVARCHAR(200) NULL,
            AnimalDescription NVARCHAR(200) NULL,
            ClinicalSignsIndicator BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL,
            RelatedToAnimalID BIGINT NULL,
            RelatedToObservationID BIGINT NULL
        );
        DECLARE @VaccinationsTemp TABLE
        (
            VaccinationID BIGINT NOT NULL,
            SpeciesID BIGINT NULL,
            VaccinationTypeID BIGINT NULL,
            RouteTypeID BIGINT NULL,
            DiseaseID BIGINT NULL,
            VaccinationDate DATETIME NULL,
            Manufacturer NVARCHAR(200) NULL,
            LotNumber NVARCHAR(200) NULL,
            NumberVaccinated INT NULL,
            Comments NVARCHAR(2000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @SamplesTemp TABLE
        (
            SampleID BIGINT NOT NULL,
            SampleTypeID BIGINT NULL,
            RootSampleID BIGINT NULL,
            ParentSampleID BIGINT NULL,
            SpeciesID BIGINT NULL,
            AnimalID BIGINT NULL,
            VeterinaryDiseaseReportID BIGINT NULL,
            MonitoringSessionID BIGINT NULL,
            SampleStatusTypeID BIGINT NULL,
            CollectionDate DATETIME NULL,
            CollectedByOrganizationID BIGINT NULL,
            CollectedByPersonID BIGINT NULL,
            SentDate DATETIME NULL,
            SentToOrganizationID BIGINT NULL,
            EIDSSLocalOrFieldSampleID NVARCHAR(200) NULL,
            Comments NVARCHAR(200) NULL,
            SiteID BIGINT NOT NULL,
            CurrentSiteID BIGINT NULL,
            EnteredDate DATETIME NULL,
            DiseaseID BIGINT NULL,
            BirdStatusTypeID BIGINT NULL,
            ReadOnlyIndicator BIT NULL,
            LabModuleSourceIndicator INT NOT NULL,
            FarmID BIGINT NULL,
            FarmOwnerID BIGINT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @PensideTestsTemp TABLE
        (
            PensideTestID BIGINT NOT NULL,
            SampleID BIGINT NOT NULL,
            PensideTestNameTypeID BIGINT NULL,
            PensideTestResultTypeID BIGINT NULL,
            PensideTestCategoryTypeID BIGINT NULL,
            TestedByPersonID BIGINT NULL,
            TestedByOrganizationID BIGINT NULL,
            DiseaseID BIGINT NULL,
            TestDate DATETIME NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @LaboratoryTestsTemp TABLE
        (
            TestID BIGINT NOT NULL,
            TestNameTypeID BIGINT NULL,
            TestCategoryTypeID BIGINT NULL,
            TestResultTypeID BIGINT NULL,
            TestStatusTypeID BIGINT NOT NULL,
            DiseaseID BIGINT NOT NULL,
            SampleID BIGINT NULL,
            BatchTestID BIGINT NULL,
            ObservationID BIGINT NULL,
            TestNumber INT NULL,
            Comments NVARCHAR NULL,
            StartedDate DATETIME NULL,
            ResultDate DATETIME NULL,
            TestedByOrganizationID BIGINT NULL,
            TestedByPersonID BIGINT NULL,
            ResultEnteredByOrganizationID BIGINT NULL,
            ResultEnteredByPersonID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            ReadOnlyIndicator BIT NOT NULL,
            NonLaboratoryTestIndicator BIT NOT NULL,
            ExternalTestIndicator BIT NULL,
            PerformedByOrganizationID BIGINT NULL,
            ReceivedDate DATETIME NULL,
            ContactPersonName NVARCHAR(200) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @LaboratoryTestInterpretationsTemp TABLE
        (
            TestInterpretationID BIGINT NOT NULL,
            DiseaseID BIGINT NULL,
            InterpretedStatusTypeID BIGINT NULL,
            ValidatedByOrganizationID BIGINT NULL,
            ValidatedByPersonID BIGINT NULL,
            InterpretedByOrganizationID BIGINT NULL,
            InterpretedByPersonID BIGINT NULL,
            TestID BIGINT NOT NULL,
            ValidatedStatusIndicator BIT NULL,
            ReportSessionCreatedIndicator BIT NULL,
            ValidatedComment NVARCHAR(200) NULL,
            InterpretedComment NVARCHAR(200) NULL,
            ValidatedDate DATETIME NULL,
            InterpretedDate DATETIME NULL,
            ReadOnlyIndicator BIT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @CaseLogsTemp TABLE
        (
            CaseLogID BIGINT NOT NULL,
            LogStatusTypeID BIGINT NULL,
            LoggedByPersonID BIGINT NULL,
            LogDate DATETIME NULL,
            ActionRequired NVARCHAR(200) NULL,
            Comments NVARCHAR(1000) NULL,
            RowStatus INT NOT NULL,
            RowAction INT NULL
        );
        DECLARE @ClinicalInformationTemp TABLE
        (
            langId NVARCHAR(200) NULL,
            HerdID BIGINT NOT NULL,
            Herd NVARCHAR(200) NULL,
            ClinicalSignsIndicator BIGINT NOT NULL,
            SpeciesTypeID BIGINT NULL,
            SpeciesTypeName NVARCHAR(200) NULL,
            StatusTypeID BIGINT NULL,
            InvestigationPerformedTypeID BIGINT NULL
        );
        DECLARE @ActivityParametersTemp TABLE
        (
            ActivityID BIGINT NOT NULL,
            ParameterID BIGINT NOT NULL,
            ParameterValue SQL_VARIANT NULL,
            ParameterRowID BIGINT NOT NULL
        );
        DECLARE @EventsTemp TABLE
        (
            EventId BIGINT NOT NULL,
            EventTypeId BIGINT NULL,
            UserId BIGINT NULL,
            SiteId BIGINT NULL,
            LoginSiteId BIGINT NULL,
            ObjectId BIGINT NULL,
            DiseaseId BIGINT NULL,
            LocationId BIGINT NULL,
            InformationString NVARCHAR(MAX) NULL,
            Note NVARCHAR(MAX) NULL
        );
        DECLARE @VeterinaryDiseaseReportAfterEdit TABLE
        (
            DiseaseReportID BIGINT,
            FarmID BIGINT,
            DiseaseID BIGINT,
            PersonEnteredByID BIGINT,
            PersonReportedByID BIGINT,
            PersonInvestigatedByID BIGINT,
            ObservationID BIGINT,
            ReportDate DATETIME,
            AssignedDate DATETIME,
            InvestigationDate DATETIME,
            FinalDiagnosisDate DATETIME,
            FieldAccessionID NVARCHAR(200),
            YNTestsConductedTypeID BIGINT,
            ReportedByOfficeID BIGINT,
            InvestigatedByOfficeID BIGINT,
            CaseReportTypeID BIGINT,
            CaseClassificationTypeID BIGINT,
            OutbreakID BIGINT,
            EnteredDate DATETIME,
            EIDSSReportID NVARCHAR(200),
            CaseProgressStatusTypeID BIGINT,
            ParentMonitoringSessionID BIGINT,
            CaseTypeID BIGINT,
            ReceivedByOfficeID BIGINT,
            ReceivedByPersonID BIGINT
        );
        DECLARE @VeterinaryDiseaseReportBeforeEdit TABLE
        (
            DiseaseReportID BIGINT,
            FarmID BIGINT,
            DiseaseID BIGINT,
            PersonEnteredByID BIGINT,
            PersonReportedByID BIGINT,
            PersonInvestigatedByID BIGINT,
            ObservationID BIGINT,
            ReportDate DATETIME,
            AssignedDate DATETIME,
            InvestigationDate DATETIME,
            FinalDiagnosisDate DATETIME,
            FieldAccessionID NVARCHAR(200),
            YNTestsConductedTypeID BIGINT,
            ReportedByOfficeID BIGINT,
            InvestigatedByOfficeID BIGINT,
            CaseReportTypeID BIGINT,
            CaseClassificationTypeID BIGINT,
            OutbreakID BIGINT,
            EnteredDate DATETIME,
            EIDSSReportID NVARCHAR(200),
            CaseProgressStatusTypeID BIGINT,
            ParentMonitoringSessionID BIGINT,
            CaseTypeID BIGINT,
            ReceivedByOfficeID BIGINT,
            ReceivedByPersonID BIGINT
        );

        BEGIN TRANSACTION;

        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        -- Predetermine the outbreak report ID for the upcoming section
        SELECT @OutbreakCaseReportUID = OutbreakCaseReportUID
        FROM dbo.OutbreakCaseReport
        WHERE idfVetCase = @DiseaseReportID;

        INSERT INTO @FlocksOrHerdsTemp
        SELECT *
        FROM
            OPENJSON(@FlocksOrHerds)
            WITH
            (
                FlockOrHerdID BIGINT,
                FarmID BIGINT,
                FlockOrHerdMasterID BIGINT,
                EIDSSFlockOrHerdID NVARCHAR(200),
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @SpeciesTemp
        SELECT *
        FROM
            OPENJSON(@Species)
            WITH
            (
                SpeciesID BIGINT,
                SpeciesMasterID BIGINT,
                FlockOrHerdID BIGINT,
                SpeciesTypeID BIGINT,
                SickAnimalQuantity INT,
                TotalAnimalQuantity INT,
                DeadAnimalQuantity INT,
                StartOfSignsDate DATETIME,
                AverageAge NVARCHAR(200),
                ObservationID BIGINT,
                Comments NVARCHAR(2000),
                RowStatus INT,
                RowAction INT,
                RelatedToSpeciesID BIGINT,
                RelatedToObservationID BIGINT,
                OutbreakCaseStatusTypeID BIGINT
            );

        INSERT INTO @AnimalsTemp
        SELECT *
        FROM
            OPENJSON(@Animals)
            WITH
            (
                AnimalID BIGINT,
                SexTypeID BIGINT,
                ConditionTypeID BIGINT,
                AgeTypeID BIGINT,
                SpeciesID BIGINT,
                ObservationID BIGINT,
                EIDSSAnimalID NVARCHAR(200),
                AnimalName NVARCHAR(200),
                Color NVARCHAR(200),
                AnimalDescription NVARCHAR(200),
                ClinicalSignsIndicator BIGINT,
                RowStatus INT,
                RowAction INT,
                RelatedToAnimalID BIGINT,
                RelatedToObservationID BIGINT
            );

        INSERT INTO @VaccinationsTemp
        SELECT *
        FROM
            OPENJSON(@Vaccinations)
            WITH
            (
                VaccinationID BIGINT,
                SpeciesID BIGINT,
                VaccinationTypeID BIGINT,
                RouteTypeID BIGINT,
                DiseaseID BIGINT,
                VaccinationDate DATETIME2,
                Manufacturer NVARCHAR(200),
                LotNumber NVARCHAR(200),
                NumberVaccinated INT,
                Comments NVARCHAR(2000),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @SamplesTemp
        SELECT *
        FROM
            OPENJSON(@Samples)
            WITH
            (
                SampleID BIGINT,
                SampleTypeID BIGINT,
                RootSampleID BIGINT,
                ParentSampleID BIGINT,
                SpeciesID BIGINT,
                AnimalID BIGINT,
                VeterinaryDiseaseReportID BIGINT,
                MonitoringSessionID BIGINT,
                SampleStatusTypeID BIGINT,
                CollectionDate DATETIME2,
                CollectedByOrganizationID BIGINT,
                CollectedByPersonID BIGINT,
                SentDate DATETIME2,
                SentToOrganizationID BIGINT,
                EIDSSLocalOrFieldSampleID NVARCHAR(200),
                Comments NVARCHAR(200),
                SiteID BIGINT,
                CurrentSiteID BIGINT,
                EnteredDate DATETIME2,
                DiseaseID BIGINT,
                BirdStatusTypeID BIGINT,
                ReadOnlyIndicator BIT,
                LabModuleSourceIndicator INT,
                FarmID BIGINT,
                FarmOwnerID BIGINT,
                RowStatus INT,
                RowAction INT
            );

        SET @Iteration =
        (
            SELECT COUNT(*) FROM dbo.tlbMaterial WHERE idfVetCase = @DiseaseReportID
        );

        INSERT INTO @PensideTestsTemp
        SELECT *
        FROM
            OPENJSON(@PensideTests)
            WITH
            (
                PensideTestID BIGINT,
                SampleID BIGINT,
                PensideTestNameTypeID BIGINT,
                PensideTestResultTypeID BIGINT,
                PensideTestCategoryTypeID BIGINT,
                TestedByPersonID BIGINT,
                TestedByOrganizationID BIGINT,
                DiseaseID BIGINT,
                TestDate DATETIME2,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @LaboratoryTestsTemp
        SELECT *
        FROM
            OPENJSON(@LaboratoryTests)
            WITH
            (
                TestID BIGINT,
                TestNameTypeID BIGINT,
                TestCategoryTypeID BIGINT,
                TestResultTypeID BIGINT,
                TestStatusTypeID BIGINT,
                DiseaseID BIGINT,
                SampleID BIGINT,
                BatchTestID BIGINT,
                ObservationID BIGINT,
                TestNumber INT,
                Comments NVARCHAR(500),
                StartedDate DATETIME2,
                ResultDate DATETIME2,
                TestedByOrganizationID BIGINT,
                TestedByPersonID BIGINT,
                ResultEnteredByOrganizationID BIGINT,
                ResultEnteredByPersonID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                ReadOnlyIndicator BIT,
                NonLaboratoryTestIndicator BIT,
                ExternalTestIndicator BIT,
                PerformedByOrganizationID BIGINT,
                ReceivedDate DATETIME2,
                ContactPersonName NVARCHAR(200),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @LaboratoryTestInterpretationsTemp
        SELECT *
        FROM
            OPENJSON(@LaboratoryTestInterpretations)
            WITH
            (
                TestInterpretationID BIGINT,
                DiseaseID BIGINT,
                InterpretedStatusTypeID BIGINT,
                ValidatedByOrganizationID BIGINT,
                ValidatedByPersonID BIGINT,
                InterpretedByOrganizationID BIGINT,
                InterpretedByPersonID BIGINT,
                TestID BIGINT,
                ValidatedStatusIndicator BIT,
                ReportSessionCreatedIndicator BIT,
                ValidatedComment NVARCHAR(200),
                InterpretedComment NVARCHAR(200),
                ValidatedDate DATETIME2,
                InterpretedDate DATETIME2,
                ReadOnlyIndicator BIT,
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @CaseLogsTemp
        SELECT *
        FROM
            OPENJSON(@CaseLogs)
            WITH
            (
                CaseLogID BIGINT,
                LogStatusTypeID BIGINT,
                LoggedByPersonID BIGINT,
                LogDate DATETIME2,
                ActionRequired NVARCHAR(200),
                Comments NVARCHAR(1000),
                RowStatus INT,
                RowAction INT
            );

        INSERT INTO @ClinicalInformationTemp
        SELECT *
        FROM
            OPENJSON(@ClinicalInformation)
            WITH
            (
                langId NVARCHAR(200),
                HerdID BIGINT,
                Herd NVARCHAR(200),
                ClinicalSignsTypeID BIGINT,
                SpeciesTypeID BIGINT,
                SpeciesTypeName NVARCHAR(200),
                StatusTypeID BIGINT,
                InvestigationPerformedTypeID BIGINT
            );

        INSERT INTO @EventsTemp
        SELECT *
        FROM
            OPENJSON(@Events)
            WITH
            (
                EventId BIGINT,
                EventTypeId BIGINT,
                UserId BIGINT,
                SiteId BIGINT,
                LoginSiteId BIGINT,
                ObjectId BIGINT,
                DiseaseId BIGINT,
                LocationId BIGINT,
                InformationString NVARCHAR(MAX),
                Note NVARCHAR(MAX)
            );

        IF NOT EXISTS
        (
            SELECT *
            FROM dbo.tlbVetCase
            WHERE idfVetCase = @DiseaseReportID
                  AND intRowStatus = 0
        )
        BEGIN
            -- Get next key value
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbVetCase', @DiseaseReportID OUTPUT;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USP_GBL_NextNumber_GET 'Vet Disease Report',
                                               @EIDSSReportID OUTPUT,
                                               NULL;

            -- Data audit
            SET @DataAuditEventTypeID = 10016001; -- Data audit create event type

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      @DataAuditEventTypeID,
                                                      @ObjectTypeID,
                                                      @DiseaseReportID,
                                                      @ObjectTableID,
                                                      @EIDSSReportID, 
                                                      @DataAuditEventID OUTPUT;
            -- End data audit

            IF @ReportCategoryTypeID = 10012004 --Avian
            BEGIN
                UPDATE dbo.tlbFarmActual
                SET intAvianTotalAnimalQty = @FarmTotalAnimalQuantity,
                    intAvianSickAnimalQty = @FarmSickAnimalQuantity,
                    intAvianDeadAnimalQty = @FarmDeadAnimalQuantity,
                    AuditUpdateUser = @AuditUserName
                WHERE idfFarmActual = @FarmMasterID;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_COPY_FARM_SET @AuditUserName,
                                                   @DataAuditEventID,
                                                   @EIDSSReportID,
                                                   @FarmMasterID,
                                                   @FarmTotalAnimalQuantity,
                                                   @FarmSickAnimalQuantity,
                                                   @FarmDeadAnimalQuantity,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   @FarmLatitude,
                                                   @FarmLongitude,
                                                   NULL,
                                                   @FarmEpidemiologicalObservationID,
                                                   @FarmOwnerID,
                                                   @FarmID OUTPUT,
                                                   @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;
            END
            ELSE --Livestock
            BEGIN
                UPDATE dbo.tlbFarmActual
                SET intLivestockTotalAnimalQty = @FarmTotalAnimalQuantity,
                    intLivestockSickAnimalQty = @FarmSickAnimalQuantity,
                    intLivestockDeadAnimalQty = @FarmDeadAnimalQuantity,
                    AuditUpdateUser = @AuditUserName
                WHERE idfFarmActual = @FarmMasterID;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_COPY_FARM_SET @AuditUserName,
                                                   @DataAuditEventID,
                                                   @EIDSSReportID,
                                                   @FarmMasterID,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   @FarmTotalAnimalQuantity,
                                                   @FarmSickAnimalQuantity,
                                                   @FarmDeadAnimalQuantity,
                                                   @FarmLatitude,
                                                   @FarmLongitude,
                                                   NULL,
                                                   @FarmEpidemiologicalObservationID,
                                                   @FarmOwnerID,
                                                   @FarmID OUTPUT,
                                                   @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;
            END

            INSERT INTO dbo.tlbVetCase
            (
                idfVetCase,
                idfFarm,
                idfsFinalDiagnosis,
                idfPersonEnteredBy,
                idfPersonReportedBy,
                idfPersonInvestigatedBy,
                idfObservation,
                idfsSite,
                datReportDate,
                datAssignedDate,
                datInvestigationDate,
                datFinalDiagnosisDate,
                strTestNotes,
                strSummaryNotes,
                strClinicalNotes,
                strFieldAccessionID,
                idfsYNTestsConducted,
                intRowStatus,
                idfReportedByOffice,
                idfInvestigatedByOffice,
                idfsCaseReportType,
                strDefaultDisplayDiagnosis,
                idfsCaseClassification,
                idfOutbreak,
                datEnteredDate,
                strCaseID,
                idfsCaseProgressStatus,
                strSampleNotes,
                datModificationForArchiveDate,
                idfParentMonitoringSession,
                idfsCaseType,
                idfReceivedByOffice,
                idfReceivedByPerson,
                AuditCreateUser,
                SourceSystemNameID,
                SourceSystemKeyValue
            )
            VALUES
            (@DiseaseReportID,
             @FarmID,
             @DiseaseID,
             @EnteredByPersonID,
             @ReportedByPersonID,
             @InvestigatedByPersonID,
             @ControlMeasuresObservationID,
             @SiteID,
             @ReportDate,
             @AssignedDate,
             @InvestigationDate,
             @DiagnosisDate,
             NULL,
             NULL,
             NULL,
             @EIDSSFieldAccessionID,
             @TestsConductedIndicator,
             @RowStatus,
             @ReportedByOrganizationID,
             @InvestigatedByOrganizationID,
             @ReportTypeID,
             NULL,
             @ClassificationTypeID,
             @OutbreakID,
             @EnteredDate,
             @EIDSSReportID,
             @StatusTypeID,
             NULL,
             NULL,
             @MonitoringSessionID,
             @ReportCategoryTypeID,
             @ReceivedByOrganizationID,
             @ReceivedByPersonID,
             @AuditUserName,
             10519001,
             '[{"idfVetCase":' + CAST(@DiseaseReportID AS NVARCHAR(300)) + '}]'
            );

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @DiseaseReportID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @EIDSSReportID
            );

            -- Update data audit event ID on tlbObservation and tlbActivityParameters
            -- for flexible forms saved outside this DB transaction.
            UPDATE dbo.tauDataAuditDetailCreate
            SET idfDataAuditEvent = @DataAuditEventID,
                strObject = @EIDSSReportID
            WHERE idfObject = @FarmEpidemiologicalObservationID
                  AND idfDataAuditEvent IS NULL;

            UPDATE dbo.tauDataAuditDetailCreate
            SET idfDataAuditEvent = @DataAuditEventID,
                strObject = @EIDSSReportID
            WHERE idfObject = @ControlMeasuresObservationID
                  AND idfDataAuditEvent IS NULL;
            -- End data audit

            UPDATE @EventsTemp
            SET ObjectId = @DiseaseReportID,
                Note = REPLACE(Note, 'diseaseReportID=0', 'diseaseReportID=' + CAST(@DiseaseReportID AS NVARCHAR(300)))
            WHERE ObjectId = 0;

            -- Update imported samples from laboratory
            UPDATE @SamplesTemp 
            SET VeterinaryDiseaseReportID = @DiseaseReportID
            WHERE VeterinaryDiseaseReportID = 0
                  AND LabModuleSourceIndicator = 1;
        END
        ELSE
        BEGIN
            -- Data audit
            SET @DataAuditEventTypeID = 10016003; -- Data audit edit event type

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                      @AuditSiteID,
                                                      @DataAuditEventTypeID,
                                                      @ObjectTypeID,
                                                      @DiseaseReportID,
                                                      @ObjectTableID,
                                                      @EIDSSReportID, 
                                                      @DataAuditEventID OUTPUT;
            -- End data audit

            IF @ReportCategoryTypeID = 10012004 --Avian
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_COPY_FARM_SET @AuditUserName,
                                                   @DataAuditEventID,
                                                   @EIDSSReportID,
                                                   @FarmMasterID,
                                                   @FarmTotalAnimalQuantity,
                                                   @FarmSickAnimalQuantity,
                                                   @FarmDeadAnimalQuantity,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   @FarmLatitude,
                                                   @FarmLongitude,
                                                   @MonitoringSessionID,
                                                   @FarmEpidemiologicalObservationID,
                                                   @FarmOwnerID,
                                                   @FarmID OUTPUT,
                                                   @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;
            END
            ELSE --Livestock
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_VET_COPY_FARM_SET @AuditUserName,
                                                   @DataAuditEventID,
                                                   @EIDSSReportID,
                                                   @FarmMasterID,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   @FarmTotalAnimalQuantity,
                                                   @FarmSickAnimalQuantity,
                                                   @FarmDeadAnimalQuantity,
                                                   @FarmLatitude,
                                                   @FarmLongitude,
                                                   @MonitoringSessionID,
                                                   @FarmEpidemiologicalObservationID,
                                                   @FarmOwnerID,
                                                   @FarmID OUTPUT,
                                                   @NewFarmOwnerID OUTPUT;

                IF @NewFarmOwnerID IS NOT NULL
                BEGIN
                    SET @FarmOwnerID = @NewFarmOwnerID;
                END;
            END
            -- Data audit
            INSERT INTO @VeterinaryDiseaseReportBeforeEdit
            (
                DiseaseReportID,
                FarmID,
                DiseaseID,
                PersonEnteredByID,
                PersonReportedByID,
                PersonInvestigatedByID,
                ObservationID,
                ReportDate,
                AssignedDate,
                InvestigationDate,
                FinalDiagnosisDate,
                FieldAccessionID,
                YNTestsConductedTypeID,
                ReportedByOfficeID,
                InvestigatedByOfficeID,
                CaseReportTypeID,
                CaseClassificationTypeID,
                OutbreakID,
                EnteredDate,
                EIDSSReportID,
                CaseProgressStatusTypeID,
                ParentMonitoringSessionID,
                CaseTypeID,
                ReceivedByOfficeID,
                ReceivedByPersonID
            )
            SELECT idfVetCase,
                   idfFarm,
                   idfsFinalDiagnosis,
                   idfPersonEnteredBy,
                   idfPersonReportedBy,
                   idfPersonInvestigatedBy,
                   idfObservation,
                   datReportDate,
                   datAssignedDate,
                   datInvestigationDate,
                   datFinalDiagnosisDate,
                   strFieldAccessionID,
                   idfsYNTestsConducted,
                   idfReportedByOffice,
                   idfInvestigatedByOffice,
                   idfsCaseReportType,
                   idfsCaseClassification,
                   idfOutbreak,
                   datEnteredDate,
                   strCaseID,
                   idfsCaseProgressStatus,
                   idfParentMonitoringSession,
                   idfsCaseType,
                   idfReceivedByOffice,
                   idfReceivedByPerson
            FROM dbo.tlbVetCase
            WHERE idfVetCase = @DiseaseReportID;
            -- End data audit

            UPDATE dbo.tlbVetCase
            SET idfFarm = @FarmID,
                idfsFinalDiagnosis = @DiseaseID,
                idfPersonEnteredBy = @EnteredByPersonID,
                idfPersonReportedBy = @ReportedByPersonID,
                idfPersonInvestigatedBy = @InvestigatedByPersonID,
                idfReceivedByPerson = @ReceivedByPersonID,
                idfObservation = @ControlMeasuresObservationID,
                idfsSite = @SiteID,
                datReportDate = @ReportDate,
                datAssignedDate = @AssignedDate,
                datInvestigationDate = @InvestigationDate,
                datFinalDiagnosisDate = @DiagnosisDate,
                strTestNotes = NULL,
                strSummaryNotes = NULL,
                strClinicalNotes = NULL,
                strFieldAccessionID = @EIDSSFieldAccessionID,
                idfsYNTestsConducted = @TestsConductedIndicator,
                intRowStatus = @RowStatus,
                idfReportedByOffice = @ReportedByOrganizationID,
                idfInvestigatedByOffice = @InvestigatedByOrganizationID,
                idfReceivedByOffice = @ReceivedByOrganizationID,
                idfsCaseReportType = @ReportTypeID,
                idfsCaseClassification = @ClassificationTypeID,
                idfOutbreak = @OutbreakID,
                datEnteredDate = @EnteredDate,
                strCaseID = @EIDSSReportID,
                idfsCaseProgressStatus = @StatusTypeID,
                strSampleNotes = NULL,
                idfParentMonitoringSession = @MonitoringSessionID,
                idfsCaseType = @ReportCategoryTypeID,
                AuditUpdateUser = @AuditUserName
            WHERE idfVetCase = @DiseaseReportID;

            -- Data audit
            INSERT INTO @VeterinaryDiseaseReportAfterEdit
            (
                DiseaseReportID,
                FarmID,
                DiseaseID,
                PersonEnteredByID,
                PersonReportedByID,
                PersonInvestigatedByID,
                ObservationID,
                ReportDate,
                AssignedDate,
                InvestigationDate,
                FinalDiagnosisDate,
                FieldAccessionID,
                YNTestsConductedTypeID,
                ReportedByOfficeID,
                InvestigatedByOfficeID,
                CaseReportTypeID,
                CaseClassificationTypeID,
                OutbreakID,
                EnteredDate,
                EIDSSReportID,
                CaseProgressStatusTypeID,
                ParentMonitoringSessionID,
                CaseTypeID,
                ReceivedByOfficeID,
                ReceivedByPersonID
            )
            SELECT idfVetCase,
                   idfFarm,
                   idfsFinalDiagnosis,
                   idfPersonEnteredBy,
                   idfPersonReportedBy,
                   idfPersonInvestigatedBy,
                   idfObservation,
                   datReportDate,
                   datAssignedDate,
                   datInvestigationDate,
                   datFinalDiagnosisDate,
                   strFieldAccessionID,
                   idfsYNTestsConducted,
                   idfReportedByOffice,
                   idfInvestigatedByOffice,
                   idfsCaseReportType,
                   idfsCaseClassification,
                   idfOutbreak,
                   datEnteredDate,
                   strCaseID,
                   idfsCaseProgressStatus,
                   idfParentMonitoringSession,
                   idfsCaseType,
                   idfReceivedByOffice,
                   idfReceivedByPerson
            FROM dbo.tlbVetCase
            WHERE idfVetCase = @DiseaseReportID;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4575810000000,
                   a.DiseaseReportID,
                   NULL,
                   b.FarmID,
                   a.FarmID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.FarmID <> b.FarmID)
                  OR (
                         a.FarmID IS NOT NULL
                         AND b.FarmID IS NULL
                     )
                  OR (
                         a.FarmID IS NULL
                         AND b.FarmID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80940000000,
                   a.DiseaseReportID,
                   NULL,
                   b.DiseaseID,
                   a.DiseaseID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.DiseaseID <> b.DiseaseID)
                  OR (
                         a.DiseaseID IS NOT NULL
                         AND b.DiseaseID IS NULL
                     )
                  OR (
                         a.DiseaseID IS NULL
                         AND b.DiseaseID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80910000000,
                   a.DiseaseReportID,
                   NULL,
                   b.PersonEnteredByID,
                   a.PersonEnteredByID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.PersonEnteredByID <> b.PersonEnteredByID)
                  OR (
                         a.PersonEnteredByID IS NOT NULL
                         AND b.PersonEnteredByID IS NULL
                     )
                  OR (
                         a.PersonEnteredByID IS NULL
                         AND b.PersonEnteredByID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80930000000,
                   a.DiseaseReportID,
                   NULL,
                   b.PersonReportedByID,
                   a.PersonReportedByID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.PersonReportedByID <> b.PersonReportedByID)
                  OR (
                         a.PersonReportedByID IS NOT NULL
                         AND b.PersonReportedByID IS NULL
                     )
                  OR (
                         a.PersonReportedByID IS NULL
                         AND b.PersonReportedByID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80920000000,
                   a.DiseaseReportID,
                   NULL,
                   b.PersonInvestigatedByID,
                   a.PersonInvestigatedByID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.PersonInvestigatedByID <> b.PersonInvestigatedByID)
                  OR (
                         a.PersonInvestigatedByID IS NOT NULL
                         AND b.PersonInvestigatedByID IS NULL
                     )
                  OR (
                         a.PersonInvestigatedByID IS NULL
                         AND b.PersonInvestigatedByID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4566320000000,
                   a.DiseaseReportID,
                   NULL,
                   b.ObservationID,
                   a.ObservationID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.ObservationID <> b.ObservationID)
                  OR (
                         a.ObservationID IS NOT NULL
                         AND b.ObservationID IS NULL
                     )
                  OR (
                         a.ObservationID IS NULL
                         AND b.ObservationID IS NOT NULL
                     )

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80870000000,
                   a.DiseaseReportID,
                   NULL,
                   b.ReportDate,
                   a.ReportDate,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.ReportDate <> b.ReportDate)
                  OR (
                         a.ReportDate IS NOT NULL
                         AND b.ReportDate IS NULL
                     )
                  OR (
                         a.ReportDate IS NULL
                         AND b.ReportDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80850000000,
                   a.DiseaseReportID,
                   NULL,
                   b.AssignedDate,
                   a.AssignedDate,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.AssignedDate <> b.AssignedDate)
                  OR (
                         a.AssignedDate IS NOT NULL
                         AND b.AssignedDate IS NULL
                     )
                  OR (
                         a.AssignedDate IS NULL
                         AND b.AssignedDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4566330000000,
                   a.DiseaseReportID,
                   NULL,
                   b.InvestigationDate,
                   a.InvestigationDate,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.InvestigationDate <> b.InvestigationDate)
                  OR (
                         a.InvestigationDate IS NOT NULL
                         AND b.InvestigationDate IS NULL
                     )
                  OR (
                         a.InvestigationDate IS NULL
                         AND b.InvestigationDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   80860000000,
                   a.DiseaseReportID,
                   NULL,
                   b.FinalDiagnosisDate,
                   a.FinalDiagnosisDate,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.FinalDiagnosisDate <> b.FinalDiagnosisDate)
                  OR (
                         a.FinalDiagnosisDate IS NOT NULL
                         AND b.FinalDiagnosisDate IS NULL
                     )
                  OR (
                         a.FinalDiagnosisDate IS NULL
                         AND b.FinalDiagnosisDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4566340000000,
                   a.DiseaseReportID,
                   NULL,
                   b.FieldAccessionID,
                   a.FieldAccessionID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.FieldAccessionID <> b.FieldAccessionID)
                  OR (
                         a.FieldAccessionID IS NOT NULL
                         AND b.FieldAccessionID IS NULL
                     )
                  OR (
                         a.FieldAccessionID IS NULL
                         AND b.FieldAccessionID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   4578870000000,
                   a.DiseaseReportID,
                   NULL,
                   b.YNTestsConductedTypeID,
                   a.YNTestsConductedTypeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.YNTestsConductedTypeID <> b.YNTestsConductedTypeID)
                  OR (
                         a.YNTestsConductedTypeID IS NOT NULL
                         AND b.YNTestsConductedTypeID IS NULL
                     )
                  OR (
                         a.YNTestsConductedTypeID IS NULL
                         AND b.YNTestsConductedTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   6618090000000,
                   a.DiseaseReportID,
                   NULL,
                   b.ReportedByOfficeID,
                   a.ReportedByOfficeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.ReportedByOfficeID <> b.ReportedByOfficeID)
                  OR (
                         a.ReportedByOfficeID IS NOT NULL
                         AND b.ReportedByOfficeID IS NULL
                     )
                  OR (
                         a.ReportedByOfficeID IS NULL
                         AND b.ReportedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   6618100000000,
                   a.DiseaseReportID,
                   NULL,
                   b.InvestigatedByOfficeID,
                   a.InvestigatedByOfficeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.InvestigatedByOfficeID <> b.InvestigatedByOfficeID)
                  OR (
                         a.InvestigatedByOfficeID IS NOT NULL
                         AND b.InvestigatedByOfficeID IS NULL
                     )
                  OR (
                         a.InvestigatedByOfficeID IS NULL
                         AND b.InvestigatedByOfficeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   6618120000000,
                   a.DiseaseReportID,
                   NULL,
                   b.CaseReportTypeID,
                   a.CaseReportTypeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.CaseReportTypeID <> b.CaseReportTypeID)
                  OR (
                         a.CaseReportTypeID IS NOT NULL
                         AND b.CaseReportTypeID IS NULL
                     )
                  OR (
                         a.CaseReportTypeID IS NULL
                         AND b.CaseReportTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665470000000,
                   a.DiseaseReportID,
                   NULL,
                   b.CaseClassificationTypeID,
                   a.CaseClassificationTypeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.CaseClassificationTypeID <> b.CaseClassificationTypeID)
                  OR (
                         a.CaseClassificationTypeID IS NOT NULL
                         AND b.CaseClassificationTypeID IS NULL
                     )
                  OR (
                         a.CaseClassificationTypeID IS NULL
                         AND b.CaseClassificationTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665490000000,
                   a.DiseaseReportID,
                   NULL,
                   b.OutbreakID,
                   a.OutbreakID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.OutbreakID <> b.OutbreakID)
                  OR (
                         a.OutbreakID IS NOT NULL
                         AND b.OutbreakID IS NULL
                     )
                  OR (
                         a.OutbreakID IS NULL
                         AND b.OutbreakID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665500000000,
                   a.DiseaseReportID,
                   NULL,
                   b.EnteredDate,
                   a.EnteredDate,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.EnteredDate <> b.EnteredDate)
                  OR (
                         a.EnteredDate IS NOT NULL
                         AND b.EnteredDate IS NULL
                     )
                  OR (
                         a.EnteredDate IS NULL
                         AND b.EnteredDate IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665510000000,
                   a.DiseaseReportID,
                   NULL,
                   b.EIDSSReportID,
                   a.EIDSSReportID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.EIDSSReportID <> b.EIDSSReportID)
                  OR (
                         a.EIDSSReportID IS NOT NULL
                         AND b.EIDSSReportID IS NULL
                     )
                  OR (
                         a.EIDSSReportID IS NULL
                         AND b.EIDSSReportID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665520000000,
                   a.DiseaseReportID,
                   NULL,
                   b.CaseProgressStatusTypeID,
                   a.CaseProgressStatusTypeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.CaseProgressStatusTypeID <> b.CaseProgressStatusTypeID)
                  OR (
                         a.CaseProgressStatusTypeID IS NOT NULL
                         AND b.CaseProgressStatusTypeID IS NULL
                     )
                  OR (
                         a.CaseProgressStatusTypeID IS NULL
                         AND b.CaseProgressStatusTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665540000000,
                   a.DiseaseReportID,
                   NULL,
                   b.ParentMonitoringSessionID,
                   a.ParentMonitoringSessionID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.ParentMonitoringSessionID <> b.ParentMonitoringSessionID)
                  OR (
                         a.ParentMonitoringSessionID IS NOT NULL
                         AND b.ParentMonitoringSessionID IS NULL
                     )
                  OR (
                         a.ParentMonitoringSessionID IS NULL
                         AND b.ParentMonitoringSessionID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   12665560000000,
                   a.DiseaseReportID,
                   NULL,
                   b.CaseTypeID,
                   a.CaseTypeID,
                   @AuditUserName,
                   @EIDSSReportID
            FROM @VeterinaryDiseaseReportAfterEdit AS a
                FULL JOIN @VeterinaryDiseaseReportBeforeEdit AS b
                    ON a.DiseaseReportID = b.DiseaseReportID
            WHERE (a.CaseTypeID <> b.CaseTypeID)
                  OR (
                         a.CaseTypeID IS NOT NULL
                         AND b.CaseTypeID IS NULL
                     )
                  OR (
                         a.CaseTypeID IS NULL
                         AND b.CaseTypeID IS NOT NULL
                     );
        END;

        -- VUC11 and VUC12 - connected disease report logic.
        IF @RelatedToDiseaseReportID IS NOT NULL
        BEGIN
            IF NOT EXISTS
            (
                SELECT *
                FROM dbo.VetDiseaseReportRelationship
                WHERE VetDiseaseReportID = @DiseaseReportID
                      AND intRowStatus = 0
            )
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'VetDiseaseReportRelationship',
                                                  @VeterinaryDiseaseReportRelationshipID OUTPUT;

                INSERT INTO dbo.VetDiseaseReportRelationship
                (
                    VetDiseaseReportRelnUID,
                    VetDiseaseReportID,
                    RelatedToVetDiseaseReportID,
                    RelationshipTypeID,
                    intRowStatus,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser
                )
                VALUES
                (@VeterinaryDiseaseReportRelationshipID,
                 @DiseaseReportID,
                 @RelatedToDiseaseReportID,
                 10503001,
                 0  ,
                 10519001,
                 '[{"VetDiseaseReportRelnUID":' + CAST(@VeterinaryDiseaseReportRelationshipID AS NVARCHAR(300))
                 + ',"VetDiseaseReportID":' + CAST(@DiseaseReportID AS NVARCHAR(300)) + '}]',
                 @AuditUserName
                );

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    strObject
                )
                VALUES
                (@DataAuditEventID,
                 @ObjectVeterinaryDiseaseReportRelationshipTableID,
                 @VeterinaryDiseaseReportRelationshipID,
                 10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                 + CAST(@ObjectVeterinaryDiseaseReportRelationshipTableID AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 @EIDSSReportID
                );
            -- End data audit
            END;
        END;

        -- An outbreak reference via a case must be created in order to tie the disease report to the outbreak session.
        IF @OutbreakCaseIndicator = 1
        BEGIN
            IF @OutbreakCaseReportUID IS NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'OutbreakCaseReport',
                                               @OutbreakCaseReportUID OUTPUT;

                INSERT INTO @SuppressSelect
                EXEC dbo.USP_GBL_NextNumber_GET 'Vet Outbreak Case',
                                                @EIDSSCaseID OUTPUT,
                                                NULL;

                INSERT INTO dbo.OutbreakCaseReport
                (
                    OutbreakCaseReportUID,
                    idfOutbreak,
                    strOutbreakCaseID,
                    idfHumanCase,
                    idfVetCase,
                    OutbreakCaseObservationId,
                    OutbreakCaseStatusId,
                    OutbreakCaseClassificationID,
                    IsPrimaryCaseFlag,
                    intRowStatus,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    AuditCreateDTM,
                    AuditUpdateUser,
                    AuditUpdateDTM
                )
                VALUES
                (@OutbreakCaseReportUID,
                 @OutbreakID,
                 @EIDSSCaseID,
                 NULL,
                 @DiseaseReportID,
                 @OutbreakCaseQuestionnaireObservationID,
                 @OutbreakCaseStatusTypeID,
                 @ClassificationTypeID,
                 @PrimaryCaseIndicator,
                 0  ,
                 10519001,
                 '[{"OutBreakCaseReportUID":' + CAST(@OutbreakCaseReportUID AS NVARCHAR(300)) + ',"idfOutbreak":'
                 + CAST(@OutbreakID AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 GETDATE(),
                 @AuditUserName,
                 GETDATE()
                );
            END
            ELSE
            BEGIN
                UPDATE dbo.OutbreakCaseReport
                SET OutbreakCaseStatusId = @OutbreakCaseStatusTypeID,
                    OutbreakCaseClassificationID = @ClassificationTypeID,
                    IsPrimaryCaseFlag = @PrimaryCaseIndicator,
                    intRowStatus = 0,
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE(),
                    OutbreakCaseObservationID = @OutbreakCaseQuestionnaireObservationID
                WHERE OutbreakCaseReportUID = @OutbreakCaseReportUID;
            END
        END

        WHILE EXISTS (SELECT * FROM @FlocksOrHerdsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = FlockOrHerdID,
                @FlockOrHerdID = FlockOrHerdID,
                @FlockOrHerdMasterID = FlockOrHerdMasterID,
                @EIDSSFlockOrHerdID = EIDSSFlockOrHerdID,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @FlocksOrHerdsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_FLOCK_HERD_SET @AuditUserName,
                                                @DataAuditEventID,
                                                @EIDSSReportID,
                                                @FlockOrHerdID OUTPUT,
                                                @FlockOrHerdMasterID,
                                                @FarmID,
                                                @EIDSSFlockOrHerdID,
                                                @SickAnimalQuantity,
                                                @TotalAnimalQuantity,
                                                @DeadAnimalQuantity,
                                                NULL,
                                                @RowStatus,
                                                @RowAction;

            UPDATE @SpeciesTemp
            SET FlockOrHerdID = @FlockOrHerdID
            WHERE FlockOrHerdID = @RowID;

            DELETE FROM @FlocksOrHerdsTemp
            WHERE FLockOrHerdID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @SpeciesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SpeciesID,
                @SpeciesID = SpeciesID,
                @SpeciesMasterID = SpeciesMasterID,
                @SpeciesTypeID = SpeciesTypeID,
                @FlockOrHerdID = FlockOrHerdID,
                @StartOfSignsDate = StartOfSignsDate,
                @AverageAge = AverageAge,
                @SickAnimalQuantity = SickAnimalQuantity,
                @TotalAnimalQuantity = TotalAnimalQuantity,
                @DeadAnimalQuantity = DeadAnimalQuantity,
                @Comments = Comments,
                @ObservationID = ObservationID,
                @RowStatus = RowStatus,
                @RowAction = RowAction,
                @RelatedToSpeciesID = RelatedToSpeciesID,
                @RelatedToObservationID = RelatedToObservationID,
                @OutbreakSpeciesCaseStatusTypeID = OutbreakCaseStatusTypeID
            FROM @SpeciesTemp;

            -- VUC11 and VUC12 - connected disease report logic for clinical species investigations.
            IF @RelatedToDiseaseReportID IS NOT NULL
               AND @RowAction = 1 -- Insert
            BEGIN
                IF @RelatedToObservationID IS NOT NULL
                BEGIN
                    SELECT @FormTemplateID = idfsFormTemplate,
                           @ObservationSiteID = idfsSite
                    FROM dbo.tlbObservation
                    WHERE idfObservation = @RelatedToObservationID;

                    SET @ObservationID = -1;

                    INSERT INTO @SuppressSelect
                    EXECUTE dbo.USSP_GBL_OBSERVATION_SET @ObservationID OUTPUT,
                                                         @FormTemplateID,
                                                         @ObservationSiteID,
                                                         0,
                                                         1, 
                                                         @AuditUserName, 
                                                         @DataAuditEventID, 
                                                         @EIDSSReportID;

                    UPDATE @SpeciesTemp
                    SET ObservationID = @ObservationID
                    WHERE SpeciesMasterID = @SpeciesMasterID;

                    INSERT INTO @ActivityParametersTemp
                    SELECT idfActivityParameters,
                           idfsParameter,
                           varValue,
                           idfRow
                    FROM dbo.tlbActivityParameters
                    WHERE idfObservation = @RelatedToObservationID;

                    WHILE EXISTS (SELECT * FROM @ActivityParametersTemp)
                    BEGIN
                        SELECT TOP 1
                            @ActivityID = ActivityID,
                            @ParameterID = ParameterID,
                            @ParameterValue = ParameterValue,
                            @ParameterRowID = ParameterRowID
                        FROM @ActivityParametersTemp;

                        INSERT INTO @SuppressSelect
                        EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbActivityParameters',
                                                          @ActivityIDNew OUTPUT;

                        INSERT INTO dbo.tlbActivityParameters
                        (
                            idfActivityParameters,
                            idfsParameter,
                            idfObservation,
                            varValue,
                            idfRow,
                            intRowStatus,
                            SourceSystemNameID,
                            SourceSystemKeyValue,
                            AuditCreateUser,
                            AuditCreateDTM
                        )
                        VALUES
                        (@ActivityIDNew,
                         @ParameterID,
                         @ObservationID,
                         @ParameterValue,
                         @ParameterRowID,
                         0  ,
                         10519001,
                         '[{"idfActivityParameters":' + CAST(@ActivityIDNew AS NVARCHAR(300)) + '}]',
                         @AuditUserName,
                         GETDATE()
                        );

                        -- Data audit
                        INSERT INTO dbo.tauDataAuditDetailCreate
                        (
                            idfDataAuditEvent,
                            idfObjectTable,
                            idfObject,
                            idfObjectDetail,
                            SourceSystemNameID,
                            SourceSystemKeyValue,
                            AuditCreateUser
                        )
                        VALUES
                        (@DataAuditEventID,
                         @ObjectActivityParametersTableID,
                         @ActivityIDNew,
                         @ObservationID,
                         10519001,
                         '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                         + CAST(@ObjectActivityParametersTableID AS NVARCHAR(300)) + '}]',
                         @AuditUserName
                        );
                        -- End data audit

                        DELETE FROM @ActivityParametersTemp
                        WHERE ActivityID = @ActivityID;
                    END;
                END;
            END;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_SPECIES_WITH_AUDITING_SET @AuditUserName,
                                                           @DataAuditEventID,
                                                           @EIDSSReportID,
                                                           @SpeciesID OUTPUT,
                                                           @SpeciesMasterID,
                                                           @SpeciesTypeID,
                                                           @FlockOrHerdID,
                                                           @ObservationID,
                                                           @StartOfSignsDate,
                                                           @AverageAge,
                                                           @SickAnimalQuantity,
                                                           @TotalAnimalQuantity,
                                                           @DeadAnimalQuantity,
                                                           @Comments,
                                                           @RowStatus,
                                                           @RowAction,
                                                           @OutbreakSpeciesCaseStatusTypeID;

            UPDATE @AnimalsTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            UPDATE @VaccinationsTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            UPDATE @SamplesTemp
            SET SpeciesID = @SpeciesID
            WHERE SpeciesID = @RowID;

            DELETE FROM @SpeciesTemp
            WHERE SpeciesID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @AnimalsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = AnimalID,
                @AnimalID = AnimalID,
                @SexTypeID = SexTypeID,
                @ConditionTypeID = ConditionTypeID,
                @AgeTypeID = AgeTypeID,
                @SpeciesID = SpeciesID,
                @ObservationID = ObservationID,
                @AnimalDescription = AnimalDescription,
                @EIDSSAnimalID = EIDSSAnimalID,
                @AnimalName = AnimalName,
                @Color = Color,
                @ClinicalSignsIndicator = ClinicalSignsIndicator,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @AnimalsTemp;

            -- VUC11 and VUC12 - connected disease report logic for clinical signs.
            IF @RelatedToDiseaseReportID IS NOT NULL
               AND @RowAction = 1 -- Insert
               AND @ObservationID IS NOT NULL
            BEGIN
                SELECT @FormTemplateID = idfsFormTemplate,
                       @ObservationSiteID = idfsSite
                FROM dbo.tlbObservation
                WHERE idfObservation = @ObservationID;

                DELETE FROM @ActivityParametersTemp;

                INSERT INTO @ActivityParametersTemp
                SELECT idfActivityParameters,
                       idfsParameter,
                       varValue,
                       idfRow
                FROM dbo.tlbActivityParameters
                WHERE idfObservation = @ObservationID;

                SET @ObservationID = -1;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_OBSERVATION_SET @ObservationID OUTPUT,
                                                     @FormTemplateID,
                                                     @ObservationSiteID,
                                                     0,
                                                     1, 
                                                     @AuditUserName, 
                                                     @DataAuditEventID, 
                                                     @EIDSSReportID;

                UPDATE @AnimalsTemp
                SET ObservationID = @ObservationID
                WHERE AnimalID = @RowID;


                WHILE EXISTS (SELECT * FROM @ActivityParametersTemp)
                BEGIN
                    SELECT TOP 1
                        @ActivityID = ActivityID,
                        @ParameterID = ParameterID,
                        @ParameterValue = ParameterValue,
                        @ParameterRowID = ParameterRowID
                    FROM @ActivityParametersTemp;

                    INSERT INTO @SuppressSelect
                    EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbActivityParameters',
                                                      @ActivityIDNew OUTPUT;

                    INSERT INTO dbo.tlbActivityParameters
                    (
                        idfActivityParameters,
                        idfsParameter,
                        idfObservation,
                        varValue,
                        idfRow,
                        intRowStatus,
                        SourceSystemNameID,
                        SourceSystemKeyValue,
                        AuditCreateUser,
                        AuditCreateDTM
                    )
                    VALUES
                    (@ActivityIDNew,
                     @ParameterID,
                     @ObservationID,
                     @ParameterValue,
                     @ParameterRowID,
                     0  ,
                     10519001,
                     '[{"idfActivityParameters":' + CAST(@ActivityIDNew AS NVARCHAR(300)) + '}]',
                     @AuditUserName,
                     GETDATE()
                    );

                    -- Data audit
                    INSERT INTO dbo.tauDataAuditDetailCreate
                    (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfObject,
                        idfObjectDetail,
                        SourceSystemNameID,
                        SourceSystemKeyValue,
                        AuditCreateUser
                    )
                    VALUES
                    (@DataAuditEventID,
                     @ObjectActivityParametersTableID,
                     @ActivityIDNew,
                     @ObservationID,
                     10519001,
                     '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                     + CAST(@ObjectActivityParametersTableID AS NVARCHAR(300)) + '}]',
                     @AuditUserName
                    );
                    -- End data audit

                    DELETE FROM @ActivityParametersTemp
                    WHERE ActivityID = @ActivityID;
                END;
            END;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_ANIMALS_SET @AuditUserName,
                                             @DataAuditEventID,
                                             @EIDSSReportID,
                                             @AnimalID OUTPUT,
                                             @SexTypeID,
                                             @ConditionTypeID,
                                             @AgeTypeID,
                                             @SpeciesID,
                                             @ObservationID,
                                             @AnimalDescription,
                                             @EIDSSAnimalID,
                                             @AnimalName,
                                             @Color,
                                             @ClinicalSignsIndicator,
                                             @RowStatus,
                                             @RowAction;

            UPDATE @SamplesTemp
            SET AnimalID = @AnimalID
            WHERE AnimalID = @RowID;

            DELETE FROM @AnimalsTemp
            WHERE AnimalID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @VaccinationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = VaccinationID,
                @VaccinationID = VaccinationID,
                @SpeciesID = SpeciesID,
                @VaccinationTypeID = VaccinationTypeID,
                @RouteTypeID = RouteTypeID,
                @DiseaseID = DiseaseID,
                @VaccinationDate = VaccinationDate,
                @Manufacturer = Manufacturer,
                @LotNumber = LotNumber,
                @NumberVaccinated = NumberVaccinated,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @VaccinationsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_VACCINATIONS_SET @AuditUserName,
                                                  @DataAuditEventID,
                                                  @EIDSSReportID,
                                                  @VaccinationID OUTPUT,
                                                  @DiseaseReportID,
                                                  @SpeciesID,
                                                  @VaccinationTypeID,
                                                  @RouteTypeID,
                                                  @DiseaseID,
                                                  @VaccinationDate,
                                                  @Manufacturer,
                                                  @LotNumber,
                                                  @NumberVaccinated,
                                                  @Comments,
                                                  @RowStatus,
                                                  @RowAction;

            DELETE FROM @VaccinationsTemp
            WHERE VaccinationID = @RowID;
        END;

        IF @Contacts IS NOT NULL
            EXEC dbo.USSP_OMM_CONTACT_SET NULL,
                                          @Contacts,
                                          @User = @AuditUserName,
                                          @OutBreakCaseReportUID = @OutbreakCaseReportUID,
                                          @FunctionCall = 1;

        WHILE EXISTS (SELECT * FROM @SamplesTemp)
        BEGIN
            SELECT TOP 1
                @RowID = SampleID,
                @SampleID = SampleID,
                @SampleTypeID = SampleTypeID,
                @RootSampleID = RootSampleID,
                @ParentSampleID = ParentSampleID,
                @SpeciesID = SpeciesID,
                @AnimalID = AnimalID,
                @SampleDiseaseReportID = VeterinaryDiseaseReportID,
                @MonitoringSessionID = MonitoringSessionID,
                @CollectedByPersonID = CollectedByPersonID,
                @CollectedByOrganizationID = CollectedByOrganizationID,
                @CollectionDate = CollectionDate,
                @SentDate = SentDate,
                @EIDSSLocalOrFieldSampleID = EIDSSLocalOrFieldSampleID,
                @SampleStatusTypeID = SampleStatusTypeID,
                @EnteredDate = EnteredDate,
                @Comments = Comments,
                @SiteID = SiteID,
                @CurrentSiteID = CurrentSiteID,
                @RowStatus = RowStatus,
                @SentToOrganizationID = SentToOrganizationID,
                @BirdStatusTypeID = BirdStatusTypeID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @LabModuleSourceIndicator = LabModuleSourceIndicator,
                @RowAction = RowAction
            FROM @SamplesTemp;

            IF (
                   @EIDSSLocalOrFieldSampleID IS NULL
                   OR @EIDSSLocalOrFieldSampleID = ''
               )
               AND @LinkLocalOrFieldSampleIDToReportID = 1
            BEGIN
                SET @Iteration = @Iteration + 1;
                IF @Iteration < 10
                BEGIN
                    SET @EIDSSLocalOrFieldSampleID = @EIDSSReportID + '-0' + CONVERT(NVARCHAR(4), @Iteration);
                END
                ELSE
                BEGIN
                    SET @EIDSSLocalOrFieldSampleID = @EIDSSReportID + '-' + CONVERT(NVARCHAR(4), @Iteration);
                END;
            END;

            -- Check if sample is being de-linked, so use sample disease report ID passed in from 
            -- sample record instead of parent disease report ID.
            IF @LabModuleSourceIndicator = 0
            BEGIN
                SET @SampleDiseaseReportID = @DiseaseReportID;
            END

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_SAMPLES_SET @AuditUserName,
                                             @DataAuditEventID,
                                             @EIDSSReportID,
                                             @SampleID OUTPUT,
                                             @SampleTypeID,
                                             @RootSampleID,
                                             @ParentSampleID,
                                             @FarmOwnerID,
                                             @SpeciesID,
                                             @AnimalID,
                                             NULL,
                                             @MonitoringSessionID,
                                             NULL,
                                             NULL,
                                             @SampleDiseaseReportID,
                                             @CollectionDate,
                                             @CollectedByPersonID,
                                             @CollectedByOrganizationID,
                                             @SentDate,
                                             @SentToOrganizationID,
                                             @EIDSSLocalOrFieldSampleID,
                                             @SiteID,
                                             @EnteredDate,
                                             @ReadOnlyIndicator,
                                             @SampleStatusTypeID,
                                             @Comments,
                                             @CurrentSiteID,
                                             @DiseaseID,
                                             @BirdStatusTypeID,
                                             @RowStatus,
                                             @RowAction;

            UPDATE @PensideTestsTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            UPDATE @LaboratoryTestsTemp
            SET SampleID = @SampleID
            WHERE SampleID = @RowID;

            DELETE FROM @SamplesTemp
            WHERE SampleID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @PensideTestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = PensideTestID,
                @PensideTestID = PensideTestID,
                @SampleID = SampleID,
                @PensideTestResultTypeID = PensideTestResultTypeID,
                @PensideTestNameTypeID = PensideTestNameTypeID,
                @RowStatus = RowStatus,
                @TestedByPersonID = TestedByPersonID,
                @TestedByOrganizationID = TestedByOrganizationID,
                @DiseaseID = DiseaseID,
                @TestDate = TestDate,
                @PensideTestCategoryTypeID = PensideTestCategoryTypeID,
                @RowAction = RowAction
            FROM @PensideTestsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_PENSIDE_TESTS_SET @AuditUserName,
                                                   @DataAuditEventID,
                                                   @EIDSSReportID,
                                                   @PensideTestID OUTPUT,
                                                   @SampleID,
                                                   @PensideTestResultTypeID,
                                                   @PensideTestNameTypeID,
                                                   @TestedByPersonID,
                                                   @TestedByOrganizationID,
                                                   @DiseaseID,
                                                   @TestDate,
                                                   @PensideTestCategoryTypeID,
                                                   @RowStatus,
                                                   @RowAction;

            DELETE FROM @PensideTestsTemp
            WHERE PensideTestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @LaboratoryTestsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestID,
                @TestID = TestID,
                @TestNameTypeID = TestNameTypeID,
                @TestCategoryTypeID = TestCategoryTypeID,
                @TestResultTypeID = TestResultTypeID,
                @TestStatusTypeID = TestStatusTypeID,
                @DiseaseID = DiseaseID,
                @SampleID = SampleID,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @StartedDate = StartedDate,
                @ResultDate = ResultDate,
                @TestedByOrganizationID = TestedByOrganizationID,
                @TestedByPersonID = TestedByPersonID,
                @ResultEnteredByOrganizationID = ResultEnteredByOrganizationID,
                @ResultEnteredByPersonID = ResultEnteredByPersonID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @NonLaboratoryTestIndicator = NonLaboratoryTestIndicator,
                @ExternalTestIndicator = ExternalTestIndicator,
                @PerformedByOrganizationID = PerformedByOrganizationID,
                @ReceivedDate = ReceivedDate,
                @ContactPersonName = ContactPersonName,
                @RowAction = RowAction
            FROM @LaboratoryTestsTemp;

            --If record is being soft-deleted, then check if the test record was originally created 
            --in the laboaratory module.  If it was, then disassociate the test record from the 
            --veterinary disease report, so that the test record remains in the laboratory module 
            --for further action.
            IF @RowStatus = 1
               AND @NonLaboratoryTestIndicator = 0
            BEGIN
                SET @RowStatus = 0;
                SET @TestDiseaseReportID = NULL;
            END
            ELSE
            BEGIN
                SET @TestDiseaseReportID = @DiseaseReportID;
            END;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TESTS_SET @TestID OUTPUT,
                                           @TestNameTypeID,
                                           @TestCategoryTypeID,
                                           @TestResultTypeID,
                                           @TestStatusTypeID,
                                           @DiseaseID,
                                           @SampleID,
                                           NULL,
                                           NULL,
                                           NULL,
                                           @Comments,
                                           @RowStatus,
                                           @StartedDate,
                                           @ResultDate,
                                           @TestedByOrganizationID,
                                           @TestedByPersonID,
                                           @ResultEnteredByOrganizationID,
                                           @ResultEnteredByPersonID,
                                           @ValidatedByOrganizationID,
                                           @ValidatedByPersonID,
                                           @ReadOnlyIndicator,
                                           @NonLaboratoryTestIndicator,
                                           @ExternalTestIndicator,
                                           @PerformedByOrganizationID,
                                           @ReceivedDate,
                                           @ContactPersonName,
                                           NULL,
                                           NULL,
                                           NULL,
                                           @TestDiseaseReportID,
                                           @AuditUserName,
                                           @DataAuditEventID,
                                           @EIDSSReportID,
                                           @RowAction;

            UPDATE @LaboratoryTestInterpretationsTemp
            SET TestID = @TestID
            WHERE TestID = @RowID;

            DELETE FROM @LaboratoryTestsTemp
            WHERE TestID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @LaboratoryTestInterpretationsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = TestInterpretationID,
                @TestInterpretationID = TestInterpretationID,
                @DiseaseID = DiseaseID,
                @InterpretedStatusTypeID = InterpretedStatusTypeID,
                @ValidatedByOrganizationID = ValidatedByOrganizationID,
                @ValidatedByPersonID = ValidatedByPersonID,
                @InterpretedByOrganizationID = InterpretedByOrganizationID,
                @InterpretedByPersonID = InterpretedByPersonID,
                @TestID = TestID,
                @ValidatedStatusIndicator = ValidatedStatusIndicator,
                @ReportSessionCreatedIndicator = ReportSessionCreatedIndicator,
                @ValidatedComment = ValidatedComment,
                @InterpretedComment = InterpretedComment,
                @ValidatedDate = ValidatedDate,
                @InterpretedDate = InterpretedDate,
                @RowStatus = RowStatus,
                @ReadOnlyIndicator = ReadOnlyIndicator,
                @RowAction = RowAction
            FROM @LaboratoryTestInterpretationsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_TEST_INTERPRETATIONS_SET @AuditUserName,
                                                          @DataAuditEventID,
                                                          @EIDSSReportID, 
                                                          @TestInterpretationID OUTPUT,
                                                          @DiseaseID,
                                                          @InterpretedStatusTypeID,
                                                          @ValidatedByOrganizationID,
                                                          @ValidatedByPersonID,
                                                          @InterpretedByOrganizationID,
                                                          @InterpretedByPersonID,
                                                          @TestID,
                                                          @ValidatedStatusIndicator,
                                                          @ReportSessionCreatedIndicator,
                                                          @ValidatedComment,
                                                          @InterpretedComment,
                                                          @ValidatedDate,
                                                          @InterpretedDate,
                                                          @RowStatus,
                                                          @ReadOnlyIndicator,
                                                          @RowAction;

            IF @ReportSessionCreatedIndicator = 1 AND @RowAction = 1
            BEGIN
                SET @ConnectedDiseaseReportLaboratoryTestID = @TestID;
            END

            DELETE FROM @LaboratoryTestInterpretationsTemp
            WHERE TestInterpretationID = @RowID;
        END;

        WHILE EXISTS (SELECT * FROM @CaseLogsTemp)
        BEGIN
            SELECT TOP 1
                @RowID = CaseLogID,
                @CaseLogID = CaseLogID,
                @LogStatusTypeID = LogStatusTypeID,
                @LoggedByPersonID = LoggedByPersonID,
                @LogDate = LogDate,
                @ActionRequired = ActionRequired,
                @Comments = Comments,
                @RowStatus = RowStatus,
                @RowAction = RowAction
            FROM @CaseLogsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_VET_DISEASE_REPORT_LOG_SET @AuditUserName,
                                                        @DataAuditEventID,
                                                        @EIDSSReportID,
                                                        @CaseLogID,
                                                        @LogStatusTypeID,
                                                        @DiseaseReportID,
                                                        @LoggedByPersonID,
                                                        @LogDate,
                                                        @ActionRequired,
                                                        @Comments,
                                                        @RowStatus,
                                                        @RowAction;

            DELETE FROM @CaseLogsTemp
            WHERE CaseLogID = @RowID;
        END;

        IF @CaseMonitorings IS NOT NULL
        BEGIN
            EXEC dbo.USSP_OMM_CASE_MONITORING_SET @CaseMonitorings = @CaseMonitorings,
                                                  @VeterinaryDiseaseReportID = @DiseaseReportID,
                                                  @User = @AuditUserName;
        END

        WHILE EXISTS (SELECT * FROM @EventsTemp)
        BEGIN
            SELECT TOP 1
                @EventId = EventId,
                @EventTypeId = EventTypeId,
                @EventUserId = UserId,
                @EventObjectId = ObjectId,
                @EventSiteId = SiteId,
                @EventDiseaseId = DiseaseId,
                @EventLocationId = LocationId,
                @EventInformationString = InformationString,
                @EventNote = Note,
                @EventLoginSiteId = LoginSiteId
            FROM @EventsTemp;

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_ADMIN_EVENT_SET @EventId,
                                             @EventTypeId,
                                             @EventUserId,
                                             @EventObjectId,
                                             @EventDiseaseId,
                                             @EventSiteId,
                                             @EventInformationString,
                                             @EventLoginSiteId,
                                             @EventLocationId,
                                             @AuditUserName,
                                             @DataAuditEventID,
                                             @EIDSSReportID;

            DELETE FROM @EventsTemp
            WHERE EventId = @EventId;
        END;

        IF @@TRANCOUNT > 0
            COMMIT TRANSACTION;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @DiseaseReportID DiseaseReportID,
               @EIDSSReportID EIDSSReportID,
               @OutbreakCaseReportUID CaseID,
               @EIDSSCaseID EIDSSCaseID, 
               @ConnectedDiseaseReportLaboratoryTestID ConnectedDiseaseReportLaboratoryTestID;
    END TRY
    BEGIN CATCH
        IF @@Trancount > 0
            ROLLBACK TRANSACTION;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USSP_GBL_BASE_REFERENCE_SET]...';


GO
-- ================================================================================================
-- Name: USSP_GBL_BASE_REFERENCE_SET
--
-- Description: Insert/update base reference data.  Non-API stored procedure.  Only call via 
-- other stored procedures.
--           
-- Revision History:
-- Name				Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long		12/13/2022 Initial release for data auditing for SAUC30 and 31.
-- Stephen Long     02/13/2023 Changed default name from varchar to nvarchar.
-- Ann Xiong		02/27/2023 Replaced NULL with @AccessoryCode when INSERT INTO dbo.trtBaseReference
--
-- Testing Code:
/*
DECLARE @idfsSpeciesType BIGINT

EXEC dbo.USSP_GBL_Base_Reference_SET @idfsSpeciesType OUTPUT, 19000086, 'en-US', 'Mark', 'Mark', 0, 0, 'System'
*/
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_GBL_BASE_REFERENCE_SET]
(
    @BaseReferenceID BIGINT = NULL OUTPUT,
    @BaseReferenceTypeID BIGINT,
    @LanguageID NVARCHAR(50),
    @DefaultName NVARCHAR(200),          -- Default reference name, used if there is no reference translation
    @NationalName NVARCHAR(200) = NULL, -- Reference name in the language defined by @LanguageID
    @AccessoryCode INT = NULL,          -- Bit mask for reference using
    @Order INT = NULL,                  -- Reference record order for sorting
    @SystemValueIndicator BIT = 0,
    @AuditUserName NVARCHAR(200),
    @DataAuditEventID BIGINT = NULL,
    @EIDSSObjectID NVARCHAR(200) = NULL,
    @UniqueDefaultValueIndicator BIT = 'TRUE' OUTPUT
)
AS
-- Data audit
DECLARE @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @CustomizationPackageID BIGINT,
        @ObjectTypeID BIGINT = 10017042,     -- Base Reference
        @ObjectID BIGINT = @BaseReferenceID,
        @ObjectTableID BIGINT = 75820000000; -- trtBaseReference

DECLARE @BaseReferenceAfterEdit TABLE
(
    BaseReferenceID BIGINT,
    BaseReferenceTypeID BIGINT,
    BaseReferenceCode VARCHAR(36),
    DefaultValue NVARCHAR(2000),
    AccessoryCode INT,
    OrderValue INT,
    SystemValueIndicator BIT
);
DECLARE @BaseReferenceBeforeEdit TABLE
(
    BaseReferenceID BIGINT,
    BaseReferenceTypeID BIGINT,
    BaseReferenceCode VARCHAR(36),
    DefaultValue NVARCHAR(2000),
    AccessoryCode INT,
    OrderValue INT,
    SystemValueIndicator BIT
);
-- End data audit
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        IF EXISTS
        (
            SELECT idfsBaseReference
            FROM dbo.trtBaseReference
            WHERE idfsBaseReference = @BaseReferenceID
                  AND intRowStatus = 0
        )
        BEGIN
            -- Data audit
            INSERT INTO @BaseReferenceBeforeEdit
            (
                BaseReferenceID,
                BaseReferenceTypeID,
                BaseReferenceCode,
                DefaultValue,
                AccessoryCode,
                OrderValue,
                SystemValueIndicator
            )
            SELECT idfsBaseReference,
                   idfsReferenceType,
                   strBaseReferenceCode,
                   strDefault,
                   intHACode,
                   intOrder,
                   blnSystem
            FROM dbo.trtBaseReference
            WHERE idfsBaseReference = @BaseReferenceID;
            -- End data audit

            UPDATE dbo.trtBaseReference
            SET idfsReferenceType = @BaseReferenceTypeID,
                strDefault = ISNULL(@DefaultName, strDefault),
                intHACode = ISNULL(@AccessoryCode, intHACode),
                intOrder = ISNULL(@Order, intOrder),
                blnSystem = ISNULL(@SystemValueIndicator, blnSystem),
                rowguid = ISNULL(rowguid, NEWID()),
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfsBaseReference = @BaseReferenceID;

            -- Data audit
            INSERT INTO @BaseReferenceAfterEdit
            (
                BaseReferenceID,
                BaseReferenceTypeID,
                BaseReferenceCode,
                DefaultValue,
                AccessoryCode,
                OrderValue,
                SystemValueIndicator
            )
            SELECT idfsBaseReference,
                   idfsReferenceType,
                   strBaseReferenceCode,
                   strDefault,
                   intHACode,
                   intOrder,
                   blnSystem
            FROM dbo.trtBaseReference
            WHERE idfsBaseReference = @BaseReferenceID;

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   81080000000,
                   a.BaseReferenceID,
                   NULL,
                   b.BaseReferenceTypeID,
                   a.BaseReferenceTypeID,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @BaseReferenceAfterEdit AS a
                FULL JOIN @BaseReferenceBeforeEdit AS b
                    ON a.BaseReferenceID = b.BaseReferenceID
            WHERE (a.BaseReferenceTypeID <> b.BaseReferenceTypeID)
                  OR (
                         a.BaseReferenceTypeID IS NOT NULL
                         AND b.BaseReferenceTypeID IS NULL
                     )
                  OR (
                         a.BaseReferenceTypeID IS NULL
                         AND b.BaseReferenceTypeID IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   81110000000,
                   a.BaseReferenceID,
                   NULL,
                   b.BaseReferenceCode,
                   a.BaseReferenceCode,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @BaseReferenceAfterEdit AS a
                FULL JOIN @BaseReferenceBeforeEdit AS b
                    ON a.BaseReferenceID = b.BaseReferenceID
            WHERE (a.BaseReferenceCode <> b.BaseReferenceCode)
                  OR (
                         a.BaseReferenceCode IS NOT NULL
                         AND b.BaseReferenceCode IS NULL
                     )
                  OR (
                         a.BaseReferenceCode IS NULL
                         AND b.BaseReferenceCode IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   81120000000,
                   a.BaseReferenceID,
                   NULL,
                   b.DefaultValue,
                   a.DefaultValue,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @BaseReferenceAfterEdit AS a
                FULL JOIN @BaseReferenceBeforeEdit AS b
                    ON a.BaseReferenceID = b.BaseReferenceID
            WHERE (a.DefaultValue <> b.DefaultValue)
                  OR (
                         a.DefaultValue IS NOT NULL
                         AND b.DefaultValue IS NULL
                     )
                  OR (
                         a.DefaultValue IS NULL
                         AND b.DefaultValue IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   81090000000,
                   a.BaseReferenceID,
                   NULL,
                   b.AccessoryCode,
                   a.AccessoryCode,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @BaseReferenceAfterEdit AS a
                FULL JOIN @BaseReferenceBeforeEdit AS b
                    ON a.BaseReferenceID = b.BaseReferenceID
            WHERE (a.AccessoryCode <> b.AccessoryCode)
                  OR (
                         a.AccessoryCode IS NOT NULL
                         AND b.AccessoryCode IS NULL
                     )
                  OR (
                         a.AccessoryCode IS NULL
                         AND b.AccessoryCode IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   81100000000,
                   a.BaseReferenceID,
                   NULL,
                   b.OrderValue,
                   a.OrderValue,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @BaseReferenceAfterEdit AS a
                FULL JOIN @BaseReferenceBeforeEdit AS b
                    ON a.BaseReferenceID = b.BaseReferenceID
            WHERE (a.OrderValue <> b.OrderValue)
                  OR (
                         a.OrderValue IS NOT NULL
                         AND b.OrderValue IS NULL
                     )
                  OR (
                         a.OrderValue IS NULL
                         AND b.OrderValue IS NOT NULL
                     );

            INSERT INTO dbo.tauDataAuditDetailUpdate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfColumn,
                idfObject,
                idfObjectDetail,
                strOldValue,
                strNewValue,
                AuditCreateUser,
                strObject
            )
            SELECT @DataAuditEventID,
                   @ObjectTableID,
                   747460000000,
                   a.BaseReferenceID,
                   NULL,
                   b.SystemValueIndicator,
                   a.SystemValueIndicator,
                   @AuditUserName,
                   @EIDSSObjectID
            FROM @BaseReferenceAfterEdit AS a
                FULL JOIN @BaseReferenceBeforeEdit AS b
                    ON a.BaseReferenceID = b.BaseReferenceID
            WHERE (a.SystemValueIndicator <> b.SystemValueIndicator)
                  OR (
                         a.SystemValueIndicator IS NOT NULL
                         AND b.SystemValueIndicator IS NULL
                     )
                  OR (
                         a.SystemValueIndicator IS NULL
                         AND b.SystemValueIndicator IS NOT NULL
                     );
        -- End data audit
        END
        ELSE
        BEGIN
            IF @BaseReferenceID IS NULL
            BEGIN
                EXEC dbo.USP_GBL_NEXTKEYID_GET 'trtBaseReference',
                                               @BaseReferenceID OUTPUT;
            END

            IF @Order IS NULL
            BEGIN
                SET @Order = 0;
            END

            IF EXISTS
            (
                SELECT *
                FROM dbo.trtBaseReference
                WHERE strDefault = @DefaultName
                      AND idfsReferenceType = @BaseReferenceTypeID
            )
                SET @UniqueDefaultValueIndicator = 'FALSE';
            ELSE
                SET @UniqueDefaultValueIndicator = 'TRUE';

            INSERT INTO dbo.trtBaseReference
            (
                idfsBaseReference,
                idfsReferenceType,
                strBaseReferenceCode,
                strDefault,
                intHACode,
                intOrder,
                blnSystem,
                intRowStatus,
                rowguid,
                strMaintenanceFlag,
                strReservedAttribute,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateDTM,
                AuditCreateUser
            )
            VALUES
            (@BaseReferenceID,
             @BaseReferenceTypeID,
             NULL,
             @DefaultName,
             @AccessoryCode,
             @Order,
             0  ,
             0  ,
             NEWID(),
             'ADD',
             'EIDSS7 new reference data',
             10519001,
             N'[{"idfsBaseReference":' + CAST(@BaseReferenceID AS NVARCHAR(300)) + '}]',
             GETDATE(),
             @AuditUserName
            );

            SELECT @CustomizationPackageID = dbo.FN_GBL_CustomizationPackage_GET();

            IF @CustomizationPackageID IS NOT NULL
               AND @CustomizationPackageID <> 51577300000000 -- The USA
            BEGIN
                EXEC dbo.USP_GBL_BaseReferenceToCP_SET @BaseReferenceID,
                                                       @CustomizationPackageID;
            END

            -- Data audit
            INSERT INTO dbo.tauDataAuditDetailCreate
            (
                idfDataAuditEvent,
                idfObjectTable,
                idfObject,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                strObject
            )
            VALUES
            (@DataAuditEventID,
             @ObjectTableID,
             @BaseReferenceID,
             10519001,
             '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
             + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
             @AuditUserName,
             @EIDSSObjectID
            );
        -- End data audit
        END

        EXEC dbo.USSP_GBL_StringTranslation_SET @BaseReferenceID,
                                                @LanguageID,
                                                @NationalName;

        RETURN;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USSP_VAS_SAMPLE_TO_DISEASE_SET]...';


GO
-- ================================================================================================
-- Name: USSP_VAS_SAMPLE_TO_DISEASE_SET
--
-- Description:	Inserts or updates disease records for a particular sample for the veterinary active surveillance use cases.
--
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Mike Kornegay    08/18/2022 Initial release.
-- Mike Kornegay	08/22/2022 Added intRowStatus to update statement.
-- Leo Tracchia		12/14/2022 added logic for data auditing 
-- Mike Kornegay	03/07/2023 Corrected insert logic so that new records updated in app are inserted
-- 
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_VAS_SAMPLE_TO_DISEASE_SET]
(
    @AuditUserName NVARCHAR(100) = NULL,
	@DataAuditEventID BIGINT = NULL,
    @MonitoringSessionToMaterialID BIGINT,
	@MonitoringSessionID BIGINT,
	@SampleID BIGINT,
	@DiseaseID BIGINT,
    @SampleTypeID BIGINT,
    @RowStatus INT,
    @RowAction INT
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
     
		--Data Audit--

		DECLARE @idfUserId BIGINT = NULL;
		DECLARE @idfSiteId BIGINT = NULL;
		DECLARE @idfsDataAuditEventType bigint = NULL;
		DECLARE @idfsObjectType bigint = 10017062; --select * from trtBaseReference where strDefault = 'Veterinary Active Surveillance Session'
		DECLARE @idfObject bigint = @MonitoringSessionToMaterialID;
		DECLARE @idfObjectTable_tlbMonitoringSessionToMaterial bigint = 53577790000003; --select * from tauTable where strName = 'tlbMonitoringSessionToMaterial'				

		DECLARE @tlbMonitoringSessionToMaterial_BeforeEdit TABLE
		(
			idfMonitoringSessionToMaterial bigint,
			idfMaterial bigint,
			idfsSampleType bigint,
			idfMonitoringSession bigint,
			idfsDisease bigint,
			intRowStatus int
		)		

		DECLARE @tlbMonitoringSessionToMaterial_AfterEdit TABLE
		(
			idfMonitoringSessionToMaterial bigint,
			idfMaterial bigint,
			idfsSampleType bigint,
			idfMonitoringSession bigint,
			idfsDisease bigint,
			intRowStatus int
		)		

		-- Data Audit

        IF @RowAction = 1 OR @MonitoringSessionToMaterialID < 0 --Insert
        BEGIN
            EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = N'tlbMonitoringSessionToMaterial',
                                              @idfsKey = @MonitoringSessionToMaterialID OUTPUT;

            INSERT INTO dbo.tlbMonitoringSessionToMaterial
            (
				idfMonitoringSessionToMaterial,
                idfMaterial,
                idfsSampleType,
                idfMonitoringSession,
                idfsDisease,
                SourceSystemNameID,
                SourceSystemKeyValue,
                AuditCreateUser,
                AuditCreateDTM,
                AuditUpdateUser,
                AuditUpdateDTM,
				intRowStatus
            )
            VALUES
            (   
				@MonitoringSessionToMaterialID,
				@SampleID,
				@SampleTypeID,
				@MonitoringSessionID,
				@DiseaseID,
				10519001,
				'[{"idfMonitoringSessionToMaterial":' + CAST(@MonitoringSessionToMaterialID AS NVARCHAR(300)) + '}]',
				@AuditUserName,
				GETDATE(),
				@AuditUserName,
				GETDATE(),
				@RowStatus
			);

			-- Data audit
				INSERT INTO dbo.tauDataAuditDetailCreate
				(
					idfDataAuditEvent,
					idfObjectTable,
					idfObject,
					SourceSystemNameID,
					SourceSystemKeyValue,
					AuditCreateUser
				)
				VALUES
				(
					@DataAuditEventID, 
					@idfObjectTable_tlbMonitoringSessionToMaterial, 
					@MonitoringSessionToMaterialID, 
					10519001,
					'[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300))
					+ ',"idfObjectTable":' + CAST(@idfObjectTable_tlbMonitoringSessionToMaterial AS NVARCHAR(300)) + '}]',
					@AuditUserName
				);
			-- End data audit

        END;
        ELSE
        BEGIN

			INSERT INTO @tlbMonitoringSessionToMaterial_BeforeEdit (
				idfMonitoringSessionToMaterial,
				idfMaterial,
				idfsSampleType,
				idfMonitoringSession,
				idfsDisease,
				intRowStatus
			)
			SELECT 
				idfMonitoringSessionToMaterial,
				idfMaterial,
				idfsSampleType,
				idfMonitoringSession,
				idfsDisease,
				intRowStatus
			FROM tlbMonitoringSessionToMaterial WHERE idfMonitoringSessionToMaterial = @MonitoringSessionToMaterialID;

            UPDATE dbo.tlbMonitoringSessionToMaterial
            SET idfMaterial = @SampleID,
                idfsSampleType = @SampleTypeID,
                idfMonitoringSession = @MonitoringSessionID,
                idfsDisease = @DiseaseID,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE(),
				intRowStatus = @RowStatus
			WHERE idfMonitoringSessionToMaterial = @MonitoringSessionToMaterialID;

			INSERT INTO @tlbMonitoringSessionToMaterial_AfterEdit (
				idfMonitoringSessionToMaterial,
				idfMaterial,
				idfsSampleType,
				idfMonitoringSession,
				idfsDisease,
				intRowStatus
			)
			SELECT 
				idfMonitoringSessionToMaterial,
				idfMaterial,
				idfsSampleType,
				idfMonitoringSession,
				idfsDisease,
				intRowStatus
			FROM tlbMonitoringSessionToMaterial WHERE idfMonitoringSessionToMaterial = @MonitoringSessionToMaterialID;

			--idfMaterial
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@DataAuditEventID,
				@idfObjectTable_tlbMonitoringSessionToMaterial, 
				51586990000022,
				a.idfMonitoringSessionToMaterial,
				null,
				a.idfMaterial,
				b.idfMaterial 
			from @tlbMonitoringSessionToMaterial_BeforeEdit a  inner join @tlbMonitoringSessionToMaterial_AfterEdit b on a.idfMonitoringSessionToMaterial = b.idfMonitoringSessionToMaterial
			where (a.idfMaterial <> b.idfMaterial) 
				or(a.idfMaterial is not null and b.idfMaterial is null)
				or(a.idfMaterial is null and b.idfMaterial is not null)

			--idfsSampleType
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@DataAuditEventID,
				@idfObjectTable_tlbMonitoringSessionToMaterial, 
				51586990000023,
				a.idfMonitoringSessionToMaterial,
				null,
				a.idfsSampleType,
				b.idfsSampleType 
			from @tlbMonitoringSessionToMaterial_BeforeEdit a  inner join @tlbMonitoringSessionToMaterial_AfterEdit b on a.idfMonitoringSessionToMaterial = b.idfMonitoringSessionToMaterial
			where (a.idfsSampleType <> b.idfsSampleType) 
				or(a.idfsSampleType is not null and b.idfsSampleType is null)
				or(a.idfsSampleType is null and b.idfsSampleType is not null)

			--idfMonitoringSession
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@DataAuditEventID,
				@idfObjectTable_tlbMonitoringSessionToMaterial, 
				51586990000024,
				a.idfMonitoringSessionToMaterial,
				null,
				a.idfMonitoringSession,
				b.idfMonitoringSession 
			from @tlbMonitoringSessionToMaterial_BeforeEdit a  inner join @tlbMonitoringSessionToMaterial_AfterEdit b on a.idfMonitoringSessionToMaterial = b.idfMonitoringSessionToMaterial
			where (a.idfMonitoringSession <> b.idfMonitoringSession) 
				or(a.idfMonitoringSession is not null and b.idfMonitoringSession is null)
				or(a.idfMonitoringSession is null and b.idfMonitoringSession is not null)

			--idfsDisease
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@DataAuditEventID,
				@idfObjectTable_tlbMonitoringSessionToMaterial, 
				51586990000025,
				a.idfMonitoringSessionToMaterial,
				null,
				a.idfsDisease,
				b.idfsDisease 
			from @tlbMonitoringSessionToMaterial_BeforeEdit a  inner join @tlbMonitoringSessionToMaterial_AfterEdit b on a.idfMonitoringSessionToMaterial = b.idfMonitoringSessionToMaterial
			where (a.idfsDisease <> b.idfsDisease) 
				or(a.idfsDisease is not null and b.idfsDisease is null)
				or(a.idfsDisease is null and b.idfsDisease is not null)

			--intRowStatus
			insert into dbo.tauDataAuditDetailUpdate(
				idfDataAuditEvent, 
				idfObjectTable, 
				idfColumn, 
				idfObject, 
				idfObjectDetail, 
				strOldValue, 
				strNewValue)
			select 
				@DataAuditEventID,
				@idfObjectTable_tlbMonitoringSessionToMaterial, 
				51586990000026,
				a.idfMonitoringSessionToMaterial,
				null,
				a.intRowStatus,
				b.intRowStatus 
			from @tlbMonitoringSessionToMaterial_BeforeEdit a  inner join @tlbMonitoringSessionToMaterial_AfterEdit b on a.idfMonitoringSessionToMaterial = b.idfMonitoringSessionToMaterial
			where (a.intRowStatus <> b.intRowStatus) 
				or(a.intRowStatus is not null and b.intRowStatus is null)
				or(a.intRowStatus is null and b.intRowStatus is not null)


        END;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH;
END;
GO
PRINT N'Creating Procedure [dbo].[USP_ADMIN_UserListGetForUtility]...';


GO
-- =============================================
-- Author:		Steven Verner
-- Create date: 02/15/2023
-- Description:	Gets a list of tlbuserTable users.  An ASPNetUser record will be created for all those accounts
-- where none exists.
-- =============================================
CREATE PROCEDURE [dbo].[USP_ADMIN_UserListGetForUtility] 
	-- Add the parameters for the stored procedure here
	 @idfsSite BIGINT = NULL 
	,@idfInstitution BIGINT = NULL
	,@pageNo INT = 1
	,@pageSize INT = 10
	,@showUnconvertedOnly BIT = FALSE -- by default show all accounts.
	,@advancedSearch NVARCHAR(100) = NULL
	,@sortColumn NVARCHAR(30) = 'b.strDefault'
	,@sortOrder NVARCHAR(4) = 'asc'  
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	DECLARE @firstRec INT
	DECLARE @lastRec INT
	
	SET @firstRec = (@pageNo-1)* @pagesize
	SET @lastRec = (@pageNo*@pageSize+1);
	DECLARE @T TABLE(
		 idfPerson BIGINT
		,strAccountName NVARCHAR(255)
		,strFirstName NVARCHAR(255)
		,strFamilyName NVARCHAR(255)
		,strSecondName NVARCHAR(255)
		,Institution NVARCHAR(255)
		,Site NVARCHAR(255)
		,idfUserID BIGINT
		,idfInstitution BIGINT
		,idfsSite BIGINT
		,DuplicateUserName BIT
		,Converted BIT 
	)
	IF( @advancedSearch IS NOT NULL)
	BEGIN
		INSERT INTO @T
		SELECT * FROM
		(
			SELECT
			 p.idfPerson
			,ISNULL(a.UserName,u.strAccountName) strAccountName
			,p.strFirstName
			,p.strFamilyName
			,p.strSecondName
			,b.strDefault Institution
			,s.strSiteName
			,u.idfUserID
			,p.idfInstitution
			,u.idfsSite
			,CAST( IIF((select top 1 idfPerson from tstUserTable x 
				where x.idfPerson != u.idfPerson and 
				x.strAccountName = u.strAccountName and x.intRowStatus = 0 AND
				x.idfsSite != u.idfsSite) IS NULL, 0,1) AS BIT) AS DuplicateUsername
			,CAST(IIF(a.id IS NULL,0,1) AS BIT) AS Converted
		FROM tstUserTable u
		INNER JOIN tlbPerson p ON u.idfPerson  = p.idfPerson
		INNER join tlboffice o on o.idfOffice = p.idfInstitution
		INNER JOIN trtBaseReference b on b.idfsBaseReference = o.idfsOfficeName
		INNER JOIN tstSite s ON s.idfsSite = u.idfsSite
		LEFT JOIN aspnetusers a on a.idfUserID = u.idfUserID
		WHERE 
			u.intRowStatus =0 AND 
			p.intRowStatus=0
		) AS s 
		WHERE (
			strAccountName LIKE '%' + @advancedSearch + '%' OR 
			strFirstName LIKE '%' + @advancedSearch + '%' OR 
			strFamilyName LIKE '%' + @advancedSearch + '%' OR 
			strSecondName LIKE '%' + @advancedSearch + '%' OR 
			Institution LIKE '%' + @advancedSearch + '%' OR
			s.strSiteName LIKE '%' + @advancedSearch + '%'
		)
	END ELSE BEGIN
		INSERT INTO @T
			SELECT
			 p.idfPerson
			,ISNULL(a.UserName,u.strAccountName) strAccountName
			,p.strFirstName
			,p.strFamilyName
			,p.strSecondName
			,b.strDefault Institution
			,s.strSiteName
			,u.idfUserID
			,p.idfInstitution
			,u.idfsSite
			,CAST( IIF((select top 1 idfPerson from tstUserTable x 
				where x.idfPerson != u.idfPerson and 
				x.strAccountName = u.strAccountName and x.intRowStatus = 0 AND
				x.idfsSite != u.idfsSite) IS NULL, 0,1) AS BIT) AS DuplicateUsername
			,CAST(IIF(a.id IS NULL,0,1) AS BIT) AS Converted
		FROM tstUserTable u
		INNER JOIN tlbPerson p ON u.idfPerson  = p.idfPerson
		INNER join tlboffice o on o.idfOffice = p.idfInstitution
		INNER JOIN trtBaseReference b on b.idfsBaseReference = o.idfsOfficeName
		INNER JOIN tstSite s ON s.idfsSite = u.idfsSite
		LEFT JOIN aspnetusers a on a.idfUserID = u.idfUserID
		WHERE 
			u.intRowStatus =0 AND 
			p.intRowStatus=0 AND 
			--a.id is null AND
			u.idfsSite = IIF(@idfsSite IS NULL, u.idfsSite, @idfsSite) AND
			p.idfInstitution = IIF(@idfInstitution IS NULL, p.idfInstitution, @idfInstitution)
	END;

	WITH CTEResults AS 
	(
		SELECT ROW_NUMBER() OVER 
			( ORDER BY 
				CASE WHEN @sortColumn = 'strAccountName' AND @sortOrder = 'asc' THEN strAccountname END ASC,
				CASE WHEN @sortColumn = 'strFirstname' AND @sortorder = 'asc' THEN strFirstName END ASC,
				CASE WHEN @sortColumn = 'strFamilyName' AND @sortOrder = 'asc' THEN strFamilyName END ASC,
				CASE WHEN @sortColumn = 'strSecondName' AND @sortOrder = 'asc' THEN strSecondName END ASC,
				CASE WHEN @sortColumn = 'Institution' AND @sortOrder = 'asc' THEN Institution END ASC,

				CASE WHEN @sortColumn = 'strAccountName' AND @sortOrder = 'desc' THEN strAccountname END DESC,
				CASE WHEN @sortColumn = 'strFirstname' AND @sortorder = 'desc' THEN strFirstName END DESC,
				CASE WHEN @sortColumn = 'strFamilyName' AND @sortOrder = 'desc' THEN strFamilyName END DESC,
				CASE WHEN @sortColumn = 'strSecondName' AND @sortOrder = 'desc' THEN strSecondName END DESC,
				CASE WHEN @sortColumn = 'Institution' AND @sortOrder = 'desc' THEN Institution END DESC
			) AS RowNum
			,COUNT(*) OVER () AS TotalCount
			,idfPerson
			,strAccountName
			,strFirstName
			,strFamilyName
			,strSecondName
			,Institution
			,Site
			,idfUserID
			,idfInstitution
			,idfsSite
			,DuplicateUserName
			,Converted
		FROM @T
	)

	SELECT * 
	,TotalPages = (TotalCount/@pageSize)+IIF(TotalCount%@pageSize>0,1,0)
	,CurrentPage = @pageNo 
	FROM CTEResults
	WHERE CTEResults.RowNum > @firstRec AND CTEResults.RowNum < @lastRec
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_ORG_SET]...';


GO
--=================================================================================================
-- Name: USP_ADMIN_ORG_SET
--
-- Description: Creates or updates an organization record.
--
-- Author: Mandar Kulkarni
--
-- Revision History:
-- Name             Date      Change
-- ---------------- --------- --------------------------------------------------------------------
-- Ricky Moss		07/12/2019 Restructured to set name and full name of organizations correctly.
-- Stephen Long     04/24/2021 Updated for location hierarchy and removed settlement type ID 
--                             parameter.
-- Stephen Long     06/14/2021 Removed latitude and longitude parameters as not needed in the use
--                             case.  Added departments list and table variable processing.
-- Stephen Long     06/17/2021 Added duplicate abbreviated and full name check as per special 
--                             requirement 1 on use SAUC05.
-- Stephen Long     06/30/2021 Removed english check on default and national name.
-- Stephen Long     08/05/2021 Added audit user name to address set.
-- Stephen Long     08/16/2021 Removal of associating a new organization to a default site ID.
--                             Association of an organization to a site will be done on the 
--                             site screen.
-- Stephen Long     09/01/2021 Changed department stored procedure call from USSP to USP to 
--                             reduce duplication of stored procedures doing the same logic.
-- Mark Wilson		10/06/2021 Added NULL Elevation parm to USP_GBL_ADDRESS_SET.
-- Stephen Long     10/29/2021 Changed from USP_GBL_ADDRESS_SET to USSP_GBL_ADDRESS_SET.
-- Stephen Long     12/13/2022 Added data audit logic for SAUC30 and 31.
-- Ann Xiong		02/17/2023 Found and fix the issue of INSERT INTO @OrganizationBeforeEdit twice.
-- Stephen Long     03/06/2023 Changed data audit call to USSP_GBL_DATA_AUDIT_EVENT_SET.
-- 
-- Testing Code:
--
-- EXEC USP_ADMIN_ORG_SET NULL, 'Test Org 821-12', 'Test Org 821-11', 'Test Organization 821-12', 
--	'Test Organization 821-12', '404-555-4567', NULL, 226,  'TO821-12', 'en', 0,  NULL, 780000000, 
--	37130000000, 3724300000000, NULL, NULL, '2345', NULL, 'Main St', NULL, NULL, 0, NULL, NULL, 1, 
--	10504001, NULL, NULL, NULL
-- EXEC USP_ADMIN_ORG_SET 52448330000054, 'Test Org 71-3', 'Test Org 71-3', 'Test Organization 71-3', 
--	'Test Organization 71-3', '404-555-4567', NULL, 226,  'TO71-1', 'en', 0,  NULL, 780000000, 
--	37130000000, 3724300000000, 1343040000000, NULL, '2345', NULL, 'Main St', NULL, NULL, 0, NULL, 
--	NULL, 1, 10504001, NULL, NULL, NULL
--=================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_ORG_SET]
(
    @LanguageID NVARCHAR(50),
    @OrganizationKey BIGINT = NULL,
    @OrganizationID NVARCHAR(100),
    @OrganizationTypeID BIGINT = NULL,
    @AbbreviatedNameDefaultValue NVARCHAR(200),
    @AbbreviatedNameNationalValue NVARCHAR(200),
    @FullNameDefaultValue NVARCHAR(200),
    @FullNameNationalValue NVARCHAR(200),
    @CurrentCustomizationID BIGINT = NULL,
    @AddressID BIGINT = NULL,
    @LocationID BIGINT,
    @StreetName NVARCHAR(200) = NULL,
    @Apartment NVARCHAR(200) = NULL,
    @Building NVARCHAR(200) = NULL,
    @House NVARCHAR(200) = NULL,
    @PostalCode NVARCHAR(200) = NULL,
    @ForeignAddressIndicator BIT = 0,
    @ForeignAddressString NVARCHAR(200) = NULL,
    @SharedAddressIndicator BIT = 1,
    @ContactPhone NVARCHAR(200) = NULL,
    @AccessoryCode INT,
    @Order INT,
    @OwnershipFormTypeID BIGINT = NULL,
    @LegalFormTypeID BIGINT = NULL,
    @MainFormOfActivityTypeID BIGINT = NULL,
    @AuditUserName NVARCHAR(200),
    @Departments NVARCHAR(MAX) = NULL
)
AS
DECLARE @ReturnCode INT = 0,
        @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
        @RowID BIGINT = NULL,
        @RowAction CHAR(1) = NULL,
        @RowStatus INT = 0,
        @DepartmentID BIGINT = NULL,
        @DefaultValue NVARCHAR(200) = NULL,
        @NationalValue NVARCHAR(200) = NULL,
        @DepartmentOrder INT = 0,
                                             -- Data audit
        @AuditUserID BIGINT = NULL,
        @AuditSiteID BIGINT = NULL,
        @DataAuditEventID BIGINT = NULL,
        @DataAuditEventTypeID BIGINT = NULL,
        @ObjectTypeID BIGINT = 10017034,     -- Organization
        @ObjectID BIGINT = @OrganizationKey,
        @ObjectTableID BIGINT = 75650000000; -- tlbOffice
DECLARE @DepartmentsTemp TABLE
(
    DepartmentID BIGINT NOT NULL,
    DepartmentNameDefaultValue NVARCHAR(200) NULL,
    DepartmentNameNationalValue NVARCHAR(200) NULL,
    OrderNumber INT NOT NULL,
    RowStatus INT NOT NULL,
    RowAction CHAR(1)
);
DECLARE @SuppressSelect TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200)
);
DECLARE @SuppressDepartmentSelect TABLE
(
    ReturnCode INT,
    ReturnMessage VARCHAR(200),
    KeyId BIGINT NULL,
    KeyName VARCHAR(MAX)
);
DECLARE @OrganizationAfterEdit TABLE
(
    OrganizationID BIGINT,
    OrganizationFullNameID BIGINT,
    OrganizjationAbbreviationNameID BIGINT,
    CustomizationPackageID BIGINT,
    LocationID BIGINT,
    ContactPhone NVARCHAR(200),
    AccessoryCode INT,
    EIDSSOrganizationID NVARCHAR(100),
    OrganizationTypeID BIGINT,
    OwnershipFormID BIGINT,
    LegalFormID BIGINT,
    MainFormOfActivityID BIGINT
);
DECLARE @OrganizationBeforeEdit TABLE
(
    OrganizationID BIGINT,
    OrganizationFullNameID BIGINT,
    OrganizjationAbbreviationNameID BIGINT,
    CustomizationPackageID BIGINT,
    LocationID BIGINT,
    ContactPhone NVARCHAR(200),
    AccessoryCode INT,
    EIDSSOrganizationID NVARCHAR(100),
    OrganizationTypeID BIGINT,
    OwnershipFormID BIGINT,
    LegalFormID BIGINT,
    MainFormOfActivityID BIGINT
);
BEGIN
    BEGIN TRY
        SET @AuditUserName = ISNULL(@AuditUserName, '');

        -- Data audit
        -- Get and set user and site identifiers
        SELECT @AuditUserID = userInfo.UserId,
               @AuditSiteID = userInfo.SiteId
        FROM dbo.FN_UserSiteInformation(@AuditUserName) userInfo;
        -- End data audit

        IF (
               ISNULL(@OrganizationID, N'') <> N''
               AND EXISTS
        (
            SELECT idfOffice
            FROM dbo.tlbOffice
            WHERE strOrganizationID = @OrganizationID
                  AND intRowStatus = 0
        )
               AND @OrganizationKey IS NULL
           )
           OR (
                  ISNULL(@OrganizationID, N'') <> N''
                  AND EXISTS
        (
            SELECT idfOffice
            FROM dbo.tlbOffice
            WHERE strOrganizationID = @OrganizationID
                  AND idfOffice <> @OrganizationKey
                  AND intRowStatus = 0
        )
                  AND @OrganizationKey IS NOT NULL
              )
        BEGIN
            SELECT @ReturnMessage = 'ID DOES EXIST';

            SELECT @ReturnCode = 1;

            SELECT @OrganizationKey = NULL;
        END

        IF @ReturnCode = 0
           AND (
                   ISNULL(@AbbreviatedNameDefaultValue, N'') <> N''
                   AND
                   (
                       SELECT COUNT(*)
                       FROM dbo.trtBaseReference
                       WHERE strDefault = @AbbreviatedNameDefaultValue
                             AND idfsReferenceType = 19000045
                             AND intRowStatus = 0
                             AND @OrganizationKey IS NULL
                             AND @OrganizationID IS NULL
                   ) > 0 -- use 0 in this scenario as the record is brand new
                   OR
                   (
                       SELECT COUNT(*)
                       FROM dbo.trtBaseReference
                       WHERE strDefault = @AbbreviatedNameDefaultValue
                             AND idfsReferenceType = 19000045
                             AND intRowStatus = 0
                             AND @OrganizationKey IS NOT NULL
                             AND @OrganizationID IS NULL
                   ) > 1 -- use 1 in this scenario to not count a duplicate against itself
               )
           AND (
                   ISNULL(@FullNameDefaultValue, N'') <> N''
                   AND
                   (
                       SELECT COUNT(*)
                       FROM dbo.trtBaseReference
                       WHERE strDefault = @FullNameDefaultValue
                             AND idfsReferenceType = 19000046
                             AND intRowStatus = 0
                             AND @OrganizationKey IS NULL
                             AND @OrganizationID IS NULL
                   ) > 0 -- use 0 in this scenario as the record is brand new
                   OR
                   (
                       SELECT COUNT(*)
                       FROM dbo.trtBaseReference
                       WHERE strDefault = @FullNameDefaultValue
                             AND idfsReferenceType = 19000046
                             AND intRowStatus = 0
                             AND @OrganizationKey IS NOT NULL
                             AND @OrganizationID IS NULL
                   ) > 1 -- use 1 in this scenario to not count a duplicate against itself
               )
        BEGIN
            SELECT @ReturnMessage = 'NAME DOES EXIST';

            SELECT @ReturnCode = 2;

            SELECT @OrganizationKey = NULL;
        END

        IF @ReturnCode = 0
        BEGIN
            SET NOCOUNT ON;

            BEGIN TRANSACTION;

            IF @OrganizationKey IS NULL
            BEGIN
                -- Data audit
                SET @DataAuditEventTypeID = 10016001; -- Data audit create event type

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                          @AuditSiteID,
                                                          @DataAuditEventTypeID,
                                                          @ObjectTypeID,
                                                          @OrganizationKey,
                                                          @ObjectTableID,
                                                          @OrganizationID,
                                                          @DataAuditEventID OUTPUT;
            -- End data audit
            END
            ELSE
            BEGIN
                -- Data audit
                SET @DataAuditEventTypeID = 10016003; -- Data audit edit event type

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_DATA_AUDIT_EVENT_SET @AuditUserID,
                                                          @AuditSiteID,
                                                          @DataAuditEventTypeID,
                                                          @ObjectTypeID,
                                                          @OrganizationKey,
                                                          @ObjectTableID,
                                                          @OrganizationID,
                                                          @DataAuditEventID OUTPUT;
            END

            INSERT INTO @DepartmentsTemp
            SELECT *
            FROM
                OPENJSON(@Departments)
                WITH
                (
                    DepartmentID BIGINT,
                    DepartmentNameDefaultValue NVARCHAR(200),
                    DepartmentNameNationalValue NVARCHAR(200),
                    OrderNumber INT,
                    RowStatus INT,
                    RowAction CHAR(1)
                );

            DECLARE @OrganizationFullNameID BIGINT,
                    @OrganizationAbbreviatedNameID BIGINT;

            SELECT @OrganizationFullNameID = idfsOfficeName,
                   @OrganizationAbbreviatedNameID = idfsOfficeAbbreviation
            FROM dbo.tlbOffice
            WHERE idfOffice = @OrganizationKey;

            IF NOT EXISTS
            (
                SELECT idfsOfficeName
                FROM dbo.tlbOffice
                WHERE idfOffice = @OrganizationKey
            )
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_BASE_REFERENCE_SET @OrganizationFullNameID OUTPUT,
                                                        19000046,
                                                        @LanguageID,
                                                        @FullNameDefaultValue,
                                                        @FullNameNationalValue,
                                                        0,
                                                        @Order,
                                                        0,
                                                        @AuditUserName,
                                                        @DataAuditEventID,
                                                        @OrganizationID;
            END
            ELSE
            BEGIN
                SELECT @OrganizationFullNameID =
                (
                    SELECT idfsOfficeName
                    FROM dbo.tlbOffice
                    WHERE idfOffice = @OrganizationKey
                );

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_BASE_REFERENCE_SET @OrganizationFullNameID OUTPUT,
                                                        19000046,
                                                        @LanguageID,
                                                        @FullNameDefaultValue,
                                                        @FullNameNationalValue,
                                                        0,
                                                        @Order,
                                                        0,
                                                        @AuditUserName,
                                                        @DataAuditEventID,
                                                        @OrganizationID;
            END

            IF NOT EXISTS
            (
                SELECT idfsOfficeAbbreviation
                FROM dbo.tlbOffice
                WHERE idfOffice = @OrganizationKey
            )
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_BASE_REFERENCE_SET @OrganizationAbbreviatedNameID OUTPUT,
                                                        19000045,
                                                        @LanguageID,
                                                        @AbbreviatedNameDefaultValue,
                                                        @AbbreviatedNameNationalValue,
                                                        0,
                                                        @Order,
                                                        0,
                                                        @AuditUserName,
                                                        @DataAuditEventID,
                                                        @OrganizationID;
            END
            ELSE
            BEGIN
                SELECT @OrganizationAbbreviatedNameID =
                (
                    SELECT idfsOfficeAbbreviation
                    FROM dbo.tlbOffice
                    WHERE idfOffice = @OrganizationKey
                );

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_BASE_REFERENCE_SET @OrganizationAbbreviatedNameID OUTPUT,
                                                        19000045,
                                                        @LanguageID,
                                                        @AbbreviatedNameDefaultValue,
                                                        @AbbreviatedNameNationalValue,
                                                        0,
                                                        @Order,
                                                        0,
                                                        @AuditUserName,
                                                        @DataAuditEventID,
                                                        @OrganizationID;
            END

            IF @CurrentCustomizationID IS NULL
            BEGIN
                SET @CurrentCustomizationID = dbo.FN_GBL_CustomizationPackage_GET();
            END

            -- Set the address including potentially the street and postal code tables. 
            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_ADDRESS_SET_WITH_AUDITING @AddressID OUTPUT,
                                                           @DataAuditEventID,
                                                           NULL,
                                                           NULL,
                                                           NULL,
                                                           @LocationID,
                                                           @Apartment,
                                                           @Building,
                                                           @StreetName,
                                                           @House,
                                                           @PostalCode,
                                                           NULL,
                                                           NULL,
                                                           NULL,
                                                           NULL,
                                                           NULL,
                                                           NULL,
                                                           NULL,
                                                           @ForeignAddressIndicator,
                                                           @ForeignAddressString,
                                                           @SharedAddressIndicator,
                                                           @AuditUserName;

            IF @OrganizationKey IS NULL
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NEXTKEYID_GET 'tlbOffice', @OrganizationKey OUTPUT;

                INSERT INTO dbo.tlbOffice
                (
                    idfOffice,
                    idfsOfficeName,
                    idfsOfficeAbbreviation,
                    idfCustomizationPackage,
                    idfLocation,
                    idfsSite,
                    strContactPhone,
                    intHACode,
                    strOrganizationID,
                    OrganizationTypeID,
                    OwnershipFormID,
                    MainFormOfActivityID,
                    LegalFormID,
                    AuditCreateUser
                )
                VALUES
                (   @OrganizationKey,
                    @OrganizationFullNameID,
                    @OrganizationAbbreviatedNameID,
                    @CurrentCustomizationID,
                    @AddressID,
                    NULL, -- Site ID will be updated on the site screen/site set stored procedure.
                    @ContactPhone,
                    @AccessoryCode,
                    @OrganizationID,
                    @OrganizationTypeID,
                    @OwnershipFormTypeID,
                    @MainFormOfActivityTypeID,
                    @LegalFormTypeID,
                    @AuditUserName
                );

                -- Data audit
                INSERT INTO dbo.tauDataAuditDetailCreate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfObject,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    strObject
                )
                VALUES
                (@DataAuditEventID,
                 @ObjectTableID,
                 @OrganizationKey,
                 10519001,
                 '[{"idfDataAuditEvent":' + CAST(@DataAuditEventID AS NVARCHAR(300)) + ',"idfObjectTable":'
                 + CAST(@ObjectTableID AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 @OrganizationID
                );
            -- End data audit
            END
            ELSE
            BEGIN
                -- Data audit
                INSERT INTO @OrganizationBeforeEdit
                (
                    OrganizationID,
                    OrganizationFullNameID,
                    OrganizjationAbbreviationNameID,
                    CustomizationPackageID,
                    LocationID,
                    ContactPhone,
                    AccessoryCode,
                    EIDSSOrganizationID,
                    OrganizationTypeID,
                    OwnershipFormID,
                    LegalFormID,
                    MainFormOfActivityID
                )
                SELECT idfOffice,
                       idfsOfficeName,
                       idfsOfficeAbbreviation,
                       idfCustomizationPackage,
                       idfLocation,
                       strContactPhone,
                       intHACode,
                       strOrganizationID,
                       OrganizationTypeID,
                       OwnershipFormID,
                       LegalFormID,
                       MainFormOfActivityID
                FROM dbo.tlbOffice
                WHERE idfOffice = @OrganizationKey;
                -- End data audit

                UPDATE dbo.tlbOffice
                SET strContactPhone = @ContactPhone,
                    idfLocation = @AddressID,
                    intHACode = @AccessoryCode,
                    strOrganizationID = @OrganizationID,
                    OrganizationTypeID = @OrganizationTypeID,
                    OwnershipFormID = @OwnershipFormTypeID,
                    LegalFormID = @LegalFormTypeID,
                    MainFormOfActivityID = @MainFormofActivityTypeID,
                    AuditUpdateDTM = GETDATE(),
                    AuditUpdateUser = @AuditUserName
                WHERE idfOffice = @OrganizationKey;

                -- Data audit
                INSERT INTO @OrganizationAfterEdit
                (
                    OrganizationID,
                    OrganizationFullNameID,
                    OrganizjationAbbreviationNameID,
                    CustomizationPackageID,
                    LocationID,
                    ContactPhone,
                    AccessoryCode,
                    EIDSSOrganizationID,
                    OrganizationTypeID,
                    OwnershipFormID,
                    LegalFormID,
                    MainFormOfActivityID
                )
                SELECT idfOffice,
                       idfsOfficeName,
                       idfsOfficeAbbreviation,
                       idfCustomizationPackage,
                       idfLocation,
                       strContactPhone,
                       intHACode,
                       strOrganizationID,
                       OrganizationTypeID,
                       OwnershipFormID,
                       LegalFormID,
                       MainFormOfActivityID
                FROM dbo.tlbOffice
                WHERE idfOffice = @OrganizationKey;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80120000000,
                       a.OrganizationID,
                       NULL,
                       b.OrganizationFullNameID,
                       a.OrganizationFullNameID,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.OrganizationFullNameID <> b.OrganizationFullNameID)
                      OR (
                             a.OrganizationFullNameID IS NOT NULL
                             AND b.OrganizationFullNameID IS NULL
                         )
                      OR (
                             a.OrganizationFullNameID IS NULL
                             AND b.OrganizationFullNameID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80110000000,
                       a.OrganizationID,
                       NULL,
                       b.OrganizjationAbbreviationNameID,
                       a.OrganizjationAbbreviationNameID,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.OrganizjationAbbreviationNameID <> b.OrganizjationAbbreviationNameID)
                      OR (
                             a.OrganizjationAbbreviationNameID IS NOT NULL
                             AND b.OrganizjationAbbreviationNameID IS NULL
                         )
                      OR (
                             a.OrganizjationAbbreviationNameID IS NULL
                             AND b.OrganizjationAbbreviationNameID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       51577490000000,
                       a.OrganizationID,
                       NULL,
                       b.CustomizationPackageID,
                       a.CustomizationPackageID,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.CustomizationPackageID <> b.CustomizationPackageID)
                      OR (
                             a.CustomizationPackageID IS NOT NULL
                             AND b.CustomizationPackageID IS NULL
                         )
                      OR (
                             a.CustomizationPackageID IS NULL
                             AND b.CustomizationPackageID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       4577920000000,
                       a.OrganizationID,
                       NULL,
                       b.LocationID,
                       a.LocationID,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.LocationID <> b.LocationID)
                      OR (
                             a.LocationID IS NOT NULL
                             AND b.LocationID IS NULL
                         )
                      OR (
                             a.LocationID IS NULL
                             AND b.LocationID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       80150000000,
                       a.OrganizationID,
                       NULL,
                       b.ContactPhone,
                       a.ContactPhone,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.ContactPhone <> b.ContactPhone)
                      OR (
                             a.ContactPhone IS NOT NULL
                             AND b.ContactPhone IS NULL
                         )
                      OR (
                             a.ContactPhone IS NULL
                             AND b.ContactPhone IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       50815930000000,
                       a.OrganizationID,
                       NULL,
                       b.AccessoryCode,
                       a.AccessoryCode,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.AccessoryCode <> b.AccessoryCode)
                      OR (
                             a.AccessoryCode IS NOT NULL
                             AND b.AccessoryCode IS NULL
                         )
                      OR (
                             a.AccessoryCode IS NULL
                             AND b.AccessoryCode IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       51523430000000,
                       a.OrganizationID,
                       NULL,
                       b.EIDSSOrganizationID,
                       a.EIDSSOrganizationID,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.EIDSSOrganizationID <> b.EIDSSOrganizationID)
                      OR (
                             a.EIDSSOrganizationID IS NOT NULL
                             AND b.EIDSSOrganizationID IS NULL
                         )
                      OR (
                             a.EIDSSOrganizationID IS NULL
                             AND b.EIDSSOrganizationID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       51586990000045,
                       a.OrganizationID,
                       NULL,
                       b.OrganizationTypeID,
                       a.OrganizationTypeID,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.OrganizationTypeID <> b.OrganizationTypeID)
                      OR (
                             a.OrganizationTypeID IS NOT NULL
                             AND b.OrganizationTypeID IS NULL
                         )
                      OR (
                             a.OrganizationTypeID IS NULL
                             AND b.OrganizationTypeID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       51586990000046,
                       a.OrganizationID,
                       NULL,
                       b.OwnershipFormID,
                       a.OwnershipFormID,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.OwnershipFormID <> b.OwnershipFormID)
                      OR (
                             a.OwnershipFormID IS NOT NULL
                             AND b.OwnershipFormID IS NULL
                         )
                      OR (
                             a.OwnershipFormID IS NULL
                             AND b.OwnershipFormID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       51586990000047,
                       a.OrganizationID,
                       NULL,
                       b.LegalFormID,
                       a.LegalFormID,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.LegalFormID <> b.LegalFormID)
                      OR (
                             a.LegalFormID IS NOT NULL
                             AND b.LegalFormID IS NULL
                         )
                      OR (
                             a.LegalFormID IS NULL
                             AND b.LegalFormID IS NOT NULL
                         );

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                    idfDataAuditEvent,
                    idfObjectTable,
                    idfColumn,
                    idfObject,
                    idfObjectDetail,
                    strOldValue,
                    strNewValue,
                    AuditCreateUser,
                    strObject
                )
                SELECT @DataAuditEventID,
                       @ObjectTableID,
                       51586990000048,
                       a.OrganizationID,
                       NULL,
                       b.MainFormOfActivityID,
                       a.MainFormOfActivityID,
                       @AuditUserName,
                       @OrganizationID
                FROM @OrganizationAfterEdit AS a
                    FULL JOIN @OrganizationBeforeEdit AS b
                        ON a.OrganizationID = b.OrganizationID
                WHERE (a.MainFormOfActivityID <> b.MainFormOfActivityID)
                      OR (
                             a.MainFormOfActivityID IS NOT NULL
                             AND b.MainFormOfActivityID IS NULL
                         )
                      OR (
                             a.MainFormOfActivityID IS NULL
                             AND b.MainFormOfActivityID IS NOT NULL
                         );
            -- End data audit
            END

            WHILE EXISTS (SELECT * FROM @DepartmentsTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = DepartmentID,
                    @DepartmentID = DepartmentID,
                    @DefaultValue = DepartmentNameDefaultValue,
                    @NationalValue = DepartmentNameNationalValue,
                    @DepartmentOrder = OrderNumber,
                    @RowStatus = RowStatus
                FROM @DepartmentsTemp
                ORDER BY RowStatus DESC,
                         DepartmentID;

                INSERT INTO @SuppressDepartmentSelect
                EXECUTE dbo.USP_ADMIN_DEPARTMENTS_SET @LanguageID,
                                                      @DepartmentID,
                                                      @DefaultValue,
                                                      @NationalValue,
                                                      @OrganizationKey,
                                                      NULL,
                                                      @DepartmentOrder,
                                                      @AuditUserName,
                                                      @DataAuditEventID,
                                                      @OrganizationID,
                                                      @RowStatus;

                SET @ReturnMessage =
                (
                    SELECT MAX(ReturnMessage) FROM @SuppressDepartmentSelect
                );

                IF @ReturnMessage = 'DOES EXIST'
                BEGIN
                    SET @ReturnMessage = 'DEPARTMENT DEFAULT VALUE DOES EXISTS,' + @DefaultValue;
                    SET @ReturnCode = 3;

                    DELETE FROM @DepartmentsTemp;
                END
                ELSE
                BEGIN
                    DELETE FROM @DepartmentsTemp
                    WHERE DepartmentID = @RowID;
                END
            END;

            IF @@TRANCOUNT > 0
                COMMIT;
        END

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @OrganizationKey KeyId,
               'OrganizationKey' KeyName,
               @AddressID AdditionalKeyId,
               'AddressID' AdditionalKeyName;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_ADMIN_SITE_SET]...';


GO
-- ================================================================================================
-- Name: USP_ADMIN_SITE_SET
--
-- Description:	Inserts or updates an EIDSS site for SAUC29.
--                      
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Stephen Long     02/14/2022 Initial release.
-- Stephen Long     03/14/2022 Added additional columns to suppress select for employee group set.
-- Stephen Long     05/17/2022 Added insert for a new organization association to a site.
-- Stephen Long     07/15/2022 Comment out access rule name field; need to add base reference 
--                             logic for the name.
-- Stephen Long     12/22/2022 Fixed site permissions to use new stored procedure for object 
--                             access set, and logic for the default employee group for new sites.
-- Stephen Long     01/10/2023 Fix to add default employee group for existing sites when it does 
--                             not exist.
-- Ann Xiong		02/01/2022 Updated to copy aggreatesettings of parent site or top level site 
--                             and insert those aggreatesettings to the table tstAggrSetting when create a new site
-- Mani Govindarajan02/5/2023  Added to call [USSP_GBL_SITE_CUSTOMUSERGROUUP_SET] for adding Custom Roles for the newly added site.
-- Ann Xiong		02/20/2023 Implemented Data Audit
-- Ann Xiong		03/06/2023 Called USSP_GBL_BASE_REFERENCE_SET instead of USP_GBL_BaseReference_SET to use its data auditing
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_ADMIN_SITE_SET]
(
    @LanguageID NVARCHAR(50),
    @SiteID BIGINT = NULL,
    @CustomizationPackageID BIGINT = NULL,
    @EIDSSSiteID NVARCHAR(36) = NULL,
    @ParentSiteID BIGINT = NULL,
    @SiteTypeID BIGINT = NULL,
    @SiteName NVARCHAR(200) = NULL,
    @SiteOrganizationID BIGINT = NULL,
    @HASCSiteID NVARCHAR(50) = NULL,
    @RowStatus INT,
    @Permissions NVARCHAR(MAX) = NULL,
    @Organizations NVARCHAR(MAX) = NULL,
    @UserName NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT
            = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
                @RowAction CHAR = NULL,
                @RowID BIGINT = NULL,
                @OrganizationID BIGINT = NULL,
                @DefaultEmployeeGroupActorID BIGINT = -506, -- Default group for an EIDSS installation; not actually used for users/employees, but only as a template for other sites.
                @ObjectAccessID BIGINT = NULL,
                @ObjectOperationTypeID BIGINT = NULL,
                @ObjectTypeID BIGINT = NULL,
                @ObjectID BIGINT = NULL,
                @ActorID BIGINT = NULL,
                @PermissionTypeID INT = NULL;

        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT,
            ReturnMessage NVARCHAR(MAX)
        );
        DECLARE @OrganizationsTemp TABLE
        (
            OrganizationID BIGINT NOT NULL,
            RowAction INT NOT NULL
        );
        DECLARE @ObjectAccessRecordsTemp TABLE
        (
            ObjectAccessID BIGINT NOT NULL,
            ObjectOperationTypeID BIGINT NOT NULL,
            ObjectTypeID BIGINT NOT NULL,
            ObjectID BIGINT NOT NULL,
            ActorID BIGINT NOT NULL,
            DefaultEmployeeGroupIndicator BIT NOT NULL,
            SiteID BIGINT NOT NULL,
            PermissionTypeID INT NOT NULL,
            RowStatus INT NOT NULL,
            RowAction CHAR(1) NULL
        );

		DECLARE @AggregateDiseaseReportTypeId BIGINT = NULL,
				@idfCustomizationPackage BIGINT = NULL,
				@idfsSite BIGINT = NULL,
				@StatisticalAreaTypeId BIGINT = NULL,
				@StatisticalPeriodTypeId BIGINT = NULL

		DECLARE @AggregateSettingRecordsTemp TABLE
		(
			AggregateDiseaseReportTypeId BIGINT NOT NULL,
			CustomizationPackageId BIGINT NOT NULL,
			SiteId BIGINT NULL,
			StatisticalAreaTypeId BIGINT NOT NULL,
			StatisticalPeriodTypeId BIGINT NOT NULL
		);

		--Data Audit--
		declare @idfUserId BIGINT = NULL;
		declare @idfSiteId BIGINT = NULL;
		declare @idfsDataAuditEventType bigint = NULL;
		declare @idfsObjectType bigint = 10017048;                         -- Site
		declare @idfObject bigint = @SiteID;
		declare @idfObjectTable_tstSite bigint = 76170000000;
		declare @idfDataAuditEvent bigint= NULL;
		declare @idfObjectTable_tlbEmployee bigint = 75520000000;
		declare @idfObjectTable_tlbEmployeeGroup bigint = 75530000000;
		declare @idfObjectTable_tstAggrSetting bigint = 76030000000;
		declare @idfObjectTable_tlbOffice bigint = 75650000000;

		DECLARE @tstSite_BeforeEdit TABLE
		(
			SiteID BIGINT,
			ParentSiteID BIGINT,
			SiteTypeID BIGINT,
			CustomizationPackageID BIGINT,
			SiteOrganizationID BIGINT,
			SiteName varchar(200),
			HASCSiteID varchar(50),
			EIDSSSiteID varchar(36)
		);
		DECLARE @tstSite_AfterEdit TABLE
		(
			SiteID BIGINT,
			ParentSiteID BIGINT,
			SiteTypeID BIGINT,
			CustomizationPackageID BIGINT,
			SiteOrganizationID BIGINT,
			SiteName varchar(200),
			HASCSiteID varchar(50),
			EIDSSSiteID varchar(36)
		);

		-- Get and Set UserId and SiteId
		select @idfUserId =userInfo.UserId, @idfSiteId=UserInfo.SiteId from dbo.FN_UserSiteInformation(@UserName) userInfo

		--Data Audit--

        BEGIN TRANSACTION;

        INSERT INTO @OrganizationsTemp
        SELECT *
        FROM
            OPENJSON(@Organizations)
            WITH
            (
                OrganizationID BIGINT,
                RowAction INT
            );

        INSERT INTO @ObjectAccessRecordsTemp
        SELECT *
        FROM
            OPENJSON(@Permissions)
            WITH
            (
                ObjectAccessID BIGINT,
                ObjectOperationTypeID BIGINT,
                ObjectTypeID BIGINT,
                ObjectID BIGINT,
                ActorID BIGINT,
                DefaultEmployeeGroupIndicator BIT,
                SiteID BIGINT,
                PermissionTypeID INT,
                RowStatus INT,
                RowAction CHAR(1)
            );

        IF (
               ISNULL(@EIDSSSiteID, N'') <> N''
               AND EXISTS
        (
            SELECT strSiteID
            FROM dbo.tstSite
            WHERE strSiteID = @EIDSSSiteID
        )
               AND @SiteID IS NULL
           )
        BEGIN
            SELECT @ReturnMessage = 'SITE ID DOES EXIST';

            SELECT @ReturnCode = 1;
        END

        IF @ReturnCode = 0
           AND (
                   ISNULL(@HASCSiteID, N'') <> N''
                   AND EXISTS
        (
            SELECT strHASCsiteID
            FROM dbo.tstSite
            WHERE strHASCsiteID = @HASCSiteID
        )
                   AND @SiteID IS NULL
               )
        BEGIN
            SELECT @ReturnMessage = 'HASC SITE ID DOES EXIST';

            SELECT @ReturnCode = 2;
        END

        IF @ReturnCode = 0
        BEGIN
            -- Create the Default Employee Group for the new site
            DECLARE @LanguageCode BIGINT = dbo.FN_GBL_LanguageCode_Get(@LanguageID),
                    @NewDefaultEmployeeGroupActorID BIGINT = NULL,
                    @NewDefaultEmployeeGroupNameID BIGINT = NULL;
            DECLARE @DefaultEmployeeGroupDefaultName NVARCHAR(200)
                =   (
                        SELECT strDefault
                        FROM dbo.trtBaseReference
                        WHERE idfsBaseReference = @DefaultEmployeeGroupActorID
                    ),
                    @DefaultEmployeeGroupNationalName NVARCHAR(200) = (
                                                                          SELECT strTextString
                                                                          FROM dbo.trtStringNameTranslation
                                                                          WHERE idfsBaseReference = @DefaultEmployeeGroupActorID
                                                                                AND idfsLanguage = @LanguageCode
                                                                      ),
                    @DefaultEmployeeGroupDescription NVARCHAR(200) = (
                                                                         SELECT strDescription
                                                                         FROM dbo.tlbEmployeeGroup
                                                                         WHERE idfEmployeeGroup = @DefaultEmployeeGroupActorID
                                                                     );

            IF NOT EXISTS
            (
                SELECT *
                FROM dbo.tstSite
                WHERE idfsSite = @SiteID
                      AND intRowStatus = 0
            )
            BEGIN
                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_GBL_NEXTKEYID_GET @tableName = N'tstSite',
                                                  @idfsKey = @SiteID OUTPUT;

                IF @CustomizationPackageID IS NULL
                BEGIN
                    SET @CustomizationPackageID = dbo.FN_GBL_CustomizationPackage_GET();
                END

                INSERT INTO dbo.tstSite
                (
                    idfsSite,
                    idfsParentSite,
                    idfsSiteType,
                    idfCustomizationPackage,
                    idfOffice,
                    strSiteName,
                    strHASCsiteID,
                    strSiteID,
                    blnIsWEB,
                    intRowStatus,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser
                )
                VALUES
                (@SiteID,
                 @ParentSiteID,
                 @SiteTypeID,
                 @CustomizationPackageID,
                 @SiteOrganizationID,
                 @SiteName,
                 @HASCSiteID,
                 @EIDSSSiteID,
                 0  ,
                 0  ,
                 10519001,
                 '[{"idfsSite":' + CAST(@SiteID AS NVARCHAR(300)) + '}]',
                 @UserName
                );

				--Data Audit--
				-- tauDataAuditEvent Event Type - Create 
				set @idfsDataAuditEventType =10016001;
				-- insert record into tauDataAuditEvent - 
				EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@SiteID, @idfObjectTable_tstSite, @idfDataAuditEvent OUTPUT

				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject )
						values ( @idfDataAuditEvent, @idfObjectTable_tstSite, @SiteID)
				--Data Audit--

				INSERT INTO @SuppressSelect
				EXEC dbo.USSP_GBL_SITE_CUSTOMUSERGROUP_SET @SiteID

                SET @NewDefaultEmployeeGroupActorID =
                (
                    SELECT MIN(idfEmployee) - 1 FROM dbo.tlbEmployee
                );

                INSERT INTO @SuppressSelect
				EXECUTE dbo.USSP_GBL_BASE_REFERENCE_SET  @NewDefaultEmployeeGroupNameID OUTPUT,
                                                        19000022,
                                                        @LanguageID,
                                                        @DefaultEmployeeGroupDefaultName,
                                                        @DefaultEmployeeGroupNationalName,
                                                        226,
                                                        0,
                                                        1,
                                                        @UserName,
                                                        @idfDataAuditEvent,
                                                        NULL;
                --EXEC dbo.USP_GBL_BaseReference_SET @ReferenceID = @NewDefaultEmployeeGroupNameID OUTPUT,
                --                                   @ReferenceType = 19000022,
                --                                   @LangID = @LanguageID,
                --                                   @DefaultName = @DefaultEmployeeGroupDefaultName,
                --                                   @NationalName = @DefaultEmployeeGroupNationalName,
                --                                   @HACode = 226,
                --                                   @Order = 0,
                --                                   @System = 1,
                --                                   @User = @UserName;

                INSERT INTO dbo.tlbEmployee
                (
                    idfEmployee,
                    idfsEmployeeType,
                    idfsSite,
                    intRowStatus,
                    AuditCreateDTM,
                    AuditCreateUser
                )
                VALUES
                (@NewDefaultEmployeeGroupActorID, 10023001, @SiteID, 0, GETDATE(), @UserName);

				--Data Audit--
				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject )
						values ( @idfDataAuditEvent, @idfObjectTable_tlbEmployee, @NewDefaultEmployeeGroupActorID)
				--Data Audit--

                INSERT INTO dbo.tlbEmployeeGroup
                (
                    idfEmployeeGroup,
                    idfsEmployeeGroupName,
                    idfsSite,
                    strName,
                    strDescription,
                    intRowStatus,
                    AuditCreateDTM,
                    AuditCreateUser
                )
                VALUES
                (@NewDefaultEmployeeGroupActorID,
                 @NewDefaultEmployeeGroupNameID,
                 @SiteID,
                 @DefaultEmployeeGroupNationalName,
                 @DefaultEmployeeGroupDescription,
                 0  ,
                 GETDATE(),
                 @UserName
                );

				--Data Audit--
				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject )
						values ( @idfDataAuditEvent, @idfObjectTable_tlbEmployeeGroup, @NewDefaultEmployeeGroupActorID)
				--Data Audit--

                UPDATE @ObjectAccessRecordsTemp
                SET ActorID = @NewDefaultEmployeeGroupActorID
                WHERE DefaultEmployeeGroupIndicator = 1;

				IF EXISTS
				(
					SELECT 	a.idfsAggrCaseType,
                       		a.idfCustomizationPackage,
			     			a.idfsSite,
                       		a.idfsStatisticAreaType,
                       		a.idfsStatisticPeriodType
					FROM 	dbo.tstAggrSetting a
							INNER JOIN dbo.tstSite s ON s.idfsSite = @SiteID
					WHERE 	a.idfCustomizationPackage = @CustomizationPackageID
			    			AND a.idfsSite = s.idfsParentSite
                      		AND a.intRowStatus = 0
				)
				BEGIN
					INSERT INTO @AggregateSettingRecordsTemp
					SELECT	AGR.[idfsAggrCaseType]
							,AGR.[idfCustomizationPackage]
							,AGR.[idfsSite]
							,AGR.[idfsStatisticAreaType]
							,AGR.[idfsStatisticPeriodType]
					FROM	dbo.tstAggrSetting AS AGR
							LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000102) AGRC ON AGRC.idfsReference = AGR.idfsAggrCaseType
							LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000089) ART ON ART.idfsReference = AGR.idfsStatisticAreaType
							LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000091) PRT ON PRT.idfsReference = AGR.idfsStatisticPeriodType
							INNER JOIN dbo.tstSite s ON s.idfsSite = @SiteID
					WHERE	AGR.[idfCustomizationPackage] = @CustomizationPackageID
							AND AGR.[idfsSite] = s.idfsParentSite
							AND AGR.intRowStatus = 0;
				END
				ELSE
				BEGIN
					DECLARE @idfsSiteTop BIGINT;

					SELECT TOP 1	
							@idfsSiteTop = idfsSite
					FROM 	dbo.tstAggrSetting
					WHERE 	idfCustomizationPackage = @CustomizationPackageID
                      		AND intRowStatus = 0;

					INSERT INTO @AggregateSettingRecordsTemp
					SELECT	AGR.[idfsAggrCaseType]
							,AGR.[idfCustomizationPackage]
							,AGR.[idfsSite]
							,AGR.[idfsStatisticAreaType]
							,AGR.[idfsStatisticPeriodType]
					FROM	dbo.tstAggrSetting AS AGR
							LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000102) AGRC ON AGRC.idfsReference = AGR.idfsAggrCaseType
							LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000089) ART ON ART.idfsReference = AGR.idfsStatisticAreaType
							LEFT JOIN dbo.FN_GBL_Reference_GETList(@LanguageID, 19000091) PRT ON PRT.idfsReference = AGR.idfsStatisticPeriodType
							INNER JOIN dbo.tstSite s ON s.idfsSite = @SiteID
					WHERE	AGR.[idfCustomizationPackage] = @CustomizationPackageID
							AND AGR.[idfsSite] = @idfsSiteTop
							AND AGR.intRowStatus = 0;
				END

        WHILE EXISTS (SELECT * FROM @AggregateSettingRecordsTemp)
        BEGIN
            SELECT TOP 1
                @AggregateDiseaseReportTypeId = AggregateDiseaseReportTypeId,
                @idfCustomizationPackage = CustomizationPackageId,
				@idfsSite = SiteId,
                @StatisticalAreaTypeId = StatisticalAreaTypeId,
                @StatisticalPeriodTypeId = StatisticalPeriodTypeId
            FROM @AggregateSettingRecordsTemp;
            BEGIN

                INSERT INTO dbo.tstAggrSetting
                (
                    idfsAggrCaseType,
                    idfCustomizationPackage,
					idfsSite,
                    idfsStatisticAreaType,
                    idfsStatisticPeriodType,
					intRowStatus,
                    AuditCreateDTM,
                    AuditCreateUser,
                    SourceSystemKeyValue,
                    SourceSystemNameID
                )
                VALUES
                (	@AggregateDiseaseReportTypeId,
					@idfCustomizationPackage,
					@SiteID,
					@StatisticalAreaTypeId,
					@StatisticalPeriodTypeId,
					0,
					GETDATE(),
					@UserName,
					'[{"idfsAggrCaseType":' + CAST(@AggregateDiseaseReportTypeId AS NVARCHAR(300))
					+ ',"idfCustomizationPackage":' + CAST(@idfCustomizationPackage AS NVARCHAR(300)) + '}]',
					10519001
                );

				--Data Audit--
				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject )
						values ( @idfDataAuditEvent, @idfObjectTable_tstAggrSetting, @AggregateDiseaseReportTypeId)
				--Data Audit--
            END

            DELETE FROM @AggregateSettingRecordsTemp
            WHERE AggregateDiseaseReportTypeId = @AggregateDiseaseReportTypeId;
        END


            END
            ELSE
            BEGIN
				-- Data audit
                INSERT INTO @tstSite_BeforeEdit
                (
                        SiteID,
                        ParentSiteID,
                        SiteTypeID,
                        CustomizationPackageID,
                        SiteOrganizationID,
                        SiteName,
                        HASCSiteID,
                        EIDSSSiteID
               )
               SELECT	idfsSite,
                           idfsParentSite,
                           idfsSiteType,
                           idfCustomizationPackage,
                           idfOffice,
                           strSiteName,
                           strHASCsiteID,
                           strSiteID
               FROM dbo.tstSite
               WHERE idfsSite = @SiteID;
               -- End data audit

                UPDATE dbo.tstSite
                SET idfsSiteType = @SiteTypeID,
                    idfsParentSite = @ParentSiteID,
                    idfCustomizationPackage = @CustomizationPackageID,
                    idfOffice = @SiteOrganizationID,
                    strSiteName = @SiteName,
                    strHASCsiteID = @HASCSiteID,
                    strSiteID = @EIDSSSiteID,
                    intRowStatus = @RowStatus,
                    AuditUpdateUser = @UserName,
                    AuditUpdateDTM = GETDATE()
                WHERE idfsSite = @SiteID;

                -- Data audit
                INSERT INTO @tstSite_AfterEdit
                (
                        SiteID,
                        ParentSiteID,
                        SiteTypeID,
                        CustomizationPackageID,
                        SiteOrganizationID,
                        SiteName,
                        HASCSiteID,
                        EIDSSSiteID
                 )
                 SELECT idfsSite,
                           idfsParentSite,
                           idfsSiteType,
                           idfCustomizationPackage,
                           idfOffice,
                           strSiteName,
                           strHASCsiteID,
                           strSiteID
                FROM dbo.tstSite
                WHERE idfsSite = @SiteID;

			    --  tauDataAuditEvent  Event Type- Edit 
			    set @idfsDataAuditEventType =10016003;
			    -- insert record into tauDataAuditEvent - 
			    EXEC USSP_GBL_DataAuditEvent_GET @idfUserId, @idfSiteId, @idfsDataAuditEventType,@idfsObjectType,@SiteID, @idfObjectTable_tstSite, @idfDataAuditEvent OUTPUT

				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, idfObjectTable, idfColumn, 
					idfObject, idfObjectDetail, 
					strOldValue, strNewValue)
				select @idfDataAuditEvent,@idfObjectTable_tstSite, 4578830000000,
					a.SiteID,null,
					a.ParentSiteID,b.ParentSiteID 
				from @tstSite_BeforeEdit a  inner join @tstSite_AfterEdit b on a.SiteID = b.SiteID
				where (a.ParentSiteID <> b.ParentSiteID) 
					or(a.ParentSiteID is not null and b.ParentSiteID is null)
					or(a.ParentSiteID is null and b.ParentSiteID is not null)

				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, idfObjectTable, idfColumn, 
					idfObject, idfObjectDetail, 
					strOldValue, strNewValue)
				select @idfDataAuditEvent,@idfObjectTable_tstSite, 82070000000,
					a.SiteID,null,
					a.SiteTypeID,b.SiteTypeID 
				from @tstSite_BeforeEdit a  inner join @tstSite_AfterEdit b on a.SiteID = b.SiteID
				where (a.SiteTypeID <> b.SiteTypeID) 
					or(a.SiteTypeID is not null and b.SiteTypeID is null)
					or(a.SiteTypeID is null and b.SiteTypeID is not null)

				--insert into dbo.tauDataAuditDetailUpdate(
				--	idfDataAuditEvent, idfObjectTable, idfColumn, 
				--	idfObject, idfObjectDetail, 
				--	strOldValue, strNewValue)
				--select @idfDataAuditEvent,@idfObjectTable_tstSite, 51577500000000,
				--	a.SiteID,null,
				--	a.CustomizationPackageID,b.CustomizationPackageID 
				--from @tstSite_BeforeEdit a  inner join @tstSite_AfterEdit b on a.SiteID = b.SiteID
				--where (a.CustomizationPackageID <> b.CustomizationPackageID) 
				--	or(a.CustomizationPackageID is not null and b.CustomizationPackageID is null)
				--	or(a.CustomizationPackageID is null and b.CustomizationPackageID is not null)

				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, idfObjectTable, idfColumn, 
					idfObject, idfObjectDetail, 
					strOldValue, strNewValue)
				select @idfDataAuditEvent,@idfObjectTable_tstSite, 82040000000,
					a.SiteID,null,
					a.SiteOrganizationID,b.SiteOrganizationID 
				from @tstSite_BeforeEdit a  inner join @tstSite_AfterEdit b on a.SiteID = b.SiteID
				where (a.SiteOrganizationID <> b.SiteOrganizationID) 
					or(a.SiteOrganizationID is not null and b.SiteOrganizationID is null)
					or(a.SiteOrganizationID is null and b.SiteOrganizationID is not null)

				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, idfObjectTable, idfColumn, 
					idfObject, idfObjectDetail, 
					strOldValue, strNewValue)
				select @idfDataAuditEvent,@idfObjectTable_tstSite, 82100000000,
					a.SiteID,null,
					a.SiteName,b.SiteName
				from @tstSite_BeforeEdit a  inner join @tstSite_AfterEdit b on a.SiteID = b.SiteID
				where (a.SiteName <> b.SiteName) 
					or(a.SiteName is not null and b.SiteName is null)
					or(a.SiteName is null and b.SiteName is not null)

				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, idfObjectTable, idfColumn, 
					idfObject, idfObjectDetail, 
					strOldValue, strNewValue)
				select @idfDataAuditEvent,@idfObjectTable_tstSite, 82080000000,
					a.SiteID,null,
					a.HASCSiteID,b.HASCSiteID 
				from @tstSite_BeforeEdit a  inner join @tstSite_AfterEdit b on a.SiteID = b.SiteID
				where (a.HASCSiteID <> b.HASCSiteID) 
					or(a.HASCSiteID is not null and b.HASCSiteID is null)
					or(a.HASCSiteID is null and b.HASCSiteID is not null)

				insert into dbo.tauDataAuditDetailUpdate(
					idfDataAuditEvent, idfObjectTable, idfColumn, 
					idfObject, idfObjectDetail, 
					strOldValue, strNewValue)
				select @idfDataAuditEvent,@idfObjectTable_tstSite, 869060000000,
					a.SiteID,null,
					a.EIDSSSiteID,b.EIDSSSiteID 
				from @tstSite_BeforeEdit a  inner join @tstSite_AfterEdit b on a.SiteID = b.SiteID
				where (a.EIDSSSiteID <> b.EIDSSSiteID) 
					or(a.EIDSSSiteID is not null and b.EIDSSSiteID is null)
					or(a.EIDSSSiteID is null and b.EIDSSSiteID is not null)

                    -- End data audit

                IF EXISTS
                (
                    SELECT *
                    FROM @ObjectAccessRecordsTemp
                    WHERE DefaultEmployeeGroupIndicator = 1
                          AND RowAction = 'I'
                          AND RowStatus = 0
                )
                BEGIN
                    SET @NewDefaultEmployeeGroupActorID =
                    (
                        SELECT MIN(idfEmployee) - 1 FROM dbo.tlbEmployee
                    );

                    INSERT INTO @SuppressSelect
                    EXEC dbo.USP_GBL_BaseReference_SET @ReferenceID = @NewDefaultEmployeeGroupNameID OUTPUT,
                                                       @ReferenceType = 19000022,
                                                       @LangID = @LanguageID,
                                                       @DefaultName = @DefaultEmployeeGroupDefaultName,
                                                       @NationalName = @DefaultEmployeeGroupNationalName,
                                                       @HACode = 226,
                                                       @Order = 0,
                                                       @System = 1,
                                                       @User = @UserName;

                    INSERT INTO dbo.tlbEmployee
                    (
                        idfEmployee,
                        idfsEmployeeType,
                        idfsSite,
                        intRowStatus,
                        AuditCreateDTM,
                        AuditCreateUser
                    )
                    VALUES
                    (@NewDefaultEmployeeGroupActorID, 10023001, @SiteID, 0, GETDATE(), @UserName);

					--Data Audit--
					INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject )
						values ( @idfDataAuditEvent, @idfObjectTable_tlbEmployee, @NewDefaultEmployeeGroupActorID)
					--Data Audit--

                    INSERT INTO dbo.tlbEmployeeGroup
                    (
                        idfEmployeeGroup,
                        idfsEmployeeGroupName,
                        idfsSite,
                        strName,
                        strDescription,
                        intRowStatus,
                        AuditCreateDTM,
                        AuditCreateUser
                    )
                    VALUES
                    (@NewDefaultEmployeeGroupActorID,
                     @NewDefaultEmployeeGroupNameID,
                     @SiteID,
                     @DefaultEmployeeGroupNationalName,
                     @DefaultEmployeeGroupDescription,
                     0  ,
                     GETDATE(),
                     @UserName
                    );

					--Data Audit--
					INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject )
						values ( @idfDataAuditEvent, @idfObjectTable_tlbEmployeeGroup, @NewDefaultEmployeeGroupActorID)
					--Data Audit--

                    UPDATE @ObjectAccessRecordsTemp
                    SET ActorID = @NewDefaultEmployeeGroupActorID
                    WHERE DefaultEmployeeGroupIndicator = 1;
                END
            END;

            WHILE EXISTS (SELECT * FROM @OrganizationsTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = OrganizationID,
                    @OrganizationID = OrganizationID,
                    @RowAction = RowAction
                FROM @OrganizationsTemp;

                IF @RowAction = 1 -- Insert
                   OR @RowAction = 2 -- Update
                BEGIN
                    UPDATE dbo.tlbOffice
                    SET idfsSite = @SiteID,
                        AuditUpdateDTM = GETDATE(),
                        AuditUpdateUser = @UserName
                    WHERE idfOffice = @OrganizationID;
                END
                ELSE
                BEGIN
                    UPDATE dbo.tlbOffice
                    SET idfsSite = NULL,
                        AuditUpdateDTM = GETDATE(),
                        AuditUpdateUser = @UserName
                    WHERE idfOffice = @OrganizationID;
                END;

				--Data Audit-- Update
					INSERT INTO tauDataAuditDetailUpdate(idfDataAuditEvent, idfObjectTable, idfObject )
						SELECT @idfDataAuditEvent, @idfObjectTable_tlbOffice, @OrganizationID 
				--Data Audit--

                DELETE FROM @OrganizationsTemp
                WHERE @OrganizationID = @RowID;
            END

            WHILE EXISTS (SELECT * FROM @ObjectAccessRecordsTemp)
            BEGIN
                SELECT TOP 1
                    @RowID = ObjectAccessID,
                    @ObjectAccessID = ObjectAccessID,
                    @ObjectOperationTypeID = ObjectOperationTypeID,
                    @ObjectTypeID = ObjectTypeID,
                    @ObjectID = @SiteID,
                    @ActorID = ActorID,
                    @PermissionTypeID = PermissionTypeID,
                    @RowStatus = RowStatus,
                    @RowAction = RowAction
                FROM @ObjectAccessRecordsTemp;

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_ADMIN_OBJECT_ACCESS_SET @ObjectAccessID,
                                                         @ObjectOperationTypeID,
                                                         @ObjectTypeID,
                                                         @ObjectID,
                                                         @ActorID,
                                                         @SiteID,
                                                         @PermissionTypeID,
                                                         @RowStatus,
                                                         @UserName;

                DELETE FROM @ObjectAccessRecordsTemp
                WHERE ObjectAccessID = @RowID;
            END;
        END

        IF @@TRANCOUNT > 0
            COMMIT;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage,
               @SiteID KeyId,
               'SiteID' KeyIdName,
               @CustomizationPackageID AdditionalKeyId,
               'CustomizationPackageID' AdditionalKeyName;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK;

        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_REF_SPECIESTYPE_SET]...';


GO
-- ================================================================================================
-- Name: USP_REF_SPECIESTYPE_SET
-- 
-- Description:	Adds or updates a species type reference
--                      
-- Author: Ricky Moss
-- Revision History:
-- Name             Date       Change Detail
-- ---------------- ---------- -------------------------------------------------------------------
-- Ricky Moss       10/02/2018 Initial release.
-- Ricky Moss		10/04/2018 Updated the update piece of the stored procedure
-- Ricky Moss		12/13/2018 Removed the return codes and reference id
-- Lamont Mitchell	01/02/2019 Aliased Columns in Final Output
-- Ricky Moss		01/02/2019 Replace fnGetLanguageCode with FN_GBL_LanguageCode_GET function
-- Ricky Moss		02/10/2019 Checks to see when updating a species type that the name does not 
--                             exists in another reference and updates English value
-- Ricky Moss		06/18/2019 Correct duplicate prevention issue and Reactivate inactive species 
--                             types if trying to re-add
-- Ricky Moss		07/22/2019 Refactoring to check for duplicates and added customization to base 
--                             reference
-- Ricky Moss		09/23/2019 Refactoring to check for duplicates and added customization to base 
--                             reference
-- Ricky Moss		02/18/2020 Refactoring to check for duplicates and added customization to base 
--                             reference
-- Doug Albanese	04/09/2021 Refactored to make use of USSP_GBL_BaseReference_SET, and to change 
--                             the branch decisions for insert/update.
-- Doug Albanese	04/09/2021 Added use of IntHACode and IntOrder to call for 
--                             USSP_GBL_BaseReference_SET
-- Doug Albanese	08/02/2021 Added duplication detection
-- Doug Albanese	08/03/2021 Modified duplication detection to handle the existence of previously 
--                             deleted items
-- Doug Albanese	08/09/2021 Refactored against changes, provided by Mark Wilson, to complete the 
--                             work on this
-- Doug Albanese	10/22/2021 intOrder was notbeing used by USP_GBL_BaseReference_SET
-- Stephen Long     07/18/2022 Added site alert logic.
-- Stephen Long     11/01/2022 Changed parameter name @idfsSpeciesType to @IdfsSpeciesType.
-- Ann Xiong		02/24/2023 Implemented Data Audit
-- Ann Xiong		02/27/2023 Called USSP_GBL_BASE_REFERENCE_SET instead of USP_GBL_BaseReference_SET to use its data auditing
-- Ann Xiong		03/06/2023 Updated idfMainObject on tauDataAuditEvent after INSERT INTO dbo.trtSpeciesType
--
-- exec USP_REF_SPECIESTYPE_SET null, 'Aardvark', 'Aardvark', '', 32, 1, 'en'
-- exec USP_REF_SPECIESTYPE_SET 837790000000, 'Buffalo', 'Buffalo', '', 32, 0, 'en'
-- exec USP_REF_SPECIESTYPE_SET 9719060001176, 'Other', 'Other', '', 98, 700, 'en'
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_REF_SPECIESTYPE_SET]
(
    @IdfsSpeciesType BIGINT = NULL,
    @strDefault VARCHAR(200),
    @strName NVARCHAR(200),
    @strCode NVARCHAR(50),
    @intHACode INT,
    @intOrder INT,
    @LangID NVARCHAR(50),
    @EventTypeId BIGINT,
    @SiteId BIGINT,
    @UserId BIGINT,
    @LocationId BIGINT,
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    DECLARE @ReturnMessage NVARCHAR(MAX) = N'SUCCESS',
            @ReturnCode INT = 0,
            @existingDefault BIGINT,
            @existingName BIGINT,
            @DuplicateDefault INT = 0; -- updated to capture 0 or 1. 1 indicates a duplicate and will not execute the set.

    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage NVARCHAR(MAX)
    );

	--Data Audit--
	declare @idfsDataAuditEventType bigint = NULL;
	declare @idfsObjectType bigint = 10017009;                         -- Species
	declare @idfObject bigint = @IdfsSpeciesType;
	declare @idfObjectTable_trtSpeciesType bigint = 75960000000;
	declare @idfDataAuditEvent bigint= NULL;

	DECLARE @trtSpeciesType_BeforeEdit TABLE
	(
        		SpeciesTypeID BIGINT,
        		strCode varchar(200)
	);
	DECLARE @trtSpeciesType_AfterEdit TABLE
	(
        		SpeciesTypeID BIGINT,
        		strCode varchar(200)
	);

	--Data Audit--

    BEGIN TRY
        DECLARE @bNewRecord BIT = 0;

        IF @IdfsSpeciesType IS NULL
        BEGIN -- this is an insert.  check if the strDefault is a duplicate
            IF EXISTS
            (
                SELECT *
                FROM dbo.trtBaseReference
                WHERE strDefault = @strDefault
                      AND idfsReferenceType = 19000086
                      AND trtBaseReference.intRowStatus = 0
            )
            BEGIN
                SET @DuplicateDefault = 1;
            END
        END
        ELSE
        BEGIN -- this is an update.  check if the strDefault is a duplicate
            IF EXISTS
            (
                SELECT *
                FROM dbo.trtBaseReference
                WHERE idfsBaseReference <> @IdfsSpeciesType
                      AND strDefault = @strDefault
                      AND idfsReferenceType = 19000086
                      AND trtBaseReference.intRowStatus = 0
            )
            BEGIN
                SET @DuplicateDefault = 1;
            END
        END

        IF @DuplicateDefault = 1 -- No need to go any further, as the strDefault is a duplicate
        BEGIN
            SET @ReturnMessage = 'DOES EXIST'
        END
        ELSE -- there is no duplicate, so continue
        BEGIN

            --INSERT INTO @SuppressSelect
            --EXEC dbo.USP_GBL_BaseReference_SET @ReferenceID = @IdfsSpeciesType OUTPUT,
            --                                   @ReferenceType = 19000086,
            --                                   @LangID = @LangID,
            --                                   @DefaultName = @strDefault,
            --                                   @NationalName = @strName,
            --                                   @HACode = @intHACode,
            --                                   @Order = @intOrder,
            --                                   @System = 0, 
            --                                   @User = @AuditUserName;

            IF NOT EXISTS
            (
                SELECT *
                FROM dbo.trtSpeciesType
                WHERE idfsSpeciesType = @IdfsSpeciesType
            )
            BEGIN
				--Data Audit--
				-- tauDataAuditEvent Event Type - Create 
				set @idfsDataAuditEventType =10016001;
				-- insert record into tauDataAuditEvent - 
				EXEC USSP_GBL_DataAuditEvent_GET @UserId, @SiteId, @idfsDataAuditEventType,@idfsObjectType,@IdfsSpeciesType, @idfObjectTable_trtSpeciesType, @idfDataAuditEvent OUTPUT
				--Data Audit--

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_BASE_REFERENCE_SET @IdfsSpeciesType OUTPUT,
                                                        19000086,
                                                        @LangID,
                                                        @strDefault,
                                                        @strName,
                                                        @intHACode,
                                                        @intOrder,
                                                        0,
                                                        @AuditUserName,
                                                        @idfDataAuditEvent,
                                                        NULL;

                INSERT INTO dbo.trtSpeciesType
                (
                    idfsSpeciesType,
                    strCode,
                    intRowStatus,
                    rowguid,
                    strMaintenanceFlag,
                    strReservedAttribute,
                    SourceSystemNameID,
                    SourceSystemKeyValue,
                    AuditCreateUser,
                    AuditCreateDTM
                )
                VALUES
                (@IdfsSpeciesType,
                 @strCode,
                 0  ,
                 NEWID(),
                 NULL,
                 NULL,
                 10519002,
                 '[{"idfsSpeciesType":' + CAST(@IdfsSpeciesType AS NVARCHAR(300)) + '}]',
                 @AuditUserName,
                 GETDATE()
                );

				--Data Audit--
				-- Update idfMainObject on tauDataAuditEvent
				UPDATE dbo.tauDataAuditEvent
				SET idfMainObject = @IdfsSpeciesType
				WHERE idfDataAuditEvent = @idfDataAuditEvent;

				INSERT INTO tauDataAuditDetailCreate(idfDataAuditEvent, idfObjectTable, idfObject )
						values ( @idfDataAuditEvent, @idfObjectTable_trtSpeciesType, @IdfsSpeciesType)
				--Data Audit--

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                               @EventTypeId,
                                               @UserId,
                                               @IdfsSpeciesType,
                                               NULL,
                                               @SiteId,
                                               NULL,
                                               @SiteId,
                                               @LocationId,
                                               @AuditUserName;
            END
            ELSE
            BEGIN
                -- Data audit
                INSERT INTO @trtSpeciesType_BeforeEdit
                (
                        SpeciesTypeID,
                        strCode
                 )
                 SELECT 	idfsSpeciesType,
                    		strCode
                 FROM		dbo.trtSpeciesType
                 WHERE 		idfsSpeciesType = @IdfsSpeciesType;

			    --  tauDataAuditEvent  Event Type- Edit 
			    set @idfsDataAuditEventType =10016003;
			    -- insert record into tauDataAuditEvent - 
			    EXEC USSP_GBL_DataAuditEvent_GET @UserId, @SiteId, @idfsDataAuditEventType,@idfsObjectType,@IdfsSpeciesType, @idfObjectTable_trtSpeciesType, @idfDataAuditEvent OUTPUT

                -- End data audit

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_GBL_BASE_REFERENCE_SET @IdfsSpeciesType OUTPUT,
                                                        19000086,
                                                        @LangID,
                                                        @strDefault,
                                                        @strName,
                                                        @intHACode,
                                                        @intOrder,
                                                        0,
                                                        @AuditUserName,
                                                        @idfDataAuditEvent,
                                                        NULL;

                UPDATE dbo.trtSpeciesType
                SET strCode = @strCode,
                    rowguid = ISNULL(rowguid, NEWID()),
                    AuditUpdateUser = @AuditUserName,
                    AuditUpdateDTM = GETDATE()
                WHERE idfsSpeciesType = @IdfsSpeciesType;

                -- Data audit
                INSERT INTO @trtSpeciesType_AfterEdit
                (
                        SpeciesTypeID,
                        strCode
                 )
                 SELECT 	idfsSpeciesType,
                    		strCode
                 FROM		dbo.trtSpeciesType
                 WHERE 		idfsSpeciesType = @IdfsSpeciesType;

                INSERT INTO dbo.tauDataAuditDetailUpdate
                (
                        idfDataAuditEvent,
                        idfObjectTable,
                        idfColumn,
                        idfObject,
                        idfObjectDetail,
                        strOldValue,
                        strNewValue
                )
                SELECT	@idfDataAuditEvent,
                           @idfObjectTable_trtSpeciesType,
                           4578140000000,
                           a.SpeciesTypeID,
                           NULL,
                           b.strCode,
                           a.strCode
                FROM @trtSpeciesType_AfterEdit AS a
                        FULL JOIN @trtSpeciesType_BeforeEdit AS b
                            ON a.SpeciesTypeID = b.SpeciesTypeID
                WHERE (a.strCode <> b.strCode)
                          OR (
                                 a.strCode IS NOT NULL
                                 AND b.strCode IS NULL
                             )
                          OR (
                                 a.strCode IS NULL
                                 AND b.strCode IS NOT NULL
                             );

                -- End data audit

                INSERT INTO @SuppressSelect
                EXECUTE dbo.USP_ADMIN_EVENT_SET-1,
                                               @EventTypeId,
                                               @UserId,
                                               @IdfsSpeciesType,
                                               NULL,
                                               @SiteId,
                                               NULL,
                                               @SiteId,
                                               @LocationId,
                                               @AuditUserName;
            END
        END

        SELECT @ReturnMessage AS ReturnMessage,
               @ReturnCode AS ReturnCode,
               @IdfsSpeciesType AS IdfSpeciesType;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Refreshing Procedure [dbo].[USSP_OMM_CONVERT_CONTACT_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USSP_OMM_CONVERT_CONTACT_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_Contact_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_Contact_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_DEPARTMENTS_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_DEPARTMENTS_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_EMPLOYEEGROUP_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_EMPLOYEEGROUP_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VAS_MONITORING_SESSION_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VAS_MONITORING_SESSION_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET]';


GO
PRINT N'Update complete.';


GO
