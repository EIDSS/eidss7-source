/*
Deployment script for EIDSS7_GG

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO

USE [$(DatabaseName)];


GO

PRINT N'Altering Procedure [dbo].[USP_OMM_Contact_GetList]...';


GO
-- ================================================================================================
-- Name: USP_OMM_Contact_GetList
--
-- Description: Gets a list of contacts for a given outbreak case.
--          
-- Author: Doug Albanese
-- Revision History:
--	Name				Date		Change Detail
--	---------------	----------	--------------------------------------------------------------------
--	Doug Albanese	02/20/2019	Added Procedure to obtain list of contacts for given case
--	Doug Albanese	06/08/2020	Added phone number to the data return
--	Stephen Long	04/08/2022	Added new pagination and sorting parameters and logic.
--	Stephen Long	04/29/2022	Updated parameter names and corrected contact relationship type join.
--	Stephen Long	05/01/2022	Added age and citizenship type name fields and join.
--	Stephen Long	05/03/2022	Added additional rules for removing when today's followups is 
--								checked.
--	Doug Albanese	08/15/2022	Changed ContactStatusTypeID to ContactStatusID, and ContactStatusTypeName to ContactStatusName
--  Stephen Long    10/25/2022  Added additional criteria for outbreak species type eliminate 
--                              duplicates on outbreak sessions with multiple species checked.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_OMM_Contact_GetList]
(
    @LanguageID NVARCHAR(50),
    @PageNumber INT = 1,
    @PageSize INT = 10,
    @SortColumn NVARCHAR(30) = 'ContactName',
    @SortOrder NVARCHAR(4) = 'ASC',
    @CaseID BIGINT = NULL,
    @OutbreakID BIGINT = NULL,
    @SearchTerm NVARCHAR(100) = NULL,
    @TodaysFollowUpsIndicator BIT = NULL
)
AS
BEGIN
    DECLARE @ReturnCode INT = 0;
    DECLARE @ReturnMessage NVARCHAR(MAX) = 'SUCCESS';
    DECLARE @FirstRec INT = (@PageNumber - 1) * @PageSize,
            @LastRec INT = (@PageNumber * @PageSize + 1),
            @TotalRowCount INT;

    DECLARE @Contacts AS TABLE
    (
        TotalRowCount BIGINT NULL,
        CaseContactID BIGINT NULL,
        CaseID BIGINT NULL, 
        OutbreakTypeID BIGINT, 
        DiseaseID BIGINT, 
        ContactedHumanCasePersonID BIGINT NULL,
        PersonalIDTypeID BIGINT NULL, 
        PersonalID NVARCHAR(200) NULL, 
        FirstName NVARCHAR(200) NULL, 
        SecondName NVARCHAR(200) NULL, 
        LastName NVARCHAR(200) NULL, 
        ContactName NVARCHAR(200) NULL,
        DateOfBirth DATETIME NULL, 
        Age INT NULL, 
        GenderTypeID BIGINT NULL, 
        GenderTypeName NVARCHAR(200) NULL,
        CitizenshipTypeID BIGINT NULL, 
        CitizenshipTypeName NVARCHAR(200) NULL, 
        AddressID BIGINT NULL, 
        LocationID BIGINT NULL, 
        AdministrativeLevel0ID BIGINT NULL, 
        AdministrativeLevel1ID BIGINT NULL, 
        AdministrativeLevel2ID BIGINT NULL, 
        SettlementTypeID BIGINT NULL, 
        SettlementID BIGINT NULL, 
        Apartment NVARCHAR(200) NULL, 
        Building NVARCHAR(200) NULL, 
        House NVARCHAR(200) NULL, 
        StreetID BIGINT NULL, 
        Street NVARCHAR(200) NULL,
        PostalCodeID BIGINT NULL, 
        PostalCode NVARCHAR(200) NULL,
        ForeignAddressString NVARCHAR(200) NULL, 
        DateOfLastContact DATETIME NULL,
        PlaceOfLastContact NVARCHAR(200) NULL,
        Comment NVARCHAR(500) NULL,
        ContactTypeID BIGINT NULL,
        ContactTypeName NVARCHAR(200) NULL,
        ContactStatusID BIGINT NULL,
        ContactStatusName NVARCHAR(200) NULL,
        ContactRelationshipTypeID BIGINT NULL,
        ContactRelationshipTypeName NVARCHAR(200) NULL,
        CurrentLocation NVARCHAR(200) NULL,
        ContactTracingObservationID BIGINT NULL,
        ContactTracingDuration INT NULL,
        ContactTracingFrequency INT NULL,
        VeterinaryDiseaseReportTypeID BIGINT NULL, 
        EIDSSPersonID NVARCHAR(50),
        HumanID BIGINT NULL, 
        HumanMasterID BIGINT,
        FarmMasterID BIGINT NULL, 
        ContactPhoneTypeID BIGINT NULL, 
        ContactPhoneCountryCode INT NULL, 
        ContactPhone NVARCHAR(50) NULL
    );

    DECLARE @OutbreakCaseReportUIDs AS TABLE (OutbreakCaseReportUID BIGINT);

    IF COALESCE(@OutbreakID, 0) > 0
    BEGIN
        INSERT INTO @OutbreakCaseReportUIDs
        SELECT OutbreakCaseReportUID
        FROM dbo.OutbreakCaseReport
        WHERE idfOutbreak = @OutbreakId;
    END

    IF COALESCE(@CaseID, 0) > 0
    BEGIN
        INSERT INTO @OutbreakCaseReportUIDs
        SELECT @CaseID;
    END

    IF @TodaysFollowUpsIndicator = 1 
    BEGIN
        SET @SortColumn = 'DateOfLastContact';
        SET @SortOrder = 'ASC';
    END

    BEGIN TRY
        IF COALESCE(@SearchTerm, '') = ''
        BEGIN
            --Get the count of records for pagination
            SELECT @TotalRowCount = COUNT(DISTINCT OutbreakCaseContactUID)
            FROM dbo.OutbreakCaseContact occ
                INNER JOIN @OutbreakCaseReportUIDs ocr
                    ON ocr.OutbreakCaseReportUID = occ.OutBreakCaseReportUID
            WHERE occ.intRowStatus = 0;

            INSERT INTO @Contacts
            (
                TotalRowCount,
                CaseContactID,
                CaseID,
                OutbreakTypeID, 
                DiseaseID, 
                ContactedHumanCasePersonID,
                PersonalIDTypeID,
                PersonalID, 
                FirstName, 
                SecondName, 
                LastName, 
                ContactName,
                DateOfBirth, 
                Age, 
                GenderTypeID,
                GenderTypeName,
                CitizenshipTypeID,
                CitizenshipTypeName, 
                AddressID, 
                LocationID, 
                AdministrativeLevel0ID, 
                AdministrativeLevel1ID, 
                AdministrativeLevel2ID,
                SettlementTypeID, 
                SettlementID, 
                Apartment, 
                Building, 
                House, 
                StreetID, 
                Street, 
                PostalCodeID, 
                PostalCode,
                ForeignAddressString, 
                DateOfLastContact,
                PlaceOfLastContact,
                Comment,
                ContactTypeID,
                ContactTypeName,
                ContactStatusID,
                ContactStatusName,
                ContactRelationshipTypeID,
                ContactRelationshipTypeName,
                CurrentLocation,
                ContactTracingObservationID, 
                ContactTracingDuration,
                ContactTracingFrequency,
                VeterinaryDiseaseReportTypeID, 
                EIDSSPersonID,
                HumanID, 
                HumanMasterID,
                FarmMasterID, 
                ContactPhoneTypeID, 
                ContactPhoneCountryCode,
                ContactPhone
            )
            SELECT 
                @TotalRowCount,
                occ.OutbreakCaseContactUID,
                occ.OutBreakCaseReportUID,
                o.OutbreakTypeID, 
                o.idfsDiagnosisOrDiagnosisGroup, 
                occ.ContactedHumanCasePersonID,
                h.idfsPersonIDType, 
                h.strPersonID, 
                h.strFirstName, 
                h.strSecondName, 
                h.strLastName, 
                h.strLastName + ', ' + h.strFirstName,
                h.datDateofBirth,
                haai.ReportedAge,
                h.idfsHumanGender,
                gender.name,
                h.idfsNationality,
                citizenshipType.name, 
                h.idfCurrentResidenceAddress, 
                geo.idfsLocation, 
                lh.AdminLevel1ID, 
                lh.AdminLevel2ID, 
                lh.AdminLevel3ID, 
                settlement.idfsType, 
                settlement.idfsLocation,
                geo.strApartment, 
                geo.strBuilding, 
                geo.strHouse, 
                st.idfStreet, 
                geo.strStreetName, 
                pc.idfPostalCode,
                geo.strPostCode, 
                geo.strForeignAddress, 
                occ.DateOfLastContact,
                occ.PlaceOfLastContact,
                occ.CommentText,
                occ.ContactTypeID,
                contactType.name,
                occ.ContactStatusID,
                contactStatusType.name,
                occ.ContactRelationshipTypeID,
                contactRelationshipType.name,
                lh.AdminLevel2Name + ' ' + lh.AdminLevel3Name,
                occ.ContactTracingObservationID, 
                osp.ContactTracingDuration,
                osp.ContactTracingFrequency,
                vc.idfsCaseType,
                haai.EIDSSPersonID,
                h.idfHuman, 
                h.idfHumanActual,
                f.idfFarmActual, 
                haai.ContactPhoneNbrTypeID, 
                haai.ContactPhoneCountryCode, 
                haai.ContactPhoneNbr
            FROM dbo.OutbreakCaseContact occ
                LEFT JOIN dbo.OutbreakCaseReport ocr
                    ON ocr.OutBreakCaseReportUID = occ.OutBreakCaseReportUID
                INNER JOIN dbo.tlbOutbreak o 
                    ON o.idfOutbreak = ocr.idfOutbreak
                LEFT JOIN dbo.tlbVetCase vc 
                    ON vc.idfVetCase = ocr.idfVetCase
                LEFT JOIN dbo.OutbreakSpeciesParameter osp
                    ON osp.idfOutbreak = ocr.idfOutbreak 
                LEFT JOIN dbo.tlbHuman h
                    ON h.idfHuman = occ.idfHuman
                LEFT JOIN dbo.HumanActualAddlInfo haai
                    ON haai.HumanActualAddlInfoUID = h.idfHumanActual
                LEFT JOIN dbo.tlbFarm f 
                    ON f.idfHuman = occ.idfHuman 
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000043) gender
                    ON gender.idfsReference = h.idfsHumanGender
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000054) citizenshipType
                    ON citizenshipType.idfsReference = h.idfsNationality
                LEFT JOIN dbo.tlbGeoLocation geo
                    ON h.idfCurrentResidenceAddress = geo.idfGeoLocation
                LEFT JOIN dbo.FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = geo.idfsLocation
                LEFT JOIN dbo.gisLocation settlement
                    ON settlement.idfsLocation = geo.idfsLocation AND settlement.idfsType IS NOT NULL
                LEFT JOIN dbo.tlbStreet st
                    ON st.strStreetName = geo.strStreetName
                LEFT JOIN dbo.tlbPostalCode pc
                    ON pc.strPostCode = geo.strPostCode
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000516) contactType
                    ON contactType.idfsReference = occ.ContactTypeID
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000517) contactStatusType
                    ON contactStatusType.idfsReference = occ.ContactStatusID
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000014) contactRelationshipType
                    ON contactRelationshipType.idfsReference = occ.ContactRelationshipTypeID
                INNER JOIN @OutbreakCaseReportUIDs ocru
                    ON ocru.OutbreakCaseReportUID = occ.OutBreakCaseReportUID
            WHERE occ.intRowStatus = 0
            AND ((ocr.idfVetCase IS NOT NULL AND (
                          vc.idfsCaseType = 10012004
                          AND osp.OutbreakSpeciesTypeID = 10514002
                      )
                  OR (
                         vc.idfsCaseType = 10012003
                         AND osp.OutbreakSpeciesTypeID = 10514003
                     ))
                  OR osp.OutbreakSpeciesTypeID = 10514001 AND ocr.idfHumanCase IS NOT NULL
                     );
        END
        ELSE
        BEGIN
            SELECT @TotalRowCount = COUNT(DISTINCT OutbreakCaseContactUID)
            FROM dbo.OutbreakCaseContact occ
                LEFT JOIN dbo.OutbreakCaseReport ocr
                    ON ocr.OutBreakCaseReportUID = occ.OutBreakCaseReportUID
                LEFT JOIN dbo.OutbreakSpeciesParameter osp
                    ON osp.idfOutbreak = ocr.idfOutbreak
                LEFT JOIN dbo.tlbVetCase vc 
                    ON vc.idfVetCase = ocr.idfVetCase
                LEFT JOIN dbo.tlbHuman h
                    ON h.idfHuman = occ.idfHuman
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000043) gender
                    ON gender.idfsReference = h.idfsHumanGender
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000054) citizenshipType
                    ON citizenshipType.idfsReference = h.idfsNationality
                LEFT JOIN dbo.tlbGeoLocation geo
                    ON h.idfCurrentResidenceAddress = geo.idfGeoLocation
                LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = geo.idfsLocation
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000517) contactStatusType
                    ON contactStatusType.idfsReference = occ.ContactStatusID
                INNER JOIN @OutbreakCaseReportUIDs ocru
                    ON ocru.OutbreakCaseReportUID = occ.OutBreakCaseReportUID
            WHERE occ.intRowStatus = 0
                        AND ((ocr.idfVetCase IS NOT NULL AND (
                          vc.idfsCaseType = 10012004
                          AND osp.OutbreakSpeciesTypeID = 10514002
                      )
                  OR (
                         vc.idfsCaseType = 10012003
                         AND osp.OutbreakSpeciesTypeID = 10514003
                     ))
                  OR osp.OutbreakSpeciesTypeID = 10514001 AND ocr.idfHumanCase IS NOT NULL
                     )
                  AND (
                          occ.OutbreakCaseContactUID LIKE '%' + @SearchTerm + '%'
                          OR occ.ContactedHumanCasePersonID LIKE '%' + @SearchTerm + '%'
                          OR h.strLastName LIKE '%' + @SearchTerm + '%'
                          OR h.strFirstName LIKE '%' + @SearchTerm + '%'
                          OR occ.DateOfLastContact LIKE '%' + @SearchTerm + '%'
                          OR contactStatusType.name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel2Name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel3Name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel4Name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel5Name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel6Name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel7Name LIKE '%' + @SearchTerm + '%'
                          OR gender.name LIKE '%' + @SearchTerm + '%'
                      );

            INSERT INTO @Contacts
            (
                TotalRowCount,
                CaseContactID,
                CaseID,
                OutbreakTypeID, 
                DiseaseID, 
                ContactedHumanCasePersonID,
                PersonalIDTypeID, 
                PersonalID, 
                FirstName, 
                SecondName, 
                LastName, 
                ContactName,
                DateOfBirth, 
                Age, 
                GenderTypeID,
                GenderTypeName,
                CitizenshipTypeID,
                CitizenshipTypeName, 
                AddressID, 
                LocationID, 
                AdministrativeLevel0ID, 
                AdministrativeLevel1ID, 
                AdministrativeLevel2ID, 
                SettlementTypeID, 
                SettlementID, 
                Apartment, 
                Building, 
                House, 
                StreetID, 
                Street, 
                PostalCodeID, 
                PostalCode,
                ForeignAddressString, 
                DateOfLastContact,
                PlaceOfLastContact,
                Comment,
                ContactTypeID,
                ContactTypeName,
                ContactStatusID,
                ContactStatusName,
                ContactRelationshipTypeID,
                ContactRelationshipTypeName,
                CurrentLocation,
                ContactTracingObservationID, 
                ContactTracingDuration,
                ContactTracingFrequency,
                VeterinaryDiseaseReportTypeID, 
                EIDSSPersonID,
                HumanID, 
                HumanMasterID,
                FarmMasterID, 
                ContactPhoneTypeID, 
                ContactPhoneCountryCode,
                ContactPhone
            )
            SELECT DISTINCT
                @TotalRowCount,
                occ.OutbreakCaseContactUID,
                occ.OutBreakCaseReportUID,
                o.OutbreakTypeID, 
                o.idfsDiagnosisOrDiagnosisGroup, 
                occ.ContactedHumanCasePersonID,
                h.idfsPersonIDType, 
                h.strPersonID, 
                h.strFirstName, 
                h.strSecondName, 
                h.strLastName, 
                h.strLastName + ', ' + h.strFirstName,
                h.datDateofBirth,
                haai.ReportedAge, 
                h.idfsHumanGender,
                gender.name,
                h.idfsNationality,
                citizenshipType.name,
                h.idfCurrentResidenceAddress, 
                geo.idfsLocation, 
                lh.AdminLevel1ID, 
                lh.AdminLevel2ID, 
                lh.AdminLevel3ID, 
                settlement.idfsType, 
                settlement.idfsLocation,
                geo.strApartment, 
                geo.strBuilding, 
                geo.strHouse, 
                st.idfStreet, 
                geo.strStreetName, 
                pc.idfPostalCode, 
                geo.strPostCode, 
                geo.strForeignAddress, 
                occ.DateOfLastContact,
                occ.PlaceOfLastContact,
                occ.CommentText,
                occ.ContactTypeID,
                contactType.name,
                occ.ContactStatusID,
                contactStatusType.name,
                occ.ContactRelationshipTypeID,
                contactRelationshipType.name,
                lh.AdminLevel2Name + ' ' + lh.AdminLevel3Name,
                occ.ContactTracingObservationID, 
                osp.ContactTracingDuration,
                osp.ContactTracingFrequency,
                vc.idfsCaseType,
                haai.EIDSSPersonID,
                h.idfHuman, 
                h.idfHumanActual,
                f.idfFarmActual, 
                haai.ContactPhoneNbrTypeID, 
                haai.ContactPhoneCountryCode, 
                haai.ContactPhoneNbr
            FROM dbo.OutbreakCaseContact occ
                LEFT JOIN dbo.OutbreakCaseReport ocr
                    ON ocr.OutBreakCaseReportUID = occ.OutBreakCaseReportUID
                LEFT JOIN dbo.tlbVetCase vc 
                    ON vc.idfVetCase = ocr.idfVetCase
                INNER JOIN dbo.tlbOutbreak o 
                    ON o.idfOutbreak = ocr.idfOutbreak
                LEFT JOIN dbo.OutbreakSpeciesParameter osp
                    ON osp.idfOutbreak = ocr.idfOutbreak
                LEFT JOIN dbo.tlbHuman h
                    ON h.idfHuman = occ.idfHuman
                LEFT JOIN dbo.HumanActualAddlInfo haai
                    ON haai.HumanActualAddlInfoUID = h.idfHumanActual
                LEFT JOIN dbo.tlbFarm f 
                    ON f.idfHuman = occ.idfHuman 
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000043) gender
                    ON gender.idfsReference = h.idfsHumanGender
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000054) citizenshipType
                    ON citizenshipType.idfsReference = h.idfsNationality
                LEFT JOIN dbo.tlbGeoLocation geo
                    ON h.idfCurrentResidenceAddress = geo.idfGeoLocation
                LEFT JOIN FN_GBL_LocationHierarchy_Flattened(@LanguageID) lh
                    ON lh.idfsLocation = geo.idfsLocation
                LEFT JOIN dbo.gisLocation settlement
                    ON settlement.idfsLocation = geo.idfsLocation AND settlement.idfsType IS NOT NULL
                LEFT JOIN dbo.tlbStreet st
                    ON st.strStreetName = geo.strStreetName
                LEFT JOIN dbo.tlbPostalCode pc
                    ON pc.strPostCode = geo.strPostCode
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000516) contactType
                    ON contactType.idfsReference = occ.ContactTypeID
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000517) contactStatusType
                    ON contactStatusType.idfsReference = occ.ContactStatusID
                LEFT JOIN dbo.FN_GBL_Reference_GetList(@LanguageID, 19000014) contactRelationshipType
                    ON contactRelationshipType.idfsReference = occ.ContactRelationshipTypeID
                INNER JOIN @OutbreakCaseReportUIDs ocru
                    ON ocru.OutbreakCaseReportUID = occ.OutBreakCaseReportUID
            WHERE occ.intRowStatus = 0
                        AND ((ocr.idfVetCase IS NOT NULL AND (
                          vc.idfsCaseType = 10012004
                          AND osp.OutbreakSpeciesTypeID = 10514002
                      )
                  OR (
                         vc.idfsCaseType = 10012003
                         AND osp.OutbreakSpeciesTypeID = 10514003
                     ))
                  OR osp.OutbreakSpeciesTypeID = 10514001 AND ocr.idfHumanCase IS NOT NULL
                     )
                  AND (
                          occ.OutbreakCaseContactUID LIKE '%' + @SearchTerm + '%'
                          OR occ.ContactedHumanCasePersonID LIKE '%' + @SearchTerm + '%'
                          OR h.strLastName LIKE '%' + @SearchTerm + '%'
                          OR h.strFirstName LIKE '%' + @SearchTerm + '%'
                          OR gender.name LIKE '%' + @SearchTerm + '%'
                          OR occ.DateOfLastContact LIKE '%' + @SearchTerm + '%'
                          OR contactStatusType.name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel2Name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel3Name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel4Name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel5Name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel6Name LIKE '%' + @SearchTerm + '%'
                          OR lh.AdminLevel7Name LIKE '%' + @SearchTerm + '%'
                      );
        END

        IF @TodaysFollowUpsIndicator = 1
        BEGIN
            DELETE FROM @Contacts
            WHERE ContactTracingFrequency IS NULL
                  OR ContactTracingDuration IS NULL
                  OR ContactStatusID IN (10517002, 10517003, 10517004, 10517005);

            DELETE FROM @Contacts
            WHERE CaseContactID NOT IN (
                                                    SELECT CaseContactID
                                                    FROM @Contacts
                                                    WHERE (
                                                              DateOfLastContact > DATEADD(
                                                                                             DAY,
                                                                                             -ContactTracingDuration,
                                                                                             GETDATE()
                                                                                         )
                                                              AND DATEDIFF(DAY, DateOfLastContact, GETDATE())
                                                                  % ContactTracingFrequency = 0
                                                          )
                                                          OR ContactTracingFrequency IS NULL
                                                );
        END

        SELECT CaseContactID,
            CaseID, 
            OutbreakTypeID, 
            DiseaseID, 
            ContactedHumanCasePersonID,
            PersonalIDTypeID, 
            PersonalID, 
            FirstName, 
            SecondName, 
            LastName, 
            ContactName,
            DateOfBirth, 
            Age, 
            GenderTypeID,
            GenderTypeName,
            CitizenshipTypeID,
            CitizenshipTypeName, 
            AddressID, 
            LocationID, 
            AdministrativeLevel0ID, 
            AdministrativeLevel1ID, 
            AdministrativeLevel2ID,
            SettlementTypeID, 
            SettlementID, 
            Apartment, 
            Building, 
            House, 
            StreetID, 
            Street, 
            PostalCodeID, 
            PostalCode,
            ForeignAddressString, 
            DateOfLastContact,
            PlaceOfLastContact,
            Comment,
            ContactTypeID,
            ContactTypeName,
            ContactStatusID,
            ContactStatusName,
            ContactRelationshipTypeID,
            ContactRelationshipTypeName,
            CurrentLocation,
            ContactTracingObservationID, 
            ContactTracingDuration,
            ContactTracingFrequency,
            VeterinaryDiseaseReportTypeID, 
            EIDSSPersonID,
            HumanID, 
            HumanMasterID,
            FarmMasterID, 
            ContactPhoneTypeID, 
            ContactPhoneCountryCode,
            ContactPhone,
            RowAction,
            [RowCount],
            TotalRowCount,
            CurrentPage,
            TotalPages
        FROM
        (
            SELECT ROW_NUMBER() OVER (ORDER BY CASE
                                                   WHEN @SortColumn = 'ContactTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ContactTypeName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ContactTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ContactTypeName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ContactName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ContactName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ContactName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ContactName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'ContactRelationTypeName'
                                                        AND @SortOrder = 'ASC' THEN
                                                       ContactRelationshipTypeName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'ContactRelationTypeName'
                                                        AND @SortOrder = 'DESC' THEN
                                                       ContactRelationshipTypeName
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'DateOfLastContact'
                                                        AND @SortOrder = 'ASC' THEN
                                                       DateOfLastContact
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'DateOfLastContact'
                                                        AND @SortOrder = 'DESC' THEN
                                                       DateOfLastContact
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'PlaceOfLastContact'
                                                        AND @SortOrder = 'ASC' THEN
                                                       PlaceOfLastContact
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'PlaceOfLastContact'
                                                        AND @SortOrder = 'DESC' THEN
                                                       PlaceOfLastContact
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'CurrentLocation'
                                                        AND @SortOrder = 'ASC' THEN
                                                       CurrentLocation
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'CurrentLocation'
                                                        AND @SortOrder = 'DESC' THEN
                                                       CurrentLocation
                                               END DESC,
                                               CASE
                                                   WHEN @SortColumn = 'Gender'
                                                        AND @SortOrder = 'ASC' THEN
                                                       GenderTypeName
                                               END ASC,
                                               CASE
                                                   WHEN @SortColumn = 'Gender'
                                                        AND @SortOrder = 'DESC' THEN
                                                       GenderTypeName
                                               END DESC
                                     ) AS RowNum,
                   CaseContactID,
                   CaseID, 
                   OutbreakTypeID, 
                   DiseaseID, 
                   ContactedHumanCasePersonId,
                   PersonalIDTypeID, 
                   PersonalID, 
                   FirstName, 
                   SecondName, 
                   LastName, 
                   ContactName,
                   DateOfBirth, 
                   Age, 
                   GenderTypeID, 
                   GenderTypeName,
                   CitizenshipTypeID, 
                   CitizenshipTypeName, 
                   AddressID, 
                   LocationID, 
                   AdministrativeLevel0ID, 
                   AdministrativeLevel1ID, 
                   AdministrativeLevel2ID,
                   SettlementTypeID, 
                   SettlementID, 
                   Apartment, 
                   Building, 
                   House,
                   StreetID, 
                   Street, 
                   PostalCodeID, 
                   PostalCode, 
                   ForeignAddressString, 
                   DateOfLastContact,
                   PlaceOfLastContact,
                   Comment,
                   ContactTypeID,
                   ContactTypeName,
                   ContactStatusID,
                   ContactStatusName,
                   ContactRelationshipTypeID,
                   ContactRelationshipTypeName,
                   CurrentLocation,
                   ContactTracingObservationID, 
                   ContactTracingDuration,
                   ContactTracingFrequency,
                   VeterinaryDiseaseReportTypeID, 
                   EIDSSPersonID,
                   HumanID, 
                   HumanMasterID,
                   FarmMasterID, 
                   ContactPhoneTypeID, 
                   ContactPhoneCountryCode, 
                   ContactPhone,
                   0 AS RowAction,
                   COUNT(*) OVER () AS [RowCount],
                   @TotalRowCount AS TotalRowCount,
                   CurrentPage = @PageNumber,
                   TotalPages = (@TotalRowCount / @PageSize) + IIF(COUNT(*) % @PageSize > 0, 1, 0)
            FROM @Contacts
            GROUP BY CaseContactID,
                   CaseID,
                   OutbreakTypeID, 
                   DiseaseID, 
                   ContactedHumanCasePersonID,
                   PersonalIDTypeID, 
                   PersonalID, 
                   FirstName, 
                   SecondName, 
                   LastName, 
                   ContactName,
                   DateOfBirth, 
                   Age, 
                   GenderTypeID, 
                   GenderTypeName,
                   CitizenshipTypeID, 
                   CitizenshipTypeName, 
                   AddressID, 
                   LocationID, 
                   AdministrativeLevel0ID, 
                   AdministrativeLevel1ID, 
                   AdministrativeLevel2ID,
                   SettlementTypeID, 
                   SettlementID, 
                   Apartment, 
                   Building, 
                   House, 
                   StreetID, 
                   Street, 
                   PostalCodeID, 
                   PostalCode, 
                   ForeignAddressString, 
                   DateOfLastContact,
                   PlaceOfLastContact,
                   Comment,
                   ContactTypeID,
                   ContactTypeName,
                   ContactStatusID,
                   ContactStatusName,
                   ContactRelationshipTypeID,
                   ContactRelationshipTypeName,
                   CurrentLocation,
                   ContactTracingObservationID, 
                   ContactTracingDuration,
                   ContactTracingFrequency,
                   VeterinaryDiseaseReportTypeID, 
                   EIDSSPersonID,
                   HumanID, 
                   HumanMasterID,
                   FarmMasterID, 
                   ContactPhoneTypeID, 
                   ContactPhoneCountryCode, 
                   ContactPhone
        ) AS x
        WHERE RowNum > @FirstRec
              AND RowNum < @LastRec
        ORDER BY RowNum;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT = 1
            ROLLBACK;
        throw;
    END CATCH;

END;
GO
PRINT N'Altering Procedure [dbo].[USSP_OMM_CONTACT_SET]...';


GO
-- ================================================================================================
-- Name: USSP_OMM_CONTACT_SET
--
-- Description: Adds or updates outbreak contacts.
--          
-- Author: Doug Albanese
--
-- Revision History:
-- Name                Date		Change Detail
-- ------------------	----------	-----------------------------------------------------------
-- Doug Albanese		08/07/2019	Initial release 
-- Stephen Long        04/12/2022	Cleaned up formatting, and updated Source fields.
-- Doug Albanese		04/30/2022	Corrected case senstive characters for the JSON blob for 
--                                  contact information.
-- Stephen Long         06/06/2022  Corrected casing on Human Master ID to Human Master Id.
-- Stephen Long         06/23/2022  Corrected name of tracing observation ID to match JSON.
-- Stephen Long         06/27/2022  Changed insert from 0 to 1 to match app enumeration.
-- Doug Albanese		08/12/2022	Case Sensitivity changes for "Id" to "ID", so that the JSON 
--                                  data can be picked up
-- Doug Albanese		08/12/2022	Changed OutbreakCaseContactID to CaseContactID, to keep 
--                                  consistent between Vet Case and Human Case
-- Stephen Long         09/20/2022  Made all identifiers use "ID".  Some fields were not saving 
--                                  correctly with the case sensitivity.
-- Stephen Long         10/25/2022  Added logic to add a farm copy when creating a veterinary 
--                                  case contact.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_OMM_CONTACT_SET]
(
    @HumanDiseaseReportId BIGINT = NULL,
    @ContactsParameters NVARCHAR(MAX) = NULL,
    @User NVARCHAR(200) = NULL,
    @OutBreakCaseReportUID BIGINT = NULL,
    @FunctionCall INT = 0
)
AS
BEGIN
    DECLARE @SuppressSelect TABLE
    (
        ReturnCode INT,
        ReturnMessage VARCHAR(200)
    );

    DECLARE @ContactedHumanCasePersonID BIGINT = NULL,
            @ContactTypeID BIGINT = NULL,
            @HumanMasterID BIGINT = NULL,
            @HumanID BIGINT = NULL,
			@FarmMasterID BIGINT = NULL, 
            @DateOfLastContact DATETIME2 = NULL,
            @PlaceOfLastContact NVARCHAR(200) = NULL,
            @Comments NVARCHAR(200) = NULL,
            @ContactRelationshipTypeID BIGINT = NULL,
            @ContactStatusTypeID BIGINT = NULL,
            @RowStatus INT = NULL,
            @RowAction INT = NULL,
            @OutbreakCaseContactUID BIGINT = NULL,
            @TracingObservationID BIGINT = NULL,
            @ReturnMessage NVARCHAR(MAX) = 'Success',
            @ReturnCode BIGINT = 0;
			
    DECLARE @ContactsTemp TABLE
    (
        ContactedHumanCasePersonID BIGINT NULL,
        ContactTypeID BIGINT NULL,
        HumanMasterID BIGINT NULL,
		HumanID BIGINT NULL, 
		FarmMasterID BIGINT NULL, 
        DateOfLastContact DATETIME2 NULL,
        PlaceOfLastContact NVARCHAR(200),
		RowStatus INT NULL,
		RowAction INT NULL,
		Comment NVARCHAR(200),
		ContactTracingObservationID BIGINT NULL,
		ContactRelationshipTypeID BIGINT NULL,
		ContactStatusID BIGINT NULL,
		CaseContactID BIGINT NULL
    );
	
    INSERT INTO @ContactsTemp
    SELECT *
    FROM
        OPENJSON(@ContactsParameters)
        WITH
        (
            ContactedHumanCasePersonID BIGINT,
            ContactTypeID BIGINT,
            HumanMasterID BIGINT,
			HumanID BIGINT, 
			FarmMasterID BIGINT, 
			DateOfLastContact DATETIME2,
            PlaceOfLastContact NVARCHAR(200),
			RowStatus INT,
			RowAction INT,
            Comment NVARCHAR(200),
			ContactTracingObservationID BIGINT,
			ContactRelationshipTypeID BIGINT,
			ContactStatusID BIGINT,
			CaseContactID BIGINT
        );
	
	BEGIN TRY
        WHILE EXISTS (SELECT * FROM @ContactsTemp)
        BEGIN
            SELECT TOP 1
                @ContactedHumanCasePersonID = ContactedHumanCasePersonID,
                @ContactTypeID = ContactTypeID,
                @HumanMasterID = HumanMasterID,
				@HumanID = HumanID, 
				@FarmMasterID = FarmMasterID, 
                @DateOfLastContact = DateOfLastContact,
                @PlaceOfLastContact = PlaceOfLastContact,
                @Comments = Comment,
                @ContactRelationshipTypeID = ContactRelationshipTypeID,
                @ContactStatusTypeID = ContactStatusID,
                @RowStatus = RowStatus,
                @RowAction = RowAction,
                @OutbreakCaseContactUID = CaseContactID,
                @TracingObservationID = ContactTracingObservationID
            FROM @ContactsTemp;

			IF @RowAction = 1 --Insert
			BEGIN
	            IF @FarmMasterID IS NULL
				BEGIN
				    INSERT INTO @SuppressSelect
                    EXECUTE dbo.USP_HUM_COPYHUMANACTUALTOHUMAN @HumanMasterID,
                                                               @HumanID OUTPUT,
                                                               @ReturnCode OUTPUT,
                                                               @ReturnMessage OUTPUT;
				END
				ELSE
				BEGIN
				    DECLARE @FarmID BIGINT;
				    INSERT INTO @SuppressSelect
                    EXECUTE dbo.USSP_VET_FARM_COPY @User,
                                                   @FarmMasterID,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   NULL,
                                                   @HumanMasterID,
                                                   @FarmID OUTPUT,
                                                   @HumanID OUTPUT;
				END
			END;
				
            IF @HumanDiseaseReportId IS NOT NULL
            BEGIN
                IF NOT EXISTS
                (
                    SELECT idfContactedCasePerson
                    FROM dbo.tlbContactedCasePerson
                    WHERE idfContactedCasePerson = @ContactedHumanCasePersonID
                          AND intRowStatus = 0
                )
					BEGIN
						IF @FunctionCall = 0
							BEGIN
								EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbContactedCasePerson', @ContactedHumanCasePersonID OUTPUT;
							END
						ELSE
							BEGIN
								INSERT INTO @SuppressSelect
								EXEC dbo.USP_GBL_NEXTKEYID_GET 'tlbContactedCasePerson', @ContactedHumanCasePersonID OUTPUT;
							END
							
						INSERT INTO dbo.tlbContactedCasePerson
						(
							idfContactedCasePerson,
							idfsPersonContactType,
							idfHuman,
							idfHumanCase,
							datDateOfLastContact,
							strPlaceInfo,
							intRowStatus,
							strComments,
							SourceSystemKeyValue,
							SourceSystemNameID,
							AuditCreateUser,
							AuditCreateDTM
						)
						VALUES
						(
							@ContactedHumanCasePersonID,
							@ContactTypeID,
							@HumanID,
							@HumanDiseaseReportID,
							@DateOfLastContact,
							@PlaceOfLastContact,
							@RowStatus,
							@Comments,
							'[{"idfContactedCasePerson":' + CAST(@ContactedHumanCasePersonID AS NVARCHAR(300)) + '}]',
							10519001,
							@User,
							GETDATE()
						)
					END
                ELSE
					BEGIN
						IF @RowAction = 3 -- Delete
						BEGIN
							SET @RowStatus = 1
						END
						ELSE
						BEGIN
							SET @RowStatus = 0
						END

						UPDATE dbo.tlbContactedCasePerson
						SET idfsPersonContactType = @ContactTypeID,
							idfHuman = @HumanID,
							idfHumanCase = @HumanDiseaseReportID,
							datDateOfLastContact = @DateOfLastContact,
							strPlaceInfo = @PlaceOfLastContact,
							intRowStatus = @RowStatus,
							rowguid = NEWID(),
							strComments = @Comments,
							strMaintenanceFlag = '',
							strReservedAttribute = '',
							AuditUpdateUser = @User,
							AuditCreateDTM = GETDATE()
						WHERE idfContactedCasePerson = @ContactedHumanCasePersonID
							  AND intRowStatus = 0;
					END
            END
			
            IF NOT EXISTS
            (
                SELECT OutbreakCaseContactUID
                FROM dbo.OutbreakCaseContact
                WHERE OutbreakCaseContactUID = @OutbreakCaseContactUID
                      AND intRowStatus = 0
            )
            BEGIN
                IF @FunctionCall = 0
					BEGIN
						EXEC dbo.USP_GBL_NEXTKEYID_GET 'OutbreakCaseContact',
													   @OutbreakCaseContactUID OUTPUT;
					END
                ELSE
					BEGIN
						INSERT INTO @SuppressSelect
						EXEC dbo.USP_GBL_NEXTKEYID_GET 'OutbreakCaseContact',
													   @OutbreakCaseContactUID OUTPUT;
					END

					INSERT INTO OutbreakCaseContact
					(
						OutbreakCaseContactUID,
						OutbreakCaseReportUID,
						ContactTypeID,
						ContactedHumanCasePersonID,
						idfHuman,
						ContactRelationshipTypeID,
						DateOfLastContact,
						PlaceOfLastContact,
						CommentText,
						ContactStatusID,
						ContactTracingObservationID,
						intRowStatus,
						SourceSystemNameID,
						SourceSystemKeyValue,
						AuditCreateUser,
						AuditCreateDTM
					)
					VALUES
					(
						@OutbreakCaseContactUID,
						@OutBreakCaseReportUID,
						@ContactTypeID,
						@ContactedHumanCasePersonID,
						@HumanID,
						@ContactRelationshipTypeID,
						@DateOfLastContact,
						@PlaceOfLastContact,
						@Comments,
						@ContactStatusTypeID,
						@TracingObservationID,
						@RowStatus,
						10519001,
						'[{"OutbreakCaseContactUID":' + CAST(@OutbreakCaseContactUID AS NVARCHAR(300)) + '}]',
						@User,
						GETDATE()
					);
				END
            ELSE
				BEGIN
					IF @RowAction = 3 -- Delete
					BEGIN
						SET @RowStatus = 1;
					END
					ELSE
					BEGIN
						SET @RowStatus = 0;
					END

					UPDATE dbo.OutbreakCaseContact
					SET ContactTypeID = @ContactTypeID,
						ContactRelationshipTypeID = @ContactRelationshipTypeID,
						DateOfLastContact = @DateOfLastContact,
						PlaceOfLastContact = @PlaceOfLastContact,
						CommentText = @Comments,
						ContactStatusID = @ContactStatusTypeID,
						ContactTracingObservationID = @TracingObservationID,
						intRowStatus = @RowStatus,
						AuditUpdateUser = @User,
						AuditUpdateDTM = GETDATE()
					WHERE OutbreakCaseContactUID = @OutbreakCaseContactUID;
				END
			
            SET ROWCOUNT 1;
            DELETE FROM @ContactsTemp;
            SET ROWCOUNT 0;
        END
    END TRY
    BEGIN CATCH
        THROW
    END CATCH;
END
GO
PRINT N'Altering Procedure [dbo].[USSP_OMM_CONVERT_CONTACT_Set]...';


GO
-- ================================================================================================
-- Name: USSP_OMM_CONVERT_CONTACT_Set
-- Description: Inserts a new case for a contact being converted to a case.
--          
-- Revision History:
-- Name                    Date       Change Detail
-- ----------------------- ---------- ------------------------------------------------------------
-- Stephen Long            06/05/2022 Initial release
-- Stephen Long            10/25/2022 Added logic to convert veterinary contact to a veterinary 
--                                    case.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USSP_OMM_CONVERT_CONTACT_Set]
(
    @OutbreakID BIGINT = NULL,
    @CaseContactID BIGINT, 
    @HumanMasterID BIGINT,
    @HumanID BIGINT, 
    @FarmMasterID BIGINT = NULL, 
    @GeolocationID BIGINT = NULL,
    @LocationID BIGINT = NULL,
    @Street NVARCHAR(200) = NULL,
    @Apartment NVARCHAR(200) = NULL,
    @Building NVARCHAR(200) = NULL,
    @House NVARCHAR(200) = NULL,
    @PostalCode NVARCHAR(200) = NULL,
    @Latitude FLOAT = NULL,
    @Longitude FLOAT = NULL,
    @Elevation FLOAT = NULL,
    @CaseStatusTypeID BIGINT = NULL,
    @CaseClassificationTypeID BIGINT = NULL,
    @AuditUserName NVARCHAR(100) = NULL
)
AS
BEGIN
    DECLARE @ReturnCode INT = 0,
            @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
            @CaseID BIGINT = NULL,
            @EIDSSCaseID NVARCHAR(50) = NULL,
            @DiseaseReportID BIGINT = NULL;

    BEGIN TRY
        IF @FarmMasterID IS NULL
        BEGIN
            EXEC dbo.USP_GBL_NEXTKEYID_GET 'OutbreakCaseReport', @CaseID OUTPUT;

            EXEC dbo.USP_GBL_NextNumber_GET 'Human Outbreak Case',
                                            @EIDSSCaseID OUTPUT,
                                            NULL;

            EXEC dbo.USP_OMM_HUMAN_DISEASE_SET @DiseaseReportID OUTPUT,
                                               @idfHuman = @HumanID, 
                                               @strHumanCaseId = @EIDSSCaseID,
                                               @OutbreakCaseReportUID = @CaseID,
                                               @idfHumanActual = @HumanMasterID,
                                               @idfsFinalDiagnosis = NULL,
                                               @datDateOfDiagnosis = NULL,
                                               @datNotificationDate = NULL,
                                               @idfsFinalState = NULL,
                                               @idfSentByOffice = NULL,
                                               @idfSentByPerson = NULL,
                                               @idfReceivedByOffice = NULL,
                                               @idfReceivedByPerson = NULL,
                                               @idfHospital = NULL,
                                               @datOnSetDate = NULL,
                                               @idfsYNHospitalization = NULL,
                                               @datHospitalizationDate = NULL,
                                               @datDischargeDate = NULL,
                                               @strHospitalName = NULL,
                                               @idfsYNAntimicrobialTherapy = NULL,
                                               @strClinicalNotes = NULL,
                                               @strNote = NULL,
                                               @idfsYNSpecIFicVaccinationAdministered = NULL,
                                               @idfInvestigatedByOffice = NULL,
                                               @idfInvestigatedByPerson = NULL,
                                               @StartDateofInvestigation = NULL,
                                               @idfOutbreak = @OutbreakID,
                                               @CaseGeoLocationID = @GeolocationID,
                                               @CaseidfsLocation = @LocationID,
                                               @CasestrStreetName = @Street,
                                               @CasestrApartment = @Apartment,
                                               @CasestrBuilding = @Building,
                                               @CasestrHouse = @House,
                                               @CaseidfsPostalCode = @PostalCode,
                                               @CasestrLatitude = @Latitude,
                                               @CasestrLongitude = @Longitude,
                                               @CasestrElevation = @Elevation,
                                               @SamplesParameters = NULL,
                                               @idfsYNSpecimenCollected = NULL,
                                               @idfsYNTestsConducted = NULL,
                                               @TestsParameters = NULL,
                                               @AntiviralTherapiesParameters = NULL,
                                               @VaccinationsParameters = NULL,
                                               @CaseMonitoringsParameters = NULL,
                                               @User = @AuditUserName,
                                               @idfEpiObservation = NULL,
                                               @idfCSObservation = NULL;

            INSERT INTO dbo.OutbreakCaseReport
            (
                OutBreakCaseReportUID,
                idfOutbreak,
                strOutbreakCaseID,
                idfHumanCase,
                idfVetCase,
                OutbreakCaseStatusID,
                OutbreakCaseClassificationID,
                IsPrimaryCaseFlag,
                intRowStatus,
                AuditCreateUser,
                AuditCreateDTM,
                AuditUpdateUser,
                AuditUpdateDTM
            )
            VALUES
            (@CaseID,
             @OutbreakID,
             @EIDSSCaseID,
             @DiseaseReportID,
             NULL,
             @CaseStatusTypeID,
             @CaseClassificationTypeID,
             0  ,
             0  ,
             @AuditUserName,
             GETDATE(),
             NULL,
             NULL
            );
        END
        ELSE
        BEGIN
            DECLARE @SiteID BIGINT = (SELECT idfsSite FROM dbo.tlbOutbreak WHERE idfOutbreak = @OutbreakID);
            DECLARE @DiseaseID BIGINT = (SELECT idfsDiagnosisOrDiagnosisGroup FROM dbo.tlbOutbreak WHERE idfOutbreak = @OutbreakID);
            DECLARE @ReportTypeID BIGINT = (SELECT vc.idfsCaseType FROM dbo.OutbreakCaseContact occ
                INNER JOIN dbo.OutbreakCaseReport ocr 
                    ON ocr.OutBreakCaseReportUID = occ.OutBreakCaseReportUID 
                INNER JOIN dbo.tlbVetCase vc 
                    ON vc.idfVetCase = ocr.idfVetCase 
                WHERE occ.OutbreakCaseContactUID = @CaseContactID);
            DECLARE @EnteredDate DATETIME = GETDATE();

            EXEC dbo.USP_VET_DISEASE_REPORT_SET @DiseaseReportID = -1,
                                                @EIDSSReportID = NULL,
                                                @FarmID = NULL,
                                                @FarmMasterID = @FarmMasterID,
                                                @FarmOwnerID = NULL,
                                                @MonitoringSessionID = NULL,
                                                @OutbreakID = @OutbreakID,
                                                @RelatedToDiseaseReportID = NULL,
                                                @EIDSSFieldAccessionID = NULL,
                                                @DiseaseID = @DiseaseID,
                                                @EnteredByPersonID = NULL,
                                                @ReportedByOrganizationID = NULL,
                                                @ReportedByPersonID = NULL,
                                                @InvestigatedByOrganizationID = NULL,
                                                @InvestigatedByPersonID = NULL,
                                                @ReceivedByOrganizationID = NULL,
                                                @ReceivedByPersonID = NULL,
                                                @SiteID = @SiteID,
                                                @DiagnosisDate = NULL,
                                                @EnteredDate = @EnteredDate, 
                                                @ReportDate = NULL,
                                                @AssignedDate = NULL,
                                                @InvestigationDate = NULL,
                                                @RowStatus = 0,
                                                @ReportTypeID = NULL,
                                                @ClassificationTypeID = NULL,
                                                @StatusTypeID = 10109001, -- In Progress
                                                @ReportCategoryTypeID = @ReportTypeID, -- Avian or Livestock
                                                @FarmTotalAnimalQuantity = NULL,
                                                @FarmSickAnimalQuantity = NULL,
                                                @FarmDeadAnimalQuantity = NULL,
                                                @FarmLatitude = NULL,
                                                @FarmLongitude = NULL,
                                                @FarmEpidemiologicalObservationID = NULL,
                                                @ControlMeasuresObservationID = NULL,
                                                @TestsConductedIndicator = NULL,
                                                @AuditUserName = @AuditUserName,
                                                @FlocksOrHerds = NULL,
                                                @Species = NULL,
                                                @Animals = NULL,
                                                @Vaccinations = NULL,
                                                @Samples = NULL,
                                                @PensideTests = NULL,
                                                @LaboratoryTests = NULL,
                                                @LaboratoryTestInterpretations = NULL,
                                                @CaseLogs = NULL,
                                                @ClinicalInformation = NULL,
                                                @Contacts = NULL,
                                                @CaseMonitorings = NULL,
                                                @Events = NULL,
                                                @UserID = 0,
                                                @LinkLocalOrFieldSampleIDToReportID = 0,
                                                @OutbreakCaseIndicator = 1,
                                                @OutbreakCaseReportUID = NULL,
                                                @OutbreakCaseStatusTypeID = NULL,
                                                @OutbreakCaseQuestionnaireObservationID = NULL,
                                                @PrimaryCaseIndicator = 0;
        END;

        SELECT @ReturnCode AS ReturnCode,
               @ReturnMessage AS ReturnMessage;
    END TRY
    BEGIN CATCH
        THROW;
    END CATCH
END
GO
PRINT N'Altering Procedure [dbo].[USP_OMM_Contact_Set]...';


GO
-- ================================================================================================
-- Name: USP_OMM_Contact_Set
-- Description: Inserts or updates an outbreak contact.
--          
-- Author: Doug Albanese
-- Revision History:
-- Name             Date		Change Detail
-- ----------------	----------	----------------------------------------------------------
-- Doug Albanese    05/29/2020	Correction to create copy of contact after it has been 
--								updated.
-- Stephen Long     05/02/2022	Updated parameters to use admin levels.
-- Stephen Long     06/05/2022	Added logic to handle convert to case status.
-- Stephen Long     06/23/2022	Added contact tracing observation identifier to the update.
-- Stephen Long     06/27/2022	Set classification type to Suspect on contact conversion.
-- Doug Albanese	08/15/2022	Changed OutbreakCaseContactId to CaseContactID
-- Doug Albanese	08/24/2022	Converted HumanId to HumanID, HumanMasterId to HumanMasterID, for 
--                              the json blob conversion to a table.
-- Doug Albanese	08/24/2022	Change the Case Status to "Convert To Case", when creating a new 
--                              case.
-- Stephen Long     09/20/2022  Made all identifiers use "ID".  Some fields were not saving 
--                              correctly with the case sensitivity.
-- Stephen Long     10/25/2022  Added farm master ID and case contact ID fields.
-- ================================================================================================
ALTER PROCEDURE [dbo].[USP_OMM_Contact_Set]
(
    @Contacts NVARCHAR(MAX),
    @AuditUserName NVARCHAR(200)
)
AS
BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        DECLARE @ReturnCode INT = 0,
                @ReturnMessage NVARCHAR(MAX) = 'SUCCESS',
                @AddressID BIGINT = NULL,
                @ForeignAddressIndicator BIT = 0,
                @OutbreakID BIGINT = NULL,
                @HumanMasterID BIGINT = NULL,
                @HumanID BIGINT = NULL,
                @FarmMasterID BIGINT = NULL, 
                @CaseContactID BIGINT,
                @OutbreakCaseReportUID BIGINT = NULL,
                @ContactRelationshipTypeID BIGINT = NULL,
                @DateOfLastContact DATETIME = NULL,
                @LocationID BIGINT = NULL,
                @Street NVARCHAR(200) = NULL,
                @PostalCode NVARCHAR(200) = NULL,
                @Building NVARCHAR(200) = NULL,
                @House NVARCHAR(200) = NULL,
                @Apartment NVARCHAR(200) = NULL,
                @ForeignAddressString NVARCHAR(200) = NULL,
                @ContactPhone NVARCHAR(200) = NULL,
                @PlaceOfLastContact NVARCHAR(200) = NULL,
                @Comment NVARCHAR(500) = NULL,
                @ContactStatusID BIGINT = NULL,
                @RowStatus INT = 0,
                @ContactTracingObservationID BIGINT = NULL;

        DECLARE @SuppressSelect TABLE
        (
            ReturnCode INT NULL,
            ReturnMessage NVARCHAR(MAX) NULL
        );
        DECLARE @ContactsTemp TABLE
        (
            CaseContactID BIGINT NOT NULL,
            OutbreakCaseReportUID BIGINT NULL,
            ContactRelationshipTypeID BIGINT NULL,
            OutbreakID BIGINT NULL,
            HumanMasterID BIGINT NULL,
            HumanID BIGINT NULL,
            FarmMasterID BIGINT NULL, 
            DateOfLastContact DATETIME NULL,
            AddressID BIGINT NULL,
            LocationID BIGINT NULL,
            Street NVARCHAR(200) NULL,
            PostalCode NVARCHAR(200) NULL,
            Building NVARCHAR(200) NULL,
            House NVARCHAR(200) NULL,
            Apartment NVARCHAR(200) NULL,
            ForeignAddressString NVARCHAR(200) NULL,
            ContactPhone NVARCHAR(200) NULL,
            PlaceOfLastContact NVARCHAR(200) NULL,
            Comment NVARCHAR(500) NULL,
            ContactStatusID BIGINT NULL,
            ContactTracingObservationID BIGINT NULL,
            RowStatus INT NOT NULL
        );

        BEGIN TRANSACTION;

        INSERT INTO @ContactsTemp
        SELECT *
        FROM
            OPENJSON(@Contacts)
            WITH
            (
                CaseContactID BIGINT,
                OutbreakCaseReportUID BIGINT,
                ContactRelationshipTypeID BIGINT,
                OutbreakID BIGINT,
                HumanMasterID BIGINT,
                HumanID BIGINT,
                FarmMasterID BIGINT, 
                DateOfLastContact DATETIME2,
                AddressID BIGINT,
                LocationID BIGINT,
                Street NVARCHAR(200),
                PostalCode NVARCHAR(200),
                Building NVARCHAR(200),
                House NVARCHAR(200),
                Apartment NVARCHAR(200),
                ForeignAddressString NVARCHAR(200),
                ContactPhone NVARCHAR(200),
                PlaceOfLastContact NVARCHAR(200),
                Comment NVARCHAR(500),
                ContactStatusID BIGINT,
                ContactTracingObservationID BIGINT,
                RowStatus INT
            );

        WHILE EXISTS (SELECT * FROM @ContactsTemp)
        BEGIN
            SELECT TOP 1
                @CaseContactID = CaseContactID,
                @OutbreakCaseReportUID = OutbreakCaseReportUID,
                @ContactRelationshipTypeID = ContactRelationshipTypeID,
                @OutbreakID = OutbreakID,
                @HumanMasterID = HumanMasterID,
                @HumanID = HumanID,
                @FarmMasterID = FarmMasterID, 
                @DateOfLastContact = DateOfLastContact,
                @AddressID = AddressID,
                @LocationID = LocationID,
                @Street = Street,
                @PostalCode = PostalCode,
                @Building = Building,
                @House = House,
                @Apartment = Apartment,
                @ForeignAddressString = ForeignAddressString,
                @ContactPhone = ContactPhone,
                @PlaceOfLastContact = PlaceOfLastContact,
                @Comment = Comment,
                @ContactStatusID = ContactStatusID,
                @ContactTracingObservationID = ContactTracingObservationID,
                @RowStatus = RowStatus
            FROM @ContactsTemp;

            IF @ForeignAddressString IS NOT NULL
            BEGIN
                SET @ForeignAddressIndicator = 1;
            END

            INSERT INTO @SuppressSelect
            EXECUTE dbo.USSP_GBL_ADDRESS_SET @AddressID OUTPUT,
                                             NULL,
                                             NULL,
                                             NULL,
                                             @LocationID,
                                             @Apartment,
                                             @Building,
                                             @Street,
                                             @House,
                                             @PostalCode,
                                             NULL,
                                             NULL,
                                             NULL,
                                             NULL,
                                             NULL,
                                             NULL,
                                             NULL,
                                             @ForeignAddressIndicator,
                                             @ForeignAddressString,
                                             0, --@blnGeoLocationShared
                                             @AuditUserName,
                                             @ReturnCode OUTPUT,
                                             @ReturnMessage OUTPUT;

            UPDATE dbo.OutbreakCaseContact
            SET ContactRelationshipTypeID = @ContactRelationshipTypeID,
                DateOfLastContact = @DateOfLastContact,
                PlaceOfLastContact = @PlaceOfLastContact,
                idfHuman = @HumanID,
                CommentText = @Comment,
                ContactStatusID = @ContactStatusID,
                ContactTracingObservationID = @ContactTracingObservationID, 
                intRowStatus = @RowStatus,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE OutbreakCaseContactUID = @CaseContactID;

            UPDATE dbo.tlbHuman
            SET idfCurrentResidenceAddress = @AddressID,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE idfHuman = @HumanID;

            UPDATE dbo.HumanAddlInfo
            SET ContactPhoneNbr = @ContactPhone,
                AuditUpdateUser = @AuditUserName,
                AuditUpdateDTM = GETDATE()
            WHERE HumanAdditionalInfo = @HumanID;

            -- Convert to case, then create a human or veterinary case.
            IF @ContactStatusID = 10517002
            BEGIN
                --INSERT INTO @SuppressSelect
                EXECUTE dbo.USSP_OMM_CONVERT_CONTACT_Set @OutbreakID,
                                                         @CaseContactID, 
                                                         @HumanMasterID,
                                                         @HumanID, 
                                                         @FarmMasterID, 
                                                         @AddressID,
                                                         @LocationID,
                                                         @Street,
                                                         @Apartment,
                                                         @Building,
                                                         @House,
                                                         @PostalCode,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         10109001, -- In Process
														 --10517002, --Convert To Case
                                                         380000000, -- Suspect
                                                         @AuditUserName;
            END

            SET ROWCOUNT 1;
            DELETE FROM @ContactsTemp;
            SET ROWCOUNT 0;
        END;

        IF @@TRANCOUNT > 0
            COMMIT TRANSACTION;

        SELECT @ReturnCode ReturnCode,
               @ReturnMessage ReturnMessage;
    END TRY
    BEGIN CATCH
        IF @@TRANCOUNT > 0
            ROLLBACK TRANSACTION;

        THROW;
    END CATCH
END
GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_Case_Set]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_Case_Set]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_OMM_VETERINARY_DISEASE_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_OMM_VETERINARY_DISEASE_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_VET_DISEASE_REPORT_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_VET_DISEASE_REPORT_SET]';


GO
PRINT N'Refreshing Procedure [dbo].[USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[USP_ADMIN_DEDUPLICATION_VET_DISEASE_Report_SET]';


GO
PRINT N'Update complete.';


GO
